language: go_test.go
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    sort.Strings(lst)\n    for i := range lst {\n        result[i] = lst[i]\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppbcu2yft_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    i := 0\n    for _, word := range lst {\n        if word != \"\" {\n     \
    \       i += len(word)\n        }\n    }\n    for _, word := range lst {\n   \
    \     if word != \"\" {\n            i += len(word)\n        }\n    }\n    for\
    \ _, word := range lst {\n        if word != \"\" {\n            i += len(word)\n\
    \        }\n    }\n    for _, word := range lst {\n        if word != \"\" {\n\
    \            i += len(word)\n        }\n    }\n    for _, word := range lst {\n\
    \        if word != \"\" {\n            i += len(word)\n        }\n    }\n   \
    \ for _, word := range lst {\n        if word != \"\" {\n            i += len(word)\n\
    \        }\n    }\n    for _, word := range lst {\n        if word != \"\" {\n\
    \            i += len(word)\n        }\n    }\n    for _, word := range lst {\n\
    \        if word != \"\" {\n            i += len(word)\n        }\n    }\n   \
    \ for _, word := range lst {\n        if word != \"\" {\n            i += len(word)\n\
    \        }\n    }\n    for _, word := range lst {\n        if word != \"\" {\n\
    \            i += len(word)\n        }\n    }\n    for _, word := range lst {\n\
    \        if word != \"\" {\n            i += len(word)\n        }\n    }\n   \
    \ for _, word := range lst {\n        if word != \"\" {\n            i += len(word)\n\
    \        }\n    }\n    for _, word := range lst {\n        if word != \"\" {\n\
    \            i += len(word)\n        }\n    }\n    for _, word := range lst {\n\
    \        if word != \"\" {\n            i += len(word)\n        }\n    }\n   \
    \ for _, word := range lst {\n        if word != \"\" {\n            i += len(word)\n\
    \        }\n    }\n    for _, word := range lst {\n        if word != \"\" {\n\
    \            i += len(word)\n        }\n    }\n    for _, word := range lst {\n\
    \        if word != \"\" {\n            i += len(word)\n        }\n    }\n   \
    \ for _, word := range lst {\n        if word != \"\" {\n            i += len(word)\n\
    \        }\n    }\n    for _, word := range lst {\n        if word != \"\" {\n\
    \            i += len(word)\n        }\n    }\n    for _, word := range lst {\n\
    \        if word != \"\" {\n            i += len(word)\n        }\n    }\n   \
    \ for _, word := range lst {\n        if word != \"\" {\n            \nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprlo3177u_test.go:125:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    var result []string\n    for\
    \ _, word := range lst {\n        if word == \"\" {\n            continue\n  \
    \      }\n        length := len(word)\n        if length%2 == 1 {\n          \
    \  word = word[:length-1]\n        }\n        sort.Strings(lst)\n        sort.Strings(result)\n\
    \        if word == result[0] {\n            continue\n        }\n        result\
    \ = append(result, word)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_hyncim5_test.go:29:9: undefined: sort

    /tmp/tmp_hyncim5_test.go:30:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp9za91hfq_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp9za91hfq_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp9za91hfq_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9za91hfq_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp9za91hfq_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp9za91hfq_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    i := 0\n    for _, word := range lst {\n        if word[len(word)%2] != 0\
    \ {\n            result[i] = word\n            i++\n        }\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa05bdhrk_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    i := 0\n    for _, word := range lst {\n        if word != \"\" {\n     \
    \       result[i] = word\n            i++\n        }\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqie69orc_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    i := 0\n    for _, word := range lst {\n        if word != \"\" {\n     \
    \       result[i] = word\n            i++\n        }\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqie69orc_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    \n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmput7j1753_test.go:21:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := []string{}\n    for\
    \ _, word := range lst {\n        if word != \"\" {\n            result += []string{word}\n\
    \        }\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp13yzcett_test.go:23:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmp13yzcett_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, 0)\n\
    \    result := append(result, lst...)\n    sort.Strings(result)\n    return result\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_uh8_9x7_test.go:21:12: no new variables on left side of :=

    /tmp/tmp_uh8_9x7_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5oew7y1l_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    sort.Strings(lst)\n    result\
    \ := make([]string, len(lst))\n    i := 0\n    for _, word := range lst {\n  \
    \      if i % 2 == 0 {\n            word = strings.ToLower(word)\n        }\n\
    \        result[i] = word\n        i++\n    }\n    return sort.Strings(result)\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ladvk6c_test.go:20:5: undefined: sort

    /tmp/tmp6ladvk6c_test.go:25:20: undefined: strings

    /tmp/tmp6ladvk6c_test.go:30:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    sort.Strings(lst)\n    for i := range lst {\n        result[i] = lst[i]\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppbcu2yft_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    var result []string\n    for\
    \ _, v := range lst {\n        if v%2 == 1 {\n            continue\n        }\n\
    \        result = append(result, v)\n    }\n    sort.Strings(result)\n    return\
    \ result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph9s2dvv__test.go:22:12: invalid operation: v % 2 (mismatched types string
    and untyped int)

    /tmp/tmph9s2dvv__test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := []string{}\n    for\
    \ _, s := range lst {\n        if len(s)%2 != 0 {\n            continue\n    \
    \    }\n        sort.Strings(lst)\n    }\n    for _, s := range lst {\n      \
    \  result = append(result, s)\n    }\n    sort.Strings(result)\n    return result\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9y1awp_3_test.go:25:9: undefined: sort

    /tmp/tmp9y1awp_3_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    \n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmput7j1753_test.go:21:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    var result []string\n    for\
    \ _, word := range lst {\n        if word != \"\" {\n            result += append(result,\
    \ word)\n        }\n    }\n    sort.Strings(result)\n    return result\n}\n\n\
    func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo66ffoh7_test.go:23:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmpo66ffoh7_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    sort.Sort(sort.Reverse(sort.StringSlice(lst)))\n\
    \    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo8dulvnx_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := []string{}\n    for\
    \ _, word := range lst {\n        if len(word) % 2 != 0 {\n            continue\
    \ // skip odd length words\n        }\n        sort.Strings(lst)\n        result\
    \ += lst\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1m5zvn_z_test.go:25:9: undefined: sort

    /tmp/tmp1m5zvn_z_test.go:26:9: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmp1m5zvn_z_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    i := 0\n    for _, word := range lst {\n        if word[len(word)-1] == '.'\
    \ {\n            word = word[:len(word)-1]\n        }\n        if i+1 < len(lst)\
    \ {\n            if word[len(word)-1] == '.' {\n                word = word[:len(word)-1]\n\
    \            }\n            if word[len(word)-1] == '!' {\n                word\
    \ = word[:len(word)-1]\n            }\n            if word[len(word)-1] == '?'\
    \ {\n                word = word[:len(word)-1]\n            }\n            if\
    \ word[len(word)-1] == '.' {\n                word = word[:len(word)-1]\n    \
    \        }\n            if word[len(word)-1] == '-' {\n                word =\
    \ word[:len(word)-1]\n            }\n            if word[len(word)-1] == '.' {\n\
    \                word = word[:len(word)-1]\n            }\n            if word[len(word)-1]\
    \ == '.' {\n                word = word[:len(word)-1]\n            }\n       \
    \     if word[len(word)-1] == '.' {\n                word = word[:len(word)-1]\n\
    \            }\n            if word[len(word)-1] == '.' {\n                word\
    \ = word[:len(word)-1]\n            }\n            if word[len(word)-1] == '.'\
    \ {\n                word = word[:len(word)-1]\n            }\n            if\
    \ word[len(word)-1] == '.' {\n                word = word[:len(word)-1]\n    \
    \        }\n            if word[len(word)-1] == '.' {\n                word =\
    \ word[:len(word)-1]\n            }\n            if word[len(word)-1] == '.' {\n\
    \                word = word[:len(word)-1]\n            }\n            if word[len(word)-1]\
    \ == '.' {\n                word = word[:len(word)-1]\n            }\n       \
    \     if word[len(word)-1] == '.' {\n                word = word[:len(word)-1]\n\
    \            }\n            if word[len(word)-1] == '.' {\n                word\
    \ = word[:len(word)-1]\n            }\n            if word[len(word)-1] == '.'\
    \ {\n                word = word[:len(word)-1]\n            }\n            if\
    \ word[len(word)-1] == '.' {\n                word = word[:len(word)-1]\n    \
    \        }\n            if word[len(word)-1] == '.' {\n                word =\
    \ word[:len(word)-1]\n            }\n            if word[len(word)-1] == '.' {\n\
    \                word = word[:len(word)-1]\n            }\n            if word[len(word)-1]\
    \ == '.' {\n                word = word[:len(word)-1]\n            }\n       \
    \     if word[len(word)-1] == '.' {\n                word = word[:len(word)-1]\n\
    \            }\n            if word[len(word)-1] == '.' {\n                word\
    \ = word[:len(word)-1]\n            }\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpafqp963j_test.go:97:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    i := 0\n    for _, word := range lst {\n        if i % 2 == 0 {\n       \
    \     result[i] = word\n            i++\n        } else {\n            j = i\n\
    \            for {\n                if j == len(lst) {\n                    break\n\
    \                }\n                if lst[j] < word {\n                    j++\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n            result[i] = lst[j]\n            i++\n        }\n    }\n\
    \    for j := 0; j < i; j++ {\n        result[j] = lst[j]\n    }\n    for i :=\
    \ 0; i < len(result); i++ {\n        if result[i] < result[i+1] {\n          \
    \  j := i\n            for {\n                if j == len(result)-1 {\n      \
    \              break\n                }\n                if result[j] > result[j+1]\
    \ {\n                    j++\n                } else {\n                    break\n\
    \                }\n            }\n            result[i], result[j] = result[j],\
    \ result[i]\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr545nclb_test.go:27:13: undefined: j

    /tmp/tmpr545nclb_test.go:29:20: undefined: j

    /tmp/tmpr545nclb_test.go:32:24: undefined: j

    /tmp/tmpr545nclb_test.go:33:21: undefined: j

    /tmp/tmpr545nclb_test.go:38:29: undefined: j

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    for i := range lst {\n        result[i] = lst[i]\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3e7bpf9n_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    i := 0\n    for _, word := range lst {\n        if word != \"\" {\n     \
    \       result[i] = word\n            i++\n        }\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqie69orc_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp9za91hfq_test.go:46: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp9za91hfq_test.go:46:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp9za91hfq_test.go:46: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9za91hfq_test.go:46:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp9za91hfq_test.go:46: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp9za91hfq_test.go:46:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := []string{}\n    for\
    \ _, word := range lst {\n        if len(word) % 2 == 1 {\n            fmt.Println(word)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "a\naaa\nb\nd\nb\nc\na\nd\na\na\nb\nb\nc\nc\na\n--- FAIL: TestSorted_List_Sum\
    \ (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp8eerjfia_test.go:48:\
    \ expected '[aa]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n\
    \        tmp8eerjfia_test.go:48: expected '[AI asdf school]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8eerjfia_test.go:48:\
    \ expected '[abcd dcba]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmp8eerjfia_test.go:48: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8eerjfia_test.go:48:\
    \ expected '[cc dd aaaa bbbb]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    i := 0\n    for _, word := range lst {\n        if wordLen := len(word);\
    \ wordLen % 2 != 0 {\n            result[i] = word\n            i++\n        }\
    \ else {\n            j := i\n            for ; j < len(result) && wordLen > len(result[j]);\
    \ j++ {\n            }\n            result[j] = word\n        }\n    }\n    for\
    \ i := 0; i < len(result); i++ {\n        result[i], result[len(result)-1] = result[len(result)-1],\
    \ result[i]\n    }\n    for i := 0; i < len(result); i++ {\n        result[i],\
    \ result[len(result)-1] = result[len(result)-1], result[i]\n    }\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i], result[len(result)-1] = result[len(result)-1],\
    \ result[i]\n    }\n    for i := 0; i < len(result); i++ {\n        result[i],\
    \ result[len(result)-1] = result[len(result)-1], result[i]\n    }\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i], result[len(result)-1] = result[len(result)-1],\
    \ result[i]\n    }\n    for i := 0; i < len(result); i++ {\n        result[i],\
    \ result[len(result)-1] = result[len(result)-1], result[i]\n    }\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i], result[len(result)-1] = result[len(result)-1],\
    \ result[i]\n    }\n    for i := 0; i < len(result); i++ {\n        result[i],\
    \ result[len(result)-1] = result[len(result)-1], result[i]\n    }\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i], result[len(result)-1] = result[len(result)-1],\
    \ result[i]\n    }\n    for i := 0; i < len(result); i++ {\n        result[i],\
    \ result[len(result)-1] = result[len(result)-1], result[i]\n    }\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i], result[len(result)-1] = result[len(result)-1],\
    \ result[i]\n    }\n    for i := 0; i < len(result); i++ {\n        result[i],\
    \ result[len(result)-1] = result[len(result)-1], result[i]\n    }\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i], result[len(result)-1] = result[len(result)-1],\
    \ result[i]\n    }\n    for i := 0; i < len(result); i++ {\n        result[i],\
    \ result[len(result)-1] = result[len(result)-1], result[i]\n    }\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i], result[len(result)-1] = result[len(result)-1],\
    \ result[i]\n    }\n    for i := 0; i < len(result); i++ {\n        result\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpop9x651i_test.go:80:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    \n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmput7j1753_test.go:21:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    var result []string\n    for\
    \ _, word := range lst {\n        if word != \"\" {\n            sort.Strings(lst)\n\
    \            sort.Strings(result)\n            result := append(result, word)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwd0s1zhb_test.go:23:13: undefined: sort

    /tmp/tmpwd0s1zhb_test.go:24:13: undefined: sort

    /tmp/tmpwd0s1zhb_test.go:25:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    i := 0\n    for _, word := range lst {\n        if word[len(word)-1] == '.'\
    \ {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '!' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '?' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '.' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '?' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '!' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '.' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5svc9vwl_test.go:95:33: rune literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    var result []string\n    for\
    \ _, word := range lst {\n        if word != \"\" {\n            result := append(result,\
    \ word)\n        }\n    }\n    sort.Strings(result)\n    return result\n}\n\n\
    func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps_tb5kpm_test.go:23:13: result declared but not used

    /tmp/tmps_tb5kpm_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := []string{}\n    for\
    \ _, word := range lst {\n        if word != \"\" {\n            result += append(result,\
    \ word)\n        }\n    }\n    sort.Strings(result)\n    return result\n}\n\n\
    func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9hph4jl9_test.go:23:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmp9hph4jl9_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    sort.Sort(sort.Reverse(sort.StringSlice(lst)))\n    for i, v := range lst\
    \ {\n        result[i] = v\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp20pdiqu9_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := []string{}\n    for\
    \ _, word := range lst {\n        if len(word) % 2 == 1 {\n            continue\n\
    \        }\n        result := append(result, word)\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjsrz8lv0_test.go:25:9: result declared but not used

    /tmp/tmpjsrz8lv0_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    i := 0\n    for _, word := range lst {\n        if i % 2 == 0 {\n       \
    \     continue\n        }\n        result[i] = word\n        i++\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0a7ukaiy_test.go:29:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := []string{}\n    for\
    \ _, word := range lst {\n        if word != \"\" {\n            result += []string{word}\n\
    \        }\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp13yzcett_test.go:23:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmp13yzcett_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    var res []string\n    for _,\
    \ v := range lst {\n        if v%2 == 1 {\n            continue\n        }\n \
    \       res = append(res, v)\n    }\n    sort.Strings(res)\n    return res\n}\n\
    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8ktexaif_test.go:22:12: invalid operation: v % 2 (mismatched types string
    and untyped int)

    /tmp/tmp8ktexaif_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    i := 0\n    for _, word := range lst {\n        if word != \"\" {\n     \
    \       result[i] = word\n            i++\n        }\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqie69orc_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := []string{}\n    for\
    \ _, word := range lst {\n        if word != \"\" {\n            result += []string{word}\n\
    \        }\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp13yzcett_test.go:23:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmp13yzcett_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := []string{}\n    for\
    \ _, word := range lst {\n        if word != \"\" {\n            result += []string{word}\n\
    \        }\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp13yzcett_test.go:23:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmp13yzcett_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := []string{}\n    for\
    \ _, word := range lst {\n        if word != \"\" {\n            result += []string{word}\n\
    \        }\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp13yzcett_test.go:23:13: invalid operation: operator + not defined on result
    (variable of type []string)

    /tmp/tmp13yzcett_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    sort.Strings(lst)\n    for i := 0; i < len(lst); i++ {\n        if lst[i].Len()\
    \ % 2 != 0 {\n            continue\n        }\n        j := i\n        for ; j\
    \ < len(lst); j++ {\n            if lst[j].Len() > lst[i].Len() {\n          \
    \      break\n            }\n            if lst[j].Len() == lst[i].Len() {\n \
    \               if lst[j].Less(lst[i]) {\n                    result = append(result,\
    \ lst[j])\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7cbh398i_test.go:21:5: undefined: sort

    /tmp/tmp7cbh398i_test.go:23:19: lst[i].Len undefined (type string has no field
    or method Len)

    /tmp/tmp7cbh398i_test.go:28:23: lst[j].Len undefined (type string has no field
    or method Len)

    /tmp/tmp7cbh398i_test.go:28:38: lst[i].Len undefined (type string has no field
    or method Len)

    /tmp/tmp7cbh398i_test.go:31:23: lst[j].Len undefined (type string has no field
    or method Len)

    /tmp/tmp7cbh398i_test.go:31:39: lst[i].Len undefined (type string has no field
    or method Len)

    /tmp/tmp7cbh398i_test.go:32:27: lst[j].Less undefined (type string has no field
    or method Less)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := []string{}\n    for\
    \ _, word := range lst {\n        if word != \"\" {\n            result += word\n\
    \        }\n    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9zaed_8j_test.go:23:13: invalid operation: result += word (mismatched
    types []string and string)

    /tmp/tmp9zaed_8j_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpkoql79fb_test.go:43: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpkoql79fb_test.go:43:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073873
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, 0)\n\
    \    seen := make(map[string]bool)\n    for _, word := range lst {\n        if\
    \ _, ok := seen[word]; !ok {\n            seen[word] = true\n            result\
    \ = append(result, word)\n        }\n    }\n    for _, word := range result {\n\
    \        delete(seen, word)\n    }\n    sort.Strings(result)\n    return result\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxifaj6b8_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    var result []string\n    for\
    \ _, word := range lst {\n        if word == \"\" {\n            continue\n  \
    \      }\n        length := len(word)\n        if length%2 == 1 {\n          \
    \  fmt.Println(length)\n            fmt.Println(word)\n            fmt.Println(result)\n\
    \            fmt.Println(len(result))\n            fmt.Println(len(lst))\n   \
    \         fmt.Println(len(lst))\n            fmt.Println(len(lst))\n         \
    \   fmt.Println(len(lst))\n            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n\
    \            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n      \
    \      fmt.Println(len(lst))\n            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n\
    \            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n      \
    \      fmt.Println(len(lst))\n            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n\
    \            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n      \
    \      fmt.Println(len(lst))\n            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n\
    \            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n      \
    \      fmt.Println(len(lst))\n            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n\
    \            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n      \
    \      fmt.Println(len(lst))\n            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n\
    \            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n      \
    \      fmt.Println(len(lst))\n            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n\
    \            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n      \
    \      fmt.Println(len(lst))\n            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n\
    \            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n      \
    \      fmt.Println(len(lst))\n            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n\
    \            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n      \
    \      fmt.Println(len(lst))\n            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n\
    \            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n      \
    \      fmt.Println(len(lst))\n            fmt.Println(len(lst))\n            fmt.Println(len(lst))\n\
    \            fmt.\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1rvpngau_test.go:88:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := []string{}\n    for\
    \ _, word := range lst {\n        if len(word) % 2 == 1 {\n            fmt.Println(word)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "a\naaa\nb\nd\nb\nc\na\nd\na\na\nb\nb\nc\nc\na\n--- FAIL: TestSorted_List_Sum\
    \ (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp8eerjfia_test.go:48:\
    \ expected '[aa]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n\
    \        tmp8eerjfia_test.go:48: expected '[AI asdf school]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8eerjfia_test.go:48:\
    \ expected '[abcd dcba]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmp8eerjfia_test.go:48: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8eerjfia_test.go:48:\
    \ expected '[cc dd aaaa bbbb]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    i := 0\n    for _, word := range lst {\n        if word[len(word)%2] == 0\
    \ {\n            result[i] = word\n            i++\n        }\n    }\n    sort.Strings(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz7mjcxnb_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    var result []string\n    for\
    \ _, word := range lst {\n        if word == \"\" {\n            continue\n  \
    \      }\n        if word == \"the\" {\n            result = append(result, \"\
    the\")\n            continue\n        }\n        length := len(word)\n       \
    \ if length%2 == 1 {\n            length--\n        }\n        i := 0\n      \
    \  for ; i < length; i++ {\n            if word[i] < word[i+1] {\n           \
    \     break\n            }\n        }\n        result = append(result, word[:i+1])\n\
    \    }\n    sort.Strings(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwz48u295_test.go:41:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpv26bl0o2_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpv26bl0o2_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    result := make([]string, len(lst))\n\
    \    i := 0\n    for _, word := range lst {\n        if word[len(word)-1] == '.'\
    \ {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '!' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '?' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '.' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '.' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '.' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '.' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '.' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '.' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '.' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '.' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '.' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '.' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '-' {\n            word = word[:len(word)-1]\n        }\n        if word[len(word)-1]\
    \ == '.\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7h0w_b9__test.go:95:33: rune literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074123
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8i_x1tv__test.go:44: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8i_x1tv__test.go:44:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074122
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    func sorted_list_sum(lst []string) []string {\n    // Write your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpprxjs93i_test.go:275:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074121
