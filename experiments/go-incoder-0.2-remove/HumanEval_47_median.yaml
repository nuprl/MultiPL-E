name: HumanEval_47_median
language: go_test.go
prompt: "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ median of elements in the list l.\nfunc median(l []int) float64 {\n"
tests: "func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual:\
  \ candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}),\
  \ expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n    \
  \ { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor\
  \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Ints(l)\n\
    \    return l[len(l)-1]\n}\n", "    length := len(l)\n    if length%2 == 0 {\n\
    \        return l[(length-1)/2]\n    }\n    middle := length/2\n    return l[middle]\n\
    }\n", "    if len(l) == 0 {\n        return 0\n    }\n    sort.Ints(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n", "    if len(l) == 0 {\n        return float64(0)\n    }\n\
    \    sort.Ints(l)\n    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n\
    \    }\n    return ((l[n/2] + l[n/2-1]) / 2)\n}\n", "    if len(l) == 0 {\n  \
    \      return 0.0\n    }\n    sort.Ints(l)\n    length := len(l)\n    if length%2\
    \ == 0 {\n        return l[(length-1)/2]\n    }\n    return (l[length-1] + l[length/2])\
    \ / 2.0\n}\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    middle := length/2\n    return l[middle]\n}\n", "    if len(l) ==\
    \ 0 {\n        return float64(0)\n    }\n    length := len(l)\n    middle := length/2\n\
    \    if length%2 == 0 {\n        return float64(l[middle])\n    }\n    left :=\
    \ median(l[0:middle])\n    right := median(l[middle+1:])\n    return left + right\n\
    }\n", "    if len(l) == 0 {\n        return 0.0\n    }\n    length := len(l)\n\
    \    middle := length / 2\n    if length%2 == 0 {\n        return l[middle]\n\
    \    }\n    return 0.5 * (l[middle-1] + l[middle])\n}\n", "    length := len(l)\n\
    \    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n    middle :=\
    \ length/2\n    return l[middle]\n}\n", "    length := len(l)\n    if length%2\
    \ == 0 {\n        return l[(length-1)/2]\n    } else {\n        return (l[length/2]\
    \ + l[length/2-1]) / 2\n    }\n}\n", "    length := len(l)\n    if length%2 ==\
    \ 0 {\n        return l[(length-1)/2]\n    }\n    length /= 2\n    return l[length-1]\
    \ + l[length]/2\n}\n", "    if len(l) == 0 {\n        return float64(0)\n    }\n\
    \    sort.Ints(l)\n    length := len(l)\n    if length%2 == 0 {\n        return\
    \ l[(length-1)/2]\n    }\n    return (l[(length-1)/2] + l[length/2]) / 2\n}\n",
  "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    } else {\n        return (l[(length-1)/2] + l[length/2]) / 2\n    }\n}\n",
  "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    } else {\n        return (l[(length-1)/2] + l[length/2]) / 2\n    }\n}\n",
  "    if len(l) == 0 {\n        return -1\n    }\n    sort.Ints(l)\n    length :=\
    \ len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n    middle\
    \ := length/2\n    return l[middle]\n}\n", "    if len(l) == 0 {\n        return\
    \ 0.0\n    }\n    length := len(l)\n    sorted := make([]int, length)\n    for\
    \ i := 0; i < length; i++ {\n        sorted[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sorted))\n\
    \    middle := length / 2\n    if length%2 == 0 {\n        return sorted[middle]\n\
    \    } else {\n        return (sorted[middle-1] + sorted[middle]) / 2\n    }\n\
    }\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return ((l[(length-1)/2] + l[(length-1)/2]) / 2)\n}\n", "    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n \
    \   middle := length/2\n    return l[middle]\n}\n", "    if len(l) == 0 {\n  \
    \      return 0.0\n    }\n    sort.Ints(l)\n    length := len(l)\n    if length%2\
    \ == 0 {\n        return l[(length-1)/2]\n    }\n    return l[(length-1)/2-1]\
    \ + l[(length-1)/2]\n}\n", "    if len(l) == 0 {\n        return float64(0)\n\
    \    }\n    sort.Ints(l)\n    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n\
    \    } else {\n        return ((l[n-1] + l[n/2]) / 2)\n    }\n}\n", "    if len(l)\
    \ == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n    n := len(l)\n    if\
    \ n%2 == 0 {\n        return l[n/2]\n    }\n    return ((l[n-1] + l[n/2]) / 2)\n\
    }\n", "    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Ints(l)\n\
    \    return l[len(l)-1]\n}\n", "    length := len(l)\n    if length%2 == 0 {\n\
    \        return l[(length-1)/2]\n    }\n    return ((l[(length-1)/2] + l[(length-1)/2])\
    \ / 2)\n}\n", "    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Ints(l)\n\
    \    length := len(l)\n    middle := length / 2\n    if length%2 == 0 {\n    \
    \    return float64(l[middle])\n    }\n    return float64(l[middle-1] + l[middle])/2\n\
    }\n", "    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Ints(l)\n\
    \    return l[len(l)/2]\n}\n", "    length := len(l)\n    if length%2 == 0 {\n\
    \        return l[(length-1)/2]\n    }\n    middle := length/2\n    left := l[0:middle]\n\
    \    right := l[middle:]\n    median := (left + right) / 2\n    return median\n\
    }\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return ((l[(length-1)/2] + l[(length-1)/2]) / 2)\n}\n", "    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    } else\
    \ {\n        return (l[(length-1)/2] + l[length/2]) / 2\n    }\n}\n", "    if\
    \ len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Ints(l)\n    n :=\
    \ len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    n /= 2\n    return\
    \ ((l[n-1] + l[n]) / 2)\n}\n", "    length := len(l)\n    if length%2 == 0 {\n\
    \        return l[(length-1)/2]\n    }\n    return l[(length-1)/2-1] + l[(length-1)/2]\n\
    }\n", "    if len(l) == 0 {\n        return 0\n    }\n    sort.Ints(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n    sort.Ints(l)\n\
    \    return l[len(l)-1]\n}\n", "    length := len(l)\n    if length%2 == 0 {\n\
    \        return l[(length-1)/2]\n    } else {\n        return (l[(length-1)/2]\
    \ + l[length/2]) / 2\n    }\n}\n", "    if len(l) == 0 {\n        return float64(0)\n\
    \    }\n    sort.Ints(l)\n    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n\
    \    }\n    return (l[n-1] + l[n/2]) / 2\n}\n", "    if len(l) == 0 {\n      \
    \  return float64(0)\n    }\n    sort.Ints(l)\n    return l[len(l)/2]\n}\n", " \
    \   if len(l) == 0 {\n        return 0\n    }\n    sort.Ints(l)\n    n := len(l)\n\
    \    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1] + l[n/2])\
    \ / 2\n}\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    } else {\n        return (l[(length-1)/2] + l[length/2]) / 2\n    }\n}\n",
  "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    half := length/2\n    return l[half] + l[half-1]\n}\n", "    if len(l)\
    \ == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n    return float64(sort.Ints(l)[len(sort.Ints(l)-1)])\n\
    }\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return ((l[length-1] + l[length/2]) / 2)\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0\n    }\n    sort.Ints(l)\n    n := len(l)\n    if n%2\
    \ == 0 {\n        return l[n/2]\n    }\n    return (l[n/2] + l[n/2]) / 2\n}\n",
  "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return ((l[length-1] + l[length/2]) / 2)\n}\n", "    length := len(l)\n\
    \    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n    half := length/2\n\
    \    return l[half] + l[half-1]\n}\n", "    length := len(l)\n    if length%2\
    \ == 0 {\n        return l[(length-1)/2]\n    }\n    middle := length/2\n    return\
    \ l[middle]\n}\n", "    length := len(l)\n    if length%2 == 0 {\n        return\
    \ l[(length-1)/2]\n    }\n    return ((l[(length-1)/2] + l[(length-1)/2]) / 2)\n\
    }\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return ((l[(length-1)/2] + l[(length-1)/2]) / 2)\n}\n", "    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n \
    \   middle := length/2\n    return l[middle]\n}\n", "    if len(l) == 0 {\n  \
    \      return 0.0\n    }\n    sort.Ints(l)\n    return l[len(l)/2]\n}\n", "  \
    \  length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return (l[(length-1)/2] + l[length/2]) / 2\n}\n", "    length := len(l)\n\
    \    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n    return l[(length-1)/2-1]\
    \ + l[(length-1)/2]\n}\n", "    length := len(l)\n    if length%2 == 0 {\n   \
    \     return l[(length-1)/2]\n    }\n    return l[(length-1)/2-1] + l[(length-1)/2]\n\
    }\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return (l[(length-1)/2] + l[length/2]) / 2\n}\n", "    if len(l) ==\
    \ 0 {\n        return float64(0)\n    }\n    length := len(l)\n    middle := length\
    \ / 2\n    if length%2 == 0 {\n        return l[middle]\n    }\n    return (l[middle-1]\
    \ + l[middle]) / 2\n}\n", "    length := len(l)\n    if length%2 == 0 {\n    \
    \    return l[(length-1)/2]\n    }\n    return ((l[length-1] + l[length/2]) /\
    \ 2)\n}\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    } else {\n        return (l[(length-1)/2] + l[length/2]) / 2\n    }\n}\n",
  "    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Ints(l)\n    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n \
    \   return ((l[length-1] + l[length/2]) / 2)\n}\n", "    if len(l) == 0 {\n  \
    \      return 0\n    }\n    length := len(l)\n    middle := length / 2\n    if\
    \ length%2 == 0 {\n        return l[middle]\n    }\n    return 0.5 * (l[middle-1]\
    \ + l[middle])\n}\n", "    length := len(l)\n    if length%2 == 0 {\n        return\
    \ l[(length-1)/2]\n    }\n    middle := length/2\n    return l[middle]\n}\n",
  "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    } else {\n        return (l[(length-1)/2] + l[length/2]) / 2\n    }\n}\n",
  "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return ((l[(length-1)/2] + l[(length-1)/2]) / 2)\n}\n", "    if len(l)\
    \ == 0 {\n        return float64(0)\n    }\n    sort.Ints(l)\n    n := len(l)\n\
    \    if n%2 == 0 {\n        return l[n/2]\n    }\n    return ((l[n-1] + l[n/2])\
    \ / 2)\n}\n", "    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Ints(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2]) / 2\n}\n", "    if len(l) == 0 {\n        return 0.0\n   \
    \ }\n    sort.Ints(l)\n    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n\
    \    }\n    return (l[n-1] + l[n/2]) / 2\n}\n", "    if len(l) == 0 {\n      \
    \  return 0.0\n    }\n    length := len(l)\n    middle := length/2\n    if length%2\
    \ == 0 {\n        return l[middle]\n    }\n    return 0.5 * (l[middle-1] + l[middle])\n\
    }\n", "    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n   \
    \ return l[len(l)/2]\n}\n", "    if len(l) == 0 {\n        return 0.0\n    }\n\
    \    sort.Ints(l)\n    n := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n\
    \    }\n    return (l[n/2] + l[n/2 - 1]) / 2\n}\n", "    length := len(l)\n  \
    \  if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n    return l[(length-1)/2-1]\
    \ + l[(length-1)/2]\n}\n", "    length := len(l)\n    if length%2 == 0 {\n   \
    \     return l[(length-1)/2]\n    } else {\n        return (l[(length-1)/2] +\
    \ l[length/2]) / 2\n    }\n}\n", "    if len(l) == 0 {\n        return math.NaN()\n\
    \    }\n    sort.Ints(l)\n    if len(l) == 1 {\n        return l[0]\n    }\n \
    \   middle := len(l) / 2\n    if middle == 0 {\n        return l[0]\n    }\n \
    \   if middle == 1 {\n        return l[1]\n    }\n    if l[middle] == l[middle-1]\
    \ {\n        return l[middle]\n    }\n    return l[middle-1]\n}\n", "    if len(l)\
    \ == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n    length := len(l)\n\
    \    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n    return l[(length-1)/2-1]\
    \ + l[(length-1)/2]\n}\n", "    length := len(l)\n    if length%2 == 0 {\n   \
    \     return l[(length-1)/2]\n    }\n    middle := length/2\n    return l[middle]\n\
    }\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    } else {\n        return (l[(length-1)/2] + l[length/2]) / 2\n    }\n}\n",
  "    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Ints(l)\n    return\
    \ l[len(l)-1]\n}\n", "    length := len(l)\n    if length%2 == 0 {\n        return\
    \ l[(length-1)/2]\n    } else {\n        return (l[(length-1)/2] + l[length/2])\
    \ / 2.0\n    }\n}\n", "    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ ((l[n-1] + l[n/2]) / 2.0)\n}\n", "    if len(l) == 0 {\n        return 0.0\n\
    \    }\n    length := len(l)\n    middle := length >> 1\n    if length%2 == 0\
    \ {\n        return l[middle]\n    }\n    return (l[middle-1] + l[middle]) / 2\n\
    }\n", "    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n   \
    \ n := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1]\
    \ + l[n/2]) / 2\n}\n", "    if len(l) == 0 {\n        return 0.0\n    }\n    length\
    \ := len(l)\n    middle := length/2\n    if length%2 == 0 {\n        return l[middle]\n\
    \    }\n    else if length%2 == 1 {\n        return l[middle-1] + l[middle]/2\n\
    \    }\n    return l[middle-1] + l[middle]/2\n}\n", "    if len(l) == 0 {\n  \
    \      return float64(0)\n    }\n    sort.Ints(l)\n    length := len(l)\n    if\
    \ length%2 == 0 {\n        return l[(length-1)/2]\n    }\n    return l[(length-1)/2]\
    \ + l[length/2]/2\n}\n", "    if len(l) == 0 {\n        return 0.0\n    }\n  \
    \  sort.Ints(l)\n    return l[len(l)/2]\n}\n", "    length := len(l)\n    if length%2\
    \ == 0 {\n        return l[(length-1)/2]\n    }\n    length /= 2\n    return l[length-1]\n\
    }\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return ((l[(length-1)/2] + l[(length-1)/2]) / 2)\n}\n", "    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    } else\
    \ {\n        return ((l[(length-1)/2] + l[(length-1)/2]) / 2)\n    }\n}\n", " \
    \   length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    } else {\n        return (l[(length-1)/2] + l[length/2]) / 2\n    }\n}\n",
  "    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n    n := len(l)\n\
    \    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return ((l[n-1] + l[n/2])\
    \ / 2.0)\n}\n", "    length := len(l)\n    if length%2 == 0 {\n        return\
    \ l[(length-1)/2]\n    } else {\n        return (l[(length-1)/2] + l[length/2])\
    \ / 2\n    }\n}\n", "    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n\
    \    n := len(l)\n    middle := n / 2\n    if n % 2 == 0 {\n        return l[middle]\n\
    \    }\n    return 0.5 * (l[middle-1] + l[middle])\n}\n", "    if len(l) == 0\
    \ {\n        return 0\n    }\n    sort.Ints(l)\n    return l[len(l)/2]\n}\n",
  "    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Ints(l)\n    n\
    \ := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n/2]\
    \ + l[n/2]) / 2\n}\n", "    if len(l) == 0 {\n        return math.NaN()\n    }\n\
    \    sort.Ints(l)\n    length := len(l)\n    if length%2 == 0 {\n        return\
    \ l[(length-1)/2]\n    }\n    return (l[length-1] + l[length/2]) / 2\n}\n", " \
    \   if len(l) == 0 {\n        return 0\n    }\n    length := len(l)\n    middle\
    \ := length / 2\n    if length%2 == 0 {\n        return l[middle]\n    }\n   \
    \ return 0.5 * (l[middle-1] + l[middle])\n}\n", "    if len(l) == 0 {\n      \
    \  return 0\n    }\n    sort.Ints(l)\n    return l[len(l)/2]\n}\n", "    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n \
    \   return ((l[length/2] + l[length/2-1]) / 2)\n}\n", "    length := len(l)\n\
    \    if length <= 0 {\n        return 0.0\n    }\n    middle := length / 2\n \
    \   if length%2 == 0 {\n        return l[middle]\n    }\n    left := median(l[0:middle])\n\
    \    right := median(l[middle+1:])\n    return left + right\n}\n", "    if len(l)\
    \ == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n    length := len(l)\n\
    \    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n    return l[(length-1)/2]\
    \ + l[length/2-1]\n}\n", "    length := len(l)\n    if length <= 1 {\n       \
    \ return l[0]\n    }\n    middle := length / 2\n    if length%2 == 0 {\n     \
    \   return l[middle]\n    } else {\n        return (l[middle-1] + l[middle]) /\
    \ 2\n    }\n}\n", "    if len(l) == 0 {\n        return math.NaN()\n    }\n  \
    \  sort.Ints(l)\n    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n \
    \   }\n    return (l[n-1] + l[n/2]) / 2\n}\n", "    if len(l) == 0 {\n       \
    \ return 0\n    }\n    length := len(l)\n    middle := length / 2\n    if length%2\
    \ == 0 {\n        return l[middle]\n    } else {\n        return (l[middle-1]\
    \ + l[middle]) / 2\n    }\n}\n", "    if len(l) == 0 {\n        return 0.0\n \
    \   }\n    sort.Ints(l)\n    return l[len(l)/2]\n}\n", "    length := len(l)\n\
    \    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n    return ((l[length-1]\
    \ + l[length/2]) / 2)\n}\n", "    if len(l) == 0 {\n        return 0.0\n    }\n\
    \    sort.Ints(l)\n    return l[len(l)/2]\n}\n", "    length := len(l)\n    if\
    \ length%2 == 0 {\n        return l[(length-1)/2]\n    }\n    return ((l[(length-1)/2]\
    \ + l[(length-1)/2]) / 2)\n}\n", "    if len(l) == 0 {\n        return 0.0\n \
    \   }\n    length := len(l)\n    middle := length / 2\n    if length%2 == 0 {\n\
    \        return l[middle]\n    }\n    left := median(l[:middle])\n    right :=\
    \ median(l[middle:])\n    return left + right\n}\n", "    if len(l) == 0 {\n \
    \       return float64(0)\n    }\n    sort.Ints(l)\n    n := len(l)\n    if n\
    \ % 2 == 0 {\n        return l[n/2]\n    }\n    return ((l[n/2] + l[n/2 - 1])\
    \ / 2)\n}\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return ((l[(length-1)/2] + l[(length-1)/2]) / 2)\n}\n", "    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n \
    \   return l[(length-1)/2] + l[length/2]/2\n}\n", "    if len(l) == 0 {\n    \
    \    return 0.0\n    }\n    length := len(l)\n    sorted := make([]int, length)\n\
    \    for i := 0; i < length; i++ {\n        sorted[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(sorted)))\n\
    \    middle := length >> 1\n    if length%2 == 0 {\n        return sorted[middle]\n\
    \    } else {\n        return (sorted[middle-1] + sorted[middle]) / 2\n    }\n\
    }\n", "    if len(l) == 0 {\n        return float64(0)\n    }\n    length := len(l)\n\
    \    middle := length / 2\n    if length%2 == 0 {\n        return l[middle]\n\
    \    }\n    else if length%2 == 1 {\n        return float64(l[middle-1] + l[middle])/2\n\
    \    }\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n    length := len(l)\n\
    \    length /= 2\n    if length%2 == 0 {\n        return l[length-1]\n    } else\
    \ {\n        return ((l[length-1] + l[length-2]) / 2)\n    }\n}\n", "    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n \
    \   middle := length/2\n    return l[middle]\n}\n", "    length := len(l)\n  \
    \  if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n    length /= 2\n\
    \    return l[length-1] + l[length]\n}\n", "    length := len(l)\n    if length%2\
    \ == 0 {\n        return l[(length-1)/2]\n    }\n    length /= 2\n    length +=\
    \ 1\n    return l[length-1]\n}\n", "    length := len(l)\n    if length <= 1 {\n\
    \        return l[0]\n    }\n    middle := length / 2\n    left := l[0:middle]\n\
    \    right := l[middle:]\n    median := median(left)\n    if median*median > length\
    \ {\n        return median\n    }\n    return median\n}\n", "    if len(l) ==\
    \ 0 {\n        return float64(0)\n    }\n    length := len(l)\n    middle := length\
    \ / 2\n    if length%2 == 0 {\n        return l[middle]\n    }\n    left := median(l\
    \ [:middle])\n    right := median(l [middle+1:])\n    return left + right\n}\n",
  "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    half := length/2\n    return l[half] + l[half-1]\n}\n", "    if len(l)\
    \ == 0 {\n        return -1\n    }\n    sort.Ints(l)\n    n := len(l)\n    if\
    \ n%2 == 0 {\n        return l[n/2]\n    }\n    return (l[n-1] + l[n/2]) / 2\n\
    }\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return ((l[length-1] + l[length/2]) / 2)\n}\n", "    if len(l) ==\
    \ 0 {\n        return float64(0)\n    }\n    sort.Ints(l)\n    n := len(l)\n \
    \   if n%2 == 0 {\n        return l[n/2]\n    }\n    return ((l[n-1] + l[n/2])\
    \ / 2)\n}\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    } else {\n        return (l[(length-1)/2] + l[length/2]) / 2\n    }\n}\n",
  "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return l[(length-1)/2-1] + l[(length-1)/2]\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n    n := len(l)\n    if n%2\
    \ == 0 {\n        return l[n/2]\n    }\n    return (l[n-1] + l[n/2]) / 2\n}\n",
  "    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n    n := len(l)\n\
    \    if n%2 == 0 {\n        return l[n/2]\n    }\n    return ((l[n-1] + l[n/2])\
    \ / 2)\n}\n", "    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n\
    \    n := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2 - 1]) / 2\n}\n", "    if len(l) == 0 {\n        return 0.0\n\
    \    }\n    sort.Ints(l)\n    return l[len(l)-1]\n}\n", "    length := len(l)\n\
    \    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n    middle :=\
    \ length/2\n    return l[middle]\n}\n", "    length := len(l)\n    if length%2\
    \ == 0 {\n        return l[(length-1)/2]\n    }\n    return l[((length-1)/2)-1]\
    \ + l[((length-1)/2)]\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n\
    \    sort.Ints(l)\n    n := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n\
    \    }\n    return (l[n-1] + l[n/2]) / 2\n}\n", "    if len(l) == 0 {\n      \
    \  return 0.0\n    }\n    sort.Ints(l)\n    length := len(l)\n    if length%2\
    \ == 0 {\n        return l[(length-1)/2]\n    }\n    middle := length/2\n    return\
    \ l[middle]\n}\n", "    if len(l) == 0 {\n        return float64(0)\n    }\n \
    \   length := len(l)\n    middle := length / 2\n    if length%2 == 0 {\n     \
    \   return l[middle]\n    } else {\n        return (l[middle-1] + l[middle]) /\
    \ 2\n    }\n}\n", "    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ (l[n/2] + l[n/2]) / 2\n}\n", "    length := len(l)\n    if length%2 == 0 {\n\
    \        return l[(length-1)/2]\n    } else {\n        return ((l[length-1] +\
    \ l[length/2]) / 2)\n    }\n}\n", "    if len(l) == 0 {\n        return float64(0)\n\
    \    }\n    sort.Ints(l)\n    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n\
    \    }\n    return (l[n/2] + l[n/2]) / 2\n}\n", "    length := len(l)\n    if\
    \ length <= 0 {\n        return 0.0\n    }\n    length /= 2\n    length += 1\n\
    \    length /= 2\n    length += 1\n    length /= 2\n    length += 1\n    length\
    \ /= 2\n    length += 1\n    length /= 2\n    length += 1\n    length /= 2\n \
    \   length += 1\n    length /= 2\n    length += 1\n    length /= 2\n    length\
    \ += 1\n    length /= 2\n    length += 1\n    length /= 2\n    length += 1\n \
    \   length /= 2\n    length += 1\n    length /= 2\n    length += 1\n    length\
    \ /= 2\n    length += 1\n    length /= 2\n    length += 1\n    length /= 2\n \
    \   length += 1\n    length /= 2\n    length += 1\n    length /= 2\n    length\
    \ += 1\n    length /= 2\n    length += 1\n    length /= 2\n    length += 1\n \
    \   length /= 2\n    length += 1\n    length /= 2\n    length += 1\n    length\
    \ /= 2\n    length += 1\n    length /= 2\n    length += 1\n    length /= 2\n \
    \   length += 1\n    length /= 2\n    length += 1\n    length /= 2\n    length\
    \ += 1\n    length /= 2\n    length += 1\n    length /= 2\n    length += 1\n \
    \   length /= 2\n    length += 1\n    length /= 2\n    length += 1\n    length\
    \ /= 2\n    length += 1\n    length /= 2\n    length += 1\n    length /= 2\n \
    \   length += 1\n    length /= 2\n    length += 1\n    length /= 2\n    length\
    \ += 1\n    length /= 2\n    length += 1\n    length /= 2\n    length += 1\n \
    \   length /= 2\n    length += 1\n    length /= 2\n    length += 1\n    length\
    \ /= 2\n    length += 1\n    length /= 2\n    length += 1\n    length /= 2\n \
    \   length += 1\n    length /= 2\n    length += 1\n    length /= 2\n    length\
    \ += 1\n    length /= 2\n    length += 1\n    length /= 2\n    length += 1\n \
    \   length /= 2\n    length += 1\n    length /= 2\n    length += 1\n    length\
    \ /= 2\n    length += 1\n    length /= 2\n    length += 1\n    length /= 2\n \
    \   length += 1\n    length /= 2\n    length += 1\n    length /= 2\n    length\
    \ += 1\n    length /= 2\n    length += 1\n    length /= 2\n    length += 1\n \
    \   ", "    if len(l) == 0 {\n        return math.NaN()\n    }\n    length :=\
    \ len(l)\n    middle := length / 2\n    if length%2 == 0 {\n        return l[middle]\n\
    \    } else {\n        return (l[middle-1] + l[middle]) / 2\n    }\n}\n", "  \
    \  length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    } else {\n        return (l[(length-1)/2] + l[(length-1)/2]) / 2\n    }\n\
    }\n", "    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Ints(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ ((l[n-1] + l[n/2]) / 2)\n}\n", "    length := len(l)\n    if length%2 == 0 {\n\
    \        return l[(length-1)/2]\n    } else {\n        return ((l[(length-1)/2]\
    \ + l[(length-1)/2]) / 2)\n    }\n}\n", "    if len(l) == 0 {\n        return\
    \ 0.0\n    }\n    sort.Ints(l)\n    n := len(l)\n    if n%2 == 0 {\n        return\
    \ l[n/2]\n    }\n    return (l[n-1] + l[n/2]) / 2\n}\n", "    if len(l) == 0 {\n\
    \        return 0\n    }\n    sort.Ints(l)\n    length := len(l)\n    middle :=\
    \ length / 2\n    if length%2 == 0 {\n        return l[middle]\n    }\n    return\
    \ l[middle-1] + l[middle]/2\n}\n", "    length := len(l)\n    if length%2 == 0\
    \ {\n        return l[(length-1)/2]\n    }\n    return ((l[(length-1)/2] + l[(length-1)/2])\
    \ / 2)\n}\n", "    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Ints(l)\n\
    \    return l[len(l)-1]\n}\n", "    if len(l) == 0 {\n        return 0.0\n   \
    \ }\n    sort.Ints(l)\n    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n\
    \    }\n    return ((l[n-1] + l[n/2]) / 2)\n}\n", "    length := len(l)\n    if\
    \ length%2 == 0 {\n        return l[(length-1)/2]\n    } else {\n        return\
    \ (l[(length-1)/2] + l[length/2]) / 2\n    }\n}\n", "    if len(l) == 0 {\n  \
    \      return float64(0)\n    }\n    sort.Ints(l)\n    n := len(l)\n    if n%2\
    \ == 0 {\n        return l[n/2]\n    }\n    return (l[n-1] + l[n/2]) / 2\n}\n",
  "    if len(l) == 0 {\n        return 0\n    }\n    sort.Ints(l)\n    return l[len(l)-1]\n\
    }\n", "    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Ints(l)\n\
    \    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return\
    \ ((l[n-1] + l[n/2]) / 2)\n}\n", "    length := len(l)\n    if length <= 0 {\n\
    \        return 0.0\n    }\n    middle := length / 2\n    left := make([]int,\
    \ middle)\n    right := make([]int, length-middle)\n    for i := 0; i < middle;\
    \ i++ {\n        left[i] = l[i]\n    }\n    for i := middle + 1; i < length; i++\
    \ {\n        right[i-1] = l[i]\n    }\n    left := left[:middle]\n    right :=\
    \ right[:middle]\n    sort.Ints(left)\n    sort.Ints(right)\n    median := left[len(left)-1]\
    \ + right[len(right)-1] / 2\n    return median\n}\n", "    length := len(l)\n\
    \    if length%2 == 0 {\n        return l[(length-1)/2]\n    } else {\n      \
    \  return (l[(length-1)/2] + l[length/2]) / 2\n    }\n}\n", "    if len(l) ==\
    \ 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n    n := len(l)\n    if n%2\
    \ == 0 {\n        return l[n/2]\n    }\n    return (l[n-1] + l[n/2]) / 2\n}\n",
  "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    length /= 2\n    return l[length-1]\n}\n", "    if len(l) == 0 {\n\
    \        return math.NaN()\n    }\n    sort.Ints(l)\n    if len(l) == 1 {\n  \
    \      return l[0]\n    }\n    middle := len(l) / 2\n    if l[middle] == l[middle-1]\
    \ {\n        return l[middle]\n    }\n    return l[middle-1] + math.Abs(float64(l[middle]-l[middle-1]))/2\n\
    }\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    length /= 2\n    return l[length-1] + l[length]/2\n}\n", "    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    } else\
    \ {\n        return (l[(length-1)/2] + l[length/2]) / 2\n    }\n}\n", "    if\
    \ len(l) == 0 {\n        return 0.0\n    }\n    length := len(l)\n    length /=\
    \ 2\n    if length%2 == 0 {\n        return l[length-1]\n    } else {\n      \
    \  return (l[length-1] + l[length-2]) / 2\n    }\n}\n", "    if len(l) == 0 {\n\
    \        return 0.0\n    }\n    sort.Ints(l)\n    return float64(l[len(l)-1])/float64(len(l))\n\
    }\n", "    if len(l) == 0 {\n        return 0.0\n    }\n    sort.Ints(l)\n   \
    \ length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n \
    \   }\n    return (l[length-1] + l[length/2]) / 2\n}\n", "    if len(l) == 0 {\n\
    \        return 0.0\n    }\n    sort.Ints(l)\n    length := len(l)\n    if length%2\
    \ == 0 {\n        return l[(length-1)/2]\n    }\n    return (l[(length-1)/2] +\
    \ l[length/2]) / 2.0\n}\n", "    length := len(l)\n    if length%2 == 0 {\n  \
    \      return l[(length-1)/2]\n    } else {\n        return (l[(length-1)/2] +\
    \ l[length/2]) / 2\n    }\n}\n", "    length := len(l)\n    if length%2 == 0 {\n\
    \        return l[(length-1)/2]\n    }\n    half := length/2\n    return l[half]\
    \ + l[half-1]\n}\n", "    if len(l) == 0 {\n        return float64(0)\n    }\n\
    \    sort.Ints(l)\n    n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n\
    \    }\n    return ((l[n-1] + l[n/2]) / 2)\n}\n", "    length := len(l)\n    if\
    \ length%2 == 0 {\n        return l[(length-1)/2]\n    }\n    return ((l[length-1]\
    \ + l[length/2]) / 2)\n}\n", "    if len(l) == 0 {\n        return float64(0)\n\
    \    }\n    sort.Ints(l)\n    return l[len(l)/2]\n}\n", "    length := len(l)\n\
    \    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n    middle :=\
    \ length/2\n    return l[middle]\n}\n", "    if len(l) == 0 {\n        return\
    \ float64(0)\n    }\n    sort.Ints(l)\n    length := len(l)\n    if length%2 ==\
    \ 0 {\n        return l[(length-1)/2]\n    }\n    middle := length/2\n    return\
    \ l[middle]\n}\n", "    length := len(l)\n    if length%2 == 0 {\n        return\
    \ l[(length-1)/2]\n    } else {\n        return (l[(length-1)/2] + l[length/2])\
    \ / 2\n    }\n}\n", "    length := len(l)\n    if length%2 == 0 {\n        return\
    \ l[(length-1)/2]\n    }\n    middle := length/2\n    left := l[0:middle]\n  \
    \  right := l[middle:]\n    median := (left + right) / 2\n    return median\n\
    }\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return ((l[(length-1)/2] + l[(length-1)/2]) / 2)\n}\n", "    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n \
    \   middle := length/2\n    return l[middle]\n}\n", "    if len(l) == 0 {\n  \
    \      return float64(0)\n    }\n    sort.Ints(l)\n    return l[len(l)-1]\n}\n",
  "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    } else {\n        return ((l[(length-1)/2] + l[length/2]) / 2)\n    }\n}\n",
  "    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Ints(l)\n    if\
    \ len(l) == 1 {\n        return l[0]\n    }\n    middle := len(l) / 2\n    if\
    \ middle == 0 {\n        return l[0]\n    }\n    if middle == 1 {\n        return\
    \ l[1]\n    }\n    if l[middle-1] > l[middle] {\n        return l[middle-1]\n\
    \    }\n    return l[middle]\n}\n", "    if len(l) == 0 {\n        return 0.0\n\
    \    }\n    length := len(l)\n    middle := length / 2\n    if length%2 == 0 {\n\
    \        return l[middle]\n    }\n    return 0.5 * (l[middle-1] + l[middle])\n\
    }\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    } else {\n        return (l[(length-1)/2] + l[length/2]) / 2\n    }\n}\n",
  "    length := len(l)\n    if length <= 1 {\n        return l[0]\n    }\n    middle\
    \ := length / 2\n    left := make([]int, middle)\n    right := make([]int, length-middle)\n\
    \    for i := 0; i < middle; i++ {\n        left[i] = l[i]\n    }\n    for i :=\
    \ middle + 1; i < length; i++ {\n        right[i-1] = l[i]\n    }\n    left :=\
    \ left[:middle]\n    right := right[:middle]\n    sort.Ints(left)\n    sort.Ints(right)\n\
    \    median := left[len(left)/2] + right[len(right)/2]\n    return float64(median)\n\
    }\n", "    if len(l) == 0 {\n        return float64(0)\n    }\n    sort.Ints(l)\n\
    \    return l[len(l)-1]\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n\
    \    sort.Ints(l)\n    return l[len(l)/2]\n}\n", "    length := len(l)\n    if\
    \ length%2 == 0 {\n        return l[(length-1)/2]\n    }\n    return ((l[(length-1)/2]\
    \ + l[(length-1)/2]) / 2)\n}\n", "    length := len(l)\n    if length%2 == 0 {\n\
    \        return l[(length-1)/2]\n    }\n    return ((l[(length-1)/2] + l[(length-1)/2])\
    \ / 2)\n}\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return (l[(length-1)/2] + l[length/2]) / 2\n}\n", "    length := len(l)\n\
    \    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n    return (l[(length-1)/2]\
    \ + l[length/2]) / 2\n}\n", "    if len(l) == 0 {\n        return float64(0)\n\
    \    }\n    sort.Ints(l)\n    length := len(l)\n    if length%2 == 0 {\n     \
    \   return l[(length-1)/2]\n    }\n    return (l[length-1] + l[length/2]) / 2\n\
    }\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return l[(length-1)/2-1] + l[(length-1)/2]\n}\n", "    length := len(l)\n\
    \    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n    length /=\
    \ 2\n    return l[length-1] + l[length]/2\n}\n", "    if len(l) == 0 {\n     \
    \   return float64(0)\n    }\n    length := len(l)\n    middle := length / 2\n\
    \    if length%2 == 0 {\n        return l[middle]\n    }\n    return 0.5 * (l[middle-1]\
    \ + l[middle])\n}\n", "    if len(l) == 0 {\n        return math.NaN()\n    }\n\
    \    sort.Ints(l)\n    return l[len(l)/2]\n}\n", "    if len(l) == 0 {\n     \
    \   return 0.0\n    }\n    sort.Ints(l)\n    length := len(l)\n    if length%2\
    \ == 0 {\n        return l[(length-1)/2]\n    }\n    return (l[(length-1)/2] +\
    \ l[length/2]) / 2\n}\n", "    if len(l) == 0 {\n        return 0\n    }\n   \
    \ sort.Ints(l)\n    return l[len(l)/2]\n}\n", "    length := len(l)\n    if length%2\
    \ == 0 {\n        return l[(length-1)/2]\n    }\n    return l[(length-1)/2] +\
    \ l[length/2]/2\n}\n", "    if len(l) == 0 {\n        return float64(0)\n    }\n\
    \    sort.Ints(l)\n    length := len(l)\n    if length%2 == 0 {\n        return\
    \ l[(length-1)/2]\n    }\n    middle := length/2\n    return float64(l[middle-1]\
    \ + l[middle])/2\n}\n", "    if len(l) == 0 {\n        return 0.0\n    }\n   \
    \ sort.Sort(l)\n    n := len(l)\n    if n % 2 == 0 {\n        return l[n/2]\n\
    \    }\n    return ((l[n-1] + l[n/2]) / 2)\n}\n", "    if len(l) == 0 {\n    \
    \    return 0\n    }\n    sort.Ints(l)\n    return l[len(l)/2]\n}\n", "    length\
    \ := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n    }\n \
    \   return ((l[(length-1)/2] + l[length/2]) / 2)\n}\n", "    if len(l) == 0 {\n\
    \        return 0.0\n    }\n    sort.Ints(l)\n    return l[len(l)/2]\n}\n", " \
    \   if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Ints(l)\n   \
    \ n := len(l)\n    if n%2 == 0 {\n        return l[n/2]\n    }\n    return ((l[n-1]\
    \ + l[n/2]) / 2)\n}\n", "    length := len(l)\n    if length%2 == 0 {\n      \
    \  return l[(length-1)/2]\n    }\n    return ((l[length-1] + l[length/2]) / 2)\n\
    }\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    }\n    return ((l[length/2] + l[length/2-1]) / 2)\n}\n", "    if len(l) ==\
    \ 0 {\n        return float64(0)\n    }\n    length := len(l)\n    middle := length\
    \ / 2\n    if length%2 == 0 {\n        return float64(l[middle])\n    } else {\n\
    \        return (float64(l[middle-1]) + float64(l[middle])) / 2\n    }\n}\n",
  "    if len(l) == 0 {\n        return math.NaN()\n    }\n    sort.Ints(l)\n    return\
    \ l[len(l)-1]\n}\n", "    if len(l) == 0 {\n        return float64(0)\n    }\n\
    \    sort.Ints(l)\n    length := len(l)\n    if length%2 == 0 {\n        return\
    \ l[(length-1)/2]\n    }\n    middle := length/2\n    return (l[middle-1] + l[middle])/2\n\
    }\n", "    length := len(l)\n    if length%2 == 0 {\n        return l[(length-1)/2]\n\
    \    } else {\n        return ((l[(length-1)/2] + l[(length-1)/2]) / 2)\n    }\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
