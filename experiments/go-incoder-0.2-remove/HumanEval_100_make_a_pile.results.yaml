language: go_test.go
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    i := 1\n\
    \    for i <= n {\n        if n%2 == 0 {\n            result[i] = result[i-1]\
    \ + 1\n        } else {\n            result[i] = result[i-1]\n        }\n    \
    \    i += 2\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpf36thpo6_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpf36thpo6_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=2) %!s(int=0) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpf36thpo6_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpf36thpo6_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=2) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpf36thpo6_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    for i := 3; i <= n; i++ {\n       \
    \ stones[i] = stones[i-1] + stones[i-2]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpcswth5f__test.go:26\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpcswth5f__test.go:38\
    \ +0x4c\ntesting.tRunner(0xc00011a680, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073637
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n < 0 {\n        return []int{}\n    }\n    if n == 0 {\n\
    \        return []int{1}\n    }\n    stones := make([]int, n+1)\n    stones[0]\
    \ = n\n    stones[1] = stones[2] = stones[3] = stones[4] = stones[5] = stones[6]\
    \ = stones[7] = stones[8] = stones[9] = stones[10] = stones[11] = stones[12] =\
    \ stones[13] = stones[14] = stones[15] = stones[16] = stones[17] = stones[18]\
    \ = stones[19] = stones[20] = stones[21] = stones[22] = stones[23] = stones[24]\
    \ = stones[25] = stones[26] = stones[27] = stones[28] = stones[29] = stones[30]\
    \ = stones[31] = stones[32] = stones[33] = stones[34] = stones[35] = stones[36]\
    \ = stones[37] = stones[38] = stones[39] = stones[40] = stones[41] = stones[42]\
    \ = stones[43] = stones[44] = stones[45] = stones[46] = stones[47] = stones[48]\
    \ = stones[49] = stones[50] = stones[51] = stones[52] = stones[53] = stones[54]\
    \ = stones[55] = stones[56] = stones[57] = stones[58] = stones[59] = stones[60]\
    \ = stones[61] = stones[62] = stones[63] = stones[64] = stones[65] = stones[66]\
    \ = stones[67] = stones[68] = stones[69] = stones[70] = stones[71] = stones[72]\
    \ = stones[73] = stones[74] = stones[75] = stones[76] = stones[77] = stones[78]\
    \ = stones[79] = stones[80] = stones[81] = stones[82] = stones[83] = stones[84]\
    \ = stones[85] = stones[86] = stones[87] = stones[88] = stones[89] = stones[90]\
    \ = stones[91] = stones[92] = stones[93] = stones[94] = stones[95] = stones[96]\
    \ = stones[97] = stones[98] = stones[99] = stones[100] = stones[101] = stones[102]\
    \ = stones[103] = stones[104] = stones[105] = stones[106] = stones[107] = stones[108]\
    \ = stones[109] = stones[110] = stones[111] = stones[112] = stones[113] = stones[114]\
    \ = stones[115] = stones[116] = stones[117] = stones[118] = stones[119] = stones[120]\
    \ = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphyiwdnkf_test.go:25:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = n\n    } else {\n        result[1] = n+1\n    }\n\
    \    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            result[i] =\
    \ result[i-1] + result[i-2]\n        } else {\n            result[i] = result[i-1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp_uk7is7w_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp_uk7is7w_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=10)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp_uk7is7w_test.go:51:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=6) %!s(int=7) %!s(int=7) %!s(int=14) %!s(int=14)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp_uk7is7w_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=6) %!s(int=7)\
    \ %!s(int=7) %!s(int=14) %!s(int=14) %!s(int=28)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp_uk7is7w_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=18) %!s(int=18) %!s(int=36) %!s(int=36)\
    \ %!s(int=72)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073637
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 0\n    if n%2\
    \ == 0 {\n        result[1] = n\n    } else {\n        result[1] = n+1\n    }\n\
    \    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            result[i] =\
    \ result[i-1] + 1\n        } else {\n            result[i] = result[i-1]\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpzprbr8sf_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpzprbr8sf_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=6)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpzprbr8sf_test.go:51:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=6) %!s(int=7) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpzprbr8sf_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=6) %!s(int=7)\
    \ %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpzprbr8sf_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=10) %!s(int=10) %!s(int=11) %!s(int=11)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n < 0 {\n        return []int{}\n    }\n    stones := make([]int,\
    \ n+1)\n    stones[0] = n\n    stones[2] = n\n    stones[4] = n\n    stones[6]\
    \ = n\n    stones[8] = n\n    stones[10] = n\n    stones[12] = n\n    stones[14]\
    \ = n\n    stones[16] = n\n    stones[18] = n\n    stones[20] = n\n    stones[22]\
    \ = n\n    stones[24] = n\n    stones[26] = n\n    stones[28] = n\n    stones[30]\
    \ = n\n    stones[32] = n\n    stones[34] = n\n    stones[36] = n\n    stones[38]\
    \ = n\n    stones[40] = n\n    stones[42] = n\n    stones[44] = n\n    stones[46]\
    \ = n\n    stones[48] = n\n    stones[50] = n\n    stones[52] = n\n    stones[54]\
    \ = n\n    stones[56] = n\n    stones[58] = n\n    stones[60] = n\n    stones[62]\
    \ = n\n    stones[64] = n\n    stones[66] = n\n    stones[68] = n\n    stones[70]\
    \ = n\n    stones[72] = n\n    stones[74] = n\n    stones[76] = n\n    stones[78]\
    \ = n\n    stones[80] = n\n    stones[82] = n\n    stones[84] = n\n    stones[86]\
    \ = n\n    stones[88] = n\n    stones[90] = n\n    stones[92] = n\n    stones[94]\
    \ = n\n    stones[96] = n\n    stones[98] = n\n    stones[100] = n\n    stones[102]\
    \ = n\n    stones[104] = n\n    stones[106] = n\n    stones[108] = n\n    stones[110]\
    \ = n\n    stones[112] = n\n    stones[114] = n\n    stones[116] = n\n    stones[118]\
    \ = n\n    stones[120] = n\n    stones[122] = n\n    stones[124] = n\n    stones[126]\
    \ = n\n    stones[128] = n\n    stones[130] = n\n    stones[132] = n\n    stones[134]\
    \ = n\n    stones[136] = n\n    stones[138] = n\n    stones[14\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsdsq3f3u_test.go:91:14: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    stones[2] = stones[1]\n    stones[3] = stones[2]\n    stones[4]\
    \ = stones[3]\n    stones[5] = stones[4]\n    stones[6] = stones[5]\n    stones[7]\
    \ = stones[6]\n    stones[8] = stones[7]\n    stones[9] = stones[8]\n    stones[10]\
    \ = stones[9]\n    stones[11] = stones[10]\n    stones[12] = stones[11]\n    stones[13]\
    \ = stones[12]\n    stones[14] = stones[13]\n    stones[15] = stones[14]\n   \
    \ stones[16] = stones[15]\n    stones[17] = stones[16]\n    stones[18] = stones[17]\n\
    \    stones[19] = stones[18]\n    stones[20] = stones[19]\n    stones[21] = stones[20]\n\
    \    stones[22] = stones[21]\n    stones[23] = stones[22]\n    stones[24] = stones[23]\n\
    \    stones[25] = stones[24]\n    stones[26] = stones[25]\n    stones[27] = stones[26]\n\
    \    stones[28] = stones[27]\n    stones[29] = stones[28]\n    stones[30] = stones[29]\n\
    \    stones[31] = stones[30]\n    stones[32] = stones[31]\n    stones[33] = stones[32]\n\
    \    stones[34] = stones[33]\n    stones[35] = stones[34]\n    stones[36] = stones[35]\n\
    \    stones[37] = stones[36]\n    stones[38] = stones[37]\n    stones[39] = stones[38]\n\
    \    stones[40] = stones[39]\n    stones[41] = stones[40]\n    stones[42] = stones[41]\n\
    \    stones[43] = stones[42]\n    stones[44] = stones[43]\n    stones[45] = stones[44]\n\
    \    stones[46] = stones[45]\n    stones[47] = stones[46]\n    stones[48] = stones[47]\n\
    \    stones[49] = stones[48]\n    stones[50] = stones[49]\n    stones[51] = stones[50]\n\
    \    stones[52] = stones[5\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqockr8hw_test.go:70:26: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpd4mshq_7_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        result[1] = result[0]/2\n    } else {\n        result[1] = result[0]/2\n\
    \    }\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            result[i]\
    \ = result[i-1] + result[i-2]\n        } else {\n            result[i] = result[i-1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp1few_ux3_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp1few_ux3_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=6) %!s(int=6) %!s(int=12)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp1few_ux3_test.go:51:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=7) %!s(int=7) %!s(int=14) %!s(int=14)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp1few_ux3_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=9)\
    \ %!s(int=9) %!s(int=18) %!s(int=18) %!s(int=36)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp1few_ux3_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=12) %!s(int=12) %!s(int=24) %!s(int=24) %!s(int=48) %!s(int=48)\
    \ %!s(int=96)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073637
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    if n%2 ==\
    \ 0 {\n        piles[1] = piles[2] = piles[3] = piles[4] = piles[5] = piles[6]\
    \ = piles[7] = piles[8] = piles[9] = piles[10] = piles[11] = piles[12] = piles[13]\
    \ = piles[14] = piles[15] = piles[16] = piles[17] = piles[18] = piles[19] = piles[20]\
    \ = piles[21] = piles[22] = piles[23] = piles[24] = piles[25] = piles[26] = piles[27]\
    \ = piles[28] = piles[29] = piles[30] = piles[31] = piles[32] = piles[33] = piles[34]\
    \ = piles[35] = piles[36] = piles[37] = piles[38] = piles[39] = piles[40] = piles[41]\
    \ = piles[42] = piles[43] = piles[44] = piles[45] = piles[46] = piles[47] = piles[48]\
    \ = piles[49] = piles[50] = piles[51] = piles[52] = piles[53] = piles[54] = piles[55]\
    \ = piles[56] = piles[57] = piles[58] = piles[59] = piles[60] = piles[61] = piles[62]\
    \ = piles[63] = piles[64] = piles[65] = piles[66] = piles[67] = piles[68] = piles[69]\
    \ = piles[70] = piles[71] = piles[72] = piles[73] = piles[74] = piles[75] = piles[76]\
    \ = piles[77] = piles[78] = piles[79] = piles[80] = piles[81] = piles[82] = piles[83]\
    \ = piles[84] = piles[85] = piles[86] = piles[87] = piles[88] = piles[89] = piles[90]\
    \ = piles[91] = piles[92] = piles[93] = piles[94] = piles[95] = piles[96] = piles[97]\
    \ = piles[98] = pile\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsgvevoki_test.go:20:29: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[3]\n    } else {\n        stones[1]\
    \ = stones[2] = stones[3] = stones[4]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_j7lnubf_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[3]\n    } else {\n        stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8gkzwb97_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    i := 1\n\
    \    for i <= n {\n        if i%2 == 0 {\n            result[i] = result[i-1]\
    \ + 1\n        } else {\n            result[i] = result[i-1]\n        }\n    \
    \    i++\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpxmtgv6zv_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpxmtgv6zv_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=6)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpxmtgv6zv_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpxmtgv6zv_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=7)\
    \ %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpxmtgv6zv_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=10) %!s(int=10) %!s(int=11) %!s(int=11)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073637
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    stones[2] = stones[0]\n    stones[3] = stones[0]\n    stones[4]\
    \ = stones[0]\n    stones[5] = stones[0]\n    stones[6] = stones[0]\n    stones[7]\
    \ = stones[0]\n    stones[8] = stones[0]\n    stones[9] = stones[0]\n    stones[10]\
    \ = stones[0]\n    stones[11] = stones[0]\n    stones[12] = stones[0]\n    stones[13]\
    \ = stones[0]\n    stones[14] = stones[0]\n    stones[15] = stones[0]\n    stones[16]\
    \ = stones[0]\n    stones[17] = stones[0]\n    stones[18] = stones[0]\n    stones[19]\
    \ = stones[0]\n    stones[20] = stones[0]\n    stones[21] = stones[0]\n    stones[22]\
    \ = stones[0]\n    stones[23] = stones[0]\n    stones[24] = stones[0]\n    stones[25]\
    \ = stones[0]\n    stones[26] = stones[0]\n    stones[27] = stones[0]\n    stones[28]\
    \ = stones[0]\n    stones[29] = stones[0]\n    stones[30] = stones[0]\n    stones[31]\
    \ = stones[0]\n    stones[32] = stones[0]\n    stones[33] = stones[0]\n    stones[34]\
    \ = stones[0]\n    stones[35] = stones[0]\n    stones[36] = stones[0]\n    stones[37]\
    \ = stones[0]\n    stones[38] = stones[0]\n    stones[39] = stones[0]\n    stones[40]\
    \ = stones[0]\n    stones[41] = stones[0]\n    stones[42] = stones[0]\n    stones[43]\
    \ = stones[0]\n    stones[44] = stones[0]\n    stones[45] = stones[0]\n    stones[46]\
    \ = stones[0]\n    stones[47] = stones[0]\n    stones[48] = stones[0]\n    stones[49]\
    \ = stones[0]\n    stones[50] = stones[0]\n    stones[51] = stones[0]\n    stones[52]\
    \ = stones[0]\n    stones[53] = stones[0]\n    stones[54] = stones[0]\n    stones[55]\
    \ = stones[0]\n    stones[56] = stones[0]\n    stones[57] = stones[0]\n    stones[58]\
    \ = stones[0]\n    stones[59] = stones[0]\n    stones[60] = stones[0]\n    stones[61]\
    \ = stones[0]\n    stones[62] = stones[0]\n    stones[63] = \nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkxm5mwb0_test.go:82:6: expected ''('', found TestMake_A_Pile

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[3]\n    } else {\n        stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8gkzwb97_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpd4mshq_7_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n%2 == 0 {\n        return make_a_pile_even(n)\n    } else\
    \ {\n        return make_a_pile_odd(n)\n    }\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5g_9e8iw_test.go:18:16: undefined: make_a_pile_even

    /tmp/tmp5g_9e8iw_test.go:20:16: undefined: make_a_pile_odd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    piles[1]\
    \ = n / 2\n    if n%2 == 0 {\n        piles[2] = n / 4\n    } else {\n       \
    \ piles[2] = n / 2\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpje6h96vh_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    stones[2] = stones[0]\n    if n%2 == 0 {\n        stones[3]\
    \ = stones[1]\n    } else {\n        stones[3] = stones[0]\n    }\n    return\
    \ stones\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpgdq3mrku_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpgdq3mrku_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpgdq3mrku_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpgdq3mrku_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpgdq3mrku_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073637
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = n+1\n    } else {\n        result[1] = 2*n+1\n \
    \   }\n    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpp09xctd__test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=7) %!s(int=8) %!s(int=15)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpp09xctd__test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=11) %!s(int=17)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpp09xctd__test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=11) %!s(int=12) %!s(int=23) %!s(int=35) %!s(int=58)]'\n    --- FAIL:\
    \ TestMake_A_Pile/test_num__3 (0.00s)\n        tmpp09xctd__test.go:47: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=1) %!s(int=7) %!s(int=8) %!s(int=15) %!s(int=23) %!s(int=38) %!s(int=61)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpp09xctd__test.go:47:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=1) %!s(int=9) %!s(int=10) %!s(int=19)\
    \ %!s(int=29) %!s(int=48) %!s(int=77) %!s(int=125) %!s(int=202)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073637
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = n\n    } else {\n        result[1] = n+1\n    }\n\
    \    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp91ii519o_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=6) %!s(int=7) %!s(int=13) %!s(int=20) %!s(int=33)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=6) %!s(int=7)\
    \ %!s(int=13) %!s(int=20) %!s(int=33) %!s(int=53)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=8) %!s(int=9) %!s(int=17) %!s(int=26) %!s(int=43) %!s(int=69) %!s(int=112)\
    \ %!s(int=181)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[3] = stones[4] = stones[5] =\
    \ stones[6] = stones[7] = stones[8] = stones[9] = stones[10] = stones[11] = stones[12]\
    \ = stones[13] = stones[14] = stones[15] = stones[16] = stones[17] = stones[18]\
    \ = stones[19] = stones[20] = stones[21] = stones[22] = stones[23] = stones[24]\
    \ = stones[25] = stones[26] = stones[27] = stones[28] = stones[29] = stones[30]\
    \ = stones[31] = stones[32] = stones[33] = stones[34] = stones[35] = stones[36]\
    \ = stones[37] = stones[38] = stones[39] = stones[40] = stones[41] = stones[42]\
    \ = stones[43] = stones[44] = stones[45] = stones[46] = stones[47] = stones[48]\
    \ = stones[49] = stones[50] = stones[51] = stones[52] = stones[53] = stones[54]\
    \ = stones[55] = stones[56] = stones[57] = stones[58] = stones[59] = stones[60]\
    \ = stones[61] = stones[62] = stones[63] = stones[64] = stones[65] = stones[66]\
    \ = stones[67] = stones[68] = stones[69] = stones[70] = stones[71] = stones[72]\
    \ = stones[73] = stones[74] = stones[75] = stones[76] = stones[77] = stones[78]\
    \ = stones[79] = stones[80] = stones[81] = stones[82] = stones[83] = stones[84]\
    \ = stones[85] = stones[86] = stones[87] = stones[88] = stones[89] = stones[90]\
    \ = stones[91] = stones[92] = stones[93] = stones[94] = stones[95] = stones[96]\
    \ = stones[97] = stones[98] = stones[99] = stones[100] = stones[101] = stones[102]\
    \ = stones[103] = stones[104] = stones[105] = stones[106] = stones[107] = stones[108]\
    \ = stones[109] = stones[110] = stones[111] = stones[112] = stones[113] = stones[114]\
    \ = stones[115] = stones[116] = stones[117] = stones[118] = stones[119] = stones[120]\
    \ = stones[121] = stones[122] = stones[123] = stones[\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp51p3hy9m_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = n\n    } else {\n        result[1] = n + 1\n   \
    \ }\n    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp6j_rkkn__test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp6j_rkkn__test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp6j_rkkn__test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=6) %!s(int=7) %!s(int=13) %!s(int=20) %!s(int=33)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp6j_rkkn__test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=6) %!s(int=7)\
    \ %!s(int=13) %!s(int=20) %!s(int=33) %!s(int=53)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp6j_rkkn__test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=8) %!s(int=9) %!s(int=17) %!s(int=26) %!s(int=43) %!s(int=69) %!s(int=112)\
    \ %!s(int=181)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 0\n    i := 1\n\
    \    for i <= n {\n        if i%2 == 0 {\n            result[i] = result[i-1]\
    \ + i\n        } else {\n            result[i] = result[i-1] + i/2\n        }\n\
    \        i++\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpegb3mduu_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpegb3mduu_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=7)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpegb3mduu_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=7) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpegb3mduu_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=2)\
    \ %!s(int=3) %!s(int=7) %!s(int=9) %!s(int=15)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpegb3mduu_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=7) %!s(int=9) %!s(int=15) %!s(int=18)\
    \ %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    n += 1 // Add one level of\
    \ stones\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result[i]\
    \ = n\n        } else {\n            result[i] = 2*n\n        }\n        n +=\
    \ 1 // Add one level of stones\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmprgfzae___test.go:21\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmprgfzae___test.go:37\
    \ +0x685\ntesting.tRunner(0xc0001124e0, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073638
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    piles[1]\
    \ = n / 2\n    piles[2] = n / 2\n    if n % 2 == 0 {\n        piles[3] = n / 2\n\
    \    } else {\n        piles[3] = n\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpb03peaik_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpb03peaik_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpb03peaik_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpb03peaik_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpb03peaik_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073638
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    stones[2] = stones[0]\n    if n%2 == 0 {\n        stones[3]\
    \ = stones[1]\n        stones[4] = stones[1]\n    } else {\n        stones[3]\
    \ = stones[0]\n        stones[4] = stones[0]\n    }\n    return stones\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpqb_38cyx_test.go:26\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpqb_38cyx_test.go:38\
    \ +0x54\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073638
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[n-1]\n    } else {\n        stones[1]\
    \ = stones[2] = stones[n-1] + 1\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl3mdrf4k_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        result[1] = result[0]/2\n    } else {\n        result[1] = result[0]/2\n\
    \    }\n    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpwkn1zm2y_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpwkn1zm2y_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=6) %!s(int=8) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpwkn1zm2y_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=7) %!s(int=9) %!s(int=16) %!s(int=25)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpwkn1zm2y_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=9)\
    \ %!s(int=12) %!s(int=21) %!s(int=33) %!s(int=54)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpwkn1zm2y_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=12) %!s(int=16) %!s(int=28) %!s(int=44) %!s(int=72) %!s(int=116)\
    \ %!s(int=188)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073638
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = n+1\n    } else {\n        result[1] = n\n    }\n\
    \    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            result[i] =\
    \ result[i-1] + result[i-2]\n        } else {\n            result[i] = result[i-1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpejyj44vp_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpejyj44vp_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=12)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpejyj44vp_test.go:51:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=12) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpejyj44vp_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=7) %!s(int=8)\
    \ %!s(int=8) %!s(int=16) %!s(int=16) %!s(int=32)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpejyj44vp_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=9) %!s(int=10) %!s(int=10) %!s(int=20) %!s(int=20) %!s(int=40) %!s(int=40)\
    \ %!s(int=80)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073638
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n == 0 {\n        return []int{n}\n    }\n    result :=\
    \ make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1] =\
    \ result[0]/2\n    } else {\n        result[1] = result[0]/2\n    }\n    for i\
    \ := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n    }\n\
    \    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp4c90z3eh_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp4c90z3eh_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=6) %!s(int=8) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp4c90z3eh_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=7) %!s(int=9) %!s(int=16) %!s(int=25)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp4c90z3eh_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=9)\
    \ %!s(int=12) %!s(int=21) %!s(int=33) %!s(int=54)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp4c90z3eh_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=12) %!s(int=16) %!s(int=28) %!s(int=44) %!s(int=72) %!s(int=116)\
    \ %!s(int=188)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073638
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n)\n    stones[0] = n\n    stones[1]\
    \ = n / 2\n    if n%2 == 0 {\n        stones[2] = n / 4\n    } else {\n      \
    \  stones[2] = n / 2\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpin9xnzgz_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpin9xnzgz_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpin9xnzgz_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpin9xnzgz_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpin9xnzgz_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073638
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[3] = 1\n    } else {\n      \
    \  stones[1] = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7]\
    \ = 1\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n \
    \ candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn1gab7ct_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    if n%2 ==\
    \ 0 {\n        piles[1] = piles[2] = piles[3] = piles[4] = piles[5] = piles[6]\
    \ = piles[7] = piles[8] = piles[9] = piles[10] = piles[11] = piles[12] = piles[13]\
    \ = piles[14] = piles[15] = piles[16] = piles[17] = piles[18] = piles[19] = piles[20]\
    \ = piles[21] = piles[22] = piles[23] = piles[24] = piles[25] = piles[26] = piles[27]\
    \ = piles[28] = piles[29] = piles[30] = piles[31] = piles[32] = piles[33] = piles[34]\
    \ = piles[35] = piles[36] = piles[37] = piles[38] = piles[39] = piles[40] = piles[41]\
    \ = piles[42] = piles[43] = piles[44] = piles[45] = piles[46] = piles[47] = piles[48]\
    \ = piles[49] = piles[50] = piles[51] = piles[52] = piles[53] = piles[54] = piles[55]\
    \ = piles[56] = piles[57] = piles[58] = piles[59] = piles[60] = piles[61] = piles[62]\
    \ = piles[63] = piles[64] = piles[65] = piles[66] = piles[67] = piles[68] = piles[69]\
    \ = piles[70] = piles[71] = piles[72] = piles[73] = piles[74] = piles[75] = piles[76]\
    \ = piles[77] = piles[78] = piles[79] = piles[80] = piles[81] = piles[82] = piles[83]\
    \ = piles[84] = piles[85] = piles[86] = piles[87] = piles[88] = piles[89] = piles[90]\
    \ = piles[91] = piles[92] = piles[93] = piles[94] = piles[95] = piles[96] = piles[97]\
    \ = piles[98] = pile\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsgvevoki_test.go:20:29: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    piles[1]\
    \ = n / 2\n    if n%2 == 0 {\n        piles[2] = n / 3\n    } else {\n       \
    \ piles[2] = n / 2 + 1\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpu0fknem1_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpu0fknem1_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpu0fknem1_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpu0fknem1_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpu0fknem1_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073638
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n%2 ==\
    \ 0 {\n        return make_a_pile_odd(n)\n    }\n    return make_a_pile_even(n)\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt_xxfbgf_test.go:21:16: undefined: make_a_pile_odd

    /tmp/tmpt_xxfbgf_test.go:23:12: undefined: make_a_pile_even

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    piles[1]\
    \ = n / 2\n    if n%2 == 0 {\n        piles[2] = n / 4\n    } else {\n       \
    \ piles[2] = n / 2\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpje6h96vh_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 0\n    if n%2\
    \ == 0 {\n        for i := 0; i < n; i++ {\n            result[i+1] = result[i]\
    \ + 1\n        }\n    } else {\n        for i := 0; i < n; i++ {\n           \
    \ result[i+1] = result[i] + 2\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpqmy4bwcj_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpqmy4bwcj_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpqmy4bwcj_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpqmy4bwcj_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpqmy4bwcj_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    if n%2 ==\
    \ 0 {\n        piles[1] = n/2\n    } else {\n        piles[1] = 2*n/3\n    }\n\
    \    for i := 2; i <= n; i++ {\n        piles[i] = piles[i-1] + piles[i-2]\n \
    \   }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=6) %!s(int=8) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpz74ww1mm_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=8) %!s(int=11) %!s(int=19) %!s(int=30)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=9)\
    \ %!s(int=12) %!s(int=21) %!s(int=33) %!s(int=54)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=12) %!s(int=16) %!s(int=28) %!s(int=44) %!s(int=72) %!s(int=116)\
    \ %!s(int=188)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        result[1] = n+1\n    } else {\n        result[1] = n\n    }\n\
    \    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptfbvseil_test.go:44:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = n\n    } else {\n        result[1] = n+1\n    }\n\
    \    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp91ii519o_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=6) %!s(int=7) %!s(int=13) %!s(int=20) %!s(int=33)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=6) %!s(int=7)\
    \ %!s(int=13) %!s(int=20) %!s(int=33) %!s(int=53)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=8) %!s(int=9) %!s(int=17) %!s(int=26) %!s(int=43) %!s(int=69) %!s(int=112)\
    \ %!s(int=181)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n < 0 {\n        panic(\"make_a_pile: n must be positive\"\
    )\n    }\n    piles := make([]int, n+1)\n    piles[0] = n\n    if n%2 == 0 {\n\
    \        piles[1] = n/2\n    } else {\n        piles[1] = 2*n/3\n    }\n    for\
    \ i := 2; i <= n; i++ {\n        piles[i] = piles[i-1] + piles[i-2]\n    }\n \
    \   return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpv_3pytun_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpv_3pytun_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=6) %!s(int=8) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpv_3pytun_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=8) %!s(int=11) %!s(int=19) %!s(int=30)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpv_3pytun_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=9)\
    \ %!s(int=12) %!s(int=21) %!s(int=33) %!s(int=54)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpv_3pytun_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=12) %!s(int=16) %!s(int=28) %!s(int=44) %!s(int=72) %!s(int=116)\
    \ %!s(int=188)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 0\n    result[1]\
    \ = n\n    if n%2 == 0 {\n        result[2] = n/2\n    } else {\n        result[2]\
    \ = (n+1)/2\n    }\n    for i := 3; i <= n; i++ {\n        result[i] = result[i-2]\
    \ + result[i-3]\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmphcof7x6z_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=3) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmphcof7x6z_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=6)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmphcof7x6z_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmphcof7x6z_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=6) %!s(int=3)\
    \ %!s(int=6) %!s(int=9) %!s(int=9) %!s(int=15)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmphcof7x6z_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=12) %!s(int=12) %!s(int=20) %!s(int=24)\
    \ %!s(int=32)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n%2 == 0\
    \ {\n        return make_a_pile_test(n, n)\n    }\n    return make_a_pile_test(n,\
    \ n+1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptyiz29ik_test.go:21:16: undefined: make_a_pile_test

    /tmp/tmptyiz29ik_test.go:23:12: undefined: make_a_pile_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[3] = 1\n    } else {\n      \
    \  stones[1] = stones[2] = stones[3] = stones[4] = 1\n    }\n    return stones\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp963_9tz_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073638
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 0\n    if n%2\
    \ == 0 {\n        result[1] = n\n    } else {\n        result[1] = n+1\n    }\n\
    \    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpbvgtvkm7_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=4) %!s(int=4) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpbvgtvkm7_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=4) %!s(int=4) %!s(int=8) %!s(int=12)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpbvgtvkm7_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=6) %!s(int=6) %!s(int=12) %!s(int=18) %!s(int=30)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpbvgtvkm7_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=6) %!s(int=6)\
    \ %!s(int=12) %!s(int=18) %!s(int=30) %!s(int=48)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpbvgtvkm7_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=8) %!s(int=8) %!s(int=16) %!s(int=24) %!s(int=40) %!s(int=64) %!s(int=104)\
    \ %!s(int=168)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    stones[2] = stones[0]\n    if n%2 == 0 {\n        stones[3]\
    \ = stones[1]\n    } else {\n        stones[3] = stones[0]\n    }\n    return\
    \ stones\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpgdq3mrku_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpgdq3mrku_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpgdq3mrku_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpgdq3mrku_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpgdq3mrku_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073637
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n%2 == 0\
    \ {\n        return make_a_pile_test(n, n)\n    }\n    return make_a_pile_test(n,\
    \ n+1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptyiz29ik_test.go:21:16: undefined: make_a_pile_test

    /tmp/tmptyiz29ik_test.go:23:12: undefined: make_a_pile_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        result[1] = n+1\n    } else {\n        result[1] = n\n    }\n\
    \    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptfbvseil_test.go:44:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[0]\n    } else {\n\
    \        stones[2] = stones[1]\n    }\n    for i := 3; i <= n; i++ {\n       \
    \ stones[i] = stones[i-1] + stones[i-2]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpnvt811zf_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpnvt811zf_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=8) %!s(int=12)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpnvt811zf_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=10) %!s(int=15) %!s(int=25)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpnvt811zf_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=12) %!s(int=18) %!s(int=30) %!s(int=48)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpnvt811zf_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=16) %!s(int=24) %!s(int=40) %!s(int=64) %!s(int=104)\
    \ %!s(int=168)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n < 0 {\n        return []int{}\n    }\n    if n == 0 {\n\
    \        return []int{n}\n    }\n    if n == 1 {\n        return []int{n}\n  \
    \  }\n    if n % 2 == 0 {\n        return append(make_a_pile(n/2), make_a_pile(n/2))\n\
    \    }\n    return append(make_a_pile(n/2), make_a_pile(n/2+1))\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3hkhsfm3_test.go:27:41: cannot use make_a_pile(n / 2) (value of type []int)
    as type int in argument to append

    /tmp/tmp3hkhsfm3_test.go:29:37: cannot use make_a_pile(n / 2 + 1) (value of type
    []int) as type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 0\n    if n%2\
    \ == 0 {\n        result[1] = n\n    } else {\n        result[1] = n+1\n    }\n\
    \    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            result[i] =\
    \ result[i-1]\n        } else {\n            result[i] = result[i-1]+1\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n \
    \ candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpj1lamn6o_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=4) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpj1lamn6o_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpj1lamn6o_test.go:51:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpj1lamn6o_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=6) %!s(int=6)\
    \ %!s(int=7) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpj1lamn6o_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=10) %!s(int=10) %!s(int=11)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[0] + 1\n    } else {\n        stones[1] =\
    \ stones[0] + 2\n    }\n    for i := 2; i <= n; i++ {\n        stones[i] = stones[i-1]\
    \ + stones[i-2]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpired4zlm_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=8) %!s(int=13)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpired4zlm_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=9) %!s(int=14) %!s(int=23)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpired4zlm_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=7) %!s(int=12) %!s(int=19) %!s(int=31) %!s(int=50)]'\n    --- FAIL:\
    \ TestMake_A_Pile/test_num__3 (0.00s)\n        tmpired4zlm_test.go:47: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=7) %!s(int=13) %!s(int=20) %!s(int=33) %!s(int=53) %!s(int=86)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpired4zlm_test.go:47:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=9) %!s(int=17) %!s(int=26)\
    \ %!s(int=43) %!s(int=69) %!s(int=112) %!s(int=181) %!s(int=293)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n == 0 {\n        return []int{n}\n    }\n    result :=\
    \ make([]int, n+1)\n    result[0] = n\n    i := 1\n    for ; i*2 <= n; i++ {\n\
    \        if n%i == 0 {\n            result[i] = result[i*2] + result[i*2+1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmprl8r2vfz_test.go:25\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmprl8r2vfz_test.go:39\
    \ +0x872\ntesting.tRunner(0xc0001924e0, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = n / 2\n    if n%2 == 0 {\n        stones[2] = n / 4\n    } else {\n      \
    \  stones[2] = n / 2\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpxb7l4u1f_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpxb7l4u1f_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpxb7l4u1f_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpxb7l4u1f_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpxb7l4u1f_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[3] = 1\n    } else {\n      \
    \  stones[1] = stones[2] = stones[3] = stones[4] = 1\n    }\n    return stones\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp963_9tz_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073638
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n)\n    piles[0] = n\n    piles[1] =\
    \ n / 2\n    if n%2 == 0 {\n        piles[2] = n / 4\n    } else {\n        piles[2]\
    \ = n / 2\n    }\n    if n%4 == 0 {\n        piles[3] = n / 8\n    } else {\n\
    \        piles[3] = n / 4\n    }\n    if n%8 == 0 {\n        piles[4] = n / 16\n\
    \    } else {\n        piles[4] = n / 8\n    }\n    if n%16 == 0 {\n        piles[5]\
    \ = n / 32\n    } else {\n        piles[5] = n / 16\n    }\n    if n%32 == 0 {\n\
    \        piles[6] = n / 64\n    } else {\n        piles[6] = n / 32\n    }\n \
    \   if n%64 == 0 {\n        piles[7] = n / 128\n    } else {\n        piles[7]\
    \ = n / 64\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(0x3)\n\t/tmp/tmpj5qlusby_test.go:28\
    \ +0x22f\ncommand-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpj5qlusby_test.go:60\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    stones :=\
    \ make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3] =\
    \ stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpevuer9m7_test.go:22:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        result[1] = n+1\n    } else {\n        result[1] = n\n    }\n\
    \    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptfbvseil_test.go:44:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = n+1\n    } else {\n        result[1] = n\n    }\n\
    \    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpig_jgm2c_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpig_jgm2c_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=11) %!s(int=17)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpig_jgm2c_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=6) %!s(int=11) %!s(int=17) %!s(int=28)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpig_jgm2c_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=7) %!s(int=8)\
    \ %!s(int=15) %!s(int=23) %!s(int=38) %!s(int=61)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpig_jgm2c_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=9) %!s(int=10) %!s(int=19) %!s(int=29) %!s(int=48) %!s(int=77) %!s(int=125)\
    \ %!s(int=202)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[3]\n    } else {\n        stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8gkzwb97_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = (n+1)/2\n    } else {\n        result[1] = n+1\n\
    \    }\n    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpo0dwkyc8_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpo0dwkyc8_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpo0dwkyc8_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=6) %!s(int=7) %!s(int=13) %!s(int=20) %!s(int=33)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpo0dwkyc8_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=3) %!s(int=4)\
    \ %!s(int=7) %!s(int=11) %!s(int=18) %!s(int=29)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpo0dwkyc8_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=4) %!s(int=5) %!s(int=9) %!s(int=14) %!s(int=23) %!s(int=37) %!s(int=60)\
    \ %!s(int=97)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpd4mshq_7_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n)\n    for i := 0; i < n; i++ {\n  \
    \      if i%2 == 0 {\n            piles[i] = n\n        } else {\n           \
    \ piles[i] = n+1\n        }\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp76zjxrvu_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp76zjxrvu_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=4) %!s(int=5)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp76zjxrvu_test.go:45: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=5) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp76zjxrvu_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=6)\
    \ %!s(int=7) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp76zjxrvu_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=8) %!s(int=9)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    for i := 3; i <= n; i++ {\n       \
    \ stones[i] = stones[i-1] + stones[i-2]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=8) %!s(int=12)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp3_59ugoi_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=10) %!s(int=15) %!s(int=25)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=12) %!s(int=18) %!s(int=30) %!s(int=48)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=16) %!s(int=24) %!s(int=40) %!s(int=64) %!s(int=104)\
    \ %!s(int=168)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    i := 0\n    for i < n {\n\
    \        result[i] = n\n        if n%2 == 0 {\n            result[i+1] = result[i]\
    \ + 1\n        } else {\n            result[i+1] = result[i]\n        }\n    \
    \    i += 2\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp1kh6yu85_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp1kh6yu85_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp1kh6yu85_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp1kh6yu85_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=6)\
    \ %!s(int=7) %!s(int=6) %!s(int=7) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp1kh6yu85_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=8) %!s(int=9)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        result[1] = n+1\n    } else {\n        result[1] = n\n    }\n\
    \    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptfbvseil_test.go:44:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    if n%2 ==\
    \ 0 {\n        piles[1] = piles[2] = piles[3] = piles[4] = piles[5] = piles[6]\
    \ = piles[7] = piles[8] = piles[9] = piles[10] = piles[11] = piles[12] = piles[13]\
    \ = piles[14] = piles[15] = piles[16] = piles[17] = piles[18] = piles[19] = piles[20]\
    \ = piles[21] = piles[22] = piles[23] = piles[24] = piles[25] = piles[26] = piles[27]\
    \ = piles[28] = piles[29] = piles[30] = piles[31] = piles[32] = piles[33] = piles[34]\
    \ = piles[35] = piles[36] = piles[37] = piles[38] = piles[39] = piles[40] = piles[41]\
    \ = piles[42] = piles[43] = piles[44] = piles[45] = piles[46] = piles[47] = piles[48]\
    \ = piles[49] = piles[50] = piles[51] = piles[52] = piles[53] = piles[54] = piles[55]\
    \ = piles[56] = piles[57] = piles[58] = piles[59] = piles[60] = piles[61] = piles[62]\
    \ = piles[63] = piles[64] = piles[65] = piles[66] = piles[67] = piles[68] = piles[69]\
    \ = piles[70] = piles[71] = piles[72] = piles[73] = piles[74] = piles[75] = piles[76]\
    \ = piles[77] = piles[78] = piles[79] = piles[80] = piles[81] = piles[82] = piles[83]\
    \ = piles[84] = piles[85] = piles[86] = piles[87] = piles[88] = piles[89] = piles[90]\
    \ = piles[91] = piles[92] = piles[93] = piles[94] = piles[95] = piles[96] = piles[97]\
    \ = piles[98] = pile\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsgvevoki_test.go:20:29: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpd4mshq_7_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    if n%2 ==\
    \ 0 {\n        piles[1] = 2*n + 1\n    } else {\n        piles[1] = n\n    }\n\
    \    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            piles[i] =\
    \ piles[i-1] + i\n        } else {\n            piles[i] = piles[i-1]\n      \
    \  }\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpw5lsd1pn_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpw5lsd1pn_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=9) %!s(int=11) %!s(int=11) %!s(int=15)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpw5lsd1pn_test.go:51:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=11) %!s(int=11)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpw5lsd1pn_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=13) %!s(int=15)\
    \ %!s(int=15) %!s(int=19) %!s(int=19) %!s(int=25)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpw5lsd1pn_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=17) %!s(int=19) %!s(int=19) %!s(int=23) %!s(int=23) %!s(int=29) %!s(int=29)\
    \ %!s(int=37)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = n\n    if n%2 == 0 {\n        stones[2] = stones[3] = n\n    }\
    \ else {\n        stones[3] = stones[4] = n\n    }\n    return stones\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2ty79l_m_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpd4mshq_7_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpd4mshq_7_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i]\
    \ + 1\n        }\n    } else {\n        for i := 1; i < n; i++ {\n           \
    \ result[i+1] = result[i] + 2\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp06mabtti_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp06mabtti_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp06mabtti_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp06mabtti_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp06mabtti_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        result[1] = n+1\n    } else {\n        result[1] = n\n    }\n\
    \    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptfbvseil_test.go:44:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i]\
    \ + result[i-1]\n        }\n    } else {\n        for i := 1; i < n; i++ {\n \
    \           result[i+1] = result[i] + result[i-1]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp__r610h9_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp__r610h9_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp__r610h9_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp__r610h9_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=0) %!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp__r610h9_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)\
    \ %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpd4mshq_7_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = n+1\n    } else {\n        result[1] = n\n    }\n\
    \    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            result[i] =\
    \ result[i-1] + result[i-2]\n        } else {\n            result[i] = result[i-1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpejyj44vp_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpejyj44vp_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=12)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpejyj44vp_test.go:51:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=12) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpejyj44vp_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=7) %!s(int=8)\
    \ %!s(int=8) %!s(int=16) %!s(int=16) %!s(int=32)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpejyj44vp_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=9) %!s(int=10) %!s(int=10) %!s(int=20) %!s(int=20) %!s(int=40) %!s(int=40)\
    \ %!s(int=80)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073638
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    piles[1]\
    \ = n / 2\n    if n%2 == 0 {\n        piles[2] = n / 4\n    } else {\n       \
    \ piles[2] = n / 2\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpje6h96vh_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpd4mshq_7_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    if n%2 ==\
    \ 0 {\n        piles[1] = n/2\n    } else {\n        piles[1] = 2*n/3\n    }\n\
    \    for i := 2; i <= n; i++ {\n        piles[i] = piles[i-1] + piles[i-2]\n \
    \   }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=6) %!s(int=8) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpz74ww1mm_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=8) %!s(int=11) %!s(int=19) %!s(int=30)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=9)\
    \ %!s(int=12) %!s(int=21) %!s(int=33) %!s(int=54)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=12) %!s(int=16) %!s(int=28) %!s(int=44) %!s(int=72) %!s(int=116)\
    \ %!s(int=188)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        result[1] = 2*result[0]\n    } else {\n        result[1] = result[0]\n\
    \    }\n    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp6nuhcyyu_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp6nuhcyyu_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=8) %!s(int=12) %!s(int=20) %!s(int=32)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp6nuhcyyu_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=10) %!s(int=15) %!s(int=25) %!s(int=40)]'\n    --- FAIL:\
    \ TestMake_A_Pile/test_num__3 (0.00s)\n        tmp6nuhcyyu_test.go:47: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=12) %!s(int=18) %!s(int=30) %!s(int=48) %!s(int=78) %!s(int=126)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp6nuhcyyu_test.go:47:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=16) %!s(int=24) %!s(int=40)\
    \ %!s(int=64) %!s(int=104) %!s(int=168) %!s(int=272) %!s(int=440)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    stones[2] = stones[0]\n    stones[3] = stones[0]\n    stones[4]\
    \ = stones[0]\n    stones[5] = stones[0]\n    stones[6] = stones[0]\n    stones[7]\
    \ = stones[0]\n    stones[8] = stones[0]\n    stones[9] = stones[0]\n    stones[10]\
    \ = stones[0]\n    stones[11] = stones[0]\n    stones[12] = stones[0]\n    stones[13]\
    \ = stones[0]\n    stones[14] = stones[0]\n    stones[15] = stones[0]\n    stones[16]\
    \ = stones[0]\n    stones[17] = stones[0]\n    stones[18] = stones[0]\n    stones[19]\
    \ = stones[0]\n    stones[20] = stones[0]\n    stones[21] = stones[0]\n    stones[22]\
    \ = stones[0]\n    stones[23] = stones[0]\n    stones[24] = stones[0]\n    stones[25]\
    \ = stones[0]\n    stones[26] = stones[0]\n    stones[27] = stones[0]\n    stones[28]\
    \ = stones[0]\n    stones[29] = stones[0]\n    stones[30] = stones[0]\n    stones[31]\
    \ = stones[0]\n    stones[32] = stones[0]\n    stones[33] = stones[0]\n    stones[34]\
    \ = stones[0]\n    stones[35] = stones[0]\n    stones[36] = stones[0]\n    stones[37]\
    \ = stones[0]\n    stones[38] = stones[0]\n    stones[39] = stones[0]\n    stones[40]\
    \ = stones[0]\n    stones[41] = stones[0]\n    stones[42] = stones[0]\n    stones[43]\
    \ = stones[0]\n    stones[44] = stones[0]\n    stones[45] = stones[0]\n    stones[46]\
    \ = stones[0]\n    stones[47] = stones[0]\n    stones[48] = stones[0]\n    stones[49]\
    \ = stones[0]\n    stones[50] = stones[0]\n    stones[51] = stones[0]\n    stones[52]\
    \ = stones[0]\n    stones[53] = stones[0]\n    stones[54] = stones[0]\n    stones[55]\
    \ = stones[0]\n    stones[56] = stones[0]\n    stones[57] = stones[0]\n    stones[58]\
    \ = stones[0]\n    stones[59] = stones[0]\n    stones[60] = stones[0]\n    stones[61]\
    \ = stones[0]\n    stones[62] = stones[0]\n    stones[63] = \nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkxm5mwb0_test.go:82:6: expected ''('', found TestMake_A_Pile

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = n\n    } else {\n        result[1] = n+1\n    }\n\
    \    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp91ii519o_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=6) %!s(int=7) %!s(int=13) %!s(int=20) %!s(int=33)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=6) %!s(int=7)\
    \ %!s(int=13) %!s(int=20) %!s(int=33) %!s(int=53)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=8) %!s(int=9) %!s(int=17) %!s(int=26) %!s(int=43) %!s(int=69) %!s(int=112)\
    \ %!s(int=181)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n%2 == 0 {\n        return make([]int, 0, n)\n    }\n \
    \   piles := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n        if i%2 ==\
    \ 0 {\n            piles = append(piles, i+1)\n        } else {\n            piles\
    \ = append(piles, i+2)\n        }\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpjbg9mdwt_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpjbg9mdwt_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[]'\n    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n\
    \        tmpjbg9mdwt_test.go:48: expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11)\
    \ %!s(int=13)]', got '[%!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpjbg9mdwt_test.go:48:\
    \ expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]',\
    \ got '[]'\n    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmpjbg9mdwt_test.go:48:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    n += 1 // add 1 for the first\
    \ level\n    for i := 0; i < n; i++ {\n        result[i] = n\n        if n%2 ==\
    \ 0 {\n            n += 1 // add 1 for the next level\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpnm2e0nqg_test.go:20\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpnm2e0nqg_test.go:35\
    \ +0x5c5\ntesting.tRunner(0xc000103520, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpd4mshq_7_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = n\n    if n%2 == 0 {\n        stones[2] = stones[3] = n\n    }\
    \ else {\n        stones[3] = stones[4] = n\n    }\n    return stones\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2ty79l_m_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = n\n    } else {\n        result[1] = n+1\n    }\n\
    \    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp91ii519o_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=6) %!s(int=7) %!s(int=13) %!s(int=20) %!s(int=33)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=6) %!s(int=7)\
    \ %!s(int=13) %!s(int=20) %!s(int=33) %!s(int=53)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=8) %!s(int=9) %!s(int=17) %!s(int=26) %!s(int=43) %!s(int=69) %!s(int=112)\
    \ %!s(int=181)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 0\n    result[1]\
    \ = n\n    if n%2 == 0 {\n        result[2] = result[1]/2\n    } else {\n    \
    \    result[2] = result[1]/3\n    }\n    for i := 3; i <= n; i++ {\n        result[i]\
    \ = result[i-2] + result[i-3]\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmplqrjeon5_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=3) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmplqrjeon5_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=6)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmplqrjeon5_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmplqrjeon5_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=6) %!s(int=3)\
    \ %!s(int=6) %!s(int=9) %!s(int=9) %!s(int=15)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmplqrjeon5_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=12) %!s(int=12) %!s(int=20) %!s(int=24)\
    \ %!s(int=32)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[3]\n    } else {\n        stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8gkzwb97_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 0\n    if n%2\
    \ == 0 {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i]\
    \ + i\n        }\n    } else {\n        for i := 1; i < n; i++ {\n           \
    \ result[i+1] = result[i] + n\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpuwaftf_o_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpuwaftf_o_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=6)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpuwaftf_o_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=5) %!s(int=10) %!s(int=15) %!s(int=20)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpuwaftf_o_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)\
    \ %!s(int=3) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpuwaftf_o_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=6) %!s(int=10) %!s(int=15) %!s(int=21)\
    \ %!s(int=28)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    piles[1]\
    \ = n / 2\n    piles[2] = n / 4\n    piles[3] = n / 8\n    piles[4] = n / 16\n\
    \    piles[5] = n / 32\n    piles[6] = n / 64\n    piles[7] = n / 128\n    piles[8]\
    \ = n / 256\n    piles[9] = n / 512\n    piles[10] = n / 1024\n    piles[11] =\
    \ n / 2048\n    piles[12] = n / 4096\n    piles[13] = n / 8192\n    piles[14]\
    \ = n / 16384\n    piles[15] = n / 32768\n    piles[16] = n / 65536\n    piles[17]\
    \ = n / 131072\n    piles[18] = n / 262144\n    piles[19] = n / 524288\n    piles[20]\
    \ = n / 1048576\n    piles[21] = n / 2097152\n    piles[22] = n / 4194304\n  \
    \  piles[23] = n / 8388608\n    piles[24] = n / 16777216\n    piles[25] = n /\
    \ 33554432\n    piles[26] = n / 67108864\n    piles[27] = n / 134217728\n    piles[28]\
    \ = n / 268435456\n    piles[29] = n / 536870912\n    piles[30] = n / 1073741824\n\
    \    piles[31] = n / 2147483648\n    piles[32] = n / 4294967296\n    piles[33]\
    \ = n / 8589934592\n    piles[34] = n / 17179869184\n    piles[35] = n / 34359738368\n\
    \    piles[36] = n / 68719476736\n    piles[37] = n / 137438953472\n    piles[38]\
    \ = n / 274877906944\n    piles[39] = n / 549755813888\n    piles[40] = n / 1099511627776\n\
    \    piles[41] = n / 2199023255552\n    piles[\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv0z05ta__test.go:61:6: expected ''('', found TestMake_A_Pile

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i]\
    \ + 1\n        }\n    } else {\n        for i := 1; i < n; i++ {\n           \
    \ result[i+1] = result[i] + 2\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp06mabtti_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp06mabtti_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp06mabtti_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp06mabtti_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp06mabtti_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = n\n    } else {\n        result[1] = n+1\n    }\n\
    \    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp91ii519o_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=6) %!s(int=7) %!s(int=13) %!s(int=20) %!s(int=33)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=6) %!s(int=7)\
    \ %!s(int=13) %!s(int=20) %!s(int=33) %!s(int=53)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp91ii519o_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=8) %!s(int=9) %!s(int=17) %!s(int=26) %!s(int=43) %!s(int=69) %!s(int=112)\
    \ %!s(int=181)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[3] = stones[4] = stones[5] =\
    \ stones[6] = stones[7] = stones[8] = stones[9] = stones[10] = stones[11] = stones[12]\
    \ = stones[13] = stones[14] = stones[15] = stones[16] = stones[17] = stones[18]\
    \ = stones[19] = stones[20] = stones[21] = stones[22] = stones[23] = stones[24]\
    \ = stones[25] = stones[26] = stones[27] = stones[28] = stones[29] = stones[30]\
    \ = stones[31] = stones[32] = stones[33] = stones[34] = stones[35] = stones[36]\
    \ = stones[37] = stones[38] = stones[39] = stones[40] = stones[41] = stones[42]\
    \ = stones[43] = stones[44] = stones[45] = stones[46] = stones[47] = stones[48]\
    \ = stones[49] = stones[50] = stones[51] = stones[52] = stones[53] = stones[54]\
    \ = stones[55] = stones[56] = stones[57] = stones[58] = stones[59] = stones[60]\
    \ = stones[61] = stones[62] = stones[63] = stones[64] = stones[65] = stones[66]\
    \ = stones[67] = stones[68] = stones[69] = stones[70] = stones[71] = stones[72]\
    \ = stones[73] = stones[74] = stones[75] = stones[76] = stones[77] = stones[78]\
    \ = stones[79] = stones[80] = stones[81] = stones[82] = stones[83] = stones[84]\
    \ = stones[85] = stones[86] = stones[87] = stones[88] = stones[89] = stones[90]\
    \ = stones[91] = stones[92] = stones[93] = stones[94] = stones[95] = stones[96]\
    \ = stones[97] = stones[98] = stones[99] = stones[100] = stones[101] = stones[102]\
    \ = stones[103] = stones[104] = stones[105] = stones[106] = stones[107] = stones[108]\
    \ = stones[109] = stones[110] = stones[111] = stones[112] = stones[113] = stones[114]\
    \ = stones[115] = stones[116] = stones[117] = stones[118] = stones[119] = stones[120]\
    \ = stones[121] = stones[122] = stones[123] = stones[\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp51p3hy9m_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    n += 1 // n is even\n    result[n]\
    \ = n\n    if n % 2 == 0 {\n        result[n-1] = result[n-2] + 2\n    } else\
    \ {\n        result[n-1] = result[n-2] + 1\n    }\n    return result\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpc_y1g2uu_test.go:19\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpc_y1g2uu_test.go:35\
    \ +0x35\ntesting.tRunner(0xc0001a01a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    if n%2 ==\
    \ 0 {\n        piles[1] = n/2\n    } else {\n        piles[1] = 2*n/3\n    }\n\
    \    for i := 2; i <= n; i++ {\n        piles[i] = piles[i-1] + piles[i-2]\n \
    \   }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=6) %!s(int=8) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpz74ww1mm_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=8) %!s(int=11) %!s(int=19) %!s(int=30)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=9)\
    \ %!s(int=12) %!s(int=21) %!s(int=33) %!s(int=54)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=12) %!s(int=16) %!s(int=28) %!s(int=44) %!s(int=72) %!s(int=116)\
    \ %!s(int=188)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n == 0 {\n        return []int{n}\n    }\n    result :=\
    \ make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i := 1;\
    \ i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpshgr85y9_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpshgr85y9_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpshgr85y9_test.go:51:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpshgr85y9_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpshgr85y9_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[3]\n    } else {\n        stones[1]\
    \ = stones[2] = stones[3] = stones[4]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_j7lnubf_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    piles[1]\
    \ = n / 2\n    piles[2] = n / 2\n    if n%2 == 0 {\n        piles[3] = n / 2\n\
    \    } else {\n        piles[3] = n / 2 + 1\n    }\n    return piles\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpgxq4_jyy_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpgxq4_jyy_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpgxq4_jyy_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpgxq4_jyy_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpgxq4_jyy_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[3]\n    } else {\n        stones[1]\
    \ = stones[2] = stones[3] = stones[4]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_j7lnubf_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = stone\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1x3ixuzv_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073640
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n < 0 {\n        return []int{}\n    }\n    result := make([]int,\
    \ n+1)\n    n /= 2\n    result[n] = 1\n    if n%2 == 0 {\n        result[n+1]\
    \ = make_a_pile(n)\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsoaro9yj_test.go:24:23: cannot use make_a_pile(n) (value of type []int)
    as type int in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    n += 1 // Add one for first\
    \ level\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result[i+1]\
    \ = n\n        } else {\n            result[i+1] = 2*n\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmp9u7w425y_test.go:23\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmp9u7w425y_test.go:36\
    \ +0x673\ntesting.tRunner(0xc0001964e0, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = n\n    if n%2 == 0 {\n        stones[2] = stones[3] = n\n    }\
    \ else {\n        stones[3] = stones[4] = n\n    }\n    return stones\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2ty79l_m_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n)\n    piles[0] = n\n    piles[1] =\
    \ n / 2\n    if n%2 == 0 {\n        piles[2] = n / 4\n    } else {\n        piles[2]\
    \ = n / 2\n    }\n    if n%4 == 0 {\n        piles[3] = n / 8\n    } else {\n\
    \        piles[3] = n / 4\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpnzfhevae_test.go:28\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpnzfhevae_test.go:40\
    \ +0x4c\ntesting.tRunner(0xc000192820, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        result[1] = n\n    } else {\n        result[1] = n+1\n    }\n\
    \    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp74509d8i_test.go:44: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp74509d8i_test.go:44: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp74509d8i_test.go:44:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp74509d8i_test.go:44: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp74509d8i_test.go:44: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n < 0 {\n        return []int{}\n    }\n    if n%2 == 0\
    \ {\n        return make_a_pile_even(n)\n    } else {\n        return make_a_pile_odd(n)\n\
    \    }\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdmkin61p_test.go:21:16: undefined: make_a_pile_even

    /tmp/tmpdmkin61p_test.go:23:16: undefined: make_a_pile_odd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = n\n    } else {\n        result[1] = n + 1\n   \
    \ }\n    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp6j_rkkn__test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp6j_rkkn__test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp6j_rkkn__test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=6) %!s(int=7) %!s(int=13) %!s(int=20) %!s(int=33)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp6j_rkkn__test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=6) %!s(int=7)\
    \ %!s(int=13) %!s(int=20) %!s(int=33) %!s(int=53)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp6j_rkkn__test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=8) %!s(int=9) %!s(int=17) %!s(int=26) %!s(int=43) %!s(int=69) %!s(int=112)\
    \ %!s(int=181)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n%2 == 0 {\n        return make([]int, n+1)\n    }\n  \
    \  piles := make([]int, n+1)\n    piles[0] = n\n    for i := 1; i < n; i++ {\n\
    \        if i%2 == 0 {\n            piles[i] = piles[i-1] + i\n        } else\
    \ {\n            piles[i] = piles[i-1] + i/2\n        }\n    }\n    return piles\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpd75jwjd0_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpd75jwjd0_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpd75jwjd0_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=7) %!s(int=8) %!s(int=12) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpd75jwjd0_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpd75jwjd0_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        result[1] = n+1\n    } else {\n        result[1] = n\n    }\n\
    \    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptfbvseil_test.go:44:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    stones[2] = stones[0]\n    stones[3] = stones[0]\n    stones[4]\
    \ = stones[0]\n    stones[5] = stones[0]\n    stones[6] = stones[0]\n    stones[7]\
    \ = stones[0]\n    stones[8] = stones[0]\n    stones[9] = stones[0]\n    stones[10]\
    \ = stones[0]\n    stones[11] = stones[0]\n    stones[12] = stones[0]\n    stones[13]\
    \ = stones[0]\n    stones[14] = stones[0]\n    stones[15] = stones[0]\n    stones[16]\
    \ = stones[0]\n    stones[17] = stones[0]\n    stones[18] = stones[0]\n    stones[19]\
    \ = stones[0]\n    stones[20] = stones[0]\n    stones[21] = stones[0]\n    stones[22]\
    \ = stones[0]\n    stones[23] = stones[0]\n    stones[24] = stones[0]\n    stones[25]\
    \ = stones[0]\n    stones[26] = stones[0]\n    stones[27] = stones[0]\n    stones[28]\
    \ = stones[0]\n    stones[29] = stones[0]\n    stones[30] = stones[0]\n    stones[31]\
    \ = stones[0]\n    stones[32] = stones[0]\n    stones[33] = stones[0]\n    stones[34]\
    \ = stones[0]\n    stones[35] = stones[0]\n    stones[36] = stones[0]\n    stones[37]\
    \ = stones[0]\n    stones[38] = stones[0]\n    stones[39] = stones[0]\n    stones[40]\
    \ = stones[0]\n    stones[41] = stones[0]\n    stones[42] = stones[0]\n    stones[43]\
    \ = stones[0]\n    stones[44] = stones[0]\n    stones[45] = stones[0]\n    stones[46]\
    \ = stones[0]\n    stones[47] = stones[0]\n    stones[48] = stones[0]\n    stones[49]\
    \ = stones[0]\n    stones[50] = stones[0]\n    stones[51] = stones[0]\n    stones[52]\
    \ = stones[0]\n    stones[53] = stones[0]\n    stones[54] = stones[0]\n    stones[55]\
    \ = stones[0]\n    stones[56] = stones[0]\n    stones[57] = stones[0]\n    stones[58]\
    \ = stones[0]\n    stones[59] = stones[0]\n    stones[60] = stones[0]\n    stones[61]\
    \ = stones[0]\n    stones[62] = stones[0]\n    stones[63] = stone\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjsaulte__test.go:82:6: expected ''('', found TestMake_A_Pile

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    stones[2] = stones[1]\n    if n%2 == 0 {\n        stones[3]\
    \ = stones[2]\n    } else {\n        stones[3] = stones[1]\n    }\n    return\
    \ stones\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvgj_u2r2_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvgj_u2r2_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvgj_u2r2_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvgj_u2r2_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvgj_u2r2_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    for i := 3; i < n; i++ {\n        stones[i]\
    \ = stones[i-1] + stones[i-2]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp4opyoi5c_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp4opyoi5c_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=8)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp4opyoi5c_test.go:48: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp4opyoi5c_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=12) %!s(int=18) %!s(int=30)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp4opyoi5c_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=16) %!s(int=24) %!s(int=40) %!s(int=64) %!s(int=104)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = n\n    } else {\n        result[1] = n+1\n    }\n\
    \    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            result[i] =\
    \ result[i-1]\n        } else {\n            result[i] = result[i-1]+1\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n \
    \ candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpl70guno4_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpl70guno4_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=5)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpl70guno4_test.go:51:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpl70guno4_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=6) %!s(int=6)\
    \ %!s(int=7) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpl70guno4_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=10) %!s(int=10) %!s(int=11)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[3] = 1\n    } else {\n      \
    \  stones[1] = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7]\
    \ = stones[8] = stones[9] = stones[10] = stones[11] = stones[12] = stones[13]\
    \ = stones[14] = stones[15] = stones[16] = stones[17] = stones[18] = stones[19]\
    \ = stones[20] = stones[21] = stones[22] = stones[23] = stones[24] = stones[25]\
    \ = stones[26] = stones[27] = stones[28] = stones[29] = stones[30] = stones[31]\
    \ = stones[32] = stones[33] = stones[34] = stones[35] = stones[36] = stones[37]\
    \ = stones[38] = stones[39] = stones[40] = stones[41] = stones[42] = stones[43]\
    \ = stones[44] = stones[45] = stones[46] = stones[47] = stones[48] = stones[49]\
    \ = stones[50] = stones[51] = stones[52] = stones[53] = stones[54] = stones[55]\
    \ = stones[56] = stones[57] = stones[58] = stones[59] = stones[60] = stones[61]\
    \ = stones[62] = stones[63] = stones[64] = stones[65] = stones[66] = stones[67]\
    \ = stones[68] = stones[69] = stones[70] = stones[71] = stones[72] = stones[73]\
    \ = stones[74] = stones[75] = stones[76] = stones[77] = stones[78] = stones[79]\
    \ = stones[80] = stones[81] = stones[82] = stones[83] = stones[84] = stones[85]\
    \ = stones[86] = stones[87] = stones[88] = stones[89] = stones[90] = stones[91]\
    \ = stones[92] = stones[93] = stones[94] = stones[95] = stones[96] = stones[97]\
    \ = stones[98] = stones[99] = stones[100] = stones[101] = stones[102] = stones[103]\
    \ = stones[104] = stones[105] = stones[106] = stones[107] = stones[108] = stones[109]\
    \ = stones[110] = stones[111] = stones[112] = stones[113] = stones[114] = stones[115]\
    \ = stones[116] = stones[117] = stones[118] = stones[119] = stones[120] = stone\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplj7w8lcp_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    if n%2 ==\
    \ 0 {\n        piles[1] = piles[2] = piles[3] = piles[4] = piles[5] = piles[6]\
    \ = piles[7] = piles[8] = piles[9] = piles[10] = piles[11] = piles[12] = piles[13]\
    \ = piles[14] = piles[15] = piles[16] = piles[17] = piles[18] = piles[19] = piles[20]\
    \ = piles[21] = piles[22] = piles[23] = piles[24] = piles[25] = piles[26] = piles[27]\
    \ = piles[28] = piles[29] = piles[30] = piles[31] = piles[32] = piles[33] = piles[34]\
    \ = piles[35] = piles[36] = piles[37] = piles[38] = piles[39] = piles[40] = piles[41]\
    \ = piles[42] = piles[43] = piles[44] = piles[45] = piles[46] = piles[47] = piles[48]\
    \ = piles[49] = piles[50] = piles[51] = piles[52] = piles[53] = piles[54] = piles[55]\
    \ = piles[56] = piles[57] = piles[58] = piles[59] = piles[60] = piles[61] = piles[62]\
    \ = piles[63] = piles[64] = piles[65] = piles[66] = piles[67] = piles[68] = piles[69]\
    \ = piles[70] = piles[71] = piles[72] = piles[73] = piles[74] = piles[75] = piles[76]\
    \ = piles[77] = piles[78] = piles[79] = piles[80] = piles[81] = piles[82] = piles[83]\
    \ = piles[84] = piles[85] = piles[86] = piles[87] = piles[88] = piles[89] = piles[90]\
    \ = piles[91] = piles[92] = piles[93] = piles[94] = piles[95] = piles[96] = piles[97]\
    \ = piles[98] = pile\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsgvevoki_test.go:20:29: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        result[1] = n\n    } else {\n        result[1] = n + 1\n   \
    \ }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpc0upw82n_test.go:44: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpc0upw82n_test.go:44: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpc0upw82n_test.go:44:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpc0upw82n_test.go:44: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpc0upw82n_test.go:44: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i]\
    \ + 1\n        }\n    } else {\n        for i := 1; i < n; i++ {\n           \
    \ result[i+1] = result[i] + 2\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpxbwowyzc_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpxbwowyzc_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpxbwowyzc_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpxbwowyzc_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpxbwowyzc_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073643
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n%2 == 0\
    \ {\n        return make_a_pile_odd(n)\n    } else {\n        return make_a_pile_even(n)\n\
    \    }\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7hy_3d8h_test.go:21:16: undefined: make_a_pile_odd

    /tmp/tmp7hy_3d8h_test.go:23:16: undefined: make_a_pile_even

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    if n%2 ==\
    \ 0 {\n        piles[1] = n/2\n    } else {\n        piles[1] = 2*n/3\n    }\n\
    \    for i := 2; i <= n; i++ {\n        piles[i] = piles[i-1] + piles[i-2]\n \
    \   }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=6) %!s(int=8) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpz74ww1mm_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=8) %!s(int=11) %!s(int=19) %!s(int=30)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=9)\
    \ %!s(int=12) %!s(int=21) %!s(int=33) %!s(int=54)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=12) %!s(int=16) %!s(int=28) %!s(int=44) %!s(int=72) %!s(int=116)\
    \ %!s(int=188)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[3]\n    } else {\n        stones[1]\
    \ = stones[2] = stones[3] = stones[4]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_j7lnubf_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = n\n    } else {\n        result[1] = n + 1\n   \
    \ }\n    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp6j_rkkn__test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp6j_rkkn__test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp6j_rkkn__test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=6) %!s(int=7) %!s(int=13) %!s(int=20) %!s(int=33)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp6j_rkkn__test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=6) %!s(int=7)\
    \ %!s(int=13) %!s(int=20) %!s(int=33) %!s(int=53)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp6j_rkkn__test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=8) %!s(int=9) %!s(int=17) %!s(int=26) %!s(int=43) %!s(int=69) %!s(int=112)\
    \ %!s(int=181)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n)\n    piles[0] = n\n    if n%2 == 0\
    \ {\n        piles[1] = 2*piles[0]\n    } else {\n        piles[1] = piles[0]\n\
    \    }\n    for i := 2; i < n; i++ {\n        if i%2 == 0 {\n            piles[i]\
    \ = piles[i-1] + piles[i-2]\n        } else {\n            piles[i] = piles[i-1]\n\
    \        }\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpgw9xhe9p_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpgw9xhe9p_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=8) %!s(int=12) %!s(int=12)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpgw9xhe9p_test.go:51: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=10) %!s(int=10) %!s(int=20)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpgw9xhe9p_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=12) %!s(int=18)\
    \ %!s(int=18) %!s(int=36) %!s(int=36)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpgw9xhe9p_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=16) %!s(int=24) %!s(int=24) %!s(int=48) %!s(int=48) %!s(int=96) %!s(int=96)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    if n%2 ==\
    \ 0 {\n        piles[1] = n + 2\n    } else {\n        piles[1] = n + 4\n    }\n\
    \    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7iyc_7x8_test.go:44: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=7) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7iyc_7x8_test.go:44: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7iyc_7x8_test.go:44:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7iyc_7x8_test.go:44: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=8) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7iyc_7x8_test.go:44: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=10) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n < 0 {\n        return []int{}\n    }\n    stones := make([]int,\
    \ n+1)\n    stones[0] = n\n    stones[1] = stones[0]\n    if n%2 == 0 {\n    \
    \    stones[2] = stones[1]\n    } else {\n        stones[2] = stones[0]\n    }\n\
    \    for i := 3; i <= n; i++ {\n        stones[i+1] = stones[i]+stones[i-1]\n\
    \    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpfdcqthji_test.go:29\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpfdcqthji_test.go:41\
    \ +0x63f\ntesting.tRunner(0xc0001a0340, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        result[1] = n+1\n    } else {\n        result[1] = n\n    }\n\
    \    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptfbvseil_test.go:44:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    piles[1]\
    \ = n / 2\n    if n%2 == 0 {\n        piles[2] = n / 4\n    } else {\n       \
    \ piles[2] = n / 2\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpje6h96vh_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i]\
    \ + 1\n        }\n    } else {\n        for i := 1; i < n; i++ {\n           \
    \ result[i+1] = result[i] + 2\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp06mabtti_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp06mabtti_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp06mabtti_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp06mabtti_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp06mabtti_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    if n%2 ==\
    \ 0 {\n        piles[1] = piles[2] = piles[3] = piles[4] = piles[5] = piles[6]\
    \ = piles[7] = piles[8] = piles[9] = piles[10] = piles[11] = piles[12] = piles[13]\
    \ = piles[14] = piles[15] = piles[16] = piles[17] = piles[18] = piles[19] = piles[20]\
    \ = piles[21] = piles[22] = piles[23] = piles[24] = piles[25] = piles[26] = piles[27]\
    \ = piles[28] = piles[29] = piles[30] = piles[31] = piles[32] = piles[33] = piles[34]\
    \ = piles[35] = piles[36] = piles[37] = piles[38] = piles[39] = piles[40] = piles[41]\
    \ = piles[42] = piles[43] = piles[44] = piles[45] = piles[46] = piles[47] = piles[48]\
    \ = piles[49] = piles[50] = piles[51] = piles[52] = piles[53] = piles[54] = piles[55]\
    \ = piles[56] = piles[57] = piles[58] = piles[59] = piles[60] = piles[61] = piles[62]\
    \ = piles[63] = piles[64] = piles[65] = piles[66] = piles[67] = piles[68] = piles[69]\
    \ = piles[70] = piles[71] = piles[72] = piles[73] = piles[74] = piles[75] = piles[76]\
    \ = piles[77] = piles[78] = piles[79] = piles[80] = piles[81] = piles[82] = piles[83]\
    \ = piles[84] = piles[85] = piles[86] = piles[87] = piles[88] = piles[89] = piles[90]\
    \ = piles[91] = piles[92] = piles[93] = piles[94] = piles[95] = piles[96] = piles[97]\
    \ = piles[98] = pile\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsgvevoki_test.go:20:29: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 0\n    i := 1\n\
    \    for i <= n {\n        if i%2 == 0 {\n            result[i] = result[i-1]\
    \ + i\n        } else {\n            result[i] = result[i-1] + i/2\n        }\n\
    \        i++\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpegb3mduu_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpegb3mduu_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=7)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpegb3mduu_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=7) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpegb3mduu_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=2)\
    \ %!s(int=3) %!s(int=7) %!s(int=9) %!s(int=15)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpegb3mduu_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=7) %!s(int=9) %!s(int=15) %!s(int=18)\
    \ %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result [0] = 1\n    if n%2\
    \ == 0 {\n        for i := 1; i < n; i++ {\n            result[i] = result[i-1]\
    \ + result[i-2]\n        }\n    } else {\n        for i := 1; i < n; i++ {\n \
    \           result[i] = result[i-1] + result[i-2]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 20 [running]:\ntesting.tRunner.func1.2({0x513820, 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpmt1w192x_test.go:25\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpmt1w192x_test.go:38\
    \ +0x5f2\ntesting.tRunner(0xc0001036c0, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    for i := 3; i <= n; i++ {\n       \
    \ stones[i] = stones[i-1] + stones[i-2]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=8) %!s(int=12)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp3_59ugoi_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=10) %!s(int=15) %!s(int=25)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=12) %!s(int=18) %!s(int=30) %!s(int=48)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=16) %!s(int=24) %!s(int=40) %!s(int=64) %!s(int=104)\
    \ %!s(int=168)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n)\n    piles[0] = n\n    if n%2 == 1\
    \ {\n        piles[1] = n - 1\n    } else {\n        piles[1] = n / 2\n    }\n\
    \    for i := 2; i < n; i++ {\n        piles[i] = piles[i-1] + piles[i-2]\n  \
    \  }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpjbn97kjp_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpjbn97kjp_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=6) %!s(int=8)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpjbn97kjp_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=4) %!s(int=9) %!s(int=13) %!s(int=22)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpjbn97kjp_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=9)\
    \ %!s(int=12) %!s(int=21) %!s(int=33)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpjbn97kjp_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=12) %!s(int=16) %!s(int=28) %!s(int=44) %!s(int=72) %!s(int=116)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    stones[2] = stones[1]\n    if n%2 == 0 {\n        stones[3]\
    \ = stones[2]\n    } else {\n        stones[3] = stones[1]\n    }\n    return\
    \ stones\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvgj_u2r2_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvgj_u2r2_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvgj_u2r2_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvgj_u2r2_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvgj_u2r2_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    for i := 3; i <= n; i++ {\n       \
    \ stones[i] = stones[i-1] + stones[i-2]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=8) %!s(int=12)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp3_59ugoi_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=10) %!s(int=15) %!s(int=25)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=12) %!s(int=18) %!s(int=30) %!s(int=48)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=16) %!s(int=24) %!s(int=40) %!s(int=64) %!s(int=104)\
    \ %!s(int=168)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n == 0 {\n        return []int{n}\n    }\n    stones :=\
    \ make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[0]\n    if n%2 ==\
    \ 0 {\n        stones[2] = stones[0]\n    } else {\n        stones[2] = stones[1]\n\
    \    }\n    for i := 3; i <= n; i++ {\n        stones[i] = stones[i-1] + stones[i-2]\n\
    \    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpw4f6t5qy_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpw4f6t5qy_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=8) %!s(int=12)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpw4f6t5qy_test.go:51:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=10) %!s(int=15) %!s(int=25)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpw4f6t5qy_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=12) %!s(int=18) %!s(int=30) %!s(int=48)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpw4f6t5qy_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=16) %!s(int=24) %!s(int=40) %!s(int=64) %!s(int=104)\
    \ %!s(int=168)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    for i := 3; i <= n; i++ {\n       \
    \ stones[i] = stones[i-1] + stones[i-2]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=8) %!s(int=12)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp3_59ugoi_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=10) %!s(int=15) %!s(int=25)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=12) %!s(int=18) %!s(int=30) %!s(int=48)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=16) %!s(int=24) %!s(int=40) %!s(int=64) %!s(int=104)\
    \ %!s(int=168)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = n\n    stones[3] = stones[4] = n\n    stones[5] = stones[6] =\
    \ n\n    stones[7] = stones[8] = n\n    stones[9] = stones[10] = n\n    stones[11]\
    \ = stones[12] = n\n    stones[13] = stones[14] = n\n    stones[15] = stones[16]\
    \ = n\n    stones[17] = stones[18] = n\n    stones[19] = stones[20] = n\n    stones[21]\
    \ = stones[22] = n\n    stones[23] = stones[24] = n\n    stones[25] = stones[26]\
    \ = n\n    stones[27] = stones[28] = n\n    stones[29] = stones[30] = n\n    stones[31]\
    \ = stones[32] = n\n    stones[33] = stones[34] = n\n    stones[35] = stones[36]\
    \ = n\n    stones[37] = stones[38] = n\n    stones[39] = stones[40] = n\n    stones[41]\
    \ = stones[42] = n\n    stones[43] = stones[44] = n\n    stones[45] = stones[46]\
    \ = n\n    stones[47] = stones[48] = n\n    stones[49] = stones[50] = n\n    stones[51]\
    \ = stones[52] = n\n    stones[53] = stones[54] = n\n    stones[55] = stones[56]\
    \ = n\n    stones[57] = stones[58] = n\n    stones[59] = stones[60] = n\n    stones[61]\
    \ = stones[62] = n\n    stones[63] = stones[64] = n\n    stones[65] = stones[66]\
    \ = n\n    stones[67] = stones[68] = n\n    stones[69] = stones[70] = n\n    stones[71]\
    \ = stones[72] = n\n    stones[73] = stones[74] = n\n    stones[75] = stones[76]\
    \ = n\n    stones[77] = stones[78] = n\n    stones[79] = stones[80] = n\n    stones[81]\
    \ = stones[82] = n\n    stones[83] = stones[84] = n\n    stones[85] = stones[86]\
    \ = n\n    stones[87] = stones[88] = n\n    stones[89] = stones[90] = n\n    stones[91]\
    \ = stone\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpatnosk2d_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpd4mshq_7_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpd4mshq_7_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2]\n    } else {\n        stones[1] = stones[2]\
    \ = stones[3]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0sdfqcis_test.go:22:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    for i := 3; i < n; i++ {\n        stones[i]\
    \ = stones[i-1] + stones[i-2]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp4opyoi5c_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp4opyoi5c_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=8)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp4opyoi5c_test.go:48: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp4opyoi5c_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=12) %!s(int=18) %!s(int=30)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp4opyoi5c_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=16) %!s(int=24) %!s(int=40) %!s(int=64) %!s(int=104)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    piles[1]\
    \ = n / 2\n    if n%2 == 0 {\n        piles[2] = n / 4\n    } else {\n       \
    \ piles[2] = n / 2\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpje6h96vh_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i]\
    \ + 1\n        }\n    } else {\n        for i := 1; i < n; i++ {\n           \
    \ result[i+1] = result[i] + 2\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp06mabtti_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp06mabtti_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp06mabtti_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp06mabtti_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp06mabtti_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n)\n    piles[0] = n\n    piles[1] =\
    \ n / 2\n    if n%2 == 0 {\n        piles[2] = n / 4\n    } else {\n        piles[2]\
    \ = n / 2\n    }\n    if n%4 == 0 {\n        piles[3] = n / 8\n    } else {\n\
    \        piles[3] = n / 4\n    }\n    if n%8 == 0 {\n        piles[4] = n / 16\n\
    \    } else {\n        piles[4] = n / 8\n    }\n    if n%16 == 0 {\n        piles[5]\
    \ = n / 32\n    } else {\n        piles[5] = n / 16\n    }\n    if n%32 == 0 {\n\
    \        piles[6] = n / 64\n    } else {\n        piles[6] = n / 32\n    }\n \
    \   if n%64 == 0 {\n        piles[7] = n / 128\n    } else {\n        piles[7]\
    \ = n / 64\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(0x3)\n\t/tmp/tmpj5qlusby_test.go:28\
    \ +0x22f\ncommand-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpj5qlusby_test.go:60\
    \ +0x46\ntesting.tRunner(0xc0001a0340, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n < 0 {\n        return []int{}\n    }\n    stones := make([]int,\
    \ n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3] = stones[4] =\
    \ stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10] = stones[11]\
    \ = stones[12] = stones[13] = stones[14] = stones[15] = stones[16] = stones[17]\
    \ = stones[18] = stones[19] = stones[20] = stones[21] = stones[22] = stones[23]\
    \ = stones[24] = stones[25] = stones[26] = stones[27] = stones[28] = stones[29]\
    \ = stones[30] = stones[31] = stones[32] = stones[33] = stones[34] = stones[35]\
    \ = stones[36] = stones[37] = stones[38] = stones[39] = stones[40] = stones[41]\
    \ = stones[42] = stones[43] = stones[44] = stones[45] = stones[46] = stones[47]\
    \ = stones[48] = stones[49] = stones[50] = stones[51] = stones[52] = stones[53]\
    \ = stones[54] = stones[55] = stones[56] = stones[57] = stones[58] = stones[59]\
    \ = stones[60] = stones[61] = stones[62] = stones[63] = stones[64] = stones[65]\
    \ = stones[66] = stones[67] = stones[68] = stones[69] = stones[70] = stones[71]\
    \ = stones[72] = stones[73] = stones[74] = stones[75] = stones[76] = stones[77]\
    \ = stones[78] = stones[79] = stones[80] = stones[81] = stones[82] = stones[83]\
    \ = stones[84] = stones[85] = stones[86] = stones[87] = stones[88] = stones[89]\
    \ = stones[90] = stones[91] = stones[92] = stones[93] = stones[94] = stones[95]\
    \ = stones[96] = stones[97] = stones[98] = stones[99] = stones[100] = stones[101]\
    \ = stones[102] = stones[103] = stones[104] = stones[105] = stones[106] = stones[107]\
    \ = stones[108] = stones[109] = stones[110] = stones[111] = stones[112] = stones[113]\
    \ = stones[114] = stones[115] = stones[116] = stones[117] = stones[118] = stones[119]\
    \ = stones[120] = stones[121] = stones[122] = stones[\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyb3kszlb_test.go:22:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[n-1]\n    } else {\n        stones[1]\
    \ = stones[2] = stones[n-1] + stones[n-2]\n    }\n    return stones\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplyr6b_ly_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 0\n    if n%2\
    \ == 0 {\n        for i := 1; i < n; i++ {\n            result[i] = result[i-1]\
    \ + 1\n        }\n    } else {\n        for i := 1; i < n; i++ {\n           \
    \ result[i] = result[i-1] + 2\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpcg5w_0d2_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpcg5w_0d2_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpcg5w_0d2_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpcg5w_0d2_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpcg5w_0d2_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = result[n/2]\n    } else {\n        result[1] = result[n/2]\
    \ + 1\n    }\n    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] +\
    \ result[i-2]\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpnz8m_lc5_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpnz8m_lc5_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpnz8m_lc5_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpnz8m_lc5_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=0) %!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpnz8m_lc5_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)\
    \ %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 0\n    if n%2\
    \ == 0 {\n        result[1] = n\n    } else {\n        result[1] = n + 1\n   \
    \ }\n    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpe_kegles_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=4) %!s(int=4) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpe_kegles_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=4) %!s(int=4) %!s(int=8) %!s(int=12)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpe_kegles_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=6) %!s(int=6) %!s(int=12) %!s(int=18) %!s(int=30)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpe_kegles_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=6) %!s(int=6)\
    \ %!s(int=12) %!s(int=18) %!s(int=30) %!s(int=48)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpe_kegles_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=8) %!s(int=8) %!s(int=16) %!s(int=24) %!s(int=40) %!s(int=64) %!s(int=104)\
    \ %!s(int=168)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    i := 1\n\
    \    for i <= n {\n        if n%2 == 0 {\n            result[i] = result[i-1]\
    \ + 1\n        } else {\n            result[i] = result[i-1]\n        }\n    \
    \    i += 2\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpf36thpo6_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpf36thpo6_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=2) %!s(int=0) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpf36thpo6_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpf36thpo6_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=2) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpf36thpo6_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    if n%2 ==\
    \ 0 {\n        for i := 1; i < n; i++ {\n            piles[i+1] = piles[i]+1\n\
    \        }\n    } else {\n        for i := 1; i < n; i++ {\n            piles[i+1]\
    \ = piles[i]+2\n        }\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp6c181kbg_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp6c181kbg_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp6c181kbg_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp6c181kbg_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp6c181kbg_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        result[1] = 2*n\n    } else {\n        result[1] = n\n    }\n\
    \    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmprferrmm5_test.go:44: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmprferrmm5_test.go:44: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmprferrmm5_test.go:44:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmprferrmm5_test.go:44: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=12) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmprferrmm5_test.go:44: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=16) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[3]\n    } else {\n        stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8gkzwb97_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    piles[1]\
    \ = n / 2\n    if n%2 == 0 {\n        piles[2] = n / 4\n    } else {\n       \
    \ piles[2] = n / 2\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpje6h96vh_test.go:45:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpje6h96vh_test.go:45: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = n\n    if n%2\
    \ == 0 {\n        result[1] = n+1\n    } else {\n        result[1] = n\n    }\n\
    \    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptfbvseil_test.go:44:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmptfbvseil_test.go:44: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    n += 1 // +1 because first\
    \ level is n+1 stones\n    for i := 0; i < n; i++ {\n        result[i] = n\n \
    \       if i%2 == 0 {\n            result[i+1] = result[i] + result[i/2]\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpa86tqshd_test.go:22\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpa86tqshd_test.go:36\
    \ +0x6b9\ntesting.tRunner(0xc0001a01a0, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = n+1\n    } else {\n        result[1] = n\n    }\n\
    \    for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpig_jgm2c_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpig_jgm2c_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=11) %!s(int=17)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpig_jgm2c_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=6) %!s(int=11) %!s(int=17) %!s(int=28)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpig_jgm2c_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=7) %!s(int=8)\
    \ %!s(int=15) %!s(int=23) %!s(int=38) %!s(int=61)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpig_jgm2c_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=9) %!s(int=10) %!s(int=19) %!s(int=29) %!s(int=48) %!s(int=77) %!s(int=125)\
    \ %!s(int=202)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n == 0 {\n        return []int{n}\n    }\n    stones :=\
    \ make_a_pile(n-1)\n    if n % 2 == 0 {\n        stones = append(stones, stones[n-1]+1)\n\
    \    } else {\n        stones = append(stones, stones[n-1]+1)\n        stones\
    \ = append(stones, stones[n-1]+1)\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpgu6kvm08_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n        tmpgu6kvm08_test.go:47:\
    \ expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpgu6kvm08_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n        tmpgu6kvm08_test.go:47:\
    \ expected '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpgu6kvm08_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    piles[1]\
    \ = n / 2\n    piles[2] = n / 2\n    if n%2 == 0 {\n        piles[3] = n / 2\n\
    \    } else {\n        piles[3] = n / 4\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmppri_rrfs_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmppri_rrfs_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmppri_rrfs_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmppri_rrfs_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=3)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmppri_rrfs_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    result := make([]int,\
    \ n+1)\n    n /= 2\n    result[n] = n\n    if n % 2 == 0 {\n        result[n+1]\
    \ = n + 2\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp0xm6sdk6_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp0xm6sdk6_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp0xm6sdk6_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp0xm6sdk6_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp0xm6sdk6_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=6) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n%2 == 0 {\n        return make_a_pile_even(n)\n    } else\
    \ {\n        return make_a_pile_odd(n)\n    }\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5g_9e8iw_test.go:18:16: undefined: make_a_pile_even

    /tmp/tmp5g_9e8iw_test.go:20:16: undefined: make_a_pile_odd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    if n%2 ==\
    \ 0 {\n        piles[1] = n/2\n    } else {\n        piles[1] = 2*n/3\n    }\n\
    \    for i := 2; i <= n; i++ {\n        piles[i] = piles[i-1] + piles[i-2]\n \
    \   }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=6) %!s(int=8) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpz74ww1mm_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=8) %!s(int=11) %!s(int=19) %!s(int=30)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=9)\
    \ %!s(int=12) %!s(int=21) %!s(int=33) %!s(int=54)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=12) %!s(int=16) %!s(int=28) %!s(int=44) %!s(int=72) %!s(int=116)\
    \ %!s(int=188)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n == 0 {\n        return []int{n}\n    }\n    stones :=\
    \ make_a_pile(n-1)\n    if n%2 == 0 {\n        stones = append(stones, stones[n-1])\n\
    \    } else {\n        stones = append(stones, stones[n-1])\n        stones =\
    \ append(stones, stones[n-2])\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 20 [running]:\ntesting.tRunner.func1.2({0x513820, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(0x1)\n\t/tmp/tmpsugq88aj_test.go:25\
    \ +0x17a\ncommand-line-arguments_test.make_a_pile(0x2)\n\t/tmp/tmpsugq88aj_test.go:20\
    \ +0x3a\ncommand-line-arguments_test.make_a_pile(0x3)\n\t/tmp/tmpsugq88aj_test.go:20\
    \ +0x3a\ncommand-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpsugq88aj_test.go:37\
    \ +0x46\ntesting.tRunner(0xc000103a00, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    i := 0\n    for i < n {\n\
    \        result[i] = n\n        if i%2 == 0 {\n            result[i+1] = result[i]/2\n\
    \        } else {\n            result[i+1] = result[i]*3+1\n        }\n      \
    \  i++\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpekj8skvw_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpekj8skvw_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=13)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpekj8skvw_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpekj8skvw_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=19)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpekj8skvw_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8)\
    \ %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    stones := make([]int,\
    \ n+1)\n    stones[0] = n\n    stones[2] = n\n    stones[3] = n\n    stones[4]\
    \ = n\n    stones[5] = n\n    stones[6] = n\n    stones[7] = n\n    stones[8]\
    \ = n\n    stones[9] = n\n    stones[10] = n\n    stones[11] = n\n    stones[12]\
    \ = n\n    stones[13] = n\n    stones[14] = n\n    stones[15] = n\n    stones[16]\
    \ = n\n    stones[17] = n\n    stones[18] = n\n    stones[19] = n\n    stones[20]\
    \ = n\n    stones[21] = n\n    stones[22] = n\n    stones[23] = n\n    stones[24]\
    \ = n\n    stones[25] = n\n    stones[26] = n\n    stones[27] = n\n    stones[28]\
    \ = n\n    stones[29] = n\n    stones[30] = n\n    stones[31] = n\n    stones[32]\
    \ = n\n    stones[33] = n\n    stones[34] = n\n    stones[35] = n\n    stones[36]\
    \ = n\n    stones[37] = n\n    stones[38] = n\n    stones[39] = n\n    stones[40]\
    \ = n\n    stones[41] = n\n    stones[42] = n\n    stones[43] = n\n    stones[44]\
    \ = n\n    stones[45] = n\n    stones[46] = n\n    stones[47] = n\n    stones[48]\
    \ = n\n    stones[49] = n\n    stones[50] = n\n    stones[51] = n\n    stones[52]\
    \ = n\n    stones[53] = n\n    stones[54] = n\n    stones[55] = n\n    stones[56]\
    \ = n\n    stones[57] = n\n    stones[58] = n\n    stones[59] = n\n    stones[60]\
    \ = n\n    stones[61] = n\n    stones[62] = n\n    stones[63] = n\n    stones[64]\
    \ = n\n    stones[65] = n\n    stones[66] = n\n    stones[67] = n\n    stones[68]\
    \ = n\n    stones[69] = n\n    stones[70] = n\n    stones[71] = n\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpolkrwr24_test.go:93:6: expected ''('', found TestMake_A_Pile

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    stones[2] = stones[0]\n    stones[3] = stones[0]\n    if n%2\
    \ == 0 {\n        stones[4] = stones[0]\n        stones[5] = stones[0]\n    }\
    \ else {\n        stones[4] = stones[0]\n        stones[5] = stones[1]\n    }\n\
    \    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpscvq62q3_test.go:26\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpscvq62q3_test.go:39\
    \ +0x54\ntesting.tRunner(0xc0001a0340, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        result[1] = n+1\n    } else {\n        result[1] = n\n    }\n\
    \    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            result[i] =\
    \ result[i-1] + result[i-2]\n        } else {\n            result[i] = result[i-1]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpejyj44vp_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpejyj44vp_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=12)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpejyj44vp_test.go:51:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=12) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpejyj44vp_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=7) %!s(int=8)\
    \ %!s(int=8) %!s(int=16) %!s(int=16) %!s(int=32)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpejyj44vp_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=9) %!s(int=10) %!s(int=10) %!s(int=20) %!s(int=20) %!s(int=40) %!s(int=40)\
    \ %!s(int=80)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073638
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[0]\n    } else {\n\
    \        stones[2] = stones[1]\n    }\n    for i := 3; i <= n; i++ {\n       \
    \ stones[i+1] = stones[i]+stones[i-1]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpr44u_qva_test.go:26\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpr44u_qva_test.go:38\
    \ +0x63f\ntesting.tRunner(0xc0001a0340, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    for i := 3; i <= n; i++ {\n       \
    \ stones[i] = stones[i-1] + stones[i-2]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=8) %!s(int=12)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp3_59ugoi_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=10) %!s(int=15) %!s(int=25)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=12) %!s(int=18) %!s(int=30) %!s(int=48)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp3_59ugoi_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=16) %!s(int=24) %!s(int=40) %!s(int=64) %!s(int=104)\
    \ %!s(int=168)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    stones := make([]int,\
    \ n+1)\n    stones[0] = n\n    stones[1] = stones[0]\n    if n%2 == 0 {\n    \
    \    stones[2] = stones[1]\n    } else {\n        stones[2] = stones[0]\n    }\n\
    \    for i := 3; i <= n; i++ {\n        stones[i] = stones[i-1] + stones[i-2]\n\
    \    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpwn_j0hjf_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpwn_j0hjf_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=8) %!s(int=12)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpwn_j0hjf_test.go:51:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=10) %!s(int=15) %!s(int=25)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpwn_j0hjf_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=12) %!s(int=18) %!s(int=30) %!s(int=48)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpwn_j0hjf_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=16) %!s(int=24) %!s(int=40) %!s(int=64) %!s(int=104)\
    \ %!s(int=168)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    if n%2\
    \ == 0 {\n        stones[1] = stones[2] = stones[3]\n    } else {\n        stones[1]\
    \ = stones[2] = stones[3] = stones[4]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_j7lnubf_test.go:20:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    i := 1\n\
    \    for i <= n {\n        if i%2 == 0 {\n            result[i] = result[i-1]\
    \ + 1\n        } else {\n            result[i] = result[i-1]\n        }\n    \
    \    i++\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpgbof__ay_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpgbof__ay_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpgbof__ay_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpgbof__ay_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)\
    \ %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpgbof__ay_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4)\
    \ %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    if n == 0 {\n        return []int{n}\n    }\n    stones :=\
    \ make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[0]\n    stones[2]\
    \ = stones[0]\n    stones[3] = stones[0]\n    if n%2 == 0 {\n        stones[2]\
    \ = stones[0] + stones[1]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpkmqg4_qq_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpkmqg4_qq_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=8) %!s(int=4) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpkmqg4_qq_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpkmqg4_qq_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=12)\
    \ %!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpkmqg4_qq_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=16) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    piles := make([]int, n+1)\n    piles[0] = n\n    if n%2 ==\
    \ 0 {\n        piles[1] = n/2\n    } else {\n        piles[1] = 2*n/3\n    }\n\
    \    for i := 2; i <= n; i++ {\n        piles[i] = piles[i-1] + piles[i-2]\n \
    \   }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=5) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=6) %!s(int=8) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpz74ww1mm_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=8) %!s(int=11) %!s(int=19) %!s(int=30)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=9)\
    \ %!s(int=12) %!s(int=21) %!s(int=33) %!s(int=54)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpz74ww1mm_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=12) %!s(int=16) %!s(int=28) %!s(int=44) %!s(int=72) %!s(int=116)\
    \ %!s(int=188)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = n\n    if n%2 == 0 {\n        stones[2] = stones[3] = n\n    }\
    \ else {\n        stones[3] = stones[4] = n\n    }\n    return stones\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2ty79l_m_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[2] = stones[3] = stones[4] = stones[5] = stones[6] = stones[7] = stones[8]\
    \ = stones[9] = stones[10] = stones[11] = stones[12] = stones[13] = stones[14]\
    \ = stones[15] = stones[16] = stones[17] = stones[18] = stones[19] = stones[20]\
    \ = stones[21] = stones[22] = stones[23] = stones[24] = stones[25] = stones[26]\
    \ = stones[27] = stones[28] = stones[29] = stones[30] = stones[31] = stones[32]\
    \ = stones[33] = stones[34] = stones[35] = stones[36] = stones[37] = stones[38]\
    \ = stones[39] = stones[40] = stones[41] = stones[42] = stones[43] = stones[44]\
    \ = stones[45] = stones[46] = stones[47] = stones[48] = stones[49] = stones[50]\
    \ = stones[51] = stones[52] = stones[53] = stones[54] = stones[55] = stones[56]\
    \ = stones[57] = stones[58] = stones[59] = stones[60] = stones[61] = stones[62]\
    \ = stones[63] = stones[64] = stones[65] = stones[66] = stones[67] = stones[68]\
    \ = stones[69] = stones[70] = stones[71] = stones[72] = stones[73] = stones[74]\
    \ = stones[75] = stones[76] = stones[77] = stones[78] = stones[79] = stones[80]\
    \ = stones[81] = stones[82] = stones[83] = stones[84] = stones[85] = stones[86]\
    \ = stones[87] = stones[88] = stones[89] = stones[90] = stones[91] = stones[92]\
    \ = stones[93] = stones[94] = stones[95] = stones[96] = stones[97] = stones[98]\
    \ = stones[99] = stones[100] = stones[101] = stones[102] = stones[103] = stones[104]\
    \ = stones[105] = stones[106] = stones[107] = stones[108] = stones[109] = stones[110]\
    \ = stones[111] = stones[112] = stones[113] = stones[114] = stones[115] = stones[116]\
    \ = stones[117] = stones[118] = stones[119] = stones[120] = stones[121] = stones[122]\
    \ = stones[123] = stones[124] = stones[125] = \nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m4e8af3_test.go:19:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    result := make([]int, n+1)\n    result[0] = 1\n    if n%2\
    \ == 0 {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i]*2\n\
    \        }\n    } else {\n        for i := 1; i < n; i++ {\n            result[i+1]\
    \ = result[i]/2\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpp88trgkq_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpp88trgkq_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpp88trgkq_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpp88trgkq_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpp88trgkq_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\nfunc make_a_pile(n\
    \ int) []int {\n    stones := make([]int, n+1)\n    stones[0] = n\n    stones[1]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    } else {\n\
    \        stones[2] = stones[0]\n    }\n    for i := 3; i <= n; i++ {\n       \
    \ stones[i] = stones[i-2] + stones[i-1]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmprmvzpqcx_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmprmvzpqcx_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=8) %!s(int=12)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmprmvzpqcx_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=10) %!s(int=15) %!s(int=25)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmprmvzpqcx_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=12) %!s(int=18) %!s(int=30) %!s(int=48)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmprmvzpqcx_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=16) %!s(int=24) %!s(int=40) %!s(int=64) %!s(int=104)\
    \ %!s(int=168)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073645
