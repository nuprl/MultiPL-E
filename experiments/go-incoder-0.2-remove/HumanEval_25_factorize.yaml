name: HumanEval_25_factorize
language: go_test.go
prompt: "package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Return list of prime factors of given integer in the order from smallest to largest.\n\
  // Each of the factors should be listed number of times corresponding to how many\
  \ times it appeares in factorization.\n// Input number should be equal to the product\
  \ of all factors\nfunc factorize(n int) []int {\n"
tests: "func TestFactorize(t *testing.T) {\n  candidate := factorize\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(2), expected: []int{2} },\n     { actual: candidate(4),\
  \ expected: []int{2, 2} },\n     { actual: candidate(8), expected: []int{2, 2, 2}\
  \ },\n     { actual: candidate(57), expected: []int{3, 19} },\n     { actual: candidate(3249),\
  \ expected: []int{3, 3, 19, 19} },\n     { actual: candidate(185193), expected:\
  \ []int{3, 3, 3, 19, 19, 19} },\n     { actual: candidate(20577), expected: []int{3,\
  \ 19, 19, 19} },\n     { actual: candidate(18), expected: []int{2, 3, 3} },\n  \
  \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i\
    \ == 0 {\n            factors = append(factors, i)\n            n /= i\n     \
    \   }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    i := 2\n    for i < n {\n        if n % i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = i\n        }\n        i++\n    }\n    return factors\n}\n", "    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /=\
    \ i\n        }\n    }\n    if n > 1 {\n        factors[len(factors)-1] = factors[len(factors)-1]\
    \ * n\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    factors[1] = n\n    for i := 2; i <= n; i++ {\n        if n%i == 0\
    \ {\n            factors[i] = factors[i-1] * i\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    for i :=\
    \ 0; i < n; i++ {\n        if n%i == 0 {\n            factors[i] = i\n       \
    \     n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    for\
    \ i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0\
    \ {\n            factors = append(factors, factor)\n            n /= factor\n\
    \        } else {\n            factor++\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        for j := 1; j < i; j++ {\n            if n%i == 0 {\n    \
    \            factors[i] = factors[i-1] * j\n                break\n          \
    \  }\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = 1\n        }\n    }\n    return factors\n}\n", " \
    \   factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n\
    \            factors = append(factors, i)\n            n /= i\n        }\n   \
    \ }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    factors[1] = n\n    for i := 2; i <= n; i++ {\n        if n % i ==\
    \ 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n       \
    \ }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    factorizer := func(n *int) bool {\n       \
    \ if *n % 2 == 0 {\n            factors = append(factors, 2)\n            *n /=\
    \ 2\n            return true\n        }\n        if *n % 3 == 0 {\n          \
    \  factors = append(factors, 3)\n            *n /= 3\n            return true\n\
    \        }\n        if *n % 5 == 0 {\n            factors = append(factors, 5)\n\
    \            *n /= 5\n            return true\n        }\n        if *n % 7 ==\
    \ 0 {\n            factors = append(factors, 7)\n            *n /= 7\n       \
    \     return true\n        }\n        if *n % 11 == 0 {\n            factors =\
    \ append(factors, 11)\n            *n /= 11\n            return true\n       \
    \ }\n        if *n % 13 == 0 {\n            factors = append(factors, 13)\n  \
    \          *n /= 13\n            return true\n        }\n        if *n % 17 ==\
    \ 0 {\n            factors = append(factors, 17)\n            *n /= 17\n     \
    \       return true\n        }\n        if *n % 19 == 0 {\n            factors\
    \ = append(factors, 19)\n            *n /= 19\n            return true\n     \
    \   }\n        if *n % 23 == 0 {\n            factors = append(factors, 23)\n\
    \            *n /= 23\n            return true\n        }\n        if *n % 29\
    \ == 0 {\n            factors = append(factors, 29)\n            *n /= 29\n  \
    \          return true\n        }\n        if *n % 31 == 0 {\n            factors\
    \ = append(factors, 31)\n            *n /= 31\n            return true\n     \
    \   }\n        if *n % 37 == 0 {\n            factors = append(factors, 37)\n\
    \            *n /= 37\n            return true\n        }\n        if *n % 41\
    \ == 0 {\n            factors = append(factors, 41)\n            *n /= 41\n  \
    \          return true\n        }\n        if *n % 43 == 0 {\n            factors\
    \ = append(factors, 43)\n            *n /= 43\n            return true\n     \
    \   }\n        if *n % 47 == 0 {\n            factors = append(factors, 47)\n\
    \            *n /= 47\n            return true\n        }\n        if *n % 53\
    \ == 0 {\n            factors = append(factors, 53)\n            *n /= 53\n  \
    \          return true\n        }\n        if *n % 59 == 0 {\n            factors\
    \ = append(factors, 59)\n            *n /= 59\n            return true\n     \
    \   }\n        if *n % 61 == 0 {\n            factors = append(factors, 61)\n\
    \            *n /= 61\n            return true\n        }\n        if *n % 67\
    \ == 0 {\n            factors = append(factors, 67)\n            *n /= 67\n  \
    \          return true\n        }\n        if *n % 71 == 0 {\n            ", " \
    \   factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for\
    \ i := 2; i < n; i++ {\n        if n % i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n    \
    \    if n%i == 0 {\n            factors = append(factors, i)\n            n /=\
    \ i\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n \
    \   factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n         \
    \   factors = append(factors, factor)\n            n /= factor\n        }\n  \
    \  }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    factors[1] = n\n    for i := 2; i <= n; i++ {\n        if n % i ==\
    \ 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n       \
    \ }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if n % i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = 1\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n\
    \    for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i < n; i++ {\n \
    \       if n % i == 0 {\n            factors[i] = factors[i-1] * i\n         \
    \   n /= i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n % i == 0\
    \ {\n            factors[i] = factors[i-1] * i\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    factors[1] = n\n    for i := 2; i <= n/2; i++ {\n        if n%i ==\
    \ 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n       \
    \ } else {\n            factors[i] = 1\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for\
    \ i < n {\n        if n % i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \        i++\n    }\n    return factors\n}\n", "    factors := []int{}\n    for\
    \ i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /=\
    \ i\n        } else {\n            factors[i] = 1\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n    \
    \    if n%i == 0 {\n            factors = append(factors, i)\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors[i-1] *= i\n            factors[i-1]--\n        }\n    }\n \
    \   return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        }\n  \
    \  }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n", "    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    } else {\n            factor++\n        }\n    }\n    return factors\n}\n",
  "    factors := make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 1; j < i; j++ {\n            if\
    \ n%i == 0 {\n                factors[i] += factors[j]\n                n /= i\n\
    \            }\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0\
    \ {\n            factors = append(factors, factor)\n            n /= factor\n\
    \        } else {\n            factor++\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n\
    \    for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors = append(factors, i)\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        for j := 2; i*j <= n; j++ {\n         \
    \   if n%i == 0 {\n                factors[i] += factors[j-1]\n              \
    \  n /= i\n            }\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    if\
    \ n > 1 {\n        factors = append(factors, n)\n    }\n    return factors\n}\n",
  "    factors := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n\
    \        if n % i == 0 {\n            factors[i] = factors[i-1] * i\n        \
    \    n /= i\n        } else {\n            factors[i] = 1\n        }\n       \
    \ i++\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    factors[1] = n\n    for i := 2; i <= n/2; i++ {\n        if n%i ==\
    \ 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n       \
    \ } else {\n            factors[i] = 1\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n\
    \    for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n\
    \    for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n \
    \   for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors = append(factors, i)\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n            i++\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n        \
    \    factors = append(factors, factor)\n            n /= factor\n        } else\
    \ {\n            factor++\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <= n; i++ {\n     \
    \   for j := 2; j <= i/2; j++ {\n            if i%j == 0 {\n                factors[i]\
    \ = factors[i] + 1\n                break\n            }\n        }\n    }\n \
    \   return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n % i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n", "    factors :=\
    \ []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for\
    \ i < n {\n        if n % i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = 1\n        }\n\
    \        i++\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    for i := 2; i <= n; i++ {\n        if\
    \ n%i == 0 {\n            factors = append(factors, i)\n            n /= i\n \
    \       }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    for i := 0; i <\
    \ n; i++ {\n        for j := i + 1; j < n; j++ {\n            if n%i == 0 && n%j\
    \ == 0 {\n                factors[i] = factors[i] + 1\n                factors[j]\
    \ = factors[j] + 1\n            }\n        }\n    }\n    return factors\n}\n",
  "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n      \
    \  }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n\
    \    for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i\
    \ := 1; i < n; i++ {\n        if n % i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0\
    \ {\n            factors = append(factors, factor)\n            n /= factor\n\
    \        } else {\n            factor++\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n\
    \    for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if n % i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = 1\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n\
    \    for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        }\n  \
    \  }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n \
    \   factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n         \
    \   factors = append(factors, factor)\n            n /= factor\n        } else\
    \ {\n            factor++\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n       \
    \ if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = 1\n        }\n        i++\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    i := 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for\
    \ j := 0; j < i; j++ {\n            if n%i == 0 {\n                factors[i]\
    \ += factors[j]\n                factors[j] = 0\n            }\n        }\n  \
    \  }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    if n > 1 {\n \
    \       factors = append(factors, n)\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i-1]++\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return\
    \ factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n    \
    \    if n%i == 0 {\n            factors = append(factors, i)\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n   \
    \ factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n           \
    \ factors = append(factors, factor)\n            n /= factor\n        } else {\n\
    \            factor++\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors = append(factors, i)\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    if n != 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors\
    \ = append(factors, i)\n            n /= i\n        }\n    }\n    if n > 1 {\n\
    \        factors = append(factors, n)\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0\
    \ {\n            factors = append(factors, factor)\n            n /= factor\n\
    \        } else {\n            factor++\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for\
    \ i < n {\n        if n % i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = i\n        }\n\
    \        i++\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        }\n  \
    \  }\n    return factors\n}\n", "    factors := make([]int, n)\n    for i := 2;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        }\n  \
    \  }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i\
    \ <= n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] *\
    \ i\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := []int{}\n    factor := 2\n    for factor\
    \ <= n {\n        if n%factor == 0 {\n            factors = append(factors, factor)\n\
    \            n /= factor\n        } else {\n            factor++\n        }\n\
    \    }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i <= n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        for j := 1; j < i; j++ {\n            if n%i == 0 {\n    \
    \            factors[i] = factors[i] * j\n                n /= i\n           \
    \     break\n            }\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    factors[2] =\
    \ 2\n    factors[3] = 1\n    factors[4] = 2\n    factors[5] = 2\n    factors[6]\
    \ = 1\n    factors[7] = 2\n    factors[8] = 2\n    factors[9] = 1\n    factors[10]\
    \ = 2\n    factors[11] = 2\n    factors[12] = 1\n    factors[13] = 2\n    factors[14]\
    \ = 2\n    factors[15] = 1\n    factors[16] = 2\n    factors[17] = 2\n    factors[18]\
    \ = 1\n    factors[19] = 2\n    factors[20] = 2\n    factors[21] = 2\n    factors[22]\
    \ = 1\n    factors[23] = 2\n    factors[24] = 2\n    factors[25] = 1\n    factors[26]\
    \ = 2\n    factors[27] = 2\n    factors[28] = 1\n    factors[29] = 2\n    factors[30]\
    \ = 2\n    factors[31] = 2\n    factors[32] = 1\n    factors[33] = 2\n    factors[34]\
    \ = 2\n    factors[35] = 1\n    factors[36] = 2\n    factors[37] = 2\n    factors[38]\
    \ = 1\n    factors[39] = 2\n    factors[40] = 2\n    factors[41] = 2\n    factors[42]\
    \ = 1\n    factors[43] = 2\n    factors[44] = 2\n    factors[45] = 1\n    factors[46]\
    \ = 2\n    factors[47] = 2\n    factors[48] = 1\n    factors[49] = 2\n    factors[50]\
    \ = 2\n    factors[51] = 2\n    factors[52] = 1\n    factors[53] = 2\n    factors[54]\
    \ = 2\n    factors[55] = 1\n    factors[56] = 2\n    factors[57] = 2\n    factors[58]\
    \ = 1\n    factors[59] = 2\n    factors[60] = 2\n    factors[61] = 2\n    factors[62]\
    \ = 1\n    factors[63] = 2\n    factors[64] = 2\n    factors[65] = 1\n    factors[66]\
    \ = 2\n    factors[67] = 2\n    factors[68] = 1\n    factors[69] = 2\n    factors[70]\
    \ = 2\n    factors[71] = 2\n    factors[72] = 1\n    factors[73] = 2\n    factors[74]\
    \ = 2\n    factors[75] = 1\n    ", "    factors := []int{}\n    factor := 2\n\
    \    for factor <= n {\n        if n%factor == 0 {\n            factors = append(factors,\
    \ factor)\n            n /= factor\n        } else {\n            factor++\n \
    \       }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n \
    \   factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n    \
    \        factors[i] = factors[i-1] * i\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++\
    \ {\n        if n%i == 0 {\n            factors = append(factors, i)\n       \
    \     n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i\
    \ < n; i++ {\n        if n % i == 0 {\n            factors[i] = factors[i-1] *\
    \ i\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors = append(factors, i)\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    i :=\
    \ 2\n    for i < n {\n        if n%i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n            n /= i\n        } else {\n            factors[i] = i\n    \
    \    }\n        i++\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if n % i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = 1\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    for i := 2; i <= n; i++ {\n        if\
    \ n%i == 0 {\n            factors = append(factors, i)\n            n /= i\n \
    \       }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n \
    \   factors[0] = 1\n    factors[1] = n\n    for i := 2; i <= n/2; i++ {\n    \
    \    if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    i :=\
    \ 2\n    for i < n {\n        if n % i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n            n /= i\n        } else {\n            factors[i] = 1\n    \
    \    }\n        i++\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i <= n/2; i++ {\n\
    \        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n          \
    \  n /= i\n        } else {\n            factors[i] = 1\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    if n > 1 {\n   \
    \     factors[len(factors)-1] = factors[len(factors)-1] * n\n    }\n    return\
    \ factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n    \
    \    if n%i == 0 {\n            factors = append(factors, i)\n            n /=\
    \ i\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n\
    \    }\n    return factors\n}\n", "    factors := []int{}\n    factor := 2\n \
    \   for factor <= n {\n        if n%factor == 0 {\n            factors = append(factors,\
    \ factor)\n            n /= factor\n        }\n    }\n    return factors\n}\n",
  "    factors := make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    for i :=\
    \ 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    factors[1] = n\n    factors[2] = 2\n    factors[3] =\
    \ 1\n    factors[4] = n\n    factors[5] = 2\n    factors[6] = 1\n    factors[7]\
    \ = n\n    factors[8] = 2\n    factors[9] = 1\n    factors[10] = n\n    factors[11]\
    \ = 2\n    factors[12] = 1\n    factors[13] = n\n    factors[14] = 2\n    factors[15]\
    \ = 1\n    factors[16] = n\n    factors[17] = 2\n    factors[18] = 1\n    factors[19]\
    \ = n\n    factors[20] = 2\n    factors[21] = 1\n    factors[22] = n\n    factors[23]\
    \ = 2\n    factors[24] = 1\n    factors[25] = n\n    factors[26] = 2\n    factors[27]\
    \ = 1\n    factors[28] = n\n    factors[29] = 2\n    factors[30] = 1\n    factors[31]\
    \ = n\n    factors[32] = 2\n    factors[33] = 1\n    factors[34] = n\n    factors[35]\
    \ = 2\n    factors[36] = 1\n    factors[37] = n\n    factors[38] = 2\n    factors[39]\
    \ = 1\n    factors[40] = n\n    factors[41] = 2\n    factors[42] = 1\n    factors[43]\
    \ = n\n    factors[44] = 2\n    factors[45] = 1\n    factors[46] = n\n    factors[47]\
    \ = 2\n    factors[48] = 1\n    factors[49] = n\n    factors[50] = 2\n    factors[51]\
    \ = 1\n    factors[52] = n\n    factors[53] = 2\n    factors[54] = 1\n    factors[55]\
    \ = n\n    factors[56] = 2\n    factors[57] = 1\n    factors[58] = n\n    factors[59]\
    \ = 2\n    factors[60] = 1\n    factors[61] = n\n    factors[62] = 2\n    factors[63]\
    \ = 1\n    factors[64] = n\n    factors[65] = 2\n    factors[66] = 1\n    factors[67]\
    \ = n\n    factors[68] = 2\n    factors[69] = 1\n    factors[70] = n\n    factors[71]\
    \ = 2\n    factors[72] = 1\n    factors[73] = n\n    factors[74] = 2\n    factors[75]\
    \ = 1", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i\
    \ == 0 {\n            factors = append(factors, i)\n            n /= i\n     \
    \   }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n  \
    \  return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1]\
    \ = n\n    i := 2\n    for i < n {\n        if n % i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        } else {\n            factors[i]\
    \ = 1\n        }\n        i++\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n        }\n    }\n  \
    \  return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    factors[1] = n\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n \
    \           factors[i] = factors[i-1] * i\n            n /= i\n        }\n   \
    \ }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n;\
    \ i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n   \
    \         n /= i\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if\
    \ n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    for i := 2; i <= n; i++ {\n\
    \        if n%i == 0 {\n            factors[len(factors)-1]++\n            n /=\
    \ i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    i := 2\n    for i < n {\n        if n%i == 0 {\n    \
    \        factors[i] = factors[i-1] * i\n            n /= i\n        } else {\n\
    \            factors[i] = i\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <=\
    \ n; i++ {\n        for j := 2; j <= i/2; j++ {\n            if i%j == 0 {\n \
    \               factors[i] += j\n                break\n            }\n      \
    \  }\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n    for\
    \ i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors := append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    n /= 2\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n\
    \            factors = append(factors, i)\n            n /= i\n        }\n   \
    \ }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <= n;\
    \ i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n   \
    \         n /= i\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        factors[i] = 1\n    }\n\
    \    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors :=\
    \ []int{}\n    factor := 2\n    for factor <= n {\n        if n%factor == 0 {\n\
    \            factors = append(factors, factor)\n            n /= factor\n    \
    \    }\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i :=\
    \ 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if n % i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = i\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for\
    \ i < n {\n        if n % i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = i\n        }\n\
    \        i++\n    }\n    return factors\n}\n", "    factors := make([]int, n)\n\
    \    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n   \
    \         factors[i] = factors[i-1] * i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n      \
    \  if n % i == 0 {\n            factors[i] = factors[i-1] * i\n            n /=\
    \ i\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    for i :=\
    \ 2; i <= n; i++ {\n        if n%i == 0 {\n            factors[len(factors)-1]++\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    for i := 0; i < n; i++ {\n\
    \        if n%i == 0 {\n            factors[i] = i\n            n /= i\n     \
    \   }\n    }\n    return factors\n}\n", "    factors := []int{}\n    factor :=\
    \ 2\n    for factor <= n {\n        if n%factor == 0 {\n            factors =\
    \ append(factors, factor)\n            n /= factor\n        }\n        factor++\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n % i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i\
    \ := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i < n; i++ {\n \
    \       if n % i == 0 {\n            factors[i] = factors[i-1] * i\n         \
    \   n /= i\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if n % i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = 1\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    factor := 2\n    for factor <= n {\n      \
    \  if n%factor == 0 {\n            factors = append(factors, factor)\n       \
    \     n /= factor\n        }\n    }\n    if n > 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors\n}\n", "    factors := []int{}\n    factor :=\
    \ 2\n    for factor <= n {\n        if n%factor == 0 {\n            factors =\
    \ append(factors, factor)\n            n /= factor\n        } else {\n       \
    \     factor++\n        }\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        for j := 1; j\
    \ < i; j++ {\n            if n%i == 0 {\n                factors[i] += factors[j]\n\
    \                n /= i\n            }\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    if n > 1 {\n        factors = append(factors, n)\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i\
    \ := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n    for i := 2; i\
    \ <= n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] *\
    \ i\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i\
    \ := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        }\n  \
    \  }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n  \
    \          factors = append(factors, i)\n            n /= i\n        }\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n % i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    factors[1] = n\n\
    \    for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            factors[i]\
    \ = factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i ==\
    \ 0 {\n            factors = append(factors, i)\n            n /= i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := make([]int, n)\n    factors[0]\
    \ = 1\n    for i := 1; i <= n; i++ {\n        for j := 2; j <= i/2; j++ {\n  \
    \          if i%j == 0 {\n                factors[i] = factors[i] * j\n      \
    \          break\n            }\n        }\n    }\n    return factors\n}\n", " \
    \   factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i < n; i++\
    \ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n      \
    \      n /= i\n        }\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    if n > 1 {\n        factors =\
    \ append(factors, n)\n    }\n    return factors\n}\n", "    factors := []int{}\n\
    \    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := []int{}\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n         \
    \   factors = append(factors, i)\n            n /= i\n        }\n    }\n    return\
    \ factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n    i :=\
    \ 2\n    for i < n {\n        if n % i == 0 {\n            factors[i] = factors[i-1]\
    \ * i\n            n /= i\n        } else {\n            factors[i] = 1\n    \
    \    }\n        i++\n    }\n    return factors\n}\n", "    factors := make([]int,\
    \ n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n        if n % i == 0 {\n\
    \            factors[i] = factors[i-1] * i\n            n /= i\n        } else\
    \ {\n            factors[i] = 1\n        }\n        i++\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n%i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        } else {\n            factors[i] = i\n        }\n\
    \    }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2; i <=\
    \ n; i++ {\n        if n%i == 0 {\n            factors = append(factors, i)\n\
    \            n /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors,\
    \ n)\n    }\n    return factors\n}\n", "    factors := []int{}\n    for i := 2;\
    \ i <= n; i++ {\n        if n%i == 0 {\n            factors = append(factors,\
    \ i)\n            n /= i\n        }\n    }\n    return factors\n}\n", "    factors\
    \ := make([]int, n)\n    factors[0] = 1\n    i := 2\n    for i < n {\n       \
    \ if n%i == 0 {\n            factors[i] = factors[i-1] * i\n            n /= i\n\
    \        } else {\n            factors[i] = i\n        }\n        i++\n    }\n\
    \    return factors\n}\n", "    factors := make([]int, n)\n    factors[0] = 1\n\
    \    for i := 1; i < n; i++ {\n        if n%i == 0 {\n            factors[i] =\
    \ factors[i-1] * i\n            n /= i\n        }\n    }\n    return factors\n\
    }\n", "    factors := make([]int, n)\n    factors[0] = 1\n    for i := 1; i <\
    \ n; i++ {\n        if n % i == 0 {\n            factors[i] = factors[i-1] * i\n\
    \            n /= i\n        }\n    }\n    if n > 1 {\n        factors[len(factors)-1]\
    \ = factors[len(factors)-1] * n\n    }\n    return factors\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
