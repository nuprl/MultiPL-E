name: HumanEval_68_pluck
language: pl
prompt: "# \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n# your task is to pluck one of the nodes and return it.\n# The\
  \ plucked node should be the node with the smallest even value.\n# If multiple nodes\
  \ with the same smallest even value are found return the node that has smallest\
  \ index.\n# The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n# If there are no even values or the given array is empty, return [].\n\
  # Example 1:\n# Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n# Example 2:\n# Explanation: 2 has the smallest even value, and 2 has\
  \ the smallest index.\n# Example 3:\n# Example 4:\n# Explanation: 0 is the smallest\
  \ value, but  there are two zeros,\n# so we will choose the first zero, which has\
  \ the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <=\
  \ node.value\nsub pluck {\n    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pluck;\n\
  \        if(eq_deeply($candidate->([4, 2, 3]),[2, 1])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 0, 3, 0, 4, 2]),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->([1, 2, 3, 0, 5, 3]),[0, 3])) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 4, 8, 4, 8]),[4, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->([7, 6, 7, 1]),[6, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7,\
  \ 9, 7, 1]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my $min = -1;\n    my $min_index;\n    my $smalest_value;\n   \
    \ my $index;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $even;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value;\n    my $even", "    my $min = $arr->[0];\n\
    \    my $index = 0;\n    my $min_index = 0;\n    foreach my $val (@$arr) {\n \
    \       if ($val % 2 == 0) {\n            if ($val < $min) {\n               \
    \ $min = $val;\n                $min_index = $index;\n            }\n        \
    \    $index++;\n        }\n    }\n    return $min_index;\n}", "    my $min = $arr->[0];\n\
    \    my $index = 0;\n    my $index2 = 0;\n    foreach my $node (@$arr) {\n   \
    \     if ($node % 2 == 0) {\n            if ($node < $min) {\n               \
    \ $min = $node;\n                $index = $index2;\n            }\n          \
    \  else {\n                $index2++;\n            }\n        }\n    }\n    return\
    \ [$min, $index];\n}", "    my @res;\n    my $min;\n    my $index;\n    my $value;\n\
    \    foreach my $i (0..$#{$arr}) {\n        $value = $arr->[$i];\n        if ($value\
    \ % 2 == 0) {\n            $min = $value;\n            $index = $i;\n        }\n\
    \    }\n    if ($min != 0) {\n        push @res, [ $min, $index ];\n    }\n  \
    \  return @res;\n}", "    my @result;\n    my $min;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $even;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $", "    my $min = $arr->[0];\n\
    \    my $index = 0;\n    my $found = 0;\n    foreach my $node (@$arr) {\n    \
    \    if ($node % 2 == 0) {\n            $found = 1;\n            if ($node < $min)\
    \ {\n                $min = $node;\n                $index = $arr->[$found];\n\
    \            }\n        }\n    }\n    if ($found == 0) {\n        return [];\n\
    \    }\n    return [ $min, $index ];\n}", "    my $min = $arr[0];\n    my $index\
    \ = 0;\n    my $found = 0;\n    foreach my $val (@$arr) {\n        if ($val %\
    \ 2 == 0) {\n            $found = 1;\n            if ($val < $min) {\n       \
    \         $min = $val;\n                $index = $found;\n            }\n    \
    \    }\n    }\n    if ($found == 0) {\n        return [];\n    }\n    return [\
    \ $min, $index ];\n}", "    my $min = $arr->[0];\n    my $min_index = 0;\n   \
    \ my $index = 0;\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n\
    \            if ($val < $min) {\n                $min = $val;\n              \
    \  $min_index = $index;\n            }\n            $index++;\n        }\n   \
    \ }\n    return $min_index;\n}", "    my $min = $arr->[0];\n    my $index = 0;\n\
    \    my $i = 0;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n\
    \            if ($node < $min) {\n                $min = $node;\n            \
    \    $index = $i;\n            }\n            $i++;\n        }\n    }\n    return\
    \ [ $min, $index ];\n}", "    my $min = $arr->[0];\n    my $index = 0;\n    my\
    \ $smalest_value;\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n\
    \            if ($smalest_value == undef) {\n                $smalest_value =\
    \ $val;\n                $index = $index;\n            } elsif ($smalest_value\
    \ < $val) {\n                $smalest_value = $val;\n                $index =\
    \ $index;\n            }\n        }\n    }\n    return $smalest_value if $smalest_value;\n\
    \    return [];\n}", "    my $min = $arr->[0];\n    my $index = 0;\n    my $smalest_value;\n\
    \    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n            if ($val\
    \ < $min) {\n                $min = $val;\n                $index = $smalest_value\
    \ = $val;\n            }\n            else {\n                $smalest_value =\
    \ $val;\n            }\n        }\n    }\n    return $smalest_value, $index;\n\
    }", "    my $min = $arr->[0];\n    my $index = 0;\n    my $smalest_value;\n  \
    \  foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $smalest_value\
    \ = $node;\n            $index = $arr->[$index];\n        }\n    }\n    if ($smalest_value\
    \ eq 0) {\n        return [];\n    }\n    my @result;\n    foreach my $node (@$arr)\
    \ {\n        if ($node == $smalest_value) {\n            push(@result, $node);\n\
    \        }\n    }\n    if (@result == 0) {\n        return [];\n    }\n    my\
    \ $smallest_index = @result;\n    foreach my $node (@$arr) {\n        if ($node\
    \ == $smalest_value) {\n            $smallest_index = $arr->[$smallest_index];\n\
    \        }\n    }\n    push(@result, $smallest_index);\n    return @result;\n}",
  "    my $min_value = $arr->[0];\n    my $min_index = 0;\n    my $smalest_value;\n\
    \    my $smalest_index;\n    my $index;\n    foreach my $i (0 .. $arr->[-1]) {\n\
    \        my $value = $arr->[$i];\n        if ($value % 2 == 0) {\n           \
    \ if ($value < $min_value) {\n                $smalest_value = $value;\n     \
    \           $smalest_index = $i;\n            }\n        }\n    }\n    if ($smalest_value)\
    \ {\n        $index = $smalest_index;\n    }\n    else {\n        return [];\n\
    \    }\n    return [ $smalest_value, $index ];\n}", "    my $min = $arr[0];\n\
    \    my $index = 0;\n    my $even = 0;\n    my $smalest_value;\n    foreach my\
    \ $node (@$arr) {\n        if ($node % 2 == 0) {\n            $even++;\n     \
    \   }\n        if ($even < $min) {\n            $smalest_value = $node;\n    \
    \        $min = $even;\n            $index = $node;\n        }\n    }\n    return\
    \ $smalest_value, $index;\n}", "    my $min = $arr->[0];\n    my $min_index =\
    \ 0;\n    my $index = 0;\n    foreach my $node (@$arr) {\n        if ($node %\
    \ 2 == 0) {\n            if ($node < $min) {\n                $min = $node;\n\
    \                $min_index = $index;\n            }\n            $index++;\n\
    \        }\n    }\n    return [ $min, $min_index ];\n}", "    my $min;\n    my\
    \ $index;\n    my $result;\n    my $i;\n    my $j;\n    my $k;\n    my $smallest_value;\n\
    \    my $smallest_index;\n    my $even_value;", "    my $min_value = $arr->[0];\n\
    \    my $min_idx = 0;\n    my $smalest_value;\n    foreach my $i (1..$arr->[0])\
    \ {\n        my $value = $arr->[$i];\n        if ($value % 2 == 0) {\n       \
    \     if ($value < $min_value) {\n                $min_value = $value;\n     \
    \           $min_idx = $i;\n            }\n        }\n    }\n    return $min_value,\
    \ $min_idx;\n}", "    my $min = $arr->[0];\n    my $index = 0;\n    foreach my\
    \ $val (@$arr) {\n        if ($val % 2 == 0) {\n            if ($val < $min) {\n\
    \                $min = $val;\n                $index = $arr->[$index];\n    \
    \        }\n        }\n    }\n    return $min, $index;\n}", "    my @result;\n\
    \    my $smallest_value;\n    my $smallest_index;\n    my $index;\n    my $value;\n\
    \    my $even;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n \
    \   my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my\
    \ $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n\
    \    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my\
    \ $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my $M;\n\
    \    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n    my\
    \ $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n\
    \    my $_;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my\
    \ $f;\n    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n\
    \    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my\
    \ $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n\
    \    my $z;\n    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my\
    \ $F;\n    my $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my $L;\n\
    \    my $M;\n    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n    my\
    \ $S;\n    my $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my $Y;\n\
    \    my $Z;\n    my $_;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my\
    \ $e;\n    my $f;\n    my $g;\n    my $", "    my $min = $arr->[0];\n    my $index\
    \ = 0;\n    my $even;\n    foreach my $node (@$arr) {\n        if ($node % 2 ==\
    \ 0) {\n            $even = $node;\n        }\n        if ($node < $min) {\n \
    \           $min = $node;\n            $index = $even;\n        }\n    }\n   \
    \ return $index;\n}", "    my $result;\n    my $smallest_value;\n    my $smallest_index;\n\
    \    my $index;\n    my $value;\n    my $even_value;\n    my $even_index;\n  \
    \  my $even_value_index;\n    my $even_value_found;\n    my $even_value_found_index;\n\
    \    my $even_value_found_index2;\n    my $even_value_found_index3;\n    my $even_value_found_index4;\n\
    \    my $even_value_found_index5;\n    my $even_value_found_index6;\n    my $even_value_found_index7;\n\
    \    my $even_value_found_index8;\n    my $even_value_found_index9;\n    my $even_value_found_index10;\n\
    \    my $even_value_found_index11;\n    my $even_value_found_index12;\n    my\
    \ $even_value_found_index13;\n    my $even_value_found_index14;\n    my $even_value_found_index15;\n\
    \    my $even_value_found_index16;\n    my $even_value_found_index17;\n    my\
    \ $even_value_found_index18;\n    my $even_value_found_index19;\n    my $even_value_found_index20;\n\
    \    my $even_value_found_index21;\n    my $even_value_found_index22;\n    my\
    \ $even_value_found_index23;\n    my $even_value_found_index24;\n    my $even_value_found_index25;\n\
    \    my $even_value_found_index26;\n    my $even_value_found_index27;\n    my\
    \ $even_value_found_index28;\n    my $even_value_found_index29;\n    my $even_value_found_index30;\n\
    \    my $even_value_found_index31;\n    my $even_value_found_index32;\n    my\
    \ $even_value_found_index33;\n    my $even_value_found_index34;\n    my $even_value_found_index35;\n\
    \    my $even_value_found_index36;\n    my $even_value_found_index37;\n    my\
    \ $even_value_found_index38;\n    my $even_value_found_index39;\n    my $even_value_found_index40;\n\
    \    my $even_value_found_index41;\n    my $even_value_found_index42;\n    my\
    \ $even_value_found_index43;\n    my $even_value_found_index44;\n    my $even_value_found_index45;\n\
    \    my $even_value_found_index46;\n    my $even_value_found_index47;\n    my\
    \ $even_value_found_index48;\n    my $even_value_found_index49;\n    my $even_value_found_index50;\n\
    \    my $even_value_found_index51;\n    my $even_value_found_index52;\n    my\
    \ $even_value_found_index53;\n    my $even_value_", "    my $min = $arr->[0];\n\
    \    my $min_index = 0;\n    my $index = 0;\n    foreach my $val (@$arr) {\n \
    \       if ($val & 1) {\n            if ($val < $min) {\n                $min\
    \ = $val;\n                $min_index = $index;\n            }\n            $index++;\n\
    \        }\n    }\n    return [ $min, $min_index ];\n}", "    my $min = $arr->[0];\n\
    \    my $index = 0;\n    my $smalest_value;\n    foreach my $node (@$arr) {\n\
    \        if ($node % 2 == 0) {\n            if ($smalest_value == undef) {\n \
    \               $smalest_value = $node;\n                $index = $arr->[$index];\n\
    \            }\n            elsif ($node < $smalest_value) {\n               \
    \ $smalest_value = $node;\n                $index = $arr->[$index];\n        \
    \    }\n        }\n    }\n    return $smalest_value if $smalest_value;\n    return\
    \ [];\n}", "    my $min = $arr->[0];\n    my $index = 0;\n    foreach my $val\
    \ (@$arr) {\n        if ($val % 2 == 0) {\n            if ($val < $min) {\n  \
    \              $min = $val;\n                $index = $arr->[$index];\n      \
    \      }\n        }\n    }\n    return $min, $index;\n}", "    my $min = -1;\n\
    \    my $min_index;\n    foreach my $node (@$arr) {\n        if ($min == -1 ||\
    \ $min > $node->{value}) {\n            $min = $node->{value};\n            $min_index\
    \ = $node->{index};\n        }\n    }\n    if ($min == -1) {\n        return [];\n\
    \    }\n    my @result;\n    foreach my $node (@$arr) {\n        if ($node->{value}\
    \ eq $min) {\n            push(@result, $node);\n        }\n    }\n    return\
    \ @result;\n}", "    my $min = $arr->[0];\n    my $index = 0;\n    foreach my\
    \ $node (@$arr) {\n        if ($node % 2 == 0) {\n            if ($node < $min)\
    \ {\n                $min = $node;\n                $index = $arr->[$index];\n\
    \            }\n        }\n    }\n    return $min, $index;\n}", "    my @res;\n\
    \    my $min = $arr[0];\n    my $index = 0;\n    my $i = 0;\n    my $even;\n \
    \   foreach my $val (@$arr) {\n        $even = $val % 2 == 0;\n        if ($even)\
    \ {\n            if ($min > $val) {\n                $min = $val;\n          \
    \      $index = $i;\n            }\n            $i++;\n        }\n    }\n    if\
    \ ($min == 0) {\n        return [];\n    }\n    push(@res, [\"$min\", $index]);\n\
    \    return @res;\n}", "    my $min = $arr->[0];\n    my $index = 0;\n    my $even;\n\
    \    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $even\
    \ = $node;\n        }\n        if ($node < $min) {\n            $min = $node;\n\
    \            $index = $even;\n        }\n    }\n    return $index;\n}", "    my\
    \ $min;\n    my $index;\n    my $value;\n    my $even;\n    my $index;\n    foreach\
    \ my $i (0 .. $#{$arr}) {\n        $value = $arr->[$i];\n        $even = $value\
    \ % 2;\n        if ($even == 0) {\n            $min = $value;\n            $index\
    \ = $i;\n        }\n    }\n    if ($min == 0) {\n        return [];\n    }\n \
    \   my $index = 0;\n    my $value = $min;\n    my $even = $value % 2;\n    while\
    \ ($even != 0) {\n        $index++;\n        $value = $arr->[$index];\n      \
    \  $even = $value % 2;\n    }\n    return [ $value, $index ];\n}", "    my $min\
    \ = $arr->[0];\n    my $index = 0;\n    my $even = 0;\n    foreach my $val (@$arr)\
    \ {\n        if ($val % 2 == 0) {\n            $even++;\n        }\n        if\
    \ ($val < $min) {\n            $min = $val;\n            $index = $even;\n   \
    \     }\n    }\n    return $arr->[$index] if $index != 0;\n    return [];\n}",
  "    my $min_value = $arr->[0];\n    my $min_idx = 0;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $even = 0;\n    foreach my $val (@$arr) {\n        if ($val % 2\
    \ == 0) {\n            $even = 1;\n        }\n        if ($val < $min_value) {\n\
    \            $min_value = $val;\n            $min_idx = $i;\n        }\n     \
    \   $i++;\n    }\n    if ($even == 0) {\n        return [];\n    }\n    return\
    \ [ $min_value, $min_idx ];\n}", "    my $result;\n    my $min;\n    my $index;\n\
    \    my $value;\n    my $i;\n    my $j;\n    my $k;\n    my $count;\n    my $even;\n\
    \    my $index;\n    my $value;\n    my $temp;\n    my $temp2;\n    my $temp3;\n\
    \    my $temp4;\n    my $temp5;\n    my $temp6;\n    my $temp7;\n    my $temp8;\n\
    \    my $temp9;\n    my $temp10;\n    my $temp11;\n    my $temp12;\n    my $temp13;\n\
    \    my $temp14;\n    my $temp15;\n    my $temp16;\n    my $temp17;\n    my $temp18;\n\
    \    my $temp19;\n    my $temp20;\n    my $temp21;\n    my $temp22;\n    my $temp23;\n\
    \    my $temp24;\n    my $temp25;\n    my $temp26;\n    my $temp27;\n    my $temp28;\n\
    \    my $temp29;\n    my $temp30;\n    my $temp31;\n    my $temp32;\n    my $temp33;\n\
    \    my $temp34;\n    my $temp35;\n    my $temp36;\n    my $temp37;\n    my $temp38;\n\
    \    my $temp39;\n    my $temp40;\n    my $temp41;\n    my $temp42;\n    my $temp43;\n\
    \    my $temp44;\n    my $temp45;\n    my $temp46;\n    my $temp47;\n    my $temp48;\n\
    \    my $temp49;\n    my $temp50;\n    my $temp51;\n    my $temp52;\n    my $temp53;\n\
    \    my $temp54;\n    my $temp55;\n    my $temp56;\n    my $temp57;\n    my $temp58;\n\
    \    my $temp59;\n    my $temp60;\n    my $temp61;\n    my $temp62;\n    my $temp63;\n\
    \    my $temp64;\n    my $temp65;\n    my $temp66;\n    my $temp67;\n    my $temp68;\n\
    \    my $temp69;\n    my $temp70;\n    my $temp71;\n    my $temp72;\n    my $temp73;\n\
    \    my $temp74;\n    my $temp75;\n    my $temp76;\n    my $temp77;\n    my $temp78;\n\
    \    my $temp79;\n    my $temp80;\n    my $temp81;", "    my $min = $arr->[0];\n\
    \    my $min_index = 0;\n    my $index;\n    for (my $i = 1; $i < $arr->[0]; $i++)\
    \ {\n        if ($arr->[$i] eq $min) {\n            $min_index = $i;\n       \
    \ }\n    }\n    if ($min_index) {\n        return $min, $min_index;\n    }\n \
    \   return [];\n}", "    my $min = $arr->[0];\n    my $index = 0;\n    my $found\
    \ = 0;\n    my $i = 0;\n    while($i < $arr->length) {\n        if($arr->[$i]\
    \ % 2 == 0) {\n            $found = 1;\n            $min = $arr->[$i];\n     \
    \       $index = $i;\n        }\n        $i++;\n    }\n    if(!$found || $arr->[0]\
    \ == 0) {\n        return [];\n    }\n    return [ $min, $index ];\n}", "    my\
    \ $min = $arr->[0];\n    my $index = 0;\n    my $smalest_value;\n    foreach my\
    \ $val (@$arr) {\n        if ($val % 2 == 0) {\n            if ($smalest_value\
    \ eq undef) {\n                $smalest_value = $val;\n                $index\
    \ = $index;\n            } else {\n                if ($smalest_value < $val)\
    \ {\n                    $smalest_value = $val;\n                    $index =\
    \ $index;\n                }\n            }\n        }\n    }\n    if ($smalest_value\
    \ eq undef) {\n        return [];\n    }\n    return [ $smalest_value, $index\
    \ ];\n}", "    my $min;\n    my $index;\n    my $value;\n    my $even;\n    my\
    \ $index;\n    foreach my $i (0..$#{$arr}) {\n        if ($arr->[$i] % 2 == 0)\
    \ {\n            $even = $arr->[$i];\n            $index = $i;\n        }\n  \
    \  }\n    if ($even) {\n        if ($even < $min) {\n            $min = $even;\n\
    \            $index = $index;\n        }\n    }\n    return ($min, $index);\n}",
  "    my $min = $arr->[0];\n    my $min_index = 0;\n    my $index = 0;\n    foreach\
    \ my $val (@$arr) {\n        if ($val % 2 == 0) {\n            if ($val < $min)\
    \ {\n                $min = $val;\n                $min_index = $index;\n    \
    \        }\n            $index++;\n        }\n    }\n    return [$min, $min_index];\n\
    }", "    my $min = $arr[0];\n    my $index = 0;\n    foreach my $val (@$arr) {\n\
    \        if ($val % 2 == 0) {\n            $min = $val;\n            $index =\
    \ $_;\n        }\n    }\n    return [ $min, $index ];\n}", "    my $min = $arr->[0];\n\
    \    my $index = 0;\n    my $even = 0;\n    foreach my $val (@$arr) {\n      \
    \  if ($val % 2 == 0) {\n            $even = 1;\n        }\n        if ($val <\
    \ $min) {\n            $min = $val;\n            $index = $even;\n        }\n\
    \    }\n    return $min, $index;\n}", "    my $min = $arr->[0];\n    my $index\
    \ = 0;\n    my $even;\n    my $smalest_value;\n    foreach my $node (@$arr) {\n\
    \        if ($node % 2 == 0) {\n            $even = $node;\n        }\n      \
    \  if ($node < $min) {\n            $min = $node;\n            $index = $even;\n\
    \        }\n    }\n    return $smalest_value if $smalest_value && $smalest_value\
    \ < $min;\n    return $index if $smalest_value && $smalest_value < $min;\n   \
    \ return [];\n}", "    my $min_value = $arr->[0];\n    my $min_index = 0;\n  \
    \  my $index = 0;\n    my $even_value = 0;\n    my $smalest_value;\n    my $smalest_index;\n\
    \    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $even_value\
    \ = $node;\n        }\n        if ($node < $min_value) {\n            $smalest_value\
    \ = $node;\n            $smalest_index = $index;\n        }\n        if ($node\
    \ == $min_value) {\n            $index++;\n        }\n    }\n    if ($smalest_value\
    \ == 0) {\n        return [];\n    }\n    return [ $smalest_value, $smalest_index\
    \ ];\n}", "    my $min;\n    my $index;\n    my $even;\n    my $smalest_value;\n\
    \    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $even\
    \ = $node;\n        }\n        if ($node < $min) {\n            $min = $node;\n\
    \            $index = $_;\n        }\n    }\n    if ($smalest_value == 0) {\n\
    \        return [];\n    }\n    if ($smalest_value % 2 == 0) {\n        return\
    \ [ $smalest_value, $index ];\n    }\n    return [ $smalest_value, $index ];\n\
    }", "    my $min = $arr->[0];\n    my $index = 0;\n    for (my $i = 1; $i < @$arr;\
    \ $i++) {\n        if ($arr->[$i] % 2 == 0) {\n            if ($arr->[$i] < $min)\
    \ {\n                $min = $arr->[$i];\n                $index = $i;\n      \
    \      }\n        }\n    }\n    return [ $min, $index ];\n}", "    my $min;\n\
    \    my $index;\n    my $value;\n    my $even;\n    my $index;\n    my $result;",
  "    my @res;\n    my $min;\n    my $index;\n    my $value;\n    foreach my $n (@$arr)\
    \ {\n        if ($n =~ /^\\d+$/) {\n            $value = $n;\n        }\n    \
    \    elsif ($n =~ /^0$/) {\n            $value = $n;\n            $index = 0;\n\
    \        }\n        else {\n            die \"Invalid input\";\n        }\n  \
    \      if ($value % 2 == 0) {\n            if ($min eq \"\") {\n             \
    \   $min = $value;\n            }\n            elsif ($value < $min) {\n     \
    \           $min = $value;\n                $index = 0;\n            }\n     \
    \       else {\n                $index++;\n            }\n        }\n    }\n \
    \   if ($min eq \"\") {\n        return [];\n    }\n    else {\n        push @res,\
    \ $min, $index;\n        return @res;\n    }\n}", "    my $min = $arr[0];\n  \
    \  my $min_index = 0;\n    my $i;\n    my $j;\n    my $k;\n    my $temp;\n   \
    \ my $count = 0;\n    foreach $i (@$arr) {\n        $count++;\n        if ($i\
    \ % 2 == 0) {\n            $min = $i;\n            $min_index = $i;\n        }\n\
    \    }\n    if ($count == 0) {\n        return [];\n    }\n    foreach $j (@$arr)\
    \ {\n        if ($j % 2 == 0) {\n            $k = $j;\n            $k = $k;\n\
    \        }\n    }\n    foreach $k (@$arr) {\n        if ($k % 2 == 0) {\n    \
    \        if ($k < $min) {\n                $min = $k;\n                $min_index\
    \ = $k;\n            }\n        }\n    }\n    return [ $min, $min_index ];\n}",
  "    my $result;\n    my $min;\n    my $index;\n    my $value;\n    my $even;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n    my\
    \ $min_value;\n    my $found;\n    my $min_index;\n    my $min_value;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n    my $min_value;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n    my\
    \ $min_value;\n    my $i;\n    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n\
    \    my $min_value;\n    my $i;\n    my $j;\n    my $k;\n    my $found;\n    my\
    \ $min_index;\n    my $min_value;\n    my $i;\n    my $j;\n    my $k;\n    my\
    \ $found;\n    my $min_index;\n    my $min_value;\n    my $i;\n    my $j;\n  \
    \  my $k;\n    my $found;\n    my $min_index;\n    my $min_value;\n    my $i;\n\
    \    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n    my $min_value;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n    my\
    \ $min_value;\n    my $i;\n    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n\
    \    my $min_value;\n    my $i;\n    my $j;\n    my $k;\n    my $found;\n    my\
    \ $min_index;\n    my $min_value;\n    my $i;\n    my $j;\n    my $k;\n    my\
    \ $found;\n    my $min_index;\n    my $min_value;\n    my $i;\n    my $j;\n  \
    \  my $k;\n    my $found;\n    my $min_index;\n    my $min_value;\n    my $i;\n\
    \    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n    my $min_value;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n    my\
    \ $min_value;\n    my $i;\n    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n\
    \    my $min_value;\n    my $i;\n    my $j;\n    ", "    my $min;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;\n    my $value;\n    my $index;\n    my $value;\n    my $index;\n\
    \    my $value;\n    my $index;\n    my $value;\n    my $index;\n    my $value;\n\
    \    my $index;", "    my @res;\n    my $min;\n    my $index;\n    my $value;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $even;\n    my $even_index;\n\
    \    my $even_value;\n    foreach my $node (@$arr) {\n        $i++;\n        if\
    \ ($node % 2 == 0) {\n            $even = $node;\n            $even_index = $i;\n\
    \            $even_value = $node;\n        }\n    }\n    if ($even) {\n      \
    \  $j = 0;\n        foreach my $node (@$arr) {\n            $j++;\n          \
    \  if ($node % 2 == 0) {\n                if ($node < $even) {\n             \
    \       $even = $node;\n                    $even_index = $j;\n              \
    \      $even_value = $node;\n                }\n            }\n        }\n   \
    \ }\n    if ($even) {\n        $k = 0;\n        foreach my $node (@$arr) {\n \
    \           $k++;\n            if ($node % 2 == 0) {\n                if ($node\
    \ < $even) {\n                    $even = $node;\n                    $even_index\
    \ = $k;\n                    $even_value = $node;\n                }\n       \
    \     }\n        }\n    }\n    if ($even) {\n        if ($even_index == 0) {\n\
    \            push(@res, $even, $even_index);\n        }\n        else {\n    \
    \        push(@res, $even, $even_index);\n        }\n    }\n    else {\n     \
    \   push(@res, 0);\n    }\n    return @res;\n}", "    my $min_value = $arr->[0];\n\
    \    my $min_idx = 0;\n    my $i = 0;\n    my $j = 0;\n    my $even_value = 0;\n\
    \    my $even_idx = 0;\n    foreach my $node (@$arr) {\n        if ($node % 2\
    \ == 0) {\n            $even_value = $node;\n            $even_idx = $i;\n   \
    \     }\n        $i++;\n    }\n    if ($even_value > 0) {\n        foreach my\
    \ $node (@$arr) {\n            if ($node == $even_value) {\n                if\
    \ ($node < $min_value) {\n                    $min_value = $node;\n          \
    \          $min_idx = $even_idx;\n                }\n            }\n        }\n\
    \    }\n    return [ $min_value, $min_idx ];\n}", "    my $min;\n    my $index;\n\
    \    my $smalest_value;\n    foreach my $node (@$arr) {\n        if ($node % 2\
    \ == 0) {\n            $smalest_value = $node;\n            $index = $$node;\n\
    \        }\n    }\n    if ($smalest_value) {\n        return [ $smalest_value,\
    \ $index ];\n    }\n    return [];\n}", "    my $min_even_val = 0;\n    my $min_even_node\
    \ = 0;\n    my $min_even_node_index = 0;\n    my $min_even_node_value = 0;\n \
    \   my $min_even_node_count = 0;\n    my $min_even_node_count2 = 0;\n    my $min_even_node_count3\
    \ = 0;\n    my $min_even_node_count4 = 0;\n    my $min_even_node_count5 = 0;\n\
    \    my $min_even_node_count6 = 0;\n    my $min_even_node_count7 = 0;\n    my\
    \ $min_even_node_count8 = 0;\n    my $min_even_node_count9 = 0;\n    my $min_even_node_count10\
    \ = 0;\n    my $min_even_node_count11 = 0;\n    my $min_even_node_count12 = 0;\n\
    \    my $min_even_node_count13 = 0;\n    my $min_even_node_count14 = 0;\n    my\
    \ $min_even_node_count15 = 0;\n    my $min_even_node_count16 = 0;\n    my $min_even_node_count17\
    \ = 0;\n    my $min_even_node_count18 = 0;\n    my $min_even_node_count19 = 0;\n\
    \    my $min_even_node_count20 = 0;\n    my $min_even_node_count21 = 0;\n    my\
    \ $min_even_node_count22 = 0;\n    my $min_even_node_count23 = 0;\n    my $min_even_node_count24\
    \ = 0;\n    my $min_even_node_count25 = 0;\n    my $min_even_node_count26 = 0;\n\
    \    my $min_even_node_count27 = 0;\n    my $min_even_node_count28 = 0;\n    my\
    \ $min_even_node_count29 = 0;\n    my $min_even_node_count30 = 0;\n    my $min_even_node_count31\
    \ = 0;\n    my $min_even_node_count32 = 0;\n    my $min_even_node_count33 = 0;\n\
    \    my $min_even_node_count34 = 0;\n    my $min_even_node_count35 = 0;\n    my\
    \ $min_even_node_count36 = 0;\n    my $min_even_node_count37 = 0;\n    my $min_even_node_count38\
    \ = 0;\n    my $min_even_node_count39 = 0;\n    my $min_even_node_count40 = 0;\n\
    \    my $min_even_node_count41 = 0;\n    my $min_even_node_count42 = 0;\n    my\
    \ $min_even_node_count43 = 0;\n    my $min_even_node_count44 = 0;\n    my $min_even_node_count45\
    \ = 0;\n    my $min_even_node_count46 = 0;\n    my $min_even_node_count47 = 0;\n\
    \    my $min_even_node_count48 = 0;\n    my $min_ev", "    my $min = -1;\n   \
    \ my $min_index;\n    my $smalest_value;\n    foreach my $node (@$arr) {\n   \
    \     if ($node % 2 == 0) {\n            if ($min == -1) {\n                $min\
    \ = $node;\n                $min_index = $node;\n                $smalest_value\
    \ = $node;\n            } else {\n                if ($node < $smalest_value)\
    \ {\n                    $min = $node;\n                    $min_index = $node;\n\
    \                    $smalest_value = $node;\n                }\n            }\n\
    \        }\n    }\n    return $min_index;\n}", "    my $min_value = $arr->[0];\n\
    \    my $min_index = 0;\n    my $index = 0;\n    my $even_value = 0;\n    my $even_index\
    \ = 0;\n    my $even_value_index = 0;\n    my $even_value_index2 = 0;\n    my\
    \ $even_value_index3 = 0;\n    my $even_value_index4 = 0;\n    my $even_value_index5\
    \ = 0;\n    my $even_value_index6 = 0;\n    my $even_value_index7 = 0;\n    my\
    \ $even_value_index8 = 0;\n    my $even_value_index9 = 0;\n    my $even_value_index10\
    \ = 0;\n    my $even_value_index11 = 0;\n    my $even_value_index12 = 0;\n   \
    \ my $even_value_index13 = 0;\n    my $even_value_index14 = 0;\n    my $even_value_index15\
    \ = 0;\n    my $even_value_index16 = 0;\n    my $even_value_index17 = 0;\n   \
    \ my $even_value_index18 = 0;\n    my $even_value_index19 = 0;\n    my $even_value_index20\
    \ = 0;\n    my $even_value_index21 = 0;\n    my $even_value_index22 = 0;\n   \
    \ my $even_value_index23 = 0;\n    my $even_value_index24 = 0;\n    my $even_value_index25\
    \ = 0;\n    my $even_value_index26 = 0;\n    my $even_value_index27 = 0;\n   \
    \ my $even_value_index28 = 0;\n    my $even_value_index29 = 0;\n    my $even_value_index30\
    \ = 0;\n    my $even_value_index31 = 0;\n    my $even_value_index32 = 0;\n   \
    \ my $even_value_index33 = 0;\n    my $even_value_index34 = 0;\n    my $even_value_index35\
    \ = 0;\n    my $even_value_index36 = 0;\n    my $even_value_index37 = 0;\n   \
    \ my $even_value_index38 = 0;\n    my $even_value_index39 = 0;\n    my $even_value_index40\
    \ = 0;\n    my $even_value_index41 = 0;\n    my $even_value_index42 = 0;\n   \
    \ my $even_value_index43 = 0;\n    my $even_value_index44 = 0;\n    my $even_value_index45\
    \ = 0;\n    my $even_value_index46 = 0;\n    my $even_value_index47 = 0;\n   \
    \ my $even_value_index48 = 0;\n    my $even_value_index49 = 0;\n    my $even_value_index50\
    \ = 0;\n    my $even_value_index51 = 0;\n    my $even_value_index52 = 0;\n   \
    \ my $even_value_index53 = 0;\n    my $even_value_index54 = 0;\n    my $even_value_index55\
    \ = 0;\n    my $even_value_index56 = 0;\n    my $even_value_index57 = 0;\n   \
    \ my $even_value_index58 = 0;\n    my $even_value_index59 = 0;\n    my $even_value_index60\
    \ = 0;\n    my $even_value_index", "    my $min = -1;\n    my $min_index;\n  \
    \  foreach my $node (@$arr) {\n        if ($min == -1 || $min > $node->{value})\
    \ {\n            $min = $node->{value};\n            $min_index = $node->{index};\n\
    \        }\n    }\n    if ($min == -1) {\n        return [];\n    }\n    return\
    \ [ $min, $min_index ];\n}", "    my @res;\n    my $min = $arr[0];\n    my $min_index\
    \ = 0;\n    my $i = 0;\n    foreach my $val (@$arr) {\n        if ($val % 2 ==\
    \ 0) {\n            if ($val < $min) {\n                $min = $val;\n       \
    \         $min_index = $i;\n            }\n            $i++;\n        }\n    }\n\
    \    if ($min == 0) {\n        return [];\n    }\n    push(@res, $min, $min_index);\n\
    \    return @res;\n}", "    my $min = $arr[0];\n    my $index = 0;\n    foreach\
    \ my $i (@$arr) {\n        if ($i % 2 == 0) {\n            $min = $i;\n      \
    \      $index = $i;\n        }\n    }\n    return [$min, $index];\n}", "    my\
    \ @res;\n    my $min;\n    my $index;\n    my $value;\n    my $i;\n    my $j;\n\
    \    my $k;\n    my $even;\n    my $temp;\n    my $count;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_", "    my $min;\n    my $index;\n\
    \    my $value;\n    my $even;\n    my $index;\n    my $result;\n    my $i;\n\
    \    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my $o;\n    my\
    \ $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n    my $v;\n\
    \    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $A;\n    my $B;\n    my\
    \ $C;\n    my $D;\n    my $E;\n    my $F;\n    my $G;\n    my $H;\n    my $I;\n\
    \    my $J;\n    my $K;\n    my $L;\n    my $M;\n    my $N;\n    my $O;\n    my\
    \ $P;\n    my $Q;\n    my $R;\n    my $S;\n    my $T;\n    my $U;\n    my $V;\n\
    \    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n    my $_;\n    my $a;\n    my\
    \ $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $A;\n    my\
    \ $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my $G;\n    my $H;\n\
    \    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my $M;\n    my $N;\n    my\
    \ $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n    my $T;\n    my $U;\n\
    \    my $V;\n    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n    my $_;\n    my\
    \ $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n\
    \    my $h;\n", "    my $min_value = $arr[0];\n    my $min_index = 0;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $even_values = 0;\n    my $smalest_value;\n\
    \    my $smalest_index;\n    while($i < $#{$arr}) {\n        $smalest_value =\
    \ $arr[$i];\n        $smalest_index = $i;\n        $even_values = 0;\n       \
    \ while($j < $#{$arr}) {\n            if($arr[$j] % 2 == 0) {\n              \
    \  $even_values++;\n                if($smalest_value eq $arr[$j]) {\n       \
    \             $smalest_value = $arr[$j];\n                    $smalest_index =\
    \ $j;\n                }\n            }\n            $j++;\n        }\n      \
    \  if($even_values == 0) {\n            $smalest_value = $arr[$i];\n         \
    \   $smalest_index = $i;\n        }\n        $i++;\n    }\n    if($smalest_value\
    \ eq $arr[$#{$arr}-1]) {\n        $smalest_value = $arr[$#{$arr}-1];\n       \
    \ $smalest_index = $#{$arr}-1;\n    }\n    return [ $smalest_value, $smalest_index\
    \ ];\n}", "    my $min_even_value = $arr[0];\n    my $min_even_index = 0;\n  \
    \  my $index = 0;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0)\
    \ {\n            if ($node < $min_even_value) {\n                $min_even_value\
    \ = $node;\n                $min_even_index = $index;\n            }\n       \
    \     $index++;\n        }\n    }\n    return $min_even_value;\n}", "    my $min\
    \ = $arr->[0];\n    my $index = 0;\n    my $found = 0;\n    foreach my $val (@$arr)\
    \ {\n        if ($val % 2 == 0) {\n            $found = 1;\n            if ($val\
    \ < $min) {\n                $min = $val;\n                $index = $arr->[$found];\n\
    \            }\n        }\n    }\n    return $found ? [ $min, $index ] : [];\n\
    }", "    my $min = $arr->[0];\n    my $min_index = 0;\n    my $index = 0;\n  \
    \  foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n            if ($node\
    \ < $min) {\n                $min = $node;\n                $min_index = $index;\n\
    \            }\n            $index++;\n        }\n    }\n    return [ $min, $min_index\
    \ ];\n}", "    my $min_value = $arr->[0];\n    my $min_idx = 0;\n    my $i = 0;\n\
    \    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n            if ($val\
    \ < $min_value) {\n                $min_value = $val;\n                $min_idx\
    \ = $i;\n            }\n            $i++;\n        }\n    }\n    return [ $min_value,\
    \ $min_idx ];\n}", "    my $min = $arr->[0];\n    my $index = 0;\n    my $smalest_value;\n\
    \    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n            if\
    \ ($node < $min) {\n                $min = $node;\n                $index = $arr->[$index];\n\
    \            }\n        }\n    }\n    if ($min == 0) {\n        return [];\n \
    \   }\n    return [ $min, $index ];\n}", "    my $min = -1;\n    my $min_index\
    \ = 0;\n    my $smalest_value;\n    foreach my $node (@$arr) {\n        if ($node\
    \ % 2 == 0) {\n            if ($min == -1) {\n                $smalest_value =\
    \ $node;\n                $min_index = $node;\n                $min = $node;\n\
    \            }\n            elsif ($node < $min) {\n                $smalest_value\
    \ = $node;\n                $min_index = $node;\n                $min = $node;\n\
    \            }\n        }\n    }\n    return [ $smalest_value, $min_index ];\n\
    }", "    my $min = $arr[0];\n    my $index = 0;\n    my $result;\n    foreach\
    \ my $n (@$arr) {\n        if ($n % 2 == 0) {\n            if ($min > $n) {\n\
    \                $min = $n;\n                $index = $i;\n            }\n   \
    \     }\n        $i++;\n    }\n    return $min if $min != 0;\n    return [];\n\
    }", "    my $min_value = $arr->[0];\n    my $min_index = 0;\n    my $index = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $even_value = 0;\n    my $even_index =\
    \ 0;\n    my $even_value_count = 0;\n    my $even_index_count = 0;\n    my $even_value_count_max\
    \ = 0;\n    my $even_index_count_max = 0;\n    my $even_value_count_min = 0;\n\
    \    my $even_index_count_min = 0;\n    my $even_value_count_max2 = 0;\n    my\
    \ $even_index_count_max2 = 0;\n    my $even_value_count_min2 = 0;\n    my $even_index_count_min2\
    \ = 0;\n    my $even_value_count_max3 = 0;\n    my $even_index_count_max3 = 0;\n\
    \    my $even_value_count_min3 = 0;\n    my $even_index_count_min3 = 0;\n    my\
    \ $even_value_count_max4 = 0;\n    my $even_index_count_max4 = 0;\n    my $even_value_count_min4\
    \ = 0;\n    my $even_index_count_min4 = 0;\n    my $even_value_count_max5 = 0;\n\
    \    my $even_index_count_max5 = 0;\n    my $even_value_count_min5 = 0;\n    my\
    \ $even_index_count_min5 = 0;\n    my $even_value_count_max6 = 0;\n    my $even_index_count_max6\
    \ = 0;\n    my $even_value_count_min6 = 0;\n    my $even_index_count_min6 = 0;\n\
    \    my $even_value_count_max7 = 0;\n    my $even_index_count_max7 = 0;\n    my\
    \ $even_value_count_min7 = 0;\n    my $even_index_count_min7 = 0;\n    my $even_value_count_max8\
    \ = 0;\n    my $even_index_count_max8 = 0;\n    my $even_value_count_min8 = 0;\n\
    \    my $even_index_count_min8 = 0;\n    my $even_value_count_max9 = 0;\n    my\
    \ $even_index_count_max9 = 0;\n    my $even_value_count_min9 = 0;\n    my $even_index_count_min9\
    \ = 0;\n    my $even_value_count_max10 = 0;\n    my $even_index_count_max10 =\
    \ 0;\n    my $even_value_count_min10 = 0;\n    my $even_index_count_min10 = 0;\n\
    \    my $even_value_count_max11 = 0;\n    my $even_index_count_max11 = 0;\n  \
    \  my $even_value_count_min11 = 0;\n    my $even_index_count_min11 = 0;\n    my\
    \ $even_value_count_max12 = 0;\n    my $even_index_count_max12 = 0;\n    my $even_value_count_min12\
    \ = 0;\n    my $even_index_count_min12 = 0;\n    my $even_value_count_max13 =\
    \ 0;\n    my $even_index_count_max13 = 0;\n    my $even_value_count_min13 = 0;\n\
    \    my $even_index_count_min13 = 0;\n    my $even_value_count_max14 = 0;\n  \
    \  ", "    my $min_even_val = undef;\n    my $min_even_pos = 0;\n    my $min_even_pos2\
    \ = 0;\n    my $min_even_pos3 = 0;\n    my $min_even_pos4 = 0;\n    my $min_even_pos5\
    \ = 0;\n    my $min_even_pos6 = 0;\n    my $min_even_pos7 = 0;\n    my $min_even_pos8\
    \ = 0;\n    my $min_even_pos9 = 0;\n    my $min_even_pos10 = 0;\n    my $min_even_pos11\
    \ = 0;\n    my $min_even_pos12 = 0;\n    my $min_even_pos13 = 0;\n    my $min_even_pos14\
    \ = 0;\n    my $min_even_pos15 = 0;\n    my $min_even_pos16 = 0;\n    my $min_even_pos17\
    \ = 0;\n    my $min_even_pos18 = 0;\n    my $min_even_pos19 = 0;\n    my $min_even_pos20\
    \ = 0;\n    my $min_even_pos21 = 0;\n    my $min_even_pos22 = 0;\n    my $min_even_pos23\
    \ = 0;\n    my $min_even_pos24 = 0;\n    my $min_even_pos25 = 0;\n    my $min_even_pos26\
    \ = 0;\n    my $min_even_pos27 = 0;\n    my $min_even_pos28 = 0;\n    my $min_even_pos29\
    \ = 0;\n    my $min_even_pos30 = 0;\n    my $min_even_pos31 = 0;\n    my $min_even_pos32\
    \ = 0;\n    my $min_even_pos33 = 0;\n    my $min_even_pos34 = 0;\n    my $min_even_pos35\
    \ = 0;\n    my $min_even_pos36 = 0;\n    my $min_even_pos37 = 0;\n    my $min_even_pos38\
    \ = 0;\n    my $min_even_pos39 = 0;\n    my $min_even_pos40 = 0;\n    my $min_even_pos41\
    \ = 1;\n    my $min_even_pos42 = 1;\n    my $min_even_pos43 = 1;\n    my $min_even_pos44\
    \ = 1;\n    my $min_even_pos45 = 1;\n    my $min_even_pos46 = 1;\n    my $min_even_pos47\
    \ = 1;\n    my $min_even_pos48 = 1;\n    my $min_even_pos49 = 1;\n    my $min_even_pos50\
    \ = 1;\n    my $min_even_pos51 = 1;\n    my $min_even_pos52 = 1;\n    my $min_even_pos53\
    \ = 1;\n    my $min_even_pos54 = 1;\n    my $min_even_pos55 = 1;\n    my $min_even_pos56\
    \ = 1;", "    my $min = $arr->[0];\n    my $index = 0;\n    my $even = 0;\n  \
    \  my $smalest_value;\n    foreach my $node (@$arr) {\n        if ($node % 2 ==\
    \ 0) {\n            $even++;\n            if ($smalest_value == 0) {\n       \
    \         $smalest_value = $node;\n                $index = $node;\n         \
    \   }\n            else {\n                if ($node < $smalest_value) {\n   \
    \                 $smalest_value = $node;\n                    $index = $node;\n\
    \                }\n            }\n        }\n    }\n    if ($smalest_value ==\
    \ 0) {\n        return [];\n    }\n    return [ $smalest_value, $index ];\n}",
  "    my $min = $arr->[0];\n    my $index = 0;\n    my $found = 0;\n    foreach my\
    \ $val (@$arr) {\n        if ($val % 2 == 0) {\n            $found = 1;\n    \
    \        if ($val < $min) {\n                $min = $val;\n                $index\
    \ = $arr->[$found];\n            }\n        }\n    }\n    return $found ? [ $min,\
    \ $index ] : [];\n}", "    my $min = -1;\n    my $min_index;\n    my $smalest_value;\n\
    \    my $index;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n\
    \            if ($min == -1 || $node < $smalest_value) {\n                $min\
    \ = $node;\n                $min_index = $index;\n                $smalest_value\
    \ = $node;\n            }\n            else {\n                if ($node < $min)\
    \ {\n                    $min = $node;\n                    $min_index = $index;\n\
    \                }\n            }\n        }\n        $index++;\n    }\n    return\
    \ ($smalest_value, $min_index);\n}", "    my $min = $arr[0];\n    my $min_index\
    \ = 0;\n    my $index = 0;\n    foreach my $node (@$arr) {\n        if ($node\
    \ % 2 == 0) {\n            if ($node < $min) {\n                $min = $node;\n\
    \                $min_index = $index;\n            }\n            $index++;\n\
    \        }\n    }\n    return [$min, $min_index];\n}", "    my $len = @$arr;\n\
    \    my $min = $arr->[0];\n    my $index = 0;\n    my $smalest_value;\n    my\
    \ @result;\n    for(my $i = 1; $i < $len; $i++) {\n        my $val = $arr->[$i];\n\
    \        if($val % 2 == 0) {\n            $smalest_value = $val;\n           \
    \ $index = $i;\n        }\n        elsif($val < $min) {\n            $min = $val;\n\
    \            $index = $i;\n        }\n    }\n    if($smalest_value) {\n      \
    \  push @result, $smalest_value, $index;\n    }\n    return @result;\n}", "  \
    \  my $min;\n    my $index;\n    my $value;\n    my $even;\n    my $index;\n \
    \   my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $", "    my $min;\n    my $index;\n  \
    \  my $even;\n    my $smalest_value;\n    foreach my $node (@$arr) {\n       \
    \ $smalest_value = $node;\n        $index = 0;\n        $even = 0;\n        foreach\
    \ my $i (0 .. $#$node) {\n            if ($node->[$i] % 2 == 0) {\n          \
    \      $even = $node->[$i];\n                last;\n            }\n        }\n\
    \        if ($even < $min) {\n            $min = $even;\n            $smalest_value\
    \ = $node;\n            $index = $i;\n        }\n    }\n    return [$smalest_value,\
    \ $index];\n}", "    my $result;\n    my $min;\n    my $index;\n    my $value;\n\
    \    my $even;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $index;\n    my $index;\n\
    \    my $index;\n    my $index;\n    my $index;\n    my $", "    my $result;\n\
    \    my $min;\n    my $index;\n    my $value;\n    foreach my $i (0..$#{$arr})\
    \ {\n        my $val = $arr->[$i];\n        if ($val % 2 == 0) {\n           \
    \ $min = $val;\n            $index = $i;\n        }\n    }\n    if ($min > 0)\
    \ {\n        $result = $min;\n        $result->[0] = $min;\n        $result->[1]\
    \ = $index;\n    } else {\n        $result = undef;\n    }\n    return $result;\n\
    }", "    my $min = $arr->[0];\n    my $index = 0;\n    my $found = 0;\n    foreach\
    \ my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $found = 1;\n\
    \            if ($node < $min) {\n                $min = $node;\n            \
    \    $index = $found;\n            }\n        }\n    }\n    return $found ? [$min,\
    \ $index] : [];\n}", "    my $min;\n    my $index;\n    my $smalest_value;\n \
    \   foreach my $node (@$arr) {\n        if ($min == 0) {\n            $min = $node;\n\
    \            $index = 0;\n        } elsif ($min > $node) {\n            $min =\
    \ $node;\n            $index = 0;\n        } elsif ($min == $node) {\n       \
    \     $index++;\n        }\n    }\n    if ($min == 0) {\n        return [];\n\
    \    } elsif ($min > $smalest_value) {\n        $smalest_value = $min;\n     \
    \   $index = 0;\n    }\n    return [ $smalest_value, $index ];\n}", "    my $min\
    \ = $arr->[0];\n    my $index = 0;\n    my $smalest_value;\n    foreach my $val\
    \ (@$arr) {\n        if ($val % 2 == 0) {\n            if ($val < $min) {\n  \
    \              $min = $val;\n                $index = $arr->[$index];\n      \
    \      }\n        }\n    }\n    if ($min != 0) {\n        return [ $min, $index\
    \ ];\n    }\n    return [];\n}", "    my $min = $arr->[0];\n    my $index = 0;\n\
    \    my $found = 0;\n    foreach my $node (@$arr) {\n        if ($node % 2 ==\
    \ 0) {\n            $found = 1;\n            if ($node < $min) {\n           \
    \     $min = $node;\n                $index = $arr->[$found];\n            }\n\
    \        }\n    }\n    return $found ? [ $min, $index ] : [];\n}", "    my @res;\n\
    \    my $min;\n    my $index;\n    my $value;\n    my $i;\n    my $j;\n    my\
    \ $k;\n    my $even;\n    my $min_index;\n    my $min_value;\n    my $temp;\n\
    \    my $found;\n    my $found2;\n    my $found3;\n    my $found4;\n    my $found5;\n\
    \    my $found6;\n    my $found7;\n    my $found8;\n    my $found9;\n    my $found10;\n\
    \    my $found11;\n    my $found12;\n    my $found13;\n    my $found14;\n    my\
    \ $found15;\n    my $found16;\n    my $found17;\n    my $found18;\n    my $found19;\n\
    \    my $found20;\n    my $found21;\n    my $found22;\n    my $found23;\n    my\
    \ $found24;\n    my $found25;\n    my $found26;\n    my $found27;\n    my $found28;\n\
    \    my $found29;\n    my $found30;\n    my $found31;\n    my $found32;\n    my\
    \ $found33;\n    my $found34;\n    my $found35;\n    my $found36;\n    my $found37;\n\
    \    my $found38;\n    my $found39;\n    my $found40;\n    my $found41;\n    my\
    \ $found42;\n    my $found43;\n    my $found44;\n    my $found45;\n    my $found46;\n\
    \    my $found47;\n    my $found48;\n    my $found49;\n    my $found50;\n    my\
    \ $found51;\n    my $found52;\n    my $found53;\n    my $found54;\n    my $found55;\n\
    \    my $found56;\n    my $found57;\n    my $found58;\n    my $found59;\n    my\
    \ $found60;\n    my $found61;\n    my $found62;\n    my $found63;\n    my $found64;\n\
    \    my $found65;\n    my $found66;\n    my $found67;\n    my $found68;\n    my\
    \ $found69;\n    my $found70;\n    my $found71;\n    my $found72;\n    my $found73;\n\
    \    my $found74;\n    my $found75;\n    my $found76;\n    my $found77;\n    my\
    \ $found78;\n    my $found79;\n    my $found80;\n    ", "    my $min = $arr->[0];\n\
    \    my $index = 0;\n    for (my $i = 1; $i <= $#{$arr}; $i++) {\n        if ($arr->[$i]\
    \ % 2 == 0) {\n            $min = $arr->[$i] if $arr->[$i] < $min;\n         \
    \   $index = $i;\n        }\n    }\n    return [$min, $index];\n}", "    my $min\
    \ = $arr->[0];\n    my $min_index = 0;\n    my $index = 0;\n    my $smalest_value;\n\
    \    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n            $smalest_value\
    \ = $val;\n            $min_index = $index;\n        }\n        $index++;\n  \
    \  }\n    if ($smalest_value) {\n        return [ $smalest_value, $min_index ];\n\
    \    }\n    return [];\n}", "    my $min = -1;\n    my $min_index = 0;\n    my\
    \ $smalest_value;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0)\
    \ {\n            if ($min == -1) {\n                $min = $node;\n          \
    \      $min_index = $node;\n            }\n            elsif ($node < $min) {\n\
    \                $min = $node;\n                $min_index = $node;\n        \
    \    }\n        }\n    }\n    return [ $smalest_value, $min_index ];\n}", "  \
    \  my $min = $arr->[0];\n    my $index = 0;\n    my $even = 0;\n    my $index\
    \ = 0;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n      \
    \      $even++;\n        }\n        if ($node < $min) {\n            $min = $node;\n\
    \            $index = $index;\n        }\n        $index++;\n    }\n    if ($even\
    \ > 0) {\n        return [ $min, $index ];\n    }\n    return [];\n}", "    my\
    \ $min = $arr->[0];\n    my $index = 0;\n    my $even = 0;\n    my $smalest_value;\n\
    \    foreach my $n (@$arr) {\n        if ($n % 2 == 0) {\n            $even++;\n\
    \        }\n        if ($even < $min) {\n            $min = $even;\n         \
    \   $smalest_value = $n;\n            $index = $n;\n        }\n    }\n    return\
    \ [ $smalest_value, $index ];\n}", "    my $min = $arr->[0];\n    my $index =\
    \ 0;\n    my $even = 0;\n    foreach my $val (@$arr) {\n        if ($val & 1)\
    \ {\n            $even++;\n        }\n        if ($even == 0) {\n            $min\
    \ = $val;\n            $index = $arr->[$arr->[0]];\n        }\n    }\n    return\
    \ $min, $index;\n}", "    my $len = @$arr;\n    my $smalest_value;\n    my $smalest_index;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $smallest_value;\n    my $smallest_index;\n\
    \    my $smallest_even_value;\n    my $smallest_even_node;\n    my $even_value;\n\
    \    my $even_node;\n    my @result;", "    my $min = $arr->[0];\n    my $min_index\
    \ = 0;\n    my $index = 0;\n    foreach my $val (@$arr) {\n        if ($val %\
    \ 2 == 0) {\n            if ($val < $min) {\n                $min = $val;\n  \
    \              $min_index = $index;\n            }\n            $index++;\n  \
    \      }\n    }\n    return [$min, $min_index];\n}", "    my $min = $arr[0];\n\
    \    my $index = 0;\n    my $result = ();\n    foreach my $node (@$arr) {\n  \
    \      if ($node % 2 == 0) {\n            if ($node < $min) {\n              \
    \  $min = $node;\n                $index = $arr->index($node);\n            }\n\
    \        }\n    }\n    return ($min, $index);\n}", "    my $result;\n    my $min;\n\
    \    my $index;\n    my $value;\n    my $even;\n    my $i;\n    my $j;\n    my\
    \ $k;\n    my $even_index;\n    my $min_index;\n    my $min_value;\n    my $temp;\n\
    \    my $count = 0;\n    my $even_value;\n    my $even_index;\n    my $min_even_value;\n\
    \    my $min_even_index;\n    my $min_index;\n    my $min_value;\n    my $temp;\n\
    \    my $count = 0;\n    my $even_value;\n    my $even_index;\n    my $min_even_value;\n\
    \    my $min_even_index;\n    my $min_index;\n    my $min_value;\n    my $temp;\n\
    \    my $count = 0;\n    my $even_value;\n    my $even_index;\n    my $min_even_value;\n\
    \    my $min_even_index;\n    my $min_index;\n    my $min_value;\n    my $temp;\n\
    \    my $count = 0;\n    my $even_value;\n    my $even_index;\n    my $min_even_value;\n\
    \    my $min_even_index;\n    my $min_index;\n    my $min_value;\n    my $temp;\n\
    \    my $count = 0;\n    my $even_value;\n    my $even_index;\n    my $min_even_value;\n\
    \    my $min_even_index;\n    my $min_index;\n    my $min_value;\n    my $temp;\n\
    \    my $count = 0;\n    my $even_value;\n    my $even_index;\n    my $min_even_value;\n\
    \    my $min_even_index;\n    my $min_index;\n    my $min_value;\n    my $temp;\n\
    \    my $count = 0;\n    my $even_value;\n    my $even_index;\n    my $min_even_value;\n\
    \    my $min_even_index;\n    my $min_index;\n    my $min_value;\n    my $temp;\n\
    \    my $count = 0;\n    my $even_value;\n    my $even_index;\n    my $min_even_value;\n\
    \    my $min_even_index;\n    my $min_index;\n    my $min_value;\n    my $temp;\n\
    \    my $count = 0;\n    my $even_value;\n    my $even_index;\n    my $min_even_value;\n\
    \    my $min_even_index;\n    my $min_index;\n    my $min_value;\n    my $temp;\n\
    \    my $count = 0;\n    my $even_value;\n    my $even_index;\n    my $min_even_value;\n\
    \    my $min_even_index;\n    my $min_index;\n    my $min_value;\n    my $temp;\n\
    \    my $count = 0;\n    my $", "    my @res;\n    my $min;\n    my $index;\n\
    \    my $value;\n    my $i;\n    my $j;\n    my $k;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $even;\n    my $min_index;\n\
    \    my $min_value;\n    my $index;\n    my $value;\n    my $", "    my $min =\
    \ $arr->[0];\n    my $index = 0;\n    my $min_index = 0;\n    foreach my $node\
    \ (@$arr) {\n        if ($node % 2 == 0) {\n            if ($min > $node) {\n\
    \                $min = $node;\n                $min_index = $index;\n       \
    \     }\n            $index++;\n        }\n    }\n    return [$min, $min_index];\n\
    }", "    my $result;\n    my $min;\n    my $index;\n    my $value;\n    my $even;\n\
    \    my $index;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n\
    \    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my\
    \ $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n\
    \    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my\
    \ $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my $M;\n\
    \    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n    my\
    \ $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n\
    \    my $_;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my\
    \ $f;\n    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n\
    \    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my\
    \ $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n\
    \    my $z;\n    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my\
    \ $F;\n    my $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my $L;\n\
    \    my $M;\n    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n    my\
    \ $S;\n    my $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my $Y;\n\
    \    my $Z;\n    my $_;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my\
    \ $e;\n    my $f;\n    my $g;\n    my $h;\n", "    my $min = $arr->[0];\n    my\
    \ $index = 0;\n    my $found = 0;\n    foreach my $node (@$arr) {\n        if\
    \ ($node % 2 == 0) {\n            $found = 1;\n            if ($node < $min) {\n\
    \                $min = $node;\n                $index = $found;\n           \
    \ }\n        }\n    }\n    return $found ? [ $min, $index ] : [];\n}", "    my\
    \ $len = @$arr;\n    my $min = $arr->[0];\n    my $min_index = 0;\n    my $smalest_value;\n\
    \    my $smalest_index;\n    my $i;\n    my $j;\n    my $k;\n    my $v;\n    my\
    \ $temp;\n    my $temp2;\n    my $temp3;\n    my $temp4;\n    my $temp5;\n   \
    \ my $temp6;\n    my $temp7;\n    my $temp8;\n    my $temp9;\n    my $temp10;\n\
    \    my $temp11;\n    my $temp12;\n    my $temp13;\n    my $temp14;\n    my $temp15;\n\
    \    my $temp16;\n    my $temp17;\n    my $temp18;\n    my $temp19;\n    my $temp20;\n\
    \    my $temp21;\n    my $temp22;\n    my $temp23;\n    my $temp24;\n    my $temp25;\n\
    \    my $temp26;\n    my $temp27;\n    my $temp28;\n    my $temp29;\n    my $temp30;\n\
    \    my $temp31;\n    my $temp32;\n    my $temp33;\n    my $temp34;\n    my $temp35;\n\
    \    my $temp36;\n    my $temp37;\n    my $temp38;\n    my $temp39;\n    my $temp40;\n\
    \    my $temp41;\n    my $temp42;\n    my $temp43;\n    my $temp44;\n    my $temp45;\n\
    \    my $temp46;\n    my $temp47;\n    my $temp48;\n    my $temp49;\n    my $temp50;\n\
    \    my $temp51;\n    my $temp52;\n    my $temp53;\n    my $temp54;\n    my $temp55;\n\
    \    my $temp56;\n    my $temp57;\n    my $temp58;\n    my $temp59;\n    my $temp60;\n\
    \    my $temp61;\n    my $temp62;\n    my $temp63;\n    my $temp64;\n    my $temp65;\n\
    \    my $temp66;\n    my $temp67;\n    my $temp68;\n    my $temp69;\n    my $temp70;\n\
    \    my $temp71;\n    my $temp72;\n    my $temp73;\n    my $temp74;\n    my $temp75;\n\
    \    my $temp76;\n    my $temp77;\n    my $temp78;\n    my $temp79;\n    my $temp80;",
  "    my $min = $arr[0];\n    my $min_index = 0;\n    my $index = 0;\n    foreach\
    \ my $val (@$arr) {\n        if ($val % 2 == 0) {\n            if ($val < $min)\
    \ {\n                $min = $val;\n                $min_index = $index;\n    \
    \        }\n            $index++;\n        }\n    }\n    return [$min, $min_index];\n\
    }", "    my $min = $arr->[0];\n    my $index = 0;\n    foreach my $i (@$arr) {\n\
    \        if ($i % 2 == 0) {\n            if ($i < $min) {\n                $min\
    \ = $i;\n                $index = $i;\n            }\n        }\n    }\n    return\
    \ [$min, $index];\n}", "    my $min_even_value = 0;\n    my $min_even_index =\
    \ 0;\n    my $smalest_value;\n    my @result;\n    foreach my $node (@$arr) {\n\
    \        if ($node % 2 == 0) {\n            if ($node < $min_even_value) {\n \
    \               $smalest_value = $node;\n                $min_even_index = $min_even_value;\n\
    \            }\n            else {\n                if ($node < $min_even_index)\
    \ {\n                    $smalest_value = $node;\n                    $min_even_index\
    \ = $min_even_value;\n                }\n            }\n        }\n        else\
    \ {\n            $min_even_value = $node;\n            $min_even_index = $node;\n\
    \        }\n    }\n    if ($smalest_value) {\n        push(@result, $smalest_value,\
    \ $min_even_index);\n    }\n    return @result;\n}", "    my @res;\n    my $min;\n\
    \    my $index;\n    my $value;\n    my $i;\n    my $j;\n    my $k;\n    my $count;\n\
    \    my $temp;\n    my $smallest;\n    my $smallest_value;\n    my $smallest_index;\n\
    \    my $found;\n    my $value;\n    my $index;\n    my $i;\n    my $j;\n    my\
    \ $k;\n    my $count;\n    my $temp;\n    my $smallest;\n    my $smallest_value;\n\
    \    my $smallest_index;\n    my $found;\n    my $value;\n    my $index;\n   \
    \ my $i;\n    my $j;\n    my $k;\n    my $count;\n    my $temp;\n    my $smallest;\n\
    \    my $smallest_value;\n    my $smallest_index;\n    my $found;\n    my $value;\n\
    \    my $index;\n    my $i;\n    my $j;\n    my $k;\n    my $count;\n    my $temp;\n\
    \    my $smallest;\n    my $smallest_value;\n    my $smallest_index;\n    my $found;\n\
    \    my $value;\n    my $index;\n    my $i;\n    my $j;\n    my $k;\n    my $count;\n\
    \    my $temp;\n    my $smallest;\n    my $smallest_value;\n    my $smallest_index;\n\
    \    my $found;\n    my $value;\n    my $index;\n    my $i;\n    my $j;\n    my\
    \ $k;\n    my $count;\n    my $temp;\n    my $smallest;\n    my $smallest_value;\n\
    \    my $smallest_index;\n    my $found;\n    my $value;\n    my $index;\n   \
    \ my $i;\n    my $j;\n    my $k;\n    my $count;\n    my $temp;\n    my $smallest;\n\
    \    my $smallest_value;\n    my $smallest_index;\n    my $found;\n    my $value;\n\
    \    my $index;\n    my $i;\n    my $j;\n    my $k;\n    my $count;\n    my $temp;\n\
    \    my $smallest;\n    my $smallest_value;\n    my $smallest_index;\n    my $found;\n\
    \    my $value;\n    my $index;\n    my $i;\n    my $j;\n    my $k;\n    my $count;\n\
    \    my $temp;\n    my $smallest;\n    my $smallest_value;\n    my $smallest_index;\n\
    \    my $found;\n    my $value;\n    my $index;\n    my $i;\n    my $j;\n    my\
    \ $k;\n    my $count;\n    ", "    my $len = @$arr;\n    my $min = $arr->[0];\n\
    \    my $index = 0;\n    my $smalest_value;\n    my @result;", "    my $min =\
    \ $arr->[0];\n    my $index = 0;\n    my $smalest_value;\n    foreach my $node\
    \ (@$arr) {\n        if ($node % 2 == 0) {\n            if ($smalest_value eq\
    \ \"\") {\n                $smalest_value = $node;\n                $index = $index;\n\
    \            }\n            elsif ($node < $smalest_value) {\n               \
    \ $smalest_value = $node;\n                $index = $index;\n            }\n \
    \       }\n    }\n    return $smalest_value, $index;\n}", "    my $min = -1;\n\
    \    my $index;\n    my $smalest_value;\n    foreach my $node (@$arr) {\n    \
    \    if ($min == -1 || $min > $node) {\n            $min = $node;\n          \
    \  $index = $node;\n            $smalest_value = $node;\n        } elsif ($node\
    \ == $smalest_value) {\n            $index = $node;\n        }\n    }\n    return\
    \ $min if $min != -1;\n    return [];\n}", "    my $min_value = $arr->[0];\n \
    \   my $min_idx = 0;\n    my $smalest_value;\n    my $smalest_idx;\n    for (my\
    \ $i = 1; $i <= $#{$arr}; $i++) {\n        my $value = $arr->[$i];\n        if\
    \ ($value % 2 == 0) {\n            if ($smalest_value == undef) {\n          \
    \      $smalest_value = $value;\n                $smalest_idx = $i;\n        \
    \    }\n            elsif ($smalest_value < $value) {\n                $smalest_value\
    \ = $value;\n                $smalest_idx = $i;\n            }\n        }\n  \
    \  }\n    return $smalest_value if $smalest_value;\n    return [];\n}", "    my\
    \ $min = $arr[0];\n    my $index = 0;\n    my $i = 0;\n    while($i < @$arr) {\n\
    \        my $val = $arr->[$i];\n        if($val % 2 == 0) {\n            if($val\
    \ < $min) {\n                $min = $val;\n                $index = $i;\n    \
    \        }\n        }\n        $i++;\n    }\n    return $min == $arr->[$index]\
    \ ? [ $min, $index ] : [];\n}", "    my @res;\n    my $min;\n    my $index;\n\
    \    my $value;\n    my $i = 0;\n    my $j = 0;\n    my $even;\n    foreach my\
    \ $node (@$arr) {\n        $value = $node->{value};\n        $even = $value %\
    \ 2 == 0;\n        if ($even) {\n            $min = $value;\n            $index\
    \ = $i;\n        }\n        $i++;\n    }\n    if ($min == 0) {\n        return\
    \ [];\n    }\n    foreach my $node (@$arr) {\n        $value = $node->{value};\n\
    \        $even = $value % 2 == 0;\n        if ($even) {\n            if ($min\
    \ > $value) {\n                $min = $value;\n                $index = $j;\n\
    \            }\n            $j++;\n        }\n    }\n    if ($min == 0) {\n  \
    \      return [];\n    }\n    push(@res, {\"value\" => $min, \"index\" => $index});\n\
    \    return @res;\n}", "    my $min = $arr->[0];\n    my $index = 0;\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $even = 0;\n    my $even_index = 0;\n    foreach\
    \ my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $even = 1;\n\
    \            $even_index = $i;\n        }\n        $i++;\n    }\n    if ($even)\
    \ {\n        my $smallest_value = $arr->[$even_index];\n        my $smallest_index\
    \ = $even_index;\n        foreach my $node (@$arr) {\n            if ($node %\
    \ 2 == 0) {\n                if ($node < $smallest_value) {\n                \
    \    $smallest_value = $node;\n                    $smallest_index = $j;\n   \
    \             }\n                $j++;\n            }\n        }\n        return\
    \ [$smallest_value, $smallest_index];\n    }\n    return [];\n}", "    my $min\
    \ = $arr->[0];\n    my $min_index = 0;\n    my $i = 0;\n    foreach my $node (@$arr)\
    \ {\n        if ($node % 2 == 0) {\n            if ($node < $min) {\n        \
    \        $min = $node;\n                $min_index = $i;\n            }\n    \
    \        $i++;\n        }\n    }\n    return [$min, $min_index];\n}", "    my\
    \ $min = $arr->[0];\n    my $index = 0;\n    my $smalest_value;\n    foreach my\
    \ $node (@$arr) {\n        if ($node % 2 == 0) {\n            $smalest_value =\
    \ $node;\n            $index = $arr->[$index];\n        }\n    }\n    return $smalest_value\
    \ if $smalest_value;\n    return [];\n}", "    my $min = $arr[0];\n    my $min_index\
    \ = 0;\n    my $index = 0;\n    foreach my $node (@$arr) {\n        if ($node\
    \ % 2 == 0) {\n            if ($node < $min) {\n                $min = $node;\n\
    \                $min_index = $index;\n            }\n            $index++;\n\
    \        }\n    }\n    return [ $min, $min_index ];\n}", "    my @res;\n    my\
    \ $min;\n    my $index;\n    my $value;\n    my $i;\n    my $j;\n    my $k;\n\
    \    my $l;\n    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my\
    \ $r;\n    my $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n\
    \    my $y;\n    my $z;\n    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my\
    \ $E;\n    my $F;\n    my $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n\
    \    my $L;\n    my $M;\n    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my\
    \ $R;\n    my $S;\n    my $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n\
    \    my $Y;\n    my $Z;\n    my $_;", "    my $min = $arr[0];\n    my $index =\
    \ 0;\n    my $found;\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0)\
    \ {\n            $found = 1;\n            if ($val < $min) {\n               \
    \ $min = $val;\n                $index = $found;\n            }\n        }\n \
    \   }\n    return $found ? [$min, $index] : [];\n}", "    my $min = $arr->[0];\n\
    \    my $index = 0;\n    my $even_value = 0;\n    my $smalest_value;\n    foreach\
    \ my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $even_value =\
    \ $node;\n        }\n        if ($node < $min) {\n            $min = $node;\n\
    \            $index = $even_value;\n        }\n    }\n    if ($min == 0) {\n \
    \       return [];\n    }\n    if ($min == $arr->[0]) {\n        return [$min,\
    \ $index];\n    }\n    my $min_value = $arr->[0];\n    my $min_index = 0;\n  \
    \  foreach my $node (@$arr) {\n        if ($node == $min_value) {\n          \
    \  $min_index = $node;\n        }\n        if ($node < $min_value) {\n       \
    \     $min_value = $node;\n            $min_index = $node;\n        }\n    }\n\
    \    return [$min_value, $min_index];\n}", "    my $min = $arr[0];\n    my $min_index\
    \ = 0;\n    my $index = 0;\n    my $even_value = 0;\n    foreach my $node (@$arr)\
    \ {\n        if ($node % 2 == 0) {\n            $even_value = $node;\n       \
    \ }\n        if ($node < $min) {\n            $min = $node;\n            $min_index\
    \ = $index;\n        }\n        $index++;\n    }\n    if ($min_index == 0) {\n\
    \        return [];\n    }\n    return [ $min, $min_index ];\n}", "    my $min\
    \ = $arr->[0];\n    my $index = 0;\n    my $even = 0;\n    foreach my $node (@$arr)\
    \ {\n        if ($node % 2 == 0) {\n            $even = $node;\n        }\n  \
    \      if ($node < $min) {\n            $min = $node;\n            $index = $even;\n\
    \        }\n    }\n    return $index;\n}", "    my $min;\n    my $index;\n   \
    \ my $result;", "    my $min_value = $arr->[0];\n    my $min_idx = 0;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $smalest_value;\n    my $smalest_idx;\n\
    \    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n            $smalest_value\
    \ = $val;\n            $smalest_idx = $i;\n        }\n        $i++;\n    }\n \
    \   if ($smalest_value eq $min_value) {\n        return $smalest_value;\n    }\n\
    \    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n            if ($val\
    \ < $smalest_value) {\n                $smalest_value = $val;\n              \
    \  $smalest_idx = $k;\n            }\n            $k++;\n        }\n    }\n  \
    \  return $smalest_value;\n}", "    my @res;\n    my $min;\n    my $index;\n \
    \   my $value;\n    my $even;\n    my $index;\n    my $i;\n    my $j;\n    my\
    \ $k;\n    my $l;\n    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n\
    \    my $r;\n    my $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my\
    \ $x;\n    my $y;\n    my $z;\n    my $A;\n    my $B;\n    my $C;\n    my $D;\n\
    \    my $E;\n    my $F;\n    my $G;\n    my $H;\n    my $I;\n    my $J;\n    my\
    \ $K;\n    my $L;\n    my $M;\n    my $N;\n    my $O;\n    my $P;\n    my $Q;\n\
    \    my $R;\n    my $S;\n    my $T;\n    my $U;\n    my $V;\n    my $W;\n    my\
    \ $X;\n    my $Y;\n    my $Z;\n    my $_;\n    my $a;\n    my $b;\n    my $c;\n\
    \    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n    my $i;\n    my\
    \ $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my $o;\n    my $p;\n\
    \    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n    my $v;\n    my\
    \ $w;\n    my $x;\n    my $y;\n    my $z;\n    my $A;\n    my $B;\n    my $C;\n\
    \    my $D;\n    my $E;\n    my $F;\n    my $G;\n    my $H;\n    my $I;\n    my\
    \ $J;\n    my $K;\n    my $L;\n    my $M;\n    my $N;\n    my $O;\n    my $P;\n\
    \    my $Q;\n    my $R;\n    my $S;\n    my $T;\n    my $U;\n    my $V;\n    my\
    \ $W;\n    my $X;\n    my $Y;\n    my $Z;\n    my $_;\n    my $a;\n    my $b;\n\
    \    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n", " \
    \   my $min_even_value = $arr[0];\n    my $min_even_index = 0;\n    my $min_even_index_count\
    \ = 0;\n    my $even_value_count = 0;\n    my $even_value_index = 0;\n    my $even_value\
    \ = $arr[0];\n    foreach my $i (1..$#arr) {\n        if ($arr[$i] % 2 == 0) {\n\
    \            $even_value_count++;\n            if ($even_value_count == $min_even_value)\
    \ {\n                $even_value_index = $i;\n                $min_even_index\
    \ = $i;\n                $min_even_index_count = $even_value_count;\n        \
    \    }\n        }\n    }\n    if ($min_even_index_count == $min_even_value) {\n\
    \        return [ $min_even_value, $min_even_index ];\n    }\n    return [];\n\
    }", "    my $min_value = $arr->[0];\n    my $min_idx = 0;\n    my $i = 0;\n  \
    \  foreach my $val (@$arr) {\n        if ($val & 1) {\n            if ($min_value\
    \ eq $val) {\n                $min_value = $val;\n                $min_idx = $i;\n\
    \            }\n            $i++;\n        }\n    }\n    return [ $min_value,\
    \ $min_idx ];\n}", "    my $min = $arr[0];\n    my $min_index = 0;\n    my $index;\n\
    \    my $value;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n\
    \            $value = $node;\n            $index = $min_index;\n        }\n  \
    \      if ($node < $min) {\n            $min = $node;\n            $min_index\
    \ = $index;\n        }\n        $index++;\n    }\n    return $value;\n}", "  \
    \  my $min = -1;\n    my $min_index;\n    my $i = 0;\n    my $j = 0;\n    my $k\
    \ = 0;\n    my $even;\n    my $value;\n    my $index;\n    my $count = 0;\n  \
    \  my $even_value = 0;\n    my $even_index = 0;\n    foreach my $node (@$arr)\
    \ {\n        $count++;\n        $value = $node->[0];\n        $index = $node->[1];\n\
    \        $even_value = $value % 2;\n        $even_index = $index if $even_value;\n\
    \        if ($count > 1) {\n            if ($even_index < $min_index) {\n    \
    \            $min_index = $even_index;\n                $min = $value;\n     \
    \       }\n        } elsif ($count == 1) {\n            if ($even_index == $min_index)\
    \ {\n                $min = $value;\n            }\n        }\n    }\n    return\
    \ $min;\n}", "    my $min = $arr->[0];\n    my $index = 0;\n    my $i = 0;\n \
    \   my $j = 0;\n    my $k = 0;\n    my $even = 0;\n    my $even_index = 0;\n \
    \   my $even_value = 0;\n    my $even_value_index = 0;\n    my $even_value_index2\
    \ = 0;\n    my $even_value_index3 = 0;\n    my $even_value_index4 = 0;\n    my\
    \ $even_value_index5 = 0;\n    my $even_value_index6 = 0;\n    my $even_value_index7\
    \ = 0;\n    my $even_value_index8 = 0;\n    my $even_value_index9 = 0;\n    my\
    \ $even_value_index10 = 0;\n    my $even_value_index11 = 0;\n    my $even_value_index12\
    \ = 0;\n    my $even_value_index13 = 0;\n    my $even_value_index14 = 0;\n   \
    \ my $even_value_index15 = 0;\n    my $even_value_index16 = 0;\n    my $even_value_index17\
    \ = 0;\n    my $even_value_index18 = 0;\n    my $even_value_index19 = 0;\n   \
    \ my $even_value_index20 = 0;\n    my $even_value_index21 = 0;\n    my $even_value_index22\
    \ = 0;\n    my $even_value_index23 = 0;\n    my $even_value_index24 = 0;\n   \
    \ my $even_value_index25 = 0;\n    my $even_value_index26 = 0;\n    my $even_value_index27\
    \ = 0;\n    my $even_value_index28 = 0;\n    my $even_value_index29 = 0;\n   \
    \ my $even_value_index30 = 0;\n    my $even_value_index31 = 0;\n    my $even_value_index32\
    \ = 0;\n    my $even_value_index33 = 0;\n    my $even_value_index34 = 0;\n   \
    \ my $even_value_index35 = 0;\n    my $even_value_index36 = 0;\n    my $even_value_index37\
    \ = 0;\n    my $even_value_index38 = 0;\n    my $even_value_index39 = 0;\n   \
    \ my $even_value_index40 = 0;\n    my $even_value_index41 = 0;\n    my $even_value_index42\
    \ = 0;\n    my $even_value_index43 = 0;\n    my $even_value_index44 = 0;\n   \
    \ my $even_value_index45 = 0;\n    my $even_value_index46 = 0;\n    my $even_value_index47\
    \ = 0;\n    my $even_value_index48 = 0;\n    my $even_value_index49 = 0;\n   \
    \ my $even_value_index50 = 0;\n    my $even_value_index51 = 0;\n    my $even_value_index52\
    \ = 0;\n    my $even_value_index53 = 0;\n    my $even_value_index54 = 0;\n   \
    \ my $even_value_index55 = 0;\n    my $even_value_index56 = 0;\n    my $even_value_index57\
    \ = 0;\n    my $even_value_index58 = 0;\n    my $even_value_index59 = 0;\n    ",
  "    my $min = -1;\n    my $min_index;\n    my $smalest_value;\n    foreach my $node\
    \ (@$arr) {\n        if ($node % 2 == 0) {\n            if ($min == -1) {\n  \
    \              $min = $node;\n                $min_index = $node;\n          \
    \  }\n            elsif ($node < $min) {\n                $min = $node;\n    \
    \            $min_index = $node;\n            }\n        }\n    }\n    return\
    \ $min unless $min == -1;\n    return [ $min, $min_index ];\n}", "    my $min\
    \ = $arr->[0];\n    my $index = 0;\n    my $smalest_value;\n    foreach my $val\
    \ (@$arr) {\n        if ($val % 2 == 0) {\n            $smalest_value = $val;\n\
    \            $index = $arr->index($val);\n        }\n    }\n    return $smalest_value\
    \ if $smalest_value;\n    return $arr->[0] if @$arr == 0;\n    return $arr->[$index]\
    \ if $arr->[$index] % 2 == 0;\n    return [];\n}", "    my $min;\n    my $index;\n\
    \    my $value;\n    my $i = 0;\n    my $j = 0;\n    my $even;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_indexes = [];\n    foreach my $node (@$arr)\
    \ {\n        if ($node % 2 == 0) {\n            $even = $node;\n            $even_index\
    \ = $i;\n            $even_value = $node;\n            $even_indexes[$i] = $even_index;\n\
    \        }\n        $i++;\n    }\n    if ($even) {\n        foreach my $node (@$arr)\
    \ {\n            if ($node % 2 == 0) {\n                if ($node < $even_value)\
    \ {\n                    $min = $node;\n                    $index = $even_indexes[$i];\n\
    \                }\n            }\n            $i++;\n        }\n    }\n    if\
    \ ($min == 0) {\n        return [];\n    }\n    else {\n        return [$min,\
    \ $index];\n    }\n}", "    my $min = $arr->[0];\n    my $index = 0;\n    foreach\
    \ my $val (@$arr) {\n        if ($val & 1) {\n            if ($val < $min) {\n\
    \                $min = $val;\n                $index = $arr->[$index];\n    \
    \        }\n        }\n    }\n    return [ $min, $index ];\n}", "    my $min =\
    \ $arr[0];\n    my $index = 0;\n    my $found = 0;\n    foreach my $i (@$arr)\
    \ {\n        if ($i % 2 == 0) {\n            $found = 1;\n            if ($i <\
    \ $min) {\n                $min = $i;\n                $index = $i;\n        \
    \    }\n        }\n    }\n    return $found ? [ $min, $index ] : [];\n}", "  \
    \  my @res;\n    my $min;\n    my $index;\n    my $value;\n    my $i = 0;\n  \
    \  my $j = 0;\n    my $even;\n    my $even_index;\n    my $even_value;\n    foreach\
    \ my $node (@$arr) {\n        $i++;\n        if ($node % 2 == 0) {\n         \
    \   $even = $node;\n            $even_index = $i;\n            $even_value = $node;\n\
    \        }\n    }\n    if ($i == 0) {\n        return [];\n    }\n    foreach\
    \ my $node (@$arr) {\n        $j++;\n        if ($node % 2 == 0) {\n         \
    \   if ($node < $even) {\n                $even = $node;\n                $even_index\
    \ = $j;\n                $even_value = $node;\n            }\n        }\n    }\n\
    \    if ($j == 0) {\n        return [];\n    }\n    if ($even_index == $i) {\n\
    \        $index = $even_index;\n        $value = $even_value;\n    } else {\n\
    \        $index = $i;\n        $value = $even;\n    }\n    push(@res, [\"$value\"\
    , \"$index\"]);\n    return @res;\n}", "    my $min = $arr->[0];\n    my $index\
    \ = 0;\n    my $found = 0;\n    foreach my $node (@$arr) {\n        if ($node\
    \ % 2 == 0) {\n            $found = 1;\n            if ($node < $min) {\n    \
    \            $min = $node;\n                $index = $arr->[$found];\n       \
    \     }\n        }\n    }\n    return $found ? [ $min, $index ] : [];\n}", " \
    \   my @result;\n    my $min;\n    my $index;\n    my $value;\n    my $i;\n  \
    \  my $j;\n    my $k;\n    my $even;\n    my $even_index;\n    my $index;\n  \
    \  my $value;\n    my $temp;\n    my $temp_index;\n    my $temp_even;\n    my\
    \ $temp_even_index;\n    my $temp_min;\n    my $temp_min_index;\n    my $temp_min_value;\n\
    \    my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n \
    \   my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n  \
    \  my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n   \
    \ my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n    my\
    \ $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n\
    \    my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n \
    \   my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n  \
    \  my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n   \
    \ my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n    my\
    \ $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n\
    \    my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n \
    \   my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n  \
    \  my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n   \
    \ my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n    my\
    \ $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n\
    \    my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n \
    \   my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n  \
    \  my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n   \
    \ my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n    my\
    \ $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n\
    \    my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n \
    \   my $temp_min_value;\n    my $temp_min_value;\n    my $temp_min_value;\n",
  "    my $min = $arr->[0];\n    my $index = 0;\n    my $found = 0;\n    foreach my\
    \ $val (@$arr) {\n        if ($val % 2 == 0) {\n            $found = 1;\n    \
    \        if ($val < $min) {\n                $min = $val;\n                $index\
    \ = $found;\n            }\n        }\n    }\n    return $found ? [$min, $index]\
    \ : [];\n}", "    my @res;\n    my $min;\n    my $index;\n    my $value;\n   \
    \ my $i;\n    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $even;\n    my $index;\n    my $value;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_value_index;\n    my $even_value_index;\n \
    \   my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    ", "    my $min = $arr[0];\n    my $index = 0;\n    my $smalest_value;\n\
    \    foreach my $i (@$arr) {\n        if ($i % 2 == 0) {\n            $smalest_value\
    \ = $i;\n            $index = $i;\n        }\n    }\n    if ($smalest_value) {\n\
    \        return [ $smalest_value, $index ];\n    }\n    return [];\n}", "    my\
    \ $min;\n    my $index;\n    my $result;\n    my $even;\n    my $i;\n    my $j;\n\
    \    my $k;\n    my $v;\n    my $count;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_", "    my $min;\n    my $index;\n\
    \    my $even;\n    my $smalest_value;\n    foreach my $node (@$arr) {\n     \
    \   if ($node % 2 == 0) {\n            $even = $node;\n            $smalest_value\
    \ = $node;\n            $index = 0;\n        }\n        elsif ($node < $smalest_value)\
    \ {\n            $smalest_value = $node;\n            $index = 0;\n        }\n\
    \        elsif ($node < $min) {\n            $min = $node;\n            $index\
    \ = 0;\n        }\n        elsif ($node == $even) {\n            $index++;\n \
    \       }\n    }\n    return $smalest_value, $index;\n}", "    my $min = $arr->[0];\n\
    \    my $index = 0;\n    my $smalest_value;\n    foreach my $val (@$arr) {\n \
    \       if ($val % 2 == 0) {\n            $smalest_value = $val;\n           \
    \ $index = $arr->[$index];\n        }\n    }\n    if ($smalest_value) {\n    \
    \    return [$smalest_value, $index];\n    }\n    return [];\n}", "    my $min_value\
    \ = $arr->[0];\n    my $min_idx = 0;\n    my $i = 0;\n    while($i < $arr->length)\
    \ {\n        if($arr->[$i] % 2 == 0) {\n            if($min_value eq $arr->[$i])\
    \ {\n                $min_value = $arr->[$i];\n                $min_idx = $i;\n\
    \            }\n        }\n        $i++;\n    }\n    return [ $min_value, $min_idx\
    \ ];\n}", "    my @res;\n    my $min;\n    my $index;\n    my $value;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $even;\n    my $found;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_even_index;\n    my $min_even_value;\n\
    \    my $min_even_node;\n    my $min_even_node_index;\n    my $min_even_node_value;\n\
    \    my $min_even_node_even;\n    my $min_even_node_even_index;\n    my $min_even_node_even_value;\n\
    \    my $min_even_node_even_index;\n    my $min_even_node_even_value;\n    my\
    \ $min_even_node_even_index;\n    my $min_even_node_even_value;\n    my $min_even_node_even_index;\n\
    \    my $min_even_node_even_value;\n    my $min_even_node_even_index;\n    my\
    \ $min_even_node_even_value;\n    my $min_even_node_even_index;\n    my $min_even_node_even_value;\n\
    \    my $min_even_node_even_index;\n    my $min_even_node_even_value;\n    my\
    \ $min_even_node_even_index;\n    my $min_even_node_even_value;\n    my $min_even_node_even_index;\n\
    \    my $min_even_node_even_value;\n    my $min_even_node_even_index;\n    my\
    \ $min_even_node_even_value;\n    my $min_even_node_even_index;\n    my $min_even_node_even_value;\n\
    \    my $min_even_node_even_index;\n    my $min_even_node_even_value;\n    my\
    \ $min_even_node_even_index;\n    my $min_even_node_even_value;\n    my $min_even_node_even_index;\n\
    \    my $min_even_node_even_value;\n    my $min_even_node_even_index;\n    my\
    \ $min_even_node_even_value;\n    my $min_even_node_even_index;\n    my $min_even_node_even_value;\n\
    \    my $min_even_node_even_index;\n    my $min_even_node_even_value;\n    my\
    \ $min_even_node_even_index;\n    my $min_even_node_even_value;\n    my $min_even_node_even_index;\n\
    \    my $min_even_node_even_value;\n    my $min_even_node_even_index;\n    my\
    \ $min_even_node_even_value;\n    my $min_even_node_even", "    my $min = $arr->[0];\n\
    \    my $index = 0;\n    my $even;\n    foreach my $n (@$arr) {\n        if ($n\
    \ % 2 == 0) {\n            $even = $n;\n        }\n        if ($n < $min) {\n\
    \            $min = $n;\n            $index = $arr->[$n];\n        }\n    }\n\
    \    return $even if ($even && $min == $even);\n    return $min if ($min && $min\
    \ == $index);\n    return [];\n}", "    my $min = $arr->[0];\n    my $min_index\
    \ = 0;\n    my $i = 0;\n    foreach my $node (@$arr) {\n        if ($node % 2\
    \ == 0) {\n            if ($node < $min) {\n                $min = $node;\n  \
    \              $min_index = $i;\n            }\n            $i++;\n        }\n\
    \    }\n    return [ $min, $min_index ];\n}", "    my $min;\n    my $index;\n\
    \    my $value;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n\
    \    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my\
    \ $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n\
    \    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my\
    \ $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my $M;\n\
    \    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n    my\
    \ $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n\
    \    my $_;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my\
    \ $f;\n    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n\
    \    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my\
    \ $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n\
    \    my $z;\n    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my\
    \ $F;\n    my $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my $L;\n\
    \    my $M;\n    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n    my\
    \ $S;\n    my $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my $Y;\n\
    \    my $Z;\n    my $_;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my\
    \ $e;\n    my $f;\n    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n",
  "    my @res;\n    my $min;\n    my $index;\n    my $value;\n    my $i;\n    my\
    \ $j;\n    my $k;\n    my $even;\n    my $even_index;\n    my $even_value;\n \
    \   my $temp;\n    my $count;\n    my $flag;\n    my $flag2;\n    my $flag3;\n\
    \    my $flag4;\n    my $flag5;\n    my $flag6;\n    my $flag7;\n    my $flag8;\n\
    \    my $flag9;\n    my $flag10;\n    my $flag11;\n    my $flag12;\n    my $flag13;\n\
    \    my $flag14;\n    my $flag15;\n    my $flag16;\n    my $flag17;\n    my $flag18;\n\
    \    my $flag19;\n    my $flag20;\n    my $flag21;\n    my $flag22;\n    my $flag23;\n\
    \    my $flag24;\n    my $flag25;\n    my $flag26;\n    my $flag27;\n    my $flag28;\n\
    \    my $flag29;\n    my $flag30;\n    my $flag31;\n    my $flag32;\n    my $flag33;\n\
    \    my $flag34;\n    my $flag35;\n    my $flag36;\n    my $flag37;\n    my $flag38;\n\
    \    my $flag39;\n    my $flag40;\n    my $flag41;\n    my $flag42;\n    my $flag43;\n\
    \    my $flag44;\n    my $flag45;\n    my $flag46;\n    my $flag47;\n    my $flag48;\n\
    \    my $flag49;\n    my $flag50;\n    my $flag51;\n    my $flag52;\n    my $flag53;\n\
    \    my $flag54;\n    my $flag55;\n    my $flag56;\n    my $flag57;\n    my $flag58;\n\
    \    my $flag59;\n    my $flag60;\n    my $flag61;\n    my $flag62;\n    my $flag63;\n\
    \    my $flag64;\n    my $flag65;\n    my $flag66;\n    my $flag67;\n    my $flag68;\n\
    \    my $flag69;\n    my $flag70;\n    my $flag71;\n    my $flag72;\n    my $flag73;\n\
    \    my $flag74;\n    my $flag75;\n    my $flag76;\n    my $flag77;\n    my $flag78;\n\
    \    my $flag79;\n    my $", "    my $min = $arr->[0];\n    my $index = 0;\n \
    \   my $smalest_value;\n    my $smalest_index;\n    for (my $i = 1; $i < @$arr;\
    \ $i++) {\n        if ($arr->[$i] % 2 == 0) {\n            if ($smalest_value\
    \ eq \"\") {\n                $smalest_value = $arr->[$i];\n                $smalest_index\
    \ = $i;\n            }\n            elsif ($smalest_value < $arr->[$i]) {\n  \
    \              $smalest_value = $arr->[$i];\n                $smalest_index =\
    \ $i;\n            }\n        }\n    }\n    if ($smalest_value eq \"\") {\n  \
    \      return [];\n    }\n    return [ $smalest_value, $smalest_index ];\n}",
  "    my @res;\n    my $min;\n    my $index;\n    my $value;\n    my $i;\n    my\
    \ $j;\n    my $k;\n    my $even;\n    my $index;\n    my $value;\n    my $even;\n\
    \    my $index;\n    my $value;\n    my $even;\n    my $index;\n    my $value;\n\
    \    my $even;\n    my $index;\n    my $value;\n    my $even;\n    my $index;\n\
    \    my $value;\n    my $even;\n    my $index;\n    my $value;\n    my $even;\n\
    \    my $index;\n    my $value;\n    my $even;\n    my $index;\n    my $value;\n\
    \    my $even;\n    my $index;\n    my $value;\n    my $even;\n    my $index;\n\
    \    my $value;\n    my $even;\n    my $index;\n    my $value;\n    my $even;\n\
    \    my $index;\n    my $value;\n    my $even;\n    my $index;\n    my $value;\n\
    \    my $even;\n    my $index;\n    my $value;\n    my $even;\n    my $index;\n\
    \    my $value;\n    my $even;\n    my $index;\n    my $value;\n    my $even;\n\
    \    my $index;\n    my $value;\n    my $even;\n    my $index;\n    my $value;\n\
    \    my $even;\n    my $index;\n    my $value;\n    my $even;\n    my $index;\n\
    \    my $value;\n    my $even;\n    my $index;\n    my $value;\n    my $even;\n\
    \    my $index;\n    my $value;\n    my $even;\n    my $index;\n    my $value;\n\
    \    my $even;\n    my $index;\n    my $value;\n    my $even;\n    my $index;\n\
    \    my $value;\n    my $even;\n    my $index;\n    my $value;\n    my $even;\n\
    \    my $index;\n    my $value;\n    my $even;\n    my $index;\n    my $value;\n\
    \    my $even;\n    my $index;\n    my $value;\n    my $even;\n    my $index;\n\
    \    my $value;\n    my $even;\n    my $index;\n    my $value;\n    my $even;\n\
    \    my $index;\n    my $value;\n    my $even;\n    my $index;\n    my $value;\n\
    \    my $even;\n    my $index;\n    my $value;\n    my $even;\n    my $index;\n\
    \    my $value;\n    my $even;\n    my $index;\n    my $value;\n    my $even;\n\
    \    my $index;\n    my $value;\n    ", "    my $min = $arr->[0];\n    my $min_index\
    \ = 0;\n    my $i;\n    for($i = 1; $i < @$arr; $i++) {\n        if($arr->[$i]\
    \ % 2 == 0) {\n            $min = $arr->[$i];\n            $min_index = $i;\n\
    \        }\n    }\n    return $min_index;\n}", "    my $min_value = $arr->[0];\n\
    \    my $min_index = 0;\n    my $smalest_value;\n    my $smalest_index;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n\
    \    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $even_value\
    \ = $node;\n            $even_index = $i;\n        }\n        $i++;\n    }\n \
    \   if ($even_value == 0) {\n        return [];\n    }\n    foreach my $node (@$arr)\
    \ {\n        if ($node % 2 == 0) {\n            if ($node < $min_value) {\n  \
    \              $min_value = $node;\n                $min_index = $even_index;\n\
    \            }\n        }\n    }\n    return [$min_value, $min_index];\n}", " \
    \   my $min = $arr->[0];\n    my $index = 0;\n    my $found = 0;\n    foreach\
    \ my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $found = 1;\n\
    \            if ($node < $min) {\n                $min = $node;\n            \
    \    $index = $found;\n            }\n        }\n    }\n    return $found ? [\
    \ $min, $index ] : [];\n}", "    my $result;\n    my $smallest_value;\n    my\
    \ $smallest_index;\n    my $i;\n    my $j;\n    my $k;\n    my $value;\n    my\
    \ $index;\n    my $found;\n    my $min_value;\n    my $min_index;\n    my $found;\n\
    \    my $min_value;\n    my $min_index;\n    my $i;\n    my $j;\n    my $k;\n\
    \    my $value;\n    my $index;\n    my $found;\n    my $min_value;\n    my $min_index;\n\
    \    my $found;\n    my $min_value;\n    my $min_index;\n    my $i;\n    my $j;\n\
    \    my $k;\n    my $value;\n    my $index;\n    my $found;\n    my $min_value;\n\
    \    my $min_index;\n    my $found;\n    my $min_value;\n    my $min_index;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $value;\n    my $index;\n    my $found;\n\
    \    my $min_value;\n    my $min_index;\n    my $found;\n    my $min_value;\n\
    \    my $min_index;\n    my $i;\n    my $j;\n    my $k;\n    my $value;\n    my\
    \ $index;\n    my $found;\n    my $min_value;\n    my $min_index;\n    my $found;\n\
    \    my $min_value;\n    my $min_index;\n    my $i;\n    my $j;\n    my $k;\n\
    \    my $value;\n    my $index;\n    my $found;\n    my $min_value;\n    my $min_index;\n\
    \    my $found;\n    my $min_value;\n    my $min_index;\n    my $i;\n    my $j;\n\
    \    my $k;\n    my $value;\n    my $index;\n    my $found;\n    my $min_value;\n\
    \    my $min_index;\n    my $found;\n    my $min_value;\n    my $min_index;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $value;\n    my $index;\n    my $found;\n\
    \    my $min_value;\n    my $min_index;\n    my $found;\n    my $min_value;\n\
    \    my $min_index;\n    my $i;\n    my $j;\n    my $k;\n    my $value;\n    my\
    \ $index;\n    my $found;\n    my $min_value;\n    my $min_index;\n    my $found;\n\
    \    my $min_value;\n    my $min_index;\n    my $i;\n    my $j;\n    my $k;\n\
    \    my $value;\n    my $index;\n    my $found;\n    my $min_value;\n    my $min_index;\n\
    \    ", "    my $min = -1;\n    my $min_index;\n    my $smalest_value;\n    foreach\
    \ my $node (@$arr) {\n        if ($node % 2 == 0) {\n            if ($min == -1\
    \ || $node < $smalest_value) {\n                $min = $node;\n              \
    \  $min_index = $node / 2;\n                $smalest_value = $node;\n        \
    \    }\n        }\n    }\n    if ($min == -1) {\n        return [];\n    }\n \
    \   return [ $smalest_value, $min_index ];\n}", "    my $min = $arr->[0];\n  \
    \  my $index = 0;\n    my $i = 0;\n    my $even;\n    foreach my $node (@$arr)\
    \ {\n        if ($node % 2 == 0) {\n            $even = $node;\n        }\n  \
    \      if ($node < $min) {\n            $min = $node;\n            $index = $i;\n\
    \        }\n        $i++;\n    }\n    return $min, $index;\n}", "    my $min_value\
    \ = $arr->[0];\n    my $min_index = 0;\n    my $index = 0;\n    foreach my $val\
    \ (@$arr) {\n        if ($val & 1) {\n            if ($val < $min_value) {\n \
    \               $min_value = $val;\n                $min_index = $index;\n   \
    \         }\n        }\n        $index++;\n    }\n    return [ $min_value, $min_index\
    \ ];\n}", "    my $min_value = $arr->[0];\n    my $min_idx = 0;\n    my $i = 0;\n\
    \    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n            if ($val\
    \ < $min_value) {\n                $min_value = $val;\n                $min_idx\
    \ = $i;\n            }\n            $i++;\n        }\n    }\n    return [$min_value,\
    \ $min_idx];\n}", "    my $min = $arr->[0];\n    my $index = 0;\n    my $i = 0;\n\
    \    my $even;\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n\
    \            $even = $val;\n        }\n        elsif ($val < $min) {\n       \
    \     $min = $val;\n            $index = $i;\n        }\n        $i++;\n    }\n\
    \    return $min, $index;\n}", "    my $min = $arr->[0];\n    my $index = 0;\n\
    \    my $smalest_value;\n    foreach my $val (@$arr) {\n        if ($val % 2 ==\
    \ 0) {\n            $smalest_value = $val;\n            $index = $arr->[$index];\n\
    \        }\n    }\n    return [ $smalest_value, $index ];\n}", "    my $min =\
    \ $arr->[0];\n    my $index = 0;\n    my $found = 0;\n    foreach my $val (@$arr)\
    \ {\n        if ($val % 2 == 0) {\n            $found = 1;\n            if ($val\
    \ < $min) {\n                $min = $val;\n                $index = $found;\n\
    \            }\n        }\n    }\n    return $found ? [$min, $index] : [];\n}",
  "    my $min = $arr->[0];\n    my $index = 0;\n    my $i = 0;\n    my $even = 0;\n\
    \    my $smalest_value;\n    foreach my $node (@$arr) {\n        if ($node % 2\
    \ == 0) {\n            $even = 1;\n        }\n        if ($even != 1) {\n    \
    \        $smalest_value = $node;\n            $index = $i;\n        }\n      \
    \  $i++;\n    }\n    if ($smalest_value == 0) {\n        return [];\n    }\n \
    \   return [ $smalest_value, $index ];\n}", "    my $min = $arr->[0];\n    my\
    \ $index = 0;\n    my $smalest_value;\n    foreach my $val (@$arr) {\n       \
    \ if ($val % 2 == 0) {\n            $smalest_value = $val;\n            $index\
    \ = $arr->index($val);\n        }\n    }\n    return $smalest_value if $smalest_value;\n\
    \    return [] if $arr->[0] == 0;\n    return $arr->[$index] if $arr->[$index]\
    \ % 2 == 0;\n    return $arr->[$index] if $arr->[$index] > $arr->[$index + 1];\n\
    \    return $arr->[$index] if $arr->[$index] > $arr->[$index - 1];\n    return\
    \ $arr->[$index] if $arr->[$index] > $arr->[$index - 2];\n    return $arr->[$index]\
    \ if $arr->[$index] > $arr->[$index - 3];\n    return $arr->[$index] if $arr->[$index]\
    \ > $arr->[$index - 4];\n    return $arr->[$index] if $arr->[$index] > $arr->[$index\
    \ - 5];\n    return $arr->[$index] if $arr->[$index] > $arr->[$index - 6];\n \
    \   return $arr->[$index] if $arr->[$index] > $arr->[$index - 7];\n    return\
    \ $arr->[$index] if $arr->[$index] > $arr->[$index - 8];\n    return $arr->[$index]\
    \ if $arr->[$index] > $arr->[$index - 9];\n    return $arr->[$index] if $arr->[$index]\
    \ > $arr->[$index - 10];\n    return $arr->[$index] if $arr->[$index] > $arr->[$index\
    \ - 11];\n    return $arr->[$index] if $arr->[$index] > $arr->[$index - 12];\n\
    \    return $arr->[$index] if $arr->[$index] > $arr->[$index - 13];\n    return\
    \ $arr->[$index] if $arr->[$index] > $arr->[$index - 14];\n    return $arr->[$index]\
    \ if $arr->[$index] > $arr->[$index - 15];\n    return $arr->[$index] if $arr->[$index]\
    \ > $arr->[$index - 16];\n    return $arr->[$index] if $arr->[$index] > $arr->[$index\
    \ - 17];\n    return $arr->[$index] if $arr->[$index] > $arr->[$index - 18];",
  "    my $min;\n    my $index;\n    my $value;\n    my $count = 0;\n    foreach my\
    \ $node (@$arr) {\n        if ($node % 2 == 0) {\n            $count++;\n    \
    \        if ($min == 0) {\n                $min = $node;\n                $index\
    \ = $count;\n            }\n            elsif ($node < $min) {\n             \
    \   $min = $node;\n                $index = $count;\n            }\n        }\n\
    \    }\n    return $min if $min != 0;\n    return [];\n}", "    my $min = $arr->[0];\n\
    \    my $index = 0;\n    my $min_index = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $even = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my $even_value_index\
    \ = 0;\n    my $even_value_index2 = 0;\n    my $even_value_index3 = 0;\n    my\
    \ $even_value_index4 = 0;\n    my $even_value_index5 = 0;\n    my $even_value_index6\
    \ = 0;\n    my $even_value_index7 = 0;\n    my $even_value_index8 = 0;\n    my\
    \ $even_value_index9 = 0;\n    my $even_value_index10 = 0;\n    my $even_value_index11\
    \ = 0;\n    my $even_value_index12 = 0;\n    my $even_value_index13 = 0;\n   \
    \ my $even_value_index14 = 0;\n    my $even_value_index15 = 0;\n    my $even_value_index16\
    \ = 0;\n    my $even_value_index17 = 0;\n    my $even_value_index18 = 0;\n   \
    \ my $even_value_index19 = 0;\n    my $even_value_index20 = 0;\n    my $even_value_index21\
    \ = 0;\n    my $even_value_index22 = 0;\n    my $even_value_index23 = 0;\n   \
    \ my $even_value_index24 = 0;\n    my $even_value_index25 = 0;\n    my $even_value_index26\
    \ = 0;\n    my $even_value_index27 = 0;\n    my $even_value_index28 = 0;\n   \
    \ my $even_value_index29 = 0;\n    my $even_value_index30 = 0;\n    my $even_value_index31\
    \ = 0;\n    my $even_value_index32 = 0;\n    my $even_value_index33 = 0;\n   \
    \ my $even_value_index34 = 0;\n    my $even_value_index35 = 0;\n    my $even_value_index36\
    \ = 0;\n    my $even_value_index37 = 0;\n    my $even_value_index38 = 0;\n   \
    \ my $even_value_index39 = 0;\n    my $even_value_index40 = 0;\n    my $even_value_index41\
    \ = 0;\n    my $even_value_index42 = 0;\n    my $even_value_index43 = 0;\n   \
    \ my $even_value_index44 = 0;\n    my $even_value_index45 = 0;\n    my $even_value_index46\
    \ = 0;\n    my $even_value_index47 = 0;\n    my $even_value_index48 = 0;\n   \
    \ my $even_value_index49 = 0;\n    my $even_value_index50 = 0;\n    my $even_value_index51\
    \ = 0;\n    my $even_value_index52 = 0;\n    my $even_value_index53 = 0;\n   \
    \ my $even_value_index54 = 0;\n    my $even_value_index55 = 0;\n    my $even_value_index56\
    \ = 0;\n    my $even_value_index57 = 0;\n    my $even_value_index58 = 0;\n   \
    \ my $even_value_index59 = 0;\n", "    my @res;\n    my $min;\n    my $index;\n\
    \    my $value;\n    my $i;\n    my $j;\n    my $k;\n    my $found;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $even;\n    my $even_index;\n \
    \   my $index;\n    my $value;\n    my $even_value;\n    my $even_index;\n   \
    \ my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index;\n    my $even_value;\n    my $even",
  "    my $min = $arr[0];\n    my $index = 0;\n    foreach my $val (@$arr) {\n   \
    \     if ($val % 2 == 0) {\n            if ($val < $min) {\n                $min\
    \ = $val;\n                $index = $arr->index($val);\n            }\n      \
    \  }\n    }\n    return [ $min, $index ];\n}", "    my $min = $arr->[0];\n   \
    \ my $index = 0;\n    my $even = 0;\n    foreach my $i (@$arr) {\n        if ($i\
    \ & 1) {\n            $even++;\n        }\n        if ($i == $min) {\n       \
    \     $index = $i;\n        }\n        if ($even < $i) {\n            $min = $i;\n\
    \            $index = $i;\n        }\n    }\n    return $min, $index;\n}", " \
    \   my $min;\n    my $index;\n    my $smalest_value;\n    my $i;\n    my $j;\n\
    \    my $k;\n    my $result;", "    my $min;\n    my $index;\n    my $value;\n\
    \    my $even;\n    my $index;\n    foreach my $node (@$arr) {\n        if ($node\
    \ % 2 == 0) {\n            $even = $node;\n        }\n        if ($node < $min)\
    \ {\n            $min = $node;\n            $index = $node;\n        }\n     \
    \   if ($node == $min) {\n            $index = $node;\n        }\n    }\n    if\
    \ ($min == 0) {\n        return [];\n    }\n    return [ $min, $index ];\n}",
  "    my $min = -1;\n    my $min_index;\n    my $smalest_value;\n    my $index;\n\
    \    foreach my $node (@$arr) {\n        if ($min == -1 || $min > $node->{value})\
    \ {\n            $min = $node->{value};\n            $min_index = $node->{index};\n\
    \            $smalest_value = $node->{value};\n        }\n        elsif ($min\
    \ == $node->{value}) {\n            $min_index = $node->{index};\n        }\n\
    \    }\n    return $smalest_value if $min != -1;\n    return [];\n}", "    my\
    \ $min = $arr->[0];\n    my $index = 0;\n    my $even;\n    my $smalest_value;\n\
    \    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $even\
    \ = $node;\n        }\n        elsif ($node < $min) {\n            $min = $node;\n\
    \            $index = $even;\n        }\n    }\n    return $smalest_value, $index;\n\
    }", "    my $min;\n    my $index;\n    my $value;\n    my $count = 0;\n    my\
    \ $even;\n    foreach my $node (@$arr) {\n        $count++;\n        $value =\
    \ $node->value;\n        $even = $value % 2;\n        if ($count > 1) {\n    \
    \        if ($min eq \"\") {\n                $min = $value;\n               \
    \ $index = $count;\n            }\n            elsif ($min > $value) {\n     \
    \           $min = $value;\n                $index = $count;\n            }\n\
    \        }\n    }\n    return $min;\n}", "    my $min = $arr[0];\n    my $index\
    \ = 0;\n    my $found = 0;\n    foreach my $n (@$arr) {\n        if ($n % 2 ==\
    \ 0) {\n            if ($min > $n) {\n                $min = $n;\n           \
    \     $index = $found;\n            }\n            $found++;\n        }\n    }\n\
    \    return $min if $found > 0;\n    return [];\n}", "    my $min;\n    my $index;\n\
    \    my $value;\n    my $i = 0;\n    my $j = 0;\n    my $even;\n    my $even_index;\n\
    \    my $even_value;\n    my $even_index = 0;\n    my $even_value = 0;\n    my\
    \ $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value\
    \ = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index =\
    \ 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n\
    \    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n \
    \   my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n  \
    \  my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n   \
    \ my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my\
    \ $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value\
    \ = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index =\
    \ 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n\
    \    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n \
    \   my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n  \
    \  my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n   \
    \ my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my\
    \ $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value\
    \ = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index =\
    \ 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n\
    \    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n \
    \   my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n  \
    \  my $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n   \
    \ my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my\
    \ $even_index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value\
    \ = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n    my $even_index =\
    \ 0;\n    my $even_value = 0;\n    my $even_index = 0;\n    my $even_value = 0;\n\
    \    my $even_index = 0;", "    my $min = $arr->[0];\n    my $index = 0;\n   \
    \ for (my $i = 1; $i < @$arr; $i++) {\n        if ($arr->[$i] % 2 == 0) {\n  \
    \          if ($min > $arr->[$i]) {\n                $min = $arr->[$i];\n    \
    \            $index = $i;\n            }\n        }\n    }\n    return [ $min,\
    \ $index ];\n}", "    my $min = $arr->[0];\n    my $index = 0;\n    my $found\
    \ = 0;\n    foreach my $n (@$arr) {\n        if ($n =~ /^0$/) {\n            $found\
    \ = 1;\n            $index = 0;\n        }\n        elsif ($n % 2 != 0) {\n  \
    \          $found = 0;\n        }\n        elsif ($found == 1) {\n           \
    \ $min = $n;\n            $index = $i;\n        }\n        $i++;\n    }\n    return\
    \ ($min, $index);\n}", "    my $result;\n    my $min;\n    my $index;\n    my\
    \ $value;\n    my $i;\n    my $j;\n    my $k;\n    my $smallest_value;\n    my\
    \ $smallest_index;\n    my $even_value;\n    my $even_index;\n    my $even_value_count;\n\
    \    my $even_index_count;\n    my $even_value_count_temp;\n    my $even_index_count_temp;\n\
    \    my $even_value_count_temp2;\n    my $even_index_count_temp2;\n    my $even_value_count_temp3;\n\
    \    my $even_index_count_temp3;\n    my $even_value_count_temp4;\n    my $even_index_count_temp4;\n\
    \    my $even_value_count_temp5;\n    my $even_index_count_temp5;\n    my $even_value_count_temp6;\n\
    \    my $even_index_count_temp6;\n    my $even_value_count_temp7;\n    my $even_index_count_temp7;\n\
    \    my $even_value_count_temp8;\n    my $even_index_count_temp8;\n    my $even_value_count_temp9;\n\
    \    my $even_index_count_temp9;\n    my $even_value_count_temp10;\n    my $even_index_count_temp10;\n\
    \    my $even_value_count_temp11;\n    my $even_index_count_temp11;\n    my $even_value_count_temp12;\n\
    \    my $even_index_count_temp12;\n    my $even_value_count_temp13;\n    my $even_index_count_temp13;\n\
    \    my $even_value_count_temp14;\n    my $even_index_count_temp14;\n    my $even_value_count_temp15;\n\
    \    my $even_index_count_temp15;\n    my $even_value_count_temp16;\n    my $even_index_count_temp16;\n\
    \    my $even_value_count_temp17;\n    my $even_index_count_temp17;\n    my $even_value_count_temp18;\n\
    \    my $even_index_count_temp18;\n    my $even_value_count_temp19;\n    my $even_index_count_temp19;\n\
    \    my $even_value_count_temp20;\n    my $even_index_count_temp20;\n    my $even_value_count_temp21;\n\
    \    my $even_index_count_temp21;\n    my $even_value_count_temp22;\n    my $even_index_count_temp22;\n\
    \    my $even_value_count_temp23;\n    my $even_index_count_temp23;\n    my $even_value_count_temp24;\n\
    \    my $even_index_count_temp24;\n    my $even_value_count_temp25;\n    my $even_index_count_temp25;\n\
    \    my $even_value_count_temp26;\n    my $even_index_count_temp26;\n    my $even_value_count_temp27;\n\
    \    my $", "    my $min = $arr[0];\n    my $index = 0;\n    my $even = 0;\n \
    \   foreach my $n (@$arr) {\n        if ($n % 2 == 0) {\n            $even = 1;\n\
    \        }\n        if ($even < $n) {\n            $min = $n;\n            $index\
    \ = $i;\n        }\n        $i++;\n    }\n    return [ $min, $index ];\n}", " \
    \   my $min_value = $arr->[0];\n    my $min_index = 0;\n    my $i = 0;\n    foreach\
    \ my $val (@$arr) {\n        if ($val % 2 == 0) {\n            if ($val < $min_value)\
    \ {\n                $min_value = $val;\n                $min_index = $i;\n  \
    \          }\n            $i++;\n        }\n    }\n    return [ $min_value, $min_index\
    \ ];\n}", "    my $min = -1;\n    my $min_index = 0;\n    my $smalest_value;\n\
    \    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n            if\
    \ ($min == -1 || $node < $smalest_value) {\n                $min = $node;\n  \
    \              $min_index = $node / 2;\n                $smalest_value = $node;\n\
    \            }\n        }\n    }\n    if ($min == -1) {\n        return [];\n\
    \    }\n    return [ $smalest_value, $min_index ];\n}", "    my $min_value = $arr->[0];\n\
    \    my $min_index = 0;\n    my $index = 0;\n    my $even_value = 0;\n    foreach\
    \ my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $even_value =\
    \ $node;\n        }\n        if ($node < $min_value) {\n            $min_value\
    \ = $node;\n            $min_index = $index;\n        }\n        $index++;\n \
    \   }\n    return $min_value if $min_value == $even_value;\n    return $min_value\
    \ if $min_index == 0;\n    return $min_value, $min_index;\n}", "    my $min =\
    \ $arr->[0];\n    my $index = 0;\n    my $smalest_value;\n    foreach my $val\
    \ (@$arr) {\n        if ($val % 2 == 0) {\n            if ($smalest_value eq \"\
    \") {\n                $smalest_value = $val;\n                $index = $index;\n\
    \            }\n            elsif ($smalest_value ne $val) {\n               \
    \ $smalest_value = $val;\n                $index = $index;\n            }\n  \
    \      }\n    }\n    if ($smalest_value ne \"\") {\n        return [ $smalest_value,\
    \ $index ];\n    }\n    return [];\n}", "    my @res;\n    my $min = $arr[0];\n\
    \    my $index = 0;\n    my $i = 0;\n    my $even = 0;\n    foreach my $n (@$arr)\
    \ {\n        if ($n % 2 == 0) {\n            $even = 1;\n        }\n        if\
    \ ($even != 1) {\n            $min = $n;\n            $index = $i;\n        }\n\
    \        $i++;\n    }\n    if ($index == 0) {\n        return [];\n    }\n   \
    \ push(@res, [\"$min\", $index]);\n    return @res;\n}", "    my $min;\n    my\
    \ $index;\n    my $smalest_value;\n    foreach my $node (@$arr) {\n        if\
    \ ($node % 2 == 0) {\n            $smalest_value = $node;\n            $index\
    \ = $_;\n        }\n    }\n    if ($smalest_value) {\n        return [ $smalest_value,\
    \ $index ];\n    }\n    return [];\n}", "    my $min = $arr->[0];\n    my $index\
    \ = 0;\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n        \
    \    if ($val < $min) {\n                $min = $val;\n                $index\
    \ = $arr->[$index];\n            }\n        }\n    }\n    return [ $min, $index\
    \ ];\n}", "    my $min_value = $arr->[0];\n    my $min_index = 0;\n    my $index\
    \ = 0;\n    my $even_value = 0;\n    foreach my $val (@$arr) {\n        if ($val\
    \ % 2 == 0) {\n            $even_value = $val;\n        }\n        if ($val <\
    \ $min_value) {\n            $min_value = $val;\n            $min_index = $index;\n\
    \        }\n        $index++;\n    }\n    return [ $min_value, $min_index ] if\
    \ $even_value;\n    return [ $min_value, $min_index ] if $min_value == 0;\n  \
    \  return [];\n}", "    my $min = $arr[0];\n    my $index = 0;\n    foreach my\
    \ $val (@$arr) {\n        if ($val & 1) {\n            $min = $val;\n        \
    \    $index = $index;\n        }\n    }\n    return [ $min, $index ];\n}", " \
    \   my $min;\n    my $index;\n    my $result;\n    my $i;\n    my $j;\n    my\
    \ $k;\n    my $smallest_value;\n    my $smallest_index;\n    my $even_value;\n\
    \    my $even_index;\n    my $even_values;\n    my $even_indexes;\n    my $even_values_count;\n\
    \    my $even_indexes_count;\n    my $even_values_sum;\n    my $even_indexes_sum;\n\
    \    my $even_values_count;\n    my $even_indexes_count;\n    my $even_values_sum;\n\
    \    my $even_indexes_sum;\n    my $even_values_count;\n    my $even_indexes_count;\n\
    \    my $even_values_sum;\n    my $even_indexes_sum;\n    my $even_values_count;\n\
    \    my $even_indexes_count;\n    my $even_values_sum;\n    my $even_indexes_sum;\n\
    \    my $even_values_count;\n    my $even_indexes_count;\n    my $even_values_sum;\n\
    \    my $even_indexes_sum;\n    my $even_values_count;\n    my $even_indexes_count;\n\
    \    my $even_values_sum;\n    my $even_indexes_sum;\n    my $even_values_count;\n\
    \    my $even_indexes_count;\n    my $even_values_sum;\n    my $even_indexes_sum;\n\
    \    my $even_values_count;\n    my $even_indexes_count;\n    my $even_values_sum;\n\
    \    my $even_indexes_sum;\n    my $even_values_count;\n    my $even_indexes_count;\n\
    \    my $even_values_sum;\n    my $even_indexes_sum;\n    my $even_values_count;\n\
    \    my $even_indexes_count;\n    my $even_values_sum;\n    my $even_indexes_sum;\n\
    \    my $even_values_count;\n    my $even_indexes_count;\n    my $even_values_sum;\n\
    \    my $even_indexes_sum;\n    my $even_values_count;\n    my $even_indexes_count;\n\
    \    my $even_values_sum;\n    my $even_indexes_sum;\n    my $even_values_count;\n\
    \    my $even_indexes_count;\n    my $even_values_sum;\n    my $even_indexes_sum;\n\
    \    my $even_values_count;\n    my $even_indexes_count;\n    my $even_values_sum;\n\
    \    my $even_indexes_sum;\n    my $even_values_count;\n    my $even_indexes_count;\n\
    \    my $even_values_sum;\n    my $even_indexes_sum;", "    my $min_value = $arr->[0];\n\
    \    my $min_index = 0;\n    my $index = 0;\n    my $even_value = 0;\n    my $even_index\
    \ = 0;\n    my $even_value_index = 0;\n    my $even_value_index2 = 0;\n    my\
    \ $even_value_index3 = 0;\n    my $even_value_index4 = 0;\n    my $even_value_index5\
    \ = 0;\n    my $even_value_index6 = 0;\n    my $even_value_index7 = 0;\n    my\
    \ $even_value_index8 = 0;\n    my $even_value_index9 = 0;\n    my $even_value_index10\
    \ = 0;\n    my $even_value_index11 = 0;\n    my $even_value_index12 = 0;\n   \
    \ my $even_value_index13 = 0;\n    my $even_value_index14 = 0;\n    my $even_value_index15\
    \ = 0;\n    my $even_value_index16 = 0;\n    my $even_value_index17 = 0;\n   \
    \ my $even_value_index18 = 0;\n    my $even_value_index19 = 0;\n    my $even_value_index20\
    \ = 0;\n    my $even_value_index21 = 0;\n    my $even_value_index22 = 0;\n   \
    \ my $even_value_index23 = 0;\n    my $even_value_index24 = 0;\n    my $even_value_index25\
    \ = 0;\n    my $even_value_index26 = 0;\n    my $even_value_index27 = 0;\n   \
    \ my $even_value_index28 = 0;\n    my $even_value_index29 = 0;\n    my $even_value_index30\
    \ = 0;\n    my $even_value_index31 = 0;\n    my $even_value_index32 = 0;\n   \
    \ my $even_value_index33 = 0;\n    my $even_value_index34 = 0;\n    my $even_value_index35\
    \ = 0;\n    my $even_value_index36 = 0;\n    my $even_value_index37 = 0;\n   \
    \ my $even_value_index38 = 0;\n    my $even_value_index39 = 0;\n    my $even_value_index40\
    \ = 0;\n    my $even_value_index41 = 0;\n    my $even_value_index42 = 0;\n   \
    \ my $even_value_index43 = 0;\n    my $even_value_index44 = 0;\n    my $even_value_index45\
    \ = 0;\n    my $even_value_index46 = 0;\n    my $even_value_index47 = 0;\n   \
    \ my $even_value_index48 = 0;\n    my $even_value_index49 = 0;\n    my $even_value_index50\
    \ = 0;\n    my $even_value_index51 = 0;\n    my $even_value_index52 = 0;\n   \
    \ my $even_value_index53 = 0;\n    my $even_value_index54 = 0;\n    my $even_value_index55\
    \ = 0;\n    my $even_value_index56 = 0;\n    my $even_value_index57 = 0;\n   \
    \ my $even_value_index58 = 0;\n    my $even_value_index59 = 0;\n    my $even_value_index60\
    \ = 0;\n    my $even_value_index", "    my $min_value = $arr->[0];\n    my $min_idx\
    \ = 0;\n    my $max_idx = 0;\n    my $max_value = 0;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $k = 0;\n    my $k2 = 0;\n    my $k3 = 0;\n    my $k4 = 0;\n  \
    \  my $k5 = 0;\n    my $k6 = 0;\n    my $k7 = 0;\n    my $k8 = 0;\n    my $k9\
    \ = 0;\n    my $k10 = 0;\n    my $k11 = 0;\n    my $k12 = 0;\n    my $k13 = 0;\n\
    \    my $k14 = 0;\n    my $k15 = 0;\n    my $k16 = 0;\n    my $k17 = 0;\n    my\
    \ $k18 = 0;\n    my $k19 = 0;\n    my $k20 = 0;\n    my $k21 = 0;\n    my $k22\
    \ = 0;\n    my $k23 = 0;\n    my $k24 = 0;\n    my $k25 = 0;\n    my $k26 = 0;\n\
    \    my $k27 = 0;\n    my $k28 = 0;\n    my $k29 = 0;\n    my $k30 = 0;\n    my\
    \ $k31 = 0;\n    my $k32 = 0;\n    my $k33 = 0;\n    my $k34 = 0;\n    my $k35\
    \ = 0;\n    my $k36 = 0;\n    my $k37 = 0;\n    my $k38 = 0;\n    my $k39 = 0;\n\
    \    my $k40 = 0;\n    my $k41 = 0;\n    my $k42 = 0;\n    my $k43 = 0;\n    my\
    \ $k44 = 0;\n    my $k45 = 0;\n    my $k46 = 0;\n    my $k47 = 0;\n    my $k48\
    \ = 0;\n    my $k49 = 0;\n    my $k50 = 0;\n    my $k51 = 0;\n    my $k52 = 0;\n\
    \    my $k53 = 0;\n    my $k54 = 0;\n    my $k55 = 0;\n    my $k56 = 0;\n    my\
    \ $k57 = 0;\n    my $k58 = 0;\n    my $k59 = 0;\n    my $k60 = 0;\n    my $k61\
    \ = 0;\n    my $k62 = 0;\n    my $k63 = 0;\n    my $k64 = 0;\n    my $k65 = 0;\n\
    \    my $k66 = 0;\n    my $k67 = 0;\n    my $k68 = 0;\n    my $k69 = 0;\n    my\
    \ $k70 = 0;\n    my $k71 = 0;\n    my $k72 = 0;\n    my $k73 = 0;\n    my $k74\
    \ = 0;\n    my $k75 = 0;\n    my $k76 = 0;\n    my $k77 = 0;\n    my $k78 = 0;\n\
    \    my $k79 = 0;\n    my $k80 = 0;\n    my $", "    my @res;\n    my $min;\n\
    \    my $index;\n    my $value;\n    my $i;\n    my $j;\n    my $k;\n    my $count;\n\
    \    my $even;\n    my $index;\n    my $value;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n\
    \    my $min_index;\n    my $min_value;\n    my $min_even;\n    my $min_index;\n\
    \    my $min_value;\n    my $min_even;\n    my $min_index;\n    my $min_value;\n\
    \    my $min_even;\n", "    my $min = $arr->[0];\n    my $min_index = 0;\n   \
    \ my $i = 0;\n    foreach my $val (@$arr) {\n        if ($val % 2 == 0) {\n  \
    \          $i++;\n            if ($val < $min) {\n                $min = $val;\n\
    \                $min_index = $i;\n            }\n        }\n    }\n    return\
    \ [ $min, $min_index ];\n}", "    my $min;\n    my $index;\n    my $value;\n \
    \   my $even;\n    my $index;\n    my $i;\n    my $j;\n    my $k;\n    my $even;\n\
    \    my $index;\n    my $min_index;\n    my $min_value;\n    my $min_even;\n \
    \   my $min_even_index;\n    my $min_even_value;\n    my $even_index;\n    my\
    \ $even_value;\n    my $even_value_index;\n    my $even_value;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;\n    my $even_value_index;\n    my $even_value_index;\n\
    \    my $even_value_index;", "    my $min_value = $arr[0];\n    my $min_index\
    \ = 0;\n    my $index = 0;\n    my $even_value = 0;\n    my $even_index = 0;\n\
    \    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $even_value\
    \ = $node;\n            $even_index = $index;\n        }\n        $index++;\n\
    \        if ($node < $min_value) {\n            $min_value = $node;\n        \
    \    $min_index = $index;\n        }\n    }\n    if ($even_value == 0) {\n   \
    \     return [];\n    }\n    if ($even_value == $min_value) {\n        return\
    \ [$even_value, $even_index];\n    }\n    if ($even_value < $min_value) {\n  \
    \      return [$min_value, $min_index];\n    }\n}", "    my $min = $arr->[0];\n\
    \    my $min_index = 0;\n    my $index = 0;\n    my $even = 0;\n    foreach my\
    \ $val (@$arr) {\n        if ($val % 2 == 0) {\n            $even++;\n       \
    \ }\n        if ($val < $min) {\n            $min = $val;\n            $min_index\
    \ = $index;\n        }\n        $index++;\n    }\n    if ($even > 0) {\n     \
    \   return [ $min, $min_index ];\n    }\n    return [];\n}", "    my $min = $arr->[0];\n\
    \    my $index = 0;\n    my $smalest_value;\n    foreach my $node (@$arr) {\n\
    \        if ($node % 2 == 0) {\n            if ($node < $min) {\n            \
    \    $min = $node;\n                $index = $arr->[$index];\n            }\n\
    \        }\n    }\n    if ($min == 0) {\n        return [];\n    }\n    my $smalest_value\
    \ = $min;\n    my $smalest_index = 0;\n    foreach my $node (@$arr) {\n      \
    \  if ($node == $min) {\n            $smalest_value = $node;\n            $smalest_index\
    \ = $index;\n        }\n    }\n    return [ $smalest_value, $smalest_index ];\n\
    }", "    my $min = $arr[0];\n    my $index = 0;\n    my $found = 0;\n    foreach\
    \ my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $found = 1;\n\
    \            $min = $node;\n            $index = $_;\n        }\n    }\n    return\
    \ $found ? [ $min, $index ] : [];\n}", "    my $min = $arr->[0];\n    my $index\
    \ = 0;\n    my $smalest_value;\n    foreach my $node (@$arr) {\n        if ($node\
    \ % 2 == 0) {\n            if ($node < $min) {\n                $min = $node;\n\
    \                $index = $arr->[$index];\n            }\n        }\n    }\n \
    \   return $min unless $min == 0;\n    return [ $min, $index ];\n}", "    my $min_value\
    \ = $arr->[0];\n    my $min_idx = 0;\n    my $smalest_value;\n    my $smalest_idx;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $even_values = 0;\n    my $even_values_idx;\n\
    \    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n            $even_values++;\n\
    \            $even_values_idx++;\n        }\n        if ($node < $min_value) {\n\
    \            $smalest_value = $node;\n            $smalest_idx = $i;\n       \
    \     $min_value = $node;\n            $min_idx = $i;\n        }\n        $i++;\n\
    \    }\n    if ($even_values == 0) {\n        return [];\n    }\n    my $smalest_value_idx\
    \ = $even_values_idx;\n    foreach my $node (@$arr) {\n        if ($node == $smalest_value)\
    \ {\n            $smalest_value_idx++;\n        }\n    }\n    my $smalest_value_idx\
    \ = $smalest_value_idx - 1;\n    my $smalest_value = $arr->[$smalest_value_idx];\n\
    \    my $smalest_idx = $smalest_value_idx - 1;\n    my $smalest_idx_value = $arr->[$smalest_idx];\n\
    \    if ($smalest_idx_value % 2 == 0) {\n        return [ $smalest_value, $smalest_idx\
    \ ];\n    }\n    return [];\n}", "    my $min = $arr->[0];\n    my $index = 0;\n\
    \    my $smalest_value;\n    my $smalest_index;\n    foreach my $node (@$arr)\
    \ {\n        if ($node % 2 == 0) {\n            if ($smalest_value eq \"\" ||\
    \ $node < $smalest_value) {\n                $smalest_value = $node;\n       \
    \         $smalest_index = $index;\n            }\n        }\n        $index++;\n\
    \    }\n    if ($smalest_value eq \"\") {\n        return [];\n    }\n    return\
    \ [ $smalest_value, $smalest_index ];\n}", "    my $len = @$arr;\n    my $min\
    \ = $arr->[0];\n    my $min_index = 0;\n    my $smalest_value;\n    my @result;\n\
    \    for(my $i = 1; $i < $len; $i++) {\n        my $val = $arr->[$i];\n      \
    \  if($val % 2 == 0) {\n            $smalest_value = $val;\n            $min_index\
    \ = $i;\n        }\n        elsif($val < $min) {\n            $min = $val;\n \
    \           $min_index = $i;\n        }\n    }\n    if($smalest_value eq $min)\
    \ {\n        push(@result, $smalest_value, $min_index);\n    }\n    return @result;\n\
    }", "    my @result;\n    my $min;\n    my $index;\n    my $value;\n    my $i\
    \ = 0;\n    foreach my $node (@$arr) {\n        if ($node % 2 == 0) {\n      \
    \      $value = $node;\n            $index = $i;\n        }\n        $i++;\n \
    \   }\n    if ($value) {\n        $min = $value;\n        $index = $i;\n    }\n\
    \    elsif ($i == 0) {\n        return [];\n    }\n    else {\n        foreach\
    \ my $node (@$arr) {\n            if ($node % 2 == 0) {\n                $value\
    \ = $node;\n                $index = $i;\n            }\n            $i++;\n \
    \       }\n    }\n    if ($min == $value) {\n        push(@result, $min, $index);\n\
    \    }\n    else {\n        push(@result, $value, $index);\n    }\n    return\
    \ @result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
