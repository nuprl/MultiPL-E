language: pl
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n       \
    \ if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmptlit2gcb.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 0
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = 0;\n    my($mad) = 0;\n    foreach $number (@$numbers)\
    \ {\n        $mean += $number;\n    }\n    $mean /= @$numbers;\n    foreach $number\
    \ (@$numbers) {\n        $mad += abs($number - $mean);\n    }\n    $mad /= @$numbers;\n\
    \    return $mad;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean = $numbers[0];\n    my $sum = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return $sum\
    \ / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp6bgpxqul.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 0
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $sum = 0;\n    foreach my $number (@$numbers) {\n\
    \        $sum += $number;\n    }\n    $mean = $sum / @$numbers;\n    foreach my\
    \ $number (@$numbers) {\n        $number -= $mean;\n    }\n    my $mad = 0;\n\
    \    foreach my $number (@$numbers) {\n        $mad += abs($number);\n    }\n\
    \    return $mad / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean = $numbers[0];\n    my $mad = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $mad += abs($number - $mean);\n    }\n    return $mad\
    \ / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean = $numbers[0];\n    my $sum = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return $sum\
    \ / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp61ucq6of.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_e997_dn.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 0
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $sum = 0;\n    my $n = @$numbers;\n    foreach\
    \ my $number (@$numbers) {\n        $sum += $number;\n    }\n    $mean = $sum\
    \ / $n;\n    foreach my $number (@$numbers) {\n        $number -= $mean;\n   \
    \ }\n    my $mad = 0;\n    foreach my $number (@$numbers) {\n        $mad += abs($number);\n\
    \    }\n    return $mad / $n;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n       \
    \ if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmptlit2gcb.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = 0;\n    my(@deviations) = ();\n    foreach $number (@$numbers)\
    \ {\n        $mean += $number;\n    }\n    $mean /= scalar(@$numbers);\n    foreach\
    \ $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n  \
    \  }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpmu07fa33.pl line 17.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean = mean($numbers);\n    my $mad = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $mad += abs($number - $mean);\n    }\n    return $mad\
    \ / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp46w7x5f7.pl line 8.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : undef;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmperuc4d6w.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $mad;\n    my $i;\n    my $j;\n    my $sum;\n \
    \   my $sum2;\n    my $sum3;\n    my $sum4;\n    my $sum5;\n    my $sum6;\n  \
    \  my $sum7;\n    my $sum8;\n    my $sum9;\n    my $sum10;\n    my $sum11;\n \
    \   my $sum12;\n    my $sum13;\n    my $sum14;\n    my $sum15;\n    my $sum16;\n\
    \    my $sum17;\n    my $sum18;\n    my $sum19;\n    my $sum20;\n    my $sum21;\n\
    \    my $sum22;\n    my $sum23;\n    my $sum24;\n    my $sum25;\n    my $sum26;\n\
    \    my $sum27;\n    my $sum28;\n    my $sum29;\n    my $sum30;\n    my $sum31;\n\
    \    my $sum32;\n    my $sum33;\n    my $sum34;\n    my $sum35;\n    my $sum36;\n\
    \    my $sum37;\n    my $sum38;\n    my $sum39;\n    my $sum40;\n    my $sum41;\n\
    \    my $sum42;\n    my $sum43;\n    my $sum44;\n    my $sum45;\n    my $sum46;\n\
    \    my $sum47;\n    my $sum48;\n    my $sum49;\n    my $sum50;\n    my $sum51;\n\
    \    my $sum52;\n    my $sum53;\n    my $sum54;\n    my $sum55;\n    my $sum56;\n\
    \    my $sum57;\n    my $sum58;\n    my $sum59;\n    my $sum60;\n    my $sum61;\n\
    \    my $sum62;\n    my $sum63;\n    my $sum64;\n    my $sum65;\n    my $sum66;\n\
    \    my $sum67;\n    my $sum68;\n    my $sum69;\n    my $sum70;\n    my $sum71;\n\
    \    my $sum72;\n    my $sum73;\n    my $sum74;\n    my $sum75;\n    my $sum76;\n\
    \    my $sum77;\n    my $sum78;\n    my $sum79;\n    my $sum80;\n    my $sum81;\n\
    \    my $sum82;\n    my $sum83;\n    my $sum84;\n    my $sum85;\n    my $sum\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n\
    \        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpnb1uz9gy.pl line 98, at end
    of line

    syntax error at /tmp/tmpnb1uz9gy.pl line 98, near "$sum

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpnb1uz9gy.pl line 117, at end
    of line

    syntax error at /tmp/tmpnb1uz9gy.pl line 117, at EOF

    Execution of /tmp/tmpnb1uz9gy.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 0
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $sum = 0;\n    my $n = @$numbers;\n    foreach\
    \ my $number (@$numbers) {\n        $sum += $number;\n    }\n    $mean = $sum\
    \ / $n;\n    foreach my $number (@$numbers) {\n        $number -= $mean;\n   \
    \ }\n    my $mad = 0;\n    foreach my $number (@$numbers) {\n        $mad += abs($number);\n\
    \    }\n    return $mad / $n;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : undef;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmperuc4d6w.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n       \
    \ if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmptlit2gcb.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp8zrw34tm.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 0
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $sum = 0;\n    foreach my $number (@$numbers) {\n\
    \        $sum += $number;\n    }\n    $mean = $sum / @$numbers;\n    foreach my\
    \ $number (@$numbers) {\n        $number -= $mean;\n    }\n    my $mad = 0;\n\
    \    foreach my $number (@$numbers) {\n        $mad += abs($number);\n    }\n\
    \    return $mad / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_e997_dn.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $sum = 0;\n    foreach my $number (@$numbers) {\n\
    \        $sum += $number;\n        $mean += $number / @$numbers;\n    }\n    return\
    \ $sum / @$numbers - $mean;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n       \
    \ if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmptlit2gcb.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 0
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = 0;\n    my($mad) = 0;\n    foreach my $number (@$numbers)\
    \ {\n        $mean += $number;\n    }\n    $mean /= @$numbers;\n    foreach my\
    \ $number (@$numbers) {\n        $mad += abs($number - $mean);\n    }\n    $mad\
    \ /= @$numbers;\n    return $mad;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean = $numbers[0];\n    my $mad = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $mad += abs($number - $mean);\n    }\n    return $mad\
    \ / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp61ucq6of.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 0
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $sum = 0;\n    foreach my $number (@$numbers) {\n\
    \        $sum += $number;\n    }\n    $mean = $sum / @$numbers;\n    foreach my\
    \ $number (@$numbers) {\n        $number -= $mean;\n    }\n    my $mad = 0;\n\
    \    foreach my $number (@$numbers) {\n        $mad += abs($number);\n    }\n\
    \    return $mad / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean = $numbers[0];\n    my $sum = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return $sum\
    \ / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean = mean($numbers);\n    my $sum = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return $sum\
    \ / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpa3_k__gh.pl line 8.

    '
  stdout: ''
  timestamp: 1660013734
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean = $numbers[0];\n    my $sum = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return $sum\
    \ / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = 0;\n    my(@deviations) = ();\n    foreach my $number\
    \ (@$numbers) {\n        $mean += $number;\n        push(@deviations, $number\
    \ - $mean);\n    }\n    $mean /= @$numbers;\n    my $mad = 0;\n    foreach my\
    \ $deviation (@deviations) {\n        $mad += $deviation;\n    }\n    $mad /=\
    \ @deviations;\n    return $mad;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_e997_dn.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_e997_dn.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = 0;\n    my(@deviations) = ();\n    foreach my $number\
    \ (@$numbers) {\n        $mean += $number;\n    }\n    $mean /= @$numbers;\n \
    \   foreach my $number (@$numbers) {\n        push(@deviations, abs($number -\
    \ $mean));\n    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpmtrs442r.pl line 17.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean = $numbers[0];\n    my $sum = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return $sum\
    \ / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean = $numbers[0];\n    my $mad = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $mad += abs($number - $mean);\n    }\n    return $mad\
    \ / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp6bgpxqul.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp8zrw34tm.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 0
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $sum = 0;\n    foreach my $number (@$numbers) {\n\
    \        $sum += $number;\n        $mean += $number;\n    }\n    $mean /= @$numbers;\n\
    \    my $mad = 0;\n    foreach my $number (@$numbers) {\n        $mad += abs($number\
    \ - $mean);\n    }\n    $mad /= @$numbers;\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_e997_dn.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 0
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = 0;\n    my($mad) = 0;\n    foreach $number (@$numbers)\
    \ {\n        $mean += $number;\n    }\n    $mean /= @$numbers;\n    foreach $number\
    \ (@$numbers) {\n        $mad += abs($number - $mean);\n    }\n    $mad /= @$numbers;\n\
    \    return $mad;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n       \
    \ if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmptlit2gcb.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 0
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $sum = 0;\n    my $num_elements = @$numbers;\n\
    \    foreach my $number (@$numbers) {\n        $sum += $number;\n    }\n    $mean\
    \ = $sum / $num_elements;\n    foreach my $number (@$numbers) {\n        $number\
    \ -= $mean;\n    }\n    my $mad = 0;\n    foreach my $number (@$numbers) {\n \
    \       $mad += abs($number);\n    }\n    return $mad / $num_elements;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n\
    \        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $mad;\n    my $i;\n    my $j;\n    my $sum;\n \
    \   my $sumsq;\n    my $n;\n    my $sumx;\n    my $sumy;\n    my $sumxsq;\n  \
    \  my $sumysq;\n    my $sumxy;\n    my $sumxysq;\n    my $sumxyxy;\n    my $sumxyxysq;\n\
    \    my $sumxyxyxy;\n    my $sumxyxyxysq;\n    my $sumxyxyxyxy;\n    my $sumxyxyxyxysq;\n\
    \    my $sumxyxyxyxyxy;\n    my $sumxyxyxyxyxysq;\n    my $sumxyxyxyxyxyxy;\n\
    \    my $sumxyxyxyxyxyxysq;\n    my $sumxyxyxyxyxyxyxy;\n    my $sumxyxyxyxyxyxyxysq;\n\
    \    my $sumxyxyxyxyxyxyxyxy;\n    my $sumxyxyxyxyxyxyxyxysq;\n    my $sumxyxyxyxyxyxyxyxyxy;\n\
    \    my $sumxyxyxyxyxyxyxyxysq;\n    my $sumxyxyxyxyxyxyxyxyxy;\n    my $sumxyxyxyxyxyxyxyxyxysq;\n\
    \    my $sumxyxyxyxyxyxyxyxyxyxy;\n    my $sumxyxyxyxyxyxyxyxyxyxysq;\n    my\
    \ $sumxyxyxyxyxyxyxyxyxyxyxy;\n    my $sumxyxyxyxyxyxyxyxyxyxyxysq;\n    my $sumxyxyxyxyxyxyxyxyxyxyxy;\n\
    \    my $sumxyxyxyxyxyxyxyxyxyxyxysq;\n    my $sumxyxyxyxyxyxyxyxyxyxyxyxy;\n\
    \    my $sumxyxyxyxyxyxyxyxyxyxyxyxysq;\n    my $sumxyxyxyxyxyxyxyxyxyxyxyxyxy;\n\
    \    my $sumxyxyxyxyxyxyxyxyxyxyxyxyxysq;\n    my $sumxyxyxyxyxyxyxyxyxyxyxyxyxyxy;\n\
    \    my $sumxyxyxyxyxyxyxyxyxyxyxyxyxysq;\n    my $sumxyxyxyxyxyxyxyxyxyxyxyxyxyxy;\n\
    \    my $sumxyxyxyxyxyxyxyxy\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpv3m9j9aa.pl line 53, at end
    of line

    syntax error at /tmp/tmpv3m9j9aa.pl line 53, near "$sumxyxyxyxyxyxyxyxy

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpv3m9j9aa.pl line 72, at end of
    line

    syntax error at /tmp/tmpv3m9j9aa.pl line 72, at EOF

    Execution of /tmp/tmpv3m9j9aa.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n       \
    \ if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmptlit2gcb.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp8zrw34tm.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $mad;\n    my $i;\n    my $j;\n    my $sum;\n \
    \   my $sum2;\n    my $sum3;\n    my $sum4;\n    my $sum5;\n    my $sum6;\n  \
    \  my $sum7;\n    my $sum8;\n    my $sum9;\n    my $sum10;\n    my $sum11;\n \
    \   my $sum12;\n    my $sum13;\n    my $sum14;\n    my $sum15;\n    my $sum16;\n\
    \    my $sum17;\n    my $sum18;\n    my $sum19;\n    my $sum20;\n    my $sum21;\n\
    \    my $sum22;\n    my $sum23;\n    my $sum24;\n    my $sum25;\n    my $sum26;\n\
    \    my $sum27;\n    my $sum28;\n    my $sum29;\n    my $sum30;\n    my $sum31;\n\
    \    my $sum32;\n    my $sum33;\n    my $sum34;\n    my $sum35;\n    my $sum36;\n\
    \    my $sum37;\n    my $sum38;\n    my $sum39;\n    my $sum40;\n    my $sum41;\n\
    \    my $sum42;\n    my $sum43;\n    my $sum44;\n    my $sum45;\n    my $sum46;\n\
    \    my $sum47;\n    my $sum48;\n    my $sum49;\n    my $sum50;\n    my $sum51;\n\
    \    my $sum52;\n    my $sum53;\n    my $sum54;\n    my $sum55;\n    my $sum56;\n\
    \    my $sum57;\n    my $sum58;\n    my $sum59;\n    my $sum60;\n    my $sum61;\n\
    \    my $sum62;\n    my $sum63;\n    my $sum64;\n    my $sum65;\n    my $sum66;\n\
    \    my $sum67;\n    my $sum68;\n    my $sum69;\n    my $sum70;\n    my $sum71;\n\
    \    my $sum72;\n    my $sum73;\n    my $sum74;\n    my $sum75;\n    my $sum76;\n\
    \    my $sum77;\n    my $sum78;\n    my $sum79;\n    my $sum80;\n    my $sum81;\n\
    \    my $sum82;\n    my $sum83;\n    my $sum84;\n    my $sum85;\n    my $sum\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n\
    \        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpnb1uz9gy.pl line 98, at end
    of line

    syntax error at /tmp/tmpnb1uz9gy.pl line 98, near "$sum

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpnb1uz9gy.pl line 117, at end
    of line

    syntax error at /tmp/tmpnb1uz9gy.pl line 117, at EOF

    Execution of /tmp/tmpnb1uz9gy.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $sum = 0;\n    my $sum2 = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += $number;\n        $sum2 += $number * $number;\n\
    \    }\n    $mean = $sum / @$numbers;\n    return $sum2 / (@$numbers - 1) if @$numbers\
    \ > 1;\n    return $sum2 / (@$numbers - 1) if (@$numbers == 1);\n    return $sum2\
    \ / (@$numbers - 1) if (@$numbers == 0);\n    return $sum2 / $mean;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n       \
    \ if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmptlit2gcb.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean = $numbers[0];\n    my $sum = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return $sum\
    \ / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n       \
    \ if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmptlit2gcb.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $mad;\n    my $i;\n    my $j;\n    my $sum;\n \
    \   my $count;\n    my $sum2;\n    my $sum3;\n    my $sum4;\n    my $sum5;\n \
    \   my $sum6;\n    my $sum7;\n    my $sum8;\n    my $sum9;\n    my $sum10;\n \
    \   my $sum11;\n    my $sum12;\n    my $sum13;\n    my $sum14;\n    my $sum15;\n\
    \    my $sum16;\n    my $sum17;\n    my $sum18;\n    my $sum19;\n    my $sum20;\n\
    \    my $sum21;\n    my $sum22;\n    my $sum23;\n    my $sum24;\n    my $sum25;\n\
    \    my $sum26;\n    my $sum27;\n    my $sum28;\n    my $sum29;\n    my $sum30;\n\
    \    my $sum31;\n    my $sum32;\n    my $sum33;\n    my $sum34;\n    my $sum35;\n\
    \    my $sum36;\n    my $sum37;\n    my $sum38;\n    my $sum39;\n    my $sum40;\n\
    \    my $sum41;\n    my $sum42;\n    my $sum43;\n    my $sum44;\n    my $sum45;\n\
    \    my $sum46;\n    my $sum47;\n    my $sum48;\n    my $sum49;\n    my $sum50;\n\
    \    my $sum51;\n    my $sum52;\n    my $sum53;\n    my $sum54;\n    my $sum55;\n\
    \    my $sum56;\n    my $sum57;\n    my $sum58;\n    my $sum59;\n    my $sum60;\n\
    \    my $sum61;\n    my $sum62;\n    my $sum63;\n    my $sum64;\n    my $sum65;\n\
    \    my $sum66;\n    my $sum67;\n    my $sum68;\n    my $sum69;\n    my $sum70;\n\
    \    my $sum71;\n    my $sum72;\n    my $sum73;\n    my $sum74;\n    my $sum75;\n\
    \    my $sum76;\n    my $sum77;\n    my $sum78;\n    my $sum79;\n    my $sum80;\n\
    \    my $sum81;\n    my $sum82;\n    my $sum83;\n    my $sum84;\n    my $sum85;\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n\
    \        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpk96d_a9s.pl line 117,
    at end of line

    syntax error at /tmp/tmpk96d_a9s.pl line 117, at EOF

    Execution of /tmp/tmpk96d_a9s.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp6bgpxqul.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp6bgpxqul.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean = $numbers[0];\n    my $mad = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $mad += abs($number - $mean);\n    }\n    return $mad\
    \ / scalar(@$numbers);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 0
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = 0;\n    my($sum) = 0;\n    my($mad) = 0;\n    foreach\
    \ $number (@$numbers) {\n        $sum += $number;\n        $mean += $number;\n\
    \    }\n    $mean /= @$numbers;\n    foreach $number (@$numbers) {\n        $mad\
    \ += abs($number - $mean);\n    }\n    $mad /= @$numbers;\n    return $mad;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n\
    \        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return $mean->[0]->[0] unless @deviations;\n    return $mean->[0]->[0] +\
    \ &average(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::average called at /tmp/tmpjhx959qy.pl line
    14.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp6bgpxqul.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = 0;\n    my(@deviations) = ();\n    foreach $number (@$numbers)\
    \ {\n        $mean += $number;\n    }\n    $mean /= @$numbers;\n    foreach $number\
    \ (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n    return\
    \ mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp6hs7s63h.pl line 17.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean = $numbers[0];\n    my $sum = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return $sum\
    \ / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = 0;\n    my($sum) = 0;\n    foreach my $number (@$numbers)\
    \ {\n        $sum += $number;\n        $mean += $number * $number;\n    }\n  \
    \  $mean /= @$numbers;\n    foreach my $number (@$numbers) {\n        $number->subtract($mean);\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t locate object method "subtract" via package "1" (perhaps you forgot
    to load "1"?) at /tmp/tmpsb0c8ee7.pl line 16.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $mad;\n    my $i;\n    my $j;\n    my $sum;\n \
    \   my $sumsq;\n    my $count;\n    my $sumsqsum;\n    my $sumsqsumsq;\n    my\
    \ $sumsqsumsqsum;\n    my $sumsqsumsqsumsq;\n    my $sumsqsumsqsumsqsum;\n   \
    \ my $sumsqsumsqsumsqsumsq;\n    my $sumsqsumsqsumsqsumsqsum;\n    my $sumsqsumsqsumsqsumsqsumsq;\n\
    \    my $sumsqsumsqsumsqsumsqsumsqsum;\n    my $sumsqsumsqsumsqsumsqsumsqsumsq;\n\
    \    my $sumsqsumsqsumsqsumsqsumsqsumsqsum;\n    my $sumsqsumsqsumsqsumsqsumsqsumsqsumsq;\n\
    \    my $sumsqsumsqsumsqsumsqsumsqsumsqsumsq;\n    my $sumsqsumsqsumsqsumsqsumsqsumsqsumsqsum;\n\
    \    my $sumsqsumsqsumsqsumsqsumsqsumsqsumsqsum;\n    my $sumsqsumsqsumsqsumsqsumsqsumsqsumsqsumsq;\n\
    \    my $sumsqsumsqsumsqsumsqsumsqsumsqsumsqsumsqsum;\n    my $sumsqsumsqsumsqsumsqsumsqsumsqsumsqsumsq;\n\
    \    my $sumsqsumsqsumsqsumsqsumsqsumsqsumsqsumsqsum;\n    my $sumsqsumsqsumsqsumsqsumsqsumsqsumsqsumsqsum;\n\
    \    my $sumsqsumsqsumsqsumsqsumsqsumsqsumsqsumsqsum;\n    my $sumsqsumsqsumsqsumsqsumsqsumsqsumsqsumsqsum;\n\
    \    my $sumsqsumsqsumsqsumsqsumsqsumsqsumsqsumsqsum;\n    my $sumsqsumsqsumsqsumsqsumsqsumsqsumsqsumsqsum;\n\
    \    my $sumsqsumsqsumsqsumsqsumsqsumsqsumsqsumsqsum;\n    my $sumsqsumsqsumsqsumsqsumsqsumsqsumsqsumsqsum;\n\
    \    my $sumsqsumsqsumsqsumsqsumsqsumsqsumsqsumsqsum;\n    my $sumsqsumsqsumsqsumsqsumsqsumsqsumsqsumsqsum;\n\
    \    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n\
    \        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp4ch3s2vr.pl line 63, at
    end of line

    syntax error at /tmp/tmp4ch3s2vr.pl line 63, at EOF

    Execution of /tmp/tmp4ch3s2vr.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp61ucq6of.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n       \
    \ if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmptlit2gcb.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_e997_dn.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_e997_dn.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp8zrw34tm.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0.0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpayer1hc2.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean = $numbers[0];\n    my $sum = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return $sum\
    \ / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n       \
    \ if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmptlit2gcb.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean = $numbers[0];\n    my $mad = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $mad += abs($number - $mean);\n    }\n    return $mad\
    \ / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n       \
    \ if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmptlit2gcb.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp8zrw34tm.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp6bgpxqul.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $sum = 0;\n    foreach my $number (@$numbers) {\n\
    \        $sum += $number;\n    }\n    $mean = $sum / @$numbers;\n    foreach my\
    \ $number (@$numbers) {\n        $number -= $mean;\n    }\n    return $sum / @$numbers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n\
    \        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $sum = 0;\n    foreach my $number (@$numbers) {\n\
    \        $sum += $number;\n    }\n    $mean = $sum / @$numbers;\n    foreach my\
    \ $number (@$numbers) {\n        $number->subtract($mean);\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t locate object method "subtract" via package "1" (perhaps you forgot
    to load "1"?) at /tmp/tmp80cm_fj5.pl line 15.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp8zrw34tm.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean = mean($numbers);\n    my $sum = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return $sum\
    \ / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpa3_k__gh.pl line 8.

    '
  stdout: ''
  timestamp: 1660013734
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $mad;\n    my $i;\n    my $j;\n    my $k;\n   \
    \ my $sum;\n    my $sum2;\n    my $sum3;\n    my $sum4;\n    my $sum5;\n    my\
    \ $sum6;\n    my $sum7;\n    my $sum8;\n    my $sum9;\n    my $sum10;\n    my\
    \ $sum11;\n    my $sum12;\n    my $sum13;\n    my $sum14;\n    my $sum15;\n  \
    \  my $sum16;\n    my $sum17;\n    my $sum18;\n    my $sum19;\n    my $sum20;\n\
    \    my $sum21;\n    my $sum22;\n    my $sum23;\n    my $sum24;\n    my $sum25;\n\
    \    my $sum26;\n    my $sum27;\n    my $sum28;\n    my $sum29;\n    my $sum30;\n\
    \    my $sum31;\n    my $sum32;\n    my $sum33;\n    my $sum34;\n    my $sum35;\n\
    \    my $sum36;\n    my $sum37;\n    my $sum38;\n    my $sum39;\n    my $sum40;\n\
    \    my $sum41;\n    my $sum42;\n    my $sum43;\n    my $sum44;\n    my $sum45;\n\
    \    my $sum46;\n    my $sum47;\n    my $sum48;\n    my $sum49;\n    my $sum50;\n\
    \    my $sum51;\n    my $sum52;\n    my $sum53;\n    my $sum54;\n    my $sum55;\n\
    \    my $sum56;\n    my $sum57;\n    my $sum58;\n    my $sum59;\n    my $sum60;\n\
    \    my $sum61;\n    my $sum62;\n    my $sum63;\n    my $sum64;\n    my $sum65;\n\
    \    my $sum66;\n    my $sum67;\n    my $sum68;\n    my $sum69;\n    my $sum70;\n\
    \    my $sum71;\n    my $sum72;\n    my $sum73;\n    my $sum74;\n    my $sum75;\n\
    \    my $sum76;\n    my $sum77;\n    my $sum78;\n    my $sum79;\n    my $sum80;\n\
    \    my $sum81;\n    my $sum82;\n    my $sum83;\n    my $sum84;\n    my $sum85;\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n\
    \        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpkxozfp3r.pl line 117,
    at end of line

    syntax error at /tmp/tmpkxozfp3r.pl line 117, at EOF

    Execution of /tmp/tmpkxozfp3r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $mad;\n    my $i;\n    my $j;\n    my $sum;\n \
    \   my $sumsq;\n    my $n;\n    my $mean;\n    my $diff;\n    my $diffsq;\n  \
    \  my $diffsum;\n    my $diffsumsq;\n    my $diffn;\n    my $diffsum;\n    my\
    \ $diffsumsq;\n    my $diffn;\n    my $diffsum;\n    my $diffsumsq;\n    my $diffn;\n\
    \    my $diffsum;\n    my $diffsumsq;\n    my $diffn;\n    my $diffsum;\n    my\
    \ $diffsumsq;\n    my $diffn;\n    my $diffsum;\n    my $diffsumsq;\n    my $diffn;\n\
    \    my $diffsum;\n    my $diffsumsq;\n    my $diffn;\n    my $diffsum;\n    my\
    \ $diffsumsq;\n    my $diffn;\n    my $diffsum;\n    my $diffsumsq;\n    my $diffn;\n\
    \    my $diffsum;\n    my $diffsumsq;\n    my $diffn;\n    my $diffsum;\n    my\
    \ $diffsumsq;\n    my $diffn;\n    my $diffsum;\n    my $diffsumsq;\n    my $diffn;\n\
    \    my $diffsum;\n    my $diffsumsq;\n    my $diffn;\n    my $diffsum;\n    my\
    \ $diffsumsq;\n    my $diffn;\n    my $diffsum;\n    my $diffsumsq;\n    my $diffn;\n\
    \    my $diffsum;\n    my $diffsumsq;\n    my $diffn;\n    my $diffsum;\n    my\
    \ $diffsumsq;\n    my $diffn;\n    my $diffsum;\n    my $diffsumsq;\n    my $diffn;\n\
    \    my $diffsum;\n    my $diffsumsq;\n    my $diffn;\n    my $diffsum;\n    my\
    \ $diffsumsq;\n    my $diffn;\n    my $diffsum;\n    my $diffsumsq;\n    my $diffn;\n\
    \    my $diffsum;\n    my $diffsumsq;\n    my $diffn;\n    my $diffsum;\n    my\
    \ $diffsumsq;\n    my $diffn;\n    my $diffsum;\n    my $diffsumsq;\n    my $diffn;\n\
    \    my $diffsum;\n    my $diffsumsq;\n    my $diffn;\n    my $diffsum;\n    my\
    \ $diffsumsq;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2a5f4z0b.pl line 114,
    at end of line

    syntax error at /tmp/tmp2a5f4z0b.pl line 114, at EOF

    Execution of /tmp/tmp2a5f4z0b.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers->[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_e997_dn.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $mad;\n    my $i;\n    my $j;\n    my $k;\n   \
    \ my $sum;\n    my $sum2;\n    my $sum3;\n    my $sum4;\n    my $sum5;\n    my\
    \ $sum6;\n    my $sum7;\n    my $sum8;\n    my $sum9;\n    my $sum10;\n    my\
    \ $sum11;\n    my $sum12;\n    my $sum13;\n    my $sum14;\n    my $sum15;\n  \
    \  my $sum16;\n    my $sum17;\n    my $sum18;\n    my $sum19;\n    my $sum20;\n\
    \    my $sum21;\n    my $sum22;\n    my $sum23;\n    my $sum24;\n    my $sum25;\n\
    \    my $sum26;\n    my $sum27;\n    my $sum28;\n    my $sum29;\n    my $sum30;\n\
    \    my $sum31;\n    my $sum32;\n    my $sum33;\n    my $sum34;\n    my $sum35;\n\
    \    my $sum36;\n    my $sum37;\n    my $sum38;\n    my $sum39;\n    my $sum40;\n\
    \    my $sum41;\n    my $sum42;\n    my $sum43;\n    my $sum44;\n    my $sum45;\n\
    \    my $sum46;\n    my $sum47;\n    my $sum48;\n    my $sum49;\n    my $sum50;\n\
    \    my $sum51;\n    my $sum52;\n    my $sum53;\n    my $sum54;\n    my $sum55;\n\
    \    my $sum56;\n    my $sum57;\n    my $sum58;\n    my $sum59;\n    my $sum60;\n\
    \    my $sum61;\n    my $sum62;\n    my $sum63;\n    my $sum64;\n    my $sum65;\n\
    \    my $sum66;\n    my $sum67;\n    my $sum68;\n    my $sum69;\n    my $sum70;\n\
    \    my $sum71;\n    my $sum72;\n    my $sum73;\n    my $sum74;\n    my $sum75;\n\
    \    my $sum76;\n    my $sum77;\n    my $sum78;\n    my $sum79;\n    my $sum80;\n\
    \    my $sum81;\n    my $sum82;\n    my $sum83;\n    my $sum84;\n    my $sum85;\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n\
    \        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpkxozfp3r.pl line 117,
    at end of line

    syntax error at /tmp/tmpkxozfp3r.pl line 117, at EOF

    Execution of /tmp/tmpkxozfp3r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n       \
    \ if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmptlit2gcb.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n       \
    \ if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmptlit2gcb.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $sum = 0;\n    foreach my $number (@$numbers) {\n\
    \        $sum += $number;\n    }\n    $mean = $sum / @$numbers;\n    foreach my\
    \ $number (@$numbers) {\n        $number -= $mean;\n    }\n    return $sum / @$numbers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n\
    \        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    my $mad = mean(@deviations);\n    return $mad;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp20pa1ooz.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 1
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean = $numbers[0];\n    my $sum = 0;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n    return $sum\
    \ / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0, 2.0]),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, abs($number - $mean));\n\
    \    }\n    return mean(@deviations);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmpi6o00rt4.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : undef;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmperuc4d6w.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
- exit_code: 0
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my $mean;\n    my $sum = 0;\n    foreach my $number (@$numbers) {\n\
    \        $sum += $number;\n        $mean = $sum / @$numbers;\n    }\n    my $mad\
    \ = 0;\n    foreach my $number (@$numbers) {\n        $mad += abs($number - $mean);\n\
    \    }\n    return $mad / @$numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&mean_absolute_deviation;\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0]),0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013787
- exit_code: 255
  program: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
    # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
    \ difference between each\n# element and a centerpoint (mean in this case):\n\
    # MAD = average | x - x_mean |\nsub mean_absolute_deviation {\n    my($numbers)\
    \ = @_;\n    my($mean) = $numbers[0];\n    my(@deviations) = ();\n    foreach\
    \ my $number (@$numbers) {\n        push(@deviations, $number - $mean);\n    }\n\
    \    return scalar(@deviations) ? mean(@deviations) : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n   \
    \     if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0,\
    \ 4.0]),1.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::mean called at /tmp/tmp_788wj6o.pl line 13.

    '
  stdout: ''
  timestamp: 1660013787
