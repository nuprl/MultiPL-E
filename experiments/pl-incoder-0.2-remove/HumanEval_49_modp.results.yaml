language: pl
name: HumanEval_49_modp
results:
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = $n;\n    my $w = $p;\n\
    \    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n\
    \    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n\
    \    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $w = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n    my $a = 0;\n\
    \    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n\
    \    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $w = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n   \
    \     if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp445az4cn.pl line 144,
    at end of line

    syntax error at /tmp/tmp445az4cn.pl line 144, at EOF

    Execution of /tmp/tmp445az4cn.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $m = $n >> 1;\n    return $m if $m & 1;\n    return $m + 1;\
    \ # $m is odd, so return $m + 1.\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 1;\n    my $base = $p;\n    my $exp;\n    while ($n\
    \ > 0) {\n        $res = $res * $base;\n        $exp = log($n) / log(10);\n  \
    \      $base = $base * $base;\n        $n = $n / $base;\n    }\n    return $res\
    \ * $exp;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    if ($r == 0) {\n\treturn $p;\n    }\n \
    \   elsif ($r < 0) {\n\treturn $p - $r;\n    }\n    else {\n\treturn $p;\n   \
    \ }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = $n;\n    my $mask = $p >> 1;\n    while ($mask) {\n\
    \        $res *= $p;\n        $res %= $p;\n        $mask >>= 1;\n    }\n    return\
    \ $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $s = 1;\n    while ($r != 0) {\n        $r\
    \ = $r / $p;\n        $s = $s * $p;\n    }\n    return $s;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 1;\n    my $i;\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $res *= $p;\n        $res %= $p;\n    }\n    return $res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    $x -= $x % $p;\n    return $x;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 0;\n    return $p\
    \ if $n == 0;\n    return $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = 1;\n    while ($x !=\
    \ 0) {\n        $z = ($z + ($x & $y)) % $p;\n        $x = $x >> $y;\n    }\n \
    \   return $z;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $p if $n == 1;\n    return $p if $n == 0;\n    return $p if $n == -1;\n    return\
    \ $p if $n == -2;\n    return $p if $n == -4;\n    return $p if $n == -8;\n  \
    \  return $p if $n == -16;\n    return $p if $n == -32;\n    return $p if $n ==\
    \ -64;\n    return $p if $n == -128 or $n == -256;\n    return $p if $n == -512\
    \ or $n == -1024;\n    return $p if $n == -2048 or $n == -4096;\n    return $p\
    \ if $n == -8192;\n    return $p if $n == -16384 or $n == -32768;\n    return\
    \ $p if $n == -65536 or $n == -131072;\n    return $p if $n == -262144 or $n ==\
    \ -524288;\n    return $p if $n == -1048576 or $n == -2097152;\n    return $p\
    \ if $n == -4194304 or $n == -8388608;\n    return $p if $n == -16777216 or $n\
    \ == -33554432;\n    return $p if $n == -33554432 or $n == -67108864;\n    return\
    \ $p if $n == -67108864 or $n == -134217728;\n    return $p if $n == -134217728\
    \ or $n == -268435456;\n    return $p if $n == -268435456 or $n == -536870912;\n\
    \    return $p if $n == -536870912 or $n == -1073741824;\n    return $p if $n\
    \ == -1073741824 or $n == -2147483648;\n    return $p if $n == -2147483648 or\
    \ $n == -34359738368;\n    return $p if $n == -34359738368 or $n == -68719476736;\n\
    \    return $p if $n == -68719476736 or $n == -137438953472\n      or $n == -274877906944;\n\
    \    return $p if $n == -137438953472 or $n == -549755813888;\n    return $p if\
    \ $n == -549755813888 or $n == -10737418240;\n    return $p if $n == -1073741824\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n     \
    \   if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpl9q9ra28.pl line 38, at end
    of line

    syntax error at /tmp/tmpl9q9ra28.pl line 38, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpl9q9ra28.pl line 73, at end of
    line

    syntax error at /tmp/tmpl9q9ra28.pl line 73, at EOF

    Execution of /tmp/tmpl9q9ra28.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    return $r if $r != 0;\n    return $p;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $m = $p;\n    while ($m & 1) {\n        $r\
    \ = ($r >> 1) + ($r & 1);\n        $m = ($m >> 1) + ($m & 1);\n    }\n    return\
    \ $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $n if $n == 1;\n    return\
    \ $p if $n == 0;\n    return $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $n = int($n);\n    my $p = int($p);\n    my $m = $p;\n   \
    \ my $r = 1;\n    my $k = 0;\n    my $z = 0;\n    my $w = 0;\n    my $x = 1;\n\
    \    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n\
    \    my $z = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n\
    \    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n\
    \    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n    my $x = 1;\n\
    \    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n\
    \    my $z = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n\
    \    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n\
    \    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n    my $x = 1;\n\
    \    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n\
    \    my $z = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n\
    \    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n\
    \    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n    my $x = 1;\n\
    \    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n\
    \    my $z = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n\
    \    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n\
    \    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n    my $x = 1;\n\
    \    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n\
    \    my $z = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n\
    \    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp5r44rv6x.pl line 106,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp5r44rv6x.pl line 106, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp5r44rv6x.pl line 141, at end of line\nsyntax\
    \ error at /tmp/tmp5r44rv6x.pl line 141, at EOF\nExecution of /tmp/tmp5r44rv6x.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    return $r if $r;\n    return $p if $n ==\
    \ 0;\n    return $p - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = 1;\n    while ($x !=\
    \ 0) {\n        $z = ($z << 1) + ($x & 1);\n        $x = $x >> 1;\n    }\n   \
    \ return $z % ($y + 1);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = 1;\n    while ($x !=\
    \ 0) {\n        $z = ($z * $x) % $y;\n        $x = int($x / $y);\n    }\n    return\
    \ $z;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $k = 0;\n    my $j = 0;\n\
    \    my $i = 0;\n    my $w = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpobd9mikw.pl line 45, at
    end of line

    syntax error at /tmp/tmpobd9mikw.pl line 45, at EOF

    Execution of /tmp/tmpobd9mikw.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 2;\n    return $p\
    \ if $n == 1;\n    return $p if $n == 0;\n    return $p if $n >= $p;\n    return\
    \ $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = 0;\n    my $w = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w2 = 0;\n    my $u2 = 0;\n    my $v2\
    \ = 0;\n    my $w3 = 0;\n    my $u3 = 0;\n    my $v3 = 0;\n    my $w4 = 0;\n \
    \   my $u4 = 0;\n    my $v4 = 0;\n    my $w5 = 0;\n    my $u5 = 0;\n    my $v5\
    \ = 0;\n    my $w6 = 0;\n    my $u6 = 0;\n    my $v6 = 0;\n    my $w7 = 0;\n \
    \   my $u7 = 0;\n    my $v7 = 0;\n    my $w8 = 0;\n    my $u8 = 0;\n    my $v8\
    \ = 0;\n    my $w9 = 0;\n    my $u9 = 0;\n    my $v9 = 0;\n    my $w10 = 0;\n\
    \    my $u10 = 0;\n    my $v10 = 0;\n    my $w11 = 0;\n    my $u11 = 0;\n    my\
    \ $v11 = 0;\n    my $w12 = 0;\n    my $u12 = 0;\n    my $v12 = 0;\n    my $w13\
    \ = 0;\n    my $u13 = 0;\n    my $v13 = 0;\n    my $w14 = 0;\n    my $u14 = 0;\n\
    \    my $v14 = 0;\n    my $w15 = 0;\n    my $u15 = 0;\n    my $v15 = 0;\n    my\
    \ $w16 = 0;\n    my $u16 = 0;\n    my $v16 = 0;\n    my $w17 = 0;\n    my $u17\
    \ = 0;\n    my $v17 = 0;\n    my $w18 = 0;\n    my $u18 = 0;\n    my $v18 = 0;\n\
    \    my $w19 = 0;\n    my $u19 = 0;\n    my $v19 = 0;\n    my $w20 = 0;\n    my\
    \ $u20 = 0;\n    my $v20 = 0;\n    my $w21 = 0;\n    my $u21 = 0;\n    my $v21\
    \ = 0;\n    my $w22 = 0;\n    my $u22 = 0;\n    my $v22 = 0;\n    my $w23 = 0;\n\
    \    my $u23 = 0;\n    my $v23 = 0;\n    my $w24 = 0;\n    my $u24 = 0;\n    my\
    \ $v24 = 0;\n    my $w25 = 0;\n    my $u25 = 0;\n    my $v25 = 0;\n    my $w26\
    \ = 0;\n    my $u26 = 0;\n    my $v26 = 0;\n    my $w27 = 0;\n    my $u27 = 0;\n\
    \    my $v27 = 0;\n    my $w28 = 0;\n    my $u28 = 0;\n    my $v28 = 0;\n    my\
    \ $w29 = 0;\n    my $u29 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp4d79godb.pl line 128,
    at end of line

    syntax error at /tmp/tmp4d79godb.pl line 128, at EOF

    Execution of /tmp/tmp4d79godb.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 0;\n    return $p\
    \ if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == -1;\n    return\
    \ $p if $n <= -1;\n    return $p if $n >= 1;\n    return $p if $n <= 1;\n    return\
    \ $p if $n >= -1;\n    return $p if $n <= -1;\n    return $p if $n >= 1;\n   \
    \ return $p if $n <= 1;\n    return $p if $n >= -1;\n    return $p if $n <= -1;\n\
    \    return $p if $n >= 1;\n    return $p if $n <= 1;\n    return $p if $n >=\
    \ -1;\n    return $p if $n <= -1;\n    return $p if $n >= 1;\n    return $p if\
    \ $n <= 1;\n    return $p if $n >= -1;\n    return $p if $n <= -1;\n    return\
    \ $p if $n >= 1;\n    return $p if $n <= 1;\n    return $p if $n >= -1;\n    return\
    \ $p if $n <= -1;\n    return $p if $n >= 1;\n    return $p if $n <= 1;\n    return\
    \ $p if $n >= -1;\n    return $p if $n <= -1;\n    return $p if $n >= 1;\n   \
    \ return $p if $n <= 1;\n    return $p if $n >= -1;\n    return $p if $n <= -1;\n\
    \    return $p if $n >= 1;\n    return $p if $n <= 1;\n    return $p if $n >=\
    \ -1;\n    return $p if $n <= -1;\n    return $p if $n >= 1;\n    return $p if\
    \ $n <= 1;\n    return $p if $n >= -1;\n    return $p if $n <= -1;\n    return\
    \ $p if $n >= 1;\n    return $p if $n <= 1;\n    return $p if $n >= -1;\n    return\
    \ $p if $n <= -1;\n    return $p if $n >= 1;\n    return $p if $n <= 1;\n    return\
    \ $p if $n >= -1;\n    return $p if $n <= -1;\n    return $p if $n >= 1;\n   \
    \ return $p if $n <= 1;\n    return $p if $n >= -1;\n    return $p if $n <= -1;\n\
    \    return $p if $n >= 1;\n    return $p if $n <= 1;\n    return $p if $n >=\
    \ -1;\n    return $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmps15239mn.pl line 62,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nMissing\
    \ right curly or square bracket at /tmp/tmps15239mn.pl line 97, at end of line\n\
    syntax error at /tmp/tmps15239mn.pl line 97, at EOF\nExecution of /tmp/tmps15239mn.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $m = $p;\n    my $q = $p;\n    my $a = 1;\n\
    \    my $b = 1;\n    my $c = 1;\n    my $d = 1;\n    my $e = 1;\n    my $f = 1;\n\
    \    my $g = 1;\n    my $h = 1;\n    my $i = 1;\n    my $j = 1;\n    my $k = 1;\n\
    \    my $l = 1;\n    my $m = 1;\n    my $n = 1;\n    my $o = 1;\n    my $p = 1;\n\
    \    my $q = 1;\n    my $r = 1;\n    my $s = 1;\n    my $t = 1;\n    my $u = 1;\n\
    \    my $v = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n\
    \    my $A = 1;\n    my $B = 1;\n    my $C = 1;\n    my $D = 1;\n    my $E = 1;\n\
    \    my $F = 1;\n    my $G = 1;\n    my $H = 1;\n    my $I = 1;\n    my $J = 1;\n\
    \    my $K = 1;\n    my $L = 1;\n    my $M = 1;\n    my $N = 1;\n    my $O = 1;\n\
    \    my $P = 1;\n    my $Q = 1;\n    my $R = 1;\n    my $S = 1;\n    my $T = 1;\n\
    \    my $U = 1;\n    my $V = 1;\n    my $W = 1;\n    my $X = 1;\n    my $Y = 1;\n\
    \    my $Z = 1;\n    my $a = 1;\n    my $b = 1;\n    my $c = 1;\n    my $d = 1;\n\
    \    my $e = 1;\n    my $f = 1;\n    my $g = 1;\n    my $h = 1;\n    my $i = 1;\n\
    \    my $j = 1;\n    my $k = 1;\n    my $l = 1;\n    my $m = 1;\n    my $n = 1;\n\
    \    my $o = 1;\n    my $p = 1;\n    my $q = 1;\n    my $r = 1;\n    my $s = 1;\n\
    \    my $t = 1;\n    my $u = 1;\n    my $v = 1;\n    my $w = 1;\n    my $x = 1;\n\
    \    my $y = 1;\n    my $z = 1;\n    my $A = 1;\n    my $B = 1;\n    my $C = 1;\n\
    \    my $D = 1;\n    my $E = 1;\n    my $F = 1;\n    my $G = 1;\n    my $H = 1;\n\
    \    my $I = 1;\n    my $J = 1;\n    my $K = 1;\n    my $L = 1;\n    my $M = 1;\n\
    \    my $N = 1;\n    my $O = 1;\n    my $P = 1;\n    my $Q = 1;\n    my $R = 1;\n\
    \    my $S = 1;\n    my $T = 1;\n    my $U = 1;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpwrv1kmma.pl line 141,
    at end of line

    syntax error at /tmp/tmpwrv1kmma.pl line 141, at EOF

    Execution of /tmp/tmpwrv1kmma.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = $x;\n    my $r = $y;\n\
    \    my $s = $x;\n    my $t = $y;\n    my $u = $x;\n    my $v = $y;\n    my $w\
    \ = $x;\n    my $u2 = $y;\n    my $v2 = $z;\n    my $w2 = $z;\n    my $w3 = $z;\n\
    \    my $w4 = $z;\n    my $w5 = $z;\n    my $w6 = $z;\n    my $w7 = $z;\n    my\
    \ $w8 = $z;\n    my $w9 = $z;\n    my $w10 = $z;\n    my $w11 = $z;\n    my $w12\
    \ = $z;\n    my $w13 = $z;\n    my $w14 = $z;\n    my $w15 = $z;\n    my $w16\
    \ = $z;\n    my $w17 = $z;\n    my $w18 = $z;\n    my $w19 = $z;\n    my $w20\
    \ = $z;\n    my $w21 = $z;\n    my $w22 = $z;\n    my $w23 = $z;\n    my $w24\
    \ = $z;\n    my $w25 = $z;\n    my $w26 = $z;\n    my $w27 = $z;\n    my $w28\
    \ = $z;\n    my $w29 = $z;\n    my $w30 = $z;\n    my $w31 = $z;\n    my $w32\
    \ = $z;\n    my $w33 = $z;\n    my $w34 = $z;\n    my $w35 = $z;\n    my $w36\
    \ = $z;\n    my $w37 = $z;\n    my $w38 = $z;\n    my $w39 = $z;\n    my $w40\
    \ = $z;\n    my $w41 = $z;\n    my $w42 = $z;\n    my $w43 = $z;\n    my $w44\
    \ = $z;\n    my $w45 = $z;\n    my $w46 = $z;\n    my $w47 = $z;\n    my $w48\
    \ = $z;\n    my $w49 = $z;\n    my $w50 = $z;\n    my $w51 = $z;\n    my $w52\
    \ = $z;\n    my $w53 = $z;\n    my $w54 = $z;\n    my $w55 = $z;\n    my $w56\
    \ = $z;\n    my $w57 = $z;\n    my $w58 = $z;\n    my $w59 = $z;\n    my $w60\
    \ = $z;\n    my $w61 = $z;\n    my $w62 = $z;\n    my $w63 = $z;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmprovn5z8w.pl line 112,
    at end of line

    syntax error at /tmp/tmprovn5z8w.pl line 112, at EOF

    Execution of /tmp/tmprovn5z8w.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $m = 1;\n    my $q = 1;\n    my $r = $r;\n\
    \    my $m = $m;\n    my $q = $q;\n    my $i = 1;\n    my $j = 1;\n    my $k =\
    \ 1;\n    my $m = $m;\n    my $q = $q;\n    my $i = $i;\n    my $j = $j;\n   \
    \ my $k = $k;\n    my $m = $m;\n    my $q = $q;\n    my $i = $i;\n    my $j =\
    \ $j;\n    my $k = $k;\n    my $m = $m;\n    my $q = $q;\n    my $i = $i;\n  \
    \  my $j = $j;\n    my $k = $k;\n    my $m = $m;\n    my $q = $q;\n    my $i =\
    \ $i;\n    my $j = $j;\n    my $k = $k;\n    my $m = $m;\n    my $q = $q;\n  \
    \  my $i = $i;\n    my $j = $j;\n    my $k = $k;\n    my $m = $m;\n    my $q =\
    \ $q;\n    my $i = $i;\n    my $j = $j;\n    my $k = $k;\n    my $m = $m;\n  \
    \  my $q = $q;\n    my $i = $i;\n    my $j = $j;\n    my $k = $k;\n    my $m =\
    \ $m;\n    my $q = $q;\n    my $i = $i;\n    my $j = $j;\n    my $k = $k;\n  \
    \  my $m = $m;\n    my $q = $q;\n    my $i = $i;\n    my $j = $j;\n    my $k =\
    \ $k;\n    my $m = $m;\n    my $q = $q;\n    my $i = $i;\n    my $j = $j;\n  \
    \  my $k = $k;\n    my $m = $m;\n    my $q = $q;\n    my $i = $i;\n    my $j =\
    \ $j;\n    my $k = $k;\n    my $m = $m;\n    my $q = $q;\n    my $i = $i;\n  \
    \  my $j = $j;\n    my $k = $k;\n    my $m = $m;\n    my $q = $q;\n    my $i =\
    \ $i;\n    my $j = $j;\n    my $k = $k;\n    my $m = $m;\n    my $q = $q;\n  \
    \  my $i = $i;\n    my $j = $j;\n    my $k = $k;\n    my $m = $m;\n    my $q =\
    \ $q;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzpqhwatx.pl line 121,
    at end of line

    syntax error at /tmp/tmpzpqhwatx.pl line 121, at EOF

    Execution of /tmp/tmpzpqhwatx.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $i = 1;\n    my $j = 1;\n\
    \    my $k = 1;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n \
    \   my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n  \
    \  my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n    my $tmp84;\n\
    \    my $tmp\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp91pon70d.pl line 94, at end
    of line

    syntax error at /tmp/tmp91pon70d.pl line 94, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp91pon70d.pl line 129, at end
    of line

    syntax error at /tmp/tmp91pon70d.pl line 129, at EOF

    Execution of /tmp/tmp91pon70d.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n if $n == $p;\n    return $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $t = 1;\n    my $m = 1;\n    my $k = 0;\n\
    \    my $z = 0;\n    my $kp = $p;\n    my $kz = $kp - $k;\n    my $kzp = $kz -\
    \ $k + $p;\n    my $kzp2 = $kzp * $kzp;\n    my $kzp3 = $kzp2 * $kzp;\n    my\
    \ $kzp4 = $kzp3 * $kzp;\n    my $kzp5 = $kzp4 * $kzp;\n    my $kzp6 = $kzp5 *\
    \ $kzp;\n    my $kzp7 = $kzp6 * $kzp;\n    my $kzp8 = $kzp7 * $kzp;\n    my $kzp9\
    \ = $kzp8 * $kzp;\n    my $kzp10 = $kzp9 * $kzp;\n    my $kzp11 = $kzp10 * $kzp;\n\
    \    my $kzp12 = $kzp11 * $kzp;\n    my $kzp13 = $kzp12 * $kzp;\n    my $kzp14\
    \ = $kzp13 * $kzp;\n    my $kzp15 = $kzp14 * $kzp;\n    my $kzp16 = $kzp15 * $kzp;\n\
    \    my $kzp17 = $kzp16 * $kzp;\n    my $kzp18 = $kzp17 * $kzp;\n    my $kzp19\
    \ = $kzp18 * $kzp;\n    my $kzp20 = $kzp19 * $kzp;\n    my $kzp21 = $kzp20 * $kzp;\n\
    \    my $kzp22 = $kzp21 * $kzp;\n    my $kzp23 = $kzp22 * $kzp;\n    my $kzp24\
    \ = $kzp23 * $kzp;\n    my $kzp25 = $kzp24 * $kzp;\n    my $kzp26 = $kzp25 * $kzp;\n\
    \    my $kzp27 = $kzp26 * $kzp;\n    my $kzp28 = $kzp27 * $kzp;\n    my $\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n       \
    \ if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpf62gixj1.pl line 40,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpf62gixj1.pl line 40, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpf62gixj1.pl line 75, at end of line\nsyntax\
    \ error at /tmp/tmpf62gixj1.pl line 75, at EOF\nExecution of /tmp/tmpf62gixj1.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $n = int($n);\n    my $p = int($p);\n    my $r = $n % $p;\n\
    \    return $r if $r != 0;\n    return $p if $n == 0;\n    return $p;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n       \
    \ if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 1;\n    return $p\
    \ if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == 2;\n    return\
    \ $p if $n == 3;\n    return $p if $n == 4;\n    return $p if $n == 5;\n    return\
    \ $p if $n == 6;\n    return $p if $n == 7;\n    return $p if $n == 8;\n    return\
    \ $p if $n == 9;\n    return $p if $n == 10;\n    return $p if $n == 11;\n   \
    \ return $p if $n == 12;\n    return $p if $n == 13;\n    return $p if $n == 14;\n\
    \    return $p if $n == 15;\n    return $p if $n == 16;\n    return $p if $n ==\
    \ 17;\n    return $p if $n == 18;\n    return $p if $n == 19;\n    return $p if\
    \ $n == 20;\n    return $p if $n == 21;\n    return $p if $n == 22;\n    return\
    \ $p if $n == 23;\n    return $p if $n == 24;\n    return $p if $n == 25;\n  \
    \  return $p if $n == 26;\n    return $p if $n == 27;\n    return $p if $n ==\
    \ 28;\n    return $p if $n == 29;\n    return $p if $n == 30;\n    return $p if\
    \ $n == 31;\n    return $p if $n == 32;\n    return $p if $n == 33;\n    return\
    \ $p if $n == 34;\n    return $p if $n == 35;\n    return $p if $n == 36;\n  \
    \  return $p if $n == 37;\n    return $p if $n == 38;\n    return $p if $n ==\
    \ 39;\n    return $p if $n == 40;\n    return $p if $n == 41;\n    return $p if\
    \ $n == 42;\n    return $p if $n == 43;\n    return $p if $n == 44;\n    return\
    \ $p if $n == 45;\n    return $p if $n == 46;\n    return $p if $n == 47;\n  \
    \  return $p if $n == 48;\n    return $p if $n == 49;\n    return $p if $n ==\
    \ 50;\n    return $p if $n == 51;\n    return $p if $n == 52;\n    return $p if\
    \ $n == 53;\n    return $p if $n == 54;\n    return $p if $n == 55;\n    return\
    \ $p if $n == 56;\n    return \nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "\"use\" not allowed in expression at /tmp/tmp_dvlinbx.pl line 64, near\
    \ \"return \n\"\nsyntax error at /tmp/tmp_dvlinbx.pl line 64, near \"return \n\
    use Test::Deep\"\nMissing right curly or square bracket at /tmp/tmp_dvlinbx.pl\
    \ line 99, at end of line\nsyntax error at /tmp/tmp_dvlinbx.pl line 99, at EOF\n\
    Execution of /tmp/tmp_dvlinbx.pl aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $m = 1;\n    while ($m <= $p) {\n       \
    \ $r = ($r * $n) % $p;\n        $m++;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = $n;\n    my $tmp = $n;\n    my $mask = 1;\n    my $shift\
    \ = 0;\n    my $carry = 0;\n    my $i;\n    my $j;\n    my $k;\n    my $r;\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n       \
    \ if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpgsxhvbe3.pl line 48, at
    end of line

    syntax error at /tmp/tmpgsxhvbe3.pl line 48, at EOF

    Execution of /tmp/tmpgsxhvbe3.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $p if $n == 1;\n    return $p + modp($n - 1, $p) % $p;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $s = 1;\n    while ($r >= $p) {\n       \
    \ $s *= $p;\n        $r %= $p;\n    }\n    return $s;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $s = 1;\n    my $t = 1;\n    my $m = 1;\n\
    \    my $e = 0;\n    my $k = 0;\n    my $z = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z2 = 0;\n    my $w2 = 0;\n    my $x2 = 0;\n    my $y2\
    \ = 0;\n    my $z3 = 0;\n    my $w3 = 0;\n    my $x3 = 0;\n    my $y3 = 0;\n \
    \   my $z4 = 0;\n    my $w4 = 0;\n    my $x4 = 0;\n    my $y4 = 0;\n    my $z5\
    \ = 0;\n    my $w5 = 0;\n    my $x5 = 0;\n    my $y5 = 0;\n    my $z6 = 0;\n \
    \   my $w6 = 0;\n    my $x6 = 0;\n    my $y6 = 0;\n    my $z7 = 0;\n    my $w7\
    \ = 0;\n    my $x7 = 0;\n    my $y7 = 0;\n    my $z8 = 0;\n    my $w8 = 0;\n \
    \   my $x8 = 0;\n    my $y8 = 0;\n    my $z9 = 0;\n    my $w9 = 0;\n    my $x9\
    \ = 0;\n    my $y9 = 0;\n    my $z10 = 0;\n    my $w10 = 0;\n    my $x10 = 0;\n\
    \    my $y10 = 0;\n    my $z11 = 0;\n    my $w11 = 0;\n    my $x11 = 0;\n    my\
    \ $y11 = 0;\n    my $z12 = 0;\n    my $w12 = 0;\n    my $x12 = 0;\n    my $y12\
    \ = 0;\n    my $z13 = 0;\n    my $w13 = 0;\n    my $x13 = 0;\n    my $y13 = 0;\n\
    \    my $z14 = 0;\n    my $w14 = 0;\n    my $x14 = 0;\n    my $y14 = 0;\n    my\
    \ $z15 = 0;\n    my $w15 = 0;\n    my $x15 = 0;\n    my $y15 = 0;\n    my $z16\
    \ = 0;\n    my $w16 = 0;\n    my $x16 = 0;\n    my $y16 = 0;\n    my $z17 = 0;\n\
    \    my $w17 = 0;\n    my $x17 = 0;\n    my $y17 = 0;\n    my $z18 = 0;\n    my\
    \ $w18 = 0;\n    my $x18 = 0;\n    my $y18 = 0;\n    my $z19 = 0;\n    my $w19\
    \ = 0;\n    my $x19 = 0;\n    my $y19 = 0;\n    my $z20 = 0;\n    my $w20 = 0;\n\
    \    my $x20 = 0;\n    my $y20 = 0;\n    my $z21 = 0;\n    my $w21 = 0;\n    my\
    \ $x21 = 0;\n    my $y21\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpd59_j88g.pl line 94, at end
    of line

    syntax error at /tmp/tmpd59_j88g.pl line 94, near "$y21

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpd59_j88g.pl line 129, at end
    of line

    syntax error at /tmp/tmpd59_j88g.pl line 129, at EOF

    Execution of /tmp/tmpd59_j88g.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 0;\n    my $m = $p->{_m};\n    my $e = $p->{_e};\n\
    \    my $k = $p->{_k};\n    my $base = $p->{_base};\n    my $base2 = $p->{_base2};\n\
    \    my $base10 = $p->{_base10};\n    my $basee = $p->{_basee};\n    my $basee2\
    \ = $p->{_basee2};\n    my $basee10 = $p->{_basee10};\n    my $basee3 = $p->{_basee3};\n\
    \    my $basee4 = $p->{_basee4};\n    my $basee6 = $p->{_basee6};\n    my $basee8\
    \ = $p->{_basee8};\n    my $basee9 = $p->{_basee9};\n    my $basee10 = $p->{_basee10};\n\
    \    my $basee12 = $p->{_basee12};\n    my $basee15 = $p->{_basee15};\n    my\
    \ $basee16 = $p->{_basee16};\n    my $basee18 = $p->{_basee18};\n    my $basee19\
    \ = $p->{_basee19};\n    my $basee20 = $p->{_basee20};\n    my $basee22 = $p->{_basee22};\n\
    \    my $basee24 = $p->{_basee24};\n    my $basee25 = $p->{_basee25};\n    my\
    \ $basee26 = $p->{_basee26};\n    my $basee27 = $p->{_basee27};\n    my $basee28\
    \ = $p->{_basee28};\n    my $basee29 = $p->{_basee29};\n    my $basee30 = $p->{_basee30};\n\
    \    my $basee32 = $p->{_basee32};\n    my $basee33 = $p->{_basee33};\n    my\
    \ $basee34 = $p->{_basee34};\n    my $basee35 = $p->{_basee35};\n    my $basee36\
    \ = $p->{_basee36};\n    my $basee37 = $p->{_basee37};\n    my $basee38 = $p->{_basee38};\n\
    \    my $basee39 = $p->{_basee39};\n    my $basee40 = $p->{_basee40};\n    my\
    \ $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpndp7rrzg.pl line 44,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpndp7rrzg.pl line 44, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpndp7rrzg.pl line 79, at end of line\nsyntax\
    \ error at /tmp/tmpndp7rrzg.pl line 79, at EOF\nExecution of /tmp/tmpndp7rrzg.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n if $n % $p;\n    return $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $m = 1;\n    while ($m <= $p) {\n       \
    \ $r += $m;\n        $m *= 2;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 1;\n    return $p\
    \ if $n == 0;\n    return $p if $n == 1;\n    return $p if $n % 2 == 0;\n    return\
    \ $p if $n % 3 == 0;\n    return $p if $n % 5 == 0;\n    return $p if $n % 7 ==\
    \ 0;\n    return $p if $n % 11 == 0;\n    return $p if $n % 13 == 0;\n    return\
    \ $p if $n % 17 == 0;\n    return $p if $n % 19 == 0;\n    return $p if $n % 23\
    \ == 0;\n    return $p if $n % 29 == 0;\n    return $p if $n % 37 == 0;\n    return\
    \ $p if $n % 53 == 0;\n    return $p if $n % 67 == 0;\n    return $p if $n % 71\
    \ == 0;\n    return $p if $n % 79 == 0;\n    return $p if $n % 83 == 0;\n    return\
    \ $p if $n % 89 == 0;\n    return $p if $n % 97 == 0;\n    return $p if $n % 101\
    \ == 0;\n    return $p if $n % 103 == 0;\n    return $p if $n % 105 == 0;\n  \
    \  return $p if $n % 107 == 0;\n    return $p if $n % 109 == 0;\n    return $p\
    \ if $n % 111 == 0;\n    return $p if $n % 113 == 0;\n    return $p if $n % 115\
    \ == 0;\n    return $p if $n % 117 == 0;\n    return $p if $n % 119 == 0;\n  \
    \  return $p if $n % 121 == 0;\n    return $p if $n % 123 == 0;\n    return $p\
    \ if $n % 125 == 0;\n    return $p if $n % 127 == 0;\n    return $p if $n % 129\
    \ == 0;\n    return $p if $n % 131 == 0;\n    return $p if $n % 133 == 0;\n  \
    \  return $p if $n % 135 == 0;\n    return $p if $n % 137 == 0;\n    return $p\
    \ if $n % 139 == 0;\n    return $p if $n % 141 == 0;\n    return $p if $n % 143\
    \ == 0;\n    return $p if $n % 145 == 0;\n    return $p if $n % 147 == 0;\n  \
    \  return $p if $n % 149 == 0;\n    return $p if $n % 151 == 0;\n    return $p\
    \ if $n % 153 == 0;\n    return $p if $n % 155 == 0;\n    return $p if $n % 157\
    \ == 0;\n    return $p if $n % 159 == 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmph9i9io7x.pl line 92, at
    end of line

    syntax error at /tmp/tmph9i9io7x.pl line 92, at EOF

    Execution of /tmp/tmph9i9io7x.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $n if $n == 1;\n    return\
    \ $p if $p < 2;\n    return $p if $n == $p;\n    return $p if $n % $p;\n    return\
    \ $p if $n % $p == 0;\n    return $p if $n != $p && $n % $p == 1;\n    return\
    \ $p if $n != $p && $n % $p != 0;\n    return $p;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $q = $p;\n    my $t = 1;\n\
    \    my $k = 0;\n    my $z = 0;\n    my $w = 0;\n    my $e = 0;\n    my $r2 =\
    \ 1;\n    my $r3 = 0;\n    my $r4 = 0;\n    my $r5 = 0;\n    my $r6 = 0;\n   \
    \ my $r7 = 0;\n    my $r8 = 0;\n    my $r9 = 0;\n    my $r10 = 0;\n    my $r11\
    \ = 0;\n    my $r12 = 0;\n    my $r13 = 0;\n    my $r14 = 0;\n    my $r15 = 0;\n\
    \    my $r16 = 0;\n    my $r17 = 0;\n    my $r18 = 0;\n    my $r19 = 0;\n    my\
    \ $r20 = 0;\n    my $r21 = 0;\n    my $r22 = 0;\n    my $r23 = 0;\n    my $r24\
    \ = 0;\n    my $r25 = 0;\n    my $r26 = 0;\n    my $r27 = 0;\n    my $r28 = 0;\n\
    \    my $r29 = 0;\n    my $r30 = 0;\n    my $r31 = 0;\n    my $r32 = 0;\n    my\
    \ $r33 = 0;\n    my $r34 = 0;\n    my $r35 = 0;\n    my $r36 = 0;\n    my $r37\
    \ = 0;\n    my $r38 = 0;\n    my $r39 = 0;\n    my $r40 = 0;\n    my $r41 = 0;\n\
    \    my $r42 = 0;\n    my $r43 = 0;\n    my $r44 = 0;\n    my $r45 = 0;\n    my\
    \ $r46 = 0;\n    my $r47 = 0;\n    my $r48 = 0;\n    my $r49 = 0;\n    my $r50\
    \ = 0;\n    my $r51 = 0;\n    my $r52 = 0;\n    my $r53 = 0;\n    my $r54 = 0;\n\
    \    my $r55 = 0;\n    my $r56 = 0;\n    my $r57 = 0;\n    my $r58 = 0;\n    my\
    \ $r59 = 0;\n    my $r60 = 0;\n    my $r61 = 0;\n    my $r62 = 0;\n    my $r63\
    \ = 0;\n    my $r64 = 0;\n    my $r65 = 0;\n    my $r66 = 0;\n    my $r67 = 0;\n\
    \    my $r68 = 0;\n    my $r69 = 0;\n    my $r70 = 0;\n    my $r71 = 0;\n    my\
    \ $r72 = 0;\n    my $r73 = 0;\n    my $r74 = 0;\n    my $r75 = 0;\n    my $r76\
    \ = 0;\n    my $r77 = 0;\n    my $r78 = 0;\n    my $r79 = 0;\n    my $r80 = 0;\n\
    \    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmper66upiq.pl line 92,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmper66upiq.pl line 92, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmper66upiq.pl line 127, at end of line\nsyntax\
    \ error at /tmp/tmper66upiq.pl line 127, at EOF\nExecution of /tmp/tmper66upiq.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 0;\n    return $p\
    \ if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == -1;\n    return\
    \ $p if $n == -2;\n    return $p if $n == -4;\n    return $p if $n == -8;\n  \
    \  return $p if $n == -16;\n    return $p if $n == -32;\n    return $p if $n ==\
    \ -64;\n    return $p if $n == -128 or $n == -256;\n    return $p if $n == -256;\n\
    \    return $p if $n == -65536;\n    return $p if $n == -8388608;\n    return\
    \ $p if $n == -2147483648;\n    return $p if $n == -2147483647;\n    return $p\
    \ if $n == -2147483646;\n    return $p if $n == -2147483645;\n    return $p if\
    \ $n == -2147483644;\n    return $p if $n == -2147483643;\n    return $p if $n\
    \ == -2147483642;\n    return $p if $n == -2147483641;\n    return $p if $n ==\
    \ -2147483640;\n    return $p if $n == -2147483639;\n    return $p if $n == -2147483638;\n\
    \    return $p if $n == -2147483637;\n    return $p if $n == -2147483636;\n  \
    \  return $p if $n == -2147483635;\n    return $p if $n == -2147483634;\n    return\
    \ $p if $n == -2147483633;\n    return $p if $n == -2147483632;\n    return $p\
    \ if $n == -2147483631;\n    return $p if $n == -2147483630;\n    return $p if\
    \ $n == -2147483649;\n    return $p if $n == -2147483639;\n    return $p if $n\
    \ == -2147483638;\n    return $p if $n == -2147483637;\n    return $p if $n ==\
    \ -2147483636;\n    return $p if $n == -2147483635;\n    return $p if $n == -2147483634;\n\
    \    return $p if $n == -2147483633;\n    return $p if $n == -2147483632;\n  \
    \  return $p if $n == -2147483631;\n    return $p if $n == -2147483630;\n    return\
    \ $p if $n == -2147483649;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp8a1ivlbw.pl line 86, at
    end of line

    syntax error at /tmp/tmp8a1ivlbw.pl line 86, at EOF

    Execution of /tmp/tmp8a1ivlbw.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $m = 1;\n    while ($m <= $p) {\n       \
    \ $r = ($r * $n) % $p;\n        $m++;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = $n;\n    my $mask = $p >> 1;\n    while ($mask) {\n\
    \        $res *= $p;\n        $res %= $p;\n        $mask >>= 1;\n    }\n    return\
    \ $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n if $n == 1;\n    return $p if $p == 1;\n    return $n if $n == $p;\n    return\
    \ $p if $p == $n;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % ($p - 1);\n    return $p if $p % ($p - 1);\n    return $n if $n %\
    \ ($p - 2);\n    return $p if $p % ($p - 2);\n    return $n if $n % ($p - 3);\n\
    \    return $p if $p % ($p - 3);\n    return $n if $n % ($p - 4);\n    return\
    \ $p if $p % ($p - 4);\n    return $n if $n % ($p - 5);\n    return $p if $p %\
    \ ($p - 5);\n    return $n if $n % ($p - 6);\n    return $p if $p % ($p - 6);\n\
    \    return $n if $n % ($p - 7);\n    return $p if $p % ($p - 7);\n    return\
    \ $n if $n % ($p - 8);\n    return $p if $p % ($p - 8);\n    return $n if $n %\
    \ ($p - 9);\n    return $p if $p % ($p - 9);\n    return $n if $n % ($p - 10);\n\
    \    return $p if $p % ($p - 10);\n    return $n if $n % ($p - 11);\n    return\
    \ $p if $p % ($p - 11);\n    return $n if $n % ($p - 12);\n    return $p if $p\
    \ % ($p - 12);\n    return $n if $n % ($p - 13);\n    return $p if $p % ($p -\
    \ 13);\n    return $n if $n % ($p - 14);\n    return $p if $p % ($p - 14);\n \
    \   return $n if $n % ($p - 15);\n    return $p if $p % ($p - 15);\n    return\
    \ $n if $n % ($p - 16);\n    return $p if $p % ($p - 16);\n    return $n if $n\
    \ % ($p - 17);\n    return $p if $p % ($p - 17);\n    return $n if $n % ($p -\
    \ 18);\n    return $p if $p % ($p - 18);\n    return $n if $n % ($p - 19);\n \
    \   return $p if $p % ($p - 19);\n    return $n if $n % ($p - 20);\n    return\
    \ $p if $p % (\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp69c33eg4.pl line 52, at end
    of line

    syntax error at /tmp/tmp69c33eg4.pl line 52, near "(

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp69c33eg4.pl line 87, at end of
    line

    syntax error at /tmp/tmp69c33eg4.pl line 87, at EOF

    Execution of /tmp/tmp69c33eg4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    return $r if $r != 0;\n    return $p;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n    my $x\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpbqmvr2ql.pl line 107, at end
    of line

    syntax error at /tmp/tmpbqmvr2ql.pl line 107, near "$x

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpbqmvr2ql.pl line 142, at end
    of line

    syntax error at /tmp/tmpbqmvr2ql.pl line 142, at EOF

    Execution of /tmp/tmpbqmvr2ql.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $m = 1;\n    while ($m <= $p) {\n       \
    \ $r = ($r * $n) % $p;\n        $m++;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 1;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmptauc4n29.pl line 41, at
    end of line

    syntax error at /tmp/tmptauc4n29.pl line 41, at EOF

    Execution of /tmp/tmptauc4n29.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n if $n == 1;\n    return $p if $p == 1;\n    return $n if $n == $p;\n    return\
    \ $p if $p == $n;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p == 0;\n    return $p if $n % $p == 0;\n    return $n if $n % $p\
    \ == $p;\n    return $p if $n % $p == $p;\n    return $n if $n % $p == $n / $p;\n\
    \    return $p if $n % $p == $n / $p;\n    return $n if $n % $p == ($n / $p) *\
    \ $p;\n    return $p if $n % $p == ($n / $p) * $p;\n    return $n if $n % $p ==\
    \ ($n / $p) * $p + ($n / $p);\n    return $p if $n % $p == ($n / $p) * $p + ($n\
    \ / $p);\n    return $n if $n % $p == ($n / $p) * $p + ($n / $p) + ($n / $p);\n\
    \    return $p if $n % $p == ($n / $p) * $p + ($n / $p) + ($n / $p) + ($n / $p);\n\
    \    return $n if $n % $p == ($n / $p) * $p + ($n / $p) + ($n / $p) + ($n / $p)\
    \ + ($n / $p);\n    return $p if $n % $p == ($n / $p) * $p + ($n / $p) + ($n /\
    \ $p) + ($n / $p) + ($n / $p) + ($n / $p);\n    return $n if $n % $p == ($n /\
    \ $p) * $p + ($n / $p) + ($n / $p) + ($n / $p) + ($n / $p) + ($n / $p) + ($n /\
    \ $p);\n    return $p if $n % $p == ($n / $p) * $p + ($n / $p) + ($n / $p) + ($n\
    \ / $p) + ($n / $p) + ($n / $p) + ($n / $p) + ($n / $p);\n    return $n if $n\
    \ % $p == ($\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpeuhk7xs1.pl line 29,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpeuhk7xs1.pl line 29, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpeuhk7xs1.pl line 64, at end of line\nsyntax\
    \ error at /tmp/tmpeuhk7xs1.pl line 64, at EOF\nExecution of /tmp/tmpeuhk7xs1.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $m = 1;\n    while ($m <= $p) {\n       \
    \ $r = ($r * $n) % $p;\n        $m++;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    while ($n > 0) {\n        $r\
    \ *= $p;\n        $r %= $m;\n        $m *= $p;\n        $m %= $p;\n        $n\
    \ -= 1;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmp1taykz4z.pl line 8.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $p if $n >= $p;\n    return $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $t = $n;\n    my $mask = $p >> 1;\n    my\
    \ $shift;\n    my $carry = 0;\n    my $i;\n    my $j;\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmptl310w__.pl line 46, at
    end of line

    syntax error at /tmp/tmptl310w__.pl line 46, at EOF

    Execution of /tmp/tmptl310w__.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $t = 1;\n    my $m = 1;\n    my $k = 0;\n\
    \    my $z = 0;\n    my $zk = 0;\n    my $zk2 = 0;\n    my $zk3 = 0;\n    my $zk4\
    \ = 0;\n    my $zk5 = 0;\n    my $zk6 = 0;\n    my $zk7 = 0;\n    my $zk8 = 0;\n\
    \    my $zk9 = 0;\n    my $zk10 = 0;\n    my $zk11 = 0;\n    my $zk12 = 0;\n \
    \   my $zk13 = 0;\n    my $zk14 = 0;\n    my $zk15 = 0;\n    my $zk16 = 0;\n \
    \   my $zk17 = 0;\n    my $zk18 = 0;\n    my $zk19 = 0;\n    my $zk20 = 0;\n \
    \   my $zk21 = 0;\n    my $zk22 = 0;\n    my $zk23 = 0;\n    my $zk24 = 0;\n \
    \   my $zk25 = 0;\n    my $zk26 = 0;\n    my $zk27 = 0;\n    my $zk28 = 0;\n \
    \   my $zk29 = 0;\n    my $zk30 = 0;\n    my $zk31 = 0;\n    my $zk32 = 0;\n \
    \   my $zk33 = 0;\n    my $zk34 = 0;\n    my $zk35 = 0;\n    my $zk36 = 0;\n \
    \   my $zk37 = 0;\n    my $zk38 = 0;\n    my $zk39 = 0;\n    my $zk40 = 0;\n \
    \   my $zk41 = 0;\n    my $zk42 = 0;\n    my $zk43 = 0;\n    my $zk44 = 0;\n \
    \   my $zk45 = 0;\n    my $zk46 = 0;\n    my $zk47 = 0;\n    my $zk48 = 0;\n \
    \   my $zk49 = 0;\n    my $zk50 = 0;\n    my $zk51 = 0;\n    my $zk52 = 0;\n \
    \   my $zk53 = 0;\n    my $zk54 = 0;\n    my $zk55 = 0;\n    my $zk56 = 0;\n \
    \   my $zk57 = 0;\n    my $zk58 = 0;\n    my $zk59 = 0;\n    my $zk60 = 0;\n \
    \   my $zk61 = 0;\n    my $zk62 = 0;\n    my $zk63 = 0;\n    my $zk64 = 0;\n \
    \   my $zk65 = 0;\n    my $zk66 = 0;\n    my $zk67 = 0;\n    my $zk68 = 0;\n \
    \   my $zk69 = 0;\n    my $zk70 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpa5hjtbng.pl line 80,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpa5hjtbng.pl line 80, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpa5hjtbng.pl line 115, at end of line\nsyntax\
    \ error at /tmp/tmpa5hjtbng.pl line 115, at EOF\nExecution of /tmp/tmpa5hjtbng.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 0;\n    my $i = 1;\n    my $j = 1;\n    my $k = 0;\n\
    \    my $tmp;\n    while($i < $n) {\n\t$tmp = $j;\n\t$j = ($k << 1) + 1;\n\t$k\
    \ = $tmp;\n\t$res = $res * $p + ($i & $k);\n\t$i++;\n    }\n    return $res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 1;\n    return $p\
    \ if $n == 0;\n    return $p if $n == 1;\n    return $p * modp($n / $p, $p) %\
    \ $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $mask = (1 << $p) - 1;\n    while ($r >=\
    \ $p) {\n        $r %= $p;\n        $r &= $mask;\n    }\n    return $r;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n       \
    \ if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    return $r == 0 ? $p : $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = 0;\n    my $w = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w2 = 0;\n    my $w3 = 0;\n    my $w4\
    \ = 0;\n    my $w5 = 0;\n    my $w6 = 0;\n    my $w7 = 0;\n    my $w8 = 0;\n \
    \   my $w9 = 0;\n    my $w10 = 0;\n    my $w11 = 0;\n    my $w12 = 0;\n    my\
    \ $w13 = 0;\n    my $w14 = 0;\n    my $w15 = 0;\n    my $w16 = 0;\n    my $w17\
    \ = 0;\n    my $w18 = 0;\n    my $w19 = 0;\n    my $w20 = 0;\n    my $w21 = 0;\n\
    \    my $w22 = 0;\n    my $w23 = 0;\n    my $w24 = 0;\n    my $w25 = 0;\n    my\
    \ $w26 = 0;\n    my $w27 = 0;\n    my $w28 = 0;\n    my $w29 = 0;\n    my $w30\
    \ = 0;\n    my $w31 = 0;\n    my $w32 = 0;\n    my $w33 = 0;\n    my $w34 = 0;\n\
    \    my $w35 = 0;\n    my $w36 = 0;\n    my $w37 = 0;\n    my $w38 = 0;\n    my\
    \ $w39 = 0;\n    my $w40 = 0;\n    my $w41 = 0;\n    my $w42 = 0;\n    my $w43\
    \ = 0;\n    my $w44 = 0;\n    my $w45 = 0;\n    my $w46 = 0;\n    my $w47 = 0;\n\
    \    my $w48 = 0;\n    my $w49 = 0;\n    my $w50 = 0;\n    my $w51 = 0;\n    my\
    \ $w52 = 0;\n    my $w53 = 0;\n    my $w54 = 0;\n    my $w55 = 0;\n    my $w56\
    \ = 0;\n    my $w57 = 0;\n    my $w58 = 0;\n    my $w59 = 0;\n    my $w60 = 0;\n\
    \    my $w61 = 0;\n    my $w62 = 0;\n    my $w63 = 0;\n    my $w64 = 0;\n    my\
    \ $w65 = 0;\n    my $w66 = 0;\n    my $w67 = 0;\n    my $w68 = 0;\n    my $w69\
    \ = 0;\n    my $w70 = 0;\n    my $w71 = 0;\n    my $w72 = 0;\n    my $w73 = 0;\n\
    \    my $w74 = 0;\n    my $w75 = 0;\n    my $w76 = 0;\n    my $w77 = 0;\n    my\
    \ $w78 = 0;\n    my $w79 = 0;\n    my $w80 = 0;\n    my $w81 = 0;\n    my $w82\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n     \
    \   if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpwghtmtgz.pl line 91, at end
    of line

    syntax error at /tmp/tmpwghtmtgz.pl line 91, near "$w82

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpwghtmtgz.pl line 126, at end
    of line

    syntax error at /tmp/tmpwghtmtgz.pl line 126, at EOF

    Execution of /tmp/tmpwghtmtgz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $q = 0;\n    my $k = 0;\n\
    \    my $j = 0;\n    my $i = 0;\n    my $w = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n\
    \    my $w = 1;\n    my $u = 1;\n    my $v = 1;\n    my $x = 1;\n    my $y = 1;\n\
    \    my $z = 1;\n    my $w = 1;\n    my $u = 1;\n    my $v = 1;\n    my $x = 1;\n\
    \    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n    my $u = 1;\n    my $v = 1;\n\
    \    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n    my $u = 1;\n\
    \    my $v = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n\
    \    my $u = 1;\n    my $v = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n\
    \    my $w = 1;\n    my $u = 1;\n    my $v = 1;\n    my $x = 1;\n    my $y = 1;\n\
    \    my $z = 1;\n    my $w = 1;\n    my $u = 1;\n    my $v = 1;\n    my $x = 1;\n\
    \    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n    my $u = 1;\n    my $v = 1;\n\
    \    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n    my $u = 1;\n\
    \    my $v = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n\
    \    my $u = 1;\n    my $v = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n\
    \    my $w = 1;\n    my $u = 1;\n    my $v = 1;\n    my $x = 1;\n    my $y = 1;\n\
    \    my $z = 1;\n    my $w = 1;\n    my $u = 1;\n    my $v = 1;\n    my $x = 1;\n\
    \    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n    my $u = 1;\n    my $v = 1;\n\
    \    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n    my $u = 1;\n\
    \    my $v = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n\
    \    my $u = 1;\n    my $v = 1;\n    my $x = 1;\n    my $y = 1;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp72y5cmmp.pl line 142,
    at end of line

    syntax error at /tmp/tmp72y5cmmp.pl line 142, at EOF

    Execution of /tmp/tmp72y5cmmp.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n if $n == 1;\n    return $p if $p == 1;\n    return $n if $n == $p;\n    return\
    \ $p if $n == $p;\n    return $n if $n % $p == 0;\n    return $p if $n % $p ==\
    \ 0;\n    return $n if $n % $p == $p;\n    return $p if $n % $p == $p;\n    return\
    \ $n if $n % $p == $p;\n    return $p if $n % $p == $p;\n    return $n if $n %\
    \ $p == $p;\n    return $p if $n % $p == $p;\n    return $n if $n % $p == $p;\n\
    \    return $p if $n % $p == $p;\n    return $n if $n % $p == $p;\n    return\
    \ $p if $n % $p == $p;\n    return $n if $n % $p == $p;\n    return $p if $n %\
    \ $p == $p;\n    return $n if $n % $p == $p;\n    return $p if $n % $p == $p;\n\
    \    return $n if $n % $p == $p;\n    return $p if $n % $p == $p;\n    return\
    \ $n if $n % $p == $p;\n    return $p if $n % $p == $p;\n    return $n if $n %\
    \ $p == $p;\n    return $p if $n % $p == $p;\n    return $n if $n % $p == $p;\n\
    \    return $p if $n % $p == $p;\n    return $n if $n % $p == $p;\n    return\
    \ $p if $n % $p == $p;\n    return $n if $n % $p == $p;\n    return $p if $n %\
    \ $p == $p;\n    return $n if $n % $p == $p;\n    return $p if $n % $p == $p;\n\
    \    return $n if $n % $p == $p;\n    return $p if $n % $p == $p;\n    return\
    \ $n if $n % $p == $p;\n    return $p if $n % $p == $p;\n    return $n if $n %\
    \ $p == $p;\n    return $p if $n % $p == $p;\n    return $n if $n % $p == $p;\n\
    \    return $p if $n % $p == $p;\n    return $n if $\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpccd8muxl.pl line 49,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpccd8muxl.pl line 49, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpccd8muxl.pl line 84, at end of line\nsyntax\
    \ error at /tmp/tmpccd8muxl.pl line 84, at EOF\nExecution of /tmp/tmpccd8muxl.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    if ($r == 0) {\n\treturn $p;\n    }\n \
    \   return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: -1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $m = $p->{mod};\n    return $m if $m == $n;\n    return $m\
    \ == $p ? $n : modp($n, $p);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013902
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $q = 1;\n    my $t = 1;\n\
    \    my $k = 1;\n    my $z = 1;\n    my $y = 1;\n    my $x = 1;\n    my $w = 1;\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n     \
    \   if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp4qda7_7u.pl line 48, at
    end of line

    syntax error at /tmp/tmp4qda7_7u.pl line 48, at EOF

    Execution of /tmp/tmp4qda7_7u.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $k = 0;\n    my $z = 0;\n\
    \    my $w = 0;\n    my $i = 0;\n    my $j = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpms76b2ec.pl line 46, at
    end of line

    syntax error at /tmp/tmpms76b2ec.pl line 46, at EOF

    Execution of /tmp/tmpms76b2ec.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 0;\n    my $i = 1;\n    my $j = 1;\n    my $k = 1;\n\
    \    my $m = 1;\n    my $q = 1;\n    my $r = 1;\n    my $s = 1;\n    my $t = 1;\n\
    \    my $u = 1;\n    my $v = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n\
    \    my $z = 1;\n    my $a = 1;\n    my $b = 1;\n    my $c = 1;\n    my $d = 1;\n\
    \    my $e = 1;\n    my $f = 1;\n    my $g = 1;\n    my $h = 1;\n    my $i = 1;\n\
    \    my $j = 1;\n    my $k = 1;\n    my $m = 1;\n    my $q = 1;\n    my $r = 1;\n\
    \    my $s = 1;\n    my $t = 1;\n    my $u = 1;\n    my $v = 1;\n    my $w = 1;\n\
    \    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $a = 1;\n    my $b = 1;\n\
    \    my $c = 1;\n    my $d = 1;\n    my $e = 1;\n    my $f = 1;\n    my $g = 1;\n\
    \    my $h = 1;\n    my $i = 1;\n    my $j = 1;\n    my $k = 1;\n    my $m = 1;\n\
    \    my $q = 1;\n    my $r = 1;\n    my $s = 1;\n    my $t = 1;\n    my $u = 1;\n\
    \    my $v = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n\
    \    my $a = 1;\n    my $b = 1;\n    my $c = 1;\n    my $d = 1;\n    my $e = 1;\n\
    \    my $f = 1;\n    my $g = 1;\n    my $h = 1;\n    my $i = 1;\n    my $j = 1;\n\
    \    my $k = 1;\n    my $m = 1;\n    my $q = 1;\n    my $r = 1;\n    my $s = 1;\n\
    \    my $t = 1;\n    my $u = 1;\n    my $v = 1;\n    my $w = 1;\n    my $x = 1;\n\
    \    my $y = 1;\n    my $z = 1;\n    my $a = 1;\n    my $b = 1;\n    my $c = 1;\n\
    \    my $d = 1;\n    my $e = 1;\n    my $f = 1;\n    my $g = 1;\n    my $h = 1;\n\
    \    my $i = 1;\n    my $j = 1;\n    my $k = 1;\n    my $m = 1;\n    my $q = 1;\n\
    \    my $r = 1;\n    my $s = 1;\n    my $t = 1;\n    my $u = 1;\n    my $v = 1;\n\
    \    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpxca1j79i.pl line 107,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpxca1j79i.pl line 107, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpxca1j79i.pl line 142, at end of line\nsyntax\
    \ error at /tmp/tmpxca1j79i.pl line 142, at EOF\nExecution of /tmp/tmpxca1j79i.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $q = 1;\n    my $e = 0;\n\
    \    my $k = 0;\n    my $z = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n\
    \    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n\
    \    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp7p8u59sf.pl line 109,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp7p8u59sf.pl line 109, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp7p8u59sf.pl line 144, at end of line\nsyntax\
    \ error at /tmp/tmp7p8u59sf.pl line 144, at EOF\nExecution of /tmp/tmp7p8u59sf.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    while ($n >= $p) {\n        $r\
    \ *= $m;\n        $m += 1;\n        $n -= $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 1;\n    my $i = 1;\n    my $j = 1;\n    my $k = 1;\n\
    \    my $m = 1;\n    my $q = 1;\n    my $r = 1;\n    my $s = 1;\n    my $t = 1;\n\
    \    my $u = 1;\n    my $v = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n\
    \    my $z = 1;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpridwti_4.pl line 54, at
    end of line

    syntax error at /tmp/tmpridwti_4.pl line 54, at EOF

    Execution of /tmp/tmpridwti_4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $m = $n;\n    my $q = $p;\n    my $r = 1;\n    my $s = 1;\n\
    \    while ($q) {\n        $q = $q / $r;\n        $s = $s * $r;\n        $r =\
    \ $r * $p;\n    }\n    return $m;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $m = $p->{mod};\n    return $m if $m == 0;\n    return $n\
    \ if $n == 0;\n    return $n if $n == 1;\n    return $n if $n == $p;\n    return\
    \ $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n == 0;\n    return $p if $p == 1;\n    return\
    \ $p if $n <= $p;\n    return $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $m = 1;\n    my $q = 1;\n    my $e = 0;\n\
    \    my $k = 0;\n    my $w = 1;\n    my $x = 0;\n    my $y = 1;\n    my $z = 1;\n\
    \    my $w1 = $w;\n    my $w2 = $w;\n    my $w3 = $w;\n    my $w4 = $w;\n    my\
    \ $w5 = $w;\n    my $w6 = $w;\n    my $w7 = $w;\n    my $w8 = $w;\n    my $w9\
    \ = $w;\n    my $w10 = $w;\n    my $w11 = $w;\n    my $w12 = $w;\n    my $w13\
    \ = $w;\n    my $w14 = $w;\n    my $w15 = $w;\n    my $w16 = $w;\n    my $w17\
    \ = $w;\n    my $w18 = $w;\n    my $w19 = $w;\n    my $w20 = $w;\n    my $w21\
    \ = $w;\n    my $w22 = $w;\n    my $w23 = $w;\n    my $w24 = $w;\n    my $w25\
    \ = $w;\n    my $w26 = $w;\n    my $w27 = $w;\n    my $w28 = $w;\n    my $w29\
    \ = $w;\n    my $w30 = $w;\n    my $w31 = $w;\n    my $w32 = $w;\n    my $w33\
    \ = $w;\n    my $w34 = $w;\n    my $w35 = $w;\n    my $w36 = $w;\n    my $w37\
    \ = $w;\n    my $w38 = $w;\n    my $w39 = $w;\n    my $w40 = $w;\n    my $w41\
    \ = $w;\n    my $w42 = $w;\n    my $w43 = $w;\n    my $w44 = $w;\n    my $w45\
    \ = $w;\n    my $w46 = $w;\n    my $w47 = $w;\n    my $w48 = $w;\n    my $w49\
    \ = $w;\n    my $w50 = $w;\n    my $w51 = $w;\n    my $w52 = $w;\n    my $w53\
    \ = $w;\n    my $w54 = $w;\n    my $w55 = $w;\n    my $w56 = $w;\n    my $w57\
    \ = $w;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpymp1orsv.pl line 71,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpymp1orsv.pl line 71, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpymp1orsv.pl line 106, at end of line\nsyntax\
    \ error at /tmp/tmpymp1orsv.pl line 106, at EOF\nExecution of /tmp/tmpymp1orsv.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = $n;\n    my $r = $x;\n\
    \    my $s = $y;\n    my $t = $z;\n    my $u = $n;\n    my $v = 0;\n    my $w\
    \ = 0;\n    my $xs = 0;\n    my $ys = 0;\n    my $zs = 0;\n    my $ts = 0;\n \
    \   my $us = 0;\n    my $vs = 0;\n    my $ws = 0;\n    my $xu = 0;\n    my $yu\
    \ = 0;\n    my $zu = 0;\n    my $tu = 0;\n    my $uu = 0;\n    my $vu = 0;\n \
    \   my $wu = 0;\n    my $xus = 0;\n    my $yus = 0;\n    my $zus = 0;\n    my\
    \ $tun = 0;\n    my $uuu = 0;\n    my $vuu = 0;\n    my $wuu = 0;\n    my $xuss\
    \ = 0;\n    my $yuss = 0;\n    my $zuss = 0;\n    my $tuns = 0;\n    my $uuus\
    \ = 0;\n    my $vuus = 0;\n    my $wuus = 0;\n    my $xuuss = 0;\n    my $yuuss\
    \ = 0;\n    my $zuuss = 0;\n    my $tunuss = 0;\n    my $uuuuss = 0;\n    my $vuuuss\
    \ = 0;\n    my $wuuuss = 0;\n    my $xuussu = 0;\n    my $yuussu = 0;\n    my\
    \ $zuussu = 0;\n    my $tunussu = 0;\n    my $uuuussu = 0;\n    my $vuuussu =\
    \ 0;\n    my $wuuussu = 0;\n    my $xuussv = 0;\n    my $yuussv = 0;\n    my $zuussv\
    \ = 0;\n    my $tunussv = 0;\n    my $uuuussv = 0;\n    my $vuuussv = 0;\n   \
    \ my $wuuussv = 0;\n    my $xuussw = 0;\n    my $yuussw = 0;\n    my $zuussw =\
    \ 0;\n    my $tunussw = 0;\n    my $uuuussw = 0;\n    my $vuuussw = 0;\n    my\
    \ $wuuussw = 0;\n    my $xuussx = 0;\n    my $yuussx = 0;\n    my $zuussx = 0;\n\
    \    my $tunussx = 0;\n    my $uuuussx = 0;\n    my $vuuussx = 0;\n    my $wuuussx\
    \ = 0;\n    my $xuussy = 0;\n    my $yuussy = 0;\n    my $zuussy = 0;\n    my\
    \ $tunussy = 0;\n    my $uuuussy = 0;\n    my $vuuus\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmponc47dj_.pl line 82, at end
    of line

    syntax error at /tmp/tmponc47dj_.pl line 82, near "$vuuus

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmponc47dj_.pl line 117, at end
    of line

    syntax error at /tmp/tmponc47dj_.pl line 117, at EOF

    Execution of /tmp/tmponc47dj_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = $x;\n    my $w = $y;\n\
    \    my $u = $z;\n    my $v = 0;\n    my $wu = 0;\n    my $vu = 0;\n    my $wv\
    \ = 0;\n    my $vuw = 0;\n    my $vuwv = 0;\n    my $wvu = 0;\n    my $vuwu =\
    \ 0;\n    my $vuwvu = 0;\n    my $wvuw = 0;\n    my $vuwvuw = 0;\n    my $wvuwvuw\
    \ = 0;\n    my $vuwvuwv = 0;\n    my $wvuwvuwv = 0;\n    my $vuwvuwvu = 0;\n \
    \   my $wvuwvuwvu = 0;\n    my $vuwvuwvuw = 0;\n    my $wvuwvuwvuw = 0;\n    my\
    \ $vuwvuwvuw = 0;\n    my $wvuwvuwvuw = 0;\n    my $vuwvuwvuw = 0;\n    my $wvuwvuwvuw\
    \ = 0;\n    my $vuwvuwvuw = 0;\n    my $wvuwvuwvuw = 0;\n    my $vuwvuwvuw = 0;\n\
    \    my $wvuwvuwvuw = 0;\n    my $vuwvuwvuw = 0;\n    my $wvuwvuwvuw = 0;\n  \
    \  my $vuwvuwvuw = 0;\n    my $wvuwvuwvuw = 0;\n    my $vuwvuwvuw = 0;\n    my\
    \ $wvuwvuwvuw = 0;\n    my $vuwvuwvuw = 0;\n    my $wvuwvuwvuw = 0;\n    my $vuwvuwvuw\
    \ = 0;\n    my $wvuwvuwvuw = 0;\n    my $vuwvuwvuw = 0;\n    my $wvuwvuwvuw =\
    \ 0;\n    my $vuwvuwvuw = 0;\n    my $wvuwvuwvuw = 0;\n    my $vuwvuwvuw = 0;\n\
    \    my $wvuw\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmprxeotpaa.pl line 51, at end
    of line

    syntax error at /tmp/tmprxeotpaa.pl line 51, near "$wvuw

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmprxeotpaa.pl line 86, at end of
    line

    syntax error at /tmp/tmprxeotpaa.pl line 86, at EOF

    Execution of /tmp/tmprxeotpaa.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $m = 1;\n    my $q = $p;\n    my $r = 1;\n    my $s = 1;\n\
    \    my $t = 1;\n    my $u = 1;\n    my $v = 1;\n    my $w = 1;\n    my $x = 1;\n\
    \    my $y = 1;\n    my $z = 1;\n    my $a = 1;\n    my $b = 1;\n    my $c = 1;\n\
    \    my $d = 1;\n    my $e = 1;\n    my $f = 1;\n    my $g = 1;\n    my $h = 1;\n\
    \    my $i = 1;\n    my $j = 1;\n    my $k = 1;\n    my $l = 1;\n    my $m = 1;\n\
    \    my $n = 1;\n    my $o = 1;\n    my $p = 1;\n    my $q = 1;\n    my $r = 1;\n\
    \    my $s = 1;\n    my $t = 1;\n    my $u = 1;\n    my $v = 1;\n    my $w = 1;\n\
    \    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $a = 1;\n    my $b = 1;\n\
    \    my $c = 1;\n    my $d = 1;\n    my $e = 1;\n    my $f = 1;\n    my $g = 1;\n\
    \    my $h = 1;\n    my $i = 1;\n    my $j = 1;\n    my $k = 1;\n    my $l = 1;\n\
    \    my $m = 1;\n    my $n = 1;\n    my $o = 1;\n    my $p = 1;\n    my $q = 1;\n\
    \    my $r = 1;\n    my $s = 1;\n    my $t = 1;\n    my $u = 1;\n    my $v = 1;\n\
    \    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $a = 1;\n\
    \    my $b = 1;\n    my $c = 1;\n    my $d = 1;\n    my $e = 1;\n    my $f = 1;\n\
    \    my $g = 1;\n    my $h = 1;\n    my $i = 1;\n    my $j = 1;\n    my $k = 1;\n\
    \    my $l = 1;\n    my $m = 1;\n    my $n = 1;\n    my $o = 1;\n    my $p = 1;\n\
    \    my $q = 1;\n    my $r = 1;\n    my $s = 1;\n    my $t = 1;\n    my $u = 1;\n\
    \    my $v = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n\
    \    my $a = 1;\n    my $b = 1;\n    my $c = 1;\n    my $d = 1;\n    my $e = 1;\n\
    \    my $f = 1;\n    my $g = 1;\n    my $h = 1;\n    my $i = 1;\n    my $j = 1;\n\
    \    my $k = 1;\n    my $l = 1;\n    my $m = 1;\n    \nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpvxkiowlu.pl line 142,
    at end of line

    syntax error at /tmp/tmpvxkiowlu.pl line 142, at EOF

    Execution of /tmp/tmpvxkiowlu.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 0;\n    my $tmp = $n;\n    my $mask = $p >> 1;\n  \
    \  my $shift = 0;\n    my $carry = 0;\n    my $i;\n    my $j;\n    my $k;\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n       \
    \ if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp7c0_xsp3.pl line 47, at
    end of line

    syntax error at /tmp/tmp7c0_xsp3.pl line 47, at EOF

    Execution of /tmp/tmp7c0_xsp3.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n if $n == 0;\n    return $p if $p == 0;\n    return $n if $n == $p;\n    return\
    \ $p if $p == $n;\n    return $n if $n % $p == 0;\n    return $p if $n % $p ==\
    \ 1;\n    return $n if $n % $p == -1;\n    return $p if $n % $p == -2;\n    return\
    \ $n if $n % $p == -3;\n    return $p if $n % $p == -4;\n    return $n if $n %\
    \ $p == -5;\n    return $p if $n % $p == -6;\n    return $n if $n % $p == -7;\n\
    \    return $p if $n % $p == -8;\n    return $n if $n % $p == -9;\n    return\
    \ $p if $n % $p == -10;\n    return $n if $n % $p == -11;\n    return $p if $n\
    \ % $p == -12;\n    return $n if $n % $p == -13;\n    return $p if $n % $p ==\
    \ -14;\n    return $n if $n % $p == -15;\n    return $p if $n % $p == -16;\n \
    \   return $n if $n % $p == -17;\n    return $p if $n % $p == -18;\n    return\
    \ $n if $n % $p == -19;\n    return $p if $n % $p == -20;\n    return $n if $n\
    \ % $p == -21;\n    return $p if $n % $p == -22;\n    return $n if $n % $p ==\
    \ -23;\n    return $p if $n % $p == -24;\n    return $n if $n % $p == -25;\n \
    \   return $p if $n % $p == -25;\n    return $n if $n % $p == -25;\n    return\
    \ $p if $n % $p == -25;\n    return $n if $n % $p == -25;\n    return $p if $n\
    \ % $p == -25;\n    return $n if $n % $p == -25;\n    return $p if $n % $p ==\
    \ -25;\n    return $n if $n % $p == -25;\n    return $p if $n % $p == -25;\n \
    \   return $n if $n % $p == -25;\n    return $p \nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "\"use\" not allowed in expression at /tmp/tmplaoa6tte.pl line 48, at end\
    \ of line\nsyntax error at /tmp/tmplaoa6tte.pl line 48, near \"$p \nuse Test::Deep\"\
    \nMissing right curly or square bracket at /tmp/tmplaoa6tte.pl line 83, at end\
    \ of line\nsyntax error at /tmp/tmplaoa6tte.pl line 83, at EOF\nExecution of /tmp/tmplaoa6tte.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 1;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmptauc4n29.pl line 41, at
    end of line

    syntax error at /tmp/tmptauc4n29.pl line 41, at EOF

    Execution of /tmp/tmptauc4n29.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n if $n == 1;\n    return $p if $p == 1;\n    return $n if $n == $p;\n    return\
    \ $p if $n == $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p == 0;\n    return $p if $n % $p == 0;\n    return $n if $n % $p\
    \ == $p;\n    return $p if $n % $p == $p;\n    return $n if $n % $p == $p && $n\
    \ != 1;\n    return $p if $n % $p == $p && $n != 1;\n    return $n if $n % $p\
    \ == $p && $n == 1;\n    return $p if $n % $p == $p && $n == 1;\n    return $n\
    \ if $n % $p == $p && $n == $p;\n    return $p if $n % $p == $p && $n == $p;\n\
    \    return $n if $n % $p == $p && $n == $p && $n != 1;\n    return $p if $n %\
    \ $p == $p && $n == $p && $n != 1;\n    return $n if $n % $p == $p && $n == $p\
    \ && $n == 1;\n    return $p if $n % $p == $p && $n == $p && $n == 1;\n    return\
    \ $n if $n % $p == $p && $n == $p && $n == $p;\n    return $p if $n % $p == $p\
    \ && $n == $p && $n == $p;\n    return $n if $n % $p == $p && $n == $p && $n ==\
    \ $p && $n != 1;\n    return $p if $n % $p == $p && $n == $p && $n == $p && $n\
    \ != 1;\n    return $n if $n % $p == $p && $n == $p && $n == $p && $n == 1;\n\
    \    return $p if $n % $p == $p && $n == $p && $n == $p && $n == 1;\n    return\
    \ $n if $n % $p == $p && $n == $p && $n == $p && $n == $p;\n    return $p if $n\
    \ % $p == $p && $n == $p && $n == $p && $n == $p;\n    return $n if $\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmps0vsde8n.pl line 35,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmps0vsde8n.pl line 35, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmps0vsde8n.pl line 70, at end of line\nsyntax\
    \ error at /tmp/tmps0vsde8n.pl line 70, at EOF\nExecution of /tmp/tmps0vsde8n.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $result = $n;\n    my $remainder = $n % $p;\n    $result -=\
    \ $remainder;\n    $result *= $p;\n    $result += $remainder;\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    return $r if $r != 0;\n    return $p;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 1;\n    return $p\
    \ if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == -1;\n    return\
    \ $p if $n == -2;\n    return $p if $n == -4;\n    return $p if $n == -8;\n  \
    \  return $p if $n == -16;\n    return $p if $n == -32;\n    return $p if $n ==\
    \ -64;\n    return $p if $n == -128 or $n == -129;\n    return $p if $n == -256;\n\
    \    return $p if $n == -263;\n    return $p if $n == -268;\n    return $p if\
    \ $n == -272;\n    return $p if $n == -276;\n    return $p if $n == -281;\n  \
    \  return $p if $n == -286;\n    return $p if $n == -291;\n    return $p if $n\
    \ == -296;\n    return $p if $n == -300;\n    return $p if $n == -305;\n    return\
    \ $p if $n == -310;\n    return $p if $n == -316;\n    return $p if $n == -321;\n\
    \    return $p if $n == -326;\n    return $p if $n == -331;\n    return $p if\
    \ $n == -336;\n    return $p if $n == -341;\n    return $p if $n == -346;\n  \
    \  return $p if $n == -351;\n    return $p if $n == -356;\n    return $p if $n\
    \ == -361;\n    return $p if $n == -366;\n    return $p if $n == -371;\n    return\
    \ $p if $n == -376;\n    return $p if $n == -381;\n    return $p if $n == -386;\n\
    \    return $p if $n == -391;\n    return $p if $n == -396;\n    return $p if\
    \ $n == -401;\n    return $p if $n == -406;\n    return $p if $n == -411;\n  \
    \  return $p if $n == -416;\n    return $p if $n == -422;\n    return $p if $n\
    \ == -427;\n    return $p if $n == -432;\n    return $p if $n == -437;\n    return\
    \ $p if $n == -442;\n    return $p if $n == -447;\n    return $p if $n == -452;\n\
    \    return $p if $n == \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpl1fr8ho2.pl line 57, at end
    of line

    syntax error at /tmp/tmpl1fr8ho2.pl line 57, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpl1fr8ho2.pl line 92, at end of
    line

    syntax error at /tmp/tmpl1fr8ho2.pl line 92, at EOF

    Execution of /tmp/tmpl1fr8ho2.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $k = 0;\n    my $j = 0;\n\
    \    my $i = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $w = 1;\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n     \
    \   if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpwroylm63.pl line 48, at
    end of line

    syntax error at /tmp/tmpwroylm63.pl line 48, at EOF

    Execution of /tmp/tmpwroylm63.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $m = 1;\n    my $q = $p;\n    while ($n >= $q) {\n       \
    \ $m = ($m * $q) % $p;\n        $q = ($q * $q) % $p;\n    }\n    return $m;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $q = $p;\n    my $t = 1;\n\
    \    my $e = 1;\n    my $k = 1;\n    my $z = 1;\n    my $x = 1;\n    my $y = 1;\n\
    \    my $w = 1;\n    my $a = 1;\n    my $b = 1;\n    my $c = 1;\n    my $d = 1;\n\
    \    my $e = 1;\n    my $f = 1;\n    my $g = 1;\n    my $h = 1;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 1;\n    my $n = 1;\n\
    \    my $o = 1;\n    my $p = 1;\n    my $q = 1;\n    my $r = 1;\n    my $s = 1;\n\
    \    my $t = 1;\n    my $u = 1;\n    my $v = 1;\n    my $w = 1;\n    my $x = 1;\n\
    \    my $y = 1;\n    my $z = 1;\n    my $a = 1;\n    my $b = 1;\n    my $c = 1;\n\
    \    my $d = 1;\n    my $e = 1;\n    my $f = 1;\n    my $g = 1;\n    my $h = 1;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 1;\n\
    \    my $n = 1;\n    my $o = 1;\n    my $p = 1;\n    my $q = 1;\n    my $r = 1;\n\
    \    my $s = 1;\n    my $t = 1;\n    my $u = 1;\n    my $v = 1;\n    my $w = 1;\n\
    \    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $a = 1;\n    my $b = 1;\n\
    \    my $c = 1;\n    my $d = 1;\n    my $e = 1;\n    my $f = 1;\n    my $g = 1;\n\
    \    my $h = 1;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 1;\n    my $n = 1;\n    my $o = 1;\n    my $p = 1;\n    my $q = 1;\n\
    \    my $r = 1;\n    my $s = 1;\n    my $t = 1;\n    my $u = 1;\n    my $v = 1;\n\
    \    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $a = 1;\n\
    \    my $b = 1;\n    my $c = 1;\n    my $d = 1;\n    my $e = 1;\n    my $f = 1;\n\
    \    my $g = 1;\n    my $h = 1;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 1;\n    my $n = 1;\n    my $o = 1;\n\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp_m31jtre.pl line 143,
    at end of line

    syntax error at /tmp/tmp_m31jtre.pl line 143, at EOF

    Execution of /tmp/tmp_m31jtre.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $k;\n    my $j;\n    my $i;\n\
    \    my $m;\n    my $k;\n    my $j;\n    my $i;\n    my $m;\n    my $k;\n    my\
    \ $j;\n    my $i;\n    my $m;\n    my $k;\n    my $j;\n    my $i;\n    my $m;\n\
    \    my $k;\n    my $j;\n    my $i;\n    my $m;\n    my $k;\n    my $j;\n    my\
    \ $i;\n    my $m;\n    my $k;\n    my $j;\n    my $i;\n    my $m;\n    my $k;\n\
    \    my $j;\n    my $i;\n    my $m;\n    my $k;\n    my $j;\n    my $i;\n    my\
    \ $m;\n    my $k;\n    my $j;\n    my $i;\n    my $m;\n    my $k;\n    my $j;\n\
    \    my $i;\n    my $m;\n    my $k;\n    my $j;\n    my $i;\n    my $m;\n    my\
    \ $k;\n    my $j;\n    my $i;\n    my $m;\n    my $k;\n    my $j;\n    my $i;\n\
    \    my $m;\n    my $k;\n    my $j;\n    my $i;\n    my $m;\n    my $k;\n    my\
    \ $j;\n    my $i;\n    my $m;\n    my $k;\n    my $j;\n    my $i;\n    my $m;\n\
    \    my $k;\n    my $j;\n    my $i;\n    my $m;\n    my $k;\n    my $j;\n    my\
    \ $i;\n    my $m;\n    my $k;\n    my $j;\n    my $i;\n    my $m;\n    my $k;\n\
    \    my $j;\n    my $i;\n    my $m;\n    my $k;\n    my $j;\n    my $i;\n    my\
    \ $m;\n    my $k;\n    my $j;\n    my $i;\n    my $m;\n    my $k;\n    my $j;\n\
    \    my $i;\n    my $m;\n    my $k;\n    my $j;\n    my $i;\n    my $m;\n    my\
    \ $k;\n    my $j;\n    my $i;\n    my $m;\n    my $k;\n    my $j;\n    my $i;\n\
    \    my $m;\n    my $k;\n    my $j;\n    my $i;\n    my $m;\n    my $k;\n    my\
    \ $j;\n    my $i;\n    my $m;\n    my $k;\n    my $j;\n\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp8xsetmm8.pl line 160,
    at end of line

    syntax error at /tmp/tmp8xsetmm8.pl line 160, at EOF

    Execution of /tmp/tmp8xsetmm8.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 1;\n    my $i = 1;\n    my $j = 1;\n    my $k = 1;\n\
    \    while ($i <= $n) {\n        $res = $res * $k % $p;\n        $j++;\n     \
    \   $k++;\n        $i++;\n    }\n    return $res;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p;\n    return\
    \ $p if $n % $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p;\n    return\
    \ $p if $n % $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p;\n    return\
    \ $p if $n % $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p;\n    return\
    \ $p if $n % $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p;\n    return\
    \ $p if $n % $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p;\n    return\
    \ $p if $n % $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p;\n    return\
    \ $p if $n % $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p;\n    return\
    \ $p if $n % $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p;\n    return\
    \ $p if $n % $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2xqlyoyr.pl line 96, at
    end of line

    syntax error at /tmp/tmp2xqlyoyr.pl line 96, at EOF

    Execution of /tmp/tmp2xqlyoyr.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $m = $n;\n    my $r = 1;\n    my $k = 1;\n    my $j = 1;\n\
    \    my $i = 0;\n    my $ki = 1;\n    my $kj = 1;\n    my $kr = 1;\n    my $kr\
    \ = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n \
    \   my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr\
    \ = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n \
    \   my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr\
    \ = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n \
    \   my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr\
    \ = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n \
    \   my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr\
    \ = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n \
    \   my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr\
    \ = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n \
    \   my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr\
    \ = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n \
    \   my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr\
    \ = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n \
    \   my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr\
    \ = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n    my $kr = 1;\n \
    \   my $kr = 1;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpi97ymvk_.pl line 126,
    at end of line

    syntax error at /tmp/tmpi97ymvk_.pl line 126, at EOF

    Execution of /tmp/tmpi97ymvk_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n == 0;\n    return $p if $n == 1;\n    return\
    \ $p + modp($n >> 1, $p) % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $m = $n;\n    my $r = 1;\n    while ($m != 0) {\n        $r\
    \ = ($r * $p) % $m;\n        $m = ($m * $p) % $m;\n    }\n    return $r;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n     \
    \   if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n if $n == 1;\n    return $p if $p == 1;\n    return $n if $n % $p == 0;\n\
    \    return $p if $n % $p == 1;\n    return $n if $n % $p == -1;\n    return $p\
    \ if $n % $p == -2;\n    return $n if $n % $p == -$p;\n    return $p if $n % $p\
    \ == -$n;\n    return $n if $n % $p == -$p;\n    return $p if $n % $p == -$n;\n\
    \    return $n if $n % $p == -$p;\n    return $p if $n % $p == -$n;\n    return\
    \ $n if $n % $p == -$p;\n    return $p if $n % $p == -$n;\n    return $n if $n\
    \ % $p == -$p;\n    return $p if $n % $p == -$n;\n    return $n if $n % $p ==\
    \ -$p;\n    return $p if $n % $p == -$n;\n    return $n if $n % $p == -$p;\n \
    \   return $p if $n % $p == -$n;\n    return $n if $n % $p == -$p;\n    return\
    \ $p if $n % $p == -$n;\n    return $n if $n % $p == -$p;\n    return $p if $n\
    \ % $p == -$n;\n    return $n if $n % $p == -$p;\n    return $p if $n % $p ==\
    \ -$n;\n    return $n if $n % $p == -$p;\n    return $p if $n % $p == -$n;\n \
    \   return $n if $n % $p == -$p;\n    return $p if $n % $p == -$n;\n    return\
    \ $n if $n % $p == -$p;\n    return $p if $n % $p == -$n;\n    return $n if $n\
    \ % $p == -$p;\n    return $p if $n % $p == -$n;\n    return $n if $n % $p ==\
    \ -$p;\n    return $p if $n % $p == -$n;\n    return $n if $n % $p == -$p;\n \
    \   return $p if $n % $p == -$n;\n    return $n if $n % $p == -$p;\n    return\
    \ $p \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "\"use\" not allowed in expression at /tmp/tmpkkclh7nw.pl line 46, at end\
    \ of line\nsyntax error at /tmp/tmpkkclh7nw.pl line 46, near \"$p \nuse Test::Deep\"\
    \nMissing right curly or square bracket at /tmp/tmpkkclh7nw.pl line 81, at end\
    \ of line\nsyntax error at /tmp/tmpkkclh7nw.pl line 81, at EOF\nExecution of /tmp/tmpkkclh7nw.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 1;\n    return $p\
    \ if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == 2;\n    return\
    \ $p if $n == 3;\n    return $p if $n == 4;\n    return $p if $n == 5;\n    return\
    \ $p if $n == 6;\n    return $p if $n == 7;\n    return $p if $n == 8;\n    return\
    \ $p if $n == 9;\n    return $p if $n == 10;\n    return $p if $n == 11;\n   \
    \ return $p if $n == 12;\n    return $p if $n == 13;\n    return $p if $n == 14;\n\
    \    return $p if $n == 15;\n    return $p if $n == 16;\n    return $p if $n ==\
    \ 17;\n    return $p if $n == 18;\n    return $p if $n == 19;\n    return $p if\
    \ $n == 20;\n    return $p if $n == 21;\n    return $p if $n == 22;\n    return\
    \ $p if $n == 23;\n    return $p if $n == 24;\n    return $p if $n == 25;\n  \
    \  return $p if $n == 26;\n    return $p if $n == 27;\n    return $p if $n ==\
    \ 28;\n    return $p if $n == 29;\n    return $p if $n == 30;\n    return $p if\
    \ $n == 31;\n    return $p if $n == 32;\n    return $p if $n == 33;\n    return\
    \ $p if $n == 34;\n    return $p if $n == 35;\n    return $p if $n == 36;\n  \
    \  return $p if $n == 37;\n    return $p if $n == 38;\n    return $p if $n ==\
    \ 39;\n    return $p if $n == 40;\n    return $p if $n == 41;\n    return $p if\
    \ $n == 42;\n    return $p if $n == 43;\n    return $p if $n == 44;\n    return\
    \ $p if $n == 45;\n    return $p if $n == 46;\n    return $p if $n == 47;\n  \
    \  return $p if $n == 48;\n    return $p if $n == 49;\n    return $p if $n ==\
    \ 50;\n    return $p if $n == 51;\n    return $p if $n == 52;\n    return $p if\
    \ $n == 53;\n    return $p if $n == 54;\n    return $p if $n == 55;\n    return\
    \ $p if $n == 56;\n    return \nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "\"use\" not allowed in expression at /tmp/tmp_dvlinbx.pl line 64, near\
    \ \"return \n\"\nsyntax error at /tmp/tmp_dvlinbx.pl line 64, near \"return \n\
    use Test::Deep\"\nMissing right curly or square bracket at /tmp/tmp_dvlinbx.pl\
    \ line 99, at end of line\nsyntax error at /tmp/tmp_dvlinbx.pl line 99, at EOF\n\
    Execution of /tmp/tmp_dvlinbx.pl aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = 0;\n    my $w = 0;\n\
    \    my $sign = 0;\n    my $xs = $x;\n    my $ys = $y;\n    my $zs = $z;\n   \
    \ my $ws = $w;\n    my $signs = $sign;\n    my $xs_sign = $xs;\n    my $ys_sign\
    \ = $ys;\n    my $zs_sign = $zs;\n    my $ws_sign = $ws;\n    my $signs_sign =\
    \ $signs;\n    my $xs_signs = $xs_sign;\n    my $ys_signs = $ys_sign;\n    my\
    \ $zs_signs = $zs_sign;\n    my $ws_signs = $ws_sign;\n    my $signs_signs = $signs_sign;\n\
    \    my $xs_signs_sign = $xs_signs;\n    my $ys_signs_sign = $ys_signs;\n    my\
    \ $zs_signs_sign = $zs_signs;\n    my $ws_signs_sign = $ws_signs;\n    my $signs_signs_sign\
    \ = $signs_signs;\n    my $xs_signs_signs = $xs_signs_sign;\n    my $ys_signs_signs\
    \ = $ys_signs_sign;\n    my $zs_signs_signs = $zs_signs_sign;\n    my $ws_signs_signs\
    \ = $ws_signs_sign;\n    my $signs_signs_signs = $signs_signs_sign;\n    my $xs_signs_signs_sign\
    \ = $xs_signs_signs;\n    my $ys_signs_signs_sign = $ys_signs_signs;\n    my $zs_signs_signs_sign\
    \ = $zs_signs_signs;\n    my $ws_signs_signs_sign = $ws_signs_signs;\n    my $signs_signs_signs_sign\
    \ = $signs_signs_signs;\n    my $xs_signs_signs_signs = $xs_signs_signs_sign;\n\
    \    my $ys_signs_signs_signs = $ys_signs_signs_sign;\n    my $zs_signs_signs_signs\
    \ = $zs_signs_signs_sign;\n    my $ws_signs_signs_signs = $ws_signs_signs_sign;\n\
    \    my $signs_signs_signs_signs = $signs_signs_signs_sign;\n    my $xs_signs_signs_signs_sign\
    \ = $xs_signs_signs_signs;\n    my $y\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpueaxss3_.pl line 46, at end
    of line

    syntax error at /tmp/tmpueaxss3_.pl line 46, near "$y

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpueaxss3_.pl line 81, at end of
    line

    syntax error at /tmp/tmpueaxss3_.pl line 81, at EOF

    Execution of /tmp/tmpueaxss3_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $s = 1;\n    while ($s > 0) {\n        $r\
    \ = ($r % $p) + $p;\n        $s = $s >> 1;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 2;\n    return $p\
    \ if $n == 1;\n    return $p if $n == 2;\n    return $p if $n % 2 == 0;\n    return\
    \ $p if $n % 3 == 0;\n    return $p if $n % 5 == 0;\n    return $p if $n % 7 ==\
    \ 0;\n    return $p if $n % 11 == 0;\n    return $p if $n % 13 == 0;\n    return\
    \ $p if $n % 17 == 0;\n    return $p if $n % 19 == 0;\n    return $p if $n % 23\
    \ == 0;\n    return $p if $n % 29 == 0;\n    return $p if $n % 31 == 0;\n    return\
    \ $p if $n % 37 == 0;\n    return $p if $n % 41 == 0;\n    return $p if $n % 43\
    \ == 0;\n    return $p if $n % 47 == 0;\n    return $p if $n % 53 == 0;\n    return\
    \ $p if $n % 59 == 0;\n    return $p if $n % 61 == 0;\n    return $p if $n % 67\
    \ == 0;\n    return $p if $n % 71 == 0;\n    return $p if $n % 73 == 0;\n    return\
    \ $p if $n % 79 == 0;\n    return $p if $n % 83 == 0;\n    return $p if $n % 89\
    \ == 0;\n    return $p if $n % 97 == 0;\n    return $p if $n % 101 == 0;\n   \
    \ return $p if $n % 103 == 0;\n    return $p if $n % 105 == 0;\n    return $p\
    \ if $n % 107 == 0;\n    return $p if $n % 109 == 0;\n    return $p if $n % 111\
    \ == 0;\n    return $p if $n % 113 == 0;\n    return $p if $n % 115 == 0;\n  \
    \  return $p if $n % 117 == 0;\n    return $p if $n % 119 == 0;\n    return $p\
    \ if $n % 121 == 0;\n    return $p if $n % 123 == 0;\n    return $p if $n % 125\
    \ == 0;\n    return $p if $n % 127 == 0;\n    return $p if $n % 129 == 0;\n  \
    \  return $p if $n % 131 == 0;\n    return $p if $n % 133 == 0;\n    return $p\
    \ if $n % 135 == 0;\n    return $p if $n % 137 == 0;\n    return $p if $n % 139\
    \ == 0;\n    return $p if $n % 141 == 0;\n    return $p if $n % 143 == 0;\n  \
    \  return $p if $n % 145 == 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp5gr22kdd.pl line 92, at
    end of line

    syntax error at /tmp/tmp5gr22kdd.pl line 92, at EOF

    Execution of /tmp/tmp5gr22kdd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = 0;\n    while ($x !=\
    \ 0) {\n        $z = ($x & $y) >> 31;\n        $x = $y;\n        $y = $z;\n  \
    \  }\n    return $z;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $m = 1;\n    my $q = $p;\n    my $q1 = $q;\n\
    \    my $q2 = $q;\n    my $q3 = $q;\n    my $q4 = $q;\n    my $q5 = $q;\n    my\
    \ $q6 = $q;\n    my $q7 = $q;\n    my $q8 = $q;\n    my $q9 = $q;\n    my $q10\
    \ = $q;\n    my $q11 = $q;\n    my $q12 = $q;\n    my $q13 = $q;\n    my $q14\
    \ = $q;\n    my $q15 = $q;\n    my $q16 = $q;\n    my $q17 = $q;\n    my $q18\
    \ = $q;\n    my $q19 = $q;\n    my $q20 = $q;\n    my $q21 = $q;\n    my $q22\
    \ = $q;\n    my $q23 = $q;\n    my $q24 = $q;\n    my $q25 = $q;\n    my $q26\
    \ = $q;\n    my $q27 = $q;\n    my $q28 = $q;\n    my $q29 = $q;\n    my $q30\
    \ = $q;\n    my $q31 = $q;\n    my $q32 = $q;\n    my $q33 = $q;\n    my $q34\
    \ = $q;\n    my $q35 = $q;\n    my $q36 = $q;\n    my $q37 = $q;\n    my $q38\
    \ = $q;\n    my $q39 = $q;\n    my $q40 = $q;\n    my $q41 = $q;\n    my $q42\
    \ = $q;\n    my $q43 = $q;\n    my $q44 = $q;\n    my $q45 = $q;\n    my $q46\
    \ = $q;\n    my $q47 = $q;\n    my $q48 = $q;\n    my $q49 = $q;\n    my $q50\
    \ = $q;\n    my $q51 = $q;\n    my $q52 = $q;\n    my $q53 = $q;\n    my $q54\
    \ = $q;\n    my $q55 = $q;\n    my $q56 = $q;\n    my $q57 = $q;\n    my $q58\
    \ = $q;\n    my $q59 = $q;\n    my $q60 = $q;\n    my $q61 = $\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpssj42yga.pl line 68,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpssj42yga.pl line 68, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpssj42yga.pl line 103, at end of line\nsyntax\
    \ error at /tmp/tmpssj42yga.pl line 103, at EOF\nExecution of /tmp/tmpssj42yga.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $k = 0;\n    my $i = 1;\n\
    \    my $j = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my\
    \ $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my\
    \ $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my\
    \ $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n  \
    \  my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n\
    \    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n\
    \    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n\
    \    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n\
    \    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n\
    \    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n\
    \    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n\
    \    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n\
    \    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n\
    \    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n\
    \    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n\
    \    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n\
    \    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n\
    \    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n\
    \    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n\
    \    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n\
    \    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82 = 0;\n\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpi4f179_3.pl line 127,
    at end of line

    syntax error at /tmp/tmpi4f179_3.pl line 127, at EOF

    Execution of /tmp/tmpi4f179_3.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = $n;\n    while ($z)\
    \ {\n        $z = ($z & 1) ? $z * $x : $z * $y;\n        $x >>= 1;\n        $y\
    \ >>= 1;\n    }\n    return $y;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $k = 0;\n    my $z = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $w2 = 0;\n    my $w2m\
    \ = 0;\n    my $w1m = 0;\n    my $w1p = 0;\n    my $w1m2 = $w1m;\n    my $w1p2\
    \ = $w1p;\n    my $w1p3 = $w1p2;\n    my $w1m3 = $w1m2;\n    my $w1p4 = $w1p3;\n\
    \    my $w1m4 = $w1m3;\n    my $w1p5 = $w1p4;\n    my $w1m5 = $w1m4;\n    my $w1p6\
    \ = $w1p5;\n    my $w1m6 = $w1m5;\n    my $w1p7 = $w1p6;\n    my $w1m7 = $w1m6;\n\
    \    my $w1p8 = $w1p7;\n    my $w1m8 = $w1m7;\n    my $w1p9 = $w1p8;\n    my $w1m9\
    \ = $w1m8;\n    my $w1p10 = $w1p9;\n    my $w1m10 = $w1m9;\n    my $w1p11 = $w1p10;\n\
    \    my $w1m11 = $w1m10;\n    my $w1p12 = $w1p11;\n    my $w1m12 = $w1m11;\n \
    \   my $w1p13 = $w1p12;\n    my $w1m13 = $w1m12;\n    my $w1p14 = $w1p13;\n  \
    \  my $w1m14 = $w1m13;\n    my $w1p15 = $w1p14;\n    my $w1m15 = $w1m14;\n   \
    \ my $w1p16 = $w1p15;\n    my $w1m16 = $w1m15;\n    my $w1p17 = $w1p16;\n    my\
    \ $w1m17 = $w1m16;\n    my $w1p18 = $w1p17;\n    my $w1m18 = $w1m17;\n    my $w1p19\
    \ = $w1p18;\n    my $w1m19 = $w1m18;\n    my $w1p20 = $w1p19;\n    my $w1m20 =\
    \ $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpuz3vp3hl.pl line 53,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpuz3vp3hl.pl line 53, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpuz3vp3hl.pl line 88, at end of line\nsyntax\
    \ error at /tmp/tmpuz3vp3hl.pl line 88, at EOF\nExecution of /tmp/tmpuz3vp3hl.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n if $n == 0;\n    return $p if $p == 1;\n    return $n if $n == 1;\n    return\
    \ $n if $n % 2 == 0;\n    return $p if $p % 2 == 0;\n    return $n if $n % 3 ==\
    \ 0;\n    return $p if $p % 3 == 0;\n    return $n if $n % 5 == 0;\n    return\
    \ $p if $p % 5 == 0;\n    return $n if $n % 7 == 0;\n    return $p if $p % 7 ==\
    \ 0;\n    return $n if $n % 11 == 0;\n    return $p if $p % 11 == 0;\n    return\
    \ $n if $n % 13 == 0;\n    return $p if $p % 13 == 0;\n    return $n if $n % 17\
    \ == 0;\n    return $p if $p % 17 == 0;\n    return $n if $n % 19 == 0;\n    return\
    \ $p if $p % 19 == 0;\n    return $n if $n % 23 == 0;\n    return $p if $p % 23\
    \ == 0;\n    return $n if $n % 29 == 0;\n    return $p if $p % 29 == 0;\n    return\
    \ $n if $n % 31 == 0;\n    return $p if $p % 31 == 0;\n    return $n if $n % 37\
    \ == 0;\n    return $p if $p % 37 == 0;\n    return $n if $n % 41 == 0;\n    return\
    \ $p if $p % 41 == 0;\n    return $n if $n % 43 == 0;\n    return $p if $p % 43\
    \ == 0;\n    return $n if $n % 47 == 0;\n    return $p if $p % 47 == 0;\n    return\
    \ $n if $n % 51 == 0;\n    return $p if $p % 51 == 0;\n    return $n if $n % 55\
    \ == 0;\n    return $p if $p % 55 == 0;\n    return $n if $n % 59 == 0;\n    return\
    \ $p if $p % 59 == 0;\n    return $n if $n % 63 == 0;\n    return $p if $p % 63\
    \ == 0;\n    return $n if $n % 67 == 0;\n    return $p if $p % 67 == 0;\n    return\
    \ $n if $n % 71 == 0;\n    return $p if $p % 71 == 0;\n    return $n if $n % 75\
    \ == 0;\n    return $p if $p % 75 == 0;\n    return $n if $n % 79 == 0;\n    return\
    \ \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n \
    \       if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "\"use\" not allowed in expression at /tmp/tmpu4bxl8_c.pl line 55, near\
    \ \"return \n\"\nsyntax error at /tmp/tmpu4bxl8_c.pl line 55, near \"return \n\
    use Test::Deep\"\nMissing right curly or square bracket at /tmp/tmpu4bxl8_c.pl\
    \ line 90, at end of line\nsyntax error at /tmp/tmpu4bxl8_c.pl line 90, at EOF\n\
    Execution of /tmp/tmpu4bxl8_c.pl aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $n if $p < 0;\n    return $n\
    \ if $p > $n;\n    return $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: -1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = $n;\n    my $mask = (1 << $p) - 1;\n    while ($res\
    \ & $mask) {\n        $res &= ~$mask;\n        $res |= ($n & $mask) << ($p - 1);\n\
    \    }\n    return $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013902
- exit_code: -1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 1;\n    my $i = $n;\n    my $j = 1;\n    my $k = 0;\n\
    \    while ($i < $p) {\n        $res = $res * $j + $k;\n        $j++;\n      \
    \  $k = $k % $p;\n        $i = $i >> 1;\n    }\n    return $res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013902
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $result = 1;\n    my $base = $p;\n    while ($n > 0) {\n \
    \       $result *= $base;\n        $result %= $p;\n        $n--;\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 2;\n    return $p\
    \ if $n == 0;\n    return $p if $n == 1;\n    return $p if $n <= $p;\n    return\
    \ $p if $n % $p;\n    return $p if $n % $p == 0;\n    return $p;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $result = $n;\n    my $mask = $p >> 1;\n    my $remainder\
    \ = $p & 1;\n    while ($remainder) {\n        $result = $result * $n >> 1;\n\
    \        $remainder = ($n & 1) != 0;\n        $n = $n >> 1;\n    }\n    return\
    \ $result % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    return $r if $r;\n    return $p if $n ==\
    \ 0;\n    return $p - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n if $n == 0;\n    return $p if $p == 0;\n    return $n if $n == $p;\n    return\
    \ $p if $n == $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p;\n    return\
    \ $p if $n % $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p;\n    return\
    \ $p if $n % $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p;\n    return\
    \ $p if $n % $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p;\n    return\
    \ $p if $n % $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p;\n    return\
    \ $p if $n % $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p;\n    return\
    \ $p if $n % $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p;\n    return\
    \ $p if $n % $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p;\n    return\
    \ $p if $n % $p;\n    return $n if $n % $p;\n    return $p if $n % $p;\n    return\
    \ $n if $n % $p;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp20bmm0j9.pl line 97, at
    end of line

    syntax error at /tmp/tmp20bmm0j9.pl line 97, at EOF

    Execution of /tmp/tmp20bmm0j9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $n = int($n);\n    my $p = int($p);\n    my $r = $n % $p;\n\
    \    return $r ? $p + $r : $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    return $r if $r != 0;\n    return $p;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 0;\n    my $tmp = $n;\n    my $tmp2 = $n;\n    my $tmp3\
    \ = $n;\n    my $tmp4 = $n;\n    my $tmp5 = $n;\n    my $tmp6 = $n;\n    my $tmp7\
    \ = $n;\n    my $tmp8 = $n;\n    my $tmp9 = $n;\n    my $tmp10 = $n;\n    my $tmp11\
    \ = $n;\n    my $tmp12 = $n;\n    my $tmp13 = $n;\n    my $tmp14 = $n;\n    my\
    \ $tmp15 = $n;\n    my $tmp16 = $n;\n    my $tmp17 = $n;\n    my $tmp18 = $n;\n\
    \    my $tmp19 = $n;\n    my $tmp20 = $n;\n    my $tmp21 = $n;\n    my $tmp22\
    \ = $n;\n    my $tmp23 = $n;\n    my $tmp24 = $n;\n    my $tmp25 = $n;\n    my\
    \ $tmp26 = $n;\n    my $tmp27 = $n;\n    my $tmp28 = $n;\n    my $tmp29 = $n;\n\
    \    my $tmp30 = $n;\n    my $tmp31 = $n;\n    my $tmp32 = $n;\n    my $tmp33\
    \ = $n;\n    my $tmp34 = $n;\n    my $tmp35 = $n;\n    my $tmp36 = $n;\n    my\
    \ $tmp37 = $n;\n    my $tmp38 = $n;\n    my $tmp39 = $n;\n    my $tmp40 = $n;\n\
    \    my $tmp41 = $n;\n    my $tmp42 = $n;\n    my $tmp43 = $n;\n    my $tmp44\
    \ = $n;\n    my $tmp45 = $n;\n    my $tmp46 = $n;\n    my $tmp47 = $n;\n    my\
    \ $tmp48 = $n;\n    my $tmp49 = $n;\n    my $tmp50 = $n;\n    my $tmp51 = $n;\n\
    \    my $tmp52 = $n;\n    my $tmp53 = $n;\n    my $tmp54 = $n;\n    my $tmp55\
    \ = $n;\n    my $tmp56 = $n;\n    my $tmp57 = $n;\n    my $tmp58 = $n;\n    my\
    \ $tmp59 = $n;\n    my $tmp60 = $n;\n    my $tmp61 = $n;\n    my $tmp62 = $n;\n\
    \    my $tmp63 = $n;\n    my $tmp64 = $n;\n    my $tmp65 = $n;\n    my $tmp66\
    \ = $n;\n    my $tmp67 = $n;\n    my $tmp68 = $n;\n    my $tmp69 = $n;\n    my\
    \ $tmp70 = $n;\n    my $tmp71 = \nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpc02uthte.pl line 76, at end
    of line

    syntax error at /tmp/tmpc02uthte.pl line 76, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpc02uthte.pl line 111, at end
    of line

    syntax error at /tmp/tmpc02uthte.pl line 111, at EOF

    Execution of /tmp/tmpc02uthte.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    return $r if $r != 0;\n    return $p;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = 0;\n    my $w = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w2 = 0;\n    my $w3 = 0;\n    my $w4\
    \ = 0;\n    my $w5 = 0;\n    my $w6 = 0;\n    my $w7 = 0;\n    my $w8 = 0;\n \
    \   my $w9 = 0;\n    my $w10 = 0;\n    my $w11 = 0;\n    my $w12 = 0;\n    my\
    \ $w13 = 0;\n    my $w14 = 0;\n    my $w15 = 0;\n    my $w16 = 0;\n    my $w17\
    \ = 0;\n    my $w18 = 0;\n    my $w19 = 0;\n    my $w20 = 0;\n    my $w21 = 0;\n\
    \    my $w22 = 0;\n    my $w23 = 0;\n    my $w24 = 0;\n    my $w25 = 0;\n    my\
    \ $w26 = 0;\n    my $w27 = 0;\n    my $w28 = 0;\n    my $w29 = 0;\n    my $w30\
    \ = 0;\n    my $w31 = 0;\n    my $w32 = 0;\n    my $w33 = 0;\n    my $w34 = 0;\n\
    \    my $w35 = 0;\n    my $w36 = 0;\n    my $w37 = 0;\n    my $w38 = 0;\n    my\
    \ $w39 = 0;\n    my $w40 = 0;\n    my $w41 = 0;\n    my $w42 = 0;\n    my $w43\
    \ = 0;\n    my $w44 = 0;\n    my $w45 = 0;\n    my $w46 = 0;\n    my $w47 = 0;\n\
    \    my $w48 = 0;\n    my $w49 = 0;\n    my $w50 = 0;\n    my $w51 = 0;\n    my\
    \ $w52 = 0;\n    my $w53 = 0;\n    my $w54 = 0;\n    my $w55 = 0;\n    my $w56\
    \ = 0;\n    my $w57 = 0;\n    my $w58 = 0;\n    my $w59 = 0;\n    my $w60 = 0;\n\
    \    my $w61 = 0;\n    my $w62 = 0;\n    my $w63 = 0;\n    my $w64 = 0;\n    my\
    \ $w65 = 0;\n    my $w66 = 0;\n    my $w67 = 0;\n    my $w68 = 0;\n    my $w69\
    \ = 0;\n    my $w70 = 0;\n    my $w71 = 0;\n    my $w72 = 0;\n    my $w73 = 0;\n\
    \    my $w74 = 0;\n    my $w75 = 0;\n    my $w76 = 0;\n    my $w77 = 0;\n    my\
    \ $w78 = 0;\n    my $w79 = 0;\n    my $w80 = 0;\n    my $w81 = 0;\n    my $w82\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n     \
    \   if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpwghtmtgz.pl line 91, at end
    of line

    syntax error at /tmp/tmpwghtmtgz.pl line 91, near "$w82

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpwghtmtgz.pl line 126, at end
    of line

    syntax error at /tmp/tmpwghtmtgz.pl line 126, at EOF

    Execution of /tmp/tmpwghtmtgz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $n = int($n);\n    my $p = int($p);\n    my $r = $n % $p;\n\
    \    return $r if $r != 0;\n    return $p if $n == 0;\n    return $p;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n       \
    \ if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n == 0;\n    return $p if $n == 1;\n    return\
    \ $p if $n == -1;\n    return $p if $n <= 0;\n    return $p if $n >= $p;\n   \
    \ return $p if $n >= $p + 2;\n    return $p if $n >= $p - 2;\n    return $p if\
    \ $n >= $p + ($p >> 2);\n    return $p if $n >= $p - ($p >> 2);\n    return $p\
    \ if $n >= $p + ($p >> 2);\n    return $p if $n >= $p - ($p >> 2);\n    return\
    \ $p if $n >= $p + ($p >> 2);\n    return $p if $n >= $p - ($p >> 2);\n    return\
    \ $p if $n >= $p + ($p >> 2);\n    return $p if $n >= $p - ($p >> 2);\n    return\
    \ $p if $n >= $p + ($p >> 2);\n    return $p if $n >= $p - ($p >> 2);\n    return\
    \ $p if $n >= $p + ($p >> 2);\n    return $p if $n >= $p - ($p >> 2);\n    return\
    \ $p if $n >= $p + ($p >> 2);\n    return $p if $n >= $p - ($p >> 2);\n    return\
    \ $p if $n >= $p + ($p >> 2);\n    return $p if $n >= $p - ($p >> 2);\n    return\
    \ $p if $n >= $p + ($p >> 2);\n    return $p if $n >= $p - ($p >> 2);\n    return\
    \ $p if $n >= $p + ($p >> 2);\n    return $p if $n >= $p - ($p >> 2);\n    return\
    \ $p if $n >= $p + ($p >> 2);\n    return $p if $n >= $p - ($p >> 2);\n    return\
    \ $p if $n >= $p + ($p >> 2);\n    return $p if $n >= $p - ($p >> 2);\n    return\
    \ $p if $n >= $p + ($p >> 2);\n    return $p if $n >= $p - ($p >> 2);\n    return\
    \ $p if $n >= $p + ($p >> 2);\n    return $p if $n >= $p - ($p >> 2);\n    return\
    \ $p if $n >= $p + ($p >> 2);\n    return $p if $n >= $p - ($\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpdznckg6y.pl line 41,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpdznckg6y.pl line 41, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpdznckg6y.pl line 76, at end of line\nsyntax\
    \ error at /tmp/tmpdznckg6y.pl line 76, at EOF\nExecution of /tmp/tmpdznckg6y.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 0;\n    my $sign = 1;\n    if ($n < 0) {\n        $sign\
    \ = -1;\n        $n = -$n;\n    }\n    while ($n > 0) {\n        $res = $res *\
    \ $p;\n        $n--;\n    }\n    return $sign * $res;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = 0;\n    my $w = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w2 = 0;\n    my $u2 = 0;\n    my $v2\
    \ = 0;\n    my $w3 = 0;\n    my $u3 = 0;\n    my $v3 = 0;\n    my $w4 = 0;\n \
    \   my $u4 = 0;\n    my $v4 = 0;\n    my $w5 = 0;\n    my $u5 = 0;\n    my $v5\
    \ = 0;\n    my $w6 = 0;\n    my $u6 = 0;\n    my $v6 = 0;\n    my $w7 = 0;\n \
    \   my $u7 = 0;\n    my $v7 = 0;\n    my $w8 = 0;\n    my $u8 = 0;\n    my $v8\
    \ = 0;\n    my $w9 = 0;\n    my $u9 = 0;\n    my $v9 = 0;\n    my $w10 = 0;\n\
    \    my $u10 = 0;\n    my $v10 = 0;\n    my $w11 = 0;\n    my $u11 = 0;\n    my\
    \ $v11 = 0;\n    my $w12 = 0;\n    my $u12 = 0;\n    my $v12 = 0;\n    my $w13\
    \ = 0;\n    my $u13 = 0;\n    my $v13 = 0;\n    my $w14 = 0;\n    my $u14 = 0;\n\
    \    my $v14 = 0;\n    my $w15 = 0;\n    my $u15 = 0;\n    my $v15 = 0;\n    my\
    \ $w16 = 0;\n    my $u16 = 0;\n    my $v16 = 0;\n    my $w17 = 0;\n    my $u17\
    \ = 0;\n    my $v17 = 0;\n    my $w18 = 0;\n    my $u18 = 0;\n    my $v18 = 0;\n\
    \    my $w19 = 0;\n    my $u19 = 0;\n    my $v19 = 0;\n    my $w20 = 0;\n    my\
    \ $u20 = 0;\n    my $v20 = 0;\n    my $w21 = 0;\n    my $u21 = 0;\n    my $v21\
    \ = 0;\n    my $w22 = 0;\n    my $u22 = 0;\n    my $v22 = 0;\n    my $w23 = 0;\n\
    \    my $u23 = 0;\n    my $v23 = 0;\n    my $w24 = 0;\n    my $u24 = 0;\n    my\
    \ $v24 = 0;\n    my $w25 = 0;\n    my $u25 = 0;\n    my $v25 = 0;\n    my $w26\
    \ = 0;\n    my $u26 = 0;\n    my $v26 = 0;\n    my $w27 = 0;\n    my $u27 = 0;\n\
    \    my $v27 = 0;\n    my $w28 = 0;\n    my $u28 = 0;\n    my $v28 = 0;\n    my\
    \ $w29 = 0;\n    my $u29 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp4d79godb.pl line 128,
    at end of line

    syntax error at /tmp/tmp4d79godb.pl line 128, at EOF

    Execution of /tmp/tmp4d79godb.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = $x;\n    my $w = $y;\n\
    \    my $u = $z;\n    my $v = $w;\n    my $s = $u;\n    my $t = $v;\n    my $r\
    \ = $s;\n    my $q = $t;\n    my $p = $r;\n    my $f = $p;\n    my $m = $f;\n\
    \    my $a = $m;\n    my $b = $a;\n    my $c = $b;\n    my $d = $c;\n    my $e\
    \ = $d;\n    my $f = $e;\n    my $g = $f;\n    my $h = $g;\n    my $i = $h;\n\
    \    my $j = $i;\n    my $k = $j;\n    my $l = $k;\n    my $m = $l;\n    my $n\
    \ = $m;\n    my $o = $n;\n    my $p = $o;\n    my $q = $p;\n    my $r = $q;\n\
    \    my $s = $r;\n    my $t = $s;\n    my $u = $t;\n    my $v = $u;\n    my $w\
    \ = $v;\n    my $x = $w;\n    my $y = $x;\n    my $z = $y;\n    my $a = $z;\n\
    \    my $b = $a;\n    my $c = $b;\n    my $d = $c;\n    my $e = $d;\n    my $f\
    \ = $e;\n    my $g = $f;\n    my $h = $g;\n    my $i = $h;\n    my $j = $i;\n\
    \    my $k = $j;\n    my $l = $k;\n    my $m = $l;\n    my $n = $m;\n    my $o\
    \ = $n;\n    my $p = $o;\n    my $q = $p;\n    my $r = $q;\n    my $s = $r;\n\
    \    my $t = $s;\n    my $u = $t;\n    my $v = $u;\n    my $w = $v;\n    my $x\
    \ = $w;\n    my $y = $x;\n    my $z = $y;\n    my $a = $z;\n    my $b = $a;\n\
    \    my $c = $b;\n    my $d = $c;\n    my $e = $d;\n    my $f = $e;\n    my $g\
    \ = $f;\n    my $h = $g;\n    my $i = $h;\n    my $j = $i;\n    my $k = $j;\n\
    \    my $l = $k;\n    my $m = $l;\n    my $n = $m;\n    my $o = $n;\n    my $p\
    \ = $o;\n    my $q = $p;\n    my $r = \nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpiu9h_v7k.pl line 87, at end
    of line

    syntax error at /tmp/tmpiu9h_v7k.pl line 87, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpiu9h_v7k.pl line 122, at end
    of line

    syntax error at /tmp/tmpiu9h_v7k.pl line 122, at EOF

    Execution of /tmp/tmpiu9h_v7k.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    return $r if $r != 0;\n    return $p;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $n = int($n);\n    my $p = int($p);\n    my $r = $n % $p;\n\
    \    return $r == 0 ? $p : $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 2;\n    return $p\
    \ if $n == 1;\n    return $p if $n == 0;\n    return $p if $n <= $p;\n    return\
    \ $p if $n >= $p;\n    return $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    return $r if $r;\n    return $p if $n ==\
    \ 0;\n    return $p if $n == 1;\n    return $p + modp($n - $r, $p);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    while ($n > 0) {\n        $r\
    \ = ($r * $p) % $m;\n        $n--;\n        $m = ($m * $p) % $m;\n    }\n    return\
    \ $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpn0swl4o6.pl line 7.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = $n;\n    my $mask = (1 << $p) - 1;\n    while ($mask)\
    \ {\n        $res %= $p;\n        $res *= 2;\n        $res %= $p;\n        $mask\
    \ >>= 1;\n    }\n    return $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $w = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $w = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $w = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $w = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $w = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $w = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpqz5fe60z.pl line 145,
    at end of line

    syntax error at /tmp/tmpqz5fe60z.pl line 145, at EOF

    Execution of /tmp/tmpqz5fe60z.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n == 0;\n    return $p if $n == 1;\n    return\
    \ $p if $n % 2 == 0;\n    return $p if $n % 3 == 0;\n    return $p if $n % 5 ==\
    \ 0;\n    return $p if $n % 7 == 0;\n    return $p if $n % 11 == 0;\n    return\
    \ $p if $n % 13 == 0;\n    return $p if $n % 17 == 0;\n    return $p if $n % 19\
    \ == 0;\n    return $p if $n % 23 == 0;\n    return $p if $n % 29 == 0;\n    return\
    \ $p if $n % 31 == 0;\n    return $p if $n % 37 == 0;\n    return $p if $n % 41\
    \ == 0;\n    return $p if $n % 43 == 0;\n    return $p if $n % 47 == 0;\n    return\
    \ $p if $n % 53 == 0;\n    return $p if $n % 59 == 0;\n    return $p if $n % 61\
    \ == 0;\n    return $p if $n % 67 == 0;\n    return $p if $n % 71 == 0;\n    return\
    \ $p if $n % 73 == 0;\n    return $p if $n % 79 == 0;\n    return $p if $n % 83\
    \ == 0;\n    return $p if $n % 89 == 0;\n    return $p if $n % 97 == 0;\n    return\
    \ $p if $n % 101 == 0;\n    return $p if $n % 103 == 0;\n    return $p if $n %\
    \ 107 == 0;\n    return $p if $n % 111 == 0;\n    return $p if $n % 117 == 0;\n\
    \    return $p if $n % 121 == 0;\n    return $p if $n % 123 == 0;\n    return\
    \ $p if $n % 129 == 0;\n    return $p if $n % 131 == 0;\n    return $p if $n %\
    \ 137 == 0;\n    return $p if $n % 141 == 0;\n    return $p if $n % 147 == 0;\n\
    \    return $p if $n % 151 == 0;\n    return $p if $n % 157 == 0;\n    return\
    \ $p if $n % 161 == 0;\n    return $p if $n % 167 == 0;\n    return $p if $n %\
    \ 173 == 0;\n    return $p if $n % 179 == 0;\n    return $p if $n % 183 == 0;\n\
    \    return $p if $n % 191 == 0;\n    return $p if $n % 197 == 0;\n    return\
    \ $p if $n % 201 == 0;\n    return $p if $n % 207 == 0;\n    return $p if $n %\
    \ 211 == 0;\n    return $p if $n % 217 == \nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpvot3jmab.pl line 56, at end
    of line

    syntax error at /tmp/tmpvot3jmab.pl line 56, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpvot3jmab.pl line 91, at end of
    line

    syntax error at /tmp/tmpvot3jmab.pl line 91, at EOF

    Execution of /tmp/tmpvot3jmab.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $t = 1;\n    my $e = 0;\n\
    \    my $k = 0;\n    my $z = 0;\n    my $kp = 1;\n    my $ks = 0;\n    my $kz\
    \ = 0;\n    my $kzp = 0;\n    my $kzs = 0;\n    my $kzz = 0;\n    my $kzkp = 0;\n\
    \    my $kzks = 0;\n    my $kzkz = 0;\n    my $kzkzp = 0;\n    my $kzkzs = 0;\n\
    \    my $kzkzzp = 0;\n    my $kzkzs = 0;\n    my $kzkzzp = 0;\n    my $kzkzs =\
    \ 0;\n    my $kzkzp = 0;\n    my $kzkzs = 0;\n    my $kzkzp = 0;\n    my $kzkzs\
    \ = 0;\n    my $kzkzp = 0;\n    my $kzkzs = 0;\n    my $kzkzp = 0;\n    my $kzkzs\
    \ = 0;\n    my $kzkzp = 0;\n    my $kzkzs = 0;\n    my $kzkzp = 0;\n    my $kzkzs\
    \ = 0;\n    my $kzkzp = 0;\n    my $kzkzs = 0;\n    my $kzkzp = 0;\n    my $kzkzs\
    \ = 0;\n    my $kzkzp = 0;\n    my $kzkzs = 0;\n    my $kzkzp = 0;\n    my $kzkzs\
    \ = 0;\n    my $kzkzp = 0;\n    my $kzkzs = 0;\n    my $kzkzp = 0;\n    my $kzkzs\
    \ = 0;\n    my $kzkzp = 0;\n    my $kzkzs = 0;\n    my $kzkzp = 0;\n    my $kzkzs\
    \ = 0;\n    my $kzkzp = 0;\n    my $kzkzs = 0;\n    my $kzkzp = 0;\n    my $kzkzs\
    \ = 0;\n    my $kzkzp = 0;\n    my $kzkzs = 0;\n    my $kzkzp = 0;\n    my $kzkzs\
    \ = 0;\n    my $kzkzp = 0;\n    my $kzkzs = 0;\n    my $kzkzp = 0;\n    my $kzkzs\
    \ = 0;\n    my $kzkzp = 0;\n    my $kzkzs = 0;\n    my $kzkzp = 0;\n    my $kz\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n     \
    \   if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp35v7mtwf.pl line 69, at end
    of line

    syntax error at /tmp/tmp35v7mtwf.pl line 69, near "$kz

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp35v7mtwf.pl line 104, at end
    of line

    syntax error at /tmp/tmp35v7mtwf.pl line 104, at EOF

    Execution of /tmp/tmp35v7mtwf.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $i = 1;\n    my $j = 1;\n\
    \    my $k = 1;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n \
    \   my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n  \
    \  my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n    my $tmp84;\n\
    \    my $tmp\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp91pon70d.pl line 94, at end
    of line

    syntax error at /tmp/tmp91pon70d.pl line 94, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp91pon70d.pl line 129, at end
    of line

    syntax error at /tmp/tmp91pon70d.pl line 129, at EOF

    Execution of /tmp/tmp91pon70d.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 2;\n    return $p\
    \ if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == 2;\n    return\
    \ $p if $n % 2 == 0;\n    return $p if $n % 3 == 0;\n    return $p if $n % 5 ==\
    \ 0;\n    return $p if $n % 7 == 0;\n    return $p if $n % 11 == 0;\n    return\
    \ $p if $n % 13 == 0;\n    return $p if $n % 17 == 0;\n    return $p if $n % 19\
    \ == 0;\n    return $p if $n % 23 == 0;\n    return $p if $n % 29 == 0;\n    return\
    \ $p if $n % 37 == 0;\n    return $p if $n % 53 == 0;\n    return $p if $n % 59\
    \ == 0;\n    return $p if $n % 67 == 0;\n    return $p if $n % 71 == 0;\n    return\
    \ $p if $n % 79 == 0;\n    return $p if $n % 89 == 0;\n    return $p if $n % 97\
    \ == 0;\n    return $p if $n % 101 == 0;\n    return $p if $n % 103 == 0;\n  \
    \  return $p if $n % 105 == 0;\n    return $p if $n % 107 == 0;\n    return $p\
    \ if $n % 109 == 0;\n    return $p if $n % 111 == 0;\n    return $p if $n % 113\
    \ == 0;\n    return $p if $n % 115 == 0;\n    return $p if $n % 117 == 0;\n  \
    \  return $p if $n % 119 == 0;\n    return $p if $n % 121 == 0;\n    return $p\
    \ if $n % 123 == 0;\n    return $p if $n % 125 == 0;\n    return $p if $n % 127\
    \ == 0;\n    return $p if $n % 129 == 0;\n    return $p if $n % 131 == 0;\n  \
    \  return $p if $n % 133 == 0;\n    return $p if $n % 135 == 0;\n    return $p\
    \ if $n % 137 == 0;\n    return $p if $n % 139 == 0;\n    return $p if $n % 141\
    \ == 0;\n    return $p if $n % 143 == 0;\n    return $p if $n % 145 == 0;\n  \
    \  return $p if $n % 147 == 0;\n    return $p if $n % 149 == 0;\n    return $p\
    \ if $n % 151 == 0;\n    return $p if $n % 153 == 0;\n    return $p if $n % 155\
    \ == 0;\n    return $p if $n % 157 == 0;\n    return $\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpdpdypgxn.pl line 57,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nMissing\
    \ right curly or square bracket at /tmp/tmpdpdypgxn.pl line 92, at end of line\n\
    syntax error at /tmp/tmpdpdypgxn.pl line 92, at EOF\nExecution of /tmp/tmpdpdypgxn.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    return $r if $r != 0;\n    return $p;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 0;\n    return $p\
    \ if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == -1;\n    return\
    \ $p if $n == -2;\n    return $p if $n == -4;\n    return $p if $n == -8;\n  \
    \  return $p if $n == -16;\n    return $p if $n == -32;\n    return $p if $n ==\
    \ -64;\n    return $p if $n == -128 or $n == -256;\n    return $p if $n == -257;\n\
    \    return $p if $n == -32768 or $n == -65536;\n    return $p if $n == -8388608;\n\
    \    return $p if $n == -2147483648;\n    return $p if $n == -2147483647;\n  \
    \  return $p if $n == -2147483646;\n    return $p if $n == -2147483645;\n    return\
    \ $p if $n == -2147483644;\n    return $p if $n == -2147483643;\n    return $p\
    \ if $n == -2147483642;\n    return $p if $n == -2147483641;\n    return $p if\
    \ $n == -2147483640;\n    return $p if $n == -2147483639;\n    return $p if $n\
    \ == -2147483638;\n    return $p if $n == -2147483637;\n    return $p if $n ==\
    \ -2147483636;\n    return $p if $n == -2147483635;\n    return $p if $n == -2147483634;\n\
    \    return $p if $n == -2147483633;\n    return $p if $n == -2147483632;\n  \
    \  return $p if $n == -2147483631;\n    return $p if $n == -2147483630;\n    return\
    \ $p if $n == -2147483629;\n    return $p if $n == -2147483628;\n    return $p\
    \ if $n == -2147483627;\n    return $p if $n == -2147483626;\n    return $p if\
    \ $n == -2147483625;\n    return $p if $n == -2147483624;\n    return $p if $n\
    \ == -2147483623;\n    return $p if $n == -2147483622;\n    return $p if $n ==\
    \ -2147483621;\n    return $p if $n == -2147483620;\n    return $p if $n == -2147483619;\n\
    \    return $p if \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "\"use\" not allowed in expression at /tmp/tmpwgljoadu.pl line 50, near\
    \ \"if \n\"\nsyntax error at /tmp/tmpwgljoadu.pl line 50, near \"if \nuse Test::Deep\"\
    \nMissing right curly or square bracket at /tmp/tmpwgljoadu.pl line 85, at end\
    \ of line\nsyntax error at /tmp/tmpwgljoadu.pl line 85, at EOF\nExecution of /tmp/tmpwgljoadu.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 0;\n    my $sign = 1;\n    if ($n < 0) {\n\t$sign =\
    \ -1;\n\t$n = -$n;\n    }\n    while ($n > 0) {\n\t$res += $sign * $n % $p;\n\t\
    $sign *= -1;\n\t$n /= $p;\n    }\n    return $res;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 1;\n    my $mask = (1 << $p) - 1;\n    while ($n >=\
    \ $mask) {\n        $res *= $p;\n        $res %= $p;\n        $n -= $mask;\n \
    \   }\n    return $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = 0;\n    while ($x !=\
    \ 0) {\n        $z = ($x & $y) ^ $z;\n        $x = $x >> $y;\n        $y = $y\
    \ >> $y;\n    }\n    return $z;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $p if $n == 1;\n    return $p if $n == 0;\n    return $p if $n % $p;\n    return\
    \ $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 0;\n    my $sign = 1;\n    if ($n < 0) {\n        $sign\
    \ = -1;\n        $n = -$n;\n    }\n    my $m = $p->{mod};\n    my $a = $p->{a};\n\
    \    my $b = $p->{b};\n    my $c = $p->{c};\n    my $d = $p->{d};\n    my $e =\
    \ $p->{e};\n    my $f = $p->{f};\n    my $g = $p->{g};\n    my $h = $p->{h};\n\
    \    my $i = $p->{i};\n    my $j = $p->{j};\n    my $k = $p->{k};\n    my $l =\
    \ $p->{l};\n    my $m = $p->{m};\n    my $n = $p->{n};\n    my $o = $p->{o};\n\
    \    my $p = $p->{p};\n    my $q = $p->{q};\n    my $r = $p->{r};\n    my $s =\
    \ $p->{s};\n    my $t = $p->{t};\n    my $u = $p->{u};\n    my $v = $p->{v};\n\
    \    my $w = $p->{w};\n    my $x = $p->{x};\n    my $y = $p->{y};\n    my $z =\
    \ $p->{z};\n    my $a = $p->{a};\n    my $b = $p->{b};\n    my $c = $p->{c};\n\
    \    my $d = $p->{d};\n    my $e = $p->{e};\n    my $f = $p->{f};\n    my $g =\
    \ $p->{g};\n    my $h = $p->{h};\n    my $i = $p->{i};\n    my $j = $p->{j};\n\
    \    my $k = $p->{k};\n    my $l = $p->{l};\n    my $m = $p->{m};\n    my $n =\
    \ $p->{n};\n    my $o = $p->{o};\n    my $p = $p->{p};\n    my $q = $p->{q};\n\
    \    my $r = $p->{r};\n    my $s = $p->{s};\n    my $t = $p->{t};\n    my $u =\
    \ $p->{u};\n    my $v = $p->\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpza45_ldi.pl line 59,\
    \ near \"->\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpza45_ldi.pl line 59, near \"->\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpza45_ldi.pl line 94, at end of line\nsyntax\
    \ error at /tmp/tmpza45_ldi.pl line 94, at EOF\nExecution of /tmp/tmpza45_ldi.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = $n;\n    my $w = $p;\n\
    \    my $u = $n;\n    my $v = $p;\n    my $w2 = $n;\n    my $w3 = $n;\n    my\
    \ $w4 = $n;\n    my $w5 = $n;\n    my $w6 = $n;\n    my $w7 = $n;\n    my $w8\
    \ = $n;\n    my $w9 = $n;\n    my $w10 = $n;\n    my $w11 = $n;\n    my $w12 =\
    \ $n;\n    my $w13 = $n;\n    my $w14 = $n;\n    my $w15 = $n;\n    my $w16 =\
    \ $n;\n    my $w17 = $n;\n    my $w18 = $n;\n    my $w19 = $n;\n    my $w20 =\
    \ $n;\n    my $w21 = $n;\n    my $w22 = $n;\n    my $w23 = $n;\n    my $w24 =\
    \ $n;\n    my $w25 = $n;\n    my $w26 = $n;\n    my $w27 = $n;\n    my $w28 =\
    \ $n;\n    my $w29 = $n;\n    my $w30 = $n;\n    my $w31 = $n;\n    my $w32 =\
    \ $n;\n    my $w33 = $n;\n    my $w34 = $n;\n    my $w35 = $n;\n    my $w36 =\
    \ $n;\n    my $w37 = $n;\n    my $w38 = $n;\n    my $w39 = $n;\n    my $w40 =\
    \ $n;\n    my $w41 = $n;\n    my $w42 = $n;\n    my $w43 = $n;\n    my $w44 =\
    \ $n;\n    my $w45 = $n;\n    my $w46 = $n;\n    my $w47 = $n;\n    my $w48 =\
    \ $n;\n    my $w49 = $n;\n    my $w50 = $n;\n    my $w51 = $n;\n    my $w52 =\
    \ $n;\n    my $w53 = $n;\n    my $w54 = $n;\n    my $w55 = $n;\n    my $w56 =\
    \ $n;\n    my $w57 = $n;\n    my $w58 = $n;\n    my $w59 = $n;\n    my $w60 =\
    \ $n;\n    my $w61 = $n;\n    my $w62 = $n;\n    my $w63 = $n;\n    my $w64 =\
    \ $n;\n    my $w65 = $n;\n    my $w66 = $n;\n    my $w67 = $n;\n    my $w\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n       \
    \ if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpfiad1gqa.pl line 77, at end
    of line

    syntax error at /tmp/tmpfiad1gqa.pl line 77, near "$w

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpfiad1gqa.pl line 112, at end
    of line

    syntax error at /tmp/tmpfiad1gqa.pl line 112, at EOF

    Execution of /tmp/tmpfiad1gqa.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 0;\n    my $i = 1;\n    my $j = 1;\n    my $k = 1;\n\
    \    while ($i <= $n) {\n        $res = $res * $j + $k;\n        $j = ($j + $k)\
    \ % $p;\n        $k = ($k + $j) % $p;\n        $i++;\n    }\n    return $res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n == 0;\n    return $p if $n == 1;\n    return\
    \ $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    return $r if $r != 0;\n    return $p;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = $n;\n    my $mask = $p >> 1;\n    while ($mask) {\n\
    \        $res %= $p;\n        $mask >>= 1;\n    }\n    return $res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 0;\n    return $p\
    \ if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == 2;\n    return\
    \ $p if $n % 2 == 0;\n    return $p if $n % 3 == 0;\n    return $p if $n % 5 ==\
    \ 0;\n    return $p if $n % 7 == 0;\n    return $p if $n % 11 == 0;\n    return\
    \ $p if $n % 13 == 0;\n    return $p if $n % 17 == 0;\n    return $p if $n % 19\
    \ == 0;\n    return $p if $n % 23 == 0;\n    return $p if $n % 29 == 0;\n    return\
    \ $p if $n % 31 == 0;\n    return $p if $n % 37 == 0;\n    return $p if $n % 41\
    \ == 0;\n    return $p if $n % 43 == 0;\n    return $p if $n % 47 == 0;\n    return\
    \ $p if $n % 53 == 0;\n    return $p if $n % 59 == 0;\n    return $p if $n % 61\
    \ == 0;\n    return $p if $n % 67 == 0;\n    return $p if $n % 71 == 0;\n    return\
    \ $p if $n % 73 == 0;\n    return $p if $n % 79 == 0;\n    return $p if $n % 83\
    \ == 0;\n    return $p if $n % 89 == 0;\n    return $p if $n % 97 == 0;\n    return\
    \ $p if $n % 101 == 0;\n    return $p if $n % 103 == 0;\n    return $p if $n %\
    \ 107 == 0;\n    return $p if $n % 111 == 0;\n    return $p if $n % 121 == 0;\n\
    \    return $p if $n % 127 == 0;\n    return $p if $n % 131 == 0;\n    return\
    \ $p if $n % 137 == 0;\n    return $p if $n % 141 == 0;\n    return $p if $n %\
    \ 147 == 0;\n    return $p if $n % 151 == 0;\n    return $p if $n % 157 == 0;\n\
    \    return $p if $n % 161 == 0;\n    return $p if $n % 167 == 0;\n    return\
    \ $p if $n % 171 == 0;\n    return $p if $n % 177 == 0;\n    return $p if $n %\
    \ 181 == 0;\n    return $p if $n % 187 == 0;\n    return $p if $n % 191 == 0;\n\
    \    return $p if $n % 193 == 0;\n    return $p if $n % 197 == 0;\n    return\
    \ $p if $n % 201 == 0;\n    return $\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp_o_4hsah.pl line 57,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nMissing\
    \ right curly or square bracket at /tmp/tmp_o_4hsah.pl line 92, at end of line\n\
    syntax error at /tmp/tmp_o_4hsah.pl line 92, at EOF\nExecution of /tmp/tmp_o_4hsah.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 0;\n    my $sign = 1;\n    if ($n < 0) {\n\t$sign =\
    \ -1;\n\t$n = -$n;\n    }\n    my $m = Math::BigInt->new($p);\n    my $q = $m->bpow($n);\n\
    \    $res = $q->bmod($m);\n    if ($sign < 0) {\n\t$res = $m->bmul($res);\n  \
    \  }\n    return $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t locate object method "new" via package "Math::BigInt" (perhaps you
    forgot to load "Math::BigInt"?) at /tmp/tmpe03zjt14.pl line 10.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 0;\n    return $p\
    \ if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == -1;\n    return\
    \ $p if $n <= 0x3fffffff;\n    return $p if $n <= 0x3ffffffe;\n    return $p if\
    \ $n <= 0x3fffffff;\n    return $p if $n <= 0x3ffffffe;\n    return $p if $n <=\
    \ 0x3fffffff;\n    return $p if $n <= 0x3ffffffe;\n    return $p if $n <= 0x3fffffff;\n\
    \    return $p if $n <= 0x3ffffffe;\n    return $p if $n <= 0x3fffffff;\n    return\
    \ $p if $n <= 0x3ffffffe;\n    return $p if $n <= 0x3fffffff;\n    return $p if\
    \ $n <= 0x3ffffffe;\n    return $p if $n <= 0x3fffffff;\n    return $p if $n <=\
    \ 0x3ffffffe;\n    return $p if $n <= 0x3fffffff;\n    return $p if $n <= 0x3ffffffe;\n\
    \    return $p if $n <= 0x3fffffff;\n    return $p if $n <= 0x3ffffffe;\n    return\
    \ $p if $n <= 0x3fffffff;\n    return $p if $n <= 0x3ffffffe;\n    return $p if\
    \ $n <= 0x3fffffff;\n    return $p if $n <= 0x3ffffffe;\n    return $p if $n <=\
    \ 0x3fffffff;\n    return $p if $n <= 0x3ffffffe;\n    return $p if $n <= 0x3fffffff;\n\
    \    return $p if $n <= 0x3ffffffe;\n    return $p if $n <= 0x3fffffff;\n    return\
    \ $p if $n <= 0x3ffffffe;\n    return $p if $n <= 0x3fffffff;\n    return $p if\
    \ $n <= 0x3ffffffe;\n    return $p if $n <= 0x3fffffff;\n    return $p if $n <=\
    \ 0x3ffffffe;\n    return $p if $n <= 0x3fffffff;\n    return $p if $n <= 0x3ffffffe;\n\
    \    return $p if $n <= 0x3fffffff;\n    return $p if $n <= 0x3ffffffe;\n    return\
    \ $p if $n <= 0x3fffffff;\n    return $p if $n <= 0x\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'No digits found for hexadecimal literal at /tmp/tmptn6dm5yd.pl line 46,
    near "<= 0x

    "

    "use" not allowed in expression at /tmp/tmptn6dm5yd.pl line 47, at end of line

    syntax error at /tmp/tmptn6dm5yd.pl line 47, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmptn6dm5yd.pl line 82, at end of
    line

    syntax error at /tmp/tmptn6dm5yd.pl line 82, at EOF

    Execution of /tmp/tmptn6dm5yd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $m = $n;\n    my $q = $p;\n    while ($q) {\n        $m =\
    \ $m % $q;\n        $q = $q / 2;\n    }\n    return $m;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmp81lzja2v.pl line 7.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    return $r if $r != 0;\n    return $p;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 0;\n    my $sign = 1;\n    if ($n < 0) {\n\t$sign =\
    \ -1;\n\t$n = -$n;\n    }\n    my $i = 1;\n    my $j = 1;\n    my $k = 1;\n  \
    \  my $m = 1;\n    my $q = 1;\n    my $r = 1;\n    my $s = 1;\n    my $t = 1;\n\
    \    my $u = 1;\n    my $v = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n\
    \    my $z = 1;\n    my $a = 1;\n    my $b = 1;\n    my $c = 1;\n    my $d = 1;\n\
    \    my $e = 1;\n    my $f = 1;\n    my $g = 1;\n    my $h = 1;\n    my $i = 1;\n\
    \    my $j = 1;\n    my $k = 1;\n    my $m = 1;\n    my $q = 1;\n    my $r = 1;\n\
    \    my $s = 1;\n    my $t = 1;\n    my $u = 1;\n    my $v = 1;\n    my $w = 1;\n\
    \    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $a = 1;\n    my $b = 1;\n\
    \    my $c = 1;\n    my $d = 1;\n    my $e = 1;\n    my $f = 1;\n    my $g = 1;\n\
    \    my $h = 1;\n    my $i = 1;\n    my $j = 1;\n    my $k = 1;\n    my $m = 1;\n\
    \    my $q = 1;\n    my $r = 1;\n    my $s = 1;\n    my $t = 1;\n    my $u = 1;\n\
    \    my $v = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n\
    \    my $a = 1;\n    my $b = 1;\n    my $c = 1;\n    my $d = 1;\n    my $e = 1;\n\
    \    my $f = 1;\n    my $g = 1;\n    my $h = 1;\n    my $i = 1;\n    my $j = 1;\n\
    \    my $k = 1;\n    my $m = 1;\n    my $q = 1;\n    my $r = 1;\n    my $s = 1;\n\
    \    my $t = 1;\n    my $u = 1;\n    my $v = 1;\n    my $w = 1;\n    my $x = 1;\n\
    \    my $y = 1;\n    my $z = 1;\n    my $a = 1;\n    my $b = 1;\n    my $c = 1;\n\
    \    my $d = 1;\n    my $e = 1;\n    my $f = 1;\n    my $g = 1;\n    my $h = 1;\n\
    \    my $i = 1;\n    my $j = 1;\n    my $k = 1;\n    my $m = 1;\n    my $q = 1;\n\
    \    my $r = 1;\n    my $s = 1;\n    my $t = 1;\n    my $u = 1;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpj6yo3is0.pl line 142,
    at end of line

    syntax error at /tmp/tmpj6yo3is0.pl line 142, at EOF

    Execution of /tmp/tmpj6yo3is0.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 1;\n    return $p\
    \ if $n == 0;\n    return $p if $n == 1;\n    return $p if $n % 2 == 0;\n    return\
    \ $p if $n % 3 == 0;\n    return $p if $n % 5 == 0;\n    return $p if $n % 7 ==\
    \ 0;\n    return $p if $n % 11 == 0;\n    return $p if $n % 13 == 0;\n    return\
    \ $p if $n % 17 == 0;\n    return $p if $n % 19 == 0;\n    return $p if $n % 23\
    \ == 0;\n    return $p if $n % 29 == 0;\n    return $p if $n % 37 == 0;\n    return\
    \ $p if $n % 53 == 0;\n    return $p if $n % 59 == 0;\n    return $p if $n % 67\
    \ == 0;\n    return $p if $n % 71 == 0;\n    return $p if $n % 79 == 0;\n    return\
    \ $p if $n % 89 == 0;\n    return $p if $n % 97 == 0;\n    return $p if $n % 101\
    \ == 0;\n    return $p if $n % 103 == 0;\n    return $p if $n % 105 == 0;\n  \
    \  return $p if $n % 107 == 0;\n    return $p if $n % 109 == 0;\n    return $p\
    \ if $n % 111 == 0;\n    return $p if $n % 113 == 0;\n    return $p if $n % 115\
    \ == 0;\n    return $p if $n % 117 == 0;\n    return $p if $n % 119 == 0;\n  \
    \  return $p if $n % 121 == 0;\n    return $p if $n % 123 == 0;\n    return $p\
    \ if $n % 125 == 0;\n    return $p if $n % 127 == 0;\n    return $p if $n % 129\
    \ == 0;\n    return $p if $n % 131 == 0;\n    return $p if $n % 133 == 0;\n  \
    \  return $p if $n % 135 == 0;\n    return $p if $n % 137 == 0;\n    return $p\
    \ if $n % 139 == 0;\n    return $p if $n % 141 == 0;\n    return $p if $n % 143\
    \ == 0;\n    return $p if $n % 145 == 0;\n    return $p if $n % 147 == 0;\n  \
    \  return $p if $n % 149 == 0;\n    return $p if $n % 151 == 0;\n    return $p\
    \ if $n % 153 == 0;\n    return $p if $n % 155 == 0;\n    return $p if $n % 157\
    \ == 0;\n    return $p if $n % 159 == 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp51k8nmws.pl line 92, at
    end of line

    syntax error at /tmp/tmp51k8nmws.pl line 92, at EOF

    Execution of /tmp/tmp51k8nmws.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $n = int($n);\n    my $p = int($p);\n    my $r = $n % $p;\n\
    \    return $r if $r != 0;\n    return $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n if $n == 1;\n    return $p if $p == 1;\n    return $n if $n % $p == 0;\n\
    \    return $p if $n % $p == 1;\n    return $n if $p % $n == 0;\n    return $p\
    \ if $p % $n == 1;\n    return $n if $n % $p == $p % $n;\n    return $p if $n\
    \ % $p == $p % $n;\n    return $n if $p % $n == $n % $p;\n    return $p if $p\
    \ % $n == $n % $p;\n    return $n if $n % $p == $p % $n || $p % $n == $n % $p;\n\
    \    return $p if $p % $n == $n % $p || $n % $p == $p % $n;\n    return $n if\
    \ $n % $p == $p % $n || $p % $n == $n % $p;\n    return $p if $p % $n == $n %\
    \ $p || $n % $p == $p % $n;\n    return $n if $p % $n == $n % $p || $n % $p ==\
    \ $p % $n;\n    return $n if $n % $p == $p % $n || $p % $n == $n % $p;\n    return\
    \ $p if $p % $n == $n % $p || $n % $p == $p % $n;\n    return $n if $p % $n ==\
    \ $n % $p || $n % $p == $p % $n;\n    return $n if $n % $p == $p % $n || $p %\
    \ $n == $n % $p;\n    return $p if $p % $n == $n % $p || $n % $p == $p % $n;\n\
    \    return $n if $p % $n == $n % $p || $n % $p == $p % $n;\n    return $n if\
    \ $n % $p == $p % $n || $p % $n == $n % $p;\n    return $p if $p % $n == $n %\
    \ $p || $n % $p == $p % $n;\n    return $n if $p % $n == $n % $p || $n % $p ==\
    \ $p % $n;\n    return $n if $p % $n == $n % $p || $n % $p == $p % $n;\n\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n       \
    \ if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpatmo4j76.pl line 67, at
    end of line

    syntax error at /tmp/tmpatmo4j76.pl line 67, at EOF

    Execution of /tmp/tmpatmo4j76.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $q = $p;\n    my $k = 1;\n\
    \    while ($k <= $n) {\n        $q = $q * $q + $k;\n        $r = $r * $q % $p;\n\
    \        $k++;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n if $n == 0;\n    return $p if $p == 1;\n    return $n if $n == 1;\n    return\
    \ $n if $n % $p == 0;\n    return $p if $n % $p == 1;\n    return $n if $n % $p\
    \ == -1;\n    return $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $s = 1;\n    while ($r > $p) {\n        $r\
    \ %= $p;\n        $s *= 2;\n    }\n    return $s;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n if $n == 0;\n    return $p if $p == 0;\n    return $n if $n == 1;\n    return\
    \ $p if $p == 1;\n    return $n if $n == $p;\n    return $p if $p == $n;\n   \
    \ return $n if $n % $p;\n    return $p if $n % $p;\n    return $n if $n % $p ==\
    \ 0;\n    return $p if $n % $p == 0;\n    return $n if $n % $p == $p;\n    return\
    \ $p if $n % $p == $p;\n    return $n if $n % $p == $n / $p;\n    return $p if\
    \ $n % $p == $n / $p;\n    return $n if $n % $p == $n / $p;\n    return $p if\
    \ $n % $p == $n / $p;\n    return $n if $n % $p == $n / $p;\n    return $p if\
    \ $n % $p == $n / $p;\n    return $n if $n % $p == $n / $p;\n    return $p if\
    \ $n % $p == $n / $p;\n    return $n if $n % $p == $n / $p;\n    return $p if\
    \ $n % $p == $n / $p;\n    return $n if $n % $p == $n / $p;\n    return $p if\
    \ $n % $p == $n / $p;\n    return $n if $n % $p == $n / $p;\n    return $p if\
    \ $n % $p == $n / $p;\n    return $n if $n % $p == $n / $p;\n    return $p if\
    \ $n % $p == $n / $p;\n    return $n if $n % $p == $n / $p;\n    return $p if\
    \ $n % $p == $n / $p;\n    return $n if $n % $p == $n / $p;\n    return $p if\
    \ $n % $p == $n / $p;\n    return $n if $n % $p == $n / $p;\n    return $p if\
    \ $n % $p == $n / $p;\n    return $n if $n % $p == $n / $p;\n    return $p if\
    \ $n % $p == $n / $p;\n    return $n if $n % $p == $n / $p;\n    return $\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n       \
    \ if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmptvlgvr5w.pl line 44,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nMissing\
    \ right curly or square bracket at /tmp/tmptvlgvr5w.pl line 79, at end of line\n\
    syntax error at /tmp/tmptvlgvr5w.pl line 79, at EOF\nExecution of /tmp/tmptvlgvr5w.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 0;\n    return $p\
    \ if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == 2;\n    return\
    \ $p if $n % 2 == 0;\n    return $p if $n % 3 == 0;\n    return $p if $n % 5 ==\
    \ 0;\n    return $p if $n % 7 == 0;\n    return $p if $n % 11 == 0;\n    return\
    \ $p if $n % 13 == 0;\n    return $p if $n % 17 == 0;\n    return $p if $n % 19\
    \ == 0;\n    return $p if $n % 23 == 0;\n    return $p if $n % 29 == 0;\n    return\
    \ $p if $n % 31 == 0;\n    return $p if $n % 37 == 0;\n    return $p if $n % 41\
    \ == 0;\n    return $p if $n % 43 == 0;\n    return $p if $n % 47 == 0;\n    return\
    \ $p if $n % 53 == 0;\n    return $p if $n % 59 == 0;\n    return $p if $n % 61\
    \ == 0;\n    return $p if $n % 67 == 0;\n    return $p if $n % 71 == 0;\n    return\
    \ $p if $n % 73 == 0;\n    return $p if $n % 79 == 0;\n    return $p if $n % 83\
    \ == 0;\n    return $p if $n % 89 == 0;\n    return $p if $n % 97 == 0;\n    return\
    \ $p if $n % 101 == 0;\n    return $p if $n % 103 == 0;\n    return $p if $n %\
    \ 107 == 0;\n    return $p if $n % 111 == 0;\n    return $p if $n % 117 == 0;\n\
    \    return $p if $n % 121 == 0;\n    return $p if $n % 123 == 0;\n    return\
    \ $p if $n % 129 == 0;\n    return $p if $n % 131 == 0;\n    return $p if $n %\
    \ 137 == 0;\n    return $p if $n % 141 == 0;\n    return $p if $n % 147 == 0;\n\
    \    return $p if $n % 151 == 0;\n    return $p if $n % 157 == 0;\n    return\
    \ $p if $n % 161 == 0;\n    return $p if $n % 167 == 0;\n    return $p if $n %\
    \ 173 == 0;\n    return $p if $n % 179 == 0;\n    return $p if $n % 183 == 0;\n\
    \    return $p if $n % 189 == 0;\n    return $p if $n % 193 == 0;\n    return\
    \ $p if $n % 197 == 0;\n    return $\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpwr7a887c.pl line 57,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nMissing\
    \ right curly or square bracket at /tmp/tmpwr7a887c.pl line 92, at end of line\n\
    syntax error at /tmp/tmpwr7a887c.pl line 92, at EOF\nExecution of /tmp/tmpwr7a887c.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    if ($r == 0) {\n        return $p;\n  \
    \  }\n    elsif ($r < 0) {\n        return $p - $r;\n    }\n    else {\n     \
    \   return $p;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    return $r if $r != 0;\n    return $p;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = 0;\n    my $w = 0;\n\
    \    my $sign = 1;\n    my $xx = $x;\n    my $yy = $y;\n    my $zz = $z;\n   \
    \ my $ww = $w;\n    my $signx = $sign;\n    my $signy = $sign;\n    my $signz\
    \ = $sign;\n    my $signw = $sign;\n    my $xy = $xx & $yy;\n    my $yz = $yy\
    \ & $zz;\n    my $zw = $zz & $ww;\n    my $ww = $ww & $ww;\n    my $xw = $xx &\
    \ $ww;\n    my $yw = $yy & $ww;\n    my $zw = $zz & $ww;\n    my $ww = $ww & $ww;\n\
    \    my $xw = $xx & $ww;\n    my $yw = $yy & $ww;\n    my $zw = $zz & $ww;\n \
    \   my $ww = $ww & $ww;\n    my $xw = $xx & $ww;\n    my $yw = $yy & $ww;\n  \
    \  my $zw = $zz & $ww;\n    my $ww = $ww & $ww;\n    my $xw = $xx & $ww;\n   \
    \ my $yw = $yy & $ww;\n    my $zw = $zz & $ww;\n    my $ww = $ww & $ww;\n    my\
    \ $xw = $xx & $ww;\n    my $yw = $yy & $ww;\n    my $zw = $zz & $ww;\n    my $ww\
    \ = $ww & $ww;\n    my $xw = $xx & $ww;\n    my $yw = $yy & $ww;\n    my $zw =\
    \ $zz & $ww;\n    my $ww = $ww & $ww;\n    my $xw = $xx & $ww;\n    my $yw = $yy\
    \ & $ww;\n    my $zw = $zz & $ww;\n    my $ww = $ww & $ww;\n    my $xw = $xx &\
    \ $ww;\n    my $yw = $yy & $ww;\n    my $zw = $zz & $ww;\n    my $ww = $ww & $ww;\n\
    \    my $x\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpx0cmaan_.pl line 54, at end
    of line

    syntax error at /tmp/tmpx0cmaan_.pl line 54, near "$x

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpx0cmaan_.pl line 89, at end of
    line

    syntax error at /tmp/tmpx0cmaan_.pl line 89, at EOF

    Execution of /tmp/tmpx0cmaan_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $m = 1;\n    while ($m <= $p) {\n       \
    \ $r = ($r * $n) % $p;\n        $m++;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $q = $p;\n    my $e = 0;\n\
    \    my $k = 0;\n    my $z = 0;\n    my $x = 0;\n    my $w = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w2 = 0;\n    my $w3 = 0;\n    my $w4 = 0;\n    my $w5\
    \ = 0;\n    my $w6 = 0;\n    my $w7 = 0;\n    my $w8 = 0;\n    my $w9 = 0;\n \
    \   my $w10 = 0;\n    my $w11 = 0;\n    my $w12 = 0;\n    my $w13 = 0;\n    my\
    \ $w14 = 0;\n    my $w15 = 0;\n    my $w16 = 0;\n    my $w17 = 0;\n    my $w18\
    \ = 0;\n    my $w19 = 0;\n    my $w20 = 0;\n    my $w21 = 0;\n    my $w22 = 0;\n\
    \    my $w23 = 0;\n    my $w24 = 0;\n    my $w25 = 0;\n    my $w26 = 0;\n    my\
    \ $w27 = 0;\n    my $w28 = 0;\n    my $w29 = 0;\n    my $w30 = 0;\n    my $w31\
    \ = 0;\n    my $w32 = 0;\n    my $w33 = 0;\n    my $w34 = 0;\n    my $w35 = 0;\n\
    \    my $w36 = 0;\n    my $w37 = 0;\n    my $w38 = 0;\n    my $w39 = 0;\n    my\
    \ $w40 = 0;\n    my $w41 = 0;\n    my $w42 = 0;\n    my $w43 = 0;\n    my $w44\
    \ = 0;\n    my $w45 = 0;\n    my $w46 = 0;\n    my $w47 = 0;\n    my $w48 = 0;\n\
    \    my $w49 = 0;\n    my $w50 = 0;\n    my $w51 = 0;\n    my $w52 = 0;\n    my\
    \ $w53 = 0;\n    my $w54 = 0;\n    my $w55 = 0;\n    my $w56 = 0;\n    my $w57\
    \ = 0;\n    my $w58 = 0;\n    my $w59 = 0;\n    my $w60 = 0;\n    my $w61 = 0;\n\
    \    my $w62 = 0;\n    my $w63 = 0;\n    my $w64 = 0;\n    my $w65 = 0;\n    my\
    \ $w66 = 0;\n    my $w67 = 0;\n    my $w68 = 0;\n    my $w69 = 0;\n    my $w70\
    \ = 0;\n    my $w71 = 0;\n    my $w72 = 0;\n    my $w73 = 0;\n    my $w74 = 0;\n\
    \    my $w75 = 0;\n    my $w76 = 0;\n    my $w77 = 0;\n    my $w78 = 0;\n    my\
    \ $w\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp0760mjhj.pl line 92, at end
    of line

    syntax error at /tmp/tmp0760mjhj.pl line 92, near "$w

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp0760mjhj.pl line 127, at end
    of line

    syntax error at /tmp/tmp0760mjhj.pl line 127, at EOF

    Execution of /tmp/tmp0760mjhj.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $n if $n == 1;\n    return\
    \ $p if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == 0;\n    return\
    \ $p if $n == 1;\n    return $p if $n == 0;\n    return $p if $n == 1;\n    return\
    \ $p if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == 0;\n    return\
    \ $p if $n == 1;\n    return $p if $n == 0;\n    return $p if $n == 1;\n    return\
    \ $p if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == 0;\n    return\
    \ $p if $n == 1;\n    return $p if $n == 0;\n    return $p if $n == 1;\n    return\
    \ $p if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == 0;\n    return\
    \ $p if $n == 1;\n    return $p if $n == 0;\n    return $p if $n == 1;\n    return\
    \ $p if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == 0;\n    return\
    \ $p if $n == 1;\n    return $p if $n == 0;\n    return $p if $n == 1;\n    return\
    \ $p if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == 0;\n    return\
    \ $p if $n == 1;\n    return $p if $n == 0;\n    return $p if $n == 1;\n    return\
    \ $p if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == 0;\n    return\
    \ $p if $n == 1;\n    return $p if $n == 0;\n    return $p if $n == 1;\n    return\
    \ $p if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == 0;\n    return\
    \ $p if $n == 1;\n    return $p if $n == 0;\n    return $p if $n == 1;\n    return\
    \ $p if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == 0;\n    return\
    \ $p if $n == 1;\n    return $p if $n == 0;\n    return $p if $n == 1;\n    return\
    \ $p if $n == 0;\n    return $p if $n == 1;\n    return $p if $n == 0;\n    return\
    \ $p if $n == 1;\n    return $p if $n == 0;\n    return $p if $n == 1;\n    return\
    \ $p if $n == 0;\n    return $p if $n == 1;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpe9al_dmq.pl line 103,
    at end of line

    syntax error at /tmp/tmpe9al_dmq.pl line 103, at EOF

    Execution of /tmp/tmpe9al_dmq.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = 1;\n    my $w = 1;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $wu = 0;\n    my $wv = 0;\n    my $wuv\
    \ = 0;\n    my $wuvw = 0;\n    my $wuvwx = 0;\n    my $wuvwxy = 0;\n    my $wuvwxyz\
    \ = 0;\n    my $wuvwxyzw = 0;\n    my $wuvwxyzwu = 0;\n    my $wuvwxyzwuv = 0;\n\
    \    my $wuvwxyzwuvw = 0;\n    my $wuvwxyzwuvwx = 0;\n    my $wuvwxyzwuvwxy =\
    \ 0;\n    my $wuvwxyzwuvwxyz = 0;\n    my $wuvwxyzwuvwxyzw = 0;\n    my $wuvwxyzwuvwxyzwu\
    \ = 0;\n    my $wuvwxyzwuvwxyzwuv = 0;\n    my $wuvwxyzwuvwxyzwuvw = 0;\n    my\
    \ $wuvwxyzwuvwxyzwuvwx = 0;\n    my $wuvwxyzwuvwxyzwuvwxy = 0;\n    my $wuvwxyzwuvwxyzwuvwxyz\
    \ = 0;\n    my $wuvwxyzwuvwxyzwuvwxyzw = 0;\n    my $wuvwxyzwuvwxyzwuvwxyzwu =\
    \ 0;\n    my $wuvwxyzwuvwxyzwuvwxyzwuv = 0;\n    my $wuvwxyzwuvwxyzwuvwxyzwuvw\
    \ = 0;\n    my $wuvwxyzwuvwxyzwuvwxyzwuvwx = 0;\n    my $wuvwxyzwuvwxyzwuvwxyzwuvwxy\
    \ = 0;\n    my $wuvwxyzwuvwxyzwuvwxyzwuvwxyz = 0;\n    my $wuvwxyzwuvwxyzwuvwxyzwuvwxyzw\
    \ = 0;\n    my $wuvwxyzwuvwxyzwuvwxyzwuvwxyzwu = 0;\n    my $wuvwxyzwuvwxyzwuvwxyzwuvwxyzwuv\
    \ = 0;\n    my $wuvwxyzwuvwxyzwuvwxyzwuvwxyzwuvw = 0;\n    my $wuvwxyzwuvwxyzwuvwxyzwuvwxyzwuvwx\
    \ = 0;\n    my $wuvwxyzwuvwxyzwuv\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmplxfqcitd.pl line 44, at end
    of line

    syntax error at /tmp/tmplxfqcitd.pl line 44, near "$wuvwxyzwuvwxyzwuv

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmplxfqcitd.pl line 79, at end of
    line

    syntax error at /tmp/tmplxfqcitd.pl line 79, at EOF

    Execution of /tmp/tmplxfqcitd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $k;\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp8gu71mvv.pl line 42, at
    end of line

    syntax error at /tmp/tmp8gu71mvv.pl line 42, at EOF

    Execution of /tmp/tmp8gu71mvv.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $p if $n == 1;\n    return $p if $n == 0;\n    return $p + modp($n - 1, $p)\
    \ % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 1;\n    my $i;\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $res *= $p;\n        $res %= $p;\n    }\n    return $res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = 0;\n    my $sign = 1;\n    if ($n < 0) {\n        $sign\
    \ = -1;\n        $n = -$n;\n    }\n    while ($n > 0) {\n        $res = $res *\
    \ $p;\n        $n--;\n    }\n    return $sign * $res;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = 0;\n    my $r = 1;\n\
    \    my $m;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpmien4axd.pl line 44, at
    end of line

    syntax error at /tmp/tmpmien4axd.pl line 44, at EOF

    Execution of /tmp/tmpmien4axd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $t = 1;\n    my $m = 1;\n    my $q = 0;\n\
    \    my $k = 0;\n    my $z = 0;\n    my $zk = 0;\n    my $zk2 = 0;\n    my $zk3\
    \ = 0;\n    my $zk4 = 0;\n    my $zk5 = 0;\n    my $zk6 = 0;\n    my $zk7 = 0;\n\
    \    my $zk8 = 0;\n    my $zk9 = 0;\n    my $zk10 = 0;\n    my $zk11 = 0;\n  \
    \  my $zk12 = 0;\n    my $zk13 = 0;\n    my $zk14 = 0;\n    my $zk15 = 0;\n  \
    \  my $zk16 = 0;\n    my $zk17 = 0;\n    my $zk18 = 0;\n    my $zk19 = 0;\n  \
    \  my $zk20 = 0;\n    my $zk21 = 0;\n    my $zk22 = 0;\n    my $zk23 = 0;\n  \
    \  my $zk24 = 0;\n    my $zk25 = 0;\n    my $zk26 = 0;\n    my $zk27 = 0;\n  \
    \  my $zk28 = 0;\n    my $zk29 = 0;\n    my $zk30 = 0;\n    my $zk31 = 0;\n  \
    \  my $zk32 = 0;\n    my $zk33 = 0;\n    my $zk34 = 0;\n    my $zk35 = 0;\n  \
    \  my $zk36 = 0;\n    my $zk37 = 0;\n    my $zk38 = 0;\n    my $zk39 = 0;\n  \
    \  my $zk40 = 0;\n    my $zk41 = 0;\n    my $zk42 = 0;\n    my $zk43 = 0;\n  \
    \  my $zk44 = 0;\n    my $zk45 = 0;\n    my $zk46 = 0;\n    my $zk47 = 0;\n  \
    \  my $zk48 = 0;\n    my $zk49 = 0;\n    my $zk50 = 0;\n    my $zk51 = 0;\n  \
    \  my $zk52 = 0;\n    my $zk53 = 0;\n    my $zk54 = 0;\n    my $zk55 = 0;\n  \
    \  my $zk56 = 0;\n    my $zk57 = 0;\n    my $zk58 = 0;\n    my $zk59 = 0;\n  \
    \  my $zk60 = 0;\n    my $zk61 = 0;\n    my $zk62 = 0;\n    my $zk63 = 0;\n  \
    \  my $zk64 = 0;\n    my $zk65 = 0;\n    my $zk66 = 0;\n    my $zk67 = 0;\n  \
    \  my $zk68 = 0;\n    my $zk69 = 0;\n    my $zk\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpzr0gfi4v.pl line 80, at end
    of line

    syntax error at /tmp/tmpzr0gfi4v.pl line 80, near "$zk

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpzr0gfi4v.pl line 115, at end
    of line

    syntax error at /tmp/tmpzr0gfi4v.pl line 115, at EOF

    Execution of /tmp/tmpzr0gfi4v.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    $x -= $x % $p;\n    $x -= $x % $p;\n    $x -=\
    \ $x % $p;\n    return $x;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $m = $n >> $p;\n    $m += $n & $p;\n    return $m;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n       \
    \ if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $mask = 1;\n    my $carry = 0;\n    my $i;\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n     \
    \   if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp1usjm4vz.pl line 43, at
    end of line

    syntax error at /tmp/tmp1usjm4vz.pl line 43, at EOF

    Execution of /tmp/tmp1usjm4vz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: -1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = $n;\n    my $mask = (1 << $p) - 1;\n    while ($res\
    \ & $mask) {\n        $res &= ~$mask;\n        $res ^= $p;\n    }\n    return\
    \ $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013903
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $p if $n == 1;\n    return $p if $n == 0;\n    return $p if $n == -1;\n    return\
    \ $p if $n == -2;\n    return $p if $n == -$p;\n    return $p if $n == -$p+1;\n\
    \    return $p if $n == -$p+2;\n    return $p if $n == -$p+3;\n    return $p if\
    \ $n == -$p+4;\n    return $p if $n == -$p+5;\n    return $p if $n == -$p+6;\n\
    \    return $p if $n == -$p+7;\n    return $p if $n == -$p+8;\n    return $p if\
    \ $n == -$p+9;\n    return $p if $n == -$p+10;\n    return $p if $n == -$p+11;\n\
    \    return $p if $n == -$p+12;\n    return $p if $n == -$p+13;\n    return $p\
    \ if $n == -$p+14;\n    return $p if $n == -$p+15;\n    return $p if $n == -$p+16;\n\
    \    return $p if $n == -$p+17;\n    return $p if $n == -$p+18;\n    return $p\
    \ if $n == -$p+19;\n    return $p if $n == -$p+20;\n    return $p if $n == -$p+21;\n\
    \    return $p if $n == -$p+22;\n    return $p if $n == -$p+23;\n    return $p\
    \ if $n == -$p+24;\n    return $p if $n == -$p+25;\n    return $p if $n == -$p+26;\n\
    \    return $p if $n == -$p+27;\n    return $p if $n == -$p+28;\n    return $p\
    \ if $n == -$p+29;\n    return $p if $n == -$p+30;\n    return $p if $n == -$p+31;\n\
    \    return $p if $n == -$p+32;\n    return $p if $n == -$p+33;\n    return $p\
    \ if $n == -$p+34;\n    return $p if $n == -$p+35;\n    return $p if $n == -$p+36;\n\
    \    return $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpzpbwu7kj.pl line 48,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nMissing\
    \ right curly or square bracket at /tmp/tmpzpbwu7kj.pl line 83, at end of line\n\
    syntax error at /tmp/tmpzpbwu7kj.pl line 83, at EOF\nExecution of /tmp/tmpzpbwu7kj.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $x = $n;\n    my $y = $p;\n    my $z = $n;\n    my $w = $p;\n\
    \    my $a = 1;\n    my $b = 1;\n    my $c = 1;\n    my $d = 1;\n    my $e = 1;\n\
    \    my $f = 1;\n    my $g = 1;\n    my $h = 1;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 1;\n    my $m = 1;\n    my $n = 1;\n    my $o = 1;\n\
    \    my $p = 1;\n    my $q = 1;\n    my $r = 1;\n    my $s = 1;\n    my $t = 1;\n\
    \    my $u = 1;\n    my $v = 1;\n    my $w = 1;\n    my $x = 1;\n    my $y = 1;\n\
    \    my $z = 1;\n    my $a = 1;\n    my $b = 1;\n    my $c = 1;\n    my $d = 1;\n\
    \    my $e = 1;\n    my $f = 1;\n    my $g = 1;\n    my $h = 1;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 1;\n    my $m = 1;\n    my $n = 1;\n\
    \    my $o = 1;\n    my $p = 1;\n    my $q = 1;\n    my $r = 1;\n    my $s = 1;\n\
    \    my $t = 1;\n    my $u = 1;\n    my $v = 1;\n    my $w = 1;\n    my $x = 1;\n\
    \    my $y = 1;\n    my $z = 1;\n    my $a = 1;\n    my $b = 1;\n    my $c = 1;\n\
    \    my $d = 1;\n    my $e = 1;\n    my $f = 1;\n    my $g = 1;\n    my $h = 1;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 1;\n    my $m = 1;\n\
    \    my $n = 1;\n    my $o = 1;\n    my $p = 1;\n    my $q = 1;\n    my $r = 1;\n\
    \    my $s = 1;\n    my $t = 1;\n    my $u = 1;\n    my $v = 1;\n    my $w = 1;\n\
    \    my $x = 1;\n    my $y = 1;\n    my $z = 1;\n    my $a = 1;\n    my $b = 1;\n\
    \    my $c = 1;\n    my $d = 1;\n    my $e = 1;\n    my $f = 1;\n    my $g = 1;\n\
    \    my $h = 1;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 1;\n\
    \    my $m = 1;\n    my $n = 1;\n    my $o = 1;\n    my $p = 1;\n    my $q = 1;\n\
    \    my $r = 1;\n    my $s = 1;\n    my $t = 1;\n    my $\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpfx82zhc1.pl line 107,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpfx82zhc1.pl line 107, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpfx82zhc1.pl line 142, at end of line\nsyntax\
    \ error at /tmp/tmpfx82zhc1.pl line 142, at EOF\nExecution of /tmp/tmpfx82zhc1.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $m = 1;\n    my $q = 0;\n    while ($q <\
    \ $p) {\n        $q += $m;\n        $r -= $m * $r;\n        $m *= 2;\n    }\n\
    \    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n % $p;\n    if ($r == 0) {\n        return $p;\n  \
    \  }\n    return $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = $n;\n    my $s = 1;\n    while ($s > 0) {\n        $r\
    \ = ($r % $p) + $p;\n        $s = $s >> 1;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013897
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $m = 1;\n    my $q = $p;\n    my $t = 1;\n\
    \    my $k = 0;\n    my $j = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $j = 0;\n    my $\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpwfvl16ah.pl line 107,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpwfvl16ah.pl line 107, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpwfvl16ah.pl line 142, at end of line\nsyntax\
    \ error at /tmp/tmpwfvl16ah.pl line 142, at EOF\nExecution of /tmp/tmpwfvl16ah.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n == 0;\n    return $n if $n == 1;\n    return\
    \ $n if $n == $p;\n    return $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 2;\n    return $p\
    \ if $n == 1;\n    return $p if $n == 0;\n    return $p if $n <= $p;\n    return\
    \ $p if $n >= $p;\n    return $p if $n >= $p / 2;\n    return $p if $n % 2 ==\
    \ 0;\n    return $p if $n % 3 == 0;\n    return $p if $n % 5 == 0;\n    return\
    \ $p if $n % 7 == 0;\n    return $p if $n % 11 == 0;\n    return $p if $n % 13\
    \ == 0;\n    return $p if $n % 17 == 0;\n    return $p if $n % 19 == 0;\n    return\
    \ $p if $n % 23 == 0;\n    return $p if $n % 29 == 0;\n    return $p if $n % 31\
    \ == 0;\n    return $p if $n % 37 == 0;\n    return $p if $n % 41 == 0;\n    return\
    \ $p if $n % 43 == 0;\n    return $p if $n % 47 == 0;\n    return $p if $n % 53\
    \ == 0;\n    return $p if $n % 59 == 0;\n    return $p if $n % 61 == 0;\n    return\
    \ $p if $n % 67 == 0;\n    return $p if $n % 71 == 0;\n    return $p if $n % 73\
    \ == 0;\n    return $p if $n % 79 == 0;\n    return $p if $n % 83 == 0;\n    return\
    \ $p if $n % 89 == 0;\n    return $p if $n % 97 == 0;\n    return $p if $n % 101\
    \ == 0;\n    return $p if $n % 103 == 0;\n    return $p if $n % 107 == 0;\n  \
    \  return $p if $n % 111 == 0;\n    return $p if $n % 117 == 0;\n    return $p\
    \ if $n % 121 == 0;\n    return $p if $n % 123 == 0;\n    return $p if $n % 127\
    \ == 0;\n    return $p if $n % 131 == 0;\n    return $p if $n % 137 == 0;\n  \
    \  return $p if $n % 141 == 0;\n    return $p if $n % 147 == 0;\n    return $p\
    \ if $n % 151 == 0;\n    return $p if $n % 157 == 0;\n    return $p if $n % 161\
    \ == 0;\n    return $p if $n % 167 == 0;\n    return $p if $n % 173 == 0;\n  \
    \  return $p if $n % 179 == 0;\n    return $p if $n % 183 == 0;\n    return $p\
    \ if $n % 187 == \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmppll8vfa5.pl line 56, at end
    of line

    syntax error at /tmp/tmppll8vfa5.pl line 56, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmppll8vfa5.pl line 91, at end of
    line

    syntax error at /tmp/tmppll8vfa5.pl line 91, at EOF

    Execution of /tmp/tmppll8vfa5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $res = $n;\n    $res %= $p;\n    if ($res == 0) {\n      \
    \  $res = $p;\n    }\n    return $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p < 1;\n    return $p\
    \ if $n == 0;\n    return $p if $n == 1;\n    return $p if $n % 2 == 0;\n    return\
    \ $p if $n % 3 == 0;\n    return $p if $n % 5 == 0;\n    return $p if $n % 7 ==\
    \ 0;\n    return $p if $n % 11 == 0;\n    return $p if $n % 13 == 0;\n    return\
    \ $p if $n % 17 == 0;\n    return $p if $n % 19 == 0;\n    return $p if $n % 23\
    \ == 0;\n    return $p if $n % 29 == 0;\n    return $p if $n % 37 == 0;\n    return\
    \ $p if $n % 53 == 0;\n    return $p if $n % 59 == 0;\n    return $p if $n % 67\
    \ == 0;\n    return $p if $n % 71 == 0;\n    return $p if $n % 79 == 0;\n    return\
    \ $p if $n % 89 == 0;\n    return $p if $n % 97 == 0;\n    return $p if $n % 101\
    \ == 0;\n    return $p if $n % 103 == 0;\n    return $p if $n % 105 == 0;\n  \
    \  return $p if $n % 107 == 0;\n    return $p if $n % 109 == 0;\n    return $p\
    \ if $n % 111 == 0;\n    return $p if $n % 113 == 0;\n    return $p if $n % 115\
    \ == 0;\n    return $p if $n % 117 == 0;\n    return $p if $n % 119 == 0;\n  \
    \  return $p if $n % 121 == 0;\n    return $p if $n % 123 == 0;\n    return $p\
    \ if $n % 125 == 0;\n    return $p if $n % 127 == 0;\n    return $p if $n % 129\
    \ == 0;\n    return $p if $n % 131 == 0;\n    return $p if $n % 133 == 0;\n  \
    \  return $p if $n % 135 == 0;\n    return $p if $n % 137 == 0;\n    return $p\
    \ if $n % 139 == 0;\n    return $p if $n % 141 == 0;\n    return $p if $n % 143\
    \ == 0;\n    return $p if $n % 145 == 0;\n    return $p if $n % 147 == 0;\n  \
    \  return $p if $n % 149 == 0;\n    return $p if $n % 151 == 0;\n    return $p\
    \ if $n % 153 == 0;\n    return $p if $n % 155 == 0;\n    return $p if $n % 157\
    \ == 0;\n    return $p if $n % 159 == 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp51k8nmws.pl line 92, at
    end of line

    syntax error at /tmp/tmp51k8nmws.pl line 92, at EOF

    Execution of /tmp/tmp51k8nmws.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $p if $p <= 0;\n    return\
    \ $n if $n == 1;\n    return $p if $p == 1;\n    return $n if $n == $p;\n    return\
    \ $p if $p == $n;\n    return $n if $n % $p == 0;\n    return $p if $n % $p ==\
    \ 1;\n    return $n if $n % $p == -1;\n    return $p if $n % $p == -2;\n    return\
    \ $n if $n % $p == -$p;\n    return $p if $n % $p == -$n;\n    return $n if $n\
    \ % $p == -$p;\n    return $p if $n % $p == -$n;\n    return $n if $n % $p ==\
    \ -$p;\n    return $p if $n % $p == -$n;\n    return $n if $n % $p == -$p;\n \
    \   return $p if $n % $p == -$n;\n    return $n if $n % $p == -$p;\n    return\
    \ $p if $n % $p == -$n;\n    return $n if $n % $p == -$p;\n    return $p if $n\
    \ % $p == -$n;\n    return $n if $n % $p == -$p;\n    return $p if $n % $p ==\
    \ -$n;\n    return $n if $n % $p == -$p;\n    return $p if $n % $p == -$n;\n \
    \   return $n if $n % $p == -$p;\n    return $p if $n % $p == -$n;\n    return\
    \ $n if $n % $p == -$p;\n    return $p if $n % $p == -$n;\n    return $n if $n\
    \ % $p == -$p;\n    return $p if $n % $p == -$n;\n    return $n if $n % $p ==\
    \ -$p;\n    return $p if $n % $p == -$n;\n    return $n if $n % $p == -$p;\n \
    \   return $p if $n % $p == -$n;\n    return $n if $n % $p == -$p;\n    return\
    \ $p if $n % $p == -$n;\n    return $n if $n % $p == -$p;\n    return $p if $n\
    \ % $p == -$n;\n    return $n if $n % $p == -$p;\n    return $p if $n % $p ==\
    \ -\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp4cuabp84.pl line 46, at end
    of line

    syntax error at /tmp/tmp4cuabp84.pl line 46, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp4cuabp84.pl line 81, at end of
    line

    syntax error at /tmp/tmp4cuabp84.pl line 81, at EOF

    Execution of /tmp/tmp4cuabp84.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n <= 0;\n    return $n if $n == 1;\n    return\
    \ $n if $p < $n;\n    return $n % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013898
