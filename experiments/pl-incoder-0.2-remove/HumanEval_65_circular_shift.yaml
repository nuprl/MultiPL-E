name: HumanEval_65_circular_shift
language: pl
prompt: "# Circular shift the digits of the integer x, shift the digits right by shift\n\
  # and return the result as a string.\n# If shift > number of digits, return digits\
  \ reversed.\nsub circular_shift {\n    my($x, $shift) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&circular_shift;\n\
  \        if(eq_deeply($candidate->(100, 2),\"001\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 2),\"12\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(97,\
  \ 8),\"79\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(12, 1),\"21\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(11, 101),\"11\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($digits) = $x;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)", '    my($digits, $i, $j, $carry);', "    my($digits, $i, $j, $carry) = ($x\
    \ =~ /(\\d+)(\\D+)(\\d+)/);\n    $digits = $digits - $shift;\n    $digits = $digits\
    \ < 0 ? 0 : $digits;\n    $digits = $digits > $#digits ? $#digits : $digits;\n\
    \    $digits = $digits - 1;\n    $digits = $digits < 0 ? 0 : $digits;\n    $digits\
    \ = $digits > $#digits ? $#digits : $digits;\n    $digits = $digits - 1;\n   \
    \ $digits = $digits < 0 ? 0 : $digits;\n    $digits = $digits > $#digits ? $#digits\
    \ : $digits;\n    $digits = $digits - 1;\n    $digits = $digits < 0 ? 0 : $digits;\n\
    \    $digits = $digits > $#digits ? $#digits : $digits;\n    $digits = $digits\
    \ - 1;\n    $digits = $digits < 0 ? 0 : $digits;\n    $digits = $digits > $#digits\
    \ ? $#digits : $digits;\n    $digits = $digits - 1;\n    $digits = $digits < 0\
    \ ? 0 : $digits;\n    $digits = $digits > $#digits ? $#digits : $digits;\n   \
    \ $digits = $digits - 1;\n    $digits = $digits < 0 ? 0 : $digits;\n    $digits\
    \ = $digits > $#digits ? $#digits : $digits;\n    $digits = $digits - 1;\n   \
    \ $digits = $digits < 0 ? 0 : $digits;\n    $digits = $digits > $#digits ? $#digits\
    \ : $digits;\n    $digits = $digits - 1;\n    $digits = $digits < 0 ? 0 : $digits;\n\
    \    $digits = $digits > $#digits ? $#digits : $digits;\n    $digits = $digits\
    \ - 1;\n    $digits = $digits < 0 ? 0 : $digits;\n    $digits = $digits > $#digits\
    \ ? $#digits : $digits;\n    $digits = $digits - 1;\n    $digits = $digits < 0\
    \ ? 0 : $digits;\n    $digits = $digits > $#digits ? $#digits : $digits;\n   \
    \ $digits = $digits - 1;\n    $digits = $digits < 0 ? 0 : $digits;\n    $digits\
    \ = $digits > $#digits ? $#digits : $digits;\n    $digits = $digits - 1;\n   \
    \ $digits = $digits < 0 ? 0 : $digits;\n    $digits = $digits > $#digits ? $#digits\
    \ : $digits;\n    $", "    my $digits = $x % 10;\n    my $reversed = \"\";\n \
    \   my $i = $shift;\n    while ($i >= 0) {\n        $reversed .= $digits;\n  \
    \      $digits *= 10;\n        $i--;\n    }\n    return $reversed;\n}", '    my($digits,
    $reversed_digits);', "    my($digits, $reversed) = (0, 0);\n    my $i = 0;\n \
    \   while ($i < $shift) {\n        $digits += $x % 10;\n        $x = int($x /\
    \ 10);\n        $reversed = ($reversed + $digits) % 10;\n        $i++;\n    }\n\
    \    return $reversed;\n}", "    my($digits) = $x;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)", "    my($digits) = length($x);\n    my($result) = '';\n  \
    \  my $i = $shift;\n    while ($i >= 0) {\n        $result .= substr($x, $i, 1);\n\
    \        $i -= 1;\n    }\n    $result .= substr($x, $i, $digits);\n    return\
    \ $result;\n}", "    my $digits = $x;\n    my $reversed = \"\";\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $digit;\n    my $carry = 0;\n    my $tmp;\n\
    \    my $num_digits = $digits / $base;\n    my $remainder = $digits % $base;\n\
    \    my $num_digits_tmp = $num_digits;\n    my $num_digits_remainder = $num_digits;\n\
    \    my $num_digits_tmp_remainder = $num_digits;\n    my $num_digits_remainder_tmp\
    \ = $num_digits;\n    my $num_digits_remainder_tmp_remainder = $num_digits;\n\
    \    my $num_digits_remainder_tmp_remainder_tmp = $num_digits;\n    my $num_digits_remainder_tmp_remainder_tmp_remainder\
    \ = $num_digits;\n    my $num_digits_remainder_tmp_remainder_tmp_remainder_tmp\
    \ = $num_digits;\n    my $num_digits_remainder_tmp_remainder_tmp_remainder_tmp_remainder\
    \ = $num_digits;\n    my $num_digits_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp\
    \ = $num_digits;\n    my $num_digits_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder\
    \ = $num_digits;\n    my $num_digits_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp\
    \ = $num_digits;\n    my $num_digits_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder\
    \ = $num_digits;\n    my $num_digits_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp\
    \ = $num_digits;\n    my $num_digits_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder\
    \ = $num_digits;\n    my $num_digits_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp\
    \ = $num_digits;\n    my $num_digits_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder\
    \ = $num_digits;\n    my $num_digits_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp_remainder_tmp\
    \ = $num_digit", "    my($digits, $reversed, $i, $j);\n    my($digits_len) = length($x);\n\
    \    my($shift_len) = length($shift);", "    my $digits = $x % 10;\n    $x /=\
    \ 10;\n    $x .= $digits while $x % 10 != 0;\n    $x /= 10;\n    $x .= $digits\
    \ while $x % 10 != 0;\n    return $x;\n}", "    my($digits) = length($x);\n  \
    \  my($reversed) = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n   \
    \ my $digit;\n    my $carry = 0;\n    my $carry2;\n    my $carry3;\n    my $carry4;\n\
    \    my $carry5;\n    my $carry6;\n    my $carry7;\n    my $carry8;\n    my $carry9;\n\
    \    my $carry10;\n    my $carry11;\n    my $carry12;\n    my $carry13;\n    my\
    \ $carry14;\n    my $carry15;\n    my $carry16;\n    my $carry17;\n    my $carry18;\n\
    \    my $carry19;\n    my $carry20;\n    my $carry21;\n    my $carry22;\n    my\
    \ $carry23;\n    my $carry24;\n    my $carry25;\n    my $carry26;\n    my $carry27;\n\
    \    my $carry28;\n    my $carry29;\n    my $carry30;\n    my $carry31;\n    my\
    \ $carry32;\n    my $carry33;\n    my $carry34;\n    my $carry35;\n    my $carry36;\n\
    \    my $carry37;\n    my $carry38;\n    my $carry39;\n    my $carry40;\n    my\
    \ $carry41;\n    my $carry42;\n    my $carry43;\n    my $carry44;\n    my $carry45;\n\
    \    my $carry46;\n    my $carry47;\n    my $carry48;\n    my $carry49;\n    my\
    \ $carry50;\n    my $carry51;\n    my $carry52;\n    my $carry53;\n    my $carry54;\n\
    \    my $carry55;\n    my $carry56;\n    my $carry57;\n    my $carry58;\n    my\
    \ $carry59;\n    my $carry60;\n    my $carry61;\n    my $carry62;\n    my $carry63;\n\
    \    my $carry64;\n    my $carry65;\n    my $carry66;\n    my $carry67;\n    my\
    \ $carry68;\n    my $carry69;\n    my $carry70;\n    my $carry71;\n    my $carry72;\n\
    \    my $carry73;\n    my $carry74;\n    my $carry75;\n    my $carry76;\n    my\
    \ $carry77;\n    my $carry78;\n    my $carry79;\n    my $carry80;\n    my $carry81;\n\
    \    my $carry82;\n    my $carry83", "    my $digits = $x->{_digits} || $x->{_str};\n\
    \    my $sign = $x->{sign};\n    my $len = length($digits);\n    my $digits_reversed\
    \ = reverse $digits;\n    my $digits_shifted = $digits_reversed;\n    my $digits_shifted_len\
    \ = length($digits_shifted);\n    my $shift_digits = $digits_shifted_len - $shift;\n\
    \    my $shift_digits_reversed = reverse $shift_digits;\n    my $shift_digits_shifted\
    \ = $shift_digits_reversed;\n    my $shift_digits_shifted_len = length($shift_digits_shifted);\n\
    \    my $shift_digits_reversed_len = length($shift_digits_reversed);\n    my $shift_digits_shifted_digits\
    \ = substr($shift_digits_shifted, 0, $shift_digits_shifted_len);\n    my $shift_digits_reversed_digits\
    \ = substr($shift_digits_reversed, 0, $shift_digits_reversed_len);\n    my $shift_digits_reversed_digits_len\
    \ = length($shift_digits_reversed_digits);\n    my $shift_digits_shifted_digits_len\
    \ = length($shift_digits_shifted_digits);\n    my $shift_digits_reversed_digits_digits\
    \ = substr($shift_digits_reversed_digits, 0, $shift_digits_reversed_digits_len);\n\
    \    my $shift_digits_shifted_digits_digits = substr($shift_digits_shifted_digits,\
    \ 0, $shift_digits_shifted_digits_len);\n    my $shift_digits_reversed_digits_digits_len\
    \ = length($shift_digits_reversed_digits_digits);\n    my $shift_digits_shifted_digits_digits_len\
    \ = length($shift_digits_shifted_digits_digits);\n    my $shift_digits_reversed_digits_digits_digits\
    \ = substr($shift_digits_reversed_digits_digits, 0, $shift_digits_reversed_digits_digits_len);\n\
    \    my $shift_digits_shifted_digits_digits_digits = substr($shift_digits_shifted_digits_digits,\
    \ 0, $shift_digits_shifted_digits_digits_len);\n    my $shift_digits_reversed_digits_digits_digits_len\
    \ = length($shift_digits_reversed_digits_digits_digits);\n    my $shift_digits_shifted_digits_digits_digits_len\
    \ = length($shift_digits_shifted_digits_digits_digits);\n    my $shift_digits_reversed_digits_digits_digits_digits_len\
    \ = length($shift_digits_reversed_digits_digits_digits_digits);\n    ", "    my($digits,\
    \ $i, $j, $digit);\n    my $reverse = 0;\n    my $str = \"\";\n    my $len = $#$x;\n\
    \    if ($shift > $len) {\n        $shift = $len;\n        $reverse = 1;\n   \
    \ }\n    $digits = $shift % $len;\n    for ($i = $shift; $i >= $digits; $i--)\
    \ {\n        $digit = $x->[$i];\n        $str .= $digit;\n    }\n    if ($reverse)\
    \ {\n        $str = $str.reverse;\n    }\n    return $str;\n}", "    my($digits,\
    \ $reversed_digits);\n    my($i, $j, $digit, $reversed_digit);", "    my($digits)\
    \ = length($x);\n    my($result) = '';\n    my $i;\n    for ($i = 0; $i < $digits;\
    \ $i++) {\n        $result .= substr($x, $i, 1);\n    }\n    if ($shift > $digits)\
    \ {\n        $result = reverse $result;\n    }\n    return $result;\n}", "   \
    \ my $digits = $x;\n    my $reversed = \"\";\n    my $i;\n    for ($i = 0; $i\
    \ < $shift; $i++) {\n        $reversed .= $digits[$i];\n    }\n    for ($i = $shift;\
    \ $i < $#digits; $i++) {\n        $digits[$i] = $digits[$i] - $shift;\n    }\n\
    \    return $reversed;\n}", "    my($digits) = $x =~ /\\d/g;\n    my($i, $j, $result)\
    \ = ($digits, 0, \"\");\n    \n    # Circular shift is commutative, so reverse\
    \ the digits first\n    if ($shift > 0) {\n        $digits = reverse $digits;\n\
    \        $shift   = reverse $shift;\n    }", "    my($digits) = length($x);\n\
    \    my($i, $j, $carry);\n    my($digits_reversed) = \"\";\n    my($digits_reversed_shift)\
    \ = \"\";\n    my($digits_reversed_shift_reversed) = \"\";\n    my($digits_reversed_shift_reversed_shift)\
    \ = \"\";\n    my($digits_reversed_shift_reversed_shift_reversed) = \"\";\n  \
    \  my($digits_reversed_shift_reversed_shift_reversed_shift) = \"\";\n    my($digits_reversed_shift_reversed_shift_reversed_shift_reversed)\
    \ = \"\";\n    my($digits_reversed_shift_reversed_shift_reversed_shift_reversed_shift)\
    \ = \"\";\n    my($digits_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed)\
    \ = \"\";\n    my($digits_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift)\
    \ = \"\";\n    my($digits_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed)\
    \ = \"\";\n    my($digits_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed)\
    \ = \"\";\n    my($digits_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift)\
    \ = \"\";\n    my($digits_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed)\
    \ = \"\";\n    my($digits_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift)\
    \ = \"\";\n    my($digits_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed)\
    \ = \"\";\n    my($digits_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift)\
    \ = \"\";\n    my($digits_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed)\
    \ = \"\";\n    my($digits_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift)\
    \ = \"\";\n    my($digits_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed_shift_reversed)\
    \ = \"\";\n    my($", "    my($digits, $reversed, $i, $j);\n    my($digit, $carry);",
  '    my($digits, $reversed, $i, $j);', "    my $digits = $x % 10;\n    $x /= 10;\n\
    \    $x .= $digits while $x % 10 == 0;\n    $x /= 10;\n    $x .= $digits while\
    \ $x % 10 != 0;\n    return $x;\n}", '    my($digits, $reversed, $i, $j, $digit);',
  "    my $digits = $x->{_digits}; # number of digits\n    my $digits_reversed = reverse\
    \ $x->{_digits}; # digits reversed\n    my $digits_reversed_size = $digits_reversed->{_length};\
    \ # number of digits reversed\n    my $digits_reversed_digits = $digits_reversed->{_digits};\
    \ # digits reversed\n    my $digits_reversed_digits_size = $digits_reversed_digits->{_length};\
    \ # number of digits reversed\n    my $digits_reversed_digits_digits = $digits_reversed_digits->{_digits};\
    \ # digits reversed\n    my $digits_reversed_digits_digits_size = $digits_reversed_digits_digits->{_length};\
    \ # number of digits reversed\n    my $digits_reversed_digits_digits_digits =\
    \ $digits_reversed_digits_digits->{_digits}; # digits reversed\n    my $digits_reversed_digits_digits_digits_size\
    \ = $digits_reversed_digits_digits_digits->{_length}; # number of digits reversed\n\
    \    my $digits_reversed_digits_digits_digits_digits = $digits_reversed_digits_digits_digits->{_digits};\
    \ # digits reversed\n    my $digits_reversed_digits_digits_digits_digits_size\
    \ = $digits_reversed_digits_digits_digits_digits->{_length}; # number of digits\
    \ reversed\n    my $digits_reversed_digits_digits_digits_digits_digits = $digits_reversed_digits_digits_digits_digits->{_digits};\
    \ # digits reversed\n    my $digits_reversed_digits_digits_digits_digits_digits_size\
    \ = $digits_reversed_digits_digits_digits_digits_digits->{_length}; # number of\
    \ digits reversed\n    my $digits_reversed_digits_digits_digits_digits_digits_digits\
    \ = $digits_reversed_digits_digits_digits_digits_digits->{_digits}; # digits reversed\n\
    \    my $digits_reversed_digits_digits_digits_digits_digits_digits_size = $digits_reversed_digits_digits_digits_digits_digits->{_length};\
    \ # number of digits reversed\n    my $digits_reversed_digits_digits_digits_digits_digits_digits\
    \ = $digits_reversed_digits_digits_digits_digits_digits->", "    my $digits =\
    \ $x % 10;\n    my $result = $x % 10;\n    for (my $i = $shift; $i > 0; $i--)\
    \ {\n        $result = $result * 10 + $digits;\n        $digits = $digits % 10;\n\
    \    }\n    return $result;\n}", "    my($digits) = $x =~ /\\d/g;\n    my $result\
    \ = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $digit;\n  \
    \  my $carry = 0;\n    my $carrybit;\n    my $carrybits;\n    my $carrybits_count;\n\
    \    my $carrybits_count_max;\n    my $carrybits_count_min;\n    my $carrybits_count_max;\n\
    \    my $carrybits_count_min;\n    my $carrybits_count_max;\n    my $carrybits_count_min;\n\
    \    my $carrybits_count_max;\n    my $carrybits_count_min;\n    my $carrybits_count_max;\n\
    \    my $carrybits_count_min;\n    my $carrybits_count_max;\n    my $carrybits_count_min;\n\
    \    my $carrybits_count_max;\n    my $carrybits_count_min;\n    my $carrybits_count_max;\n\
    \    my $carrybits_count_min;\n    my $carrybits_count_max;\n    my $carrybits_count_min;\n\
    \    my $carrybits_count_max;\n    my $carrybits_count_min;\n    my $carrybits_count_max;\n\
    \    my $carrybits_count_min;\n    my $carrybits_count_max;\n    my $carrybits_count_min;\n\
    \    my $carrybits_count_max;\n    my $carrybits_count_min;\n    my $carrybits_count_max;\n\
    \    my $carrybits_count_min;\n    my $carrybits_count_max;\n    my $carrybits_count_min;\n\
    \    my $carrybits_count_max;\n    my $carrybits_count_min;\n    my $carrybits_count_max;\n\
    \    my $carrybits_count_min;\n    my $carrybits_count_max;\n    my $carrybits_count_min;\n\
    \    my $carrybits_count_max;\n    my $carrybits_count_min;\n    my $carrybits_count_max;\n\
    \    my $carrybits_count_min;\n    my $carrybits_count_max;\n    my $carrybits_count_min;\n\
    \    my $carrybits_count_max;\n    my $carrybits_count_min;\n    my $carrybits_count_max;\n\
    \    my $carrybits_count_min;\n    my $carrybits_count_max;\n    my $carrybits_count_min;\n\
    \    my $carrybits_count_max;\n    my $carrybits_count_min;\n", '    my($digits,
    $reversed, $i, $j, $digit);', "    my $len = length($x);\n    my $digits = $len\
    \ / $shift;\n    my $remainder = $len % $shift;\n    my $digits_reversed = \"\"\
    ;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while($i < $digits) {\n\
    \        $digits_reversed .= substr($x, $i, $shift);\n        $i += $shift;\n\
    \    }\n    while($i < $remainder) {\n        $digits_reversed .= substr($x, $i,\
    \ $shift);\n        $i += $shift;\n    }\n    return $digits_reversed;\n}", " \
    \   my $digits = $x->{_digits} || 0;\n    my $result = \"\";\n    my $i;\n   \
    \ for ($i = 0; $i < $shift; $i++) {\n        $result .= $digits[$i];\n    }\n\
    \    for ($i = $shift; $i < $digits; $i++) {\n        $result .= $digits[$i];\n\
    \    }\n    return $result;\n}", "    my($digits, $reversed) = (0, 0);\n    my\
    \ $i = $shift;\n    my $digit;\n    while ($i >= 0) {\n        $digit = $x % 10;\n\
    \        $x = $x / 10;\n        $reversed = $reversed * 10 + $digit;\n       \
    \ $digits = $digits * 10 + $digit;\n        $i = $i - 1;\n    }\n    return $digits\
    \ if $shift > $digits;\n    return $reversed if $shift < $digits;\n    return\
    \ $x;\n}", "    my($digits, $reversed) = (0, 0);\n    my $i = $shift;\n    my\
    \ $digit;\n    my $digits_len = length($x);\n    my $digits_len_minus_one = $digits_len\
    \ - 1;\n    my $digits_len_minus_two = $digits_len - 2;\n    my $digits_len_minus_three\
    \ = $digits_len - 3;\n    my $digits_len_minus_four = $digits_len - 4;\n    my\
    \ $digits_len_minus_five = $digits_len - 5;\n    my $digits_len_minus_six = $digits_len\
    \ - 6;\n    my $digits_len_minus_seven = $digits_len - 7;\n    my $digits_len_minus_eight\
    \ = $digits_len - 8;\n    my $digits_len_minus_nine = $digits_len - 9;\n    my\
    \ $digits_len_minus_ten = $digits_len - 10;\n    my $digits_len_minus_eleven =\
    \ $digits_len - 11;\n    my $digits_len_minus_twelve = $digits_len - 12;\n   \
    \ my $digits_len_minus_thirteen = $digits_len - 13;\n    my $digits_len_minus_fourteen\
    \ = $digits_len - 14;\n    my $digits_len_minus_fifteen = $digits_len - 15;\n\
    \    my $digits_len_minus_sixteen = $digits_len - 16;\n    my $digits_len_minus_seventeen\
    \ = $digits_len - 17;\n    my $digits_len_minus_eighteen = $digits_len - 18;\n\
    \    my $digits_len_minus_nineteen = $digits_len - 19;\n    my $digits_len_minus_twenty\
    \ = $digits_len - 20;\n    my $digits_len_minus_twenty_one = $digits_len - 21;\n\
    \    my $digits_len_minus_twenty_two = $digits_len - 22;\n    my $digits_len_minus_twenty_three\
    \ = $digits_len - 23;\n    my $digits_len_minus_twenty_four = $digits_len - 24;\n\
    \    my $digits_len_minus_twenty_five = $digits_len - 25;\n    my $digits_len_minus_twenty_six\
    \ = $digits_len - 26;\n    my $digits_len_minus_twenty_seven = $digits_len - 27;\n\
    \    my $digits_len_minus_twenty_eight = $digits_len - 28;\n    my $digits_len_minus_twenty_nine\
    \ = $digits_len - 29;\n    my $digits_len_minus_thirty = $", "    my($digits,\
    \ $reversed_digits);\n    my($i, $j, $digit, $reversed_digit);", '    my($digits,
    $i, $j, $result);', "    my $digits = $x->{_digits} || 0;\n    my $result = \"\
    \";\n    my $i = $digits;\n    while ($i >= $shift) {\n        $result .= $x->{_digits}[$i--];\n\
    \    }\n    $result .= $x->{_digits}[$i];\n    $x->{_digits} = $result;\n    return\
    \ $result;\n}", '    my($digits, $reversed_digits);', "    my $digits = $x->{_digits};\
    \ # number of digits\n    my $shift = $shift % $digits; # number of digits to\
    \ shift\n    my $reversed = \"\";\n    my $i = $digits;\n    while ($i >= $shift)\
    \ {\n        $reversed .= $digits[$i--];\n    }\n    $reversed .= $digits[$i];\n\
    \    return $reversed;\n}", "    my($digits) = length($x);\n    my($result) =\
    \ '';\n    my $i;\n    for ($i = 0; $i < $digits; $i++) {\n        $result .=\
    \ substr($x, $i, 1);\n    }\n    for ($i = 0; $i < $shift; $i++) {\n        $result\
    \ .= substr($result, 0, 1);\n    }\n    return $result;\n}", "    my $digits =\
    \ $x->{_digits} || $x->{_str};\n    my $sign = $x->{sign};\n    my $len = length($digits);\n\
    \    my $shiftlen = $shift - $len;\n    my $ret = '';\n    my $i;\n    my $j;\n\
    \    my $k;\n    my $digit;\n    my $carry = 0;", "    my $digits = $x->{_digits}\
    \ || $x->{_str};\n    my $result = \"\";\n    my $i = $shift;\n    while ($i >=\
    \ 0) {\n        $result = $digits[$i] . $result;\n        $i--;\n    }\n    $result\
    \ = reverse $result;\n    return $result;\n}", "    my($digits) = $x =~ /\\d/g;\n\
    \    my($result) = '';\n    my $i = 0;\n    my $j = 0;\n    while($i < $digits)\
    \ {\n        $j = $i + $shift;\n        $result .= $digits[$i];\n        $digits[$i]\
    \ = $digits[$j];\n        $digits[$j] = $result;\n        $i += $shift;\n    }\n\
    \    return $digits;\n}", "    my($digits, $reversed, $i);\n    my($digit, $digits);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);\n\
    \    my($digits_shift, $digits_reversed);\n    my($digits_shift, $digits_reversed);",
  '    my($digits, $reversed) = @_;', "    my($digits, $reversed_digits);\n    my($i,\
    \ $j, $digit, $reversed_digit);\n    \n    $digits = $x % 10;\n    $reversed_digits\
    \ = $digits == 0 ? \"\" : $digits;\n    \n    for ($i = $shift; $i >= 0; $i--)\
    \ {\n        $digit = $digits % 10;\n        $reversed_digit = $reversed_digits\
    \ == 0 ? \"\" : $reversed_digits;\n        $reversed_digits = $reversed_digits\
    \ . $digit;\n        $digits = $digits / 10;\n    }\n    return $reversed_digits;\n\
    }", "    my $digits = $x->{_digits} || 0;\n    my $reversed = \"\";\n    my $i\
    \ = $digits - $shift;\n    while ($i >= 0) {\n        $reversed .= $x->{_digits}[$i];\n\
    \        $i--;\n    }\n    $x->{_digits} = $reversed;\n}", '    my($digits, $reversed,
    $i);', "    my $digits = $x->{_digits} || 0;\n    my $result = \"\";\n    my $i;\n\
    \    my $carry = 0;\n    for ($i = 0; $i < $shift; $i++) {\n        $carry = $digits[$i]\
    \ + ($carry << 1) + $carry;\n        $digits[$i] = $carry & 1;\n        $carry\
    \ = $carry >> 1;\n    }\n    for ($i = 0; $i < $shift; $i++) {\n        $result\
    \ .= $digits[$i];\n    }\n    return $result;\n}", "    my $digits = $x->{_digits}\
    \ || 0;\n    my $sign = $x->{sign} || 0;\n    my $signbit = $x->{signbit} || 0;\n\
    \    my $base = $x->{_radix} || 10;\n    my $digits_len = length($x->{_digits});\n\
    \    my $digits_shift = $digits_len - $shift;\n    my $digits_mask = (1 << $digits_shift)\
    \ - 1;\n    my $digits_mask2 = $digits_mask - 1;\n    my $digits_mask3 = $digits_mask2\
    \ - 1;\n    my $digits_mask4 = $digits_mask3 - 1;\n    my $digits_mask5 = $digits_mask4\
    \ - 1;\n    my $digits_mask6 = $digits_mask5 - 1;\n    my $digits_mask7 = $digits_mask6\
    \ - 1;\n    my $digits_mask8 = $digits_mask7 - 1;\n    my $digits_mask9 = $digits_mask8\
    \ - 1;\n    my $digits_mask10 = $digits_mask9 - 1;\n    my $digits_mask11 = $digits_mask10\
    \ - 1;\n    my $digits_mask12 = $digits_mask11 - 1;\n    my $digits_mask13 = $digits_mask12\
    \ - 1;\n    my $digits_mask14 = $digits_mask13 - 1;\n    my $digits_mask15 = $digits_mask14\
    \ - 1;\n    my $digits_mask16 = $digits_mask15 - 1;\n    my $digits_mask17 = $digits_mask16\
    \ - 1;\n    my $digits_mask18 = $digits_mask17 - 1;\n    my $digits_mask19 = $digits_mask18\
    \ - 1;\n    my $digits_mask20 = $digits_mask19 - 1;\n    my $digits_mask21 = $digits_mask20\
    \ - 1;\n    my $digits_mask22 = $digits_mask21 - 1;\n    my $digits_mask23 = $digits_mask22\
    \ - 1;\n    my $digits_mask24 = $digits_mask23 - 1;\n    my $digits_mask25 = $digits_mask24\
    \ - 1;\n    my $digits_mask26 = $digits_mask25 - 1;\n    my $digits_mask27 = $digits_mask26\
    \ - 1;\n    my $digits_mask28 = $digits_mask27 - 1;\n    my $digits_mask29 = $digits_mask28\
    \ - 1;\n    my $digits_mask30 = $digits_mask29 - 1;\n    my $digits_mask31 = $digits_mask30\
    \ - 1;", "    my $digits = $x->{_digits} || $x->{_str};\n    my $result = \"\"\
    ;\n    my $i = 0;\n    my $carry = 0;\n    my $digit;\n    my $carrybit;\n   \
    \ my $carrybits;\n    my $carrybits_count;\n    my $carrybits_index;\n    my $carrybits_count;\n\
    \    my $carrybits_index;\n    my $carrybits_count;\n    my $carrybits_index;\n\
    \    my $carrybits_count;\n    my $carrybits_index;\n    my $carrybits_count;\n\
    \    my $carrybits_index;\n    my $carrybits_count;\n    my $carrybits_index;\n\
    \    my $carrybits_count;\n    my $carrybits_index;\n    my $carrybits_count;\n\
    \    my $carrybits_index;\n    my $carrybits_count;\n    my $carrybits_index;\n\
    \    my $carrybits_count;\n    my $carrybits_index;\n    my $carrybits_count;\n\
    \    my $carrybits_index;\n    my $carrybits_count;\n    my $carrybits_index;\n\
    \    my $carrybits_count;\n    my $carrybits_index;\n    my $carrybits_count;\n\
    \    my $carrybits_index;\n    my $carrybits_count;\n    my $carrybits_index;\n\
    \    my $carrybits_count;\n    my $carrybits_index;\n    my $carrybits_count;\n\
    \    my $carrybits_index;\n    my $carrybits_count;\n    my $carrybits_index;\n\
    \    my $carrybits_count;\n    my $carrybits_index;\n    my $carrybits_count;\n\
    \    my $carrybits_index;\n    my $carrybits_count;\n    my $carrybits_index;\n\
    \    my $carrybits_count;\n    my $carrybits_index;\n    my $carrybits_count;\n\
    \    my $carrybits_index;\n    my $carrybits_count;\n    my $carrybits_index;\n\
    \    my $carrybits_count;\n    my $carrybits_index;\n    my $carrybits_count;\n\
    \    my $carrybits_index;\n    my $carrybits_count;\n    my $carrybits_index;\n\
    \    my $carrybits_count;\n    my $carrybits_index;\n    my $carrybits_count;\n\
    \    my $carrybits_index;\n    my $carrybits_count;\n    my $carrybits_index;\n\
    \    my $carrybits_count;\n    my $carrybits_index;\n    my $carrybits_count;\n\
    \    my $carrybits_index;\n    my $carrybits_count;\n    my $carrybits_index;",
  "    my $digits = $x % 10;\n    my $reversed_digits = $digits == 0 ? 0 : $digits;\n\
    \    $reversed_digits = $shift > $digits ? $digits - $shift : $shift;\n    return\
    \ $reversed_digits . $x % 10;\n}", "    my($digits) = $x;\n    my($i, $j, $carry);\n\
    \    my $len = length($digits);\n    my $reverse = 0;\n    my $reversed_digits\
    \ = '';\n    my $reversed_len = 0;\n    my $digits_len = length($digits);\n  \
    \  my $digits_reversed = '';\n    my $digits_reversed_len = 0;", "    my $digits\
    \ = $x % 10;\n    $x /= 10;\n    $x =~ s/^(\\d)/$shift$1/;\n    $x =~ s/^(\\d)/10$shift$1/;\n\
    \    $x =~ s/^(\\d)/100$shift$1/;\n    $x =~ s/^(\\d)/1000$shift$1/;\n    $x =~\
    \ s/^(\\d)/10000$shift$1/;\n    $x =~ s/^(\\d)/100000$shift$1/;\n    $x =~ s/^(\\\
    d)/1000000$shift$1/;\n    $x =~ s/^(\\d)/1000000$shift$1/;\n    $x =~ s/^(\\d)/10000000$shift$1/;\n\
    \    $x =~ s/^(\\d)/100000000$shift$1/;\n    $x =~ s/^(\\d)/1000000000$shift$1/;\n\
    \    $x =~ s/^(\\d)/10000000000$shift$1/;\n    $x =~ s/^(\\d)/100000000000$shift$1/;\n\
    \    $x =~ s/^(\\d)/1000000000000$shift$1/;\n    $x =~ s/^(\\d)/10000000000000$shift$1/;\n\
    \    $x =~ s/^(\\d)/100000000000000$shift$1/;\n    $x =~ s/^(\\d)/1000000000000000$shift$1/;\n\
    \    $x =~ s/^(\\d)/10000000000000000$shift$1/;\n    $x =~ s/^(\\d)/100000000000000000$shift$1/;\n\
    \    $x =~ s/^(\\d)/1000000000000000000$shift$1/;\n    return $x;\n}", "    my\
    \ $digits = $x % 10;\n    my $result = $x % 10;\n    while ($shift > 0) {\n  \
    \      $result = $result * 10 + $digits;\n        $shift -= 1;\n        $digits\
    \ = $x % 10;\n    }\n    return $result if $shift > 0;\n    return reverse $result;\n\
    }", "    my($digits, $reversed) = (0, 0);\n    my $i = 0;\n    my $digit;\n  \
    \  my $digits_len = length($x);\n    my $digits_remaining = $digits_len;\n   \
    \ my $digits_left_to_go = $digits_len - $shift;\n    my $digits_left_to_go_reversed\
    \ = $digits_len - $shift;\n    my $digits_left_to_go_digits_reversed = $digits_len\
    \ - $shift;\n    my $digits_left_to_go_digits_remaining = $digits_len - $shift;\n\
    \    my $digits_left_to_go_digits_left_to_go = $digits_len - $shift;\n    my $digits_left_to_go_digits_left_to_go_reversed\
    \ = $digits_len - $shift;\n    my $digits_left_to_go_digits_left_to_go_digits_reversed\
    \ = $digits_len - $shift;\n    my $digits_left_to_go_digits_left_to_go_digits_remaining\
    \ = $digits_len - $shift;\n    my $digits_left_to_go_digits_left_to_go_digits_left_to_go\
    \ = $digits_len - $shift;\n    my $digits_left_to_go_digits_left_to_go_digits_left_to_go_reversed\
    \ = $digits_len - $shift;\n    my $digits_left_to_go_digits_left_to_go_digits_left_to_go_digits_reversed\
    \ = $digits_len - $shift;\n    my $digits_left_to_go_digits_left_to_go_digits_left_to_go_digits_remaining\
    \ = $digits_len - $shift;\n    my $digits_left_to_go_digits_left_to_go_digits_left_to_go_digits_left_to_go\
    \ = $digits_len - $shift;\n    my $digits_left_to_go_digits_left_to_go_digits_left_to_go_digits_left_to_go_reversed\
    \ = $digits_len - $shift;\n    my $digits_left_to_go_digits_left_to_go_digits_left_to_go_digits_left_to_go_digits_reversed\
    \ = $digits_len - $shift;\n    my $digits_left_to_go_digits_left_to_go_digits_left_to_go_digits_left_to_go_digits_remaining\
    \ = $digits_len - $shift;\n    my $digits_left_to_go_digits_left_to_go_digits_left_to_go_digits_left_to_go_digits_left_to_go\
    \ = $digits_len - $shift;\n    my $digits_left_to_go_digits_left_to_go_digits_left_to_go_digits_left_to_go_digits_left_to_go_reversed\
    \ = $digits_", '    my($digits, $reversed, $i, $j);', "    my $digits = $x;\n\
    \    my $reversed_digits = '';\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $digit;\n    my $carry = 0;", "    my $digits = $x->{_digits} || $x->{_str};\n\
    \    my $len = length($digits);\n    if ($shift > $len) {\n        $digits = reverse\
    \ $digits;\n        $len = length($digits);\n    }\n    $digits = substr($digits,\
    \ 0, $shift) . substr($digits, $shift);\n    $x->{_str} = $digits;\n    $x->{_digits}\
    \ = $len;\n}", "    my($digits) = $x =~ tr/0-9//cd;\n    $digits -= $shift;\n\
    \    $digits += $shift if $shift > $digits;\n    return $digits;\n}", "    my\
    \ $digits = $x->{_digits} || 0;\n    my $sign = $x->{sign};\n    my $len = length($x->{_str});\n\
    \    my $str = $x->{_str};\n    my $digits_len = length($x->{_digits}) || 0;\n\
    \    my $digits_str = $x->{_digits_str};\n    my $digits_str_reversed = $x->{_digits_str_reversed};\n\
    \    my $digits_str_reversed_len = length($x->{_digits_str_reversed}) || 0;\n\
    \    my $digits_str_reversed_str = $x->{_digits_str_reversed_str};\n    my $digits_str_reversed_str_reversed\
    \ = $x->{_digits_str_reversed_str_reversed};\n    my $digits_str_reversed_str_reversed_len\
    \ = length($x->{_digits_str_reversed_str_reversed}) || 0;\n    my $digits_str_reversed_str_reversed_str\
    \ = $x->{_digits_str_reversed_str_reversed_str};\n    my $digits_str_reversed_str_reversed_str_reversed\
    \ = $x->{_digits_str_reversed_str_reversed_str_reversed};\n    my $digits_str_reversed_str_reversed_str_reversed_len\
    \ = length($x->{_digits_str_reversed_str_reversed_str_reversed}) || 0;\n    my\
    \ $digits_str_reversed_str_reversed_str_reversed_str = $x->{_digits_str_reversed_str_reversed_str_reversed_str};\n\
    \    my $digits_str_reversed_str_reversed_str_reversed_str_reversed = $x->{_digits_str_reversed_str_reversed_str_reversed_str_reversed};\n\
    \    my $digits_str_reversed_str_reversed_str_reversed_str_reversed_len = length($x->{_digits_str_reversed_str_reversed_str_reversed_str_reversed})\
    \ || 0;\n    my $digits_str_reversed_str_reversed_str_reversed_str_reversed_str\
    \ = $x->{_digits_str_reversed_str_reversed_str_reversed_str_reversed_str};\n \
    \   my $digits_str_reversed_str_reversed_str_reversed_str_re", "    my $digits\
    \ = $x % 10;\n    $x /= 10;\n    my $result = \"\";\n    my $i = $shift;\n   \
    \ while ($i >= 0) {\n        $result .= $digits;\n        $digits *= 10;\n   \
    \     $i--;\n    }\n    $result .= $digits;\n    return $result;\n}", "    my($digits,\
    \ $result) = '';\n    my $i = 0;\n    my $len = length($x);\n    my $carry = 0;\n\
    \    my $digit;", "    my $digits = $x % 10;\n    my $reversed_digits = $digits\
    \ == 0 ? $digits : 10 - $digits;\n    $x = $x / 10;\n    my $result = \"\";\n\
    \    for (my $i = 0; $i < $shift; $i++) {\n        $result = $result . $reversed_digits;\n\
    \    }\n    return $result;\n}", '    my($digits, $i, $j, $result);', "    my($digits,\
    \ $i, $j, $result);\n    if ($shift > length($x)) {\n        $digits = reverse\
    \ $x;\n    } else {\n        $digits = $x;\n    }\n    for ($i = 0; $i < $shift;\
    \ $i++) {\n        $digits = substr($digits, 0, -1) + substr($digits, -1);\n \
    \   }\n    for ($i = 0; $i < $shift; $i++) {\n        $j = length($digits) - $i\
    \ - 1;\n        $result = $digits[$j].$result;\n    }\n    return $result;\n}",
  "    my $digits = $x->{_digits} || $x->{_str};\n    my $reversed = \"\";\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $digit;\n    my $carry = 0;\n\
    \    my $digits_len = length($digits);\n    my $digits_len_half = length($digits\
    \ / 2);", "    my $digits = $x % 10;\n    my $reversed_digits = $digits == 0 ?\
    \ 0 : $digits;\n    $reversed_digits = $shift > $digits ? $digits - $shift : $shift;\n\
    \    return $reversed_digits . $x / (10 * $shift);\n}", '    my($digits, $reversed,
    $i);', "    my($digits) = $x =~ /([0-9]+)/;\n    my($digits_reversed) = $digits\
    \ =~ /([0-9]+)/;\n    my($shifted_digits) = $digits_reversed =~ /([0-9]+)/;\n\
    \    my($shifted_digits_reversed) = $shifted_digits =~ /([0-9]+)/;\n    my($result)\
    \ = '';\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $digit;\n    my\
    \ $digits_reversed_digit;\n    my $shifted_digits_reversed_digit;\n    my $shifted_digits_reversed;\n\
    \    my $shifted_digits;\n    my $digits_reversed;\n    my $digits_reversed_digit;\n\
    \    my $digits_reversed_digits;\n    my $digits_reversed_digits_reversed;\n \
    \   my $digits_reversed_digits_reversed_digit;\n    my $digits_reversed_digits_reversed_digits;\n\
    \    my $digits_reversed_digits_reversed_digits_reversed;\n    my $digits_reversed_digits_reversed_digits_reversed_digit;\n\
    \    my $digits_reversed_digits_reversed_digits_reversed_digits;\n    my $digits_reversed_digits_reversed_digits_reversed_digits_reversed;\n\
    \    my $digits_reversed_digits_reversed_digits_reversed_digits_reversed_digit;\n\
    \    my $digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits;\n\
    \    my $digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed;\n\
    \    my $digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digit;\n\
    \    my $digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits;\n\
    \    my $digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed;\n\
    \    my $digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digit;\n\
    \    my $digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits;\n\
    \    my $digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed;\n\
    \    my $digits_reversed_digits_reversed_digits_reversed_digits_reverse", "  \
    \  my $digits = $x % 10;\n    my $result = $x % 10;\n    my $carry = 0;\n    my\
    \ $i;\n    for ($i = 0; $i < $shift; $i++) {\n        $result = $result * 10 +\
    \ $digits;\n        $digits = $digits - $carry;\n        $carry = $digits > 9;\n\
    \    }\n    if ($carry) {\n        $result = $result + 1;\n    }\n    return $result;\n\
    }", "    my $digits = $x->{_digits} || $x->{_str};\n    my $str = $x->{_str};\n\
    \    my $reversed = \"\";\n    my $i;\n    for ($i = 0; $i < $shift; $i++) {\n\
    \        $reversed .= substr($str, $i, 1);\n    }\n    for ($i = 0; $i < $shift;\
    \ $i++) {\n        $str .= substr($reversed, $i, 1);\n    }\n    return $str;\n\
    }", "    my $digits = $x->{_digits} || $x->{_str};\n    my $sign = $x->{sign};\n\
    \    my $len = length($digits);\n    my $str = $x->{_str};\n    my $signbit =\
    \ $x->{signbit};\n    my $digits_reversed;\n    if ($sign eq '+') {\n        $digits_reversed\
    \ = reverse $digits;\n    } elsif ($sign eq '-') {\n        $digits_reversed =\
    \ reverse $str =~ tr/+-/-+/;\n    } else {\n        $digits_reversed = reverse\
    \ $str =~ tr/+-/-+/;\n    }\n    $digits_reversed = substr($digits_reversed, 0,\
    \ $shift);\n    $digits_reversed = substr($digits_reversed, 0, $len);\n    return\
    \ $digits_reversed;\n}", "    my($digits) = $x;\n    my($i, $j, $carry);\n   \
    \ my $reverse = 0;\n    my $result = \"\";\n    my $digits_length = length($digits);",
  '    my($digits, $reversed_digits);', "    my $digits = $x->{_digits}; # number\
    \ of digits\n    my $shift = $shift % $digits; # number of digits to shift\n \
    \   my $reversed = \"\";\n    my $i = $digits;\n    while ($i >= $shift) {\n \
    \       $reversed .= $digits[$i--];\n    }\n    $reversed .= $digits[$i];\n  \
    \  return $reversed;\n}", "    my $digits = $x->{_digits} || $x->{_str};\n   \
    \ my $len = length($digits);\n    my $digits_reversed = reverse $digits;\n   \
    \ my $result = \"\";\n    my $i;\n    for ($i = 0; $i < $len; $i++) {\n      \
    \  $result .= substr($digits_reversed, $i, 1);\n    }\n    if ($shift > $len)\
    \ {\n        $result .= substr($digits_reversed, 0, $len - $shift);\n    } else\
    \ {\n        $result .= substr($digits_reversed, 0, $shift);\n    }\n    return\
    \ $result;\n}", "    my($digits, $reversed, $i);\n    \n    $digits = $x;\n  \
    \  $reversed = \"\";\n    \n    for ($i = 0; $i < $shift; $i++) {\n        $reversed\
    \ = $digits . $reversed;\n        $digits = $digits >> 1;\n    }\n    \n    return\
    \ $reversed;\n}", "    my($digits, $i, $j, $reverse);\n    my($digits_string);",
  "    my $digits = $x->{_digits} || $x->{_str};\n    my $digits_len = length($digits);\n\
    \    my $shift_len = length($shift);\n    my $shift_digits = substr($shift, 0,\
    \ $shift_len);\n    my $shift_digits_len = length($shift_digits);\n    my $shift_digits_reversed\
    \ = substr($shift_digits, $shift_digits_len);\n    my $shift_digits_reversed_len\
    \ = length($shift_digits_reversed);\n    my $shift_digits_reversed_digits = substr($shift_digits_reversed,\
    \ 0, $shift_digits_reversed_len);\n    my $shift_digits_reversed_digits_len =\
    \ length($shift_digits_reversed_digits);\n    my $shift_digits_reversed_digits_digits\
    \ = substr($shift_digits_reversed_digits, 0, $shift_digits_reversed_digits_len);\n\
    \    my $shift_digits_reversed_digits_digits_len = length($shift_digits_reversed_digits_digits);\n\
    \    my $shift_digits_reversed_digits_digits_digits_len = length($shift_digits_reversed_digits_digits_digits);\n\
    \    my $shift_digits_reversed_digits_digits_digits_digits_len = length($shift_digits_reversed_digits_digits_digits_digits);\n\
    \    my $shift_digits_reversed_digits_digits_digits_digits_digits_len = length($shift_digits_reversed_digits_digits_digits_digits_digits_digits);\n\
    \    my $shift_digits_reversed_digits_digits_digits_digits_digits_digits_len =\
    \ length($shift_digits_reversed_digits_digits_digits_digits_digits_digits_digits);\n\
    \    my $shift_digits_reversed_digits_digits_digits_digits_digits_digits_digits_len\
    \ = length($shift_digits_reversed_digits_digits_digits_digits_digits_digits_digits_digits_digits);\n\
    \    my $shift_digits_reversed_digits_digits_digits_digits_digits_digits_digits_digits_len\
    \ = length($shift_digits_reversed_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits);\n\
    \    my $shift_digits_reversed_digits_digits_digits_digits_digits_digits_digits_digits_digits_len\
    \ = length($shift_digits_reversed_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits);\n\
    \    my $shift_digits_reversed_digits_digits_digits_digits_digits_", "    my $digits\
    \ = $x->{_digits} || $x->{_str};\n    my $result = \"\";\n    my $i = $shift;\n\
    \    while ($i >= 0) {\n        $result = $digits[$i] . $result;\n        $i--;\n\
    \    }\n    return $result;\n}", "    my $digits = $x->{_digits} || $x->{_str};\n\
    \    my $len = length($digits);\n    my $sign = $x->{sign};\n    my $signbit =\
    \ $x->{signbit};\n    my $signbit_neg = $x->{signbit_neg};\n    my $signbit_negbit\
    \ = $x->{signbit_negbit};\n    my $signbit_zero = $x->{signbit_zero};\n    my\
    \ $signbit_zerobit = $x->{signbit_zerobit};\n    my $signbit_one = $x->{signbit_one};\n\
    \    my $signbit_onebit = $x->{signbit_onebit};\n    my $signbit_two = $x->{signbit_two};\n\
    \    my $signbit_twobit = $x->{signbit_twobit};\n    my $signbit_three = $x->{signbit_three};\n\
    \    my $signbit_threebit = $x->{signbit_threebit};\n    my $signbit_four = $x->{signbit_four};\n\
    \    my $signbit_fourbit = $x->{signbit_fourbit};\n    my $signbit_five = $x->{signbit_five};\n\
    \    my $signbit_fivebit = $x->{signbit_fivebit};\n    my $signbit_six = $x->{signbit_six};\n\
    \    my $signbit_sixbit = $x->{signbit_sixbit};\n    my $signbit_seven = $x->{signbit_seven};\n\
    \    my $signbit_sevenbit = $x->{signbit_sevenbit};\n    my $signbit_eight = $x->{signbit_eight};\n\
    \    my $signbit_eightbit = $x->{signbit_eightbit};\n    my $signbit_nine = $x->{signbit_nine};\n\
    \    my $signbit_ninebit = $x->{signbit_ninebit};\n    my $signbit_zero = $x->{signbit_zero};\n\
    \    my $signbit_zerobit = $x->{signbit_zerobit};\n    my $signbit_one = $x->{signbit_one};\n\
    \    my $signbit_onebit = $x->{signbit_onebit};\n    my $signbit_two = $x->{signbit_two};\n\
    \    my $signbit_twobit = $x->{signbit_twobit};\n    my $signbit_three = $x->{signbit_three};\n\
    \    my $signbit_threebit = $x->{sign", "    my $digits = $x->{_digits} || 0;\n\
    \    my $result = \"\";\n    my $carry = 0;\n    my $i;", "    my $digits = $x\
    \ % 10;\n    $x /= 10;\n    $x =~ s/^(\\d)$/$1 x $shift/e;\n    $x =~ s/^(\\d)$/$1\
    \ x $shift/e;\n    $x =~ s/^(\\d)$/$1 x $shift/e;\n    $x =~ s/^(\\d)$/$1 x $shift/e;\n\
    \    $x =~ s/^(\\d)$/$1 x $shift/e;\n    $x =~ s/^(\\d)$/$1 x $shift/e;\n    $x\
    \ =~ s/^(\\d)$/$1 x $shift/e;\n    $x =~ s/^(\\d)$/$1 x $shift/e;\n    $x =~ s/^(\\\
    d)$/$1 x $shift/e;\n    $x =~ s/^(\\d)$/$1 x $shift/e;\n    $x =~ s/^(\\d)$/$1\
    \ x $shift/e;\n    $x =~ s/^(\\d)$/$1 x $shift/e;\n    $x =~ s/^(\\d)$/$1 x $shift/e;\n\
    \    $x =~ s/^(\\d)$/$1 x $shift/e;\n    $x =~ s/^(\\d)$/$1 x $shift/e;\n    $x\
    \ =~ s/^(\\d)$/$1 x $shift/e;\n    $x =~ s/^(\\d)$/$1 x $shift/e;\n    $x =~ s/^(\\\
    d)$/$1 x $shift/e;\n    $x =~ s/^(\\d)$/$1 x $shift/e;\n    $x =~ s/^(\\d)$/$1\
    \ x $shift/e;\n    $x =~ s/^(\\d)$/$1 x $shift/e;\n    $x =~ s/^(\\d)$/$1 x $shift/e;\n\
    \    $x =~ s/^(\\d)$/$1 x $shift/e;\n    $x =~ s/^(\\d)$/$1 x $shift/e;\n    $x\
    \ =~ s/^(\\d)$/$1 x $shift/e;\n    $x =~ s/^(\\d)$/$1 x $shift/e;\n    $x =~ s/^(\\\
    d)$/$1 x $shift/e;\n    $x =~ s/^(\\d)$/$1 x $shift/e;\n    $x =~ s/^(\\d)$/$1\
    \ x $shift/e;\n    $x =~ s/", "    my $digits = $x;\n    my $reversed = \"\";\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $digit;\n    my $carry\
    \ = 0;\n    my $digits_len = length($digits);\n    my $digits_len_minus_one =\
    \ length($digits - 1);\n    my $digits_len_minus_two = length($digits - 2);\n\
    \    my $digits_len_minus_three = length($digits - 3);\n    my $digits_len_minus_four\
    \ = length($digits - 4);", "    my($digits) = length($x);\n    my($i, $j, $result);",
  "    my($digits, $reversed_digits);\n    my($i, $j, $digit, $reversed_digit);\n\
    \    my($num_digits) = $x->{_num_digits} || 0;\n    my($num_digits_reversed) =\
    \ $x->{_num_digits_reversed} || 0;\n    my($num_digits_reversed_shift) = $x->{_num_digits_reversed_shift}\
    \ || 0;\n    my($num_digits_reversed_shift_max) = $x->{_num_digits_reversed_shift_max}\
    \ || 0;\n    my($num_digits_reversed_shift_max_shift) = $x->{_num_digits_reversed_shift_max_shift}\
    \ || 0;\n    my($num_digits_reversed_shift_max_shift_max) = $x->{_num_digits_reversed_shift_max_shift_max}\
    \ || 0;\n    my($num_digits_reversed_shift_max_shift_max_max) = $x->{_num_digits_reversed_shift_max_shift_max_max}\
    \ || 0;", "    my($digits) = $x;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)", "    my $digits = $x->{_digits} || $x->{_str};\n    my $sign = $x->{sign};\n\
    \    my $signbit = $x->{signbit};\n    my $len = length($digits);\n    my $signlen\
    \ = length($sign);\n    my $shiftlen = length($shift);\n    my $newlen = $len\
    \ + $shiftlen;\n    my $newstr = '';\n    my $i;\n    my $j;\n    my $carry;\n\
    \    my $carrybit;\n    my $carrybits = 0;\n    my $carrybits_max = $shiftlen\
    \ - 1;\n    my $carrybits_mask = $shiftlen-1;\n    my $carrybits_mask2 = $shiftlen-1;\n\
    \    my $carrybits_mask3 = $shiftlen-1;\n    my $carrybits_mask4 = $shiftlen-1;\n\
    \    my $carrybits_mask5 = $shiftlen-1;\n    my $carrybits_mask6 = $shiftlen-1;\n\
    \    my $carrybits_mask7 = $shiftlen-1;\n    my $carrybits_mask8 = $shiftlen-1;\n\
    \    my $carrybits_mask9 = $shiftlen-1;\n    my $carrybits_mask10 = $shiftlen-1;\n\
    \    my $carrybits_mask11 = $shiftlen-1;\n    my $carrybits_mask12 = $shiftlen-1;\n\
    \    my $carrybits_mask13 = $shiftlen-1;\n    my $carrybits_mask14 = $shiftlen-1;\n\
    \    my $carrybits_mask15 = $shiftlen-1;\n    my $carrybits_mask16 = $shiftlen-1;\n\
    \    my $carrybits_mask17 = $shiftlen-1;\n    my $carrybits_mask18 = $shiftlen-1;\n\
    \    my $carrybits_mask19 = $shiftlen-1;\n    my $carrybits_mask20 = $shiftlen-1;\n\
    \    my $carrybits_mask21 = $shiftlen-1;\n    my $carrybits_mask22 = $shiftlen-1;\n\
    \    my $carrybits_mask23 = $shiftlen-1;\n    my $carrybits_mask24 = $shiftlen-1;\n\
    \    my $carrybits_mask25 = $shiftlen-1;\n    my $carrybits_mask26 = $shiftlen-1;\n\
    \    my $carrybits_mask27 = $shiftlen-1;\n    my $carrybits_mask28 = $shiftlen-1;\n\
    \    my $carrybits_mask29 = $shiftlen-1;\n    my $carrybits_mask30 = $shiftlen-1;\n\
    \    my $carrybits_mask31 = $shiftlen-1;\n    my $carrybits_mask32 = $shiftlen-1;\n\
    \    my $carrybits_", '    my($digits, $reversed, $i);', "    my($digits) = $x\
    \ =~ /\\d/g;\n    $digits -= $shift;\n    $digits += $shift if $shift > $digits;\n\
    \    $digits -= $shift if $shift < $digits;\n    return $digits;\n}", "    my\
    \ $digits = $x % 10;\n    my $reversed_digits = $digits == 0 ? $digits : 10 -\
    \ $digits;\n    return $reversed_digits . $x / (10 * $shift);\n}", "    my($digits)\
    \ = $x =~ /\\d/g;\n    my($digits_reversed) = '';\n    my $i = 0;\n    my $j =\
    \ 0;\n    while($i < $digits) {\n        $digits_reversed .= $digits[$j++];\n\
    \        $i++;\n    }\n    while($shift > 0) {\n        $digits_reversed .= $digits[$j++];\n\
    \        $shift--;\n    }\n    return $digits_reversed;\n}", "    my($digits)\
    \ = length($x);\n    my($reversed_digits);\n    my($carry);", "    my($digits)\
    \ = $x =~ /\\d/g;\n    my($i, $j, $digit);\n    my($result) = '';\n    \n    for(my\
    \ $i = $digits; $i > $shift; $i--) {\n        $digit = $x % 10;\n        $j =\
    \ $i;\n        \n        for(; $j > $shift; $j--) {\n            $result .= $digits[$j];\n\
    \        }\n        $result .= $digit;\n        $x = $x / 10;\n    }\n    \n \
    \   return $result;\n}", "    my $digits = $x->{_digits} || 0;\n    my $reversed\
    \ = \"\";\n    my $i;\n    for ($i = 0; $i < $shift; $i++) {\n        $reversed\
    \ .= $digits[$i];\n    }\n    for ($i = $shift; $i < $digits; $i++) {\n      \
    \  $reversed .= $digits[$i];\n    }\n    return $reversed;\n}", "    my $digits\
    \ = $x->{_digits} || 0;\n    my $sign = $x->{sign} || 0;\n    my $digits_len =\
    \ length($x->{_digits}) || 0;\n    my $shift_len = length($shift) || 0;\n    my\
    \ $result = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $digit;\n\
    \    my $carry = 0;\n    my $carry_digit;\n    my $carrybit;\n    my $carrybit_digit;\n\
    \    my $carrybit_digit2;\n    my $carrybit_digit3;\n    my $carrybit_digit4;\n\
    \    my $carrybit_digit5;\n    my $carrybit_digit6;\n    my $carrybit_digit7;\n\
    \    my $carrybit_digit8;\n    my $carrybit_digit9;\n    my $carrybit_digit10;\n\
    \    my $carrybit_digit11;\n    my $carrybit_digit12;\n    my $carrybit_digit13;\n\
    \    my $carrybit_digit14;\n    my $carrybit_digit15;\n    my $carrybit_digit16;\n\
    \    my $carrybit_digit17;\n    my $carrybit_digit18;\n    my $carrybit_digit19;\n\
    \    my $carrybit_digit20;\n    my $carrybit_digit21;\n    my $carrybit_digit22;\n\
    \    my $carrybit_digit23;\n    my $carrybit_digit24;\n    my $carrybit_digit25;\n\
    \    my $carrybit_digit26;\n    my $carrybit_digit27;\n    my $carrybit_digit28;\n\
    \    my $carrybit_digit29;\n    my $carrybit_digit30;\n    my $carrybit_digit31;\n\
    \    my $carrybit_digit32;\n    my $carrybit_digit33;\n    my $carrybit_digit34;\n\
    \    my $carrybit_digit35;\n    my $carrybit_digit36;\n    my $carrybit_digit37;\n\
    \    my $carrybit_digit38;\n    my $carrybit_digit39;\n    my $carrybit_digit40;\n\
    \    my $carrybit_digit41;\n    my $carrybit_digit42;\n    my $carrybit_digit43;\n\
    \    my $carrybit_digit44;\n    my $carrybit_digit45;\n    my $carrybit_digit46;\n\
    \    my $carrybit_digit47;\n    my $carrybit_digit48;\n    my $carrybit_digit49;\n\
    \    my $carrybit_digit50;\n    my $carrybit_digit51;\n    my $carrybit_digit52;\n\
    \    my $carrybit_digit53;\n    my $carrybit_digit54;\n    my $carrybit_", " \
    \   my $digits = $x->{_digits} || $x->{_str};\n    my $sign = $x->{sign};\n  \
    \  my $digits_len = length($digits);\n    my $shift_digits = $shift % $digits_len;\n\
    \    my $shift_digits_len = length($shift);\n    my $digits_reversed = \"\";\n\
    \    my $digits_reversed_len = 0;\n    my $digits_reversed_sign = \"\";\n    my\
    \ $digits_reversed_sign_len = 0;\n    my $digits_reversed_digits = \"\";\n   \
    \ my $digits_reversed_digits_len = 0;\n    my $digits_reversed_digits_sign = \"\
    \";\n    my $digits_reversed_digits_sign_len = 0;\n    my $digits_reversed_digits_reversed\
    \ = \"\";\n    my $digits_reversed_digits_reversed_len = 0;\n    my $digits_reversed_digits_reversed_sign\
    \ = \"\";\n    my $digits_reversed_digits_reversed_sign_len = 0;\n    my $digits_reversed_digits_reversed_digits\
    \ = \"\";\n    my $digits_reversed_digits_reversed_digits_len = 0;\n    my $digits_reversed_digits_reversed_digits_sign\
    \ = \"\";\n    my $digits_reversed_digits_reversed_digits_sign_len = 0;\n    my\
    \ $digits_reversed_digits_reversed_digits_reversed = \"\";\n    my $digits_reversed_digits_reversed_digits_reversed_len\
    \ = 0;\n    my $digits_reversed_digits_reversed_digits_reversed_sign = \"\";\n\
    \    my $digits_reversed_digits_reversed_digits_reversed_sign_len = 0;\n    my\
    \ $digits_reversed_digits_reversed_digits_reversed_digits = \"\";\n    my $digits_reversed_digits_reversed_digits_reversed_digits_len\
    \ = 0;\n    my $digits_reversed_digits_reversed_digits_reversed_digits_sign =\
    \ \"\";\n    my $digits_reversed_digits_reversed_digits_reversed_digits_sign_len\
    \ = 0;\n    my $digits_reversed_digits_reversed_digits_reversed_digits_reversed\
    \ = \"\";\n    my $digits_reversed_digits_reversed_digits_reversed_digits_reversed_len\
    \ = 0;\n    my $digits_reversed_digits_reversed_digits_reversed_digits_reversed_sign\
    \ = \"\";\n    my $digits_reversed_digits_reversed_digits_reversed_digits_reversed_sign_len\
    \ = 0;\n    my $digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits\
    \ = \"\";\n    my $digits_reversed_", "    my $digits = $x->{_digits} || $x->{_str};\n\
    \    my $result = $x->{_str};\n    my $i;\n    for ($i = 0; $i < $shift; $i++)\
    \ {\n        $result .= substr($digits, $i, 1);\n    }\n    $result =~ tr/0/1/;\n\
    \    return $result;\n}", "    my($digits, $i, $j);\n    my($digits_reversed);",
  "    my $digits = $x->{_digits}; # number of digits\n    my $shift = $shift % $digits;\
    \ # number of digits to shift\n    my $reversed = \"\";\n    my $i = $digits;\n\
    \    while ($i >= $shift) {\n        $reversed .= $digits[$i--];\n    }\n    $reversed\
    \ .= $digits[$i];\n    return $reversed;\n}", "    my($digits, $reversed_digits);\n\
    \    my($i, $j, $digit, $reversed_digit);", "    my($digits, $i, $j, $carry);\n\
    \    my($digits_reversed) = '';", "    my $digits = $x->{_digits} || $x->{_str};\n\
    \    my $s = $digits;\n    my $i = $shift;\n    my $carry = 0;\n    my $reverse\
    \ = 0;\n    my $digit;", "    my $digits = $x->{_digits} || $x->{_str};\n    my\
    \ $str = $x->{_str};\n    my $len = length($str);\n    my $i = 0;\n    my $j =\
    \ 0;\n    my $carry = 0;\n    my $result = \"\";\n    my $tmp;", "    my $digits\
    \ = $x;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\\
    d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//;\n    $digits\
    \ =~ s/^0+(?=\\d)//;\n    $digits =~ s/^0+(?=\\d)//", "    my $digits = $x->{_digits}\
    \ || $x->{_str};\n    my $sign = $x->{sign};\n    my $str = $x->{_str};\n    my\
    \ $len = length($str);\n    my $signbit = substr($str, $len-1, 1);\n    my $digit\
    \ = substr($str, $len-2, 1);\n    my $carry = 0;\n    my $result = \"\";\n   \
    \ my $i;", '    my($digits, $reversed_digits);', "    my($digits, $i, $j, $digit);\n\
    \    my($digits_reversed, $i, $j, $digit);\n    my($digits_reversed_length, $i,\
    \ $j, $digit);", '    my($digits, $reversed_digits);', "    my($digits, $reversed)\
    \ = (0, 0);\n    my $i = 0;\n    my $digit;\n    my $digits_len = length($x);\n\
    \    while ($i < $digits_len) {\n        $digit = substr($x, $i, 1);\n       \
    \ $digits += $digit * $shift;\n        $reversed = $digit if $reversed + $digit\
    \ > 9;\n        $i++;\n    }\n    return $digits if $reversed;\n    return substr($x,\
    \ 0, $digits_len) . substr($x, $digits_len);\n}", "    my($digits, $reversed)\
    \ = (0, 0);\n    my $i = $shift;\n    my $digit;\n    while ($i >= 0) {\n    \
    \    $digit = $x % 10;\n        $reversed = $reversed * 10 + $digit;\n       \
    \ $x = $x / 10;\n        $digits = $digits * 10 + $digit;\n        $i = $i - 1;\n\
    \    }\n    return $digits if $shift > $digits;\n    return $reversed if $shift\
    \ < $digits;\n    return $x;\n}", "    my($digits, $i, $j);\n    my($digits_reversed,\
    \ $i, $j);\n    my($digits_reversed_shifted, $i, $j);\n    my($digits_reversed_shifted_shifted,\
    \ $i, $j);", "    my $digits = $x->{_digits} || $x->{_str};\n    my $str = $x->{_str};\n\
    \    my $sign = $x->{sign};\n    my $signbit = $x->{signbit};\n    my $bits =\
    \ $x->{_radix_bits}; # number of bits in radix\n    my $radix = $x->{_radix};\n\
    \    my $digits_len = length($digits);\n    my $digits_shift = $shift - $digits_len;\n\
    \    my $digits_mask = (1 << $digits_len) - 1;\n    my $digits_mask2 = $digits_mask\
    \ << 1;\n    my $digits_mask3 = $digits_mask << 2;\n    my $digits_mask4 = $digits_mask\
    \ << 3;\n    my $digits_mask5 = $digits_mask << 4;\n    my $digits_mask6 = $digits_mask\
    \ << 5;\n    my $digits_mask7 = $digits_mask << 6;\n    my $digits_mask8 = $digits_mask\
    \ << 7;\n    my $digits_mask9 = $digits_mask << 8;\n    my $digits_mask10 = $digits_mask\
    \ << 9;\n    my $digits_mask11 = $digits_mask << 10;\n    my $digits_mask12 =\
    \ $digits_mask << 11;\n    my $digits_mask13 = $digits_mask << 12;\n    my $digits_mask14\
    \ = $digits_mask << 13;\n    my $digits_mask15 = $digits_mask << 14;\n    my $digits_mask16\
    \ = $digits_mask << 15;\n    my $digits_mask17 = $digits_mask << 16;\n    my $digits_mask18\
    \ = $digits_mask << 17;\n    my $digits_mask19 = $digits_mask << 18;\n    my $digits_mask20\
    \ = $digits_mask << 19;\n    my $digits_mask21 = $digits_mask << 20;\n    my $digits_mask22\
    \ = $digits_mask << 21;\n    my $digits_mask23 = $digits_mask << 22;\n    my $digits_mask24\
    \ = $digits_mask << 23;\n    my $digits_mask25 = $digits_mask << 24;\n    my $digits_mask26\
    \ = $digits_mask << 25;\n    my $digits_mask27 = $digits_mask << 26;\n    my $digits_mask28\
    \ = $digits_mask << 27;\n    my $digits_mask29 = $digits_mask << 28;\n    my $digits_mask30\
    \ = $digits_mask << 29", "    my($digits, $reversed) = (0, 0);\n    my $digit;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $digits_len = length($x);\n    my\
    \ $digits_len_half = $digits_len / 2;", "    my $digits = $x % 10;\n    my $result\
    \ = $x % 10;\n    while ($shift > 0) {\n        $result = 10 * $result + $digits;\n\
    \        $shift -= 1;\n        $digits = $x % 10;\n    }\n    return $result;\n\
    }", "    my $digits = $x->{_digits} || $x->{_str};\n    my $sign = $x->{sign};\n\
    \    my $signbit = $x->{signbit};\n    my $digits_len = length($digits);\n   \
    \ my $signbit_len = length($signbit);\n    my $shift_len = length($shift);\n \
    \   my $shift_bits = $shift_len % $digits_len;\n    my $shift_digits = $shift_len\
    \ / $digits_len;\n    my $shift_digits_len = length($shift_digits);\n    my $shift_bits_len\
    \ = length($shift_bits);\n    my $digits_bits = $digits_len - $shift_digits_len;\n\
    \    my $digits_bits_len = length($digits_bits);\n    my $digits_bits_shift =\
    \ $digits_bits_len ? $digits_bits_len : 0;\n    my $shift_bits_shift = $shift_bits_len\
    \ ? $shift_bits_len : 0;\n    my $shift_bits_mask = (1 << $shift_bits_shift) -\
    \ 1;\n    my $digits_mask = (1 << $digits_bits_shift) - 1;\n    my $shift_mask\
    \ = (1 << $shift_bits_shift) - 1;\n    my $mask = $digits_mask | ($shift_mask\
    \ & $shift_bits_mask);\n    my $digits_reversed = \"\";\n    my $shift_reversed\
    \ = \"\";\n    my $digits_reversed_len = 0;\n    my $shift_reversed_len = 0;\n\
    \    my $digits_reversed_bits = 0;\n    my $shift_reversed_bits = 0;\n    my $digits_reversed_shift\
    \ = 0;\n    my $shift_reversed_shift = 0;\n    my $digits_reversed_mask = 0;\n\
    \    my $shift_reversed_mask = 0;\n    my $digits_reversed_bits_len = 0;\n   \
    \ my $shift_reversed_bits_len = 0;\n    my $digits_reversed_bits_shift = 0;\n\
    \    my $shift_reversed_bits_shift = 0;\n    my $digits_reversed_mask_len = 0;\n\
    \    my $shift_reversed_mask_len = 0;\n    my $digits_reversed_bits_shift_len\
    \ = 0;\n    my $shift_reversed_bits_shift_len = 0;\n    my $digits_reversed_mask_shift_len\
    \ = 0;\n    my $shift_reversed_mask_shift_len = 0;\n    my $digits_reversed_bits_mask\
    \ = 0;\n    my $shift_reversed_bits_mask = 0;\n    my $digits_reversed_bits_mask_len\
    \ = 0;\n    my $shift_reversed_bits_mask_len = 0;\n    my $digits_reversed_bits_mask_shift\
    \ = 0;\n    my $shift_reversed_bit", "    my($digits, $reversed, $i, $j, $digit);\n\
    \    my $n = length($x);\n    if ($shift > $n) {\n        $reversed = $x;\n  \
    \      $n = $shift;\n    } else {\n        $reversed = \"\";\n    }\n    for ($i\
    \ = $n; $i >= 1; $i--) {\n        $digit = $x % 10;\n        $x = $x / 10;\n \
    \       $digits = $digits . $digit;\n        if ($shift > $i) {\n            $reversed\
    \ = $reversed.$digits;\n            $n = $i;\n        } else {\n            $reversed\
    \ = $reversed.$digit;\n        }\n    }\n    return $reversed;\n}", '    my($digits,
    $reversed_digits);', "    my($digits, $i, $j, $reverse);\n    if ($shift > length($x))\
    \ {\n        $reverse = 1;\n        $shift = length($x);\n    } else {\n     \
    \   $reverse = 0;\n    }\n    $digits = $shift - 1;\n    $digits = $shift if $digits\
    \ < 0;\n    $digits = length($x) - $digits if $shift > length($x);\n    for ($i\
    \ = $digits; $i >= 0; $i--) {\n        $j = $i + $shift;\n        $x = substr($x,\
    \ 0, $j) . substr($x, $j + 1);\n    }\n    return $reverse ? substr($x, 0, $shift)\
    \ : $x;\n}", "    my $len = length($x);\n    my $digits = $len % $shift;\n   \
    \ my $reversed = \"\";\n    if ($digits == 0) {\n        $reversed = $x;\n   \
    \ } else {\n        $reversed = substr($x, $shift);\n        my $remainder = $len\
    \ % $shift;\n        $reversed = $reversed . $x->reverse($remainder);\n    }\n\
    \    return $reversed;\n}", "    my($digits) = $x =~ /([0-9]+)/;\n    my($digits_reversed)\
    \ = $digits =~ /([0-9]+)$/;\n    my($digits_reversed_shift) = $digits_reversed\
    \ =~ /([0-9]+)/;\n    my($digits_reversed_shift_digits) = $digits_reversed_shift\
    \ =~ /([0-9]+)/;\n    my($digits_reversed_shift_digits_reversed) = $digits_reversed_shift_digits\
    \ =~ /([0-9]+)/;\n    my($digits_reversed_shift_digits_reversed_shift) = $digits_reversed_shift_digits_reversed\
    \ =~ /([0-9]+)/;\n    my($digits_reversed_shift_digits_reversed_shift_digits)\
    \ = $digits_reversed_shift_digits_reversed_shift =~ /([0-9]+)/;\n    my($digits_reversed_shift_digits_reversed_shift_digits_reversed)\
    \ = $digits_reversed_shift_digits_reversed_shift_digits =~ /([0-9]+)/;\n    my($digits_reversed_shift_digits_reversed_shift_digits_reversed_shift)\
    \ = $digits_reversed_shift_digits_reversed_shift_digits_reversed =~ /([0-9]+)/;\n\
    \    my($digits_reversed_shift_digits_reversed_shift_digits_reversed_shift_digits)\
    \ = $digits_reversed_shift_digits_reversed_shift_digits_reversed_shift =~ /([0-9]+)/;\n\
    \    my($digits_reversed_shift_digits_reversed_shift_digits_reversed_shift_digits_reversed)\
    \ = $digits_reversed_shift_digits_reversed_shift_digits_reversed_shift_digits\
    \ =~ /([0-9]+)/;\n    my($digits_reversed_shift_digits_reversed_shift_digits_reversed_shift_digits_reversed_shift)\
    \ = $digits_reversed_shift_digits_reversed_shift_digits_reversed_shift_digits_reversed\
    \ =~ /([0-9]+)/;\n    my($digits_reversed_shift_digits_reversed_shift_digits_reversed_shift_digits_reversed_shift_digits)\
    \ = $digits_reversed_shift_digits_reversed_shift_digits_reversed_shift_digits_reversed_shift\
    \ =~ /([0-9]+)/;\n    my($digits_reversed_shift_digits_reversed_shift_digits_reversed_shift_digits_reversed_shift_digits_reversed)\
    \ = $digits_reversed_shift_digits_reversed_shift_digits_reversed_shift_digits_reversed_shift_digits\
    \ =~ /([0-9]+)/;\n    my($digits_reversed_shift_", "    my($digits) = $x;\n  \
    \  my($i, $j, $carry);\n    my $num_digits = length($digits);\n    my $num_digits_power\
    \ = $num_digits - $shift;\n    my $num_digits_power_2 = $num_digits_power + 1;\n\
    \    my $num_digits_power_3 = $num_digits_power_2 + 1;\n    my $num_digits_power_4\
    \ = $num_digits_power_3 + 1;\n    my $num_digits_power_5 = $num_digits_power_4\
    \ + 1;\n    my $num_digits_power_6 = $num_digits_power_5 + 1;\n    my $num_digits_power_7\
    \ = $num_digits_power_6 + 1;\n    my $num_digits_power_8 = $num_digits_power_7\
    \ + 1;\n    my $num_digits_power_9 = $num_digits_power_8 + 1;\n    my $num_digits_power_10\
    \ = $num_digits_power_9 + 1;\n    my $num_digits_power_11 = $num_digits_power_10\
    \ + 1;\n    my $num_digits_power_12 = $num_digits_power_11 + 1;\n    my $num_digits_power_13\
    \ = $num_digits_power_12 + 1;\n    my $num_digits_power_14 = $num_digits_power_13\
    \ + 1;\n    my $num_digits_power_15 = $num_digits_power_14 + 1;\n    my $num_digits_power_16\
    \ = $num_digits_power_15 + 1;\n    my $num_digits_power_17 = $num_digits_power_16\
    \ + 1;\n    my $num_digits_power_18 = $num_digits_power_17 + 1;\n    my $num_digits_power_19\
    \ = $num_digits_power_18 + 1;\n    my $num_digits_power_20 = $num_digits_power_19\
    \ + 1;\n    my $num_digits_power_21 = $num_digits_power_20 + 1;\n    my $num_digits_power_22\
    \ = $num_digits_power_21 + 1;\n    my $num_digits_power_23 = $num_digits_power_22\
    \ + 1;\n    my $num_digits_power_24 = $num_digits_power_23 + 1;\n    my $num_digits_power_25\
    \ = $num_digits_power_24 + 1;\n    my $num_digits_power_26 = $num_digits_power_25\
    \ + 1;\n    my $num_digits_power_27 = $num_digits_power_26 + 1;\n    my $num_digits_power_28\
    \ = $num_digits_power_27 + 1;\n    my $num_digits_power_29 = $num_digits_power_28\
    \ + 1;\n    my $num_digits_power_30 = $num_digits_power_29 + 1;\n    my $num_digits_power_31\
    \ = $num_digits_power_30 + 1;\n    my $num_digits_power_32 = $num_digits_power_31\
    \ + 1;\n", "    my($digits, $reversed, $i, $j);\n    my($digit, $digits);\n  \
    \  my($digits_length, $digits_reversed_length);", "    my $digits = $x % 10;\n\
    \    my $reversed = \"\";\n    my $i = $shift;\n    while ($i >= 0) {\n      \
    \  $reversed = $digits.\"$reversed\";\n        $i -= 1;\n    }\n    return $reversed;\n\
    }", "    my($digits, $reversed_digits);\n    my($i, $j, $digit);\n    my($num_digits);",
  "    my $digits = $x->{_digits}; # number of digits\n    my $sign = $x->{sign};\
    \ # sign of x\n    my $signbit = $x->{signbit}; # sign bit of x\n    my $xdigits\
    \ = $x->{_digits}; # number of digits in x\n    my $xsign = $x->{sign}; # sign\
    \ of x\n    my $xsignbit = $x->{signbit}; # sign bit of x\n    my $xdigit = $x->{_digit};\
    \ # digit of x\n    my $xdigits = $x->{_digits}; # number of digits in x\n   \
    \ my $xdigit = $x->{_digit}; # digit of x\n    my $xdigits = $x->{_digits}; #\
    \ number of digits in x\n    my $xdigit = $x->{_digit}; # digit of x\n    my $xdigits\
    \ = $x->{_digits}; # number of digits in x\n    my $xdigit = $x->{_digit}; # digit\
    \ of x\n    my $xdigits = $x->{_digits}; # number of digits in x\n    my $xdigit\
    \ = $x->{_digit}; # digit of x\n    my $xdigits = $x->{_digits}; # number of digits\
    \ in x\n    my $xdigit = $x->{_digit}; # digit of x\n    my $xdigits = $x->{_digits};\
    \ # number of digits in x\n    my $xdigit = $x->{_digit}; # digit of x\n    my\
    \ $xdigits = $x->{_digits}; # number of digits in x\n    my $xdigit = $x->{_digit};\
    \ # digit of x\n    my $xdigits = $x->{_digits}; # number of digits in x\n   \
    \ my $xdigit = $x->{_digit}; # digit of x\n    my $xdigits = $x->{_digits}; #\
    \ number of digits in x\n    my $xdigit = $x->{_digit}; # digit of x\n    my $xdigits\
    \ = $x->{_digits}; # number of digits in x\n    my $xdigit = $x->{_digit}; # digit\
    \ of x\n    my $xdigits = $x->{_digits}; # number of digits in x\n    my $xdigit\
    \ = $x->{_digit}; # ", '    my($digits, $i, $j, $digit);', "    my $digits = $x->{_digits}\
    \ || $x->{_str};\n    my $str = $x->{_str};\n    my $sign = $x->{sign};\n    my\
    \ $len = length($str);\n    my $digits_len = length($digits);\n    my $result\
    \ = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $carry = 0;\n    my $carrybit\
    \ = 0;\n    my $carrybits = 0;\n    my $carrybits_len = 0;\n    my $carrybits_len2\
    \ = 0;\n    my $carrybits_len3 = 0;\n    my $carrybits_len4 = 0;\n    my $carrybits_len5\
    \ = 0;\n    my $carrybits_len6 = 0;\n    my $carrybits_len7 = 0;\n    my $carrybits_len8\
    \ = 0;\n    my $carrybits_len9 = 0;\n    my $carrybits_len10 = 0;\n    my $carrybits_len11\
    \ = 0;\n    my $carrybits_len12 = 0;\n    my $carrybits_len13 = 0;\n    my $carrybits_len14\
    \ = 0;\n    my $carrybits_len15 = 0;\n    my $carrybits_len16 = 0;\n    my $carrybits_len17\
    \ = 0;\n    my $carrybits_len18 = 0;\n    my $carrybits_len19 = 0;\n    my $carrybits_len20\
    \ = 0;\n    my $carrybits_len21 = 0;\n    my $carrybits_len22 = 0;\n    my $carrybits_len23\
    \ = 0;\n    my $carrybits_len24 = 0;\n    my $carrybits_len25 = 0;\n    my $carrybits_len26\
    \ = 0;\n    my $carrybits_len27 = 0;\n    my $carrybits_len28 = 0;\n    my $carrybits_len29\
    \ = 0;\n    my $carrybits_len30 = 0;\n    my $carrybits_len31 = 0;\n    my $carrybits_len32\
    \ = 0;\n    my $carrybits_len33 = 0;\n    my $carrybits_len34 = 0;\n    my $carrybits_len35\
    \ = 0;\n    my $carrybits_len36 = 0;\n    my $carrybits_len37 = 0;\n    my $carrybits_len38\
    \ = 0;\n    my $carrybits_len39 = 0;\n    my $carrybits_len40 = 0;\n    my $carrybits_len41\
    \ = 0;\n    my $carrybits_len42 = 0;\n    my $carrybits_len43 = 0;\n    my $carrybits_len44\
    \ = 0;\n    my $carrybits_len45 = 0;\n    my $carrybits_len46 = 0;\n    my $carrybits_len47\
    \ = 0;\n    my $carrybit", "    my $digits = $x->{_digits} || $x->{_digits_length};\n\
    \    my $result = \"\";\n    my $i;\n    for ($i = 0; $i < $shift; $i++) {\n \
    \       $result .= $x->{_digits}[$i];\n    }\n    for ($i = $shift; $i < $digits;\
    \ $i++) {\n        $result .= $x->{_digits}[$i];\n    }\n    return $result;\n\
    }", "    my($digits, $reversed_digits);\n    my($i, $j, $digit, $reversed_digit);\n\
    \    my($num_digits) = $x->{num_digits}; # number of digits in x\n    my($num_digits_reversed)\
    \ = $x->{num_digits_reversed}; # number of digits in x\n    my($num_digits_shift)\
    \ = $shift; # number of digits to shift\n    my($num_digits_reversed_shift) =\
    \ $num_digits_reversed - $num_digits_shift; # number of digits to shift\n    my($num_digits_reversed_shift_digits)\
    \ = $num_digits_reversed / $num_digits_shift; # number of digits to shift digit\n\
    \    my($num_digits_reversed_shift_digits_digits) = $num_digits_reversed % $num_digits_shift;\
    \ # number of digits to shift digit\n    my($num_digits_shift_digits) = $num_digits\
    \ - $num_digits_reversed_shift; # number of digits to shift digit\n    my($num_digits_shift_digits_digits)\
    \ = $num_digits % $num_digits_shift; # number of digits to shift digit\n    my($num_digits_shift_digits_digits_digits)\
    \ = $num_digits / $num_digits_shift; # number of digits to shift digit\n    my($num_digits_shift_digits_digits_digits_digits)\
    \ = $num_digits % $num_digits_shift; # number of digits to shift digit\n    my($num_digits_shift_digits_digits_digits_digits_digits)\
    \ = $num_digits / $num_digits_shift; # number of digits to shift digit\n    my($num_digits_shift_digits_digits_digits_digits_digits_digits)\
    \ = $num_digits % $num_digits_shift; # number of digits to shift digit\n    my($num_digits_shift_digits_digits_digits_digits_digits_digits_digits)\
    \ = $num_digits / $num_digits_shift; # number of digits to shift digit\n    my($num_digits_shift_digits_digits_digits_digits_digits_digits_digits_digits)\
    \ = $num_digits % $num_digits_shift; # number of digits to shift digit\n    my($num_digits_shift_digits_digits_digits_digits_digits_digits_digits_digits_digits)\
    \ = $num_digits / $num_digits_shift; # number of digits to shift digit\n    my($num_digits_shift_digits_digits_digits_digits_digits_digits_digits_digits_digits_",
  "    my($digits, $i, $j, $carry) = (0, 0, 0);\n    \n    # Handle negative numbers\n\
    \    if ($x < 0) {\n        $x = -$x;\n        $shift = ($shift < 0) ? -$shift\
    \ : $shift;\n    }\n    \n    # Handle shifting by zero\n    if ($shift == 0)\
    \ {\n        return $x;\n    }\n    \n    # Handle shifting by more than the number\
    \ of digits\n    if ($shift > $#$x) {\n        $shift = $#$x;\n    }\n    \n \
    \   # Handle shifting by negative number of digits\n    if ($shift < 0) {\n  \
    \      $shift = -$shift;\n        $x = $x % $base;\n        $x = $x * $base;\n\
    \        $x = $x - $base;\n        $shift = $shift % $base;\n        $shift =\
    \ $shift * $base;\n        $shift = $shift - $base;\n    }\n    \n    # Handle\
    \ shifting by more than the number of digits\n    if ($shift > $#$x) {\n     \
    \   $shift = $#$x;\n    }\n    \n    # Handle shifting by negative number of digits\n\
    \    if ($shift < 0) {\n        $shift = -$shift;\n        $x = $x % $base;\n\
    \        $x = $x * $base;\n        $x = $x - $base;\n        $shift = $shift %\
    \ $base;\n        $shift = $shift * $base;\n        $shift = $shift - $base;\n\
    \    }\n    \n    # Handle shifting by more than the number of digits\n    if\
    \ ($shift > $#$x) {\n        $shift = $#$x;\n    }\n    \n    # Handle shifting\
    \ by negative number of digits\n    if ($shift < 0) {\n        $shift = -$shift;\n\
    \        $x = $x % $base;\n        $x = $x * $base;\n        $x = $x - $base;\n\
    \        $shift = $shift % $base;\n        $shift = $shift * $base;\n        $shift\
    \ = $shift - $base;\n    }\n    \n    # Handle shifting by more than the number\
    \ of digits\n    if ($shift > $#$x) {\n        $shift = $#$x;\n    }\n    \n \
    \   # Handle shifting by negative number of digits\n    if ($shift < 0) {\n  \
    \      $shift = -$shift;\n        $x = $x % $base;\n        $x = $x * $base;\n\
    \        $x = $x - $base;\n        $shift = $shift % $base;\n        $shift =\
    \ $shift * $base;\n        $shift = $shift - $base;\n    }\n    \n    # Handle\
    \ shifting by more than the number of digits\n    if ($shift > $#$x) {\n     \
    \   $shift = $#$x;\n", '    my($digits, $reversed_digits);', "    my($digits,\
    \ $i, $j, $carry) = @_;\n    $digits = '';\n    for ($i = 0; $i < $shift; $i++)\
    \ {\n        $digits .= $x->[$i];\n    }\n    for ($i = $shift; $i > 0; $i--)\
    \ {\n        $j = $i - 1;\n        $carry = 0;\n        for ($j = 0; $j < $shift;\
    \ $j++) {\n            $carry = $x->[$j] + $carry;\n            $x->[$j] = $carry\
    \ & 1;\n            $carry = $carry >> 1;\n        }\n        $x->[0] = $carry\
    \ & 1;\n    }\n    return $digits;\n}", "    my $len = length($x);\n    my $digits\
    \ = $len / $shift;\n    my $remainder = $len % $shift;\n    my $digits_reversed\
    \ = \"\";\n    my $digits_reversed_index = 0;\n    my $digits_reversed_index2\
    \ = 0;\n    my $digits_reversed_index3 = 0;\n    my $digits_reversed_index4 =\
    \ 0;\n    my $digits_reversed_index5 = 0;\n    my $digits_reversed_index6 = 0;\n\
    \    my $digits_reversed_index7 = 0;\n    my $digits_reversed_index8 = 0;\n  \
    \  my $digits_reversed_index9 = 0;\n    my $digits_reversed_index10 = 0;\n   \
    \ my $digits_reversed_index11 = 0;\n    my $digits_reversed_index12 = 0;\n   \
    \ my $digits_reversed_index13 = 0;\n    my $digits_reversed_index14 = 0;\n   \
    \ my $digits_reversed_index15 = 0;\n    my $digits_reversed_index16 = 0;\n   \
    \ my $digits_reversed_index17 = 0;\n    my $digits_reversed_index18 = 0;\n   \
    \ my $digits_reversed_index19 = 0;\n    my $digits_reversed_index20 = 0;\n   \
    \ my $digits_reversed_index21 = 0;\n    my $digits_reversed_index22 = 0;\n   \
    \ my $digits_reversed_index23 = 0;\n    my $digits_reversed_index24 = 0;\n   \
    \ my $digits_reversed_index25 = 0;\n    my $digits_reversed_index26 = 0;\n   \
    \ my $digits_reversed_index27 = 0;\n    my $digits_reversed_index28 = 0;\n   \
    \ my $digits_reversed_index29 = 0;\n    my $digits_reversed_index30 = 0;\n   \
    \ my $digits_reversed_index31 = 0;\n    my $digits_reversed_index32 = 0;\n   \
    \ my $digits_reversed_index33 = 0;\n    my $digits_reversed_index34 = 0;\n   \
    \ my $digits_reversed_index35 = 0;\n    my $digits_reversed_index36 = 0;\n   \
    \ my $digits_reversed_index37 = 0;\n    my $digits_reversed_index38 = 0;\n   \
    \ my $digits_reversed_index39 = 0;\n    my $digits_reversed_index40 = 0;\n   \
    \ my $digits_reversed_index41 = 0;\n    my $digits_reversed_index42 = 0;\n   \
    \ my $digits_reversed_index43 = 0;\n    my $digits_reversed_index44 = 0;\n   \
    \ my $digits_reversed_index45 = 0;\n    my $digits_reversed_index46 = 0;\n   \
    \ my $digits_reversed_index47 = 0;\n    my $digits_reversed_index48 = 0;\n", " \
    \   my($digits, $reversed_digits);\n    my($i, $j, $digit, $reversed_digit);\n\
    \    if ($shift > $#_) {\n        $digits = reverse @_;\n    } else {\n      \
    \  $digits = @_;\n    }\n    $reversed_digits = reverse $digits;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = reverse @_;\n    $digits = reverse @_;\n    $digits\
    \ = reverse @_;\n    $digits = ", "    my $digits = $x % 10;\n    $x = $x / 10;\n\
    \    my $reversed = \"\";\n    for (my $i = $shift; $i >= 0; $i--) {\n       \
    \ $reversed .= $digits[$i];\n    }\n    return $reversed;\n}", "    my $digits\
    \ = $x->{_digits} || $x->{_str};\n    my $sign = $x->{sign};\n    my $signbit\
    \ = $x->{signbit};\n    my $base = $x->{_radix};\n    my $digits_len = length($digits);\n\
    \    my $digits_shift = $digits_len < $shift ? $shift - $digits_len : 0;\n   \
    \ my $digits_mask = (1 << $digits_shift) - 1;\n    my $digits_mask = sprintf('%0'.$digits_shift.'b',\
    \ $digits_mask);\n    my $digits_mask2 = sprintf('%0'.$digits_shift.'b', $digits_mask);\n\
    \    my $digits_mask3 = sprintf('%0'.$digits_shift.'b', $digits_mask);\n    my\
    \ $digits_mask4 = sprintf('%0'.$digits_shift.'b', $digits_mask);\n    my $digits_mask5\
    \ = sprintf('%0'.$digits_shift.'b', $digits_mask);\n    my $digits_mask6 = sprintf('%0'.$digits_shift.'b',\
    \ $digits_mask);\n    my $digits_mask7 = sprintf('%0'.$digits_shift.'b', $digits_mask);\n\
    \    my $digits_mask8 = sprintf('%0'.$digits_shift.'b', $digits_mask);\n    my\
    \ $digits_mask9 = sprintf('%0'.$digits_shift.'b', $digits_mask);\n    my $digits_mask10\
    \ = sprintf('%0'.$digits_shift.'b', $digits_mask);\n    my $digits_mask11 = sprintf('%0'.$digits_shift.'b',\
    \ $digits_mask);\n    my $digits_mask12 = sprintf('%0'.$digits_shift.'b', $digits_mask);\n\
    \    my $digits_mask13 = sprintf('%0'.$digits_shift.'b', $digits_mask);\n    my\
    \ $digits_mask14 = sprintf('%0'.$digits_shift.'b', $digits_mask);\n    my $digits_mask15\
    \ = sprintf('%0'.$digits_shift.'b', $digits_mask);\n    my $digits_mask16 = sprintf('%0'.$digits_shift.'b',\
    \ $digits_mask);\n    my $digits_mask17 = sprint", "    my $digits = $x->{_digits}\
    \ || $x->{_digits_length};\n    my $digits_length = $x->{_digits_length};\n  \
    \  my $digits_length_reversed = $digits_length - ($shift % $digits_length);\n\
    \    my $digits_reversed = \"\";\n    my $digits_reversed_index = 0;\n    my $digits_reversed_index2\
    \ = 0;\n    my $digits_reversed_index3 = 0;\n    my $digits_reversed_index4 =\
    \ 0;\n    my $digits_reversed_index5 = 0;\n    my $digits_reversed_index6 = 0;\n\
    \    my $digits_reversed_index7 = 0;\n    my $digits_reversed_index8 = 0;\n  \
    \  my $digits_reversed_index9 = 0;\n    my $digits_reversed_index10 = 0;\n   \
    \ my $digits_reversed_index11 = 0;\n    my $digits_reversed_index12 = 0;\n   \
    \ my $digits_reversed_index13 = 0;\n    my $digits_reversed_index14 = 0;\n   \
    \ my $digits_reversed_index15 = 0;\n    my $digits_reversed_index16 = 0;\n   \
    \ my $digits_reversed_index17 = 0;\n    my $digits_reversed_index18 = 0;\n   \
    \ my $digits_reversed_index19 = 0;\n    my $digits_reversed_index20 = 0;\n   \
    \ my $digits_reversed_index21 = 0;\n    my $digits_reversed_index22 = 0;\n   \
    \ my $digits_reversed_index23 = 0;\n    my $digits_reversed_index24 = 0;\n   \
    \ my $digits_reversed_index25 = 0;\n    my $digits_reversed_index26 = 0;\n   \
    \ my $digits_reversed_index27 = 0;\n    my $digits_reversed_index28 = 0;\n   \
    \ my $digits_reversed_index29 = 0;\n    my $digits_reversed_index30 = 0;\n   \
    \ my $digits_reversed_index31 = 0;\n    my $digits_reversed_index32 = 0;\n   \
    \ my $digits_reversed_index33 = 0;\n    my $digits_reversed_index34 = 0;\n   \
    \ my $digits_reversed_index35 = 0;\n    my $digits_reversed_index36 = 0;\n   \
    \ my $digits_reversed_index37 = 0;\n    my $digits_reversed_index38 = 0;\n   \
    \ my $digits_reversed_index39 = 0;\n    my $digits_reversed_index40 = 0;\n   \
    \ my $digits_reversed_index41 = 0;\n    my $digits_reversed_index42 = 0;\n   \
    \ my $digits_reversed_index43 = 0;\n    my $digits_reversed_index44 = 0;\n   \
    \ my $digits_reversed_index45 = 0;\n    ", "    my($digits) = length($x);\n  \
    \  my($reversed_digits);\n    my($digits_reversed);\n    my($digits_shifted);\n\
    \    my($digits_shifted_reversed);", "    my $digits = $x->{_digits} || $x->{_str};\n\
    \    my $digits_len = length($digits);\n    my $shift = $shift || 0;\n    my $digits_len\
    \ = length($digits);\n    my $shift_digits = $shift % $digits_len;\n    my $shift_digits_len\
    \ = length($digits) - $shift_digits;\n    my $digits_reversed = substr($digits,\
    \ 0, $shift_digits_len);\n    my $digits_shifted = substr($digits, 0, $shift_digits);\n\
    \    my $result = $digits_shifted . $digits_reversed;\n    return $result;\n}",
  "    my $digits = $x->{_digits} || $x->{_str};\n    my $sign = $x->{sign};\n   \
    \ my $len = length($digits);\n    my $digits_reversed;\n    if ($shift > $len)\
    \ {\n        $digits_reversed = reverse $digits;\n    } else {\n        $digits_reversed\
    \ = $digits;\n    }\n    $digits_reversed = substr($digits_reversed, 0, $shift);\n\
    \    $digits_reversed = $sign * $digits_reversed;\n    return $digits_reversed;\n\
    }", "    my($digits, $i, $j, $digit);\n    \n    $digits = $x;\n    $shift  =\
    \ $shift || 0;\n    \n    # Circular shift is equivalent to multiplying by 10\
    \ and dividing by 10.\n    # Multiply by 10 and divide by 10 until we get down\
    \ to one digit.\n    # Then multiply by 10 and divide by 10 until we get down\
    \ to one digit.\n    # Keep multiplying and dividing until we get down to one\
    \ digit.\n    # Then multiply by 10 and divide by 10 until we get down to one\
    \ digit.\n    # Keep multiplying and dividing until we get down to one digit.\n\
    \    # Keep multiplying and dividing until we get down to one digit.\n    # Keep\
    \ multiplying and dividing until we get down to one digit.\n    # Keep multiplying\
    \ and dividing until we get down to one digit.\n    # Keep multiplying and dividing\
    \ until we get down to one digit.\n    # Keep multiplying and dividing until we\
    \ get down to one digit.\n    # Keep multiplying and dividing until we get down\
    \ to one digit.\n    # Keep multiplying and dividing until we get down to one\
    \ digit.\n    # Keep multiplying and dividing until we get down to one digit.\n\
    \    # Keep multiplying and dividing until we get down to one digit.\n    # Keep\
    \ multiplying and dividing until we get down to one digit.\n    # Keep multiplying\
    \ and dividing until we get down to one digit.\n    # Keep multiplying and dividing\
    \ until we get down to one digit.\n    # Keep multiplying and dividing until we\
    \ get down to one digit.\n    # Keep multiplying and dividing until we get down\
    \ to one digit.\n    # Keep multiplying and dividing until we get down to one\
    \ digit.\n    # Keep multiplying and dividing until we get down to one digit.\n\
    \    # Keep multiplying and dividing until we get down to one digit.\n    # Keep\
    \ multiplying and dividing until we get down to one digit.\n    # Keep multiplying\
    \ and dividing until we get down to one digit.\n    # Keep multiplying and dividing\
    \ until we get down to one digit.\n    # Keep multiplying and dividing until we\
    \ get down to one digit.\n    # Keep multiplying and dividing until we get down\
    \ to one digit.\n    # Keep multiplying and dividing until we get down to one\
    \ digit.\n    # Keep multiplying and dividing until we get down to one digit.\n\
    \    # Keep multiplying and dividing until we get down to one digit.\n    # Keep\
    \ multiplying and ", "    my $digits = $x;\n    my $reversed_digits = '';\n  \
    \  my $i = 0;\n    my $digit;\n    my $carry = 0;\n    my $digits_length = length($digits);\n\
    \    my $shift_length = length($shift);\n    my $shift_digits = substr($shift,\
    \ 0, $shift_length);\n    my $shift_digits_length = length($shift_digits);\n \
    \   my $shift_digits_reversed = substr($shift_digits, 0, $shift_digits_length);\n\
    \    my $shift_digits_reversed_length = length($shift_digits_reversed);\n    my\
    \ $shift_digits_reversed_digit;\n    my $shift_digits_reversed_carry = 0;\n  \
    \  my $shift_digits_reversed_digits_length = length($shift_digits_reversed_digits);\n\
    \    my $shift_digits_reversed_digits_reversed_digit;\n    my $shift_digits_reversed_digits_reversed_carry\
    \ = 0;\n    my $shift_digits_reversed_digits_reversed_digits_length = length($shift_digits_reversed_digits_reversed_digits);\n\
    \    my $shift_digits_reversed_digits_reversed_digits_reversed_digit;\n    my\
    \ $shift_digits_reversed_digits_reversed_digits_reversed_carry = 0;\n    my $shift_digits_reversed_digits_reversed_digits_reversed_digits_length\
    \ = length($shift_digits_reversed_digits_reversed_digits_reversed_digits);\n \
    \   my $shift_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digit;\n\
    \    my $shift_digits_reversed_digits_reversed_digits_reversed_digits_reversed_carry\
    \ = 0;\n    my $shift_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_length\
    \ = length($shift_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits);\n\
    \    my $shift_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digit;\n\
    \    my $shift_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_carry\
    \ = 0;\n    my $shift_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digit;\n\
    \    my $shift_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_carry\
    \ = 0;\n    my $shift_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digits_reversed_digit;\n\
    \    ", '    my($digits, $reversed) = @_;', "    my $digits = $x->{_digits} ||\
    \ 0;\n    my $result = \"\";\n    my $i = $digits - $shift;\n    my $j = 0;\n\
    \    my $carry = 0;\n    while ($i < $digits) {\n        $result += $x->{_digits}[$i]\
    \ + $carry;\n        $carry = $x->{_digits}[$i] >> $shift;\n        $i++;\n  \
    \  }\n    $x->{_digits} = $result;\n    $x->{_digits}[$i] = $carry;\n    $x->{_digits}[$i]\
    \ = 0;\n}", "    my $digits = $x->{_digits} || 0;\n    my $sign = $x->{sign} ||\
    \ 0;\n    my $len = length($x->{_str});\n    my $signbit = $x->{signbit};\n  \
    \  my $bits = $x->{bits}; # number of bits in x\n    my $bitpos = $x->{bitpos};\
    \ # position of least significant bit in x\n    my $mask = (1 << $shift) - 1;\n\
    \    my $ret = '';\n    my $i;\n    my $carry = 0;\n    my $carrybits = 0;\n \
    \   my $carrybitpos = 0;\n    my $carrymask = (1 << $shift) - 1;\n    my $carrybit;\n\
    \    my $carrymaskbit;\n    my $carrybitpos;\n    my $carrybitmask;\n    my $carrybitmaskbit;\n\
    \    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n\
    \    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n\
    \    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n\
    \    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n\
    \    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n\
    \    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n\
    \    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n\
    \    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n\
    \    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n\
    \    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n\
    \    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n\
    \    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n\
    \    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n\
    \    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n    my $carrybitmaskbit;\n\
    \    my $carrybitmask", '    my($digits, $reversed, $i, $j);', "    my($digits,\
    \ $reversed) = (0, 0);\n    my $i = 0;\n    while ($i < $shift) {\n        $digits\
    \ = $digits * 10 + $x % 10;\n        $x = int($x / 10);\n        $reversed = $reversed\
    \ * 10 + $digits % 10;\n        $digits = int($digits / 10);\n        $i++;\n\
    \    }\n    if ($shift > $i) {\n        $reversed = $reversed * 10 + $x % 10;\n\
    \        $x = int($x / 10);\n    }\n    return $reversed;\n}", "    my($digits)\
    \ = length($x);\n    my($digits_reversed) = 0;\n    my($digits_shift) = 0;\n \
    \   my($digits_shifted_reversed) = 0;\n    my($digits_shifted_reversed_shifted)\
    \ = 0;\n    my($digits_shifted_reversed_shifted_shifted) = 0;\n    my($digits_shifted_reversed_shifted_shifted_shifted)\
    \ = 0;\n    my($digits_shifted_reversed_shifted_shifted_shifted_shifted) = 0;\n\
    \    my($digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted) = 0;\n\
    \    my($digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted)\
    \ = 0;\n    my($digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted)\
    \ = 0;\n    my($digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted)\
    \ = 0;\n    my($digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted)\
    \ = 0;\n    my($digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted)\
    \ = 0;\n    my($digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted)\
    \ = 0;\n    my($digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted)\
    \ = 0;\n    my($digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted)\
    \ = 0;\n    my($digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted)\
    \ = 0;\n    my($digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted)\
    \ = 0;\n    my($digits_shifted_reversed_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted_shifted)\
    \ = 0;\n    my($digits_shifted_reversed_shifted_", "    my $digits = $x->{_digits}\
    \ || $x->{_str};\n    my $str = $x->{_str};\n    my $sign = $x->{sign};\n    my\
    \ $len = length($str);\n    my $digits_len = length($digits);\n    my $carry =\
    \ 0;\n    my $result = \"\";\n    my $i;\n    for ($i = 0; $i < $len; $i++) {\n\
    \        my $digit = $digits->[$i];\n        my $carry = 0;\n        if ($i <\
    \ $digits_len) {\n            $carry = $digits->[$i] - $digits->[$digits_len];\n\
    \        }\n        $digits->[$i] = $digit + $carry;\n        $carry = $carry\
    \ + $digits->[$digits_len];\n        $digits->[$digits_len] = $carry % 10;\n \
    \       $carry = $carry / 10;\n    }\n    if ($carry > 0) {\n        $digits->[$digits_len]\
    \ = $carry;\n    }\n    $x->{_str} = $digits;\n    $x->{sign} = $sign;\n    return\
    \ $result;\n}", "    my($digits, $reversed, $i);\n    my $n = length($x);\n  \
    \  if ($shift > $n) {\n        $reversed = $x;\n        $digits = $n;\n    } else\
    \ {\n        $reversed = $x;\n        $digits = $shift;\n    }\n    for ($i =\
    \ 0; $i < $digits; $i++) {\n        $reversed = substr($reversed, 0, 1) . $reversed\n\
    \            if $i < $digits;\n        $reversed = substr($reversed, -1) . $reversed\n\
    \            if $i >= $digits;\n    }\n    return $reversed;\n}", "    my $digits\
    \ = $x % 10;\n    my $reversed = \"\";\n    my $i = $shift;\n    while ($i >=\
    \ 0) {\n        $reversed .= $digits;\n        $digits *= 10;\n        $i--;\n\
    \    }\n    $reversed .= $digits;\n    return $reversed;\n}", "    my($digits,\
    \ $reversed_digits);\n    my($i, $j, $digit);", '    my($digits, $reversed_digits);',
  "    my $digits = $x % 10;\n    my $result = $x % 10;\n    while ($shift > 0) {\n\
    \        $result = 10 * $result + $digits;\n        $shift -= 1;\n        $digits\
    \ = $x % 10;\n    }\n    return $result if $shift > 0;\n    return $digits . $result;\n\
    }", "    my $digits = $x->{_digits} || 0;\n    my $reversed = \"\";\n    my $i;\n\
    \    for ($i = 0; $i < $shift; $i++) {\n        $reversed .= $digits[$i];\n  \
    \  }\n    for ($i = $shift; $i < $digits; $i++) {\n        $reversed .= $digits[$i];\n\
    \    }\n    return $reversed;\n}", "    my($digits) = $x;\n    my $digits_length\
    \ = length($digits);\n    if ($shift > $digits_length) {\n        $digits = reverse\
    \ $digits;\n        $shift = $digits_length - $shift;\n    }\n    $digits = substr($digits,\
    \ 0, $shift);\n    $digits = $digits . $digits;\n    $digits = substr($digits,\
    \ 0, $digits_length);\n    return $digits;\n}", "    my($digits, $i, $j, $carry)\
    \ = @_;\n    my($digits_reversed) = '';\n    \n    # Handle negative numbers\n\
    \    if ($x < 0) {\n        $x = -$x;\n        $digits_reversed = reverse $digits_reversed;\n\
    \    }\n    \n    # Handle shifting by zero\n    if ($shift <= 0) {\n        return\
    \ $digits_reversed;\n    }\n    \n    # Handle shifting by more than the number\
    \ of digits\n    if ($shift > length($digits)) {\n        $shift = length($digits);\n\
    \    }\n    \n    # Circular shift\n    for ($i = $shift; $i >= 0; $i--) {\n \
    \       $digits = substr($digits, 0, $i) + substr($digits, $i + 1);\n    }\n \
    \   \n    # Handle shifting by more than the number of digits\n    if ($shift\
    \ > length($digits)) {\n        $shift = length($digits);\n    }\n    \n    #\
    \ Circular shift\n    for ($i = $shift; $i >= 0; $i--) {\n        $digits_reversed\
    \ = $digits_reversed + substr($digits, $i, 1);\n    }\n    \n    # Handle shifting\
    \ by zero\n    if ($shift <= 0) {\n        return $digits_reversed;\n    }\n \
    \   \n    # Handle shifting by more than the number of digits\n    if ($shift\
    \ > length($digits)) {\n        $shift = length($digits);\n    }\n    \n    #\
    \ Circular shift\n    for ($i = $shift; $i >= 0; $i--) {\n        $digits_reversed\
    \ = $digits_reversed + substr($digits, $i, 1);\n    }\n    \n    return $digits_reversed;\n\
    }", "    my $digits = $x->{_digits} || 0;\n    my $reversed = \"\";\n    my $i;\n\
    \    my $j;\n    my $k;\n    my $digit;\n    my $carry;\n    my $tmp;\n    my\
    \ $digits_left;\n    my $digits_right;\n    my $digits_left_count;\n    my $digits_right_count;\n\
    \    my $digits_left_carry;\n    my $digits_right_carry;\n    my $digits_left_carry2;\n\
    \    my $digits_right_carry2;\n    my $digits_left_carry3;\n    my $digits_right_carry3;\n\
    \    my $digits_left_carry4;\n    my $digits_right_carry4;\n    my $digits_left_carry5;\n\
    \    my $digits_right_carry5;\n    my $digits_left_carry6;\n    my $digits_right_carry6;\n\
    \    my $digits_left_carry7;\n    my $digits_right_carry7;\n    my $digits_left_carry8;\n\
    \    my $digits_right_carry8;\n    my $digits_left_carry9;\n    my $digits_right_carry9;\n\
    \    my $digits_left_carry10;\n    my $digits_right_carry10;\n    my $digits_left_carry11;\n\
    \    my $digits_right_carry11;\n    my $digits_left_carry12;\n    my $digits_right_carry12;\n\
    \    my $digits_left_carry13;\n    my $digits_right_carry13;\n    my $digits_left_carry14;\n\
    \    my $digits_right_carry14;\n    my $digits_left_carry15;\n    my $digits_right_carry15;\n\
    \    my $digits_left_carry16;\n    my $digits_right_carry16;\n    my $digits_left_carry17;\n\
    \    my $digits_right_carry17;\n    my $digits_left_carry18;\n    my $digits_right_carry18;\n\
    \    my $digits_left_carry19;\n    my $digits_right_carry19;\n    my $digits_left_carry20;\n\
    \    my $digits_right_carry20;\n    my $digits_left_carry21;\n    my $digits_right_carry21;\n\
    \    my $digits_left_carry22;\n    my $digits_right_carry22;\n    my $digits_left_carry23;\n\
    \    my $digits_right_carry23;\n    my $digits_left_carry24;\n    my $digits_right_carry24;\n\
    \    my $digits_left_carry25;\n    my $digits_right_carry25;\n    my $digits_left_carry26;\n\
    \    my $digits_right_carry26;\n    my $digits_", "    my $digits = $x % 10;\n\
    \    $x /= 10;\n    $x .= $digits x $shift;\n    $x /= 10;\n    return $x;\n}",
  "    my($digits) = $x =~ /(\\d+)/g;\n    my($shifted_digits) = $digits;\n    my\
    \ $shift_digits = $shift;\n    my $shift_digits_string = '';\n    my $digits_length\
    \ = length($digits);\n    my $shift_digits_length = length($shift_digits);\n \
    \   my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $digits_string = '';\n\
    \    my $digits_length = length($digits);\n    my $shift_digits_length = length($shift_digits);\n\
    \    my $shift_digits_string = '';\n    my $digits_string = '';\n    my $digits_length\
    \ = length($digits);\n    my $shift_digits_length = length($shift_digits);\n \
    \   my $shift_digits_string = '';\n    my $digits_string = '';\n    my $digits_length\
    \ = length($digits);\n    my $shift_digits_length = length($shift_digits);\n \
    \   my $shift_digits_string = '';\n    my $digits_string = '';\n    my $digits_length\
    \ = length($digits);\n    my $shift_digits_length = length($shift_digits);\n \
    \   my $shift_digits_string = '';\n    my $digits_string = '';\n    my $digits_length\
    \ = length($digits);\n    my $shift_digits_length = length($shift_digits);\n \
    \   my $shift_digits_string = '';\n    my $digits_string = '';\n    my $digits_length\
    \ = length($digits);\n    my $shift_digits_length = length($shift_digits);\n \
    \   my $shift_digits_string = '';\n    my $digits_string = '';\n    my $digits_length\
    \ = length($digits);\n    my $shift_digits_length = length($shift_digits);\n \
    \   my $shift_digits_string = '';\n    my $digits_string = '';\n    my $digits_length\
    \ = length($digits);\n    my $shift_digits_length = length($shift_digits);\n \
    \   my $shift_digits_string = '';\n    my $digits_string = '';\n    my $digits_length\
    \ = length($digits);\n    my $shift_digits_length = length($shift_digits);\n \
    \   my $shift_digits_string = '';\n    my $digits_string = '';\n    my $digits_length\
    \ = length($digits);\n    my $shift_digits_length = length($shift_digits);\n \
    \   my $shift_digits_string = '';\n    my $digits_string = '';\n    my $digits_length\
    \ = length($digits);\n    my $shift_digits_length = length($shift_digits);\n \
    \   my $shift_digits_string = '';\n    my $digits_string = '';\n    my $digits_length\
    \ = length($digits);\n    my $shift_digits_length = length($shift_", "    my $digits\
    \ = $x % 10;\n    my $reversed = \"\";\n    my $i = $shift;\n    while ($i >=\
    \ 0) {\n        $reversed .= $digits;\n        $digits *= 10;\n        $i--;\n\
    \    }\n    return $reversed;\n}", "    my $digits = $x->{_digits} || $x->{_str};\n\
    \    my $result = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $carry = 0;\n\
    \    my $carrybits = 0;\n    my $carrybits_max = 0;\n    my $carrybits_max_index\
    \ = 0;\n    my $carrybits_max_digit = 0;\n    my $carrybits_max_digit_index =\
    \ 0;\n    my $carrybits_max_digit_count = 0;\n    my $carrybits_max_digit_count_index\
    \ = 0;\n    my $carrybits_max_digit_count_digit = 0;\n    my $carrybits_max_digit_count_digit_index\
    \ = 0;\n    my $carrybits_max_digit_count_digit_count = 0;\n    my $carrybits_max_digit_count_digit_count_index\
    \ = 0;\n    my $carrybits_max_digit_count_digit_count_digit = 0;\n    my $carrybits_max_digit_count_digit_count_digit_index\
    \ = 0;\n    my $carrybits_max_digit_count_digit_count_digit_count = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_index = 0;\n    my $carrybits_max_digit_count_digit_count_digit_count\
    \ = 0;\n    my $carrybits_max_digit_count_digit_count_digit_count_index = 0;\n\
    \    my $carrybits_max_digit_count_digit_count_digit_count_digit = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_count_digit_index = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_count_digit_count = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_count_digit_index = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_count_digit_count = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_count_digit_index = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_count_digit_count = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_count_digit_index = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_count_digit_count = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_count_digit_index = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_count_digit_count = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_count_digit_index = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_count_digit_count = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_count_digit_index = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_count_digit_count = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_count_digit_index = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_count_digit_count = 0;\n    my\
    \ $carrybits_max_digit_count_digit_count_digit_count_digit_index = 0;\n    my\
    \ $carry", "    my($digits) = $x;\n    my $reverse = 0;\n    my $digits_length\
    \ = length($digits);\n    my $shift_length = length($shift);\n    my $shift_remainder\
    \ = $shift_length % $digits_length;\n    if ($shift_remainder != 0) {\n      \
    \  $reverse = 1;\n        $shift =~ s/^0//;\n        $shift =~ s/^$digits_length//;\n\
    \    }\n    $shift =~ s/^0//;\n    $shift =~ s/^$digits_length//;\n    $shift\
    \ =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n\
    \    $shift =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n    $shift\
    \ =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n\
    \    $shift =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n    $shift\
    \ =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n\
    \    $shift =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n    $shift\
    \ =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n\
    \    $shift =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n    $shift\
    \ =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n\
    \    $shift =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n    $shift\
    \ =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n\
    \    $shift =~ s/^$digits_length//;\n    $shift =~ s/^$digits_length//;\n    $shift\
    \ =~ s/^$digits_length//;\n    $shift =", "    my($digits, $result) = '';\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $digit;\n    my $carry =\
    \ 0;\n    my $carry2;\n    my $carry3;\n    my $carry4;\n    my $carry5;\n   \
    \ my $carry6;\n    my $carry7;\n    my $carry8;\n    my $carry9;\n    my $carry10;\n\
    \    my $carry11;\n    my $carry12;\n    my $carry13;\n    my $carry14;\n    my\
    \ $carry15;\n    my $carry16;\n    my $carry17;\n    my $carry18;\n    my $carry19;\n\
    \    my $carry20;\n    my $carry21;\n    my $carry22;\n    my $carry23;\n    my\
    \ $carry24;\n    my $carry25;\n    my $carry26;\n    my $carry27;\n    my $carry28;\n\
    \    my $carry29;\n    my $carry30;\n    my $carry31;\n    my $carry32;\n    my\
    \ $carry33;\n    my $carry34;\n    my $carry35;\n    my $carry36;\n    my $carry37;\n\
    \    my $carry38;\n    my $carry39;\n    my $carry40;\n    my $carry41;\n    my\
    \ $carry42;\n    my $carry43;\n    my $carry44;\n    my $carry45;\n    my $carry46;\n\
    \    my $carry47;\n    my $carry48;\n    my $carry49;\n    my $carry50;\n    my\
    \ $carry51;\n    my $carry52;\n    my $carry53;\n    my $carry54;\n    my $carry55;\n\
    \    my $carry56;\n    my $carry57;\n    my $carry58;\n    my $carry59;\n    my\
    \ $carry60;\n    my $carry61;\n    my $carry62;\n    my $carry63;\n    my $carry64;\n\
    \    my $carry65;\n    my $carry66;\n    my $carry67;\n    my $carry68;\n    my\
    \ $carry69;\n    my $carry70;\n    my $carry71;\n    my $carry72;\n    my $carry73;\n\
    \    my $carry74;\n    my $carry75;\n    my $carry76;\n    my $carry77;\n    my\
    \ $carry78;\n    my $carry79;\n    my $carry80;\n    my $carry81;\n    my $carry82;\n\
    \    my $carry83;\n    my $carry84;\n", "    my $digits = $x % 10;\n    my $reversed\
    \ = \"\";\n    my $i = 0;\n    while ($i < $shift) {\n        $reversed .= $digits;\n\
    \        $i++;\n        $digits *= 10;\n    }\n    return $reversed;\n}", "  \
    \  my($digits) = length($x);\n    my($digits_reversed) = 0;\n    my($digits_shift)\
    \ = 0;\n    my($digits_reversed_shift) = 0;", "    my($digits, $reversed_digits);\n\
    \    my($i, $j, $digit, $reversed_digit);\n    my($num_digits) = $x->{_num_digits};\
    \ # number of digits in the number\n    my($num_digits_reversed) = $x->{_num_digits_reversed};\n\
    \    my($num_digits_reversed_shift) = $num_digits_reversed - $shift;\n    my($num_digits_reversed_shift_left)\
    \ = $num_digits_reversed - $shift - 1;\n    my($num_digits_reversed_shift_right)\
    \ = $num_digits_reversed - $shift;", "    my $digits = $x->{_digits} || 0;\n \
    \   my $sign = $x->{sign} || 0;\n    my $signbit = $x->{signbit} || 0;\n    my\
    \ $digits_len = length($x->{_digits});\n    my $digits_shift = $digits_len - $shift;\n\
    \    my $digits_mask = ~((1 << $digits_shift) - 1);\n    my $digits_mask2 = $digits_mask\
    \ + 1;\n    my $digits_mask3 = $digits_mask + 2;\n    my $digits_mask4 = $digits_mask\
    \ + 4;\n    my $digits_mask5 = $digits_mask + 8;\n    my $digits_mask6 = $digits_mask\
    \ + 16;\n    my $digits_mask7 = $digits_mask + 32;\n    my $digits_mask8 = $digits_mask\
    \ + 64;\n    my $digits_mask9 = $digits_mask + 128;\n    my $digits_mask10 = $digits_mask\
    \ + 256;\n    my $digits_mask11 = $digits_mask + 512;\n    my $digits_mask12 =\
    \ $digits_mask + 1024;\n    my $digits_mask13 = $digits_mask + 2048;\n    my $digits_mask14\
    \ = $digits_mask + 4096;\n    my $digits_mask15 = $digits_mask + 8192;\n    my\
    \ $digits_mask16 = $digits_mask + 16384;\n    my $digits_mask17 = $digits_mask\
    \ + 32768;\n    my $digits_mask18 = $digits_mask + 65536;\n    my $digits_mask19\
    \ = $digits_mask + 131072;\n    my $digits_mask20 = $digits_mask + 262144;\n \
    \   my $digits_mask21 = $digits_mask + 524288;\n    my $digits_mask22 = $digits_mask\
    \ + 1048576;\n    my $digits_mask23 = $digits_mask + 2097152;\n    my $digits_mask24\
    \ = $digits_mask + 4194304;\n    my $digits_mask25 = $digits_mask + 8388608;\n\
    \    my $digits_mask26 = $digits_mask + 16777216;\n    my $digits_mask27 = $digits_mask\
    \ + 33554432;\n    my $digits_mask28 = $digits_mask + 67108864;\n    my $digits_mask29\
    \ = $digits_mask + 134217728;\n    my $digits_mask30 = $digits_mask + 268435456;\n\
    \    my $digits_", "    my $digits = $x->{_digits} || $x->{_str};\n    my $digits_len\
    \ = length($digits);\n    my $shift_len = length($shift);\n    my $shift_digits\
    \ = substr($digits, 0, $shift_len);\n    my $shift_digits_len = length($shift_digits);\n\
    \    my $shift_digits_reversed = substr($shift_digits, $shift_digits_len);\n \
    \   my $result = substr($digits, 0, $shift_len);\n    my $result_len = length($result);\n\
    \    my $result_reversed = substr($result, $result_len);\n    my $result_reversed_len\
    \ = length($result_reversed);\n    my $result_reversed_digits = substr($result_reversed,\
    \ 0, $shift_len);\n    my $result_reversed_digits_len = length($result_reversed_digits);\n\
    \    my $result_reversed_digits_reversed = substr($result_reversed_digits, $result_reversed_digits_len);\n\
    \    my $result_reversed_digits_reversed_len = length($result_reversed_digits_reversed);\n\
    \    my $result_reversed_digits_reversed_digits = substr($result_reversed_digits_reversed,\
    \ 0, $shift_len);\n    my $result_reversed_digits_reversed_digits_len = length($result_reversed_digits_reversed_digits);\n\
    \    my $result_reversed_digits_reversed_digits_reversed = substr($result_reversed_digits_reversed_digits,\
    \ $result_reversed_digits_reversed_len);\n    my $result_reversed_digits_reversed_digits_reversed_len\
    \ = length($result_reversed_digits_reversed_digits_reversed);\n    my $result_reversed_digits_reversed_digits_reversed_digits\
    \ = substr($result_reversed_digits_reversed_digits_reversed, 0, $shift_len);\n\
    \    my $result_reversed_digits_reversed_digits_reversed_digits_len = length($result_reversed_digits_reversed_digits_reversed_digits);\n\
    \    my $result_reversed_digits_reversed_digits_reversed_digits_reversed = substr($result_reversed_digits_reversed_digits_reversed_digits,\
    \ $result_reversed_digits_reversed_digits_reversed_len);\n    my $result_reversed_digits_reversed_digits_reversed_digits_reversed_len\
    \ = length($result_reversed_digits_reversed_digits_reversed_digits_reversed);\n\
    \    my $result_reversed_digits_reversed_digits_reversed_digits_reversed_digits\
    \ = substr($result_reversed_digits_reversed_digits_reversed_digits_reversed, 0,\
    \ $shift_len);\n    my $result_reversed_digits_reversed_", "    my $digits = $x->{_digits}\
    \ || $x->{_str};\n    my $result = \"\";\n    my $i;\n    for ($i = 0; $i < $shift;\
    \ $i++) {\n        $result .= substr($digits, $i, 1);\n    }\n    for ($i = $shift;\
    \ $i < length($digits); $i++) {\n        $result .= substr($digits, $i, 1);\n\
    \    }\n    return $result;\n}", '    my($digits, $reversed, $i);', "    my $digits\
    \ = $x % 10;\n    my $result = $x % 10;\n    while ($shift > 0) {\n        $result\
    \ *= 10;\n        $result += $digits;\n        $shift -= 1;\n        $digits =\
    \ $result % 10;\n        $result = $result / 10;\n    }\n    return $result;\n\
    }", "    my $digits = $x->{_digits} || $x->{_str};\n    my $reversed = \"\";\n\
    \    my $i = $shift;\n    my $j = 0;\n    my $k = 0;\n    while ($i >= 0) {\n\
    \        $reversed = $digits[$k++] . $reversed;\n        $i--;\n    }\n    while\
    \ ($shift > 0) {\n        $reversed = $digits[$j++] . $reversed;\n        $shift--;\n\
    \    }\n    return $reversed;\n}", "    my $digits = $x->{_digits} || 0;\n   \
    \ my $sign = $x->{sign} || 0;\n    my $digits_len = length($x->{_digits}) || 0;\n\
    \    my $digits_len = length($x->{_digits}) || 0;\n    my $digits_len = length($x->{_digits})\
    \ || 0;\n    my $digits_len = length($x->{_digits}) || 0;\n    my $digits_len\
    \ = length($x->{_digits}) || 0;\n    my $digits_len = length($x->{_digits}) ||\
    \ 0;\n    my $digits_len = length($x->{_digits}) || 0;\n    my $digits_len = length($x->{_digits})\
    \ || 0;\n    my $digits_len = length($x->{_digits}) || 0;\n    my $digits_len\
    \ = length($x->{_digits}) || 0;\n    my $digits_len = length($x->{_digits}) ||\
    \ 0;\n    my $digits_len = length($x->{_digits}) || 0;\n    my $digits_len = length($x->{_digits})\
    \ || 0;\n    my $digits_len = length($x->{_digits}) || 0;\n    my $digits_len\
    \ = length($x->{_digits}) || 0;\n    my $digits_len = length($x->{_digits}) ||\
    \ 0;\n    my $digits_len = length($x->{_digits}) || 0;\n    my $digits_len = length($x->{_digits})\
    \ || 0;\n    my $digits_len = length($x->{_digits}) || 0;\n    my $digits_len\
    \ = length($x->{_digits}) || 0;\n    my $digits_len = length($x->{_digits}) ||\
    \ 0;\n    my $digits_len = length($x->{_digits}) || 0;\n    my $digits_len = length($x->{_digits})\
    \ || 0;\n    my $digits_len = length($x->{_digits}) || 0;\n    my $digits_len\
    \ = length($x->{_digits}) || 0;\n    my $digits_len = length($x->{_digits}) ||\
    \ 0;\n    my $digits_len = length($x->{_digits}) || 0;\n    my $digits_len = length($x->{_digits})\
    \ || 0;\n    my $digits_len = length($x->{_digits}) || 0;\n    my $digits_len\
    \ = length($x->{_digits}) || 0;\n    my $digits_len = length", "    my $digits\
    \ = $x;\n    my $reversed_digits = '';\n    my $digits_length = length($digits);\n\
    \    my $shift_length = length($shift);\n    my $shift_remainder = $shift_length\
    \ % $digits_length;\n    my $shift_digits = substr($shift, 0, $shift_remainder);\n\
    \    my $shift_digits_length = length($shift_digits);\n    my $shift_digits_remainder\
    \ = length($shift_digits) - $shift_digits_length;\n    my $shift_digits_digits\
    \ = substr($shift_digits, 0, $shift_digits_remainder);\n    my $shift_digits_digits_length\
    \ = length($shift_digits_digits);\n    my $shift_digits_digits_remainder = length($shift_digits_digits)\
    \ - $shift_digits_digits_length;\n    my $shift_digits_digits_digits = substr($shift_digits_digits,\
    \ 0, $shift_digits_digits_remainder);\n    my $shift_digits_digits_digits_length\
    \ = length($shift_digits_digits_digits);\n    my $shift_digits_digits_digits_remainder\
    \ = length($shift_digits_digits_digits) - $shift_digits_digits_digits_length;\n\
    \    my $shift_digits_digits_digits_digits = substr($shift_digits_digits_digits,\
    \ 0, $shift_digits_digits_digits_remainder);\n    my $shift_digits_digits_digits_digits_length\
    \ = length($shift_digits_digits_digits_digits);\n    my $shift_digits_digits_digits_digits_remainder\
    \ = length($shift_digits_digits_digits_digits) - $shift_digits_digits_digits_digits_length;\n\
    \    my $shift_digits_digits_digits_digits_digits = substr($shift_digits_digits_digits_digits,\
    \ 0, $shift_digits_digits_digits_digits_remainder);\n    my $shift_digits_digits_digits_digits_digits_length\
    \ = length($shift_digits_digits_digits_digits_digits);\n    my $shift_digits_digits_digits_digits_digits_remainder\
    \ = length($shift_digits_digits_digits_digits_digits) - $shift_digits_digits_digits_digits_digits_length;\n\
    \    my $shift_digits_digits_digits_digits_digits_digits = substr($shift_digits_digits_digits_digits_digits,\
    \ 0, $shift_digits_digits_digits_digits_digits_remainder);\n    my $shift_digits_digits_digits_digits_digits_digits_length\
    \ = length($shift_digits_digits_digits_digits_digits_digits);\n    ", "    my($digits)\
    \ = length($x);\n    my($result) = '';\n    my $i = 0;\n    my $j = 0;\n    while($i\
    \ < $digits) {\n        $j = $i + $shift;\n        $result = $result . $x->[$i]\
    \ if $j < $digits;\n        $i = $j;\n    }\n    return $result;\n}", "    my($digits)\
    \ = length($x);\n    my($reversed) = '';\n    my($carry);", "    my $digits =\
    \ $x->{_digits} || $x->{_str};\n    my $reversed = \"\";\n    my $i;\n    for\
    \ ($i = 0; $i < $shift; $i++) {\n        $reversed .= substr($digits, $i, 1);\n\
    \    }\n    for ($i = $shift; $i < length($digits); $i++) {\n        $reversed\
    \ .= substr($digits, $i, 1);\n    }\n    return $reversed;\n}", "    my $digits\
    \ = $x;\n    my $reversed = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $k =\
    \ 0;\n    my $digit;\n    my $carry = 0;", "    my($digits, $reversed) = (0, 0);\n\
    \    \n    # Shift digits right by shift\n    while (shift > $digits) {\n    \
    \    $digits += $reversed;\n        $reversed = 0;\n    }\n    \n    # Circular\
    \ shift\n    while (shift > $digits) {\n        $digits += $reversed;\n      \
    \  $reversed = 0;\n        $x *= 10;\n        $x -= $x % $shift;\n        $reversed\
    \ = 1;\n    }\n    \n    # Return digits reversed\n    return $x % $shift;\n}",
  "    my($digits) = $x =~ /\\d/g;\n    my($digits_reversed) = $digits;\n    $digits_reversed\
    \ =~ s/(\\d{$shift})/$1./g;\n    return $digits_reversed;\n}", "    my($digits,\
    \ $reversed) = (0, 0);\n    my $digit = $x % 10;\n    $digits = $digits + 1;\n\
    \    $reversed = $reversed + $digit;\n    $x = $x / 10;\n    for(my $i = 0; $i\
    \ < $shift; $i++) {\n        $digit = $x % 10;\n        $digits = $digits + 1;\n\
    \        $reversed = $reversed + $digit;\n        $x = $x / 10;\n    }\n    return\
    \ $reversed if $digits > $shift;\n    return $digits == $shift ? $reversed : reverse($reversed);\n\
    }", "    my $digits = $x->{_digits}; # number of digits\n    my $sign = $x->{sign};\
    \ # sign of $x\n    my $signbit = $x->{signbit}; # sign bit of $x\n    my $digits_reversed\
    \ = $x->{_digits_reversed}; # digits reversed\n    my $digits_reversed_sign =\
    \ $x->{_digits_reversed_sign}; # digits reversed, sign of $x\n    my $digits_reversed_signbit\
    \ = $x->{_digits_reversed_signbit}; # digits reversed, sign bit of $x\n    my\
    \ $digits_reversed_signbit_neg = $x->{_digits_reversed_signbit_neg}; # digits\
    \ reversed, sign bit of $x, negated\n    my $digits_reversed_signbit_neg2 = $x->{_digits_reversed_signbit_neg2};\
    \ # digits reversed, sign bit of $x, negated and squared\n    my $digits_reversed_signbit_neg3\
    \ = $x->{_digits_reversed_signbit_neg3}; # digits reversed, sign bit of $x, negated\
    \ and cubed\n    my $digits_reversed_signbit_neg4 = $x->{_digits_reversed_signbit_neg4};\
    \ # digits reversed, sign bit of $x, negated and fifth root\n    my $digits_reversed_signbit_neg5\
    \ = $x->{_digits_reversed_signbit_neg5}; # digits reversed, sign bit of $x, negated\
    \ and sixth root\n    my $digits_reversed_signbit_neg6 = $x->{_digits_reversed_signbit_neg6};\
    \ # digits reversed, sign bit of $x, negated and seventh root\n    my $digits_reversed_signbit_neg7\
    \ = $x->{_digits_reversed_signbit_neg7}; # digits reversed, sign bit of $x, negated\
    \ and eighth root\n    my $digits_reversed_signbit_neg8 = $x->{_digits_reversed_signbit_neg8};\
    \ # digits reversed, sign bit of $x, negated and ninth root\n    my $digits_reversed_signbit_neg9\
    \ = $x->{_digits_reversed_signbit_neg9}; # digits reversed, sign bit of $x, negated\
    \ and tenth root\n    my $digits_reversed_signbit_neg10 = $x->{_digits_reversed_sign",
  "    my $digits = $x->{_digits} || $x->{_str};\n    my $sign = $x->{sign};\n   \
    \ my $digits_len = length($digits);\n    my $signbit = $x->{signbit};\n    my\
    \ $digits_len = length($digits);\n    my $shift_bits = $shift - $digits_len;\n\
    \    my $shift_bits_mask = (1 << $shift_bits) - 1;\n    my $shift_bits_mask2 =\
    \ $shift_bits_mask << 1;\n    my $shift_bits_mask3 = $shift_bits_mask << 2;\n\
    \    my $shift_bits_mask4 = $shift_bits_mask << 3;\n    my $shift_bits_mask5 =\
    \ $shift_bits_mask << 4;\n    my $shift_bits_mask6 = $shift_bits_mask << 5;\n\
    \    my $shift_bits_mask7 = $shift_bits_mask << 6;\n    my $shift_bits_mask8 =\
    \ $shift_bits_mask << 7;\n    my $shift_bits_mask9 = $shift_bits_mask << 8;\n\
    \    my $shift_bits_mask10 = $shift_bits_mask << 9;\n    my $shift_bits_mask11\
    \ = $shift_bits_mask << 10;\n    my $shift_bits_mask12 = $shift_bits_mask << 11;\n\
    \    my $shift_bits_mask13 = $shift_bits_mask << 12;\n    my $shift_bits_mask14\
    \ = $shift_bits_mask << 13;\n    my $shift_bits_mask15 = $shift_bits_mask << 14;\n\
    \    my $shift_bits_mask16 = $shift_bits_mask << 15;\n    my $shift_bits_mask17\
    \ = $shift_bits_mask << 16;\n    my $shift_bits_mask18 = $shift_bits_mask << 17;\n\
    \    my $shift_bits_mask19 = $shift_bits_mask << 18;\n    my $shift_bits_mask20\
    \ = $shift_bits_mask << 19;\n    my $shift_bits_mask21 = $shift_bits_mask << 20;\n\
    \    my $shift_bits_mask22 = $shift_bits_mask << 21;\n    my $shift_bits_mask23\
    \ = $shift_bits_mask << 22;\n    my $shift_bits_mask24 = $shift_bits_mask << 23;\n\
    \    my $shift_bits_mask25 = $shift_bits_mask << 24;\n    my $shift_bits_mask26\
    \ = $shift_bits_mask << 25;\n    my $shift_bits_mask27 = $shift_bits_mask << 26;\n\
    \    my $shift_bits_mask28 = $shift_bits_mask << 27;\n    my $shift_bits_mask29",
  "    my($digits) = $x;\n    my($i, $j, $carry);\n    my $len = length($digits);\n\
    \    my $reversed_digits = '';\n    my $reversed_len = 0;\n    my $digits_reversed;\n\
    \    my $digits_reversed_len;\n    my $digits_reversed_digits;\n    my $digits_reversed_digits_len;\n\
    \    my $digits_reversed_digits_len;\n    my $digits_reversed_digits_digits;\n\
    \    my $digits_reversed_digits_digits_len;\n    my $digits_reversed_digits_digits_digits;\n\
    \    my $digits_reversed_digits_digits_digits_len;\n    my $digits_reversed_digits_digits_digits_digits;\n\
    \    my $digits_reversed_digits_digits_digits_digits_len;\n    my $digits_reversed_digits_digits_digits_digits_digits_len;\n\
    \    my $digits_reversed_digits_digits_digits_digits_digits_digits_len;\n    my\
    \ $digits_reversed_digits_digits_digits_digits_digits_digits_digits_len;\n   \
    \ my $digits_reversed_digits_digits_digits_digits_digits_digits_digits_digits_len;\n\
    \    my $digits_reversed_digits_digits_digits_digits_digits_digits_digits_digits_digits_len;\n\
    \    my $digits_reversed_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_len;\n\
    \    my $digits_reversed_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_len;\n\
    \    my $digits_reversed_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_len;\n\
    \    my $digits_reversed_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_digits_",
  "    my $digits = $x % 10;\n    my $result = $x % 10;\n    my $carry = 0;\n    my\
    \ $i;\n    for ($i = 0; $i < $shift; $i++) {\n        $result = $result * 10 +\
    \ $digits;\n        $digits = $digits % 10;\n        $carry = $carry + $digits\
    \ * $shift;\n    }\n    if ($carry > 0) {\n        $result = $result + $carry;\n\
    \    }\n    return $result;\n}", "    my($digits) = $x =~ /\\d/g;\n    my($digits_reversed)\
    \ = \"\";\n    my($i, $j, $digits_reversed_length);\n    \n    # Shift digits\
    \ right by shift and reverse the digits in the\n    # result if shift is greater\
    \ than the number of digits.\n    for(my $i = $digits; $i > $shift; $i--) {\n\
    \        $digits_reversed .= $digits[$i];\n    }\n    \n    # Shift digits left\
    \ by shift and reverse the digits in the\n    # result if shift is less than the\
    \ number of digits.\n    for(my $i = $shift; $i < $digits; $i++) {\n        $digits_reversed\
    \ .= $digits[$i];\n    }\n    \n    return $digits_reversed;\n}", "    my $digits\
    \ = $x % 10;\n    my $reversed = \"\";\n    my $i = $shift;\n    while ($i >=\
    \ 0) {\n        $reversed .= $digits;\n        $digits *= 10;\n        $i--;\n\
    \    }\n    return $reversed;\n}", "    my $digits = $x->{_digits}; # number of\
    \ digits\n    my $digits_reversed = $x->{_digits_reversed}; # digits reversed\n\
    \    my $digits_reversed_index = $x->{_digits_reversed_index}; # index of last\
    \ digit\n    my $digits_reversed_index2 = $x->{_digits_reversed_index2}; # index\
    \ of second last digit\n    my $digits_reversed_index3 = $x->{_digits_reversed_index3};\
    \ # index of third last digit\n    my $digits_reversed_index4 = $x->{_digits_reversed_index4};\
    \ # index of fourth last digit\n    my $digits_reversed_index5 = $x->{_digits_reversed_index5};\
    \ # index of fifth last digit\n    my $digits_reversed_index6 = $x->{_digits_reversed_index6};\
    \ # index of sixth last digit\n    my $digits_reversed_index7 = $x->{_digits_reversed_index7};\
    \ # index of seventh last digit\n    my $digits_reversed_index8 = $x->{_digits_reversed_index8};\
    \ # index of eighth last digit\n    my $digits_reversed_index9 = $x->{_digits_reversed_index9};\
    \ # index of ninth last digit\n    my $digits_reversed_index10 = $x->{_digits_reversed_index10};\
    \ # index of tenth last digit\n    my $digits_reversed_index11 = $x->{_digits_reversed_index11};\
    \ # index of eleventh last digit\n    my $digits_reversed_index12 = $x->{_digits_reversed_index12};\
    \ # index of twelfth last digit\n    my $digits_reversed_index13 = $x->{_digits_reversed_index13};\
    \ # index of thirteenth last digit\n    my $digits_reversed_index14 = $x->{_digits_reversed_index14};\
    \ # index of fourteenth last digit\n    my $digits_reversed_index15 = $x->{_digits_reversed_index15};\
    \ # index of fifteenth last digit\n    my $digits_reversed_index16 = $x->{_digits_reversed_index16};\
    \ # index of sixteenth last digit\n    my $digits_reversed_index17 = $x->{_digits_reversed_index17};\
    \ # index of seventeen", "    my $digits = $x;\n    my $reverse = 0;\n    my $digits_len\
    \ = length($digits);\n    my $shift_len = length($shift);\n    my $shift_digits\
    \ = substr($shift, 0, $shift_len);\n    my $shift_digits_len = length($shift_digits);\n\
    \    my $shift_digits_reverse = 0;\n    my $shift_digits_len_len = length($shift_digits_len);\n\
    \    my $shift_digits_reversed_len = 0;\n    my $shift_digits_reversed_len_len\
    \ = 0;\n    my $shift_digits_reversed_len_reverse = 0;\n    my $shift_digits_reversed_len_len_reverse\
    \ = 0;\n    my $shift_digits_reversed_len_reverse_reverse = 0;\n    my $shift_digits_reversed_len_len_reverse_reverse\
    \ = 0;\n    my $shift_digits_reversed_len_reverse_reverse_reverse = 0;\n    my\
    \ $shift_digits_reversed_len_len_reverse_reverse_reverse = 0;\n    my $shift_digits_reversed_len_reverse_reverse_reverse_reverse\
    \ = 0;\n    my $shift_digits_reversed_len_len_reverse_reverse_reverse = 0;\n \
    \   my $shift_digits_reversed_len_reverse_reverse_reverse_reverse = 0;\n    my\
    \ $shift_digits_reversed_len_len_reverse_reverse_reverse = 0;\n    my $shift_digits_reversed_len_reverse_reverse_reverse\
    \ = 0;\n    my $shift_digits_reversed_len_len_reverse_reverse = 0;\n    my $shift_digits_reversed_len_reverse_reverse\
    \ = 0;\n    my $shift_digits_reversed_len_len_reverse = 0;\n    my $shift_digits_reversed_len_reverse\
    \ = 0;\n    my $shift_digits_reversed_len_len = 0;\n    my $shift_digits_reversed_len_reverse\
    \ = 0;\n    my $shift_digits_reversed_len_len_reverse = 0;\n    my $shift_digits_reversed_len_reverse_reverse\
    \ = 0;\n    my $shift_digits_reversed_len_len_reverse = 0;\n    my $shift_digits_reversed_len_reverse_reverse\
    \ = 0;\n    my $shift_digits_reversed_len_len_reverse_reverse = 0;\n    my $shift_digits_reversed_len_reverse_reverse\
    \ = 0;\n    my $shift_digits_reversed_len_len_reverse = 0;\n    my $shift_digits_reversed_len_reverse_reverse\
    \ = 0;\n    my $shift_digits_reversed_len_len_reverse = 0;\n    my $shift_digits_reversed_len_reverse_reverse\
    \ = 0;\n    my $shift_digits_reversed_len_len_reverse = 0;\n    my $shift_digits_reversed_len_reverse_reverse",
  "    my($digits) = $x =~ /\\d/g;\n    my($shifted_digits) = 0;\n    my($result)\
    \ = '';\n    my $i;\n    for ($i = 0; $i < $digits; $i++) {\n        $shifted_digits\
    \ = $shifted_digits * 10 + $digits[$i];\n        $result = $result . $shifted_digits\
    \ % 10;\n        $shifted_digits /= 10;\n    }\n    if ($shift > $digits) {\n\
    \        $result = reverse $result;\n    }\n    return $result;\n}", "    my $digits\
    \ = $x % 10;\n    $x /= 10;\n    $x .= $digits x $shift;\n    return $x;\n}",
  "    my($digits, $reversed_digits);\n    my($i, $j, $digit);", "    my $digits =\
    \ $x->{_digits} || 0;\n    my $result = \"\";\n    my $i = $digits;\n    my $j\
    \ = 0;\n    while($i >= 0) {\n        $result .= $x->{_digits}[$j];\n        $j\
    \ = ($j + $shift) % $x->{_digits}->[0];\n        $i--;\n    }\n    return $result;\n\
    }", "    my($digits, $i, $j, $carry) = @_;\n    $digits = '';\n    my $len = length($x);\n\
    \    my $sign = $x =~ /^-/ ? -1 : 1;\n    my $x_len = length($x);\n    my $x_sign\
    \ = $x_len ? $x =~ /^-/ ? -1 : 1 : 0;\n    my $shift = $shift || 1;\n    my $x_shift\
    \ = $x_len ? $x_len * $shift : 0;\n    my $x_digits = $x_shift / $shift;\n   \
    \ my $x_remainder = $x_shift % $shift;\n    my $x_digits_len = length($x_digits);\n\
    \    my $x_digits_sign = $x_digits_len ? $x_digits =~ /^-/ ? -1 : 1 : 0;\n   \
    \ my $x_digits_len = length($x_digits);\n    my $x_digits_sign = $x_digits_len\
    \ ? $x_digits =~ /^-/ ? -1 : 1 : 0;\n    my $x_digits_len = length($x_digits);\n\
    \    my $x_digits_sign = $x_digits_len ? $x_digits =~ /^-/ ? -1 : 1 : 0;\n   \
    \ my $x_digits_len = length($x_digits);\n    my $x_digits_sign = $x_digits_len\
    \ ? $x_digits =~ /^-/ ? -1 : 1 : 0;\n    my $x_digits_len = length($x_digits);\n\
    \    my $x_digits_sign = $x_digits_len ? $x_digits =~ /^-/ ? -1 : 1 : 0;\n   \
    \ my $x_digits_len = length($x_digits);\n    my $x_digits_sign = $x_digits_len\
    \ ? $x_digits =~ /^-/ ? -1 : 1 : 0;\n    my $x_digits_len = length($x_digits);\n\
    \    my $x_digits_sign = $x_digits_len ? $x_digits =~ /^-/ ? -1 : 1 : 0;\n   \
    \ my $x_digits_len = length($x_digits);\n    my $x_digits_sign = $x_digits_len\
    \ ? $x_digits =~ /^-/ ? -1 : 1 : 0;\n    my $x_digits_len = length($x_digits);\n\
    \    my $x_digits_sign = $x_digits_len ? $x_digits =~ /^-/ ? -1 : 1 : 0;\n   \
    \ my $x_digits_len = length($x_digits);\n    my $x_digits_sign = $x_digits_len\
    \ ? $x_digits =~ /^-/ ? -1 : 1 : 0;\n    my $x_digits_len = length($x_digits);\n\
    \    my $x_digits_sign = $x_digits_len ? $x_digits =~ /^-/ ", "    my $len = length($x);\n\
    \    if ($shift > $len) {\n        $x = reverse $x;\n        $shift = $len - $shift;\n\
    \    }\n    $x = $x x $shift;\n    $x =~ s/^0+(?=\\d)//;\n    return $x;\n}",
  "    my $digits = $x->{_digits} || $x->{_str};\n    my $str = $x->{_str};\n    my\
    \ $len = length($str);\n    my $i = 0;\n    my $digit;\n    my $carry = 0;\n \
    \   my $new_str = '';\n    my $new_len = 0;\n    my $carry = 0;\n    my $new_digit;",
  "    my($digits, $reversed) = (0, 0);\n    my $i = $shift;\n    while ($i >= 0)\
    \ {\n        $digits = $digits * 10 + $x % 10;\n        $reversed = $reversed\
    \ * 10 + $x % 10;\n        $x = int($x / 10);\n        $i = $i - 1;\n    }\n \
    \   if ($reversed) {\n        $digits = $digits * 10 + $reversed;\n    }\n   \
    \ return $digits;\n}", "    my $digits = $x % 10;\n    my $reversed = \"\";\n\
    \    my $i = 0;\n    my $j = 0;\n    while($i < $shift) {\n        $reversed =\
    \ $reversed.$digits;\n        $i++;\n        $digits = $x % 10;\n        $j++;\n\
    \    }\n    return $reversed;\n}", "    my($digits, $reversed_digits);\n    my($i,\
    \ $j, $digit);", "    my $digits = $x->{_digits} || 0;\n    my $result = \"\"\
    ;\n    my $i;\n    for ($i = 0; $i < $shift; $i++) {\n        $result .= $digits[$i];\n\
    \    }\n    for ($i = 0; $i < $shift; $i++) {\n        $digits[$i] = $digits[$i+$shift];\n\
    \    }\n    $x->{_digits} = $digits;\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
