name: HumanEval_161_solve
language: pl
prompt: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
  \ contains no letters, reverse the string.\n# The function should return the resulted\
  \ string.\n# Examples\nsub solve {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n\
  \        if(eq_deeply($candidate->(\"AsDf\"),\"aSdF\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1234\"\
  ),\"4321\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"ab\"),\"AB\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#a@C\"),\"#A@c\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  #AsdfW^45\"),\"#aSDFw^45\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"#6@2\"),\"2@6#\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  #$a^D\"),\"#$A^d\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"#ccc\"),\"#CCC\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    $s =~ s/\\A[a-z]+//;\n    $s =~ s/\\A[A-Z]+//;\n    $s =~ s/\\\
    A[a-z]+//;\n    return $s;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=perl,regex\
    \ |>\n<code>", "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        if($s[i] eq \"A\") {\n            $result .= \"a\";\n     \
    \   } elsif($s[i] eq \"B\") {\n            $result .= \"b\";\n        } elsif($s[i]\
    \ eq \"C\") {\n            $result .= \"c\";\n        } elsif($s[i] eq \"D\")\
    \ {\n            $result .= \"d\";\n        } elsif($s[i] eq \"E\") {\n      \
    \      $result .= \"e\";\n        } elsif($s[i] eq \"F\") {\n            $result\
    \ .= \"f\";\n        } elsif($s[i] eq \"G\") {\n            $result .= \"g\";\n\
    \        } elsif($s[i] eq \"H\") {\n            $result .= \"h\";\n        } elsif($s[i]\
    \ eq \"I\") {\n            $result .= \"i\";\n        } elsif($s[i] eq \"J\")\
    \ {\n            $result .= \"j\";\n        } elsif($s[i] eq \"K\") {\n      \
    \      $result .= \"k\";\n        } elsif($s[i] eq \"L\") {\n            $result\
    \ .= \"l\";\n        } elsif($s[i] eq \"M\") {\n            $result .= \"m\";\n\
    \        } elsif($s[i] eq \"N\") {\n            $result .= \"n\";\n        } elsif($s[i]\
    \ eq \"O\") {\n            $result .= \"o\";\n        } elsif($s[i] eq \"P\")\
    \ {\n            $result .= \"p\";\n        } elsif($s[i] eq \"Q\") {\n      \
    \      $result .= \"q\";\n        } elsif($s[i] eq \"R\") {\n            $result\
    \ .= \"r\";\n        } elsif($s[i] eq \"S\") {\n            $result .= \"s\";\n\
    \        } elsif($s[i] eq \"T\") {\n            $result .= \"t\";\n        } elsif($s[i]\
    \ eq \"U\") {\n            $result .= \"u\";\n        } elsif($s[i] eq \"V\")\
    \ {\n            $result .= \"v\";\n        } elsif($s[i] eq \"W\") {\n      \
    \      $result .= \"w\";\n        } elsif($s[i] eq \"X\") {\n            $result\
    \ .= \"x\";\n        } elsif($s[i] eq \"Y\") {\n            $result .= \"y\";\n\
    \        } elsif($s[i] eq \"Z\") {\n            $result .= \"z\";\n        } elsif($s[i]\
    \ eq \"a\") {\n            $result .= \"A\";\n        } elsif($s[i] eq \"b\")\
    \ {\n            $result .= \"B\";\n        } elsif($s[i] eq \"c\") {\n      \
    \      $result .= \"C\";\n        } ", "    my $result = \"\";\n    \n    foreach\
    \ my $char (split //, $s) {\n        my $is_letter = lc $char eq $char;\n    \
    \    $result .= $is_letter ? uc $char : $char;\n    }\n    \n    return $result;\n\
    }", "    my $result = \"\";\n    \n    foreach my $char (split //, $s) {\n   \
    \     my $is_letter = lc $char eq $char;\n        \n        if ($is_letter) {\n\
    \            $char =~ tr/a-z/A-Z/;\n        }\n        \n        $result .= $char;\n\
    \    }\n    \n    return $result;\n}", "    my $result = \"\";\n    \n    foreach\
    \ my $char (split(//,$s)) {\n        my $is_letter = ord($char) >= 65 && ord($char)\
    \ <= 90;\n        \n        if($is_letter) {\n            $char =~ tr/a-zA-Z/A-Z/;\n\
    \        }\n        \n        $result .= $char;\n    }\n    \n    return $result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    my $res = \"\";\n    \n\
    \    for(my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n\
    \        \n        if($c =~ /[a-z]/) {\n            $c =~ tr/a-z/A-Z/;\n     \
    \   }\n        elsif($c =~ /[A-Z]/) {\n            $c =~ tr/A-Z/a-z/;\n      \
    \  }\n        \n        $res .= $c;\n    }\n    \n    return $res;\n}", "    my\
    \ $result = \"\";\n    \n    foreach my $char (split(//,$s)) {\n        my $lower\
    \ = uc($char);\n        my $upper = lc($char);\n        \n        if ($char eq\
    \ $lower) {\n            $result .= $upper;\n        } elsif ($char eq $upper)\
    \ {\n            $result .= $lower;\n        } else {\n            $result .=\
    \ $char;\n        }\n    }\n    \n    return $result;\n}", "    my $result = \"\
    \";\n    \n    foreach my $char (split //, $s) {\n        my $is_letter = uc $char\
    \ eq $char;\n        $result .= $is_letter ? uc $char : $char;\n    }\n    \n\
    \    return $result;\n}", "    my $res = \"\";\n    \n    foreach my $char (split(//,$s))\
    \ {\n        if($char =~ /[a-z]/i) {\n            $char =~ tr/a-z/A-Z/;\n    \
    \    }\n        elsif($char =~ /[A-Z]/i) {\n            $char =~ tr/A-Z/a-z/;\n\
    \        }\n        $res .= $char;\n    }\n    \n    return $res;\n}", "    my\
    \ $result = \"\";\n    \n    foreach my $char (split(//, $s)) {\n        if ($char\
    \ =~ /^[a-z]/i) {\n            $result .= uc($char);\n        }\n        else\
    \ {\n            $result .= $char;\n        }\n    }\n    \n    return $result;\n\
    }", "    my $res = \"\";\n    \n    foreach my $char (split(//, $s)) {\n     \
    \   if ($char =~ /[a-z]/i) {\n            $char =~ tr/a-z/A-Z/;\n        }\n \
    \       else {\n            $char =~ tr/A-Z/a-z/;\n        }\n        $res .=\
    \ $char;\n    }\n    \n    return $res;\n}", "    \n    my $res = $s;\n    \n\
    \    foreach my $char (split(//, $s)) {\n        $res =~ tr/A-Z/a-z/;\n    }\n\
    \    \n    return $res;\n}", "    my $result = '';\n    \n    foreach my $char\
    \ (split(//, $s)) {\n        my $is_letter = lc($char) =~ /^[a-z]+$/i;\n     \
    \   \n        if ($is_letter) {\n            $char = $char =~ tr/a-z/A-Z/;\n \
    \       }\n        \n        $result .= $char;\n    }\n    \n    return $result;\n\
    }", "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n\
    \        my $c = substr($s, $i, 1);\n        if($c =~ /^[a-z]/i) {\n         \
    \   $result .= uc($c);\n        } else {\n            $result .= $c;\n       \
    \ }\n    }\n    \n    return $result;\n}", "    my $result = \"\";\n    my $i\
    \ = 0;\n    while($i < length($s)) {\n        if($s[i] =~ /[a-z]/i) {\n      \
    \      $result .= uc($s[$i]);\n        } else {\n            $result .= $s[$i];\n\
    \        }\n        $i++;\n    }\n    return $result;\n}", "    my $result = \"\
    \";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s,\
    \ $i, 1);\n        if($c =~ /[a-z]/i) {\n            $result .= uc($c);\n    \
    \    } else {\n            $result .= $c;\n        }\n    }\n    \n    return\
    \ $result;\n}", "    my $res = $s;\n    foreach my $char (split(//, $s)) {\n \
    \       if ($char =~ /^[a-z]/i) {\n            $char =~ tr/a-z/A-Z/;\n       \
    \ }\n        else {\n            $char =~ tr/A-Z/a-z/;\n        }\n        $res\
    \ .= $char;\n    }\n    return $res;\n}", "    \n    my $result = \"\";\n    \n\
    \    foreach my $char (split(//, $s)) {\n        my $is_letter = lc($char) eq\
    \ $char;\n        \n        if ($is_letter) {\n            $char =~ tr/a-z/A-Z/;\n\
    \        }\n        \n        $result .= $char;\n    }\n    \n    return $result;\n\
    }", "    my $result = \"\";\n    \n    foreach my $char (split //, $s) {\n   \
    \     my $case = $char =~ /[a-z]/i ? 1 : 0;\n        $result .= $case == 1 ? uc($char)\
    \ : $char;\n    }\n    \n    return $result;\n}\n</code>\n<|/ a tags=perl,string\
    \ |>\n<| a tags=perl,string |>\n<code>", "    my $result = \"\";\n    \n    foreach\
    \ my $char (split(//,$s)) {\n        my $lower = uc($char);\n        my $upper\
    \ = lc($char);\n        \n        if ($lower eq $char) {\n            $result\
    \ .= $upper;\n        } elsif ($upper eq $char) {\n            $result .= $lower;\n\
    \        } else {\n            $result .= $char;\n        }\n    }\n    \n   \
    \ return $result;\n}", "    my $result = \"\";\n    my $i = 0;\n    while($i <\
    \ length($s)) {\n        my $c = substr($s, $i, 1);\n        if($c =~ /[a-z]/i)\
    \ {\n            $result .= uc($c);\n            $i++;\n        }\n        elsif($c\
    \ =~ /[A-Z]/i) {\n            $result .= lc($c);\n            $i++;\n        }\n\
    \        else {\n            $result .= $c;\n            $i++;\n        }\n  \
    \  }\n    return $result;\n}\n</code>\n<|/ a tags=perl,string,reverse |>\n<| c\
    \ |>\nThanks for the answer! I understand your solution, but I cannot use any\
    \ built-in functions. I should use only subroutines and loops.\n<|/ c |>\n<| c\
    \ |>\nI updated my answer to include a solution that does not use any built-in\
    \ functions. I hope it helps!\n<|/ c |>\n<| c |>\nThanks for your answer! I understand\
    \ your solution, but I cannot use any built-in functions. I should use only subroutines\
    \ and loops.\n<|/ c |>\n<| c |>\nI updated my answer to include a solution that\
    \ does not use any built-in functions. I hope it helps!\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer! I understand your solution, but I cannot use any built-in functions.\
    \ I should use only subroutines and loops.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "    my $res = \"\";\n    \n    foreach my $char (split(//, $s)) {\n        my $c\
    \ = uc($char);\n        \n        if ($c eq $char) {\n            $res .= $char;\n\
    \        } else {\n            $res .= $c;\n        }\n    }\n    \n    return\
    \ $res;\n}", "    my $result = \"\";\n    \n    foreach my $char (split(//, $s))\
    \ {\n        my $case = $char =~ /[a-z]/i ? 1 : 0;\n        $result .= $case ==\
    \ 1 ? uc($char) : $char;\n    }\n    \n    return $result;\n}", "    my $res =\
    \ '';\n    \n    foreach my $char (split //, $s) {\n        my $case = lc $char;\n\
    \        $case =~ tr/a-z/A-Z/;\n        $case =~ tr/A-Z/a-z/;\n        $case =~\
    \ tr/A-Za-z/A-ZA-Z/;\n        $case =~ tr/a-za-z/AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz//d;\n\
    \        \n        $res .= $case;\n    }\n    \n    return $res;\n}", "    my\
    \ $res = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n        if($s[i]\
    \ eq \"A\") {\n            $res .= \"a\";\n        } elsif($s[i] eq \"B\") {\n\
    \            $res .= \"b\";\n        } elsif($s[i] eq \"C\") {\n            $res\
    \ .= \"c\";\n        } elsif($s[i] eq \"D\") {\n            $res .= \"d\";\n \
    \       } elsif($s[i] eq \"E\") {\n            $res .= \"e\";\n        } elsif($s[i]\
    \ eq \"F\") {\n            $res .= \"f\";\n        } elsif($s[i] eq \"G\") {\n\
    \            $res .= \"g\";\n        } elsif($s[i] eq \"H\") {\n            $res\
    \ .= \"h\";\n        } elsif($s[i] eq \"I\") {\n            $res .= \"i\";\n \
    \       } elsif($s[i] eq \"J\") {\n            $res .= \"j\";\n        } elsif($s[i]\
    \ eq \"K\") {\n            $res .= \"k\";\n        } elsif($s[i] eq \"L\") {\n\
    \            $res .= \"l\";\n        } elsif($s[i] eq \"M\") {\n            $res\
    \ .= \"m\";\n        } elsif($s[i] eq \"N\") {\n            $res .= \"n\";\n \
    \       } elsif($s[i] eq \"O\") {\n            $res .= \"o\";\n        } elsif($s[i]\
    \ eq \"P\") {\n            $res .= \"p\";\n        } elsif($s[i] eq \"Q\") {\n\
    \            $res .= \"q\";\n        } elsif($s[i] eq \"R\") {\n            $res\
    \ .= \"r\";\n        } elsif($s[i] eq \"S\") {\n            $res .= \"s\";\n \
    \       } elsif($s[i] eq \"T\") {\n            $res .= \"t\";\n        } elsif($s[i]\
    \ eq \"U\") {\n            $res .= \"u\";\n        } elsif($s[i] eq \"V\") {\n\
    \            $res .= \"v\";\n        } elsif($s[i] eq \"W\") {\n            $res\
    \ .= \"w\";\n        } elsif($s[i] eq \"X\") {\n            $res .= \"x\";\n \
    \       } elsif($s[i] eq \"Y\") {\n            $res .= \"y\";\n        } elsif($s[i]\
    \ eq \"Z\") {\n            $res .= \"z\";\n        } elsif($s[i] eq \"a\") {\n\
    \            $res .= \"A\";\n        } elsif($s[i] eq \"b\") {\n            $res\
    \ .= \"B\";\n        } elsif($s[i] eq \"c\") {\n            $res .= \"C\";\n \
    \       } ", "    my $result = \"\";\n    my $i = 0;\n    while($i < length($s))\
    \ {\n        if($s[i] eq \" \") {\n            $result .= \" \";\n           \
    \ $i++;\n        } elsif($s[i] eq \"A\") {\n            $result .= \"a\";\n  \
    \          $i++;\n        } elsif($s[i] eq \"B\") {\n            $result .= \"\
    b\";\n            $i++;\n        } elsif($s[i] eq \"C\") {\n            $result\
    \ .= \"c\";\n            $i++;\n        } elsif($s[i] eq \"D\") {\n          \
    \  $result .= \"d\";\n            $i++;\n        } elsif($s[i] eq \"E\") {\n \
    \           $result .= \"e\";\n            $i++;\n        } elsif($s[i] eq \"\
    F\") {\n            $result .= \"f\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"G\") {\n            $result .= \"g\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"H\") {\n            $result .= \"h\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"I\") {\n            $result .= \"i\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"J\") {\n            $result .= \"j\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"K\") {\n            $result .= \"k\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"L\") {\n            $result .= \"l\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"M\") {\n            $result .= \"m\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"N\") {\n            $result .= \"n\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"O\") {\n            $result .= \"o\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"P\") {\n            $result .= \"p\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"Q\") {\n            $result .= \"q\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"R\") {\n            $result .= \"r\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"S\") {\n            $result .= \"s\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"T\") {\n            $result .= \"t\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"U\") {\n            $result .= \"u\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"V\") {\n            $result .= \"v\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"W\") {\n            $result .= \"w", "    my $result = \"\";\n    my $len\
    \ = length($s);\n    for(my $i = 0; $i < $len; $i++) {\n        if($s[i] eq \"\
    A\") {\n            $result .= \"a\";\n        } elsif($s[i] eq \"B\") {\n   \
    \         $result .= \"b\";\n        } elsif($s[i] eq \"C\") {\n            $result\
    \ .= \"c\";\n        } elsif($s[i] eq \"D\") {\n            $result .= \"d\";\n\
    \        } elsif($s[i] eq \"E\") {\n            $result .= \"e\";\n        } elsif($s[i]\
    \ eq \"F\") {\n            $result .= \"f\";\n        } elsif($s[i] eq \"G\")\
    \ {\n            $result .= \"g\";\n        } elsif($s[i] eq \"H\") {\n      \
    \      $result .= \"h\";\n        } elsif($s[i] eq \"I\") {\n            $result\
    \ .= \"i\";\n        } elsif($s[i] eq \"J\") {\n            $result .= \"j\";\n\
    \        } elsif($s[i] eq \"K\") {\n            $result .= \"k\";\n        } elsif($s[i]\
    \ eq \"L\") {\n            $result .= \"l\";\n        } elsif($s[i] eq \"M\")\
    \ {\n            $result .= \"m\";\n        } elsif($s[i] eq \"N\") {\n      \
    \      $result .= \"n\";\n        } elsif($s[i] eq \"O\") {\n            $result\
    \ .= \"o\";\n        } elsif($s[i] eq \"P\") {\n            $result .= \"p\";\n\
    \        } elsif($s[i] eq \"Q\") {\n            $result .= \"q\";\n        } elsif($s[i]\
    \ eq \"R\") {\n            $result .= \"r\";\n        } elsif($s[i] eq \"S\")\
    \ {\n            $result .= \"s\";\n        } elsif($s[i] eq \"T\") {\n      \
    \      $result .= \"t\";\n        } elsif($s[i] eq \"U\") {\n            $result\
    \ .= \"u\";\n        } elsif($s[i] eq \"V\") {\n            $result .= \"v\";\n\
    \        } elsif($s[i] eq \"W\") {\n            $result .= \"w\";\n        } elsif($s[i]\
    \ eq \"X\") {\n            $result .= \"x\";\n        } elsif($s[i] eq \"Y\")\
    \ {\n            $result .= \"y\";\n        } elsif($s[i] eq \"Z\") {\n      \
    \      $result .= \"z\";\n        } elsif($s[i] eq \"a\") {\n            $result\
    \ .= \"A\";\n        } elsif($s[i] eq \"b\") {\n            $result .= \"B\";\n\
    \        } elsif($s[i] eq \"c\") {\n            $result .= \"", "    my $res =\
    \ $s;\n    \n    foreach my $char (split(//, $s)) {\n        if ($char =~ /[a-z]/)\
    \ {\n            $res =~ tr/a-z/A-Z/;\n        } elsif ($char =~ /[A-Z]/) {\n\
    \            $res =~ tr/A-Z/a-z/;\n        } else {\n            $res =~ tr/A-Za-z/A-ZA-Z/;\n\
    \        }\n    }\n    \n    return $res;\n}", "    my $res = \"\";\n    \n  \
    \  foreach my $char (split(//, $s)) {\n        my $lower = uc($char);\n      \
    \  $lower =~ tr/a-z/A-Z/;\n        $lower =~ tr/A-Z/a-z/;\n        $res .= $lower;\n\
    \    }\n    \n    return $res;\n}", "    my $result = \"\";\n    \n    foreach\
    \ my $char (split(//,$s)) {\n        my $new_char = \"\";\n        \n        if\
    \ ($char =~ /[a-z]/i) {\n            $new_char = $char =~ /[A-Z]/i ? uc($char)\
    \ : lc ($char);\n        } elsif ($char =~ /[A-Z]/i) {\n            $new_char\
    \ = $char =~ /[a-z]/i ? uc($char) : lc ($char);\n        } else {\n          \
    \  $new_char = $char;\n        }\n        \n        $result .= $new_char;\n  \
    \  }\n    \n    return $result;\n}", "    my $res = \"\";\n    \n    for(my $i\
    \ = 0; $i < length($s); $i++) {\n        if($s[i] eq \"A\") {\n            $res\
    \ .= \"a\";\n        } elsif($s[i] eq \"B\") {\n            $res .= \"b\";\n \
    \       } elsif($s[i] eq \"C\") {\n            $res .= \"c\";\n        } elsif($s[i]\
    \ eq \"D\") {\n            $res .= \"d\";\n        } elsif($s[i] eq \"E\") {\n\
    \            $res .= \"e\";\n        } elsif($s[i] eq \"F\") {\n            $res\
    \ .= \"f\";\n        } elsif($s[i] eq \"G\") {\n            $res .= \"g\";\n \
    \       } elsif($s[i] eq \"H\") {\n            $res .= \"h\";\n        } elsif($s[i]\
    \ eq \"I\") {\n            $res .= \"i\";\n        } elsif($s[i] eq \"J\") {\n\
    \            $res .= \"j\";\n        } elsif($s[i] eq \"K\") {\n            $res\
    \ .= \"k\";\n        } elsif($s[i] eq \"L\") {\n            $res .= \"l\";\n \
    \       } elsif($s[i] eq \"M\") {\n            $res .= \"m\";\n        } elsif($s[i]\
    \ eq \"N\") {\n            $res .= \"n\";\n        } elsif($s[i] eq \"O\") {\n\
    \            $res .= \"o\";\n        } elsif($s[i] eq \"P\") {\n            $res\
    \ .= \"p\";\n        } elsif($s[i] eq \"Q\") {\n            $res .= \"q\";\n \
    \       } elsif($s[i] eq \"R\") {\n            $res .= \"r\";\n        } elsif($s[i]\
    \ eq \"S\") {\n            $res .= \"s\";\n        } elsif($s[i] eq \"T\") {\n\
    \            $res .= \"t\";\n        } elsif($s[i] eq \"U\") {\n            $res\
    \ .= \"u\";\n        } elsif($s[i] eq \"V\") {\n            $res .= \"v\";\n \
    \       } elsif($s[i] eq \"W\") {\n            $res .= \"w\";\n        } elsif($s[i]\
    \ eq \"X\") {\n            $res .= \"x\";\n        } elsif($s[i] eq \"Y\") {\n\
    \            $res .= \"y\";\n        } elsif($s[i] eq \"Z\") {\n            $res\
    \ .= \"z\";\n        } elsif($s[i] eq \"a\") {\n            $res .= \"A\";\n \
    \       } elsif($s[i] eq \"b\") {\n            $res .= \"B\";\n        } elsif($s[i]\
    \ eq \"c\") {\n            $res .= \"C\";\n        } ", "    $s =~ tr/a-z/A-Z/;\n\
    \    return $s if $s =~ /[a-z]/;\n    $s =~ tr/A-Z/a-z/;\n    return $s if $s\
    \ =~ /[A-Z]/;\n    $s =~ tr/A-Za-z/A-Z/;\n    return $s;\n}", "    \n    my $result\
    \ = \"\";\n    \n    foreach my $char (split(//, $s)) {\n        my $is_letter\
    \ = lc($char) eq $char;\n        \n        if ($is_letter) {\n            $char\
    \ =~ tr/a-z/A-Z/;\n        }\n        \n        $result .= $char;\n    }\n   \
    \ \n    return $result;\n}", "    my $result = \"\";\n    \n    for(my $i = 0;\
    \ $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n        if($c\
    \ =~ /[a-z]/) {\n            $result .= uc($c);\n        } else {\n          \
    \  $result .= $c;\n        }\n    }\n    \n    return $result;\n}", "    my $result\
    \ = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n        if($s[i]\
    \ eq \"A\") {\n            $result .= \"B\";\n        } elsif($s[i] eq \"B\")\
    \ {\n            $result .= \"A\";\n        } elsif($s[i] eq \"a\") {\n      \
    \      $result .= \"b\";\n        } elsif($s[i] eq \"b\") {\n            $result\
    \ .= \"a\";\n        } else {\n            $result .= $s[i];\n        }\n    }\n\
    \    \n    return $result;\n}", "    my $result = \"\";\n    my $i = 0;\n    while($i\
    \ < length($s)) {\n        if($s[i] =~ /^[a-z]/i) {\n            $result .= uc(substr($s,\
    \ $i, 1));\n            $i += 1;\n        } else {\n            $result .= substr($s,\
    \ $i, 1);\n            $i += 1;\n        }\n    }\n    if(length($result) == 0)\
    \ {\n        $result = uc($s);\n    }\n    return $result;\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nThis doesn't work if the string starts with a letter.\n<|/ c |>\n\
    <| c |>\nI fixed the code so it works with strings that start with a letter. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| c |>\nThis doesn't work if the string starts\
    \ with a letter.\n<|/ c |>\n<| c |>\nI fixed the code so it works with strings\
    \ that start with a letter. Thanks for pointing that out.\n<|/ c |>\n<| a tags=perl,string,regex\
    \ |>\n<code>", "    \n    my $result = \"\";\n    \n    foreach my $char (split(//,\
    \ $s)) {\n        \n        if ($char =~ /[a-z]/) {\n            $char =~ tr/a-z/A-Z/;\n\
    \        }\n        \n        $result .= $char;\n    }\n    \n    return $result;\n\
    }", "    my $result = \"\";\n    \n    foreach my $char (split(//, $s)) {\n  \
    \      my $is_letter = lc($char) =~ /[a-z]/i;\n        \n        if ($is_letter)\
    \ {\n            $char =~ tr/a-z/A-Z/;\n        }\n        \n        $result .=\
    \ $char;\n    }\n    \n    return $result;\n}", "    my $result = \"\";\n    \n\
    \    foreach my $char (split(//,$s)) {\n        my $is_letter = substr($char,0,1)\
    \ =~ /[a-z]/i;\n        \n        if ($is_letter) {\n            $char =~ tr/a-z/A-Z/;\n\
    \        }\n        else {\n            $char =~ tr/A-Z/a-z/;\n        }\n   \
    \     \n        $result .= $char;\n    }\n    \n    return $result;\n}", "   \
    \ my $res = \"\";\n    \n    foreach my $char (split(//,$s)) {\n        my $lower\
    \ = uc($char);\n        $lower = lc($lower) if $char =~ /[a-z]/i;\n        $lower\
    \ = uc($lower) if $char =~ /[A-Z]/i;\n        $res .= $lower;\n    }\n    \n \
    \   return $res;\n}", "    my $result = \"\";\n    \n    foreach my $char (split(//,\
    \ $s)) {\n        my $case = uc($char);\n        \n        if ($case eq $char)\
    \ {\n            $result .= $char;\n        } else {\n            $result .= $case;\n\
    \        }\n    }\n    \n    return $result;\n}", "    my $result = \"\";\n  \
    \  \n    foreach my $char (split //, $s) {\n        my $case = uc($char);\n  \
    \      \n        if ($case eq $char) {\n            $result .= $char;\n      \
    \  } else {\n            $result .= $case;\n        }\n    }\n    \n    return\
    \ $result;\n}", "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        my $c = substr($s, $i, 1);\n        if($c =~ /[a-z]/) {\n \
    \           $result .= uc($c);\n        } else {\n            $result .= $c;\n\
    \        }\n    }\n    \n    return $result;\n}", "    \n    my $result = \"\"\
    ;\n    \n    foreach my $char (split //, $s) {\n        my $is_letter = uc $char\
    \ eq $char;\n        \n        if ($is_letter) {\n            $result .= uc $char;\n\
    \        } else {\n            $result .= $char;\n        }\n    }\n    \n   \
    \ return $result;\n}", "    my $result = \"\";\n    \n    foreach my $char (split\
    \ //, $s) {\n        my $lower = uc($char);\n        my $upper = lc($char);\n\
    \        \n        if ($char eq $lower) {\n            $result .= $upper;\n  \
    \      } elsif ($char eq $upper) {\n            $result .= $lower;\n        }\
    \ else {\n            $result .= $char;\n        }\n    }\n    \n    return $result;\n\
    }", "    my $res = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n\
    \        my $c = substr($s, $i, 1);\n        if($c =~ /^[a-z]/i) {\n         \
    \   $res .= uc(substr($s, $i, 1));\n        }\n        elsif($c =~ /^[A-Z]/i)\
    \ {\n            $res .= uc(substr($s, $i, 1));\n        }\n        elsif($c =~\
    \ /^[0-9]/i) {\n            $res .= substr($s, $i, 1);\n        }\n        elsif($c\
    \ =~ /^\\s/i) {\n            $res .= substr($s, $i, 1);\n        }\n        else\
    \ {\n            $res .= $c;\n        }\n    }\n    \n    return $res;\n}", " \
    \   my $result = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n  \
    \      if($s[i] eq \"A\") {\n            $result .= \"a\";\n        } elsif($s[i]\
    \ eq \"B\") {\n            $result .= \"b\";\n        } elsif($s[i] eq \"C\")\
    \ {\n            $result .= \"c\";\n        } elsif($s[i] eq \"D\") {\n      \
    \      $result .= \"d\";\n        } elsif($s[i] eq \"E\") {\n            $result\
    \ .= \"e\";\n        } elsif($s[i] eq \"F\") {\n            $result .= \"f\";\n\
    \        } elsif($s[i] eq \"G\") {\n            $result .= \"g\";\n        } elsif($s[i]\
    \ eq \"H\") {\n            $result .= \"h\";\n        } elsif($s[i] eq \"I\")\
    \ {\n            $result .= \"i\";\n        } elsif($s[i] eq \"J\") {\n      \
    \      $result .= \"j\";\n        } elsif($s[i] eq \"K\") {\n            $result\
    \ .= \"k\";\n        } elsif($s[i] eq \"L\") {\n            $result .= \"l\";\n\
    \        } elsif($s[i] eq \"M\") {\n            $result .= \"m\";\n        } elsif($s[i]\
    \ eq \"N\") {\n            $result .= \"n\";\n        } elsif($s[i] eq \"O\")\
    \ {\n            $result .= \"o\";\n        } elsif($s[i] eq \"P\") {\n      \
    \      $result .= \"p\";\n        } elsif($s[i] eq \"Q\") {\n            $result\
    \ .= \"q\";\n        } elsif($s[i] eq \"R\") {\n            $result .= \"r\";\n\
    \        } elsif($s[i] eq \"S\") {\n            $result .= \"s\";\n        } elsif($s[i]\
    \ eq \"T\") {\n            $result .= \"t\";\n        } elsif($s[i] eq \"U\")\
    \ {\n            $result .= \"u\";\n        } elsif($s[i] eq \"V\") {\n      \
    \      $result .= \"v\";\n        } elsif($s[i] eq \"W\") {\n            $result\
    \ .= \"w\";\n        } elsif($s[i] eq \"X\") {\n            $result .= \"x\";\n\
    \        } elsif($s[i] eq \"Y\") {\n            $result .= \"y\";\n        } elsif($s[i]\
    \ eq \"Z\") {\n            $result .= \"z\";\n        } elsif($s[i] eq \"a\")\
    \ {\n            $result .= \"A\";\n        } elsif($s[i] eq \"b\") {\n      \
    \      $result .= \"B\";\n        } elsif($s[i] eq \"c\") {\n            $result\
    \ .= \"C\";\n        } ", "    \n    my $res = \"\";\n    \n    foreach my $char\
    \ (split(//, $s)) {\n        \n        if ($char =~ /[a-z]/) {\n            $char\
    \ =~ tr/a-z/A-Z/;\n        }\n        elsif ($char =~ /[A-Z]/) {\n           \
    \ $char =~ tr/A-Z/a-z/;\n        }\n        else {\n            $char = $char;\n\
    \        }\n        \n        $res .= $char;\n    }\n    \n    return $res;\n}",
  "    $s =~ s/\\A[a-z]+//;\n    $s =~ s/\\A[A-Z]+//;\n    $s =~ s/\\A[^a-z]+//;\n\
    \    $s =~ s/\\A[^A-Z]+//;\n    $s =~ s/\\A[^a-zA-Z]+//;\n    $s =~ s/\\A[^a-zA-Z0-9]+//;\n\
    \    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s\
    \ =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\\
    A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\\
    s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n\
    \    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s\
    \ =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\\
    A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\\
    s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n\
    \    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s\
    \ =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\\
    A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\\
    s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n\
    \    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s =~ s/\\A[^a-zA-Z0-9\\s]+//;\n    $s\
    \ =~ s/\\A", "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        my $c = substr($s, $i, 1);\n        if($c =~ /[a-z]/) {\n \
    \           $result .= uc($c);\n        } elsif($c =~ /[A-Z]/) {\n           \
    \ $result .= lc($c);\n        } else {\n            $result .= $c;\n        }\n\
    \    }\n    \n    return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank\
    \ you for answering! I appreciate your efforts. I did try your code, but I got\
    \ this error message: Use of uninitialized value $c in concatenation (.) or string\
    \ at reverse.pl line 11, <STDIN> line 1.\n<|/ c |>\n<| c |>\nI tested the code\
    \ and it works fine for me. Can you please post the exact code you tried?\n<|/\
    \ c |>\n<| c |>\nI added the code I tried. I also added the error message I got\
    \ when I ran the code.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution\
    \ that doesn't use any subroutines.\n<|/ c |>\n<| c |>\nThank you so much! I appreciate\
    \ your efforts. I did try your code, but I got this error message: Use of uninitialized\
    \ value $c in concatenation (.) or string at reverse.pl line 11, <STDIN> line\
    \ 1.\n<|/ c |>\n<| a tags=perl,string,reverse |>\n<code>", "    my $result = \"\
    \";\n    \n    foreach my $char (split(//, $s)) {\n        if ($char =~ /[a-z]/)\
    \ {\n            $char =~ tr/a-z/A-Z/;\n        }\n        $result .= $char;\n\
    \    }\n    \n    return $result;\n}", "    my $result = \"\";\n    \n    foreach\
    \ my $char (split //, $s) {\n        my $is_letter = lc($char) eq $char;\n   \
    \     $result .= $is_letter ? uc($char) : $char;\n    }\n    \n    return $result;\n\
    }", "    my $result = \"\";\n    \n    foreach my $char (split(//, $s)) {\n  \
    \      my $case = uc($char);\n        if ($case eq $char) {\n            $result\
    \ .= $char;\n        } else {\n            $result .= $case;\n        }\n    }\n\
    \    \n    return $result;\n}", "    my $result = \"\";\n    \n    for(my $i =\
    \ 0; $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n        if($c\
    \ =~ /[a-z]/i) {\n            $result .= uc($c);\n        } else {\n         \
    \   $result .= $c;\n        }\n    }\n    \n    return $result;\n}", "    my $result\
    \ = \"\";\n    my $i = 0;\n    while($i < length($s)) {\n        if($s[i] eq \"\
    a\") {\n            $result .= \"A\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"b\") {\n            $result .= \"B\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"c\") {\n            $result .= \"C\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"d\") {\n            $result .= \"D\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"e\") {\n            $result .= \"E\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"f\") {\n            $result .= \"F\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"g\") {\n            $result .= \"G\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"h\") {\n            $result .= \"H\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"i\") {\n            $result .= \"I\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"j\") {\n            $result .= \"J\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"k\") {\n            $result .= \"K\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"l\") {\n            $result .= \"L\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"m\") {\n            $result .= \"M\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"n\") {\n            $result .= \"N\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"o\") {\n            $result .= \"O\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"p\") {\n            $result .= \"P\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"q\") {\n            $result .= \"Q\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"r\") {\n            $result .= \"R\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"s\") {\n            $result .= \"S\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"t\") {\n            $result .= \"T\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"u\") {\n            $result .= \"U\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"v\") {\n            $result .= \"V\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"w\") {\n            $result .= \"W\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"x\") {\n            $result .= \"", "    \n    my $result = \"\";\n   \
    \ \n    for(my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i,\
    \ 1);\n        \n        if($c =~ /^[a-z]/i) {\n            $result .= uc($c);\n\
    \        }\n        elsif($c =~ /^[A-Z]/i) {\n            $result .= lc($c);\n\
    \        }\n        else {\n            $result .= $c;\n        }\n    }\n   \
    \ \n    return $result;\n}", "    my $result = \"\";\n    \n    for(my $i = 0;\
    \ $i < length($s); $i++) {\n        if($s[i] eq \"a\") {\n            $result\
    \ .= \"A\";\n        } elsif($s[i] eq \"b\") {\n            $result .= \"B\";\n\
    \        } elsif($s[i] eq \"c\") {\n            $result .= \"C\";\n        } elsif($s[i]\
    \ eq \"d\") {\n            $result .= \"D\";\n        } elsif($s[i] eq \"e\")\
    \ {\n            $result .= \"E\";\n        } elsif($s[i] eq \"f\") {\n      \
    \      $result .= \"F\";\n        } elsif($s[i] eq \"g\") {\n            $result\
    \ .= \"G\";\n        } elsif($s[i] eq \"h\") {\n            $result .= \"H\";\n\
    \        } elsif($s[i] eq \"i\") {\n            $result .= \"I\";\n        } elsif($s[i]\
    \ eq \"j\") {\n            $result .= \"J\";\n        } elsif($s[i] eq \"k\")\
    \ {\n            $result .= \"K\";\n        } elsif($s[i] eq \"l\") {\n      \
    \      $result .= \"L\";\n        } elsif($s[i] eq \"m\") {\n            $result\
    \ .= \"M\";\n        } elsif($s[i] eq \"n\") {\n            $result .= \"N\";\n\
    \        } elsif($s[i] eq \"o\") {\n            $result .= \"O\";\n        } elsif($s[i]\
    \ eq \"p\") {\n            $result .= \"P\";\n        } elsif($s[i] eq \"q\")\
    \ {\n            $result .= \"Q\";\n        } elsif($s[i] eq \"r\") {\n      \
    \      $result .= \"R\";\n        } elsif($s[i] eq \"s\") {\n            $result\
    \ .= \"S\";\n        } elsif($s[i] eq \"t\") {\n            $result .= \"T\";\n\
    \        } elsif($s[i] eq \"u\") {\n            $result .= \"U\";\n        } elsif($s[i]\
    \ eq \"v\") {\n            $result .= \"V\";\n        } elsif($s[i] eq \"w\")\
    \ {\n            $result .= \"W\";\n        } elsif($s[i] eq \"x\") {\n      \
    \      $result .= \"X\";\n        } elsif($s[i] eq \"y\") {\n            $result\
    \ .= \"Y\";\n        } elsif($s[i] eq \"z\") {\n            $result .= \"Z\";\n\
    \        } elsif($s[i] eq \"A\") {\n            $result .= \"a\";\n        } elsif($s[i]\
    \ eq \"B\") {\n            $result .= \"b\";\n        } elsif($s[i] eq \"C\")\
    \ {\n            $result .= \"c\";\n", "    my $result = \"\";\n    \n    foreach\
    \ my $char (split(//, $s)) {\n        my $is_letter = lc($char) eq $char;\n  \
    \      $result .= $is_letter ? uc($char) : $char;\n    }\n    \n    return $result;\n\
    }", "    my @chars = split(//, $s);\n    my $res = \"\";\n    foreach my $char\
    \ (@chars) {\n        if ($char =~ /^[a-z]+$/) {\n            $res .= uc($char);\n\
    \        } else {\n            $res .= $char;\n        }\n    }\n    return $res;\n\
    }", "    $s =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$/i/g;\n    return $s;\n}", " \
    \   my $result = \"\";\n    \n    foreach my $char (split(//,$s)) {\n        if($char\
    \ =~ /[a-z]/i) {\n            $char =~ tr/a-z/A-Z/;\n        }\n        elsif($char\
    \ =~ /[A-Z]/i) {\n            $char =~ tr/A-Z/a-z/;\n        }\n        elsif($char\
    \ =~ /[0-9]/i) {\n            $char =~ tr/0-9/A-Z/;\n        }\n        elsif($char\
    \ =~ /[^a-zA-Z0-9]/) {\n            $char =~ tr/A-Z/a-z/;\n        }\n       \
    \ $result .= $char;\n    }\n    \n    return $result;\n}\n</code>\n<|/ a tags=perl,string,regex\
    \ |>\n<| c |>\nThis doesn't work if there are multiple consecutive uppercase letters.\n\
    <|/ c |>\n<| c |>\n: It does work if there are multiple consecutive uppercase\
    \ letters. Try it yourself.\n<|/ c |>\n<| c |>\n: It does work if there are multiple\
    \ consecutive uppercase letters. Try it yourself. It also works if there are multiple\
    \ consecutive lowercase letters.\n<|/ c |>\n<| c |>\n: It does work if there are\
    \ multiple consecutive uppercase letters. Try it yourself. It also works if there\
    \ are multiple consecutive lowercase letters.\n<|/ c |>\n<| c |>\n: It does work\
    \ if there are multiple consecutive uppercase letters. Try it yourself. It also\
    \ works if there are multiple consecutive lowercase letters.\n<|/ c |>\n<| a tags=perl,string,regex\
    \ |>\n<code>", "    my $result = \"\";\n    \n    foreach my $char (split(//,\
    \ $s)) {\n        if ($char =~ /^[a-z]/i) {\n            $char = $char =~ tr/a-z/A-Z/;\n\
    \        } elsif ($char =~ /^[A-Z]/i) {\n            $char = $char =~ tr/A-Z/a-z/;\n\
    \        } else {\n            $char = $char;\n        }\n        $result .= $char;\n\
    \    }\n    \n    return $result;\n}", "    my $result = \"\";\n    \n    foreach\
    \ my $char (split(//, $s)) {\n        my $is_letter = lc($char) eq $char;\n  \
    \      \n        if ($is_letter) {\n            $result .= uc($char);\n      \
    \  } else {\n            $result .= $char;\n        }\n    }\n    \n    return\
    \ $result;\n}", "    my $result = \"\";\n    \n    foreach my $char (split(//,\
    \ $s)) {\n        my $is_letter = lc($char) eq $char;\n        $result .= $is_letter\
    \ ? uc($char) : $char;\n    }\n    \n    return $result;\n}", "    \n    $s =~\
    \ s/([a-z])/uc($1)/eg;\n    $s =~ s/([A-Z])/lc($1)/eg;\n    $s =~ s/^([A-Z])/lc($1)/eg;\n\
    \    $s =~ s/([A-Z])/uc($1)/eg;\n    \n    return $s;\n}", "    my $result = '';\n\
    \    \n    for(my $i = 0; $i < length($s); $i++) {\n        if($s[i] =~ /[a-z]/)\
    \ {\n            $result .= uc($s[i]);\n        } else {\n            $result\
    \ .= $s[i];\n        }\n    }\n    \n    return $result;\n}", "    my $result\
    \ = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n        if($s[i]\
    \ eq \"A\") {\n            $result .= \"a\";\n        } elsif($s[i] eq \"B\")\
    \ {\n            $result .= \"b\";\n        } elsif($s[i] eq \"C\") {\n      \
    \      $result .= \"c\";\n        } elsif($s[i] eq \"D\") {\n            $result\
    \ .= \"d\";\n        } elsif($s[i] eq \"E\") {\n            $result .= \"e\";\n\
    \        } elsif($s[i] eq \"F\") {\n            $result .= \"f\";\n        } elsif($s[i]\
    \ eq \"G\") {\n            $result .= \"g\";\n        } elsif($s[i] eq \"H\")\
    \ {\n            $result .= \"h\";\n        } elsif($s[i] eq \"I\") {\n      \
    \      $result .= \"i\";\n        } elsif($s[i] eq \"J\") {\n            $result\
    \ .= \"j\";\n        } elsif($s[i] eq \"K\") {\n            $result .= \"k\";\n\
    \        } elsif($s[i] eq \"L\") {\n            $result .= \"l\";\n        } elsif($s[i]\
    \ eq \"M\") {\n            $result .= \"m\";\n        } elsif($s[i] eq \"N\")\
    \ {\n            $result .= \"n\";\n        } elsif($s[i] eq \"O\") {\n      \
    \      $result .= \"o\";\n        } elsif($s[i] eq \"P\") {\n            $result\
    \ .= \"p\";\n        } elsif($s[i] eq \"Q\") {\n            $result .= \"q\";\n\
    \        } elsif($s[i] eq \"R\") {\n            $result .= \"r\";\n        } elsif($s[i]\
    \ eq \"S\") {\n            $result .= \"s\";\n        } elsif($s[i] eq \"T\")\
    \ {\n            $result .= \"t\";\n        } elsif($s[i] eq \"U\") {\n      \
    \      $result .= \"u\";\n        } elsif($s[i] eq \"V\") {\n            $result\
    \ .= \"v\";\n        } elsif($s[i] eq \"W\") {\n            $result .= \"w\";\n\
    \        } elsif($s[i] eq \"X\") {\n            $result .= \"x\";\n        } elsif($s[i]\
    \ eq \"Y\") {\n            $result .= \"y\";\n        } elsif($s[i] eq \"Z\")\
    \ {\n            $result .= \"z\";\n        } elsif($s[i] eq \"a\") {\n      \
    \      $result .= \"A\";\n        } elsif($s[i] eq \"b\") {\n            $result\
    \ .= \"B\";\n        } elsif($s[i] eq \"c\") {\n            $result .= \"C\";\n\
    \        } ", "    my $result = \"\";\n    \n    foreach my $char (split //, $s)\
    \ {\n        my $is_letter = uc $char eq $char;\n        $result .= $is_letter\
    \ ? uc $char : \"$char\";\n    }\n    \n    return $result;\n}", "    my $result\
    \ = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n        if($s[i]\
    \ eq \"a\") {\n            $result .= \"A\";\n        } elsif($s[i] eq \"b\")\
    \ {\n            $result .= \"B\";\n        } elsif($s[i] eq \"c\") {\n      \
    \      $result .= \"C\";\n        } elsif($s[i] eq \"d\") {\n            $result\
    \ .= \"D\";\n        } elsif($s[i] eq \"e\") {\n            $result .= \"E\";\n\
    \        } elsif($s[i] eq \"f\") {\n            $result .= \"F\";\n        } elsif($s[i]\
    \ eq \"g\") {\n            $result .= \"G\";\n        } elsif($s[i] eq \"h\")\
    \ {\n            $result .= \"H\";\n        } elsif($s[i] eq \"i\") {\n      \
    \      $result .= \"I\";\n        } elsif($s[i] eq \"j\") {\n            $result\
    \ .= \"J\";\n        } elsif($s[i] eq \"k\") {\n            $result .= \"K\";\n\
    \        } elsif($s[i] eq \"l\") {\n            $result .= \"L\";\n        } elsif($s[i]\
    \ eq \"m\") {\n            $result .= \"M\";\n        } elsif($s[i] eq \"n\")\
    \ {\n            $result .= \"N\";\n        } elsif($s[i] eq \"o\") {\n      \
    \      $result .= \"O\";\n        } elsif($s[i] eq \"p\") {\n            $result\
    \ .= \"P\";\n        } elsif($s[i] eq \"q\") {\n            $result .= \"Q\";\n\
    \        } elsif($s[i] eq \"r\") {\n            $result .= \"R\";\n        } elsif($s[i]\
    \ eq \"s\") {\n            $result .= \"S\";\n        } elsif($s[i] eq \"t\")\
    \ {\n            $result .= \"T\";\n        } elsif($s[i] eq \"u\") {\n      \
    \      $result .= \"U\";\n        } elsif($s[i] eq \"v\") {\n            $result\
    \ .= \"V\";\n        } elsif($s[i] eq \"w\") {\n            $result .= \"W\";\n\
    \        } elsif($s[i] eq \"x\") {\n            $result .= \"X\";\n        } elsif($s[i]\
    \ eq \"y\") {\n            $result .= \"Y\";\n        } elsif($s[i] eq \"z\")\
    \ {\n            $result .= \"Z\";\n        } elsif($s[i] eq \"A\") {\n      \
    \      $result .= \"a\";\n        } elsif($s[i] eq \"B\") {\n            $result\
    \ .= \"b\";\n        } elsif($s[i] eq \"C\") {\n            $result .= \"c\";\n",
  "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n   \
    \     my $c = substr($s, $i, 1);\n        \n        if($c =~ /^[a-z]/) {\n   \
    \         $result .= uc($c);\n        } else {\n            $result .= $c;\n \
    \       }\n    }\n    \n    return $result;\n}", "    my @chars = split(//, $s);\n\
    \    my $res = \"\";\n    foreach my $char (@chars) {\n        if ($char =~ /^[a-z]/i)\
    \ {\n            $res .= uc($char);\n        } else {\n            $res .= $char;\n\
    \        }\n    }\n    return $res;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't work. Try it on \"abc\" for example. It returns \"cba\".\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try it on \"abc\" for example. It returns \"cba\".\n\
    <|/ c |>\n<| c |>\nI tested it on \"abc\" and it returns \"cba\"\n<|/ c |>\n<|\
    \ c |>\nI tested it on \"abc\" and it returns \"cba\"\n<|/ c |>\n<| c |>\nI tested\
    \ it on \"abc\" and it returns \"cba\"\n<|/ c |>\n<| a tags=perl,string,regex\
    \ |>\n<code>\nuse strict;\nuse warnings;", "    my $result = \"\";\n    \n   \
    \ foreach my $char (split //, $s) {\n        my $case = $char =~ /[a-z]/i ? \"\
    upper\" : \"lower\";\n        $char =~ s/[a-z]/$case/i;\n        $result .= $char;\n\
    \    }\n    \n    return $result;\n}", "    my $result = '';\n    my $i = 0;\n\
    \    while($i < length($s)) {\n        if($s[i] =~ /[a-z]/) {\n            $result\
    \ .= uc(substr($s, $i, 1));\n            $i += 1;\n        } else {\n        \
    \    $result .= substr($s, $i, 1);\n            $i += 1;\n        }\n    }\n \
    \   return $result;\n}\n</code>\n<|/ a tags=perl,string,algorithm |>\n<| c |>\n\
    This doesn't work if the string contains any non-letters.\n<|/ c |>\n<| c |>\n\
    I added a solution that doesn't require a regex\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if the string contains any non-letters.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't require a regex\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    my $result\
    \ = \"\";\n    my $i = 0;\n    while($i < length($s)) {\n        if($s[i] eq \"\
    A\") {\n            $result .= \"a\";\n        }\n        elsif($s[i] eq \"B\"\
    ) {\n            $result .= \"b\";\n        }\n        elsif($s[i] eq \"C\") {\n\
    \            $result .= \"c\";\n        }\n        elsif($s[i] eq \"D\") {\n \
    \           $result .= \"d\";\n        }\n        elsif($s[i] eq \"E\") {\n  \
    \          $result .= \"e\";\n        }\n        elsif($s[i] eq \"F\") {\n   \
    \         $result .= \"f\";\n        }\n        elsif($s[i] eq \"G\") {\n    \
    \        $result .= \"g\";\n        }\n        elsif($s[i] eq \"H\") {\n     \
    \       $result .= \"h\";\n        }\n        elsif($s[i] eq \"I\") {\n      \
    \      $result .= \"i\";\n        }\n        elsif($s[i] eq \"J\") {\n       \
    \     $result .= \"j\";\n        }\n        elsif($s[i] eq \"K\") {\n        \
    \    $result .= \"k\";\n        }\n        elsif($s[i] eq \"L\") {\n         \
    \   $result .= \"l\";\n        }\n        elsif($s[i] eq \"M\") {\n          \
    \  $result .= \"m\";\n        }\n        elsif($s[i] eq \"N\") {\n           \
    \ $result .= \"n\";\n        }\n        elsif($s[i] eq \"O\") {\n            $result\
    \ .= \"o\";\n        }\n        elsif($s[i] eq \"P\") {\n            $result .=\
    \ \"p\";\n        }\n        elsif($s[i] eq \"Q\") {\n            $result .= \"\
    q\";\n        }\n        elsif($s[i] eq \"R\") {\n            $result .= \"r\"\
    ;\n        }\n        elsif($s[i] eq \"S\") {\n            $result .= \"s\";\n\
    \        }\n        elsif($s[i] eq \"T\") {\n            $result .= \"t\";\n \
    \       }\n        elsif($s[i] eq \"U\") {\n            $result .= \"u\";\n  \
    \      }\n        elsif($s[i] eq \"V\") {\n            $result .= \"v\";\n   \
    \     }\n        elsif($s[i] eq \"W\") {\n            $result .= \"w\";\n    \
    \    }\n        elsif($s[i] eq \"X\") {\n            $result .= \"x\";\n     \
    \   }\n        elsif($s[i] eq \"Y\") {\n            $result .= \"y\";\n      \
    \  }\n        elsif($s[i] eq \"Z\") {\n            $result .= \"z\";\n       \
    \ }\n        elsif($", "    \n    my $result = \"\";\n    \n    foreach my $char\
    \ (split(//, $s)) {\n        my $is_letter = lc($char) eq $char;\n        $result\
    \ .= $is_letter ? uc($char) : $char;\n    }\n    \n    return $result;\n}", " \
    \   my $result = \"\";\n    \n    foreach my $char (split(//, $s)) {\n       \
    \ if ($char =~ /[a-z]/) {\n            $char =~ tr/a-z/A-Z/;\n        }\n    \
    \    elsif ($char =~ /[A-Z]/) {\n            $char =~ tr/A-Z/a-z/;\n        }\n\
    \        $result .= $char;\n    }\n    \n    return $result;\n}", "    my $result\
    \ = \"\";\n    \n    foreach my $char (split(//, $s)) {\n        my $case = $char\
    \ =~ /[a-z]/i ? \"upper\" : \"lower\";\n        $result .= $char eq $char ? $char\
    \ : \"$char\";\n    }\n    \n    return $result;\n}", "    my $result = \"\";\n\
    \    \n    foreach my $char (split(//, $s)) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            $result .= uc($char);\n        }\n        else {\n          \
    \  $result .= $char;\n        }\n    }\n    \n    return $result;\n}\n</code>\n\
    <|/ a tags=perl,string,algorithm |>\n<| c |>\nThis doesn't work for \"abCdEfGhIjKlM\"\
    \n<|/ c |>\n<| c |>\nIt does. I tested it before posting it\n<|/ c |>\n<| c |>\n\
    It doesn't work for \"abCdEfGhIjKlM\" because you split on `//` which means split\
    \ on all characters, including newlines. You need `split //` which means split\
    \ on all whitespace.\n<|/ c |>\n<| c |>\nI tested it before posting it\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work for \"abCdEfGhIjKlM\" because you split on `//`\
    \ which means split on all characters, including newlines. You need `split //`\
    \ which means split on all whitespace.\n<|/ c |>\n<| a tags=perl,string,algorithm\
    \ |>\n<code>", "    my $result = \"\";\n    my $i = 0;\n    while($i < length($s))\
    \ {\n        if($s[i] eq \"a\") {\n            $result .= \"A\";\n           \
    \ $i++;\n        } elsif($s[i] eq \"b\") {\n            $result .= \"B\";\n  \
    \          $i++;\n        } elsif($s[i] eq \"c\") {\n            $result .= \"\
    C\";\n            $i++;\n        } elsif($s[i] eq \"d\") {\n            $result\
    \ .= \"D\";\n            $i++;\n        } elsif($s[i] eq \"e\") {\n          \
    \  $result .= \"E\";\n            $i++;\n        } elsif($s[i] eq \"f\") {\n \
    \           $result .= \"F\";\n            $i++;\n        } elsif($s[i] eq \"\
    g\") {\n            $result .= \"G\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"h\") {\n            $result .= \"H\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"i\") {\n            $result .= \"I\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"j\") {\n            $result .= \"J\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"k\") {\n            $result .= \"K\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"l\") {\n            $result .= \"L\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"m\") {\n            $result .= \"M\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"n\") {\n            $result .= \"N\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"o\") {\n            $result .= \"O\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"p\") {\n            $result .= \"P\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"q\") {\n            $result .= \"Q\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"r\") {\n            $result .= \"R\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"s\") {\n            $result .= \"S\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"t\") {\n            $result .= \"T\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"u\") {\n            $result .= \"U\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"v\") {\n            $result .= \"V\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"w\") {\n            $result .= \"W\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"x\") {\n            $result .= \"", "    my $result = \"\";\n    \n   \
    \ foreach my $char (split(//, $s)) {\n        my $cased = uc($char);\n       \
    \ \n        if ($cased eq $char) {\n            $result .= $char;\n        }\n\
    \        else {\n            $result .= $cased;\n        }\n    }\n    \n    return\
    \ $result;\n}", "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        my $c = substr($s, $i, 1);\n        if($c =~ /^[a-z]/i) {\n\
    \            $result .= uc($c);\n        } else {\n            $result .= $c;\n\
    \        }\n    }\n    \n    return $result;\n}", "    my $result = '';\n    \n\
    \    foreach my $char (split(//,$s)) {\n        if($char =~ /[a-z]/i) {\n    \
    \        $result .= uc($char);\n        } else {\n            $result .= $char;\n\
    \        }\n    }\n    \n    return $result;\n}\n</code>\n<|/ a tags=perl,string,reverse\
    \ |>\n<| c |>\nThis doesn't work if the string contains only lowercase letters.\n\
    <|/ c |>\n<| c |>\nI didn't say it wouldn't. I said it wouldn't.\n<|/ c |>\n<|\
    \ c |>\nI didn't say it wouldn't. I said it wouldn't. :)\n<|/ c |>\n<| c |>\n\
    I didn't say it wouldn't. I said it wouldn't. :)\n<|/ c |>\n<| c |>\nI didn't\
    \ say it wouldn't. I said it wouldn't. :)\n<|/ c |>\n<| a tags=perl,string,reverse\
    \ |>\n<code>", "    my @chars = split(//, $s);\n    my $res = \"\";\n    foreach\
    \ my $char (@chars) {\n        if ($char =~ /[a-z]/i) {\n            $char =~\
    \ tr/a-z/A-Z/;\n        }\n        elsif ($char =~ /[A-Z]/i) {\n            $char\
    \ =~ tr/A-Z/a-z/;\n        }\n        $res .= $char;\n    }\n    return $res;\n\
    }", "    my $result = \"\";\n    \n    foreach my $char (split(//, $s)) {\n  \
    \      my $is_letter = lc($char) eq $char;\n        \n        if ($is_letter)\
    \ {\n            $char =~ tr/a-zA-Z/A-Z/;\n        }\n        \n        $result\
    \ .= $char;\n    }\n    \n    return $result;\n}", "    \n    my $reversed = \"\
    \";\n    \n    foreach my $char (split(//, $s)) {\n        if ($char =~ /[a-z]/)\
    \ {\n            $reversed .= uc($char);\n        } else {\n            $reversed\
    \ .= $char;\n        }\n    }\n    \n    return $reversed;\n}\n</code>\n<|/ a\
    \ tags=perl,string,reverse |>\n<| c |>\nI like your solution. Nice and simple.\
    \ :)\n<|/ c |>\n<| c |>\nI like your solution. Nice and simple. :)\n<|/ c |>\n\
    <| a tags=perl,string,reverse |>\n<code>\nmy $string = \"hello\";\nmy $reversed\
    \ = reverse $string;\nprint $reversed;\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This doesn't answer the question. OP wants to reverse the case of the letters.\n\
    <|/ c |>\n<| c |>\nThis doesn't answer the question. OP wants to reverse the case\
    \ of the letters.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nmy $string = \"hello\"\
    ;\nmy $reversed = reverse $string;\nprint $reversed;\n</code>\n<|/ a tags=perl,string,reverse\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to reverse the case\
    \ of the letters.\n<|/ c |>\n<| a tags=perl,string,reverse |>\n<code>\nmy $string\
    \ = \"hello\";\nmy $reversed = reverse $string;\nprint $reversed;\n</code>\n<|/\
    \ a dscore=4 |>\n<| c |>\nThis doesn't answer the question. OP wants to reverse\
    \ the case of the letters.\n<|/ c |>\n<| a tags=perl,string,reverse |>\n<code>\n\
    my $string = \"hello\";\nmy $reversed = reverse $string;\nprint $reversed;\n</code>\n\
    <|/ a dscore=4 |>\n<| a tags=perl,string,reverse |>\n<code>\nmy $string = \"hello\"\
    ;\nmy $reversed = reverse $string;\nprint $reversed;\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=perl,string,reverse |>\n<code>\nmy $string = \"hello\";\nmy $reversed\
    \ = reverse $string;\nprint $reversed;\n</code>\n<|/ a dscore=4 |>\n<| a tags=perl,string,reverse\
    \ |>\n<code>\nmy $string = \"hello\";\nmy $reversed = reverse $string;\nprint\
    \ $reversed;\n</code>\n<|/ a dscore=3 |>\n<| a tags=perl,string,reverse |>", " \
    \   my $result = \"\";\n    \n    foreach my $char (split(//, $s)) {\n       \
    \ my $case = uc($char);\n        $case eq $char ? $result .= $char : $result .=\
    \ $case;\n    }\n    \n    return $result;\n}", "    my $res = \"\";\n    foreach\
    \ my $char (split //, $s) {\n        my $case = lc($char);\n        if ($case\
    \ eq $char) {\n            $res .= $case;\n        } else {\n            $res\
    \ .= $char;\n        }\n    }\n    return $res;\n}", "    my $result = \"\";\n\
    \    \n    foreach my $char (split //, $s) {\n        my $is_letter = uc $char\
    \ eq $char;\n        $result .= $is_letter ? uc $char : $char;\n    }\n    \n\
    \    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>",
  "    $s =~ s/^([a-z])/uc($1)/ge;\n    $s =~ s/^([A-Z])/lc($1)/ge;\n    $s =~ s/^([a-z])/uc($1)/ge;\n\
    \    $s =~ s/^([A-Z])/lc($1)/ge;\n    return $s;\n}", "    \n    $s =~ s/([a-z])/uc($1)/eg;\n\
    \    $s =~ s/([A-Z])/lc($1)/eg;\n    $s =~ s/^(.)/uc($1)/eg;\n    $s =~ s/(.)$/lc($1)/eg;\n\
    \    \n    return $s;\n}", "    my $result = \"\";\n    \n    foreach my $char\
    \ (split //, $s) {\n        my $is_letter = uc($char) eq $char;\n        \n  \
    \      if ($is_letter) {\n            $char =~ tr/a-zA-Z/A-Z/;\n        }\n  \
    \      \n        $result .= $char;\n    }\n    \n    return $result;\n}", "  \
    \  my $result = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n   \
    \     if($s[i] =~ /[a-z]/) {\n            $result .= uc($s[i]);\n        } else\
    \ {\n            $result .= $s[i];\n        }\n    }\n    \n    return $result;\n\
    }\n</code>\n<|/ a tags=perl,string |>\n<| c |>\nThank you for providing your solution.\
    \ Your solution works perfectly for me. Thank you very much\n<|/ c |>\n<| c |>\n\
    This solution does not work for `solve(\"AaBbCcDd\")`\n<|/ c |>\n<| c |>\n, thank\
    \ you for pointing that out. I've updated the code accordingly.\n<|/ c |>\n<|\
    \ c |>\n, thank you for pointing that out. I've updated the code accordingly.\n\
    <|/ c |>\n<| a tags=perl,string |>\n<code>", "    my $result = \"\";\n    my $i\
    \ = 0;\n    \n    while($i < length($s)) {\n        if($s[i] eq \" \") {\n   \
    \         $result .= \" \";\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"A\") {\n            $result .= \"a\";\n            $i++;\n        }\n \
    \       elsif($s[i] eq \"B\") {\n            $result .= \"b\";\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"C\") {\n            $result .= \"c\";\n \
    \           $i++;\n        }\n        elsif($s[i] eq \"D\") {\n            $result\
    \ .= \"d\";\n            $i++;\n        }\n        elsif($s[i] eq \"E\") {\n \
    \           $result .= \"e\";\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"F\") {\n            $result .= \"f\";\n            $i++;\n        }\n \
    \       elsif($s[i] eq \"G\") {\n            $result .= \"g\";\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"H\") {\n            $result .= \"h\";\n \
    \           $i++;\n        }\n        elsif($s[i] eq \"I\") {\n            $result\
    \ .= \"i\";\n            $i++;\n        }\n        elsif($s[i] eq \"J\") {\n \
    \           $result .= \"j\";\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"K\") {\n            $result .= \"k\";\n            $i++;\n        }\n \
    \       elsif($s[i] eq \"L\") {\n            $result .= \"l\";\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"M\") {\n            $result .= \"m\";\n \
    \           $i++;\n        }\n        elsif($s[i] eq \"N\") {\n            $result\
    \ .= \"n\";\n            $i++;\n        }\n        elsif($s[i] eq \"O\") {\n \
    \           $result .= \"o\";\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"P\") {\n            $result .= \"p\";\n            $i++;\n        }\n \
    \       elsif($s[i] eq \"Q\") {\n            $result .= \"q\";\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"R\") {\n            $result .= \"r\";\n \
    \           $i++;\n        }\n        elsif($s[i] eq \"S\") {\n            $result\
    \ .= \"s\";\n            $i++;\n        }\n        elsif($s[i] eq \"T\") {\n \
    \           $result .= \"t\";\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"U\") {\n            $result .", "    my $res = \"\";\n    \n    foreach\
    \ my $char (split(//, $s)) {\n        my $cased = uc($char);\n        $res .=\
    \ $char if ($cased eq $char);\n        $res .= $char if ($cased ne $char);\n \
    \   }\n    \n    return $res;\n}", "    my $result = \"\";\n    \n    foreach\
    \ my $char (split //, $s) {\n        my $is_letter = lc($char) eq $char;\n   \
    \     \n        if ($is_letter) {\n            $result .= uc($char);\n       \
    \ } else {\n            $result .= $char;\n        }\n    }\n    \n    return\
    \ $result;\n}", "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        my $c = substr($s, $i, 1);\n        if($c =~ /[a-z]/i) {\n\
    \            $result .= uc($c);\n        } else {\n            $result .= $c;\n\
    \        }\n    }\n    \n    if(length($result) == 0) {\n        $result = uc($s);\n\
    \    }\n    \n    return $result;\n}", "    my $result = \"\";\n    \n    foreach\
    \ my $char (split(//, $s)) {\n        my $case = uc($char);\n        \n      \
    \  if ($case eq $char) {\n            $result .= $char;\n        } else {\n  \
    \          $result .= $case;\n        }\n    }\n    \n    return $result;\n}",
  "    my $result = \"\";\n    \n    foreach my $char (split(//, $s)) {\n        if\
    \ ($char =~ /^[a-z]/i) {\n            $result .= uc($char);\n        } else {\n\
    \            $result .= $char;\n        }\n    }\n    \n    return $result;\n}",
  "    my $res = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n      \
    \  my $c = substr($s, $i, 1);\n        if($c =~ /[a-z]/) {\n            $c =~\
    \ tr/a-z/A-Z/;\n        }\n        $res .= $c;\n    }\n    \n    if(length($res)\
    \ == 0) {\n        $res =~ tr/A-Z/a-z/;\n    }\n    \n    return $res;\n}", " \
    \   my $result = \"\";\n    my $i = 0;\n    while($i < length($s)) {\n       \
    \ if($s[i] eq \"a\") {\n            $result .= \"A\";\n            $i++;\n   \
    \     } elsif($s[i] eq \"b\") {\n            $result .= \"B\";\n            $i++;\n\
    \        } elsif($s[i] eq \"c\") {\n            $result .= \"C\";\n          \
    \  $i++;\n        } elsif($s[i] eq \"d\") {\n            $result .= \"D\";\n \
    \           $i++;\n        } elsif($s[i] eq \"e\") {\n            $result .= \"\
    E\";\n            $i++;\n        } elsif($s[i] eq \"f\") {\n            $result\
    \ .= \"F\";\n            $i++;\n        } elsif($s[i] eq \"g\") {\n          \
    \  $result .= \"G\";\n            $i++;\n        } elsif($s[i] eq \"h\") {\n \
    \           $result .= \"H\";\n            $i++;\n        } elsif($s[i] eq \"\
    i\") {\n            $result .= \"I\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"j\") {\n            $result .= \"J\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"k\") {\n            $result .= \"K\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"l\") {\n            $result .= \"L\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"m\") {\n            $result .= \"M\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"n\") {\n            $result .= \"N\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"o\") {\n            $result .= \"O\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"p\") {\n            $result .= \"P\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"q\") {\n            $result .= \"Q\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"r\") {\n            $result .= \"R\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"s\") {\n            $result .= \"S\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"t\") {\n            $result .= \"T\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"u\") {\n            $result .= \"U\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"v\") {\n            $result .= \"V\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"w\") {\n            $result .= \"W\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"x\") {\n            $result .= \"", "    \n    my $result = \"\";\n   \
    \ \n    foreach my $char (split(//, $s)) {\n        \n        if ($char =~ /[a-z]/i)\
    \ {\n            $char =~ tr/a-z/A-Z/;\n        }\n        \n        $result .=\
    \ $char;\n    }\n    \n    return $result;\n}", "    my $res = \"\";\n    \n \
    \   foreach my $char (split(//, $s)) {\n        my $case = uc($char);\n      \
    \  if ($case eq $char) {\n            $res .= $char;\n        } else {\n     \
    \       $res .= $case;\n        }\n    }\n    \n    return $res;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    \n    my $result = \"\";\n\
    \    \n    foreach my $char (split(//, $s)) {\n        my $is_letter = lc($char)\
    \ eq $char;\n        \n        if ($is_letter) {\n            $char =~ tr/a-z/A-Z/;\n\
    \        }\n        \n        $result .= $char;\n    }\n    \n    return $result;\n\
    }", "    $s =~ s/^([a-z])/uc($1)/eg;\n    $s =~ s/([a-z])/uc($1)/eg;\n    $s =~\
    \ s/^([A-Z])/uc($1)/eg;\n    $s =~ s/([A-Z])/uc($1)/eg;\n    $s =~ s/^([A-Z])/uc($1)/eg;\n\
    \    $s =~ s/([A-Z])/uc($1)/eg;\n    $s =~ s/^([A-Z])/uc($1)/eg;\n    $s =~ s/([A-Z])/uc($1)/eg;\n\
    \    $s =~ s/^([A-Z])/uc($1)/eg;\n    $s =~ s/([A-Z])/uc($1)/eg;\n    $s =~ s/^([A-Z])/uc($1)/eg;\n\
    \    $s =~ s/([A-Z])/uc($1)/eg;\n    $s =~ s/^([A-Z])/uc($1)/eg;\n    $s =~ s/([A-Z])/uc($1)/eg;\n\
    \    $s =~ s/^([A-Z])/uc($1)/eg;\n    $s =~ s/([A-Z])/uc($1)/eg;\n    $s =~ s/^([A-Z])/uc($1)/eg;\n\
    \    $s =~ s/([A-Z])/uc($1)/eg;\n    $s =~ s/^([A-Z])/uc($1)/eg;\n    $s =~ s/([A-Z])/uc($1)/eg;\n\
    \    $s =~ s/^([A-Z])/uc($1)/eg;\n    $s =~ s/([A-Z])/uc($1)/eg;\n    $s =~ s/^([A-Z])/uc($1)/eg;\n\
    \    $s =~ s/([A-Z])/uc($1)/eg;\n    $s =~ s/^([A-Z])/uc($1)/eg;\n    $s =~ s/([A-Z])/uc($1)/eg;\n\
    \    $s =~ s/^([A-Z])/uc($1)/eg;\n    $s =~ s/([A-Z])/uc($1)/eg;\n    $s =~ s/^([A-Z])/uc($1)/eg;\n\
    \    $s =~ s/([A-Z])/uc($1)/eg;\n    $s =~ s/^([A-Z])/uc($1)/eg;\n", "    my $result\
    \ = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n        my $letter\
    \ = $s[$i];\n        if($letter =~ /[a-z]/i) {\n            $letter =~ tr/a-z/A-Z/;\n\
    \        }\n        elsif($letter =~ /[A-Z]/i) {\n            $letter =~ tr/A-Z/a-z/;\n\
    \        }\n        elsif($letter =~ /[0-9]/i) {\n            $letter =~ tr/0-9/A-Z/;\n\
    \        }\n        elsif($letter =~ /[^a-z]/i) {\n            $letter =~ tr/A-Z/a-z/;\n\
    \        }\n        $result .= $letter;\n    }\n    \n    return $result;\n}",
  "    my @chars = split(//, $s);\n    my $res = \"\";\n    foreach my $char (@chars)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $res .= uc($char);\n       \
    \ } else {\n            $res .= $char;\n        }\n    }\n    return $res;\n}",
  "    \n    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n\
    \        my $c = substr($s, $i, 1);\n        if($c =~ /[a-z]/) {\n           \
    \ $result .= uc($c);\n        } else {\n            $result .= $c;\n        }\n\
    \    }\n    \n    return $result;\n}", "    my $res = \"\";\n    \n    for(my\
    \ $i = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n     \
    \   if($c =~ /[a-z]/) {\n            $res .= uc($c);\n        } else {\n     \
    \       $res .= $c;\n        }\n    }\n    \n    return $res;\n}", "    my @chars\
    \ = split(//, $s);\n    my $res = \"\";\n    foreach my $char (@chars) {\n   \
    \     my $c = $char;\n        if ($c =~ /[a-z]/) {\n            $c =~ tr/a-z/A-Z/;\n\
    \        }\n        $res .= $c;\n    }\n    return $res;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=perl,regex |>\n<code>", "    my $result = \"\";\n    \n    for(my\
    \ $i = 0; $i < length($s); $i++) {\n        if($s[i] eq \"A\") {\n           \
    \ $result .= \"B\";\n        } elsif($s[i] eq \"B\") {\n            $result .=\
    \ \"A\";\n        } elsif($s[i] eq \"C\") {\n            $result .= \"D\";\n \
    \       } elsif($s[i] eq \"D\") {\n            $result .= \"C\";\n        } elsif($s[i]\
    \ eq \"E\") {\n            $result .= \"F\";\n        } elsif($s[i] eq \"F\")\
    \ {\n            $result .= \"E\";\n        } elsif($s[i] eq \"G\") {\n      \
    \      $result .= \"H\";\n        } elsif($s[i] eq \"H\") {\n            $result\
    \ .= \"G\";\n        } elsif($s[i] eq \"I\") {\n            $result .= \"J\";\n\
    \        } elsif($s[i] eq \"J\") {\n            $result .= \"I\";\n        } elsif($s[i]\
    \ eq \"K\") {\n            $result .= \"L\";\n        } elsif($s[i] eq \"L\")\
    \ {\n            $result .= \"K\";\n        } elsif($s[i] eq \"M\") {\n      \
    \      $result .= \"N\";\n        } elsif($s[i] eq \"N\") {\n            $result\
    \ .= \"M\";\n        } elsif($s[i] eq \"O\") {\n            $result .= \"P\";\n\
    \        } elsif($s[i] eq \"P\") {\n            $result .= \"O\";\n        } elsif($s[i]\
    \ eq \"Q\") {\n            $result .= \"R\";\n        } elsif($s[i] eq \"R\")\
    \ {\n            $result .= \"Q\";\n        } elsif($s[i] eq \"S\") {\n      \
    \      $result .= \"T\";\n        } elsif($s[i] eq \"T\") {\n            $result\
    \ .= \"S\";\n        } elsif($s[i] eq \"U\") {\n            $result .= \"V\";\n\
    \        } elsif($s[i] eq \"V\") {\n            $result .= \"U\";\n        } elsif($s[i]\
    \ eq \"W\") {\n            $result .= \"X\";\n        } elsif($s[i] eq \"X\")\
    \ {\n            $result .= \"W\";\n        } elsif($s[i] eq \"Y\") {\n      \
    \      $result .= \"Z\";\n        } elsif($s[i] eq \"Z\") {\n            $result\
    \ .= \"Y\";\n        } elsif($s[i] eq \"a\") {\n            $result .= \"b\";\n\
    \        } elsif($s[i] eq \"b\") {\n            $result .= \"a\";\n        } elsif($s[i]\
    \ eq \"c\") {\n            $result .= \"d\";\n", "    my $result = \"\";\n   \
    \ \n    for(my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i,\
    \ 1);\n        if($c =~ /^[a-z]/i) {\n            $result .= uc($c);\n       \
    \ } else {\n            $result .= $c;\n        }\n    }\n    \n    return $result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if the string contains\
    \ no letters.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require a regex\n\
    <|/ c |>\n<| c |>\nThe regex is unnecessary, you can just use `index` instead\
    \ of `find`.\n<|/ c |>\n<| c |>\nI agree that `index` is better, but I wanted\
    \ to show how `find` works.\n<|/ c |>\n<| a tags=perl,string,reverse |>\n<code>",
  "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n   \
    \     if($s[i] eq \"A\") {\n            $result .= \"B\";\n        } elsif($s[i]\
    \ eq \"B\") {\n            $result .= \"A\";\n        } elsif($s[i] eq \"a\")\
    \ {\n            $result .= \"b\";\n        } elsif($s[i] eq \"b\") {\n      \
    \      $result .= \"a\";\n        } else {\n            $result .= $s[i];\n  \
    \      }\n    }\n    \n    return $result;\n}", "    my $res = \"\";\n    my $i\
    \ = 0;\n    while($i < length($s)) {\n        if($s[i] eq \"A\") {\n         \
    \   $res .= \"a\";\n            $i++;\n        } elsif($s[i] eq \"B\") {\n   \
    \         $res .= \"b\";\n            $i++;\n        } elsif($s[i] eq \"C\") {\n\
    \            $res .= \"c\";\n            $i++;\n        } elsif($s[i] eq \"D\"\
    ) {\n            $res .= \"d\";\n            $i++;\n        } elsif($s[i] eq \"\
    E\") {\n            $res .= \"e\";\n            $i++;\n        } elsif($s[i] eq\
    \ \"F\") {\n            $res .= \"f\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"G\") {\n            $res .= \"g\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"H\") {\n            $res .= \"h\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"I\") {\n            $res .= \"i\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"J\") {\n            $res .= \"j\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"K\") {\n            $res .= \"k\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"L\") {\n            $res .= \"l\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"M\") {\n            $res .= \"m\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"N\") {\n            $res .= \"n\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"O\") {\n            $res .= \"o\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"P\") {\n            $res .= \"p\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"Q\") {\n            $res .= \"q\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"R\") {\n            $res .= \"r\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"S\") {\n            $res .= \"s\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"T\") {\n            $res .= \"t\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"U\") {\n            $res .= \"u\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"V\") {\n            $res .= \"v\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"W\") {\n            $res .= \"w\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"X\") {\n            $res .= \"x", "    my @chars = split(//, $s);\n   \
    \ my $res = \"\";\n    foreach my $char (@chars) {\n        my $lower = uc($char);\n\
    \        my $upper = lc($char);\n        if ($lower eq $char) {\n            $res\
    \ .= $upper;\n        } elsif ($upper eq $char) {\n            $res .= $lower;\n\
    \        } else {\n            $res .= $char;\n        }\n    }\n    return $res;\n\
    }\n</code>\n<|/ a tags=perl,string |>\n<| a tags=perl,string |>\n<code>", "  \
    \  \n    my $res = $s;\n    \n    foreach my $char (split //, $s) {\n        my\
    \ $lower = uc($char);\n        my $upper = lc($char);\n        \n        if ($lower\
    \ eq $char) {\n            $res =~ s/$lower/$upper/g;\n        } elsif ($upper\
    \ eq $char) {\n            $res =~ s/$upper/$lower/g;\n        } else {\n    \
    \        $res =~ s/$char/$char/g;\n        }\n    }\n    \n    return $res;\n}",
  "    my $res = \"\";\n    \n    foreach my $char (split //, $s) {\n        my $is_letter\
    \ = lc $char eq $char;\n        \n        if ($is_letter) {\n            $char\
    \ =~ tr/a-z/A-Z/;\n        }\n        \n        $res .= $char;\n    }\n    \n\
    \    return $res;\n}", "    my $result = \"\";\n    my $i = 0;\n    while($i <\
    \ length($s)) {\n        if($s[i] =~ /^[a-zA-Z]/) {\n            $result .= uc($s[$i]);\n\
    \        } else {\n            $result .= $s[$i];\n        }\n        $i++;\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `\"A\"`\n<|/ c |>\n<| c |>\nThanks for pointing out. Updated\
    \ the answer.\n<|/ c |>\n<| a tags=perl,string,reverse |>\n<code>", "    my $result\
    \ = \"\";\n    \n    foreach my $char (split //, $s) {\n        my $case = $char\
    \ =~ /[a-z]/i ? 1 : 0;\n        $result .= $case == 1 ? uc($char) : $char;\n \
    \   }\n    \n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI like\
    \ the idea of using a hash to reverse the case, but this doesn't work for strings\
    \ with no letters. For example, `solve(\"ab\")` returns `\"ba\"`, but should return\
    \ `\"ab\"`.\n<|/ c |>\n<| c |>\nI thought about that too, but I thought that if\
    \ there are no letters, then the string should be returned unchanged. So I thought\
    \ that if there are no letters, then the string should be returned unchanged.\
    \ But you are right, if the string contains no letters, then the string should\
    \ be returned unchanged. I'll edit the answer to include that case.\n<|/ c |>\n\
    <| c |>\nI edited the answer to include that case. Thanks for pointing it out.\n\
    <|/ c |>\n<| c |>\nI added a more efficient solution that doesn't use any hashing.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    \n    my $result = \"\";\n    \n   \
    \ foreach my $char (split(//, $s)) {\n        my $is_letter = lc($char) eq $char;\n\
    \        \n        if ($is_letter) {\n            $char =~ tr/a-zA-Z/A-Z/;\n \
    \       } else {\n            $char =~ tr/a-zA-Z/a-z/;\n        }\n        \n\
    \        $result .= $char;\n    }\n    \n    return $result;\n}", "    \n    my\
    \ $reversed = \"\";\n    \n    foreach my $char (split(//, $s)) {\n        if\
    \ ($char =~ /^[a-z]/i) {\n            $reversed .= uc($char);\n        } else\
    \ {\n            $reversed .= $char;\n        }\n    }\n    \n    return $reversed;\n\
    }", "    my $result = \"\";\n    my $i = 0;\n    while($i < length($s)) {\n  \
    \      if($s[i] =~ /^[a-z]/i) {\n            $result .= uc($s[i]);\n        }\
    \ else {\n            $result .= $s[i];\n        }\n        $i++;\n    }\n   \
    \ return $result;\n}", "    my $result = \"\";\n    \n    foreach my $char (split(//,\
    \ $s)) {\n        my $case = uc($char);\n        if ($case eq $char) {\n     \
    \       $result .= $case;\n        } else {\n            $result .= $char;\n \
    \       }\n    }\n    \n    return $result;\n}", "    my $result = \"\";\n   \
    \ \n    foreach my $char (split(//, $s)) {\n        if ($char =~ /[a-z]/i) {\n\
    \            $char =~ tr/a-z/A-Z/;\n        }\n        else {\n            $char\
    \ =~ tr/A-Z/a-z/;\n        }\n        $result .= $char;\n    }\n    \n    return\
    \ $result;\n}", "    my $res = \"\";\n    \n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        my $c = substr($s, $i, 1);\n        if($c =~ /[a-z]/) {\n \
    \           $res .= uc($c);\n        } else {\n            $res .= $c;\n     \
    \   }\n    }\n    \n    return $res;\n}", "    my $result = \"\";\n    \n    foreach\
    \ my $char (split(//, $s)) {\n        if ($char =~ /[a-z]/) {\n            $char\
    \ =~ tr/a-z/A-Z/;\n        }\n        elsif ($char =~ /[A-Z]/) {\n           \
    \ $char =~ tr/A-Z/a-z/;\n        }\n        $result .= $char;\n    }\n    \n \
    \   return $result;\n}", "    my $result = \"\";\n    \n    foreach my $char (split\
    \ //, $s) {\n        my $is_letter = lc($char) eq $char;\n        \n        if\
    \ ($is_letter) {\n            $char =~ tr/a-z/A-Z/;\n        }\n        \n   \
    \     $result .= $char;\n    }\n    \n    return $result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=perl,regex |>\n<code>", "    my $result = \"\";\n    \n    foreach\
    \ my $char (split(//, $s)) {\n        my $is_letter = substr($char, 0, 1) =~ /[a-z]/i;\n\
    \        \n        if ($is_letter) {\n            $result .= uc(substr($char,\
    \ 0, 1)) . substr($char, 1);\n        } else {\n            $result .= $char;\n\
    \        }\n    }\n    \n    return $result;\n}", "    my $result = \"\";\n  \
    \  \n    for(my $i = 0; $i < length($s); $i++) {\n        if($s[i] eq \"A\") {\n\
    \            $result .= \"B\";\n        } elsif($s[i] eq \"B\") {\n          \
    \  $result .= \"A\";\n        } else {\n            $result .= $s[i];\n      \
    \  }\n    }\n    \n    return $result;\n}\n</code>\n<|/ a tags=perl,string,reverse\
    \ |>\n<| c |>\nI like this solution, but I wonder if it can be done without using\
    \ any loops. I guess it can, but I wonder if it can be done without using any\
    \ loops.\n<|/ c |>\n<| c |>\nI guess it can, but I wonder if it can be done without\
    \ using any loops.\n<|/ c |>\n<| c |>\nI guess it can, but I wonder if it can\
    \ be done without using any loops.\n<|/ c |>\n<| c |>\nI guess it can, but I wonder\
    \ if it can be done without using any loops.\n<|/ c |>\n<| c |>\nI guess it can,\
    \ but I wonder if it can be done without using any loops.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "    my $res = \"\";\n    \n    foreach my $char (split(//, $s))\
    \ {\n        my $is_letter = lc($char) eq $char;\n        $char =~ tr/a-zA-Z//d;\n\
    \        \n        if ($is_letter) {\n            $char =~ tr/A-Za-z/A-Z/d;\n\
    \        }\n        \n        $res .= $char;\n    }\n    \n    return $res;\n}",
  "    my $result = '';\n    \n    foreach my $char (split //, $s) {\n        my $lower\
    \ = uc($char);\n        my $upper = lc($char);\n        \n        if ($lower eq\
    \ $char) {\n            $result .= $upper;\n        } elsif ($upper eq $char)\
    \ {\n            $result .= $lower;\n        } else {\n            $result .=\
    \ $char;\n        }\n    }\n    \n    return $result;\n}", "    my $result = \"\
    \";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n        my $char = substr($s,\
    \ $i, 1);\n        if($char =~ /[a-z]/i) {\n            $char =~ tr/a-z/A-Z/;\n\
    \        }\n        elsif($char =~ /[A-Z]/i) {\n            $char =~ tr/A-Z/a-z/;\n\
    \        }\n        $result .= $char;\n    }\n    \n    return $result;\n}", " \
    \   my $result = '';\n    \n    for(my $i = 0; $i < length($s); $i++) {\n    \
    \    if($s[i] eq 'a') {\n            $result .= 'A';\n        } elsif($s[i] eq\
    \ 'b') {\n            $result .= 'B';\n        } elsif($s[i] eq 'c') {\n     \
    \       $result .= 'C';\n        } elsif($s[i] eq 'd') {\n            $result\
    \ .= 'D';\n        } elsif($s[i] eq 'e') {\n            $result .= 'E';\n    \
    \    } elsif($s[i] eq 'f') {\n            $result .= 'F';\n        } elsif($s[i]\
    \ eq 'g') {\n            $result .= 'G';\n        } elsif($s[i] eq 'h') {\n  \
    \          $result .= 'H';\n        } elsif($s[i] eq 'i') {\n            $result\
    \ .= 'I';\n        } elsif($s[i] eq 'j') {\n            $result .= 'J';\n    \
    \    } elsif($s[i] eq 'k') {\n            $result .= 'K';\n        } elsif($s[i]\
    \ eq 'l') {\n            $result .= 'L';\n        } elsif($s[i] eq 'm') {\n  \
    \          $result .= 'M';\n        } elsif($s[i] eq 'n') {\n            $result\
    \ .= 'N';\n        } elsif($s[i] eq 'o') {\n            $result .= 'O';\n    \
    \    } elsif($s[i] eq 'p') {\n            $result .= 'P';\n        } elsif($s[i]\
    \ eq 'q') {\n            $result .= 'Q';\n        } elsif($s[i] eq 'r') {\n  \
    \          $result .= 'R';\n        } elsif($s[i] eq 's') {\n            $result\
    \ .= 'S';\n        } elsif($s[i] eq 't') {\n            $result .= 'T';\n    \
    \    } elsif($s[i] eq 'u') {\n            $result .= 'U';\n        } elsif($s[i]\
    \ eq 'v') {\n            $result .= 'V';\n        } elsif($s[i] eq 'w') {\n  \
    \          $result .= 'W';\n        } elsif($s[i] eq 'x') {\n            $result\
    \ .= 'X';\n        } elsif($s[i] eq 'y') {\n            $result .= 'Y';\n    \
    \    } elsif($s[i] eq 'z') {\n            $result .= 'Z';\n        } elsif($s[i]\
    \ eq 'A') {\n            $result .= 'a';\n        } elsif($s[i] eq 'B') {\n  \
    \          $result .= 'b';\n        } elsif($s[i] eq 'C') {\n            $result\
    \ .= 'c';\n", "    my $res = \"\";\n    my $i = 0;\n    while($i < length($s))\
    \ {\n        if($s[i] eq \" \") {\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"a\") {\n            $res .= \"A\";\n        }\n        elsif($s[i] eq \"\
    b\") {\n            $res .= \"B\";\n        }\n        elsif($s[i] eq \"c\") {\n\
    \            $res .= \"C\";\n        }\n        elsif($s[i] eq \"d\") {\n    \
    \        $res .= \"D\";\n        }\n        elsif($s[i] eq \"e\") {\n        \
    \    $res .= \"E\";\n        }\n        elsif($s[i] eq \"f\") {\n            $res\
    \ .= \"F\";\n        }\n        elsif($s[i] eq \"g\") {\n            $res .= \"\
    G\";\n        }\n        elsif($s[i] eq \"h\") {\n            $res .= \"H\";\n\
    \        }\n        elsif($s[i] eq \"i\") {\n            $res .= \"I\";\n    \
    \    }\n        elsif($s[i] eq \"j\") {\n            $res .= \"J\";\n        }\n\
    \        elsif($s[i] eq \"k\") {\n            $res .= \"K\";\n        }\n    \
    \    elsif($s[i] eq \"l\") {\n            $res .= \"L\";\n        }\n        elsif($s[i]\
    \ eq \"m\") {\n            $res .= \"M\";\n        }\n        elsif($s[i] eq \"\
    n\") {\n            $res .= \"N\";\n        }\n        elsif($s[i] eq \"o\") {\n\
    \            $res .= \"O\";\n        }\n        elsif($s[i] eq \"p\") {\n    \
    \        $res .= \"P\";\n        }\n        elsif($s[i] eq \"q\") {\n        \
    \    $res .= \"Q\";\n        }\n        elsif($s[i] eq \"r\") {\n            $res\
    \ .= \"R\";\n        }\n        elsif($s[i] eq \"s\") {\n            $res .= \"\
    S\";\n        }\n        elsif($s[i] eq \"t\") {\n            $res .= \"T\";\n\
    \        }\n        elsif($s[i] eq \"u\") {\n            $res .= \"U\";\n    \
    \    }\n        elsif($s[i] eq \"v\") {\n            $res .= \"V\";\n        }\n\
    \        elsif($s[i] eq \"w\") {\n            $res .= \"W\";\n        }\n    \
    \    elsif($s[i] eq \"x\") {\n            $res .= \"X\";\n        }\n        elsif($s[i]\
    \ eq \"y\") {\n            $res .= \"Y\";\n        }\n        elsif($s[i] eq",
  "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n   \
    \     my $c = substr($s, $i, 1);\n        if($c =~ /[a-z]/i) {\n            $result\
    \ .= uc($c);\n        }\n        else {\n            $result .= $c;\n        }\n\
    \    }\n    \n    return $result;\n}", "    my $result = \"\";\n    \n    foreach\
    \ my $char (split(//, $s)) {\n        my $is_letter = lc($char) eq $char;\n  \
    \      \n        if ($is_letter) {\n            $char =~ tr/a-z/A-Z/;\n      \
    \  }\n        \n        $result .= $char;\n    }\n    \n    return $result;\n}",
  "    my $result = \"\";\n    \n    foreach my $char (split(//, $s)) {\n        my\
    \ $is_letter = lc($char) eq $char;\n        \n        if ($is_letter) {\n    \
    \        $result .= uc($char);\n        } else {\n            $result .= $char;\n\
    \        }\n    }\n    \n    return $result;\n}", "    my $result = \"\";\n  \
    \  \n    foreach my $char (split(//, $s)) {\n        my $case = $char =~ /[a-z]/i\
    \ ? \"upper\" : \"lower\";\n        $result .= $char =~ /[a-z]/i ? ucfirst($char)\
    \ : lcfirst($char);\n    }\n    \n    return $result;\n}", "    $s =~ s/^([a-z]+)/\\\
    L$1/i;\n    $s =~ s/([a-z])/\\u$1/i;\n    $s =~ s/^([a-z]+)/\\U$1/i;\n    return\
    \ $s;\n}", "    \n    return $s if $s =~ /^[a-z]+$/i;\n    \n    return $s =~\
    \ s/([a-z])/uc($1)/ge;\n}", "    my $result = \"\";\n    \n    foreach my $char\
    \ (split //, $s) {\n        if ($char =~ /[a-z]/i) {\n            $char =~ tr/a-z/A-Z/;\n\
    \        }\n        else {\n            $char =~ tr/A-Z/a-z/;\n        }\n   \
    \     $result .= $char;\n    }\n    \n    return $result;\n}", "    my $res =\
    \ \"\";\n    \n    foreach my $char (split //, $s) {\n        my $lower = uc($char);\n\
    \        my $upper = lc($char);\n        \n        if ($lower eq $char) {\n  \
    \          $res .= $upper;\n        } elsif ($upper eq $char) {\n            $res\
    \ .= $lower;\n        } else {\n            $res .= $char;\n        }\n    }\n\
    \    \n    return $res;\n}", "    my $result = \"\";\n    \n    foreach my $char\
    \ (split //, $s) {\n        my $is_letter = lc $char eq $char;\n        $result\
    \ .= $is_letter ? uc $char : $char;\n    }\n    \n    return $result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    my $res = \"\";\n    foreach\
    \ my $char (split(//,$s)) {\n        if ($char =~ /^[a-z]/i) {\n            $res\
    \ .= uc($char);\n        } else {\n            $res .= $char;\n        }\n   \
    \ }\n    return $res;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer.\
    \ Your code works perfectly for lowercase letters. But for uppercase letters,\
    \ it doesn't. For example, if I input \"abc\", the output should be \"cba\", but\
    \ your code returns \"cBa\"\n<|/ c |>\n<| c |>\nI edited my answer, I forgot to\
    \ add `uc` when reversing uppercase letters. Please try again.\n<|/ c |>\n<| c\
    \ |>\nThanks for your answer. Your code works perfectly for lowercase letters.\
    \ But for uppercase letters, it doesn't. For example, if I input \"abc\", the\
    \ output should be \"cba\", but your code returns \"cBa\"\n<|/ c |>\n<| c |>\n\
    I edited my answer, I forgot to add `uc` when reversing uppercase letters. Please\
    \ try again.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    my $result = \"\";\n \
    \   \n    foreach my $char (split(//, $s)) {\n        my $is_letter = lc($char)\
    \ eq $char;\n        \n        if ($is_letter) {\n            $result .= uc($char);\n\
    \        } else {\n            $result .= $char;\n        }\n    }\n    \n   \
    \ return $result;\n}", "    $s =~ s/^[a-z]/lc/;\n    $s =~ s/^[A-Z]/UC/;\n   \
    \ $s =~ s/^[a-z]/UC/;\n    $s =~ s/^[A-Z]/lc/;\n    return $s;\n}\n</code>\n<|/\
    \ a tags=perl,regex |>\n<| c |>\nThis doesn't work if the string contains only\
    \ lowercase letters.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it yourself.\n<|/\
    \ c |>\n<| c |>\n: It does, but only because you didn't test it properly.\n<|/\
    \ c |>\n<| c |>\n: I tested it and it works. I even tested it on `abc` which returns\
    \ `cba`.\n<|/ c |>\n<| c |>\n: It doesn't work if you test it on `abc` which returns\
    \ `cba`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nuse strict;\nuse warnings;", " \
    \   $s =~ tr/a-zA-Z/A-Za-z/;\n    return $s if $s =~ /^[a-z]+$/;\n    $s =~ tr/A-Za-z/a-zA-Z/;\n\
    \    return $s if $s =~ /^[A-Z]+$/;\n    return $s;\n}", "    my $result = \"\"\
    ;\n    \n    foreach my $char (split //, $s) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            $char =~ tr/a-z/A-Z/;\n        }\n        elsif ($char =~ /[A-Z]/i)\
    \ {\n            $char =~ tr/A-Z/a-z/;\n        }\n        else {\n          \
    \  $char = $char;\n        }\n        $result .= $char;\n    }\n    \n    return\
    \ $result;\n}", "    my $res = $s;\n    \n    foreach my $char (split //, $s)\
    \ {\n        next if $char eq '_';\n        \n        if ($char =~ /[a-z]/i) {\n\
    \            $char =~ tr/a-z/A-Z/;\n        }\n        elsif ($char =~ /[A-Z]/i)\
    \ {\n            $char =~ tr/A-Z/a-z/;\n        }\n        \n        $res .= $char;\n\
    \    }\n    \n    return $res;\n}", "    my $result = \"\";\n    \n    foreach\
    \ my $char (split(//, $s)) {\n        if ($char =~ /[a-z]/i) {\n            $result\
    \ .= uc($char);\n        } else {\n            $result .= $char;\n        }\n\
    \    }\n    \n    return $result;\n}", "    my $res = $s;\n    \n    foreach my\
    \ $char (split //, $s) {\n        if ($char =~ /[a-z]/i) {\n            $res =~\
    \ tr/a-z/A-Z/;\n        } elsif ($char =~ /[A-Z]/i) {\n            $res =~ tr/A-Z/a-z/;\n\
    \        } else {\n            $res = $char;\n        }\n    }\n    \n    return\
    \ $res;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer. Your\
    \ code works fine but i want to know why my code is not working and why my code\
    \ is not working in perl 5.8.8\n<|/ c |>\n<| c |>\n: Your code doesn't work because\
    \ you didn't use strict and warnings. You also didn't use my to declare your variables.\
    \ You also didn't use any kind of loop to iterate over the string. You also didn't\
    \ use any kind of regex to match letters. You also didn't use any kind of regex\
    \ to match uppercase letters. You also didn't use any kind of regex to match lowercase\
    \ letters. You also didn't use any kind of regex to match digits. You also didn't\
    \ use any kind of regex to match whitespace. You also didn't use any kind of regex\
    \ to match punctuation. You also didn't use any kind of regex to match non-alphanumeric\
    \ characters. You also didn't use any kind of regex to match non-printable characters.\
    \ You also didn't use any kind of regex to match non-ASCII characters. You also\
    \ didn't use any kind of regex to match non-ASCII control characters. You also\
    \ didn't use any kind of regex to match non-ASCII extended characters. You also\
    \ didn't use any kind of regex to match non-ASCII non-printable characters. You\
    \ also didn't use any kind of regex to match non-ASCII non-ASCII characters. You\
    \ also didn't use any kind of regex to match non-ASCII non-ASCII control characters.\
    \ You also didn't use any kind of regex to match non-ASCII non-ASCII extended\
    \ characters. You also didn't use any kind of regex to match non-ASCII non-ASCII\
    \ non-printable characters.\n<|/ c |>\n<| c |>\n: You also didn't use any kind\
    \ of regex to match non-ASCII control characters. You also didn't use any kind\
    \ of regex to match non-ASCII extended characters. You also didn't use any kind\
    \ of regex to match non-ASCII non-printable characters. You also didn't use any\
    \ kind of regex to match non-ASCII non-ASCII characters. You also didn't use any\
    \ kind of regex to match non-ASCII non-ASCII control characters. You also didn't\
    \ use any kind of regex to match non-ASCII non-ASCII extended characters. You\
    \ also didn't use any kind of regex to match non-ASCII non-ASCII non-", "    my\
    \ $res = \"\";\n    my $i = 0;\n    while($i < length($s)) {\n        if($s[i]\
    \ eq \" \") {\n            $res .= \" \";\n            $i++;\n        }\n    \
    \    elsif($s[i] eq \"a\") {\n            $res .= \"A\";\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"b\") {\n            $res .= \"B\";\n    \
    \        $i++;\n        }\n        elsif($s[i] eq \"c\") {\n            $res .=\
    \ \"C\";\n            $i++;\n        }\n        elsif($s[i] eq \"d\") {\n    \
    \        $res .= \"D\";\n            $i++;\n        }\n        elsif($s[i] eq\
    \ \"e\") {\n            $res .= \"E\";\n            $i++;\n        }\n       \
    \ elsif($s[i] eq \"f\") {\n            $res .= \"F\";\n            $i++;\n   \
    \     }\n        elsif($s[i] eq \"g\") {\n            $res .= \"G\";\n       \
    \     $i++;\n        }\n        elsif($s[i] eq \"h\") {\n            $res .= \"\
    H\";\n            $i++;\n        }\n        elsif($s[i] eq \"i\") {\n        \
    \    $res .= \"I\";\n            $i++;\n        }\n        elsif($s[i] eq \"j\"\
    ) {\n            $res .= \"J\";\n            $i++;\n        }\n        elsif($s[i]\
    \ eq \"k\") {\n            $res .= \"K\";\n            $i++;\n        }\n    \
    \    elsif($s[i] eq \"l\") {\n            $res .= \"L\";\n            $i++;\n\
    \        }\n        elsif($s[i] eq \"m\") {\n            $res .= \"M\";\n    \
    \        $i++;\n        }\n        elsif($s[i] eq \"n\") {\n            $res .=\
    \ \"N\";\n            $i++;\n        }\n        elsif($s[i] eq \"o\") {\n    \
    \        $res .= \"O\";\n            $i++;\n        }\n        elsif($s[i] eq\
    \ \"p\") {\n            $res .= \"P\";\n            $i++;\n        }\n       \
    \ elsif($s[i] eq \"q\") {\n            $res .= \"Q\";\n            $i++;\n   \
    \     }\n        elsif($s[i] eq \"r\") {\n            $res .= \"R\";\n       \
    \     $i++;\n        }\n        elsif($s[i] eq \"s\") {\n            $res .= \"\
    S\";\n            $i++;\n        }\n        elsif($s[i] eq \"t\") {\n        \
    \    $res .= \"T\";\n            $i++;\n        }\n        elsif($s[i] eq \"u\"\
    ) {\n            $res .= \"", "    my $result = \"\";\n    \n    for(my $i = 0;\
    \ $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n        \n   \
    \     if($c =~ /[a-z]/i) {\n            $result .= uc($c);\n        } elsif($c\
    \ =~ /[A-Z]/i) {\n            $result .= lc($c);\n        } else {\n         \
    \   $result .= $c;\n        }\n    }\n    \n    return $result;\n}", "    $s =~\
    \ s/\\A[a-z]+//;\n    $s =~ s/\\A[A-Z]+//;\n    $s =~ s/\\A[a-z]+//;\n    $s =~\
    \ s/\\A[A-Z]+//;\n    $s =~ s/\\A[a-z]+//;\n    $s =~ s/\\A[A-Z]+//;\n    $s =~\
    \ s/\\A[a-z]+//;\n    $s =~ s/\\A[A-Z]+//;\n    $s =~ s/\\A[a-z]+//;\n    $s =~\
    \ s/\\A[A-Z]+//;\n    $s =~ s/\\A[a-z]+//;\n    $s =~ s/\\A[A-Z]+//;\n    $s =~\
    \ s/\\A[a-z]+//;\n    $s =~ s/\\A[A-Z]+//;\n    $s =~ s/\\A[a-z]+//;\n    $s =~\
    \ s/\\A[A-Z]+//;\n    $s =~ s/\\A[a-z]+//;\n    $s =~ s/\\A[A-Z]+//;\n    $s =~\
    \ s/\\A[a-z]+//;\n    $s =~ s/\\A[A-Z]+//;\n    $s =~ s/\\A[a-z]+//;\n    $s =~\
    \ s/\\A[A-Z]+//;\n    $s =~ s/\\A[a-z]+//;\n    $s =~ s/\\A[A-Z]+//;\n    $s =~\
    \ s/\\A[a-z]+//;\n    $s =~ s/\\A[A-Z]+//;\n    $s =~ s/\\A[a-z]+//;\n    $s =~\
    \ s/\\A[A-Z]+//;\n    $s =~ s/\\A[a-z]+//;\n    $s =~ s/\\A[A-Z]+//;\n    $s =~\
    \ s/\\A[a-z]+//;\n    $s =~ s/\\A[A-Z]+//;\n    $s =~ s/\\A[a-z]+//;\n    $s =~\
    \ s/\\A[A-Z]+//;\n    $s =~ s/\\A[a-z]+//;\n    $s =~ s/\\A[A-Z]+//;\n    $s =~\
    \ s/\\A[a-z]+//;\n    $s =~ s/\\A[A-Z]+//;\n    $s =~ s/\\A[a-z]+//;\n    $s =~\
    \ s/\\A[A-Z]+//;\n    $s =~ s/\\A[a-z]+//;\n    $s =~ s/\\A[A-Z]+//;\n    $s =~\
    \ s/\\A[a-z]+//;\n    $s =~ s/\\A[A-Z]+//;\n    $s =~ s/\\A[a-z]+//;\n    $s =~\
    \ s/\\A[A-Z]+//;\n    $s =~ s/\\A", "    my $res = \"\";\n    \n    for(my $i\
    \ = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n        if($c\
    \ =~ /[a-z]/) {\n            $res .= uc($c);\n        } else {\n            $res\
    \ .= $c;\n        }\n    }\n    \n    return $res;\n}", "    $s =~ s/^[a-z]+//;\n\
    \    $s =~ s/^[A-Z]+//;\n    $s =~ s/^[^a-z]+//;\n    $s =~ s/^[^A-Z]+//;\n  \
    \  return $s;\n}\n</code>\n<|/ a tags=perl,regex |>\n<| a tags=perl,regex |>\n\
    <code>", "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++)\
    \ {\n        my $char = substr($s, $i, 1);\n        \n        if($char =~ /[a-z]/i)\
    \ {\n            $result .= uc($char);\n        }\n        elsif($char =~ /[A-Z]/i)\
    \ {\n            $result .= lc($char);\n        }\n        else {\n          \
    \  $result .= $char;\n        }\n    }\n    \n    return $result;\n}", "    my\
    \ $result = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n       \
    \ if($s[i] eq \"A\") {\n            $result .= \"B\";\n        } elsif($s[i] eq\
    \ \"B\") {\n            $result .= \"A\";\n        } elsif($s[i] eq \"a\") {\n\
    \            $result .= \"b\";\n        } elsif($s[i] eq \"b\") {\n          \
    \  $result .= \"a\";\n        } else {\n            $result .= $s[i];\n      \
    \  }\n    }\n    \n    return $result;\n}", "    my $result = \"\";\n    \n  \
    \  foreach my $char (split(//, $s)) {\n        my $lower = uc($char);\n      \
    \  my $upper = lc($char);\n        \n        if ($lower eq $char) {\n        \
    \    $result .= $upper;\n        } elsif ($upper eq $char) {\n            $result\
    \ .= $lower;\n        } else {\n            $result .= $char;\n        }\n   \
    \ }\n    \n    return $result;\n}", "    my $res = \"\";\n    \n    for(my $i\
    \ = 0; $i < length($s); $i++) {\n        if($s[i] eq \"A\") {\n            $res\
    \ .= \"a\";\n        } elsif($s[i] eq \"B\") {\n            $res .= \"b\";\n \
    \       } elsif($s[i] eq \"C\") {\n            $res .= \"c\";\n        } elsif($s[i]\
    \ eq \"D\") {\n            $res .= \"d\";\n        } elsif($s[i] eq \"E\") {\n\
    \            $res .= \"e\";\n        } elsif($s[i] eq \"F\") {\n            $res\
    \ .= \"f\";\n        } elsif($s[i] eq \"G\") {\n            $res .= \"g\";\n \
    \       } elsif($s[i] eq \"H\") {\n            $res .= \"h\";\n        } elsif($s[i]\
    \ eq \"I\") {\n            $res .= \"i\";\n        } elsif($s[i] eq \"J\") {\n\
    \            $res .= \"j\";\n        } elsif($s[i] eq \"K\") {\n            $res\
    \ .= \"k\";\n        } elsif($s[i] eq \"L\") {\n            $res .= \"l\";\n \
    \       } elsif($s[i] eq \"M\") {\n            $res .= \"m\";\n        } elsif($s[i]\
    \ eq \"N\") {\n            $res .= \"n\";\n        } elsif($s[i] eq \"O\") {\n\
    \            $res .= \"o\";\n        } elsif($s[i] eq \"P\") {\n            $res\
    \ .= \"p\";\n        } elsif($s[i] eq \"Q\") {\n            $res .= \"q\";\n \
    \       } elsif($s[i] eq \"R\") {\n            $res .= \"r\";\n        } elsif($s[i]\
    \ eq \"S\") {\n            $res .= \"s\";\n        } elsif($s[i] eq \"T\") {\n\
    \            $res .= \"t\";\n        } elsif($s[i] eq \"U\") {\n            $res\
    \ .= \"u\";\n        } elsif($s[i] eq \"V\") {\n            $res .= \"v\";\n \
    \       } elsif($s[i] eq \"W\") {\n            $res .= \"w\";\n        } elsif($s[i]\
    \ eq \"X\") {\n            $res .= \"x\";\n        } elsif($s[i] eq \"Y\") {\n\
    \            $res .= \"y\";\n        } elsif($s[i] eq \"Z\") {\n            $res\
    \ .= \"z\";\n        } elsif($s[i] eq \"a\") {\n            $res .= \"A\";\n \
    \       } elsif($s[i] eq \"b\") {\n            $res .= \"B\";\n        } elsif($s[i]\
    \ eq \"c\") {\n            $res .= \"C\";\n        } ", "    my $result = \"\"\
    ;\n    \n    for(my $i = 0; $i < length($s); $i++) {\n        if($s[i] eq \"A\"\
    ) {\n            $result .= \"B\";\n        } elsif($s[i] eq \"B\") {\n      \
    \      $result .= \"A\";\n        } elsif($s[i] eq \"a\") {\n            $result\
    \ .= \"b\";\n        } elsif($s[i] eq \"b\") {\n            $result .= \"a\";\n\
    \        } else {\n            $result .= $s[i];\n        }\n    }\n    \n   \
    \ return $result;\n}", "    my $result = \"\";\n    \n    for(my $i = 0; $i <\
    \ length($s); $i++) {\n        if($s[i] eq \"a\") {\n            $result .= \"\
    A\";\n        } elsif($s[i] eq \"b\") {\n            $result .= \"B\";\n     \
    \   } elsif($s[i] eq \"c\") {\n            $result .= \"C\";\n        } elsif($s[i]\
    \ eq \"d\") {\n            $result .= \"D\";\n        } elsif($s[i] eq \"e\")\
    \ {\n            $result .= \"E\";\n        } elsif($s[i] eq \"f\") {\n      \
    \      $result .= \"F\";\n        } elsif($s[i] eq \"g\") {\n            $result\
    \ .= \"G\";\n        } elsif($s[i] eq \"h\") {\n            $result .= \"H\";\n\
    \        } elsif($s[i] eq \"i\") {\n            $result .= \"I\";\n        } elsif($s[i]\
    \ eq \"j\") {\n            $result .= \"J\";\n        } elsif($s[i] eq \"k\")\
    \ {\n            $result .= \"K\";\n        } elsif($s[i] eq \"l\") {\n      \
    \      $result .= \"L\";\n        } elsif($s[i] eq \"m\") {\n            $result\
    \ .= \"M\";\n        } elsif($s[i] eq \"n\") {\n            $result .= \"N\";\n\
    \        } elsif($s[i] eq \"o\") {\n            $result .= \"O\";\n        } elsif($s[i]\
    \ eq \"p\") {\n            $result .= \"P\";\n        } elsif($s[i] eq \"q\")\
    \ {\n            $result .= \"Q\";\n        } elsif($s[i] eq \"r\") {\n      \
    \      $result .= \"R\";\n        } elsif($s[i] eq \"s\") {\n            $result\
    \ .= \"S\";\n        } elsif($s[i] eq \"t\") {\n            $result .= \"T\";\n\
    \        } elsif($s[i] eq \"u\") {\n            $result .= \"U\";\n        } elsif($s[i]\
    \ eq \"v\") {\n            $result .= \"V\";\n        } elsif($s[i] eq \"w\")\
    \ {\n            $result .= \"W\";\n        } elsif($s[i] eq \"x\") {\n      \
    \      $result .= \"X\";\n        } elsif($s[i] eq \"y\") {\n            $result\
    \ .= \"Y\";\n        } elsif($s[i] eq \"z\") {\n            $result .= \"Z\";\n\
    \        } elsif($s[i] eq \"A\") {\n            $result .= \"a\";\n        } elsif($s[i]\
    \ eq \"B\") {\n            $result .= \"b\";\n        } elsif($s[i] eq \"C\")\
    \ {\n            $result .= \"c\";\n", "    my @chars = split(//, $s);\n    my\
    \ $res = \"\";\n    foreach my $char (@chars) {\n        if($char =~ /[a-z]/i)\
    \ {\n            $res .= uc($char);\n        }\n        elsif($char =~ /[A-Z]/i)\
    \ {\n            $res .= lc($char);\n        }\n        else {\n            $res\
    \ .= $char;\n        }\n    }\n    return $res;\n}", "    my $result = \"\";\n\
    \    \n    foreach my $char (split(//, $s)) {\n        my $is_letter = lc($char)\
    \ eq $char;\n        \n        if ($is_letter) {\n            $char =~ tr/a-z/A-Z/;\n\
    \        }\n        \n        $result .= $char;\n    }\n    \n    return $result;\n\
    }", "    my $result = \"\";\n    my $i = 0;\n    while($i < length($s)) {\n  \
    \      if($s[i] eq substr($s, $i, 1)) {\n            $result .= substr($s, $i,\
    \ 1) . substr($s, $i, 1);\n            $i += 1;\n        } else {\n          \
    \  $result .= $s[i];\n        }\n        $i += 1;\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=perl,string |>\n<| c |>\nThis doesn't work. Try it with\
    \ `\"aBc\"`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `\"aBc\"`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try it with `\"aBc\"`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it with `\"aBc\"`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `\"aBc\"\
    `.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    my $res = $s;\n    \n    foreach\
    \ my $char (split //, $s) {\n        if ($char =~ /[a-z]/) {\n            $res\
    \ =~ tr/a-z/A-Z/;\n        } elsif ($char =~ /[A-Z]/) {\n            $res =~ tr/A-Z/a-z/;\n\
    \        } else {\n            $res =~ tr/A-Za-z/A-ZA-Z/;\n        }\n    }\n\
    \    return $res;\n}", "    my @chars = split(//, $s);\n    my $res = \"\";\n\
    \    foreach my $char (@chars) {\n        if ($char =~ /[a-z]/i) {\n         \
    \   $char =~ tr/a-z/A-Z/;\n        }\n        else {\n            $char =~ tr/A-Z/a-z/;\n\
    \        }\n        $res .= $char;\n    }\n    return $res;\n}\n</code>\n<|/ a\
    \ tags=perl,regex |>\n<| c |>\nI like this solution, but I wonder if it would\
    \ be more efficient to just reverse the string and use a single regex to do the\
    \ job. `s/[a-z]/A-Z/gi` would do the trick.\n<|/ c |>\n<| c |>\n: Yes, that would\
    \ work as well. I've added that to my answer.\n<|/ c |>\n<| c |>\n: I added a\
    \ solution that doesn't use any regex. :)\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that doesn't use any regex. :)\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    my\
    \ $result = \"\";\n    \n    foreach my $char (split(//, $s)) {\n        my $is_letter\
    \ = lc($char) eq $char;\n        \n        if ($is_letter) {\n            $result\
    \ .= uc($char);\n        } else {\n            $result .= $char;\n        }\n\
    \    }\n    \n    return $result;\n}", "    my $result = \"\";\n    \n    foreach\
    \ my $char (split //, $s) {\n        my $case = $char =~ /[a-z]/i ? \"U\" : \"\
    L\";\n        $result .= $case;\n    }\n    \n    return $result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    my $result = \"\";\n    \n\
    \    foreach my $char (split(//, $s)) {\n        my $case = $char =~ /[a-z]/i\
    \ ? \"u\" : \"l\";\n        $result .= $char =~ /[a-z]/i ? $char =~ /[a-z]/i .\
    \ $case : $char;\n    }\n    \n    return $result;\n}", "    my $result = \"\"\
    ;\n    \n    foreach my $char (split(//, $s)) {\n        my $cased = uc($char);\n\
    \        \n        if ($cased eq $char) {\n            $result .= $char;\n   \
    \     }\n        else {\n            $result .= $cased;\n        }\n    }\n  \
    \  \n    return $result;\n}", "    my $result = \"\";\n    \n    for(my $i = 0;\
    \ $i < length($s); $i++) {\n        if($s[i] =~ /^[a-z]/i) {\n            $result\
    \ .= uc($s[i]);\n        } else {\n            $result .= $s[i];\n        }\n\
    \    }\n    \n    return $result;\n}", "    my $result = \"\";\n    \n    for(my\
    \ $i = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n     \
    \   if($c =~ /[a-z]/) {\n            $result .= uc($c);\n        } else {\n  \
    \          $result .= $c;\n        }\n    }\n    \n    return $result;\n}", " \
    \   \n    my $result = \"\";\n    \n    foreach my $char (split(//, $s)) {\n \
    \       \n        if ($char =~ /^[a-z]+$/) {\n            $char =~ tr/a-z/A-Z/;\n\
    \        }\n        \n        $result .= $char;\n    }\n    \n    return $result;\n\
    }", "    my $result = \"\";\n    \n    foreach my $char (split(//, $s)) {\n  \
    \      my $is_letter = lc($char) eq $char;\n        \n        if ($is_letter)\
    \ {\n            $char =~ tr/a-z/A-Z/;\n        }\n        \n        $result .=\
    \ $char;\n    }\n    \n    return $result;\n}", "    my $result = '';\n    \n\
    \    foreach my $char (split(//, $s)) {\n        my $case = uc($char);\n     \
    \   if ($case eq $char) {\n            $result .= $char;\n        } else {\n \
    \           $result .= $case;\n        }\n    }\n    \n    return $result;\n}",
  "    my $res = $s;\n    \n    foreach my $char (split //, $s) {\n        my $lower\
    \ = uc($char);\n        my $upper = lc($char);\n        \n        if ($lower eq\
    \ $char) {\n            $res =~ s/$lower/$upper/g;\n        } elsif ($upper eq\
    \ $char) {\n            $res =~ s/$upper/$lower/g;\n        } else {\n       \
    \     $res = $char;\n        }\n    }\n    \n    return $res;\n}", "    my @chars\
    \ = split(//, $s);\n    my $res = \"\";\n    foreach my $char (@chars) {\n   \
    \     if ($char =~ /^[a-z]+$/i) {\n            $res .= uc($char);\n        } else\
    \ {\n            $res .= $char;\n        }\n    }\n    return $res;\n}", "   \
    \ my @chars = split(//, $s);\n    my $res = \"\";\n    foreach my $char (@chars)\
    \ {\n        my $c = uc($char);\n        if ($c eq $char) {\n            $res\
    \ .= $char;\n        } else {\n            $res .= $c;\n        }\n    }\n   \
    \ return $res;\n}", "    my @chars = split(//, $s);\n    my $res = \"\";\n   \
    \ foreach my $char (@chars) {\n        if ($char =~ /[a-z]/i) {\n            $char\
    \ =~ tr/a-z/A-Z/;\n        }\n        $res .= $char;\n    }\n    return $res;\n\
    }\n</code>\n<|/ a tags=perl,regex |>\n<| a dscore=0 |>\n<code>\nuse strict;\n\
    use warnings;", "    $s =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n\
    \    $s =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n    $s\
    \ =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n\
    \    $s =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s\
    \ =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n\
    \    $s =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n    $s\
    \ =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n\
    \    $s =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s\
    \ =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n\
    \    $s =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n    $s\
    \ =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n\
    \    $s =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s\
    \ =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n\
    \    $s =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n    $s\
    \ =~ s/^[a-z]+//;\n    $s =~ s/[a-z]+$//;\n    $s =~ s/^[a-z]+//;\n    $s =",
  "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n   \
    \     my $c = substr($s, $i, 1);\n        if($c =~ /^[a-z]/i) {\n            $result\
    \ .= uc($c);\n        } else {\n            $result .= $c;\n        }\n    }\n\
    \    \n    return $result;\n}\n</code>\n<|/ a tags=perl,string,algorithm |>\n\
    <| c |>\nThanks for the answer. Your solution works perfectly fine. But the problem\
    \ is that I cannot use any built-in functions. I cannot use any subroutines or\
    \ any loops. I cannot use any regex. Can you please help me with that?\n<|/ c\
    \ |>\n<| c |>\nI added a solution without subroutines or loops.\n<|/ c |>\n<|\
    \ c |>\nThanks for the answer. Your solution works perfectly fine. But the problem\
    \ is that I cannot use any built-in functions. I cannot use any subroutines or\
    \ any loops. I cannot use any regex. Can you please help me with that?\n<|/ c\
    \ |>\n<| c |>\nI added a solution without subroutines or loops.\n<|/ c |>\n<|\
    \ c |>\nThanks for the answer. Your solution works perfectly fine. But the problem\
    \ is that I cannot use any built-in functions. I cannot use any subroutines or\
    \ any loops. I cannot use any regex. Can you please help me with that?\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>", "    my @chars = split(//, $s);\n    my $result\
    \ = \"\";\n    foreach my $char (@chars) {\n        my $case = uc($char);\n  \
    \      if ($case eq $char) {\n            $result .= $char;\n        }\n     \
    \   else {\n            $result .= $case;\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=perl,string |>\n<| a |>\n<code>", "    my $result = \"\"\
    ;\n    \n    foreach my $char (split(//, $s)) {\n        my $is_letter = lc($char)\
    \ eq $char;\n        \n        if ($is_letter) {\n            $char =~ tr/a-z/A-Z/;\n\
    \        }\n        \n        $result .= $char;\n    }\n    \n    return $result;\n\
    }", "    my $result = '';\n    \n    foreach my $char (split //, $s) {\n     \
    \   my $is_letter = lc $char eq $char;\n        $result .= $is_letter ? uc $char\
    \ : $char;\n    }\n    \n    return $result;\n}", "    \n    my $result = \"\"\
    ;\n    \n    foreach my $char (split(//, $s)) {\n        my $upper = uc($char);\n\
    \        my $lower = lc($char);\n        \n        if ($char eq $upper) {\n  \
    \          $result .= $lower;\n        } elsif ($char eq $lower) {\n         \
    \   $result .= $upper;\n        } else {\n            $result .= $char;\n    \
    \    }\n    }\n    \n    return $result;\n}", "    my $result = \"\";\n    \n\
    \    foreach my $char (split //, $s) {\n        my $is_letter = is_letter($char);\n\
    \        \n        if ($is_letter) {\n            $char =~ tr/a-z/A-Z/;\n    \
    \    }\n        \n        $result .= $char;\n    }\n    \n    return $result;\n\
    }", "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s); $i++) {\n\
    \        my $c = substr($s, $i, 1);\n        if($c =~ /^[a-z]/i) {\n         \
    \   $result .= uc($c);\n        }\n        else {\n            $result .= $c;\n\
    \        }\n    }\n    \n    return $result;\n}", "    $s =~ s/^([a-z]+)/\\L$1/i;\n\
    \    $s =~ s/^([A-Z]+)/\\U$1/i;\n    $s =~ s/^([A-Z]+)/\\U$1/i;\n    $s =~ s/^([a-z]+)/\\\
    L$1/i;\n    return $s;\n}", "    \n    my $result = \"\";\n    \n    foreach my\
    \ $char (split //, $s) {\n        my $lower = uc $char;\n        my $upper = lc\
    \ $char;\n        \n        if ($char eq $lower) {\n            $result .= $upper;\n\
    \        } elsif ($char eq $upper) {\n            $result .= $lower;\n       \
    \ } else {\n            $result .= $char;\n        }\n    }\n    \n    return\
    \ $result;\n}", "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        if($s[i] =~ /^[a-z]/) {\n            $result .= uc($s[i]);\n\
    \        } elsif($s[i] =~ /^[A-Z]/) {\n            $result .= lc($s[i]);\n   \
    \     } else {\n            $result .= $s[i];\n        }\n    }\n    \n    return\
    \ $result;\n}", "    my $result = \"\";\n    \n    for(my $i = 0; $i < length($s);\
    \ $i++) {\n        if($s[i] eq \"a\") {\n            $result .= \"A\";\n     \
    \   } elsif($s[i] eq \"b\") {\n            $result .= \"B\";\n        } elsif($s[i]\
    \ eq \"c\") {\n            $result .= \"C\";\n        } elsif($s[i] eq \"d\")\
    \ {\n            $result .= \"D\";\n        } elsif($s[i] eq \"e\") {\n      \
    \      $result .= \"E\";\n        } elsif($s[i] eq \"f\") {\n            $result\
    \ .= \"F\";\n        } elsif($s[i] eq \"g\") {\n            $result .= \"G\";\n\
    \        } elsif($s[i] eq \"h\") {\n            $result .= \"H\";\n        } elsif($s[i]\
    \ eq \"i\") {\n            $result .= \"I\";\n        } elsif($s[i] eq \"j\")\
    \ {\n            $result .= \"J\";\n        } elsif($s[i] eq \"k\") {\n      \
    \      $result .= \"K\";\n        } elsif($s[i] eq \"l\") {\n            $result\
    \ .= \"L\";\n        } elsif($s[i] eq \"m\") {\n            $result .= \"M\";\n\
    \        } elsif($s[i] eq \"n\") {\n            $result .= \"N\";\n        } elsif($s[i]\
    \ eq \"o\") {\n            $result .= \"O\";\n        } elsif($s[i] eq \"p\")\
    \ {\n            $result .= \"P\";\n        } elsif($s[i] eq \"q\") {\n      \
    \      $result .= \"Q\";\n        } elsif($s[i] eq \"r\") {\n            $result\
    \ .= \"R\";\n        } elsif($s[i] eq \"s\") {\n            $result .= \"S\";\n\
    \        } elsif($s[i] eq \"t\") {\n            $result .= \"T\";\n        } elsif($s[i]\
    \ eq \"u\") {\n            $result .= \"U\";\n        } elsif($s[i] eq \"v\")\
    \ {\n            $result .= \"V\";\n        } elsif($s[i] eq \"w\") {\n      \
    \      $result .= \"W\";\n        } elsif($s[i] eq \"x\") {\n            $result\
    \ .= \"X\";\n        } elsif($s[i] eq \"y\") {\n            $result .= \"Y\";\n\
    \        } elsif($s[i] eq \"z\") {\n            $result .= \"Z\";\n        } elsif($s[i]\
    \ eq \"A\") {\n            $result .= \"a\";\n        } elsif($s[i] eq \"B\")\
    \ {\n            $result .= \"b\";\n        } elsif($s[i] eq \"C\") {\n      \
    \      $result .= \"c\";\n", "    my $result = \"\";\n    \n    foreach my $char\
    \ (split //, $s) {\n        my $is_letter = lc($char) =~ /^[a-z]+$/i;\n      \
    \  \n        if ($is_letter) {\n            $char =~ tr/a-z/A-Z/;\n        }\n\
    \        \n        $result .= $char;\n    }\n    \n    return $result;\n}", " \
    \   \n    my @chars = split(//, $s);\n    \n    my $res = \"\";\n    \n    foreach\
    \ my $char (@chars) {\n        my $c = $char;\n        \n        if ($c =~ /[a-z]/)\
    \ {\n            $c =~ tr/a-z/A-Z/;\n        }\n        elsif ($c =~ /[A-Z]/)\
    \ {\n            $c =~ tr/A-Z/a-z/;\n        }\n        \n        $res .= $c;\n\
    \    }\n    \n    return $res;\n}", "    my $result = \"\";\n    \n    for(my\
    \ $i = 0; $i < length($s); $i++) {\n        my $char = substr($s, $i, 1);\n  \
    \      if($char =~ /^[a-z]/i) {\n            $char =~ tr/a-z/A-Z/;\n        }\n\
    \        elsif($char =~ /^[A-Z]/i) {\n            $char =~ tr/A-Z/a-z/;\n    \
    \    }\n        elsif($char =~ /^\\W/i) {\n            $char =~ tr/\\W/a-z/;\n\
    \        }\n        $result .= $char;\n    }\n    \n    return $result;\n}", " \
    \   my $result = \"\";\n    my $i = 0;\n    while($i < length($s)) {\n       \
    \ if($s[i] eq \" \") {\n            $result .= \" \";\n            $i++;\n   \
    \     } elsif($s[i] eq \"A\") {\n            $result .= \"a\";\n            $i++;\n\
    \        } elsif($s[i] eq \"B\") {\n            $result .= \"b\";\n          \
    \  $i++;\n        } elsif($s[i] eq \"C\") {\n            $result .= \"c\";\n \
    \           $i++;\n        } elsif($s[i] eq \"D\") {\n            $result .= \"\
    d\";\n            $i++;\n        } elsif($s[i] eq \"E\") {\n            $result\
    \ .= \"e\";\n            $i++;\n        } elsif($s[i] eq \"F\") {\n          \
    \  $result .= \"f\";\n            $i++;\n        } elsif($s[i] eq \"G\") {\n \
    \           $result .= \"g\";\n            $i++;\n        } elsif($s[i] eq \"\
    H\") {\n            $result .= \"h\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"I\") {\n            $result .= \"i\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"J\") {\n            $result .= \"j\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"K\") {\n            $result .= \"k\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"L\") {\n            $result .= \"l\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"M\") {\n            $result .= \"m\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"N\") {\n            $result .= \"n\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"O\") {\n            $result .= \"o\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"P\") {\n            $result .= \"p\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"Q\") {\n            $result .= \"q\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"R\") {\n            $result .= \"r\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"S\") {\n            $result .= \"s\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"T\") {\n            $result .= \"t\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"U\") {\n            $result .= \"u\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"V\") {\n            $result .= \"v\";\n            $i++;\n        } elsif($s[i]\
    \ eq \"W\") {\n            $result .= \"w", "    my $res = \"\";\n    \n    for(my\
    \ $i = 0; $i < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n     \
    \   if($c =~ /[a-z]/) {\n            $c =~ tr/a-z/A-Z/;\n        }\n        elsif($c\
    \ =~ /[A-Z]/) {\n            $c =~ tr/A-Z/a-z/;\n        }\n        $res .= $c;\n\
    \    }\n    \n    return $res;\n}", "    my $res = \"\";\n    foreach my $char\
    \ (split(//, $s)) {\n        my $is_letter = lc($char) =~ /^[a-z]+$/i;\n     \
    \   $res .= $is_letter ? uc($char) : $char;\n    }\n    return $res;\n}", "  \
    \  my $result = \"\";\n    \n    foreach my $char (split(//, $s)) {\n        my\
    \ $case = uc($char);\n        \n        if ($case eq $char) {\n            $result\
    \ .= $char;\n        }\n        else {\n            $result .= $case;\n      \
    \  }\n    }\n    \n    return $result;\n}", "    $s =~ s/^([a-z])/uc($1)/eg;\n\
    \    $s =~ s/([a-z])/lc($1)/eg;\n    $s =~ s/^([a-z])/uc($1)/eg;\n    $s =~ s/([a-z])/lc($1)/eg;\n\
    \    return $s;\n}", "    my @chars = split(//, $s);\n    my $result = \"\";\n\
    \    foreach my $char (@chars) {\n        if ($char =~ /[a-z]/) {\n          \
    \  $char =~ tr/a-z/A-Z/;\n        }\n        $result .= $char;\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=perl,regex |>\n<code>\nmy\
    \ $string = \"hello\";\n$string =~ tr/a-z/A-Z/;\nprint $string;\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding how and/or why it solves the problem would improve the answer's\
    \ long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
