language: pl
name: HumanEval_2_truncate_number
results:
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzkmr3ihg.pl line 30, at
    end of line

    syntax error at /tmp/tmpzkmr3ihg.pl line 30, at EOF

    Execution of /tmp/tmpzkmr3ihg.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_places_string);\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp201akjes.pl line 30, at
    end of line

    syntax error at /tmp/tmp201akjes.pl line 30, at EOF

    Execution of /tmp/tmp201akjes.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimal) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp6hu5xffk.pl line 28, at
    end of line

    syntax error at /tmp/tmp6hu5xffk.pl line 28, at EOF

    Execution of /tmp/tmp6hu5xffk.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_places_string);\n    my($decimal_places_string_length);\n\
    \    my($decimal_places_string_length_string);\n    my($decimal_places_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string);\n    my($decimal_places_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string);\n \
    \   my($decimal_places_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp2bt2n5q3.pl line 35, at end
    of line

    syntax error at /tmp/tmp2bt2n5q3.pl line 35, near "$decimal_places_string_length_string_length

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp2bt2n5q3.pl line 54, at end of
    line

    syntax error at /tmp/tmp2bt2n5q3.pl line 54, at EOF

    Execution of /tmp/tmp2bt2n5q3.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpl3z62agm.pl line 29, at
    end of line

    syntax error at /tmp/tmpl3z62agm.pl line 29, at EOF

    Execution of /tmp/tmpl3z62agm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    m\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp3vnda73d.pl line 84,\
    \ near \"sub testhumaneval\"\n  (Might be a runaway multi-line uu string starting\
    \ on line 81)\n\t(Do you need to predeclare sub?)\nUnknown regexp modifier \"\
    /b\" at /tmp/tmp3vnda73d.pl line 81, at end of line\nsyntax error at /tmp/tmp3vnda73d.pl\
    \ line 84, near \"sub testhumaneval \"\nMissing right curly or square bracket\
    \ at /tmp/tmp3vnda73d.pl line 100, at end of line\nExecution of /tmp/tmp3vnda73d.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($sign) = $number =~ /^-?([1-9][0-9]*|0)$/;\n    my($integer_part_length)\
    \ = length($integer_part);\n    my($decimal_part_length) = length($decimal_part);\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \    my($decimal_part_length) = $decimal_part_length < 0 ? 0 : $decimal_part_length;\n\
    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp8cct1djx.pl line 57, at
    end of line

    syntax error at /tmp/tmp8cct1djx.pl line 57, at EOF

    Execution of /tmp/tmp8cct1djx.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_digits);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp9d_oiqk6.pl line 60,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp9d_oiqk6.pl line 60, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp9d_oiqk6.pl line 79, at end of line\nsyntax\
    \ error at /tmp/tmp9d_oiqk6.pl line 79, at EOF\nExecution of /tmp/tmp9d_oiqk6.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_digits);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp9d_oiqk6.pl line 60,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp9d_oiqk6.pl line 60, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp9d_oiqk6.pl line 79, at end of line\nsyntax\
    \ error at /tmp/tmp9d_oiqk6.pl line 79, at EOF\nExecution of /tmp/tmp9d_oiqk6.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 1
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer) = $number % 1;\n\
    \    my($decimal) = $number - $integer;\n    return $decimal;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_digits);\n    my($decimal_digits_left);\n\
    \    my($decimal_digits_right);\n    my($decimal_digits_left_to_right);\n    my($decimal_digits_right_to_left);\n\
    \    my($decimal_digits_left_to_right_or_zero);\n    my($decimal_digits_right_to_left_or_zero);\n\
    \    my($decimal_digits_left_to_right_or_zero_or_zero);\n    my($decimal_digits_right_to_left_or_zero_or_zero);\n\
    \    my($decimal_digits_left_to_right_or_zero_or_zero_or_zero);\n    my($decimal_digits_right_to_left_or_zero_or_zero_or_zero);\n\
    \    my($decimal_digits_left_to_right_or_zero_or_zero_or_zero_or_zero);\n    my($decimal_digits_right_to_left_or_zero_or_zero_or_zero_or_zero);\n\
    \    my($decimal_digits_left_to_right_or_zero_or_zero_or_zero_or_zero_or_zero);\n\
    \    my($decimal_digits_right_to_left_or_zero_or_zero_or_zero_or_zero_or_zero);\n\
    \    my($decimal_digits_left_to_right_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero);\n\
    \    my($decimal_digits_right_to_left_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero);\n\
    \    my($decimal_digits_left_to_right_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero);\n\
    \    my($decimal_digits_right_to_left_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero);\n\
    \    my($decimal_digits_left_to_right_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero);\n\
    \    my($decimal_digits_right_to_left_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero);\n\
    \    my($decimal_digits_left_to_right_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero);\n\
    \    my($decimal_digits_right_to_left_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero);\n\
    \    my($decimal_digits_left_to_right_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero);\n\
    \    my($decimal_digits_right_to_left_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero_or_zero);\n\
    \    my($decimal_digit\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmptiwzmcpf.pl line 36, at end
    of line

    syntax error at /tmp/tmptiwzmcpf.pl line 36, near "$decimal_digit

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmptiwzmcpf.pl line 55, at end of
    line

    syntax error at /tmp/tmptiwzmcpf.pl line 55, at EOF

    Execution of /tmp/tmptiwzmcpf.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 1
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($sign) = $number =~ /^-?([1-9][0-9]*|0)$/;\n    my($integer) = $number\
    \ =~ /^-?[0-9]+$/;\n    my($decimal) = $number =~ /^-?[0-9]*\\.[0-9]+$/;\n   \
    \ if ($integer) {\n        $integer_part = $integer;\n        $decimal_part =\
    \ 1;\n    }\n    elsif ($decimal) {\n        $integer_part = 1;\n        $decimal_part\
    \ = $decimal;\n    }\n    else {\n        $integer_part = $number;\n        $decimal_part\
    \ = 1;\n    }\n    $integer_part += $decimal_part * 10**(length($number) - length($integer_part));\n\
    \    return $sign * $integer_part;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_digits);\n    my($decimal_digits_needed);\n\
    \    my($decimal_digits_left);\n    my($decimal_digits_left_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpq7u0fjz9.pl line 54, at end
    of line

    syntax error at /tmp/tmpq7u0fjz9.pl line 54, near "$decimal_digits_left_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpq7u0fjz9.pl line 73, at end of
    line

    syntax error at /tmp/tmpq7u0fjz9.pl line 73, at EOF

    Execution of /tmp/tmpq7u0fjz9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpwzymbl4s.pl line 28, at
    end of line

    syntax error at /tmp/tmpwzymbl4s.pl line 28, at EOF

    Execution of /tmp/tmpwzymbl4s.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzkmr3ihg.pl line 30, at
    end of line

    syntax error at /tmp/tmpzkmr3ihg.pl line 30, at EOF

    Execution of /tmp/tmpzkmr3ihg.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($sign) = 0;\n    my($remainder) = 0;\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpj76af8ac.pl line 31, at
    end of line

    syntax error at /tmp/tmpj76af8ac.pl line 31, at EOF

    Execution of /tmp/tmpj76af8ac.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    m\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpbmkpilcw.pl line 84,\
    \ near \"sub testhumaneval\"\n  (Might be a runaway multi-line uu string starting\
    \ on line 81)\n\t(Do you need to predeclare sub?)\nUnknown regexp modifier \"\
    /b\" at /tmp/tmpbmkpilcw.pl line 81, at end of line\nsyntax error at /tmp/tmpbmkpilcw.pl\
    \ line 84, near \"sub testhumaneval \"\nMissing right curly or square bracket\
    \ at /tmp/tmpbmkpilcw.pl line 100, at end of line\nExecution of /tmp/tmpbmkpilcw.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimals);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpbqusk0ir.pl line 29, at
    end of line

    syntax error at /tmp/tmpbqusk0ir.pl line 29, at EOF

    Execution of /tmp/tmpbqusk0ir.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_places_string);\n    my($decimal_places_string_length);\n\
    \    my($decimal_places_string_length_string);\n    my($decimal_places_string_length_string_len);\n\
    \    my($decimal_places_string_length_string_len2);\n    my($decimal_places_string_length_string_len3);\n\
    \    my($decimal_places_string_length_string_len4);\n    my($decimal_places_string_length_string_len5);\n\
    \    my($decimal_places_string_length_string_len6);\n    my($decimal_places_string_length_string_len7);\n\
    \    my($decimal_places_string_length_string_len8);\n    my($decimal_places_string_length_string_len9);\n\
    \    my($decimal_places_string_length_string_len10);\n    my($decimal_places_string_length_string_len11);\n\
    \    my($decimal_places_string_length_string_len12);\n    my($decimal_places_string_length_string_len13);\n\
    \    my($decimal_places_string_length_string_len14);\n    my($decimal_places_string_length_string_len15);\n\
    \    my($decimal_places_string_length_string_len16);\n    my($decimal_places_string_length_string_len17);\n\
    \    my($decimal_places_string_length_string_len18);\n    my($decimal_places_string_length_string_len19);\n\
    \    my($decimal_places_string_length_string_len20);\n    my($decimal_places_string_length_string_len21);\n\
    \    my($decimal_places_string_length_string_len22);\n    my($decimal_places_string_length_string_len23);\n\
    \    my($decimal_places_string_length_string_len24);\n    my($decimal_places_string_length_string_len25);\n\
    \    my($decimal_places_string_length_string_len26);\n    my($decimal_places_string_length_string_len27);\n\
    \    my($decimal_places_string_length_string_len28);\n    my($decimal_places_string_length_string_len29);\n\
    \    my($decimal_places_string_length_string_len30);\n    my($decimal_places_string_length_string_len31);\n\
    \    my($decimal_places_string_length_string_len32);\n    my($decimal_places_string_length_string_len33);\n\
    \    my($decimal_places_string_length_string_len34);\n    my($decimal_places_string_length_string_len35);\n\
    \    my($decimal_places_string_length_string_len36);\n    my($decimal_places_string_length_string_len37);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpu9qr_pzx.pl line 69, at
    end of line

    syntax error at /tmp/tmpu9qr_pzx.pl line 69, at EOF

    Execution of /tmp/tmpu9qr_pzx.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_digits);\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp1c2mac2a.pl line 30, at
    end of line

    syntax error at /tmp/tmp1c2mac2a.pl line 30, at EOF

    Execution of /tmp/tmp1c2mac2a.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_places_string);\n    my($decimal_places_string_length);\n\
    \    my($decimal_places_string_length_string);\n    my($decimal_places_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string);\n    my($decimal_places_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string);\n \
    \   my($decimal_places_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp2bt2n5q3.pl line 35, at end
    of line

    syntax error at /tmp/tmp2bt2n5q3.pl line 35, near "$decimal_places_string_length_string_length

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp2bt2n5q3.pl line 54, at end of
    line

    syntax error at /tmp/tmp2bt2n5q3.pl line 54, at EOF

    Execution of /tmp/tmp2bt2n5q3.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($sign) = $number < 0 ? '-' : '';\n    my($decimal_places) = 0;\n    my($decimal_digits);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpwn5wz486.pl line 78, at
    end of line

    syntax error at /tmp/tmpwn5wz486.pl line 78, at EOF

    Execution of /tmp/tmpwn5wz486.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($sign);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmptfa4in4y.pl line 29, at
    end of line

    syntax error at /tmp/tmptfa4in4y.pl line 29, at EOF

    Execution of /tmp/tmptfa4in4y.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpl3z62agm.pl line 29, at
    end of line

    syntax error at /tmp/tmpl3z62agm.pl line 29, at EOF

    Execution of /tmp/tmpl3z62agm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 1
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer) = $number % 1;\n\
    \    my($decimal) = $number % 1;\n    my($remainder) = $number % 1;\n    return\
    \ $decimal if $decimal > 0;\n    return $integer if $integer > 0;\n    return\
    \ $remainder;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\n    my($decimal_places) = 0;\n    my($decimal_digits);\n\
    \    my($decimal_digits_left);\n    my($decimal_digits_right);\n    my($decimal_digits_left_to_right);\n\
    \    my($decimal_digits_right_to_left);\n    my($decimal_digits_left_to_right_digits);\n\
    \    my($decimal_digits_right_to_left_digits);\n    my($decimal_digits_left_to_right_digits_left);\n\
    \    my($decimal_digits_right_to_left_digits_left);\n    my($decimal_digits_left_to_right_digits_right);\n\
    \    my($decimal_digits_right_to_left_digits_right);\n    my($decimal_digits_left_to_right_digits_left_to_right);\n\
    \    my($decimal_digits_right_to_left_digits_left_to_right);\n    my($decimal_digits_left_to_right_digits_left_to_right_digits);\n\
    \    my($decimal_digits_right_to_left_digits_left_to_right_digits);\n    my($decimal_digits_left_to_right_digits_left_to_right_digits_left);\n\
    \    my($decimal_digits_right_to_left_digits_left_to_right_digits_left);\n   \
    \ my($decimal_digits_left_to_right_digits_left_to_right_digits_right);\n    my($decimal_digits_right_to_left_digits_left_to_right_digits_right);\n\
    \    my($decimal_digits_left_to_right_digits_left_to_right_digits_left_to_right);\n\
    \    my($decimal_digits_right_to_left_digits_left_to_right_digits_left_to_right);\n\
    \    my($decimal_digits_left_to_right_digits_left_to_right_digits_left_to_right_digits);\n\
    \    my($decimal_digits_right_to_left_digits_left_to_right_digits_left_to_right_digits);\n\
    \    my($decimal_digits_left_to_right_digits_left_to_right_digits_left_to_right_digits_left);\n\
    \    my($decimal_digits_right_to_left_digits_left_to_right_digits_left_to_right_digits_left);\n\
    \    my($decimal_digits_left_to_right_digits_left_to_right_digits_left_to_right_digits_right);\n\
    \    my($decimal_digits_right_to_left_digits_left_to_right_digits_left_to_right_digits_right);\n\
    \    my($decimal_digits_left_to_right_digits_left_to_right_digits_left_to_right_digits_left_to_right);\n\
    \    my($decimal_digits_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp443bm1zt.pl line 40, at end
    of line

    syntax error at /tmp/tmp443bm1zt.pl line 40, near "$decimal_digits_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp443bm1zt.pl line 59, at end of
    line

    syntax error at /tmp/tmp443bm1zt.pl line 59, at EOF

    Execution of /tmp/tmp443bm1zt.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\n    my($remainder) = 0;\n    my($quotient) = 0;\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp17s_7t5r.pl line 30, at
    end of line

    syntax error at /tmp/tmp17s_7t5r.pl line 30, at EOF

    Execution of /tmp/tmp17s_7t5r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($sign) = 0;\n    my($remainder) = 0;\n \
    \   my($remainder_places) = 0;\n    my($decimal_digits);\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpicbbhqt_.pl line 33, at
    end of line

    syntax error at /tmp/tmpicbbhqt_.pl line 33, at EOF

    Execution of /tmp/tmpicbbhqt_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_digits);\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp1c2mac2a.pl line 30, at
    end of line

    syntax error at /tmp/tmp1c2mac2a.pl line 30, at EOF

    Execution of /tmp/tmp1c2mac2a.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimals);\n    my($remainder);\n    my($sign);\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpbcg2fdxb.pl line 31, at
    end of line

    syntax error at /tmp/tmpbcg2fdxb.pl line 31, at EOF

    Execution of /tmp/tmpbcg2fdxb.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_places_string);\n    my($decimal_places_string_length);\n\
    \    my($decimal_places_string_length_string);\n    my($decimal_places_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string);\n    my($decimal_places_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string);\n \
    \   my($decimal_places_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string);\n\
    \    my($decimal_places_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length);\n\
    \    my($decimal_places_string_length_string_length\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp2bt2n5q3.pl line 35, at end
    of line

    syntax error at /tmp/tmp2bt2n5q3.pl line 35, near "$decimal_places_string_length_string_length

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp2bt2n5q3.pl line 54, at end of
    line

    syntax error at /tmp/tmp2bt2n5q3.pl line 54, at EOF

    Execution of /tmp/tmp2bt2n5q3.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpl3z62agm.pl line 29, at
    end of line

    syntax error at /tmp/tmpl3z62agm.pl line 29, at EOF

    Execution of /tmp/tmpl3z62agm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    m\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpjwpp92x4.pl line 84,\
    \ near \"sub testhumaneval\"\n  (Might be a runaway multi-line uu string starting\
    \ on line 81)\n\t(Do you need to predeclare sub?)\nUnknown regexp modifier \"\
    /b\" at /tmp/tmpjwpp92x4.pl line 81, at end of line\nsyntax error at /tmp/tmpjwpp92x4.pl\
    \ line 84, near \"sub testhumaneval \"\nMissing right curly or square bracket\
    \ at /tmp/tmpjwpp92x4.pl line 100, at end of line\nExecution of /tmp/tmpjwpp92x4.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpl3z62agm.pl line 29, at
    end of line

    syntax error at /tmp/tmpl3z62agm.pl line 29, at EOF

    Execution of /tmp/tmpl3z62agm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 1
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimal) = $number % 1;\n\
    \    my($integer) = $number - $decimal;\n    return $decimal;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 1
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer) = $number % 1;\n\
    \    my($decimal) = $number - $integer;\n    return $decimal;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\n    my($remainder) = 0;\n    my($quotient) = 0;\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp17s_7t5r.pl line 30, at
    end of line

    syntax error at /tmp/tmp17s_7t5r.pl line 30, at EOF

    Execution of /tmp/tmp17s_7t5r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_sign) = 0;\n    my($decimal_digits)\
    \ = 0;\n    my($decimal_digits_after_point);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp42gfnc8_.pl line 60, at end
    of line

    syntax error at /tmp/tmp42gfnc8_.pl line 60, near "$decimal_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp42gfnc8_.pl line 79, at end of
    line

    syntax error at /tmp/tmp42gfnc8_.pl line 79, at EOF

    Execution of /tmp/tmp42gfnc8_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\n    my($remainder) = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpl_ck1hy8.pl line 29, at
    end of line

    syntax error at /tmp/tmpl_ck1hy8.pl line 29, at EOF

    Execution of /tmp/tmpl_ck1hy8.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_digits);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmphd02vk61.pl line 60,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmphd02vk61.pl line 60, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmphd02vk61.pl line 79, at end of line\nsyntax\
    \ error at /tmp/tmphd02vk61.pl line 79, at EOF\nExecution of /tmp/tmphd02vk61.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 1
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer) = $number % 1;\n\
    \    my($decimal) = $number % 1;\n    return $decimal if $decimal > 0;\n    return\
    \ $integer if $integer == 0;\n    return $integer;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzkmr3ihg.pl line 30, at
    end of line

    syntax error at /tmp/tmpzkmr3ihg.pl line 30, at EOF

    Execution of /tmp/tmpzkmr3ihg.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($sign);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmptfa4in4y.pl line 29, at
    end of line

    syntax error at /tmp/tmptfa4in4y.pl line 29, at EOF

    Execution of /tmp/tmptfa4in4y.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    m\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp3vnda73d.pl line 84,\
    \ near \"sub testhumaneval\"\n  (Might be a runaway multi-line uu string starting\
    \ on line 81)\n\t(Do you need to predeclare sub?)\nUnknown regexp modifier \"\
    /b\" at /tmp/tmp3vnda73d.pl line 81, at end of line\nsyntax error at /tmp/tmp3vnda73d.pl\
    \ line 84, near \"sub testhumaneval \"\nMissing right curly or square bracket\
    \ at /tmp/tmp3vnda73d.pl line 100, at end of line\nExecution of /tmp/tmp3vnda73d.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_places_left);\n    my($decimal_places_right);\n\
    \    my($decimal_places_left_to_right);\n    my($decimal_places_right_to_left);\n\
    \    my($decimal_places_left_to_right_to_left);\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpyyt6zhns.pl line 34, at
    end of line

    syntax error at /tmp/tmpyyt6zhns.pl line 34, at EOF

    Execution of /tmp/tmpyyt6zhns.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 1
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer) = $number =~ /^-?\\\
    d+$/;\n    my($decimal) = $number =~ /^-?\\d+\\.\\d*$/;\n    return $decimal if\
    \ $decimal;\n    return $integer if $integer;\n    return $number;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimals_seen);\n    my($decimal_point);\n    my($decimal_points);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n    my($decimal_places);\n\
    \    my($decimal_places);\n    my($decimal_places);\n\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpuyqqdu2i.pl line 100,
    at end of line

    syntax error at /tmp/tmpuyqqdu2i.pl line 100, at EOF

    Execution of /tmp/tmpuyqqdu2i.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    m\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpsp19rvc3.pl line 84,\
    \ near \"sub testhumaneval\"\n  (Might be a runaway multi-line uu string starting\
    \ on line 81)\n\t(Do you need to predeclare sub?)\nUnknown regexp modifier \"\
    /b\" at /tmp/tmpsp19rvc3.pl line 81, at end of line\nsyntax error at /tmp/tmpsp19rvc3.pl\
    \ line 84, near \"sub testhumaneval \"\nMissing right curly or square bracket\
    \ at /tmp/tmpsp19rvc3.pl line 100, at end of line\nExecution of /tmp/tmpsp19rvc3.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    m\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpjwpp92x4.pl line 84,\
    \ near \"sub testhumaneval\"\n  (Might be a runaway multi-line uu string starting\
    \ on line 81)\n\t(Do you need to predeclare sub?)\nUnknown regexp modifier \"\
    /b\" at /tmp/tmpjwpp92x4.pl line 81, at end of line\nsyntax error at /tmp/tmpjwpp92x4.pl\
    \ line 84, near \"sub testhumaneval \"\nMissing right curly or square bracket\
    \ at /tmp/tmpjwpp92x4.pl line 100, at end of line\nExecution of /tmp/tmpjwpp92x4.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    m\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpbmkpilcw.pl line 84,\
    \ near \"sub testhumaneval\"\n  (Might be a runaway multi-line uu string starting\
    \ on line 81)\n\t(Do you need to predeclare sub?)\nUnknown regexp modifier \"\
    /b\" at /tmp/tmpbmkpilcw.pl line 81, at end of line\nsyntax error at /tmp/tmpbmkpilcw.pl\
    \ line 84, near \"sub testhumaneval \"\nMissing right curly or square bracket\
    \ at /tmp/tmpbmkpilcw.pl line 100, at end of line\nExecution of /tmp/tmpbmkpilcw.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_places_string);\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp201akjes.pl line 30, at
    end of line

    syntax error at /tmp/tmp201akjes.pl line 30, at EOF

    Execution of /tmp/tmp201akjes.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_length);\n\
    \    my($decimal_part_index);\n    my($decimal_part_length);\n    my($decimal_part_index);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    m\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpbmkpilcw.pl line 84,\
    \ near \"sub testhumaneval\"\n  (Might be a runaway multi-line uu string starting\
    \ on line 81)\n\t(Do you need to predeclare sub?)\nUnknown regexp modifier \"\
    /b\" at /tmp/tmpbmkpilcw.pl line 81, at end of line\nsyntax error at /tmp/tmpbmkpilcw.pl\
    \ line 84, near \"sub testhumaneval \"\nMissing right curly or square bracket\
    \ at /tmp/tmpbmkpilcw.pl line 100, at end of line\nExecution of /tmp/tmpbmkpilcw.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\n    my($remainder) = 0;\n    my($sign) = 0;\n    my($mantissa) = 0;\n\
    \    my($mantissa_length) = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length)\
    \ = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length)\
    \ = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length)\
    \ = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length)\
    \ = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length)\
    \ = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length)\
    \ = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length)\
    \ = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length)\
    \ = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length)\
    \ = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length)\
    \ = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length)\
    \ = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length)\
    \ = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length)\
    \ = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length)\
    \ = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length)\
    \ = 0;\n    my($mantissa_length) = 0;\n    my($mantissa_length) = 0;\n    my($man\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmphh4jvl4d.pl line 60, at end
    of line

    syntax error at /tmp/tmphh4jvl4d.pl line 60, near "$man

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmphh4jvl4d.pl line 79, at end of
    line

    syntax error at /tmp/tmphh4jvl4d.pl line 79, at EOF

    Execution of /tmp/tmphh4jvl4d.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\n    my($remainder) = 0;\n    my($sign) = 0;\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmprqvol1kz.pl line 30, at
    end of line

    syntax error at /tmp/tmprqvol1kz.pl line 30, at EOF

    Execution of /tmp/tmprqvol1kz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_digits);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma);\n\
    \    my($decimal_digits_after_comma);\n    my($\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp9d_oiqk6.pl line 60,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp9d_oiqk6.pl line 60, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp9d_oiqk6.pl line 79, at end of line\nsyntax\
    \ error at /tmp/tmp9d_oiqk6.pl line 79, at EOF\nExecution of /tmp/tmp9d_oiqk6.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\n    my($remainder) = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpl_ck1hy8.pl line 29, at
    end of line

    syntax error at /tmp/tmpl_ck1hy8.pl line 29, at EOF

    Execution of /tmp/tmpl_ck1hy8.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimal) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp6hu5xffk.pl line 28, at
    end of line

    syntax error at /tmp/tmp6hu5xffk.pl line 28, at EOF

    Execution of /tmp/tmp6hu5xffk.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_sign) = 0;\n    my($decimal_digits);\n\
    \    my($decimal_digits_string);\n    my($decimal_digits_string_length);\n   \
    \ my($decimal_digits_string_length_max);\n    my($decimal_digits_string_length_min);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_index);\n\
    \    my($decimal_digits_string_length_min_index);\n    my($decimal_digits_string_length_max_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpael95f2l.pl line 54, at end
    of line

    syntax error at /tmp/tmpael95f2l.pl line 54, near "$decimal_digits_string_length_max_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpael95f2l.pl line 73, at end of
    line

    syntax error at /tmp/tmpael95f2l.pl line 73, at EOF

    Execution of /tmp/tmpael95f2l.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_sign) = 0;\n    my($sign) = 0;\n\
    \    my($remainder) = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp37t97btn.pl line 32, at
    end of line

    syntax error at /tmp/tmp37t97btn.pl line 32, at EOF

    Execution of /tmp/tmp37t97btn.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_digits);\n    my($decimal_digits_string);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_string_length);\n    my($decimal_digits_string_length);\n\
    \    my($decimal_digits_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpctm4z2c5.pl line 65, at end
    of line

    syntax error at /tmp/tmpctm4z2c5.pl line 65, near "$decimal_digits_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpctm4z2c5.pl line 84, at end of
    line

    syntax error at /tmp/tmpctm4z2c5.pl line 84, at EOF

    Execution of /tmp/tmpctm4z2c5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    m\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpjwpp92x4.pl line 84,\
    \ near \"sub testhumaneval\"\n  (Might be a runaway multi-line uu string starting\
    \ on line 81)\n\t(Do you need to predeclare sub?)\nUnknown regexp modifier \"\
    /b\" at /tmp/tmpjwpp92x4.pl line 81, at end of line\nsyntax error at /tmp/tmpjwpp92x4.pl\
    \ line 84, near \"sub testhumaneval \"\nMissing right curly or square bracket\
    \ at /tmp/tmpjwpp92x4.pl line 100, at end of line\nExecution of /tmp/tmpjwpp92x4.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\n    my($remainder) = 0;\n    my($sign) = 0;\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmprqvol1kz.pl line 30, at
    end of line

    syntax error at /tmp/tmprqvol1kz.pl line 30, at EOF

    Execution of /tmp/tmprqvol1kz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 1
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer) = $number % 1;\n\
    \    my($decimal) = $number % 1;\n    return $decimal if $decimal > 0;\n    return\
    \ $integer if $integer > 0;\n    return $number;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer_part)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp_4e_m29g.pl line 28, at
    end of line

    syntax error at /tmp/tmp_4e_m29g.pl line 28, at EOF

    Execution of /tmp/tmp_4e_m29g.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    m\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp3vnda73d.pl line 84,\
    \ near \"sub testhumaneval\"\n  (Might be a runaway multi-line uu string starting\
    \ on line 81)\n\t(Do you need to predeclare sub?)\nUnknown regexp modifier \"\
    /b\" at /tmp/tmp3vnda73d.pl line 81, at end of line\nsyntax error at /tmp/tmp3vnda73d.pl\
    \ line 84, near \"sub testhumaneval \"\nMissing right curly or square bracket\
    \ at /tmp/tmp3vnda73d.pl line 100, at end of line\nExecution of /tmp/tmp3vnda73d.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimals_seen);\n    my($decimal_point);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($decimal_point_seen);\n\
    \    my($decimal_point_seen);\n    my($decimal_point_seen);\n    my($\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmphpttsubo.pl line 72,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmphpttsubo.pl line 72, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmphpttsubo.pl line 91, at end of line\nsyntax\
    \ error at /tmp/tmphpttsubo.pl line 91, at EOF\nExecution of /tmp/tmphpttsubo.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_places_left);\n    my($decimal_places_right);\n\
    \    my($decimal_places_left_to_right);\n    my($decimal_places_right_to_left);\n\
    \    my($decimal_places_left_to_right_to_left);\n    my($decimal_places_right_to_left_to_right);\n\
    \    my($decimal_places_left_to_right_to_left_to_right);\n    my($decimal_places_right_to_left_to_right_to_left);\n\
    \    my($decimal_places_right_to_left_to_right_to_left_to_right);\n    my($decimal_places_right_to_left_to_right_to_left_to_right_to_left);\n\
    \    my($decimal_places_right_to_left_to_right_to_left_to_right_to_left_to_right);\n\
    \    my($decimal_places_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left);\n\
    \    my($decimal_places_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right);\n\
    \    my($decimal_places_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left);\n\
    \    my($decimal_places_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right);\n\
    \    my($decimal_places_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left);\n\
    \    my($decimal_places_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right);\n\
    \    my($decimal_places_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left);\n\
    \    my($decimal_places_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right);\n\
    \    my($decimal_places_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left);\n\
    \    my($decimal_places_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left);\n\
    \    my($decimal_places_right_to_left_to_right_to_left_to_right_\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpse514sc7.pl line 32, at end
    of line

    syntax error at /tmp/tmpse514sc7.pl line 32, near "$decimal_places_right_to_left_to_right_to_left_to_right_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpse514sc7.pl line 51, at end of
    line

    syntax error at /tmp/tmpse514sc7.pl line 51, at EOF

    Execution of /tmp/tmpse514sc7.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer) = 0;\n    my($decimal)\
    \ = 0;\n    my($remainder) = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpr7iuybes.pl line 29, at
    end of line

    syntax error at /tmp/tmpr7iuybes.pl line 29, at EOF

    Execution of /tmp/tmpr7iuybes.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer) = $number =~ /^-?\\\
    d+$/;\n    my($decimal) = $number =~ /^-?\\d+\\.\\d*$/;\n    my($decimals) = $decimal\
    \ =~ /^\\d+$/;\n    my($decimals) = $decimals ? ($decimals + 1) : 0;\n    my($decimal)\
    \ = $decimal =~ /^\\d+\\.\\d*$/;\n    my($decimal) = $decimal =~ /^\\d+\\.\\d*$/;\n\
    \    my($decimal) = $decimal =~ /^\\d+\\.\\d*$/;\n    my($decimal) = $decimal\
    \ =~ /^\\d+\\.\\d*$/;\n    my($decimal) = $decimal =~ /^\\d+\\.\\d*$/;\n    my($decimal)\
    \ = $decimal =~ /^\\d+\\.\\d*$/;\n    my($decimal) = $decimal =~ /^\\d+\\.\\d*$/;\n\
    \    my($decimal) = $decimal =~ /^\\d+\\.\\d*$/;\n    my($decimal) = $decimal\
    \ =~ /^\\d+\\.\\d*$/;\n    my($decimal) = $decimal =~ /^\\d+\\.\\d*$/;\n    my($decimal)\
    \ = $decimal =~ /^\\d+\\.\\d*$/;\n    my($decimal) = $decimal =~ /^\\d+\\.\\d*$/;\n\
    \    my($decimal) = $decimal =~ /^\\d+\\.\\d*$/;\n    my($decimal) = $decimal\
    \ =~ /^\\d+\\.\\d*$/;\n    my($decimal) = $decimal =~ /^\\d+\\.\\d*$/;\n    my($decimal)\
    \ = $decimal =~ /^\\d+\\.\\d*$/;\n    my($decimal) = $decimal =~ /^\\d+\\.\\d*$/;\n\
    \    my($decimal) = $decimal =~ /^\\d+\\.\\d*$/;\n    my($decimal) = $decimal\
    \ =~ /^\\d+\\.\\d*$/;\n    my($decimal) = $decimal =~ /^\\d+\\.\\d*$/;\n    my($decimal)\
    \ = $decimal =~ /^\\d+\\.\\d*$/;\n    my($decimal) = $decimal =~ /^\\d+\\.\\d*$/;\n\
    \    my($decimal) = $decimal =~ /^\\d+\\.\\d*$/;\n    my($decimal) = $decimal\
    \ =~ /^\\d+\\.\\d*$/;\n    my($decimal) = $decimal =~ /^\\d+\\.\\d*$/;\n    my($decimal)\
    \ = $decimal =~ /^\\d+\\.\\d*$/;\n    my($decimal) = $decimal =~ /^\\d+\\.\\d*$/;\n\
    \    my($decimal) = $decimal =~ /^\\d+\\.\\d*$/;\n    m\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp9_8ys7y9.pl line 43,\
    \ near \"sub testhumaneval\"\n  (Might be a runaway multi-line uu string starting\
    \ on line 40)\n\t(Do you need to predeclare sub?)\nUnknown regexp modifier \"\
    /b\" at /tmp/tmp9_8ys7y9.pl line 40, at end of line\nsyntax error at /tmp/tmp9_8ys7y9.pl\
    \ line 43, near \"sub testhumaneval \"\nMissing right curly or square bracket\
    \ at /tmp/tmp9_8ys7y9.pl line 59, at end of line\nExecution of /tmp/tmp9_8ys7y9.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_digits);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point);\n    my($decimal_digits_after_comma_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpyn4q06v5.pl line 29, at end
    of line

    syntax error at /tmp/tmpyn4q06v5.pl line 29, near "$decimal_digits_after_comma_and_point_and_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpyn4q06v5.pl line 48, at end of
    line

    syntax error at /tmp/tmpyn4q06v5.pl line 48, at EOF

    Execution of /tmp/tmpyn4q06v5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpwzymbl4s.pl line 28, at
    end of line

    syntax error at /tmp/tmpwzymbl4s.pl line 28, at EOF

    Execution of /tmp/tmpwzymbl4s.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpl3z62agm.pl line 29, at
    end of line

    syntax error at /tmp/tmpl3z62agm.pl line 29, at EOF

    Execution of /tmp/tmpl3z62agm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($sign);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmptfa4in4y.pl line 29, at
    end of line

    syntax error at /tmp/tmptfa4in4y.pl line 29, at EOF

    Execution of /tmp/tmptfa4in4y.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    m\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpjwpp92x4.pl line 84,\
    \ near \"sub testhumaneval\"\n  (Might be a runaway multi-line uu string starting\
    \ on line 81)\n\t(Do you need to predeclare sub?)\nUnknown regexp modifier \"\
    /b\" at /tmp/tmpjwpp92x4.pl line 81, at end of line\nsyntax error at /tmp/tmpjwpp92x4.pl\
    \ line 84, near \"sub testhumaneval \"\nMissing right curly or square bracket\
    \ at /tmp/tmpjwpp92x4.pl line 100, at end of line\nExecution of /tmp/tmpjwpp92x4.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($sign);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmptfa4in4y.pl line 29, at
    end of line

    syntax error at /tmp/tmptfa4in4y.pl line 29, at EOF

    Execution of /tmp/tmptfa4in4y.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_digits);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_point);\n    my($\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmphd02vk61.pl line 60,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmphd02vk61.pl line 60, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmphd02vk61.pl line 79, at end of line\nsyntax\
    \ error at /tmp/tmphd02vk61.pl line 79, at EOF\nExecution of /tmp/tmphd02vk61.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\n    my($remainder) = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpl_ck1hy8.pl line 29, at
    end of line

    syntax error at /tmp/tmpl_ck1hy8.pl line 29, at EOF

    Execution of /tmp/tmpl_ck1hy8.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpl3z62agm.pl line 29, at
    end of line

    syntax error at /tmp/tmpl3z62agm.pl line 29, at EOF

    Execution of /tmp/tmpl3z62agm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 1
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer) = $number % 1;\n\
    \    my($decimal) = abs($number - $integer);\n    return $decimal;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_places_left);\n    my($decimal_places_right);\n\
    \    my($decimal_places_left_to_right);\n    my($decimal_places_right_to_left);\n\
    \    my($decimal_places_left_to_right_to_left);\n    my($decimal_places_right_to_left_to_left);\n\
    \    my($decimal_places_left_to_right_to_left_to_left);\n    my($decimal_places_right_to_left_to_left_to_left);\n\
    \    my($decimal_places_right_to_left_to_left_to_left_to_left);\n    my($decimal_places_right_to_left_to_left_to_left_to_left_to_left);\n\
    \    my($decimal_places_right_to_left_to_left_to_left_to_left_to_left_to_left);\n\
    \    my($decimal_places_right_to_left_to_left_to_left_to_left_to_left_to_left_to_left);\n\
    \    my($decimal_places_right_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left);\n\
    \    my($decimal_places_right_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left);\n\
    \    my($decimal_places_right_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left);\n\
    \    my($decimal_places_right_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left);\n\
    \    my($decimal_places_right_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left);\n\
    \    my($decimal_places_right_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left);\n\
    \    my($decimal_places_right_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left);\n\
    \    my($decimal_places_right_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left);\n\
    \    my($decimal_places_right_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left);\n\
    \    my($decimal_places_right_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left_to_left);\n\
    \    my($decimal_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp7uk02y5q.pl line 33, at end
    of line

    syntax error at /tmp/tmp7uk02y5q.pl line 33, near "$decimal_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp7uk02y5q.pl line 52, at end of
    line

    syntax error at /tmp/tmp7uk02y5q.pl line 52, at EOF

    Execution of /tmp/tmp7uk02y5q.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($sign) = $number =~ /^-?([1-9]\\d*|0)$/;\n    $integer_part = $number\
    \ =~ /^-?([1-9]\\d*)$/;\n    $decimal_part = $number =~ /^-?([1-9]\\d*\\.\\d*|0)$/;\n\
    \    $decimal_part += $integer_part if $integer_part != 0;\n    $decimal_part\
    \ += 1 if $decimal_part == 0;\n    $decimal_part *= 10 if $decimal_part == 0;\n\
    \    $decimal_part += 1 if $decimal_part == 0;\n    $decimal_part *= 10 if $decimal_part\
    \ == 0;\n    $decimal_part += 1 if $decimal_part == 0;\n    $decimal_part *= 10\
    \ if $decimal_part == 0;\n    $decimal_part += 1 if $decimal_part == 0;\n    $decimal_part\
    \ *= 10 if $decimal_part == 0;\n    $decimal_part += 1 if $decimal_part == 0;\n\
    \    $decimal_part *= 10 if $decimal_part == 0;\n    $decimal_part += 1 if $decimal_part\
    \ == 0;\n    $decimal_part *= 10 if $decimal_part == 0;\n    $decimal_part +=\
    \ 1 if $decimal_part == 0;\n    $decimal_part *= 10 if $decimal_part == 0;\n \
    \   $decimal_part += 1 if $decimal_part == 0;\n    $decimal_part *= 10 if $decimal_part\
    \ == 0;\n    $decimal_part += 1 if $decimal_part == 0;\n    $decimal_part *= 10\
    \ if $decimal_part == 0;\n    $decimal_part += 1 if $decimal_part == 0;\n    $decimal_part\
    \ *= 10 if $decimal_part == 0;\n    $decimal_part += 1 if $decimal_part == 0;\n\
    \    $decimal_part *= 10 if $decimal_part == 0;\n    $decimal_part += 1 if $decimal_part\
    \ == 0;\n    $decimal_part *= 10 if $decimal_part == 0;\n    $decimal_part +=\
    \ 1 if $decimal_part == 0;\n    $decimal_part *= 10 if $decimal_part == 0;\n \
    \   $decimal_part += 1 if $decimal_part == 0;\n    $decimal_part *= 10 if $decimal_part\
    \ == 0;\n    $decimal_part += 1 if $decimal_part == 0;\n    $decimal_part *= 10\
    \ if $decimal_part == 0;\n    $decimal_part += 1 if $decimal_part == 0;\n    $decimal_part\
    \ *= 10 if $decimal_part == 0;\n    $decimal_part += 1 if $decimal_part == 0;\n\
    \    $decimal_part *= 10 if $decimal_part == 0;\n    $decimal_part += 1 if $decimal_part\
    \ == 0;\n    $decimal_part *= 10 if $decimal_part == 0;\n    $decimal_part +=\
    \ 1 if $decimal_part == 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp5zzvkgc8.pl line 69, at
    end of line

    syntax error at /tmp/tmp5zzvkgc8.pl line 69, at EOF

    Execution of /tmp/tmp5zzvkgc8.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_remainder);\n    my($decimal_part_remainder_length);\n\
    \    my($decimal_part_remainder_remainder);\n    my($decimal_part_remainder_remainder_length);\n\
    \    my($decimal_part_remainder_remainder_remainder);\n    my($decimal_part_remainder_remainder_remainder_length);\n\
    \    my($decimal_part_remainder_remainder_remainder_remainder);\n    my($decimal_part_remainder_remainder_remainder_length);\n\
    \    my($decimal_part_remainder_remainder_remainder_remainder);\n    my($decimal_part_remainder_remainder_remainder_length);\n\
    \    my($decimal_part_remainder_remainder_remainder_remainder);\n    my($decimal_part_remainder_remainder_remainder_length);\n\
    \    my($decimal_part_remainder_remainder_remainder_remainder);\n    my($decimal_part_remainder_remainder_remainder_length);\n\
    \    my($decimal_part_remainder_remainder_remainder_remainder);\n    my($decimal_part_remainder_remainder_remainder_length);\n\
    \    my($decimal_part_remainder_remainder_remainder_remainder);\n    my($decimal_part_remainder_remainder_remainder_length);\n\
    \    my($decimal_part_remainder_remainder_remainder_remainder);\n    my($decimal_part_remainder_remainder_remainder_length);\n\
    \    my($decimal_part_remainder_remainder_remainder_remainder);\n    my($decimal_part_remainder_remainder_remainder_length);\n\
    \    my($decimal_part_remainder_remainder_remainder_remainder);\n    my($decimal_part_remainder_remainder_remainder_length);\n\
    \    my($decimal_part_remainder_remainder_remainder_remainder);\n    my($decimal_part_remainder_remainder_remainder_length);\n\
    \    my($decimal_part_remainder_remainder_remainder_remainder);\n    my($decimal_part_remainder_remainder_remainder_length);\n\
    \    my($decimal_part_remainder_remainder_remainder_remainder);\n    my($decimal_part_remainder_remainder_remainder_length);\n\
    \    my($decimal_part_remainder_remainder_remainder_remainder);\n    my($decimal_part_remainder_remainder_remainder_length);\n\
    \    my($decimal_part_remainder_remainder_remainder_remainder);\n    my($decimal_part_remainder_remainder_remainder_length);\n\
    \    my($decimal_part_remainder_remainder_remainder_remainder);\n    my($decimal_part_remainder_remainder_remainder_length);\n\
    \    my($decimal_part_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpj_gs6ssg.pl line 47, at end
    of line

    syntax error at /tmp/tmpj_gs6ssg.pl line 47, near "$decimal_part_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpj_gs6ssg.pl line 66, at end of
    line

    syntax error at /tmp/tmpj_gs6ssg.pl line 66, at EOF

    Execution of /tmp/tmpj_gs6ssg.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_digits);\n    my($decimal_digits_after_point);\n\
    \    my($decimal_digits_after_comma);\n    my($decimal_digits_after_comma_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point);\n    my($decimal_digits_after_comma_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point_and_point);\n\
    \    my($decimal_digits_after_comma_and_point_and_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpyn4q06v5.pl line 29, at end
    of line

    syntax error at /tmp/tmpyn4q06v5.pl line 29, near "$decimal_digits_after_comma_and_point_and_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpyn4q06v5.pl line 48, at end of
    line

    syntax error at /tmp/tmpyn4q06v5.pl line 48, at EOF

    Execution of /tmp/tmpyn4q06v5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    m\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpsp19rvc3.pl line 84,\
    \ near \"sub testhumaneval\"\n  (Might be a runaway multi-line uu string starting\
    \ on line 81)\n\t(Do you need to predeclare sub?)\nUnknown regexp modifier \"\
    /b\" at /tmp/tmpsp19rvc3.pl line 81, at end of line\nsyntax error at /tmp/tmpsp19rvc3.pl\
    \ line 84, near \"sub testhumaneval \"\nMissing right curly or square bracket\
    \ at /tmp/tmpsp19rvc3.pl line 100, at end of line\nExecution of /tmp/tmpsp19rvc3.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    my($decimal_part_size);\n\
    \    my($decimal_part_size);\n    my($decimal_part_size);\n    m\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpsp19rvc3.pl line 84,\
    \ near \"sub testhumaneval\"\n  (Might be a runaway multi-line uu string starting\
    \ on line 81)\n\t(Do you need to predeclare sub?)\nUnknown regexp modifier \"\
    /b\" at /tmp/tmpsp19rvc3.pl line 81, at end of line\nsyntax error at /tmp/tmpsp19rvc3.pl\
    \ line 84, near \"sub testhumaneval \"\nMissing right curly or square bracket\
    \ at /tmp/tmpsp19rvc3.pl line 100, at end of line\nExecution of /tmp/tmpsp19rvc3.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_digits);\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp1c2mac2a.pl line 30, at
    end of line

    syntax error at /tmp/tmp1c2mac2a.pl line 30, at EOF

    Execution of /tmp/tmp1c2mac2a.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\n    my($remainder) = 0;\n    my($remainder_decimals) = 0;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpq4rtaxim.pl line 30, at
    end of line

    syntax error at /tmp/tmpq4rtaxim.pl line 30, at EOF

    Execution of /tmp/tmpq4rtaxim.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpl3z62agm.pl line 29, at
    end of line

    syntax error at /tmp/tmpl3z62agm.pl line 29, at EOF

    Execution of /tmp/tmpl3z62agm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzkmr3ihg.pl line 30, at
    end of line

    syntax error at /tmp/tmpzkmr3ihg.pl line 30, at EOF

    Execution of /tmp/tmpzkmr3ihg.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 1
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer) = $number % 1;\n\
    \    my($decimal) = $number % 1;\n    return $decimal if $decimal > 0;\n    return\
    \ $integer if $integer == 0;\n    return $number;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    my($decimal_part_index);\n\
    \    my($decimal_part_index);\n    my($decimal_part_index);\n    m\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpjwpp92x4.pl line 84,\
    \ near \"sub testhumaneval\"\n  (Might be a runaway multi-line uu string starting\
    \ on line 81)\n\t(Do you need to predeclare sub?)\nUnknown regexp modifier \"\
    /b\" at /tmp/tmpjwpp92x4.pl line 81, at end of line\nsyntax error at /tmp/tmpjwpp92x4.pl\
    \ line 84, near \"sub testhumaneval \"\nMissing right curly or square bracket\
    \ at /tmp/tmpjwpp92x4.pl line 100, at end of line\nExecution of /tmp/tmpjwpp92x4.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_digits);\n    my($decimal_digits_needed);\n\
    \    my($decimal_digits_left);\n    my($decimal_digits_left_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_to_display_needed);\n    my($decimal_digits_left_to_display);\n\
    \    my($decimal_digits_left_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpq7u0fjz9.pl line 54, at end
    of line

    syntax error at /tmp/tmpq7u0fjz9.pl line 54, near "$decimal_digits_left_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpq7u0fjz9.pl line 73, at end of
    line

    syntax error at /tmp/tmpq7u0fjz9.pl line 73, at EOF

    Execution of /tmp/tmpq7u0fjz9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($sign) = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp4tid_p4t.pl line 30, at
    end of line

    syntax error at /tmp/tmp4tid_p4t.pl line 30, at EOF

    Execution of /tmp/tmp4tid_p4t.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\n    my($remainder) = 0;\n    my($decimals_left) = 0;\n    my($decimal_part)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpfbtbg1ws.pl line 31, at
    end of line

    syntax error at /tmp/tmpfbtbg1ws.pl line 31, at EOF

    Execution of /tmp/tmpfbtbg1ws.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_places) = 0;\n    my($decimal_digits);\n    my($decimal_digits_string);\n\
    \    my($decimal_digits_string_length);\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpncn3ecg4.pl line 32, at
    end of line

    syntax error at /tmp/tmpncn3ecg4.pl line 32, at EOF

    Execution of /tmp/tmpncn3ecg4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 1
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer) = $number =~ /^-?\\\
    d+$/;\n    my($decimal) = $number =~ /^-?\\d*\\.?\\d*$/;\n    return $decimal\
    \ if $decimal;\n    return $integer if $integer;\n    return $number;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_index);\n    my($decimal_part_string);\n\
    \    my($decimal_part_string_length);\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpakvw3itf.pl line 32, at
    end of line

    syntax error at /tmp/tmpakvw3itf.pl line 32, at EOF

    Execution of /tmp/tmpakvw3itf.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($decimals) = 0;\n    my($integer)\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2k_fdbhs.pl line 28, at
    end of line

    syntax error at /tmp/tmp2k_fdbhs.pl line 28, at EOF

    Execution of /tmp/tmp2k_fdbhs.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpl3z62agm.pl line 29, at
    end of line

    syntax error at /tmp/tmpl3z62agm.pl line 29, at EOF

    Execution of /tmp/tmpl3z62agm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n\
    \        if(eq_deeply($candidate->(3.5),0.5)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjw0hu28r.pl line 28, at
    end of line

    syntax error at /tmp/tmpjw0hu28r.pl line 28, at EOF

    Execution of /tmp/tmpjw0hu28r.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    my($decimal_part_length);\n\
    \    my($decimal_part_length);\n    my($decimal_part_length);\n    m\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp3vnda73d.pl line 84,\
    \ near \"sub testhumaneval\"\n  (Might be a runaway multi-line uu string starting\
    \ on line 81)\n\t(Do you need to predeclare sub?)\nUnknown regexp modifier \"\
    /b\" at /tmp/tmp3vnda73d.pl line 81, at end of line\nsyntax error at /tmp/tmp3vnda73d.pl\
    \ line 84, near \"sub testhumaneval \"\nMissing right curly or square bracket\
    \ at /tmp/tmp3vnda73d.pl line 100, at end of line\nExecution of /tmp/tmp3vnda73d.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($remainder);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpzjpvwnh_.pl line 29, at
    end of line

    syntax error at /tmp/tmpzjpvwnh_.pl line 29, at EOF

    Execution of /tmp/tmpzjpvwnh_.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
- exit_code: 255
  program: "# Given a positive floating point number, it can be decomposed into\n\
    # and integer part (largest integer smaller than given number) and decimals\n\
    # (leftover part always smaller than 1).\n# Return the decimal part of the number.\n\
    sub truncate_number {\n    my($number) = @_;\n    my($integer_part);\n    my($decimal_part);\n\
    \    my($decimal_part_length);\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&truncate_number;\n        if(eq_deeply($candidate->(3.5),0.5))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1.25),0.25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123.0),0.0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpl3z62agm.pl line 29, at
    end of line

    syntax error at /tmp/tmpl3z62agm.pl line 29, at EOF

    Execution of /tmp/tmpl3z62agm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660015609
