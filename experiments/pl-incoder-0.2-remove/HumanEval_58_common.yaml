name: HumanEval_58_common
language: pl
prompt: "# Return sorted unique common elements for two lists.\nsub common {\n   \
  \ my($l1, $l2) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&common;\n\
  \        if(eq_deeply($candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653,\
  \ 121]),[1, 5, 653])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([5, 3, 2, 8], [3, 2]),[2, 3])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 3, 2, 8], [3, 2, 4]),[2, 3, 4])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], []),[])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my %seen;\n    grep !$seen{$_}++, @$l1 & @$l2;\n}", "    my @common;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $l1_len = $#l1;\n    my $l2_len = $#l2;\n\
    \    while($i < $l1_len && $j < $l2_len) {\n        if($l1[$i] eq $l2[$j]) {\n\
    \            push(@common, $l1[$i]);\n            $i++;\n            $j++;\n \
    \       } elsif($l1[$i] lt $l2[$j]) {\n            $i++;\n        } elsif($l1[$i]\
    \ gt $l2[$j]) {\n            $j++;\n        } else {\n            $i++;\n    \
    \        $j++;\n        }\n    }\n    return @common;\n}", "    my @common;\n\
    \    foreach my $element (@$l1) {\n        foreach my $other_element (@$l2) {\n\
    \            if ($element eq $other_element) {\n                push(@common,\
    \ $element);\n            }\n        }\n    }\n    return @common;\n}", "    my\
    \ @common;\n    my $l1_count = scalar($l1);\n    my $l2_count = scalar($l2);\n\
    \    my $i = 0;\n    my $j = 0;\n    my $common_count = 0;\n    my $common_element;\n\
    \    while ($i < $l1_count && $j < $l2_count) {\n        if ($l1->[$i] eq $l2->[$j])\
    \ {\n            $common_element = $l1->[$i];\n            $common_count++;\n\
    \            $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j])\
    \ {\n            $j++;\n        } elsif ($l1->[$i] gt $l2->[$j]) {\n         \
    \   $i++;\n        } else {\n            push (@common, $common_element);\n  \
    \          $common_count++;\n            $i++;\n            $j++;\n        }\n\
    \    }\n    return $common_count;\n}", "    my @common;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $found = 0;\n    while ($i < @$l1 && $j < @$l2) {\n        if\
    \ ($l1->[$i] eq $l2->[$j]) {\n            $common[$found++] = $l1->[$i];\n   \
    \         $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j]) {\n\
    \            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n\
    \        } else {\n            $i++;\n            $j++;\n        }\n    }\n  \
    \  return @common;\n}", "    my %hash;\n    foreach my $elem (@$l1) {\n      \
    \  $hash{$elem} = 1;\n    }\n    foreach my $elem (@$l2) {\n        $hash{$elem}\
    \ = 1;\n    }\n    return sort keys %hash;\n}", "    my %seen;\n    foreach my\
    \ $elem (@$l1) {\n        $seen{$elem}++;\n    }\n    foreach my $elem (@$l2)\
    \ {\n        $seen{$elem}--;\n    }\n    return keys %seen;\n}", "    my %seen;\n\
    \    foreach my $elem (@$l1) {\n        $seen{$elem}++;\n    }\n    foreach my\
    \ $elem (@$l2) {\n        $seen{$elem}--;\n    }\n    return keys %seen;\n}",
  "    my @common;\n    foreach my $element (@$l1) {\n        foreach my $other_element\
    \ (@$l2) {\n            if ($element eq $other_element) {\n                push(@common,\
    \ $element);\n                last;\n            }\n        }\n    }\n    return\
    \ @common;\n}", "    my %seen;\n    my @common;\n    foreach my $item (@$l1) {\n\
    \        $seen{$item}++;\n    }\n    foreach my $item (@$l2) {\n        $seen{$item}--;\n\
    \        if ($seen{$item} == 0) {\n            push(@common, $item);\n       \
    \ }\n    }\n    return @common;\n}", "    my @common;\n    my $i;\n    my $j;\n\
    \    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my\
    \ $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n\
    \    my $x;\n    my $y;\n    my $z;\n    my $A;\n    my $B;\n    my $C;\n    my\
    \ $D;\n    my $E;\n    my $F;\n    my $G;\n    my $H;\n    my $I;\n    my $J;\n\
    \    my $K;\n    my $L;\n    my $M;\n    my $N;\n    my $O;\n    my $P;\n    my\
    \ $Q;\n    my $R;\n    my $S;\n    my $T;\n    my $U;\n    my $V;\n    my $W;\n\
    \    my $X;\n    my $Y;\n    my $Z;\n    my $_;\n    my $a;\n    my $b;\n    my\
    \ $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n    my $i;\n\
    \    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my $o;\n    my\
    \ $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n    my $v;\n\
    \    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $A;\n    my $B;\n    my\
    \ $C;\n    my $D;\n    my $E;\n    my $F;\n    my $G;\n    my $H;\n    my $I;\n\
    \    my $J;\n    my $K;\n    my $L;\n    my $M;\n    my $N;\n    my $O;\n    my\
    \ $P;\n    my $Q;\n    my $R;\n    my $S;\n    my $T;\n    my $U;\n    my $V;\n\
    \    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n    my $_;\n    my $a;\n    my\
    \ $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n", "    my @common\
    \ = ();\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < @$l1\
    \ && $j < @$l2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push(@common,\
    \ $l1->[$i]);\n            $i++;\n            $j++;\n        } elsif ($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            $i++;\n            $j++;\n\
    \        }\n    }\n    return @common;\n}", "    my @common;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    while ($i < @$l1 && $j < @$l2) {\n      \
    \  if ($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n     \
    \       $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j]) {\n\
    \            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n\
    \        } else {\n            $i++;\n            $j++;\n        }\n    }\n  \
    \  return @common;\n}", "    my %hash;\n    foreach my $elem (@$l1) {\n      \
    \  $hash{$elem} = 1;\n    }\n    foreach my $elem (@$l2) {\n        $hash{$elem}\
    \ = 1;\n    }\n    return keys %hash;\n}", "    my @common;\n    my $l1_count\
    \ = scalar(@$l1);\n    my $l2_count = scalar(@$l2);\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $common_count = 0;\n    my $l1_element;\n    my $l2_element;\n\
    \    my $common_element;\n    while ($i < $l1_count && $j < $l2_count) {\n   \
    \     $l1_element = $l1->[$i];\n        $l2_element = $l2->[$j];\n        if ($l1_element\
    \ eq $l2_element) {\n            $common_count++;\n            $common_element\
    \ = $l1_element;\n        }\n        $i++;\n        $j++;\n    }\n    while ($i\
    \ < $l1_count) {\n        $l1_element = $l1->[$i];\n        $common_count++;\n\
    \        $common_element = $l1_element;\n        $i++;\n    }\n    while ($j <\
    \ $l2_count) {\n        $l2_element = $l2->[$j];\n        $common_count++;\n \
    \       $common_element = $l2_element;\n        $j++;\n    }\n    return ($common_count,\
    \ $common_element);\n}", "    my %seen;\n    foreach my $elem (@$l1) {\n     \
    \   $seen{$elem}++;\n    }\n    foreach my $elem (@$l2) {\n        $seen{$elem}--;\n\
    \    }\n    return sort keys %seen;\n}", "    my %common;\n    foreach my $elem\
    \ (@$l1) {\n        $common{$elem} = 1;\n    }\n    foreach my $elem (@$l2) {\n\
    \        $common{$elem} = 1;\n    }\n    return keys %common;\n}", "    my $common;\n\
    \    my $l1_count = scalar($l1);\n    my $l2_count = scalar($l2);\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $k = 0;\n    my $l1_max = $l1_count - 1;\n    my\
    \ $l2_max = $l2_count - 1;\n    while($i < $l1_max && $j < $l2_max) {\n      \
    \  if($l1->[$i] eq $l2->[$j]) {\n            $common->[$k] = $l1->[$i];\n    \
    \        $i++;\n            $j++;\n            $k++;\n        } elsif($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            $i++;\n            $j++;\n\
    \        }\n    }\n    while($i < $l1_max) {\n        $common->[$k] = $l1->[$i];\n\
    \        $i++;\n        $k++;\n    }\n    while($j < $l2_max) {\n        $common->[$k]\
    \ = $l2->[$j];\n        $j++;\n        $k++;\n    }\n    return $common;\n}",
  "    my @common;\n    foreach my $i (0 .. $#l1) {\n        foreach my $j (0 .. $#l2)\
    \ {\n            if ($l1[$i] eq $l2[$j]) {\n                push(@common, $l1[$i]);\n\
    \                last;\n            }\n        }\n    }\n    return @common;\n\
    }", "    my @common = ();\n    foreach my $element (@$l1) {\n        foreach my\
    \ $element (@$l2) {\n            if ($element eq $element) {\n               \
    \ push @common, $element;\n            }\n        }\n    }\n    return @common;\n\
    }", "    my @common = ();\n    my $i = 0;\n    my $j = 0;\n    while($i < @$l1\
    \ && $j < @$l2) {\n        if($l1->[$i] eq $l2->[$j]) {\n            push @common,\
    \ $l1->[$i];\n            $i++;\n            $j++;\n        } elsif($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            push @common, $l1->[$i];\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my @common;\n    foreach my $elem (@$l1) {\n\tforeach my $elem2 (@$l2)\
    \ {\n\t    push @common, $elem if $elem eq $elem2;\n\t}\n    }\n    return @common;\n\
    }", "    my(@l1, @l2);\n    foreach my $l (@{$l1}, @{$l2}) {\n        push @l1,\
    \ $l if $l->[0] eq $l->[1];\n        push @l2, $l if $l->[0] ne $l->[1];\n   \
    \ }\n    return @l1 unless @l2;\n    return @l2 unless @l1;\n    return sort {\
    \ $a->[0] cmp $b->[0] } @l1;\n}", "    my %seen;\n    foreach my $elem (@$l1)\
    \ {\n        $seen{$elem}++;\n    }\n    foreach my $elem (@$l2) {\n        $seen{$elem}--;\n\
    \    }\n    return keys %seen;\n}", "    my %seen;\n    my @common;\n    foreach\
    \ my $elem (@$l1) {\n        if (!$seen{$elem}++) {\n            push(@common,\
    \ $elem);\n        }\n    }\n    foreach my $elem (@$l2) {\n        if (!$seen{$elem}++)\
    \ {\n            push(@common, $elem);\n        }\n    }\n    return @common;\n\
    }", "    my @common;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$l1 &&\
    \ $j < @$l2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push @common,\
    \ $l1->[$i];\n            $i++;\n            $j++;\n        } elsif ($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } else {\n            $j++;\n  \
    \      }\n    }\n    return @common;\n}", "    my @common;\n    my $i = 0;\n \
    \   my $j = 0;\n    while ($i < @$l1 and $j < @$l2) {\n        if ($l1->[$i] eq\
    \ $l2->[$j]) {\n            push @common, $l1->[$i];\n            $i++;\n    \
    \        $j++;\n        } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n\
    \        } else {\n            $j++;\n        }\n    }\n    return @common;\n}",
  "    my @common;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while($i <\
    \ @$l1 && $j < @$l2) {\n        if($l1->[$i] eq $l2->[$j]) {\n            push\
    \ @common, $l1->[$i];\n            $i++;\n            $j++;\n        } elsif($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            $i++;\n            $j++;\n\
    \        }\n    }\n    return @common;\n}", "    my $l3 = [];\n    my $l4 = [];\n\
    \    my $l5 = [];\n    my $l6 = [];\n    my $l7 = [];\n    my $l8 = [];\n    my\
    \ $l9 = [];\n    my $l10 = [];\n    my $l11 = [];\n    my $l12 = [];\n    my $l13\
    \ = [];\n    my $l14 = [];\n    my $l15 = [];\n    my $l16 = [];\n    my $l17\
    \ = [];\n    my $l18 = [];\n    my $l19 = [];\n    my $l20 = [];\n    my $l21\
    \ = [];\n    my $l22 = [];\n    my $l23 = [];\n    my $l24 = [];\n    my $l25\
    \ = [];\n    my $l26 = [];\n    my $l27 = [];\n    my $l28 = [];\n    my $l29\
    \ = [];\n    my $l30 = [];\n    my $l31 = [];\n    my $l32 = [];\n    my $l33\
    \ = [];\n    my $l34 = [];\n    my $l35 = [];\n    my $l36 = [];\n    my $l37\
    \ = [];\n    my $l38 = [];\n    my $l39 = [];\n    my $l40 = [];\n    my $l41\
    \ = [];\n    my $l42 = [];\n    my $l43 = [];\n    my $l44 = [];\n    my $l45\
    \ = [];\n    my $l46 = [];\n    my $l47 = [];\n    my $l48 = [];\n    my $l49\
    \ = [];\n    my $l50 = [];\n    my $l51 = [];\n    my $l52 = [];\n    my $l53\
    \ = [];\n    my $l54 = [];\n    my $l55 = [];\n    my $l56 = [];\n    my $l57\
    \ = [];\n    my $l58 = [];\n    my $l59 = [];\n    my $l60 = [];\n    my $l61\
    \ = [];\n    my $l62 = [];\n    my $l63 = [];\n    my $l64 = [];\n    my $l65\
    \ = [];\n    my $l66 = [];\n    my $l67 = [];\n    my $l68 = [];\n    my $l69\
    \ = [];\n    my $l70 = [];\n    my $l71 = [];\n    my $l72 = [];\n    my $l73\
    \ = [];\n    my $l74 = [];\n    my $l75 = [];\n    my $l76 = [];\n    my $l77\
    \ = [];\n    my $l78 = [];\n    my $l79 = [];\n    my $l80 = [];\n    my $l81\
    \ = [];\n    my $l82 = [];\n    my $l83 = [];\n    my $l84 = [];\n    ", "   \
    \ my @common = ();\n    foreach my $elem (@$l1) {\n        foreach my $elem2 (@$l2)\
    \ {\n            if ($elem eq $elem2) {\n                push(@common, $elem);\n\
    \            }\n        }\n    }\n    return @common;\n}", "    my @common;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < @$l1 && $j <\
    \ @$l2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n\
    \            $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j])\
    \ {\n            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j]) {\n         \
    \   $j++;\n        } else {\n            $i++;\n            $j++;\n        }\n\
    \    }\n    return @common;\n}", "    my(@common, $l1, $l2);\n    foreach $l1\
    \ (@$l1) {\n        foreach $l2 (@$l2) {\n            push @common, $l1 if $l1\
    \ eq $l2;\n        }\n    }\n    return @common;\n}", "    my @common;\n    foreach\
    \ my $i (0..$#$l1) {\n        push @common, $l1->[$i] if $l2->[$i] eq $l1->[$i];\n\
    \    }\n    return @common;\n}", "    my %common;\n    foreach my $elem (@$l1)\
    \ {\n        $common{$elem} = 1;\n    }\n    foreach my $elem (@$l2) {\n     \
    \   $common{$elem} = 1;\n    }\n    return keys %common;\n}", "    my %hash;\n\
    \    foreach my $element (@$l1) {\n        $hash{$element} = 1;\n    }\n    foreach\
    \ my $element (@$l2) {\n        $hash{$element} = 1;\n    }\n    return keys %hash;\n\
    }", "    my @common;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while\
    \ ($i < @$l1 && $j < @$l2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n        \
    \    push @common, $l1->[$i];\n            $i++;\n            $j++;\n        }\
    \ elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n        } elsif ($l1->[$i]\
    \ gt $l2->[$j]) {\n            $j++;\n        } else {\n            $i++;\n  \
    \          $j++;\n        }\n    }\n    return @common;\n}", "    my @common;\n\
    \    my $l1_count = scalar($l1);\n    my $l2_count = scalar($l2);\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $common_count = 0;\n    while ($i < $l1_count &&\
    \ $j < $l2_count) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            $common_count++;\n\
    \            push(@common, $l1->[$i]);\n            $i++;\n            $j++;\n\
    \        } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n        } elsif\
    \ ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else {\n          \
    \  $i++;\n            $j++;\n        }\n    }\n    return @common;\n}", "    my\
    \ $common;\n    my $i;\n    my $j;\n    my $k;\n    my $l1_len = @$l1;\n    my\
    \ $l2_len = @$l2;\n    my $l1_common;\n    my $l2_common;\n    my $l1_common_len\
    \ = @$l1_common;\n    my $l2_common_len = @$l2_common;\n    my $l1_common_elements;\n\
    \    my $l2_common_elements;\n    my $l1_common_elements_len;\n    my $l2_common_elements_len;\n\
    \    my $l1_common_elements_len;\n    my $l2_common_elements_len;\n    my $l1_common_elements_len;\n\
    \    my $l2_common_elements_len;\n    my $l1_common_elements_len;\n    my $l2_common_elements_len;\n\
    \    my $l1_common_elements_len;\n    my $l2_common_elements_len;\n    my $l1_common_elements_len;\n\
    \    my $l2_common_elements_len;\n    my $l1_common_elements_len;\n    my $l2_common_elements_len;\n\
    \    my $l1_common_elements_len;\n    my $l2_common_elements_len;\n    my $l1_common_elements_len;\n\
    \    my $l2_common_elements_len;\n    my $l1_common_elements_len;\n    my $l2_common_elements_len;\n\
    \    my $l1_common_elements_len;\n    my $l2_common_elements_len;\n    my $l1_common_elements_len;\n\
    \    my $l2_common_elements_len;\n    my $l1_common_elements_len;\n    my $l2_common_elements_len;\n\
    \    my $l1_common_elements_len;\n    my $l2_common_elements_len;\n    my $l1_common_elements_len;\n\
    \    my $l2_common_elements_len;\n    my $l1_common_elements_len;\n    my $l2_common_elements_len;\n\
    \    my $l1_common_elements_len;\n    my $l2_common_elements_len;\n    my $l1_common_elements_len;\n\
    \    my $l2_common_elements_len;\n    my $l1_common_elements_len;\n    my $l2_common_elements_len;\n\
    \    my $l1_common_elements_len;\n    my $l2_common_elements_len;\n    my $l1_common_elements_len;\n\
    \    my $l2_common_elements_len;\n    my $l1_common_elements_len;\n    my $l2_common_elements_len;\n\
    \    my $l1_common_elements_len;\n    my $l2_common_elements_len;\n    my $l1_",
  "    my @common;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i\
    \ < @$l1 && $j < @$l2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push\
    \ @common, $l1->[$i];\n            $i++;\n            $j++;\n        } elsif ($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            $i++;\n            $j++;\n\
    \        }\n    }\n    return @common;\n}", "    my @common;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    while($i < @$l1 && $j < @$l2) {\n       \
    \ if($l1->[$i] eq $l2->[$j]) {\n            $common[$k++] = $l1->[$i];\n     \
    \       $i++;\n            $j++;\n        } elsif($l1->[$i] lt $l2->[$j]) {\n\
    \            $i++;\n        } elsif($l1->[$i] gt $l2->[$j]) {\n            $j++;\n\
    \        } else {\n            $i++;\n            $j++;\n        }\n    }\n  \
    \  return @common;\n}", "    my %hash;\n    foreach my $elem (@$l1) {\n      \
    \  $hash{$elem} = 1;\n    }\n    foreach my $elem (@$l2) {\n        $hash{$elem}\
    \ = 1;\n    }\n    return keys %hash;\n}", "    my %hash;\n    foreach my $elem\
    \ (@$l1) {\n        $hash{$elem} = 1;\n    }\n    foreach my $elem (@$l2) {\n\
    \        $hash{$elem} = 1;\n    }\n    return keys %hash;\n}", "    my @common;\n\
    \    foreach my $element (@$l1) {\n\tforeach my $other_element (@$l2) {\n\t  \
    \  push @common, $element if $element eq $other_element;\n\t}\n    }\n    return\
    \ @common;\n}", "    my @common;\n    my $i = 0;\n    my $j = 0;\n    while($i\
    \ < @$l1 && $j < @$l2) {\n        if($l1->[$i] eq $l2->[$j]) {\n            push(@common,\
    \ $l1->[$i]);\n            $i++;\n            $j++;\n        } elsif($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            push(@common, $l1->[$i]);\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my $common = ();\n    my $i = 0;\n    my $j = 0;\n    while($i < @$l1\
    \ && $j < @$l2) {\n        if($l1->[$i] eq $l2->[$j]) {\n            $common->[$i]\
    \ = $l1->[$i];\n            $i++;\n            $j++;\n        } elsif($l1->[$i]\
    \ lt $l2->[$j]) {\n            $j++;\n        } elsif($l1->[$i] gt $l2->[$j])\
    \ {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n\
    \    return @$common;\n}", "    my @common;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $l1_len = 0;\n    my $l2_len = 0;\n    my $common_len = 0;\n    my $l1_max\
    \ = 0;\n    my $l2_max = 0;\n    my $common_max = 0;\n    my $l1_min = 0;\n  \
    \  my $l2_min = 0;\n    my $common_min = 0;\n    my $l1_diff = 0;\n    my $l2_diff\
    \ = 0;\n    my $common_diff = 0;\n    my $l1_avg = 0;\n    my $l2_avg = 0;\n \
    \   my $common_avg = 0;\n    my $l1_sum = 0;\n    my $l2_sum = 0;\n    my $common_sum\
    \ = 0;\n    my $l1_cnt = 0;\n    my $l2_cnt = 0;\n    my $common_cnt = 0;\n  \
    \  my $l1_avg2 = 0;\n    my $l2_avg2 = 0;\n    my $common_avg2 = 0;\n    my $l1_sum2\
    \ = 0;\n    my $l2_sum2 = 0;\n    my $common_sum2 = 0;\n    my $l1_cnt2 = 0;\n\
    \    my $l2_cnt2 = 0;\n    my $common_cnt2 = 0;\n    my $l1_diff2 = 0;\n    my\
    \ $l2_diff2 = 0;\n    my $common_diff2 = 0;\n    my $l1_avg3 = 0;\n    my $l2_avg3\
    \ = 0;\n    my $common_avg3 = 0;\n    my $l1_sum3 = 0;\n    my $l2_sum3 = 0;\n\
    \    my $common_sum3 = 0;\n    my $l1_cnt3 = 0;\n    my $l2_cnt3 = 0;\n    my\
    \ $common_cnt3 = 0;\n    my $l1_diff3 = 0;\n    my $l2_diff3 = 0;\n    my $common_diff3\
    \ = 0;\n    my $l1_avg4 = 0;\n    my $l2_avg4 = 0;\n    my $common_avg4 = 0;\n\
    \    my $l1_sum4 = 0;\n    my $l2_sum4 = 0;\n    my $common_sum4 = 0;\n    my\
    \ $l1_cnt4 = 0;\n    my $l2_cnt4 = 0;\n    my $common_cnt4 = 0;\n    my $l1_diff4\
    \ = 0;\n    my $l2_diff4 = 0;\n    my $common_diff4 = 0;\n    my $l1_avg5 = 0;\n\
    \    my $l2_avg5 = 0;\n    my $common_avg5 = 0;\n    my $l1_sum5 = 0;\n    my\
    \ $l2_sum5 = 0;\n    my $common_sum5 = 0;\n    my $l1_cnt5 = 0;\n    my $l2_cnt5\
    \ = 0;\n    my $common_cnt5 = 0;\n    my $l1_diff5 = 0;\n    my $l2_diff5 = 0;\n\
    \    my $common_diff5 = 0;\n    my $l1_avg6 = 0;\n    my $l2_avg6 = 0;\n    my\
    \ $common_avg6 = 0;\n    my $l1_sum6 = 0;\n    my $", "    my %seen;\n    my @common;\n\
    \    foreach my $elem (@$l1) {\n        $seen{$elem}++;\n        push @common,\
    \ $elem if $seen{$elem} > 1;\n    }\n    foreach my $elem (@$l2) {\n        $seen{$elem}++;\n\
    \        push @common, $elem if $seen{$elem} > 1;\n    }\n    return @common;\n\
    }", "    my @common;\n    foreach my $elem (@$l1) {\n        foreach my $elem2\
    \ (@$l2) {\n            if ($elem eq $elem2) {\n                push(@common,\
    \ $elem);\n                last;\n            }\n        }\n    }\n    return\
    \ @common;\n}", "    my @common;\n    foreach my $element (@$l1) {\n        foreach\
    \ my $other_element (@$l2) {\n            if ($element eq $other_element) {\n\
    \                push(@common, $element);\n                last;\n           \
    \ }\n        }\n    }\n    return @common;\n}", "    my @common;\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $len1 = scalar(@$l1);\n    my $len2 = scalar(@$l2);\n\
    \    while ($i < $len1 && $j < $len2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n\
    \            push(@common, $l1->[$i]);\n            $i++;\n            $j++;\n\
    \        } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n        } elsif\
    \ ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else {\n          \
    \  push(@common, $l1->[$i]);\n            $i++;\n            $j++;\n        }\n\
    \    }\n    return @common;\n}", "    my $l3 = [];\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $k = 0;\n    while($i < @$l1 && $j < @$l2) {\n        if($l1->[$i]\
    \ eq $l2->[$j]) {\n            $l3->[$k] = $l1->[$i];\n            $i++;\n   \
    \         $j++;\n            $k++;\n        } elsif($l1->[$i] lt $l2->[$j]) {\n\
    \            $i++;\n        } elsif($l1->[$i] gt $l2->[$j]) {\n            $j++;\n\
    \        } else {\n            $k++;\n        }\n    }\n    return @$l3;\n}",
  "    my @common;\n    my $i = 0;\n    my $j = 0;\n    while($i < @$l1 && $j < @$l2)\
    \ {\n        if($l1->[$i] eq $l2->[$j]) {\n            push(@common, $l1->[$i]);\n\
    \            $i++;\n            $j++;\n        } elsif($l1->[$i] lt $l2->[$j])\
    \ {\n            $i++;\n        } elsif($l1->[$i] gt $l2->[$j]) {\n          \
    \  $j++;\n        } else {\n            push(@common, $l1->[$i]);\n          \
    \  $i++;\n        }\n    }\n    return @common;\n}", "    my %common;\n    foreach\
    \ my $elem (@$l1) {\n        $common{$elem} = 1;\n    }\n    foreach my $elem\
    \ (@$l2) {\n        if (!$common{$elem}) {\n            delete $common{$elem};\n\
    \        }\n    }\n    return keys %common;\n}", "    my %common;\n    foreach\
    \ my $elem (@$l1) {\n        $common{$elem} = 1;\n    }\n    foreach my $elem\
    \ (@$l2) {\n        $common{$elem} = 1;\n    }\n    return sort keys %common;\n\
    }", "    my @common = ();\n    my $i = 0;\n    my $j = 0;\n    while($i < @$l1\
    \ && $j < @$l2) {\n        if($l1->[$i] eq $l2->[$j]) {\n            push @common,\
    \ $l1->[$i];\n            $i++;\n            $j++;\n        } elsif($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            push @common, $l1->[$i];\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my @common;\n    my $l1_count = scalar @$l1;\n    my $l2_count = scalar\
    \ @$l2;\n    my $i = 0;\n    my $j = 0;\n    while ($i < $l1_count && $j < $l2_count)\
    \ {\n        my $cmp = $l1->[$i] cmp $l2->[$j];\n        if ($cmp == 0) {\n  \
    \          push @common, $l1->[$i];\n            $i++;\n            $j++;\n  \
    \      } elsif ($cmp < 0) {\n            $i++;\n        } elsif ($cmp > 0) {\n\
    \            $j++;\n        }\n    }\n    return @common;\n}", "    my %common;\n\
    \    foreach my $elem (@$l1) {\n        $common{$elem} = 1;\n    }\n    foreach\
    \ my $elem (@$l2) {\n        if (!$common{$elem}) {\n            $common{$elem}\
    \ = 1;\n        }\n    }\n    return keys %common;\n}", "    my @common;\n   \
    \ my $i = 0;\n    my $j = 0;\n    while ($i < @$l1 && $j < @$l2) {\n        if\
    \ ($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n         \
    \   $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j]) {\n   \
    \         $i++;\n        } else {\n            $j++;\n        }\n    }\n    return\
    \ @common;\n}", "    my %seen;\n    my @common;\n    foreach my $elem (@$l1) {\n\
    \        $seen{$elem}++;\n    }\n    foreach my $elem (@$l2) {\n        if ($seen{$elem})\
    \ {\n            push @common, $elem;\n        }\n    }\n    return @common;\n\
    }", "    my @common;\n    my $l1_count = scalar($l1);\n    my $l2_count = scalar($l2);\n\
    \    my $i = 0;\n    my $j = 0;\n    my $common_count = 0;\n    while ($i < $l1_count\
    \ && $j < $l2_count) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push\
    \ @common, $l1->[$i];\n            $common_count++;\n            $i++;\n     \
    \       $j++;\n        } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n\
    \        } elsif ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else\
    \ {\n            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my @common;\n    foreach my $i (0..@$l1 - 1) {\n        push @common,\
    \ $l1->[$i] if $l2->[$i] eq $l1->[$i];\n    }\n    return @common;\n}", "    my(@common,\
    \ $i, $j);\n    foreach $i (0 .. $#$l1) {\n        foreach $j (0 .. $#$l2) {\n\
    \            if ($l1->[$i] eq $l2->[$j]) {\n                push(@common, $l1->[$i]);\n\
    \                last;\n            }\n        }\n    }\n    return @common;\n\
    }", "    my %seen;\n    grep { !$seen{$_}++ } @$l1 & @$l2;\n}", "    my @common;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < @$l1 && $j <\
    \ @$l2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n\
    \            $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j])\
    \ {\n            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j]) {\n         \
    \   $j++;\n        } else {\n            $i++;\n            $j++;\n        }\n\
    \    }\n    return @common;\n}", "    my @common;\n    my $i = 0;\n    my $j =\
    \ 0;\n    my $k = 0;\n    while($i < @$l1 && $j < @$l2) {\n        if($l1->[$i]\
    \ eq $l2->[$j]) {\n            push @common, $l1->[$i];\n            $i++;\n \
    \           $j++;\n        } elsif($l1->[$i] lt $l2->[$j]) {\n            $i++;\n\
    \        } elsif($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else\
    \ {\n            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my %seen;\n    my @common;\n    foreach my $elem (@$l1) {\n        if\
    \ (!$seen{$elem}++) {\n            push(@common, $elem);\n        }\n    }\n \
    \   foreach my $elem (@$l2) {\n        if (!$seen{$elem}++) {\n            push(@common,\
    \ $elem);\n        }\n    }\n    return @common;\n}", "    my %seen;\n    my @common;\n\
    \    foreach my $elem (@$l1) {\n        if (exists $seen{$elem}) {\n         \
    \   push @common, $elem;\n        }\n        $seen{$elem} = 1;\n    }\n    foreach\
    \ my $elem (@$l2) {\n        if (exists $seen{$elem}) {\n            push @common,\
    \ $elem;\n        }\n        $seen{$elem} = 1;\n    }\n    return @common;\n}",
  "    my %seen;\n    my @common;\n    foreach my $elem (@$l1) {\n        if (!$seen{$elem}++)\
    \ {\n            push(@common, $elem);\n        }\n    }\n    foreach my $elem\
    \ (@$l2) {\n        if (!$seen{$elem}++) {\n            push(@common, $elem);\n\
    \        }\n    }\n    return @common;\n}", "    my %seen;\n    foreach my $elem\
    \ (@$l1) {\n        $seen{$elem}++;\n    }\n    foreach my $elem (@$l2) {\n  \
    \      $seen{$elem}--;\n    }\n    return keys %seen;\n}", "    my @common;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $l1_len = 0;\n    my $l2_len = 0;\n  \
    \  my $common_len = 0;\n    my $common_element;\n    my $l1_element;\n    my $l2_element;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_count;\n\
    \    my $common_element_count;\n    my $l1_element_count;\n    my $l2_element_",
  "    my @common;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i\
    \ < @$l1 && $j < @$l2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push\
    \ @common, $l1->[$i];\n            $i++;\n            $j++;\n        } elsif ($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            $i++;\n            $j++;\n\
    \        }\n    }\n    return @common;\n}", "    my @common;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    while ($i < @$l1 && $j < @$l2) {\n      \
    \  if ($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n     \
    \       $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j]) {\n\
    \            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n\
    \        } else {\n            $i++;\n            $j++;\n        }\n    }\n  \
    \  return @common;\n}", "    my @common = ();\n    foreach my $i (0 .. $#l1) {\n\
    \        foreach my $j (0 .. $#l2) {\n            if ($l1[$i] eq $l2[$j]) {\n\
    \                push(@common, $l1[$i]);\n                last;\n            }\n\
    \        }\n    }\n    return @common;\n}", "    my %seen;\n    my @common;\n\
    \    foreach my $elem (@$l1) {\n        if (exists $seen{$elem}) {\n         \
    \   push @common, $elem;\n        }\n        $seen{$elem} = 1;\n    }\n    foreach\
    \ my $elem (@$l2) {\n        if (exists $seen{$elem}) {\n            push @common,\
    \ $elem;\n        }\n        $seen{$elem} = 1;\n    }\n    return @common;\n}",
  "    my @common;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$l1 && $j < @$l2)\
    \ {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n\
    \            $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j])\
    \ {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n\
    \    return @common;\n}", "    my @common;\n    my $i;\n    my $j;\n    my $k;\n\
    \    my $l1_len = @$l1;\n    my $l2_len = @$l2;\n    my $common_len = 0;\n   \
    \ my $common_element;\n    my $l1_element;\n    my $l2_element;\n    my $common_element_count\
    \ = 0;\n    my $l1_element_count = 0;\n    my $l2_element_count = 0;\n    my $common_element_count_max\
    \ = 0;\n    my $l1_element_count_max = 0;\n    my $l2_element_count_max = 0;\n\
    \    my $common_element_count_min = 0;\n    my $l1_element_count_min = 0;\n  \
    \  my $l2_element_count_min = 0;\n    my $common_element_count_sum = 0;\n    my\
    \ $l1_element_count_sum = 0;\n    my $l2_element_count_sum = 0;\n    my $common_element_count_avg\
    \ = 0;\n    my $l1_element_count_avg = 0;\n    my $l2_element_count_avg = 0;\n\
    \    my $common_element_count_max = 0;\n    my $l1_element_count_max = 0;\n  \
    \  my $l2_element_count_max = 0;\n    my $common_element_count_min = 0;\n    my\
    \ $l1_element_count_min = 0;\n    my $l2_element_count_min = 0;\n    my $common_element_count_sum\
    \ = 0;\n    my $l1_element_count_sum = 0;\n    my $l2_element_count_sum = 0;\n\
    \    my $common_element_count_avg = 0;\n    my $l1_element_count_avg = 0;\n  \
    \  my $l2_element_count_avg = 0;\n    my $common_element_count_max = 0;\n    my\
    \ $l1_element_count_max = 0;\n    my $l2_element_count_max = 0;\n    my $common_element_count_min\
    \ = 0;\n    my $l1_element_count_min = 0;\n    my $l2_element_count_min = 0;\n\
    \    my $common_element_count_sum = 0;\n    my $l1_element_count_sum = 0;\n  \
    \  my $l2_element_count_sum = 0;\n    my $common_element_count_avg = 0;\n    my\
    \ $l1_element_count_avg = 0;\n    my $l2_element_count_avg = 0;\n    my $common_element_count_max\
    \ = 0;\n    my $l1_element_count_max = 0;\n    my $l2_element_count_max = 0;\n\
    \    my $common_element_count_min = 0;\n    my $l1_element_count_min = 0;\n  \
    \  my $l2_element_count_min = 0;\n    my $common_element_count_sum = 0;\n    my\
    \ $l1_element_count_sum = 0;\n    my $l2_element_count_sum = 0;\n    my $common_element_count_avg\
    \ = 0;\n    my $l1_element_count_avg = 0;\n    my $l2_element_count_avg = 0;\n\
    \    my $common_element_count_max = 0;\n    my $l1_", "    my %common;\n    foreach\
    \ my $elem (@$l1) {\n        $common{$elem} = 1;\n    }\n    foreach my $elem\
    \ (@$l2) {\n        if (!$common{$elem}) {\n            $common{$elem} = 1;\n\
    \        }\n    }\n    return keys %common;\n}", "    my %common;\n    foreach\
    \ my $elem (@$l1) {\n        $common{$elem} = 1;\n    }\n    foreach my $elem\
    \ (@$l2) {\n        if (!$common{$elem}) {\n            $common{$elem} = 1;\n\
    \        }\n    }\n    return keys %common;\n}", "    my @common;\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $k = 0;\n    while($i < @$l1 && $j < @$l2) {\n  \
    \      if($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n  \
    \          $i++;\n            $j++;\n        } elsif($l1->[$i] lt $l2->[$j]) {\n\
    \            $i++;\n        } elsif($l1->[$i] gt $l2->[$j]) {\n            $j++;\n\
    \        } else {\n            $i++;\n            $j++;\n        }\n    }\n  \
    \  return @common;\n}", "    my %hash;\n    foreach my $elem (@$l1) {\n      \
    \  $hash{$elem} = 1;\n    }\n    foreach my $elem (@$l2) {\n        $hash{$elem}\
    \ = 1;\n    }\n    return keys %hash;\n}", "    my(@common, $l1, $l2);\n    foreach\
    \ $l1 (@$l1) {\n        foreach $l2 (@$l2) {\n            push @common, $l1 if\
    \ $l1 eq $l2;\n        }\n    }\n    return @common;\n}", "    my @common;\n \
    \   my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < @$l1 and $j <\
    \ @$l2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n\
    \            $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j])\
    \ {\n            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j]) {\n         \
    \   $j++;\n        } else {\n            $i++;\n            $j++;\n        }\n\
    \    }\n    return @common;\n}", "    my %common;\n    foreach my $key (sort keys\
    \ %$l1) {\n        if (exists $l2->{$key}) {\n            $common{$key} = 1;\n\
    \        }\n    }\n    return keys %common;\n}", "    my @common = ();\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < @$l1 && $j < @$l2)\
    \ {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n\
    \            $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j])\
    \ {\n            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j]) {\n         \
    \   $j++;\n        } else {\n            $i++;\n            $j++;\n        }\n\
    \    }\n    return @common;\n}", "    my @common;\n    my $l1_count = scalar @$l1;\n\
    \    my $l2_count = scalar @$l2;\n    my $i = 0;\n    my $j = 0;\n    while ($i\
    \ < $l1_count && $j < $l2_count) {\n        if ($l1->[$i] eq $l2->[$j]) {\n  \
    \          push @common, $l1->[$i];\n            $i++;\n            $j++;\n  \
    \      } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n        } elsif\
    \ ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else {\n          \
    \  push @common, $l1->[$i];\n            $i++;\n            $j++;\n        }\n\
    \    }\n    return @common;\n}", "    my $common;\n    my $i = 0;\n    my $j =\
    \ 0;\n    my $k = 0;\n    while($i < @$l1 && $j < @$l2) {\n        if($l1->[$i]\
    \ eq $l2->[$j]) {\n            $common->[$k] = $l1->[$i];\n            $i++;\n\
    \            $j++;\n            $k++;\n        } elsif($l1->[$i] lt $l2->[$j])\
    \ {\n            $j++;\n        } elsif($l1->[$i] gt $l2->[$j]) {\n          \
    \  $i++;\n        } else {\n            $i++;\n            $j++;\n           \
    \ $k++;\n        }\n    }\n    return @$common;\n}", "    my @common;\n    foreach\
    \ my $i (0..$#$l1) {\n        push @common, $l1->[$i] if $l2->[$i] eq $l1->[$i];\n\
    \    }\n    return @common;\n}", "    my @common;\n    my $i = 0;\n    my $j =\
    \ 0;\n    my $k = 0;\n    while($i < @$l1 && $j < @$l2) {\n        if($l1->[$i]\
    \ eq $l2->[$j]) {\n            push @common, $l1->[$i];\n            $i++;\n \
    \           $j++;\n        } elsif($l1->[$i] lt $l2->[$j]) {\n            $i++;\n\
    \        } elsif($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else\
    \ {\n            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my @common;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while\
    \ ($i < @$l1 && $j < @$l2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n        \
    \    push @common, $l1->[$i];\n            $i++;\n            $j++;\n        }\
    \ elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n        } elsif ($l1->[$i]\
    \ gt $l2->[$j]) {\n            $j++;\n        } else {\n            $k++;\n  \
    \      }\n    }\n    return @common;\n}", "    my %seen;\n    foreach my $elem\
    \ (@$l1) {\n        if (!$seen{$elem}++) {\n            push @$l2, $elem;\n  \
    \      }\n    }\n}", "    my @common;\n    my $l1_count = scalar(@$l1);\n    my\
    \ $l2_count = scalar(@$l2);\n    my $i = 0;\n    my $j = 0;\n    while($i < $l1_count\
    \ && $j < $l2_count) {\n        if($l1->[$i] eq $l2->[$j]) {\n            push(@common,\
    \ $l1->[$i]);\n            $i++;\n            $j++;\n        } elsif($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            $i++;\n            $j++;\n\
    \        }\n    }\n    return @common;\n}", "    my $common;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $len1 = scalar(@$l1);\n    my $len2 = scalar(@$l2);\n\
    \    my $max = $len1 > $len2 ? $len1 : $len2;\n    while($i < $max) {\n      \
    \  while($j < $len1 && $l1->[$i] == $l2->[$j]) {\n            $common->[$i] =\
    \ $l1->[$i];\n            $i++;\n            $j++;\n        }\n        while($j\
    \ < $len2 && $l2->[$i] == $l1->[$j]) {\n            $common->[$i] = $l2->[$i];\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return @$common;\n\
    }", "    my @common;\n    foreach my $elem (@$l1) {\n        foreach my $elem2\
    \ (@$l2) {\n            if ($elem eq $elem2) {\n                push(@common,\
    \ $elem);\n            }\n        }\n    }\n    return @common;\n}", "    my %hash;\n\
    \    foreach my $elem (@$l1) {\n        $hash{$elem} = 1;\n    }\n    foreach\
    \ my $elem (@$l2) {\n        if ($hash{$elem}) {\n            delete $hash{$elem};\n\
    \        }\n    }\n    return keys %hash;\n}", "    my @common;\n    my $l1_count\
    \ = scalar @$l1;\n    my $l2_count = scalar @$l2;\n    my $i = 0;\n    my $j =\
    \ 0;\n    my $common_count = 0;\n    my $common_element;\n    while ($i < $l1_count\
    \ && $j < $l2_count) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            $common_count++;\n\
    \            $common_element = $l1->[$i];\n            $i++;\n            $j++;\n\
    \        } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n        } elsif\
    \ ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else {\n          \
    \  $i++;\n            $j++;\n        }\n    }\n    return $common_element;\n}",
  "    my $common = ();\n    my $l1_count = @$l1;\n    my $l2_count = @$l2;\n    my\
    \ $i = 0;\n    my $j = 0;\n    while($i < $l1_count && $j < $l2_count) {\n   \
    \     if($l1->[$i] eq $l2->[$j]) {\n            $common->[$i] = $l1->[$i];\n \
    \           $i++;\n            $j++;\n        } elsif($l1->[$i] lt $l2->[$j])\
    \ {\n            $i++;\n        } elsif($l1->[$i] gt $l2->[$j]) {\n          \
    \  $j++;\n        } else {\n            $i++;\n            $j++;\n        }\n\
    \    }\n    return @$common;\n}", "    my @common;\n    my $l1_count = scalar(@$l1);\n\
    \    my $l2_count = scalar(@$l2);\n    my $i = 0;\n    my $j = 0;\n    while ($i\
    \ < $l1_count && $j < $l2_count) {\n        if ($l1->[$i] eq $l2->[$j]) {\n  \
    \          push(@common, $l1->[$i]);\n            $i++;\n            $j++;\n \
    \       } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n        } elsif\
    \ ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else {\n          \
    \  push(@common, $l1->[$i]);\n            $i++;\n        }\n    }\n    return\
    \ @common;\n}", "    my @common;\n    foreach my $i (0 .. $#l1) {\n        foreach\
    \ my $j (0 .. $#l2) {\n            if ($l1[$i] eq $l2[$j]) {\n               \
    \ push(@common, $l1[$i]);\n                last;\n            }\n        }\n \
    \   }\n    return @common;\n}", "    my %seen;\n    my @common;\n    foreach my\
    \ $elem (@$l1) {\n        $seen{$elem}++;\n    }\n    foreach my $elem (@$l2)\
    \ {\n        $seen{$elem}--;\n        if ($seen{$elem} == 0) {\n            push\
    \ @common, $elem;\n        }\n    }\n    return @common;\n}", "    my @common;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $found = 0;\n    while($i < @$l1 && $j\
    \ < @$l2) {\n        if($l1->[$i] eq $l2->[$j]) {\n            $common[$found++]\
    \ = $l1->[$i];\n            $i++;\n            $j++;\n        } elsif($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            $i++;\n            $j++;\n\
    \        }\n    }\n    return @common;\n}", "    my(@common) = (@$l1, @$l2);\n\
    \    my %seen;\n    foreach my $i (0 .. $#common) {\n        next if $seen{$common[$i]}++;\n\
    \        push(@common, $common[$i]);\n    }\n    return @common;\n}", "    my\
    \ @common;\n    my $l1_count = scalar @$l1;\n    my $l2_count = scalar @$l2;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $common_count = 0;\n    while($i < $l1_count\
    \ && $j < $l2_count) {\n        if($l1->[$i] eq $l2->[$j]) {\n            $common_count++;\n\
    \            push @common, $l1->[$i];\n            $i++;\n            $j++;\n\
    \        } elsif($l1->[$i] lt $l2->[$j]) {\n            $i++;\n        } elsif($l1->[$i]\
    \ gt $l2->[$j]) {\n            $j++;\n        } else {\n            $i++;\n  \
    \          $j++;\n        }\n    }\n    return @common;\n}", "    my @common;\n\
    \    foreach my $i (0..$#$l1) {\n        push @common, $l1->[$i] if $l2->[$i]\
    \ eq $l1->[$i];\n    }\n    return @common;\n}", "    my @common;\n    foreach\
    \ my $i (0..$#$l1) {\n        push @common, $$l1[$i] if $$l1[$i] ~~ $$l2[$i];\n\
    \    }\n    return @common;\n}", "    my %seen;\n    my @common;\n    foreach\
    \ my $item (@$l1) {\n        if (!$seen{$item}++) {\n            push(@common,\
    \ $item);\n        }\n    }\n    foreach my $item (@$l2) {\n        if (!$seen{$item}++)\
    \ {\n            push(@common, $item);\n        }\n    }\n    return @common;\n\
    }", "    my %seen;\n    grep { !$seen{$_}++ } @$l1 & @$l2;\n}", "    my @common;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < @$l1 && $j <\
    \ @$l2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push(@common, $l1->[$i]);\n\
    \            $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j])\
    \ {\n            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j]) {\n         \
    \   $j++;\n        } else {\n            $i++;\n            $j++;\n        }\n\
    \    }\n    return @common;\n}", "    my %seen;\n    my @common;\n    foreach\
    \ my $x (@$l1) {\n        next if $seen{$x}++;\n        push(@common, $x);\n \
    \   }\n    foreach my $x (@$l2) {\n        next if $seen{$x}++;\n        push(@common,\
    \ $x);\n    }\n    return @common;\n}", "    my %common;\n    my $i = 0;\n   \
    \ foreach my $element (@$l1) {\n        if (exists $common{$element}) {\n    \
    \        $common{$element}++;\n        } else {\n            $common{$element}\
    \ = 1;\n        }\n    }\n    foreach my $element (@$l2) {\n        if (exists\
    \ $common{$element}) {\n            $common{$element}++;\n        } else {\n \
    \           $common{$element} = 1;\n        }\n    }\n    return sort keys %common;\n\
    }", "    my @common;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while($i\
    \ < @$l1 && $j < @$l2) {\n        if($l1->[$i] eq $l2->[$j]) {\n            push\
    \ @common, $l1->[$i];\n            $i++;\n            $j++;\n        } elsif($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            $i++;\n            $j++;\n\
    \        }\n    }\n    return @common;\n}", "    my @common;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    while ($i < @$l1 && $j < @$l2) {\n      \
    \  if ($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n     \
    \       $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j]) {\n\
    \            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n\
    \        } else {\n            $i++;\n            $j++;\n        }\n    }\n  \
    \  return @common;\n}", "    my @common;\n    my $l1_count = scalar($l1);\n  \
    \  my $l2_count = scalar($l2);\n    my $i = 0;\n    my $j = 0;\n    my $common_count\
    \ = 0;\n    my $common_element;\n    my $l1_element;\n    my $l2_element;\n  \
    \  while ($i < $l1_count && $j < $l2_count) {\n        $l1_element = $l1->[$i];\n\
    \        $l2_element = $l2->[$j];\n        if ($l1_element eq $l2_element) {\n\
    \            $common_count++;\n            $common_element = $l1_element;\n  \
    \      }\n        $i++;\n        $j++;\n    }\n    if ($i == $l1_count) {\n  \
    \      return $common_element;\n    }\n    if ($j == $l2_count) {\n        return\
    \ $common_element;\n    }\n    return $common_element;\n}", "    my $l3 = [];\n\
    \    my $l4 = [];\n    my $l5 = [];\n    my $l6 = [];\n    my $l7 = [];\n    my\
    \ $l8 = [];\n    my $l9 = [];\n    my $l10 = [];\n    my $l11 = [];\n    my $l12\
    \ = [];\n    my $l13 = [];\n    my $l14 = [];\n    my $l15 = [];\n    my $l16\
    \ = [];\n    my $l17 = [];\n    my $l18 = [];\n    my $l19 = [];\n    my $l20\
    \ = [];\n    my $l21 = [];\n    my $l22 = [];\n    my $l23 = [];\n    my $l24\
    \ = [];\n    my $l25 = [];\n    my $l26 = [];\n    my $l27 = [];\n    my $l28\
    \ = [];\n    my $l29 = [];\n    my $l30 = [];\n    my $l31 = [];\n    my $l32\
    \ = [];\n    my $l33 = [];\n    my $l34 = [];\n    my $l35 = [];\n    my $l36\
    \ = [];\n    my $l37 = [];\n    my $l38 = [];\n    my $l39 = [];\n    my $l40\
    \ = [];\n    my $l41 = [];\n    my $l42 = [];\n    my $l43 = [];\n    my $l44\
    \ = [];\n    my $l45 = [];\n    my $l46 = [];\n    my $l47 = [];\n    my $l48\
    \ = [];\n    my $l49 = [];\n    my $l50 = [];\n    my $l51 = [];\n    my $l52\
    \ = [];\n    my $l53 = [];\n    my $l54 = [];\n    my $l55 = [];\n    my $l56\
    \ = [];\n    my $l57 = [];\n    my $l58 = [];\n    my $l59 = [];\n    my $l60\
    \ = [];\n    my $l61 = [];\n    my $l62 = [];\n    my $l63 = [];\n    my $l64\
    \ = [];\n    my $l65 = [];\n    my $l66 = [];\n    my $l67 = [];\n    my $l68\
    \ = [];\n    my $l69 = [];\n    my $l70 = [];\n    my $l71 = [];\n    my $l72\
    \ = [];\n    my $l73 = [];\n    my $l74 = [];\n    my $l75 = [];\n    my $l76\
    \ = [];\n    my $l77 = [];\n    my $l78 = [];\n    my $l79 = [];\n    my $l80\
    \ = [];\n    my $l81 = [];\n    my $l82 = [];\n    my $l83 = [];\n    my $l84\
    \ = [];\n    ", "    my @common;\n    my $l1_len = @$l1;\n    my $l2_len = @$l2;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $common_len = 0;\n    my $common_element;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;", "    my @common;\n    foreach my $elem (@$l1)\
    \ {\n        foreach my $elem2 (@$l2) {\n            if ($elem eq $elem2) {\n\
    \                push(@common, $elem);\n            }\n        }\n    }\n    return\
    \ @common;\n}", "    my @common;\n    my $i;\n    my $j;\n    my $k;\n    my $l1_len\
    \ = @$l1;\n    my $l2_len = @$l2;\n    my $common_len = @$common;\n    my $common_len2\
    \ = $common_len + 1;\n    my $l1_len2 = $l1_len + 1;\n    my $l2_len2 = $l2_len\
    \ + 1;\n    my $l1_len2_minus_1 = $l1_len2 - 1;\n    my $l2_len2_minus_1 = $l2_len2\
    \ - 1;\n    my $l1_len2_minus_1_minus_1 = $l1_len2_minus_1 - 1;\n    my $l2_len2_minus_1_minus_1\
    \ = $l2_len2_minus_1 - 1;\n    my $l1_len2_minus_1_minus_1_minus_1 = $l1_len2_minus_1_minus_1\
    \ - 1;\n    my $l2_len2_minus_1_minus_1_minus_1 = $l2_len2_minus_1_minus_1 - 1;\n\
    \    my $l1_len2_minus_1_minus_1_minus_1_minus_1 = $l1_len2_minus_1_minus_1_minus_1\
    \ - 1;\n    my $l2_len2_minus_1_minus_1_minus_1_minus_1 = $l2_len2_minus_1_minus_1_minus_1\
    \ - 1;\n    my $l1_len2_minus_1_minus_1_minus_1_minus_1_minus_1 = $l1_len2_minus_1_minus_1_minus_1_minus_1\
    \ - 1;\n    my $l2_len2_minus_1_minus_1_minus_1_minus_1_minus_1 = $l2_len2_minus_1_minus_1_minus_1_minus_1\
    \ - 1;\n    my $l1_len2_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = $l1_len2_minus_1_minus_1_minus_1_minus_1_minus_1\
    \ - 1;\n    my $l2_len2_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = $l2_len2_minus_1_minus_1_minus_1_minus_1_minus_1\
    \ - 1;\n    my $l1_len2_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1\
    \ = $l1_len2_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 - 1;\n    my $l2_len2_min",
  "    my @common;\n    my $i = 0;\n    my $j = 0;\n    while($i < @$l1 && $j < @$l2)\
    \ {\n        if($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n\
    \            $i++;\n            $j++;\n        } elsif($l1->[$i] lt $l2->[$j])\
    \ {\n            $i++;\n        } elsif($l1->[$i] gt $l2->[$j]) {\n          \
    \  $j++;\n        } else {\n            push @common, $l1->[$i];\n           \
    \ $i++;\n            $j++;\n        }\n    }\n    return @common;\n}", "    my\
    \ @common = ();\n    my $i = 0;\n    my $j = 0;\n    while($i < @$l1 && $j < @$l2)\
    \ {\n        if($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n\
    \            $i++;\n            $j++;\n        } elsif($l1->[$i] lt $l2->[$j])\
    \ {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n\
    \    return @common;\n}", "    my @common;\n    my $i = 0;\n    my $j = 0;\n \
    \   my $len1 = scalar(@$l1);\n    my $len2 = scalar(@$l2);\n    while ($i < $len1\
    \ && $j < $len2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push(@common,\
    \ $l1->[$i]);\n            $i++;\n            $j++;\n        } elsif ($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            push(@common, $l1->[$i]);\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my @common;\n    my $i = 0;\n    my $j = 0;\n    my $l1_len = $#l1;\n\
    \    my $l2_len = $#l2;\n    while($i < $l1_len && $j < $l2_len) {\n        if($l1[$i]\
    \ eq $l2[$j]) {\n            push(@common, $l1[$i]);\n            $i++;\n    \
    \        $j++;\n        } elsif($l1[$i] lt $l2[$j]) {\n            $i++;\n   \
    \     } elsif($l1[$i] gt $l2[$j]) {\n            $j++;\n        } else {\n   \
    \         push(@common, $l1[$i]);\n            $i++;\n            $j++;\n    \
    \    }\n    }\n    return @common;\n}", "    my @common;\n    my $i = 0;\n   \
    \ my $j = 0;\n    my $k = 0;\n    while ($i < @$l1 && $j < @$l2) {\n        if\
    \ ($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n         \
    \   $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j]) {\n   \
    \         $i++;\n        } elsif ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n\
    \        } else {\n            $i++;\n            $j++;\n        }\n    }\n  \
    \  return @common;\n}", "    my(@common);\n    foreach my $i (0..$#$l1) {\n  \
    \      push(@common, $l1->[$i]) if $l2->[$i] ~~ $l1->[$i];\n    }\n    return\
    \ @common;\n}", "    my @common;\n    my $i = 0;\n    my $j = 0;\n    my $k =\
    \ 0;\n    while($i < @$l1 && $j < @$l2) {\n        if($l1->[$i] eq $l2->[$j])\
    \ {\n            push(@common, $l1->[$i]);\n            $i++;\n            $j++;\n\
    \        } elsif($l1->[$i] lt $l2->[$j]) {\n            $i++;\n        } elsif($l1->[$i]\
    \ gt $l2->[$j]) {\n            $j++;\n        } else {\n            $i++;\n  \
    \          $j++;\n        }\n    }\n    return @common;\n}", "    my @common =\
    \ ();\n    my $i = 0;\n    my $j = 0;\n    while($i < @$l1 && $j < @$l2) {\n \
    \       if($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n \
    \           $i++;\n            $j++;\n        } elsif($l1->[$i] lt $l2->[$j])\
    \ {\n            $i++;\n        } elsif($l1->[$i] gt $l2->[$j]) {\n          \
    \  $j++;\n        } else {\n            push @common, $l1->[$i];\n           \
    \ $i++;\n            $j++;\n        }\n    }\n    return @common;\n}", "    my\
    \ %seen;\n    foreach my $elem (@$l1) {\n        $seen{$elem}++;\n    }\n    foreach\
    \ my $elem (@$l2) {\n        $seen{$elem}--;\n    }\n    return keys %seen;\n}",
  "    my %common;\n    foreach my $i (0 .. $#l1) {\n        next if $l1[$i] eq $l2[$i];\n\
    \        $common{$l1[$i]}++;\n    }\n    return keys %common;\n}", "    my $common;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < @$l1 && $j <\
    \ @$l2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            $common->[$k] =\
    \ $l1->[$i];\n            $i++;\n            $j++;\n            $k++;\n      \
    \  } elsif ($l1->[$i] lt $l2->[$j]) {\n            $k++;\n        } elsif ($l1->[$i]\
    \ gt $l2->[$j]) {\n            $j++;\n        } else {\n            $i++;\n  \
    \          $j++;\n        }\n    }\n    return @$common;\n}", "    my @common;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $A;\n    my\
    \ $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my $G;\n    my $H;\n\
    \    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my $M;\n    my $N;\n    my\
    \ $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n    my $T;\n    my $U;\n\
    \    my $V;\n    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n    my $_;\n    my\
    \ $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n\
    \    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my\
    \ $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n\
    \    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my\
    \ $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my $G;\n\
    \    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my $M;\n    my\
    \ $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n    my $T;\n\
    \    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n    my\
    \ $_;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n", "    my $common;\n    my $l1_len = @$l1;\n    my $l2_len = @$l2;\n \
    \   my $i = 0;\n    my $j = 0;\n    my $common_len = 0;\n    my $common_len2 =\
    \ 0;\n    my $common_len3 = 0;\n    my $common_len4 = 0;\n    my $common_len5\
    \ = 0;\n    my $common_len6 = 0;\n    my $common_len7 = 0;\n    my $common_len8\
    \ = 0;\n    my $common_len9 = 0;\n    my $common_len10 = 0;\n    my $common_len11\
    \ = 0;\n    my $common_len12 = 0;\n    my $common_len13 = 0;\n    my $common_len14\
    \ = 0;\n    my $common_len15 = 0;\n    my $common_len16 = 0;\n    my $common_len17\
    \ = 0;\n    my $common_len18 = 0;\n    my $common_len19 = 0;\n    my $common_len20\
    \ = 0;\n    my $common_len21 = 0;\n    my $common_len22 = 0;\n    my $common_len23\
    \ = 0;\n    my $common_len24 = 0;\n    my $common_len25 = 0;\n    my $common_len26\
    \ = 0;\n    my $common_len27 = 0;\n    my $common_len28 = 0;\n    my $common_len29\
    \ = 0;\n    my $common_len30 = 0;\n    my $common_len31 = 0;\n    my $common_len32\
    \ = 0;\n    my $common_len33 = 0;\n    my $common_len34 = 0;\n    my $common_len35\
    \ = 0;\n    my $common_len36 = 0;\n    my $common_len37 = 0;\n    my $common_len38\
    \ = 0;\n    my $common_len39 = 0;\n    my $common_len40 = 0;\n    my $common_len41\
    \ = 0;\n    my $common_len42 = 0;\n    my $common_len43 = 0;\n    my $common_len44\
    \ = 0;\n    my $common_len45 = 0;\n    my $common_len46 = 0;\n    my $common_len47\
    \ = 0;\n    my $common_len48 = 0;\n    my $common_len49 = 0;\n    my $common_len50\
    \ = 0;\n    my $common_len51 = 0;\n    my $common_len52 = 0;\n    my $common_len53\
    \ = 0;\n    my $common_len54 = 0;\n    my $common_len55 = 0;\n    my $common_len56\
    \ = 0;\n    my $common_len57 = 0;\n    my $common_len58 = 0;\n    my $common_len59\
    \ = 0;\n    my $common_len60 = 0;\n    my $common_len61 = 0;\n    my $common_len62\
    \ = 0;\n    my $common_len63 = 0;\n    my $common_len64 = 0;\n    my $common_len65\
    \ = 0;\n    my $common_len66 = 0;\n    my $common_len67 = 0;\n    my $common_len68\
    \ = 0;\n    my $common_len69 = 0;\n", "    my %seen;\n    foreach my $elem (@$l1)\
    \ {\n        if (!$seen{$elem}++) {\n            push @$l2, $elem;\n        }\n\
    \    }\n    return @$l2;\n}", "    my %common;\n    foreach my $item (@$l1) {\n\
    \        $common{$item} = 1;\n    }\n    foreach my $item (@$l2) {\n        $common{$item}\
    \ = 1;\n    }\n    return keys %common;\n}", "    my(@l1, @l2);\n    my $i = 0;\n\
    \    my $j = 0;\n    my $common = 0;\n    my $l1_len = 0;\n    my $l2_len = 0;\n\
    \    my $common_len = 0;\n    my $l1_common = 0;\n    my $l2_common = 0;\n   \
    \ my $l1_common_size = 0;\n    my $l2_common_size = 0;\n    my $l1_common_count\
    \ = 0;\n    my $l2_common_count = 0;\n    my $l1_common_count_size = 0;\n    my\
    \ $l2_common_count_size = 0;\n    my $l1_common_count_size = 0;\n    my $l2_common_count_size\
    \ = 0;\n    my $l1_common_count_size = 0;\n    my $l2_common_count_size = 0;\n\
    \    my $l1_common_count_size = 0;\n    my $l2_common_count_size = 0;\n    my\
    \ $l1_common_count_size = 0;\n    my $l2_common_count_size = 0;\n    my $l1_common_count_size\
    \ = 0;\n    my $l2_common_count_size = 0;\n    my $l1_common_count_size = 0;\n\
    \    my $l2_common_count_size = 0;\n    my $l1_common_count_size = 0;\n    my\
    \ $l2_common_count_size = 0;\n    my $l1_common_count_size = 0;\n    my $l2_common_count_size\
    \ = 0;\n    my $l1_common_count_size = 0;\n    my $l2_common_count_size = 0;\n\
    \    my $l1_common_count_size = 0;\n    my $l2_common_count_size = 0;\n    my\
    \ $l1_common_count_size = 0;\n    my $l2_common_count_size = 0;\n    my $l1_common_count_size\
    \ = 0;\n    my $l2_common_count_size = 0;\n    my $l1_common_count_size = 0;\n\
    \    my $l2_common_count_size = 0;\n    my $l1_common_count_size = 0;\n    my\
    \ $l2_common_count_size = 0;\n    my $l1_common_count_size = 0;\n    my $l2_common_count_size\
    \ = 0;\n    my $l1_common_count_size = 0;\n    my $l2_common_count_size = 0;\n\
    \    my $l1_common_count_size = 0;\n    my $l2_common_count_size = 0;\n    my\
    \ $l1_common_count_size = 0;\n    my $l2_common_count_size = 0;\n    my $l1_common_count_size\
    \ = 0;\n    my $l2_common_count_size = 0;\n    my $l1_common_count_size = 0;\n\
    \    my $l2_common_count_size = 0;\n    my $l1_common_count_size = 0;\n    my\
    \ $l2_common_count_size = 0;\n    my $l1_common_count_size = 0;\n    my $l2_common_count_size\
    \ = 0;\n    my $l1_common_count_size = 0;\n", "    my @common;\n    foreach my\
    \ $elem (@$l1) {\n\tforeach my $elem2 (@$l2) {\n\t    push @common, $elem if $elem\
    \ eq $elem2;\n\t}\n    }\n    return @common;\n}", "    my $l3 = $l1;\n    my\
    \ $l4 = $l2;\n    my $l5 = $l1;\n    my $l6 = $l2;\n    my $l7 = $l1;\n    my\
    \ $l8 = $l2;\n    my $l9 = $l1;\n    my $l10 = $l2;\n    my $l11 = $l1;\n    my\
    \ $l12 = $l2;\n    my $l13 = $l1;\n    my $l14 = $l2;\n    my $l15 = $l1;\n  \
    \  my $l16 = $l2;\n    my $l17 = $l1;\n    my $l18 = $l2;\n    my $l19 = $l1;\n\
    \    my $l20 = $l2;\n    my $l21 = $l1;\n    my $l22 = $l2;\n    my $l23 = $l1;\n\
    \    my $l24 = $l2;\n    my $l25 = $l1;\n    my $l26 = $l2;\n    my $l27 = $l1;\n\
    \    my $l28 = $l2;\n    my $l29 = $l1;\n    my $l30 = $l2;\n    my $l31 = $l1;\n\
    \    my $l32 = $l2;\n    my $l33 = $l1;\n    my $l34 = $l2;\n    my $l35 = $l1;\n\
    \    my $l36 = $l2;\n    my $l37 = $l1;\n    my $l38 = $l2;\n    my $l39 = $l1;\n\
    \    my $l40 = $l2;\n    my $l41 = $l1;\n    my $l42 = $l2;\n    my $l43 = $l1;\n\
    \    my $l44 = $l2;\n    my $l45 = $l1;\n    my $l46 = $l2;\n    my $l47 = $l1;\n\
    \    my $l48 = $l2;\n    my $l49 = $l1;\n    my $l50 = $l2;\n    my $l51 = $l1;\n\
    \    my $l52 = $l2;\n    my $l53 = $l1;\n    my $l54 = $l2;\n    my $l55 = $l1;\n\
    \    my $l56 = $l2;\n    my $l57 = $l1;\n    my $l58 = $l2;\n    my $l59 = $l1;\n\
    \    my $l60 = $l2;\n    my $l61 = $l1;\n    my $l62 = $l2;\n    my $l63 = $l1;\n\
    \    my $l64 = $l2;\n    my $l65", "    my @common;\n    my $l1_count = scalar\
    \ @$l1;\n    my $l2_count = scalar @$l2;\n    my $i = 0;\n    my $j = 0;\n   \
    \ while ($i < $l1_count && $j < $l2_count) {\n        if ($l1->[$i] eq $l2->[$j])\
    \ {\n            push @common, $l1->[$i];\n            $i++;\n            $j++;\n\
    \        } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n        } elsif\
    \ ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else {\n          \
    \  $i++;\n            $j++;\n        }\n    }\n    return @common;\n}", "    my\
    \ @common;\n    my $i = 0;\n    my $j = 0;\n    my $l1_len = @$l1;\n    my $l2_len\
    \ = @$l2;\n    while ($i < $l1_len && $j < $l2_len) {\n        if ($l1->[$i] eq\
    \ $l2->[$j]) {\n            push(@common, $l1->[$i]);\n            $i++;\n   \
    \         $j++;\n        } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n\
    \        } elsif ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else\
    \ {\n            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my @common;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while($i\
    \ < @$l1 && $j < @$l2) {\n        if($l1->[$i] eq $l2->[$j]) {\n            push\
    \ @common, $l1->[$i];\n            $i++;\n            $j++;\n        } elsif($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            $i++;\n            $j++;\n\
    \        }\n    }\n    return @common;\n}", "    my @common;\n    foreach my $item\
    \ (@$l1) {\n        foreach my $item2 (@$l2) {\n            if ($item eq $item2)\
    \ {\n                push(@common, $item);\n            }\n        }\n    }\n\
    \    return @common;\n}", "    my %hash;\n    foreach my $elem (@$l1) {\n    \
    \    $hash{$elem} = 1;\n    }\n    foreach my $elem (@$l2) {\n        if ($hash{$elem})\
    \ {\n            delete $hash{$elem};\n        }\n    }\n    return keys %hash;\n\
    }", "    my @common;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while($i\
    \ < @$l1 && $j < @$l2) {\n        if($l1->[$i] eq $l2->[$j]) {\n            $common[$k++]\
    \ = $l1->[$i];\n            $i++;\n            $j++;\n        } elsif($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            $i++;\n            $j++;\n\
    \        }\n    }\n    return @common;\n}", "    my(@common);\n    foreach my\
    \ $i (0 .. $#$l1) {\n        push @common, $l1->[$i] if $l2->[$i] ~~ $l1->[$i];\n\
    \    }\n    return @common;\n}", "    my %seen;\n    my @common;\n    foreach\
    \ my $elem (@$l1) {\n        if (!$seen{$elem}++) {\n            push(@common,\
    \ $elem);\n        }\n    }\n    foreach my $elem (@$l2) {\n        if (!$seen{$elem}++)\
    \ {\n            push(@common, $elem);\n        }\n    }\n    return @common;\n\
    }", "    my @common;\n    my $i = 0;\n    my $j = 0;\n    while ($i < @$l1 &&\
    \ $j < @$l2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push @common,\
    \ $l1->[$i];\n            $i++;\n            $j++;\n        } elsif ($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            push @common, $l1->[$i];\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my @common;\n    my $i = 0;\n    my $j = 0;\n    my $len1 = scalar(@$l1);\n\
    \    my $len2 = scalar(@$l2);\n    while ($i < $len1 && $j < $len2) {\n      \
    \  if ($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n     \
    \       $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j]) {\n\
    \            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n\
    \        } else {\n            push @common, $l1->[$i];\n            $i++;\n \
    \           $j++;\n        }\n    }\n    return @common;\n}", "    my @common;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l1_len = @$l1;\n    my\
    \ $l2_len = @$l2;\n    while ($i < $l1_len && $j < $l2_len) {\n        if ($l1->[$i]\
    \ eq $l2->[$j]) {\n            push @common, $l1->[$i];\n            $i++;\n \
    \           $j++;\n        } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n\
    \        } elsif ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else\
    \ {\n            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my @common;\n    foreach my $i (0 .. $#l1) {\n        push @common, $l1->[$i]\
    \ if $l2->[$i] ~~ $l1->[$i];\n    }\n    return @common;\n}", "    my %seen;\n\
    \    my @common;\n    foreach my $item (@$l1) {\n        if (!$seen{$item}++)\
    \ {\n            push(@common, $item);\n        }\n    }\n    foreach my $item\
    \ (@$l2) {\n        if (!$seen{$item}++) {\n            push(@common, $item);\n\
    \        }\n    }\n    return @common;\n}", "    my %hash;\n    foreach my $elem\
    \ (@$l1) {\n        $hash{$elem} = 1;\n    }\n    foreach my $elem (@$l2) {\n\
    \        if (!$hash{$elem}) {\n            $hash{$elem} = 1;\n        }\n    }\n\
    \    return keys %hash;\n}", "    my @common = ();\n    foreach my $elem (@$l1)\
    \ {\n\tforeach my $elem2 (@$l2) {\n\t    push @common, $elem if $elem eq $elem2;\n\
    \t}\n    }\n    return @common;\n}", "    my @common;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $k = 0;\n    while ($i < @$l1 && $j < @$l2) {\n        if ($l1->[$i]\
    \ eq $l2->[$j]) {\n            push @common, $l1->[$i];\n            $i++;\n \
    \           $j++;\n        } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n\
    \        } elsif ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else\
    \ {\n            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my $l3 = [];\n    my $l4 = [];\n    my $l5 = [];\n    my $l6 = [];\n\
    \    my $l7 = [];\n    my $l8 = [];\n    my $l9 = [];\n    my $l10 = [];\n   \
    \ my $l11 = [];\n    my $l12 = [];\n    my $l13 = [];\n    my $l14 = [];\n   \
    \ my $l15 = [];\n    my $l16 = [];\n    my $l17 = [];\n    my $l18 = [];\n   \
    \ my $l19 = [];\n    my $l20 = [];\n    my $l21 = [];\n    my $l22 = [];\n   \
    \ my $l23 = [];\n    my $l24 = [];\n    my $l25 = [];\n    my $l26 = [];\n   \
    \ my $l27 = [];\n    my $l28 = [];\n    my $l29 = [];\n    my $l30 = [];\n   \
    \ my $l31 = [];\n    my $l32 = [];\n    my $l33 = [];\n    my $l34 = [];\n   \
    \ my $l35 = [];\n    my $l36 = [];\n    my $l37 = [];\n    my $l38 = [];\n   \
    \ my $l39 = [];\n    my $l40 = [];\n    my $l41 = [];\n    my $l42 = [];\n   \
    \ my $l43 = [];\n    my $l44 = [];\n    my $l45 = [];\n    my $l46 = [];\n   \
    \ my $l47 = [];\n    my $l48 = [];\n    my $l49 = [];\n    my $l50 = [];\n   \
    \ my $l51 = [];\n    my $l52 = [];\n    my $l53 = [];\n    my $l54 = [];\n   \
    \ my $l55 = [];\n    my $l56 = [];\n    my $l57 = [];\n    my $l58 = [];\n   \
    \ my $l59 = [];\n    my $l60 = [];\n    my $l61 = [];\n    my $l62 = [];\n   \
    \ my $l63 = [];\n    my $l64 = [];\n    my $l65 = [];\n    my $l66 = [];\n   \
    \ my $l67 = [];\n    my $l68 = [];\n    my $l69 = [];\n    my $l70 = [];\n   \
    \ my $l71 = [];\n    my $l72 = [];\n    my $l73 = [];\n    my $l74 = [];\n   \
    \ my $l75 = [];\n    my $l76 = [];\n    my $l77 = [];\n    my $l78 = [];\n   \
    \ my $l79 = [];\n    my $l80 = [];\n    my $l81 = [];\n    my $l82 = [];\n   \
    \ my $l83 = [];\n    my $l84 = [];\n    ", "    my @common;\n    my $l1_count\
    \ = scalar @$l1;\n    my $l2_count = scalar @$l2;\n    my $i = 0;\n    my $j =\
    \ 0;\n    while ($i < $l1_count && $j < $l2_count) {\n        if ($l1->[$i] eq\
    \ $l2->[$j]) {\n            push @common, $l1->[$i];\n            $i++;\n    \
    \        $j++;\n        } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n\
    \        } elsif ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else\
    \ {\n            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my(@l1, @l2);\n    \n    @l1 = sort @$l1;\n    @l2 = sort @$l2;\n   \
    \ \n    my %seen;\n    \n    foreach my $i (0 .. $#l1) {\n        next if $seen{$l1[$i]}++;\n\
    \        \n        foreach my $j (0 .. $#l2) {\n            next if $seen{$l2[$j]}++;\n\
    \            \n            return $l1[$i] if $l1[$i] eq $l2[$j];\n        }\n\
    \    }\n    \n    return;\n}", "    my(@l1, @l2, @common);\n    foreach my $l\
    \ (@$l1, @$l2) {\n        push(@common, $l) if grep(!$common{$_}++, @$l);\n  \
    \  }\n    return @common;\n}", "    my @common;\n    my $i = 0;\n    my $j = 0;\n\
    \    while($i < @$l1 && $j < @$l2) {\n        if($l1->[$i] eq $l2->[$j]) {\n \
    \           push @common, $l1->[$i];\n            $i++;\n            $j++;\n \
    \       } elsif($l1->[$i] lt $l2->[$j]) {\n            $i++;\n        } elsif($l1->[$i]\
    \ gt $l2->[$j]) {\n            $j++;\n        } else {\n            $i++;\n  \
    \          $j++;\n        }\n    }\n    return @common;\n}", "    my @common;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < @$l1 && $j <\
    \ @$l2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n\
    \            $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j])\
    \ {\n            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j]) {\n         \
    \   $j++;\n        } else {\n            $i++;\n            $j++;\n        }\n\
    \    }\n    return @common;\n}", "    my @common;\n    my $i = 0;\n    my $j =\
    \ 0;\n    my $len1 = scalar(@$l1);\n    my $len2 = scalar(@$l2);\n    while ($i\
    \ < $len1 && $j < $len2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n          \
    \  push(@common, $l1->[$i]);\n            $i++;\n            $j++;\n        }\
    \ elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n        } elsif ($l1->[$i]\
    \ gt $l2->[$j]) {\n            $j++;\n        } else {\n            push(@common,\
    \ $l1->[$i]);\n            $i++;\n            $j++;\n        }\n    }\n    return\
    \ @common;\n}", "    my @common;\n    my $l1_count = scalar @$l1;\n    my $l2_count\
    \ = scalar @$l2;\n    my $i = 0;\n    my $j = 0;\n    my $common_count = 0;\n\
    \    my $common_element;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_", "    my %seen;\n    my\
    \ @common;\n    foreach my $elem (@$l1) {\n        if (exists $seen{$elem}) {\n\
    \            push @common, $elem;\n        }\n        $seen{$elem} = 1;\n    }\n\
    \    foreach my $elem (@$l2) {\n        if (exists $seen{$elem}) {\n         \
    \   push @common, $elem;\n        }\n        $seen{$elem} = 1;\n    }\n    return\
    \ @common;\n}", "    my @common;\n    my $i = 0;\n    my $j = 0;\n    my $k =\
    \ 0;\n    while ($i < @$l1 && $j < @$l2) {\n        if ($l1->[$i] eq $l2->[$j])\
    \ {\n            push(@common, $l1->[$i]);\n            $i++;\n            $j++;\n\
    \        } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n        } elsif\
    \ ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else {\n          \
    \  $i++;\n            $j++;\n        }\n    }\n    return @common;\n}", "    my\
    \ @common;\n    my $l1_count = scalar @$l1;\n    my $l2_count = scalar @$l2;\n\
    \    my $i = 0;\n    my $j = 0;\n    while ($i < $l1_count && $j < $l2_count)\
    \ {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n\
    \            $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j])\
    \ {\n            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j]) {\n         \
    \   $j++;\n        } else {\n            push @common, $l1->[$i];\n          \
    \  $i++;\n            $j++;\n        }\n    }\n    return @common;\n}", "    my\
    \ @common;\n    my $l1_len = @$l1;\n    my $l2_len = @$l2;\n    my $i = 0;\n \
    \   my $j = 0;\n    my $common_len = 0;\n    my $common_element;\n    while ($i\
    \ < $l1_len && $j < $l2_len) {\n        if ($l1->[$i] eq $l2->[$j]) {\n      \
    \      $common_len++;\n            $common_element = $l1->[$i];\n            $i++;\n\
    \            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n\
    \        } elsif ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else\
    \ {\n            push (@common, $common_element);\n            $i++;\n       \
    \     $j++;\n        }\n    }\n    push (@common, $common_element) if $i < $l1_len;\n\
    \    push (@common, $common_element) if $j < $l2_len;\n    return @common;\n}",
  "    my @common;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i\
    \ < @$l1 && $j < @$l2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push\
    \ @common, $l1->[$i];\n            $i++;\n            $j++;\n        } elsif ($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            $k++;\n        }\n    }\n\
    \    return @common;\n}", "    my %common;\n    my $i = 0;\n    my $j = 0;\n \
    \   my $len1 = scalar @$l1;\n    my $len2 = scalar @$l2;\n    while ($i < $len1\
    \ && $j < $len2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            $common{$l1->[$i]}\
    \ = 1;\n            $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j])\
    \ {\n            $j++;\n        } elsif ($l1->[$i] gt $l2->[$j]) {\n         \
    \   $i++;\n        } else {\n            die \"BUG: unreachable\";\n        }\n\
    \    }\n    return keys %common;\n}", "    my(@common) = (@$l1 & @$l2);\n    sort\
    \ @common;\n    return @common;\n}", "    my @common;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $k = 0;\n    while($i < @$l1 && $j < @$l2) {\n        if($l1->[$i]\
    \ eq $l2->[$j]) {\n            push(@common, $l1->[$i]);\n            $i++;\n\
    \            $j++;\n        } elsif($l1->[$i] lt $l2->[$j]) {\n            $i++;\n\
    \        } elsif($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else\
    \ {\n            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my @common;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l1_len\
    \ = @$l1;\n    my $l2_len = @$l2;\n    while($i < $l1_len && $j < $l2_len) {\n\
    \        if($l1->[$i] eq $l2->[$j]) {\n            push(@common, $l1->[$i]);\n\
    \            $i++;\n            $j++;\n        } elsif($l1->[$i] lt $l2->[$j])\
    \ {\n            $i++;\n        } elsif($l1->[$i] gt $l2->[$j]) {\n          \
    \  $j++;\n        } else {\n            $i++;\n            $j++;\n        }\n\
    \    }\n    return @common;\n}", "    my %seen;\n    foreach my $elem (@$l1) {\n\
    \        $seen{$elem}++;\n    }\n    foreach my $elem (@$l2) {\n        $seen{$elem}--;\n\
    \    }\n    return keys %seen;\n}", "    my %seen;\n    my @common;\n    foreach\
    \ my $elem (@$l1) {\n        if (exists $seen{$elem}) {\n            push @common,\
    \ $elem;\n        }\n        $seen{$elem} = 1;\n    }\n    foreach my $elem (@$l2)\
    \ {\n        if (exists $seen{$elem}) {\n            push @common, $elem;\n  \
    \      }\n        $seen{$elem} = 1;\n    }\n    return @common;\n}", "    my %seen;\n\
    \    foreach my $elem (@$l1) {\n        $seen{$elem}++;\n    }\n    foreach my\
    \ $elem (@$l2) {\n        $seen{$elem}--;\n    }\n    return sort keys %seen;\n\
    }", "    my %hash;\n    foreach my $elem (@$l1) {\n        $hash{$elem} = 1;\n\
    \    }\n    foreach my $elem (@$l2) {\n        if ($hash{$elem}) {\n         \
    \   delete $hash{$elem};\n        }\n    }\n    return keys %hash;\n}", "    my\
    \ @common;\n    my $i;\n    my $j;\n    my $k;\n    my $len1 = scalar(@$l1);\n\
    \    my $len2 = scalar(@$l2);\n    my $maxlen = $len1 > $len2 ? $len1 : $len2;\n\
    \    for ($i = 0; $i < $maxlen; $i++) {\n        $common[$i] = $l1->[$i] if $l1->[$i]\
    \ eq $l2->[$i];\n    }\n    for ($i = 0; $i < $maxlen; $i++) {\n        $common[$i]\
    \ = $l2->[$i] if $l1->[$i] eq $l2->[$i];\n    }\n    for ($i = 0; $i < $maxlen;\
    \ $i++) {\n        $common[$i] = $l1->[$i] if $l1->[$i] eq $l2->[$i];\n    }\n\
    \    return @common;\n}", "    my @common;\n    my $i = 0;\n    my $j = 0;\n \
    \   my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $l1 = 0;\n\
    \    my $l2 = 0;\n    my $l3 = 0;\n    my $l4 = 0;\n    my $l5 = 0;\n    my $l6\
    \ = 0;\n    my $l7 = 0;\n    my $l8 = 0;\n    my $l9 = 0;\n    my $l10 = 0;\n\
    \    my $l11 = 0;\n    my $l12 = 0;\n    my $l13 = 0;\n    my $l14 = 0;\n    my\
    \ $l15 = 0;\n    my $l16 = 0;\n    my $l17 = 0;\n    my $l18 = 0;\n    my $l19\
    \ = 0;\n    my $l20 = 0;\n    my $l21 = 0;\n    my $l22 = 0;\n    my $l23 = 0;\n\
    \    my $l24 = 0;\n    my $l25 = 0;\n    my $l26 = 0;\n    my $l27 = 0;\n    my\
    \ $l28 = 0;\n    my $l29 = 0;\n    my $l30 = 0;\n    my $l31 = 0;\n    my $l32\
    \ = 0;\n    my $l33 = 0;\n    my $l34 = 0;\n    my $l35 = 0;\n    my $l36 = 0;\n\
    \    my $l37 = 0;\n    my $l38 = 0;\n    my $l39 = 0;\n    my $l40 = 0;\n    my\
    \ $l41 = 0;\n    my $l42 = 0;\n    my $l43 = 0;\n    my $l44 = 0;\n    my $l45\
    \ = 0;\n    my $l46 = 0;\n    my $l47 = 0;\n    my $l48 = 0;\n    my $l49 = 0;\n\
    \    my $l50 = 0;\n    my $l51 = 0;\n    my $l52 = 0;\n    my $l53 = 0;\n    my\
    \ $l54 = 0;\n    my $l55 = 0;\n    my $l56 = 0;\n    my $l57 = 0;\n    my $l58\
    \ = 0;\n    my $l59 = 0;\n    my $l60 = 0;\n    my $l61 = 0;\n    my $l62 = 0;\n\
    \    my $l63 = 0;\n    my $l64 = 0;\n    my $l65 = 0;\n    my $l66 = 0;\n    my\
    \ $l67 = 0;\n    my $l68 = 0;\n    my $l69 = 0;\n    my $l70 = 0;\n    my $l71\
    \ = 0;\n    my $l72 = 0;\n    my $l73 = 0;\n    my $l74 = 0;\n    my $l75 = 0;\n\
    \    my $l76 = 0;\n    my $l77 = 0;\n    my $l78 = 0;\n    my $l79 = 0;\n    my\
    \ $l80 = 0;\n    my $l", "    my @common;\n    my $i = 0;\n    my $j = 0;\n  \
    \  my $l1_len = $#l1;\n    my $l2_len = $#l2;\n    while ($i < $l1_len && $j <\
    \ $l2_len) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push @common,\
    \ $l1->[$i];\n            $i++;\n            $j++;\n        } elsif ($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            push @common, $l1->[$i];\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my @common;\n    my $l1_count = scalar @$l1;\n    my $l2_count = scalar\
    \ @$l2;\n    my $i = 0;\n    my $j = 0;\n    my $common_count = 0;\n    my $l1_max\
    \ = $l1_count > $l2_count ? $l1_count : $l2_count;\n    my $l2_max = $l1_count\
    \ > $l2_count ? $l2_count : $l1_count;\n    my $l1_min = $l1_count > $l2_count\
    \ ? $l2_count : $l1_count;\n    my $l2_min = $l1_count > $l2_count ? $l1_count\
    \ : $l2_count;\n    my $l1_min_index;\n    my $l2_min_index;\n    my $l1_max_index;\n\
    \    my $l2_max_index;\n    my $l1_min_value;\n    my $l2_min_value;\n    my $l1_max_value;\n\
    \    my $l2_max_value;\n    my $l1_min_key = $l1_count > $l2_count ? $l1_count\
    \ : $l2_count;\n    my $l2_min_key = $l1_count > $l2_count ? $l2_count : $l1_count;\n\
    \    my $l1_max_key = $l1_count > $l2_count ? $l2_count : $l1_count;\n    my $l2_max_key\
    \ = $l1_count > $l2_count ? $l1_count : $l2_count;\n    my $l1_min_key_value;\n\
    \    my $l2_min_key_value;\n    my $l1_max_key_value;\n    my $l2_max_key_value;\n\
    \    my $l1_min_key_key = $l1_count > $l2_count ? $l1_count : $l2_count;\n   \
    \ my $l2_min_key_key = $l1_count > $l2_count ? $l2_count : $l1_count;\n    my\
    \ $l1_max_key_key = $l1_count > $l2_count ? $l2_count : $l1_count;\n    my $l2_max_key_key\
    \ = $l1_count > $l2_count ? $l1_count : $l2_count;\n    my $l1_min_key_key_value;\n\
    \    my $l2_min_key_key_value;\n    my $l1_max_key_key_value;\n    my $l2_max_key_key_value;\n\
    \    my $l1_min_key_key_key;\n    my $l2_min_key_key_key;\n    my $l1_max_key_key_key;\n\
    \    my $l2_max_key_key_key;\n    my $l1_min_key_key_key_value;\n    my $l2_min_key_key_key_value;\n\
    \    my $l1_max_key_key_key_value;\n    my $l2_max_key_key_key_value;\n    my\
    \ $l1_min_key_key_key_key;\n    my $", "    my @common;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $k = 0;\n    while ($i < @$l1 && $j < @$l2) {\n        if ($l1->[$i]\
    \ eq $l2->[$j]) {\n            push(@common, $l1->[$i]);\n            $i++;\n\
    \            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n\
    \        } elsif ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else\
    \ {\n            $k++;\n        }\n    }\n    return @common;\n}", "    my @common;\n\
    \    my $l1_count = scalar @$l1;\n    my $l2_count = scalar @$l2;\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $common_count = 0;\n    my $common_element;\n   \
    \ my $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_count = 0;\n    my $common_element_count = 0;\n    my $common_element_count\
    \ = 0;\n    my $common_element_count = 0;\n    my $common_element_count = 0;\n\
    \    my $common_element_count = 0;\n    my $common_element_count = 0;\n    my\
    \ $common_element_", "    my %common;\n    my $i = 0;\n    foreach my $element\
    \ (@$l1) {\n        $common{$element} = $i;\n        $i++;\n    }\n    foreach\
    \ my $element (@$l2) {\n        $common{$element} = $i;\n        $i++;\n    }\n\
    \    return sort keys %common;\n}", "    my %seen;\n    foreach my $elem (@$l1)\
    \ {\n        $seen{$elem}++;\n    }\n    foreach my $elem (@$l2) {\n        $seen{$elem}--;\n\
    \    }\n    return sort keys %seen;\n}", "    my @common;\n    my $i = 0;\n  \
    \  my $j = 0;\n    my $len1 = scalar(@$l1);\n    my $len2 = scalar(@$l2);\n  \
    \  while ($i < $len1 && $j < $len2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n\
    \            push(@common, $l1->[$i]);\n            $i++;\n            $j++;\n\
    \        } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n        } elsif\
    \ ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else {\n          \
    \  push(@common, $l1->[$i]);\n            $i++;\n            $j++;\n        }\n\
    \    }\n    return @common;\n}", "    my @common;\n    my $i = 0;\n    my $j =\
    \ 0;\n    while ($i < @$l1 && $j < @$l2) {\n        if ($l1->[$i] eq $l2->[$j])\
    \ {\n            push @common, $l1->[$i];\n            $i++;\n            $j++;\n\
    \        } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n        } elsif\
    \ ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else {\n          \
    \  push @common, $l1->[$i];\n            $i++;\n            $j++;\n        }\n\
    \    }\n    return @common;\n}", "    my @common;\n    my $i = 0;\n    my $j =\
    \ 0;\n    my $k = 0;\n    while ($i < @$l1 && $j < @$l2) {\n        if ($l1->[$i]\
    \ eq $l2->[$j]) {\n            push @common, $l1->[$i];\n            $i++;\n \
    \           $j++;\n        } elsif ($l1->[$i] lt $l2->[$j]) {\n            $i++;\n\
    \        } elsif ($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else\
    \ {\n            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my %seen;\n    my @common;\n    foreach my $elem (@$l1) {\n        if\
    \ (!$seen{$elem}++) {\n            push(@common, $elem);\n        }\n    }\n \
    \   foreach my $elem (@$l2) {\n        if (!$seen{$elem}++) {\n            push(@common,\
    \ $elem);\n        }\n    }\n    return @common;\n}", "    my %seen;\n    my @common;\n\
    \    foreach my $elem (@$l1) {\n        if (exists $seen{$elem}) {\n         \
    \   push @common, $elem;\n        }\n        $seen{$elem} = 1;\n    }\n    foreach\
    \ my $elem (@$l2) {\n        if (exists $seen{$elem}) {\n            push @common,\
    \ $elem;\n        }\n        $seen{$elem} = 1;\n    }\n    return @common;\n}",
  "    my %seen;\n    my @common;\n    foreach my $elem (@$l1) {\n        if (!$seen{$elem})\
    \ {\n            push(@common, $elem);\n            $seen{$elem} = 1;\n      \
    \  }\n    }\n    foreach my $elem (@$l2) {\n        if (!$seen{$elem}) {\n   \
    \         push(@common, $elem);\n            $seen{$elem} = 1;\n        }\n  \
    \  }\n    return @common;\n}", "    my @common = ();\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $k = 0;\n    while($i < @$l1 && $j < @$l2) {\n        if($l1->[$i]\
    \ eq $l2->[$j]) {\n            push(@common, $l1->[$i]);\n            $i++;\n\
    \            $j++;\n        } elsif($l1->[$i] lt $l2->[$j]) {\n            $i++;\n\
    \        } elsif($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else\
    \ {\n            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my(@l1, @l2);\n    foreach my $l (@$l1, @$l2) {\n        push @l1, $l\
    \ if $l->[0] eq $l->[1];\n        push @l2, $l if $l->[0] eq $l->[1];\n    }\n\
    \    return sort @l1 unless @l2;\n    return sort @l2;\n}", "    my @common;\n\
    \    my $l1_count = scalar(@$l1);\n    my $l2_count = scalar(@$l2);\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $common_count = 0;\n    my $common_element;\n \
    \   while ($i < $l1_count && $j < $l2_count) {\n        if ($l1->[$i] eq $l2->[$j])\
    \ {\n            $common_count++;\n            $common_element = $l1->[$i];\n\
    \            $i++;\n            $j++;\n        } elsif ($l1->[$i] lt $l2->[$j])\
    \ {\n            $i++;\n        } elsif ($l1->[$i] gt $l2->[$j]) {\n         \
    \   $j++;\n        } else {\n            $i++;\n            $j++;\n        }\n\
    \    }\n    if ($i == $l1_count) {\n        return @$l1;\n    } elsif ($j == $l2_count)\
    \ {\n        return @$l2;\n    } elsif ($common_count == 0) {\n        return\
    \ ();\n    } else {\n        return @$common_element;\n    }\n}", "    my @common;\n\
    \    foreach my $i (0..$#$l1) {\n        push @common, $l1->[$i] if $l2->[$i]\
    \ eq $l1->[$i];\n    }\n    return @common;\n}", "    my @common;\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $k = 0;\n    while($i < @$l1 && $j < @$l2) {\n  \
    \      if($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n  \
    \          $i++;\n            $j++;\n        } elsif($l1->[$i] lt $l2->[$j]) {\n\
    \            $i++;\n        } elsif($l1->[$i] gt $l2->[$j]) {\n            $j++;\n\
    \        } else {\n            $i++;\n            $j++;\n        }\n    }\n  \
    \  return @common;\n}", "    my %seen;\n    foreach my $item (@$l1) {\n      \
    \  $seen{$item}++;\n    }\n    foreach my $item (@$l2) {\n        $seen{$item}--;\n\
    \    }\n    return keys %seen;\n}", "    my %common;\n    foreach my $l (@$l1,\
    \ @$l2) {\n        $common{$l}++;\n    }\n    return keys %common;\n}", "    my\
    \ %hash;\n    foreach my $elem (@$l1) {\n        $hash{$elem} = 1;\n    }\n  \
    \  foreach my $elem (@$l2) {\n        $hash{$elem} = 1;\n    }\n    return keys\
    \ %hash;\n}", "    my @common;\n    my $l1_count = scalar(@$l1);\n    my $l2_count\
    \ = scalar(@$l2);\n    my $i = 0;\n    my $j = 0;\n    while($i < $l1_count &&\
    \ $j < $l2_count) {\n        if($l1->[$i] eq $l2->[$j]) {\n            push @common,\
    \ $l1->[$i];\n            $i++;\n            $j++;\n        } elsif($l1->[$i]\
    \ lt $l2->[$j]) {\n            $i++;\n        } elsif($l1->[$i] gt $l2->[$j])\
    \ {\n            $j++;\n        } else {\n            $i++;\n            $j++;\n\
    \        }\n    }\n    return @common;\n}", "    my @common = ();\n    my $i =\
    \ 0;\n    my $j = 0;\n    while($i < @$l1 && $j < @$l2) {\n        if($l1->[$i]\
    \ eq $l2->[$j]) {\n            push @common, $l1->[$i];\n            $i++;\n \
    \           $j++;\n        } elsif($l1->[$i] lt $l2->[$j]) {\n            $i++;\n\
    \        } elsif($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else\
    \ {\n            push @common, $l1->[$i];\n            $i++;\n            $j++;\n\
    \        }\n    }\n    return @common;\n}", "    my %seen;\n    my @common;\n\
    \    foreach my $item (@$l1) {\n\tnext if $seen{$item}++;\n\tpush(@common, $item);\n\
    \    }\n    foreach my $item (@$l2) {\n\tnext if $seen{$item}++;\n\tpush(@common,\
    \ $item);\n    }\n    return @common;\n}", "    my $l3 = [];\n    foreach my $l\
    \ (@$l1, @$l2) {\n        push @$l3, $l if grep $_ eq $l, @$l3;\n    }\n    return\
    \ @$l3;\n}", "    my %seen;\n    my @common;\n    foreach my $item (@$l1, @$l2)\
    \ {\n        if (!$seen{$item}++) {\n            push @common, $item;\n      \
    \  }\n    }\n    return @common;\n}", "    my @common;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $k = 0;\n    while($i < @$l1 && $j < @$l2) {\n        if($l1->[$i]\
    \ eq $l2->[$j]) {\n            push @common, $l1->[$i];\n            $i++;\n \
    \           $j++;\n        } elsif($l1->[$i] lt $l2->[$j]) {\n            $i++;\n\
    \        } elsif($l1->[$i] gt $l2->[$j]) {\n            $j++;\n        } else\
    \ {\n            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my %seen;\n    my @common;\n    foreach my $element (@$l1) {\n\tnext\
    \ if $seen{$element}++;\n\tpush(@common, $element);\n    }\n    return @common;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
