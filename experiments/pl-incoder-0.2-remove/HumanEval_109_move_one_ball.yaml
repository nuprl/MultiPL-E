name: HumanEval_109_move_one_ball
language: pl
prompt: "# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
  # numbers in the array will be randomly ordered. Your task is to determine if\n\
  # it is possible to get an array sorted in non-decreasing order by performing \n\
  # the following operation on the given array:\n# You are allowed to perform right\
  \ shift operation any number of times.\n# One right shift operation means shifting\
  \ all elements of the array by one\n# position in the right direction. The last\
  \ element of the array will be moved to\n# the starting position in the array i.e.\
  \ 0th index. \n# If it is possible to obtain the sorted array by performing the\
  \ above operation\n# then return True else return False.\n# If the given array is\
  \ empty then return True.\n# Note: The given list is guaranteed to have unique elements.\n\
  # For Example:\n# Explanation: By performin 2 right shift operations, non-decreasing\
  \ order can\n# be achieved for the given array.\n# Explanation:It is not possible\
  \ to get non-decreasing order for the given\n# array by performing any number of\
  \ right shift operations.\nsub move_one_ball {\n    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&move_one_ball;\n\
  \        if(eq_deeply($candidate->([3, 4, 5, 1, 2]),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 10,\
  \ 1, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([4, 3, 1, 2]),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 5, 4, 1, 2]),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: []
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
