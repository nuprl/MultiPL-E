name: HumanEval_95_check_dict_case
language: pl
prompt: "# Given a dictionary, return True if all keys are strings in lower \n# case\
  \ or all keys are strings in upper case, else return False.\n# The function should\
  \ return False is the given dictionary is empty.\n# Examples:\nsub check_dict_case\
  \ {\n    my($dict) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
  \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
  }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
  Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    \n    foreach my $key (keys(%$dict)) {\n        return 1 if $key\
    \ =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n\
    \    }\n    \n    return 1;\n}", "    foreach my $key (keys(%$dict)) {\n     \
    \   return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \    }\n    return 0;\n}", "    foreach my $key (keys(%$dict)) {\n        return\
    \ 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n      \
    \  return 0;\n    }\n    return 1;\n}", "    my $ret = 0;\n    foreach my $key\
    \ (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($value =~\
    \ /^[a-z]+$/i) {\n            $ret = 1;\n            last;\n        } elsif ($value\
    \ =~ /^[A-Z]+$/i) {\n            $ret = 1;\n            last;\n        }\n   \
    \ }\n    return $ret;\n}", "    foreach my $key (keys(%$dict)) {\n        return\
    \ 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n      \
    \  return 0;\n    }\n    return 1;\n}", "    my $ret = 0;\n    foreach my $key\
    \ (keys(%$dict)) {\n        if ($key =~ /^[a-z]+$/i) {\n            $ret = 1;\n\
    \            last;\n        }\n        if ($key =~ /^[A-Z]+$/i) {\n          \
    \  $ret = 1;\n            last;\n        }\n    }\n    return $ret;\n}", "   \
    \ my $ret = 0;\n    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n\
    \        if ($value =~ /^[a-z]+$/i) {\n            $ret = 1;\n            last;\n\
    \        }\n        if ($value =~ /^[A-Z]+$/i) {\n            $ret = 1;\n    \
    \        last;\n        }\n    }\n    return $ret;\n}", "    my $is_all_strings\
    \ = 1;\n    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n\
    \        if (not defined $value) {\n            $is_all_strings = 0;\n       \
    \     last;\n        }\n        if (lc($key) eq lc($value)) {\n            $is_all_strings\
    \ = 0;\n            last;\n        }\n    }\n    return $is_all_strings;\n}",
  "    foreach my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n\
    \        return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n    }\n    return\
    \ 1;\n}", "    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n\
    \        if ($value =~ /^[a-z]+$/i) {\n            return 1;\n        } elsif\
    \ ($value =~ /^[A-Z]+$/i) {\n            return 1;\n        }\n    }\n    return\
    \ 0;\n}", "    my $flag;\n    foreach my $key (keys(%$dict)) {\n        if ($key\
    \ eq '' || $key eq '_') {\n            $flag = 0;\n            last;\n       \
    \ }\n        if ($key =~ /^[a-z]+$/) {\n            $flag = 1;\n            last;\n\
    \        }\n        if ($key =~ /^[A-Z]+$/) {\n            $flag = 1;\n      \
    \      last;\n        }\n    }\n    return $flag;\n}", "    my $is_all_strings\
    \ = 1;\n    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n\
    \        if ($key =~ /^[a-z]+$/) {\n            $is_all_strings = 0;\n       \
    \ }\n        if ($key =~ /^[A-Z]+$/) {\n            $is_all_strings = 0;\n   \
    \     }\n    }\n    return $is_all_strings;\n}", "    \n    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    \n    return 1;\n}", "    my $ret = 0;\n    foreach\
    \ my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($key\
    \ =~ /^[a-z]+$/i) {\n            $ret = 1;\n        } elsif ($key =~ /^[A-Z]+$/i)\
    \ {\n            $ret = 1;\n        } else {\n            $ret = 0;\n        }\n\
    \    }\n    return $ret;\n}", "    foreach my $key (keys(%$dict)) {\n        return\
    \ 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n      \
    \  return 0;\n    }\n    return 1;\n}", "    foreach my $key (keys(%$dict)) {\n\
    \        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    my $ret = 0;\n    foreach my\
    \ $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($value\
    \ =~ /^[a-z]+$/i) {\n            $ret = 1;\n            last;\n        }\n   \
    \     if ($value =~ /^[A-Z]+$/i) {\n            $ret = 1;\n            last;\n\
    \        }\n    }\n    return $ret;\n}", "    my $is_upper = 0;\n    foreach my\
    \ $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($value\
    \ =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n            last;\n        }\n\
    \    }\n    return $is_upper;\n}", "    foreach my $key (keys(%$dict)) {\n   \
    \     return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    \n    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    \n    return 1;\n}", "    \n    foreach my $key\
    \ (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1\
    \ if $key =~ /^[A-Z]+$/i;\n        return 0;\n    }\n    \n    return 1;\n}",
  "    \n    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n\
    \        \n        if ($value =~ /^[a-z]+$/i) {\n            return 1;\n     \
    \   }\n        elsif ($value =~ /^[A-Z]+$/i) {\n            return 1;\n      \
    \  }\n        else {\n            return 0;\n        }\n    }\n    return 0;\n\
    }", "    foreach my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n\
    \        return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n    }\n    return\
    \ 1;\n}", "    foreach my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i\
    \ or $key =~ /^[A-Z]+$/i;\n    }\n    return 0;\n}", "    my $ret = 0;\n    foreach\
    \ my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($key\
    \ =~ /^[a-z]+$/i) {\n            $ret = 1;\n        } elsif ($key =~ /^[A-Z]+$/i)\
    \ {\n            $ret = 1;\n        } else {\n            $ret = 0;\n        }\n\
    \    }\n    return $ret;\n}", "    \n    foreach my $key (keys(%$dict)) {\n  \
    \      return 0 if !is_string($key) || !is_string($dict->{$key});\n    }\n   \
    \ \n    return 1;\n}", "    \n    foreach my $key (keys(%$dict)) {\n        return\
    \ 1 if $key eq '' or $key eq '_';\n        return 0 if $key eq uc($key);\n   \
    \ }\n    \n    return 1;\n}", "    \n    foreach my $key (keys(%$dict)) {\n  \
    \      return 1 if $key eq '' or $key eq '_';\n        return 0 if $key eq uc($key);\n\
    \    }\n    \n    return 0;\n}", "    \n    foreach my $key (keys(%$dict)) {\n\
    \        return 1 if $key eq '' or $key eq '_';\n        return 0 if $key eq lc($key)\
    \ or $key eq uc($key);\n    }\n    \n    return 0;\n}", "    my $is_all_strings\
    \ = 1;\n    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n\
    \        if (not defined $value) {\n            $is_all_strings = 0;\n       \
    \     last;\n        }\n        elsif (ref($value) eq 'ARRAY') {\n           \
    \ foreach my $element (@$value) {\n                if (not defined $element) {\n\
    \                    $is_all_strings = 0;\n                    last;\n       \
    \         }\n            }\n        }\n        elsif (ref($value) eq 'HASH') {\n\
    \            $is_all_strings = check_dict_case($value);\n        }\n        elsif\
    \ (ref($value) eq 'SCALAR') {\n            $is_all_strings = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'CODE') {\n            $is_all_strings\
    \ = check_dict_case($value);\n        }\n        elsif (ref($value) eq 'GLOB')\
    \ {\n            $is_all_strings = check_dict_case($value);\n        }\n     \
    \   elsif (ref($value) eq 'IO::Handle') {\n            $is_all_strings = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'IO::File') {\n            $is_all_strings\
    \ = check_dict_case($value);\n        }\n        elsif (ref($value) eq 'IO::Seekable')\
    \ {\n            $is_all_strings = check_dict_case($value);\n        }\n     \
    \   elsif (ref($value) eq 'IO::Dir') {\n            $is_all_strings = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'IO::Socket') {\n            $is_all_strings\
    \ = check_dict_case($value);\n        }\n        elsif (ref($value) eq 'IO::Socket::INET')\
    \ {\n            $is_all_strings = check_dict_case($value);\n        }\n     \
    \   elsif (ref($value) eq 'IO::Socket::UNIX') {\n            $is_all_strings =\
    \ check_dict_case($value);\n        }\n        elsif (ref($value) eq 'IO::Socket::SSL')\
    \ {\n            $is_all_strings = check_dict_case($value);\n        }\n     \
    \   elsif (ref($value) eq 'IO::Socket::IP') {\n            $is_all_strings = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'IO::Socket::IP6') {\n            $is_all_strings\
    \ = check_dict_case($value);\n        }\n        elsif (", "    foreach my $key\
    \ (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1\
    \ if $key =~ /^[A-Z]+$/i;\n        return 0;\n    }\n    return 1;\n}", "    \n\
    \    foreach my $key (keys(%$dict)) {\n        return 1 if $key eq '' or $key\
    \ eq '_';\n        return 0 if $key eq lc($key) or $key eq uc($key);\n    }\n\
    \    \n    return 0;\n}", "    my $is_all_strings = 1;\n    foreach my $key (keys\
    \ %$dict) {\n        my $value = $dict->{$key};\n        if ($value =~ /^[a-z]+$/i)\
    \ {\n            $is_all_strings = 0;\n            last;\n        }\n        if\
    \ ($value =~ /^[A-Z]+$/i) {\n            $is_all_strings = 0;\n            last;\n\
    \        }\n    }\n    return $is_all_strings;\n}", "    \n    foreach my $key\
    \ (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1\
    \ if $key =~ /^[A-Z]+$/i;\n    }\n    return 0;\n}", "    my $result = 1;\n  \
    \  foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n    \
    \    if ($key eq '' or $key eq '_') {\n            $result = 0;\n            last;\n\
    \        } elsif ($key eq '_') {\n            $result = check_dict_case($value);\n\
    \            last;\n        } elsif ($key =~ /^[a-z]+$/) {\n            $result\
    \ = check_dict_case($value);\n            last;\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $result = check_dict_case($value);\n            last;\n     \
    \   } else {\n            $result = 0;\n            last;\n        }\n    }\n\
    \    return $result;\n}", "    my $ret = 0;\n    foreach my $key (keys(%$dict))\
    \ {\n        my $value = $dict->{$key};\n        if ($value =~ /^[a-z]+$/i) {\n\
    \            $ret = 1;\n            last;\n        }\n        if ($value =~ /^[A-Z]+$/i)\
    \ {\n            $ret = 1;\n            last;\n        }\n    }\n    return $ret;\n\
    }", "    \n    foreach my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n\
    \        return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n    }\n    \n  \
    \  return 1;\n}", "    my $ret = 0;\n    foreach my $key (keys(%$dict)) {\n  \
    \      my $value = $dict->{$key};\n        if ($key eq '' or $key eq '_') {\n\
    \            $ret = 1;\n        }\n        elsif ($key eq '_') {\n           \
    \ if (lc($value) eq lc($key)) {\n                $ret = 1;\n            }\n  \
    \      }\n        elsif (lc($key) eq lc($value)) {\n            $ret = 1;\n  \
    \      }\n        else {\n            $ret = 0;\n        }\n    }\n    return\
    \ $ret;\n}", "    foreach my $key (keys(%$dict)) {\n        return 1 if $key =~\
    \ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n\
    \    }\n    return 1;\n}", "    \n    foreach my $key (keys(%$dict)) {\n     \
    \   return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    \n    return 1;\n}", "    my $is_upper = 0;\n \
    \   foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n   \
    \     if ($value =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n   \
    \     elsif ($value =~ /^[a-z]+$/) {\n            $is_upper = 0;\n        }\n\
    \        else {\n            return 0;\n        }\n    }\n    return $is_upper;\n\
    }", "    \n    foreach my $key (keys(%$dict)) {\n        return 0 if !defined($key)\
    \ || !defined($dict->{$key}) || \n            !($dict->{$key} =~ /^[a-z]+$/i)\
    \ || \n            !($dict->{$key} =~ /^[A-Z]+$/i);\n    }\n    \n    return 1;\n\
    }", "    foreach my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n\
    \        return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n    }\n    return\
    \ 1;\n}", "    my $is_all_strings = 1;\n    foreach my $key (keys(%$dict)) {\n\
    \        if ($key =~ /^[a-z]+$/i) {\n            $is_all_strings = 0;\n      \
    \      last;\n        }\n    }\n    return $is_all_strings;\n}", "    \n    foreach\
    \ my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n       \
    \ return 1 if $key =~ /^[A-Z]+$/i;\n    }\n    return 0;\n}", "    my $flag;\n\
    \    foreach my $key (keys(%$dict)) {\n        if ($key =~ /^[a-z]+$/i) {\n  \
    \          $flag = 1;\n            last;\n        } elsif ($key =~ /^[A-Z]+$/i)\
    \ {\n            $flag = 1;\n            last;\n        } else {\n           \
    \ $flag = 0;\n        }\n    }\n    return $flag;\n}", "    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    my $is_all_strings = 1;\n \
    \   foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n   \
    \     if (not defined $value) {\n            $is_all_strings = 0;\n          \
    \  last;\n        }\n        elsif ($value !~ /^[[:lower:]]+$/) {\n          \
    \  $is_all_strings = 0;\n            last;\n        }\n    }\n    return $is_all_strings;\n\
    }", "    \n    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n\
    \        \n        if ($value =~ /^[a-z]+$/i) {\n            return 1;\n     \
    \   }\n        elsif ($value =~ /^[A-Z]+$/i) {\n            return 1;\n      \
    \  }\n        else {\n            return 0;\n        }\n    }\n    return 0;\n\
    }", "    \n    foreach my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i\
    \ || $key =~ /^[A-Z]+$/i;\n    }\n    \n    return 0;\n}", "    foreach my $key\
    \ (keys(%$dict)) {\n        return 1 if ($key =~ /^[a-z]+$/i); # all keys are\
    \ lower case\n        return 1 if ($key =~ /^[A-Z]+$/i); # all keys are upper\
    \ case\n        return 0;\n    }\n    return 1;\n}", "    my $ret = 0;\n    foreach\
    \ my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($value\
    \ =~ /^[a-z]+$/i) {\n            $ret = 1;\n            last;\n        } elsif\
    \ ($value =~ /^[A-Z]+$/i) {\n            $ret = 1;\n            last;\n      \
    \  }\n    }\n    return $ret;\n}", "    my $ret = 0;\n    foreach my $key (keys(%$dict))\
    \ {\n        my $value = $dict->{$key};\n        if ($value =~ /^[a-z]+$/i) {\n\
    \            $ret = 1;\n            last;\n        } elsif ($value =~ /^[A-Z]+$/i)\
    \ {\n            $ret = 1;\n            last;\n        }\n    }\n    return $ret;\n\
    }", "    \n    foreach my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i\
    \ || $key =~ /^[A-Z]+$/i;\n    }\n    \n    return 0;\n}", "    foreach my $key\
    \ (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1\
    \ if $key =~ /^[A-Z]+$/i;\n        return 0;\n    }\n    return 1;\n}", "    foreach\
    \ my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n       \
    \ return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n    }\n    return 1;\n}",
  "    my $ret = 0;\n    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n\
    \        if (ref($value) eq 'HASH') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'ARRAY') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'SCALAR') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'CODE') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'GLOB') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'IO::Handle') {\n            $ret +=\
    \ check_dict_case($value);\n        }\n        elsif (ref($value) eq 'IO::File')\
    \ {\n            $ret += check_dict_case($value);\n        }\n        elsif (ref($value)\
    \ eq 'IO::Seekable') {\n            $ret += check_dict_case($value);\n       \
    \ }\n        elsif (ref($value) eq 'IO::Dir') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'IO::Socket::INET') {\n            $ret\
    \ += check_dict_case($value);\n        }\n        elsif (ref($value) eq 'IO::Socket::UNIX')\
    \ {\n            $ret += check_dict_case($value);\n        }\n        elsif (ref($value)\
    \ eq 'IO::Socket::SSL') {\n            $ret += check_dict_case($value);\n    \
    \    }\n        elsif (ref($value) eq 'IO::Socket::IP') {\n            $ret +=\
    \ check_dict_case($value);\n        }\n        elsif (ref($value) eq 'IO::Socket::INET6')\
    \ {\n            $ret += check_dict_case($value);\n        }\n        elsif (ref($value)\
    \ eq 'IO::Socket::UNIX') {\n            $ret += check_dict_case($value);\n   \
    \     }\n        elsif (ref($value) eq 'IO::Socket::SSL') {\n            $ret\
    \ += check_dict_case($value);\n        }\n        elsif (ref($value) eq 'IO::Socket::IP')\
    \ {\n            $ret += check_dict_case($value);\n        }\n        elsif (ref($value)\
    \ eq 'IO::Socket::INET", "    \n    foreach my $key (keys(%$dict)) {\n       \
    \ return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    \n    return 1;\n}", "    my $flag;\n    foreach\
    \ my $key (keys(%$dict)) {\n        if ($key =~ /^[a-z]+$/i) {\n            $flag\
    \ = 1;\n            last;\n        } elsif ($key =~ /^[A-Z]+$/i) {\n         \
    \   $flag = 1;\n            last;\n        } else {\n            $flag = 0;\n\
    \        }\n    }\n    return $flag;\n}", "    my $is_all_strings = 1;\n    foreach\
    \ my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($value\
    \ =~ /^[a-z]+$/i) {\n            $is_all_strings = 0;\n            last;\n   \
    \     }\n        if ($value =~ /^[A-Z]+$/i) {\n            $is_all_strings = 0;\n\
    \            last;\n        }\n    }\n    return $is_all_strings;\n}", "    foreach\
    \ my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($value\
    \ =~ /^[a-z]+$/i) {\n            return 1;\n        } elsif ($value =~ /^[A-Z]+$/i)\
    \ {\n            return 1;\n        } else {\n            return 0;\n        }\n\
    \    }\n    return 0;\n}", "    \n    foreach my $key (keys(%$dict)) {\n     \
    \   return 1 if $key eq '' or $key eq '_';\n        return 0 if $key =~ /^[a-z]+$/i;\n\
    \        return 0 if $key =~ /^[A-Z]+$/i;\n    }\n    \n    return 1;\n}", " \
    \   foreach my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n\
    \        return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n    }\n    return\
    \ 1;\n}", "    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n\
    \        return 1 if $key eq '' or $key eq '_' or $key eq '-';\n        return\
    \ 1 if $key eq '_' or $key eq '-';\n        return 1 if $key eq '' or $key eq\
    \ '-';\n        return 0 if $key eq '_' or $key eq '-';\n        return 0 if $key\
    \ eq '' or $key eq '-';\n        return 0 if $key eq '_';\n        return 0 if\
    \ $key eq '-';\n        return 0 if $key eq '_' or $key eq '-';\n        return\
    \ 0 if $key eq '' or $key eq '-';\n        return 0 if $key eq '_' or $key eq\
    \ '-';\n        return 0 if $key eq '' or $key eq '-';\n        return 0 if $key\
    \ eq '_' or $key eq '-';\n        return 0 if $key eq '' or $key eq '-';\n   \
    \     return 0 if $key eq '_' or $key eq '-';\n        return 0 if $key eq ''\
    \ or $key eq '-';\n        return 0 if $key eq '_' or $key eq '-';\n        return\
    \ 0 if $key eq '' or $key eq '-';\n        return 0 if $key eq '_' or $key eq\
    \ '-';\n        return 0 if $key eq '' or $key eq '-';\n        return 0 if $key\
    \ eq '_' or $key eq '-';\n        return 0 if $key eq '' or $key eq '-';\n   \
    \     return 0 if $key eq '_' or $key eq '-';\n        return 0 if $key eq ''\
    \ or $key eq '-';\n        return 0 if $key eq '_' or $key eq '-';\n        return\
    \ 0 if $key eq '' or $key eq '-';\n        return 0 if $key eq '_' or $key eq\
    \ '-';\n        return 0 if $key eq '' or $key eq '-';\n        return 0 if $key\
    \ eq '_' or $key eq '-';\n        return 0 if $key eq '' or $key eq '-';\n   \
    \     return 0 if $key eq '_' or $key eq '-';\n        return 0 if $key eq ''\
    \ or $key eq '-';\n        return 0 if $key eq '_' or $key eq '-';\n        return\
    \ 0 if $key eq '' or $key eq '-';\n        return 0 if $key eq '_' or $key eq\
    \ '-';\n        return 0 if ", "    my $is_upper = exists $dict->{UPPER};\n  \
    \  my $is_lower = exists $dict->{LOWER};\n    return $is_upper || $is_lower;\n\
    }", "    \n    foreach my $key (keys(%$dict)) {\n        return 1 if $key eq ''\
    \ or $key eq '_';\n        return 0 if $key =~ /^[a-z]$/i;\n        return 0 if\
    \ $key =~ /^[A-Z]$/i;\n    }\n    \n    return 1;\n}", "    my $is_upper = 0;\n\
    \    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n  \
    \      if ($value =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n  \
    \      elsif ($value =~ /^[a-z]+$/) {\n            $is_upper = 0;\n        }\n\
    \        else {\n            return 0;\n        }\n    }\n    return $is_upper;\n\
    }", "    my $ret = 0;\n    foreach my $key (keys(%$dict)) {\n        my $value\
    \ = $dict->{$key};\n        if ($key eq '' or $key eq '_') {\n            $ret\
    \ = 1;\n        }\n        elsif ($key =~ /^[a-z]+$/) {\n            $ret = 1;\n\
    \        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $ret = 1;\n    \
    \    }\n        else {\n            $ret = 0;\n        }\n    }\n    return $ret;\n\
    }", "    \n    foreach my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n\
    \        return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n    }\n    \n  \
    \  return 1;\n}", "    foreach my $key (keys(%$dict)) {\n        return 1 if $key\
    \ =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n\
    \    }\n    return 1;\n}", "    my $ret = 0;\n    foreach my $key (keys(%$dict))\
    \ {\n        my $value = $dict->{$key};\n        if ($value =~ /^[a-z]+$/i) {\n\
    \            $ret = 1;\n            last;\n        }\n        if ($value =~ /^[A-Z]+$/i)\
    \ {\n            $ret = 1;\n            last;\n        }\n    }\n    return $ret;\n\
    }", "    \n    foreach my $key (keys(%$dict)) {\n        return 1 if !is_string($key)\
    \ || !is_string($dict->{$key});\n    }\n    \n    return 0;\n}", "    foreach\
    \ my $key (keys(%$dict)) {\n        return 1 if $key eq '' or $key eq '_';\n \
    \       return 0 if $key eq lc($key) or $key eq uc($key);\n    }\n    return 0;\n\
    }", "    my $ret = 0;\n    foreach my $key (keys(%$dict)) {\n        my $value\
    \ = $dict->{$key};\n        if ($key =~ /^[a-z]+$/i) {\n            $ret = 1;\n\
    \            last;\n        } elsif ($key =~ /^[A-Z]+$/i) {\n            $ret\
    \ = 1;\n            last;\n        } else {\n            $ret = 0;\n        }\n\
    \    }\n    return $ret;\n}", "    foreach my $key (keys(%$dict)) {\n        return\
    \ 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n      \
    \  return 0;\n    }\n    return 1;\n}", "    my $is_upper = exists $dict->{UPPERCASE};\n\
    \    my $is_lower = exists $dict->{LOWERCASE};\n    my $is_empty = exists $dict->{EMPTY};\n\
    \    return $is_upper || $is_lower || $is_empty;\n}", "    my $ret = 0;\n    foreach\
    \ my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($value\
    \ =~ /^[a-z]+$/i) {\n            $ret = 1;\n            last;\n        }\n   \
    \     if ($value =~ /^[A-Z]+$/i) {\n            $ret = 1;\n            last;\n\
    \        }\n    }\n    return $ret;\n}", "    \n    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    \n    return 1;\n}", "    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i || $key =~ /^[A-Z]+$/i;\n    }\n\
    \    return 0;\n}", "    my $ret = 0;\n    foreach my $key (keys(%$dict)) {\n\
    \        my $value = $dict->{$key};\n        if ($key =~ /^[a-z]+$/i) {\n    \
    \        $ret = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/i) {\n       \
    \     $ret = 1;\n        }\n        else {\n            $ret = 0;\n        }\n\
    \    }\n    return $ret;\n}", "    my $flag = 0;\n    foreach my $key (keys(%$dict))\
    \ {\n        if ($key eq 'key') {\n            $flag = 1;\n        }\n       \
    \ if ($key eq 'value') {\n            $flag = 1;\n        }\n    }\n    return\
    \ $flag;\n}", "    \n    foreach my $key (keys(%$dict)) {\n        return 1 if\
    \ $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n        return\
    \ 0;\n    }\n    return 1;\n}", "    \n    foreach my $key (keys(%$dict)) {\n\
    \        my $value = $dict->{$key};\n        \n        if (ref($value) eq 'HASH')\
    \ {\n            check_dict_case($value);\n        }\n        elsif (ref($value)\
    \ eq 'ARRAY') {\n            foreach my $element (@$value) {\n               \
    \ check_dict_case($element);\n            }\n        }\n        elsif (ref($value)\
    \ eq 'SCALAR') {\n            if ($value =~ /^[a-z]+$/i) {\n                return\
    \ 1;\n            }\n            elsif ($value =~ /^[A-Z]+$/i) {\n           \
    \     return 1;\n            }\n        }\n        else {\n            return\
    \ 0;\n        }\n    }\n    \n    return 0;\n}", "    my $is_all_strings = 1;\n\
    \    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n  \
    \      if ($value =~ /^[a-z]+$/i) {\n            $is_all_strings = 0;\n      \
    \      last;\n        }\n        if ($value =~ /^[A-Z]+$/i) {\n            $is_all_strings\
    \ = 0;\n            last;\n        }\n    }\n    return $is_all_strings;\n}",
  "    my $ret = 0;\n    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n\
    \        if ($value =~ /^[a-z]+$/i) {\n            $ret = 1;\n            last;\n\
    \        } elsif ($value =~ /^[A-Z]+$/i) {\n            $ret = 1;\n          \
    \  last;\n        }\n    }\n    return $ret;\n}", "    my $ret = 0;\n    foreach\
    \ my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($key\
    \ =~ /^[a-z]+$/i) {\n            $ret = 1;\n            last;\n        }\n   \
    \     if ($key =~ /^[A-Z]+$/i) {\n            $ret = 1;\n            last;\n \
    \       }\n    }\n    return $ret;\n}", "    my $result = 1;\n    foreach my $key\
    \ (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($value =~\
    \ /^[a-z]+$/i) {\n            $result = 0;\n            last;\n        }\n   \
    \     if ($value =~ /^[A-Z]+$/i) {\n            $result = 0;\n            last;\n\
    \        }\n    }\n    return $result;\n}", "    my $ret = 0;\n    foreach my\
    \ $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n        my $type\
    \ = ref($value);\n        if ($type eq 'HASH') {\n            $ret = check_dict_case($value);\n\
    \        } elsif ($type eq 'ARRAY') {\n            foreach my $v (@$value) {\n\
    \                $ret = check_dict_case($v);\n                if ($ret) {\n  \
    \                  last;\n                }\n            }\n        } else {\n\
    \            $ret = lc($key) eq lc($value);\n        }\n        if (!$ret) {\n\
    \            return 0;\n        }\n    }\n    return 1;\n}", "    my $ret = 0;\n\
    \    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n  \
    \      if ($key eq '' || $key eq '_' || $key eq '-') {\n            $ret = 1;\n\
    \        }\n        elsif ($value eq '' || $value eq '_' || $value eq '-') {\n\
    \            $ret = 1;\n        }\n        else {\n            $ret = 0;\n   \
    \     }\n    }\n    return $ret;\n}", "    foreach my $key (keys(%$dict)) {\n\
    \        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    my $result = 1;\n    foreach\
    \ my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($key\
    \ =~ /^[a-z]+$/i) {\n            $result = 1;\n        } elsif ($key =~ /^[A-Z]+$/i)\
    \ {\n            $result = 1;\n        } else {\n            $result = 0;\n  \
    \      }\n    }\n    return $result;\n}", "    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    my $is_all_strings = 1;\n \
    \   foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n   \
    \     if (ref($value) eq 'HASH') {\n            $is_all_strings = check_dict_case($value)\
    \ || $is_all_strings;\n        } elsif (ref($value) eq 'ARRAY') {\n          \
    \  $is_all_strings = check_dict_case($value) || $is_all_strings;\n        } elsif\
    \ (ref($value) eq 'SCALAR') {\n            $is_all_strings = check_dict_case($value)\
    \ || $is_all_strings;\n        } elsif (ref($value) eq 'CODE') {\n           \
    \ $is_all_strings = check_dict_case($value) || $is_all_strings;\n        } elsif\
    \ (ref($value) eq 'GLOB') {\n            $is_all_strings = check_dict_case($value)\
    \ || $is_all_strings;\n        } elsif (ref($value) eq 'IO::Handle') {\n     \
    \       $is_all_strings = check_dict_case($value) || $is_all_strings;\n      \
    \  } elsif (ref($value) eq 'overload::') {\n            $is_all_strings = check_dict_case($value)\
    \ || $is_all_strings;\n        } elsif (ref($value) eq 'UNIVERSAL') {\n      \
    \      $is_all_strings = check_dict_case($value) || $is_all_strings;\n       \
    \ } elsif (ref($value) eq 'Regexp') {\n            $is_all_strings = check_dict_case($value)\
    \ || $is_all_strings;\n        } elsif (ref($value) eq 'IO::File') {\n       \
    \     $is_all_strings = check_dict_case($value) || $is_all_strings;\n        }\
    \ elsif (ref($value) eq 'IO::Dir') {\n            $is_all_strings = check_dict_case($value)\
    \ || $is_all_strings;\n        } elsif (ref($value) eq 'IO::Socket') {\n     \
    \       $is_all_strings = check_dict_case($value) || $is_all_strings;\n      \
    \  } elsif (ref($value) eq 'IO::Select') {\n            $is_all_strings = check_dict_case($value)\
    \ || $is_all_strings;\n        } elsif (ref($value) eq 'IO::Poll') {\n       \
    \     $is_all_strings = check_dict_case($value) || $is_all_strings;\n        }\
    \ elsif (ref($value) eq 'IO::Handle::Pipe') {\n            $is_all_strings = check_dict_case($value)\
    \ || $is_all_string", "    my $ret = 0;\n    foreach my $key (keys(%$dict)) {\n\
    \        my $value = $dict->{$key};\n        if ($value =~ /^[a-z]+$/i) {\n  \
    \          $ret = 1;\n            last;\n        }\n        if ($value =~ /^[A-Z]+$/i)\
    \ {\n            $ret = 1;\n            last;\n        }\n    }\n    return $ret;\n\
    }", "    \n    foreach my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n\
    \        return 1 if $key =~ /^[A-Z]+$/i;\n    }\n    \n    return 0;\n}", " \
    \   my $flag = 1;\n    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n\
    \        if ($key eq '' || $key eq '_') {\n            $flag = 0;\n        }\n\
    \        elsif ($key eq '_') {\n            if ($value eq '' || $value eq '_')\
    \ {\n                $flag = 0;\n            }\n        }\n        elsif ($key\
    \ eq '' || $key eq '_') {\n            if ($value eq '' || $value eq '_') {\n\
    \                $flag = 0;\n            }\n        }\n        elsif ($key eq\
    \ '_') {\n            if ($value eq '' || $value eq '_') {\n                $flag\
    \ = 0;\n            }\n        }\n        elsif ($key eq '' || $key eq '_') {\n\
    \            if ($value eq '' || $value eq '_') {\n                $flag = 0;\n\
    \            }\n        }\n    }\n    return $flag;\n}", "    \n    foreach my\
    \ $key (keys(%$dict)) {\n        return 1 if !is_string($key) || !is_string($dict->{$key});\n\
    \    }\n    \n    return 0;\n}", "    foreach my $key (keys(%$dict)) {\n     \
    \   return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    my $ret = 0;\n    foreach my\
    \ $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($value\
    \ =~ /^[a-z]+$/i) {\n            $ret = 1;\n            last;\n        }\n   \
    \     if ($value =~ /^[A-Z]+$/i) {\n            $ret = 1;\n            last;\n\
    \        }\n    }\n    return $ret;\n}", "    \n    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    \n    return 1;\n}", "    \n    foreach my $key\
    \ (keys(%$dict)) {\n        my $value = $dict->{$key};\n        \n        if ($value\
    \ =~ /^[a-z]+$/i) {\n            return 1;\n        }\n        elsif ($value =~\
    \ /^[A-Z]+$/i) {\n            return 1;\n        }\n        else {\n         \
    \   return 0;\n        }\n    }\n    \n    return 0;\n}", "    foreach my $key\
    \ (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i || $key =~ /^[A-Z]+$/i;\n\
    \    }\n    return 0;\n}", "    my $ret = 0;\n    foreach my $key (keys(%$dict))\
    \ {\n        my $value = $dict->{$key};\n        if ($value =~ /^[a-z]+$/i) {\n\
    \            $ret = 1;\n            last;\n        }\n        if ($value =~ /^[A-Z]+$/i)\
    \ {\n            $ret = 1;\n            last;\n        }\n    }\n    return $ret;\n\
    }", "    \n    foreach my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i\
    \ || $key =~ /^[A-Z]+$/i;\n    }\n    \n    return 0;\n}", "    my $ret = 0;\n\
    \    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n  \
    \      if ($value =~ /^[a-z]+$/i) {\n            $ret = 1;\n            last;\n\
    \        } elsif ($value =~ /^[A-Z]+$/i) {\n            $ret = 1;\n          \
    \  last;\n        }\n    }\n    return $ret;\n}", "    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    \n    foreach my $key (keys(%$dict))\
    \ {\n        return 0 if !is_string($key) || !is_string($dict->{$key});\n    }\n\
    \    \n    return 1;\n}", "    my $ret = 0;\n    foreach my $key (keys(%$dict))\
    \ {\n        my $value = $dict->{$key};\n        if (ref($value) eq 'HASH') {\n\
    \            $ret += check_dict_case($value);\n        }\n        elsif (ref($value)\
    \ eq 'ARRAY') {\n            $ret += check_dict_case($value);\n        }\n   \
    \     elsif (ref($value) eq 'SCALAR') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'CODE') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'HASH') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'ARRAY') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'SCALAR') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'CODE') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'SCALAR') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'CODE') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'SCALAR') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'CODE') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'SCALAR') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'CODE') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'SCALAR') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'CODE') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'SCALAR') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'CODE') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'SCALAR') {\n            $ret += check_dict_case($value);\n\
    \        }\n        elsif (ref", "    my $is_upper = keys %$dict == 0;\n    foreach\
    \ my $key (sort keys %$dict) {\n        my $value = $dict->{$key};\n        my\
    \ $is_lower = lc($key) eq lc($value);\n        my $is_upper = uc($key) eq uc($value);\n\
    \        return $is_upper || $is_lower;\n    }\n    return $is_upper;\n}", " \
    \   my $ret = 0;\n    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n\
    \        if (ref($value) eq 'HASH') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'ARRAY') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'SCALAR') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'CODE') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'GLOB') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Handle') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::File') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Select') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Poll') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Dir') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Seekable') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::DirHandle') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Handle') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Select') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Poll') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Dir') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Seekable') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::DirHandle') {\n            $ret = check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Handle", "    \n    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if !is_string($key) || !is_string($dict->{$key});\n    }\n\
    \    \n    return 0;\n}", "    foreach my $key (keys(%$dict)) {\n        return\
    \ 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n      \
    \  return 0;\n    }\n    return 1;\n}", "    my $ret = 0;\n    foreach my $key\
    \ (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($key =~ /^[a-z]+$/i)\
    \ {\n            $ret = 1;\n        } elsif ($key =~ /^[A-Z]+$/i) {\n        \
    \    $ret = 1;\n        } else {\n            $ret = 0;\n        }\n    }\n  \
    \  return $ret;\n}", "    foreach my $key (keys(%$dict)) {\n        return 1 if\
    \ ($key =~ /^[a-z]+$/i) || ($key =~ /^[A-Z]+$/i);\n    }\n    return 0;\n}", " \
    \   foreach my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n\
    \        return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n    }\n    return\
    \ 1;\n}", "    my $ret = 0;\n    foreach my $key (keys(%$dict)) {\n        my\
    \ $value = $dict->{$key};\n        my $type = ref($value);\n        if ($type\
    \ eq 'HASH') {\n            $ret += check_dict_case($value);\n        } elsif\
    \ ($type eq 'ARRAY') {\n            $ret += check_dict_case($value);\n       \
    \ } elsif ($type eq 'SCALAR') {\n            $ret += check_dict_case($value);\n\
    \        } elsif ($type eq 'CODE') {\n            $ret += check_dict_case($value);\n\
    \        } elsif ($type eq 'GLOB') {\n            $ret += check_dict_case($value);\n\
    \        } elsif ($type eq 'IO::Handle') {\n            $ret += check_dict_case($value);\n\
    \        } elsif ($type eq 'overload::') {\n            $ret += check_dict_case($value);\n\
    \        } elsif ($type eq 'UNIVERSAL') {\n            $ret += check_dict_case($value);\n\
    \        } elsif ($type eq 'overload::') {\n            $ret += check_dict_case($value);\n\
    \        } else {\n            $ret += $key =~ /[a-z]/i || $key =~ /[A-Z]/i;\n\
    \        }\n    }\n    return $ret;\n}", "    \n    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i || $key =~ /^[A-Z]+$/i;\n    }\n\
    \    \n    return 0;\n}", "    my $is_all_strings = 1;\n    foreach my $key (keys(%$dict))\
    \ {\n        my $value = $dict->{$key};\n        if ($value =~ /^[a-z]+$/i) {\n\
    \            $is_all_strings = 0;\n            last;\n        }\n        if ($value\
    \ =~ /^[A-Z]+$/i) {\n            $is_all_strings = 0;\n            last;\n   \
    \     }\n    }\n    return $is_all_strings;\n}", "    my $is_all_strings_lower_case\
    \ = \n        map { lc($_) eq $_ } keys %$dict;\n    my $is_all_strings_upper_case\
    \ = \n        map { uc($_) eq $_ } keys %$dict;\n    return $is_all_strings_lower_case\
    \ || $is_all_strings_upper_case;\n}", "    \n    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    \n    return 1;\n}", "    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i || $key =~ /^[A-Z]+$/i;\n    }\n\
    \    return 0;\n}", "    \n    foreach my $key (keys(%$dict)) {\n        return\
    \ 1 if !is_string($key) or !is_string($dict->{$key});\n    }\n    \n    return\
    \ 0;\n}", "    foreach my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n\
    \        return 1 if $key =~ /^[A-Z]+$/i;\n    }\n    return 0;\n}", "    \n \
    \   foreach my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i\
    \ || $key =~ /^[A-Z]+$/i;\n    }\n    \n    return 0;\n}", "    my $is_all_strings\
    \ = 1;\n    foreach my $key (keys(%$dict)) {\n        if ($key =~ /^[a-z]+$/i)\
    \ {\n            $is_all_strings = 0;\n            last;\n        }\n        if\
    \ ($key =~ /^[A-Z]+$/i) {\n            $is_all_strings = 0;\n            last;\n\
    \        }\n    }\n    return $is_all_strings;\n}", "    my $ret = 0;\n    foreach\
    \ my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($value\
    \ =~ /^[a-z]+$/i) {\n            $ret = 1;\n            last;\n        } elsif\
    \ ($value =~ /^[A-Z]+$/i) {\n            $ret = 1;\n            last;\n      \
    \  }\n    }\n    return $ret;\n}", "    my $ret = 0;\n    foreach my $key (keys(%$dict))\
    \ {\n        my $value = $dict->{$key};\n        if ($value =~ /^[a-z]+$/i) {\n\
    \            $ret = 1;\n            last;\n        } elsif ($value =~ /^[A-Z]+$/i)\
    \ {\n            $ret = 1;\n            last;\n        }\n    }\n    return $ret;\n\
    }", "    my $is_all_strings = 1;\n    foreach my $key (keys(%$dict)) {\n     \
    \   my $value = $dict->{$key};\n        if (ref($value) eq 'HASH') {\n       \
    \     $is_all_strings = check_dict_case($value) || $is_all_strings;\n        }\
    \ elsif (ref($value) eq 'ARRAY') {\n            $is_all_strings = check_dict_case($value)\
    \ || $is_all_strings;\n        } elsif (ref($value) eq 'SCALAR') {\n         \
    \   $is_all_strings = check_dict_case($value) || $is_all_strings;\n        } else\
    \ {\n            $is_all_strings = check_dict_case($value) || $is_all_strings;\n\
    \        }\n    }\n    return $is_all_strings;\n}", "    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    my $is_all_strings = 1;\n \
    \   foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n   \
    \     if (not defined $value) {\n            $is_all_strings = 0;\n          \
    \  last;\n        }\n        if ($key =~ /^[a-z]+$/) {\n            $is_all_strings\
    \ = 0;\n            last;\n        }\n        if ($key =~ /^[A-Z]+$/) {\n    \
    \        $is_all_strings = 0;\n            last;\n        }\n    }\n    return\
    \ $is_all_strings;\n}", "    foreach my $key (keys(%$dict)) {\n        return\
    \ 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n      \
    \  return 0;\n    }\n    return 1;\n}", "    my $ret = 0;\n    foreach my $key\
    \ (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if (ref($value)\
    \ eq 'HASH') {\n            $ret = check_dict_case($value);\n        } elsif (ref($value)\
    \ eq 'ARRAY') {\n            $ret = check_dict_case($value) if @$value != 0;\n\
    \        } elsif (ref($value) eq 'SCALAR') {\n            $ret = check_dict_case($value)\
    \ if !ref($value);\n        } elsif (ref($value) eq 'CODE') {\n            $ret\
    \ = check_dict_case($value) if !ref($value);\n        } elsif (ref($value) eq\
    \ 'GLOB') {\n            $ret = check_dict_case($value) if !ref($value);\n   \
    \     } elsif (ref($value) eq 'IO::Handle') {\n            $ret = check_dict_case($value)\
    \ if !ref($value);\n        } elsif (ref($value) eq 'IO::File') {\n          \
    \  $ret = check_dict_case($value) if !ref($value);\n        } elsif (ref($value)\
    \ eq 'IO::Socket') {\n            $ret = check_dict_case($value) if !ref($value);\n\
    \        } elsif (ref($value) eq 'IO::Select') {\n            $ret = check_dict_case($value)\
    \ if !ref($value);\n        } elsif (ref($value) eq 'IO::Socket::INET') {\n  \
    \          $ret = check_dict_case($value) if !ref($value);\n        } elsif (ref($value)\
    \ eq 'IO::Socket::UNIX') {\n            $ret = check_dict_case($value) if !ref($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::SSL') {\n            $ret = check_dict_case($value)\
    \ if !ref($value);\n        } elsif (ref($value) eq 'IO::Socket::IP') {\n    \
    \        $ret = check_dict_case($value) if !ref($value);\n        } elsif (ref($value)\
    \ eq 'IO::Socket::IP6') {\n            $ret = check_dict_case($value) if !ref($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::IPC') {\n            $ret = check_dict_case($value)\
    \ if !ref($value);\n        } elsif (ref($value) eq 'IO::Socket::UNIX') {\n  \
    \          $ret = check_dict_case($value) if !ref($value);\n        } elsif (ref($value)\
    \ eq 'IO::Socket::PTY') {\n            $", "    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    \n    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \    }\n    return 0;\n}", "    foreach my $key (keys(%$dict)) {\n        return\
    \ 1 if $key =~ /^[a-z]+$/i or $key =~ /^[A-Z]+$/i;\n    }\n    return 0;\n}",
  "    \n    foreach my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n\
    \        return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n    }\n    \n  \
    \  return 1;\n}", "    my $is_upper = uc($dict->{key});\n    my $is_lower = lc($dict->{key});\n\
    \    return $is_upper == $is_lower;\n}", "    foreach my $key (keys(%$dict)) {\n\
    \        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    my $ret = 0;\n    foreach my\
    \ $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($value\
    \ =~ /^[a-z]+$/i) {\n            $ret = 1;\n            last;\n        }\n   \
    \     if ($value =~ /^[A-Z]+$/i) {\n            $ret = 1;\n            last;\n\
    \        }\n    }\n    return $ret;\n}", "    my $is_all_strings_lower_case =\
    \ \n        grep { lc($_) eq lc($_) } keys %$dict;\n    my $is_all_strings_upper_case\
    \ = \n        grep { uc($_) eq uc($_) } keys %$dict;\n    return $is_all_strings_lower_case\
    \ && $is_all_strings_upper_case;\n}", "    foreach my $key (keys(%$dict)) {\n\
    \        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i || $key =~ /^[A-Z]+$/i;\n    }\n\
    \    return 0;\n}", "    my $is_upper = 0;\n    foreach my $key (keys(%$dict))\
    \ {\n        if (lc($key) eq lc($key)) {\n            $is_upper = 1;\n       \
    \     last;\n        }\n    }\n    return $is_upper;\n}", "    my $ret = 0;\n\
    \    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n  \
    \      if ($key eq '' || $key eq '_') {\n            $ret = 1;\n        } elsif\
    \ ($key eq '_') {\n            if (lc($value) eq lc($key)) {\n               \
    \ $ret = 1;\n            }\n        } elsif (lc($value) eq lc($key)) {\n     \
    \       $ret = 1;\n        }\n    }\n    return $ret;\n}", "    my $is_upper =\
    \ 0;\n    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n\
    \        if ($value =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n           \
    \ last;\n        }\n    }\n    return $is_upper;\n}", "    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    \n    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i || $key =~ /^[A-Z]+$/i;\n    }\n\
    \    \n    return 0;\n}", "    my $ret = 0;\n    foreach my $key (keys(%$dict))\
    \ {\n        my $value = $dict->{$key};\n        if ($key =~ /^[a-z]+$/i) {\n\
    \            $ret = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/i) {\n   \
    \         $ret = 1;\n        }\n        else {\n            $ret = 0;\n      \
    \  }\n    }\n    return $ret;\n}", "    my $flag = 0;\n    foreach my $key (keys(%$dict))\
    \ {\n        if ($key eq '' || $key eq '_') {\n            $flag = 1;\n      \
    \      last;\n        }\n        if ($key =~ /^[a-z]+$/) {\n            $flag\
    \ = 1;\n            last;\n        }\n        if ($key =~ /^[A-Z]+$/) {\n    \
    \        $flag = 1;\n            last;\n        }\n    }\n    return $flag;\n}",
  "    my $result = 1;\n    foreach my $key (keys(%$dict)) {\n        my $value =\
    \ $dict->{$key};\n        if (ref($value) ne 'HASH') {\n            $result =\
    \ 0;\n            last;\n        }\n        if ($value ne ''){\n            if\
    \ (lc($key) ne $key) {\n                $result = 0;\n            }\n        }\n\
    \    }\n    return $result;\n}", "    \n    foreach my $key (keys(%$dict)) {\n\
    \        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    \n    return 1;\n}", "    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i || $key =~ /^[A-Z]+$/i;\n    }\n\
    \    return 0;\n}", "    foreach my $key (keys(%$dict)) {\n        return 1 if\
    \ $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n        return\
    \ 0;\n    }\n    return 1;\n}", "    my $is_all_strings = 1;\n    foreach my $key\
    \ (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if (ref($value)\
    \ eq 'HASH') {\n            $is_all_strings = check_dict_case($value) || $is_all_strings;\n\
    \        } elsif (ref($value) eq 'ARRAY') {\n            $is_all_strings = check_dict_case($value)\
    \ || $is_all_strings;\n        } elsif (ref($value) eq 'SCALAR') {\n         \
    \   $is_all_strings = check_dict_case($value) || $is_all_strings;\n        } elsif\
    \ (ref($value) eq 'CODE') {\n            $is_all_strings = check_dict_case($value)\
    \ || $is_all_strings;\n        } elsif (ref($value) eq 'GLOB') {\n           \
    \ $is_all_strings = check_dict_case($value) || $is_all_strings;\n        } elsif\
    \ (ref($value) eq 'IO::Handle') {\n            $is_all_strings = check_dict_case($value)\
    \ || $is_all_strings;\n        } elsif (ref($value) eq 'IO::File') {\n       \
    \     $is_all_strings = check_dict_case($value) || $is_all_strings;\n        }\
    \ elsif (ref($value) eq 'IO::Socket') {\n            $is_all_strings = check_dict_case($value)\
    \ || $is_all_strings;\n        } elsif (ref($value) eq 'IO::Pty') {\n        \
    \    $is_all_strings = check_dict_case($value) || $is_all_strings;\n        }\
    \ elsif (ref($value) eq 'IO::Seekable') {\n            $is_all_strings = check_dict_case($value)\
    \ || $is_all_strings;\n        } elsif (ref($value) eq 'IO::Select') {\n     \
    \       $is_all_strings = check_dict_case($value) || $is_all_strings;\n      \
    \  } elsif (ref($value) eq 'IO::Socket::INET') {\n            $is_all_strings\
    \ = check_dict_case($value) || $is_all_strings;\n        } elsif (ref($value)\
    \ eq 'IO::Socket::UNIX') {\n            $is_all_strings = check_dict_case($value)\
    \ || $is_all_strings;\n        } elsif (ref($value) eq 'IO::Socket::SSL') {\n\
    \            $is_all_strings = check_dict_case($value) || $is_all_strings;\n \
    \       } elsif (ref($value) eq 'IO::Socket::IP') {\n            $is_all_strings\
    \ = ", "    \n    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n\
    \        \n        if ($value =~ /^[a-z]+$/i) {\n            return 1;\n     \
    \   } elsif ($value =~ /^[A-Z]+$/i) {\n            return 1;\n        } else {\n\
    \            return 0;\n        }\n    }\n    return 0;\n}", "    foreach my $key\
    \ (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($value =~\
    \ /^[a-z]+$/i) {\n            return 1;\n        } elsif ($value =~ /^[A-Z]+$/i)\
    \ {\n            return 1;\n        } else {\n            return 0;\n        }\n\
    \    }\n    return 0;\n}", "    foreach my $key (keys(%$dict)) {\n        return\
    \ 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n      \
    \  return 0;\n    }\n    return 1;\n}", "    my $ret = 0;\n    foreach my $key\
    \ (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($key =~ /^[a-z]+$/i)\
    \ {\n            $ret = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/i) {\n\
    \            $ret = 1;\n        }\n        else {\n            $ret = 0;\n   \
    \     }\n    }\n    return $ret;\n}", "    foreach my $key (keys(%$dict)) {\n\
    \        return 1 if $key =~ /^[a-z]+$/i or $key =~ /^[A-Z]+$/i;\n    }\n    return\
    \ 0;\n}", "    my $ret = 0;\n    foreach my $key (keys(%$dict)) {\n        my\
    \ $value = $dict->{$key};\n        if ($key eq '' || $key eq '_') {\n        \
    \    $ret = 1;\n        }\n        elsif ($value eq '' || $value eq '_') {\n \
    \           $ret = 1;\n        }\n        elsif ($key eq '_') {\n            $ret\
    \ = 1;\n        }\n        elsif ($value eq '_') {\n            $ret = 1;\n  \
    \      }\n        else {\n            $ret = 0;\n        }\n    }\n    return\
    \ $ret;\n}", "    my $ret = 0;\n    foreach my $key (keys(%$dict)) {\n       \
    \ my $value = $dict->{$key};\n        if (ref($value) eq 'HASH') {\n         \
    \   $ret += check_dict_case($value);\n        } elsif (ref($value) eq 'ARRAY')\
    \ {\n            foreach my $item (@$value) {\n                $ret += check_dict_case($item);\n\
    \            }\n        } elsif (ref($value) eq 'SCALAR') {\n            $ret\
    \ += check_dict_case($value);\n        } elsif (ref($value) eq 'CODE') {\n   \
    \         $ret += check_dict_case($value);\n        } elsif (ref($value) eq 'GLOB')\
    \ {\n            $ret += check_dict_case($value);\n        } elsif (ref($value)\
    \ eq 'IO::Handle') {\n            $ret += check_dict_case($value);\n        }\
    \ elsif (ref($value) eq 'IO::File') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Seekable') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Dir') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::INET') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::UNIX') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::SSL') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::IP') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::INET6') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::UNIX') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::SSL') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::IP') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::INET6') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) ", "    my $ret = 0;\n    foreach my $key (keys(%$dict))\
    \ {\n        my $value = $dict->{$key};\n        if ($value =~ /^[a-z]+$/i) {\n\
    \            $ret = 1;\n            last;\n        }\n        if ($value =~ /^[A-Z]+$/i)\
    \ {\n            $ret = 1;\n            last;\n        }\n    }\n    return $ret;\n\
    }", "    foreach my $key (keys(%$dict)) {\n        return 1 unless $key =~ /^[a-z]+$/i;\n\
    \        return 1 unless $key =~ /^[A-Z]+$/i;\n    }\n    return 0;\n}", "   \
    \ my $flag = 1;\n    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n\
    \        if ($key =~ /^[a-z]+$/i) {\n            if ($value =~ /^[a-z]+$/i) {\n\
    \                $flag = 0;\n            }\n        }\n        if ($key =~ /^[A-Z]+$/i)\
    \ {\n            if ($value =~ /^[A-Z]+$/i) {\n                $flag = 0;\n  \
    \          }\n        }\n    }\n    return $flag;\n}", "    foreach my $key (keys(%$dict))\
    \ {\n        return 1 unless $key =~ /^[a-z]+$/i;\n        return 1 unless $key\
    \ =~ /^[A-Z]+$/i;\n        return 0;\n    }\n    return 1;\n}", "    \n    foreach\
    \ my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n       \
    \ return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n    }\n    \n    return\
    \ 1;\n}", "    \n    foreach my $key (keys(%$dict)) {\n        return 1 if $key\
    \ =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n\
    \    }\n    \n    return 1;\n}", "    foreach my $key (keys(%$dict)) {\n     \
    \   return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    my $is_all_strings = 1;\n \
    \   foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n   \
    \     if ($value =~ /^[a-z]+$/i) {\n            $is_all_strings = 0;\n       \
    \     last;\n        }\n        if ($value =~ /^[A-Z]+$/i) {\n            $is_all_strings\
    \ = 0;\n            last;\n        }\n    }\n    return $is_all_strings;\n}",
  "    foreach my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n\
    \        return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n    }\n    return\
    \ 1;\n}", "    my $ret = 0;\n    foreach my $key (keys(%$dict)) {\n        if\
    \ ($key =~ /^[a-z]+$/i) {\n            $ret = 1;\n            last;\n        }\n\
    \        if ($key =~ /^[A-Z]+$/i) {\n            $ret = 1;\n            last;\n\
    \        }\n    }\n    return $ret;\n}", "    \n    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    my $ret = 0;\n    foreach my\
    \ $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($value\
    \ =~ /^[a-z]+$/i) {\n            $ret = 1;\n            last;\n        }\n   \
    \     if ($value =~ /^[A-Z]+$/i) {\n            $ret = 1;\n            last;\n\
    \        }\n    }\n    return $ret;\n}", "    my $is_upper = 0;\n    foreach my\
    \ $key (keys(%$dict)) {\n        if ($key =~ /^[a-z]+$/i) {\n            $is_upper\
    \ = 1;\n            last;\n        }\n        if ($key =~ /^[A-Z]+$/i) {\n   \
    \         $is_upper = 1;\n            last;\n        }\n    }\n    return $is_upper;\n\
    }", "    my $is_all_strings = 1;\n    foreach my $key (keys(%$dict)) {\n     \
    \   my $value = $dict->{$key};\n        if (not is_string($value)) {\n       \
    \     $is_all_strings = 0;\n            last;\n        }\n    }\n    return $is_all_strings;\n\
    }", "    my $result = 1;\n    foreach my $key (keys(%$dict)) {\n        if ($key\
    \ =~ /^[a-z]+$/i) {\n            $result = 0;\n            last;\n        }\n\
    \        if ($key =~ /^[A-Z]+$/i) {\n            $result = 0;\n            last;\n\
    \        }\n    }\n    return $result;\n}", "    my $ret = 0;\n    foreach my\
    \ $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n        if ($value\
    \ =~ /^[a-z]+$/i) {\n            $ret = 1;\n            last;\n        } elsif\
    \ ($value =~ /^[A-Z]+$/i) {\n            $ret = 1;\n            last;\n      \
    \  }\n    }\n    return $ret;\n}", "    \n    foreach my $key (keys(%$dict)) {\n\
    \        my $value = $dict->{$key};\n        \n        if ($value =~ /^[a-z]+$/i)\
    \ {\n            return 1;\n        }\n        elsif ($value =~ /^[A-Z]+$/i) {\n\
    \            return 1;\n        }\n        else {\n            return 0;\n   \
    \     }\n    }\n    \n    return 0;\n}", "    foreach my $key (keys(%$dict)) {\n\
    \        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    my $is_all_strings = 1;\n \
    \   foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n   \
    \     if (not defined $value) {\n            $is_all_strings = 0;\n          \
    \  last;\n        }\n        if ($key =~ /^[a-z]+$/) {\n            $is_all_strings\
    \ = 0;\n            last;\n        }\n        if ($key =~ /^[A-Z]+$/) {\n    \
    \        $is_all_strings = 0;\n            last;\n        }\n    }\n    return\
    \ $is_all_strings;\n}", "    foreach my $key (keys(%$dict)) {\n        return\
    \ 1 if $key eq '' or $key eq '_';\n        return 0 if $key eq lc($key);\n   \
    \     return 0 if $key eq uc($key);\n    }\n    return 1;\n}", "    \n    foreach\
    \ my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n       \
    \ return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n    }\n    \n    return\
    \ 1;\n}", "    my $ret = 0;\n    foreach my $key (keys(%$dict)) {\n        my\
    \ $value = $dict->{$key};\n        if ($key =~ /^[a-z]+$/i) {\n            $ret\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/i) {\n            $ret = 1;\n\
    \        }\n        else {\n            $ret = 0;\n        }\n    }\n    return\
    \ $ret;\n}", "    foreach my $key (keys(%$dict)) {\n        return 1 if $key =~\
    \ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n\
    \    }\n    return 1;\n}", "    \n    foreach my $key (keys(%$dict)) {\n     \
    \   return 1 if $key =~ /^[a-z]+$/i || $key =~ /^[A-Z]+$/i;\n    }\n    \n   \
    \ return 0;\n}", "    \n    foreach my $key (keys(%$dict)) {\n        return 1\
    \ if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n        return\
    \ 0;\n    }\n    \n    return 1;\n}", "    my $ret = 0;\n    foreach my $key (keys(%$dict))\
    \ {\n        my $value = $dict->{$key};\n        if ($key eq '' || $key eq '_')\
    \ {\n            $ret = 1;\n        }\n        elsif (ref($value) eq 'HASH') {\n\
    \            $ret = check_dict_case($value);\n        }\n        elsif (ref($value)\
    \ eq 'ARRAY') {\n            $ret = check_dict_case($value);\n        }\n    \
    \    elsif (ref($value) eq 'SCALAR') {\n            $ret = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'CODE') {\n            $ret = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'GLOB') {\n            $ret = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'IO') {\n            $ret = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'UNDEF') {\n            $ret = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'CODE') {\n            $ret = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'GLOB') {\n            $ret = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'IO') {\n            $ret = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'UNDEF') {\n            $ret = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'CODE') {\n            $ret = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'GLOB') {\n            $ret = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'IO') {\n            $ret = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'UNDEF') {\n            $ret = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'CODE') {\n            $ret = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'GLOB') {\n            $ret = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'IO') {\n            $ret = check_dict_case($value);\n\
    \        }\n        elsif (ref($value) eq 'UNDEF') {\n            $ret = check_dict_case($value);\n\
    \        }\n        elsif (", "    \n    foreach my $key (keys(%$dict)) {\n  \
    \      return 1 if !ref($dict->{$key}) || !ref($dict->{$key}) \n            ||\
    \ $dict->{$key} eq 'HASH';\n        return 1 if !ref($dict->{$key}) || !ref($dict->{$key})\
    \ \n            || $dict->{$key} eq 'ARRAY';\n        return 1 if !ref($dict->{$key})\
    \ || !ref($dict->{$key}) \n            || $dict->{$key} eq 'SCALAR';\n       \
    \ return 1 if !ref($dict->{$key}) || !ref($dict->{$key}) \n            || $dict->{$key}\
    \ eq 'CODE';\n        return 1 if !ref($dict->{$key}) || !ref($dict->{$key}) \n\
    \            || $dict->{$key} eq 'GLOB';\n        return 1 if !ref($dict->{$key})\
    \ || !ref($dict->{$key}) \n            || $dict->{$key} eq 'IO';\n        return\
    \ 1 if !ref($dict->{$key}) || !ref($dict->{$key}) \n            || $dict->{$key}\
    \ eq 'IO::Handle';\n        return 1 if !ref($dict->{$key}) || !ref($dict->{$key})\
    \ \n            || $dict->{$key} eq 'IO::File';\n        return 1 if !ref($dict->{$key})\
    \ || !ref($dict->{$key}) \n            || $dict->{$key} eq 'IO::Socket';\n   \
    \     return 1 if !ref($dict->{$key}) || !ref($dict->{$key}) \n            ||\
    \ $dict->{$key} eq 'IO::Select';\n        return 1 if !ref($dict->{$key}) || !ref($dict->{$key})\
    \ \n            || $dict->{$key} eq 'IO::Poll';\n        return 1 if !ref($dict->{$key})\
    \ || !ref($dict->{$key}) \n            || $dict->{$key} eq 'IO::Dir';\n      \
    \  return 1 if !ref($dict->{$key}) || !ref($dict->{$key}) \n            || $dict->{$key}\
    \ eq 'IO::Seekable';\n        return 1 if !ref($dict->{$key}) || !ref($dict->{$key})\
    \ \n            || $dict->{$key} eq 'IO::Zlib';\n        return 1 if !ref($dict->{$key})\
    \ || !ref($dict->{$", "    foreach my $key (keys(%$dict)) {\n        return 1\
    \ if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n        return\
    \ 0;\n    }\n    return 1;\n}", "    foreach my $key (keys(%$dict)) {\n      \
    \  return 1 if $key =~ /^[a-z]+$/i or $key =~ /^[A-Z]+$/i;\n    }\n    return\
    \ 0;\n}", "    foreach my $key (keys(%$dict)) {\n        return 1 if ($key =~\
    \ /^[a-z]+$/i); \n        return 1 if ($key =~ /^[A-Z]+$/i);\n        return 0;\n\
    \    }\n    return 1;\n}", "    my $ret = 0;\n    foreach my $key (keys(%$dict))\
    \ {\n        my $value = $dict->{$key};\n        if (ref($value) eq 'HASH') {\n\
    \            $ret += check_dict_case($value);\n        } elsif (ref($value) eq\
    \ 'ARRAY') {\n            $ret += check_dict_case($value);\n        } elsif (ref($value)\
    \ eq 'SCALAR') {\n            $ret += check_dict_case($value);\n        } elsif\
    \ (ref($value) eq 'CODE') {\n            $ret += check_dict_case($value);\n  \
    \      } elsif (ref($value) eq 'GLOB') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Handle') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::File') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Seekable') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Dir') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::INET') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::UNIX') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::SSL') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::IP') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::INET6') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::UNIX6') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::SSL6') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::IP6') {\n            $ret += check_dict_case($value);\n\
    \        } elsif (ref($value) eq 'IO::Socket::INET::Handle') {\n            $ret\
    \ += check_dict_case($value);\n        } elsif (ref($value) eq 'IO::Socket::UNIX::",
  "    \n    foreach my $key (keys(%$dict)) {\n        return 1 if $key =~ /^[a-z]+$/i;\n\
    \        return 1 if $key =~ /^[A-Z]+$/i;\n        return 0;\n    }\n    \n  \
    \  return 1;\n}", "    \n    foreach my $key (keys(%$dict)) {\n        return\
    \ 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n      \
    \  return 0;\n    }\n    \n    return 1;\n}", "    foreach my $key (keys(%$dict))\
    \ {\n        return 1 if $key =~ /^[a-z]+$/i;\n        return 1 if $key =~ /^[A-Z]+$/i;\n\
    \        return 0;\n    }\n    return 1;\n}", "    \n    foreach my $key (keys(%$dict))\
    \ {\n        my $value = $dict->{$key};\n        if ($key eq '' || $key eq '-')\
    \ {\n            return 1;\n        }\n        if ($value eq '' || $value eq '-')\
    \ {\n            return 1;\n        }\n        if (lc($key) eq lc($value)) {\n\
    \            return 1;\n        }\n        if (uc($key) eq uc($value)) {\n   \
    \         return 1;\n        }\n    }\n    return 0;\n}", "    my $is_all_strings\
    \ = 1;\n    foreach my $key (keys(%$dict)) {\n        my $value = $dict->{$key};\n\
    \        if (not is_string($value)) {\n            $is_all_strings = 0;\n    \
    \        last;\n        }\n    }\n    return $is_all_strings;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
