language: pl
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^-?\\d+$/) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^-?\\d+$/) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            next;\n        }\n        if ($num % 2 == 1) {\n            $sum\
    \ += $num;\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            next;\n        }\n        if ($num % 2 == 1) {\n            $sum\
    \ += $num;\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            $sum -= $num;\n        } else {\n            $sum += $num;\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^-?\\d+$/) {\n            $sum += $num * $num;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            $sum -= $num;\n        } else {\n            $sum += $num;\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            $sum -= $num;\n        } else {\n            $sum += $num;\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^-?\\d+$/) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^-?\\d+$/) {\n            $sum += $num * $num;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            next;\n        }\n        if ($num % 2 == 1) {\n            $sum\
    \ += $num;\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^-?\\d+$/) {\n            $sum += $num * $num;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^-?\\d+$/) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            next;\n        }\n        if ($num % 2 == 1) {\n            $sum\
    \ += $num;\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^-?\\d+$/) {\n            $sum += $num * $num;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            $sum -= $num;\n        } else {\n            $sum += $num;\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^-?\\d+$/) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^-?\\d+$/) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            next;\n        }\n        if ($num % 2 == 1) {\n            $sum\
    \ += $num;\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            next;\n        }\n        if ($num % 2 == 1) {\n            $sum\
    \ += $num;\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            next;\n        }\n        if ($num % 2 == 1) {\n            $sum\
    \ += $num;\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^-?\\d+$/) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            next;\n        }\n        if ($num % 2 == 1) {\n            $sum\
    \ += $num;\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^-?\\d+$/) {\n            $sum += $num * $num;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            next;\n        }\n        if ($num % 2 == 1) {\n            $sum\
    \ += $num;\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^-?\\d+$/) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^-?\\d+$/) {\n            $sum += $num * $num;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^-?\\d+$/) {\n            $sum += $num * $num;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            $sum -= $num;\n        } else {\n            $sum += $num;\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            next;\n        }\n        if ($num % 2 == 1) {\n            $sum\
    \ += $num;\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            next;\n        }\n        if ($num % 2 == 1) {\n            $sum\
    \ += $num;\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            next;\n        }\n        if ($num % 2 == 1) {\n            $sum\
    \ += $num;\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num > 0)\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num >=\
    \ 0) {\n            $sum += $num;\n        }\n    }\n    return $sum * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012942
