language: pl
name: HumanEval_116_sort_array
results:
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $temp;\n\
    \    my @sorted_arr = ();\n    my $sorted_arr_size = @sorted_arr;\n    my $sorted_arr_index\
    \ = 0;\n    my $sorted_arr_index2 = 0;\n    my $sorted_arr_index3 = 0;\n    my\
    \ $sorted_arr_index4 = 0;\n    my $sorted_arr_index5 = 0;\n    my $sorted_arr_index6\
    \ = 0;\n    my $sorted_arr_index7 = 0;\n    my $sorted_arr_index8 = 0;\n    my\
    \ $sorted_arr_index9 = 0;\n    my $sorted_arr_index10 = 0;\n    my $sorted_arr_index11\
    \ = 0;\n    my $sorted_arr_index12 = 0;\n    my $sorted_arr_index13 = 0;\n   \
    \ my $sorted_arr_index14 = 0;\n    my $sorted_arr_index15 = 0;\n    my $sorted_arr_index16\
    \ = 0;\n    my $sorted_arr_index17 = 0;\n    my $sorted_arr_index18 = 0;\n   \
    \ my $sorted_arr_index19 = 0;\n    my $sorted_arr_index20 = 0;\n    my $sorted_arr_index21\
    \ = 0;\n    my $sorted_arr_index22 = 0;\n    my $sorted_arr_index23 = 0;\n   \
    \ my $sorted_arr_index24 = 0;\n    my $sorted_arr_index25 = 0;\n    my $sorted_arr_index26\
    \ = 0;\n    my $sorted_arr_index27 = 0;\n    my $sorted_arr_index28 = 0;\n   \
    \ my $sorted_arr_index29 = 0;\n    my $sorted_arr_index30 = 0;\n    my $sorted_arr_index31\
    \ = 0;\n    my $sorted_arr_index32 = 0;\n    my $sorted_arr_index33 = 0;\n   \
    \ my $sorted_arr_index34 = 0;\n    my $sorted_arr_index35 = 0;\n    my $sorted_arr_index36\
    \ = 0;\n    my $sorted_arr_index37 = 0;\n    my $sorted_arr_index38 = 0;\n   \
    \ my $sorted_arr_index39 = 0;\n    my $sorted_arr_index40 = 0;\n    my $sorted_arr_index41\
    \ = 0;\n    my $sorted_arr_index42 = 0;\n    my $sorted_arr_index43 = 0;\n   \
    \ my $sorted_arr_index44 = 0;\n    my $sorted_arr_index45 = 0;\n    my $sorted_arr_index46\
    \ = 0;\n    my $sorted_arr_index47 = 0;\n    my $sorted_arr_index48 = 0;\n   \
    \ my $sorted_arr_index49 = 0;\n    my $sorted_arr_index50 = 0;\n    my $sorted_arr_index51\
    \ = 0;\n    my $sorted_arr_index52 = 0;\n    my $sorted_arr_index53 = 0;\n   \
    \ my $sorted_arr_index54 = 0;\n    my $sorted_arr_index55 = 0;\n    my $sorted_arr_index56\
    \ = 0;\n    my $sorted_arr_index57 = 0;\n    my $sorted_arr_index58 = 0;\n   \
    \ my $sorted_arr_index\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpvjjmuv6l.pl line 74, at end
    of line

    syntax error at /tmp/tmpvjjmuv6l.pl line 74, near "$sorted_arr_index

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpvjjmuv6l.pl line 113, at end
    of line

    syntax error at /tmp/tmpvjjmuv6l.pl line 113, at EOF

    Execution of /tmp/tmpvjjmuv6l.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_val = 0;\n    foreach my $num (@$arr) {\n\
    \        $num_ones += $num;\n        $decimal_val += $num * log(2);\n    }\n \
    \   foreach my $num (@$arr) {\n        if ($num_ones == $num) {\n            push(@sorted_arr,\
    \ $decimal_val);\n        }\n        else {\n            push(@sorted_arr, $num);\n\
    \        }\n        $num_ones -= $num;\n        $decimal_val -= $num * log(2);\n\
    \    }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my @res;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $tmp;\n    my $cmp;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpwdth414a.pl line 94, at end
    of line

    syntax error at /tmp/tmpwdth414a.pl line 94, near "$cmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpwdth414a.pl line 133, at end
    of line

    syntax error at /tmp/tmpwdth414a.pl line 133, at EOF

    Execution of /tmp/tmpwdth414a.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $temp\
    \ = 0;\n    my $flag = 0;\n    my @sorted_arr = ();\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpafcjkf96.pl line 54, at
    end of line

    syntax error at /tmp/tmpafcjkf96.pl line 54, at EOF

    Execution of /tmp/tmpafcjkf96.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3\
    \ = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7\
    \ = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11\
    \ = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15\
    \ = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19\
    \ = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23\
    \ = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27\
    \ = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31\
    \ = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35\
    \ = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39\
    \ = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43\
    \ = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47\
    \ = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51\
    \ = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55\
    \ = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59\
    \ = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63\
    \ = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67\
    \ = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71\
    \ = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75\
    \ = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79\
    \ = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82 = 0;\n    my $tmp83\
    \ = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpujd_kcji.pl line 94,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpujd_kcji.pl line 94, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpujd_kcji.pl line 133, at end of line\nsyntax\
    \ error at /tmp/tmpujd_kcji.pl line 133, at EOF\nExecution of /tmp/tmpujd_kcji.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n  \
    \  my $temp = 0;\n    my $count = 0;\n    my $ones = 0;\n    my $dec = 0;\n  \
    \  my $cmp = 0;\n    my $cmp2 = 0;\n    my $cmp3 = 0;\n    my $cmp4 = 0;\n   \
    \ my $cmp5 = 0;\n    my $cmp6 = 0;\n    my $cmp7 = 0;\n    my $cmp8 = 0;\n   \
    \ my $cmp9 = 0;\n    my $cmp10 = 0;\n    my $cmp11 = 0;\n    my $cmp12 = 0;\n\
    \    my $cmp13 = 0;\n    my $cmp14 = 0;\n    my $cmp15 = 0;\n    my $cmp16 = 0;\n\
    \    my $cmp17 = 0;\n    my $cmp18 = 0;\n    my $cmp19 = 0;\n    my $cmp20 = 0;\n\
    \    my $cmp21 = 0;\n    my $cmp22 = 0;\n    my $cmp23 = 0;\n    my $cmp24 = 0;\n\
    \    my $cmp25 = 0;\n    my $cmp26 = 0;\n    my $cmp27 = 0;\n    my $cmp28 = 0;\n\
    \    my $cmp29 = 0;\n    my $cmp30 = 0;\n    my $cmp31 = 0;\n    my $cmp32 = 0;\n\
    \    my $cmp33 = 0;\n    my $cmp34 = 0;\n    my $cmp35 = 0;\n    my $cmp36 = 0;\n\
    \    my $cmp37 = 0;\n    my $cmp38 = 0;\n    my $cmp39 = 0;\n    my $cmp40 = 0;\n\
    \    my $cmp41 = 0;\n    my $cmp42 = 0;\n    my $cmp43 = 0;\n    my $cmp44 = 0;\n\
    \    my $cmp45 = 0;\n    my $cmp46 = 0;\n    my $cmp47 = 0;\n    my $cmp48 = 0;\n\
    \    my $cmp49 = 0;\n    my $cmp50 = 0;\n    my $cmp51 = 0;\n    my $cmp52 = 0;\n\
    \    my $cmp53 = 0;\n    my $cmp54 = 0;\n    my $cmp55 = 0;\n    my $cmp56 = 0;\n\
    \    my $cmp57 = 0;\n    my $cmp58 = 0;\n    my $cmp59 = 0;\n    my $cmp60 = 0;\n\
    \    my $cmp61 = 0;\n    my $cmp62 = 0;\n    my $cmp63 = 0;\n    my $cmp64 = 0;\n\
    \    my $cmp65 = 0;\n    my $cmp66 = 0;\n    my $cmp67 = 0;\n    my $cmp68 = 0;\n\
    \    my $cmp69 = 0;\n    my $cmp70 = 0;\n    my $cmp71 = 0;\n    my $cmp72 = 0;\n\
    \    my $cmp73 = 0;\n    my $cmp74 = 0;\n    my $cmp75 = 0;\n    my $cmp76 = 0;\n\
    \    my $cmp77 = 0;\n    my $cmp78 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpgvyn92n1.pl line 134,
    at end of line

    syntax error at /tmp/tmpgvyn92n1.pl line 134, at EOF

    Execution of /tmp/tmpgvyn92n1.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $ones = $size - 1;\n    my $zeros = $size - $ones;\n    my $max_ones = $ones;\n\
    \    my $max_zeros = $zeros;\n    my $max_size = $size;\n    my $max_ones_size\
    \ = $ones;\n    my $max_zeros_size = $zeros;\n    my $max_ones_value = $max_ones;\n\
    \    my $max_zeros_value = $max_zeros;\n    my $max_ones_decimal_value = $max_ones_value;\n\
    \    my $max_zeros_decimal_value = $max_zeros_value;\n    my $max_ones_decimal_value\
    \ = $max_ones_value;\n    my $max_zeros_decimal_value = $max_zeros_value;\n  \
    \  my $max_ones_decimal_value = $max_ones_value;\n    my $max_zeros_decimal_value\
    \ = $max_zeros_value;\n    my $max_ones_decimal_value = $max_ones_value;\n   \
    \ my $max_zeros_decimal_value = $max_zeros_value;\n    my $max_ones_decimal_value\
    \ = $max_ones_value;\n    my $max_zeros_decimal_value = $max_zeros_value;\n  \
    \  my $max_ones_decimal_value = $max_ones_value;\n    my $max_zeros_decimal_value\
    \ = $max_zeros_value;\n    my $max_ones_decimal_value = $max_ones_value;\n   \
    \ my $max_zeros_decimal_value = $max_zeros_value;\n    my $max_ones_decimal_value\
    \ = $max_ones_value;\n    my $max_zeros_decimal_value = $max_zeros_value;\n  \
    \  my $max_ones_decimal_value = $max_ones_value;\n    my $max_zeros_decimal_value\
    \ = $max_zeros_value;\n    my $max_ones_decimal_value = $max_ones_value;\n   \
    \ my $max_zeros_decimal_value = $max_zeros_value;\n    my $max_ones_decimal_value\
    \ = $max_ones_value;\n    my $max_zeros_decimal_value = $max_zeros_value;\n  \
    \  my $max_ones_decimal_value = $max_ones_value;\n    my $max_zeros_decimal_value\
    \ = $max_zeros_value;\n    my $max_ones_decimal_value = $max_ones_value;\n   \
    \ my $max_zeros_decimal_value = $max_zeros_value;\n    my $max_ones_decimal_value\
    \ = $max_ones_value;\n    my $max_zeros_decimal_value = $max_zeros_value;\n  \
    \  my $max_ones_decimal_value = $max_ones_value;\n    my $max_zeros_decimal_value\
    \ = $max_zeros_value;\n    my $max_ones_decimal_value = $max_ones_value;\n   \
    \ my $max_zeros_decimal_value = $max_zeros_value;\n    my $max_\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp1_xilq74.pl line 50, at end
    of line

    syntax error at /tmp/tmp1_xilq74.pl line 50, near "$max_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp1_xilq74.pl line 89, at end of
    line

    syntax error at /tmp/tmp1_xilq74.pl line 89, at EOF

    Execution of /tmp/tmp1_xilq74.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my($i, $j, $temp, $count);\n\
    \    my $len = @$arr;\n    my $max = -1;\n    my $min = 0;\n    my $min_index;\n\
    \    my $max_index;\n    my $min_val;\n    my $max_val;\n    my $min_count = 0;\n\
    \    my $max_count = 0;\n    my $max_diff;\n    my $min_diff;\n    my $max_diff_index;\n\
    \    my $max_diff_val;\n    my $max_diff_count;\n    my $min_diff_val;\n    my\
    \ $min_diff_count;\n    my $min_diff_index;\n    my $max_diff_index;\n    my $max_diff_val;\n\
    \    my $max_diff_count;\n    my $min_diff_val;\n    my $min_diff_count;\n   \
    \ my $min_diff_index;\n    my $max_diff_index;\n    my $max_diff_val;\n    my\
    \ $max_diff_count;\n    my $min_diff_val;\n    my $min_diff_count;\n    my $min_diff_index;\n\
    \    my $max_diff_index;\n    my $max_diff_val;\n    my $max_diff_count;\n   \
    \ my $min_diff_val;\n    my $min_diff_count;\n    my $min_diff_index;\n    my\
    \ $max_diff_index;\n    my $max_diff_val;\n    my $max_diff_count;\n    my $min_diff_val;\n\
    \    my $min_diff_count;\n    my $min_diff_index;\n    my $max_diff_index;\n \
    \   my $max_diff_val;\n    my $max_diff_count;\n    my $min_diff_val;\n    my\
    \ $min_diff_count;\n    my $min_diff_index;\n    my $max_diff_index;\n    my $max_diff_val;\n\
    \    my $max_diff_count;\n    my $min_diff_val;\n    my $min_diff_count;\n   \
    \ my $min_diff_index;\n    my $max_diff_index;\n    my $max_diff_val;\n    my\
    \ $max_diff_count;\n    my $min_diff_val;\n    my $min_diff_count;\n    my $min_diff_index;\n\
    \    my $max_diff_index;\n    my $max_diff_val;\n    my $max_diff_count;\n   \
    \ my $min_diff_val;\n    my $min_diff_count;\n    my $min_diff_index;\n    my\
    \ $max_diff_index;\n    my $max_diff_val;\n    my $max_diff_count;\n    my $min_diff_val;\n\
    \    my $min_diff_count;\n    my $min_diff_index;\n    my $max_diff_index;\n \
    \   my $max_diff_val;\n    my $max_diff_count;\n    my $min_diff_val;\n    my\
    \ $min_diff_count;\n    my $min_diff_index;\n    my $max_diff_index;\n    my $max_diff_val;\n\
    \    my $max_diff_count;\n    my $min_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpl355t48n.pl line 89, at end
    of line

    syntax error at /tmp/tmpl355t48n.pl line 89, near "$min_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpl355t48n.pl line 128, at end
    of line

    syntax error at /tmp/tmpl355t48n.pl line 128, at EOF

    Execution of /tmp/tmpl355t48n.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my($num_ones);\n    my($num_zeros);\n    my($decimal_value);\n    foreach my\
    \ $num (@$arr) {\n        $num_ones = 0;\n        $num_zeros = 0;\n        foreach\
    \ my $bit (split(//, $num)) {\n            if ($bit == 1) {\n                $num_ones++;\n\
    \            } else {\n                $num_zeros++;\n            }\n        }\n\
    \        $decimal_value = $num_zeros * 10 + $num_ones;\n        if ($num_ones\
    \ > $num_zeros) {\n            $decimal_value += $num_ones - $num_zeros;\n   \
    \     }\n        push(@sorted_arr, $decimal_value);\n    }\n    foreach my $num\
    \ (@sorted_arr) {\n        my $decimal_value = $num;\n        if ($num_ones >\
    \ $num_zeros) {\n            $decimal_value += $num_ones - $num_zeros;\n     \
    \   }\n        my $decimal_str = sprintf(\"%010d\", $decimal_value);\n       \
    \ my $decimal_str_len = length($decimal_str);\n        my $decimal_str_zeros =\
    \ $decimal_str_len - $decimal_str_len % 2;\n        my $decimal_str_ones = $decimal_str_len\
    \ - $decimal_str_len - $decimal_str_zeros;\n        my $decimal_str_padding =\
    \ $decimal_str_zeros + $decimal_str_ones;\n        my $decimal_str_padding_bytes\
    \ = $decimal_str_padding * 8;\n        my $decimal_str_padding_bytes_str = pack(\"\
    B*\", $decimal_str_padding_bytes);\n        my $decimal_str_padding_bytes_str_len\
    \ = length($decimal_str_padding_bytes_str);\n        my $decimal_str_padding_bytes_str_zeros\
    \ = $decimal_str_padding_bytes_str_len - $decimal_str_padding_bytes_str_len %\
    \ 2;\n        my $decimal_str_padding_bytes_str_ones = $decimal_str_padding_bytes_str_len\
    \ - $decimal_str_padding_bytes_str_len - $decimal_str_padding_bytes_str_zeros;\n\
    \        my $decimal_str_padding_bytes_str_padding = $decimal_str_padding_bytes_str_zeros\
    \ + $decimal_str_padding_bytes_str_ones;\n        my $decimal_str_padding_bytes_str_padding_str\
    \ = pack(\"B*\", $decimal_str_padding_bytes_str_padding);\n        my $decimal_str_padding_bytes_str_padding_str_len\
    \ = length($decimal_str_padding_bytes_str_padding_str);\n        my $decimal_str_padding_bytes_str_padding_str_zeros\
    \ = $decimal_str_padding_bytes_str_padding_str_len - $decimal_str_padding_bytes_str_padding_str_len\
    \ % 2;\n        my $decimal_str_padding_bytes_str_padding_str_ones = $decimal_str_padding_bytes_str_padding_str_len\
    \ - $decimal_str_padding_bytes_\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp3b5g2v1f.pl line 47, at end
    of line

    syntax error at /tmp/tmp3b5g2v1f.pl line 47, near "$decimal_str_padding_bytes_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp3b5g2v1f.pl line 86, at end of
    line

    syntax error at /tmp/tmp3b5g2v1f.pl line 86, at EOF

    Execution of /tmp/tmp3b5g2v1f.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $num_zeros = 0;\n    my $decimal_value = 0;\n    foreach\
    \ my $num (@$arr) {\n        if ($num eq 1) {\n            $num_ones++;\n    \
    \    } else {\n            $num_zeros++;\n        }\n        $decimal_value +=\
    \ $num;\n    }\n    if ($num_ones > $num_zeros) {\n        foreach my $num (@$arr)\
    \ {\n            if ($num eq 1) {\n                push (@sorted_arr, $decimal_value);\n\
    \            }\n            $decimal_value -= $num;\n        }\n    } else {\n\
    \        foreach my $num (@$arr) {\n            if ($num eq 0) {\n           \
    \     push (@sorted_arr, $decimal_value);\n            }\n            $decimal_value\
    \ += $num;\n        }\n    }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $temp2 = 0;\n    my $max2 = 0;\n    my $min2\
    \ = 0;\n    my $temp3 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $temp4\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $temp5 = 0;\n    my $max5\
    \ = 0;\n    my $min5 = 0;\n    my $temp6 = 0;\n    my $max6 = 0;\n    my $min6\
    \ = 0;\n    my $temp7 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $temp8\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $temp9 = 0;\n    my $max9\
    \ = 0;\n    my $min9 = 0;\n    my $temp10 = 0;\n    my $max10 = 0;\n    my $min10\
    \ = 0;\n    my $temp11 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $temp12\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $temp13 = 0;\n    my $max13\
    \ = 0;\n    my $min13 = 0;\n    my $temp14 = 0;\n    my $max14 = 0;\n    my $min14\
    \ = 0;\n    my $temp15 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $temp16\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $temp17 = 0;\n    my $max17\
    \ = 0;\n    my $min17 = 0;\n    my $temp18 = 0;\n    my $max18 = 0;\n    my $min18\
    \ = 0;\n    my $temp19 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $temp20\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $temp21 = 0;\n    my $max21\
    \ = 0;\n    my $min21 = 0;\n    my $temp22 = 0;\n    my $max22 = 0;\n    my $min22\
    \ = 0;\n    my $temp23 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $temp24\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $temp25 = 0;\n    my $max25\
    \ = 0;\n    my $min25 = 0;\n    my $temp26 = 0;\n    my $max26 = 0;\n    my $min26\
    \ = 0;\n    my $temp27 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $temp28\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpt5f1ujhv.pl line 96,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpt5f1ujhv.pl line 96, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpt5f1ujhv.pl line 135, at end of line\nsyntax\
    \ error at /tmp/tmpt5f1ujhv.pl line 135, at EOF\nExecution of /tmp/tmpt5f1ujhv.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    my $max_count\
    \ = 0;\n    my $max_index = 0;\n    my $max_val = 0;\n    my $min_val = 0;\n \
    \   my $min_count = 0;\n    my $min_index = 0;\n    my $min_count = 0;\n    my\
    \ $min_val = 0;\n    my $max_count = 0;\n    my $max_index = 0;\n    my $max_val\
    \ = 0;\n    my $min_val = 0;\n    my $min_count = 0;\n    my $min_index = 0;\n\
    \    my $min_count = 0;\n    my $min_val = 0;\n    my $max_count = 0;\n    my\
    \ $max_index = 0;\n    my $max_val = 0;\n    my $min_val = 0;\n    my $min_count\
    \ = 0;\n    my $min_index = 0;\n    my $min_count = 0;\n    my $min_val = 0;\n\
    \    my $max_count = 0;\n    my $max_index = 0;\n    my $max_val = 0;\n    my\
    \ $min_val = 0;\n    my $min_count = 0;\n    my $min_index = 0;\n    my $min_count\
    \ = 0;\n    my $min_val = 0;\n    my $max_count = 0;\n    my $max_index = 0;\n\
    \    my $max_val = 0;\n    my $min_val = 0;\n    my $min_count = 0;\n    my $min_index\
    \ = 0;\n    my $min_count = 0;\n    my $min_val = 0;\n    my $max_count = 0;\n\
    \    my $max_index = 0;\n    my $max_val = 0;\n    my $min_val = 0;\n    my $min_count\
    \ = 0;\n    my $min_index = 0;\n    my $min_count = 0;\n    my $min_val = 0;\n\
    \    my $max_count = 0;\n    my $max_index = 0;\n    my $max_val = 0;\n    my\
    \ $min_val = 0;\n    my $min_count = 0;\n    my $min_index = 0;\n    my $min_count\
    \ = 0;\n    my $min_val = 0;\n    my $max_count = 0;\n    my $max_index = 0;\n\
    \    my $max_val = 0;\n    my $min_val = 0;\n    my $min_count = 0;\n    my $min_index\
    \ = 0;\n    my $min_count = 0;\n    my $min_val = 0;\n    my $max_count = 0;\n\
    \    my $max_index = 0;\n    my $max_val = 0;\n    my $min_val = 0;\n    my $min_count\
    \ = 0;\n    my $min_index = 0;\n    my $min_count = 0;\n    my $min_val = 0;\n\
    \    my $max_count = 0;\n    my $max_index = 0;\n    my $max_val = 0;\n    my\
    \ $min_val = 0;\n    my $min_count = 0;\n    my $min_index = 0;\n    my $min_count\
    \ = 0;\n    my $min_val = 0;\n    my $max_count = 0;\n    my $max_index = 0;\n\
    \    my $max_val = 0;\n    my $min_val = 0;\n    my $min_count = 0;\n    my $min_index\
    \ = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp01v6vv9_.pl line 99,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp01v6vv9_.pl line 99, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp01v6vv9_.pl line 138, at end of line\nsyntax\
    \ error at /tmp/tmp01v6vv9_.pl line 138, at EOF\nExecution of /tmp/tmp01v6vv9_.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my($i, $j, $num_ones);\n    \n    # sort by number of ones\n    foreach $i (0\
    \ .. $#arr) {\n        $num_ones = 0;\n        foreach $j (0 .. $#arr) {\n   \
    \         if ($arr[$j] & 1) {\n                $num_ones++;\n            }\n \
    \       }\n        push(@sorted_arr, $num_ones);\n    }\n    \n    # sort by decimal\
    \ value\n    foreach $i (0 .. $#arr) {\n        $num_ones = 0;\n        foreach\
    \ $j (0 .. $#arr) {\n            if ($arr[$j] & 1) {\n                $num_ones++;\n\
    \            }\n        }\n        push(@sorted_arr, $arr[$i] / $num_ones);\n\
    \    }\n    \n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $count = 0;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 =\
    \ 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 =\
    \ 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 =\
    \ 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 =\
    \ 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11\
    \ = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13\
    \ = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15\
    \ = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17\
    \ = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19\
    \ = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21\
    \ = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23\
    \ = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25\
    \ = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27\
    \ = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29\
    \ = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31\
    \ = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33\
    \ = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35\
    \ = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37\
    \ = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39\
    \ = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41\
    \ = 0;\n    my $min41 = 0;\n    my $max42 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmper89o1or.pl line 135,
    at end of line

    syntax error at /tmp/tmper89o1or.pl line 135, at EOF

    Execution of /tmp/tmper89o1or.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $temp\
    \ = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 =\
    \ 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 =\
    \ 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12\
    \ = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16\
    \ = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20\
    \ = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24\
    \ = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28\
    \ = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32\
    \ = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36\
    \ = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40\
    \ = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44\
    \ = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48\
    \ = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52\
    \ = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56\
    \ = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60\
    \ = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64\
    \ = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68\
    \ = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72\
    \ = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76\
    \ = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80\
    \ = 0;\n    my $tmp81 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpqtkpjedh.pl line 133,
    at end of line

    syntax error at /tmp/tmpqtkpjedh.pl line 133, at EOF

    Execution of /tmp/tmpqtkpjedh.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = $arr->[0];\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n  \
    \  my $temp = 0;\n    my $count = 0;\n    my @temp;\n    my @sorted;\n    for(my\
    \ $i = 0; $i < $len; $i++) {\n        $temp = 0;\n        $temp = $ones;\n   \
    \     $count = $ones;\n        for(my $j = 0; $j < $len; $j++) {\n           \
    \ if($arr->[$j] & $temp) {\n                $count++;\n            }\n       \
    \     $temp = $arr->[$j];\n        }\n        $dec += $count;\n        $sorted[$i]\
    \ = $dec;\n    }\n    for(my $i = 0; $i < $len; $i++) {\n        $temp = 0;\n\
    \        $temp = $ones;\n        $count = $ones;\n        for(my $j = 0; $j <\
    \ $len; $j++) {\n            if($arr->[$j] & $temp) {\n                $count++;\n\
    \            }\n            $temp = $arr->[$j];\n        }\n        $dec += $count;\n\
    \        $sorted[$i] = $dec;\n    }\n    for(my $i = 0; $i < $len; $i++) {\n \
    \       $temp = 0;\n        $temp = $ones;\n        $count = $ones;\n        for(my\
    \ $j = 0; $j < $len; $j++) {\n            if($arr->[$j] & $temp) {\n         \
    \       $count++;\n            }\n            $temp = $arr->[$j];\n        }\n\
    \        $dec += $count;\n        $sorted[$i] = $dec;\n    }\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n\
    \    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n \
    \   my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n\
    \    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n\
    \    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n\
    \    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n\
    \    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n\
    \    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n\
    \    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n\
    \    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n\
    \    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n\
    \    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n\
    \    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n\
    \    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n\
    \    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n\
    \    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n\
    \    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n\
    \    my $tmp82;\n    my $tmp83;\n    my $tmp84;\n    \nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpu_tnuu2w.pl line 136,
    at end of line

    syntax error at /tmp/tmpu_tnuu2w.pl line 136, at EOF

    Execution of /tmp/tmpu_tnuu2w.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted_arr;\n    my\
    \ $num_ones = 0;\n    my $decimal_val = 0;\n    my $i = 0;\n    my $j = 0;\n \
    \   my $k = 0;\n    my $num_ones_idx = 0;\n    my $decimal_val_idx = 0;\n    my\
    \ $num_ones_idx2 = 0;\n    my $decimal_val_idx2 = 0;\n    my $num_ones_idx3 =\
    \ 0;\n    my $decimal_val_idx3 = 0;\n    my $num_ones_idx4 = 0;\n    my $decimal_val_idx4\
    \ = 0;\n    my $num_ones_idx5 = 0;\n    my $decimal_val_idx5 = 0;\n    my $num_ones_idx6\
    \ = 0;\n    my $decimal_val_idx6 = 0;\n    my $num_ones_idx7 = 0;\n    my $decimal_val_idx7\
    \ = 0;\n    my $num_ones_idx8 = 0;\n    my $decimal_val_idx8 = 0;\n    my $num_ones_idx9\
    \ = 0;\n    my $decimal_val_idx9 = 0;\n    my $num_ones_idx10 = 0;\n    my $decimal_val_idx10\
    \ = 0;\n    my $num_ones_idx11 = 0;\n    my $decimal_val_idx11 = 0;\n    my $num_ones_idx12\
    \ = 0;\n    my $decimal_val_idx12 = 0;\n    my $num_ones_idx13 = 0;\n    my $decimal_val_idx13\
    \ = 0;\n    my $num_ones_idx14 = 0;\n    my $decimal_val_idx14 = 0;\n    my $num_ones_idx15\
    \ = 0;\n    my $decimal_val_idx15 = 0;\n    my $num_ones_idx16 = 0;\n    my $decimal_val_idx16\
    \ = 0;\n    my $num_ones_idx17 = 0;\n    my $decimal_val_idx17 = 0;\n    my $num_ones_idx18\
    \ = 0;\n    my $decimal_val_idx18 = 0;\n    my $num_ones_idx19 = 0;\n    my $decimal_val_idx19\
    \ = 0;\n    my $num_ones_idx20 = 0;\n    my $decimal_val_idx20 = 0;\n    my $num_ones_idx21\
    \ = 0;\n    my $decimal_val_idx21 = 0;\n    my $num_ones_idx22 = 0;\n    my $decimal_val_idx22\
    \ = 0;\n    my $num_ones_idx23 = 0;\n    my $decimal_val_idx23 = 0;\n    my $num_ones_idx24\
    \ = 0;\n    my $decimal_val_idx24 = 0;\n    my $num_ones_idx25 = 0;\n    my $decimal_val_idx25\
    \ = 0;\n    my $num_ones_idx26 = 0;\n    my $decimal_val_idx26 = 0;\n    my $num_ones_idx27\
    \ = 0;\n    my $decimal_val_idx27 = 0;\n    my $num_ones_idx28 = 0;\n    my $decimal_val_idx28\
    \ = 0;\n    my $num_ones_idx29 = 0;\n    my $decimal_val_idx\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp2mumrxen.pl line 71, at end
    of line

    syntax error at /tmp/tmp2mumrxen.pl line 71, near "$decimal_val_idx

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp2mumrxen.pl line 110, at end
    of line

    syntax error at /tmp/tmp2mumrxen.pl line 110, at EOF

    Execution of /tmp/tmp2mumrxen.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted_arr;\n    my\
    \ $num_ones = 0;\n    my $decimal_val = 0;\n    foreach my $num (@$arr) {\n  \
    \      $num_ones += $num;\n        $decimal_val += $num;\n    }\n    foreach my\
    \ $num (@$arr) {\n        if ($num_ones == $num) {\n            $decimal_val -=\
    \ $num;\n        } else {\n            $num_ones = $num;\n            $decimal_val\
    \ = $num;\n        }\n    }\n    foreach my $num (@$arr) {\n        if ($num_ones\
    \ == $num) {\n            $decimal_val -= $num;\n        } else {\n          \
    \  $num_ones = $num;\n            $decimal_val = $num;\n        }\n    }\n   \
    \ foreach my $num (@$arr) {\n        if ($num_ones == $num) {\n            $decimal_val\
    \ -= $num;\n        } else {\n            $num_ones = $num;\n            $decimal_val\
    \ = $num;\n        }\n    }\n    foreach my $num (@$arr) {\n        if ($num_ones\
    \ == $num) {\n            $decimal_val -= $num;\n        } else {\n          \
    \  $num_ones = $num;\n            $decimal_val = $num;\n        }\n    }\n   \
    \ foreach my $num (@$arr) {\n        if ($num_ones == $num) {\n            $decimal_val\
    \ -= $num;\n        } else {\n            $num_ones = $num;\n            $decimal_val\
    \ = $num;\n        }\n    }\n    foreach my $num (@$arr) {\n        if ($num_ones\
    \ == $num) {\n            $decimal_val -= $num;\n        } else {\n          \
    \  $num_ones = $num;\n            $decimal_val = $num;\n        }\n    }\n   \
    \ foreach my $num (@$arr) {\n        if ($num_ones == $num) {\n            $decimal_val\
    \ -= $num;\n        } else {\n            $num_ones = $num;\n            $decimal_val\
    \ = $num;\n        }\n    }\n    foreach my $num (@$arr) {\n        if ($num_ones\
    \ == $num) {\n            $decimal_val -= $num;\n        } else {\n          \
    \  $num_ones = $num;\n            $decimal_val = $num;\n        }\n    }\n   \
    \ foreach my $num (@$arr) {\n        if ($num_ones == $num) {\n            $decimal_val\
    \ -= $num;\n        } else {\n            $num_ones = $num;\n            $decimal_val\
    \ = $num;\n        }\n    }\n    foreach my $num (@$arr) {\n        if ($num_ones\
    \ == $num) {\n            $decimal_val -= \nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp9iyh5vqq.pl line 89, at end
    of line

    syntax error at /tmp/tmp9iyh5vqq.pl line 89, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp9iyh5vqq.pl line 128, at end
    of line

    syntax error at /tmp/tmp9iyh5vqq.pl line 128, at EOF

    Execution of /tmp/tmp9iyh5vqq.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    foreach my\
    \ $num (@$arr) {\n        $count++;\n        if ($count == 1) {\n            $temp\
    \ = $num;\n        }\n        if ($count > 1) {\n            $temp += $num;\n\
    \        }\n        if ($temp > $j) {\n            push(@sorted, $j);\n      \
    \      $j = $temp;\n        }\n    }\n    push(@sorted, $j);\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $count = 0;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $temp = 0;\n    my $temp2 = 0;\n    my $temp3\
    \ = 0;\n    my $temp4 = 0;\n    my $temp5 = 0;\n    my $temp6 = 0;\n    my $temp7\
    \ = 0;\n    my $temp8 = 0;\n    my $temp9 = 0;\n    my $temp10 = 0;\n    my $temp11\
    \ = 0;\n    my $temp12 = 0;\n    my $temp13 = 0;\n    my $temp14 = 0;\n    my\
    \ $temp15 = 0;\n    my $temp16 = 0;\n    my $temp17 = 0;\n    my $temp18 = 0;\n\
    \    my $temp19 = 0;\n    my $temp20 = 0;\n    my $temp21 = 0;\n    my $temp22\
    \ = 0;\n    my $temp23 = 0;\n    my $temp24 = 0;\n    my $temp25 = 0;\n    my\
    \ $temp26 = 0;\n    my $temp27 = 0;\n    my $temp28 = 0;\n    my $temp29 = 0;\n\
    \    my $temp30 = 0;\n    my $temp31 = 0;\n    my $temp32 = 0;\n    my $temp33\
    \ = 0;\n    my $temp34 = 0;\n    my $temp35 = 0;\n    my $temp36 = 0;\n    my\
    \ $temp37 = 0;\n    my $temp38 = 0;\n    my $temp39 = 0;\n    my $temp40 = 0;\n\
    \    my $temp41 = 0;\n    my $temp42 = 0;\n    my $temp43 = 0;\n    my $temp44\
    \ = 0;\n    my $temp45 = 0;\n    my $temp46 = 0;\n    my $temp47 = 0;\n    my\
    \ $temp48 = 0;\n    my $temp49 = 0;\n    my $temp50 = 0;\n    my $temp51 = 0;\n\
    \    my $temp52 = 0;\n    my $temp53 = 0;\n    my $temp54 = 0;\n    my $temp55\
    \ = 0;\n    my $temp56 = 0;\n    my $temp57 = 0;\n    my $temp58 = 0;\n    my\
    \ $temp59 = 0;\n    my $temp60 = 0;\n    my $temp61 = 0;\n    my $temp62 = 0;\n\
    \    my $temp63 = 0;\n    my $temp64 = 0;\n    my $temp65 = 0;\n    my $temp66\
    \ = 0;\n    my $temp67 = 0;\n    my $temp68 = 0;\n    my $temp69 = 0;\n    my\
    \ $temp70 = 0;\n    my $temp71 = 0;\n    my $temp72 = 0;\n    my $temp73 = 0;\n\
    \    my $temp74 = 0;\n    my $temp75 = 0;\n    my $temp76 = 0;\n    my $temp77\
    \ = 0;\n    my $temp78 = 0;\n    my $temp79 = 0;\n    my $temp80 = 0;\n    my\
    \ $temp\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp6ubkfq2l.pl line 95, at end
    of line

    syntax error at /tmp/tmp6ubkfq2l.pl line 95, near "$temp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp6ubkfq2l.pl line 134, at end
    of line

    syntax error at /tmp/tmp6ubkfq2l.pl line 134, at EOF

    Execution of /tmp/tmp6ubkfq2l.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $num_ones = 0;\n    my $decimal_val = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 0;\n    my $count = 0;\n    my $max_count = 0;\n\
    \    my $max_decimal_val = 0;\n    my $max_decimal_val_index = 0;\n    my $max_decimal_val_index2\
    \ = 0;\n    my $max_decimal_val_index3 = 0;\n    my $max_decimal_val_index4 =\
    \ 0;\n    my $max_decimal_val_index5 = 0;\n    my $max_decimal_val_index6 = 0;\n\
    \    my $max_decimal_val_index7 = 0;\n    my $max_decimal_val_index8 = 0;\n  \
    \  my $max_decimal_val_index9 = 0;\n    my $max_decimal_val_index10 = 0;\n   \
    \ my $max_decimal_val_index11 = 0;\n    my $max_decimal_val_index12 = 0;\n   \
    \ my $max_decimal_val_index13 = 0;\n    my $max_decimal_val_index14 = 0;\n   \
    \ my $max_decimal_val_index15 = 0;\n    my $max_decimal_val_index16 = 0;\n   \
    \ my $max_decimal_val_index17 = 0;\n    my $max_decimal_val_index18 = 0;\n   \
    \ my $max_decimal_val_index19 = 0;\n    my $max_decimal_val_index20 = 0;\n   \
    \ my $max_decimal_val_index21 = 0;\n    my $max_decimal_val_index22 = 0;\n   \
    \ my $max_decimal_val_index23 = 0;\n    my $max_decimal_val_index24 = 0;\n   \
    \ my $max_decimal_val_index25 = 0;\n    my $max_decimal_val_index26 = 0;\n   \
    \ my $max_decimal_val_index27 = 0;\n    my $max_decimal_val_index28 = 0;\n   \
    \ my $max_decimal_val_index29 = 0;\n    my $max_decimal_val_index30 = 0;\n   \
    \ my $max_decimal_val_index31 = 0;\n    my $max_decimal_val_index32 = 0;\n   \
    \ my $max_decimal_val_index33 = 0;\n    my $max_decimal_val_index34 = 0;\n   \
    \ my $max_decimal_val_index35 = 0;\n    my $max_decimal_val_index36 = 0;\n   \
    \ my $max_decimal_val_index37 = 0;\n    my $max_decimal_val_index38 = 0;\n   \
    \ my $max_decimal_val_index39 = 0;\n    my $max_decimal_val_index40 = 0;\n   \
    \ my $max_decimal_val_index41 = 0;\n    my $max_decimal_val_index42 = 0;\n   \
    \ my $max_decimal_val_index43 = 0;\n    my $max_decimal_val_index44 = 0;\n   \
    \ my $max_decimal_val_index45 = 0;\n    my $max_decimal_val_index46 = 0;\n   \
    \ my $max_decimal_val_index47 = 0;\n    my $max_decimal_val_index48 = 0;\n   \
    \ my $max_decimal_val_index49 = 0;\n    my $max_decimal_val_index50 = 0;\n   \
    \ my $max_decimal_val_index51 = 0;\n    my $max_decimal_val\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpbqznkefy.pl line 69, at end
    of line

    syntax error at /tmp/tmpbqznkefy.pl line 69, near "$max_decimal_val

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpbqznkefy.pl line 108, at end
    of line

    syntax error at /tmp/tmpbqznkefy.pl line 108, at EOF

    Execution of /tmp/tmpbqznkefy.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $temp\
    \ = 0;\n    my $flag = 0;\n    my $flag2 = 0;\n    my $flag3 = 0;\n    my $flag4\
    \ = 0;\n    my $flag5 = 0;\n    my $flag6 = 0;\n    my $flag7 = 0;\n    my $flag8\
    \ = 0;\n    my $flag9 = 0;\n    my $flag10 = 0;\n    my $flag11 = 0;\n    my $flag12\
    \ = 0;\n    my $flag13 = 0;\n    my $flag14 = 0;\n    my $flag15 = 0;\n    my\
    \ $flag16 = 0;\n    my $flag17 = 0;\n    my $flag18 = 0;\n    my $flag19 = 0;\n\
    \    my $flag20 = 0;\n    my $flag21 = 0;\n    my $flag22 = 0;\n    my $flag23\
    \ = 0;\n    my $flag24 = 0;\n    my $flag25 = 0;\n    my $flag26 = 0;\n    my\
    \ $flag27 = 0;\n    my $flag28 = 0;\n    my $flag29 = 0;\n    my $flag30 = 0;\n\
    \    my $flag31 = 0;\n    my $flag32 = 0;\n    my $flag33 = 0;\n    my $flag34\
    \ = 0;\n    my $flag35 = 0;\n    my $flag36 = 0;\n    my $flag37 = 0;\n    my\
    \ $flag38 = 0;\n    my $flag39 = 0;\n    my $flag40 = 0;\n    my $flag41 = 0;\n\
    \    my $flag42 = 0;\n    my $flag43 = 0;\n    my $flag44 = 0;\n    my $flag45\
    \ = 0;\n    my $flag46 = 0;\n    my $flag47 = 0;\n    my $flag48 = 0;\n    my\
    \ $flag49 = 0;\n    my $flag50 = 0;\n    my $flag51 = 0;\n    my $flag52 = 0;\n\
    \    my $flag53 = 0;\n    my $flag54 = 0;\n    my $flag55 = 0;\n    my $flag56\
    \ = 0;\n    my $flag57 = 0;\n    my $flag58 = 0;\n    my $flag59 = 0;\n    my\
    \ $flag60 = 0;\n    my $flag61 = 0;\n    my $flag62 = 0;\n    my $flag63 = 0;\n\
    \    my $flag64 = 0;\n    my $flag65 = 0;\n    my $flag66 = 0;\n    my $flag67\
    \ = 0;\n    my $flag68 = 0;\n    my $flag69 = 0;\n    my $flag70 = 0;\n    my\
    \ $flag71 = 0;\n    my $flag72 = 0;\n    my $flag73 = 0;\n    my $flag74 = 0;\n\
    \    my $flag75 = 0;\n    my $flag76 = 0;\n    my $flag77 = 0;\n    my $flag78\
    \ = 0;\n    my $flag79 = 0;\n    my $flag80 = 0;\n    my $flag81 = 0;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp95spsoya.pl line 133,
    at end of line

    syntax error at /tmp/tmp95spsoya.pl line 133, at EOF

    Execution of /tmp/tmp95spsoya.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n    my $ones\
    \ = 0;\n    my $dec = 0;\n    foreach my $i (@$arr) {\n        $ones += $i & 1;\n\
    \        $dec += $i >> 1;\n    }\n    foreach my $i (@$arr) {\n        $i -= $ones;\n\
    \        $i /= $dec;\n        push(@sorted, $i);\n    }\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted_arr;\n    my\
    \ $max_ones = 0;\n    my $max_dec = 0;\n    my $max_dec_index = 0;\n    my $max_dec_val\
    \ = 0;\n    my $max_dec_val_index = 0;\n    my $max_dec_val_val = 0;\n    my $max_dec_val_val_index\
    \ = 0;\n    my $max_dec_val_val_val = 0;\n    my $max_dec_val_val_val_index =\
    \ 0;\n    my $max_dec_val_val_val_val = 0;\n    my $max_dec_val_val_val_val_index\
    \ = 0;\n    my $max_dec_val_val_val_val_val = 0;\n    my $max_dec_val_val_val_val_val_index\
    \ = 0;\n    my $max_dec_val_val_val_val_val_val = 0;\n    my $max_dec_val_val_val_val_val_val_index\
    \ = 0;\n    my $max_dec_val_val_val_val_val_val = 0;\n    my $max_dec_val_val_val_val_val_val_index\
    \ = 0;\n    my $max_dec_val_val_val_val_val_val = 0;\n    my $max_dec_val_val_val_val_val_val_index\
    \ = 0;\n    my $max_dec_val_val_val_val_val_val_val = 0;\n    my $max_dec_val_val_val_val_val_val_val_index\
    \ = 0;\n    my $max_dec_val_val_val_val_val_val_val = 0;\n    my $max_dec_val_val_val_val_val_val_val_index\
    \ = 0;\n    my $max_dec_val_val_val_val_val_val_val_val = 0;\n    my $max_dec_val_val_val_val_val_val_val_index\
    \ = 0;\n    my $max_dec_val_val_val_val_val_val_val_val = 0;\n    my $max_dec_val_val_val_val_val_val_val_val_index\
    \ = 0;\n    my $max_dec_val_val_val_val_val_val_val_val = 0;\n    my $max_dec_val_val_val_val_val_val_val_val_index\
    \ = 0;\n    my $max_dec_val_val_val_val_val_val_val_val = 0;\n    my $max_dec_val_val_val_val_val_val_val_val_index\
    \ = 0;\n    my $max_dec_val_val_val_val_val_val_val_val = 0;\n    my $max_dec_val_val_val_val_val_val_val_val_index\
    \ = 0;\n    my $max_dec_val_val_val_val_val_val_val_val_val = 0;\n    my $max_dec_val_val_val_val_val_val_val_val_val_index\
    \ = 0;\n    my $max_dec_val_val_val_val_val_val_val_val_val = 0;\n    my $max_dec_val_val_val_val_val_val_val_val_val_index\
    \ = 0;\n    my $max_dec_val_val_val_val_val_val_val_val_val_val = 0;\n    my $max_dec_val_val_val_val_val_val_val_val_val_index\
    \ = 0;\n    my $max_dec_val_val_val_val_val_val_val_val_val_val = 0;\n    my $max_dec_val_val_val_val_val_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpm7s5u6om.pl line 49, at end
    of line

    syntax error at /tmp/tmpm7s5u6om.pl line 49, near "$max_dec_val_val_val_val_val_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpm7s5u6om.pl line 88, at end of
    line

    syntax error at /tmp/tmpm7s5u6om.pl line 88, at EOF

    Execution of /tmp/tmpm7s5u6om.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    my $max_count\
    \ = 0;\n    my $min_count = 0;\n    my $max_val = 0;\n    my $min_val = 0;\n \
    \   my $max_diff = 0;\n    my $min_diff = 0;\n    my $max_diff2 = 0;\n    my $min_diff2\
    \ = 0;\n    my $max_diff3 = 0;\n    my $min_diff3 = 0;\n    my $max_diff4 = 0;\n\
    \    my $min_diff4 = 0;\n    my $max_diff5 = 0;\n    my $min_diff5 = 0;\n    my\
    \ $max_diff6 = 0;\n    my $min_diff6 = 0;\n    my $max_diff7 = 0;\n    my $min_diff7\
    \ = 0;\n    my $max_diff8 = 0;\n    my $min_diff8 = 0;\n    my $max_diff9 = 0;\n\
    \    my $min_diff9 = 0;\n    my $max_diff10 = 0;\n    my $min_diff10 = 0;\n  \
    \  my $max_diff11 = 0;\n    my $min_diff11 = 0;\n    my $max_diff12 = 0;\n   \
    \ my $min_diff12 = 0;\n    my $max_diff13 = 0;\n    my $min_diff13 = 0;\n    my\
    \ $max_diff14 = 0;\n    my $min_diff14 = 0;\n    my $max_diff15 = 0;\n    my $min_diff15\
    \ = 0;\n    my $max_diff16 = 0;\n    my $min_diff16 = 0;\n    my $max_diff17 =\
    \ 0;\n    my $min_diff17 = 0;\n    my $max_diff18 = 0;\n    my $min_diff18 = 0;\n\
    \    my $max_diff19 = 0;\n    my $min_diff19 = 0;\n    my $max_diff20 = 0;\n \
    \   my $min_diff20 = 0;\n    my $max_diff21 = 0;\n    my $min_diff21 = 0;\n  \
    \  my $max_diff22 = 0;\n    my $min_diff22 = 0;\n    my $max_diff23 = 0;\n   \
    \ my $min_diff23 = 0;\n    my $max_diff24 = 0;\n    my $min_diff24 = 0;\n    my\
    \ $max_diff25 = 0;\n    my $min_diff25 = 0;\n    my $max_diff26 = 0;\n    my $min_diff26\
    \ = 0;\n    my $max_diff27 = 0;\n    my $min_diff27 = 0;\n    my $max_diff28 =\
    \ 0;\n    my $min_diff28 = 0;\n    my $max_diff29 = 0;\n    my $min_diff29 = 0;\n\
    \    my $max_diff30 = 0;\n    my $min_diff30 = 0;\n    my $max_diff31 = 0;\n \
    \   my $min_diff31 = 0;\n    my $max_diff32 = 0;\n    my $min_diff32 = 0;\n  \
    \  my $max_diff33 = 0;\n    my $min_diff33 = 0;\n    my $max_diff34 = 0;\n   \
    \ my $min_diff34\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpheolyx3s.pl line 84, at end
    of line

    syntax error at /tmp/tmpheolyx3s.pl line 84, near "$min_diff34

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpheolyx3s.pl line 123, at end
    of line

    syntax error at /tmp/tmpheolyx3s.pl line 123, at EOF

    Execution of /tmp/tmpheolyx3s.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n\
    \    my @res;\n    \n    foreach $i (0 .. $len-1) {\n        $ones = $arr->[$i]\
    \ & 1;\n        $dec = $arr->[$i] >> 1;\n        \n        if ($ones == 0) {\n\
    \            $tmp = $dec;\n        } else {\n            $tmp = $dec + $ones;\n\
    \        }\n        \n        if ($tmp > $dec) {\n            $res[$j] = $arr->[$i];\n\
    \            $j++;\n        }\n    }\n    \n    return @res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $num_tens = 0;\n    my $num_hundreds = 0;\n    my\
    \ $num_thousands = 0;\n    my $num_millions = 0;\n    my $num_billions = 0;\n\
    \    my $num_trillions = 0;\n    my $num_quadrillions = 0;\n    my $num_quintillions\
    \ = 0;\n    my $num_sextillions = 0;\n    my $num_septillions = 0;\n    my $num_octillions\
    \ = 0;\n    my $num_nonillions = 0;\n    my $num_decillions = 0;\n    my $num_undecillions\
    \ = 0;\n    my $num_duodecillions = 0;\n    my $num_tredecillions = 0;\n    my\
    \ $num_quattuordecillions = 0;\n    my $num_quindecillions = 0;\n    my $num_sexdecillions\
    \ = 0;\n    my $num_septendecillions = 0;\n    my $num_octodecillions = 0;\n \
    \   my $num_novemdecillions = 0;\n    my $num_vigintillions = 0;\n    my $num_unvigintillions\
    \ = 0;\n    my $num_duovigintillions = 0;\n    my $num_trevigintillions = 0;\n\
    \    my $num_quattuorvigintillions = 0;\n    my $num_quinvigintillions = 0;\n\
    \    my $num_sexvigintillions = 0;\n    my $num_septenvigintillions = 0;\n   \
    \ my $num_octovigintillions = 0;\n    my $num_novemvigintillions = 0;\n    my\
    \ $num_trigintillions = 0;\n    my $num_untrigintillions = 0;\n    my $num_duotrigintillions\
    \ = 0;\n    my $num_trestrigintillions = 0;\n    my $num_quattuortrigintillions\
    \ = 0;\n    my $num_quintrigintillions = 0;\n    my $num_sextrigintillions = 0;\n\
    \    my $num_septentrigintillions = 0;\n    my $num_octotrigintillions = 0;\n\
    \    my $num_novemtrigintillions = 0;\n    my $num_quadragintillions = 0;\n  \
    \  my $num_unquadragintillions = 0;\n    my $num_duoquadragintillions = 0;\n \
    \   my $num_treoquadragintillions = 0;\n    my $num_quattuorquadragintillions\
    \ = 0;\n    my $num_quinquadragintillions = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpelze71nn.pl line 97, at
    end of line

    syntax error at /tmp/tmpelze71nn.pl line 97, at EOF

    Execution of /tmp/tmpelze71nn.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_dec_index = 0;\n    my\
    \ $max_dec_val = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp\
    \ = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5\
    \ = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9\
    \ = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13\
    \ = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17\
    \ = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21\
    \ = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25\
    \ = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29\
    \ = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33\
    \ = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37\
    \ = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41\
    \ = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45\
    \ = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49\
    \ = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53\
    \ = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57\
    \ = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61\
    \ = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65\
    \ = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69\
    \ = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73\
    \ = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77\
    \ = 0;\n    my $tmp78 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp_rxod8ii.pl line 133,
    at end of line

    syntax error at /tmp/tmp_rxod8ii.pl line 133, at EOF

    Execution of /tmp/tmp_rxod8ii.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp\
    \ = 0;\n    my @tmp;\n    my @result;\n    \n    # sort based on number of ones\n\
    \    for(; $i < $len; $i++) {\n        $ones += $arr->[$i];\n    }\n    for(;\
    \ $i < $len; $i++) {\n        $tmp = $arr->[$i];\n        $tmp -= $ones;\n   \
    \     $dec += $tmp;\n        $tmp = $tmp * 2;\n        $tmp += $ones;\n      \
    \  $arr->[$i] = $tmp;\n    }\n    for(; $i < $len; $i++) {\n        $tmp = $arr->[$i];\n\
    \        $tmp -= $ones;\n        $dec += $tmp;\n        $tmp = $tmp * 2;\n   \
    \     $tmp += $ones;\n        $arr->[$i] = $tmp;\n    }\n    \n    # sort based\
    \ on decimal value\n    for(; $i < $len; $i++) {\n        $tmp = $arr->[$i];\n\
    \        $tmp -= $ones;\n        $dec += $tmp;\n        $tmp = $tmp * 2;\n   \
    \     $tmp += $ones;\n        $arr->[$i] = $tmp;\n    }\n    for(; $i < $len;\
    \ $i++) {\n        $tmp = $arr->[$i];\n        $tmp -= $ones;\n        $dec +=\
    \ $tmp;\n        $tmp = $tmp * 2;\n        $tmp += $ones;\n        $arr->[$i]\
    \ = $tmp;\n    }\n    \n    # sort based on decimal value\n    for(; $i < $len;\
    \ $i++) {\n        $tmp = $arr->[$i];\n        $tmp -= $ones;\n        $dec +=\
    \ $tmp;\n        $tmp = $tmp * 2;\n        $tmp += $ones;\n        $arr->[$i]\
    \ = $tmp;\n    }\n    for(; $i < $len; $i++) {\n        $tmp = $arr->[$i];\n \
    \       $tmp -= $ones;\n        $dec += $tmp;\n        $tmp = $tmp * 2;\n    \
    \    $tmp += $ones;\n        $arr->[$i] = $tmp;\n    }\n    \n    # sort based\
    \ on decimal value\n    for(; $i < $len; $i++) {\n        $tmp = $arr->[$i];\n\
    \        $tmp -= $ones;\n        $dec += $tmp;\n        $tmp = $tmp * 2;\n   \
    \     $tmp += $ones;\n        $arr->[$i] = $\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpa4gwarnl.pl line 81,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpa4gwarnl.pl line 81, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpa4gwarnl.pl line 120, at end of line\nsyntax\
    \ error at /tmp/tmpa4gwarnl.pl line 120, at EOF\nExecution of /tmp/tmpa4gwarnl.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my($i, $j, $num_ones);\n    \n    # sort based on number of ones\n    foreach\
    \ $i (@$arr) {\n        $num_ones = 0;\n        foreach $j (@$arr) {\n       \
    \     if ($i != $j) {\n                $num_ones += $j;\n            }\n     \
    \   }\n        $num_ones = $num_ones / 2;\n        push(@sorted_arr, $num_ones);\n\
    \    }\n    \n    # sort based on decimal value\n    foreach $i (@$arr) {\n  \
    \      $num_ones = 0;\n        foreach $j (@$arr) {\n            if ($i != $j)\
    \ {\n                $num_ones += $j;\n            }\n        }\n        $num_ones\
    \ = $num_ones / 2;\n        push(@sorted_arr, $num_ones);\n    }\n    return @sorted_arr;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n  \
    \  my $tmp;\n    my $cmp;\n    my $ones;\n    my $dec;\n    my $cmp_res;\n   \
    \ my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    \nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp9u3fwugv.pl line 133,
    at end of line

    syntax error at /tmp/tmp9u3fwugv.pl line 133, at EOF

    Execution of /tmp/tmp9u3fwugv.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k\
    \ = 0;\n    my $tmp = 0;\n    my @tmp;\n    my @result;\n    while($i < $size)\
    \ {\n        $ones = $arr->[$i] & 1;\n        $dec = $arr->[$i] & 2;\n       \
    \ $tmp = $ones + $dec;\n        $tmp = $tmp * 10 + ($tmp & 1);\n        $tmp =\
    \ $tmp * 10 + ($tmp & 1);\n        $tmp = $tmp * 10 + ($tmp & 1);\n        $tmp\
    \ = $tmp * 10 + ($tmp & 1);\n        $tmp = $tmp * 10 + ($tmp & 1);\n        $tmp\
    \ = $tmp * 10 + ($tmp & 1);\n        $tmp = $tmp * 10 + ($tmp & 1);\n        $tmp\
    \ = $tmp * 10 + ($tmp & 1);\n        $tmp = $tmp * 10 + ($tmp & 1);\n        $tmp\
    \ = $tmp * 10 + ($tmp & 1);\n        $tmp = $tmp * 10 + ($tmp & 1);\n        $tmp\
    \ = $tmp * 10 + ($tmp & 1);\n        $tmp = $tmp * 10 + ($tmp & 1);\n        $tmp\
    \ = $tmp * 10 + ($tmp & 1);\n        $tmp = $tmp * 10 + ($tmp & 1);\n        $tmp\
    \ = $tmp * 10 + ($tmp & 1);\n        $tmp = $tmp * 10 + ($tmp & 1);\n        $tmp\
    \ = $tmp * 10 + ($tmp & 1);\n        $tmp = $tmp * 10 + ($tmp & 1);\n        $tmp\
    \ = $tmp * 10 + ($tmp & 1);\n        $tmp = $tmp * 10 + ($tmp & 1);\n        $tmp\
    \ = $tmp * 10 + ($tmp & 1);\n        $tmp = $tmp * 10 + ($tmp & 1);\n        $tmp\
    \ = $tmp * 10 + ($tmp & 1);\n        $tmp = $tmp * 10 + ($tmp & 1);\n        $tmp\
    \ = $tmp * 10 + ($tmp & 1);\n        $tmp = $tmp * 10 + ($tmp & 1);\n        $tmp\
    \ = $tmp * 10 + ($tmp & 1);\n        $tmp = $tmp * 10 + ($tmp & 1);\n        $tmp\
    \ = $tmp * 10 + ($tmp & 1);\n        $tmp = $tmp * 10 + ($tmp & 1);\n        $tmp\
    \ = $tmp * 10 + ($tmp & 1);\n        $tmp = $tmp * 10 + ($tmp \nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "\"use\" not allowed in expression at /tmp/tmpufikrlje.pl line 53, at end\
    \ of line\nsyntax error at /tmp/tmpufikrlje.pl line 53, near \"$tmp \nuse Test::Deep\"\
    \nMissing right curly or square bracket at /tmp/tmpufikrlje.pl line 92, at end\
    \ of line\nsyntax error at /tmp/tmpufikrlje.pl line 92, at EOF\nExecution of /tmp/tmpufikrlje.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted_arr = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n\
    \    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my\
    \ $max_count = 0;\n    my $max_count = 0;\n    my $max_count = 0;\n    my $max_count\
    \ = 0;\n    my $max_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpngz0q8st.pl line 110, at end
    of line

    syntax error at /tmp/tmpngz0q8st.pl line 110, near "$max_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpngz0q8st.pl line 149, at end
    of line

    syntax error at /tmp/tmpngz0q8st.pl line 149, at EOF

    Execution of /tmp/tmpngz0q8st.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $num_ones = 0;\n    my $num_dec\
    \ = 0;\n    my $num_dec2 = 0;\n    my $num_dec3 = 0;\n    my $num_dec4 = 0;\n\
    \    my $num_dec5 = 0;\n    my $num_dec6 = 0;\n    my $num_dec7 = 0;\n    my $num_dec8\
    \ = 0;\n    my $num_dec9 = 0;\n    my $num_dec10 = 0;\n    my $num_dec11 = 0;\n\
    \    my $num_dec12 = 0;\n    my $num_dec13 = 0;\n    my $num_dec14 = 0;\n    my\
    \ $num_dec15 = 0;\n    my $num_dec16 = 0;\n    my $num_dec17 = 0;\n    my $num_dec18\
    \ = 0;\n    my $num_dec19 = 0;\n    my $num_dec20 = 0;\n    my $num_dec21 = 0;\n\
    \    my $num_dec22 = 0;\n    my $num_dec23 = 0;\n    my $num_dec24 = 0;\n    my\
    \ $num_dec25 = 0;\n    my $num_dec26 = 0;\n    my $num_dec27 = 0;\n    my $num_dec28\
    \ = 0;\n    my $num_dec29 = 0;\n    my $num_dec30 = 0;\n    my $num_dec31 = 0;\n\
    \    my $num_dec32 = 0;\n    my $num_dec33 = 0;\n    my $num_dec34 = 0;\n    my\
    \ $num_dec35 = 0;\n    my $num_dec36 = 0;\n    my $num_dec37 = 0;\n    my $num_dec38\
    \ = 0;\n    my $num_dec39 = 0;\n    my $num_dec40 = 0;\n    my $num_dec41 = 0;\n\
    \    my $num_dec42 = 0;\n    my $num_dec43 = 0;\n    my $num_dec44 = 0;\n    my\
    \ $num_dec45 = 0;\n    my $num_dec46 = 0;\n    my $num_dec47 = 0;\n    my $num_dec48\
    \ = 0;\n    my $num_dec49 = 0;\n    my $num_dec50 = 0;\n    my $num_dec51 = 0;\n\
    \    my $num_dec52 = 0;\n    my $num_dec53 = 0;\n    my $num_dec54 = 0;\n    my\
    \ $num_dec55 = 0;\n    my $num_dec56 = 0;\n    my $num_dec57 = 0;\n    my $num_dec58\
    \ = 0;\n    my $num_dec59 = 0;\n    my $num_dec60 = 0;\n    my $num_dec61 = 0;\n\
    \    my $num_dec62 = 0;\n    my $num_dec63 = 0;\n    my $num_dec64 = 0;\n    my\
    \ $num_dec65 = 0;\n    my $num_dec66 = 0;\n    my $num_dec67 = 0;\n    my $num_dec68\
    \ = 0;\n    my $num_dec69 = 0;\n    my $num_dec70 = 0;\n    \nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp6yb7of5a.pl line 122,
    at end of line

    syntax error at /tmp/tmp6yb7of5a.pl line 122, at EOF

    Execution of /tmp/tmp6yb7of5a.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $temp = 0;\n    my $count\
    \ = 0;\n    my $max = 0;\n    my $min = 0;\n    my $temp2 = 0;\n    my $temp3\
    \ = 0;\n    my $temp4 = 0;\n    my $temp5 = 0;\n    my $temp6 = 0;\n    my $temp7\
    \ = 0;\n    my $temp8 = 0;\n    my $temp9 = 0;\n    my $temp10 = 0;\n    my $temp11\
    \ = 0;\n    my $temp12 = 0;\n    my $temp13 = 0;\n    my $temp14 = 0;\n    my\
    \ $temp15 = 0;\n    my $temp16 = 0;\n    my $temp17 = 0;\n    my $temp18 = 0;\n\
    \    my $temp19 = 0;\n    my $temp20 = 0;\n    my $temp21 = 0;\n    my $temp22\
    \ = 0;\n    my $temp23 = 0;\n    my $temp24 = 0;\n    my $temp25 = 0;\n    my\
    \ $temp26 = 0;\n    my $temp27 = 0;\n    my $temp28 = 0;\n    my $temp29 = 0;\n\
    \    my $temp30 = 0;\n    my $temp31 = 0;\n    my $temp32 = 0;\n    my $temp33\
    \ = 0;\n    my $temp34 = 0;\n    my $temp35 = 0;\n    my $temp36 = 0;\n    my\
    \ $temp37 = 0;\n    my $temp38 = 0;\n    my $temp39 = 0;\n    my $temp40 = 0;\n\
    \    my $temp41 = 0;\n    my $temp42 = 0;\n    my $temp43 = 0;\n    my $temp44\
    \ = 0;\n    my $temp45 = 0;\n    my $temp46 = 0;\n    my $temp47 = 0;\n    my\
    \ $temp48 = 0;\n    my $temp49 = 0;\n    my $temp50 = 0;\n    my $temp51 = 0;\n\
    \    my $temp52 = 0;\n    my $temp53 = 0;\n    my $temp54 = 0;\n    my $temp55\
    \ = 0;\n    my $temp56 = 0;\n    my $temp57 = 0;\n    my $temp58 = 0;\n    my\
    \ $temp59 = 0;\n    my $temp60 = 0;\n    my $temp61 = 0;\n    my $temp62 = 0;\n\
    \    my $temp63 = 0;\n    my $temp64 = 0;\n    my $temp65 = 0;\n    my $temp66\
    \ = 0;\n    my $temp67 = 0;\n    my $temp68 = 0;\n    my $temp69 = 0;\n    my\
    \ $temp70 = 0;\n    my $temp71 = 0;\n    my $temp72 = 0;\n    my $temp73 = 0;\n\
    \    my $temp74 = 0;\n    my $temp75 = 0;\n    my $temp76 = 0;\n    my $temp77\
    \ = 0;\n    my $temp78 = 0;\n    my $temp79 = 0;\n    my $temp80 = 0;\n    \n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp73_x9woq.pl line 134,
    at end of line

    syntax error at /tmp/tmp73_x9woq.pl line 134, at EOF

    Execution of /tmp/tmp73_x9woq.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n    my $ones\
    \ = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len = @$arr;\n\
    \    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n  \
    \  my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n  \
    \  my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n\
    \    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n\
    \    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n\
    \    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n\
    \    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n\
    \    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n\
    \    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n\
    \    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n\
    \    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n\
    \    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n\
    \    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n\
    \    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n\
    \    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n\
    \    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n\
    \    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n    \nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpy2smh37p.pl line 136,
    at end of line

    syntax error at /tmp/tmpy2smh37p.pl line 136, at EOF

    Execution of /tmp/tmpy2smh37p.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $temp2 = 0;\n    my $temp3 = 0;\n    my $temp4\
    \ = 0;\n    my $temp5 = 0;\n    my $temp6 = 0;\n    my $temp7 = 0;\n    my $temp8\
    \ = 0;\n    my $temp9 = 0;\n    my $temp10 = 0;\n    my $temp11 = 0;\n    my $temp12\
    \ = 0;\n    my $temp13 = 0;\n    my $temp14 = 0;\n    my $temp15 = 0;\n    my\
    \ $temp16 = 0;\n    my $temp17 = 0;\n    my $temp18 = 0;\n    my $temp19 = 0;\n\
    \    my $temp20 = 0;\n    my $temp21 = 0;\n    my $temp22 = 0;\n    my $temp23\
    \ = 0;\n    my $temp24 = 0;\n    my $temp25 = 0;\n    my $temp26 = 0;\n    my\
    \ $temp27 = 0;\n    my $temp28 = 0;\n    my $temp29 = 0;\n    my $temp30 = 0;\n\
    \    my $temp31 = 0;\n    my $temp32 = 0;\n    my $temp33 = 0;\n    my $temp34\
    \ = 0;\n    my $temp35 = 0;\n    my $temp36 = 0;\n    my $temp37 = 0;\n    my\
    \ $temp38 = 0;\n    my $temp39 = 0;\n    my $temp40 = 0;\n    my $temp41 = 0;\n\
    \    my $temp42 = 0;\n    my $temp43 = 0;\n    my $temp44 = 0;\n    my $temp45\
    \ = 0;\n    my $temp46 = 0;\n    my $temp47 = 0;\n    my $temp48 = 0;\n    my\
    \ $temp49 = 0;\n    my $temp50 = 0;\n    my $temp51 = 0;\n    my $temp52 = 0;\n\
    \    my $temp53 = 0;\n    my $temp54 = 0;\n    my $temp55 = 0;\n    my $temp56\
    \ = 0;\n    my $temp57 = 0;\n    my $temp58 = 0;\n    my $temp59 = 0;\n    my\
    \ $temp60 = 0;\n    my $temp61 = 0;\n    my $temp62 = 0;\n    my $temp63 = 0;\n\
    \    my $temp64 = 0;\n    my $temp65 = 0;\n    my $temp66 = 0;\n    my $temp67\
    \ = 0;\n    my $temp68 = 0;\n    my $temp69 = 0;\n    my $temp70 = 0;\n    my\
    \ $temp71 = 0;\n    my $temp72 = 0;\n    my $temp73 = 0;\n    my $temp74 = 0;\n\
    \    my $temp75 = 0;\n    my $temp76 = 0;\n    my $temp77 = 0;\n    my $temp78\
    \ = 0;\n    my $temp79 = 0;\n    my $temp80 = 0;\n    my $temp81 = 0;\n\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpauvs7kgx.pl line 134,
    at end of line

    syntax error at /tmp/tmpauvs7kgx.pl line 134, at EOF

    Execution of /tmp/tmpauvs7kgx.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $cnt = 0;\n    my $tmp = 0;\n    my $tmp2\
    \ = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6\
    \ = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10\
    \ = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74\
    \ = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78\
    \ = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82\
    \ = 0;\n    my $tmp83 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp6ibczn2g.pl line 133,
    at end of line

    syntax error at /tmp/tmp6ibczn2g.pl line 133, at EOF

    Execution of /tmp/tmp6ibczn2g.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n    my($i,\
    \ $j, $k, $temp);\n    my $num_ones = 0;\n    my $num_zeros = 0;\n    my $max_num\
    \ = 0;\n    foreach $i (@$arr) {\n        $num_ones += $i & 1;\n        $num_zeros\
    \ += $i & 0;\n        $max_num = $i if $i > $max_num;\n    }\n    foreach $i (@$arr)\
    \ {\n        $num_ones += $i & 1;\n        $num_zeros += $i & 0;\n        $max_num\
    \ = $i if $i > $max_num;\n    }\n    foreach $i (@$arr) {\n        $num_ones +=\
    \ $i & 1;\n        $num_zeros += $i & 0;\n        $max_num = $i if $i > $max_num;\n\
    \    }\n    foreach $i (@$arr) {\n        $num_ones += $i & 1;\n        $num_zeros\
    \ += $i & 0;\n        $max_num = $i if $i > $max_num;\n    }\n    foreach $i (@$arr)\
    \ {\n        $num_ones += $i & 1;\n        $num_zeros += $i & 0;\n        $max_num\
    \ = $i if $i > $max_num;\n    }\n    foreach $i (@$arr) {\n        $num_ones +=\
    \ $i & 1;\n        $num_zeros += $i & 0;\n        $max_num = $i if $i > $max_num;\n\
    \    }\n    foreach $i (@$arr) {\n        $num_ones += $i & 1;\n        $num_zeros\
    \ += $i & 0;\n        $max_num = $i if $i > $max_num;\n    }\n    foreach $i (@$arr)\
    \ {\n        $num_ones += $i & 1;\n        $num_zeros += $i & 0;\n        $max_num\
    \ = $i if $i > $max_num;\n    }\n    foreach $i (@$arr) {\n        $num_ones +=\
    \ $i & 1;\n        $num_zeros += $i & 0;\n        $max_num = $i if $i > $max_num;\n\
    \    }\n    foreach $i (@$arr) {\n        $num_ones += $i & 1;\n        $num_zeros\
    \ += $i & 0;\n        $max_num = $i if $i > $max_num;\n    }\n    foreach $i (@$arr)\
    \ {\n        $num_ones += $i & 1;\n        $num_zeros += $i & 0;\n        $max_num\
    \ = $i if $i > $max_num;\n    }\n    foreach \nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing $ on loop variable at /tmp/tmp2yq3747y.pl line 68.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my($num_ones);\n    my($decimal_value);\n    \n    foreach my $num (@$arr) {\n\
    \        $num_ones = 0;\n        $decimal_value = 0;\n        \n        foreach\
    \ my $bit (split(//,$num)) {\n            $num_ones += $bit == 1;\n          \
    \  $decimal_value += $bit * pow(2, $#sorted_arr);\n        }\n        \n     \
    \   push (@sorted_arr, $decimal_value);\n    }\n    \n    foreach my $num (@$arr)\
    \ {\n        $num_ones = 0;\n        $decimal_value = 0;\n        \n        foreach\
    \ my $bit (split(//,$num)) {\n            $num_ones += $bit == 1;\n          \
    \  $decimal_value += $bit * pow(2, $#sorted_arr);\n        }\n        \n     \
    \   push (@sorted_arr, $num_ones);\n    }\n    \n    foreach my $num (@$arr) {\n\
    \        $num_ones = 0;\n        $decimal_value = 0;\n        \n        foreach\
    \ my $bit (split(//,$num)) {\n            $num_ones += $bit == 1;\n          \
    \  $decimal_value += $bit * pow(2, $#sorted_arr);\n        }\n        \n     \
    \   push (@sorted_arr, $decimal_value);\n    }\n    \n    foreach my $num (@$arr)\
    \ {\n        $num_ones = 0;\n        $decimal_value = 0;\n        \n        foreach\
    \ my $bit (split(//,$num)) {\n            $num_ones += $bit == 1;\n          \
    \  $decimal_value += $bit * pow(2, $#sorted_arr);\n        }\n        \n     \
    \   push (@sorted_arr, $num_ones);\n    }\n    \n    foreach my $num (@$arr) {\n\
    \        $num_ones = 0;\n        $decimal_value = 0;\n        \n        foreach\
    \ my $bit (split(//,$num)) {\n            $num_ones += $bit == 1;\n          \
    \  $decimal_value += $bit * pow(2, $#sorted_arr);\n        }\n        \n     \
    \   push (@sorted_arr, $decimal_value);\n    }\n    \n    foreach my $num (@$arr)\
    \ {\n        $num_ones = 0;\n        $decimal_value = 0;\n        \n        foreach\
    \ my $bit (split(//,$num)) {\n            $num_ones += $bit == 1;\n          \
    \  $decimal_value += $bit * pow(2, $#sorted_arr);\n        }\n        \n     \
    \   push (@sorted_arr, $num_ones);\n    }\n    \n    foreach my $num (@$arr) {\n\
    \        $num_ones = 0;\n        $decimal_value\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpwxjjw2im.pl line 86, at end
    of line

    syntax error at /tmp/tmpwxjjw2im.pl line 86, near "$decimal_value

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpwxjjw2im.pl line 125, at end
    of line

    syntax error at /tmp/tmpwxjjw2im.pl line 125, at EOF

    Execution of /tmp/tmpwxjjw2im.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_value = 0;\n    foreach my $num (@$arr) {\n\
    \        $num_ones += $num;\n        $decimal_value += $num * log(2);\n    }\n\
    \    foreach my $num (@$arr) {\n        if ($num_ones == $num) {\n           \
    \ push(@sorted_arr, $decimal_value);\n            $num_ones = 0;\n           \
    \ $decimal_value = 0;\n        } else {\n            push(@sorted_arr, $num);\n\
    \        }\n    }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my $max\
    \ = 0;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $tmp;\n    \n    foreach my $num (@$arr) {\n        $ones\
    \ += $num;\n        $dec += $num;\n        $max = $num if $num > $max;\n    }\n\
    \    \n    foreach my $num (@$arr) {\n        $tmp = $num;\n        $tmp -= $ones\
    \ if $tmp > $ones;\n        $tmp -= $dec if $tmp > $dec;\n        $tmp -= $max\
    \ if $tmp > $max;\n        $res[$i] = $tmp;\n        $i++;\n    }\n    \n    foreach\
    \ my $num (@$arr) {\n        $j = 0;\n        $k = 0;\n        foreach my $i (0\
    \ .. $#res) {\n            if ($res[$i] > $num) {\n                $res[$j] =\
    \ $res[$i];\n                $j++;\n            }\n            else {\n      \
    \          $res[$k] = $num;\n                $k++;\n            }\n        }\n\
    \    }\n    \n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $temp = 0;\n    my $count\
    \ = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_k = 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my $max_i =\
    \ 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_temp = 0;\n    my $max_count\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_temp\
    \ = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_k = 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my $max_i =\
    \ 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_temp = 0;\n    my $max_count\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_temp\
    \ = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_k = 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my $max_i =\
    \ 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_temp = 0;\n    my $max_count\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_temp\
    \ = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_k = 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my $max_i =\
    \ 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_temp = 0;\n    my $max_count\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_temp\
    \ = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_k = 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my $max_i =\
    \ 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_temp = 0;\n    my $max_count\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_temp\
    \ = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_k = 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my $max_i =\
    \ 0;\n    my $max_j = 0;\n    my $max_k = 0;\n    my $max_temp = 0;\n    my $max_count\
    \ = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpebedjnn2.pl line 100,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpebedjnn2.pl line 100, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpebedjnn2.pl line 139, at end of line\nsyntax\
    \ error at /tmp/tmpebedjnn2.pl line 139, at EOF\nExecution of /tmp/tmpebedjnn2.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $num_zeros = 0;\n    my $decimal_value = 0;\n    foreach\
    \ my $num (@$arr) {\n        if ($num eq '1') {\n            $num_ones++;\n  \
    \      } else {\n            $num_zeros++;\n        }\n        $decimal_value\
    \ += $num;\n    }\n    if ($num_ones > $num_zeros) {\n        foreach my $num\
    \ (@$arr) {\n            if ($num eq '1') {\n                push(@sorted_arr,\
    \ $decimal_value);\n                $decimal_value = 0;\n            }\n     \
    \   }\n    } else {\n        foreach my $num (@$arr) {\n            if ($num eq\
    \ '0') {\n                push(@sorted_arr, $decimal_value);\n               \
    \ $decimal_value = 0;\n            }\n        }\n    }\n    return @sorted_arr;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_val = 0;\n    foreach my $num (@$arr) {\n\
    \        $num_ones += $num;\n        $decimal_val += $num * log($num);\n    }\n\
    \    foreach my $num (@$arr) {\n        if ($num_ones > $num) {\n            push(@sorted_arr,\
    \ $decimal_val);\n            $decimal_val = 0;\n            $num_ones = 0;\n\
    \        }\n        $decimal_val += $num * log($num);\n    }\n    push(@sorted_arr,\
    \ $decimal_val);\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take log of -2 at /tmp/tmpnut0e8qr.pl line 12.

    '
  stdout: ok!
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my($i, $j, $temp);\n \
    \   my @sorted_arr;\n    my $num_ones = 0;\n    my $decimal_val = 0;\n    my $num_ones_arr\
    \ = [];\n    my $decimal_val_arr = [];\n    my $num_ones_arr_len = 0;\n    my\
    \ $decimal_val_arr_len = 0;\n    my $num_ones_arr_len_max = 0;\n    my $decimal_val_arr_len_max\
    \ = 0;\n    my $num_ones_arr_len_min = 0;\n    my $decimal_val_arr_len_min = 0;\n\
    \    my $num_ones_arr_len_avg = 0;\n    my $decimal_val_arr_len_avg = 0;\n   \
    \ my $num_ones_arr_len_median = 0;\n    my $decimal_val_arr_len_median = 0;\n\
    \    my $num_ones_arr_len_min_index = 0;\n    my $decimal_val_arr_len_min_index\
    \ = 0;\n    my $num_ones_arr_len_max_index = 0;\n    my $decimal_val_arr_len_max_index\
    \ = 0;\n    my $num_ones_arr_len_min_val = 0;\n    my $decimal_val_arr_len_min_val\
    \ = 0;\n    my $num_ones_arr_len_max_val = 0;\n    my $decimal_val_arr_len_max_val\
    \ = 0;\n    my $num_ones_arr_len_min_index = 0;\n    my $decimal_val_arr_len_min_index\
    \ = 0;\n    my $num_ones_arr_len_max_index = 0;\n    my $decimal_val_arr_len_max_index\
    \ = 0;\n    my $num_ones_arr_len_min_val = 0;\n    my $decimal_val_arr_len_min_val\
    \ = 0;\n    my $num_ones_arr_len_max_val = 0;\n    my $decimal_val_arr_len_max_val\
    \ = 0;\n    my $num_ones_arr_len_min_index = 0;\n    my $decimal_val_arr_len_min_index\
    \ = 0;\n    my $num_ones_arr_len_max_index = 0;\n    my $decimal_val_arr_len_max_index\
    \ = 0;\n    my $num_ones_arr_len_min_val = 0;\n    my $decimal_val_arr_len_min_val\
    \ = 0;\n    my $num_ones_arr_len_max_val = 0;\n    my $decimal_val_arr_len_max_val\
    \ = 0;\n    my $num_ones_arr_len_min_index = 0;\n    my $decimal_val_arr_len_min_index\
    \ = 0;\n    my $num_ones_arr_len_max_index = 0;\n    my $decimal_val_arr_len_max_index\
    \ = 0;\n    my $num_ones_arr_len_min_val = 0;\n    my $decimal_val_arr_len_min_val\
    \ = 0;\n    my $num_ones_arr_len_max_val = 0;\n    my $decimal_val_arr_len_max_val\
    \ = 0;\n    my $num_ones_arr_len_min_index = 0;\n    my $decimal_val_arr_len_min_index\
    \ = 0;\n    my $num_ones_arr_len_max_index = 0;\n    my $decimal_val_arr_len_max_index\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp9mkcqby8.pl line 59, at end
    of line

    syntax error at /tmp/tmp9mkcqby8.pl line 59, near "$decimal_val_arr_len_max_index

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp9mkcqby8.pl line 98, at end of
    line

    syntax error at /tmp/tmp9mkcqby8.pl line 98, at EOF

    Execution of /tmp/tmp9mkcqby8.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $max_ones = $len / 2;\n    my $min_ones = $len - $max_ones;\n    my $max_decimal\
    \ = 0;\n    my $min_decimal = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n\
    \    my $count = 0;\n    my $ones = 0;\n    my $decimal = 0;\n    my $tmp_decimal;\n\
    \    my $tmp_ones;\n    my $tmp_len;\n    my $tmp_max_decimal;\n    my $tmp_min_decimal;\n\
    \    my $tmp_max_ones;\n    my $tmp_min_ones;\n    my $tmp_max_decimal;\n    my\
    \ $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my\
    \ $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my\
    \ $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my\
    \ $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my\
    \ $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my\
    \ $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my\
    \ $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my\
    \ $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my\
    \ $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my\
    \ $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my\
    \ $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my\
    \ $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my\
    \ $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my\
    \ $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my\
    \ $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my\
    \ $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my\
    \ $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my\
    \ $tmp_max_decimal;\n    my $tmp_min_decimal;\n    my $tmp_max_decimal;\n    my\
    \ $tmp_min_decimal;\n    my $tmp_max_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp41o01wsb.pl line 82, at end
    of line

    syntax error at /tmp/tmp41o01wsb.pl line 82, near "$tmp_max_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp41o01wsb.pl line 121, at end
    of line

    syntax error at /tmp/tmp41o01wsb.pl line 121, at EOF

    Execution of /tmp/tmp41o01wsb.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my($num_ones);\n    my($num_zeros);\n    my($decimal_value);\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp0p0baak9.pl line 50, at
    end of line

    syntax error at /tmp/tmp0p0baak9.pl line 50, at EOF

    Execution of /tmp/tmp0p0baak9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_value = 0;\n    foreach my $num (@$arr) {\n\
    \        $num_ones += $num;\n        $decimal_value += $num * log(2);\n    }\n\
    \    foreach my $num (@$arr) {\n        if ($num_ones == $num) {\n           \
    \ push(@sorted_arr, $decimal_value);\n            $num_ones = 0;\n           \
    \ $decimal_value = 0;\n        } else {\n            push(@sorted_arr, $num);\n\
    \        }\n    }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $temp;\n    my $count = 0;\n\
    \    my $max = 0;\n    my $min = 0;\n    my $min_index;\n    my $max_index;\n\
    \    my $min_val;\n    my $max_val;\n    my $min_count = 0;\n    my $max_count\
    \ = 0;\n    my $min_max = 0;\n    my $max_min = 0;\n    my $min_min = 0;\n   \
    \ my $max_max = 0;\n    my $min_max2 = 0;\n    my $max_min2 = 0;\n    my $min_min2\
    \ = 0;\n    my $max_min3 = 0;\n    my $max_max3 = 0;\n    my $min_max3 = 0;\n\
    \    my $min_min3 = 0;\n    my $max_min4 = 0;\n    my $max_max4 = 0;\n    my $min_max4\
    \ = 0;\n    my $min_min4 = 0;\n    my $max_min5 = 0;\n    my $max_max5 = 0;\n\
    \    my $min_max5 = 0;\n    my $min_min5 = 0;\n    my $max_min6 = 0;\n    my $max_max6\
    \ = 0;\n    my $min_max6 = 0;\n    my $min_min6 = 0;\n    my $max_min7 = 0;\n\
    \    my $max_max7 = 0;\n    my $min_max7 = 0;\n    my $min_min7 = 0;\n    my $max_min8\
    \ = 0;\n    my $max_max8 = 0;\n    my $min_max8 = 0;\n    my $min_min8 = 0;\n\
    \    my $max_min9 = 0;\n    my $max_max9 = 0;\n    my $min_max9 = 0;\n    my $min_min9\
    \ = 0;\n    my $max_min10 = 0;\n    my $max_max10 = 0;\n    my $min_max10 = 0;\n\
    \    my $min_min10 = 0;\n    my $max_min11 = 0;\n    my $max_max11 = 0;\n    my\
    \ $min_max11 = 0;\n    my $min_min11 = 0;\n    my $max_min12 = 0;\n    my $max_max12\
    \ = 0;\n    my $min_max12 = 0;\n    my $min_min12 = 0;\n    my $max_min13 = 0;\n\
    \    my $max_max13 = 0;\n    my $min_max13 = 0;\n    my $min_min13 = 0;\n    my\
    \ $max_min14 = 0;\n    my $max_max14 = 0;\n    my $min_max14 = 0;\n    my $min_min14\
    \ = 0;\n    my $max_min15 = 0;\n    my $max_max15 = 0;\n    my $min_max15 = 0;\n\
    \    my $min_min15 = 0;\n    my $max_min16 = 0;\n    my $max_max16 = 0;\n    my\
    \ $min_max16 = 0;\n    my $min_min16 = 0;\n    my $max_min17 = 0;\n    my $max_max17\
    \ = 0;\n    my $min_max\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpyfrlyoa3.pl line 87, at end
    of line

    syntax error at /tmp/tmpyfrlyoa3.pl line 87, near "$min_max

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpyfrlyoa3.pl line 126, at end
    of line

    syntax error at /tmp/tmpyfrlyoa3.pl line 126, at EOF

    Execution of /tmp/tmpyfrlyoa3.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $max_count = 0;\n    my $max_dec = 0;\n    my $max_bin = 0;\n    my $max_bin2\
    \ = 0;\n    my $max_bin3 = 0;\n    my $max_bin4 = 0;\n    my $max_bin5 = 0;\n\
    \    my $max_bin6 = 0;\n    my $max_bin7 = 0;\n    my $max_bin8 = 0;\n    my $max_bin9\
    \ = 0;\n    my $max_bin10 = 0;\n    my $max_bin11 = 0;\n    my $max_bin12 = 0;\n\
    \    my $max_bin13 = 0;\n    my $max_bin14 = 0;\n    my $max_bin15 = 0;\n    my\
    \ $max_bin16 = 0;\n    my $max_bin17 = 0;\n    my $max_bin18 = 0;\n    my $max_bin19\
    \ = 0;\n    my $max_bin20 = 0;\n    my $max_bin21 = 0;\n    my $max_bin22 = 0;\n\
    \    my $max_bin23 = 0;\n    my $max_bin24 = 0;\n    my $max_bin25 = 0;\n    my\
    \ $max_bin26 = 0;\n    my $max_bin27 = 0;\n    my $max_bin28 = 0;\n    my $max_bin29\
    \ = 0;\n    my $max_bin30 = 0;\n    my $max_bin31 = 0;\n    my $max_bin32 = 0;\n\
    \    my $max_bin33 = 0;\n    my $max_bin34 = 0;\n    my $max_bin35 = 0;\n    my\
    \ $max_bin36 = 0;\n    my $max_bin37 = 0;\n    my $max_bin38 = 0;\n    my $max_bin39\
    \ = 0;\n    my $max_bin40 = 0;\n    my $max_bin41 = 0;\n    my $max_bin42 = 0;\n\
    \    my $max_bin43 = 0;\n    my $max_bin44 = 0;\n    my $max_bin45 = 0;\n    my\
    \ $max_bin46 = 0;\n    my $max_bin47 = 0;\n    my $max_bin48 = 0;\n    my $max_bin49\
    \ = 0;\n    my $max_bin50 = 0;\n    my $max_bin51 = 0;\n    my $max_bin52 = 0;\n\
    \    my $max_bin53 = 0;\n    my $max_bin54 = 0;\n    my $max_bin55 = 0;\n    my\
    \ $max_bin56 = 0;\n    my $max_bin57 = 0;\n    my $max_bin58 = 0;\n    my $max_bin59\
    \ = 0;\n    my $max_bin60 = 0;\n    my $max_bin61 = 0;\n    my $max_bin62 = 0;\n\
    \    my $max_bin63 = 0;\n    my $max_bin64 = 0;\n    my $max_bin65 = 0;\n    my\
    \ $max_bin66 = 0;\n    my $max_bin67 = 0;\n    my $max_bin68 = 0;\n    my $max_bin69\
    \ = 0;\n    my $max_bin70 = 0;\n    my $max_bin71 = 0;\n    my $max_\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpo4k_lzwq.pl line 82, at end
    of line

    syntax error at /tmp/tmpo4k_lzwq.pl line 82, near "$max_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpo4k_lzwq.pl line 121, at end
    of line

    syntax error at /tmp/tmpo4k_lzwq.pl line 121, at EOF

    Execution of /tmp/tmpo4k_lzwq.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted_arr = ();\n\
    \    my $num_ones = 0;\n    my $num_zeros = 0;\n    my $decimal_value = 0;\n \
    \   foreach my $num (@$arr) {\n        if ($num == 1) {\n            $num_ones++;\n\
    \        } else {\n            $num_zeros++;\n        }\n        $decimal_value\
    \ = $num_zeros + $num_ones;\n        if ($num_ones > $num_zeros) {\n         \
    \   $decimal_value += $num_ones - $num_zeros;\n        }\n        push(@sorted_arr,\
    \ $decimal_value);\n    }\n    foreach my $num (@$arr) {\n        if ($num ==\
    \ 1) {\n            $num_ones--;\n        } else {\n            $num_zeros--;\n\
    \        }\n        $decimal_value = $num_zeros + $num_ones;\n        if ($num_ones\
    \ > $num_zeros) {\n            $decimal_value += $num_ones - $num_zeros;\n   \
    \     }\n        push(@sorted_arr, $decimal_value);\n    }\n    return @sorted_arr;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n    my $ones\
    \ = 0;\n    my $dec = 0;\n    foreach my $num (@$arr) {\n        $ones += $num;\n\
    \        $dec += $num * log(2);\n    }\n    foreach my $num (@$arr) {\n      \
    \  if ($ones == $num) {\n            push(@sorted, $dec);\n        } else {\n\
    \            push(@sorted, $num);\n        }\n        $ones = $num;\n        $dec\
    \ = 0;\n    }\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $ones = 0;\n    my $dec = 0;\n    my @sorted;\n    for(my $i = 0; $i < $size;\
    \ $i++) {\n        if ($arr->[$i] & 1) {\n            $ones++;\n        }\n  \
    \      else {\n            $dec++;\n        }\n    }\n    for(my $i = 0; $i <\
    \ $size; $i++) {\n        if ($arr->[$i] & 1) {\n            push(@sorted, $ones);\n\
    \        }\n        else {\n            push(@sorted, $dec);\n        }\n    }\n\
    \    for(my $i = 0; $i < $size; $i++) {\n        if ($arr->[$i] & 1) {\n     \
    \       $ones--;\n        }\n        else {\n            $dec--;\n        }\n\
    \    }\n    for(my $i = 0; $i < $size; $i++) {\n        if ($arr->[$i] & 1) {\n\
    \            $ones++;\n        }\n        else {\n            $dec++;\n      \
    \  }\n    }\n    for(my $i = 0; $i < $size; $i++) {\n        if ($arr->[$i] &\
    \ 1) {\n            push(@sorted, $ones);\n        }\n        else {\n       \
    \     push(@sorted, $dec);\n        }\n    }\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_value = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $len = @$arr;\n    foreach my $num (@$arr) {\n        if ($num_ones ==\
    \ 0) {\n            $num_ones = $num;\n            $decimal_value = 0;\n     \
    \   }\n        if ($num_ones == $num) {\n            $decimal_value += $num;\n\
    \            $num_ones = 0;\n        }\n        else {\n            if ($num_ones\
    \ > $num) {\n                push(@sorted_arr, $decimal_value);\n            \
    \    $decimal_value = 0;\n                $num_ones = $num;\n            }\n \
    \           else {\n                $decimal_value += $num;\n            }\n \
    \       }\n    }\n    push(@sorted_arr, $decimal_value);\n    return @sorted_arr;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my($i, $j, $temp);\n \
    \   my(@sorted);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpntfv11zz.pl line 48, at
    end of line

    syntax error at /tmp/tmpntfv11zz.pl line 48, at EOF

    Execution of /tmp/tmpntfv11zz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my($i, $j, $n);\n    my($ones_cnt);\n    my($dec);\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpwmqs4o1x.pl line 50, at
    end of line

    syntax error at /tmp/tmpwmqs4o1x.pl line 50, at EOF

    Execution of /tmp/tmpwmqs4o1x.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $size = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n   \
    \ my $j = 0;\n    my $max = 0;\n    my $min = 0;\n    my $maxdec = 0;\n    my\
    \ $mindec = 0;\n    my $maxones = 0;\n    my $minones = 0;\n    my $maxdecdec\
    \ = 0;\n    my $mindecdec = 0;\n    my $maxonesones = 0;\n    my $minonesones\
    \ = 0;\n    my $maxdecones = 0;\n    my $mindecones = 0;\n    my $maxonesonesones\
    \ = 0;\n    my $minonesonesones = 0;\n    my $maxdeconesones = 0;\n    my $mindeconesones\
    \ = 0;\n    my $maxonesonesonesones = 0;\n    my $minonesonesonesones = 0;\n \
    \   my $maxdeconesonesones = 0;\n    my $mindeconesonesones = 0;\n    my $maxonesonesonesonesones\
    \ = 0;\n    my $minonesonesonesonesones = 0;\n    my $maxdeconesonesonesones =\
    \ 0;\n    my $mindeconesonesonesones = 0;\n    my $maxonesonesonesonesonesones\
    \ = 0;\n    my $minonesonesonesonesonesones = 0;\n    my $maxdeconesonesonesonesonesones\
    \ = 0;\n    my $mindeconesonesonesonesonesones = 0;\n    my $maxonesonesonesonesonesonesones\
    \ = 0;\n    my $minonesonesonesonesonesonesonesones = 0;\n    my $maxdeconesonesonesonesonesonesones\
    \ = 0;\n    my $mindeconesonesonesonesonesonesonesones = 0;\n    my $maxonesonesonesonesonesonesonesonesones\
    \ = 0;\n    my $minonesonesonesonesonesonesonesonesonesones = 0;\n    my $maxdeconesonesonesonesonesonesonesonesonesones\
    \ = 0;\n    my $mindeconesonesonesonesonesonesonesonesonesonesones = 0;\n    my\
    \ $maxonesonesonesonesonesonesonesonesones\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp17gunj_b.pl line 50, at end
    of line

    syntax error at /tmp/tmp17gunj_b.pl line 50, near "$maxonesonesonesonesonesonesonesonesones

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp17gunj_b.pl line 89, at end of
    line

    syntax error at /tmp/tmp17gunj_b.pl line 89, at EOF

    Execution of /tmp/tmp17gunj_b.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my($num_ones);\n    my($num_zeros);\n\
    \    my($dec);\n    my($dec2);\n    my($i);\n    my($j);\n    my($temp);\n   \
    \ my(@sorted_arr);\n    my($num_ones_arr);\n    my($num_zeros_arr);\n    my($dec_arr);\n\
    \    my($dec2_arr);\n    my($i);\n    my($j);\n    my($temp);\n    my(@sorted_arr);\n\
    \    my($num_ones_arr);\n    my($num_zeros_arr);\n    my($dec_arr);\n    my($dec2_arr);\n\
    \    my($i);\n    my($j);\n    my($temp);\n    my(@sorted_arr);\n    my($num_ones_arr);\n\
    \    my($num_zeros_arr);\n    my($dec_arr);\n    my($dec2_arr);\n    my($i);\n\
    \    my($j);\n    my($temp);\n    my(@sorted_arr);\n    my($num_ones_arr);\n \
    \   my($num_zeros_arr);\n    my($dec_arr);\n    my($dec2_arr);\n    my($i);\n\
    \    my($j);\n    my($temp);\n    my(@sorted_arr);\n    my($num_ones_arr);\n \
    \   my($num_zeros_arr);\n    my($dec_arr);\n    my($dec2_arr);\n    my($i);\n\
    \    my($j);\n    my($temp);\n    my(@sorted_arr);\n    my($num_ones_arr);\n \
    \   my($num_zeros_arr);\n    my($dec_arr);\n    my($dec2_arr);\n    my($i);\n\
    \    my($j);\n    my($temp);\n    my(@sorted_arr);\n    my($num_ones_arr);\n \
    \   my($num_zeros_arr);\n    my($dec_arr);\n    my($dec2_arr);\n    my($i);\n\
    \    my($j);\n    my($temp);\n    my(@sorted_arr);\n    my($num_ones_arr);\n \
    \   my($num_zeros_arr);\n    my($dec_arr);\n    my($dec2_arr);\n    my($i);\n\
    \    my($j);\n    my($temp);\n    my(@sorted_arr);\n    my($num_ones_\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpr5bp48yy.pl line 80, at end
    of line

    syntax error at /tmp/tmpr5bp48yy.pl line 80, near "$num_ones_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpr5bp48yy.pl line 119, at end
    of line

    syntax error at /tmp/tmpr5bp48yy.pl line 119, at EOF

    Execution of /tmp/tmpr5bp48yy.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my @sorted;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 =\
    \ 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 =\
    \ 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12\
    \ = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16\
    \ = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20\
    \ = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24\
    \ = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28\
    \ = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32\
    \ = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36\
    \ = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40\
    \ = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44\
    \ = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48\
    \ = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52\
    \ = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56\
    \ = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60\
    \ = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64\
    \ = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68\
    \ = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72\
    \ = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76\
    \ = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80\
    \ = 0;\n    my $tmp81 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpgrde9ie2.pl line 133,
    at end of line

    syntax error at /tmp/tmpgrde9ie2.pl line 133, at EOF

    Execution of /tmp/tmpgrde9ie2.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $num_dec = 0;\n    my $num_hex = 0;\n    my $num_oct\
    \ = 0;\n    my $num_dec_in_hex = 0;\n    my $num_oct_in_hex = 0;\n    my $num_hex_in_oct\
    \ = 0;\n    my $num_ones_in_dec = 0;\n    my $num_ones_in_hex = 0;\n    my $num_ones_in_oct\
    \ = 0;\n    my $num_ones_in_dec_in_hex = 0;\n    my $num_ones_in_oct_in_hex =\
    \ 0;\n    my $num_ones_in_hex_in_oct = 0;\n    my $num_ones_in_dec_in_hex_in_oct\
    \ = 0;\n    my $num_ones_in_oct_in_hex_in_hex = 0;\n    my $num_ones_in_hex_in_oct\
    \ = 0;\n    my $num_ones_in_dec_in_hex_in_oct = 0;\n    my $num_ones_in_oct_in_hex_in_hex\
    \ = 0;\n    my $num_ones_in_hex_in_oct = 0;\n    my $num_ones_in_dec_in_hex_in_oct\
    \ = 0;\n    my $num_ones_in_oct_in_hex_in_hex = 0;\n    my $num_ones_in_hex_in_oct\
    \ = 0;\n    my $num_ones_in_dec_in_hex_in_oct = 0;\n    my $num_ones_in_oct_in_hex_in_hex\
    \ = 0;\n    my $num_ones_in_hex_in_oct = 0;\n    my $num_ones_in_dec_in_hex_in_oct\
    \ = 0;\n    my $num_ones_in_oct_in_hex_in_hex = 0;\n    my $num_ones_in_hex_in_oct\
    \ = 0;\n    my $num_ones_in_dec_in_hex_in_oct = 0;\n    my $num_ones_in_oct_in_hex_in_hex\
    \ = 0;\n    my $num_ones_in_hex_in_oct = 0;\n    my $num_ones_in_dec_in_hex_in_oct\
    \ = 0;\n    my $num_ones_in_oct_in_hex_in_hex = 0;\n    my $num_ones_in_hex_in_oct\
    \ = 0;\n    my $num_ones_in_dec_in_hex_in_oct = 0;\n    my $num_ones_in_oct_in_hex_in_hex\
    \ = 0;\n    my $num_ones_in_hex_in_oct = 0;\n    my $num_ones_in_dec_in_hex_in_oct\
    \ = 0;\n    my $num_ones_in_oct_in_hex_in_hex = 0;\n    my $num_ones_in_hex_in_oct\
    \ = 0;\n    my $num_ones_in_dec_in_hex_in_oct = 0;\n    my $num_ones_in_oct_in_hex_in_hex\
    \ = 0;\n    my $num_ones_in_hex_in_oct = 0;\n    my $num_ones_in_dec_in_hex_in_oct\
    \ = 0;\n    my $num_ones_in_oct_in_hex_in_hex = 0;\n    my $num_ones_in_hex_in_oct\
    \ = 0;\n    my $num_ones_in_dec_in_hex_in_oct = 0;\n    my $num_ones_in_oct_in_hex_in_hex\
    \ = 0;\n    my $num_ones_in_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp2a8ex5wp.pl line 57, at end
    of line

    syntax error at /tmp/tmp2a8ex5wp.pl line 57, near "$num_ones_in_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp2a8ex5wp.pl line 96, at end of
    line

    syntax error at /tmp/tmp2a8ex5wp.pl line 96, at EOF

    Execution of /tmp/tmp2a8ex5wp.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $cnt = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n\
    \    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n \
    \   my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n\
    \    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n\
    \    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n\
    \    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n\
    \    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n\
    \    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n\
    \    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n\
    \    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n\
    \    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n\
    \    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n\
    \    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n\
    \    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n\
    \    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n\
    \    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n\
    \    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n\
    \    my $tmp84;\n    my $tmp85;\n    my $tmp86\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp7m2ospcd.pl line 97, at end
    of line

    syntax error at /tmp/tmp7m2ospcd.pl line 97, near "$tmp86

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp7m2ospcd.pl line 136, at end
    of line

    syntax error at /tmp/tmp7m2ospcd.pl line 136, at EOF

    Execution of /tmp/tmp7m2ospcd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $num_zeros = 0;\n    foreach my $num (@$arr) {\n \
    \       if ($num eq 1) {\n            $num_ones++;\n        } else {\n       \
    \     $num_zeros++;\n        }\n    }\n    foreach my $num (@$arr) {\n       \
    \ if ($num eq 1) {\n            push(@sorted_arr, $num_ones);\n        } else\
    \ {\n            push(@sorted_arr, $num_zeros);\n        }\n    }\n    foreach\
    \ my $num (@$arr) {\n        if ($num eq 1) {\n            $num_ones--;\n    \
    \    } else {\n            $num_zeros--;\n        }\n    }\n    foreach my $num\
    \ (@$arr) {\n        if ($num eq 1) {\n            push(@sorted_arr, $num_ones);\n\
    \        } else {\n            push(@sorted_arr, $num_zeros);\n        }\n   \
    \ }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $len = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $tmp;\n    \n    foreach my $num (@$arr) {\n        $ones =\
    \ $num % 2;\n        $dec = $num / 2;\n        $tmp = $ones;\n        $j = 0;\n\
    \        \n        foreach my $i (0 .. $len-1) {\n            next if $sorted[$i]\
    \ >= $tmp;\n            \n            if ($sorted[$i] == $tmp) {\n           \
    \     $j++;\n            }\n            \n            if ($j == $i) {\n      \
    \          $tmp = $sorted[$i];\n            }\n        }\n        \n        $sorted[$i]\
    \ = $tmp;\n    }\n    \n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted_arr;\n    my\
    \ $max_count = 0;\n    my $max_dec = 0;\n    my $max_bin = 0;\n    my $max_bin2\
    \ = 0;\n    my $max_bin3 = 0;\n    my $max_bin4 = 0;\n    my $max_bin5 = 0;\n\
    \    my $max_bin6 = 0;\n    my $max_bin7 = 0;\n    my $max_bin8 = 0;\n    my $max_bin9\
    \ = 0;\n    my $max_bin10 = 0;\n    my $max_bin11 = 0;\n    my $max_bin12 = 0;\n\
    \    my $max_bin13 = 0;\n    my $max_bin14 = 0;\n    my $max_bin15 = 0;\n    my\
    \ $max_bin16 = 0;\n    my $max_bin17 = 0;\n    my $max_bin18 = 0;\n    my $max_bin19\
    \ = 0;\n    my $max_bin20 = 0;\n    my $max_bin21 = 0;\n    my $max_bin22 = 0;\n\
    \    my $max_bin23 = 0;\n    my $max_bin24 = 0;\n    my $max_bin25 = 0;\n    my\
    \ $max_bin26 = 0;\n    my $max_bin27 = 0;\n    my $max_bin28 = 0;\n    my $max_bin29\
    \ = 0;\n    my $max_bin30 = 0;\n    my $max_bin31 = 0;\n    my $max_bin32 = 0;\n\
    \    my $max_bin33 = 0;\n    my $max_bin34 = 0;\n    my $max_bin35 = 0;\n    my\
    \ $max_bin36 = 0;\n    my $max_bin37 = 0;\n    my $max_bin38 = 0;\n    my $max_bin39\
    \ = 0;\n    my $max_bin40 = 0;\n    my $max_bin41 = 0;\n    my $max_bin42 = 0;\n\
    \    my $max_bin43 = 0;\n    my $max_bin44 = 0;\n    my $max_bin45 = 0;\n    my\
    \ $max_bin46 = 0;\n    my $max_bin47 = 0;\n    my $max_bin48 = 0;\n    my $max_bin49\
    \ = 0;\n    my $max_bin50 = 0;\n    my $max_bin51 = 0;\n    my $max_bin52 = 0;\n\
    \    my $max_bin53 = 0;\n    my $max_bin54 = 0;\n    my $max_bin55 = 0;\n    my\
    \ $max_bin56 = 0;\n    my $max_bin57 = 0;\n    my $max_bin58 = 0;\n    my $max_bin59\
    \ = 0;\n    my $max_bin60 = 0;\n    my $max_bin61 = 0;\n    my $max_bin62 = 0;\n\
    \    my $max_bin63 = 0;\n    my $max_bin64 = 0;\n    my $max_bin65 = 0;\n    my\
    \ $max_bin66 = 0;\n    my $max_bin67 = 0;\n    my $max_bin68 = 0;\n    my $max_bin69\
    \ = 0;\n    my $max_bin70 = 0;\n    my $max_bin71 = 0;\n    my $max_\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpu3_etmrd.pl line 82, at end
    of line

    syntax error at /tmp/tmpu3_etmrd.pl line 82, near "$max_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpu3_etmrd.pl line 121, at end
    of line

    syntax error at /tmp/tmpu3_etmrd.pl line 121, at EOF

    Execution of /tmp/tmpu3_etmrd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $num_zeros = 0;\n    my $num_dec = 0;\n    foreach\
    \ my $num (@$arr) {\n        if ($num eq 1) {\n            $num_ones++;\n    \
    \    } elsif ($num eq 0) {\n            $num_zeros++;\n        } else {\n    \
    \        $num_dec++;\n        }\n    }\n    foreach my $num (@$arr) {\n      \
    \  if ($num eq 1) {\n            $num_ones++;\n        } elsif ($num eq 0) {\n\
    \            $num_zeros++;\n        } else {\n            $num_dec++;\n      \
    \  }\n    }\n    foreach my $num (@$arr) {\n        if ($num eq 1) {\n       \
    \     $num_ones++;\n        } elsif ($num eq 0) {\n            $num_zeros++;\n\
    \        } else {\n            $num_dec++;\n        }\n    }\n    foreach my $num\
    \ (@$arr) {\n        if ($num eq 1) {\n            $num_ones++;\n        } elsif\
    \ ($num eq 0) {\n            $num_zeros++;\n        } else {\n            $num_dec++;\n\
    \        }\n    }\n    foreach my $num (@$arr) {\n        if ($num eq 1) {\n \
    \           $num_ones++;\n        } elsif ($num eq 0) {\n            $num_zeros++;\n\
    \        } else {\n            $num_dec++;\n        }\n    }\n    foreach my $num\
    \ (@$arr) {\n        if ($num eq 1) {\n            $num_ones++;\n        } elsif\
    \ ($num eq 0) {\n            $num_zeros++;\n        } else {\n            $num_dec++;\n\
    \        }\n    }\n    foreach my $num (@$arr) {\n        if ($num eq 1) {\n \
    \           $num_ones++;\n        } elsif ($num eq 0) {\n            $num_zeros++;\n\
    \        } else {\n            $num_dec++;\n        }\n    }\n    foreach my $num\
    \ (@$arr) {\n        if ($num eq 1) {\n            $num_ones++;\n        } elsif\
    \ ($num eq 0) {\n            $num_zeros++;\n        } else {\n            $num_dec++;\n\
    \        }\n    }\n    foreach my $num (@$arr) {\n        if ($num eq 1) {\n \
    \           $num_ones++;\n        } elsif ($num eq 0) {\n            $num_zeros++;\n\
    \        } else {\n            $num_dec++;\n        }\n    }\n    foreach my $num\
    \ (@$arr) {\n        if ($num eq 1) {\n            $num_ones++;\n        } elsif\
    \ ($num eq 0) {\n            $num_zeros\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpubz7urjr.pl line 97, at end
    of line

    syntax error at /tmp/tmpubz7urjr.pl line 97, near "$num_zeros

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpubz7urjr.pl line 136, at end
    of line

    syntax error at /tmp/tmpubz7urjr.pl line 136, at EOF

    Execution of /tmp/tmpubz7urjr.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $max = 0;\n    my $min = 0;\n    my $count = 0;\n    my $tmp;\n    my $tmp2;\n\
    \    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n \
    \   my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n\
    \    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n\
    \    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n\
    \    my $tmp83;\n    my $tmp84;\n    my $tmp85;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpcvpyrlpx.pl line 136,
    at end of line

    syntax error at /tmp/tmpcvpyrlpx.pl line 136, at EOF

    Execution of /tmp/tmpcvpyrlpx.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp\
    \ = 0;\n    my @ret;\n    my $flag = 0;\n    my $flag2 = 0;\n    my $flag3 = 0;\n\
    \    my $flag4 = 0;\n    my $flag5 = 0;\n    my $flag6 = 0;\n    my $flag7 = 0;\n\
    \    my $flag8 = 0;\n    my $flag9 = 0;\n    my $flag10 = 0;\n    my $flag11 =\
    \ 0;\n    my $flag12 = 0;\n    my $flag13 = 0;\n    my $flag14 = 0;\n    my $flag15\
    \ = 0;\n    my $flag16 = 0;\n    my $flag17 = 0;\n    my $flag18 = 0;\n    my\
    \ $flag19 = 0;\n    my $flag20 = 0;\n    my $flag21 = 0;\n    my $flag22 = 0;\n\
    \    my $flag23 = 0;\n    my $flag24 = 0;\n    my $flag25 = 0;\n    my $flag26\
    \ = 0;\n    my $flag27 = 0;\n    my $flag28 = 0;\n    my $flag29 = 0;\n    my\
    \ $flag30 = 0;\n    my $flag31 = 0;\n    my $flag32 = 0;\n    my $flag33 = 0;\n\
    \    my $flag34 = 0;\n    my $flag35 = 0;\n    my $flag36 = 0;\n    my $flag37\
    \ = 0;\n    my $flag38 = 0;\n    my $flag39 = 0;\n    my $flag40 = 0;\n    my\
    \ $flag41 = 0;\n    my $flag42 = 0;\n    my $flag43 = 0;\n    my $flag44 = 0;\n\
    \    my $flag45 = 0;\n    my $flag46 = 0;\n    my $flag47 = 0;\n    my $flag48\
    \ = 0;\n    my $flag49 = 0;\n    my $flag50 = 0;\n    my $flag51 = 0;\n    my\
    \ $flag52 = 0;\n    my $flag53 = 0;\n    my $flag54 = 0;\n    my $flag55 = 0;\n\
    \    my $flag56 = 0;\n    my $flag57 = 0;\n    my $flag58 = 0;\n    my $flag59\
    \ = 0;\n    my $flag60 = 0;\n    my $flag61 = 0;\n    my $flag62 = 0;\n    my\
    \ $flag63 = 0;\n    my $flag64 = 0;\n    my $flag65 = 0;\n    my $flag66 = 0;\n\
    \    my $flag67 = 0;\n    my $flag68 = 0;\n    my $flag69 = 0;\n    my $flag70\
    \ = 0;\n    my $flag71 = 0;\n    my $flag72 = 0;\n    my $flag73 = 0;\n    my\
    \ $flag74 = 0;\n    my $flag75 = 0;\n    my $flag76 = 0;\n    my $flag77 = 0;\n\
    \    my $flag78 = 0;\n    my $flag79 = 0;\n    my $flag80 = 0;\n    \nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjcnaq5v0.pl line 134,
    at end of line

    syntax error at /tmp/tmpjcnaq5v0.pl line 134, at EOF

    Execution of /tmp/tmpjcnaq5v0.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n\
    \    my @ret;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3,\
    \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpmi450vl1.pl line 53, at
    end of line

    syntax error at /tmp/tmpmi450vl1.pl line 53, at EOF

    Execution of /tmp/tmpmi450vl1.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $count\
    \ = 0;\n    my $ones = 0;\n    my $dec = 0;\n    my $tmp_dec = 0;\n    my $tmp_dec_count\
    \ = 0;\n    my $tmp_ones = 0;\n    my $tmp_ones_count = 0;\n    my $tmp_ones_dec\
    \ = 0;\n    my $tmp_ones_dec_count = 0;\n    my $tmp_ones_dec_inc = 0;\n    my\
    \ $tmp_ones_dec_inc_count = 0;\n    my $tmp_ones_dec_inc_dec = 0;\n    my $tmp_ones_dec_inc_dec_count\
    \ = 0;\n    my $tmp_ones_dec_inc_dec_dec = 0;\n    my $tmp_ones_dec_inc_dec_dec_count\
    \ = 0;\n    my $tmp_ones_dec_inc_dec_dec_dec = 0;\n    my $tmp_ones_dec_inc_dec_dec_count\
    \ = 0;\n    my $tmp_ones_dec_inc_dec_dec_dec = 0;\n    my $tmp_ones_dec_inc_dec_dec_count\
    \ = 0;\n    my $tmp_ones_dec_inc_dec_dec_dec = 0;\n    my $tmp_ones_dec_inc_dec_dec_count\
    \ = 0;\n    my $tmp_ones_dec_inc_dec_dec_dec = 0;\n    my $tmp_ones_dec_inc_dec_dec_count\
    \ = 0;\n    my $tmp_ones_dec_inc_dec_dec_dec = 0;\n    my $tmp_ones_dec_inc_dec_dec_count\
    \ = 0;\n    my $tmp_ones_dec_inc_dec_dec_dec = 0;\n    my $tmp_ones_dec_inc_dec_dec_count\
    \ = 0;\n    my $tmp_ones_dec_inc_dec_dec_dec = 0;\n    my $tmp_ones_dec_inc_dec_dec_count\
    \ = 0;\n    my $tmp_ones_dec_inc_dec_dec_dec = 0;\n    my $tmp_ones_dec_inc_dec_dec_count\
    \ = 0;\n    my $tmp_ones_dec_inc_dec_dec_dec = 0;\n    my $tmp_ones_dec_inc_dec_dec_count\
    \ = 0;\n    my $tmp_ones_dec_inc_dec_dec_dec = 0;\n    my $tmp_ones_dec_inc_dec_dec_count\
    \ = 0;\n    my $tmp_ones_dec_inc_dec_dec_dec = 0;\n    my $tmp_ones_dec_inc_dec_dec_count\
    \ = 0;\n    my $tmp_ones_dec_inc_dec_dec_dec = 0;\n    my $tmp_ones_dec_inc_dec_dec_count\
    \ = 0;\n    my $tmp_ones_dec_inc_dec_dec_dec = 0;\n    my $tmp_ones_dec_inc_dec_dec_count\
    \ = 0;\n    my $tmp_ones_dec_inc_dec_dec_dec = 0;\n    my $tmp_ones_dec_inc_dec_dec_count\
    \ = 0;\n    my $tmp_ones_dec_inc_dec_dec_dec = 0;\n    \nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpctq4ahqm.pl line 96, at
    end of line

    syntax error at /tmp/tmpctq4ahqm.pl line 96, at EOF

    Execution of /tmp/tmpctq4ahqm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my($i, $j, $temp);\n \
    \   my(@sorted);\n    \n    # sort by number of ones\n    foreach $i (0 .. $#arr)\
    \ {\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$i] & 1;\n        $arr[$i]\
    \ |= $temp;\n    }\n    \n    # sort by decimal value\n    foreach $i (0 .. $#arr)\
    \ {\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$i] >> 1;\n        $arr[$i]\
    \ |= $temp;\n    }\n    \n    # sort by decimal value\n    foreach $i (0 .. $#arr)\
    \ {\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$i] >> 1;\n        $arr[$i]\
    \ |= $temp;\n    }\n    \n    # sort by decimal value\n    foreach $i (0 .. $#arr)\
    \ {\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$i] >> 1;\n        $arr[$i]\
    \ |= $temp;\n    }\n    \n    # sort by decimal value\n    foreach $i (0 .. $#arr)\
    \ {\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$i] >> 1;\n        $arr[$i]\
    \ |= $temp;\n    }\n    \n    # sort by decimal value\n    foreach $i (0 .. $#arr)\
    \ {\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$i] >> 1;\n        $arr[$i]\
    \ |= $temp;\n    }\n    \n    # sort by decimal value\n    foreach $i (0 .. $#arr)\
    \ {\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$i] >> 1;\n        $arr[$i]\
    \ |= $temp;\n    }\n    \n    # sort by decimal value\n    foreach $i (0 .. $#arr)\
    \ {\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$i] >> 1;\n        $arr[$i]\
    \ |= $temp;\n    }\n    \n    # sort by decimal value\n    foreach $i (0 .. $#arr)\
    \ {\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$i] >> 1;\n        $arr[$i]\
    \ |= $temp;\n    }\n    \n    # sort by decimal value\n    foreach $i (0 .. $#arr)\
    \ {\n        $temp = $arr[$i];\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp979lmvr4.pl line 115,
    at end of line

    syntax error at /tmp/tmp979lmvr4.pl line 115, at EOF

    Execution of /tmp/tmp979lmvr4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @ret;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $cnt = 0;\n    my $cnt2 = 0;\n    my $cnt3 =\
    \ 0;\n    my $cnt4 = 0;\n    my $cnt5 = 0;\n    my $cnt6 = 0;\n    my $cnt7 =\
    \ 0;\n    my $cnt8 = 0;\n    my $cnt9 = 0;\n    my $cnt10 = 0;\n    my $cnt11\
    \ = 0;\n    my $cnt12 = 0;\n    my $cnt13 = 0;\n    my $cnt14 = 0;\n    my $cnt15\
    \ = 0;\n    my $cnt16 = 0;\n    my $cnt17 = 0;\n    my $cnt18 = 0;\n    my $cnt19\
    \ = 0;\n    my $cnt20 = 0;\n    my $cnt21 = 0;\n    my $cnt22 = 0;\n    my $cnt23\
    \ = 0;\n    my $cnt24 = 0;\n    my $cnt25 = 0;\n    my $cnt26 = 0;\n    my $cnt27\
    \ = 0;\n    my $cnt28 = 0;\n    my $cnt29 = 0;\n    my $cnt30 = 0;\n    my $cnt31\
    \ = 0;\n    my $cnt32 = 0;\n    my $cnt33 = 0;\n    my $cnt34 = 0;\n    my $cnt35\
    \ = 0;\n    my $cnt36 = 0;\n    my $cnt37 = 0;\n    my $cnt38 = 0;\n    my $cnt39\
    \ = 0;\n    my $cnt40 = 0;\n    my $cnt41 = 0;\n    my $cnt42 = 0;\n    my $cnt43\
    \ = 0;\n    my $cnt44 = 0;\n    my $cnt45 = 0;\n    my $cnt46 = 0;\n    my $cnt47\
    \ = 0;\n    my $cnt48 = 0;\n    my $cnt49 = 0;\n    my $cnt50 = 0;\n    my $cnt51\
    \ = 0;\n    my $cnt52 = 0;\n    my $cnt53 = 0;\n    my $cnt54 = 0;\n    my $cnt55\
    \ = 0;\n    my $cnt56 = 0;\n    my $cnt57 = 0;\n    my $cnt58 = 0;\n    my $cnt59\
    \ = 0;\n    my $cnt60 = 0;\n    my $cnt61 = 0;\n    my $cnt62 = 0;\n    my $cnt63\
    \ = 0;\n    my $cnt64 = 0;\n    my $cnt65 = 0;\n    my $cnt66 = 0;\n    my $cnt67\
    \ = 0;\n    my $cnt68 = 0;\n    my $cnt69 = 0;\n    my $cnt70 = 0;\n    my $cnt71\
    \ = 0;\n    my $cnt72 = 0;\n    my $cnt73 = 0;\n    my $cnt74 = 0;\n    my $cnt75\
    \ = 0;\n    my $cnt76 = 0;\n    my $cnt77 = 0;\n    my $cnt78 = 0;\n    my $cnt79\
    \ = 0;\n    my $cnt80 = 0;\n    my $cnt81 = 0;\n    my $cnt82 = 0;\n    my $cnt83\
    \ = 0;\n    my $cnt84 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp54lxvydl.pl line 133,
    at end of line

    syntax error at /tmp/tmp54lxvydl.pl line 133, at EOF

    Execution of /tmp/tmp54lxvydl.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k =\
    \ 0;\n    my $temp = 0;\n    my $count = 0;\n    my $max_count = 0;\n    my $max_dec\
    \ = 0;\n    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n \
    \   my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_ones\
    \ = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_dec = 0;\n  \
    \  my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_dec\
    \ = 0;\n    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n \
    \   my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_ones\
    \ = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_dec = 0;\n  \
    \  my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_dec\
    \ = 0;\n    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n \
    \   my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_ones\
    \ = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_dec = 0;\n  \
    \  my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_dec\
    \ = 0;\n    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n \
    \   my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_ones\
    \ = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_dec = 0;\n  \
    \  my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_dec\
    \ = 0;\n    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n \
    \   my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_ones\
    \ = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_dec = 0;\n  \
    \  my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_dec\
    \ = 0;\n    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n \
    \   my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_ones\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp6bqa0mot.pl line 133,
    at end of line

    syntax error at /tmp/tmp6bqa0mot.pl line 133, at EOF

    Execution of /tmp/tmp6bqa0mot.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $temp\
    \ = 0;\n    my $flag = 0;\n    my @sorted_arr = ();\n    \n    foreach my $num\
    \ (@$arr) {\n        if ($num == 1) {\n            $ones++;\n        } else {\n\
    \            $dec += $num;\n        }\n    }\n    \n    foreach my $num (@$arr)\
    \ {\n        if ($num == 1) {\n            $flag = 1;\n        }\n    }\n    \n\
    \    foreach my $num (@$arr) {\n        if ($flag == 1) {\n            $flag =\
    \ 0;\n            $temp = $num;\n        }\n    }\n    \n    foreach my $num (@$arr)\
    \ {\n        if ($flag == 1) {\n            $flag = 0;\n            $sorted_arr[$i]\
    \ = $temp;\n            $i++;\n        }\n    }\n    \n    foreach my $num (@$arr)\
    \ {\n        if ($flag == 1) {\n            $flag = 0;\n            $sorted_arr[$j]\
    \ = $num;\n            $j++;\n        }\n    }\n    \n    return @sorted_arr;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $num_zeros = 0;\n    my $decimal_value = 0;\n    foreach\
    \ my $num (@$arr) {\n        if ($num eq 1) {\n            $num_ones++;\n    \
    \    } else {\n            $num_zeros++;\n        }\n        $decimal_value +=\
    \ $num;\n    }\n    foreach my $num (@$arr) {\n        if ($num eq 1) {\n    \
    \        $num_ones--;\n        } else {\n            $num_zeros--;\n        }\n\
    \        $decimal_value -= $num;\n    }\n    if ($num_ones == 0) {\n        foreach\
    \ my $num (@$arr) {\n            $decimal_value += $num;\n        }\n    }\n \
    \   foreach my $num (@$arr) {\n        $decimal_value -= $num;\n    }\n    foreach\
    \ my $num (@$arr) {\n        if ($num eq 1) {\n            push(@sorted_arr, $decimal_value);\n\
    \        } else {\n            push(@sorted_arr, $decimal_value + $num_ones);\n\
    \        }\n    }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted_arr;\n    my\
    \ $ones = 0;\n    my $dec = 0;\n    foreach my $num (@$arr) {\n        if ($num\
    \ == 1) {\n            $ones++;\n        } else {\n            $dec += $num;\n\
    \        }\n    }\n    foreach my $num (@$arr) {\n        if ($num == 1) {\n \
    \           $ones--;\n        } else {\n            $dec -= $num;\n        }\n\
    \        if ($ones > 0) {\n            push(@sorted_arr, $dec);\n        } else\
    \ {\n            push(@sorted_arr, $num);\n        }\n    }\n    return @sorted_arr;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n  \
    \  my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n   \
    \ my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n\
    \    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n\
    \    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n\
    \    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n\
    \    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n\
    \    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n\
    \    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n\
    \    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n\
    \    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n\
    \    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n\
    \    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n\
    \    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n\
    \    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n\
    \    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n\
    \    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n\
    \    my $tmp84;\n    my $tmp85;\n    my $tmp86;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp3qrwafi3.pl line 135,
    at end of line

    syntax error at /tmp/tmp3qrwafi3.pl line 135, at EOF

    Execution of /tmp/tmp3qrwafi3.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted_arr = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $count = 0;\n    my $ones = 0;\n    my $dec = 0;\n    my $bin_arr;\n \
    \   my $bin_arr_size;\n    my $bin_arr_max;\n    my $bin_arr_min;\n    my $bin_arr_sum;\n\
    \    my $bin_arr_count;\n    my $bin_arr_sum2;\n    my $bin_arr_sum3;\n    my\
    \ $bin_arr_sum4;\n    my $bin_arr_sum5;\n    my $bin_arr_sum6;\n    my $bin_arr_sum7;\n\
    \    my $bin_arr_sum8;\n    my $bin_arr_sum9;\n    my $bin_arr_sum10;\n    my\
    \ $bin_arr_sum11;\n    my $bin_arr_sum12;\n    my $bin_arr_sum13;\n    my $bin_arr_sum14;\n\
    \    my $bin_arr_sum15;\n    my $bin_arr_sum16;\n    my $bin_arr_sum17;\n    my\
    \ $bin_arr_sum18;\n    my $bin_arr_sum19;\n    my $bin_arr_sum20;\n    my $bin_arr_sum21;\n\
    \    my $bin_arr_sum22;\n    my $bin_arr_sum23;\n    my $bin_arr_sum24;\n    my\
    \ $bin_arr_sum25;\n    my $bin_arr_sum26;\n    my $bin_arr_sum27;\n    my $bin_arr_sum28;\n\
    \    my $bin_arr_sum29;\n    my $bin_arr_sum30;\n    my $bin_arr_sum31;\n    my\
    \ $bin_arr_sum32;\n    my $bin_arr_sum33;\n    my $bin_arr_sum34;\n    my $bin_arr_sum35;\n\
    \    my $bin_arr_sum36;\n    my $bin_arr_sum37;\n    my $bin_arr_sum38;\n    my\
    \ $bin_arr_sum39;\n    my $bin_arr_sum40;\n    my $bin_arr_sum41;\n    my $bin_arr_sum42;\n\
    \    my $bin_arr_sum43;\n    my $bin_arr_sum44;\n    my $bin_arr_sum45;\n    my\
    \ $bin_arr_sum46;\n    my $bin_arr_sum47;\n    my $bin_arr_sum48;\n    my $bin_arr_sum49;\n\
    \    my $bin_arr_sum50;\n    my $bin_arr_sum51;\n    my $bin_arr_sum52;\n    my\
    \ $bin_arr_sum53;\n    my $bin_arr_sum54;\n    my $bin_arr_sum55;\n    my $bin_arr_sum56;\n\
    \    my $bin_arr_sum57;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp0iseadzu.pl line 117,
    at end of line

    syntax error at /tmp/tmp0iseadzu.pl line 117, at EOF

    Execution of /tmp/tmp0iseadzu.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my($i, $j, $temp, $count);\n\
    \    my $len = @$arr;\n    my $max = 0;\n    my $min = 0;\n    my $max2 = 0;\n\
    \    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 = 0;\n\
    \    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 = 0;\n\
    \    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 = 0;\n\
    \    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 = 0;\n\
    \    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n\
    \    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n\
    \    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n\
    \    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n\
    \    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n\
    \    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n\
    \    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n\
    \    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n\
    \    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n\
    \    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n\
    \    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n\
    \    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n\
    \    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n\
    \    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n\
    \    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n\
    \    my $min40 = 0;\n    my $max41 = 0;\n    my $min41 = 0;\n    my $max42 = 0;\n\
    \    my $min42 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2z11qs8l.pl line 132,
    at end of line

    syntax error at /tmp/tmp2z11qs8l.pl line 132, at EOF

    Execution of /tmp/tmp2z11qs8l.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n    my $len\
    \ = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n \
    \   my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n \
    \   my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n\
    \    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n\
    \    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n\
    \    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n\
    \    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n\
    \    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n\
    \    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n\
    \    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n\
    \    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n\
    \    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n\
    \    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n\
    \    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n\
    \    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n\
    \    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n\
    \    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n\
    \    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n\
    \    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n\
    \    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n\
    \    my $tmp81\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4,\
    \ 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpc2whq_c7.pl line 94, at end
    of line

    syntax error at /tmp/tmpc2whq_c7.pl line 94, near "$tmp81

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpc2whq_c7.pl line 133, at end
    of line

    syntax error at /tmp/tmpc2whq_c7.pl line 133, at EOF

    Execution of /tmp/tmpc2whq_c7.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n\
    \    my @tmp;\n    my @res;\n    my $cmp;\n    my $cmp_res;\n    my $cmp_res_res;\n\
    \    my $cmp_res_res_res;\n    my $cmp_res_res_res_res;\n    my $cmp_res_res_res_res_res;\n\
    \    my $cmp_res_res_res_res_res_res;\n    my $cmp_res_res_res_res_res_res_res;\n\
    \    my $cmp_res_res_res_res_res_res_res_res;\n    my $cmp_res_res_res_res_res_res_res_res_res;\n\
    \    my $cmp_res_res_res_res_res_res_res_res_res_res;\n    my $cmp_res_res_res_res_res_res_res_res_res_res_res;\n\
    \    my $cmp_res_res_res_res_res_res_res_res_res_res_res_res;\n    my $cmp_res_res_res_res_res_res_res_res_res_res_res_res_res;\n\
    \    my $cmp_res_res_res_res_res_res_res_res_res_res_res_res_res;\n    my $cmp_res_res_res_res_res_res_res_res_res_res_res_res_res;\n\
    \    my $cmp_res_res_res_res_res_res_res_res_res_res_res_res_res_res;\n    my\
    \ $cmp_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res;\n    my $cmp_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res;\n\
    \    my $cmp_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res;\n  \
    \  my $cmp_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res;\n    my\
    \ $cmp_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res;\n    my $cmp_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res;\n\
    \    my $cmp_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res;\n\
    \    my $cmp_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res;\n\
    \    my $cmp_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res;\n  \
    \  my $cmp_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res;\n    my\
    \ $cmp_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res;\n    my\
    \ $cmp_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res_res;\n\
    \    my $cmp_res_res_res_res_res_res_\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmplzb5gwv9.pl line 45, at end
    of line

    syntax error at /tmp/tmplzb5gwv9.pl line 45, near "$cmp_res_res_res_res_res_res_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmplzb5gwv9.pl line 84, at end of
    line

    syntax error at /tmp/tmplzb5gwv9.pl line 84, at EOF

    Execution of /tmp/tmplzb5gwv9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = scalar @$arr;\n\
    \    my $ones = $len * '0';\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n \
    \   my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n \
    \   my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n\
    \    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n\
    \    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n\
    \    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n\
    \    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n\
    \    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n\
    \    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n\
    \    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n\
    \    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n\
    \    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n\
    \    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n\
    \    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n\
    \    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n\
    \    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n\
    \    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n\
    \    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n\
    \    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n\
    \    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n\
    \    my $tmp\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3,\
    \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpcqz1h7_m.pl line 93, at end
    of line

    syntax error at /tmp/tmpcqz1h7_m.pl line 93, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpcqz1h7_m.pl line 132, at end
    of line

    syntax error at /tmp/tmpcqz1h7_m.pl line 132, at EOF

    Execution of /tmp/tmpcqz1h7_m.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my($i, $j, $num_ones);\n    \n    foreach $i (0 .. $#arr) {\n        $num_ones\
    \ = 0;\n        $j = $i;\n        \n        foreach $j (0 .. $#arr) {\n      \
    \      if ($arr[$j] & 1) {\n                $num_ones++;\n            }\n    \
    \    }\n        \n        if ($num_ones > 0) {\n            push(@sorted_arr,\
    \ $arr[$i]);\n        }\n    }\n    \n    foreach $i (0 .. $#sorted_arr) {\n \
    \       $arr[$i] = $sorted_arr[$i];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_value = 0;\n    foreach my $num (@$arr) {\n\
    \        $num_ones += $num;\n        $decimal_value += $num * log($num);\n   \
    \ }\n    foreach my $num (@$arr) {\n        if ($num_ones == $num) {\n       \
    \     push(@sorted_arr, $decimal_value);\n        } else {\n            push(@sorted_arr,\
    \ $num);\n        }\n        $num_ones = $num;\n        $decimal_value = $num\
    \ * log($num);\n    }\n    foreach my $num (@sorted_arr) {\n        my $decimal_value\
    \ = $num * log($num);\n        my $num_ones = 0;\n        foreach my $i (@$arr)\
    \ {\n            if ($i == $num) {\n                $num_ones += 1;\n        \
    \    }\n        }\n        if ($num_ones == $num) {\n            $decimal_value\
    \ += $num_ones;\n        }\n        my $new_decimal_value = $decimal_value;\n\
    \        my $new_num_ones = $num_ones;\n        foreach my $i (@$arr) {\n    \
    \        if ($i == $num) {\n                $new_decimal_value += $num_ones;\n\
    \                $new_num_ones += 1;\n            }\n        }\n        if ($new_num_ones\
    \ == $num) {\n            $decimal_value += $new_num_ones;\n        }\n      \
    \  my $new_decimal_value = $decimal_value;\n        my $new_num_ones = $num_ones;\n\
    \        foreach my $i (@$arr) {\n            if ($i == $num) {\n            \
    \    $new_decimal_value += $num_ones;\n                $new_num_ones += 1;\n \
    \           }\n        }\n        if ($new_num_ones == $num) {\n            $decimal_value\
    \ += $new_num_ones;\n        }\n        my $new_decimal_value = $decimal_value;\n\
    \        my $new_num_ones = $num_ones;\n        foreach my $i (@$arr) {\n    \
    \        if ($i == $num) {\n                $new_decimal_value += $num_ones;\n\
    \                $new_num_ones += 1;\n            }\n        }\n        if ($new_num_ones\
    \ == $num) {\n            $decimal_value += $new_num_ones;\n        }\n      \
    \  my $new_decimal_value = $decimal_value;\n        my $new_num_ones = $num_ones;\n\
    \        foreach my $i (@$arr) {\n            if ($i == $num) {\n            \
    \    $new_decimal_value += $num_ones;\n                $new_num_ones += 1;\n \
    \           }\n        }\n        if ($new_num_ones == $num) {\n            $decimal_value\
    \ += $new_num_ones;\n        }\n        \nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpoq_5rcsm.pl line 118,
    at end of line

    syntax error at /tmp/tmpoq_5rcsm.pl line 118, at EOF

    Execution of /tmp/tmpoq_5rcsm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = scalar @$arr;\n\
    \    my $ones = $len * '0';\n    my $zeros = $len * '1';\n    my $cmp = sub {\n\
    \        my $a = $_[0];\n        my $b = $_[1];\n        my $cmp = $a cmp $b;\n\
    \        if ($cmp == 0) {\n            $cmp = $a cmp $ones;\n        }\n     \
    \   if ($cmp < 0) {\n            $cmp = $a cmp $zeros;\n        }\n        return\
    \ $cmp;\n    };\n    sort $cmp;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted_arr = ();\n\
    \    my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_dec_index = 0;\n   \
    \ my $max_dec_value = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n   \
    \ my $l = 0;\n    my $count = 0;\n    my $count_dec = 0;\n    my $count_dec_index\
    \ = 0;\n    my $count_dec_value = 0;\n    my $count_ones = 0;\n    my $count_ones_index\
    \ = 0;\n    my $count_ones_value = 0;\n    my $count_zeros = 0;\n    my $count_zeros_index\
    \ = 0;\n    my $count_zeros_value = 0;\n    my $count_zeros_index2 = 0;\n    my\
    \ $count_zeros_value2 = 0;\n    my $count_zeros_index3 = 0;\n    my $count_zeros_value3\
    \ = 0;\n    my $count_zeros_index4 = 0;\n    my $count_zeros_value4 = 0;\n   \
    \ my $count_zeros_index5 = 0;\n    my $count_zeros_value5 = 0;\n    my $count_zeros_index6\
    \ = 0;\n    my $count_zeros_value6 = 0;\n    my $count_zeros_index7 = 0;\n   \
    \ my $count_zeros_value7 = 0;\n    my $count_zeros_index8 = 0;\n    my $count_zeros_value8\
    \ = 0;\n    my $count_zeros_index9 = 0;\n    my $count_zeros_value9 = 0;\n   \
    \ my $count_zeros_index10 = 0;\n    my $count_zeros_value10 = 0;\n    my $count_zeros_index11\
    \ = 0;\n    my $count_zeros_value11 = 0;\n    my $count_zeros_index12 = 0;\n \
    \   my $count_zeros_value12 = 0;\n    my $count_zeros_index13 = 0;\n    my $count_zeros_value13\
    \ = 0;\n    my $count_zeros_index14 = 0;\n    my $count_zeros_value14 = 0;\n \
    \   my $count_zeros_index15 = 0;\n    my $count_zeros_value15 = 0;\n    my $count_zeros_index16\
    \ = 0;\n    my $count_zeros_value16 = 0;\n    my $count_zeros_index17 = 0;\n \
    \   my $count_zeros_value17 = 0;\n    my $count_zeros_index18 = 0;\n    my $count_zeros_value18\
    \ = 0;\n    my $count_zeros_index19 = 0;\n    my $count_zeros_value19 = 0;\n \
    \   my $count_zeros_index20 = 0;\n    my $count_zeros_value20 = 0;\n    my $count_zeros_index21\
    \ = 0;\n    my $count_zeros_value21 = 0;\n    my $count_zeros_index22 = 0;\n \
    \   my $count_zeros_value22 = 0;\n    my $count_zeros_index23 = 0;\n    my $count_zeros_value23\
    \ = 0;\n    my $count_zeros_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpxr454i04.pl line 71, at end
    of line

    syntax error at /tmp/tmpxr454i04.pl line 71, near "$count_zeros_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpxr454i04.pl line 110, at end
    of line

    syntax error at /tmp/tmpxr454i04.pl line 110, at EOF

    Execution of /tmp/tmpxr454i04.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $num_ones = 0;\n    my $decimal_value = 0;\n    foreach my $num (@$arr) {\n\
    \        if ($num_ones == 0) {\n            $num_ones = $num;\n            $decimal_value\
    \ = 0;\n        }\n        elsif ($num_ones == $num) {\n            $decimal_value++;\n\
    \        }\n        else {\n            push(@sorted, $decimal_value);\n     \
    \       $num_ones = $num;\n            $decimal_value = 0;\n        }\n    }\n\
    \    push(@sorted, $decimal_value);\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my($i, $j, $k, $temp);\n\
    \    my(@sorted);\n    \n    # sort by number of ones\n    for(my $i = 0; $i <\
    \ @$arr; $i++) {\n        $temp = $arr->[$i];\n        for(my $j = 0; $j < @$arr;\
    \ $j++) {\n            if($arr->[$j] == $temp) {\n                $arr->[$j] =\
    \ $arr->[$i];\n                $arr->[$i] = $temp;\n            }\n        }\n\
    \    }\n    \n    # sort by decimal value\n    for(my $i = 0; $i < @$arr; $i++)\
    \ {\n        $temp = $arr->[$i];\n        for(my $j = 0; $j < @$arr; $j++) {\n\
    \            if($arr->[$j] == $temp) {\n                $arr->[$j] = $arr->[$i];\n\
    \                $arr->[$i] = $temp;\n            }\n        }\n    }\n    \n\
    \    # sort by decimal value\n    for(my $i = 0; $i < @$arr; $i++) {\n       \
    \ $temp = $arr->[$i];\n        for(my $j = 0; $j < @$arr; $j++) {\n          \
    \  if($arr->[$j] == $temp) {\n                $arr->[$j] = $arr->[$i];\n     \
    \           $arr->[$i] = $temp;\n            }\n        }\n    }\n    \n    #\
    \ sort by decimal value\n    for(my $i = 0; $i < @$arr; $i++) {\n        $temp\
    \ = $arr->[$i];\n        for(my $j = 0; $j < @$arr; $j++) {\n            if($arr->[$j]\
    \ == $temp) {\n                $arr->[$j] = $arr->[$i];\n                $arr->[$i]\
    \ = $temp;\n            }\n        }\n    }\n    \n    # sort by decimal value\n\
    \    for(my $i = 0; $i < @$arr; $i++) {\n        $temp = $arr->[$i];\n       \
    \ for(my $j = 0; $j < @$arr; $j++) {\n            if($arr->[$j] == $temp) {\n\
    \                $arr->[$j] = $arr->[$i];\n                $arr->[$i] = $temp;\n\
    \            }\n        }\n    }\n    \n    # sort by decimal value\n    for(my\
    \ $i = 0; $i < @$arr; $i++) {\n        $temp = $arr->[$i];\n        for(my $j\
    \ = 0; $j < @$arr; $j++) {\n            if($arr->[$j] == $temp) {\n          \
    \      $arr->[$j] = $arr->[$i];\n                $arr->[$i] = $temp;\n       \
    \     }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpdr6cz9tt.pl line 112,
    at end of line

    syntax error at /tmp/tmpdr6cz9tt.pl line 112, at EOF

    Execution of /tmp/tmpdr6cz9tt.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my($num_ones);\n    my $num_zeros = 0;\n    my $decimal_value;\n    my $decimal_value_temp;\n\
    \    my $decimal_value_temp2;\n    my $decimal_value_temp3;\n    my $decimal_value_temp4;\n\
    \    my $decimal_value_temp5;\n    my $decimal_value_temp6;\n    my $decimal_value_temp7;\n\
    \    my $decimal_value_temp8;\n    my $decimal_value_temp9;\n    my $decimal_value_temp10;\n\
    \    my $decimal_value_temp11;\n    my $decimal_value_temp12;\n    my $decimal_value_temp13;\n\
    \    my $decimal_value_temp14;\n    my $decimal_value_temp15;\n    my $decimal_value_temp16;\n\
    \    my $decimal_value_temp17;\n    my $decimal_value_temp18;\n    my $decimal_value_temp19;\n\
    \    my $decimal_value_temp20;\n    my $decimal_value_temp21;\n    my $decimal_value_temp22;\n\
    \    my $decimal_value_temp23;\n    my $decimal_value_temp24;\n    my $decimal_value_temp25;\n\
    \    my $decimal_value_temp26;\n    my $decimal_value_temp27;\n    my $decimal_value_temp28;\n\
    \    my $decimal_value_temp29;\n    my $decimal_value_temp30;\n    my $decimal_value_temp31;\n\
    \    my $decimal_value_temp32;\n    my $decimal_value_temp33;\n    my $decimal_value_temp34;\n\
    \    my $decimal_value_temp35;\n    my $decimal_value_temp36;\n    my $decimal_value_temp37;\n\
    \    my $decimal_value_temp38;\n    my $decimal_value_temp39;\n    my $decimal_value_temp40;\n\
    \    my $decimal_value_temp41;\n    my $decimal_value_temp42;\n    my $decimal_value_temp43;\n\
    \    my $decimal_value_temp44;\n    my $decimal_value_temp45;\n    my $decimal_value_temp46;\n\
    \    my $decimal_value_temp47;\n    my $decimal_value_temp48;\n    my $decimal_value_temp49;\n\
    \    my $decimal_value_temp50;\n    my $decimal_value_temp51;\n    my $decimal_value_temp52;\n\
    \    my $decimal_value_temp53;\n    my $decimal_value_temp54;\n    my $decimal_value_temp55;\n\
    \    my $decimal_value_temp56;\n    my $decimal_value_temp57;\n    my $decimal_value_temp58;\n\
    \    my $decimal_value_temp59;\n    my $decimal_value_temp60;\n    my $decimal_value_temp61;\n\
    \    my $decimal_value_temp62;\n    my $decimal_value_temp63;\n    my $decimal_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpv6z9sldm.pl line 75, at end
    of line

    syntax error at /tmp/tmpv6z9sldm.pl line 75, near "$decimal_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpv6z9sldm.pl line 114, at end
    of line

    syntax error at /tmp/tmpv6z9sldm.pl line 114, at EOF

    Execution of /tmp/tmpv6z9sldm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    my $ones\
    \ = 0;\n    my $dec = 0;\n    my $max = 0;\n    my $min = 0;\n    my $temp2 =\
    \ 0;\n    my $temp3 = 0;\n    my $temp4 = 0;\n    my $temp5 = 0;\n    my $temp6\
    \ = 0;\n    my $temp7 = 0;\n    my $temp8 = 0;\n    my $temp9 = 0;\n    my $temp10\
    \ = 0;\n    my $temp11 = 0;\n    my $temp12 = 0;\n    my $temp13 = 0;\n    my\
    \ $temp14 = 0;\n    my $temp15 = 0;\n    my $temp16 = 0;\n    my $temp17 = 0;\n\
    \    my $temp18 = 0;\n    my $temp19 = 0;\n    my $temp20 = 0;\n    my $temp21\
    \ = 0;\n    my $temp22 = 0;\n    my $temp23 = 0;\n    my $temp24 = 0;\n    my\
    \ $temp25 = 0;\n    my $temp26 = 0;\n    my $temp27 = 0;\n    my $temp28 = 0;\n\
    \    my $temp29 = 0;\n    my $temp30 = 0;\n    my $temp31 = 0;\n    my $temp32\
    \ = 0;\n    my $temp33 = 0;\n    my $temp34 = 0;\n    my $temp35 = 0;\n    my\
    \ $temp36 = 0;\n    my $temp37 = 0;\n    my $temp38 = 0;\n    my $temp39 = 0;\n\
    \    my $temp40 = 0;\n    my $temp41 = 0;\n    my $temp42 = 0;\n    my $temp43\
    \ = 0;\n    my $temp44 = 0;\n    my $temp45 = 0;\n    my $temp46 = 0;\n    my\
    \ $temp47 = 0;\n    my $temp48 = 0;\n    my $temp49 = 0;\n    my $temp50 = 0;\n\
    \    my $temp51 = 0;\n    my $temp52 = 0;\n    my $temp53 = 0;\n    my $temp54\
    \ = 0;\n    my $temp55 = 0;\n    my $temp56 = 0;\n    my $temp57 = 0;\n    my\
    \ $temp58 = 0;\n    my $temp59 = 0;\n    my $temp60 = 0;\n    my $temp61 = 0;\n\
    \    my $temp62 = 0;\n    my $temp63 = 0;\n    my $temp64 = 0;\n    my $temp65\
    \ = 0;\n    my $temp66 = 0;\n    my $temp67 = 0;\n    my $temp68 = 0;\n    my\
    \ $temp69 = 0;\n    my $temp70 = 0;\n    my $temp71 = 0;\n    my $temp72 = 0;\n\
    \    my $temp73 = 0;\n    my $temp74 = 0;\n    my $temp75 = 0;\n    my $temp76\
    \ = 0;\n    my $temp77 = 0;\n    my $temp78 = 0;\n    my $temp79 = 0;\n    my\
    \ $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmphaidjlle.pl line 95,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmphaidjlle.pl line 95, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmphaidjlle.pl line 134, at end of line\nsyntax\
    \ error at /tmp/tmphaidjlle.pl line 134, at EOF\nExecution of /tmp/tmphaidjlle.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n  \
    \  my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my\
    \ $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my\
    \ $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n  \
    \  my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n\
    \    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n\
    \    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n\
    \    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n\
    \    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n\
    \    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n\
    \    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n\
    \    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n\
    \    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n\
    \    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n\
    \    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n\
    \    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n\
    \    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n\
    \    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n    my $tmp84;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp9hom6pvz.pl line 135,
    at end of line

    syntax error at /tmp/tmp9hom6pvz.pl line 135, at EOF

    Execution of /tmp/tmp9hom6pvz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $temp = 0;\n    my $temp2 = 0;\n    my $temp3 = 0;\n    my $temp4\
    \ = 0;\n    my $temp5 = 0;\n    my $temp6 = 0;\n    my $temp7 = 0;\n    my $temp8\
    \ = 0;\n    my $temp9 = 0;\n    my $temp10 = 0;\n    my $temp11 = 0;\n    my $temp12\
    \ = 0;\n    my $temp13 = 0;\n    my $temp14 = 0;\n    my $temp15 = 0;\n    my\
    \ $temp16 = 0;\n    my $temp17 = 0;\n    my $temp18 = 0;\n    my $temp19 = 0;\n\
    \    my $temp20 = 0;\n    my $temp21 = 0;\n    my $temp22 = 0;\n    my $temp23\
    \ = 0;\n    my $temp24 = 0;\n    my $temp25 = 0;\n    my $temp26 = 0;\n    my\
    \ $temp27 = 0;\n    my $temp28 = 0;\n    my $temp29 = 0;\n    my $temp30 = 0;\n\
    \    my $temp31 = 0;\n    my $temp32 = 0;\n    my $temp33 = 0;\n    my $temp34\
    \ = 0;\n    my $temp35 = 0;\n    my $temp36 = 0;\n    my $temp37 = 0;\n    my\
    \ $temp38 = 0;\n    my $temp39 = 0;\n    my $temp40 = 0;\n    my $temp41 = 0;\n\
    \    my $temp42 = 0;\n    my $temp43 = 0;\n    my $temp44 = 0;\n    my $temp45\
    \ = 0;\n    my $temp46 = 0;\n    my $temp47 = 0;\n    my $temp48 = 0;\n    my\
    \ $temp49 = 0;\n    my $temp50 = 0;\n    my $temp51 = 0;\n    my $temp52 = 0;\n\
    \    my $temp53 = 0;\n    my $temp54 = 0;\n    my $temp55 = 0;\n    my $temp56\
    \ = 0;\n    my $temp57 = 0;\n    my $temp58 = 0;\n    my $temp59 = 0;\n    my\
    \ $temp60 = 0;\n    my $temp61 = 0;\n    my $temp62 = 0;\n    my $temp63 = 0;\n\
    \    my $temp64 = 0;\n    my $temp65 = 0;\n    my $temp66 = 0;\n    my $temp67\
    \ = 0;\n    my $temp68 = 0;\n    my $temp69 = 0;\n    my $temp70 = 0;\n    my\
    \ $temp71 = 0;\n    my $temp72 = 0;\n    my $temp73 = 0;\n    my $temp74 = 0;\n\
    \    my $temp75 = 0;\n    my $temp76 = 0;\n    my $temp77 = 0;\n    my $temp78\
    \ = 0;\n    my $temp79 = 0;\n    my $temp80 = 0;\n    my $temp81 = 0;\n    my\
    \ $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp83q9bmsn.pl line 95,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp83q9bmsn.pl line 95, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp83q9bmsn.pl line 134, at end of line\nsyntax\
    \ error at /tmp/tmp83q9bmsn.pl line 134, at EOF\nExecution of /tmp/tmp83q9bmsn.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    foreach my $num (@$arr) {\n        if ($num\
    \ == 1) {\n            $ones++;\n        } else {\n            $dec += $num;\n\
    \        }\n    }\n    foreach my $num (@$arr) {\n        if ($num == 1) {\n \
    \           $ones--;\n        }\n        if ($ones == 0) {\n            push(@sorted_arr,\
    \ $num);\n        }\n    }\n    foreach my $num (@$arr) {\n        if ($num ==\
    \ 1) {\n            $ones++;\n        }\n        if ($ones == 0) {\n         \
    \   push(@sorted_arr, $num);\n        }\n    }\n    foreach my $num (@$arr) {\n\
    \        if ($num == 1) {\n            $ones--;\n        }\n        if ($ones\
    \ == 0) {\n            push(@sorted_arr, $num);\n        }\n    }\n    return\
    \ @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp6o_019i1.pl line 134,
    at end of line

    syntax error at /tmp/tmp6o_019i1.pl line 134, at EOF

    Execution of /tmp/tmp6o_019i1.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n  \
    \  my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n   \
    \ my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n   \
    \ my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n\
    \    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n\
    \    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n\
    \    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n\
    \    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n\
    \    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n\
    \    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n\
    \    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n\
    \    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n\
    \    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n\
    \    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n\
    \    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n\
    \    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n\
    \    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n\
    \    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n\
    \    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n\
    \    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n\
    \    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n\
    \    my $tmp81 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpcca7_aul.pl line 94,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpcca7_aul.pl line 94, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpcca7_aul.pl line 133, at end of line\nsyntax\
    \ error at /tmp/tmpcca7_aul.pl line 133, at EOF\nExecution of /tmp/tmpcca7_aul.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_value = 0;\n    foreach my $num (@$arr) {\n\
    \        if ($num eq 1) {\n            $num_ones++;\n        }\n        else {\n\
    \            $decimal_value += $num;\n        }\n    }\n    if ($num_ones > 0)\
    \ {\n        foreach my $num (@$arr) {\n            if ($num eq 1) {\n       \
    \         push(@sorted_arr, $decimal_value);\n            }\n        }\n    }\n\
    \    else {\n        foreach my $num (@$arr) {\n            if ($num eq 1) {\n\
    \                push(@sorted_arr, $num_ones);\n            }\n        }\n   \
    \ }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n    my $ones\
    \ = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len = @$arr;\n\
    \    my $max = 0;\n    my $min = 0;\n    my $maxdec = 0;\n    my $mindec = 0;\n\
    \    my $maxlen = 0;\n    my $minlen = 0;\n    my $maxlendec = 0;\n    my $minlendec\
    \ = 0;\n    my $maxlenlen = 0;\n    my $minlenlen = 0;\n    my $maxlenlendec =\
    \ 0;\n    my $minlenlendec = 0;\n    my $maxlenlenlen = 0;\n    my $minlenlenlen\
    \ = 0;\n    my $maxlenlenlendec = 0;\n    my $minlenlenlendec = 0;\n    my $maxlenlenlenlen\
    \ = 0;\n    my $minlenlenlendec = 0;\n    my $maxlenlenlenlen = 0;\n    my $minlenlenlendec\
    \ = 0;\n    my $maxlenlenlenlen = 0;\n    my $minlenlenlendec = 0;\n    my $maxlenlenlenlen\
    \ = 0;\n    my $minlenlenlendec = 0;\n    my $maxlenlenlenlen = 0;\n    my $minlenlenlendec\
    \ = 0;\n    my $maxlenlenlenlen = 0;\n    my $minlenlenlendec = 0;\n    my $maxlenlenlenlen\
    \ = 0;\n    my $minlenlenlendec = 0;\n    my $maxlenlenlenlen = 0;\n    my $minlenlenlendec\
    \ = 0;\n    my $maxlenlenlenlen = 0;\n    my $minlenlenlendec = 0;\n    my $maxlenlenlenlen\
    \ = 0;\n    my $minlenlenlendec = 0;\n    my $maxlenlenlenlen = 0;\n    my $minlenlenlendec\
    \ = 0;\n    my $maxlenlenlenlen = 0;\n    my $minlenlenlendec = 0;\n    my $maxlenlenlenlen\
    \ = 0;\n    my $minlenlenlendec = 0;\n    my $maxlenlenlenlen = 0;\n    my $minlenlenlendec\
    \ = 0;\n    my $maxlenlenlenlen = 0;\n    my $minlenlenlendec = 0;\n    my $maxlenlenlenlen\
    \ = 0;\n    my $minlenlenlendec = 0;\n    my $maxlenlenlenlen = 0;\n    my $minlenlenlendec\
    \ = 0;\n    my $maxlenlenlenlen = 0;\n    my $minlenlenlendec = 0;\n    my $maxlenlenlenlen\
    \ = 0;\n    my $minlenlenlendec = 0;\n    my $maxlenlenlenlen = 0;\n    my $minlenlenlendec\
    \ = 0;\n    my $maxlenlenlenlen\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpiswp__ep.pl line 70, at end
    of line

    syntax error at /tmp/tmpiswp__ep.pl line 70, near "$maxlenlenlenlen

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpiswp__ep.pl line 109, at end
    of line

    syntax error at /tmp/tmpiswp__ep.pl line 109, at EOF

    Execution of /tmp/tmpiswp__ep.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my($num_ones);\n    my($num_zeros);\n    my($num_zeros_dec);\n    my($num_ones_dec);\n\
    \    my($max_num_zeros_dec);\n    my($max_num_ones_dec);\n    my($max_num_zeros);\n\
    \    my($max_num_ones);\n    my($max_num_zeros_dec);\n    my($max_num_ones_dec);\n\
    \    my($max_num_zeros_dec);\n    my($max_num_ones_dec);\n    my($max_num_zeros);\n\
    \    my($max_num_ones);\n    my($max_num_zeros_dec);\n    my($max_num_ones_dec);\n\
    \    my($max_num_zeros_dec);\n    my($max_num_ones_dec);\n    my($max_num_zeros);\n\
    \    my($max_num_ones);\n    my($max_num_zeros_dec);\n    my($max_num_ones_dec);\n\
    \    my($max_num_zeros_dec);\n    my($max_num_ones_dec);\n    my($max_num_zeros);\n\
    \    my($max_num_ones);\n    my($max_num_zeros_dec);\n    my($max_num_ones_dec);\n\
    \    my($max_num_zeros_dec);\n    my($max_num_ones_dec);\n    my($max_num_zeros);\n\
    \    my($max_num_ones);\n    my($max_num_zeros_dec);\n    my($max_num_ones_dec);\n\
    \    my($max_num_zeros_dec);\n    my($max_num_ones_dec);\n    my($max_num_zeros);\n\
    \    my($max_num_ones);\n    my($max_num_zeros_dec);\n    my($max_num_ones_dec);\n\
    \    my($max_num_zeros_dec);\n    my($max_num_ones_dec);\n    my($max_num_zeros);\n\
    \    my($max_num_ones);\n    my($max_num_zeros_dec);\n    my($max_num_ones_dec);\n\
    \    my($max_num_zeros_dec);\n    my($max_num_ones_dec);\n    my($max_num_zeros);\n\
    \    my($max_num_ones);\n    my($max_num_zeros_dec);\n    my($max_num_ones_dec);\n\
    \    my($max_num_zeros_dec);\n    my($max_num_ones_dec);\n    my($max_num_\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp45smfjv7.pl line 63, at end
    of line

    syntax error at /tmp/tmp45smfjv7.pl line 63, near "$max_num_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp45smfjv7.pl line 102, at end
    of line

    syntax error at /tmp/tmp45smfjv7.pl line 102, at EOF

    Execution of /tmp/tmp45smfjv7.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my($i, $j, $k, $temp);\n\
    \    my($ones_cnt);\n    my($dec);\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp3n592r8e.pl line 49, at
    end of line

    syntax error at /tmp/tmp3n592r8e.pl line 49, at EOF

    Execution of /tmp/tmp3n592r8e.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my @sorted = ();\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4\
    \ = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8\
    \ = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12\
    \ = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16\
    \ = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20\
    \ = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24\
    \ = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28\
    \ = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32\
    \ = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36\
    \ = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40\
    \ = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44\
    \ = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48\
    \ = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52\
    \ = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56\
    \ = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60\
    \ = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64\
    \ = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68\
    \ = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72\
    \ = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76\
    \ = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80\
    \ = 0;\n    my $tmp81\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp2km9gco4.pl line 94, at end
    of line

    syntax error at /tmp/tmp2km9gco4.pl line 94, near "$tmp81

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp2km9gco4.pl line 133, at end
    of line

    syntax error at /tmp/tmp2km9gco4.pl line 133, at EOF

    Execution of /tmp/tmp2km9gco4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted_arr;\n    my\
    \ $num_ones = 0;\n    my $decimal_value = 0;\n    foreach my $num (@$arr) {\n\
    \        $num_ones += $num;\n        $decimal_value += $num * log(2);\n    }\n\
    \    foreach my $num (@$arr) {\n        $num_ones = $num_ones - $num;\n      \
    \  $decimal_value = $decimal_value - $num * log(2);\n        if ($num_ones ==\
    \ 0) {\n            push(@sorted_arr, $decimal_value);\n        }\n        elsif\
    \ ($num_ones > 0) {\n            push(@sorted_arr, $decimal_value);\n        }\n\
    \    }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @res;\n    my $max\
    \ = 0;\n    my $max_count = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j\
    \ = 0;\n    my $k = 0;\n    my $count = 0;\n    my $dec = 0;\n    my $ones = 0;\n\
    \    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n \
    \   my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n \
    \   my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n\
    \    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n\
    \    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n\
    \    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n\
    \    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n\
    \    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n\
    \    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n\
    \    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n\
    \    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n\
    \    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n\
    \    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n\
    \    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n\
    \    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n\
    \    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n\
    \    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n\
    \    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n\
    \    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n\
    \    my $tmp77 = 0;\n    my $tmp78 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpf0ad4t8y.pl line 135,
    at end of line

    syntax error at /tmp/tmpf0ad4t8y.pl line 135, at EOF

    Execution of /tmp/tmpf0ad4t8y.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n  \
    \  my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my\
    \ $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my\
    \ $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n  \
    \  my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n\
    \    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n\
    \    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n\
    \    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n\
    \    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n\
    \    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n\
    \    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n\
    \    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n\
    \    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n\
    \    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n\
    \    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n\
    \    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n\
    \    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n\
    \    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n    my $tmp84;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp9hom6pvz.pl line 135,
    at end of line

    syntax error at /tmp/tmp9hom6pvz.pl line 135, at EOF

    Execution of /tmp/tmp9hom6pvz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $num_ones = 0;\n    my $num_dec = 0;\n    my $i = 0;\n    my $j = 0;\n  \
    \  my $k = 0;\n    my $temp = 0;\n    my $temp2 = 0;\n    my $temp3 = 0;\n   \
    \ my $temp4 = 0;\n    my $temp5 = 0;\n    my $temp6 = 0;\n    my $temp7 = 0;\n\
    \    my $temp8 = 0;\n    my $temp9 = 0;\n    my $temp10 = 0;\n    my $temp11 =\
    \ 0;\n    my $temp12 = 0;\n    my $temp13 = 0;\n    my $temp14 = 0;\n    my $temp15\
    \ = 0;\n    my $temp16 = 0;\n    my $temp17 = 0;\n    my $temp18 = 0;\n    my\
    \ $temp19 = 0;\n    my $temp20 = 0;\n    my $temp21 = 0;\n    my $temp22 = 0;\n\
    \    my $temp23 = 0;\n    my $temp24 = 0;\n    my $temp25 = 0;\n    my $temp26\
    \ = 0;\n    my $temp27 = 0;\n    my $temp28 = 0;\n    my $temp29 = 0;\n    my\
    \ $temp30 = 0;\n    my $temp31 = 0;\n    my $temp32 = 0;\n    my $temp33 = 0;\n\
    \    my $temp34 = 0;\n    my $temp35 = 0;\n    my $temp36 = 0;\n    my $temp37\
    \ = 0;\n    my $temp38 = 0;\n    my $temp39 = 0;\n    my $temp40 = 0;\n    my\
    \ $temp41 = 0;\n    my $temp42 = 0;\n    my $temp43 = 0;\n    my $temp44 = 0;\n\
    \    my $temp45 = 0;\n    my $temp46 = 0;\n    my $temp47 = 0;\n    my $temp48\
    \ = 0;\n    my $temp49 = 0;\n    my $temp50 = 0;\n    my $temp51 = 0;\n    my\
    \ $temp52 = 0;\n    my $temp53 = 0;\n    my $temp54 = 0;\n    my $temp55 = 0;\n\
    \    my $temp56 = 0;\n    my $temp57 = 0;\n    my $temp58 = 0;\n    my $temp59\
    \ = 0;\n    my $temp60 = 0;\n    my $temp61 = 0;\n    my $temp62 = 0;\n    my\
    \ $temp63 = 0;\n    my $temp64 = 0;\n    my $temp65 = 0;\n    my $temp66 = 0;\n\
    \    my $temp67 = 0;\n    my $temp68 = 0;\n    my $temp69 = 0;\n    my $temp70\
    \ = 0;\n    my $temp71 = 0;\n    my $temp72 = 0;\n    my $temp73 = 0;\n    my\
    \ $temp74 = 0;\n    my $temp75 = 0;\n    my $temp76 = 0;\n    my $temp77 = 0;\n\
    \    my $temp78 = 0;\n    my $temp79 = 0;\n    my $temp80 = 0;\n    my $temp81\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp9tehxlsl.pl line 133,
    at end of line

    syntax error at /tmp/tmp9tehxlsl.pl line 133, at EOF

    Execution of /tmp/tmp9tehxlsl.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = scalar @$arr;\n\
    \    my $max_ones = $len * 8 - 1;\n    my $max_dec = 0;\n    my $max_dec_index\
    \ = 0;\n    my $max_dec_val = 0;\n    my $i;\n    my $j;\n    my $k;\n    my $temp;\n\
    \    my $count = 0;\n    my $ones = 0;\n    my $dec = 0;\n    my $dec_index =\
    \ 0;\n    my $dec_val = 0;\n    my $dec_count = 0;\n    my $max_dec_val_index\
    \ = 0;\n    my $max_dec_val_dec = 0;\n    my $max_dec_val_dec_index = 0;\n   \
    \ my $max_dec_val_dec_val = 0;\n    my $max_dec_val_dec_count = 0;\n    my $max_dec_val_dec_val_index\
    \ = 0;\n    my $max_dec_val_dec_val_dec = 0;\n    my $max_dec_val_dec_val_dec_index\
    \ = 0;\n    my $max_dec_val_dec_val_dec_val = 0;\n    my $max_dec_val_dec_val_dec_count\
    \ = 0;\n    my $max_dec_val_dec_val_dec_val_index = 0;\n    my $max_dec_val_dec_val_dec_val_dec\
    \ = 0;\n    my $max_dec_val_dec_val_dec_val_dec_index = 0;\n    my $max_dec_val_dec_val_dec_val_dec_val\
    \ = 0;\n    my $max_dec_val_dec_val_dec_val_dec_count = 0;\n    my $max_dec_val_dec_val_dec_val_dec_val_index\
    \ = 0;\n    my $max_dec_val_dec_val_dec_val_dec_val_dec = 0;\n    my $max_dec_val_dec_val_dec_val_dec_val_dec_index\
    \ = 0;\n    my $max_dec_val_dec_val_dec_val_dec_val_dec_val = 0;\n    my $max_dec_val_dec_val_dec_val_dec_val_dec_count\
    \ = 0;\n    my $max_dec_val_dec_val_dec_val_dec_val_dec_val_index = 0;\n    my\
    \ $max_dec_val_dec_val_dec_val_dec_val_dec_val_dec = 0;\n    my $max_dec_val_dec_val_dec_val_dec_val_dec_val_dec_index\
    \ = 0;\n    my $max_dec_val_dec_val_dec_val_dec_val_dec_val_dec_val = 0;\n   \
    \ my $max_dec_val_dec_val_dec_val_dec_val_dec_val_dec_count = 0;\n    my $max_dec_val_dec_val_dec_val_dec_val_dec_val_dec_val_index\
    \ = 0;\n    my $max_dec_val_dec_val_dec_val_dec_val_dec_val_dec_\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpdzm_6lkt.pl line 49, at end
    of line

    syntax error at /tmp/tmpdzm_6lkt.pl line 49, near "$max_dec_val_dec_val_dec_val_dec_val_dec_val_dec_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpdzm_6lkt.pl line 88, at end of
    line

    syntax error at /tmp/tmpdzm_6lkt.pl line 88, at EOF

    Execution of /tmp/tmpdzm_6lkt.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $count = 0;\n    my $max = 0;\n    my $min\
    \ = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 = 0;\n    my $min3\
    \ = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 = 0;\n    my $min5\
    \ = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 = 0;\n    my $min7\
    \ = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 = 0;\n    my $min9\
    \ = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11 = 0;\n    my $min11\
    \ = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13 = 0;\n    my $min13\
    \ = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15 = 0;\n    my $min15\
    \ = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17 = 0;\n    my $min17\
    \ = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19 = 0;\n    my $min19\
    \ = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21 = 0;\n    my $min21\
    \ = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23 = 0;\n    my $min23\
    \ = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25 = 0;\n    my $min25\
    \ = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27 = 0;\n    my $min27\
    \ = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29 = 0;\n    my $min29\
    \ = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31 = 0;\n    my $min31\
    \ = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33 = 0;\n    my $min33\
    \ = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35 = 0;\n    my $min35\
    \ = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37 = 0;\n    my $min37\
    \ = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39 = 0;\n    my $min39\
    \ = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41 = 0;\n    my $min41\
    \ = 0;\n    my $max42 = 0;\n    my $min42 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp6o_019i1.pl line 134,
    at end of line

    syntax error at /tmp/tmp6o_019i1.pl line 134, at EOF

    Execution of /tmp/tmp6o_019i1.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my($ones_cnt);\n    my($dec);\n    my $i = 0;\n    my $j = 0;\n    my $cnt =\
    \ 0;\n    foreach my $num (@$arr) {\n        $ones_cnt = 0;\n        $dec = 0;\n\
    \        while($num > 0) {\n            $dec = $dec + $num % 10;\n           \
    \ $num = intdiv($num, 10);\n            $ones_cnt = $ones_cnt + 1;\n        }\n\
    \        $dec = $dec + ($ones_cnt - 1);\n        $sorted_arr[$i] = $dec;\n   \
    \     $i++;\n    }\n    foreach my $num (@$arr) {\n        $cnt = 0;\n       \
    \ while($num > 0) {\n            $cnt = $cnt + $num % 10;\n            $num =\
    \ intdiv($num, 10);\n        }\n        $cnt = $cnt + 1;\n        $sorted_arr[$j]\
    \ = $cnt;\n        $j++;\n    }\n    foreach my $i (0..$#sorted_arr) {\n     \
    \   if($sorted_arr[$i] < $sorted_arr[$i+1]) {\n            my $tmp = $sorted_arr[$i];\n\
    \            $sorted_arr[$i] = $sorted_arr[$i+1];\n            $sorted_arr[$i+1]\
    \ = $tmp;\n        }\n    }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::intdiv called at /tmp/tmpaaqzxlbl.pl line 18.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted_arr;\n    my\
    \ $num_ones = 0;\n    my $decimal_value = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $num_ones_cnt = 0;\n    my $decimal_value_cnt = 0;\n \
    \   my $num_ones_cnt_tmp = 0;\n    my $decimal_value_cnt_tmp = 0;\n    my $num_ones_cnt_tmp2\
    \ = 0;\n    my $decimal_value_cnt_tmp2 = 0;\n    my $num_ones_cnt_tmp3 = 0;\n\
    \    my $decimal_value_cnt_tmp3 = 0;\n    my $num_ones_cnt_tmp4 = 0;\n    my $decimal_value_cnt_tmp4\
    \ = 0;\n    my $num_ones_cnt_tmp5 = 0;\n    my $decimal_value_cnt_tmp5 = 0;\n\
    \    my $num_ones_cnt_tmp6 = 0;\n    my $decimal_value_cnt_tmp6 = 0;\n    my $num_ones_cnt_tmp7\
    \ = 0;\n    my $decimal_value_cnt_tmp7 = 0;\n    my $num_ones_cnt_tmp8 = 0;\n\
    \    my $decimal_value_cnt_tmp8 = 0;\n    my $num_ones_cnt_tmp9 = 0;\n    my $decimal_value_cnt_tmp9\
    \ = 0;\n    my $num_ones_cnt_tmp10 = 0;\n    my $decimal_value_cnt_tmp10 = 0;\n\
    \    my $num_ones_cnt_tmp11 = 0;\n    my $decimal_value_cnt_tmp11 = 0;\n    my\
    \ $num_ones_cnt_tmp12 = 0;\n    my $decimal_value_cnt_tmp12 = 0;\n    my $num_ones_cnt_tmp13\
    \ = 0;\n    my $decimal_value_cnt_tmp13 = 0;\n    my $num_ones_cnt_tmp14 = 0;\n\
    \    my $decimal_value_cnt_tmp14 = 0;\n    my $num_ones_cnt_tmp15 = 0;\n    my\
    \ $decimal_value_cnt_tmp15 = 0;\n    my $num_ones_cnt_tmp16 = 0;\n    my $decimal_value_cnt_tmp16\
    \ = 0;\n    my $num_ones_cnt_tmp17 = 0;\n    my $decimal_value_cnt_tmp17 = 0;\n\
    \    my $num_ones_cnt_tmp18 = 0;\n    my $decimal_value_cnt_tmp18 = 0;\n    my\
    \ $num_ones_cnt_tmp19 = 0;\n    my $decimal_value_cnt_tmp19 = 0;\n    my $num_ones_cnt_tmp20\
    \ = 0;\n    my $decimal_value_cnt_tmp20 = 0;\n    my $num_ones_cnt_tmp21 = 0;\n\
    \    my $decimal_value_cnt_tmp21 = 0;\n    my $num_ones_cnt_tmp22 = 0;\n    my\
    \ $decimal_value_cnt_tmp22 = 0;\n    my $num_ones_cnt_tmp23 = 0;\n    my $decimal_value_cnt_tmp23\
    \ = 0;\n    my $num_ones_cnt_tmp24 = 0;\n    my $decimal_value\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp0268vepn.pl line 63, at end
    of line

    syntax error at /tmp/tmp0268vepn.pl line 63, near "$decimal_value

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp0268vepn.pl line 102, at end
    of line

    syntax error at /tmp/tmp0268vepn.pl line 102, at EOF

    Execution of /tmp/tmp0268vepn.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $tmp = 0;\n    my @tmp;\n    my @tmp2;\n\
    \    my @tmp3;\n    my @tmp4;\n    my @tmp5;\n    my @tmp6;\n    my @tmp7;\n \
    \   my @tmp8;\n    my @tmp9;\n    my @tmp10;\n    my @tmp11;\n    my @tmp12;\n\
    \    my @tmp13;\n    my @tmp14;\n    my @tmp15;\n    my @tmp16;\n    my @tmp17;\n\
    \    my @tmp18;\n    my @tmp19;\n    my @tmp20;\n    my @tmp21;\n    my @tmp22;\n\
    \    my @tmp23;\n    my @tmp24;\n    my @tmp25;\n    my @tmp26;\n    my @tmp27;\n\
    \    my @tmp28;\n    my @tmp29;\n    my @tmp30;\n    my @tmp31;\n    my @tmp32;\n\
    \    my @tmp33;\n    my @tmp34;\n    my @tmp35;\n    my @tmp36;\n    my @tmp37;\n\
    \    my @tmp38;\n    my @tmp39;\n    my @tmp40;\n    my @tmp41;\n    my @tmp42;\n\
    \    my @tmp43;\n    my @tmp44;\n    my @tmp45;\n    my @tmp46;\n    my @tmp47;\n\
    \    my @tmp48;\n    my @tmp49;\n    my @tmp50;\n    my @tmp51;\n    my @tmp52;\n\
    \    my @tmp53;\n    my @tmp54;\n    my @tmp55;\n    my @tmp56;\n    my @tmp57;\n\
    \    my @tmp58;\n    my @tmp59;\n    my @tmp60;\n    my @tmp61;\n    my @tmp62;\n\
    \    my @tmp63;\n    my @tmp64;\n    my @tmp65;\n    my @tmp66;\n    my @tmp67;\n\
    \    my @tmp68;\n    my @tmp69;\n    my @tmp70;\n    my @tmp71;\n    my @tmp72;\n\
    \    my @tmp73;\n    my @tmp74;\n    my @tmp75;\n    my @tmp76;\n    my @tmp77;\n\
    \    my @tmp78;\n    my @tmp79;\n    my @tmp80;\n    my @tmp81;\n    my @tmp82;\n\
    \    my @tmp83;\n    my @tmp84;\n    my @tmp85;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpermjgpob.pl line 136,
    at end of line

    syntax error at /tmp/tmpermjgpob.pl line 136, at EOF

    Execution of /tmp/tmpermjgpob.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_value = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $num_ones_cnt = 0;\n    my $decimal_value_cnt = 0;\n \
    \   my $num_ones_sum = 0;\n    my $decimal_value_sum = 0;\n    my $num_ones_cnt2\
    \ = 0;\n    my $decimal_value_cnt2 = 0;\n    my $num_ones_sum2 = 0;\n    my $decimal_value_sum2\
    \ = 0;\n    my $num_ones_cnt3 = 0;\n    my $decimal_value_cnt3 = 0;\n    my $num_ones_sum3\
    \ = 0;\n    my $decimal_value_sum3 = 0;\n    my $num_ones_cnt4 = 0;\n    my $decimal_value_cnt4\
    \ = 0;\n    my $num_ones_sum4 = 0;\n    my $decimal_value_sum4 = 0;\n    my $num_ones_cnt5\
    \ = 0;\n    my $decimal_value_cnt5 = 0;\n    my $num_ones_sum5 = 0;\n    my $decimal_value_sum5\
    \ = 0;\n    my $num_ones_cnt6 = 0;\n    my $decimal_value_cnt6 = 0;\n    my $num_ones_sum6\
    \ = 0;\n    my $decimal_value_sum6 = 0;\n    my $num_ones_cnt7 = 0;\n    my $decimal_value_cnt7\
    \ = 0;\n    my $num_ones_sum7 = 0;\n    my $decimal_value_sum7 = 0;\n    my $num_ones_cnt8\
    \ = 0;\n    my $decimal_value_cnt8 = 0;\n    my $num_ones_sum8 = 0;\n    my $decimal_value_sum8\
    \ = 0;\n    my $num_ones_cnt9 = 0;\n    my $decimal_value_cnt9 = 0;\n    my $num_ones_sum9\
    \ = 0;\n    my $decimal_value_sum9 = 0;\n    my $num_ones_cnt10 = 0;\n    my $decimal_value_cnt10\
    \ = 0;\n    my $num_ones_sum10 = 0;\n    my $decimal_value_sum10 = 0;\n    my\
    \ $num_ones_cnt11 = 0;\n    my $decimal_value_cnt11 = 0;\n    my $num_ones_sum11\
    \ = 0;\n    my $decimal_value_sum11 = 0;\n    my $num_ones_cnt12 = 0;\n    my\
    \ $decimal_value_cnt12 = 0;\n    my $num_ones_sum12 = 0;\n    my $decimal_value_sum12\
    \ = 0;\n    my $num_ones_cnt13 = 0;\n    my $decimal_value_cnt13 = 0;\n    my\
    \ $num_ones_sum13 = 0;\n    my $decimal_value_sum13 = 0;\n    my $num_ones_cnt14\
    \ = 0;\n    my $decimal_value_cnt14 = 0;\n    my $num_ones_sum14 = 0;\n    my\
    \ $decimal_value_sum14 = 0;\n    my $num_ones_cnt15 = 0;\n\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpq7ql95lq.pl line 110,
    at end of line

    syntax error at /tmp/tmpq7ql95lq.pl line 110, at EOF

    Execution of /tmp/tmpq7ql95lq.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $max_ones = 0;\n    my $max_dec = 0;\n    foreach my $num (@$arr) {\n   \
    \     if ($num == 1) {\n            $max_ones++;\n        }\n        else {\n\
    \            $max_dec += $num;\n        }\n    }\n    foreach my $num (@$arr)\
    \ {\n        if ($num == 1) {\n            push(@sorted, $num);\n        }\n \
    \       else {\n            my $dec = $max_dec - $num;\n            if ($dec >\
    \ 0) {\n                push(@sorted, $num);\n            }\n            else\
    \ {\n                push(@sorted, $dec);\n            }\n        }\n    }\n \
    \   return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp\
    \ = 0;\n    my @tmp;\n    my @res;\n    my $cmp;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpykxy26_n.pl line 94, at end
    of line

    syntax error at /tmp/tmpykxy26_n.pl line 94, near "$cmp_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpykxy26_n.pl line 133, at end
    of line

    syntax error at /tmp/tmpykxy26_n.pl line 133, at EOF

    Execution of /tmp/tmpykxy26_n.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n    my $ones\
    \ = 0;\n    my $dec = 0;\n    foreach my $num (@$arr) {\n        if ($num == 1)\
    \ {\n            $ones++;\n        } else {\n            $dec += $num;\n     \
    \   }\n    }\n    foreach my $num (@$arr) {\n        if ($num == 1) {\n      \
    \      push(@sorted, $ones);\n        } else {\n            push(@sorted, $dec\
    \ + $num);\n        }\n    }\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted_arr = ();\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $cnt = 0;\n    my $max_cnt\
    \ = 0;\n    my $max_cnt2 = 0;\n    my $max_cnt3 = 0;\n    my $max_cnt4 = 0;\n\
    \    my $max_cnt5 = 0;\n    my $max_cnt6 = 0;\n    my $max_cnt7 = 0;\n    my $max_cnt8\
    \ = 0;\n    my $max_cnt9 = 0;\n    my $max_cnt10 = 0;\n    my $max_cnt11 = 0;\n\
    \    my $max_cnt12 = 0;\n    my $max_cnt13 = 0;\n    my $max_cnt14 = 0;\n    my\
    \ $max_cnt15 = 0;\n    my $max_cnt16 = 0;\n    my $max_cnt17 = 0;\n    my $max_cnt18\
    \ = 0;\n    my $max_cnt19 = 0;\n    my $max_cnt20 = 0;\n    my $max_cnt21 = 0;\n\
    \    my $max_cnt22 = 0;\n    my $max_cnt23 = 0;\n    my $max_cnt24 = 0;\n    my\
    \ $max_cnt25 = 0;\n    my $max_cnt26 = 0;\n    my $max_cnt27 = 0;\n    my $max_cnt28\
    \ = 0;\n    my $max_cnt29 = 0;\n    my $max_cnt30 = 0;\n    my $max_cnt31 = 0;\n\
    \    my $max_cnt32 = 0;\n    my $max_cnt33 = 0;\n    my $max_cnt34 = 0;\n    my\
    \ $max_cnt35 = 0;\n    my $max_cnt36 = 0;\n    my $max_cnt37 = 0;\n    my $max_cnt38\
    \ = 0;\n    my $max_cnt39 = 0;\n    my $max_cnt40 = 0;\n    my $max_cnt41 = 0;\n\
    \    my $max_cnt42 = 0;\n    my $max_cnt43 = 0;\n    my $max_cnt44 = 0;\n    my\
    \ $max_cnt45 = 0;\n    my $max_cnt46 = 0;\n    my $max_cnt47 = 0;\n    my $max_cnt48\
    \ = 0;\n    my $max_cnt49 = 0;\n    my $max_cnt50 = 0;\n    my $max_cnt51 = 0;\n\
    \    my $max_cnt52 = 0;\n    my $max_cnt53 = 0;\n    my $max_cnt54 = 0;\n    my\
    \ $max_cnt55 = 0;\n    my $max_cnt56 = 0;\n    my $max_cnt57 = 0;\n    my $max_cnt58\
    \ = 0;\n    my $max_cnt59 = 0;\n    my $max_cnt60 = 0;\n    my $max_cnt61 = 0;\n\
    \    my $max_cnt62 = 0;\n    my $max_cnt63 = 0;\n    my $max_cnt64 = 0;\n    my\
    \ $max_cnt65 = 0;\n    my $max_cnt66 = 0;\n    my $max_cnt67 = 0;\n    my $max_cnt68\
    \ = 0;\n    my $max_cnt69 = 0;\n    my $max_cnt70 = 0;\n    my $\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpjburgrjr.pl line 83,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpjburgrjr.pl line 83, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpjburgrjr.pl line 122, at end of line\nsyntax\
    \ error at /tmp/tmpjburgrjr.pl line 122, at EOF\nExecution of /tmp/tmpjburgrjr.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_value = 0;\n    foreach my $num (@$arr) {\n\
    \        $num_ones += $num;\n        $decimal_value += $num * log(2);\n    }\n\
    \    foreach my $num (@$arr) {\n        if ($num_ones == $num) {\n           \
    \ push(@sorted_arr, $decimal_value);\n        }\n    }\n    foreach my $num (@$arr)\
    \ {\n        if ($num_ones != $num) {\n            push(@sorted_arr, $num);\n\
    \        }\n    }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_value = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $num_ones_cnt = 0;\n    my $decimal_value_cnt = 0;\n    foreach my $num\
    \ (@$arr) {\n        $num_ones_cnt += $num;\n        $decimal_value_cnt += $num_ones_cnt;\n\
    \    }\n    foreach my $num (@$arr) {\n        $num_ones += $num;\n        $decimal_value\
    \ += $num_ones_cnt;\n    }\n    foreach my $num (@$arr) {\n        if ($num_ones\
    \ > $num_ones_cnt) {\n            $j++;\n        }\n        if ($num_ones == $num_ones_cnt)\
    \ {\n            if ($decimal_value >= $decimal_value_cnt) {\n               \
    \ push(@sorted_arr, $j);\n                $j++;\n                $decimal_value\
    \ = 0;\n                $num_ones = 0;\n                $num_ones_cnt = 0;\n \
    \           }\n        }\n        if ($num_ones < $num_ones_cnt) {\n         \
    \   $i++;\n        }\n        if ($num_ones == $num_ones_cnt) {\n            if\
    \ ($decimal_value <= $decimal_value_cnt) {\n                push(@sorted_arr,\
    \ $i);\n                $i++;\n                $decimal_value = 0;\n         \
    \       $num_ones = 0;\n                $num_ones_cnt = 0;\n            }\n  \
    \      }\n    }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    my @sorted_arr;\n\
    \    my @sorted_arr2;\n    my @sorted_arr3;\n    my @sorted_arr4;\n    my @sorted_arr5;\n\
    \    my @sorted_arr6;\n    my @sorted_arr7;\n    my @sorted_arr8;\n    my @sorted_arr9;\n\
    \    my @sorted_arr10;\n    my @sorted_arr11;\n    my @sorted_arr12;\n    my @sorted_arr13;\n\
    \    my @sorted_arr14;\n    my @sorted_arr15;\n    my @sorted_arr16;\n    my @sorted_arr17;\n\
    \    my @sorted_arr18;\n    my @sorted_arr19;\n    my @sorted_arr20;\n    my @sorted_arr21;\n\
    \    my @sorted_arr22;\n    my @sorted_arr23;\n    my @sorted_arr24;\n    my @sorted_arr25;\n\
    \    my @sorted_arr26;\n    my @sorted_arr27;\n    my @sorted_arr28;\n    my @sorted_arr29;\n\
    \    my @sorted_arr30;\n    my @sorted_arr31;\n    my @sorted_arr32;\n    my @sorted_arr33;\n\
    \    my @sorted_arr34;\n    my @sorted_arr35;\n    my @sorted_arr36;\n    my @sorted_arr37;\n\
    \    my @sorted_arr38;\n    my @sorted_arr39;\n    my @sorted_arr40;\n    my @sorted_arr41;\n\
    \    my @sorted_arr42;\n    my @sorted_arr43;\n    my @sorted_arr44;\n    my @sorted_arr45;\n\
    \    my @sorted_arr46;\n    my @sorted_arr47;\n    my @sorted_arr48;\n    my @sorted_arr49;\n\
    \    my @sorted_arr50;\n    my @sorted_arr51;\n    my @sorted_arr52;\n    my @sorted_arr53;\n\
    \    my @sorted_arr54;\n    my @sorted_arr55;\n    my @sorted_arr56;\n    my @sorted_arr57;\n\
    \    my @sorted_arr58;\n    my @sorted_arr59;\n    my @sorted_arr60;\n    my @sorted_arr61;\n\
    \    my @sorted_arr62;\n    my @sorted_arr63;\n    my @sorted_arr64;\n    my @sorted_arr65;\n\
    \    my @sorted_arr66;\n    my @sorted_arr67;\n    my @sorted_arr68;\n    my @sorted_arr69;\n\
    \    my @sorted_arr70;\n    my @sorted_arr71;\n    my @sorted_arr72;\n    my @\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp9ht1ukn_.pl line 85,\
    \ near \"@\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp9ht1ukn_.pl line 85, near \"@\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp9ht1ukn_.pl line 124, at end of line\nsyntax\
    \ error at /tmp/tmp9ht1ukn_.pl line 124, at EOF\nExecution of /tmp/tmp9ht1ukn_.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $num_zeros = 0;\n    my $decimal_value = 0;\n    foreach\
    \ my $num (@$arr) {\n        if ($num eq 1) {\n            $num_ones++;\n    \
    \    } else {\n            $num_zeros++;\n        }\n        $decimal_value =\
    \ $num_zeros + $num_ones;\n        if ($decimal_value eq $num_ones) {\n      \
    \      push(@sorted_arr, $decimal_value);\n        }\n    }\n    return @sorted_arr;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_val = 0;\n    my $decimal_places = 0;\n \
    \   my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $num_ones_cnt = 0;\n  \
    \  my $num_ones_sum = 0;\n    my $num_ones_sum_tmp = 0;\n    my $num_ones_sum_tmp2\
    \ = 0;\n    my $num_ones_sum_tmp3 = 0;\n    my $num_ones_sum_tmp4 = 0;\n    my\
    \ $num_ones_sum_tmp5 = 0;\n    my $num_ones_sum_tmp6 = 0;\n    my $num_ones_sum_tmp7\
    \ = 0;\n    my $num_ones_sum_tmp8 = 0;\n    my $num_ones_sum_tmp9 = 0;\n    my\
    \ $num_ones_sum_tmp10 = 0;\n    my $num_ones_sum_tmp11 = 0;\n    my $num_ones_sum_tmp12\
    \ = 0;\n    my $num_ones_sum_tmp13 = 0;\n    my $num_ones_sum_tmp14 = 0;\n   \
    \ my $num_ones_sum_tmp15 = 0;\n    my $num_ones_sum_tmp16 = 0;\n    my $num_ones_sum_tmp17\
    \ = 0;\n    my $num_ones_sum_tmp18 = 0;\n    my $num_ones_sum_tmp19 = 0;\n   \
    \ my $num_ones_sum_tmp20 = 0;\n    my $num_ones_sum_tmp21 = 0;\n    my $num_ones_sum_tmp22\
    \ = 0;\n    my $num_ones_sum_tmp23 = 0;\n    my $num_ones_sum_tmp24 = 0;\n   \
    \ my $num_ones_sum_tmp25 = 0;\n    my $num_ones_sum_tmp26 = 0;\n    my $num_ones_sum_tmp27\
    \ = 0;\n    my $num_ones_sum_tmp28 = 0;\n    my $num_ones_sum_tmp29 = 0;\n   \
    \ my $num_ones_sum_tmp30 = 0;\n    my $num_ones_sum_tmp31 = 0;\n    my $num_ones_sum_tmp32\
    \ = 0;\n    my $num_ones_sum_tmp33 = 0;\n    my $num_ones_sum_tmp34 = 0;\n   \
    \ my $num_ones_sum_tmp35 = 0;\n    my $num_ones_sum_tmp36 = 0;\n    my $num_ones_sum_tmp37\
    \ = 0;\n    my $num_ones_sum_tmp38 = 0;\n    my $num_ones_sum_tmp39 = 0;\n   \
    \ my $num_ones_sum_tmp40 = 0;\n    my $num_ones_sum_tmp41 = 0;\n    my $num_ones_sum_tmp42\
    \ = 0;\n    my $num_ones_sum_tmp43 = 0;\n    my $num_ones_sum_tmp44 = 0;\n   \
    \ my $num_ones_sum_tmp45 = 0;\n    my $num_ones_sum_tmp46 = 0;\n    my $\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmph2n78mk5.pl line 63,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmph2n78mk5.pl line 63, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmph2n78mk5.pl line 102, at end of line\nsyntax\
    \ error at /tmp/tmph2n78mk5.pl line 102, at EOF\nExecution of /tmp/tmph2n78mk5.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 =\
    \ 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 =\
    \ 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 =\
    \ 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 =\
    \ 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11\
    \ = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13\
    \ = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15\
    \ = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17\
    \ = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19\
    \ = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21\
    \ = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23\
    \ = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25\
    \ = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27\
    \ = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29\
    \ = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31\
    \ = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33\
    \ = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35\
    \ = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37\
    \ = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39\
    \ = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41\
    \ = 0;\n    my $min41 = 0;\n    my $max42\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp6zqwrekj.pl line 95, at end
    of line

    syntax error at /tmp/tmp6zqwrekj.pl line 95, near "$max42

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp6zqwrekj.pl line 134, at end
    of line

    syntax error at /tmp/tmp6zqwrekj.pl line 134, at EOF

    Execution of /tmp/tmp6zqwrekj.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $num_zeros = 0;\n    my $decimal_value = 0;\n    foreach\
    \ my $num (@$arr) {\n        if ($num == 1) {\n            $num_ones++;\n    \
    \    } else {\n            $num_zeros++;\n        }\n        $decimal_value +=\
    \ $num;\n    }\n    foreach my $num (@$arr) {\n        if ($num == 1) {\n    \
    \        $num_ones--;\n        } else {\n            $num_zeros--;\n        }\n\
    \        $decimal_value -= $num;\n    }\n    foreach my $num (@$arr) {\n     \
    \   if ($num_ones == 0) {\n            $decimal_value += $num;\n        } else\
    \ {\n            $decimal_value -= $num;\n        }\n    }\n    foreach my $num\
    \ (@$arr) {\n        if ($num_zeros == 0) {\n            $decimal_value += $num;\n\
    \        } else {\n            $decimal_value -= $num;\n        }\n    }\n   \
    \ foreach my $num (@$arr) {\n        if ($num_ones == 0) {\n            $decimal_value\
    \ += $num;\n        } else {\n            $decimal_value -= $num;\n        }\n\
    \    }\n    foreach my $num (@$arr) {\n        if ($num_zeros == 0) {\n      \
    \      $decimal_value += $num;\n        } else {\n            $decimal_value -=\
    \ $num;\n        }\n    }\n    foreach my $num (@$arr) {\n        if ($num_ones\
    \ == 0) {\n            $decimal_value += $num;\n        } else {\n           \
    \ $decimal_value -= $num;\n        }\n    }\n    foreach my $num (@$arr) {\n \
    \       if ($num_zeros == 0) {\n            $decimal_value += $num;\n        }\
    \ else {\n            $decimal_value -= $num;\n        }\n    }\n    foreach my\
    \ $num (@$arr) {\n        if ($num_ones == 0) {\n            $decimal_value +=\
    \ $num;\n        } else {\n            $decimal_value -= $num;\n        }\n  \
    \  }\n    foreach my $num (@$arr) {\n        if ($num_zeros == 0) {\n        \
    \    $decimal_value += $num;\n        } else {\n            $decimal_value -=\
    \ $num;\n        }\n    }\n    foreach my $num (@$arr) {\n        if ($num_ones\
    \ == 0) {\n            $decimal_value += $num;\n        } else {\n           \
    \ $decimal_value -= $num;\n        }\n    }\n    foreach my $num (@$arr) {\n \
    \       if ($num_zeros == 0) {\n            $decimal_value += $num;\n        }\
    \ else {\n            $decimal_value -= $num;\n        }\n    }\n    foreach \n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing $ on loop variable at /tmp/tmpixwbmwcy.pl line 98.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my($i, $j, $temp, $num_ones);\n\
    \    my @sorted_arr;\n    my $num_ones = 0;\n    foreach $i (@$arr) {\n      \
    \  $num_ones += $i;\n    }\n    foreach $i (@$arr) {\n        $num_ones = $num_ones\
    \ - $i;\n        $num_ones = $num_ones / 2;\n        $num_ones = $num_ones - 1;\n\
    \        $num_ones = $num_ones * 2;\n        $num_ones = $num_ones / 2;\n    \
    \    $num_ones = $num_ones - 1;\n        $num_ones = $num_ones * 2;\n        $num_ones\
    \ = $num_ones / 2;\n        $num_ones = $num_ones - 1;\n        $num_ones = $num_ones\
    \ * 2;\n        $num_ones = $num_ones / 2;\n        $num_ones = $num_ones - 1;\n\
    \        $num_ones = $num_ones * 2;\n        $num_ones = $num_ones / 2;\n    \
    \    $num_ones = $num_ones - 1;\n        $num_ones = $num_ones * 2;\n        $num_ones\
    \ = $num_ones / 2;\n        $num_ones = $num_ones - 1;\n        $num_ones = $num_ones\
    \ * 2;\n        $num_ones = $num_ones / 2;\n        $num_ones = $num_ones - 1;\n\
    \        $num_ones = $num_ones * 2;\n        $num_ones = $num_ones / 2;\n    \
    \    $num_ones = $num_ones - 1;\n        $num_ones = $num_ones * 2;\n        $num_ones\
    \ = $num_ones / 2;\n        $num_ones = $num_ones - 1;\n        $num_ones = $num_ones\
    \ * 2;\n        $num_ones = $num_ones / 2;\n        $num_ones = $num_ones - 1;\n\
    \        $num_ones = $num_ones * 2;\n        $num_ones = $num_ones / 2;\n    \
    \    $num_ones = $num_ones - 1;\n        $num_ones = $num_ones * 2;\n        $num_ones\
    \ = $num_ones / 2;\n        $num_ones = $num_ones - 1;\n        $num_ones = $num_ones\
    \ * 2;\n        $num_ones = $num_ones / 2;\n        $num_ones = $num_ones - 1;\n\
    \        $num_ones = $num_ones * 2;\n        $num_ones = $num_ones / 2;\n    \
    \    $num_ones = $num_ones - 1;\n        $num_ones = $num_ones * 2;\n        $num_ones\
    \ = $num_ones / 2;\n        $num_ones = $num_ones - 1;\n        $num_ones = $num_one\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpf6up28zz.pl line 60, at end
    of line

    syntax error at /tmp/tmpf6up28zz.pl line 60, near "$num_one

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpf6up28zz.pl line 99, at end of
    line

    syntax error at /tmp/tmpf6up28zz.pl line 99, at EOF

    Execution of /tmp/tmpf6up28zz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $cnt = 0;\n    my @res;\n \
    \   my $tmpcnt = 0;\n    my $tmpsum = 0;\n    my $tmpsum2 = 0;\n    my $tmpsum3\
    \ = 0;\n    my $tmpsum4 = 0;\n    my $tmpsum5 = 0;\n    my $tmpsum6 = 0;\n   \
    \ my $tmpsum7 = 0;\n    my $tmpsum8 = 0;\n    my $tmpsum9 = 0;\n    my $tmpsum10\
    \ = 0;\n    my $tmpsum11 = 0;\n    my $tmpsum12 = 0;\n    my $tmpsum13 = 0;\n\
    \    my $tmpsum14 = 0;\n    my $tmpsum15 = 0;\n    my $tmpsum16 = 0;\n    my $tmpsum17\
    \ = 0;\n    my $tmpsum18 = 0;\n    my $tmpsum19 = 0;\n    my $tmpsum20 = 0;\n\
    \    my $tmpsum21 = 0;\n    my $tmpsum22 = 0;\n    my $tmpsum23 = 0;\n    my $tmpsum24\
    \ = 0;\n    my $tmpsum25 = 0;\n    my $tmpsum26 = 0;\n    my $tmpsum27 = 0;\n\
    \    my $tmpsum28 = 0;\n    my $tmpsum29 = 0;\n    my $tmpsum30 = 0;\n    my $tmpsum31\
    \ = 0;\n    my $tmpsum32 = 0;\n    my $tmpsum33 = 0;\n    my $tmpsum34 = 0;\n\
    \    my $tmpsum35 = 0;\n    my $tmpsum36 = 0;\n    my $tmpsum37 = 0;\n    my $tmpsum38\
    \ = 0;\n    my $tmpsum39 = 0;\n    my $tmpsum40 = 0;\n    my $tmpsum41 = 0;\n\
    \    my $tmpsum42 = 0;\n    my $tmpsum43 = 0;\n    my $tmpsum44 = 0;\n    my $tmpsum45\
    \ = 0;\n    my $tmpsum46 = 0;\n    my $tmpsum47 = 0;\n    my $tmpsum48 = 0;\n\
    \    my $tmpsum49 = 0;\n    my $tmpsum50 = 0;\n    my $tmpsum51 = 0;\n    my $tmpsum52\
    \ = 0;\n    my $tmpsum53 = 0;\n    my $tmpsum54 = 0;\n    my $tmpsum55 = 0;\n\
    \    my $tmpsum56 = 0;\n    my $tmpsum57 = 0;\n    my $tmpsum58 = 0;\n    my $tmpsum59\
    \ = 0;\n    my $tmpsum60 = 0;\n    my $tmpsum61 = 0;\n    my $tmpsum62 = 0;\n\
    \    my $tmpsum63 = 0;\n    my $tmpsum64 = 0;\n    my $tmpsum65 = 0;\n    my $tmpsum66\
    \ = 0;\n    my $tmpsum67 = 0;\n    my $tmpsum68 = 0;\n    my $tmpsum\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpb_o7xasr.pl line 83, at end
    of line

    syntax error at /tmp/tmpb_o7xasr.pl line 83, near "$tmpsum

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpb_o7xasr.pl line 122, at end
    of line

    syntax error at /tmp/tmpb_o7xasr.pl line 122, at EOF

    Execution of /tmp/tmpb_o7xasr.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $len\
    \ = @$arr;\n    my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_i = 0;\n\
    \    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec = 0;\n    my $max_ones\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec\
    \ = 0;\n    my $max_ones = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_len = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_i =\
    \ 0;\n    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec = 0;\n    my $max_ones\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec\
    \ = 0;\n    my $max_ones = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_len = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_i =\
    \ 0;\n    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec = 0;\n    my $max_ones\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec\
    \ = 0;\n    my $max_ones = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_len = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_i =\
    \ 0;\n    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec = 0;\n    my $max_ones\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec\
    \ = 0;\n    my $max_ones = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_len = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_i =\
    \ 0;\n    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec = 0;\n    my $max_ones\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec\
    \ = 0;\n    my $max_ones = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_len = 0;\n    my $max_dec = 0;\n    my $max_ones = 0;\n    my $max_i =\
    \ 0;\n    my $max_j = 0;\n    my $max_len = 0;\n    my $max_dec = 0;\n    my $max_ones\
    \ = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpl27241xc.pl line 96,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpl27241xc.pl line 96, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpl27241xc.pl line 135, at end of line\nsyntax\
    \ error at /tmp/tmpl27241xc.pl line 135, at EOF\nExecution of /tmp/tmpl27241xc.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $max_ones = $size >> 1;\n    my $max_dec = 0;\n    my $max_dec_index = 0;\n\
    \    my $max_dec_val = 0;\n    my $max_dec_val_index = 0;\n    my $ones_index\
    \ = 0;\n    my $dec_index = 0;\n    my $dec_val = 0;\n    my $dec_val_index =\
    \ 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $count\
    \ = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 =\
    \ 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 =\
    \ 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12\
    \ = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16\
    \ = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20\
    \ = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24\
    \ = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28\
    \ = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32\
    \ = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36\
    \ = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40\
    \ = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44\
    \ = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48\
    \ = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52\
    \ = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56\
    \ = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60\
    \ = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64\
    \ = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68\
    \ = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpvrz4c0tu.pl line 93,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpvrz4c0tu.pl line 93, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpvrz4c0tu.pl line 132, at end of line\nsyntax\
    \ error at /tmp/tmpvrz4c0tu.pl line 132, at EOF\nExecution of /tmp/tmpvrz4c0tu.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    my @temp;\n\
    \    my @sorted;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j =\
    \ 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my\
    \ $max_j = 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my $max_i =\
    \ 0;\n    my $max_j = 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my\
    \ $max_i = 0;\n    my $max_j = 0;\n    my $max_temp = 0;\n    my $max_count =\
    \ 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp = 0;\n    my $max_count\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp = 0;\n    my\
    \ $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp =\
    \ 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp\
    \ = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_temp = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j =\
    \ 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my\
    \ $max_j = 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my $max_i =\
    \ 0;\n    my $max_j = 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my\
    \ $max_i = 0;\n    my $max_j = 0;\n    my $max_temp = 0;\n    my $max_count =\
    \ 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp = 0;\n    my $max_count\
    \ = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp = 0;\n    my\
    \ $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp =\
    \ 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my $max_temp\
    \ = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j = 0;\n    my\
    \ $max_temp = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my $max_j =\
    \ 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my $max_i = 0;\n    my\
    \ $max_j = 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my $max_i =\
    \ 0;\n    my $max_j = 0;\n    my $max_temp = 0;\n    my $max_count = 0;\n    my\
    \ $max_i = 0;\n    my $max_j\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpxkxftq0x.pl line 101, at end
    of line

    syntax error at /tmp/tmpxkxftq0x.pl line 101, near "$max_j

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpxkxftq0x.pl line 140, at end
    of line

    syntax error at /tmp/tmpxkxftq0x.pl line 140, at EOF

    Execution of /tmp/tmpxkxftq0x.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my($i, $j, $temp, $n);\n\
    \    my(@sorted);\n    \n    @sorted = ();\n    \n    # sort by number of ones\n\
    \    for ($i = 0; $i < $#arr; $i++) {\n        $n = $arr[$i];\n        $temp =\
    \ 0;\n        for ($j = $i + 1; $j < $#arr; $j++) {\n            if ($arr[$j]\
    \ == $n) {\n                $temp++;\n            } else {\n                last;\n\
    \            }\n        }\n        if ($temp > 0) {\n            push(@sorted,\
    \ $i);\n        }\n    }\n    \n    # sort by decimal value\n    for ($i = 0;\
    \ $i < $#sorted; $i++) {\n        $j = @sorted[$i];\n        $temp = $arr[$j];\n\
    \        for ($k = $j + 1; $k < $#arr; $k++) {\n            if ($arr[$k] > $temp)\
    \ {\n                $temp = $arr[$k];\n            }\n        }\n        $arr[$j]\
    \ = $temp;\n    }\n    \n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    my @sorted;\n\
    \    foreach my $num (@$arr) {\n        $count = $num;\n        $temp = 0;\n \
    \       foreach my $bit (1 .. $len) {\n            $temp += $bit * $count++;\n\
    \        }\n        push @sorted, $temp;\n    }\n    foreach my $num (@$arr) {\n\
    \        $count = $num;\n        $temp = 0;\n        foreach my $bit (1 .. $len)\
    \ {\n            $temp += $bit * $count++;\n        }\n        push @sorted, $temp;\n\
    \    }\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $num_dec = 0;\n    my $i = 0;\n    my $j = 0;\n  \
    \  my $temp = 0;\n    my $num_ones_cnt = 0;\n    my $num_dec_cnt = 0;\n    my\
    \ $num_ones_sum = 0;\n    my $num_dec_sum = 0;\n    my $num_ones_cnt2 = 0;\n \
    \   my $num_dec_cnt2 = 0;\n    my $num_ones_sum2 = 0;\n    my $num_dec_sum2 =\
    \ 0;\n    my $num_ones_cnt3 = 0;\n    my $num_dec_cnt3 = 0;\n    my $num_ones_sum3\
    \ = 0;\n    my $num_dec_sum3 = 0;\n    my $num_ones_cnt4 = 0;\n    my $num_dec_cnt4\
    \ = 0;\n    my $num_ones_sum4 = 0;\n    my $num_dec_sum4 = 0;\n    my $num_ones_cnt5\
    \ = 0;\n    my $num_dec_cnt5 = 0;\n    my $num_ones_sum5 = 0;\n    my $num_dec_sum5\
    \ = 0;\n    my $num_ones_cnt6 = 0;\n    my $num_dec_cnt6 = 0;\n    my $num_ones_sum6\
    \ = 0;\n    my $num_dec_sum6 = 0;\n    my $num_ones_cnt7 = 0;\n    my $num_dec_cnt7\
    \ = 0;\n    my $num_ones_sum7 = 0;\n    my $num_dec_sum7 = 0;\n    my $num_ones_cnt8\
    \ = 0;\n    my $num_dec_cnt8 = 0;\n    my $num_ones_sum8 = 0;\n    my $num_dec_sum8\
    \ = 0;\n    my $num_ones_cnt9 = 0;\n    my $num_dec_cnt9 = 0;\n    my $num_ones_sum9\
    \ = 0;\n    my $num_dec_sum9 = 0;\n    my $num_ones_cnt10 = 0;\n    my $num_dec_cnt10\
    \ = 0;\n    my $num_ones_sum10 = 0;\n    my $num_dec_sum10 = 0;\n    my $num_ones_cnt11\
    \ = 0;\n    my $num_dec_cnt11 = 0;\n    my $num_ones_sum11 = 0;\n    my $num_dec_sum11\
    \ = 0;\n    my $num_ones_cnt12 = 0;\n    my $num_dec_cnt12 = 0;\n    my $num_ones_sum12\
    \ = 0;\n    my $num_dec_sum12 = 0;\n    my $num_ones_cnt13 = 0;\n    my $num_dec_cnt13\
    \ = 0;\n    my $num_ones_sum13 = 0;\n    my $num_dec_sum13 = 0;\n    my $num_ones_cnt14\
    \ = 0;\n    my $num_dec_cnt14 = 0;\n    my $num_ones_sum14 = 0;\n    my $num_dec_sum14\
    \ = 0;\n    my $num_ones_cnt15 = 0;\n    my $num_dec_cnt15 = 0;\n    my $num_ones_sum\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpvzq27uel.pl line 72, at end
    of line

    syntax error at /tmp/tmpvzq27uel.pl line 72, near "$num_ones_sum

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpvzq27uel.pl line 111, at end
    of line

    syntax error at /tmp/tmpvzq27uel.pl line 111, at EOF

    Execution of /tmp/tmpvzq27uel.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n  \
    \  my $count = 0;\n    my $ones = 0;\n    my $dec = 0;\n    my $bin_arr;\n   \
    \ my $bin_arr_size;\n    my $bin_arr_sum;\n    my $bin_arr_sum_size;\n    my $bin_arr_sum_size2;\n\
    \    my $bin_arr_sum_size3;\n    my $bin_arr_sum_size4;\n    my $bin_arr_sum_size5;\n\
    \    my $bin_arr_sum_size6;\n    my $bin_arr_sum_size7;\n    my $bin_arr_sum_size8;\n\
    \    my $bin_arr_sum_size9;\n    my $bin_arr_sum_size10;\n    my $bin_arr_sum_size11;\n\
    \    my $bin_arr_sum_size12;\n    my $bin_arr_sum_size13;\n    my $bin_arr_sum_size14;\n\
    \    my $bin_arr_sum_size15;\n    my $bin_arr_sum_size16;\n    my $bin_arr_sum_size17;\n\
    \    my $bin_arr_sum_size18;\n    my $bin_arr_sum_size19;\n    my $bin_arr_sum_size20;\n\
    \    my $bin_arr_sum_size21;\n    my $bin_arr_sum_size22;\n    my $bin_arr_sum_size23;\n\
    \    my $bin_arr_sum_size24;\n    my $bin_arr_sum_size25;\n    my $bin_arr_sum_size26;\n\
    \    my $bin_arr_sum_size27;\n    my $bin_arr_sum_size28;\n    my $bin_arr_sum_size29;\n\
    \    my $bin_arr_sum_size30;\n    my $bin_arr_sum_size31;\n    my $bin_arr_sum_size32;\n\
    \    my $bin_arr_sum_size33;\n    my $bin_arr_sum_size34;\n    my $bin_arr_sum_size35;\n\
    \    my $bin_arr_sum_size36;\n    my $bin_arr_sum_size37;\n    my $bin_arr_sum_size38;\n\
    \    my $bin_arr_sum_size39;\n    my $bin_arr_sum_size40;\n    my $bin_arr_sum_size41;\n\
    \    my $bin_arr_sum_size42;\n    my $bin_arr_sum_size43;\n    my $bin_arr_sum_size44;\n\
    \    my $bin_arr_sum_size45;\n    my $bin_arr_sum_size46;\n    my $bin_arr_sum_size47;\n\
    \    my $bin_arr_sum_size48;\n    my $bin_arr_sum_size49;\n    my $bin_arr_sum_size50;\n\
    \    my $bin_arr_sum_size51;\n    my $bin_arr_sum_size52;\n    \nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpbgoxnqpu.pl line 110,
    at end of line

    syntax error at /tmp/tmpbgoxnqpu.pl line 110, at EOF

    Execution of /tmp/tmpbgoxnqpu.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $temp\
    \ = 0;\n    my $flag = 0;\n    my @sorted_arr = ();\n    my $flag2 = 0;\n    my\
    \ $flag3 = 0;\n    my $flag4 = 0;\n    my $flag5 = 0;\n    my $flag6 = 0;\n  \
    \  my $flag7 = 0;\n    my $flag8 = 0;\n    my $flag9 = 0;\n    my $flag10 = 0;\n\
    \    my $flag11 = 0;\n    my $flag12 = 0;\n    my $flag13 = 0;\n    my $flag14\
    \ = 0;\n    my $flag15 = 0;\n    my $flag16 = 0;\n    my $flag17 = 0;\n    my\
    \ $flag18 = 0;\n    my $flag19 = 0;\n    my $flag20 = 0;\n    my $flag21 = 0;\n\
    \    my $flag22 = 0;\n    my $flag23 = 0;\n    my $flag24 = 0;\n    my $flag25\
    \ = 0;\n    my $flag26 = 0;\n    my $flag27 = 0;\n    my $flag28 = 0;\n    my\
    \ $flag29 = 0;\n    my $flag30 = 0;\n    my $flag31 = 0;\n    my $flag32 = 0;\n\
    \    my $flag33 = 0;\n    my $flag34 = 0;\n    my $flag35 = 0;\n    my $flag36\
    \ = 0;\n    my $flag37 = 0;\n    my $flag38 = 0;\n    my $flag39 = 0;\n    my\
    \ $flag40 = 0;\n    my $flag41 = 0;\n    my $flag42 = 0;\n    my $flag43 = 0;\n\
    \    my $flag44 = 0;\n    my $flag45 = 0;\n    my $flag46 = 0;\n    my $flag47\
    \ = 0;\n    my $flag48 = 0;\n    my $flag49 = 0;\n    my $flag50 = 0;\n    my\
    \ $flag51 = 0;\n    my $flag52 = 0;\n    my $flag53 = 0;\n    my $flag54 = 0;\n\
    \    my $flag55 = 0;\n    my $flag56 = 0;\n    my $flag57 = 0;\n    my $flag58\
    \ = 0;\n    my $flag59 = 0;\n    my $flag60 = 0;\n    my $flag61 = 0;\n    my\
    \ $flag62 = 0;\n    my $flag63 = 0;\n    my $flag64 = 0;\n    my $flag65 = 0;\n\
    \    my $flag66 = 0;\n    my $flag67 = 0;\n    my $flag68 = 0;\n    my $flag69\
    \ = 0;\n    my $flag70 = 0;\n    my $flag71 = 0;\n    my $flag72 = 0;\n    my\
    \ $flag73 = 0;\n    my $flag74 = 0;\n    my $flag75 = 0;\n    my $flag76 = 0;\n\
    \    my $flag77 = 0;\n    my $flag78 = 0;\n    my $flag79 = 0;\n    my $flag80\
    \ = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpprnp7s84.pl line 133,
    at end of line

    syntax error at /tmp/tmpprnp7s84.pl line 133, at EOF

    Execution of /tmp/tmpprnp7s84.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp\
    \ = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5\
    \ = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9\
    \ = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13\
    \ = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17\
    \ = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21\
    \ = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25\
    \ = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29\
    \ = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33\
    \ = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37\
    \ = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41\
    \ = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45\
    \ = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49\
    \ = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53\
    \ = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57\
    \ = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61\
    \ = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65\
    \ = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69\
    \ = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73\
    \ = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77\
    \ = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81\
    \ = 0;\n    my $tmp82\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpk6qn4hmd.pl line 94, at end
    of line

    syntax error at /tmp/tmpk6qn4hmd.pl line 94, near "$tmp82

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpk6qn4hmd.pl line 133, at end
    of line

    syntax error at /tmp/tmpk6qn4hmd.pl line 133, at EOF

    Execution of /tmp/tmpk6qn4hmd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n\
    \    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n \
    \   my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n\
    \    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n\
    \    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n\
    \    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n\
    \    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n\
    \    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n\
    \    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n\
    \    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n\
    \    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n\
    \    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n\
    \    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n\
    \    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n\
    \    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n\
    \    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n\
    \    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n\
    \    my $tmp82;\n    my $tmp83;\n    my $tmp84;\n    \nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpu_tnuu2w.pl line 136,
    at end of line

    syntax error at /tmp/tmpu_tnuu2w.pl line 136, at EOF

    Execution of /tmp/tmpu_tnuu2w.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $count = 0;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n    my $max3 =\
    \ 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n    my $max5 =\
    \ 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n    my $max7 =\
    \ 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n    my $max9 =\
    \ 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n    my $max11\
    \ = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n    my $max13\
    \ = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n    my $max15\
    \ = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n    my $max17\
    \ = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n    my $max19\
    \ = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n    my $max21\
    \ = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n    my $max23\
    \ = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n    my $max25\
    \ = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n    my $max27\
    \ = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n    my $max29\
    \ = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n    my $max31\
    \ = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n    my $max33\
    \ = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n    my $max35\
    \ = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n    my $max37\
    \ = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n    my $max39\
    \ = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n    my $max41\
    \ = 0;\n    my $min41 = 0;\n    my $max42 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmper89o1or.pl line 135,
    at end of line

    syntax error at /tmp/tmper89o1or.pl line 135, at EOF

    Execution of /tmp/tmper89o1or.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_val = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $num_ones_cnt = 0;\n    my $decimal_val_cnt = 0;\n   \
    \ my $num_ones_cnt_tmp = 0;\n    my $decimal_val_cnt_tmp = 0;\n    my $num_ones_cnt_tmp2\
    \ = 0;\n    my $decimal_val_cnt_tmp2 = 0;\n    my $num_ones_cnt_tmp3 = 0;\n  \
    \  my $decimal_val_cnt_tmp3 = 0;\n    my $num_ones_cnt_tmp4 = 0;\n    my $decimal_val_cnt_tmp4\
    \ = 0;\n    my $num_ones_cnt_tmp5 = 0;\n    my $decimal_val_cnt_tmp5 = 0;\n  \
    \  my $num_ones_cnt_tmp6 = 0;\n    my $decimal_val_cnt_tmp6 = 0;\n    my $num_ones_cnt_tmp7\
    \ = 0;\n    my $decimal_val_cnt_tmp7 = 0;\n    my $num_ones_cnt_tmp8 = 0;\n  \
    \  my $decimal_val_cnt_tmp8 = 0;\n    my $num_ones_cnt_tmp9 = 0;\n    my $decimal_val_cnt_tmp9\
    \ = 0;\n    my $num_ones_cnt_tmp10 = 0;\n    my $decimal_val_cnt_tmp10 = 0;\n\
    \    my $num_ones_cnt_tmp11 = 0;\n    my $decimal_val_cnt_tmp11 = 0;\n    my $num_ones_cnt_tmp12\
    \ = 0;\n    my $decimal_val_cnt_tmp12 = 0;\n    my $num_ones_cnt_tmp13 = 0;\n\
    \    my $decimal_val_cnt_tmp13 = 0;\n    my $num_ones_cnt_tmp14 = 0;\n    my $decimal_val_cnt_tmp14\
    \ = 0;\n    my $num_ones_cnt_tmp15 = 0;\n    my $decimal_val_cnt_tmp15 = 0;\n\
    \    my $num_ones_cnt_tmp16 = 0;\n    my $decimal_val_cnt_tmp16 = 0;\n    my $num_ones_cnt_tmp17\
    \ = 0;\n    my $decimal_val_cnt_tmp17 = 0;\n    my $num_ones_cnt_tmp18 = 0;\n\
    \    my $decimal_val_cnt_tmp18 = 0;\n    my $num_ones_cnt_tmp19 = 0;\n    my $decimal_val_cnt_tmp19\
    \ = 0;\n    my $num_ones_cnt_tmp20 = 0;\n    my $decimal_val_cnt_tmp20 = 0;\n\
    \    my $num_ones_cnt_tmp21 = 0;\n    my $decimal_val_cnt_tmp21 = 0;\n    my $num_ones_cnt_tmp22\
    \ = 0;\n    my $decimal_val_cnt_tmp22 = 0;\n    my $num_ones_cnt_tmp23 = 0;\n\
    \    my $decimal_val_cnt_tmp23 = 0;\n    my $num_ones_cnt_tmp24 = 0;\n    my $decimal_\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp_ra7u80e.pl line 63, at end
    of line

    syntax error at /tmp/tmp_ra7u80e.pl line 63, near "$decimal_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp_ra7u80e.pl line 102, at end
    of line

    syntax error at /tmp/tmp_ra7u80e.pl line 102, at EOF

    Execution of /tmp/tmp_ra7u80e.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    my @sorted_arr;\n\
    \    my @sorted_arr2;\n    my $temp2 = 0;\n    my $temp3 = 0;\n    my $temp4 =\
    \ 0;\n    my $temp5 = 0;\n    my $temp6 = 0;\n    my $temp7 = 0;\n    my $temp8\
    \ = 0;\n    my $temp9 = 0;\n    my $temp10 = 0;\n    my $temp11 = 0;\n    my $temp12\
    \ = 0;\n    my $temp13 = 0;\n    my $temp14 = 0;\n    my $temp15 = 0;\n    my\
    \ $temp16 = 0;\n    my $temp17 = 0;\n    my $temp18 = 0;\n    my $temp19 = 0;\n\
    \    my $temp20 = 0;\n    my $temp21 = 0;\n    my $temp22 = 0;\n    my $temp23\
    \ = 0;\n    my $temp24 = 0;\n    my $temp25 = 0;\n    my $temp26 = 0;\n    my\
    \ $temp27 = 0;\n    my $temp28 = 0;\n    my $temp29 = 0;\n    my $temp30 = 0;\n\
    \    my $temp31 = 0;\n    my $temp32 = 0;\n    my $temp33 = 0;\n    my $temp34\
    \ = 0;\n    my $temp35 = 0;\n    my $temp36 = 0;\n    my $temp37 = 0;\n    my\
    \ $temp38 = 0;\n    my $temp39 = 0;\n    my $temp40 = 0;\n    my $temp41 = 0;\n\
    \    my $temp42 = 0;\n    my $temp43 = 0;\n    my $temp44 = 0;\n    my $temp45\
    \ = 0;\n    my $temp46 = 0;\n    my $temp47 = 0;\n    my $temp48 = 0;\n    my\
    \ $temp49 = 0;\n    my $temp50 = 0;\n    my $temp51 = 0;\n    my $temp52 = 0;\n\
    \    my $temp53 = 0;\n    my $temp54 = 0;\n    my $temp55 = 0;\n    my $temp56\
    \ = 0;\n    my $temp57 = 0;\n    my $temp58 = 0;\n    my $temp59 = 0;\n    my\
    \ $temp60 = 0;\n    my $temp61 = 0;\n    my $temp62 = 0;\n    my $temp63 = 0;\n\
    \    my $temp64 = 0;\n    my $temp65 = 0;\n    my $temp66 = 0;\n    my $temp67\
    \ = 0;\n    my $temp68 = 0;\n    my $temp69 = 0;\n    my $temp70 = 0;\n    my\
    \ $temp71 = 0;\n    my $temp72 = 0;\n    my $temp73 = 0;\n    my $temp74 = 0;\n\
    \    my $temp75 = 0;\n    my $temp76 = 0;\n    my $temp77 = 0;\n    my $temp78\
    \ = 0;\n    my $temp79 = 0;\n    my $temp80 = 0;\n    my $temp81\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp0i3qyofj.pl line 94, at end
    of line

    syntax error at /tmp/tmp0i3qyofj.pl line 94, near "$temp81

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp0i3qyofj.pl line 133, at end
    of line

    syntax error at /tmp/tmp0i3qyofj.pl line 133, at EOF

    Execution of /tmp/tmp0i3qyofj.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my($num_ones);\n    my($decimal_value);\n    my $i = 0;\n    my $j = 0;\n  \
    \  my $len = @$arr;\n    my $max_decimal_value = -1;\n    my $max_decimal_value_pos\
    \ = 0;\n    my $decimal_value_pos = 0;\n    my $decimal_value_neg = 0;\n    my\
    \ $decimal_value_neg_inc = 0;\n    my $decimal_value_neg_inc_pos = 0;\n    my\
    \ $decimal_value_neg_inc_neg = 0;\n    my $decimal_value_neg_inc_pos_neg = 0;\n\
    \    my $decimal_value_pos_neg = 0;\n    my $decimal_value_pos_pos_neg = 0;\n\
    \    my $decimal_value_pos_pos_pos_neg = 0;\n    my $decimal_value_pos_pos_pos_pos_neg\
    \ = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_neg = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_pos_neg\
    \ = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_pos_pos_neg = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_neg\
    \ = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_neg = 0;\n    my\
    \ $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_neg = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_pos_neg\
    \ = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_pos_neg = 0;\n \
    \   my $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_neg = 0;\n    my\
    \ $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_neg = 0;\n    my\
    \ $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_neg = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_neg\
    \ = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_neg\
    \ = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_neg\
    \ = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_neg\
    \ = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_neg\
    \ = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_neg\
    \ = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_neg\
    \ = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_neg\
    \ = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_neg\
    \ = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_neg\
    \ = 0;\n    my $decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp2r_2xvys.pl line 47, at end
    of line

    syntax error at /tmp/tmp2r_2xvys.pl line 47, near "$decimal_value_pos_pos_pos_pos_pos_pos_pos_pos_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp2r_2xvys.pl line 86, at end of
    line

    syntax error at /tmp/tmp2r_2xvys.pl line 86, at EOF

    Execution of /tmp/tmp2r_2xvys.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = scalar @$arr;\n\
    \    my $max_ones = $len / 2;\n    my $min_ones = $len - $max_ones;\n    my $max_decimal\
    \ = -1;\n    my $min_decimal = -1;\n    my $max_decimal_index = 0;\n    my $min_decimal_index\
    \ = 0;\n    my $max_decimal_value = -1;\n    my $min_decimal_value = -1;\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $temp = 0;\n    my $count\
    \ = 0;\n    my $ones = 0;\n    my $decimal = 0;\n    my $decimal_value = 0;\n\
    \    my $decimal_count = 0;\n    my $decimal_value_index = 0;\n    my $decimal_count\
    \ = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n \
    \   my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index\
    \ = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n \
    \   my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index\
    \ = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n \
    \   my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index\
    \ = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n \
    \   my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index\
    \ = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n \
    \   my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index\
    \ = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n \
    \   my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index\
    \ = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n \
    \   my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index\
    \ = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n \
    \   my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index\
    \ = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n \
    \   my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index\
    \ = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n \
    \   my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index\
    \ = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n \
    \   my $decimal_value_index = 0;\n    my $decimal_value_index = 0;\n    my $decimal_value_index\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmps63e62vc.pl line 82, at end
    of line

    syntax error at /tmp/tmps63e62vc.pl line 82, near "$decimal_value_index

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmps63e62vc.pl line 121, at end
    of line

    syntax error at /tmp/tmps63e62vc.pl line 121, at EOF

    Execution of /tmp/tmps63e62vc.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $num_tens = 0;\n    my $num_hundreds = 0;\n    my\
    \ $num_thousands = 0;\n    my $num_millions = 0;\n    my $num_billions = 0;\n\
    \    my $num_trillions = 0;\n    my $num_quadrillions = 0;\n    my $num_quintillions\
    \ = 0;\n    my $num_sextillions = 0;\n    my $num_septillions = 0;\n    my $num_octillions\
    \ = 0;\n    my $num_nonillions = 0;\n    my $num_decillions = 0;\n    my $num_undecillions\
    \ = 0;\n    my $num_duodecillions = 0;\n    my $num_tredecillions = 0;\n    my\
    \ $num_quattuordecillions = 0;\n    my $num_quindecillions = 0;\n    my $num_sexdecillions\
    \ = 0;\n    my $num_septendecillions = 0;\n    my $num_octodecillions = 0;\n \
    \   my $num_novemdecillions = 0;\n    my $num_vigintillions = 0;\n    my $num_unvigintillions\
    \ = 0;\n    my $num_duovigintillions = 0;\n    my $num_trevigintillions = 0;\n\
    \    my $num_quattuorvigintillions = 0;\n    my $num_quinvigintillions = 0;\n\
    \    my $num_sexvigintillions = 0;\n    my $num_septenvigintillions = 0;\n   \
    \ my $num_octovigintillions = 0;\n    my $num_novemvigintillions = 0;\n    my\
    \ $num_trigintillions = 0;\n    my $num_untrigintillions = 0;\n    my $num_duotrigintillions\
    \ = 0;\n    my $num_trestrigintillions = 0;\n    my $num_quattuortrigintillions\
    \ = 0;\n    my $num_quintrigintillions = 0;\n    my $num_sextrigintillions = 0;\n\
    \    my $num_septentrigintillions = 0;\n    my $num_octotrigintillions = 0;\n\
    \    my $num_novemtrigintillions = 0;\n    my $num_quadragintillions = 0;\n  \
    \  my $num_unquadragintillions = 0;\n    my $num_duoquadragintillions = 0;\n \
    \   my $num_trequadragintillions = 0;\n    my $num_quattuorquadragintillions =\
    \ 0;\n    my $num_quinquadragin\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmptoxl8dcx.pl line 57, at end
    of line

    syntax error at /tmp/tmptoxl8dcx.pl line 57, near "$num_quinquadragin

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmptoxl8dcx.pl line 96, at end of
    line

    syntax error at /tmp/tmptoxl8dcx.pl line 96, at EOF

    Execution of /tmp/tmptoxl8dcx.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n\
    \    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n \
    \   my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n\
    \    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n\
    \    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n\
    \    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n\
    \    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n\
    \    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n\
    \    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n\
    \    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n\
    \    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n\
    \    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n\
    \    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n\
    \    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n\
    \    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n\
    \    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n\
    \    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n\
    \    my $tmp82;\n    my $tmp83;\n    my $tmp84;\n    \nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp4txz_5gp.pl line 136,
    at end of line

    syntax error at /tmp/tmp4txz_5gp.pl line 136, at EOF

    Execution of /tmp/tmp4txz_5gp.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $num_zeros = 0;\n    my $decimal_value = 0;\n    foreach\
    \ my $num (@$arr) {\n        if ($num eq 1) {\n            $num_ones++;\n    \
    \    }\n        else {\n            $num_zeros++;\n        }\n        $decimal_value\
    \ = $num_ones - $num_zeros;\n        $decimal_value += $decimal_value / 2;\n \
    \       push (@sorted_arr, $decimal_value);\n    }\n    foreach my $num (@sorted_arr)\
    \ {\n        $arr->[$_] = $num;\n    }\n    return @$arr;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    my $ones\
    \ = 0;\n    my $dec = 0;\n    my $max = 0;\n    my $min = 0;\n    my $temp2 =\
    \ 0;\n    my $temp3 = 0;\n    my $temp4 = 0;\n    my $temp5 = 0;\n    my $temp6\
    \ = 0;\n    my $temp7 = 0;\n    my $temp8 = 0;\n    my $temp9 = 0;\n    my $temp10\
    \ = 0;\n    my $temp11 = 0;\n    my $temp12 = 0;\n    my $temp13 = 0;\n    my\
    \ $temp14 = 0;\n    my $temp15 = 0;\n    my $temp16 = 0;\n    my $temp17 = 0;\n\
    \    my $temp18 = 0;\n    my $temp19 = 0;\n    my $temp20 = 0;\n    my $temp21\
    \ = 0;\n    my $temp22 = 0;\n    my $temp23 = 0;\n    my $temp24 = 0;\n    my\
    \ $temp25 = 0;\n    my $temp26 = 0;\n    my $temp27 = 0;\n    my $temp28 = 0;\n\
    \    my $temp29 = 0;\n    my $temp30 = 0;\n    my $temp31 = 0;\n    my $temp32\
    \ = 0;\n    my $temp33 = 0;\n    my $temp34 = 0;\n    my $temp35 = 0;\n    my\
    \ $temp36 = 0;\n    my $temp37 = 0;\n    my $temp38 = 0;\n    my $temp39 = 0;\n\
    \    my $temp40 = 0;\n    my $temp41 = 0;\n    my $temp42 = 0;\n    my $temp43\
    \ = 0;\n    my $temp44 = 0;\n    my $temp45 = 0;\n    my $temp46 = 0;\n    my\
    \ $temp47 = 0;\n    my $temp48 = 0;\n    my $temp49 = 0;\n    my $temp50 = 0;\n\
    \    my $temp51 = 0;\n    my $temp52 = 0;\n    my $temp53 = 0;\n    my $temp54\
    \ = 0;\n    my $temp55 = 0;\n    my $temp56 = 0;\n    my $temp57 = 0;\n    my\
    \ $temp58 = 0;\n    my $temp59 = 0;\n    my $temp60 = 0;\n    my $temp61 = 0;\n\
    \    my $temp62 = 0;\n    my $temp63 = 0;\n    my $temp64 = 0;\n    my $temp65\
    \ = 0;\n    my $temp66 = 0;\n    my $temp67 = 0;\n    my $temp68 = 0;\n    my\
    \ $temp69 = 0;\n    my $temp70 = 0;\n    my $temp71 = 0;\n    my $temp72 = 0;\n\
    \    my $temp73 = 0;\n    my $temp74 = 0;\n    my $temp75 = 0;\n    my $temp76\
    \ = 0;\n    my $temp77 = 0;\n    my $temp78 = 0;\n    my $temp79 = 0;\n    my\
    \ $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmphaidjlle.pl line 95,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmphaidjlle.pl line 95, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmphaidjlle.pl line 134, at end of line\nsyntax\
    \ error at /tmp/tmphaidjlle.pl line 134, at EOF\nExecution of /tmp/tmphaidjlle.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $ones = $size - 1;\n    my $zeros = 0;\n    my $dec = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    my @sorted;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp_vg8whq0.pl line 55, at
    end of line

    syntax error at /tmp/tmp_vg8whq0.pl line 55, at EOF

    Execution of /tmp/tmp_vg8whq0.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_value = 0;\n    foreach my $num (@$arr) {\n\
    \        $num_ones += $num;\n        $decimal_value += $num * log(2);\n    }\n\
    \    foreach my $num (@$arr) {\n        $decimal_value -= $num * log(2);\n   \
    \     push (@sorted_arr, $num) if $num_ones > $num;\n        push (@sorted_arr,\
    \ $num) if $num_ones == $num;\n        push (@sorted_arr, $decimal_value) if $num_ones\
    \ < $num;\n    }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = scalar @$arr;\n\
    \    my $max_ones = $len * $len;\n    my $max_dec = 0;\n    my $max_dec_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k =\
    \ 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n\
    \    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n\
    \    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n\
    \    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n\
    \    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n\
    \    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n\
    \    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n\
    \    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n\
    \    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n\
    \    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n\
    \    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n\
    \    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n\
    \    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n\
    \    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n\
    \    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n\
    \    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n\
    \    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n\
    \    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n\
    \    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n\
    \    my $tmp77 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp3ag278e4.pl line 132,
    at end of line

    syntax error at /tmp/tmp3ag278e4.pl line 132, at EOF

    Execution of /tmp/tmp3ag278e4.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n \
    \   my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n  \
    \  my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n  \
    \  my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n\
    \    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n\
    \    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n\
    \    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n\
    \    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n\
    \    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n\
    \    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n\
    \    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n\
    \    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n\
    \    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n\
    \    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n\
    \    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n\
    \    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n\
    \    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n\
    \    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n\
    \    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n\
    \    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n\
    \    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n\
    \    my $tmp81 = 0;\n    my $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmpvqbqi70r.pl line 94,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmpvqbqi70r.pl line 94, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmpvqbqi70r.pl line 133, at end of line\nsyntax\
    \ error at /tmp/tmpvqbqi70r.pl line 133, at EOF\nExecution of /tmp/tmpvqbqi70r.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_value = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $num_ones_cnt = 0;\n    my $decimal_value_cnt = 0;\n \
    \   my $num_ones_cnt2 = 0;\n    my $decimal_value_cnt2 = 0;\n    my $num_ones_cnt3\
    \ = 0;\n    my $decimal_value_cnt3 = 0;\n    my $num_ones_cnt4 = 0;\n    my $decimal_value_cnt4\
    \ = 0;\n    my $num_ones_cnt5 = 0;\n    my $decimal_value_cnt5 = 0;\n    my $num_ones_cnt6\
    \ = 0;\n    my $decimal_value_cnt6 = 0;\n    my $num_ones_cnt7 = 0;\n    my $decimal_value_cnt7\
    \ = 0;\n    my $num_ones_cnt8 = 0;\n    my $decimal_value_cnt8 = 0;\n    my $num_ones_cnt9\
    \ = 0;\n    my $decimal_value_cnt9 = 0;\n    my $num_ones_cnt10 = 0;\n    my $decimal_value_cnt10\
    \ = 0;\n    my $num_ones_cnt11 = 0;\n    my $decimal_value_cnt11 = 0;\n    my\
    \ $num_ones_cnt12 = 0;\n    my $decimal_value_cnt12 = 0;\n    my $num_ones_cnt13\
    \ = 0;\n    my $decimal_value_cnt13 = 0;\n    my $num_ones_cnt14 = 0;\n    my\
    \ $decimal_value_cnt14 = 0;\n    my $num_ones_cnt15 = 0;\n    my $decimal_value_cnt15\
    \ = 0;\n    my $num_ones_cnt16 = 0;\n    my $decimal_value_cnt16 = 0;\n    my\
    \ $num_ones_cnt17 = 0;\n    my $decimal_value_cnt17 = 0;\n    my $num_ones_cnt18\
    \ = 0;\n    my $decimal_value_cnt18 = 0;\n    my $num_ones_cnt19 = 0;\n    my\
    \ $decimal_value_cnt19 = 0;\n    my $num_ones_cnt20 = 0;\n    my $decimal_value_cnt20\
    \ = 0;\n    my $num_ones_cnt21 = 0;\n    my $decimal_value_cnt21 = 0;\n    my\
    \ $num_ones_cnt22 = 0;\n    my $decimal_value_cnt22 = 0;\n    my $num_ones_cnt23\
    \ = 0;\n    my $decimal_value_cnt23 = 0;\n    my $num_ones_cnt24 = 0;\n    my\
    \ $decimal_value_cnt24 = 0;\n    my $num_ones_cnt25 = 0;\n    my $decimal_value_cnt25\
    \ = 0;\n    my $num_ones_cnt26 = 0;\n    my $decimal_value_cnt26 = 0;\n    my\
    \ $num_ones_cnt27 = 0;\n    my $decimal_value_cnt27 = 0;\n    my $num_\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpg1pdmcqb.pl line 68, at end
    of line

    syntax error at /tmp/tmpg1pdmcqb.pl line 68, near "$num_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpg1pdmcqb.pl line 107, at end
    of line

    syntax error at /tmp/tmpg1pdmcqb.pl line 107, at EOF

    Execution of /tmp/tmpg1pdmcqb.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_val = 0;\n    foreach my $num (@$arr) {\n\
    \        $num_ones += $num;\n        $decimal_val += $num * $num_ones;\n    }\n\
    \    foreach my $num (@$arr) {\n        $num_ones = $num - $num_ones;\n      \
    \  $decimal_val -= $num * $num_ones;\n        push(@sorted_arr, $decimal_val);\n\
    \    }\n    foreach my $num (@$arr) {\n        $num_ones = $num - $num_ones;\n\
    \        $decimal_val -= $num * $num_ones;\n        push(@sorted_arr, $num_ones);\n\
    \    }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $cnt =\
    \ 0;\n    my $cnt2 = 0;\n    my $cnt3 = 0;\n    my $cnt4 = 0;\n    my $cnt5 =\
    \ 0;\n    my $cnt6 = 0;\n    my $cnt7 = 0;\n    my $cnt8 = 0;\n    my $cnt9 =\
    \ 0;\n    my $cnt10 = 0;\n    my $cnt11 = 0;\n    my $cnt12 = 0;\n    my $cnt13\
    \ = 0;\n    my $cnt14 = 0;\n    my $cnt15 = 0;\n    my $cnt16 = 0;\n    my $cnt17\
    \ = 0;\n    my $cnt18 = 0;\n    my $cnt19 = 0;\n    my $cnt20 = 0;\n    my $cnt21\
    \ = 0;\n    my $cnt22 = 0;\n    my $cnt23 = 0;\n    my $cnt24 = 0;\n    my $cnt25\
    \ = 0;\n    my $cnt26 = 0;\n    my $cnt27 = 0;\n    my $cnt28 = 0;\n    my $cnt29\
    \ = 0;\n    my $cnt30 = 0;\n    my $cnt31 = 0;\n    my $cnt32 = 0;\n    my $cnt33\
    \ = 0;\n    my $cnt34 = 0;\n    my $cnt35 = 0;\n    my $cnt36 = 0;\n    my $cnt37\
    \ = 0;\n    my $cnt38 = 0;\n    my $cnt39 = 0;\n    my $cnt40 = 0;\n    my $cnt41\
    \ = 0;\n    my $cnt42 = 0;\n    my $cnt43 = 0;\n    my $cnt44 = 0;\n    my $cnt45\
    \ = 0;\n    my $cnt46 = 0;\n    my $cnt47 = 0;\n    my $cnt48 = 0;\n    my $cnt49\
    \ = 0;\n    my $cnt50 = 0;\n    my $cnt51 = 0;\n    my $cnt52 = 0;\n    my $cnt53\
    \ = 0;\n    my $cnt54 = 0;\n    my $cnt55 = 0;\n    my $cnt56 = 0;\n    my $cnt57\
    \ = 0;\n    my $cnt58 = 0;\n    my $cnt59 = 0;\n    my $cnt60 = 0;\n    my $cnt61\
    \ = 0;\n    my $cnt62 = 0;\n    my $cnt63 = 0;\n    my $cnt64 = 0;\n    my $cnt65\
    \ = 0;\n    my $cnt66 = 0;\n    my $cnt67 = 0;\n    my $cnt68 = 0;\n    my $cnt69\
    \ = 0;\n    my $cnt70 = 0;\n    my $cnt71 = 0;\n    my $cnt72 = 0;\n    my $cnt73\
    \ = 0;\n    my $cnt74 = 0;\n    my $cnt75 = 0;\n    my $cnt76 = 0;\n    my $cnt77\
    \ = 0;\n    my $cnt78 = 0;\n    my $cnt79 = 0;\n    my $cnt80 = 0;\n    my $cnt81\
    \ = 0;\n    my $cnt82 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmps8vvmldw.pl line 134,
    at end of line

    syntax error at /tmp/tmps8vvmldw.pl line 134, at EOF

    Execution of /tmp/tmps8vvmldw.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n\
    \    my @tmp;\n    my @ret;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n   \
    \ my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my\
    \ $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n  \
    \  my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp7g6hrezz.pl line 97, at end
    of line

    syntax error at /tmp/tmp7g6hrezz.pl line 97, near "$tmp83

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp7g6hrezz.pl line 136, at end
    of line

    syntax error at /tmp/tmp7g6hrezz.pl line 136, at EOF

    Execution of /tmp/tmp7g6hrezz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted_arr;\n    my\
    \ $num_ones = 0;\n    my $decimal_val = 0;\n    foreach my $num (@$arr) {\n  \
    \      $num_ones += $num;\n        $decimal_val += $num;\n    }\n    foreach my\
    \ $num (@$arr) {\n        if ($num_ones == $num) {\n            push(@sorted_arr,\
    \ $decimal_val);\n            $num_ones = 0;\n            $decimal_val = 0;\n\
    \        } else {\n            push(@sorted_arr, $num);\n            $num_ones\
    \ = 0;\n            $decimal_val = 0;\n        }\n    }\n    return @sorted_arr;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n\
    \    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n \
    \   my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n\
    \    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n\
    \    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n\
    \    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n\
    \    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n\
    \    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n\
    \    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n\
    \    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n\
    \    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n\
    \    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n\
    \    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n\
    \    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n\
    \    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n\
    \    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n\
    \    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n\
    \    my $tmp82;\n    my $tmp83;\n    my $tmp84;\n    \nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpu_tnuu2w.pl line 136,
    at end of line

    syntax error at /tmp/tmpu_tnuu2w.pl line 136, at EOF

    Execution of /tmp/tmpu_tnuu2w.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my($num_ones);\n    my($decimal_value);\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpmhmspeb2.pl line 49, at
    end of line

    syntax error at /tmp/tmpmhmspeb2.pl line 49, at EOF

    Execution of /tmp/tmpmhmspeb2.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = scalar @$arr;\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n\
    \    my @res;\n    my $cmp;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmp2fmseyx7.pl line 94,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmp2fmseyx7.pl line 94, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmp2fmseyx7.pl line 133, at end of line\nsyntax\
    \ error at /tmp/tmp2fmseyx7.pl line 133, at EOF\nExecution of /tmp/tmp2fmseyx7.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $count = 0;\n    foreach my $num (@$arr) {\n  \
    \      if ($num == 1) {\n            $count++;\n        }\n        else {\n  \
    \          push(@sorted, $count);\n            $count = 0;\n        }\n    }\n\
    \    push(@sorted, $count);\n    foreach my $num (@$arr) {\n        if ($num ==\
    \ 1) {\n            $count++;\n        }\n        else {\n            if ($count\
    \ > $sorted[$j]) {\n                $j++;\n            }\n            $count =\
    \ 0;\n        }\n    }\n    push(@sorted, $count);\n    foreach my $num (@$arr)\
    \ {\n        if ($num == 1) {\n            $count++;\n        }\n        else\
    \ {\n            if ($count > $sorted[$j]) {\n                $j++;\n        \
    \    }\n            $count = 0;\n        }\n    }\n    foreach my $num (@$arr)\
    \ {\n        if ($num == 1) {\n            $count++;\n        }\n        else\
    \ {\n            if ($count > $sorted[$j]) {\n                $j++;\n        \
    \    }\n            $count = 0;\n        }\n    }\n    foreach my $num (@$arr)\
    \ {\n        if ($num == 1) {\n            $count++;\n        }\n        else\
    \ {\n            if ($count > $sorted[$j]) {\n                $j++;\n        \
    \    }\n            $count = 0;\n        }\n    }\n    foreach my $num (@$arr)\
    \ {\n        if ($num == 1) {\n            $count++;\n        }\n        else\
    \ {\n            if ($count > $sorted[$j]) {\n                $j++;\n        \
    \    }\n            $count = 0;\n        }\n    }\n    foreach my $num (@$arr)\
    \ {\n        if ($num == 1) {\n            $count++;\n        }\n        else\
    \ {\n            if ($count > $sorted[$j]) {\n                $j++;\n        \
    \    }\n            $count = 0;\n        }\n    }\n    foreach my $num (@$arr)\
    \ {\n        if ($num == 1) {\n            $count++;\n        }\n        else\
    \ {\n            if ($count > $sorted[$j]) {\n                $j++;\n        \
    \    }\n            $count = 0;\n        }\n    }\n    foreach my $num (@$arr)\
    \ {\n        if ($num == 1) {\n            $count++;\n        }\n        else\
    \ {\n            if ($count > $sorted[$j]) {\n                $j++;\n        \
    \    }\n            $count = 0;\n        }\n    }\n    foreach my $num (@$arr)\
    \ {\n        if ($num == 1) {\n            $count++;\n        }\n        else\
    \ {\n            if ($count > $sorted[$j]) {\n                $j++;\n        \
    \    }\n            $count = 0;\n        }\n    }\n    foreach my $num\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmprf9wyzv5.pl line 122, at end
    of line

    syntax error at /tmp/tmprf9wyzv5.pl line 122, near "$num

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmprf9wyzv5.pl line 161, at end
    of line

    syntax error at /tmp/tmprf9wyzv5.pl line 161, at EOF

    Execution of /tmp/tmprf9wyzv5.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted);\n    my $ones\
    \ = 0;\n    my $dec = 0;\n    foreach my $num (@$arr) {\n        if ($num == 1)\
    \ {\n            $ones++;\n        }\n        else {\n            $dec += $num;\n\
    \        }\n    }\n    if ($ones > 0) {\n        foreach my $num (@$arr) {\n \
    \           if ($num == 1) {\n                push (@sorted, $num);\n        \
    \    }\n        }\n        foreach my $num (@$arr) {\n            if ($num ==\
    \ 1) {\n                push (@sorted, $dec);\n            }\n        }\n    }\n\
    \    else {\n        foreach my $num (@$arr) {\n            if ($num == 1) {\n\
    \                push (@sorted, $dec);\n            }\n        }\n        foreach\
    \ my $num (@$arr) {\n            if ($num == 1) {\n                push (@sorted,\
    \ $num);\n            }\n        }\n    }\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $count\
    \ = 0;\n    my $ones = 0;\n    my $dec = 0;\n    my $temp = 0;\n    foreach my\
    \ $num (@$arr) {\n        $count++;\n        $ones = $num % 2;\n        $dec =\
    \ $num / 2;\n        $tmp = $ones;\n        $j = 0;\n        foreach my $i (0\
    \ .. $count-1) {\n            $j++;\n            $temp = $arr[$i];\n         \
    \   $arr[$i] = $arr[$j];\n            $arr[$j] = $temp;\n        }\n        $arr[$i]\
    \ = $dec;\n    }\n    foreach my $num (@$arr) {\n        $count++;\n        $ones\
    \ = $num % 2;\n        $dec = $num / 2;\n        $tmp = $ones;\n        $j = 0;\n\
    \        foreach my $i (0 .. $count-1) {\n            $j++;\n            $temp\
    \ = $arr[$i];\n            $arr[$i] = $arr[$j];\n            $arr[$j] = $temp;\n\
    \        }\n        $arr[$i] = $dec;\n    }\n    foreach my $num (@$arr) {\n \
    \       $count++;\n        $ones = $num % 2;\n        $dec = $num / 2;\n     \
    \   $tmp = $ones;\n        $j = 0;\n        foreach my $i (0 .. $count-1) {\n\
    \            $j++;\n            $temp = $arr[$i];\n            $arr[$i] = $arr[$j];\n\
    \            $arr[$j] = $temp;\n        }\n        $arr[$i] = $dec;\n    }\n \
    \   foreach my $num (@$arr) {\n        $count++;\n        $ones = $num % 2;\n\
    \        $dec = $num / 2;\n        $tmp = $ones;\n        $j = 0;\n        foreach\
    \ my $i (0 .. $count-1) {\n            $j++;\n            $temp = $arr[$i];\n\
    \            $arr[$i] = $arr[$j];\n            $arr[$j] = $temp;\n        }\n\
    \        $arr[$i] = $dec;\n    }\n    foreach my $num (@$arr) {\n        $count++;\n\
    \        $ones = $num % 2;\n        $dec = $num / 2;\n        $tmp = $ones;\n\
    \        $j = 0;\n        foreach my $i (0 .. $count-1) {\n            $j++;\n\
    \            $temp = $arr[$i];\n            $arr[$i] = $arr[$j];\n           \
    \ $arr[$j] = $temp;\n        }\n        $arr[$i] = $dec;\n\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpbso6_4mc.pl line 125,
    at end of line

    syntax error at /tmp/tmpbso6_4mc.pl line 125, at EOF

    Execution of /tmp/tmpbso6_4mc.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $cnt = 0;\n    my $tmp = 0;\n    my $tmp2\
    \ = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6\
    \ = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10\
    \ = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14\
    \ = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18\
    \ = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22\
    \ = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26\
    \ = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30\
    \ = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34\
    \ = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38\
    \ = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42\
    \ = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46\
    \ = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50\
    \ = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54\
    \ = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58\
    \ = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62\
    \ = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66\
    \ = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70\
    \ = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74\
    \ = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78\
    \ = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81 = 0;\n    my $tmp82\
    \ = 0;\n    my $tmp83 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp6ibczn2g.pl line 133,
    at end of line

    syntax error at /tmp/tmp6ibczn2g.pl line 133, at EOF

    Execution of /tmp/tmp6ibczn2g.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $ones = $size - 1;\n    my $zeros = 0;\n    my $dec = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n \
    \   my $tmp5;\n    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n  \
    \  my $tmp10;\n    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n\
    \    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n\
    \    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n\
    \    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n\
    \    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n\
    \    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n\
    \    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n\
    \    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n\
    \    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n\
    \    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n\
    \    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n\
    \    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n\
    \    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n\
    \    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n\
    \    my $tmp80;\n    my $tmp81;\n    my $tmp82;\n    my $tmp83;\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpklqsvmnt.pl line 135,
    at end of line

    syntax error at /tmp/tmpklqsvmnt.pl line 135, at EOF

    Execution of /tmp/tmpklqsvmnt.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $temp2 = 0;\n    my $temp3 = 0;\n    my $temp4\
    \ = 0;\n    my $temp5 = 0;\n    my $temp6 = 0;\n    my $temp7 = 0;\n    my $temp8\
    \ = 0;\n    my $temp9 = 0;\n    my $temp10 = 0;\n    my $temp11 = 0;\n    my $temp12\
    \ = 0;\n    my $temp13 = 0;\n    my $temp14 = 0;\n    my $temp15 = 0;\n    my\
    \ $temp16 = 0;\n    my $temp17 = 0;\n    my $temp18 = 0;\n    my $temp19 = 0;\n\
    \    my $temp20 = 0;\n    my $temp21 = 0;\n    my $temp22 = 0;\n    my $temp23\
    \ = 0;\n    my $temp24 = 0;\n    my $temp25 = 0;\n    my $temp26 = 0;\n    my\
    \ $temp27 = 0;\n    my $temp28 = 0;\n    my $temp29 = 0;\n    my $temp30 = 0;\n\
    \    my $temp31 = 0;\n    my $temp32 = 0;\n    my $temp33 = 0;\n    my $temp34\
    \ = 0;\n    my $temp35 = 0;\n    my $temp36 = 0;\n    my $temp37 = 0;\n    my\
    \ $temp38 = 0;\n    my $temp39 = 0;\n    my $temp40 = 0;\n    my $temp41 = 0;\n\
    \    my $temp42 = 0;\n    my $temp43 = 0;\n    my $temp44 = 0;\n    my $temp45\
    \ = 0;\n    my $temp46 = 0;\n    my $temp47 = 0;\n    my $temp48 = 0;\n    my\
    \ $temp49 = 0;\n    my $temp50 = 0;\n    my $temp51 = 0;\n    my $temp52 = 0;\n\
    \    my $temp53 = 0;\n    my $temp54 = 0;\n    my $temp55 = 0;\n    my $temp56\
    \ = 0;\n    my $temp57 = 0;\n    my $temp58 = 0;\n    my $temp59 = 0;\n    my\
    \ $temp60 = 0;\n    my $temp61 = 0;\n    my $temp62 = 0;\n    my $temp63 = 0;\n\
    \    my $temp64 = 0;\n    my $temp65 = 0;\n    my $temp66 = 0;\n    my $temp67\
    \ = 0;\n    my $temp68 = 0;\n    my $temp69 = 0;\n    my $temp70 = 0;\n    my\
    \ $temp71 = 0;\n    my $temp72 = 0;\n    my $temp73 = 0;\n    my $temp74 = 0;\n\
    \    my $temp75 = 0;\n    my $temp76 = 0;\n    my $temp77 = 0;\n    my $temp78\
    \ = 0;\n    my $temp79 = 0;\n    my $temp80 = 0;\n    my $temp81 = 0;\n\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp37v793px.pl line 134,
    at end of line

    syntax error at /tmp/tmp37v793px.pl line 134, at EOF

    Execution of /tmp/tmp37v793px.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $len = @$arr;\n    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $tmp;\n    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n\
    \    my $tmp6;\n    my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n\
    \    my $tmp11;\n    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n\
    \    my $tmp16;\n    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n\
    \    my $tmp21;\n    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n\
    \    my $tmp26;\n    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n\
    \    my $tmp31;\n    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n\
    \    my $tmp36;\n    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n\
    \    my $tmp41;\n    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n\
    \    my $tmp46;\n    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n\
    \    my $tmp51;\n    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n\
    \    my $tmp56;\n    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n\
    \    my $tmp61;\n    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n\
    \    my $tmp66;\n    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n\
    \    my $tmp71;\n    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n\
    \    my $tmp76;\n    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n\
    \    my $tmp81;\n    my $tmp82;\n    my $tmp83;\n    \nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp3gu2uoe1.pl line 136,
    at end of line

    syntax error at /tmp/tmp3gu2uoe1.pl line 136, at EOF

    Execution of /tmp/tmp3gu2uoe1.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp\
    \ = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5\
    \ = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9\
    \ = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13\
    \ = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17\
    \ = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21\
    \ = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25\
    \ = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29\
    \ = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33\
    \ = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37\
    \ = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41\
    \ = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45\
    \ = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49\
    \ = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53\
    \ = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57\
    \ = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61\
    \ = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65\
    \ = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69\
    \ = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73\
    \ = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77\
    \ = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81\
    \ = 0;\n    my $tmp82\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpk6qn4hmd.pl line 94, at end
    of line

    syntax error at /tmp/tmpk6qn4hmd.pl line 94, near "$tmp82

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpk6qn4hmd.pl line 133, at end
    of line

    syntax error at /tmp/tmpk6qn4hmd.pl line 133, at EOF

    Execution of /tmp/tmpk6qn4hmd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n\
    \    my @sorted;\n    my @sorted_dec;\n    my $tmp_dec;\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpbf1iaorp.pl line 55, at
    end of line

    syntax error at /tmp/tmpbf1iaorp.pl line 55, at EOF

    Execution of /tmp/tmpbf1iaorp.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $tmp = 0;\n    my $cnt =\
    \ 0;\n    my $cnt2 = 0;\n    my $cnt3 = 0;\n    my $cnt4 = 0;\n    my $cnt5 =\
    \ 0;\n    my $cnt6 = 0;\n    my $cnt7 = 0;\n    my $cnt8 = 0;\n    my $cnt9 =\
    \ 0;\n    my $cnt10 = 0;\n    my $cnt11 = 0;\n    my $cnt12 = 0;\n    my $cnt13\
    \ = 0;\n    my $cnt14 = 0;\n    my $cnt15 = 0;\n    my $cnt16 = 0;\n    my $cnt17\
    \ = 0;\n    my $cnt18 = 0;\n    my $cnt19 = 0;\n    my $cnt20 = 0;\n    my $cnt21\
    \ = 0;\n    my $cnt22 = 0;\n    my $cnt23 = 0;\n    my $cnt24 = 0;\n    my $cnt25\
    \ = 0;\n    my $cnt26 = 0;\n    my $cnt27 = 0;\n    my $cnt28 = 0;\n    my $cnt29\
    \ = 0;\n    my $cnt30 = 0;\n    my $cnt31 = 0;\n    my $cnt32 = 0;\n    my $cnt33\
    \ = 0;\n    my $cnt34 = 0;\n    my $cnt35 = 0;\n    my $cnt36 = 0;\n    my $cnt37\
    \ = 0;\n    my $cnt38 = 0;\n    my $cnt39 = 0;\n    my $cnt40 = 0;\n    my $cnt41\
    \ = 0;\n    my $cnt42 = 0;\n    my $cnt43 = 0;\n    my $cnt44 = 0;\n    my $cnt45\
    \ = 0;\n    my $cnt46 = 0;\n    my $cnt47 = 0;\n    my $cnt48 = 0;\n    my $cnt49\
    \ = 0;\n    my $cnt50 = 0;\n    my $cnt51 = 0;\n    my $cnt52 = 0;\n    my $cnt53\
    \ = 0;\n    my $cnt54 = 0;\n    my $cnt55 = 0;\n    my $cnt56 = 0;\n    my $cnt57\
    \ = 0;\n    my $cnt58 = 0;\n    my $cnt59 = 0;\n    my $cnt60 = 0;\n    my $cnt61\
    \ = 0;\n    my $cnt62 = 0;\n    my $cnt63 = 0;\n    my $cnt64 = 0;\n    my $cnt65\
    \ = 0;\n    my $cnt66 = 0;\n    my $cnt67 = 0;\n    my $cnt68 = 0;\n    my $cnt69\
    \ = 0;\n    my $cnt70 = 0;\n    my $cnt71 = 0;\n    my $cnt72 = 0;\n    my $cnt73\
    \ = 0;\n    my $cnt74 = 0;\n    my $cnt75 = 0;\n    my $cnt76 = 0;\n    my $cnt77\
    \ = 0;\n    my $cnt78 = 0;\n    my $cnt79 = 0;\n    my $cnt80 = 0;\n    my $cnt81\
    \ = 0;\n    my $cnt82 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmps8vvmldw.pl line 134,
    at end of line

    syntax error at /tmp/tmps8vvmldw.pl line 134, at EOF

    Execution of /tmp/tmps8vvmldw.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_dec_index = 0;\n    my\
    \ $max_dec_value = 0;\n    my $max_dec_value_pos = 0;\n    my $max_dec_value_neg\
    \ = 0;\n    my $max_dec_value_neg_index = 0;\n    my $max_dec_value_neg2_index\
    \ = 0;\n    my $max_dec_value_neg3_index = 0;\n    my $max_dec_value_neg4_index\
    \ = 0;\n    my $max_dec_value_neg5_index = 0;\n    my $max_dec_value_neg6_index\
    \ = 0;\n    my $max_dec_value_neg7_index = 0;\n    my $max_dec_value_neg8_index\
    \ = 0;\n    my $max_dec_value_neg9_index = 0;\n    my $max_dec_value_neg10_index\
    \ = 0;\n    my $max_dec_value_neg11_index = 0;\n    my $max_dec_value_neg12_index\
    \ = 0;\n    my $max_dec_value_neg13_index = 0;\n    my $max_dec_value_neg14_index\
    \ = 0;\n    my $max_dec_value_neg15_index = 0;\n    my $max_dec_value_neg16_index\
    \ = 0;\n    my $max_dec_value_neg17_index = 0;\n    my $max_dec_value_neg18_index\
    \ = 0;\n    my $max_dec_value_neg19_index = 0;\n    my $max_dec_value_neg20_index\
    \ = 0;\n    my $max_dec_value_neg21_index = 0;\n    my $max_dec_value_neg22_index\
    \ = 0;\n    my $max_dec_value_neg23_index = 0;\n    my $max_dec_value_neg24_index\
    \ = 0;\n    my $max_dec_value_neg25_index = 0;\n    my $max_dec_value_neg26_index\
    \ = 0;\n    my $max_dec_value_neg27_index = 0;\n    my $max_dec_value_neg28_index\
    \ = 0;\n    my $max_dec_value_neg29_index = 0;\n    my $max_dec_value_neg30_index\
    \ = 0;\n    my $max_dec_value_neg31_index = 0;\n    my $max_dec_value_neg32_index\
    \ = 0;\n    my $max_dec_value_neg33_index = 0;\n    my $max_dec_value_neg34_index\
    \ = 0;\n    my $max_dec_value_neg35_index = 0;\n    my $max_dec_value_neg36_index\
    \ = 0;\n    my $max_dec_value_neg37_index = 0;\n    my $max_dec_value_neg38_index\
    \ = 0;\n    my $max_dec_value_neg39_index = 0;\n    my $max_dec_value_neg40_index\
    \ = 0;\n    my $max_dec_value_neg41_index = 0;\n    my $max_dec_value_neg42_index\
    \ = 0;\n    my $max_dec_value_neg43_index = 0;\n    my $max_dec_value_neg44_index\
    \ = 0;\n    my $max_dec_value_neg45_index = 0;\n    my $max_dec_value_neg46_index\
    \ = 0;\n    my $max_dec_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpu_c966cj.pl line 61, at end
    of line

    syntax error at /tmp/tmpu_c966cj.pl line 61, near "$max_dec_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpu_c966cj.pl line 100, at end
    of line

    syntax error at /tmp/tmpu_c966cj.pl line 100, at EOF

    Execution of /tmp/tmpu_c966cj.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my($i, $j, $temp, $num_ones);\n\
    \    my $len = @$arr;\n    my $num_ones = 0;\n    my $max_num_ones = 0;\n    my\
    \ $max_num_zeros = 0;\n    my $max_num_zeros_pos = 0;\n    my $max_num_ones_pos\
    \ = 0;\n    my $max_num_zeros_neg = 0;\n    my $max_num_ones_neg = 0;\n    my\
    \ $max_num_zeros_neg2 = 0;\n    my $max_num_ones_neg2 = 0;\n    my $max_num_zeros_neg3\
    \ = 0;\n    my $max_num_ones_neg3 = 0;\n    my $max_num_zeros_neg4 = 0;\n    my\
    \ $max_num_ones_neg4 = 0;\n    my $max_num_zeros_neg5 = 0;\n    my $max_num_ones_neg5\
    \ = 0;\n    my $max_num_zeros_neg6 = 0;\n    my $max_num_ones_neg6 = 0;\n    my\
    \ $max_num_zeros_neg7 = 0;\n    my $max_num_ones_neg7 = 0;\n    my $max_num_zeros_neg8\
    \ = 0;\n    my $max_num_ones_neg8 = 0;\n    my $max_num_zeros_neg9 = 0;\n    my\
    \ $max_num_ones_neg9 = 0;\n    my $max_num_zeros_neg10 = 0;\n    my $max_num_ones_neg10\
    \ = 0;\n    my $max_num_zeros_neg11 = 0;\n    my $max_num_ones_neg11 = 0;\n  \
    \  my $max_num_zeros_neg12 = 0;\n    my $max_num_ones_neg12 = 0;\n    my $max_num_zeros_neg13\
    \ = 0;\n    my $max_num_ones_neg13 = 0;\n    my $max_num_zeros_neg14 = 0;\n  \
    \  my $max_num_ones_neg14 = 0;\n    my $max_num_zeros_neg15 = 0;\n    my $max_num_ones_neg15\
    \ = 0;\n    my $max_num_zeros_neg16 = 0;\n    my $max_num_ones_neg16 = 0;\n  \
    \  my $max_num_zeros_neg17 = 0;\n    my $max_num_ones_neg17 = 0;\n    my $max_num_zeros_neg18\
    \ = 0;\n    my $max_num_ones_neg18 = 0;\n    my $max_num_zeros_neg19 = 0;\n  \
    \  my $max_num_ones_neg19 = 0;\n    my $max_num_zeros_neg20 = 0;\n    my $max_num_ones_neg20\
    \ = 0;\n    my $max_num_zeros_neg21 = 0;\n    my $max_num_ones_neg21 = 0;\n  \
    \  my $max_num_zeros_neg22 = 0;\n    my $max_num_ones_neg22 = 0;\n    my $max_num_zeros_neg23\
    \ = 0;\n    my $max_num_ones_neg23 = 0;\n    my $max_\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp0_iyu2rk.pl line 61, at end
    of line

    syntax error at /tmp/tmp0_iyu2rk.pl line 61, near "$max_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp0_iyu2rk.pl line 100, at end
    of line

    syntax error at /tmp/tmp0_iyu2rk.pl line 100, at EOF

    Execution of /tmp/tmp0_iyu2rk.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $max_ones = 0;\n    my $max_dec = 0;\n    my $i = 0;\n    my $j = 0;\n  \
    \  my $k = 0;\n    my $tmp = 0;\n    my $count = 0;\n    my $tmp2 = 0;\n    my\
    \ $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my\
    \ $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my\
    \ $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n  \
    \  my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n\
    \    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n\
    \    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n\
    \    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n\
    \    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n\
    \    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n\
    \    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n\
    \    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n\
    \    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n\
    \    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n\
    \    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n\
    \    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n\
    \    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n\
    \    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n\
    \    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n\
    \    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n\
    \    my $tmp79 = 0;\n    my $tmp80 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2fme9pon.pl line 134,
    at end of line

    syntax error at /tmp/tmp2fme9pon.pl line 134, at EOF

    Execution of /tmp/tmp2fme9pon.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted_arr;\n    my\
    \ $num_ones = 0;\n    my $decimal_val = 0;\n    foreach my $num (@$arr) {\n  \
    \      $num_ones += $num;\n        $decimal_val += $num * log(2);\n    }\n   \
    \ foreach my $num (@$arr) {\n        if ($num_ones == $num) {\n            push(@sorted_arr,\
    \ $decimal_val);\n        } else {\n            push(@sorted_arr, $num);\n   \
    \     }\n        $num_ones = $num;\n        $decimal_val = $num * log(2);\n  \
    \  }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my($i, $j, $temp, $n);\n\
    \    \n    $n = $#arr + 1;\n    \n    for ($i = 0; $i < $n; $i++) {\n        $temp\
    \ = 0;\n        for ($j = $i; $j < $n; $j++) {\n            if ($arr[$j] & 1)\
    \ {\n                $temp += $arr[$j];\n                last if $temp > $arr[$i];\n\
    \            }\n        }\n        $arr[$i] = $temp;\n    }\n    \n    return\
    \ $arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $num_zeros = 0;\n    foreach my $num (@$arr) {\n \
    \       if ($num eq 1) {\n            $num_ones++;\n        } else {\n       \
    \     $num_zeros++;\n        }\n    }\n    if ($num_zeros > $num_ones) {\n   \
    \     foreach my $num (@$arr) {\n            if ($num eq 1) {\n              \
    \  push(@sorted_arr, $num);\n            }\n        }\n        foreach my $num\
    \ (@$arr) {\n            if ($num eq 0) {\n                push(@sorted_arr, $num);\n\
    \            }\n        }\n    } else {\n        foreach my $num (@$arr) {\n \
    \           if ($num eq 1) {\n                push(@sorted_arr, $num);\n     \
    \       }\n        }\n        foreach my $num (@$arr) {\n            if ($num\
    \ eq 0) {\n                push(@sorted_arr, $num);\n            }\n        }\n\
    \    }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $ones = 0;\n    my $decimal = 0;\n    my $i = 0;\n    my $j = 0;\n    my\
    \ $size = @$arr;\n    foreach my $num (@$arr) {\n        $ones += $num;\n    \
    \    $decimal += $num * $num;\n    }\n    foreach my $num (@$arr) {\n        if\
    \ ($ones == $num) {\n            push(@sorted_arr, $decimal);\n            $ones\
    \ = 0;\n            $decimal = 0;\n        }\n        elsif ($ones > $num) {\n\
    \            push(@sorted_arr, $decimal);\n            $ones = 0;\n          \
    \  $decimal = 0;\n        }\n        else {\n            $ones = 0;\n        \
    \    $decimal = 0;\n        }\n    }\n    foreach my $num (@$arr) {\n        if\
    \ ($ones == $num) {\n            push(@sorted_arr, $decimal);\n            $ones\
    \ = 0;\n            $decimal = 0;\n        }\n        elsif ($ones > $num) {\n\
    \            push(@sorted_arr, $decimal);\n            $ones = 0;\n          \
    \  $decimal = 0;\n        }\n        else {\n            $ones = 0;\n        \
    \    $decimal = 0;\n        }\n    }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $temp;\n\
    \    my @res;\n    for(my $k = 0; $k < $len; $k++) {\n        $ones = $arr->[$k]\
    \ & 1;\n        $dec = $arr->[$k] >> 1;\n        if($ones == 1) {\n          \
    \  $temp = $dec;\n            $arr->[$k] = $arr->[$k] ^ 1;\n            $arr->[$j]\
    \ = $temp;\n            $j++;\n        }\n    }\n    for(; $i < $len; $i++) {\n\
    \        $ones = $arr->[$i] & 1;\n        $dec = $arr->[$i] >> 1;\n        if($ones\
    \ == 1) {\n            $temp = $dec;\n            $arr->[$i] = $arr->[$i] ^ 1;\n\
    \            $arr->[$j] = $temp;\n            $j++;\n        }\n    }\n    for(;\
    \ $j < $len; $j++) {\n        $arr->[$j] = $arr->[$j] ^ 1;\n    }\n    for(; $i\
    \ < $len; $i++) {\n        $arr->[$i] = $arr->[$i] ^ 1;\n    }\n    for(; $j <\
    \ $len; $j++) {\n        $arr->[$j] = $arr->[$j] ^ 1;\n    }\n    for(; $i < $len;\
    \ $i++) {\n        $arr->[$i] = $arr->[$i] ^ 1;\n    }\n    for(; $j < $len; $j++)\
    \ {\n        $arr->[$j] = $arr->[$j] ^ 1;\n    }\n    for(; $i < $len; $i++) {\n\
    \        $arr->[$i] = $arr->[$i] ^ 1;\n    }\n    for(; $j < $len; $j++) {\n \
    \       $arr->[$j] = $arr->[$j] ^ 1;\n    }\n    for(; $i < $len; $i++) {\n  \
    \      $arr->[$i] = $arr->[$i] ^ 1;\n    }\n    for(; $j < $len; $j++) {\n   \
    \     $arr->[$j] = $arr->[$j] ^ 1;\n    }\n    for(; $i < $len; $i++) {\n    \
    \    $arr->[$i] = $arr->[$i] ^ 1;\n    }\n    for(; $j < $len; $j++) {\n     \
    \   $arr->[$j] = $arr->[$j] ^ 1;\n    }\n    for(; $i < $len; $i++) {\n      \
    \  $arr\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmprr5rw2fh.pl line 69, at end
    of line

    syntax error at /tmp/tmprr5rw2fh.pl line 69, near "$arr

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmprr5rw2fh.pl line 108, at end
    of line

    syntax error at /tmp/tmprr5rw2fh.pl line 108, at EOF

    Execution of /tmp/tmprr5rw2fh.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    my @sorted;\n\
    \    my @sorted_dec;\n    my @sorted_bin;\n    my $ones = 0;\n    my $dec = 0;\n\
    \    my $bin = 0;\n    my $bin_count = 0;\n    my $bin_dec = 0;\n    my $bin_bin\
    \ = 0;\n    my $bin_bin_count = 0;\n    my $bin_bin_dec = 0;\n    my $bin_bin_bin\
    \ = 0;\n    my $bin_bin_bin_count = 0;\n    my $bin_bin_bin_dec = 0;\n    my $bin_bin_bin_bin\
    \ = 0;\n    my $bin_bin_bin_bin_count = 0;\n    my $bin_bin_bin_bin_dec = 0;\n\
    \    my $bin_bin_bin_bin_bin = 0;\n    my $bin_bin_bin_bin_bin_count = 0;\n  \
    \  my $bin_bin_bin_bin_bin_dec = 0;\n    my $bin_bin_bin_bin_bin_bin = 0;\n  \
    \  my $bin_bin_bin_bin_bin_bin_count = 0;\n    my $bin_bin_bin_bin_bin_bin_dec\
    \ = 0;\n    my $bin_bin_bin_bin_bin_bin = 0;\n    my $bin_bin_bin_bin_bin_bin_count\
    \ = 0;\n    my $bin_bin_bin_bin_bin_bin_dec = 0;\n    my $bin_bin_bin_bin_bin_bin\
    \ = 0;\n    my $bin_bin_bin_bin_bin_bin_count = 0;\n    my $bin_bin_bin_bin_bin_bin_dec\
    \ = 0;\n    my $bin_bin_bin_bin_bin_bin_bin = 0;\n    my $bin_bin_bin_bin_bin_bin_bin_count\
    \ = 0;\n    my $bin_bin_bin_bin_bin_bin_dec = 0;\n    my $bin_bin_bin_bin_bin_bin\
    \ = 0;\n    my $bin_bin_bin_bin_bin_bin_count = 0;\n    my $bin_bin_bin_bin_bin_bin_dec\
    \ = 0;\n    my $bin_bin_bin_bin_bin_bin = 0;\n    my $bin_bin_bin_bin_bin_bin_count\
    \ = 0;\n    my $bin_bin_bin_bin_bin_bin_dec = 0;\n    my $bin_bin_bin_bin_bin_bin\
    \ = 0;\n    my $bin_bin_bin_bin_bin_bin_count = 0;\n    my $bin_bin_bin_bin_bin_bin_dec\
    \ = 0;\n    my $bin_bin_bin_bin_bin_bin = 0;\n    my $bin_bin_bin_bin_bin_bin_count\
    \ = 0;\n    my $bin_bin_bin_bin_bin_bin_dec = 0;\n    my $bin_bin_bin_bin_bin_bin\
    \ = 0;\n    my $bin_bin_bin_bin_bin_bin_count = 0;\n    my $bin_bin_bin_bin_bin_bin_dec\
    \ = 0;\n    my $bin_bin_bin_bin_bin_bin = 0;\n    my $bin_bin_bin_bin_bin_bin_count\
    \ = 0;\n    my $bin_bin_bin_bin_bin_bin_dec = 0;\n    my $bin_bin_bin_bin_bin_bin\
    \ = 0;\n    my $bin_bin_bin_bin_bin_bin_count = 0;\n    my $bin_bin_bin_bin_bin_bin_dec\
    \ = 0;\n    my $bin_bin_bin_bin_\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpxp7uqqfk.pl line 66, at end
    of line

    syntax error at /tmp/tmpxp7uqqfk.pl line 66, near "$bin_bin_bin_bin_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpxp7uqqfk.pl line 105, at end
    of line

    syntax error at /tmp/tmpxp7uqqfk.pl line 105, at EOF

    Execution of /tmp/tmpxp7uqqfk.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted_arr;\n    my\
    \ $max_count = 0;\n    my $max_dec = 0;\n    my $max_bin = 0;\n    my $max_bin2\
    \ = 0;\n    my $max_bin3 = 0;\n    my $max_bin4 = 0;\n    my $max_bin5 = 0;\n\
    \    my $max_bin6 = 0;\n    my $max_bin7 = 0;\n    my $max_bin8 = 0;\n    my $max_bin9\
    \ = 0;\n    my $max_bin10 = 0;\n    my $max_bin11 = 0;\n    my $max_bin12 = 0;\n\
    \    my $max_bin13 = 0;\n    my $max_bin14 = 0;\n    my $max_bin15 = 0;\n    my\
    \ $max_bin16 = 0;\n    my $max_bin17 = 0;\n    my $max_bin18 = 0;\n    my $max_bin19\
    \ = 0;\n    my $max_bin20 = 0;\n    my $max_bin21 = 0;\n    my $max_bin22 = 0;\n\
    \    my $max_bin23 = 0;\n    my $max_bin24 = 0;\n    my $max_bin25 = 0;\n    my\
    \ $max_bin26 = 0;\n    my $max_bin27 = 0;\n    my $max_bin28 = 0;\n    my $max_bin29\
    \ = 0;\n    my $max_bin30 = 0;\n    my $max_bin31 = 0;\n    my $max_bin32 = 0;\n\
    \    my $max_bin33 = 0;\n    my $max_bin34 = 0;\n    my $max_bin35 = 0;\n    my\
    \ $max_bin36 = 0;\n    my $max_bin37 = 0;\n    my $max_bin38 = 0;\n    my $max_bin39\
    \ = 0;\n    my $max_bin40 = 0;\n    my $max_bin41 = 0;\n    my $max_bin42 = 0;\n\
    \    my $max_bin43 = 0;\n    my $max_bin44 = 0;\n    my $max_bin45 = 0;\n    my\
    \ $max_bin46 = 0;\n    my $max_bin47 = 0;\n    my $max_bin48 = 0;\n    my $max_bin49\
    \ = 0;\n    my $max_bin50 = 0;\n    my $max_bin51 = 0;\n    my $max_bin52 = 0;\n\
    \    my $max_bin53 = 0;\n    my $max_bin54 = 0;\n    my $max_bin55 = 0;\n    my\
    \ $max_bin56 = 0;\n    my $max_bin57 = 0;\n    my $max_bin58 = 0;\n    my $max_bin59\
    \ = 0;\n    my $max_bin60 = 0;\n    my $max_bin61 = 0;\n    my $max_bin62 = 0;\n\
    \    my $max_bin63 = 0;\n    my $max_bin64 = 0;\n    my $max_bin65 = 0;\n    my\
    \ $max_bin66 = 0;\n    my $max_bin67 = 0;\n    my $max_bin68 = 0;\n    my $max_bin69\
    \ = 0;\n    my $max_bin70 = 0;\n    my $max_bin71 = 0;\n    my $max_\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpu3_etmrd.pl line 82, at end
    of line

    syntax error at /tmp/tmpu3_etmrd.pl line 82, near "$max_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpu3_etmrd.pl line 121, at end
    of line

    syntax error at /tmp/tmpu3_etmrd.pl line 121, at EOF

    Execution of /tmp/tmpu3_etmrd.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted_arr;\n    my\
    \ $num_ones = 0;\n    my $decimal_value = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $num_ones_counter = 0;\n    my $decimal_value_counter\
    \ = 0;\n    my $num_ones_counter2 = 0;\n    my $decimal_value_counter2 = 0;\n\
    \    my $num_ones_counter3 = 0;\n    my $decimal_value_counter3 = 0;\n    my $num_ones_counter4\
    \ = 0;\n    my $decimal_value_counter4 = 0;\n    my $num_ones_counter5 = 0;\n\
    \    my $decimal_value_counter5 = 0;\n    my $num_ones_counter6 = 0;\n    my $decimal_value_counter6\
    \ = 0;\n    my $num_ones_counter7 = 0;\n    my $decimal_value_counter7 = 0;\n\
    \    my $num_ones_counter8 = 0;\n    my $decimal_value_counter8 = 0;\n    my $num_ones_counter9\
    \ = 0;\n    my $decimal_value_counter9 = 0;\n    my $num_ones_counter10 = 0;\n\
    \    my $decimal_value_counter10 = 0;\n    my $num_ones_counter11 = 0;\n    my\
    \ $decimal_value_counter11 = 0;\n    my $num_ones_counter12 = 0;\n    my $decimal_value_counter12\
    \ = 0;\n    my $num_ones_counter13 = 0;\n    my $decimal_value_counter13 = 0;\n\
    \    my $num_ones_counter14 = 0;\n    my $decimal_value_counter14 = 0;\n    my\
    \ $num_ones_counter15 = 0;\n    my $decimal_value_counter15 = 0;\n    my $num_ones_counter16\
    \ = 0;\n    my $decimal_value_counter16 = 0;\n    my $num_ones_counter17 = 0;\n\
    \    my $decimal_value_counter17 = 0;\n    my $num_ones_counter18 = 0;\n    my\
    \ $decimal_value_counter18 = 0;\n    my $num_ones_counter19 = 0;\n    my $decimal_value_counter19\
    \ = 0;\n    my $num_ones_counter20 = 0;\n    my $decimal_value_counter20 = 0;\n\
    \    my $num_ones_counter21 = 0;\n    my $decimal_value_counter21 = 0;\n    my\
    \ $num_ones_counter22 = 0;\n    my $decimal_value_counter22 = 0;\n    my $num_ones_counter23\
    \ = 0;\n    my $decimal_value_counter23 = 0;\n    my $num_ones_counter24 = 0;\n\
    \    my $decimal_value_counter24 = 0;\n    my $num_ones_counter25 = 0;\n    my\
    \ $decimal_value_counter25 = 0;\n    my $num_ones_counter26 = 0;\n    my $decimal_value_counter26\
    \ = 0;\n    my $num_ones_counter27 = 0;\n    my $decimal_value_counter27 = 0;\n\
    \    my $num_ones_counter28 = 0;\n    my $decimal_value_counter28 = 0;\n    my\
    \ $num_ones_counter29 = 0;\n    my $decimal_value_counter\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpaa_yme59.pl line 71, at end
    of line

    syntax error at /tmp/tmpaa_yme59.pl line 71, near "$decimal_value_counter

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpaa_yme59.pl line 110, at end
    of line

    syntax error at /tmp/tmpaa_yme59.pl line 110, at EOF

    Execution of /tmp/tmpaa_yme59.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted = ();\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $count = 0;\n    my $max\
    \ = 0;\n    my $min = 0;\n    my $temp = 0;\n    my $temp2 = 0;\n    my $temp3\
    \ = 0;\n    my $temp4 = 0;\n    my $temp5 = 0;\n    my $temp6 = 0;\n    my $temp7\
    \ = 0;\n    my $temp8 = 0;\n    my $temp9 = 0;\n    my $temp10 = 0;\n    my $temp11\
    \ = 0;\n    my $temp12 = 0;\n    my $temp13 = 0;\n    my $temp14 = 0;\n    my\
    \ $temp15 = 0;\n    my $temp16 = 0;\n    my $temp17 = 0;\n    my $temp18 = 0;\n\
    \    my $temp19 = 0;\n    my $temp20 = 0;\n    my $temp21 = 0;\n    my $temp22\
    \ = 0;\n    my $temp23 = 0;\n    my $temp24 = 0;\n    my $temp25 = 0;\n    my\
    \ $temp26 = 0;\n    my $temp27 = 0;\n    my $temp28 = 0;\n    my $temp29 = 0;\n\
    \    my $temp30 = 0;\n    my $temp31 = 0;\n    my $temp32 = 0;\n    my $temp33\
    \ = 0;\n    my $temp34 = 0;\n    my $temp35 = 0;\n    my $temp36 = 0;\n    my\
    \ $temp37 = 0;\n    my $temp38 = 0;\n    my $temp39 = 0;\n    my $temp40 = 0;\n\
    \    my $temp41 = 0;\n    my $temp42 = 0;\n    my $temp43 = 0;\n    my $temp44\
    \ = 0;\n    my $temp45 = 0;\n    my $temp46 = 0;\n    my $temp47 = 0;\n    my\
    \ $temp48 = 0;\n    my $temp49 = 0;\n    my $temp50 = 0;\n    my $temp51 = 0;\n\
    \    my $temp52 = 0;\n    my $temp53 = 0;\n    my $temp54 = 0;\n    my $temp55\
    \ = 0;\n    my $temp56 = 0;\n    my $temp57 = 0;\n    my $temp58 = 0;\n    my\
    \ $temp59 = 0;\n    my $temp60 = 0;\n    my $temp61 = 0;\n    my $temp62 = 0;\n\
    \    my $temp63 = 0;\n    my $temp64 = 0;\n    my $temp65 = 0;\n    my $temp66\
    \ = 0;\n    my $temp67 = 0;\n    my $temp68 = 0;\n    my $temp69 = 0;\n    my\
    \ $temp70 = 0;\n    my $temp71 = 0;\n    my $temp72 = 0;\n    my $temp73 = 0;\n\
    \    my $temp74 = 0;\n    my $temp75 = 0;\n    my $temp76 = 0;\n    my $temp77\
    \ = 0;\n    my $temp78 = 0;\n    my $temp79 = 0;\n    my $temp80 = 0;\n    my\
    \ $temp\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp6ubkfq2l.pl line 95, at end
    of line

    syntax error at /tmp/tmp6ubkfq2l.pl line 95, near "$temp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp6ubkfq2l.pl line 134, at end
    of line

    syntax error at /tmp/tmp6ubkfq2l.pl line 134, at EOF

    Execution of /tmp/tmp6ubkfq2l.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my($i, $j, $num_ones);\n    foreach $i (0 .. $#arr) {\n        $num_ones = 0;\n\
    \        foreach $j (0 .. $#arr) {\n            if ($arr[$i] & $arr[$j]) {\n \
    \               $num_ones++;\n            }\n        }\n        if ($num_ones\
    \ == 0) {\n            push(@sorted_arr, $arr[$i]);\n        }\n        elsif\
    \ ($num_ones == 1) {\n            push(@sorted_arr, $arr[$i]);\n            push(@sorted_arr,\
    \ $arr[$j]);\n        }\n        else {\n            push(@sorted_arr, $arr[$i]);\n\
    \            push(@sorted_arr, $arr[$j]);\n            push(@sorted_arr, $arr[$i]);\n\
    \        }\n    }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $flag = 0;\n    my $temp2\
    \ = 0;\n    my $temp3 = 0;\n    my $temp4 = 0;\n    my $temp5 = 0;\n    my $temp6\
    \ = 0;\n    my $temp7 = 0;\n    my $temp8 = 0;\n    my $temp9 = 0;\n    my $temp10\
    \ = 0;\n    my $temp11 = 0;\n    my $temp12 = 0;\n    my $temp13 = 0;\n    my\
    \ $temp14 = 0;\n    my $temp15 = 0;\n    my $temp16 = 0;\n    my $temp17 = 0;\n\
    \    my $temp18 = 0;\n    my $temp19 = 0;\n    my $temp20 = 0;\n    my $temp21\
    \ = 0;\n    my $temp22 = 0;\n    my $temp23 = 0;\n    my $temp24 = 0;\n    my\
    \ $temp25 = 0;\n    my $temp26 = 0;\n    my $temp27 = 0;\n    my $temp28 = 0;\n\
    \    my $temp29 = 0;\n    my $temp30 = 0;\n    my $temp31 = 0;\n    my $temp32\
    \ = 0;\n    my $temp33 = 0;\n    my $temp34 = 0;\n    my $temp35 = 0;\n    my\
    \ $temp36 = 0;\n    my $temp37 = 0;\n    my $temp38 = 0;\n    my $temp39 = 0;\n\
    \    my $temp40 = 0;\n    my $temp41 = 0;\n    my $temp42 = 0;\n    my $temp43\
    \ = 0;\n    my $temp44 = 0;\n    my $temp45 = 0;\n    my $temp46 = 0;\n    my\
    \ $temp47 = 0;\n    my $temp48 = 0;\n    my $temp49 = 0;\n    my $temp50 = 0;\n\
    \    my $temp51 = 0;\n    my $temp52 = 0;\n    my $temp53 = 0;\n    my $temp54\
    \ = 0;\n    my $temp55 = 0;\n    my $temp56 = 0;\n    my $temp57 = 0;\n    my\
    \ $temp58 = 0;\n    my $temp59 = 0;\n    my $temp60 = 0;\n    my $temp61 = 0;\n\
    \    my $temp62 = 0;\n    my $temp63 = 0;\n    my $temp64 = 0;\n    my $temp65\
    \ = 0;\n    my $temp66 = 0;\n    my $temp67 = 0;\n    my $temp68 = 0;\n    my\
    \ $temp69 = 0;\n    my $temp70 = 0;\n    my $temp71 = 0;\n    my $temp72 = 0;\n\
    \    my $temp73 = 0;\n    my $temp74 = 0;\n    my $temp75 = 0;\n    my $temp76\
    \ = 0;\n    my $temp77 = 0;\n    my $temp78 = 0;\n    my $temp79 = 0;\n    my\
    \ $temp80 = 0;\n    my $temp81 = 0;\n    my $temp82 = 0;\n    my $temp\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmp8yk57wyb.pl line 94, at end
    of line

    syntax error at /tmp/tmp8yk57wyb.pl line 94, near "$temp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmp8yk57wyb.pl line 133, at end
    of line

    syntax error at /tmp/tmp8yk57wyb.pl line 133, at EOF

    Execution of /tmp/tmp8yk57wyb.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = scalar @$arr;\n\
    \    my $max_ones = $len * 8 - 1;\n    my $max_dec = 0;\n    my $max_dec_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $max_dec_neg_index\
    \ = 0;\n    my $max_dec_pos = 0;\n    my $max_dec_neg = 0;\n    my $\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: "Bareword found where operator expected at /tmp/tmprctbvltu.pl line 77,\
    \ near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax\
    \ error at /tmp/tmprctbvltu.pl line 77, near \"$\nuse Test::Deep\"\nMissing right\
    \ curly or square bracket at /tmp/tmprctbvltu.pl line 116, at end of line\nsyntax\
    \ error at /tmp/tmprctbvltu.pl line 116, at EOF\nExecution of /tmp/tmprctbvltu.pl\
    \ aborted due to compilation errors.\n"
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n\
    \    my $cmp;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my\
    \ $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n\
    \    my $cmp_res;\n    my $cmp_res;\n    my $cmp_res;\n    \nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpulnddxme.pl line 133,
    at end of line

    syntax error at /tmp/tmpulnddxme.pl line 133, at EOF

    Execution of /tmp/tmpulnddxme.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_val = 0;\n    foreach my $num (@$arr) {\n\
    \        if ($num eq 1) {\n            $num_ones++;\n        } else {\n      \
    \      $decimal_val += $num;\n        }\n    }\n    foreach my $num (@$arr) {\n\
    \        if ($num eq 1) {\n            push(@sorted_arr, $decimal_val);\n    \
    \    }\n    }\n    foreach my $num (@$arr) {\n        if ($num eq 1) {\n     \
    \       $decimal_val -= $num;\n        }\n    }\n    foreach my $num (@$arr) {\n\
    \        if ($num eq 1) {\n            push(@sorted_arr, $decimal_val);\n    \
    \    }\n    }\n    foreach my $num (@$arr) {\n        if ($num eq 1) {\n     \
    \       $num_ones--;\n        }\n    }\n    foreach my $num (@$arr) {\n      \
    \  if ($num eq 1) {\n            push(@sorted_arr, $num_ones);\n        }\n  \
    \  }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $num_zeros = 0;\n    my $decimal_value = 0;\n    my\
    \ $decimal_value2 = 0;\n    my $decimal_value3 = 0;\n    my $decimal_value4 =\
    \ 0;\n    my $decimal_value5 = 0;\n    my $decimal_value6 = 0;\n    my $decimal_value7\
    \ = 0;\n    my $decimal_value8 = 0;\n    my $decimal_value9 = 0;\n    my $decimal_value10\
    \ = 0;\n    my $decimal_value11 = 0;\n    my $decimal_value12 = 0;\n    my $decimal_value13\
    \ = 0;\n    my $decimal_value14 = 0;\n    my $decimal_value15 = 0;\n    my $decimal_value16\
    \ = 0;\n    my $decimal_value17 = 0;\n    my $decimal_value18 = 0;\n    my $decimal_value19\
    \ = 0;\n    my $decimal_value20 = 0;\n    my $decimal_value21 = 0;\n    my $decimal_value22\
    \ = 0;\n    my $decimal_value23 = 0;\n    my $decimal_value24 = 0;\n    my $decimal_value25\
    \ = 0;\n    my $decimal_value26 = 0;\n    my $decimal_value27 = 0;\n    my $decimal_value28\
    \ = 0;\n    my $decimal_value29 = 0;\n    my $decimal_value30 = 0;\n    my $decimal_value31\
    \ = 0;\n    my $decimal_value32 = 0;\n    my $decimal_value33 = 0;\n    my $decimal_value34\
    \ = 0;\n    my $decimal_value35 = 0;\n    my $decimal_value36 = 0;\n    my $decimal_value37\
    \ = 0;\n    my $decimal_value38 = 0;\n    my $decimal_value39 = 0;\n    my $decimal_value40\
    \ = 0;\n    my $decimal_value41 = 0;\n    my $decimal_value42 = 0;\n    my $decimal_value43\
    \ = 0;\n    my $decimal_value44 = 0;\n    my $decimal_value45 = 0;\n    my $decimal_value46\
    \ = 0;\n    my $decimal_value47 = 0;\n    my $decimal_value48 = 0;\n    my $decimal_value49\
    \ = 0;\n    my $decimal_value50 = 0;\n    my $decimal_value51 = 0;\n    my $decimal_value52\
    \ = 0;\n    my $decimal_value53 = 0;\n    my $decimal_value54 = 0;\n    my $decimal_value55\
    \ = 0;\n    my $decimal_value56 = 0;\n    my $decimal_value57 = 0;\n    my $decimal_value58\
    \ = 0;\n    my $decimal_value59 = 0;\n    my $decimal_value60 = 0;\n    my $decimal_value61\
    \ = 0;\n    my $decimal_value62 = 0;\n    my $decimal_value63 = 0;\n    my $decimal_value64\
    \ = 0;\n    my $decimal_value65 = 0;\n    my $decimal_value66 = 0;\n    my $decimal_value67\
    \ = 0;\n    my $decimal_value68 = 0;\n    my $decimal_value69 = 0;\n    my $decimal_value70\
    \ = 0;\n    my $decimal_value71 = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpjlm6x_v9.pl line 121,
    at end of line

    syntax error at /tmp/tmpjlm6x_v9.pl line 121, at EOF

    Execution of /tmp/tmpjlm6x_v9.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp\
    \ = 0;\n    my @res;\n    my $max = 0;\n    my $min = 0;\n    my $max2 = 0;\n\
    \    my $min2 = 0;\n    my $max3 = 0;\n    my $min3 = 0;\n    my $max4 = 0;\n\
    \    my $min4 = 0;\n    my $max5 = 0;\n    my $min5 = 0;\n    my $max6 = 0;\n\
    \    my $min6 = 0;\n    my $max7 = 0;\n    my $min7 = 0;\n    my $max8 = 0;\n\
    \    my $min8 = 0;\n    my $max9 = 0;\n    my $min9 = 0;\n    my $max10 = 0;\n\
    \    my $min10 = 0;\n    my $max11 = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n\
    \    my $min12 = 0;\n    my $max13 = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n\
    \    my $min14 = 0;\n    my $max15 = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n\
    \    my $min16 = 0;\n    my $max17 = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n\
    \    my $min18 = 0;\n    my $max19 = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n\
    \    my $min20 = 0;\n    my $max21 = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n\
    \    my $min22 = 0;\n    my $max23 = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n\
    \    my $min24 = 0;\n    my $max25 = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n\
    \    my $min26 = 0;\n    my $max27 = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n\
    \    my $min28 = 0;\n    my $max29 = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n\
    \    my $min30 = 0;\n    my $max31 = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n\
    \    my $min32 = 0;\n    my $max33 = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n\
    \    my $min34 = 0;\n    my $max35 = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n\
    \    my $min36 = 0;\n    my $max37 = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n\
    \    my $min38 = 0;\n    my $max39 = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n\
    \    my $min40 = 0;\n    my $max41 = 0;\n\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpb13at4vv.pl line 135,
    at end of line

    syntax error at /tmp/tmpb13at4vv.pl line 135, at EOF

    Execution of /tmp/tmpb13at4vv.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n\
    \    my $cmp;\n    my @res;\n    my $max = 0;\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp5dc33iyz.pl line 55, at
    end of line

    syntax error at /tmp/tmp5dc33iyz.pl line 55, at EOF

    Execution of /tmp/tmp5dc33iyz.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k\
    \ = 0;\n    my $tmp = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 =\
    \ 0;\n    my $tmp5 = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 =\
    \ 0;\n    my $tmp9 = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12\
    \ = 0;\n    my $tmp13 = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16\
    \ = 0;\n    my $tmp17 = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20\
    \ = 0;\n    my $tmp21 = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24\
    \ = 0;\n    my $tmp25 = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28\
    \ = 0;\n    my $tmp29 = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32\
    \ = 0;\n    my $tmp33 = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36\
    \ = 0;\n    my $tmp37 = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40\
    \ = 0;\n    my $tmp41 = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44\
    \ = 0;\n    my $tmp45 = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48\
    \ = 0;\n    my $tmp49 = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52\
    \ = 0;\n    my $tmp53 = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56\
    \ = 0;\n    my $tmp57 = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60\
    \ = 0;\n    my $tmp61 = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64\
    \ = 0;\n    my $tmp65 = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68\
    \ = 0;\n    my $tmp69 = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72\
    \ = 0;\n    my $tmp73 = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76\
    \ = 0;\n    my $tmp77 = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80\
    \ = 0;\n    my $tmp81 = 0;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmp2__1tc1w.pl line 133,
    at end of line

    syntax error at /tmp/tmp2__1tc1w.pl line 133, at EOF

    Execution of /tmp/tmp2__1tc1w.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n\
    \    my $tmp2;\n    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n \
    \   my $tmp7;\n    my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n\
    \    my $tmp12;\n    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n\
    \    my $tmp17;\n    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n\
    \    my $tmp22;\n    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n\
    \    my $tmp27;\n    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n\
    \    my $tmp32;\n    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n\
    \    my $tmp37;\n    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n\
    \    my $tmp42;\n    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n\
    \    my $tmp47;\n    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n\
    \    my $tmp52;\n    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n\
    \    my $tmp57;\n    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n\
    \    my $tmp62;\n    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n\
    \    my $tmp67;\n    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n\
    \    my $tmp72;\n    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n\
    \    my $tmp77;\n    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n\
    \    my $tmp82;\n    my $tmp83;\n    my $tmp84;\n    \nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpu_tnuu2w.pl line 136,
    at end of line

    syntax error at /tmp/tmpu_tnuu2w.pl line 136, at EOF

    Execution of /tmp/tmpu_tnuu2w.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013669
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp\
    \ = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5\
    \ = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9\
    \ = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13\
    \ = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17\
    \ = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21\
    \ = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25\
    \ = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29\
    \ = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33\
    \ = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37\
    \ = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41\
    \ = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45\
    \ = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49\
    \ = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53\
    \ = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57\
    \ = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61\
    \ = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65\
    \ = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69\
    \ = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73\
    \ = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77\
    \ = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81\
    \ = 0;\n    my $tmp82\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpucqoofpi.pl line 94, at end
    of line

    syntax error at /tmp/tmpucqoofpi.pl line 94, near "$tmp82

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpucqoofpi.pl line 133, at end
    of line

    syntax error at /tmp/tmpucqoofpi.pl line 133, at EOF

    Execution of /tmp/tmpucqoofpi.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my($num_ones);\n    my($decimal_value);\n    foreach my $num (@$arr) {\n   \
    \     $num_ones = 0;\n        $decimal_value = 0;\n        foreach my $bit (split(//,\
    \ $num)) {\n            $num_ones += $bit == 1;\n            $decimal_value +=\
    \ $bit * 2;\n        }\n        $num_ones = $num_ones * -1;\n        $decimal_value\
    \ = $decimal_value * -1;\n        push(@sorted_arr, $num_ones);\n        push(@sorted_arr,\
    \ $decimal_value);\n    }\n    foreach my $i (0 .. $#sorted_arr) {\n        foreach\
    \ my $j ($i + 1 .. $#sorted_arr) {\n            if ($sorted_arr[$i] > $sorted_arr[$j])\
    \ {\n                my $tmp = $sorted_arr[$i];\n                $sorted_arr[$i]\
    \ = $sorted_arr[$j];\n                $sorted_arr[$j] = $tmp;\n            }\n\
    \        }\n    }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $num_zeros = 0;\n    my $decimal_value = 0;\n    foreach\
    \ my $num (@$arr) {\n        if ($num eq 1) {\n            $num_ones++;\n    \
    \    } else {\n            $num_zeros++;\n        }\n        $decimal_value +=\
    \ $num;\n    }\n    if ($num_zeros > $num_ones) {\n        foreach my $num (@$arr)\
    \ {\n            if ($num eq 1) {\n                $num_ones--;\n            }\
    \ else {\n                $num_zeros--;\n            }\n        }\n    }\n   \
    \ foreach my $num (@$arr) {\n        if ($num eq 1) {\n            push(@sorted_arr,\
    \ $decimal_value);\n        } else {\n            push(@sorted_arr, $decimal_value\
    \ - $num_ones);\n        }\n    }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my($i, $j, $k, $temp);\n\
    \    my(@sorted_arr);\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpr4ca45mm.pl line 48, at
    end of line

    syntax error at /tmp/tmpr4ca45mm.pl line 48, at EOF

    Execution of /tmp/tmpr4ca45mm.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: -1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $i = 0;\n    my $j = 0;\n    my $temp = 0;\n    my $count = 0;\n    my @sorted;\n\
    \    my @sorted_dec;\n    my @sorted_bin;\n    while(1) {\n        if($i == $size)\
    \ {\n            push @sorted, $arr[$i];\n            push @sorted_dec, $arr[$i];\n\
    \            push @sorted_bin, $arr[$i];\n            $i++;\n        }\n     \
    \   elsif($arr[$i] == 1) {\n            $count++;\n        }\n        else {\n\
    \            $count--;\n        }\n        if($count == 0) {\n            push\
    \ @sorted, $arr[$i];\n            push @sorted_dec, $arr[$i];\n            push\
    \ @sorted_bin, $arr[$i];\n            $i++;\n        }\n        elsif($count ==\
    \ 1) {\n            $temp = $arr[$i];\n            $j = 0;\n            while(1)\
    \ {\n                if($j == $i) {\n                    push @sorted, $temp;\n\
    \                    push @sorted_dec, $temp;\n                    push @sorted_bin,\
    \ $temp;\n                    $i++;\n                    $j++;\n             \
    \   }\n                elsif($arr[$j] == 1) {\n                    $temp = $arr[$j];\n\
    \                    $j++;\n                }\n                else {\n      \
    \              $temp = $arr[$j];\n                    $j++;\n                }\n\
    \                if($temp > $arr[$i]) {\n                    $temp = $arr[$i];\n\
    \                    $i = $j;\n                }\n                else {\n   \
    \                 $i = $j;\n                }\n            }\n        }\n    \
    \    elsif($count == -1) {\n            $temp = $arr[$i];\n            $j = 0;\n\
    \            while(1) {\n                if($j == $i) {\n                    push\
    \ @sorted, $temp;\n                    push @sorted_dec, $temp;\n            \
    \        push @sorted_bin, $temp;\n                    $i++;\n               \
    \     $j++;\n                }\n                elsif($arr[$j] == 1) {\n     \
    \               $temp = $arr[$j];\n                    $j++;\n               \
    \ }\n                else {\n                    $temp = $arr[$j];\n         \
    \           $j++;\n                }\n                if($temp < $arr[$i]) {\n\
    \                    $temp = $arr[$i];\n                    $i = $j;\n       \
    \         }\n                else {\n                    $i = $j;\n          \
    \      }\n            }\n        }\n    }\n    return \\@sorted, \\@sorted_dec,\
    \ \\@sorted_bin;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013675
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $max_ones = 0;\n    my $max_dec = 0;\n    my $max_dec_index = 0;\n    my\
    \ $max_dec_val = 0;\n    my $max_dec_val_pos = 0;\n    my $max_dec_val_neg = 0;\n\
    \    my $max_dec_val_neg_index = 0;\n    my $max_dec_val_neg_index2 = 0;\n   \
    \ my $max_dec_val_neg_index3 = 0;\n    my $max_dec_val_neg_index4 = 0;\n    my\
    \ $max_dec_val_neg_index5 = 0;\n    my $max_dec_val_neg_index6 = 0;\n    my $max_dec_val_neg_index7\
    \ = 0;\n    my $max_dec_val_neg_index8 = 0;\n    my $max_dec_val_neg_index9 =\
    \ 0;\n    my $max_dec_val_neg_index10 = 0;\n    my $max_dec_val_neg_index11 =\
    \ 0;\n    my $max_dec_val_neg_index12 = 0;\n    my $max_dec_val_neg_index13 =\
    \ 0;\n    my $max_dec_val_neg_index14 = 0;\n    my $max_dec_val_neg_index15 =\
    \ 0;\n    my $max_dec_val_neg_index16 = 0;\n    my $max_dec_val_neg_index17 =\
    \ 0;\n    my $max_dec_val_neg_index18 = 0;\n    my $max_dec_val_neg_index19 =\
    \ 0;\n    my $max_dec_val_neg_index20 = 0;\n    my $max_dec_val_neg_index21 =\
    \ 0;\n    my $max_dec_val_neg_index22 = 0;\n    my $max_dec_val_neg_index23 =\
    \ 0;\n    my $max_dec_val_neg_index24 = 0;\n    my $max_dec_val_neg_index25 =\
    \ 0;\n    my $max_dec_val_neg_index26 = 0;\n    my $max_dec_val_neg_index27 =\
    \ 0;\n    my $max_dec_val_neg_index28 = 0;\n    my $max_dec_val_neg_index29 =\
    \ 0;\n    my $max_dec_val_neg_index30 = 0;\n    my $max_dec_val_neg_index31 =\
    \ 0;\n    my $max_dec_val_neg_index32 = 0;\n    my $max_dec_val_neg_index33 =\
    \ 0;\n    my $max_dec_val_neg_index34 = 0;\n    my $max_dec_val_neg_index35 =\
    \ 0;\n    my $max_dec_val_neg_index36 = 0;\n    my $max_dec_val_neg_index37 =\
    \ 0;\n    my $max_dec_val_neg_index38 = 0;\n    my $max_dec_val_neg_index39 =\
    \ 0;\n    my $max_dec_val_neg_index40 = 0;\n    my $max_dec_val_neg_index41 =\
    \ 0;\n    my $max_dec_val_neg_index42 = 0;\n    my $max_dec_val_neg_index43 =\
    \ 0;\n    my $max_dec_val_neg_index44 = 0;\n    my $max_dec_val_neg_index45 =\
    \ 0;\n    my $max_dec_val_neg_index46 = 0;\n    my $max_dec_val_neg_index\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmptfggf6s0.pl line 61, at end
    of line

    syntax error at /tmp/tmptfggf6s0.pl line 61, near "$max_dec_val_neg_index

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmptfggf6s0.pl line 100, at end
    of line

    syntax error at /tmp/tmptfggf6s0.pl line 100, at EOF

    Execution of /tmp/tmptfggf6s0.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $size = @$arr;\n  \
    \  my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $temp\
    \ = 0;\n    my @sorted;\n    for(my $i = 0; $i < $size; $i++) {\n        $ones\
    \ = $arr->[$i] & 1;\n        $dec = $arr->[$i] >> 1;\n        if($ones > $dec)\
    \ {\n            $temp = $ones;\n            $ones = $dec;\n            $dec =\
    \ $temp;\n        }\n        $arr->[$i] = $ones;\n        $arr->[$i] = $dec +\
    \ ($arr->[$i] & 1);\n        $arr->[$i] = $arr->[$i] >> 1;\n    }\n    for(my\
    \ $i = 0; $i < $size; $i++) {\n        $ones = $arr->[$i] & 1;\n        $dec =\
    \ $arr->[$i] >> 1;\n        if($ones > $dec) {\n            $temp = $ones;\n \
    \           $ones = $dec;\n            $dec = $temp;\n        }\n        $arr->[$i]\
    \ = $ones;\n        $arr->[$i] = $dec + ($arr->[$i] & 1);\n        $arr->[$i]\
    \ = $arr->[$i] >> 1;\n    }\n    for(my $i = 0; $i < $size; $i++) {\n        $ones\
    \ = $arr->[$i] & 1;\n        $dec = $arr->[$i] >> 1;\n        if($ones > $dec)\
    \ {\n            $temp = $ones;\n            $ones = $dec;\n            $dec =\
    \ $temp;\n        }\n        $arr->[$i] = $ones;\n        $arr->[$i] = $dec +\
    \ ($arr->[$i] & 1);\n        $arr->[$i] = $arr->[$i] >> 1;\n    }\n    for(my\
    \ $i = 0; $i < $size; $i++) {\n        $ones = $arr->[$i] & 1;\n        $dec =\
    \ $arr->[$i] >> 1;\n        if($ones > $dec) {\n            $temp = $ones;\n \
    \           $ones = $dec;\n            $dec = $temp;\n        }\n        $arr->[$i]\
    \ = $ones;\n        $arr->[$i] = $dec + ($arr->[$i] & 1);\n        $arr->[$i]\
    \ = $arr->[$i] >> 1;\n    }\n    for(my $i = 0; $i < $size; $i++) {\n        $ones\
    \ = $arr->[$i] & 1;\n        $dec = $arr->[$i] >> \nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmprhu7kxjn.pl line 65, at end
    of line

    syntax error at /tmp/tmprhu7kxjn.pl line 65, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmprhu7kxjn.pl line 104, at end
    of line

    syntax error at /tmp/tmprhu7kxjn.pl line 104, at EOF

    Execution of /tmp/tmprhu7kxjn.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_value = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $num_ones_cnt = 0;\n    my $decimal_value_cnt = 0;\n    foreach my $num\
    \ (@$arr) {\n        $num_ones_cnt += $num;\n        $decimal_value_cnt += $num_ones_cnt;\n\
    \    }\n    foreach my $num (@$arr) {\n        $num_ones += $num;\n        $decimal_value\
    \ += $num_ones_cnt;\n    }\n    foreach my $num (@$arr) {\n        if ($num_ones\
    \ > $num_ones_cnt) {\n            $num_ones_cnt = $num_ones;\n        }\n    \
    \    if ($num_ones < $num_ones_cnt) {\n            $num_ones = $num_ones_cnt;\n\
    \        }\n        if ($decimal_value >= $decimal_value_cnt) {\n            $decimal_value_cnt\
    \ = $decimal_value;\n        }\n        if ($decimal_value < $decimal_value_cnt)\
    \ {\n            $decimal_value = $decimal_value_cnt;\n        }\n        $sorted_arr[$i]\
    \ = $num;\n        $i++;\n    }\n    foreach my $num (@$arr) {\n        if ($num_ones\
    \ > $num_ones_cnt) {\n            $num_ones_cnt = $num_ones;\n        }\n    \
    \    if ($num_ones < $num_ones_cnt) {\n            $num_ones = $num_ones_cnt;\n\
    \        }\n        if ($decimal_value >= $decimal_value_cnt) {\n            $decimal_value_cnt\
    \ = $decimal_value;\n        }\n        if ($decimal_value < $decimal_value_cnt)\
    \ {\n            $decimal_value = $decimal_value_cnt;\n        }\n        $sorted_arr[$j]\
    \ = $num;\n        $j++;\n    }\n    return @sorted_arr;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $i = 0;\n    my $j = 0;\n    my $num_ones = 0;\n    my $num_tens = 0;\n \
    \   my $num_hundreds = 0;\n    my $num_thousands = 0;\n    my $num_millions =\
    \ 0;\n    my $num_billions = 0;\n    my $num_trillions = 0;\n    my $num_quadrillions\
    \ = 0;\n    my $num_quintillions = 0;\n    my $num_sextillions = 0;\n    my $num_septillions\
    \ = 0;\n    my $num_octillions = 0;\n    my $num_nonillions = 0;\n    my $num_decillions\
    \ = 0;\n    my $num_undecillions = 0;\n    my $num_duodecillions = 0;\n    my\
    \ $num_tredecillions = 0;\n    my $num_quattuordecillions = 0;\n    my $num_quindecillions\
    \ = 0;\n    my $num_sexdecillions = 0;\n    my $num_septendecillions = 0;\n  \
    \  my $num_octodecillions = 0;\n    my $num_novemdecillions = 0;\n    my $num_vigintillions\
    \ = 0;\n    my $num_unvigintillions = 0;\n    my $num_duovigintillions = 0;\n\
    \    my $num_trevigintillions = 0;\n    my $num_quattuorvigintillions = 0;\n \
    \   my $num_quinvigintillions = 0;\n    my $num_sexvigintillions = 0;\n    my\
    \ $num_septenvigintillions = 0;\n    my $num_octovigintillions = 0;\n    my $num_novemvigintillions\
    \ = 0;\n    my $num_nevigintillions = 0;\n    my $num_vigintillions = 0;\n   \
    \ my $num_unvigintillions = 0;\n    my $num_duovigintillions = 0;\n    my $num_trevigintillions\
    \ = 0;\n    my $num_quattuorvigintillions = 0;\n    my $num_quinvigintillions\
    \ = 0;\n    my $num_sexvigintillions = 0;\n    my $num_septenvigintillions = 0;\n\
    \    my $num_octovigintillions = 0;\n    my $num_novemvigintillions = 0;\n   \
    \ my $num_nevigintillions = 0;\n    my $num_vigintillions = 0;\n    my $num_unvigintillions\
    \ = 0;\n    my $num_duovigintillions = 0;\n    my $num_trevigintil\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpgywvlzif.pl line 59, at end
    of line

    syntax error at /tmp/tmpgywvlzif.pl line 59, near "$num_trevigintil

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpgywvlzif.pl line 98, at end of
    line

    syntax error at /tmp/tmpgywvlzif.pl line 98, at EOF

    Execution of /tmp/tmpgywvlzif.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = @$arr;\n   \
    \ my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp\
    \ = 0;\n    my @res;\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmpfp1zd8f8.pl line 53, at
    end of line

    syntax error at /tmp/tmpfp1zd8f8.pl line 53, at EOF

    Execution of /tmp/tmpfp1zd8f8.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my(@sorted_arr);\n   \
    \ my $num_ones = 0;\n    my $decimal_value = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $num_ones_cnt = 0;\n    my $decimal_value_cnt = 0;\n \
    \   my $max_decimal_value = 0;\n    my $max_decimal_value_cnt = 0;\n    my $max_decimal_value_idx\
    \ = 0;\n    my $max_decimal_value_idx_cnt = 0;\n    my $max_decimal_value_idx_cnt2\
    \ = 0;\n    my $max_decimal_value_idx_cnt3 = 0;\n    my $max_decimal_value_idx_cnt4\
    \ = 0;\n    my $max_decimal_value_idx_cnt5 = 0;\n    my $max_decimal_value_idx_cnt6\
    \ = 0;\n    my $max_decimal_value_idx_cnt7 = 0;\n    my $max_decimal_value_idx_cnt8\
    \ = 0;\n    my $max_decimal_value_idx_cnt9 = 0;\n    my $max_decimal_value_idx_cnt10\
    \ = 0;\n    my $max_decimal_value_idx_cnt11 = 0;\n    my $max_decimal_value_idx_cnt12\
    \ = 0;\n    my $max_decimal_value_idx_cnt13 = 0;\n    my $max_decimal_value_idx_cnt14\
    \ = 0;\n    my $max_decimal_value_idx_cnt15 = 0;\n    my $max_decimal_value_idx_cnt16\
    \ = 0;\n    my $max_decimal_value_idx_cnt17 = 0;\n    my $max_decimal_value_idx_cnt18\
    \ = 0;\n    my $max_decimal_value_idx_cnt19 = 0;\n    my $max_decimal_value_idx_cnt20\
    \ = 0;\n    my $max_decimal_value_idx_cnt21 = 0;\n    my $max_decimal_value_idx_cnt22\
    \ = 0;\n    my $max_decimal_value_idx_cnt23 = 0;\n    my $max_decimal_value_idx_cnt24\
    \ = 0;\n    my $max_decimal_value_idx_cnt25 = 0;\n    my $max_decimal_value_idx_cnt26\
    \ = 0;\n    my $max_decimal_value_idx_cnt27 = 0;\n    my $max_decimal_value_idx_cnt28\
    \ = 0;\n    my $max_decimal_value_idx_cnt29 = 0;\n    my $max_decimal_value_idx_cnt30\
    \ = 0;\n    my $max_decimal_value_idx_cnt31 = 0;\n    my $max_decimal_value_idx_cnt32\
    \ = 0;\n    my $max_decimal_value_idx_cnt33 = 0;\n    my $max_decimal_value_idx_cnt34\
    \ = 0;\n    my $max_decimal_value_idx_cnt35 = 0;\n    my $max_decimal_value_idx_cnt36\
    \ = 0;\n    my $max_decimal_value_idx_cnt37 = 0;\n    my $max_decimal_value_idx_cnt38\
    \ = 0;\n    my $max_decimal_value_idx_cnt39 = 0;\n    my $max_decimal_value_idx_cnt40\
    \ = 0;\n    my $max_decimal_value_idx_cnt41 = 0;\n    my $max_decimal_value_idx_cnt42\
    \ = 0;\n    my $max_decimal_value_idx_cnt43 = 0;\n    my $max_decimal_value_idx_cnt44\
    \ = 0;\n    my $max_decimal_\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpdnl59jqt.pl line 63, at end
    of line

    syntax error at /tmp/tmpdnl59jqt.pl line 63, near "$max_decimal_

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpdnl59jqt.pl line 102, at end
    of line

    syntax error at /tmp/tmpdnl59jqt.pl line 102, at EOF

    Execution of /tmp/tmpdnl59jqt.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my @sorted_arr;\n    my\
    \ $num_ones = 0;\n    my $decimal_value = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $num_ones_cnt = 0;\n    my $decimal_value_cnt = 0;\n \
    \   my $num_ones_cnt2 = 0;\n    my $decimal_value_cnt2 = 0;\n    my $num_ones_cnt3\
    \ = 0;\n    my $decimal_value_cnt3 = 0;\n    my $num_ones_cnt4 = 0;\n    my $decimal_value_cnt4\
    \ = 0;\n    my $num_ones_cnt5 = 0;\n    my $decimal_value_cnt5 = 0;\n    my $num_ones_cnt6\
    \ = 0;\n    my $decimal_value_cnt6 = 0;\n    my $num_ones_cnt7 = 0;\n    my $decimal_value_cnt7\
    \ = 0;\n    my $num_ones_cnt8 = 0;\n    my $decimal_value_cnt8 = 0;\n    my $num_ones_cnt9\
    \ = 0;\n    my $decimal_value_cnt9 = 0;\n    my $num_ones_cnt10 = 0;\n    my $decimal_value_cnt10\
    \ = 0;\n    my $num_ones_cnt11 = 0;\n    my $decimal_value_cnt11 = 0;\n    my\
    \ $num_ones_cnt12 = 0;\n    my $decimal_value_cnt12 = 0;\n    my $num_ones_cnt13\
    \ = 0;\n    my $decimal_value_cnt13 = 0;\n    my $num_ones_cnt14 = 0;\n    my\
    \ $decimal_value_cnt14 = 0;\n    my $num_ones_cnt15 = 0;\n    my $decimal_value_cnt15\
    \ = 0;\n    my $num_ones_cnt16 = 0;\n    my $decimal_value_cnt16 = 0;\n    my\
    \ $num_ones_cnt17 = 0;\n    my $decimal_value_cnt17 = 0;\n    my $num_ones_cnt18\
    \ = 0;\n    my $decimal_value_cnt18 = 0;\n    my $num_ones_cnt19 = 0;\n    my\
    \ $decimal_value_cnt19 = 0;\n    my $num_ones_cnt20 = 0;\n    my $decimal_value_cnt20\
    \ = 0;\n    my $num_ones_cnt21 = 0;\n    my $decimal_value_cnt21 = 0;\n    my\
    \ $num_ones_cnt22 = 0;\n    my $decimal_value_cnt22 = 0;\n    my $num_ones_cnt23\
    \ = 0;\n    my $decimal_value_cnt23 = 0;\n    my $num_ones_cnt24 = 0;\n    my\
    \ $decimal_value_cnt24 = 0;\n    my $num_ones_cnt25 = 0;\n    my $decimal_value_cnt25\
    \ = 0;\n    my $num_ones_cnt26 = 0;\n    my $decimal_value_cnt26 = 0;\n    my\
    \ $num_ones_cnt27 = 0;\n    my $decimal_value_cnt27 = 0;\n    my $num_one\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpoqq6h7go.pl line 68, at end
    of line

    syntax error at /tmp/tmpoqq6h7go.pl line 68, near "$num_one

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpoqq6h7go.pl line 107, at end
    of line

    syntax error at /tmp/tmpoqq6h7go.pl line 107, at EOF

    Execution of /tmp/tmpoqq6h7go.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
- exit_code: 255
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\nsub sort_array {\n    my($arr) = @_;\n    my $len = scalar @$arr;\n\
    \    my $ones = 0;\n    my $dec = 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp\
    \ = 0;\n    my $tmp2 = 0;\n    my $tmp3 = 0;\n    my $tmp4 = 0;\n    my $tmp5\
    \ = 0;\n    my $tmp6 = 0;\n    my $tmp7 = 0;\n    my $tmp8 = 0;\n    my $tmp9\
    \ = 0;\n    my $tmp10 = 0;\n    my $tmp11 = 0;\n    my $tmp12 = 0;\n    my $tmp13\
    \ = 0;\n    my $tmp14 = 0;\n    my $tmp15 = 0;\n    my $tmp16 = 0;\n    my $tmp17\
    \ = 0;\n    my $tmp18 = 0;\n    my $tmp19 = 0;\n    my $tmp20 = 0;\n    my $tmp21\
    \ = 0;\n    my $tmp22 = 0;\n    my $tmp23 = 0;\n    my $tmp24 = 0;\n    my $tmp25\
    \ = 0;\n    my $tmp26 = 0;\n    my $tmp27 = 0;\n    my $tmp28 = 0;\n    my $tmp29\
    \ = 0;\n    my $tmp30 = 0;\n    my $tmp31 = 0;\n    my $tmp32 = 0;\n    my $tmp33\
    \ = 0;\n    my $tmp34 = 0;\n    my $tmp35 = 0;\n    my $tmp36 = 0;\n    my $tmp37\
    \ = 0;\n    my $tmp38 = 0;\n    my $tmp39 = 0;\n    my $tmp40 = 0;\n    my $tmp41\
    \ = 0;\n    my $tmp42 = 0;\n    my $tmp43 = 0;\n    my $tmp44 = 0;\n    my $tmp45\
    \ = 0;\n    my $tmp46 = 0;\n    my $tmp47 = 0;\n    my $tmp48 = 0;\n    my $tmp49\
    \ = 0;\n    my $tmp50 = 0;\n    my $tmp51 = 0;\n    my $tmp52 = 0;\n    my $tmp53\
    \ = 0;\n    my $tmp54 = 0;\n    my $tmp55 = 0;\n    my $tmp56 = 0;\n    my $tmp57\
    \ = 0;\n    my $tmp58 = 0;\n    my $tmp59 = 0;\n    my $tmp60 = 0;\n    my $tmp61\
    \ = 0;\n    my $tmp62 = 0;\n    my $tmp63 = 0;\n    my $tmp64 = 0;\n    my $tmp65\
    \ = 0;\n    my $tmp66 = 0;\n    my $tmp67 = 0;\n    my $tmp68 = 0;\n    my $tmp69\
    \ = 0;\n    my $tmp70 = 0;\n    my $tmp71 = 0;\n    my $tmp72 = 0;\n    my $tmp73\
    \ = 0;\n    my $tmp74 = 0;\n    my $tmp75 = 0;\n    my $tmp76 = 0;\n    my $tmp77\
    \ = 0;\n    my $tmp78 = 0;\n    my $tmp79 = 0;\n    my $tmp80 = 0;\n    my $tmp81\
    \ = 0;\n    my $tmp\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmpl_e39a96.pl line 94, at end
    of line

    syntax error at /tmp/tmpl_e39a96.pl line 94, near "$tmp

    use Test::Deep"

    Missing right curly or square bracket at /tmp/tmpl_e39a96.pl line 133, at end
    of line

    syntax error at /tmp/tmpl_e39a96.pl line 133, at EOF

    Execution of /tmp/tmpl_e39a96.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660013670
