language: pl
name: HumanEval_22_filter_integers
results:
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my $filtered = [];\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            $filtered->[$_] = $value;\n\
    \        }\n    }\n    return $filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (values\
    \ %$values) {\n        push(@filtered, $value) if $value =~ /^-?\\d+$/;\n    }\n\
    \    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmp0t0fvh_k.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        push(@filtered, $value) if $value =~ /^\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my($result) = [];\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^\\d+$/) {\n            $result->{$value}\
    \ = $$values{$value};\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpr4eh9fi0.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        push @filtered, $value if $value =~ /^\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value ( @$values\
    \ ) {\n        next unless $value =~ /^\\d+$/;\n        push(@filtered, $value);\n\
    \    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if (defined $value && $value =~ /^-?\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@filtered);\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered;\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        next unless defined $value and $value =~ /^-?\\d+$/;\n        push(@filtered,\
    \ $value);\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (values\
    \ %$values) {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n\
    \    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpfqcqwbjt.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if (defined $value && $value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my($result) = [];\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^\\d+$/) {\n            $result->{$value}\
    \ = $values->{$value};\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpu0xvpsz6.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (values\
    \ %$values) {\n        if (defined $value && $value =~ /^\\d+$/) {\n         \
    \   push(@filtered, $value);\n        }\n    }\n    return @filtered;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpoiwxyb25.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value ( @$values\
    \ ) {\n        next unless defined $value && $value =~ /^\\d+$/;\n        push\
    \ @filtered, $value;\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        push(@filtered, $value) if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my $result = {};\n    foreach my $key (keys %$values)\
    \ {\n        my $value = $values->{$key};\n        if ($value =~ /^\\d+$/) {\n\
    \            $result->{$key} = $value;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpxgm7dsls.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my($ret) = ();\n    foreach my $value (values\
    \ %$values) {\n        if (defined $value && $value =~ /^\\d+$/) {\n         \
    \   $ret .= $value;\n        }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmp53j5b4tt.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered;\n    foreach my $value (@$values)\
    \ {\n        next unless defined $value and $value =~ /^-?\\d+$/;\n        push(@filtered,\
    \ $value);\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered;\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@filtered);\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpcp0bqcmn.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        next unless defined $value;\n        next if $value =~ /^-?\\d+$/;\n\
    \        push @filtered, $value;\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (values\
    \ %$values) {\n        if (defined $value && $value =~ /^\\d+$/) {\n         \
    \   push(@filtered, $value);\n        }\n    }\n    return @filtered;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpoiwxyb25.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (values\
    \ %$values) {\n        next unless $value =~ /^\\d+$/;\n        push(@filtered,\
    \ $value);\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpwmwlb2h5.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (values\
    \ %$values) {\n        if (defined $value && $value =~ /^-?\\d+$/) {\n       \
    \     push(@filtered, $value);\n        }\n    }\n    return @filtered;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmp43dw0jbq.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @integers = ();\n    foreach my $value ($values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@integers, $value);\n\
    \        }\n    }\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        push(@filtered, $value) if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered_values = ();\n    foreach my $value\
    \ (@$values) {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered_values,\
    \ $value);\n        }\n    }\n    return @filtered_values;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered;\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my $result = {};\n    foreach my $key (keys %$values)\
    \ {\n        my $value = $values->{$key};\n        if ($value =~ /^\\d+$/) {\n\
    \            $result->{$key} = $value;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpxgm7dsls.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value ( @$values\
    \ ) {\n        next unless defined $value;\n        next unless $value =~ /^-?\\\
    d+$/;\n        push @filtered, $value;\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpe483168i.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (values\
    \ %$values) {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n\
    \    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpfqcqwbjt.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value ( @$values\
    \ ) {\n        next unless defined $value && $value =~ /^\\d+$/;\n        push\
    \ @filtered, $value;\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@filtered);\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpcp0bqcmn.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@filtered);\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpcp0bqcmn.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered_values = ();\n    foreach my $value\
    \ (@$values) {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered_values,\
    \ $value);\n        }\n    }\n    return @filtered_values;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@filtered);\n    foreach my $value (@$values)\
    \ {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered;\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if (defined $value && $value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        push(@filtered, $value) if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value ( @$values\
    \ ) {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if (defined $value && $value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value ( @$values\
    \ ) {\n        next unless defined $value and $value =~ /^\\d+$/;\n        push(@filtered,\
    \ $value);\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered_values;\n    foreach my $value (@$values)\
    \ {\n        if (defined $value && $value =~ /^-?\\d+$/) {\n            push(@filtered_values,\
    \ $value);\n        }\n    }\n    return @filtered_values;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my($filtered);\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            $filtered .= $value;\n   \
    \     }\n    }\n    return $filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpe483168i.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value ( @$values\
    \ ) {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        next if !$value || $value !~ /^\\d+$/;\n        push(@filtered, $value);\n\
    \    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value ( @$values\
    \ ) {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@result) = ();\n    foreach my $value (values\
    \ %$values) {\n        if (defined $value && $value =~ /^\\d+$/) {\n         \
    \   push(@result, $value);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpfhf_5mq8.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpocj5jdsq.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if (defined $value && $value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if (defined $value && $value =~ /^-?\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        next unless defined $value && $value =~ /^-?\\d+$/;\n        push(@filtered,\
    \ $value);\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my($ret);\n    foreach my $val (@$values) {\n\
    \        if ($val =~ /^-?\\d+$/) {\n            $ret .= $val;\n        }\n   \
    \ }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@filtered);\n    foreach my $value (values\
    \ %$values) {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n\
    \    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmp36orbe97.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        next unless $value =~ /^\\d+$/;\n        push(@filtered, $value);\n\
    \    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered;\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@filtered);\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @integers = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@integers, $value);\n\
    \        }\n    }\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpocj5jdsq.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        next unless defined $value && $value =~ /^\\d+$/;\n        push(@filtered,\
    \ $value);\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my $filtered = [];\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^\\d+$/) {\n            $filtered->{$value}\
    \ = $values->{$value};\n        }\n    }\n    return $filtered;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmplgbx2km0.pl line 5.

    '
  stdout: ''
  timestamp: 1660013393
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@filtered);\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpusngrpgr.pl line 5.

    '
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered_values = ();\n    foreach my $value\
    \ (@$values) {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered_values,\
    \ $value);\n        }\n    }\n    return @filtered_values;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my($result) = [];\n    foreach my $value (values\
    \ %$values) {\n        if (defined $value && $value =~ /^-?\\d+$/) {\n       \
    \     $result->{$value} = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmp8bd9ibos.pl line 5.

    '
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my($result) = [];\n    foreach my $value (values\
    \ %$values) {\n        if (defined $value && $value =~ /^-?\\d+$/) {\n       \
    \     $result->{$value} = $$values{$value};\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmp1pu4_wy9.pl line 5.

    '
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        next unless $value =~ /^-?\\d+$/;\n        push(@filtered, $value);\n\
    \    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@filtered);\n    foreach my $value (values\
    \ %$values) {\n        if (defined $value && $value =~ /^\\d+$/) {\n         \
    \   push(@filtered, $value);\n        }\n    }\n    return @filtered;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpjxehdhce.pl line 5.

    '
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered;\n    foreach my $value ( @$values\
    \ ) {\n        next unless defined $value and $value =~ /^-?\\d+$/;\n        push\
    \ @filtered, $value;\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@result) = ();\n    foreach my $value ( @$values\
    \ ) {\n        next unless defined $value;\n        next unless $value =~ /^-?\\\
    d+$/;\n        push(@result, $value);\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value ( @$values\
    \ ) {\n        next unless defined $value and $value =~ /^\\d+$/;\n        push\
    \ @filtered, $value;\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        push(@filtered, $value) if $value =~ /^\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my($ret);\n    foreach my $val (@$values) {\n\
    \        if (ref($val) eq 'ARRAY') {\n            $ret .= filter_integers($val);\n\
    \        } elsif (ref($val) eq 'SCALAR') {\n            if ($val =~ /^\\d+$/)\
    \ {\n                $ret .= $val;\n            }\n        }\n    }\n    return\
    \ $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value ( @$values\
    \ ) {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered;\n    foreach my $value (@$values)\
    \ {\n        next if $value =~ /^-?\\d+$/;\n        push(@filtered, $value);\n\
    \    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpe483168i.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @integers;\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@integers, $value);\n\
    \        }\n    }\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value ( @$values\
    \ ) {\n        next unless defined $value && $value =~ /^-?\\d+$/;\n        push(@filtered,\
    \ $value);\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @integers = ();\n    foreach my $value ($values)\
    \ {\n        push @integers, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered_values;\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered_values,\
    \ $value);\n        }\n    }\n    return @filtered_values;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpcdl1aqbh.pl line 5.

    '
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered;\n    foreach my $value (@$values)\
    \ {\n        if (defined $value) {\n            if ($value =~ /^\\d+$/) {\n  \
    \              push(@filtered, $value);\n            }\n        }\n    }\n   \
    \ return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered;\n    foreach my $value ( @$values\
    \ ) {\n        push @filtered, $value if $value =~ /^\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if (defined $value && $value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@filtered);\n    foreach my $value (@$values)\
    \ {\n        if (defined $value && $value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        next unless defined $value and $value =~ /^-?\\d+$/;\n        push(@filtered,\
    \ $value);\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if (defined $value && $value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@result) = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@result, $value);\n\
    \        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if (defined $value && $value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpe483168i.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered_values;\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered_values,\
    \ $value);\n        }\n    }\n    return @filtered_values;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpcdl1aqbh.pl line 5.

    '
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered;\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@result) = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@result, $value);\n\
    \        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if (defined $value && $value =~ /^-?\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered_values = ();\n    foreach my $value\
    \ (@$values) {\n        next if !$value || $value =~ /^\\d+$/;\n        push(@filtered_values,\
    \ $value);\n    }\n    return @filtered_values;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @integers = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@integers, $value);\n\
    \        }\n    }\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if (defined $value && $value =~ /^-?\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value ( @$values\
    \ ) {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value ( @$values\
    \ ) {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@result) = ();\n    foreach my $value (@$values)\
    \ {\n        if (defined $value && $value =~ /^-?\\d+$/) {\n            push(@result,\
    \ $value);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@result) = ();\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^\\d+$/) {\n            push(@result, $value);\n\
    \        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmp5nmx63iz.pl line 5.

    '
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered;\n    foreach my $value (@$values)\
    \ {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value ( @$values\
    \ ) {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@result) = ();\n    foreach my $value (@$values)\
    \ {\n        push(@result, $value) if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my $result = {};\n    foreach my $key (keys %$values)\
    \ {\n        my $value = $values->{$key};\n        if ($value =~ /^-?\\d+$/) {\n\
    \            $result->{$key} = $value;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmp0qgar9_t.pl line 5.

    '
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered;\n    foreach my $value ( @$values\
    \ ) {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @integers;\n    foreach my $value ( @$values\
    \ ) {\n        push @integers, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @integers = ();\n    foreach my $value ( @$values\
    \ ) {\n        push @integers, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@result) = ();\n    foreach my $value (@$values)\
    \ {\n        if (ref($value) eq 'ARRAY') {\n            push(@result, filter_integers($value));\n\
    \        } elsif (ref($value) eq 'SCALAR') {\n            if ($value =~ /^\\d+$/)\
    \ {\n                push(@result, $value);\n            }\n        }\n    }\n\
    \    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value ( @$values\
    \ ) {\n        next unless defined $value;\n        next if $value =~ /^\\d+$/;\n\
    \        push @filtered, $value;\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpe483168i.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (values\
    \ %$values) {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpe483168i.pl line 5.

    '
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if (defined $value) {\n            if ($value =~ /^-?\\d+$/) {\n\
    \                push(@filtered, $value);\n            }\n        }\n    }\n \
    \   return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if (defined $value && $value =~ /^\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my($ret);\n    foreach my $val (@$values) {\n\
    \        if ($val =~ /^\\d+$/) {\n            $ret .= $val;\n        }\n    }\n\
    \    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered;\n    foreach my $value ( @$values\
    \ ) {\n        next unless defined $value && $value =~ /^-?\\d+$/;\n        push\
    \ @filtered, $value;\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my(@filtered);\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
- exit_code: 255
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my($result) = [];\n    foreach my $value (values\
    \ %$values) {\n        if (defined $value && $value =~ /^\\d+$/) {\n         \
    \   $result->{$_} = $values->{$value};\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Not a HASH reference at /tmp/tmpz86gnmv9.pl line 5.

    '
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "# Filter given list of any python values only for integers\nsub filter_integers\
    \ {\n    my($values) = @_;\n    my @filtered = ();\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013392
