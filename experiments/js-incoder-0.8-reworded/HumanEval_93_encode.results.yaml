language: js
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tvar letters = message.split(\"\");\n\tvar newMessage = \"\";\n\tfor (var i =\
    \ 0; i < letters.length; i++){\n\t\tvar currentLetter = letters[i];\n\t\tvar index\
    \ = englishLetters.indexOf(currentLetter);\n\t\tcurrentLetter = englishLetters[index];\n\
    \t\tvar nextIndex = index + 2;\n\t\tvar nextLetter = englishLetters[nextIndex];\n\
    \t\tletters[i] = nextLetter;\n\t\tnewMessage += currentLetter;\n\t}\n\treturn\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpx041jn91.js:16\n\t\tvar index = englishLetters.indexOf(currentLetter);\n\
    \t\t            ^\n\nReferenceError: englishLetters is not defined\n    at encode\
    \ (/tmp/tmpx041jn91.js:16:15)\n    at test (/tmp/tmpx041jn91.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpx041jn91.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let words = message.split(\" \");\n  for(let i = 0; i < words.length; i++){\n\
    \    words[i] = words[i].replace(/e/ig, function(a){return a.charCodeAt(0) - 64;\
    \ })\n    .replace(/o/ig, function(a){return a.charCodeAt(0) - 87; })\n    .replace(/u/ig,\
    \ function(a){return a.charCodeAt(0) - 93; })\n    .replace(/i/ig, function(a){return\
    \ a.charCodeAt(0) - 100; })\n    .replace(/o/ig, function(a){return a.charCodeAt(0)\
    \ - 111; })\n    .replace(/e/ig, function(a){return a.charCodeAt(0) - 65; })\n\
    \    .replace(/u/ig, function(a){return a.charCodeAt(0) - 98; })\n    .replace(/i/ig,\
    \ function(a){return a.charCodeAt(0) - 114; })\n    .replace(/o/ig, function(a){return\
    \ a.charCodeAt(0) - 101; })\n    .replace(/u/ig, function(a){return a.charCodeAt(0)\
    \ - 108; })\n    .replace(/i/ig, function(a){return a.charCodeAt(0) - 117; })\n\
    \    .replace(/o/ig, function(a){return a.charCodeAt(0) - 101; })\n    .replace(/u/ig,\
    \ function(a){return a.charCodeAt(0) - 114; })\n    .replace(/i/ig, function(a){return\
    \ a.charCodeAt(0) - 100; })\n    .replace(/o/ig, function(a){return a.charCodeAt(0)\
    \ - 107; })\n    .replace(/e/ig, function(a){return a.charCodeAt(0) - 59; })\n\
    \    .replace(/u/ig, function(a){return a.charCodeAt(0) - 98; })\n    .replace(/i/ig,\
    \ function(a){return a.charCodeAt(0) - 111; })\n    .replace(/o/ig, function(a){return\
    \ a.charCodeAt(0) - 100; })\n    .replace(/u/ig, function(a){return a.charCodeAt(0)\
    \ - 108; })\n    .replace(/i/ig, function(a){return a.charCodeAt(0) - 109; })\n\
    \    .replace(/o/ig, function(a){return a.charCodeAt(0) - 100; })\n    .replace(/u/ig,\
    \ function(a){return a.charCodeAt(0) - 115; })\n    .replace(/i/ig, function(a){return\
    \ a.charCodeAt(0) - 111; })\n    .replace(/o/ig, function(a){return a.charCodeAt(0)\
    \ - 108; })\n    .replace(/e/ig, function(a){return a.charCodeAt(0) - 57; })\n\
    \    .replace(/u/ig, function(a){return a.charCodeAt(0) - 98; })\n    .replace(/i/ig,\
    \ function(a){return a.charCodeAt(0) - 116; })\n    .replace(/o/ig, function(a){return\
    \ a.charCodeAt(0) - 108; })\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp98aj5uz8.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = message;\n    let vowels = \"AEIOUaeiou\";\n    \n \
    \   for( let i = message.length - 1; i >= 0; i--){\n        // Get the char of\
    \ the current location in the string\n        // and add an if statement to test\
    \ if the char is uppercase or lowercase\n        // and add the char accordingly\n\
    \        encodedMessage += message[i];\n        if( message[i].toLowerCase() ===\
    \ message[i].toUpperCase()){\n            let position = vowels.indexOf(message[i])\
    \ + 1;\n            encodedMessage = encodedMessage.slice(0, position) + message[i].toUpperCase()\
    \ + encodedMessage.slice(position, message.length);\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTSET'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptnc8_yz4.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmptnc8_yz4.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTSET',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: -1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tmessage = message.toUpperCase().split(\"\");\n\tfor (var i = 0; i < message.length;\
    \ i++){\n\t\tif(message[i] === \"A\" || message[i] === \"E\" || message[i] ===\
    \ \"I\" || message[i] === \"O\" || message[i] === \"U\"){\n\t\t\tmessage.splice(i,\
    \ 1, message[i+1], message[i]);\n\t\t\ti = -1;\n\t\t}\n\t}\n\tvar returnValue\
    \ = \"\";\n\tfor (var i = 0; i < message.length; i++) {\n\t\tvar letter = message[i]\n\
    \t\tvar letterToBeAdded = \"\";\n\t\tif (letter === letter.toUpperCase()) {\n\t\
    \t\tletterToBeAdded = letter.toLowerCase();\n\t\t} else {\n\t\t\tletterToBeAdded\
    \ = letter.toUpperCase();\n\t\t}\n\t\treturnValue += letterToBeAdded;\n\t\tfor\
    \ (var j = i+1; j < message.length; j++) {\n\t\t\tif (letter === message[j]) {\n\
    \t\t\t\treturnValue += letter;\n\t\t\t\tj = message.length;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn returnValue;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  return message.split(' ').map(function(word) {\n    return word.split('').map(function(letter,\
    \ index){\n      var position = index + 2\n      if (position < word.length){\n\
    \        return letter.toLowerCase() == word[position].toLowerCase() ?\n     \
    \   letter : letter.toUpperCase();\n      } else{\n        return letter;\n  \
    \    }\n    }).join('');\n  }).join(' ');\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpphn91qgm.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpphn91qgm.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let result = \"\";\n    let vowels = \"AEIOUaeiou\";\n    for (let i = 0;\
    \ i < message.length; i++){\n        if(message.charAt(i) == \" \" || message.charAt(i)\
    \ == \"-\" || message.charAt(i) == \"\\n\"){\n            result += message[i];\n\
    \            continue;\n        }\n        let pos = vowels.indexOf(message.charAt(i));\n\
    \        result += message.charAt(i).toUpperCase();\n        if(pos != -1) result\
    \ += message.charAt(pos+2).toUpperCase();\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TETST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpis4wu0kg.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpis4wu0kg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TETST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    // TODO\n}\n</code>\n<|/ a |>\n<| c |>\nThis is probably the answer but unfortunately,\
    \ it's homework :(\n<|/ c |>\n<| c |>\nThat's probably a good hint anyway. I'll\
    \ give it a go and see if it works\n<|/ c |>\n<| c |>\nThe trick here is to get\
    \ your function to work by hand with the strings you're given. Write them down\
    \ and check that you have the correct result. Once you have the correct result\
    \ you can start writing your function\n<|/ c |>\n<| a tags=javascript,algorithm\
    \ |>\nHere's another solution - maybe a little simpler than the one above. \n\
    <code>\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmps1v3ps8a.js:14\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage=\"\";\n    for(let i=0; i<message.length; i++){\n        let\
    \ vowels = \"aeiouAEIOU\";\n        let letter = message[i];\n        if(vowels.indexOf(letter)\
    \ > -1){\n            let index = vowels.indexOf(letter);\n            let newLetter\
    \ = (index+2)%26; \n            letter=newLetter;\n        }\n        newMessage+=letter;\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'T8ST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp34ztkdbg.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp34ztkdbg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'T8ST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  //Write code here\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpat6evhzl.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpat6evhzl.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var letters = []\n  for(var i = 0, len = message.length; i < len; i++){\n \
    \   var char = message.charAt(i)\n    if(/[aeiou]/.test(char)){\n      letters.push(char)\n\
    \    } else {\n      letters.push(getVowel(char))\n    }\n  }\n  return letters.join('')\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5a7ui_80.js:18\n      letters.push(getVowel(char))\n          \
    \    ^\n\nReferenceError: getVowel is not defined\n    at encode (/tmp/tmp5a7ui_80.js:18:15)\n\
    \    at test (/tmp/tmp5a7ui_80.js:29:20)\n    at Object.<anonymous> (/tmp/tmp5a7ui_80.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var encodedMessage = \"\";\n    for(var i=0;i<message.length;i++){\n    \
    \    var letterCode = letterCode(message.charAt(i));\n        if(letterCode<65){\n\
    \            letterCode+=26;\n        }\n        encodedMessage += String.fromCharCode(letterCode);\n\
    \    }\n    return encodedMessage;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpydx9z_b8.js:14\n        var letterCode = letterCode(message.charAt(i));\n\
    \                         ^\n\nTypeError: letterCode is not a function\n    at\
    \ encode (/tmp/tmpydx9z_b8.js:14:26)\n    at test (/tmp/tmpydx9z_b8.js:27:20)\n\
    \    at Object.<anonymous> (/tmp/tmpydx9z_b8.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var messageArray = message.toUpperCase().split(''); \n    for(var i=0; i<messageArray.length;i++){\n\
    \        var letter = messageArray[i]; \n        var letterIndex = alphabet.indexOf(letter);\
    \ \n        var vowelIndex = letterIndex + 2; \n        var nextLetter = alphabet[vowelIndex];\
    \ \n        messageArray[i] = nextLetter; \n    } \n    return messageArray.join('');\
    \ \n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp09_jikez.js:15\n        var letterIndex = alphabet.indexOf(letter);\
    \ \n                          ^\n\nReferenceError: alphabet is not defined\n \
    \   at encode (/tmp/tmp09_jikez.js:15:27)\n    at test (/tmp/tmp09_jikez.js:28:20)\n\
    \    at Object.<anonymous> (/tmp/tmp09_jikez.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encoded = \"\"\n  for (let i = 0; i < message.length; i++){\n    let letter\
    \ = message.charAt(i).toLowerCase()\n    if (letter === \"a\"){\n      letter\
    \ = \"b\"\n    } else if (letter === \"e\"){\n      letter = \"g\"\n    } else\
    \ if (letter === \"i\"){\n      letter = \"k\"\n    } else if (letter === \"o\"\
    ){\n      letter = \"s\"\n    } else if (letter === \"u\"){\n      letter = \"\
    x\"\n    }\n    encoded += letter\n  }\n  return encoded\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mxdbskr'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpuftq_2cs.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuftq_2cs.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mxdbskr',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var result = \"\";\n  \n  for (var i = message.length - 1; i >= 0; i--){\n\
    \    var letter = message[i].toLowerCase();\n    var vowel = letter.charCodeAt(0);\n\
    \    var consonant;\n    if (vowel >= 65 && vowel <= 90){\n      consonant = letter.charCodeAt(0)\
    \ - 65;\n      result += \"S\" + consonant + letter.substr(1, 1);\n    }\n   \
    \ else if ((vowel >= 97 && vowel <= 122) || (vowel >= 48 && vowel <= 57)){\n \
    \     consonant = letter.charCodeAt(0) - 97;\n      result += \"K\" + consonant\
    \ + letter.substr(1, 1);\n    }\n    else{\n      result += letter;\n    }\n \
    \ }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'K19K18K4K19'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpza7ydbh2.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpza7ydbh2.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'K19K18K4K19',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    //TODO: Implement this\n}\nvar decode = decode; // alias\n\nmodule.exports\
    \ = {\n    encode: encode,\n    decode: decode\n};\n\n},{}],5:[function(require,module,exports){\n\
    'use strict';\n\nvar base = require('./base');\n\nmodule.exports = function()\
    \ {\n    var args = base.Array.prototype.slice.call(arguments);\n    var text\
    \ = args.shift();\n    var pattern = /[a-z]{2}/i;\n    var idx = text.search(pattern);\n\
    \    while (idx !== -1) {\n        text = text.replace(pattern, args[idx]);\n\
    \        idx = text.search(pattern);\n    }\n    return text;\n};\n\n},{\"./base\"\
    :4}],6:[function(require,module,exports){\n'use strict';\n\nvar base = require('./base');\n\
    \nmodule.exports = function() {\n    var args = base.Array.prototype.slice.call(arguments);\n\
    \    var text = args.shift();\n    var pattern = /[aeiou]{2}/i;\n    var idx =\
    \ text.search(pattern);\n    while (idx !== -1) {\n        text = text.replace(pattern,\
    \ args[idx]);\n        idx = text.search(pattern);\n    }\n    return text;\n\
    };\n\n},{\"./base\":4}],7:[function(require,module,exports){\n'use strict';\n\n\
    var base = require('./base');\n\nvar charMap = {\n    'A': '1',\n    'B': '2',\n\
    \    'C': '3',\n    'D': '4',\n    'E': '5',\n    'F': '6',\n    'G': '7',\n \
    \   'H': '8',\n    'I': '9',\n    'J': '0',\n    'K': '2',\n    'L': '3',\n  \
    \  'M': '4',\n    'N': '5',\n    'O': '6',\n    'P': '7',\n    'Q': '8',\n   \
    \ 'R': '9',\n    'S': '0',\n    'T': '2',\n    'U': '3',\n    'V': '4',\n    'W':\
    \ '5',\n    'X': '6',\n    'Y': '7',\n    'Z': '8',\n    'a': '1',\n    'b': '2',\n\
    \    'c': '3',\n    'd': '4',\n    'e': '5',\n    'f': '6',\n    'g': '7',\n \
    \   'h': '8',\n    'i': '9',\n    'j': '0',\n    'k': '2',\n    'l': '3',\n  \
    \  'm': '4',\n    'n': '5',\n    'o': '6',\n    'p': '7',\n    'q': '8',\n   \
    \ 'r': '9',\n    's': '0',\n    't': '2',\n    'u': '3',\n    'v': '4',\n    'w':\
    \ '5',\n    'x': '6',\n    'y': '7',\n    'z': '8'\n};\n\nmodule.exports = function()\
    \ {\n    var args = base.Array.prototype.slice.call(arguments);\n    var text\
    \ = args.shift();\n    var pattern = /[a-z]{2}/i;\n    var idx = text.\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqvxf_zs7.js:21\n},{}],5:[function(require,module,exports){\n^\n\
    \nSyntaxError: Unexpected token '}'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let message = message.split(\"\").reverse().join(\"\");\n  let result = \"\"\
    ;\n  for(let char of message){\n    result += (char)\n      .split(\"\")\n   \
    \   .reduce((a,b)=>{\n        let index = english.indexOf(b);\n        return\
    \ index > 0 ? index+2 : index;\n      },0) \n      +\n      ((english.indexOf(char)\
    \ > english.indexOf(char+2)) ? char : char+2);\n  }\n  return result.reverse().join(\"\
    \");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvotnw_3g.js:12\n  let message = message.split(\"\").reverse().join(\"\
    \");\n      ^\n\nSyntaxError: Identifier 'message' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels = \"aeiouy\"\
    ;\n    let encodedString = \"\";\n    let currentLetter;\n    for(let i = 0; i\
    \ < message.length; i++){\n        currentLetter = message.charAt(i).toLowerCase();\n\
    \        if(vowels.indexOf(currentLetter) == -1){\n            encodedString +=\
    \ alphabet[alphabet.indexOf(currentLetter)];\n        }else{\n            encodedString\
    \ += alphabet[alphabet.indexOf(currentLetter) + 2];\n        }\n    }\n    return\
    \ encodedString;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mwdcskr'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmphl1dnudn.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmphl1dnudn.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mwdcskr',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let result = \"\";\n  for (let i = 0; i < message.length; i++){\n    const\
    \ letter = message[i].toLowerCase();\n    result += alphabet.indexOf(letter);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3a0aowow.js:15\n    result += alphabet.indexOf(letter);\n     \
    \         ^\n\nReferenceError: alphabet is not defined\n    at encode (/tmp/tmp3a0aowow.js:15:15)\n\
    \    at test (/tmp/tmp3a0aowow.js:25:20)\n    at Object.<anonymous> (/tmp/tmp3a0aowow.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let result=[];\n    let map=new Map();\n    for(let i=0; i<message.length;\
    \ i++){\n        if(map.has(message[i])){\n            result[map.get(message[i])]=result[map.get(message[i])]+1\n\
    \        }else{\n            result[message[i]]=0;\n            map.set(message[i],\
    \ message[i])\n        }\n    }\n    for(let i=0; i<result.length; i++){\n   \
    \     result[i]=String.fromCharCode(\n            (result[i]-2)+\n           \
    \ 65 +\n            (result[i]>1 ? (result[i]-3)%26+65 : 0))\n    }\n    let map2=new\
    \ Map();\n    for(let i=0; i<map.size; i++){\n        map2.set(\n            map.get(i),\n\
    \            new Map([[map.get(i)-map.get(i-1)+1, i-1]]))\n    }\n    for(let\
    \ i=0; i<result.length; i++){\n        result[i]=result[i].replace(/[aeiou]/gi,\n\
    \            (x) => map2.get(x)?map2.get(x)[1]:x)\n    }\n    for(let i=0; i<result.length;\
    \ i++){\n        result[i]=result[i].split(\"\").reduce((x,y)=>x+y.charCodeAt(0))\n\
    \    }\n    for(let i=0; i<result.length; i++){\n        result[i]=String.fromCharCode(\n\
    \            (result[i]+1)+65)\n    }\n    return result\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  E: 0,\n \
    \ S: 0,\n  T: 1\n]\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0fjp0eyy.js:52:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0fjp0eyy.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ T: 1, E:\
    \ 0, S: 0 ],\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let res = \"\";\n    for(let i = 0; i < message.length; i++){\n       if(message[i]\
    \ === \"a\" || message[i] === \"e\" || message[i] === \"i\" || message[i] ===\
    \ \"o\" || message[i] === \"u\"){\n           //If char is a vowel, then replace\
    \ it with letter that is 2 places ahead\n           res += message[message.length\
    \ - i - 2] + message[message.length - i - 1];\n       }\n       else{\n      \
    \     //If char is vowel, swap letter\n           res += message[message.length\
    \ - i - 1] + message[message.length - i - 2];\n       }\n    }\n    return res;\n\
    }\n</code>\n<|/ a dscore=1 tags=string,javascript,algorithm |>\n<| c |>\nI understand\
    \ this solution, but I believe the OP was specifically looking for a JavaScript\
    \ implementation\n<|/ c |>\n<| c |>\nI agree. I actually ran it through a javascript\
    \ interpreter and the result matches the expected output.\n<|/ c |>\n<| c |>\n\
    But OP says **swap letter** not **swap char** and you swapped chars :)\n<|/ c\
    \ |>\n<| c |>\nOops! Thanks for pointing that out. Answer updated.\n<|/ c |>\n\
    <| a |>\nThe solution presented here doesn't need any external library or function\
    \ calls.\nThe idea is that you get the string without the first character (the\
    \ initial space). Then you check if the first character is a vowel. If it is,\
    \ you replace the vowel with the one that is 2 chars ahead.\nIf the first character\
    \ is not vowel, you have to reverse the string and append the initial space to\
    \ it and do the same check as above to check if the first char is a vowel.\n<code>\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxbhm30i1.js:25\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = '';\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let pos = alphabet.findIndex((e) => e === letter);\n\
    \    let nextLetter = alphabet.findIndex((e) => e === letter + 2);\n    encodedMessage\
    \ += alphabet.find(e => e === letter) + alphabet[pos + 1] + \n      alphabet[nextLetter];\
    \ \n  }\n  return encodedMessage;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9knt5dt1.js:15\n    let pos = alphabet.findIndex((e) => e === letter);\n\
    \              ^\n\nReferenceError: alphabet is not defined\n    at encode (/tmp/tmp9knt5dt1.js:15:15)\n\
    \    at test (/tmp/tmp9knt5dt1.js:27:20)\n    at Object.<anonymous> (/tmp/tmp9knt5dt1.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"];\n    return message.replace(vowels,(letter,index)\
    \ => {\n        let letterIndex = index - vowels.indexOf(letter);\n        let\
    \ vowelIndex = letterIndex % vowels.length;\n        return vowels[vowelIndex];\n\
    \    })\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppdeyix46.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppdeyix46.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tvar encodedMessage = \"\";\n\tfor(var i = 0; i < message.length; i++){\n\t\t\
    var letter = message.charAt(i);\n\t\tif(letter === \"a\" || letter === \"e\" ||\
    \ letter === \"i\" || letter === \"o\" || letter === \"u\")\n\t\t\tletter = message.charAt(i+2);\n\
    \t\tencodedMessage += letter;\n\t}\n\treturn encodedMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbvc0tq22.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbvc0tq22.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let vowels = 'AEIOU';\n  let vowelsSwapped = 'AEIOUaeiou';\n  let vowelsSwapped\
    \ = vowelsSwapped.split('');\n  let messageLetters = message.split('');\n  let\
    \ messageLettersSwapped = messageLetters.map(letter => letter.toLowerCase());\n\
    \  let messageLettersSwapped = messageLettersSwapped.filter(letter => vowelsSwapped.indexOf(letter)\
    \ < 0);\n  let messageLettersSwapped = messageLettersSwapped.map(letter => vowelsSwapped.indexOf(letter)\
    \ > -1 ? vowelsSwapped.indexOf(letter) : letter);\n  let messageLettersSwapped\
    \ = messageLettersSwapped.join('');\n  return messageLettersSwapped;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpj8jg9dbf.js:14\n  let vowelsSwapped = vowelsSwapped.split('');\n\
    \      ^\n\nSyntaxError: Identifier 'vowelsSwapped' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var messageList = message.toLowerCase().split('');\n    var swappedLetters\
    \ = '';\n    var vowels = 'aeiouAEIOU';\n\n    for(var i=0; i<messageList.length;\
    \ i++){\n        var currentLetter = messageList[i];\n        var currentVowelIndex\
    \ = vowels.indexOf(currentLetter);\n        if(currentVowelIndex > -1){\n    \
    \        var nextLetter = vowels.charAt(currentVowelIndex+2);\n            swappedLetters\
    \ += nextLetter;\n        }\n        swappedLetters += currentLetter;\n    }\n\
    \    return swappedLetters;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'toest'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqlxzi25x.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqlxzi25x.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'toest',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var output=\"\";\n    for(var i=0;i<message.length;i++){\n        var letter=message[i].toLowerCase();\n\
    \        var nextLetter=message[i+1].toLowerCase();\n        if(letter==\"a\"\
    ||letter==\"e\"||letter==\"i\"||letter==\"o\"||letter==\"u\"){\n            output+=letter;\n\
    \        }else if(letter==\"A\"||letter==\"E\"||letter==\"I\"||letter==\"O\"||letter==\"\
    U\"){\n            output+=letter.toUpperCase();\n        }else if(nextLetter==\"\
    a\"||nextLetter==\"e\"||nextLetter==\"i\"||nextLetter==\"o\"||nextLetter==\"u\"\
    ){\n            output+=nextLetter;\n        }else{\n            output+=letter+nextLetter;\n\
    \        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzccyx31e.js:15\n        var nextLetter=message[i+1].toLowerCase();\n\
    \                                    ^\n\nTypeError: Cannot read properties of\
    \ undefined (reading 'toLowerCase')\n    at encode (/tmp/tmpzccyx31e.js:15:37)\n\
    \    at test (/tmp/tmpzccyx31e.js:34:20)\n    at Object.<anonymous> (/tmp/tmpzccyx31e.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var letters = \"abcdefghijklmnopqrstuvwxyz\";\n  var vowels = \"aeiou\";\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ pos = message.charCodeAt(i) - 97;\n    var replaced = newMessage.split(\"\"\
    ).map(function(e,i){\n      return letters.indexOf(e)+pos/2\n    }).join(\"\"\
    );\n    newMessage = newMessage.replace(message.charAt(i), replaced);\n  }\n \
    \ for(var i = 0; i < message.length; i++){\n    var pos = message.charCodeAt(i)\
    \ - 65;\n    var replaced = newMessage.split(\"\").map(function(e,i){\n      return\
    \ vowels.indexOf(e)+pos/2\n    }).join(\"\");\n    newMessage = newMessage.replace(message.charAt(i),\
    \ replaced);\n  }\n  return(newMessage);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmpbrffp3uq.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbrffp3uq.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = message.replace(/[a-z]/g,function(letter){\n    let lowerLetter\
    \ = letter.toLowerCase();\n    let vowelIndex = lowerLetter.search(/[aeiou]/);\n\
    \    let vowelPosition = vowelIndex + 2\n    return lowerLetter[vowelPosition]\n\
    \  }); \n  let vowelPosition = encodedMessage.search(/[aeiou]/);\n  let letter\
    \ = encodedMessage.charAt(vowelPosition);\n  encodedMessage = encodedMessage.replace(/[a-z]/g,letter);\n\
    \  return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_trw4f47.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_trw4f47.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    //Your code goes here\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1wwbynq1.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1wwbynq1.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  const messageArray = message.split(\"\").map(letter => letter.toLowerCase());\n\
    \  const lettersCount = messageArray.reduce((count,letter) => {\n    return count+=letter.match(/[a-z]/gi)\
    \ ? 1 : 0;\n  },0);\n  \n  const vowelCount = messageArray.reduce((count,letter)\
    \ => {\n    return count+=letter.match(/[aeiou]/gi) ? 1 : 0;\n  },0);\n  \n  const\
    \ lettersCount = lettersCount/2;\n  const vowelCount = vowelCount/2;\n  const\
    \ vowels = [];\n  \n  const newMessage = [];\n  \n  let letter = \"\";\n  let\
    \ messageIndex = 0;\n  while (lettersCount>0) {\n    \n    letter = messageArray[messageIndex].match(/[a-z]/gi)\
    \ ? messageArray[messageIndex].match(/[a-z]/gi)[0] : letter;\n    \n    letter.match(/[a-z]/gi)\
    \ ? newMessage.push(letter.toUpperCase()) : newMessage.push(letter);\n    lettersCount--;\n\
    \    \n    messageIndex++;\n    \n  }\n  \n  messageIndex--;\n  \n  while (vowelCount>0)\
    \ {\n    \n    letter = messageArray[messageIndex].match(/[aeiou]/gi) ? messageArray[messageIndex].match(/[aeiou]/gi)[0]\
    \ : letter;\n    \n    letter.match(/[aeiou]/gi) ? newMessage.push(letter) : newMessage.push(letter.toUpperCase());\n\
    \    vowelCount--;\n    \n    messageIndex--;\n  }\n  \n  return newMessage.join(\"\
    \");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpv8rl1e14.js:21\n  const lettersCount = lettersCount/2;\n      \
    \  ^\n\nSyntaxError: Identifier 'lettersCount' has already been declared\n   \
    \ at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = message.split('').map(function(letter){\n        return\
    \ letter.match(/[aeiou]/) ? letter : letter.charAt(0)\n    }).join('')\n    var\
    \ newLetters = newMessage.split('').map(function(letter){\n        return letter.match(/[aeiou]/)\
    \ ? letter : letter.charAt(0).toUpperCase()\n    }).join('')\n    return newLetters\
    \ + newMessage.split('').map(function(letter){\n        return letter.match(/[aeiou]/)\
    \ ? letter : letter.charAt(0).toLowerCase()\n    }).join('')\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTtest'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsac1tvfv.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsac1tvfv.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTtest',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \treturn message\n\t\t//Write a function that takes a message, and encodes in\
    \ such a \n\t\t// way that it swaps case of all letters, replaces all vowels in\
    \ \n\t\t// the message with the letter that appears 2 places ahead of that \n\t\
    \t// vowel in the english alphabet. \n\t\t// Assume only letters. \n\t\t// Examples:\n\
    \t\t// >>> encode(\"test\")\n\t\t// \"TGST\"\n\t\t// >>> encode(\"This is a message\"\
    )\n\t\t// \"tHKS KS C MGSSCGG\"\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxqksukg2.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxqksukg2.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \   var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n   var alphabetWithVowels\
    \ = \"AEIOUYaeiouy\";\n   var encoded = \"\";\n   for(var i = 0; i < message.length;\
    \ i++){\n      if(alphabet.indexOf(message[i]) > -1){\n         encoded += message[i];\n\
    \      }\n      else if(alphabetWithVowels.indexOf(message[i]) > -1){\n      \
    \   var index = alphabet.indexOf(message[i]);\n         var letter = alphabetWithVowels[(index\
    \ - 2) % alphabetWithVowels.length];\n         encoded += letter;\n      }\n \
    \     else{\n         // We could do some checks to see if we have more than 2\
    \ places \n         // ahead of our current letter and then adjust the index of\
    \ our \n         // letter accordingly, but this will work for now. \n       \
    \  // Also it shouldn't really matter what letter this is. \n         encoded\
    \ += message[i];\n      }\n   }\n   return encoded;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5ejpty4n.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5ejpty4n.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    letters = message.toLowerCase().split(\"\");\n    for (i=0;i<letters.length;i++){\n\
    \        if (letters[i] == \"a\" || letters[i] == \"e\" || letters[i] == \"i\"\
    \ || letters[i] == \"o\" || letters[i] == \"u\"){\n            letters[i+1] =\
    \ letters[i+1].toUpperCase();\n        }\n    }\n    for (i=0;i<letters.length;i++){\n\
    \        if (letters[i] == \"a\" || letters[i] == \"e\" || letters[i] == \"i\"\
    \ || letters[i] == \"o\" || letters[i] == \"u\"){\n            letters[i+1] =\
    \ letters[i+1].toLowerCase();\n        }\n    }\n    letters = letters.join(\"\
    \");\n    for (i=0;i<letters.length;i++){\n        if (letters.indexOf(\"aeiou\"\
    )!=-1){\n            letters[i] = letters[i].toUpperCase();\n        }\n     \
    \   else{\n            letters[i] = letters[i].toLowerCase();\n        }\n   \
    \ }\n    return letters;\n}\n</code>\n}\n<|/ a dscore=2 |>\n<| a tags=python,python-3.x,python-2.7\
    \ dscore=1 |>\nUse a regex substitution using groups and a dictionary to swap\
    \ characters:\n<code>\n>>> import re\n>>> message = \"This is a message\"\n>>>\
    \ pattern = r'[aeiou].'\n>>> replacements = {'e': 'A', 'i': 'I', 'o': 'O', 'u':\
    \ 'U', 'a': 'E', 'e': 'A', 'i': 'I', 'o': 'O', 'u': 'U'}\n>>> re.sub(pattern,\
    \ lambda m: replacements[m.group()], message)\n'tHKS KS C MGSSCGG'\n</code>\n\
    <|/ a |>\n<| a tags=python,python-3.x,python-2.7 dscore=0 |>\nYou can try this\
    \ \n<code>\ndef encode(string):\n  dictionary = {'a': 'e', 'i': 'i', 'o': 'o',\
    \ 'u': 'u'}\n  for i in string:\n    if i in dictionary:\n      string = string.replace(i,\
    \ dictionary[i])\n  return string\n</code>\n<|/ a |>\n<| a tags=python,python-3.x,python-2.7\
    \ |>\nI think you just need to iterate over the strings and replace them.\n<code>\n\
    def encode_message(message):\n    for letter in message:\n        if letter in\
    \ 'aeiou':\n            letter = letter.upper()\n        else:\n            letter\
    \ = letter.lower()\n\n    return message\n\nmessage = \"this is a message\"\n\
    print encode_message(message)\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    In Python3\n<code>\nmessage=\"This is a message\"\ndef encode(message):\n    letters=message\n\
    \    for letter in letters:\n        if letter.lower() in 'aeiou':\n         \
    \   letter=letter.upper()\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7xnix3g3.js:34\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var result = \"\";\n  for(var i = 0; i < message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    for(var j = 0; j < vowels.length; j++){\n      if(letter === vowels[j]){\n\
    \        result += vowels[j];\n      }\n    }\n    result += letter.charCodeAt(0)\
    \ - 96;\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp67vuhwrv.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp67vuhwrv.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var messageArray=[];\n  for(var i=0;i<message.length;i++){\n    var message=message.toUpperCase();\n\
    \    var count=0;\n    var temp=\"\";\n    var letter=message.charAt(i); \n  \
    \  for(var j=i;j<message.length;j++){\n      var letter=message.charAt(j);\n \
    \     var count=0;\n      temp+=letter;\n      for(var k=j+1;k<message.length;k++){\n\
    \        var letter=message.charAt(k);\n        if(letter!=letter){\n        \
    \  temp=temp.toUpperCase();\n        }\n        if(letter==\"A\"||letter==\"E\"\
    ||letter==\"I\"||letter==\"O\"||letter==\"U\"||letter==\"a\"){\n          temp=temp.toLowerCase();\n\
    \        }\n        if(letter==\"U\"){\n          temp=temp.replace(\"U\",\"u\"\
    );\n        }\n        if(letter==\"O\"){\n          temp=temp.replace(\"O\",\"\
    o\");\n        }\n        if(letter==\"E\"){\n          temp=temp.replace(\"E\"\
    ,\"e\");\n        }\n        if(letter==\"I\"){\n          temp=temp.replace(\"\
    I\",\"i\");\n        }\n        if(letter==\"a\"){\n          temp=temp.replace(\"\
    a\",\"a\");\n        }\n        if(letter==\"A\"){\n          temp=temp.replace(\"\
    A\",\"A\");\n        }\n        for(var l=k+1;l<message.length;l++){\n       \
    \   var letter=message.charAt(l);\n          if(letter!=letter){\n           \
    \ temp=temp.toLowerCase();\n          }\n          if(letter==\"A\"||letter==\"\
    E\"||letter==\"I\"||letter==\"O\"||letter==\"U\"||letter==\"a\"){\n          \
    \  temp=temp.toLowerCase();\n          }\n          if(letter==\"U\"){\n     \
    \       temp=temp.replace(\"U\",\"u\");\n          }\n          if(letter==\"\
    O\"){\n            temp=temp.replace(\"O\",\"o\");\n          }\n          if(letter==\"\
    E\"){\n            temp=temp.replace(\"E\",\"e\");\n          }\n          if(letter==\"\
    I\"){\n            temp=temp.replace(\"I\",\"i\");\n          }\n          if(letter==\"\
    a\"){\n            temp=temp.replace(\"a\",\"a\");\n          }\n          if(letter==\"\
    A\"){\n            temp=temp.replace(\"A\",\"A\");\n          }\n          temp=temp.replace(\"\
    Z\",\"Z\");\n        }\n      }\n    }\n    temp=temp.replace(\"Z\",\"Z\");\n\
    \    temp=temp.replace(\"a\",\"A\");\n    temp=temp.replace(\"e\",\"E\");\n  \
    \  temp=temp.replace(\"i\",\"I\");\n    temp=temp.replace(\"o\",\"O\");\n    temp=\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpm785z6gs.js:84\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  return message.toLowerCase()\n            .replace(/[a-z]/g, function(c){ \n\
    \              return [c.toUpperCase(), c.toLowerCase()][Math.floor(Math.random()*2)];\
    \ \n            })\n            .replace(/[aeiou]/g, function(c){ \n         \
    \     return [\"A\", \"E\", \"I\", \"O\", \"U\"][Math.floor(Math.random()*5)];\
    \ \n            })\n            .replace(/[^a-z]/g, function(){\n            \
    \  return \"X\"; \n            })\n            .replace(/^X/, function(c){ \n\
    \              return c; \n            })\n            .replace(/X$/, function(c){\
    \ \n              return c; \n            });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'XXst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8dlfplge.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8dlfplge.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'XXst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  let encodedMessage = ''\n  let\
    \ previousLetter = ''\n  let previousVowel = ''\n  for (let i = 0; i < message.length;\
    \ i++){\n    let currentLetter = message[i]\n    let currentVowel = message[i\
    \ - 1]\n    // handle previous vowel\n    if (previousVowel != currentVowel){\n\
    \      // make a new encoded message with the vowel replaced by its position\n\
    \      encodedMessage += alphabet[alphabet.indexOf(previousVowel) + alphabet.indexOf(currentVowel)\
    \ - alphabet.indexOf(previousLetter) - 1]\n      // reset letter with empty string\n\
    \      previousLetter = ''\n      previousVowel = ''\n    }\n    // handle previous\
    \ letter\n    if (previousLetter != currentLetter){\n      // encode the letter\n\
    \      previousLetter = currentLetter\n      encodedMessage += currentLetter\n\
    \      // reset vowel with empty string\n      previousVowel = ''\n    }\n  }\n\
    \  return encodedMessage\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefinedTundefinedEundefinedSundefinedT'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2se93r0w.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2se93r0w.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefinedTundefinedEundefinedSundefinedT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    return message.replace(/[A-Z]/g, function(letter){\n        return letter.charCodeAt(0)\
    \ - 97;\n    }).replace(/[aeiou]/g, function(letter){\n        return letter.charCodeAt(0)\
    \ - 65 + 26;\n    }).replace(/[AEIOU]/g, function(letter){\n        return letter.charCodeAt(0)\
    \ - 97 + 26;\n    }).replace(/[^a-zA-Z]/g, function(letter){\n        return letter.charCodeAt(0)\
    \ - 65 + 26 + 26;\n    });\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'323638323743323639323638'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph33pt8ky.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmph33pt8ky.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '323638323743323639323638',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tvar rep = {'A':'T','B':'U','C':'V','D':'H','E':'K','F':'G','G':'F','H':'D','I':'T','J':'J','K':'S','L':'L','M':'M','N':'N','O':'O','P':'P','Q':'Q','R':'R','S':'S','T':'T','U':'U','V':'V','W':'W','X':'X','Y':'Y','Z':'Z','a':'t','b':'u','c':'v','d':'h','e':'k','f':'g','g':'f','h':'d','i':'t','j':'j','k':'s','l':'l','m':'m','n':'n','o':'o','p':'p','q':'q','r':'r','s':'s','t':'t','u':'u','v':'v','w':'w','x':'x','y':'y','z':'z'};\n\
    \tvar messageLower = message.toLowerCase(), len = messageLower.length;\n\t\n\t\
    while(len--){\n\t\tvar ch = messageLower.charAt(len);\n\t\tmessageLower = messageLower.replace(ch,\
    \ ch in rep ? rep[ch] : ch);\n\t}\n\treturn messageLower;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tkst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpj5ce1pn9.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpj5ce1pn9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tkst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    message = message.toUpperCase()\n    let ans = \"\"\n    for (i = 0; i <=\
    \ message.length; i++) {\n        const c = message.charAt(i)\n        ans +=\
    \ getCaseOf(c)\n    }\n    return ans\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvporhdwx.js:16\n        ans += getCaseOf(c)\n        ^\n\nReferenceError:\
    \ getCaseOf is not defined\n    at encode (/tmp/tmpvporhdwx.js:16:9)\n    at test\
    \ (/tmp/tmpvporhdwx.js:26:20)\n    at Object.<anonymous> (/tmp/tmpvporhdwx.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    // write your logic here\n    return message;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpn8hz28db.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn8hz28db.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  var messageChars = message.split(\"\
    \");\n  var encodedChars = [];\n  for(var i = 0; i < messageChars.length; i++){\n\
    \    var messageChar = messageChars[i];\n    var encodedChar = alphabet[messageChar.charCodeAt()\
    \ - 'A'.charCodeAt() + 2];\n    encodedChars.push(encodedChar);\n  }\n  return\
    \ encodedChars.join(\"\");\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_1vpdm0b.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_1vpdm0b.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var encodedMessage = '';\n    for(var i = 0;i < message.length; i++){\n \
    \       var letter = message.charAt(i);\n        \n        var firstVowelLetter\
    \ = letter.toLowerCase();\n        if(firstVowelLetter === 'a' || firstVowelLetter\
    \ === 'e' || firstVowelLetter === 'i' || firstVowelLetter === 'o' || firstVowelLetter\
    \ === 'u'){\n            var letterAfterVowel = message.charAt(i + 1);\n     \
    \       \n            var secondVowelLetter = letterAfterVowel.toLowerCase();\n\
    \            if(secondVowelLetter === 'a' || secondVowelLetter === 'e' || secondVowelLetter\
    \ === 'i' || secondVowelLetter === 'o' || secondVowelLetter === 'u'){\n      \
    \          var letterAfterNextVowel = message.charAt(i + 2);\n               \
    \ var thirdVowelLetter = letterAfterNextVowel.toLowerCase();\n               \
    \ if(thirdVowelLetter === 'a' || thirdVowelLetter === 'e' || thirdVowelLetter\
    \ === 'i' || thirdVowelLetter === 'o' || thirdVowelLetter === 'u'){\n        \
    \            var letterAfterNextNextVowel = message.charAt(i + 3);\n         \
    \           var fourthVowelLetter = letterAfterNextNextVowel.toLowerCase();\n\
    \                    if(fourthVowelLetter === 'a' || fourthVowelLetter === 'e'\
    \ || fourthVowelLetter === 'i' || fourthVowelLetter === 'o' || fourthVowelLetter\
    \ === 'u'){\n                        var letterAfterNextNextNextVowel = message.charAt(i\
    \ + 4);\n                        if(letterAfterNextNextNextVowel.toLowerCase()\
    \ === 'a'){\n                            var letterAfterNextNextNextNextVowel\
    \ = message.charAt(i + 5);\n                            if(letterAfterNextNextNextNextVowel.toLowerCase()\
    \ === 'a'){\n                                var letterAfterNextNextNextNextVowel\
    \ = message.charAt(i + 6);\n                                if(letterAfterNextNextNextNextVowel.toLowerCase()\
    \ === 'a'){\n                                    var letterAfterNextNextNextNextVowel\
    \ = message.charAt(i + 7);\n                                    if(letterAfterNextNextNextNextNextVowel.toLowerCase()\
    \ === 'a'){\n                                        var letterAfterNextNextNextNextNextVowel\
    \ = message.charAt(i + 8);\n                                        if(letterAfterNextNextNextNextNextVowel.toLowerCase()\
    \ === 'a'){\n                                            encodedMessage = encodedMessage\
    \ + firstVowelLetter + secondVowelLetter\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqk9fdwga.js:51\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let vowels = \"aeiouy\";\n    let result = \"\";\n    let currentLetter =\
    \ message[0];\n    let vowelIndex = 0;\n    for (let i = 1; i < message.length;\
    \ i++){\n        if (vowels.includes(message[i])){\n            vowelIndex +=\
    \ 2;\n        }\n        else if (vowels.includes(message[i]) \n            &&\
    \ vowelIndex + 1 < message.length){\n            currentLetter = message[i];\n\
    \            vowelIndex = i;\n        }\n        result += currentLetter;\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,algorithm,string\
    \ |>\n<code>\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp3ojglnnq.js:29\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var res = \"\";\n  var prevVowel;\n  var lastVowel;\n  var countVowels = 0;\n\
    \  var countLetters = 0;\n\n  for(var i = 0; i < message.length; i++){\n    if(message[i].toUpperCase()\
    \ === message[i]){\n      if(countLetters >= 2){\n        lastVowel = message.substr(i-1,\
    \ 1)\n        if(prevVowel.toUpperCase() === lastVowel.toUpperCase()){\n     \
    \     res += message.substr(i-1, 2)\n        }\n      }\n      countLetters++;\n\
    \    } else {\n      countLetters++;\n    }\n    prevVowel = message[i];\n  }\n\
    \n  for(var i = 0; i < message.length; i++){\n    var position = alphabet.indexOf(message[i]);\n\
    \    if(position > -1){\n      res += alphabet[position-1];\n      countVowels++;\n\
    \    }\n  }\n\n  if(countVowels > 0){\n    return res.slice(0, res.length-1);\n\
    \  } else {\n    return res;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvs5e00h4.js:34\n    var position = alphabet.indexOf(message[i]);\n\
    \                   ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmpvs5e00h4.js:34:20)\n    at test (/tmp/tmpvs5e00h4.js:53:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpvs5e00h4.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var rep = message.split(\"\");\n    var newMessage = \"\";\n    var firstVowel\
    \ = message.indexOf(\"a\");\n    for(var i = 0; i < rep.length; i++){\n      \
    \  if(rep[i].indexOf(\"a\") !== -1){\n            var foundVowel = false;\n  \
    \          var nextVowel = rep[i].indexOf(\"a\");\n            while(!foundVowel\
    \ && nextVowel > 0){\n                if(rep[i].indexOf(\"a\") == (nextVowel-1)){\n\
    \                    rep[i] = rep[i].replace(\"a\", \"A\");\n                \
    \    foundVowel = true;\n                }\n                nextVowel = rep[i].indexOf(\"\
    a\", nextVowel+1);\n            }\n        }\n        newMessage += rep[i].toUpperCase();\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxfq2waid.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxfq2waid.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    var newMessage = ''\n  \
    \  message.split(\"\").map(function(letter){\n        var index = alphabet.indexOf(letter)\n\
    \        if(index === -1){\n            return letter\n        } else {\n    \
    \        newMessage += alphabet.charAt(index-2)\n            newMessage += alphabet.charAt(index)\n\
    \            return letter\n        }\n    })\n    return newMessage\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmpsyb0otxb.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsyb0otxb.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let result = '';\n  for(let i = 0; i < message.length; i++){\n    if (message[i]\
    \ === ' ') result += ' ';\n    else if (message[i] === 'a' || message[i] === 'e'\
    \ || message[i] === 'i' || message[i] === 'o' || message[i] === 'u'){\n      result\
    \ += encodeLetter(message[i], i, message.substring(0, i).split('').filter((letter,\
    \ index) => index > i && letter === message[i]).length);\n    } else {\n     \
    \ result += message[i];\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpn65d6p5s.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn65d6p5s.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let  msgSplit = message.split(\" \");\n  \n  for (let i = 0; i < msgSplit.length;\
    \ i++) {\n    msgSplit[i] = swapCase(msgSplit[i]);\n  }\n\n  let res = \"\";\n\
    \  for (let i = 0; i < msgSplit.length; i++) {\n    res += msgSplit[i];\n  }\n\
    \n  return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpgo3lk_yg.js:15\n    msgSplit[i] = swapCase(msgSplit[i]);\n    \
    \         ^\n\nReferenceError: swapCase is not defined\n    at encode (/tmp/tmpgo3lk_yg.js:15:14)\n\
    \    at test (/tmp/tmpgo3lk_yg.js:31:20)\n    at Object.<anonymous> (/tmp/tmpgo3lk_yg.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  return message.split(\"\").reduce((acc, letter, index) => {\n    if(index ===\
    \ 0){\n      return acc + letter\n    }\n\n    let nextLetter = alphabet.indexOf(letter)\
    \ + 2\n\n    if(nextLetter > 26){\n      nextLetter = alphabet[0] \n    }\n\n\
    \    return acc + alphabet[nextLetter] + letter\n  }, \"\")\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmph6afm52g.js:17\n    let nextLetter = alphabet.indexOf(letter) +\
    \ 2\n                     ^\n\nReferenceError: alphabet is not defined\n    at\
    \ /tmp/tmph6afm52g.js:17:22\n    at Array.reduce (<anonymous>)\n    at encode\
    \ (/tmp/tmph6afm52g.js:12:28)\n    at test (/tmp/tmph6afm52g.js:32:20)\n    at\
    \ Object.<anonymous> (/tmp/tmph6afm52g.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    return message.replace(/[A-Z]/g, function(letter) {\n        return letter.toUpperCase();\n\
    \    }).replace(/[AEIOUaeiou]/g,function(letter) {\n        return letter.charAt(1).toUpperCase();\n\
    \    }).replace(/[AEIOUaeiou]/g, function(letter) {\n        return letter.charAt(1).toUpperCase();\n\
    \    }).replace(/[AEIOUaeiou]/g, function(letter) {\n        return letter.charAt(1).toUpperCase();\n\
    \    }).replace(/[aeiou]/g, function(letter) {\n        return letter.charAt(1).toUpperCase();\n\
    \    }).replace(/[AEIOUaeiou]/g, function(letter) {\n        return letter.charAt(1).toUpperCase();\n\
    \    }).replace(/[aeiou]/g, function(letter) {\n        return letter.charAt(1).toUpperCase();\n\
    \    }).replace(/[AEIOUaeiou]/g, function(letter) {\n        return letter.charAt(1).toUpperCase();\n\
    \    }).replace(/[aeiou]/g, function(letter) {\n        return letter.charAt(1).toUpperCase();\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmj5oxm83.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpmj5oxm83.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TST',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \   let messageArray = message.split(\"\");\n   let newMessageArray = [];\n  \
    \ \n   for(let i=0; i<messageArray.length; i++){\n     let letter = messageArray[i];\n\
    \     let pos = alphabet.findIndex(letter => letter == letter.toLowerCase())\n\
    \     if(pos !== -1){\n       let letterIndex = pos;\n       for(let j=i+1; j<messageArray.length;\
    \ j++){\n         let nextLetter = messageArray[j];\n         if(alphabet.includes(nextLetter)){\n\
    \           letterIndex += 2;\n         }\n         else{\n           letterIndex++;\n\
    \         }\n         newMessageArray.push(alphabet[letterIndex]);\n       }\n\
    \     }\n     else{\n       newMessageArray.push(letter);\n     }\n   }\n   return\
    \ newMessageArray.join(\"\");\n}\n   \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpfmbjq91h.js:17\n     let pos = alphabet.findIndex(letter => letter\
    \ == letter.toLowerCase())\n               ^\n\nReferenceError: alphabet is not\
    \ defined\n    at encode (/tmp/tmpfmbjq91h.js:17:16)\n    at test (/tmp/tmpfmbjq91h.js:43:20)\n\
    \    at Object.<anonymous> (/tmp/tmpfmbjq91h.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    // Your code goes here\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbfgrwmgp.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbfgrwmgp.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  // Your code here\n  return message;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpux2mghkg.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpux2mghkg.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  // Your code here\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe2u3pfux.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe2u3pfux.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    message = message.toUpperCase()\n    let finalMessage = \"\"\n    for (let\
    \ i = 0; i < message.length; i++) {\n        let character = message[i]\n    \
    \    let letterIndex = alphabet.indexOf(character)\n        let letter2Index =\
    \ alphabet.indexOf(character)\n        if (letterIndex > letter2Index) {\n   \
    \         letterIndex--\n        }\n        finalMessage += alphabet[letterIndex]\n\
    \    }\n    console.log(finalMessage)\n    return finalMessage\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmptj5x1wag.js:16\n        let letterIndex = alphabet.indexOf(character)\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmptj5x1wag.js:16:27)\n    at test (/tmp/tmptj5x1wag.js:32:20)\n\
    \    at Object.<anonymous> (/tmp/tmptj5x1wag.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  var letters = \"abcdefghijklmnopqrstuvwxyz.,\"\
    ;\n  var vowels = \"aeiou\";\n\n  var finalMessage = \"\";\n  for(var i = 0; i\
    \ < message.length; i++){\n    var currentLetter = message[i];\n    var letterIndex\
    \ = alphabet.indexOf(currentLetter);\n    var nextLetterIndex = letters.indexOf(currentLetter);\n\
    \    var nextVowelIndex = vowels.indexOf(currentLetter);\n    var letterFromIndex\
    \ = letterIndex + 2;\n    if(letterIndex === -1 || letterFromIndex >= nextLetterIndex){\n\
    \      finalMessage += currentLetter;\n    }else if(letterFromIndex >= nextVowelIndex){\n\
    \      finalMessage += alphabet[nextLetterIndex];\n    }else{\n      finalMessage\
    \ += alphabet[nextVowelIndex];\n    }\n  }\n  return finalMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpytuyly1m.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpytuyly1m.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \  let encoded = ''\n  for (let i = 0; i < message.length; i++){\n    let nextLetter\
    \ = alphabet.findIndex(letter => message[i] == letter)\n    let nextVowelIndex\
    \ = alphabet.findIndex(letter => message[i] == vowel)\n    let nextVowel = alphabet.findIndex(letter\
    \ => message[i] == letters[letter])\n    encoded = encoded + message[i] + message[i].toUpperCase()\n\
    \    encoded = encoded + (nextLetter == -1 ? message[i] : letters[nextLetter])\n\
    \    if (nextVowelIndex != -1 && nextVowelIndex < nextVowel) encoded = encoded\
    \ + vowel\n  }\n  return encoded\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpt2ulvnz5.js:16\n    let nextVowelIndex = alphabet.findIndex(letter\
    \ => message[i] == vowel)\n                                                  \
    \                  ^\n\nReferenceError: vowel is not defined\n    at /tmp/tmpt2ulvnz5.js:16:69\n\
    \    at Array.findIndex (<anonymous>)\n    at encode (/tmp/tmpt2ulvnz5.js:16:35)\n\
    \    at test (/tmp/tmpt2ulvnz5.js:30:20)\n    at Object.<anonymous> (/tmp/tmpt2ulvnz5.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    const regex = /([A-Za-z])/g;\n    const replacement = \"$1\"; \n    return\
    \ message.replace(regex, replacement);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpaqpkascr.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpaqpkascr.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tlet newMessage = \"\";\n\tlet vowels = /[aeiouy]/;\n\t\n\tfor(let i = 0; i <=\
    \ message.length; i++){\n\t\tlet letter = message[i];\n\t\tlet replacement = \"\
    \";\n\t\t\n\t\tif(letter === vowels[i - 2] || letter === vowels[i + 2]){\n\t\t\
    \treplacement = letter;\n\t\t}\n\t\t\n\t\tnewMessage += replacement;\n\t}\n\t\n\
    \treturn newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefined'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpb0itpzjj.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb0itpzjj.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefined',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let swapLetters = (letter) => letter.toUpperCase().split('')\n    let swapVowels\
    \ = (vowel) => vowel.split(\"\").map((letter, i) => letter == 'a' ? 'b' : 'a').join(\"\
    \")\n    return message.replace(/a/g, swapLetters).replace(/v/g, swapVowels)\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpi9cadoxf.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpi9cadoxf.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: -1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tvar alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tvar messageChars = message.split(\"\
    \").map((c) => alphabet.indexOf(c));\n\tfor (var i = 0; i < messageChars.length;\
    \ i++){\n\t\tvar a = messageChars[i];\n\t\tvar b = messageChars[i+1];\n\t\tmessageChars[i]\
    \ = alphabet.indexOf(a);\n\t\tmessageChars[i+1] = alphabet.indexOf(b);\n\t}\n\t\
    return messageChars.join(\"\");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  return message.split(\"\").reduce(function(result, letter){\n    letter = letter.charCodeAt(0);\n\
    \    return result + String.fromCharCode(letter - 64 + letter.charCodeAt(1));\n\
    \  }, \"\");\n}\nvar tests = {\n  \"test\": function(){\n    var result = encode(\"\
    This is a message\");\n    var result2 = encode(\"This is a message\");\n    alert(result\
    \ === result2); // true \n  }\n}\nfor(var key in tests){\n  tests[key]();\n}</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThank you for posting an answer, this really helps\
    \ me understand what is going on better, and why it works. However, after trying\
    \ out your solution, I have been unable to get it to work. Could you please elaborate\
    \ on how this solution works?\n<|/ c |>\n<| c |>\nYour solution works great for\
    \ my purpose, but I understand that there are a lot of ways to do this! I am looking\
    \ for a solution that is as simple as possible.\n<|/ c |>\n<| c |>\nThanks I will\
    \ keep this in mind for other projects I am working on. I appreciate your help!\n\
    <|/ c |>\n<| a tags=javascript,string,algorithm |>\nI suggest using Array.prototype.reduce()\
    \ with a mapping function on the characters of the string. The mapping function\
    \ uses String.fromCharCode() to convert letters to their character representations\
    \ and Array.prototype.reverse() to convert the characters of the string to an\
    \ actual string. From there, you simply concatenate your resulting string with\
    \ an empty string. For example:\n\n<code>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvgyidpxo.js:26\n}</code>\n ^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var result = \"\";\n  for(var i = 0; i < message.length; i++){\n    if(message.charCodeAt(i)\
    \ > 122){\n      result += message.charAt(i) + message.charAt(i+1);\n      i++;\n\
    \    }else{\n      result += message.charAt(i);\n    }\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9tm4az0m.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9tm4az0m.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    return message.toLowerCase().replace(/[a-z]/g,function(letter){\n       \
    \ return letter.replace(/e|i|o|u/g,function(vowel){\n            return vowel.substr(0,1)+vowel.substr(1,2);\n\
    \        });\n    }).replace(/[aeiou]/g,function(letter){\n        return letter.replace(/o/g,function(vowel){\n\
    \            return vowel.substr(0,1)+vowel.substr(1,1);\n        });\n    }).replace(/[aeiou]/g,function(letter){\n\
    \        return letter.replace(/u/g,function(vowel){\n            return vowel.substr(0,1)+vowel.substr(1,1);\n\
    \        });\n    }).replace(/[aeiou]/g,function(letter){\n        return letter.replace(/e/g,function(vowel){\n\
    \            return vowel.substr(0,1)+vowel.substr(1,1);\n        });\n    });\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo0jia_c2.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpo0jia_c2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let firstLetter = message.charAt(0);\n  let allVowels = \"AEIOUaeiou\";\n \
    \ let swappedVowels = allVowels.split(\"\").map(v=>v+1);\n  let finalMessage =\
    \ message.split(\"\").map(v=>v.replace(firstLetter,swappedVowels[v]));\n  return\
    \ finalMessage.join(\"\");\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefinedESundefined'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpu5u60bzl.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu5u60bzl.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefinedESundefined',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    message = message.toLowerCase();\n    return message.split('').map(function(char){\n\
    \        switch(char){\n            case 'a': return 'g';\n            case 'e':\
    \ return 'k';\n            case 'i': return 'g';\n            case 'o': return\
    \ 'k';\n            case 'u': return 'g';\n        }\n        return char;\n \
    \   }).join('');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tkst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9o30o20k.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9o30o20k.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tkst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprl51q94i.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmprl51q94i.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976793
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newmessage = \"\";\n    var counts = [];\n    for(var i = 0; i < message.length;\
    \ i++){\n        var c = message.charAt(i);\n        var newChar = c.toUpperCase();\n\
    \        var letter = english.indexOf(newChar);\n        if(letter != -1){\n \
    \           var index = counts[letter];\n            counts[letter]++;\n     \
    \       if(index == 2){\n                newmessage += english[index];\n     \
    \       }\n        }\n        else{\n            newmessage += c;\n        }\n\
    \    }\n    return newmessage;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpglyjr71t.js:17\n        var letter = english.indexOf(newChar);\n\
    \                     ^\n\nReferenceError: english is not defined\n    at encode\
    \ (/tmp/tmpglyjr71t.js:17:22)\n    at test (/tmp/tmpglyjr71t.js:36:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpglyjr71t.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  const encodedMessage = \"\";\n  for (let i = 0; i <= message.length; i++) {\n\
    \    const currentChar = message.charAt(i);\n    const nextChar = message.charAt(i\
    \ + 2);\n    const nextCharLower = message.charAt(i + 2);\n    const nextCharUpper\
    \ = message.charAt(i + 3);\n\n    if (currentChar === nextChar) {\n      encodedMessage\
    \ += nextChar;\n    } else if (currentChar === nextCharLower) {\n      encodedMessage\
    \ += nextCharLower;\n    } else if (currentChar === nextCharUpper) {\n      encodedMessage\
    \ += nextCharUpper;\n    } else if (currentChar === \"A\" || currentChar === \"\
    E\" || currentChar === \"I\" || currentChar === \"O\" || currentChar === \"U\"\
    ) {\n      encodedMessage += currentChar;\n    } else {\n      encodedMessage\
    \ += currentChar;\n    }\n  }\n  return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp4o0ixks2.js:24\n      encodedMessage += nextCharUpper;\n      \
    \               ^\n\nTypeError: Assignment to constant variable.\n    at encode\
    \ (/tmp/tmp4o0ixks2.js:24:22)\n    at test (/tmp/tmp4o0ixks2.js:39:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp4o0ixks2.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var encodedMessage = \"\";\n    var letters = [\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for(let i = 0;\
    \ i < message.length; i++){\n        if(letters.includes(message[i])){\n     \
    \       for(let j = 0; j < vowels.length; j++){\n                if(message[i]\
    \ == vowels[j]){\n                    encodedMessage += message[i];\n        \
    \        }\n            }\n            for(let j = 0; j < letters.length; j++){\n\
    \                if(message[i] == letters[j]){\n                    encodedMessage\
    \ += letters[j];\n                }\n            }\n        }\n        else if(vowels.includes(message[i])){\n\
    \            for(let j = 0; j < letters.length; j++){\n                if(message[i]\
    \ == letters[j]){\n                    encodedMessage += letters[j];\n       \
    \         }\n            }\n            for(let j = 0; j < vowels.length; j++){\n\
    \                if(message[i] == vowels[j]){\n                    encodedMessage\
    \ += vowels[j];\n                }\n            }\n        }\n    }\n    return\
    \ encodedMessage;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmpf0281n8i.js:48:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpf0281n8i.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let result = \"\";\n    for(let i = 0; i < message.length; i++){\n      \
    \  let c = message.charAt(i);\n        if(c.toUpperCase() === c)\n           \
    \ c = c.toLowerCase();\n        result += String.fromCharCode(c.charCodeAt(0)\
    \ + 1);\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,encryption\
    \ dscore=2 |>\n<| c |>\nHi Marco, I am very new to JS and programming in general,\
    \ and I am trying to learn and follow your advice and make my own encryption.\
    \ Can you please elaborate on what this part does, and how it works: let result\
    \ = '';\n<|/ c |>\n<| c |>\n, The first line declares a variable called `result`.\
    \ You can think of it as your \"box\" that you keep your messages in. Initially,\
    \ it is empty. The second line loops through the characters in the message. `i`\
    \ is an iteration variable. `message.charAt(i)` is the character at the ith index\
    \ in the message, and `c.charCodeAt(0)` returns the code of the character at index\
    \ 0 in the string, i.e. the code of the letter. `c.charCodeAt(0)` is the same\
    \ as `message.charCodeAt(0)`, but this saves one line.\n<|/ c |>\n<| a tags=javascript,encryption\
    \ |>\nHere is my attempt\n<code>\nconst english = Array(\"a\",\"b\",\"c\",\"d\"\
    ,\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\"\
    ,\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\")\nconst englishVowels =\
    \ Array(\"a\",\"e\",\"i\",\"o\",\"u\")\nconst alphabet = Array(\"a\",\"b\",\"\
    c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"\
    p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\")\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpld9gtwjw.js:21\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  return message.replace(/[aeiou]/g, function(m){\n    return m.toUpperCase();\n\
    \  }).replace(/[AEIOU]/g, function(m){\n    return m.toUpperCase();\n  }).replace(/[a-z]/g,\
    \ function(m){\n    return m.toUpperCase();\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsjsf2oxb.js:26:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsjsf2oxb.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = '';\n    var vowels = 'aeiouAEIOU'\n    var letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \    for(var i = 0, len = message.length; i < len; i++){\n        for(var j =\
    \ 0; j < letters.length; j++){\n            var char = message[i];\n         \
    \   var nextChar = message[i+1];\n            if(vowels.indexOf(char) > -1){\n\
    \                char =  nextChar;\n            }\n            newMessage += letters[letters.indexOf(char)\
    \ + 2 ];\n        }\n        newMessage += ' '\n    }\n    return newMessage;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\
    \ UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\
    \ VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV '\n\nshould loosely deep-equal\n\
    \n'tgst'\n    at test (/tmp/tmpj7ew0c12.js:33:10)\n    at Object.<anonymous> (/tmp/tmpj7ew0c12.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\
    \ UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\
    \ VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV ',\n  expected: 'tgst',\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = message.toLowerCase();\n    let replacedMessage = \"\
    \";\n    for (let i = 0; i < encodedMessage.length; i++){\n        if (encodedMessage.charCodeAt(i)\
    \ > 96){\n            let pos = getLetterPos(encodedMessage, i);\n           \
    \ replacedMessage += encodedMessage.charAt(i);\n            encodedMessage = replaceCharAt(encodedMessage,\
    \ i, pos - 1);\n            encodedMessage = replaceCharAt(encodedMessage, i,\
    \ pos + 1);\n        } else {\n            replacedMessage += encodedMessage.charAt(i);\n\
    \        }\n    }\n    return replacedMessage;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpy9e9309f.js:16\n            let pos = getLetterPos(encodedMessage,\
    \ i);\n                      ^\n\nReferenceError: getLetterPos is not defined\n\
    \    at encode (/tmp/tmpy9e9309f.js:16:23)\n    at test (/tmp/tmpy9e9309f.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpy9e9309f.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var messageArray = message.split(\"\");\n    var newArray = [];\n    for(var\
    \ i=0; i<messageArray.length; i++){\n        //swap the case of the letter\n \
    \       if(messageArray[i] >= 'A' && messageArray[i] <= 'Z'){\n            var\
    \ temp = messageArray[i].toUpperCase();\n            messageArray[i] = temp.toLowerCase();\n\
    \        }\n        //replace vowels\n        if(messageArray[i] === 'a' || messageArray[i]\
    \ === 'e' || messageArray[i] === 'i' || messageArray[i] === 'o' || messageArray[i]\
    \ === 'u'){\n            var index = i;\n            for(i+1; i<messageArray.length;\
    \ i++){\n                if(messageArray[i] === 'a' || messageArray[i] === 'e'\
    \ || messageArray[i] === 'i' || messageArray[i] === 'o' || messageArray[i] ===\
    \ 'u'){\n                    var tempIndex = i;\n                    var tempValue\
    \ = messageArray[tempIndex];\n                    messageArray[tempIndex] = messageArray[index];\n\
    \                    messageArray[index] = tempValue;\n                    index\
    \ = tempIndex;\n                }\n            }\n        }\n        //replace\
    \ 2 vowels in one with one vowel\n        if(messageArray[i] === 'a' && messageArray[i+1]\
    \ === 'o' && messageArray[i+2] === 'o'){\n            messageArray[i] = 'o';\n\
    \        }\n        //replace 2 vowels in one with 2 vowels\n        if(messageArray[i]\
    \ === 'a' && messageArray[i+1] === 'o' && messageArray[i+2] === 'u'){\n      \
    \      messageArray[i] = 'u';\n        }\n        //replace 1 vowel in one with\
    \ 3 vowels\n        if(messageArray[i] === 'a' && messageArray[i+1] === 'e' &&\
    \ messageArray[i+2] === 'e'){\n            messageArray[i] = 'e';\n        }\n\
    \        //replace 1 vowel in one with 2 vowels\n        if(messageArray[i] ===\
    \ 'a' && messageArray[i+1] === 'e' && messageArray[i+2] === 'u'){\n          \
    \  messageArray[i] = 'u';\n        }\n        //replace 1 vowel in one with 1\
    \ vowel\n        if(messageArray[i] === 'a' && messageArray[i+1] === 'a' && messageArray[i+2]\
    \ === 'a'){\n            messageArray[i] = 'a';\n        }\n        //replace\
    \ 1 vowel in one with 1 vowel\n        if(messageArray[i] === 'a' && messageArray[i+1]\
    \ === 'a' && messageArray[i+2] === 'o'){\n            messageArray[i] = 'o';\n\
    \        }\n        //replace 1 vowel in one with 1 vowel\n        if(messageArray[i]\
    \ === 'a' && messageArray[i+1] === 'e' && messageArray[i+2] === 'e'){\n      \
    \      messageArray[i] = 'e';\n        }\n        //replace 1 vowel in one with\
    \ 1 vowel\n        if(messageArray[i] === 'a' && messageArray[i+1] === 'e' &&\
    \ messageArray[i+2] === '\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_4jbb2d5.js:62\n        if(messageArray[i] === 'a' && messageArray[i+1]\
    \ === 'e' && messageArray[i+2] === '\n                                       \
    \                                                  ^\n\nSyntaxError: Invalid or\
    \ unexpected token\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var result = '';\n    for(var i=0;i<message.length;i++){\n        var letter\
    \ = message[i].toLowerCase();\n        if(letter==='a'||letter==='e'||letter==='i'||letter==='o'||letter==='u'){\n\
    \            result += letter;\n        }\n        else{\n            var index\
    \ = alphabet.indexOf(letter);\n            result += alphabet[index+2];\n    \
    \    }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpru2eermf.js:19\n            var index = alphabet.indexOf(letter);\n\
    \                        ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmpru2eermf.js:19:25)\n    at test (/tmp/tmpru2eermf.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpru2eermf.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let result = []\n    let index = 0\n    for(let i = 0; i < message.length;\
    \ i++){\n        if(message[i] === \"a\"){\n            result.push(\"t\");\n\
    \            result.push(\"g\")\n            result.push(\"h\")\n            result.push(\"\
    s\");\n        }\n        if(message[i] === \"e\"){\n            result.push(\"\
    a\")\n            result.push(\"u\")\n            result.push(\"i\");\n      \
    \      result.push(\"e\")\n        }\n        if(message[i] === \"i\"){\n    \
    \        result.push(\"e\")\n            result.push(\"h\")\n            result.push(\"\
    u\")\n            result.push(\"a\");\n        }\n        if(message[i] === \"\
    o\"){\n            result.push(\"e\")\n            result.push(\"g\")\n      \
    \      result.push(\"g\")\n            result.push(\"h\")\n        }\n       \
    \ if(message[i] === \"u\"){\n            result.push(\"i\")\n            result.push(\"\
    h\")\n            result.push(\"i\")\n            result.push(\"e\")\n       \
    \ }\n        if(message[i] === \"y\"){\n            result.push(\"i\")\n     \
    \       result.push(\"g\")\n            result.push(\"h\")\n            result.push(\"\
    s\")\n        }\n        if(message[i] === \"a\"){\n            result.push(\"\
    a\")\n            result.push(\"t\")\n            result.push(\"t\")\n       \
    \     result.push(\"s\")\n        }\n        if(message[i] === \"e\"){\n     \
    \       result.push(\"e\")\n            result.push(\"k\")\n            result.push(\"\
    k\")\n            result.push(\"s\")\n        }\n        if(message[i] === \"\
    i\"){\n            result.push(\"i\")\n            result.push(\"k\")\n      \
    \      result.push(\"k\")\n            result.push(\"c\")\n        }\n       \
    \ if(message[i] === \"o\"){\n            result.push(\"i\")\n            result.push(\"\
    k\")\n            result.push(\"k\")\n            result.push(\"g\")\n       \
    \ }\n        if(message[i] === \"u\"){\n            result.push(\"i\")\n     \
    \       result.push(\"k\")\n            result.push(\"k\")\n            result.push(\"\
    h\")\n        }\n        if(message[i] === \"y\"){\n            result.push(\"\
    i\")\n            result.push(\"k\")\n            result.push(\"k\")\n       \
    \     result.push(\"s\")\n        }\n        if(message[i] === \"a\"){\n     \
    \       result.push(\"a\")\n            result.push(\"t\")\n            result.push(\"\
    t\")\n            result.push(\"s\")\n        }\n        if(message[i] === \"\
    e\"){\n            result.push(\"e\")\n            result.push(\"k\")\n      \
    \      result.push(\"k\")\n            result.push(\"s\")\n        }\n       \
    \ if(message[i] === \"i\"){\n            result.push(\"i\")\n            result.push(\"\
    k\")\n            result.push(\"k\")\n            result.push(\"c\")\n       \
    \ }\n        if(message[i] \nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvcpg6kay.js:106\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var messageArray = message.split(\"\");\n    for (var i = 0; i < messageArray.length;\
    \ i++){\n        messageArray[i] = getLetter(messageArray[i], i);\n    }\n   \
    \ return messageArray.join(\"\");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpxfeno2es.js:14\n        messageArray[i] = getLetter(messageArray[i],\
    \ i);\n                     ^\n\nReferenceError: getLetter is not defined\n  \
    \  at encode (/tmp/tmpxfeno2es.js:14:22)\n    at test (/tmp/tmpxfeno2es.js:24:20)\n\
    \    at Object.<anonymous> (/tmp/tmpxfeno2es.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976891
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \   var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n   message = message.split('');\n\
    \   for(var i=0; i<message.length; i++){\n       var swap = message[i].toUpperCase().charCodeAt(0)\
    \ - 96;\n       var replace = vowels[swap % vowels.length];\n       message[i]\
    \ = replace;\n   }\n   return message.join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmpc9blj6mn.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpc9blj6mn.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i).toUpperCase();\n    letter = letter === letter.toLowerCase()\
    \ ? \"a\" : \"A\";\n    for(var j = 0; j < message.length; j++){\n      if(j ===\
    \ i) letter = letter + \"G\";\n      if(message.charAt(j) === letter){\n     \
    \   newMessage += letter;\n      }\n    }\n  }\n  return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmpdkopn6ai.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdkopn6ai.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var letters = message.split(\"\");\n  var message1 = \"\";\n  for(var i = 0;\
    \ i<letters.length; i++){\n    var letter = letters[i];\n    if(letters.indexOf(letter)<i+2){\n\
    \      var nextLetter = letters[letters.indexOf(letter)+1];\n      letter = letter.swapcase();\n\
    \      if(letter.match(/[aeiou]/) && letter.match(nextLetter)){\n        var tempLetter\
    \ = letters[letters.indexOf(letter)-1];\n        letter = letter.replace(tempLetter,\
    \ nextLetter);\n      }\n    }\n    message1 += letter;\n  }\n  return message1;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpbr5_0tux.js:18\n      letter = letter.swapcase();\n           \
    \           ^\n\nTypeError: letter.swapcase is not a function\n    at encode (/tmp/tmpbr5_0tux.js:18:23)\n\
    \    at test (/tmp/tmpbr5_0tux.js:34:20)\n    at Object.<anonymous> (/tmp/tmpbr5_0tux.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n  var result = '';\n\
    \  var len = message.length;\n  for (var i = 0; i < len; i++){\n    var pos =\
    \ alphabet.indexOf(message[i].toUpperCase());\n    result += alphabet.charAt(pos\
    \ - 1);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpb89ulgu5.js:17\n    result += alphabet.charAt(pos - 1);\n     \
    \                  ^\n\nTypeError: alphabet.charAt is not a function\n    at encode\
    \ (/tmp/tmpb89ulgu5.js:17:24)\n    at test (/tmp/tmpb89ulgu5.js:27:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpb89ulgu5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var result = \"\"\n    for (var i=0; i<message.length; i++) {\n        var\
    \ letter = message[i]\n        result += (letter.charCodeAt(0) - 65) + letter.charCodeAt(1)\
    \ - 55\n    }\n    return result\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsktot0kg.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsktot0kg.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let s = message.toLowerCase()\n    let result = \"\"\n    for(let i = 0;\
    \ i < s.length; i++){\n        if(s.charCodeAt(i) > 96){\n            result +=\
    \ s.charAt(i).toLowerCase()\n        }else{\n            result += s.charAt(i)\n\
    \        }\n    }\n    return result\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6j5zhpx5.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6j5zhpx5.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    return message.toLowerCase().replace(/[a-z]/g,function(letter){\n       \
    \ return letter.charCodeAt(0)-64;\n    }).replace(/[aeiou]/g,function(letter){\n\
    \        return letter.charCodeAt(1)-55;\n    }).replace(/[AEIOU]/g,function(letter){\n\
    \        return letter.charCodeAt(2)-48;\n    }).replace(/[AEIOUaeiou]/g,function(letter){\n\
    \        return letter.charCodeAt(3)+4;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'52375152'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0s018r3m.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0s018r3m.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '52375152',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    // Split the message into an array of letters.\n    const letters = message.split(\"\
    \");\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    // Get the\
    \ length of each array element. \n    // Remember that arrays start at 0, so the\
    \ first letter of the array is at 0.\n    const lengths = [0, 3, 6, 9, 12];\n\
    \    // Define a variable that holds the letter that appears 2 places ahead of\
    \ the \n    // current letter in the alphabet. \n    // Remember to start at 0,\
    \ because arrays start at 0.\n    const currentLetter = letters[0];\n    // Write\
    \ your code here.\n    return \"\";\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmp2i21aiu1.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2i21aiu1.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  //Write your code here\n  var message = \"\";\n  var index = 0;\n  for(var\
    \ i=0; i<message.length; i++){\n    if(message.charAt(i) == 'a' || message.charAt(i)\
    \ == 'e' || message.charAt(i) == 'i' || message.charAt(i) == 'o' || message.charAt(i)\
    \ == 'u'){\n      if(index == 0){\n        message = message.substring(0, index)\
    \ + \"A\" + message.substring(index, message.length);\n      }\n      else{\n\
    \        message = message.substring(0, index) + \"a\" + message.substring(index,\
    \ message.length);\n      }\n      index = index + 2;\n    }\n    if(message.charAt(i)\
    \ == 'b' || message.charAt(i) == 'c' || message.charAt(i) == 'd' || message.charAt(i)\
    \ == 'f'){\n      if(index == 0){\n        message = message.substring(0, index)\
    \ + \"B\" + message.substring(index, message.length);\n      }\n      else{\n\
    \        message = message.substring(0, index) + \"b\" + message.substring(index,\
    \ message.length);\n      }\n      index = index + 2;\n    }\n    if(message.charAt(i)\
    \ == 'g' || message.charAt(i) == 'h' || message.charAt(i) == 'j' || message.charAt(i)\
    \ == 'k' || message.charAt(i) == 'l'){\n      if(index == 0){\n        message\
    \ = message.substring(0, index) + \"C\" + message.substring(index, message.length);\n\
    \      }\n      else{\n        message = message.substring(0, index) + \"c\" +\
    \ message.substring(index, message.length);\n      }\n      index = index + 2;\n\
    \    }\n    if(message.charAt(i) == 'm' || message.charAt(i) == 'n' || message.charAt(i)\
    \ == 'o' || message.charAt(i) == 'p' || message.charAt(i) == 'q' || message.charAt(i)\
    \ == 'r'){\n      if(index == 0){\n        message = message.substring(0, index)\
    \ + \"D\" + message.substring(index, message.length);\n      }\n      else{\n\
    \        message = message.substring(0, index) + \"d\" + message.substring(index,\
    \ message.length);\n      }\n      index = index + 2;\n    }\n    if(message.charAt(i)\
    \ == 's' || message.charAt(i) == 't' || message.charAt(i) == 'v' || message.charAt(i)\
    \ == 'w' || message.charAt(i) == 'x' || message.charAt(i) == 'y' || message.charAt(i)\
    \ == 'z'){\n      if(index == 0){\n        message = message.substring(0, index)\
    \ + \"E\" + message.substring(index, message.length);\n      }\n      else{\n\
    \        message = message.substring(0, index) + \"e\" + message.substring(index,\
    \ message.length);\n      }\n      index = index + 2;\n    }\n    if(message.charAt(i)\
    \ == 'A' || message.charAt(i) == 'a' || message.charAt(i) == 'B' || message.charAt(i)\
    \ == 'b' || message.charAt(i) == 'C' || message.charAt(i) == 'c' || message.charAt(i)\
    \ == 'D' || message.charAt(i) == 'd' || message.charAt(i) == 'E' || message.charAt(i)\
    \ == 'e' || \nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphnhxjsmq.js:62\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tlet output = '';\n\t\n\tfor(let i = 0; i < message.length; i++){\n\t\tlet letter\
    \ = message.charAt(i);\n\t\tif(letter === 'a' || letter === 'e' || letter ===\
    \ 'i' || letter === 'o' || letter === 'u'){\n\t\t\tletter = letter.toUpperCase();\n\
    \t\t}\n\t\t\n\t\tlet nextLetter = message.charAt(i+1);\n\t\tif(nextLetter ===\
    \ 'a' || nextLetter === 'e' || nextLetter === 'i' || nextLetter === 'o' || nextLetter\
    \ === 'u'){\n\t\t\tnextLetter = nextLetter.toUpperCase();\n\t\t}\n\t\t\n\t\toutput\
    \ += letter + nextLetter;\n\t}\n\t\n\treturn output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEESSTT'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpel2uta08.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpel2uta08.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEESSTT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let s = \"\";\n  for (let i = 0; i < message.length; i++) {\n    s += message[i].toLowerCase();\n\
    \  }\n  let newMessage = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if\
    \ (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) {\n      if (s.charCodeAt(i)\
    \ > 96) {\n        newMessage += s.charCodeAt(i) - 32\n      } else {\n      \
    \  newMessage += s.charCodeAt(i);\n      }\n    } else {\n      newMessage +=\
    \ s.charCodeAt(i);\n    }\n  }\n  let vowels = \"aeiouyAEIOUY\"\n  for (let i\
    \ = 0; i < vowels.length; i++) {\n    newMessage = newMessage.replace(vowels[i],\
    \ vowels[i].charCodeAt(2) + 1)\n  }\n  return newMessage;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'116101115116'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppd45sdqn.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmppd45sdqn.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '116101115116',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  \n  message = message.toUpperCase();\n  \n  // 1. Write a function which takes\
    \ in any message and returns a \n  //    message with every letter swapped. \n\
    \  // 2. Write a function which takes in a message and returns the \n  //    message\
    \ with the vowels replaced by the letters that appear\n  //    2 places ahead\
    \ of the vowel \n  // 3. Write a function which takes in any message and returns\
    \ the \n  //    message with the vowels replaced by the letters that appear\n\
    \  //    2 places ahead of the vowel\n  \n  return message;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7n02wki5.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7n02wki5.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  for(var i=0; i<message.length; i++){\n    message = message.toUpperCase();\n\
    \    message = message.replace(/[AEIOUaeiou]/g, function(letter){\n      return\
    \ letter.charCodeAt(0)-65;\n    });\n    message = message.replace(/[AEIOUaeiou]{2}/g,\
    \ function(letter){\n      return letter.charCodeAt(0)+2;\n    });\n  }\n  return\
    \ message;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'T4ST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4v6_ayrf.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp4v6_ayrf.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'T4ST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    //Your code goes here\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpam7c8q9d.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpam7c8q9d.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tlet str = \"\";\n\tfor(let i =0; i< message.length; i++){\n\t\tstr = message[i].toUpperCase().concat(str);\n\
    \t}\n\tfor(let i=0; i<str.length; i++){\n\t\tif(str[i].match(/[A-Z]/g)){\n\t\t\
    \tfor(let j=i+1; j<str.length; j++){\n\t\t\t\tif(str[j].match(/[AEIOUaeiou]/g)){\n\
    \t\t\t\t\tlet vowel = str[j];\n\t\t\t\t\tlet nextVowel = str[j+1];\n\t\t\t\t\t\
    let temp = vowel.charCodeAt(0);\n\t\t\t\t\ttemp = temp - 65;\n\t\t\t\t\ttemp =\
    \ temp + 2;\n\t\t\t\t\ttemp = temp - 65;\n\t\t\t\t\ttemp = temp + 2;\n\t\t\t\t\
    \tstr[j] = String.fromCharCode(temp);\n\t\t\t\t\tstr[j+1] = nextVowel.toUpperCase();\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TSET'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl_i_35fr.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpl_i_35fr.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TSET',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let letterCounts = {}\n  let messageArray = message.toLowerCase().split(\"\"\
    )\n  let newMessage = \"\"\n  let vowels = \"aeiouAEIOU\"\n  \n  for(let i = 0;\
    \ i < messageArray.length; i++){\n    let letter = messageArray[i]\n    letterCounts[letter]\
    \ = letterCounts[letter] ? letterCounts[letter] + 1 : 1;\n  }\n\n  for(let i =\
    \ 0; i < messageArray.length; i++){\n    let letter = messageArray[i]\n    if(letterCounts[letter]\
    \ === 2){\n      newMessage += letter\n    }else if(vowels.indexOf(letter) !==\
    \ -1){\n      newMessage += letter\n    }else{\n      newMessage += letter.split(\"\
    \").reduce((a,b)=>{\n        let index = vowels.indexOf(b)\n        return (index\
    \ === -1) ? a : a.split(\"\").reduce((a,b)=>{\n          let newIndex = (index+1)\
    \ % vowels.length\n          return a.substr(0,index) + vowels[newIndex] + a.substr(index+1)\n\
    \        }, b)\n      }, letter).split(\"\")[0]\n    }\n  }\n  \n  return newMessage\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp87yr_oob.js:47:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp87yr_oob.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  // Your code goes here!\n}\n</cell>\n<cell>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppl05pk08.js:14\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let messageArr = message.split('');\n    let encoded = \"\";\n\n    for (let\
    \ i = 0; i < messageArr.length; i++){\n        let letter = messageArr[i];\n \
    \       let encodedLetter = \"\";\n        let vowels = \"aeiouy\";\n        \n\
    \        if (vowels.includes(letter)){\n            for (let j = 0; j < messageArr.length;\
    \ j++){\n                let currentLetter = messageArr[j];\n                let\
    \ indexToReplace = vowels.indexOf(letter);\n                let indexToAdd = j;\n\
    \                if (vowels.includes(currentLetter)){\n                    encodedLetter\
    \ += currentLetter;\n                }\n            }\n            encodedLetter\
    \ += letter;\n            encoded+=encodedLetter;\n        } else {\n        \
    \    let index = vowels.indexOf(letter);\n            encoded+=letter;\n     \
    \   }\n    }\n    return encoded;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzkpmy1ot.js:43:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpzkpmy1ot.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let result = \"\";\n  let vowel = \"AEIOUaeiouAEIOU\"\n  for (let i = 0; i\
    \ <= message.length; i++){\n    let char = message[i]\n    let index = vowel.indexOf(char.toLowerCase())\n\
    \    if (index >= 0){\n      let pos = index\n      result += vowel[pos]\n   \
    \   for (let j = pos+1; j < vowel.length; j++){\n        result += vowel[j]\n\
    \      }\n    }\n    else {\n      let index = char.toLowerCase().charCodeAt(0)\n\
    \      result += String.fromCharCode(index + 65)\n      for (let j = 1; j < i;\
    \ j++){\n        result += String.fromCharCode(index + 97)\n      }\n    }\n \
    \ }\n  return result\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpryqynb5d.js:16\n    let index = vowel.indexOf(char.toLowerCase())\n\
    \                                   ^\n\nTypeError: Cannot read properties of\
    \ undefined (reading 'toLowerCase')\n    at encode (/tmp/tmpryqynb5d.js:16:36)\n\
    \    at test (/tmp/tmpryqynb5d.js:40:20)\n    at Object.<anonymous> (/tmp/tmpryqynb5d.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: -1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let vowel = \"AEIOU\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      for(let j = 0; j < vowel.length; j++){\n            if(message[i] == vowel[j]){\n\
    \                let nextVowel = vowel[j + 1];\n                for(let k = 0;\
    \ k < message.length; k++){\n                    if(message[k] != nextVowel &&\
    \ message[k] != vowel[j]){\n                        message += message[k];\n \
    \                   }\n                }\n                break;\n           \
    \ }\n        }\n    }\n    \n    for(let i = 0; i < message.length; i++){\n  \
    \      let nextVowel = vowel[i + 1];\n        for(let k = 0; k < message.length;\
    \ k++){\n            if(message[k] == nextVowel){\n                let replaceIndex\
    \ = k + 1;\n                while(replaceIndex < message.length && message[replaceIndex]\
    \ == vowel[i]){\n                    replaceIndex++;\n                }\n    \
    \            message += message[k];\n                message += message[replaceIndex];\n\
    \            }\n        }\n    }\n    return message;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976897
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = message;\n  for (var i=0; i<message.length; i++){\n    var\
    \ charToCompare = message.charAt(i);\n    newMessage = newMessage.replace(charToCompare,\
    \ getLetter(charToCompare));\n  }\n  return newMessage;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9ur_yxq4.js:15\n    newMessage = newMessage.replace(charToCompare,\
    \ getLetter(charToCompare));\n                                    ^\n\nReferenceError:\
    \ getLetter is not defined\n    at encode (/tmp/tmp9ur_yxq4.js:15:37)\n    at\
    \ test (/tmp/tmp9ur_yxq4.js:24:20)\n    at Object.<anonymous> (/tmp/tmp9ur_yxq4.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    console.log(message);\n    var messageArray = message.split(\"\");\n    for\
    \ (var i = 0; i < messageArray.length; i++) {\n        if(messageArray[i] ===\
    \ \"a\"){\n            messageArray[i] = \"A\";\n        }\n        if(messageArray[i]\
    \ === \"e\"){\n            messageArray[i] = \"E\";\n        }\n        if(messageArray[i]\
    \ === \"i\"){\n            messageArray[i] = \"I\";\n        }\n        if(messageArray[i]\
    \ === \"o\"){\n            messageArray[i] = \"O\";\n        }\n        if(messageArray[i]\
    \ === \"u\"){\n            messageArray[i] = \"U\";\n        }\n        if(messageArray[i]\
    \ === \"y\"){\n            messageArray[i] = \"Y\";\n        }\n    }\n    return\
    \ messageArray.join(\"\");\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpd27l64dp.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpd27l64dp.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    '
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let finalMessage = \"\";\n    message.split(\"\").forEach((letter, index)\
    \ => {\n        let newLetter = letter.toUpperCase();\n        if(newLetter ===\
    \ letter){\n            let twoLetters = message.slice(index+1, index+2);\n  \
    \          newLetter = twoLetters.toUpperCase();\n        }\n        finalMessage\
    \ = finalMessage + newLetter;\n    });\n    return finalMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'EST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpihcgc873.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpihcgc873.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'EST',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"AEIOUYaeiouy\";\n    for (var\
    \ i=0; i < message.length; i++){\n        if (vowels.indexOf(message.charAt(i))\
    \ > -1){\n            newMessage += message[i].toUpperCase();\n        } else\
    \ {\n            newMessage += message[i];\n        }\n    }\n    return newMessage;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph86e3cfb.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph86e3cfb.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  // your code here\n  \n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo7oxspfi.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpo7oxspfi.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\
    \    var messageArray = message.split(\" \");\n    messageArray.forEach(function(word){\n\
    \        var reordered = \"\";\n        var vowels = \"aeiou\";\n        var vowelArray\
    \ = vowels.split(\"\");\n        var vowelCount = 0;\n        var newVowel = \"\
    \";\n        vowelArray.forEach(function(letter){\n            var index = alphabet.indexOf(letter);\n\
    \            if(index != -1){\n                vowelCount += 1;\n            \
    \    if(!newVowel){\n                    newVowel = letter;\n                }else\
    \ if(newVowel != letter){\n                    newVowel = \"\";\n            \
    \    }\n            }\n        });\n        if(vowelCount != 2){\n           \
    \ throw Error(\"Not enough vowels found\");\n        }else{\n            word\
    \ = word.split(\"\");\n            var wordCount = 0;\n            word.forEach(function(letter){\n\
    \                var index = alphabet.indexOf(letter);\n                if(index\
    \ != -1){\n                    wordCount += 1;\n                }\n          \
    \  });\n            if(wordCount != word.length){\n                throw Error(\"\
    Not enough letters to swap case\");\n            }else{\n                word.forEach(function(letter){\n\
    \                    var index = alphabet.indexOf(letter);\n                 \
    \   if(index != -1){\n                        alphabet = alphabet.replace(letter,\
    \ newVowel);\n                    }\n                });\n            }\n    \
    \        var newMessage = \"\";\n            message.split(\" \").forEach(function(word){\n\
    \                newMessage += word.split(\"\").join(newVowel) + \" \"\n     \
    \       });\n            return newMessage;\n        }\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpgiw6g95k.js:32\n            throw Error(\"Not enough vowels found\"\
    );\n            ^\n\nError: Not enough vowels found\n    at /tmp/tmpgiw6g95k.js:32:19\n\
    \    at Array.forEach (<anonymous>)\n    at encode (/tmp/tmpgiw6g95k.js:14:18)\n\
    \    at test (/tmp/tmpgiw6g95k.js:66:20)\n    at Object.<anonymous> (/tmp/tmpgiw6g95k.js:73:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  return message\n    .split(\"\")\n    .map(char => char.toUpperCase().replaceAll(\"\
    aeiou\",(let,idx) => let.toUpperCase()))\n    .join(\"\");\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbunlwz8r.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbunlwz8r.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var prevLetter = \"\";\n    var letter = message[0];\n\
    \    for(var i = 0; i < message.length; i++){\n        var currentLetter = message[i];\n\
    \        if(letter == \"A\"){\n            newMessage += \"tHKS\";\n        }\n\
    \        else if(letter == \"B\"){\n            newMessage += \"KS\";\n      \
    \  }\n        else if(letter == \"C\"){\n            newMessage += \"S\";\n  \
    \      }\n        else if(letter == \"D\"){\n            newMessage += \"C\";\n\
    \        }\n        else if(letter == \"E\"){\n            newMessage += \"G\"\
    ;\n        }\n        else if(letter == \"F\"){\n            newMessage += \"\
    SS\";\n        }\n        else if(letter == \"G\"){\n            newMessage +=\
    \ \"H\";\n        }\n        else if(letter == \"H\"){\n            newMessage\
    \ += \"S\";\n        }\n        else if(letter == \"I\"){\n            newMessage\
    \ += \"K\";\n        }\n        else if(letter == \"J\"){\n            newMessage\
    \ += \"S\";\n        }\n        else if(letter == \"K\"){\n            newMessage\
    \ += \"T\";\n        }\n        else if(letter == \"L\"){\n            newMessage\
    \ += \"J\";\n        }\n        else if(letter == \"M\"){\n            newMessage\
    \ += \"S\";\n        }\n        else if(letter == \"N\"){\n            newMessage\
    \ += \"K\";\n        }\n        else if(letter == \"O\"){\n            newMessage\
    \ += \"G\";\n        }\n        else if(letter == \"P\"){\n            newMessage\
    \ += \"S\";\n        }\n        else if(letter == \"Q\"){\n            newMessage\
    \ += \"T\";\n        }\n        else if(letter == \"R\"){\n            newMessage\
    \ += \"K\";\n        }\n        else if(letter == \"S\"){\n            newMessage\
    \ += \"C\";\n        }\n        else if(letter == \"T\"){\n            newMessage\
    \ += \"Q\";\n        }\n        else if(letter == \"U\"){\n            newMessage\
    \ += \"G\";\n        }\n        else if(letter == \"V\"){\n            newMessage\
    \ += \"H\";\n        }\n        else if(letter == \"W\"){\n            newMessage\
    \ += \"H\";\n        }\n        else if(letter == \"X\"){\n            newMessage\
    \ += \"J\";\n        }\n        else if(letter == \"Y\"){\n            newMessage\
    \ += \"S\";\n        }\n        else if(letter == \"Z\"){\n            newMessage\
    \ += \"S\";\n        }\n        else if(letter == \"a\"){\n            newMessage\
    \ += \"H\";\n        }\n        else if(letter == \"b\"){\n            newMessage\
    \ += \"K\";\n        }\n        else if(letter == \"c\"){\n            newMessage\
    \ += \"S\";\n        }\n        else if(letter == \"d\"){\n            newMessage\
    \ += \"C\";\n        }\n        else if(letter\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpek2t0su4.js:108\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = message.replace(/[a-z]/g, x=>{\n        if(x.match(/[aeiou]/)){\n\
    \            return x.toUpperCase()\n        }\n        return x.toLowerCase()\n\
    \    }).replace(/[aeiou]/g,x=>{\n        if(x.match(/[aeiou]/)){\n           \
    \ return \"AEIOU\"\n        }\n        return x.toUpperCase()\n    }).replace(/[AEIOUaeiou]/g,x=>{\n\
    \        if(x.match(/[aeiou]/)){\n            return \"AEIOU\"\n        }\n  \
    \      return x.toUpperCase()\n    }).replace(/[A-Za-z]/g,x=>{\n        if(x.match(/[aeiou]/)){\n\
    \            return \"AEIOU\"\n        }\n        return x.toLowerCase()\n   \
    \ })\n    return newMessage\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpgi9ay_h7.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgi9ay_h7.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let dict = {'a':'A','b':'B','c':'C','d':'D','e':'E','f':'F','g':'G','h':'H',\n\
    \    'i':'I','j':'J','k':'K','l':'L','m':'M','n':'N','o':'O','p':'P','q':'Q','r':'R',\n\
    \    's':'S','t':'T','u':'U','v':'V','w':'W','x':'X','y':'Y','z':'Z'};\n    let\
    \ rep = \"\";\n    let vowelCount = 0;\n    for(let i = 0; i < message.length;\
    \ i++){\n        if(message[i].toUpperCase() == message[i]){\n            vowelCount++;\n\
    \        }\n        else{\n            if(vowelCount != 0){\n                rep+=dict[vowelCount-dict[message[i]]];\n\
    \                vowelCount = 0;\n            }\n        }\n    }\n    rep+=dict[vowelCount];\n\
    \    return rep;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefined'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0an9qz46.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0an9qz46.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefined',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    const newMessage = []\n    for (let i = 0; i < message.length; i++) {\n \
    \       let letter = message[i]\n        if (letter.toLowerCase() === letter.toUpperCase())\
    \ {\n            newMessage.push(letter.toUpperCase())\n        } else {\n   \
    \         let letterTwo = message[i + 1]\n            if (letterTwo.toLowerCase()\
    \ === letterTwo.toUpperCase()) {\n                newMessage.push(letterTwo.toUpperCase())\n\
    \            } else {\n                newMessage.push(letter)\n            }\n\
    \        }\n    }\n    return newMessage.join('')\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpo1z0orjo.js:19\n            if (letterTwo.toLowerCase() === letterTwo.toUpperCase())\
    \ {\n                          ^\n\nTypeError: Cannot read properties of undefined\
    \ (reading 'toLowerCase')\n    at encode (/tmp/tmpo1z0orjo.js:19:27)\n    at test\
    \ (/tmp/tmpo1z0orjo.js:33:20)\n    at Object.<anonymous> (/tmp/tmpo1z0orjo.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let messageArray = [];\n    let messageLength = message.length;\n    let\
    \ vowels = [\"A\",\"a\",\"E\",\"e\",\"I\",\"i\",\"O\",\"o\",\"U\",\"u\"];\n  \
    \  for(let i=0;i<messageLength;i++){\n        messageArray.push(message.charAt(i));\n\
    \    }\n    for(let i=0;i<messageLength;i++){\n        let letterIndex = messageArray.indexOf(\"\
    a\");\n        let letter = messageArray[letterIndex];\n        let indexOfVowel\
    \ = vowels.indexOf(letter);\n        let letterAfterVowel = vowels[indexOfVowel\
    \ + 1];\n        messageArray[letterIndex] = letterAfterVowel;\n    }\n    for(let\
    \ i=0;i<messageLength;i++){\n        console.log(messageArray[i]);\n    }\n  \
    \  return messageArray.join(\"\");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpirg2ds0g.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpirg2ds0g.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'T

    E

    S

    T

    '
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    \n    // Write your code here\n    let result=\"\";\n    let vowels = [\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"];\n    for(let i=0;i<message.length;i++){\n\
    \        let temp=message[i].toLowerCase();\n        temp=temp.replace(/e/g,\"\
    \");\n        temp=temp.replace(/i/g,\"\");\n        temp=temp.replace(/o/g,\"\
    \");\n        temp=temp.replace(/a/g,\"\");\n        temp=temp.replace(/u/g,\"\
    \");\n        temp=temp.toLowerCase();\n        let index=temp.indexOf(vowels[temp.indexOf(vowels[i])+2])\n\
    \        result+=temp.charAt(index);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmph2b8wnsw.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmph2b8wnsw.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  message = message.split(\"\");\n  for(let i = 0; i < message.length; i++){\n\
    \    message[i] = message[i].toLowerCase();\n    message[i] = swapLetter(message[i]);\n\
    \    for(let j = 0; j < message.length; j++){\n      if(message[i] == message[j]\
    \ && i != j){\n        message[j] = swapLetter(message[j]);\n      }\n    }\n\
    \  }\n  return message.join(\"\");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmphl_lent8.js:15\n    message[i] = swapLetter(message[i]);\n    \
    \        ^\n\nReferenceError: swapLetter is not defined\n    at encode (/tmp/tmphl_lent8.js:15:13)\n\
    \    at test (/tmp/tmphl_lent8.js:30:20)\n    at Object.<anonymous> (/tmp/tmphl_lent8.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: -1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tlet result=\"\";\n\tfor(let i of message){\n\t\tlet letter=i;\n\t\tlet count=1;\n\
    \t\twhile(letter!=\"k\"){\n\t\t\tif(letter==\"a\"){\n\t\t\t\tletter=\"b\";\n\t\
    \t\t\tcount++;\n\t\t\t}else if(letter==\"e\"){\n\t\t\t\tletter=\"f\";\n\t\t\t\t\
    count++;\n\t\t\t}else if(letter==\"i\"){\n\t\t\t\tletter=\"h\";\n\t\t\t\tcount++;\n\
    \t\t\t}else if(letter==\"o\"){\n\t\t\t\tletter=\"j\";\n\t\t\t\tcount++;\n\t\t\t\
    }else if(letter==\"u\"){\n\t\t\t\tletter=\"k\";\n\t\t\t\tcount++;\n\t\t\t}else\
    \ if(letter==\"A\"){\n\t\t\t\tletter=\"B\";\n\t\t\t\tcount++;\n\t\t\t}else if(letter==\"\
    E\"){\n\t\t\t\tletter=\"F\";\n\t\t\t\tcount++;\n\t\t\t}else if(letter==\"I\"){\n\
    \t\t\t\tletter=\"H\";\n\t\t\t\tcount++;\n\t\t\t}else if(letter==\"O\"){\n\t\t\t\
    \tletter=\"J\";\n\t\t\t\tcount++;\n\t\t\t}else if(letter==\"U\"){\n\t\t\t\tletter=\"\
    K\";\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tletter=String.fromCharCode(letter.charCodeAt(0)+count);\n\
    \t\t}\n\t\tresult+=letter;\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976897
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  // your implementation\n  message = message.toLowerCase().split(\" \");\n \
    \ let output = \"\";\n  message.forEach((letter) => {\n    let letterIndex = letter.toLowerCase().charCodeAt(0)\
    \ - 97;\n    let twoLettersIndex = letter.toLowerCase().charCodeAt(2).toString()\
    \ + 1;\n    let letterPosition = twoLettersIndex - letterIndex;\n    letterPosition\
    \ = letterPosition.toString().padStart(2, \"0\");\n    letterPosition = letterPosition[0].toUpperCase()\
    \ + letterPosition.substr(1);\n    output += letterPosition;\n  });\n  return\
    \ output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1132'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpex_vi72z.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpex_vi72z.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1132',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    var messageArray = message.split(\"\
    \");\n    var newMessage = \"\";\n    var i = 0;\n    while (i < messageArray.length){\n\
    \        if (messageArray[i].toUpperCase() === messageArray[i]) {\n          \
    \  newMessage += messageArray[i].toUpperCase();\n        } else {\n          \
    \  newMessage += messageArray[i].toLowerCase();\n        }\n        i += 1;\n\
    \    }\n    newMessage += messageArray[i];\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTundefined'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp868v7xun.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp868v7xun.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTundefined',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  const result = \"\";\n  const vowels = \"aeiouAEIOU\";\n  const letters = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  const map = {};\n  const nums = [];\n\n  message.split(\"\
    \").forEach(letter => {\n    if (map[letter]) return;\n\n    map[letter] = letters.indexOf(letter);\n\
    \n    let index = letters.indexOf(letter);\n    if (index >= 2 && vowels.includes(letter)){\n\
    \      index = letters.indexOf(letter) + 2;\n    }\n    letter = letter.toUpperCase();\n\
    \    result.push(letters[index]);\n  });\n\n  let i = 0;\n  for (let letter of\
    \ result){\n    nums.push(map[i]);\n    i += 1;\n  }\n\n  const encoded = nums.reverse().join(\"\
    \");\n\n  return encoded;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmjz5ehhv.js:28\n    result.push(letters[index]);\n           ^\n\
    \nTypeError: result.push is not a function\n    at /tmp/tmpmjz5ehhv.js:28:12\n\
    \    at Array.forEach (<anonymous>)\n    at encode (/tmp/tmpmjz5ehhv.js:18:21)\n\
    \    at test (/tmp/tmpmjz5ehhv.js:46:20)\n    at Object.<anonymous> (/tmp/tmpmjz5ehhv.js:53:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = message.toUpperCase();\n  var vowels = \"AEIOU\";\n  var letters\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  for(var i = 0; i < newMessage.length; i++){\n\
    \    var currentLetter = newMessage.charAt(i);\n    var nextLetter = newMessage.charAt(i\
    \ + 1);\n    if(currentLetter === nextLetter){\n      var index = vowels.indexOf(currentLetter);\n\
    \      newMessage = newMessage.slice(0,i) + letters[index] + letters[index+1]\
    \ + newMessage.slice(i+2);\n    }\n  }\n  return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0ngjc4oh.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0ngjc4oh.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  return message.replace(/[a-z]/g,function(_,i){\n    return String.fromCharCode(\
    \ 65 + (i%26) );\n  }).replace(/[aeiou]/g,function(_,i){\n    return String.fromCharCode(\
    \ 97 + (i%26) );\n  }).replace(/[AEIOU]/g,function(_,i){\n    return String.fromCharCode(\
    \ 65 + (i%26) + 97 );\n  }).replace(/[^a-z]/g,function(_,i){\n    return String.fromCharCode(\
    \ 96 + (i%26) );\n  });\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'`abc'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph0ia1kxq.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph0ia1kxq.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '`abc',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  var newMessage = message.toLowerCase();\n\
    \  var newAlphabet = alphabet.toLowerCase();\n  var newMessageArray = newMessage.split(\"\
    \");\n  var newAlphabetArray = newAlphabet.split(\"\");\n  for(var i = 0; i <\
    \ newMessageArray.length; i++){\n    newMessageArray[i] = alphabet[newAlphabetArray.indexOf(newMessageArray[i])];\n\
    \  }\n  return newMessageArray.join(\"\");\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbpq6nggz.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbpq6nggz.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \   var str=\"\";\n   var arr=[];\n   for(var i=0;i<message.length;i++){\n   \
    \   if(message.charCodeAt(i)<90)\n         {str+=message.charAt(i).toUpperCase()}\n\
    \      else\n         {str+=message.charAt(i).toLowerCase()}\n      \n   }\n \
    \  \n   for(var j=0;j<message.length;j++){\n      var x=str.charCodeAt(j);\n \
    \     var y = str.charCodeAt(j+1);\n      if(x==y+1)\n         {arr.push(x+\"\
    a\"+(y-1))}\n      else if(x==y-1)\n         {arr.push(x+\"A\"+(y+1))}\n     \
    \ else if(x<90)\n         {arr.push(x+\"a\"+(y+1))}\n      else\n         {arr.push(x+\"\
    A\"+(y+1))}\n   }\n   \n   var k=0;\n   for(var i=0;i<arr.length;i++){\n     \
    \ if((arr[i]==\"a\" && !(arr[i-1]==\"A\"))||(arr[i]==\"A\" && !(arr[i-1]==\"a\"\
    ))){\n         arr[i]=arr[i-1]+arr[i]}\n      else{\n         arr[i]=arr[i-1].split(\"\
    \")[arr[i-1].split(\"\").indexOf(arr[i])+1]+arr[i]}\n      k++;\n   }\n   return\
    \ arr.join(\"\")\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmz8e_j_d.js:40\n         arr[i]=arr[i-1].split(\"\")[arr[i-1].split(\"\
    \").indexOf(arr[i])+1]+arr[i]}\n                         ^\n\nTypeError: Cannot\
    \ read properties of undefined (reading 'split')\n    at encode (/tmp/tmpmz8e_j_d.js:40:26)\n\
    \    at test (/tmp/tmpmz8e_j_d.js:50:20)\n    at Object.<anonymous> (/tmp/tmpmz8e_j_d.js:57:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    // Write your code below\n    // 1. Iterate over each character in the message\
    \ string\n    // 2. Get the character code for the character\n    // 3. Get the\
    \ character code for the next character that matches the same case\n    // 4.\
    \ Replace all vowels with 2 places ahead of the vowel in the english alphabet\n\
    \    // 5. Repeat for all characters\n    // 6. Join the message together with\
    \ the new characters to get the encoded message\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5ngkbcdd.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5ngkbcdd.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let alphabet = message.split('').map(c => c.toLowerCase());\n    let vowel\
    \ = 'a'.charCodeAt(0);\n    alphabet = alphabet.map((v, i) => v.charCodeAt(0)\
    \ === vowel ? \n                             alphabet.splice(i, 1)\n         \
    \                    : 'a'.charCodeAt(0) === v \n                            \
    \        ? alphabet.splice(i, 1)\n                                    : v);\n\
    \    alphabet = alphabet.reverse();\n    return alphabet.map(c => String.fromCharCode(c\
    \ + vowel)).join('');\n}\n</code>\n<|/ a dscore=0 tags=javascript,arrays |>\n\
    <| c |>\nThanks for your response Andrew. \n\nThe function works well for lower\
    \ case characters but for upper case characters such as \"A\" it returns \"a\"\
    \ as opposed to \"A\". \n\nIs there a way to convert it to uppercase without using\
    \ the .toUpperCase() method?\n<|/ c |>\n<| c |>\nI've edited my answer to fix\
    \ the issue. I've also added a second function which I find is much more elegant.\
    \ Hopefully it helps you.\n<|/ c |>\n<| c |>\nGreat! Thank you for your help!\
    \ It works now!\n<|/ c |>\n<| a |>\nThe other answers are technically correct,\
    \ but my answer uses the built in replace functionality of the String object which\
    \ allows us to pass in multiple replacements.\nHere's my solution:\n<code>\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxl4tagpi.js:22\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let result = ''\n  let alphabet = message.split(\"\").reduce((p,c)=> { \n \
    \   return p+c.toUpperCase()\n  },'')\n  let vowels = ['A','E','I','O','U']\n\
    \  let vowelsIndex = []\n  for(let i=0; vowels.length; i++){ \n    vowelsIndex.push(vowels.indexOf(alphabet[i]))\n\
    \  }\n  for(let i=0; alphabet.length; i++){\n    for(let j=0; j<vowelsIndex.length;\
    \ j++){\n      if(alphabet[i] == vowels[j]){\n        result += alphabet[i+1]\n\
    \        break\n      }\n    }\n  }\n  return result\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpoyd98316.js:19\n    vowelsIndex.push(vowels.indexOf(alphabet[i]))\n\
    \                ^\n\nRangeError: Invalid array length\n    at Array.push (<anonymous>)\n\
    \    at encode (/tmp/tmpoyd98316.js:19:17)\n    at test (/tmp/tmpoyd98316.js:36:20)\n\
    \    at Object.<anonymous> (/tmp/tmpoyd98316.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976897
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let s = \"\";\n  for(let i = 0; i<message.length; i++){\n    let curLetter\
    \ = message.charAt(i);\n    s = curLetter.toUpperCase();\n    let newNum = s.charCodeAt(0)+2;\n\
    \    s = String.fromCharCode(newNum);\n    s = s.replace(/[aeiou]/g, x=>{\n  \
    \    if (x==='a') return '@';\n      if (x==='e') return '#';\n      if (x==='i')\
    \ return '!';\n      if (x==='o') return '$';\n      if (x==='u') return '^';\n\
    \      if (x==='A') return '@';\n      if (x==='E') return '#';\n      if (x==='I')\
    \ return '!';\n      if (x==='O') return '$';\n      if (x==='U') return '^';\n\
    \      return x;\n    })\n    s += curLetter;\n  }\n  return s;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VT'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5p6l9za2.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5p6l9za2.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VT',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let finalMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n  \
    \  const letter = message[i].toLowerCase();\n    finalMessage += letter.charCodeAt(0)\
    \ - 65 + \n    letter.charCodeAt(letter.charCodeAt(1) - 1) + \n    letter.charCodeAt(2);\n\
    \  }\n  return finalMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5lw3lck8.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5lw3lck8.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    const messageArray = message.split(\"\");\n \
    \   let counter = 0;\n    for (let i = 0; i < messageArray.length; i++){\n   \
    \     if (messageArray[i] === \"a\" || messageArray[i] === \"e\" || messageArray[i]\
    \ === \"i\" || messageArray[i] === \"o\" || messageArray[i] === \"u\"){\n    \
    \        newMessage += messageArray[i];\n            counter++;\n        }\n \
    \       if (counter === 2){\n            newMessage += messageArray[i];\n    \
    \        counter = 0;\n        }\n    }\n    newMessage += counter;\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_caisje_.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_caisje_.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let vowels = \"AEIOUaeiou\";\n    let index = -1;\n    let result = [];\n\
    \    for(let i = 0; i < message.length; i++){\n        index = message.indexOf(vowels,\
    \ i+1);\n        if(index === -1){\n            index = message.indexOf(vowels,\
    \ i);\n        }\n        let char = message.charAt(i);\n        if(char === 'a'\
    \ || char === 'e' || char === 'i' || char === 'o' || char === 'u'){\n        \
    \    result.push(\"K\");\n        }\n        else{\n            result.push(char);\n\
    \        }\n    }\n    return result.join(\"\");\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpox0sy5g4.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpox0sy5g4.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    message = message.toLowerCase().split(\"\");\n    let word = \"\";\n    for(let\
    \ i = 0; i < message.length; i++){\n        word += message[i].toUpperCase();\n\
    \        if(i != message.length-1){\n            word += message[i+1];\n     \
    \   }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TeEsStT'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplnh80ng0.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmplnh80ng0.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TeEsStT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    //Your code goes here \n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpljypdb83.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpljypdb83.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var result = '';\n  var j = 0;\n  var vowels = 'aeiouyAEIOUY';\n\n  for(var\
    \ i = 0; i < message.length; i++){\n    var letter = message[i];\n    var place\
    \ = vowels.indexOf(letter);\n    result += letter;\n    if(place !== 0){\n   \
    \   result += '' + place;\n      result += letter;\n      result += vowels[(place\
    \ - 2)];\n    }\n  }\n\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'T-1TundefinedE7EyS-1SundefinedT-1Tundefined'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpp6tg1qfk.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpp6tg1qfk.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'T-1TundefinedE7EyS-1SundefinedT-1Tundefined',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    message = message.toLowerCase();\n    let newMessage = \"\";\n    for (const\
    \ letter of message) {\n        newMessage = newMessage + \n            (letter.toLowerCase().charCodeAt(0)\
    \ - 65 + \n            message.split(letter).length - 1);\n        newMessage\
    \ = newMessage + letter;\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'53t37e51s53t'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmply803sdr.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmply803sdr.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '53t37e51s53t',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  return message.toLowerCase()\n    .split('')\n    .map(letter => {\n      return\
    \ letter.match(/[a-z]/)\n        ? letter\n        .match(/[aeiou]/)\n       \
    \ ? letter.match(/[aeiou]/)\n          ? letter.match(/[aeiou]/)\n          ?\
    \ letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n           \
    \ : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n         \
    \   : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n       \
    \     : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n     \
    \       : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n   \
    \         : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n \
    \           : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n\
    \            : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n\
    \            : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n\
    \            : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n\
    \            : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n\
    \            : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n\
    \            : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n\
    \            : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n\
    \            : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n\
    \            : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n\
    \            : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n\
    \            : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n\
    \            : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n\
    \            : letter.match(/[aeiou]/)\n            ? letter.match(/[aeiou]/)\n\
    \            : letter.match(/[aeiou]/)\n            ? letter.match(/\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6sgzdgyb.js:61\n            ? letter.match(/\n                \
    \           ^\n\nSyntaxError: Invalid regular expression: missing /\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = message.toLowerCase();\n    var vowels = \"aeiouAEIOU\"\n\
    \    newMessage = newMessage.replace(new RegExp(vowels, 'g'), '$&'.charAt(2))\n\
    \n    var map = {};\n    for(var i=0; i<newMessage.length; i++){\n        map[newMessage.charAt(i)]\
    \ = newMessage.charAt(i);\n    }\n    for(var i=0; i<vowels.length; i++){\n  \
    \      var nextVowel = newMessage.charAt(i+1);\n        if(map[nextVowel]){\n\
    \            var index = map[nextVowel];\n            newMessage = newMessage.replace(new\
    \ RegExp(vowels.charAt(i), 'g'), vowels.charAt(i+1));\n            newMessage\
    \ = newMessage.replace(new RegExp(vowels.charAt(index), 'g'), vowels.charAt(i));\n\
    \        }\n    }\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,encryption,node.js\
    \ dscore=1 |>\n<| c |>\nWhat does map mean?\n<|/ c |>\n<| c |>\nI've added an\
    \ explanation to the answer.\n<|/ c |>\n<| a |>\nHere is another way using String.replace\
    \ and String.indexOf\n\n<code>\nvar str = \"This is a message\";\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpx9gkryvx.js:30\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\"\n  let letters = message.split(\"\") //Split the\
    \ message into letters. \n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \  letters.forEach(letter => {\n    if(vowels.includes(letter)){\n      letter\
    \ = vowels.find(vowel => vowel === letter)\n    }\n    let lettersLettersIndex\
    \ = letters.indexOf(letter)\n    lettersLettersIndex += 2 //Add 2 for the vowel\n\
    \    encodedMessage += letters[lettersLettersIndex]\n  })\n  return encodedMessage\n\
    }\n</code>\nThe idea is that we go through each letter in message, and replace\
    \ it with the letter at an offset of 2 in the english alphabet. \n<code>\nlet\
    \ lettersLettersIndex = letters.indexOf(letter)\nlettersLettersIndex += 2 //Add\
    \ 2 for the vowel\nencodedMessage += letters[lettersLettersIndex]\n</code>\nI\
    \ hope this helps!\n<|/ a |>\n<| c |>\nThanks, this was a great learning experience\
    \ for me and a great solution for my project.\n<|/ c |>\n<| a |>\nThe main issue\
    \ is that you're using the wrong data structures.\nYou're trying to create a dictionary\
    \ that would map each letter to its position in the alphabet, which is an array,\
    \ not a dictionary.\nI recommend using a map instead, and using the letters as\
    \ the keys. \nA quick example:\n\n<code>\nconst alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \nconst message = \"This is a message\"\nconst mapped = message.split(\"\").map((letter,\
    \ i) => ({ letter: letter, index: i + 2 }))\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpurbauqqx.js:25\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    // Your code goes here!\n    return message.toUpperCase();\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_29zzhfs.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_29zzhfs.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  message = message.toUpperCase();\n  for(let i = 0;\
    \ i<message.length; i++){\n    let letter = message.charAt(i);\n    let vowels\
    \ = \"AEIOU\";\n    let index = vowels.indexOf(letter);\n    if(index>-1){\n \
    \     let nextLetter = vowels[(index+1)%vowels.length];\n      newMessage += nextLetter;\n\
    \    }else{\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpn2474edl.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn2474edl.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tmessageArray=message.split(\"\")\n\t\n\tlet result=\"\"\n\tlet currentLetter=\"\
    \"\n\t\n\tfor(i=0; i<messageArray.length; i++){\n\t\tcurrentLetter=messageArray[i]\n\
    \t\t\n\t\tif(messageArray[i]==\"a\"){\n\t\t\tresult+=\"g\"\n\t\t}\n\t\telse if(messageArray[i]==\"\
    e\"){\n\t\t\tresult+=\"h\"\n\t\t}\n\t\telse if(messageArray[i]==\"i\"){\n\t\t\t\
    result+=\"j\"\n\t\t}\n\t\telse if(messageArray[i]==\"o\"){\n\t\t\tresult+=\"k\"\
    \n\t\t}\n\t\telse if(messageArray[i]==\"u\"){\n\t\t\tresult+=\"l\"\n\t\t}\n\t\t\
    else if(messageArray[i]==\"A\"){\n\t\t\tresult+=\"G\"\n\t\t}\n\t\telse if(messageArray[i]==\"\
    E\"){\n\t\t\tresult+=\"H\"\n\t\t}\n\t\telse if(messageArray[i]==\"I\"){\n\t\t\t\
    result+=\"J\"\n\t\t}\n\t\telse if(messageArray[i]==\"O\"){\n\t\t\tresult+=\"K\"\
    \n\t\t}\n\t\telse if(messageArray[i]==\"U\"){\n\t\t\tresult+=\"L\"\n\t\t}\n\t\t\
    \n\t\telse if(messageArray[i]==\"n\"){\n\t\t\tresult+=currentLetter\n\t\t}\n\t\
    \telse if(messageArray[i]==\"r\"){\n\t\t\tresult+=currentLetter\n\t\t}\n\t\telse\
    \ if(messageArray[i]==\"s\"){\n\t\t\tresult+=currentLetter\n\t\t}\n\t\telse if(messageArray[i]==\"\
    t\"){\n\t\t\tresult+=currentLetter\n\t\t}\n\t}\n\treturn result\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'H'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp__ppf50z.js:71:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp__ppf50z.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'H',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var encodedMessage = \"\";\n  for(var i = 0; i<message.length; i++){\n    var\
    \ letter = message.charAt(i).toUpperCase();\n    for(var j = 0; j<vowels.length;\
    \ j++){\n      if(letter === vowels[j]){\n        encodedMessage += vowels[j+1];\n\
    \        break;\n      }\n    }\n    encodedMessage += letter;\n  }\n  return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpyyx2_xt1.js:15\n    for(var j = 0; j<vowels.length; j++){\n   \
    \                  ^\n\nReferenceError: vowels is not defined\n    at encode (/tmp/tmpyyx2_xt1.js:15:22)\n\
    \    at test (/tmp/tmpyyx2_xt1.js:31:20)\n    at Object.<anonymous> (/tmp/tmpyyx2_xt1.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  //Your code here\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4n91brye.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4n91brye.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  let vowels = \"aeiouyAEIOUY\";\n  for (let i = 0;\
    \ i<message.length; i++){\n    let letter = message.charAt(i);\n    let index\
    \ = vowels.indexOf(letter);\n    newMessage += `${index === 0 ? letter : letter.charCodeAt(0)\
    \ - index + 1}`;\n  }\n  return newMessage;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'86638586'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkckz14r5.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkckz14r5.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '86638586',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var code = '';\n  for(var i = 0;i < message.length;i++){\n    code += isLetter(message[i])?getNextLetter(message[i]):\
    \ message[i];\n  }\n  return code\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbi44ctur.js:14\n    code += isLetter(message[i])?getNextLetter(message[i]):\
    \ message[i];\n    ^\n\nReferenceError: isLetter is not defined\n    at encode\
    \ (/tmp/tmpbi44ctur.js:14:5)\n    at test (/tmp/tmpbi44ctur.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpbi44ctur.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \t\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9verak8v.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9verak8v.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = message;\n    for (let i = 0; i < encodedMessage.length;\
    \ i++) {\n        let currentChar = encodedMessage.charAt(i);\n        if (currentChar.match(/[a-z]/i))\
    \ {\n            encodedMessage = encodedMessage.replace(currentChar, getLetter2Position(currentChar));\n\
    \        }\n    }\n    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpy6_sxrta.js:16\n            encodedMessage = encodedMessage.replace(currentChar,\
    \ getLetter2Position(currentChar));\n                                        \
    \            ^\n\nReferenceError: getLetter2Position is not defined\n    at encode\
    \ (/tmp/tmpy6_sxrta.js:16:53)\n    at test (/tmp/tmpy6_sxrta.js:27:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpy6_sxrta.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  var letters = [ 'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm',\n                  'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'z' ]; \n  var newMessage = message.toLowerCase();\n  var\
    \ newChars = newMessage.replace(/[aeiou]/g, function(letter){\n    return letters[letters.indexOf(letter)];\
    \ \n  });\n  for (var i = 0; i < vowels.length; i++){\n    newChars = newChars.replace(vowels[i],\
    \ vowels[i+1]); \n  }\n  return newChars;\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ is beautiful! I've been trying to figure out how to swap chars in an array without\
    \ using another array.\n<|/ c |>\n<| a |>\nHere's a nice pure javascript solution:\
    \ \n\n<code>\nvar encode = function(s){\n  var vowels = ['a', 'e', 'i', 'o', 'u',\
    \ 'y'];\n  var letters = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\n\
    \    'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n  s = s.toLowerCase();\n\
    \  s = s.split('').map(function(d){\n    return d = letters.indexOf(d)+letters.indexOf(d)\
    \ + vowels.indexOf(d);\n  }).join('');\n  return s;\n}\n</code>\n<|/ a dscore=2\
    \ tags=javascript,string,arrays |>\n<| a tags=javascript,string,arrays |>\nThis\
    \ solution will use arrays as you requested, although it uses a loop:\n\n<code>\n\
    var str = \"test\";\nvar result = [1,2,3];\n\nvar vowels = ['a', 'e', 'i', 'o',\
    \ 'u', 'y'];\nvar letters = [ 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\n\
    \  'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z' ];\nfor(var i = 0; i < str.length;\
    \ i++) {\n  var letterIndex = letters.indexOf(str.charAt(i));\n  if(vowels.indexOf(str.charAt(i))\
    \ == -1) {\n    letterIndex++;\n  }\n  result[i] = letterIndex;\n}\n\nvar newString\
    \ = result.join('');\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpg_r01nbl.js:24\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tvar newMessage = \"\";\n\t\n\tvar letters = new Array(\"A\",\"B\",\"C\",\"D\"\
    ,\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\"\
    ,\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\");\n\tvar vowels = new Array(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"y\");\n\t\n\tfor(var i = 0; i < message.length;\
    \ i++){\n\t\tvar currentLetter = message[i];\n\t\tvar currentVowel = letters[letters.length\
    \ - (i+1)];\n\t\t\n\t\tif(vowels.indexOf(currentVowel) !== -1){\n\t\t\tnewMessage\
    \ += currentLetter;\n\t\t}else if(letters.indexOf(currentLetter) !== -1){\n\t\t\
    \tnewMessage += currentVowel;\n\t\t}else{\n\t\t\tnewMessage += currentLetter.charCodeAt(0)\
    \ - 65 + 2;\n\t\t}\n\t\t\n\t\tnewMessage += \" \";\n\t}\n\t\n\treturn newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Z Y X W '\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsk2f3mvb.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsk2f3mvb.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Z Y X W ',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var out = [];\n  var vowels = \"aeiou\";\n  var messageLetters = message.split(\"\
    \");\n  for (var i = 0; i < messageLetters.length; i++){\n    var letter = messageLetters[i];\n\
    \    var position = vowels.indexOf(letter);\n    if (position >= 0){\n      var\
    \ letter2 = vowels[position+1];\n      out.push(letter2);\n    }\n    out.push(letter);\n\
    \  }\n  return out.join(\"\");\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe48uzrjh.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpe48uzrjh.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let letterIndex = alphabet.indexOf(letter);\n\
    \    let letterToUpper = alphabet[letterIndex];\n    let letterToLower = letter.toUpperCase();\n\
    \    if(letterToUpper === letterToLower){\n      newMessage = newMessage + letter;\n\
    \    } else {\n      newMessage = newMessage + letterToUpper;\n      newMessage\
    \ = newMessage + letterToLower;\n    }\n  }\n  return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3ju2xlh7.js:15\n    let letterIndex = alphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmp3ju2xlh7.js:15:23)\n    at test (/tmp/tmp3ju2xlh7.js:33:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ju2xlh7.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(i = 0; i<message.length; i++){\n    let letter\
    \ = message.charAt(i);\n    newMessage+= switchCase(letter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmphl7g7p4s.js:15\n    newMessage+= switchCase(letter);\n    ^\n\n\
    ReferenceError: switchCase is not defined\n    at encode (/tmp/tmphl7g7p4s.js:15:5)\n\
    \    at test (/tmp/tmphl7g7p4s.js:25:20)\n    at Object.<anonymous> (/tmp/tmphl7g7p4s.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    return message.split('').map((c) => {\n        return { c: c }\n    }).reduce((a,\
    \ x) => {\n        let {c} = x;\n        let upperCaseLetter = c.toUpperCase();\n\
    \        let vowelMap = {\n            a: \"A\",\n            e: \"E\",\n    \
    \        i: \"I\",\n            o: \"O\",\n            u: \"U\",\n           \
    \ A: \"a\",\n            E: \"e\",\n            I: \"i\",\n            O: \"o\"\
    ,\n            U: \"u\"\n        }\n        let vowels = vowelMap[upperCaseLetter];\n\
    \        let vowelsAhead = {\n            a: \"I\",\n            e: \"U\",\n \
    \           i: \"O\",\n            o: \"U\",\n            u: \"A\"\n        }\n\
    \        let replacement = vowelsAhead[vowels];\n        a[replacement] = c;\n\
    \        return a\n    }, {})\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  U: 'E',\n\
    \  undefined: 'T'\n}\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpixce68fh.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmpixce68fh.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { undefined:\
    \ 'T', U: 'E' },\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const\
    \ currLetter = message[i];\n    const nextLetter = message.slice(i, i + 2)\n \
    \   const letterToSwap = \n      nextLetter.toLowerCase() \n      .replace(/\\\
    W/g, \"\")\n      .toUpperCase();\n    const letterToSwapIndex = \n      message.indexOf(i\
    \ + letterToSwap.toLowerCase()) - 1;\n    result += \n      (currLetter === letterToSwap)\
    \ ? letterToSwap : currLetter;\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpykj6yp89.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpykj6yp89.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var result = ''\n    var vowels = 'aeiouAEIOU'\n    for(var i = 0, len =\
    \ message.length; i < len; i++){\n        if(vowels.indexOf(message[i].toLowerCase())\
    \ == -1){\n            result = result + message[i].toUpperCase()\n        }else{\n\
    \            var idx = vowels.indexOf(message[i].toLowerCase()) \n           \
    \ result = result + message[i].toLowerCase()\n            if(i + 1 < len){\n \
    \               result = result + message[i+1]\n            }\n        }\n   \
    \ }\n    return result\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TeSST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5j_mx52r.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5j_mx52r.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TeSST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \   var swappedUpMessage = \"\"\n   var vowels = \"aeiou\"\n   var messageArray\
    \ = message.toLowerCase().split(\"\")\n   for(var i = 0; i < messageArray.length;\
    \ i++){\n      if(messageArray[i] === vowels[i]){\n         var letterIndex =\
    \ (messageArray.length - i - 1)\n         swappedUpMessage = swappedUpMessage\
    \ + messageArray[letterIndex] + messageArray[letterIndex + 1]\n      }else{\n\
    \         swappedUpMessage = swappedUpMessage + messageArray[i]\n      }\n   }\n\
    \   return swappedUpMessage\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tstst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmps5145uwv.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmps5145uwv.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tstst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var messageLower = message.toLowerCase(); \n    var newMessage = '';\n  \
    \  \n    for (var i = 0; i < messageLower.length; i++) {\n        var letter =\
    \ messageLower.charAt(i);\n        newMessage += letter.charCodeAt(0); //get the\
    \ ascii value of the letter\n        \n        //check if a letter has been encountered\
    \ before\n        if(newMessage[newMessage.length-1]==letter){\n            var\
    \ index = newMessage.indexOf(letter);\n            \n            //check if it\
    \ appears 2 places ahead\n            if(index>0 && index<newMessage.length-1){\n\
    \                newMessage = newMessage.substr(0,index) + letter.toUpperCase()\
    \ + newMessage.substr(index+2);\n            }\n        }\n        \n        //check\
    \ for a vowel and swap it with its following letter\n        if(vowels.indexOf(letter)>-1){\n\
    \            var index = vowels.indexOf(letter);\n            \n            //check\
    \ if it appears 2 places ahead\n            if(index>0 && index<vowels.length-1){\n\
    \                newMessage = newMessage.substr(0,index) + vowels.charAt(vowels.indexOf(letter)-1).toLowerCase()\
    \ + newMessage.substr(index+2);\n            }\n        }\n    }\n    \n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4y814c8h.js:30\n        if(vowels.indexOf(letter)>-1){\n      \
    \  ^\n\nReferenceError: vowels is not defined\n    at encode (/tmp/tmp4y814c8h.js:30:9)\n\
    \    at test (/tmp/tmp4y814c8h.js:48:20)\n    at Object.<anonymous> (/tmp/tmp4y814c8h.js:55:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let vowels = \"AEIOUaeiou\";\n    let messageCharArray = message.split(\"\
    \");\n    let encodedMessage = \"\"\n    for (let i = 0; i < messageCharArray.length;\
    \ i++){\n        let char = messageCharArray[i];\n        if (vowels.includes(char)){\n\
    \            let vowelIndex = vowels.indexOf(char);\n            let vowelIndexTwoPlaces\
    \ = vowelIndex + 2;\n            let encodedChar = vowels[vowelIndexTwoPlaces];\n\
    \            encodedMessage += char;\n            encodedMessage += encodedChar;\n\
    \        } else {\n            encodedMessage += char;\n        }\n    }\n   \
    \ return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsxfks47q.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsxfks47q.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var result = \"\";\n  var vowels = \"AEIOUYaeiouy\";\n  var messageLength =\
    \ message.length;\n  var newMessage = message;\n  \n  //Iterate over each character\
    \ in the message. \n  for (var i = 0; i < messageLength; i++){\n    var currentChar\
    \ = message[i];\n    //Iterate over the vowels in the message and try to replace\
    \ it with the \n    //letter that appears 2 places ahead of it in the alphabet\
    \ (case insensitive)\n    for (var j = 0; j < vowels.length; j++){\n      if (vowels[j]\
    \ === currentChar){\n        var nextVowel = message.charAt(i + 2);\n        var\
    \ newMessageWithNextVowel = message.replace( currentChar, nextVowel );\n     \
    \   //Replace vowels in the message with the letter that appears 2 \n        //places\
    \ ahead of it in the alphabet (case insensitive)\n        newMessage = newMessageWithNextVowel;\n\
    \      }\n    }\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TTST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmposc76f52.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmposc76f52.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TTST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let output = \"\";\n    for(let i = 0; i < message.length; i++){\n      \
    \  if (message.charAt(i) === \" \" || message.charAt(i) === \".\" || message.charAt(i)\
    \ == \"?\"){\n            output += \" \";\n        } else {\n            let\
    \ vowels = \"aeiouAEIOU\";\n            let posVowels = vowels.indexOf(message.charAt(i));\n\
    \            if (posVowels == -1) {\n                posVowels = vowels.length;\n\
    \            }\n            output += message.charAt(i).toLowerCase().charCodeAt(posVowels\
    \ - 2).toUpperCase();\n        }\n    }\n    return output;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvu1c34y2.js:22\n            output += message.charAt(i).toLowerCase().charCodeAt(posVowels\
    \ - 2).toUpperCase();\n                                                      \
    \                          ^\n\nTypeError: message.charAt(...).toLowerCase(...).charCodeAt(...).toUpperCase\
    \ is not a function\n    at encode (/tmp/tmpvu1c34y2.js:22:81)\n    at test (/tmp/tmpvu1c34y2.js:33:20)\n\
    \    at Object.<anonymous> (/tmp/tmpvu1c34y2.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var messageToEncode =\
    \ \"\";\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"];\n    \n\
    \    //Replace all vowels in message with the letter that appears 2 places ahead\
    \ of that vowel. \n    for (var i = 0; i < message.length; i++){\n        messageToEncode\
    \ += alphabet.indexOf(message.charAt(i));\n        messageToEncode += alphabet.indexOf(message.charAt(i\
    \ + 1));\n    }\n    \n    //Now replace all vowels in messageToEncode with the\
    \ letter that appears 2 places ahead of that vowel in the alphabet array. \n \
    \   for (var i = 0; i < messageToEncode.length; i++){\n        messageToEncode\
    \ += alphabet.indexOf(messageToEncode.charAt(i));\n        messageToEncode +=\
    \ alphabet.indexOf(messageToEncode.charAt(i + 1));\n    }\n    \n    //Now replace\
    \ all vowels in messageToEncode with the letter that appears 2 places ahead of\
    \ that vowel in the alphabet array.\n    for (var i = 0; i < messageToEncode.length;\
    \ i++){\n        messageToEncode += alphabet.indexOf(messageToEncode.charAt(i));\n\
    \        messageToEncode += alphabet.indexOf(messageToEncode.charAt(i + 1));\n\
    \    }\n    \n    //Now replace all vowels in messageToEncode with the letter\
    \ that appears 2 places ahead of that vowel in the alphabet array.\n    for (var\
    \ i = 0; i < messageToEncode.length; i++){\n        messageToEncode += alphabet.indexOf(messageToEncode.charAt(i));\n\
    \        messageToEncode += alphabet.indexOf(messageToEncode.charAt(i + 1));\n\
    \    }\n    \n    //Now replace all vowels in messageToEncode with the letter\
    \ that appears 2 places ahead of that vowel in the alphabet array. \n    for (var\
    \ i = 0; i < messageToEncode.length; i++){\n        messageToEncode += alphabet.indexOf(messageToEncode.charAt(i));\n\
    \        messageToEncode += alphabet.indexOf(messageToEncode.charAt(i + 1));\n\
    \    }\n    \n    //Now replace all vowels in messageToEncode with the letter\
    \ that appears 2 places ahead of that vowel in the alphabet array.\n    for (var\
    \ i = 0; i < messageToEncode.length; i++){\n        messageToEncode += alphabet.indexOf(messageToEncode.charAt(i));\n\
    \        messageToEncode += alphabet.indexOf(messageToEncode.charAt(i + 1));\n\
    \    }\n    \n    //Now replace all vowels in messageToEncode with the letter\
    \ that appears 2 places ahead of that vowel in the alphabet array.\n    for (var\
    \ i = 0; i < messageToEncode.length; i++){\n        messageToEncode += alphabet.indexOf(messageToEncode.charAt(i));\n\
    \        messageToEncode += alphabet.indexOf(messageToEncode.charAt(i + 1));\n\
    \    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpf9yrc9d7.js:69\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  // Write your code here.\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkwaq6t_y.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkwaq6t_y.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let output = \"\";\n    \n    for (let i = 0; i < message.length; i++) {\n\
    \        const char = message[i];\n        const letterIndex = alphabet.indexOf(char);\n\
    \        output += alphabet.slice((letterIndex + 2), letterIndex + 4 + message.length);\n\
    \    }\n    \n    return output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpma0ibdqc.js:16\n        const letterIndex = alphabet.indexOf(char);\n\
    \                            ^\n\nReferenceError: alphabet is not defined\n  \
    \  at encode (/tmp/tmpma0ibdqc.js:16:29)\n    at test (/tmp/tmpma0ibdqc.js:28:20)\n\
    \    at Object.<anonymous> (/tmp/tmpma0ibdqc.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tvar newString = message.toLowerCase();\n\tvar counter = 0;\n\tvar newStringIndex\
    \ = 0;\n\tfor (var i = 0; i < newString.length; i++){\n\t\tif (newString[i] ===\
    \ 'a' || newString[i] === 'e' || newString[i] === 'i' || newString[i] === 'o'\
    \ || newString[i] === 'u'){\n\t\t\tnewString[newStringIndex] = 'A';\n\t\t}\n\t\
    \tif (newString[i] === 'b' || newString[i] === 'c' || newString[i] === 'd' ||\
    \ newString[i] === 'f' || newString[i] === 'g' || newString[i] === 'h' || newString[i]\
    \ === 'j' || newString[i] === 'k' || newString[i] === 'l' || newString[i] ===\
    \ 'm' || newString[i] === 'n' || newString[i] === 'p' || newString[i] === 'q'\
    \ || newString[i] === 'r' || newString[i] === 't' || newString[i] === 'v' || newString[i]\
    \ === 'w' || newString[i] === 'x' || newString[i] === 'y' || newString[i] ===\
    \ 'z'){\n\t\t\tnewString[newStringIndex] = 'B';\n\t\t}\n\t\tif (newString[i] ===\
    \ 'z' || newString[i] === 'k' || newString[i] === 'l' || newString[i] === 'm'\
    \ || newString[i] === 'n' || newString[i] === 'p' || newString[i] === 'q' || newString[i]\
    \ === 'r' || newString[i] === 's' || newString[i] === 't' || newString[i] ===\
    \ 'v' || newString[i] === 'w' || newString[i] === 'x' || newString[i] === 'y'\
    \ || newString[i] === 'a'){\n\t\t\tnewString[newStringIndex] = 'Z';\n\t\t}\n\t\
    \tif (newString[i] === 'e' || newString[i] === 'h' || newString[i] === 'k' ||\
    \ newString[i] === 'm' || newString[i] === 'o' || newString[i] === 'p' || newString[i]\
    \ === 'r' || newString[i] === 'u' || newString[i] === 'y' || newString[i] ===\
    \ 'a'){\n\t\t\tnewString[newStringIndex] = 'E';\n\t\t}\n\t\tif (newString[i] ===\
    \ 'w' || newString[i] === 'x' || newString[i] === 'y' || newString[i] === 'z'){\n\
    \t\t\tnewString[newStringIndex] = 'W';\n\t\t}\n\t\tif (newString[i] === 'd' ||\
    \ newString[i] === 'c' || newString[i] === 'f' || newString[i] === 'g' || newString[i]\
    \ === 'j' || newString[i] === 'h' || newString[i] === 'k' || newString[i] ===\
    \ 'l' || newString[i] === 'm' || newString[i] === 'n' || newString[i] === 'q'\
    \ || newString[i] === 'p' || newString[i] === 'r' || newString[i] === 's' || new\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphz0ns9at.js:32\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let messageArray = message.split(\"\");\n    let encryptedMessage = \"\"\
    ;\n    for(let i=0; i<messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let index = alphabet.indexOf(letter);\n        let index2 = index+1;\n\
    \        if(index2 >= alphabet.length){\n            index2 = 0;\n        }\n\
    \        encryptedMessage += alphabet[index2];\n    }\n    return encryptedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp25hy6ckr.js:16\n        let index = alphabet.indexOf(letter);\n\
    \                    ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmp25hy6ckr.js:16:21)\n    at test (/tmp/tmp25hy6ckr.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp25hy6ckr.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\"\n  for(let i = 0; i < message.length; i++){\n   \
    \ let encodedLetter = message[i].toLowerCase()\n    let letterIndex = 26 - encodedLetter\n\
    \    encodedMessage+= String.fromCharCode((letterIndex + 2) % 26 + 65)\n  }\n\
    \  return encodedMessage\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x00\\x00\\\
    x00\\x00'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpugixeoef.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpugixeoef.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x00\\x00\\\
    x00\\x00',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    //We need to make a new string that is exactly the size of the message \n\
    \    //because if we try to make a string with more spaces than the size of the\
    \ \n    //message it will end up truncating the message to the size it was created\
    \ \n    //with. So we need a size that is exactly the size of the message \n \
    \   //and to make sure it stays that way we need to add spaces to the string \n\
    \    //until it is exactly the size of the message otherwise it won't be \n  \
    \  //exactly the size of the message and end up being truncated when we \n   \
    \ //append the spaces. \n    let encodedString = message.split('')\n    let encodedStringLength\
    \ = encodedString.length\n    let spacesNeeded = encodedStringLength - message.length\n\
    \    let spacesString = ''\n    \n    //Now we will go through our original string\
    \ and for each letter\n    //we look at the next letter that follows it. \n  \
    \  for(let i=0; i<encodedStringLength; i++){\n        //If that next letter is\
    \ the same as the current letter\n        //we append the letter to the current\
    \ letter \n        if(encodedString[i] === encodedString[i+1]){\n            encodedString[i]\
    \ += ' '\n        }\n        //If that letter was in the original message and\
    \ it was a vowel\n        //we append the letter to the current letter \n    \
    \    else if(encodedString[i] === 'a' || encodedString[i] === 'e' ||\n       \
    \     encodedString[i] === 'i' || encodedString[i] === 'o' ||\n            encodedString[i]\
    \ === 'u'){\n            encodedString[i] += ' '\n        }\n        //else we\
    \ add it to the spaces string\n        else{\n            spacesString += encodedString[i]\n\
    \        }\n    }\n    //Now that we have the spaces string we need to remove\
    \ them from the \n    //original message and add them in front of our encoded\
    \ message string\n    message = message.split(' ')\n    for(let i=0; i<message.length;\
    \ i++){\n        message[i] += spacesString\n    }\n    //Now we need to remove\
    \ any spaces from our message that is now in front of \n    //our encoded string\n\
    \    message = message.join(' ')\n    return message\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTEST'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpui9dgfzk.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpui9dgfzk.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let letter = \"\";\n    let vowel = \"AEIOUY\";\n    let swap = vowel;\n\
    \    for(let i = 0; i < message.length; i++){\n        if(vowel.includes(message.charAt(i))){\n\
    \            letter = letter + swap[vowel.indexOf(message.charAt(i)) -2];\n  \
    \      }else{\n            letter = letter + message.charAt(i);\n        }\n \
    \   }\n    \n    return letter;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TundefinedST'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2ngy968z.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2ngy968z.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TundefinedST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var encodedMessage = \"\"\n    var currentLetter = ''\n    var currentVowel\
    \ = ''\n    for (var i = 0; i < message.length; i++){\n        currentLetter =\
    \ message.charAt(i)\n        currentVowel = currentLetter.charCodeAt(0) - 65 //\
    \ get unicode value for A\n        currentVowel = currentVowel % 2 // get modulo\
    \ value which gives you whether it's 1 or 0\n        encodedMessage += currentLetter\n\
    \        if (currentVowel == 0){\n            encodedMessage += currentLetter.charCodeAt(0)\n\
    \        }\n    }\n    return encodedMessage\n}\n</code>\n<|/ a dscore=1 tags=string,python\
    \ |>\n<| a tags=string,python |>\n<code>\ndef encode(message):\n    message_encoded\
    \ = \"\"\n    ascii_lowercase = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter\
    \ in message:\n        if letter in ascii_lowercase:\n            message_encoded\
    \ += ascii_lowercase[ascii_lowercase.index(letter)+2]\n        else:\n       \
    \     message_encoded += letter\n    return message_encoded\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,python |>\n<code>\ndef encode(message):\n    letters =\
    \ message.upper()\n    l = list(letters)\n    for i in range(len(letters)):\n\
    \        if l[i] >= 'A' and l[i] <= 'Z':\n            l[i] = l[i] + 2\n      \
    \  elif l[i] == 'A' or l[i] == 'E' or l[i] == 'I' or l[i] == 'O' or l[i] == 'U':\n\
    \            l[i] = 'A'\n    return ''.join(l)\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a |>\n<code>\ndef encode(message):\n    encoded = \"\"\n    for letter in message:\n\
    \        if letter.isalpha():\n            if letter.upper() == \"A\":\n     \
    \           encoded += \"2\"\n            else:\n                encoded += letter.upper()\n\
    \        else:\n            encoded += letter\n    return encoded\n\nprint(encode(\"\
    test\"))\nprint(encode(\"This is a message\"))\n</code>\n<|/ a dscore=0 tags=string,python\
    \ |>\n<| a dscore=0 tags=string,python |>\n<code>\ndef encode(message):\n    encoded\
    \ = \"\"\n    for letter in message:\n        if letter in \"AEIOUaeiou\":\n \
    \           encoded += chr(ord(letter) + 2)\n        else:\n            encoded\
    \ += letter\n    return encoded\n\nprint(encode(\"test\"))\nprint(encode(\"This\
    \ is a message\"))\n</code>\n<|/ a |>\n<| c |>\nHi if this or any answer has solved\
    \ your question please consider [accepting it](https://meta.stackexchange.com/q/5234/179419)\
    \ by clicking the check-mark. This indicates to the wider communit\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpq_38y77d.js:26\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  // Your code goes here\n  return message;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7r0zfbo1.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7r0zfbo1.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    let letters = [\"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"\
    , \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\"\
    , \"W\", \"X\", \"Y\", \"Z\"];\n    let vowelCount = 0;\n    let currentLetterIndex\
    \ = 0;\n    let currentVowelIndex = 0;\n    for(let char of message){\n      \
    \  if(letters.indexOf(char) >= 0){\n            encodedMessage += letters[currentLetterIndex];\n\
    \            currentLetterIndex++;\n        }else{\n            encodedMessage\
    \ += char;\n        }\n    }\n    for(let i=0; i<vowels.length; i++){\n      \
    \  if(vowels.indexOf(i) >= 0){\n            if(currentVowelIndex < vowelCount){\n\
    \                encodedMessage += vowels[currentVowelIndex];\n              \
    \  currentVowelIndex++;\n            }else{\n                currentVowelIndex\
    \ = 0;\n                encodedMessage += vowels[i];\n            }\n        }else{\n\
    \            currentVowelIndex = 0;\n            encodedMessage += vowels[i];\n\
    \        }\n    }\n    return encodedMessage;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'BCDEaeiou'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpn6mqf7id.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn6mqf7id.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'BCDEaeiou',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    if (message.match(/[a-z]/) && message.match(/[a-z]/i)) \n        return message.toUpperCase();\n\
    \    var vowels = 'AEIOUaeiou'.split('');\n    var letters = [];\n    for (var\
    \ i=0; i<message.length; i++){\n        letters.push(message.charAt(i));\n   \
    \ }\n    letters.reverse();\n    var newMessage = [];\n    for (var i = 0; i <\
    \ letters.length; i++) {\n        for (var j = 0, len = vowels.length; j < len;\
    \ j++) {\n            if (letters[i] == vowels[j]) {\n                letters[i]\
    \ = (j+2);\n            }\n        }\n    }\n    letters.reverse();\n    letters.forEach(function(v){\n\
    \        newMessage.push(v.charAt(0));\n    });\n    return newMessage.join('');\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpxznkbpkh.js:30\n        newMessage.push(v.charAt(0));\n       \
    \                   ^\n\nTypeError: v.charAt is not a function\n    at /tmp/tmpxznkbpkh.js:30:27\n\
    \    at Array.forEach (<anonymous>)\n    at encode (/tmp/tmpxznkbpkh.js:29:13)\n\
    \    at test (/tmp/tmpxznkbpkh.js:39:20)\n    at Object.<anonymous> (/tmp/tmpxznkbpkh.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var vowels = \"aeiouAEIOU\"\n  var message = message.toLowerCase().split(\"\
    \");\n  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n \
    \   if(message[i] === \"a\" || message[i] === \"e\" || message[i] === \"i\" ||\
    \ message[i] === \"o\" || message[i] === \"u\"){\n      newMessage += message[i];\n\
    \    }else if(message[i] === \"A\" || message[i] === \"E\" || message[i] === \"\
    I\" || message[i] === \"O\" || message[i] === \"U\"){\n      newMessage += message[i]\
    \ + vowels[vowels.indexOf(message[i])+1];\n    }else{\n      newMessage += message[i];\n\
    \    }\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2r8pwfvx.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp2r8pwfvx.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let result = \"\";\n    for (let i = 0; i < message.length; i++){\n     \
    \   let char = message[i]\n        if (char.toLowerCase() === char){\n       \
    \     result += char.toLowerCase();\n        }\n        else if (char.includes('A')){\n\
    \            let indexA = char.charCodeAt(0)\n            result += (indexA -\
    \ 'A').toString() + char.toUpperCase();\n        }\n        else if (char.includes('a')){\n\
    \            let indexA = char.charCodeAt(0)\n            result += (indexA -\
    \ 'a').toString() + char.toUpperCase();\n        }\n        else{\n          \
    \  result += char.toLowerCase();\n        }\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxypjhwqp.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxypjhwqp.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let vowels = \"AEIOU\";\n  let result = '';\n\n  for(let i = 0; i < message.length;\
    \ i++){\n    result += vowels.charAt(message.charAt(i) - 'A' + 2);\n  }\n\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AAAA'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9lgx5a0w.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9lgx5a0w.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AAAA',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    return message.replace(/([A-Z])/g, function(letter){\n        return letter.toLowerCase();\n\
    \    }).replace(/[AEIOUaeiou]+/g,\n        function(letter){\n            return\
    \ letter.substring(2,letter.length);\n        }).replace(/[AEIOUaeiou]+/g,\n \
    \       function(letter){\n            return letter.substring(1,letter.length);\n\
    \        }).replace(/[AEIOUaeiou]+/g,\n        function(letter){\n           \
    \ return letter.substring(0,letter.length);\n        }).replace(/[aeiouAEIOU]+/g,\n\
    \        function(letter){\n            return letter.substring(1,letter.length);\n\
    \        }).replace(/[AEIOUaeiou]+/g,\n        function(letter){\n           \
    \ return letter.substring(2,letter.length);\n        });\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5al3i2n2.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5al3i2n2.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tst',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var result = '';\n  var vowels = \"AEIOUaeiou\";\n  for(var i = 0; i < message.length;\
    \ i++){\n    result += \n      message[i] + (message[i] == vowels[i / 2]\n   \
    \      ? message[i].toUpperCase() : message[i].toLowerCase()); \n  }\n  return\
    \ result; \n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TtEeSsTt'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0eknxsmy.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0eknxsmy.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TtEeSsTt',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    message = message.toLowerCase();\n    message = message.replace(/[a-z]/g,\
    \ function(letter){\n        return letter.charCodeAt(0)-64;\n    });\n    \n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    var output = [];\n   \
    \ \n    for(var i=0; i<message.length; i++){\n        var current = message.charCodeAt(i);\n\
    \        \n        // Write a test to see if this is vowel\n        // Write a\
    \ test to see if this is vowel\n        \n        var firstLetter = message.charCodeAt(0);\n\
    \        \n        var positionOfNextVowel = vowels.indexOf(message.charAt(i+1));\n\
    \        var positionOfNextLetter = vowels.indexOf(message.charAt(i+2));\n   \
    \     \n        if(positionOfNextVowel==-1){\n            output.push(String.fromCharCode(current+64));\n\
    \        }\n        else if(positionOfNextLetter==-1){\n            \n       \
    \     // Output this letter\n            output.push(String.fromCharCode(firstLetter+64));\n\
    \            \n            // Output the letter 2 places ahead\n            output.push(String.fromCharCode(current+64));\n\
    \        }\n        else{\n            \n            // Output this letter\n \
    \           output.push(String.fromCharCode(firstLetter+64));\n            \n\
    \            // Output the letter 2 places ahead\n            output.push(String.fromCharCode(current+64));\n\
    \        }\n        \n    }\n    \n    return output.join(\"\");\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'urswuqur'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpv9297lhw.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv9297lhw.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'urswuqur',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let arr = [];\n  for(let i = 0; i<message.length;i++){\n    let letter = message.charAt(i)\n\
    \    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o'\
    \ || letter === 'u'){\n      arr.push(letter)\n    }\n    if (letter.toLowerCase()\
    \ === 'a' || letter.toLowerCase() === 'e' || letter.toLowerCase() === 'i' || letter.toLowerCase()\
    \ === 'o' || letter.toLowerCase() === 'u'){\n      arr.push(letter.toUpperCase())\n\
    \    }\n    if (letter.toUpperCase() === 'a' || letter.toUpperCase() === 'e' ||\
    \ letter.toUpperCase() === 'i' || letter.toUpperCase() === 'o' || letter.toUpperCase()\
    \ === 'u'){\n      arr.push(letter)\n    }\n  }\n  return arr.join('')\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'E'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppzrq032u.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppzrq032u.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'E',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let swap;\n  let letters = message.split(\"\");\n  letters.forEach((letter,\
    \ index) => {\n    letters[index] = letter.split(\"\");\n    letters[index].forEach((letters,\
    \ index) => {\n      letters[index] = letters[index].split(\"\");\n      letters[index].forEach((letter,\
    \ index) => {\n        letters[index] = letter.split(\"\");\n        letters[index].forEach((letter,\
    \ index) => {\n          letters[index] = letter.split(\"\");\n          letters[index].forEach((letter,\
    \ index) => {\n            letters[index] = letter.split(\"\");\n            letters[index].forEach((letter,\
    \ index) => {\n              letters[index] = letter.split(\"\");\n          \
    \    letters[index].forEach((letter, index) => {\n                letters[index]\
    \ = letter.split(\"\");\n                letters[index].forEach((letter, index)\
    \ => {\n                  letters[index] = letter.split(\"\");\n             \
    \     letters[index].forEach((letter, index) => {\n                    letters[index]\
    \ = letter.split(\"\");\n                    letters[index].forEach((letter, index)\
    \ => {\n                      letters[index] = letter.split(\"\");\n         \
    \             letters[index].forEach((letter, index) => {\n                  \
    \      letters[index] = letter.split(\"\");\n                        letters[index].forEach((letter,\
    \ index) => {\n                          letters[index] = letter.split(\"\");\n\
    \                          letters[index].forEach((letter, index) => {\n     \
    \                       letters[index] = letter.split(\"\");\n               \
    \             letters[index].forEach((letter, index) => {\n                  \
    \            letters[index] = letter.split(\"\");\n                          \
    \    letters[index].forEach((letter, index) => {\n                           \
    \     letters[index] = letter.split(\"\");\n                                letters[index].forEach((letter,\
    \ index) => {\n                                  letters[index] = letter.split(\"\
    \");\n                                  letters[index].forEach((letter, index)\
    \ => {\n                                    letters[index] = letter.split(\"\"\
    );\n                                    letters[index].forEach((letter, index)\
    \ => {\n                                      letters[index] = letter.split(\"\
    \");\n                                      letters[index].forEach((letter, index)\
    \ => {\n                                        letters[index] = letter.split(\"\
    \");\n                                        letters[index].forEach((letter,\
    \ index) => {\n                                          letters[index] = letter.split(\"\
    \");\n                                          letters[index].forEach((letter,\
    \ index) => {\n                                            letters[index] = letter.split(\"\
    \");\n                                            letters[index].forEach((letter,\
    \ index) => {\n                                              letters[index] =\
    \ letter.split(\"\");\n                                              letters[index].forEach((letter,\
    \ index) => {\n                                                letters[index]\
    \ = letter.split(\"\");\n                                                letters[index].forEach((letter,\
    \ index) => {\n                                                  letters[index]\
    \ = letter.split(\"\");\n                                                  letters[index].forEach((letter,\
    \ index) => {\n                                                    letters[index]\
    \ = letter.split(\"\");\n                                                    \n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqxctuylu.js:77\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  return message\n    .split('')\n    .reduce(function(prev,curr,i,arr){\n  \
    \    if(curr === 'a' || curr === 'e' || curr === 'i' || curr === 'o' || curr ===\
    \ 'u' || curr === 'A' || curr === 'E' || curr === 'I' || curr === 'O' || curr\
    \ === 'U') return curr\n      else if (i % 2 === 0) return prev\n      else return\
    \ prev + prev[prev.length-1]\n    })\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'EE'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvh08oew8.js:26:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvh08oew8.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'EE',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var code = \"\";\n  var messageSplit = message.split(\"\");\n  for(var i =\
    \ 0; i < messageSplit.length; i++){\n    var letterCode = messageSplit[i].charCodeAt(0);\n\
    \    var letter = messageSplit[i].toLowerCase();\n    if(letterCode >= 65 && letterCode\
    \ <= 90){\n      var upperLetter = letter.charCodeAt(0);\n      letter = String.fromCharCode(upperLetter\
    \ - (letterCode - 65));\n    }\n    code += letter;\n  }\n  return code;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'aaaa'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpj8d1cxjv.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpj8d1cxjv.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'aaaa',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  let replacement = \"ZYXWVUTSRQPONMLKJIHGFEDCBA\"\
    ;\n  let newMessage = message.split(\"\").map(letter => {\n    if(letter === \"\
    \ \"){\n      return letter\n    }\n    else if(alphabet.indexOf(letter) !== -1){\n\
    \      return replacement[alphabet.indexOf(letter)-1]\n    }\n    else {\n   \
    \   return letter\n    }\n  }).join(\"\")\n  return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'HWIH'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0vca18u4.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0vca18u4.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'HWIH',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = message.replace(/\\w/g,(c) => c.toUpperCase());\n  let vowels\
    \ = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n  let newVowels = [];\n  for(let i = 0;\
    \ i < vowels.length; i++){\n    newVowels.push(vowels[i+1]);\n  }\n  newVowels.sort((a,\
    \ b) => b.charCodeAt(0)-a.charCodeAt(0));\n  for(let i = 0; i < newVowels.length;\
    \ i++){\n    newMessage = newMessage.replace(new RegExp(vowels[i], 'g'), (newVowels[i]));\n\
    \  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp05d3w310.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp05d3w310.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    return message.replace(/[A-Z]/g, function(matched){\n      return matched.toUpperCase();\n\
    \    }).replace(/[AEIOUaeiou]/g, function(matched){\n      return matched.substr(1).toUpperCase();\n\
    \    }).replace(/[AEIOUaeiou]{2}/g, function(matched){\n      return matched.substr(1).toUpperCase();\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq22xy0q6.js:25:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpq22xy0q6.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TST',\n \
    \ expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \   let messageString = message;\n   let newMessage = \"\";\n   for(let i=0; i<messageString.length;\
    \ i++){\n       newMessage+=alphabet.indexOf(messageString.charAt(i));\n   }\n\
    \   return newMessage;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmppy_i5ooo.js:15\n       newMessage+=alphabet.indexOf(messageString.charAt(i));\n\
    \                   ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmppy_i5ooo.js:15:20)\n    at test (/tmp/tmppy_i5ooo.js:24:20)\n    at\
    \ Object.<anonymous> (/tmp/tmppy_i5ooo.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let vowels = new Set(\"AEIOUaeiou\");\n  let result = '';\n  for(let i=0; i<message.length;\
    \ i++){\n    let letter = message[i];\n    if(vowels.has(letter)){\n      letter\
    \ += letters[letters.indexOf(vowels.find(v=>v===letter)) + 2]\n    }\n    result\
    \ += letter;\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpmyn77wej.js:17\n      letter += letters[letters.indexOf(vowels.find(v=>v===letter))\
    \ + 2]\n                ^\n\nReferenceError: letters is not defined\n    at encode\
    \ (/tmp/tmpmyn77wej.js:17:17)\n    at test (/tmp/tmpmyn77wej.js:29:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpmyn77wej.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    message = message.toLowerCase();\n    let rep = \"\";\n    let lastLetter\
    \ = \"\";\n    for(let i = 0; i < message.length; i++){\n        if(message[i].toUpperCase()\
    \ === message[i]){\n            lastLetter = message[i];\n        }\n        else{\n\
    \            if(i + 1 < message.length){\n                if(message[i + 1].toUpperCase()\
    \ === message[i]){\n                    let repLetter = message[i];\n        \
    \            rep = rep + repLetter;\n                    i++;\n              \
    \  }\n            }\n        }\n    }\n    return rep + lastLetter;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmp29u7s9sp.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp29u7s9sp.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var vowels = \"AEIOU\";\n    var letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    var swapped;\n    var newMessage = \"\";\n    for(var i = 0; i<message.length;\
    \ i++){\n        swapped = false;\n        for(var j = 0; j<vowels.length; j++){\n\
    \            if(message[i] == vowels[j]){\n                swapped = true;\n \
    \               for(var k = 0; k<vowels.length; k++){\n                    if(j\
    \ != k){\n                        if(message[i] != vowels[k]){\n             \
    \               swapped = false;\n                            break;\n       \
    \                 }\n                    }\n                }\n              \
    \  break;\n            }\n        }\n        if(swapped){\n            swapped\
    \ = false;\n            for(var k = 0; k<letters.length; k++){\n             \
    \   if(message[i] != letters[k]){\n                    swapped = false;\n    \
    \                break;\n                }\n            }\n            for(var\
    \ k = 0; k<vowels.length; k++){\n                if(j != k){\n               \
    \     if(message[i] != vowels[k]){\n                        swapped = true;\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        if(swapped){\n            newMessage += message[i].toUpperCase();\n\
    \        }\n        else {\n            newMessage += message[i];\n        }\n\
    \    }\n    return newMessage;\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphjl6haqt.js:58\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let swapLetters = message.replace(/a/g, \"b\").replace(/e/g, \"z\")\n  .replace(/g/g,\
    \ \"z\").replace(/i/g, \"y\").replace(/o/g, \"g\")\n  .replace(/u/g, \"g\").replace(/y/g,\
    \ \"h\").replace(/B/g, \"a\").replace(/F/g, \"e\")\n  .replace(/G/g, \"i\").replace(/H/g,\
    \ \"o\").replace(/I/g, \"u\")\n  .replace(/N/g, \"i\").replace(/O/g, \"o\").replace(/S/g,\
    \ \"s\")\n  .replace(/T/g, \"t\").replace(/V/g, \"v\").replace(/W/g, \"w\")\n\
    \  .replace(/Z/g, \"z\")\n  console.log(swapLetters)\n}\n  \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0syrk7mf.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0syrk7mf.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'tEst

    '
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    // your code here\n    var chars = ['a','b','c','d','e','f','g','h','i','j','k','l','m',\n\
    \    'n','o','p','q','r','s','t','u','v','w','x','y','z'];\n    var vowels = ['a','e','i','o','u','y','A','E','I','O','U','Y'];\n\
    \    var new_message = '';\n    for(i = 0; i < message.length; i++){\n       \
    \ var letter = message.charAt(i);\n        var index = chars.indexOf(letter);\n\
    \        if(index > -1){\n            var index_2 = chars.indexOf(vowels[index]);\n\
    \            if(index_2 > -1){\n                new_message += message.charAt(i);\n\
    \                new_message += vowels[index_2];\n            }else{\n       \
    \         new_message += message.charAt(i);\n                new_message += letter;\n\
    \            }\n        }else{\n            new_message += message.charAt(i);\n\
    \        }\n    }\n    return new_message;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3vxk8t1v.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp3vxk8t1v.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \t\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9verak8v.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9verak8v.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let result = \"\";\n  for (let i = 0; i <= message.length-1; i++){\n    for\
    \ (let j = 0; j < 26; j++){\n      if (message[i] === alphabet[j]) {\n       \
    \ result += alphabet[alphabet.length - j];\n      }\n    }\n    for (let j = 0;\
    \ j < 26; j++){\n      if (j === alphabet.length - 1) {\n        result += alphabet[alphabet.length\
    \ - j];\n      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6wer7n11.js:15\n      if (message[i] === alphabet[j]) {\n     \
    \                    ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmp6wer7n11.js:15:26)\n    at test (/tmp/tmp6wer7n11.js:33:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp6wer7n11.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n\
    \    \n    let strArray = message.split(\"\");\n    for(let i in strArray){\n\
    \        if (vowels.indexOf(strArray[i]) >= 0){\n            let vowelIndex =\
    \ vowels.indexOf(strArray[i]);\n            let nextVowelIndex = vowelIndex +\
    \ 1;\n            if (nextVowelIndex < vowels.length){\n                strArray[i]\
    \ = vowels[vowelIndex];\n                strArray[nextVowelIndex] = vowels[nextVowelIndex];\n\
    \            }\n            else{\n                strArray[i] = vowels[nextVowelIndex];\n\
    \            }\n        }\n        else if (consonants.indexOf(strArray[i]) >=\
    \ 0){\n            let consonantIndex = consonants.indexOf(strArray[i]);\n   \
    \         let nextConsonantIndex = consonantIndex + 1;\n            if (nextConsonantIndex\
    \ < consonants.length){\n                strArray[i] = consonants[consonantIndex];\n\
    \                strArray[nextConsonantIndex] = consonants[nextConsonantIndex];\n\
    \            }\n            else{\n                strArray[i] = consonants[nextConsonantIndex];\n\
    \            }\n        }\n    }\n    return strArray.join(\"\");\n}\n</code>\n\
    <|/ a tags=javascript,algorithm |>\n<| c |>\nAwesome :) \nAlthough your solution\
    \ seems more elegant, this one uses less memory. :)\n<|/ c |>\n<| c |>\nThank\
    \ you,. It is not the best solution, just an elegant solution.\n<|/ c |>\n<| c\
    \ |>\nNo problem :)\n<|/ c |>\n<| a tags=javascript,algorithm |>\nYou can use\
    \ this simple function in javascript\n<code>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpei_xv1u6.js:42\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    return message.split(\"\"\
    ).map(function(letter){\n        return alphabet.indexOf(letter) + alphabet[alphabet.indexOf(letter)\
    \ + 2]; \n    }).join(\"\");\n}\n</code>\n<|/ a dscore=0 tags=algorithm,javascript\
    \ |>\n<| c |>\nWhat is this line doing `return message.split(\"\").map(function(letter){`?\
    \ It seems to be working just fine. Is there something special about `map` that\
    \ I don't know?\n<|/ c |>\n<| c |>\nIt's an [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\
    \ that returns the current value of `letter` unchanged.\n<|/ c |>\n<| a tags=algorithm,javascript\
    \ |>\nAs you know that each letter has a specific position in your alphabet, you\
    \ can (ab)use that knowledge to solve the problem.\n<code>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsv2ka35n.js:17\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let swap = {\n    \"a\": \"A\",\n    \"b\": \"B\",\n    \"c\": \"C\",\n   \
    \ \"d\": \"D\",\n    \"e\": \"E\",\n    \"f\": \"F\",\n    \"g\": \"G\",\n   \
    \ \"h\": \"H\",\n    \"i\": \"I\",\n    \"j\": \"J\",\n    \"k\": \"K\",\n   \
    \ \"l\": \"L\",\n    \"m\": \"M\",\n    \"n\": \"N\",\n    \"o\": \"O\",\n   \
    \ \"p\": \"P\",\n    \"q\": \"Q\",\n    \"r\": \"R\",\n    \"s\": \"S\",\n   \
    \ \"t\": \"T\",\n    \"u\": \"U\",\n    \"v\": \"V\",\n    \"w\": \"W\",\n   \
    \ \"x\": \"X\",\n    \"y\": \"Y\",\n    \"z\": \"Z\"\n  }\n  let vowels = Object.keys(swap);\n\
    \  \n  return message.toLowerCase().replace(vowels, m => vowels[vowels.indexOf(m)\
    \ + 1])\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdcuycua9.js:50:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdcuycua9.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var encodedMessage = message;\n  for(var i = 0; i < message.length; i++){\n\
    \    var letter = message.charAt(i);\n    var position = alphabet.indexOf(letter);\n\
    \    if(position > -1) encodedMessage = encodedMessage.replace(letter, alphabet[position\
    \ + 2]);\n  }\n  return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpimjl2vyb.js:15\n    var position = alphabet.indexOf(letter);\n\
    \                   ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmpimjl2vyb.js:15:20)\n    at test (/tmp/tmpimjl2vyb.js:26:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpimjl2vyb.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    var str = '';\n    var\
    \ vowels = \"AEIOU\";\n    var vowelsCount = 0;\n    for (var i = 0, l = message.length;\
    \ i < l; i++) {\n        var letter = message[i];\n        if (vowels.indexOf(letter)\
    \ == -1) {\n            str += letter;\n        } else {\n            str += alphabet[vowelsCount];\n\
    \            vowelsCount++;\n        }\n    }\n    return str;\n}\n</code>\n<|/\
    \ a dscore=0 tags=javascript |>\n<| c |>\nThis is a great answer. I made it slightly\
    \ more dynamic and to allow the code to accept a number instead of \"2\" to determine\
    \ what letter 2 places ahead of vowel should be. \n\n`var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\nvar str = '';\nvar vowels = \"AEIOU\";\nvar vowelsCount = 0;\nvar indexOfVowel\
    \ = message.indexOf(vowels[0]);\nvar indexOfVowelTwoAhead = 0;\n\nif(indexOfVowel\
    \ != -1){\n    indexOfVowelTwoAhead = indexOfVowel + vowels[0].length + 1;\n}\n\
    \nfor (var i = 0, l = message.length; i < l; i++) {\n    var letter = message[i];\n\
    \    if (vowels.indexOf(letter) == -1) {\n        str += letter;\n    } else {\n\
    \        str += alphabet[vowelsCount];\n        vowelsCount++;\n    }\n}\nreturn\
    \ str;`\n<|/ c |>\n<| a dscore=0 tags=javascript |>\nUsing only array methods\n\
    \n<code>\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdmntevku.js:27\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    //Write your function\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph7eu5hh8.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmph7eu5hh8.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: -1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tvar encodedMessage = '';\n\tvar vowels = \"aeiou\";\n\tvar a = '', b = '', c\
    \ = '', d = '', e = '', f = '', g = '', h = '', i = '', j = '';\n\tfor(var i =\
    \ 0; i < message.length; i++){\n\t\ta = message.charAt(i).toLowerCase();\n\t\t\
    b = message.charAt(i+1).toLowerCase();\n\t\tc = message.charAt(i+2).toLowerCase();\n\
    \t\td = message.charAt(i+3).toLowerCase();\n\t\te = message.charAt(i+4).toLowerCase();\n\
    \t\tf = message.charAt(i+5).toLowerCase();\n\t\tg = message.charAt(i+6).toLowerCase();\n\
    \t\th = message.charAt(i+7).toLowerCase();\n\t\ti = message.charAt(i+8).toLowerCase();\n\
    \t\tj = message.charAt(i+9).toLowerCase();\n\t\tif(a.indexOf(vowels) > -1){\n\t\
    \t\ta = a.substring(0,a.indexOf(vowels));\n\t\t\ta = a.concat(vowels.charAt(a.indexOf(vowels)\
    \ - 1));\n\t\t}\n\t\tif(b.indexOf(vowels) > -1){\n\t\t\tb = b.substring(0,b.indexOf(vowels));\n\
    \t\t\tb = b.concat(vowels.charAt(b.indexOf(vowels) - 1));\n\t\t}\n\t\tif(c.indexOf(vowels)\
    \ > -1){\n\t\t\tc = c.substring(0,c.indexOf(vowels));\n\t\t\tc = c.concat(vowels.charAt(c.indexOf(vowels)\
    \ - 1));\n\t\t}\n\t\tif(d.indexOf(vowels) > -1){\n\t\t\td = d.substring(0,d.indexOf(vowels));\n\
    \t\t\td = d.concat(vowels.charAt(d.indexOf(vowels) - 1));\n\t\t}\n\t\tif(e.indexOf(vowels)\
    \ > -1){\n\t\t\te = e.substring(0,e.indexOf(vowels));\n\t\t\te = e.concat(vowels.charAt(e.indexOf(vowels)\
    \ - 1));\n\t\t}\n\t\tif(f.indexOf(vowels) > -1){\n\t\t\tf = f.substring(0,f.indexOf(vowels));\n\
    \t\t\tf = f.concat(vowels.charAt(f.indexOf(vowels) - 1));\n\t\t}\n\t\tif(g.indexOf(vowels)\
    \ > -1){\n\t\t\tg = g.substring(0,g.indexOf(vowels));\n\t\t\tg = g.concat(vowels.charAt(g.indexOf(vowels)\
    \ - 1));\n\t\t}\n\t\tif(h.indexOf(vowels) > -1){\n\t\t\th = h.substring(0,h.indexOf(vowels));\n\
    \t\t\th = h.concat(vowels.charAt(h.indexOf(vowels) - 1));\n\t\t}\n\t\tif(i.indexOf(vowels)\
    \ > -1){\n\t\t\ti = i.substring(0,i.indexOf(vowels));\n\t\t\ti = i.concat(vowels.charAt(i.indexOf(vowels)\
    \ - 1));\n\t\t}\n\t\tif(j.indexOf(vowels) > -1){\n\t\t\tj = j.substring(0,j.indexOf(vowels));\n\
    \t\t\tj = j.concat(vowels.charAt(j.indexOf(vowels) - 1));\n\t\t}\n\t\tencodedMessage\
    \ += a + b + c + d + e + f + g + h + i + j;\n\t}\n\treturn encodedMessage;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659976897
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var vowels =[\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var alphabet = [\"\
    t\", \"g\", \"s\", \"c\", \"k\", \"h\", \"g\", \"h\", \"k\", \"s\", \"c\", \"\
    g\", \"s\", \"h\", \"k\", \"k\"];\n    var output = '';\n    var len = message.length;\n\
    \n    for (var i = 0; i < len; i++){\n        var letter = message[i];\n     \
    \   var index = alphabet.indexOf(letter);\n        if (index >= 0) {\n       \
    \     var next = alphabet[(index + 1) % alphabet.length];\n            output\
    \ += letter + next;\n        }\n        else {\n            output += letter;\n\
    \        }\n    }\n    return output;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4kurmt2d.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp4kurmt2d.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    var vowels = \"AEIOUY\"\
    \n    var newMessage = \"\"\n\n    for (var i = 0; i < message.length; i++){\n\
    \        var char = message[i]\n        var position = letters.indexOf(char.toLowerCase())\
    \ + 1\n        var currentVowel = vowels.charAt(position-1)\n        var nextVowel\
    \ = vowels.charAt(position)\n\n        newMessage = newMessage + currentVowel\
    \ + nextVowel\n    }\n\n    return newMessage\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'AAAA'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp59nqbxm8.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp59nqbxm8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'AAAA',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976892
