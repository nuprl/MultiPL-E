name: HumanEval_30_get_positive
language: js
prompt: "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2,\
  \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
  \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
  \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
  }\n\ntest();"
completions: ["    var newl = [];\n    var positive = [];\n    for (var i = 0; i<l.length;\
    \ i++){\n        if (l[i] > 0) newl.push(l[i]);\n    }\n    for (i=0; i<l.length;\
    \ i++){\n        if (l[i] > 0) newl.push(l[i]);\n    }\n    for (i=0; i<newl.length;\
    \ i++){\n        if (newl[i] < 0) positive.push(newl[i]);\n    }\n    return positive;\n\
    }\n", "  return l.filter( function(val){\n    return val > 0;\n  });\n}\n", " \
    \ var ret = [];\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n\
    \      ret.push(l[i]);\n    }\n  }\n  return ret;\n}\n", "    var n = [], i;\n\
    \    for(i = 0; i < l.length; i++){\n        if(l[i] > 0) n.push(l[i]);\n    }\n\
    \    return n;\n}", "  let positive = []\n  for(let i in l){\n    if(l[i] > 0)\n\
    \      positive.push(l[i])\n  }\n  return positive\n}\n", "    var result = [];\n\
    \    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            result.push(l[i]);\n\
    \        }\n    }\n    return result;\n}\n", "\tvar l2 = [];\n\tfor(var i=0; i<l.length;\
    \ i++){\n\t\tl2[i] = l[i]>=0 ? l[i] : 0;\n\t}\n\treturn l2;\n}\n", "    return\
    \ l.filter(function(n){ return n > 0; });\n}\n", "    var p = l || [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        if(l[i] > 0) p.push(l[i]);\n    }\n    return\
    \ p;\n}\n", "\tfor (var i = 0; i < l.length; i++){\n\t\tif (l[i] > 0) return l.slice(i);\n\
    \t}\n\treturn l;\n}\n", "    var new_l = [];\n    var new_l2 = [];\n    var temp\
    \ = 0;\n    for(var i = 0; i<l.length; i++){\n        if(l[i] > 0){\n        \
    \    temp+=l[i];\n            new_l.push(temp);\n            new_l2.push(l[i]);\n\
    \            temp = 0;\n        }\n    }\n    return [new_l, new_l2];\n}\n", " \
    \   var a = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] > 0){\n \
    \           a.push(l[i]);\n        }\n    }\n    return a;\n}\n", "    return\
    \ l.filter(function (x) { return x > 0; });\n}", "    return l.filter(function\
    \ (x){return typeof x == \"number\" && x > 0;});\n}\n", "  var rv = [];\n  var\
    \ positive_count = 0;\n  for(var i in l){\n    if(l[i] > 0){\n      rv.push(l[i]);\n\
    \      positive_count++;\n    }\n  }\n  if(positive_count > 0){\n    return rv;\n\
    \  } else {\n    return null;\n  }\n}\n", "    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] < 0){\n            l.splice(i,1);\n            i--;\n       \
    \ }\n    }\n}\n", "    var r = [];\n    for(var i in l){\n        if(l[i] > 0)\n\
    \            r.push(l[i]);\n    }\n    return r;\n}", "  var r = [];\n  var f\
    \ = false;\n  for(var x in l){\n    if(l[x] > 0){\n      r.push(l[x]);\n     \
    \ f = true;\n    }\n  }\n  if(f)\n    r.push(1);\n  return r;\n}\n", "\tvar a\
    \ = l;\n\tfor(var i = 0, len = a.length; i < len; i++){\n\t\tif(a[i] <= 0) return\
    \ a.slice(0,i+1);\n\t}\n\treturn a;\n}\n", "    return l.filter(function(x){\n\
    \        return x > 0;\n    });\n}", "  for(var i=0,len=l.length; i<len; i++){\n\
    \    if(l[i]<0){\n      l.splice(i,1);\n      i--; len--;\n    }\n  }\n  return\
    \ l;\n}\n", "  var positives = [];\n  for (var i = 0; i < l.length; i++) {\n \
    \   if (l[i] >= 0) {\n      positives.push(l[i]);\n    }\n  }\n  return positives;\n\
    }\n", "\tfor(let i in l)\n\t\tif( l[i] < 0 ){\n\t\t\tdelete l[i];\n\t\t}\n\treturn\
    \ l;\n}\n", "    return l.filter(v => v >= 0);\n}\n", "\tvar ret = []\n\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tif(l[i] > 0){\n\t\t\tret.push(l[i])\n\t\t}\n\
    \t}\n\treturn ret\n}\n", "    for(let i = 0; i < l.length; i++){\n        if(l[i]\
    \ > 0){\n            return [...l, l[i]];\n        }\n    }\n    return l;\n}\n",
  "\treturn l.filter((x) => x > 0)\n}\n", "    var a = [];\n    for(var i=0; i<l.length;\
    \ i++){\n        if(l[i] > 0) a.push(l[i]);\n    }\n    return a;\n}", "    var\
    \ a = l.filter(function(x){return x > 0;});\n    return a.length > 0 ? a : [];\n\
    }\n", "    var res = [];\n    for(var i = 0, length = l.length; i < length; i++){\n\
    \        if(l[i] > 0){\n            res.push(l[i]);\n        }\n    }\n    return\
    \ res;\n}\n", "\treturn filter(l, is_positive);\n}\n", "    for(var i = 0, len\
    \ = l.length; i < len; i++){\n        if(l[i] > 0){\n            return l.slice(i,\
    \ i + 1);\n        }\n    }\n}\n", "\tvar i;\n\tfor (i = 0; i < l.length; i++)\
    \ {\n\t\tl[i] = l[i] > 0 ? l[i] : 0;\n\t}\n\treturn l;\n}\n", "    var l = l.filter(function(l){\n\
    \        return l > 0;\n    });\n    return l;\n}\n", "    var ret = [];\n   \
    \ for (var i = 0; i < l.length; i++) {\n        if(l[i] >= 0){\n            ret.push(l[i]);\n\
    \        }\n    }\n    return ret;\n}\nexports.get_positive = get_positive;\n",
  "    var p = [];\n    for(var i = 0; i < l.length; i++){\n        if (l[i] > 0)\
    \ p.push(l[i]);\n    }\n    return p;\n}", "    var positive = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        if(l[i] >= 0)\n            positive.push(l[i]);\n\
    \    }\n    return positive;\n}\n", "  var out = [];\n  for(var i = 0; i < l.length;\
    \ i++){\n    if(l[i] > 0){\n      out.push(l[i])\n    }\n  }\n  return out;\n\
    }\n", "    var pos = [];\n    for(var i=0, n=l.length; i<n; i++){\n        if(l[i]>0){\n\
    \            pos.push(l[i]);\n        }\n    }\n    return pos;\n}\n", "    return\
    \ l.filter(function(n){\n        return n >= 0;\n    });\n}\n", "\tl = l.slice(0);\
    \ \n\tfor(var i = 0, j = l.length-1; i < j; i++, j--){ \n\t\tl[i] = l[i]<0 ? l[i]\
    \ : l[i]>0 ? l[i]*-1 : l[i];\n\t}\n\treturn l;\n}\n", "    return l.filter(function(x){return\
    \ typeof x === 'number' && x > 0});\n}\n", "  return l.filter(function(x) { return\
    \ x >= 0; });\n}\n", "  l=l.filter(Number);\n  l=l.filter(function(n){return n>0});\n\
    \  return l;\n}\n", "    return l.filter(function(e){\n        return e > 0;\n\
    \    });\n}\n", "\tvar newL = new Array();\n\tfor (var i = 0, len = l.length;\
    \ i < len; i++){\n\t\tvar val = l[i];\n\t\tif (val > 0){\n\t\t\tnewL.push(val);\n\
    \t\t}\n\t}\n\treturn newL;\n}", "\tvar n = l.length;\n\tfor (var i = 0; i < n;\
    \ i++){\n\t\tif (l[i] > 0){\n\t\t\tl.splice(i--, 1);\n\t\t}\n\t}\n\treturn l;\n\
    }\n", "    var positive = [],\n        positiveLength = 0;\n    for(var i = 0,\
    \ length = l.length; i < length; i++){\n        if(l[i] > 0){\n            positive.push(l[i]);\n\
    \            positiveLength += 1;\n        }\n    }\n    return positive;\n}\n",
  "\treturn filter(l, function(x){ return x > 0; });\n}\n", "    return filter(positive,\
    \ l);\n}", "    var arr = [];\n    for(var i=l.length-1;i>=0;i--){\n        if(l[i]>0){\n\
    \            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\n", "\treturn\
    \ l.filter(function(x){return x > 0;});\n}", "    l = l.filter(isNumeric);\n \
    \   for(var i = 0; i < l.length; i++){\n        if(l[i] > 0)\n            return\
    \ l[i];\n    }\n    return l.length\n}\n", "    var a = [];\n    for(var i=0,len=l.length;i<len;i++)\n\
    \        if(l[i] >= 0) a.push(l[i]);\n    return a;\n}\n", "\tl=l.filter(function\
    \ (n){ return typeof n === 'number'; }); //Filter out all non-number values.\n\
    \treturn l.filter(function (n){return n>0; });\n}\n", "  var p = [];\n  var p1\
    \ = [];\n  for(var i=0; i<l.length; i++){\n    if(l[i] > 0){\n      p.push(l[i]);\n\
    \    }\n  }\n  for(var j=0; j<p.length; j++){\n    if(j%2 == 0){\n      p1.push(p[j]);\n\
    \    }\n  }\n  return p1;\n}\n", "\tfor(var i = 0, max = 0, len = l.length; i\
    \ < len; i++){\n\t\tmax = Math.max(max, l[i]);\n\t}\n\treturn l;\n}\n", "    return\
    \ l.filter(function(x){ return x >= 0; });\n}\n", "\tlet positives = []\n\tfor\
    \ (let i of l) {\n\t\tif (i > 0) positives.push(i)\n\t}\n\treturn positives\n}",
  "    let positive = [];\n    for (let i = 0; i < l.length; i++){\n        if (l[i]\
    \ > 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n\
    }\n", "    var positive = [];\n    var i = 0;\n    for(i; i < l.length; i++){\n\
    \        if(l[i] > 0){\n            positive.push(l[i]);\n        }\n    }\n \
    \   return positive;\n}\n", "    let pos_vals = [];\n    for (let i of l)\n  \
    \  if (i >= 0)\n        pos_vals.push(i);\n    return pos_vals;\n}\n", "  var\
    \ i, ret = [];\n  for (i = 0; i < l.length; i++) {\n    if (l[i] > 0) ret.push(l[i]);\n\
    \  }\n  return ret;\n}\n", "\tvar a = 0, i; for(i = 0; i < l.length; i++){\n\t\
    \tif(l[i] > 0) a++; else break;\n\t}\n\treturn l.slice(i).concat(a.concat(get_positive(l.slice(i\
    \ + 1))));\n}\n", "\treturn l.filter(x => x > 0);\n}\n", "    let new_l = []\n\
    \    for(let i=0;i<l.length;i++){\n        if(l[i] > 0){\n            new_l.push(l[i])\n\
    \        }\n    }\n    return new_l\n}\n", "    return l.filter(function (n) {\
    \ return n > 0; });\n}\n", "    return filter(function(x){ return x > 0; }, l);\n\
    }\n", "  var i=0, l1=l.length;\n  while(i<l1){\n    if(l[i]>0){\n      l[i]=1;\n\
    \      i++;\n    } else {\n      l[i]=0;\n    }\n  }\n  return l;\n}", "  return\
    \ l.filter(function(v){\n    return v>0;\n  });\n}\n", "  return filter(a, function(x){\
    \ return x > 0; });\n}", "  return l.filter(function(n){\n    return n>0;\n  });\n\
    }\n", "    return l.filter(function(e){\n        return e > 0;\n    });\n}", "\t\
    var res = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(l[i] > 0){\n\t\t\t\
    res.push(l[i]);\n\t\t}\n\t}\n\treturn res;\n}\n", "    var tmp = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        if (l[i] > 0) tmp.push(l[i]);\n    }\n \
    \   return tmp;\n}\n", "    if(l.length < 1) return l;\n    var positive = [];\n\
    \    for(var i=0;i<l.length;i++){\n        if(l[i] > 0) positive.push(l[i]);\n\
    \    }\n    return positive;\n}\n", "    var positive = [];\n    for(var i=l.length-1;i>=0;i--){\n\
    \        if(l[i] > 0) positive.push(l[i]);\n    }\n    return positive;\n}\n",
  "    var ln = l.length;\n    var i;\n    var positive = [];\n    for(i=0; i<ln;\
    \ i++){\n        if(l[i]>0) positive.push(l[i]);\n    }\n    return positive;\n\
    }\n", "  return l.filter(function(n){\n    return n > 0;\n  });\n}", "    let\
    \ res = []\n    for(let i = 0; i < l.length; i++){\n        if(l[i] > 0){\n  \
    \          res.push(l[i])\n        }\n    }\n    return res\n}\n", "    l = l\
    \ || [];\n    for(var i=0, len = l.length; i < len; i++){\n        if(l[i] >=\
    \ 0) l[i] = l[i] + '';\n    }\n    return l;\n}\n", "  let n = [];\n  for(let\
    \ i of l){\n    if (i>0) n.push(i);\n  }\n  return n;\n}\n", "  var l2 = [];\n\
    \  for(var i=0;i<l.length;i++){\n    if(l[i]>0)\n      l2.push(l[i]);\n  }\n \
    \ return l2;\n}\n", "\treturn l.filter(function(i){\n\t\treturn i>=0\n\t})\n}\n",
  "\tvar r = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(l[i] > 0){\n\t\t\t\
    r.push(l[i]);\n\t\t}\n\t}\n\treturn r;\n}", "  var a=[];\n  for(var i=0;i<l.length;i++){\n\
    \    if(l[i]>0){\n      a.push(l[i]);\n    }\n  }\n  return a;\n}\n", "    var\
    \ positives = [];\n    l.forEach(function(num){\n        if (num > 0) positives.push(num);\n\
    \    });\n    return positives;\n}\n", "    var rtn = [];\n    for(var i=0;i<l.length;i++){\n\
    \        if(l[i]>=0) rtn.push(l[i]);\n    }\n    return rtn;\n}\n", "  var arr\
    \ = [];\n  for(var i=0;i<l.length;i++){\n    if(l[i]>0){\n      arr.push(l[i]);\n\
    \    }\n  }\n  return arr;\n}\n", "    return l.filter(function(num){\n      \
    \  return num>0\n    })\n}\n", "\tfor(var i=0,_len_1=l.length;i<_len_1;i++){\n\
    \t\tif(l[i]>0){\n\t\t\tl.splice(i, 1)\n\t\t\ti--\n\t\t}\n\t}\n\treturn l\n}",
  "    return l.filter(function(x){\n        return x > 0;\n    });\n}\n", "    var\
    \ arr = [];\n    for(var i=0, len=l.length; i<len; i++){\n        if(l[i] > 0){\n\
    \            arr.push(l[i]);\n        }\n    }\n    return arr;\n}", "    return\
    \ l.filter(function (x){\n        return x > 0;\n    });\n}", "\treturn l.filter(function(v){\n\
    \t\treturn v>0;\n\t});\n}\n", "    var ret = [], i;\n    for(i in l){\n      \
    \  if(l[i] > 0){\n            ret.push(l[i]);\n        }\n    }\n    return ret;\n\
    }\n", "  var positive = [];\n  for(var i = 0, len = l.length; i < len; i++){\n\
    \    if(l[i] > 0){\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n\
    }\n", "  var x = []\n  for(var i = 0, len = l.length; i < len; i++){\n    if(l[i]\
    \ > 0) x.push(l[i])\n  }\n  return x\n}\n", "    return l.filter(function(x){\n\
    \        return x > 0;\n    });\n}\n", "    return filter(l, function(x){ return\
    \ x >= 0; });\n}\nexports.get_positive = get_positive;\n", "    var ret = [];\n\
    \    for (var i=l.length-1;i>=0;i--){\n        if (l[i] >=0){\n            ret.push(l[i]);\n\
    \        }\n    }\n    return ret;\n}", "    var out = [];\n    for(var i = 0;\
    \ i < l.length; i++){\n        if(l[i] > 0){\n            out.push(l[i]);\n  \
    \      }\n    }\n    return out;\n}", "    return l.filter(function(item){\n \
    \       return item >= 0;\n    });\n}\n", "    let positive = [];\n    for(let\
    \ i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "  var positive = [];\n  for(var\
    \ i = 0; i < l.length; i++){\n    if(l[i] > 0){\n      positive.push(l[i]);\n\
    \    }\n  }\n  return positive;\n}\n", "\tl=l.slice(0);\n\tfor(var i=l.length-1;\
    \ i>=0; i--){\n\t\tif(l[i]<0){\n\t\t\tl.splice(i,1);\n\t\t}\n\t}\n\treturn l;\n\
    }\n", "    var i, res = [];\n    for (i = 0; i < l.length; i++){\n        if (l[i]\
    \ >= 0)\n            res.push(l[i]);\n    }\n    return res;\n}\n", "    var res\
    \ = [];\n    for(var i=l.length-1; i>=0; i--){\n        if(l[i] > 0){\n      \
    \      res.push(l[i]);\n        }\n    }\n    return res;\n}\n", "    var newL\
    \ = [];\n    for(var i=0, len=l.length; i < len; i++){\n        if(l[i] > 0){\n\
    \            newL.push(l[i]);\n        }\n    }\n    return newL;\n}", "  var\
    \ n = [];\n  for(var i=0; i<l.length; i++){\n    if(l[i] > 0){\n      n.push(l[i]);\n\
    \    }\n  }\n  return n;\n}\n", "  return l.filter(function (x){\n    return x\
    \ > 0;\n  });\n}\n", "    var newArray = [];\n    for(var i =0; i<l.length; i++){\n\
    \        if(l[i]>=0) newArray.push(l[i]);\n    }\n    return newArray;\n}\n",
  "  return l.filter(function(i){return i>=0});\n}", "    var arr = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        if(l[i] > 0) arr.push(l[i]);\n    }\n  \
    \  return arr;\n}\n", "  return l.filter(function(n){ return n > 0; });\n}\n",
  "    return l.filter(function(x){\n        return x > 0;\n    });\n}\n", "  l =\
    \ flatten(l);\n  var p = [];\n  for(var i=l.length-1; i>=0; i--){\n    var num\
    \ = l[i];\n    if(num >= 0){\n      p.push(num);\n    }\n  }\n  return p;\n}\n\
    module.exports = get_positive;\n\n},{\"./flatten\":258}],264:[function(require,module,exports){",
  "  return l.reduce(function(p,c){\n    return c + p;\n  }, 0);\n}\n", "  var a =\
    \ [];\n  for(var i = 0; i < l.length; i++){\n    if(l[i] >= 0){\n      a.push(l[i]);\n\
    \    }\n  }\n  return a;\n}\n", "    var p = []; \n    for(var i = 0; i < l.length;\
    \ i++){\n        if (l[i] > 0){\n            p.push(l[i]);\n        }\n    }\n\
    \    return p;\n}\n", "    return l.filter(function(a){\n        return a>0;\n\
    \    });\n}\n", "  var a = [];\n  for (var i=0; i<l.length; i++) if (l[i] >= 0)\
    \ a.push(l[i]);\n  return a;\n}", "\treturn l.filter((el) => el > 0);\n}\n", " \
    \ var _l = l.sort(function(a,b){return a-b;});\n  for(var i=0;i<l.length-1;i++){\n\
    \    if(_l[i]<0){\n      return [_l[i]];\n    }\n  }\n  return _l;\n}\n", "  \
    \  l = l || [];\n    var result = [];\n    for(var i=0; i< l.length; i++){\n \
    \       if(l[i] > 0){\n            result.push(l[i]);\n        }\n    }\n    return\
    \ result;\n}", "    var n = l.length, l = l.filter(function(x){ return x>0; });\n\
    \    if (n.length != l.length)\n        throw \"All numbers in the array must\
    \ be positive.\";\n    return l;\n}\n", "    var ret = [];\n    for(var i = l.length\
    \ - 1; i >= 0; i--){\n        if(l[i] > 0) ret.push(l[i]);\n    }\n    return\
    \ ret;\n}\n", "    var p = l[0];\n    for (var i = 1; i < l.length; ++i){\n  \
    \      var a = l[i];\n        if (a>0){\n            p = a; \n        }\n    }\n\
    \    return p;\n}\n", "  var i, max = -Infinity;\n  for(i = 0; i < l.length; i++){\n\
    \    if(l[i] > max){ max = l[i]; }\n  }\n  return l.filter(function(n){return\
    \ n > 0;});\n}\n", "  return l.filter(function (x){\n    return x >= 0;\n  });\n\
    }\n", "\tvar arr = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(l[i] > 0){\n\
    \t\t\tarr.push(l[i]);\n\t\t}\n\t}\n\treturn arr;\n}\n", "    return l.filter(function(x){return\
    \ x>0});\n}\n", "\tvar a = l.slice(), i, l = a.length;\n\tfor(i=0;i<l;i++){\n\t\
    \tif(a[i]>0){\n\t\t\ta.splice(i,1);\n\t\t\tl--;\n\t\t}\n\t}\n\treturn a;\n}\n",
  "    let ret = []\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= 0){\n\
    \            ret.push(l[i])\n        }\n    }\n    return ret;\n}\n", "  var positive\
    \ = [];\n  \n  for(var i = 0, len = l.length; i < len; i++){\n    if(l[i] > 0)\
    \ positive.push(l[i]);\n  }\n  \n  return positive;\n}\n", "    l = l.reverse();\n\
    \    for(var i=0, l=l.length; i<l; i++){\n        if(l[i] > 0)\n            l.splice(i--,\
    \ 1);\n    }\n    return l;\n}\n", "\treturn l.filter(x => x > 0);\n}\n", "  return\
    \ filter(function(x){return x>0}, l);\n}\n", "  return l.filter(function(x){\n\
    \    return (x > 0);\n  });\n}\n", "\tvar a = [];\n\tfor(var i = 0; i < l.length;\
    \ i++){\n\t\tif (l[i] > 0) a.push(l[i]);\n\t}\n\treturn a;\n}\n", "  var arr =\
    \ [];\n  for(var i = 0, len = l.length; i < len; ++i){\n    if(l[i] > 0){\n  \
    \    arr.push(l[i]);\n    }\n  }\n  return arr;\n}\n", "    return filter([0,\
    \ 1], l);\n}\n", "  var positive = [];\n  for(var i = 0; i < l.length; i++){\n\
    \    if(l[i] > 0){\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n\
    }", "\tvar positive = [];\n\tfor(var i=0, len = l.length; i<len; i++){\n\t\tif(l[i]\
    \ > 0){\n\t\t\tpositive.push(l[i]);\n\t\t}\n\t}\n\treturn positive;\n}\n", " \
    \   var a = [];\n    for(var i =0; i < l.length; i++){\n        if(l[i] > 0){\n\
    \            a.push(l[i])\n        }\n    }\n    return a\n}\n", "\tvar i;\n\t\
    for(i = 0; i < l.length; i++){\n\t\tif(l[i] > 0) return l;\n\t}\n\treturn l;\n\
    }\n", "\tvar i = l.length;\n\twhile (i-- && l[i] < 0);\n\treturn l.slice(0, i);\n\
    }", "  return l.filter(function(x){ return x > 0; });\n}\n", "    var result =\
    \ [];\n    l.forEach(function (val) {\n        if (val > 0){\n            result.push(val);\n\
    \        }\n    });\n    return result;\n}\n", "    var a = l.slice(), out = [];\n\
    \    for(var i=0,l=a.length; i < l; i++){\n        if(a[i] > 0){\n           \
    \ out.push(a[i]);\n        }\n    }\n    return out;\n}\n", "    var positive\
    \ = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] >= 0){\n    \
    \        positive.push(l[i]);\n        }\n    }\n    return positive;\n}\n", " \
    \   var a = l.slice();\n    a.sort(function(a, b){\n        var diff = b - a;\n\
    \        if(diff){\n            return diff;\n        }else{\n            return\
    \ 0;\n        }\n    });\n    return a;\n}\n", "\tvar pos = new Array();\n\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tif(l[i] > 0){\n\t\t\tpos.push(l[i]);\n\t\t}\n\
    \t}\n\treturn pos;\n}\n", "    return l.filter(function(n){\n        return n\
    \ > 0;\n    });\n}\n", "\tvar rv = [], i = -1;\n\twhile (i < l.length){\n\t\t\
    if (l[i] > 0) rv.push(l[i++]);\n\t\telse break;\n\t}\n\treturn rv;\n}\n", "\t\
    var newArray = [];\n\tfor(var i = 0;i<l.length;i++){\n\t\tif(l[i] > 0){\n\t\t\t\
    newArray.push(l[i]);\n\t\t}\n\t}\n\treturn newArray;\n}\n", "    var p = [];\n\
    \    for(var i=l.length-1;i>=0;i--){\n        if(l[i]>0){\n            p.push(l[i]);\n\
    \        }\n    }\n    return p;\n}", "    return l.filter(v=>v>0);\n}\n", " \
    \ var i, ret = [];\n  for(i = 0; i < l.length; i++){\n    if(l[i] >= 0) ret.push(l[i]);\n\
    \  }\n  return ret;\n}\n", "    l = l || [];\n    for(var i = 0; i < l.length;\
    \ i++){\n        if (l[i] > 0){\n            l[i] = l[i]\n        }\n    }\n \
    \   return l;\n}\n", "    var r = [];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > 0){\n            r.push(l[i]);\n        }\n    }\n    return\
    \ r;\n}\n", "\tvar l = l || [];\n\tvar new_l = [], new_l;\n\tfor (var i = 0, len\
    \ = l.length; i < len; i++) {\n\t\tif (l[i] <= 0) {\n\t\t\tnew_l.push(0);\n\t\t\
    } else {\n\t\t\tnew_l.push(l[i]);\n\t\t}\n\t}\n\treturn new_l;\n}", "    var ret\
    \ = [], n = 0, r;\n    for(var i = 0; i<l.length; i++){\n        r = l[i];\n \
    \       if(r >= 0){\n            ret[n++] = r;\n        }\n    }\n    return ret;\n\
    }\n", "    return l.filter( function(e){ return e>0; } );\n}", "\tvar rtn = [];\n\
    \tvar i, n;\n\tfor(i = 0, n = l.length; i < n; i++){\n\t\tif((l[i] < 0) || (l[i]\
    \ == 0)){\n\t\t\trtn.push(0);\n\t\t\tcontinue;\n\t\t}\n\t\trtn.push(l[i]);\n\t\
    }\n\treturn rtn;\n}\n", "    var positive = [];\n    for(var i = 0; i < l.length;\
    \ i++){\n        if(l[i] > 0){\n            positive.push(l[i]);\n        }\n\
    \    }\n    return positive;\n}\n", "    return l.filter(function(v){\n      \
    \  return v >=0;\n    });\n}\n</code>\n<|/ a |>\n<| c |>\nThis works great and\
    \ I learned a lot. I only see one problem. How would you modify this so that it\
    \ returns an array of negative numbers only?\n<|/ c |>\n<| c |>\nDo you mean the\
    \ negative numbers in the array? If so, see my updated answer.\n<|/ c |>\n<| c\
    \ |>\nI want the negative numbers in the array, but with the negative sign. So\
    \ that if I had -5, -4, -3, -2, -1, 0, 10, 20, 30, 40, 50. I would want 5, 10,\
    \ 20, 30, 40, 50.\n<|/ c |>\n<| c |>\nI see your updated answer. I was trying\
    \ to solve it like that before but I was running into some issues. Thank you for\
    \ your help. Now I'm just running into issues with getting the positive numbers\
    \ in the array.\n<|/ c |>\n<| c |>\nI posted a follow up question here: https://stackoverflow.com/questions/48312580/array-function-that-returns-only-negative-numbers\n\
    <|/ c |>\n<| a dscore=0 |>\nI assume that the input array will always be sorted.\n\
    <code>\nlet input = [-10, 2, -3, 4, -5, 6];\n\nlet negNumbers = new Array();\n\
    \nlet min = input[0]\nfor (let i = 1; i < input.length; i++){\n    if (input[i]\
    \ < min) {\n        min = input[i]\n        negNumbers.push(min)\n    } else if\
    \ (input[i] > min) {\n        negNumbers.push(input[i])\n    }\n}\n", "    return\
    \ l.filter(function (v){\n        return v > 0;\n    });\n}\n", "\tvar l2 = [];\n\
    \tfor (var i=l.length-1;i>=0;i--){\n\t\tif (l[i] > 0){\n\t\t\tl2.push(l[i]);\n\
    \t\t}\n\t}\n\treturn l2;\n}", "    return l.filter(function(x){return x>=0;});\n\
    }\n", "    l = Array.isArray(l) ? l : [];\n    for(var i=0, j=l.length; i<j; i++){\n\
    \        if(l[i] > 0) l[i] = l[i] + '';\n    }\n    return l.filter(function(n){return\
    \ n !== '' && n != null;});\n}\n", "    var i;\n    for(i = 0; i < l.length; i++){\n\
    \        if(l[i] >= 0){\n            return l;\n        }\n    }\n}\n", "  if(typeof(l)\
    \ == \"undefined\"){\n    return [];\n  }\n\n  var positive = [];\n  for(var i\
    \ in l){\n    if(l[i] > 0){\n      positive.push(l[i]);\n    }\n  }\n  return\
    \ positive;\n}\n", "  return l.filter(function(n){\n    return n > 0;\n  });\n\
    }\n", "    var positive = [];\n    l.forEach(function(x){\n        if (x>0){\n\
    \            positive.push(x);\n        }\n    });\n    return positive;\n}\n\
    </code>\nAs for the second function, here is a function that takes an array of\
    \ n and returns a new array that contains the squares of the elements in the original\
    \ array:\n<code>", "    return l.filter(function(x){\n        return x > 0;\n\
    \    });\n}\n", "    var result = [];\n    for(var i = 0; i < l.length; i++){\n\
    \        if (l[i] > 0){\n            result.push(l[i]);\n        }\n    }\n  \
    \  return result;\n}\n", "    return l.filter((num) => {\n        return num >\
    \ 0;\n    });\n}\n", "    return l.filter(function(x){ return x>0; });\n}\n",
  "    var rv = [];\n    for (var i=0;i<l.length;i++){\n        if (l[i] >= 0) rv.push(l[i]);\n\
    \    }\n    return rv;\n}\n", "  l.sort(function(a,b){return a-b});\n  var p =\
    \ l[0];\n  for(var i=1,l1=l.length;i<l1;i++){\n    p = p || l[i];\n    if(p >\
    \ 0) break;\n  }\n  return l.slice(0,i);\n}\n", "  return l.filter( function(i){\
    \ return (i >= 0); } );\n}\n", "\tvar ret = [];\n\t$.each(l, function(i, v){\n\
    \t\tif (v >= 0) ret.push(v);\n\t});\n\treturn ret;\n}\n", "  var o = [];\n  for(var\
    \ i = 0; i != l.length; ++i) o[i] = l[i] > 0 ? l[i] : 0;\n  return o;\n}\n", " \
    \   var newArr = new Array();\n    for(var i in l){\n        if(l[i] > 0){\n \
    \           newArr.push(l[i]);\n        }\n    }\n    return newArr;\n}\n", " \
    \   return l.filter(function(x){return x>=0});\n}\n", "    return l.filter(function(i){return\
    \ i>0;});\n}\n", "  var _ret = (function(){\n    var _arr = [];\n    for(var _i\
    \ = 0; _i < l.length; _i++){\n      if(l[_i] > 0){\n        _arr.push(l[_i]);\n\
    \      }\n    }\n    return _arr;\n  })();\n  return _ret.filter(Boolean);\n}\n\
    var get_string = (function(){\n  var _arr = [];\n  var _join = function(arr){\n\
    \    return arr.join(\"\");\n  };\n  var _do = (function(arr){\n    _arr.push(_join(arr));\n\
    \    _arr.pop();\n    return _arr.join(\" \");\n  })(_arr);\n  var _ret = (function(){\n\
    \    var _l = arguments.length;\n    var _args = new Array(_l);\n    for(var _i\
    \ = 0; _i < _l; _i++){\n      _args[_i] = arguments[_i];\n    }\n    var _joined\
    \ = _args.reduce(_do, \"\");\n    _arr.push(_joined);\n    return _arr;\n  })();\n\
    \  return _ret.filter(Boolean);\n});", "    var a = [];\n    var l = l.length;\
    \ //Loop through array.\n    for(var i in l){\n        if(l[i] > 0){\n       \
    \     a.push(l[i]);\n        }\n    }\n    return a;\n}\n", "  return l.filter(function(a){return\
    \ a>0});\n}\n", "    var positive = [];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > 0){\n            positive.push(l[i]);\n        }\n    }\n \
    \   return positive;\n}\n", "    var p = [];\n    for(var i = 0, length = l.length;\
    \ i < length; i++){\n        if(l[i] > 0) p.push(l[i]);\n    }\n    return p;\n\
    }\n", "  return l.filter(function(x){ return x > 0; });\n}\n", "  let positive\
    \ = []\n  for(let i = 0; i < l.length; i++){\n    if (l[i] > 0){\n      positive.push(l[i])\n\
    \    }\n  }\n  return positive\n}\n", "    var res = [];\n    for(var i in l){\n\
    \        if(l[i] > 0){\n            res.push(l[i]);\n        }\n    }\n    return\
    \ res;\n}\n", "    var newL = [];\n    l.forEach(function(number){\n        var\
    \ absVal = Math.abs(number);\n        if(absVal > 0){\n            newL.push(number);\n\
    \        }\n    });\n    return newL;\n}\n", "    var n = [];\n    for(var i =\
    \ 0, l = l.length; i < l; i++){\n        if(l[i] > 0){\n            n.push(l[i]);\n\
    \        }\n    }\n    return n;\n}", "    var arr = [];\n    for(var i = 0, len\
    \ = l.length; i < len; i++){\n        if(l[i] > 0){\n            arr.push(l[i]);\n\
    \        }\n    }\n    return arr;\n}\n", "    var positive = [];\n    for(var\
    \ i=0; i<l.length; i++){\n        if(l[i]>0){\n            positive.push(l[i]);\n\
    \        }\n    }\n    return positive;\n}\n", "\tfor(let i = 0; i < l.length;\
    \ i++){\n\t\tif((l[i] > 0) || (l[i] < 0)){\n\t\t\treturn l[i];\n\t\t}\n\t}\n\t\
    return null;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
