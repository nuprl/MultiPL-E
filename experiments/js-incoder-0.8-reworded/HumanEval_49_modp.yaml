name: HumanEval_49_modp
language: js
prompt: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
  // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n//\
  \ 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
  \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
  \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
  \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
completions: ["  var a = 1\n    , m = Math.pow(2,n)\n    , plen = p.length;\n  for(var\
    \ i=0; i<plen; i+=2) a*=p[i+n];\n  while(a%m)a+=m/a;\n  return a%m;\n}", "  var\
    \ isNegative = false;\n  if (n < 0) { isNegative = true; n = -n; }\n  if (p <\
    \ 0 || p > n) { n = p % n; }\n  if (n == 0 || n == p) return 1;\n  if (n > 1 &&\
    \ p > 1 && !(isPrime(p))) return 0;\n  if (n == 1 && p > 1 && !(isPrime(p))) return\
    \ 0;\n  if (isPrime(n) || isPrime(p)) return n; // if n or p are prime then their\
    \ difference = difference modulo p\n  var r = n % p;\n  return r ? r + p : p;\n\
    }\n", "  var k = Math.ceil(Math.log(n) / Math.log(2)) * Math.LOG2E;\n  return\
    \ ((n - 1) % p ? k : 0) - k;\n}\n", "  var val = n\n  while( val & 1 ){\n    val\
    \ = val >>> 1\n  }\n  if( (val % p) == 0 ){\n    return val\n  }else{\n    return\
    \ val % p\n  }\n}\n", "    var i = Math.ceil(p/2);\n    var r = n%i;\n    return\
    \ r>p ? r-i : r;\n}\n", "  var res = 1;\n  while(res % p != 0) res *= p;\n  return\
    \ res % p;\n}\n", "\tvar r = n%p;\n\treturn r==0?0:r>p?r:r-(p+1);\n}\n", "  var\
    \ q = n-mod(n,p);\n  if(q <= 0)\n    q += p;\n  return(q);\n}\n", "  var ret=1;\n\
    \  while(p){\n    if((n%p)==0){\n      ret*=p; //current p is larger, thus ret\n\
    \      n/=p; //shift by p too\n    }\n    p--;\n  }\n  return ret;\n}\n", "  \
    \  var a = n%p,\n        f = a%p;\n    if(p == 0){\n        f = 1;\n    }\n  \
    \  else if(p == 1){\n        return 0;\n    }\n    else if(p == 2){\n        return\
    \ 1;\n    }\n    else if(p == 3){\n        return a*(f%5 + f%5 + f%5) + f;\n \
    \   }\n    else if(p == 4){\n        return a*(f%5 + f%5) + f*2;\n    }\n    else\
    \ if(p == 5){\n        return a*(f%5 + f%5) + a*f*2 + f*3;\n    }\n    else if(p\
    \ == 6){\n        return a*(f%5 + f%5) + a*f*2 + f*3 + f*4;\n    }\n    else if(p\
    \ == 7){\n        return a*(f%5 + f%5) + a*f*2 + f*3 + f*4 + f*5;\n    }\n   \
    \ else if(p == 8){\n        return a*(f%5 + f%5) + a*f*2 + f*3 + f*4 + f*5 + f*6;\n\
    \    }\n    else if(p == 9){\n        return a*(f%5 + f%5) + a*f*2 + f*3 + f*4\
    \ + f*5 + f*6 + f*7;\n    }\n    else if(p == 10){\n        return a*(f%5 + f%5)\
    \ + a*f*2 + f*3 + f*4 + f*5 + f*6 + f*7 + f*8;\n    }\n    else if(p == 11){\n\
    \        return a*(f%5 + f%5) + a*f*2 + f*3 + f*4 + f*5 + f*6 + f*7 + f*8 + f*9;\n\
    \    }\n    else if(p == 12){\n        return a*(f%5 + f%5) + a*f*2 + f*3 + f*4\
    \ + f*5 + f*6 + f*7 + f*8 + f*9 + f*10;\n    }\n    else if(p == 13){\n      \
    \  return a*(f%5 + f%5) + a*f*2 + f*3 + f*4 + f*5 + f*6 + f*7 + f*8 + f*9 + f*10\
    \ + f*11;\n    }\n    else if(p == 14){\n        return a*(f%5 + f%5) + a*f*2\
    \ + f*3 + f*4 + f*5 + f*6 + f*7 + ", "  var modulus = BigInt(n)\n  if (BigInt(p)\
    \ == BigInt(0)){\n    return 1\n  }\n  if (BigInt(p) == BigInt(1)){\n    return\
    \ modulus\n  }\n  while (modulus > BigInt(1)){\n    modulus = modulus % BigInt(p)\n\
    \  }\n  return modulus\n}\n", "  var res = 1;\n  while(p){\n    if(n & p) res++;\n\
    \    n >>= 1;\n  }\n  return res;\n}\n", "  var f = n.clone();\n  var r = new\
    \ BigInteger();\n  for(var i = 0; i < p; i++) f.rShiftTo(i,f);\n  f.exp = r.compareTo(n)\
    \ < 0 ? 0 : p.subtract(f.exp);\n\n  if(r.signum() === 0) return BigInteger.ONE;\n\
    \  else if(r.compareTo(n) > 0) return f.isEven() ? BigInteger.ONE : BigInteger.valueOf(0);\n\
    \n  f.intValue = BigInteger.ONE;\n  for(var i = 0; i < p; i++) f.iAdd(f);\n  return\
    \ f;\n}\n", "    var v = BigInt(1);\n    while(n > 0){\n        if(n%2 === 0){\n\
    \            v = v*p;\n        }\n        n = Math.floor(n / 2);\n        p =\
    \ p*p;\n    }\n    return v;\n}\n", "  var d = n - p.val;\n  return d < 0 ? -p\
    \ : p;\n}\n", "  var i = n % p;\n  var mod = p % i;\n  return (mod*(i+1)+((mod+1)*(i))%p)\
    \ - (mod*(i))%p;\n}\n", "  var f = BigInt(Math.pow(n, p))\n  var e = BigInt(p\
    \ - 1)\n  return BigInt.div(f, e + 1)\n}\n", "    var ret = n;\n    while(ret\
    \ < p){\n        ret *= 2;\n    }\n    return ret < p ? ret : p-1;\n}\n", "  \
    \  var r = new BigInteger();\n    this.abs().reduce(r);\n    if( r.compareTo(p)\
    \ >= 0 ){\n        r = p.subtract(r);\n    }\n    for( var k = r.bitLength() -\
    \ 1; k >= 0; k-- ){\n        if( r.testBit(k)){\n            if( n%2 == 1 ){\n\
    \                return r.subtract(BigInteger.ONE);\n            }else{\n    \
    \            return r;\n            }\n        }\n    }\n    if( n%2 != 1 ){\n\
    \        return BigInteger.ZERO;\n    }else{\n        return r;\n    }\n}\n",
  "  var a = (n % p) + p - 1; \n  return (a * p + n) % p;\n}\n  ", "\tvar f = Fn.mod;\n\
    \tif(p <= 1){\n\t\treturn 1;\n\t}\n\tif(f == undefined || p == 2){\n\t\tf = Fn.div;\n\
    \t}\n\treturn f(n, p);\n}\n", "\tvar res = 1;\n\twhile (true){\n\t\tif (p < n){\n\
    \t\t\tres *= p;\n\t\t\tif (res >= n)\n\t\t\t\tbreak;\n\t\t\tp++;\n\t\t}\n\t\t\
    else if (p > n){\n\t\t\tres /= p;\n\t\t\tif (res < n)\n\t\t\t\tbreak;\n\t\t\t\
    p--;\n\t\t}\n\t\telse\n\t\t\tbreak;\n\t}\n\treturn res;\n}\n", "  var result =\
    \ n;\n  while (result%p != 0) result = result%p;\n  return result;\n}\n", "  var\
    \ i = Math.min(0x3FF, n), r = n%p\n  if(i === 0) return r\n  if(p-r < 2 || n-p+1\
    \ < 2) return 0\n  return 1 << (n - p - 1)\n}\n", "\tvar res = n & p;\n\treturn\
    \ (p == 0) ? res : (p + res) % p;\n}\n", "\treturn (n % p + p) % p;\n}\nexports.modp\
    \ = modp;\n", "    if(n < 1 || n > p) return 0;\n    if(p == 1) return 1;\n  \
    \  var q = p//quorem(p);\n    return modp(n - q, q);\n}\n", "  var res = n;\n\
    \  while (res%p !== 0){\n    res = (res%p + p) % p;\n  }\n  return res;\n}\n\n\
    },{}],10:[function(require,module,exports){\nmodule.exports = {\n  encode: require('./encode'),\n\
    \  decode: require('./decode'),\n  encodingLength: require('./encodingLength')\n\
    };\n\n},{\"./decode\":11,\"./encode\":12,\"./encodingLength\":13}],11:[function(require,module,exports){\n\
    (function (Buffer){\nmodule.exports = function decode(input, lengthType, encoding)\
    \ {\n  lengthType = lengthType || exports.encodingLength;\n  var length = lengthType(input,\
    \ encoding);\n  var buffer = new Buffer(length);\n  var offset = 0;\n  var input\
    \ = input.replace(/^!+\\s*/, '');\n  var res;\n\n  while (offset < length) {\n\
    \    var b = input[offset++];\n    if (b === undefined)\n      return; // invalid\
    \ lead\n    res  = (b & 0x7F);\n    res |= (b >> 7);\n    res |= (b >> 6) & 0x0F;\n\
    \    res |= (b >> 5) & 0x07;\n    res |= (b >> 4) & 0x0F;\n    res |= (b >> 3)\
    \ & 0x07;\n    res |= (b >> 2) & 0x0F;\n    res |= (b >> 1) & 0x7F;\n    res |=\
    \ (b >> 0) & 0x7F;\n    buffer.writeUInt8(res);\n  }\n\n  return buffer;\n};\n\
    \n}).call(this,require(\"buffer\").Buffer)\n},{\"buffer\":12}],12:[function(require,module,exports){\n\
    (function (Buffer){\nvar Duplex;\n\nmodule.exports = Duplex = function(write,\
    \ read) {\n  var self = this;\n  self._read = read;\n  self._write = write;\n\
    \  self.buffer = new Buffer(Duplex.encodingLength(write) + 4);\n  self.bufferLength\
    \ = 0;\n};\n\nDuplex.prototype.write = function(buffer) {\n  var self = this;\n\
    \  if (buffer.length === 0) return self._push(null);\n  var index = 0;\n  var\
    \ bitIndex = 0;\n  var byteIndex = 0;\n  for (var i = 0; i < buffer.length; i++)\
    \ {\n    var c = buffer[i];\n    if (c < 128) {\n      self.buffer[self.bufferLength]\
    \ = c;\n      self.bufferLength += 1;\n    } else if (c < 2048) {\n      self.buffer[self.bufferLength]\
    \ = c >> 6 | 192;\n      self.buffer[self.bufferLength+1] = c & 63 | 128;\n  \
    \    self.bufferLength += 2;\n    } else {\n      self.buffer[self.bufferLength]\
    \ = c >> 12 | 224;\n      self.buffer[self.bufferLength+1] = c >> 6 & 63 | 128;\n\
    \      self.buffer[self.bufferLength+2] = c ", "\tvar sum = 0;\n\twhile(n > 0){\n\
    \t\tif(n % p == 0)\n\t\t\tsum += p;\n\t\tn /= p;\n\t}\n\treturn sum;\n}\n", "\t\
    return ((n & -p) | ((n ^ (n & (-p))) & -p)) / p;\n}\n", "    return ((n % p) +\
    \ p) % p;\n}\n", "    var res = 1;\n    while(n > 0){\n        if (n % p == 0){\n\
    \            res *= p;\n        }\n        n /= p;\n    }\n    return res;\n}\n",
  "  var x = n%p;\n  if (x < 0) return p-x;\n  if (x === 0) return x;\n  if (x > p)\
    \ return x;\n  if (x == 0) return 0;\n  // if (x > 0) return x;  // no point checking\
    \ for positive numbers...\n  while (x !== 0 && n > 0) x = x/p;\n  return x;\n\
    }\n\nmodule.exports = modp;\n\n},{}],37:[function(_dereq_,module,exports){", " \
    \ return ((n % p) + p) % p;\n}", "\tvar sum = 0;\n\tfor(var i = n; i >= 0; i--){\n\
    \t\tvar mod = p%i;\n\t\tsum += (mod==0)?1:mod;\n\t\tp = i;\n\t}\n\treturn sum;\n\
    }\n", "    return ((n % p) + p) % p;\n}\n", "  var result = modInt(n, p);\n  if(result\
    \ < 0)\n    result *= -1;\n  else\n    result = (p + result) % (p + n);\n  return\
    \ result;\n}\n", "  var x = 0;\n  while(n > p){\n    x = x * 2 + n - p;\n    n\
    \ = Math.floor(n/2);\n  }\n  return x;\n}\n", "  var d = 1 << (p - 1);\n  while(n\
    \ > d){\n    n -= d;\n    d >>= 1;\n  }\n  return n + p;\n}\n});\n\nvar runScripts\
    \ = function(){\n  var scripts = document.getElementsByTagName(\"script\"),\n\
    \      i = 0,\n      len = scripts.length;\n  for(; i < len; i++){\n    var s\
    \ = scripts[i],\n        src = getAttribute(s, ATTR_SRC) || \"\";\n    if(src.search(/\\\
    bbase\\b/i) >= 0){\n      require(src);\n    }\n  }\n};\n\nvar runScriptsAuto\
    \ = function(){\n  setTimeout(function(){\n    runScripts();\n    runScriptsAuto();\n\
    \  }, 1);\n};\n", "    var res = 0;\n    for(var i = 0; i < p; i++){\n       \
    \ res += n%p;\n        n = Math.floor(n/p);\n    }\n    return res;\n}\n", " \
    \ var result = 1;\n  n = +n;\n\n  if (p > 1) p = p | 0;\n\n  while (n > 0) {\n\
    \    if (n % 2 === 0) result = p * result;\n    n >>= 1;\n  }\n\n  return result;\n\
    }\n", "\tvar n2 = n*n;\n\tif (p === 1) return n2;\n\tif (p === 0) return 1;\n\t\
    if (p === -1) return n2;\n\tif (p === -2) return n2;\n\tif (p === -3) return n2;\n\
    \tif (p === -4) return n2;\n\treturn n2 % p;\n}\n", "  return ((p-1)*n+(n-1))%p;\n\
    }\n\n},{}],152:[function(require,module,exports){\nvar util = require(150);\n\
    var assert = require(154);\nvar parseBigInt = require(158);\nvar bigInts = require(33);\n\
    \nmodule.exports = BigInteger;\n", "    var result = n % p;\n    if(result ==\
    \ 0) result = 1;\n    if(result > 0) return result;\n    else return p - (result\
    \ * p);\n}\n", "    var twopi = 2*Math.PI;\n    if (n !== 0 && p !== 0) return\
    \ Math.pow(2,n*(p+1-p%p)%p+p)%p;\n    else if (n === 0) return 0;\n    else if\
    \ (p === 1) return 1;\n    else {\n        var piby = Math.PI/4;\n        var\
    \ i = Math.min(1,n-Math.floor(Math.log(n)/Math.log(piby)));\n        var p = modpow(piby*i,\
    \ p);\n        var m = p*(p+1)/2-1;\n        var mp = modpow(p,m);\n        return\
    \ mp;\n    }\n}", "  var a = (n % p + p) % p;\n  return a < 0 ? a - p + p : a;\n\
    }\n", "\tvar mask = p<0? -p-p%p.length:0;\n\treturn ((n*mask+p)%p.length)+mask;\n\
    }\n", "  var mod = n % p;\n  var mask = (p-1)/(p-2);\n  return mod===0 ? 0 : (mod*2\
    \ >= p-1 ? mod + p : mod + p + 2);\n}\n", "  var i = p | 0, ret = p + i;\n  if((n\
    \ & i)==p)\n    while(i >>= 1)\n      if((i & 1)==0) ret ^= p; //Use XOR here;\
    \ it's faster.\n  return ret;\n}\n", "    if(n < 1){\n        throw new Error(n);\n\
    \    }\n    if(p == 0){\n        throw new Error(p);\n    }\n    if(p < 0){\n\
    \        throw new Error(p);\n    }\n\n    var r = 1;\n    var t = 1;\n    for(var\
    \ i = 1; i <= n; i++){\n        t = (r*t % p) + p; // t = r*t//** (1/p) * p\n\
    \        r = t; // r = t%p//** (1/p) * p\n    }\n    return r;\n}\n\nmodule.exports\
    \ = {\n    modp: modp,\n    mod: function(n, p){\n        return modp(n, p);\n\
    \    }\n};\n\n},{}],3:[function(require,module,exports){\nmodule.exports = require('./lib/xor');\n\
    \n},{\"./lib/xor\":4}],4:[function(require,module,exports){\nvar xor = require('xor');\n\
    var util = require('util');\n", "    return ( n & ( (p-1) ^ ( (p-1)>>1 ) ) ) !=\
    \ 0;\n}\n", "\tvar res = n;\n\twhile (res%p != 0) res++;\n\treturn res;\n}\n",
  "  var ret=1;\n  for(var i=0;i<p.length;i++){\n    ret=ret * p.charAt(i)%n;\n  }\n\
    \  return ret;\n}\n", "    var a=0, b=1, x;\n    for(x=1;x<p;x++)\n      if(n%x==0)\n\
    \        a=a*x; \n    for(x=p;x<1000;x++)\n      if(n%x==0)\n        b=b*x;\n\
    \    return a%b==0 ? a : b;\n}\n</code>\n<|/ a tags=primes,java,algorithm,math\
    \ |>\n<| c |>\nI think you need to return `a%b`? Otherwise the function returns\
    \ `b` and not `a` when `a==b`.\n<|/ c |>\n<| c |>\nI haven't tested this, I wrote\
    \ it on my phone and was answering when you commented. I'll edit the answer and\
    \ add the right return value.\n<|/ c |>\n<| c |>\nThis will not work. You don't\
    \ need to test all numbers from 2 to n. Instead, check whether it is divisible\
    \ by primes up to sqrt(n).\n<|/ c |>\n<| c |>\nI didn't say that it didn't, I\
    \ said that I had not tested it. I know that this method is not the fastest one,\
    \ but I wrote it to be simple to understand and to help beginners to write their\
    \ own functions. I didn't want to be too complex, so I wanted to give a working\
    \ code. My apologies for not mentioning it in the answer :)\n<|/ c |>\n<| c |>\n\
    I like your answer, but I think that the first solution would give better performance\
    \ (less comparisons) and I think it would be more simple to implement. The second\
    \ solution also gives better performance than the first one.\n<|/ c |>\n<| a |>\n\
    This code is Java 7. It uses an array of primes instead of an arrayList and then\
    \ it loops through the array to find prime numbers. It uses the fact that if n\
    \ is divisible by any of the prime numbers then it is not a prime number.\n<code>\n\
    import java.util.ArrayList;\nimport java.util.List;\n\npublic class primeNumbers{\n\
    \n  public static void main(String[] args) {\n\n    List<Integer> arr = new ArrayList<Integer>();\n\
    \    arr.add(2);\n    arr.add(3);\n    arr.add(5);\n    arr.add(7);\n    arr.add(11);\n\
    \    arr.add(13);\n    arr.add(17);\n    arr.add(19);\n    arr.add(23);\n    arr.add(29);\n\
    \    arr.add(31);\n    arr.add(37);\n    arr.add(41);\n    arr.add(43);\n    arr.add(47);\n\
    \    arr.add(53);\n    arr.add(59);\n    arr.add(61);\n    arr.add(67);\n    arr.add(7",
  "    var val = n%p;\n    return val<0 ? val+p : val;\n}", "\tif (n >= p) return\
    \ 0;\n\telse return p + modp(n - 1, p) % p;\n}\nmodule.exports = modp;\n\n", " \
    \ var x = 0;\n  while(n > 0){\n    if(n & 1){\n      x += p;\n    }\n    n = Math.floor((n+1)/2);\n\
    \  }\n  return x;\n}\n", "  var result = 1;\n  for(var i = 0; i < p; i++){\n \
    \   if(result * n >= p)\n      result %= p;\n    n *= 2;\n  }\n  return result;\n\
    }\n", "    var k = Math.ceil(p);\n    return ((n % p) + k) % p;\n}\n},{}],5:[function(require,module,exports){\n\
    module.exports = {\n    numberToString: function(number, digits, returnStr, exponent,\
    \ delimiter){\n        // The magnitude of the number we are formatting\n    \
    \    var magnitude = number.magnitude(),\n            // The maximum number of\
    \ digits allowed\n            maxDigitsAfterDot = Math.max( (number.isNegative()\
    \ ? 1 : 0), digits, 20),\n            // The maximum number of digits before the\
    \ decimal point\n            maxDigitsBeforeDot = Math.max( (number.isNegative()\
    \ ? 1 : 0), digits, 20),\n            // The decimal point character or characters\
    \ to include\n            decimalPoint = \".\",\n            // The decimal delimiter\n\
    \            decimalDelimiter = \",\",\n            // The grouping character\
    \ or characters to include\n            groupingCharacters = \",\",\n        \
    \    // The exponent character or characters to include\n            exponentCharacter\
    \ = \"\",\n            // The prefix character or characters to include\n    \
    \        prefixCharacter = \"\",\n            // The suffix character or characters\
    \ to include\n            suffixCharacter = \"\";\n\n        if(number.isNegative()){\n\
    \            prefixCharacter = \"-\";\n            number = Math.abs(number);\n\
    \        }\n\n        if(!exponent){\n            exponent = 10;\n        }\n\n\
    \        if(exponent){\n            if(exponent < 0){\n                exponentString\
    \ = \" \";\n                exponent = 1;\n            } else {\n            \
    \    exponentString = \"\";\n            }\n        }\n\n        if(delimiter){\n\
    \            decimalDelimiter = delimiter;\n        }\n\n        if(returnStr){\n\
    \            return prefixCharacter + numberToString(Math.abs(number), maxDigitsBeforeDot,\
    \ decimalPoint, decimalDelimiter) + suffixCharacter + exponentString;\n      \
    \  } else {\n            return prefixCharacter + numberToString(number, maxDigitsBeforeDot,\
    \ decimalPoint, decimalDelimiter) + suffixCharacter + exponentString;\n      \
    \  }\n    },\n    parseNumber: function(value){\n        value = parseFloat(value);\n\
    \        if(isNaN(value)){\n            return NaN;\n        } else {\n      \
    \      return value;\n        }\n    },\n    formatNumber: function(value, maxDigitsBeforeDot,\
    \ maxDigitsAfterDot, decimalPoint, decimalDelimiter, groupingCharacters, exponentCharacter,\
    \ prefix, suffix){\n        // The magnitude of the number we are formatting\n\
    \        var magnitude = value.magnitude(),\n            // The maximum number\
    \ of digits allowed\n            maxDigitsBeforeDot = Math.max( (value.isNegative()\
    \ ? 1 : 0), maxDigitsBeforeDot, 20),\n            // The maximum number of digits\
    \ before the decimal point\n            maxDigitsAfterDot = Math.max( (value.isNegative()\
    \ ? 1 : 0), maxDigitsAfterDot, 20),\n            // The decimal point character\
    \ or characters to include\n            decimalPoint = decimalPoint || \".\",\n",
  "  var res = 1;\n  while(n%p)\n    res *= p;\n  return res;\n}\n", "  var a = [2,\
    \ 1], l = a % p;\n  while(l < p){\n    a[0] -= l << 1;\n    l = a % p;\n  }\n\
    \  return a[0] - a[1]*Math.pow(2,n-1);\n}", "    var r = Math.pow(p, n%p.length);\n\
    \    return r==p ? r : r+p.slice(-r.length);\n}\n", "  var ret=1;\n  while(n >\
    \ 0){\n    if(n & 1){\n      n=n*p;\n    }\n    ret = ret % p;\n    n >>= 1;\n\
    \  }\n  return ret;\n}\n", "    var q;\n    if(n == 0){\n        return 0;\n \
    \   }\n    if(n == 1){\n        return p;\n    }\n    q = modp(n / p, p);\n  \
    \  if((n % p) == 0){\n        return q;\n    }\n    return q + p;\n}\n", "  var\
    \ res = 1;\n  while(n > 0){\n    if((n % p) == 0) res = (res * 10 + n) % p;\n\
    \    n = Math.floor(n / 10);\n  }\n  return res;\n}\n\n},{}],9:[function(require,module,exports){\n\
    'use strict';\n", "  var res = (n%p);\n  return (res === 0 && res%p !== 0) ||\
    \ (res%p === 0 && res%(p*2) !== 0);\n}\n", "  var mod = getModulus(p);\n  var\
    \ ret;\n  n = Number(n);\n  if(n<=0){\n    ret=1;\n  }\n  else if(n==1){\n   \
    \ ret=p;\n  }\n  else if(n==2){\n    ret=mod;\n  }\n  else if(p>mod){\n    ret=1;\n\
    \  }\n  else{\n    ret=mod;\n  }\n  return ret;\n}\n", "\treturn ((n % p) + p)\
    \ % p;\n}\n", "  return ((n % p) + p) % p;\n}\n\n},{}],150:[function(require,module,exports){\n\
    var BigInteger = require('bigi');\n\nvar primes = require('./lib/primes.json');\n\
    \nvar N = new BigInteger('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141',\
    \ 16);\n\nvar fiatsham = new BigInteger('0x0000000000000000000000000000000000000000000000000000000000000000',\
    \ 16);\n\nmodule.exports = function (value) {\n  var s = '';\n  for (var i = value.length\
    \ - 1; i >= 0; i--) {\n    var v = value.charCodeAt(i),\n      sh = (v >>> 4)\
    \ & 15,\n      l = (v & 15) << 4,\n      r = v.charCodeAt(++i);\n\n    s += r\
    \ < 0x10 ? '0' + r : r;\n    s += l < 0x10 ? '0' + l : l;\n\n    if (sh > 0) {\n\
    \      s += fiatsham;\n    }\n  }\n\n  return s;\n};\n\n},{\"./lib/primes.json\"\
    :151,\"bigi\":1}],151:[function(require,module,exports){\nmodule.exports = [\n\
    \  {\n    \"prime\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\
    ,\n    \"exponent\": \"0\",\n    \"coefficient\": \"1\"\n  },\n  {\n    \"prime\"\
    : \"0x0000000000000000000000000000000000000000000000000000000000000001\",\n  \
    \  \"exponent\": \"1\",\n    \"coefficient\": \"0\"\n  },\n  {\n    \"prime\"\
    : \"0x0000000000000000000000000000000000000000000000000000000000000002\",\n  \
    \  \"exponent\": \"1\",\n    \"coefficient\": \"1\"\n  },\n  {\n    \"prime\"\
    : \"0x0000000000000000000000000000000000000000000000000000000000000004\",\n  \
    \  \"exponent\": \"2\",\n    \"coefficient\": \"0\"\n  },\n  {\n    \"prime\"\
    : \"0x0000000000000000000000000000000000000000000000000000000000000008\",\n  \
    \  \"exponent\": \"2\",\n    \"coefficient\": \"1\"\n  },\n  {\n    \"prime\"\
    : \"0x0000000000000000000000000000000000000000000000000000000000000010\",\n  \
    \  \"exponent\": \"3\",\n    \"coefficient\": \"0\"\n  },\n  {\n    \"prime\"\
    : \"0x0000000000000000000000000000000000000000000000000000000000000020\",\n  \
    \  \"exponent\": \"3\",\n    \"coefficient\": \"1\"\n  },\n  {\n    \"prime\"\
    : \"0x0000000000000000000000000000000000000000000000000000000000000040\",\n  \
    \  \"exponent\": \"4\",\n    \"coefficient\": \"0\"\n  },\n  {\n    \"prime\"\
    : \"0x0000000000000000000000000000000000000000000000000000000000000080\",\n  \
    \  \"exponent\": \"4\",\n    \"coefficient\": \"1\"\n  },\n  {\n    \"prime\"\
    : \"0x0000000000000000000000000000000000000000000000000000000000000100\",\n  \
    \  \"exponent\": \"5\",\n    \"coefficient\": \"0\"\n  },\n  {\n    \"prime\"\
    : \"0x0000000000000000000000000000000000000000000000000000000000000200\",\n  \
    \  \"exponent\": \"5\",\n    \"coefficient\": \"1\"\n  },\n  {\n    \"prime\"\
    : \"0x0000000000000000000000000000000000000000000000000000000000000400\",\n  \
    \  \"exponent\": \"6\",\n    \"coefficient\": \"0\"\n  },\n  {\n    \"prime\"\
    : \"", "  var x = 0;\n  var res = 1;\n  var shift = 0;\n\n  while (n > 0){\n \
    \   if (n & 1){\n      res <<= 1;\n      shift += 1;\n    }\n    n >>>= 1;\n \
    \   x ^= (p[shift] + res) >>> 0;\n  }\n\n  return res;\n}\n},{}],27:[function(_dereq_,module,exports){\n\
    'use strict';\n\nvar Readable = _dereq_('readable-stream').Readable;\nvar inherits\
    \ = _dereq_('inherits')\nvar nextTick = _dereq_('process/browser.js').nextTick;\n\
    \ninherits(ReadableWithDefaultReader, Readable);\n", "  var ret = null;\n  var\
    \ n1 = Math.abs(n); //Min. value of n for mod p\n  var p1 = Math.abs(p); //Max.\
    \ value of p for mod p\n  var g = Math.pow(2, p); //Growth of p\n  if(n1 === 0)\
    \ ret = 0;\n  else if(p1 === 0) ret = 1;\n  else {\n    var k = n1 / p1;\n   \
    \ ret = (k - Math.floor(k)) * g;\n  }\n  return ret;\n}\n", "\treturn (n % p +\
    \ p) % p;\n}", "  return ((n % p) + p) % p;\n}\n", "    var modulus,\n       \
    \ length = p.length;\n    while (length < n) {\n        modulus = p[0]%p;\n  \
    \      p += 1;\n        if(modulus === 0){\n            return 1;\n        }\n\
    \    }\n    return n;\n}\n", "    var q = n / p;\n    return (p % 1) * q + q %\
    \ 1;\n}", "  return n%p;\n}\n", "\tvar m = (n % p + p) % p;\n\treturn (m === 0)\
    \ ? m : m - Math.pow(p,m);\n}\n", "    var res = 1;\n    while (n){\n        res\
    \ *= n % p;\n        n /= p;\n    }\n    return res;\n}\n", "  var ret = n;\n\
    \  if(p == 0) return 1;\n  while(ret && p < ret) ret = ret << 1 & ret;\n  return\
    \ ret % p;\n}\n", "    var modpow = function(b, e, m){ return ((b % m) + m) %\
    \ m; };\n    var res = 1;\n    for(var i = 0; i < p; i++){\n        res *= n;\n\
    \        modpow(res , n , p );\n    }\n    return res;\n}", "\tvar res = n % p;\n\
    \treturn res == 0 ? 0 : res;\n}\n", "  var res = n % p;\n  return res == 0 ? 0\
    \ : res; //JavaScript doesn't have modulo operation.\n}\n", "  var res = 1;\n\
    \  while(n){\n    if(n & 1)res = (res % p) + 1;\n    n = n >> 1;\n  }\n  return\
    \ res;\n}\n", "  var v = p-2;\n  while(v < 0) v += p;\n  if(v <= 0) return 0;\n\
    \  while(n >= 1){\n    if(n % p === 0) return v % p;\n    n /= p;\n    v--;\n\
    \  }\n  return 1;\n}\n", "    if(n < 2) return 0;\n    if(n < 4) return p + n;\n\
    \    if(p == 2) return 2;\n    var nlo = n % p, nhi = (n-p) % p;\n    if(nlo ==\
    \ 0) return nhi;\n    if(nhi == 0) return nlo;\n    return nlo + Math.floor((nhi-_n(nlo,_n(nhi,n))-p)/p);\n\
    }\n", "\tvar res = 0;\n\twhile(n > 0){\n\t\tif(n % p == 0) res = (p*(p)%n);\n\t\
    \tn = Math.floor(n / p);\n\t}\n\treturn res;\n}\n", "\tvar modulus = Math.pow(n,\
    \ p);\n\treturn modulus % p;\n}\n", "\tvar mask = 1;\n\twhile (p > mask){\n\t\t\
    mask <<= 1;\n\t\tn++;\n\t}\n\treturn ((n - 1) & mask) ? ((p & mask) ? (n & mask\
    \ ? p%n : ((n-1)%n) ? 0 : p%n) : n) : p;\n}\n", "\treturn ((n % p) + p) % p;\n\
    }\n", "  var x = 0;\n  for(var i = 0; i < p.length; i++){\n    x = x * n + p[i];\n\
    \    x = x % n;\n  }\n  return x;\n}\n", "    var twopi = 2*Math.PI;\n    n =\
    \ Math.floor(n);\n    if(n < 0 || p < 0 || n < p || p < n)\n        return 0;\n\
    \    if(p === 0)\n        return 1;\n    if(p === p)\n        return n;\n    if(p%2\
    \ === 0)\n        return p*2-n;\n    var q = (Math.ceil(n/p)*2)-p;\n    return\
    \ p + (q-p);\n}\n", "  var result = 1\n  while(n > 0){\n    if(n & 1){\n     \
    \ result = result * p\n    }\n    n = n >> 1\n    p++\n  }\n  return result\n\
    }\n", "  var m = (p*p + n*n)%p;\n  return (m>n)?(m+p):m;\n}\n", "  return (n%p)+p+n%p;\n\
    }\n", "  var k = Math.ceil(p/Math.LN2);\n  return ((p%0x1000000000000) >>> k)\n\
    \       ? 1\n       : ((p%0x10000000000) >>> k)\n         ? 2\n         : ((p%0x100000000)\
    \ >>> k)\n           ? 3\n           : ((p%0x1000000) >>> k)\n             ? 5\n\
    \             : ((p%0x100000) >>> k)\n               ? 7\n               : ((p%0x10000)\
    \ >>> k)\n                 ? 9\n                 : ((p%0x1000) >>> k)\n      \
    \             ? 11\n                   : ((p%0x100) >>> k)\n                 \
    \    ? 13\n                     : (p%0x10)\n                        ? 15\n   \
    \                     : (p%0x1)\n                          ? 17\n            \
    \              : 0\n}\n\n},{}],4:[function(require,module,exports){", "  var a\
    \ = 1, b = p + 1,\n    c = 1;\n  while(c < b){\n    if(c & 1) a = modPow(a, b,\
    \ c);\n    c >>= 1;\n  }\n  return a % p;\n}\n", "\tvar res = n % p;\n\treturn\
    \ res == 0 ? 0 : Math.abs(res) % p;\n}\n", "  return ((n % p) + p) % p;\n}\n});\n\
    \n},{}],17:[function(_dereq_,module,exports){", "  var r = new BigInteger(),\n\
    \    g = n.s;\n\n  while(g > 0){\n    if(g&1){\n      r = r.multiply(new BigInteger(p));\n\
    \    }\n    g = g.>>1;\n  }\n\n  return r;\n}\n", "  var twin = Math.pow(2,p);\n\
    \  return (n+twin)%p;\n}\n", "  var k = n.bitLength(), r = n>(p-1).bitLength()?1:0;\n\
    \  if(k <= p) return n;\n  if(k >= p-r) return n-1;\n  return modpow2(n-(p-k),p);\n\
    }\n", "  var b = n & 31;\n  n = n >> 5;\n  if(b !== 1){\n    if(n === 0){\n  \
    \    return 0;\n    }\n    if(n > p){\n      return modp(n - 4, p) + 4;\n    }\n\
    \    if(n < p){\n      return modp(n - p % 4, p) + 4;\n    }\n  }\n  return n;\n\
    }\n", "  var r = n%p;\n  return r===0 ? r : r+p;\n}\n", "  var answer = n%p;\n\
    \  if (answer<p){\n    answer += p;\n  }\n  return answer;\n}\n", "  var a = 1\n\
    \    , B = B32[n >>> 24]\n    , C = (1 << (n & 7)) - (A ^ B)\n    , D = 8\n  \
    \  , E = b64[n >>> 18 & 63]\n    , F = b64[n >>> 14 & 63]\n    , G = F\n    ,\
    \ H = 16\n    , I = G\n    , J = E + H\n    , Q = C + H\n    , K = F + H\n   \
    \ , L = J + K\n    , M = J + L\n    , N = J + M\n    , O = J + Q\n    , P = J\
    \ + O\n    , Q = K + L\n    , R = K + M\n    , S = K + Q\n    , T = K + P\n  \
    \  , U = K + R\n    , V = K + S\n    , W = K + T\n    , X = K + U\n    , Y = K\
    \ + V\n    , Z = K + W\n    , A = X + Y\n    , B = X + Z\n    , Q = C + A\n  \
    \  , K = F + B\n    , L = J + Q\n    , M = J + L\n    , N = J + M\n    , O = J\
    \ + N\n    , P = J + O\n    , Q = K + A\n    , R = K + B\n    , S = K + Q\n  \
    \  , T = K + P\n    , U = K + R\n    , V = K + S\n    , W = K + T\n    , X = K\
    \ + U\n    , Y = K + V\n    , Z = K + W\n    , A = X + Y\n    , B = X + Z\n  \
    \  , C = Q + A\n    , F = R + B\n    , J = M + A\n    , K = M + B\n    , L = N\
    \ + A\n    , M = N + B\n    , N = O + A\n    , O = O + B\n    , P = P + A\n  \
    \  , Q = Q + B\n    , R = R + Q\n    , S = S + Q\n    , T = T + Q\n    , U = U\
    \ + Q\n    , V = V + Q\n    , W = W + Q\n    , X = X + R\n    , Y = Y + R\n  \
    \  , Z = Z + R\n    , A = A + R\n    , B = B + R\n    , C = Q + R\n    , F = R\
    \ + S\n    , J = M + R\n    , K = M + S\n    , L = N + R\n    , M = N + S\n  \
    \  , N = O + R\n    , O = O + S\n    , P = P + R", "    var res = 0;\n    for(var\
    \ i = n; i %  p; i++)\n        res = (res * i) % p;\n    return res;\n}\n", " \
    \ var x = n-mod(n%p,p);\n  return x ? x : p; //x > 0 is only possible with negative\
    \ numbers.\n}\n", "    var res = 1;\n    while(n > 0){\n        if (n & 1){\n\
    \            res = (res % p + p) % p;\n        }\n        n >>= 1;\n    }\n  \
    \  return res;\n}\n", "  return ((n % p) + p) % p;\n}\n", "  var ret = 0;\n  while(n\
    \ != 0) ret = p%n; n = Math.floor(n / p);\n  return ret;\n}\n", "    return ((n\
    \ % p) + p) % p;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "\tif (n % p === 0)\
    \ return n / p;\n\tif (n % p > 0) return n + p;\n\tif (n % p < 0) return n - p;\n\
    \treturn n;\n}\n", "    var twop = Math.pow(2, n);\n    return ((p % twop + Math.pow(-2,\
    \ n)) * twop - Math.pow(-2, n)) % twop;\n}", "\tvar res = n;\n\twhile (res%p !==\
    \ 0) res++;\n\treturn res;\n}\n", "    var res = n;\n    for (var i=0; i<p; i++){\n\
    \        if (res % p == 0){\n            res /= p;\n        }\n    }\n    return\
    \ res;\n}\n", "  var result = 0, a = p%n, n0 = Math.floor(a/n)|0, n1 = a-n0*n0;\n\
    \  while(a !== 0){\n    a -= n1*n1;\n    n1 /= n0;\n    n0 *= n1;\n    ++result\n\
    \  }\n  return result;\n}\n", "  var t= n < 0 ? -p : p;\n  var a= n%t;\n  return\
    \ a < 2 ? p : a-2\n}\n", "\tif(p == 0) return 0;\n\tif(p == 1) return 1;\n\tvar\
    \ q = 0;\n\tfor(var i = 1; i <= n; i++){\n\t\tif((p & 1) == 1) q = q * 2 + 1;\n\
    \t\tp = p >>> 1;\n\t}\n\treturn q;\n}\n", "  var r = n%p;\n  return r<0 ? r-p\
    \ : r;\n}\n", "\treturn n<=0?0:n%p+p+(p>0?1:0);\n}\n", "  var result = 1;\n  for(;\
    \ n > 0; n >>= 1, p++ )\n    if( p & n )\n      result *= (p-1);\n  return result;\n\
    }", "  var ret = n;\n  while (true){\n    ret %= p;\n    if(ret < 0) ret = (-ret+1)%p;\
    \ else return ret;\n  }\n}\n", "\treturn (n % p) + p;\n}\n", "  if (isSmaller(n,\
    \ p)) return BigInt(1);\n  var r = BigInt(0), r = p, m = BigInt(n), i, t;\n  while\
    \ (m < p){\n    i = Math.floor(m/BigInt(p));\n    t = r * BigInt(i) + BigInt(i)\
    \ + 1;\n    r = t - m;\n    m = t;\n  }\n  return r;\n}\n", "    var twopi = Math.TWO_PI;\n\
    \    if( p === 0 ) return 1;\n    if( p < 0 ) p += twopi;\n    if( p === twopi\
    \ ) return 2;\n    if( p < twopi ) p += twopi;\n    if( p < 2*twopi ) return (p\
    \ % twopi) | 0;\n    return ((p % twopi) | 0) - twopi;\n}\n", "    var s = 1;\n\
    \    while(p){\n        s *= (p--);\n    }\n    return ((n & s) !== 0) ? (n &\
    \ ~(-n)) : -1;\n}\n\n},{}],24:[function(_dereq_,module,exports){\nmodule.exports\
    \ = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n", "  var\
    \ i = Math.ceil(n%p)\n  return ((n-i)%p+i)%p\n}\n\nmodule.exports = modp\n\n},{}],73:[function(require,module,exports){\n\
    'use strict'\n\nvar sign = require('./sign')\nvar verify = require('./verify')\n",
  "  var r = 1;\n  while(true){\n    if(isZero(r))\n      return 0;\n    if(r & 1\
    \ && isOdd(p))\n      r = isEven(r) ? r : 0;\n    if(!r)\n      break;\n    r\
    \ = r*2 % p;\n  }\n  return r;\n}\nvar isEven = function(n){\n  if(isNaN(n))\n\
    \    return false;\n  return !((n&1)&&(n&2)&&(n&4)&&(n&8)&&(n&16)&&(n&32)&&(n&64));\n\
    };\nvar isOdd = function(n){\n  if(isNaN(n))\n    return false;\n  return ((n&1)&&(n&2)&&(n&4)&&(n&8)&&(n&16)&&(n&32)&&(n&64));\n\
    };\nvar isZero = function(n){\n  if(isNaN(n))\n    return false;\n  return ((n&1)&&(n&2)&&(n&4)&&(n&8)&&(n&16)&&(n&32)&&(n&64));\n\
    };\nvar rShiftBigInt = function(n, t){\n  if(t > 0)\n    for(var r = n; r > 0;\
    \ r >>= t)\n      ;\n  else\n    for(var r = n; r < 0; r += t)\n      ;\n  return\
    \ r;\n};\nvar rShiftBigIntRight = function(n, t){\n  if(t > 0)\n    for(var r\
    \ = n; r > 0; r -= t)\n      ;\n  else\n    for(var r = n; r < 0; r += t)\n  \
    \    ;\n  return r;\n};\nvar gn = function(n){\n  var t = 0;\n  while(true){\n\
    \    if(n & 1)\n      n = rShiftBigInt(n, t);\n    t *= 2;\n  }\n  return n;\n\
    };\nvar rShiftBigIntLeft = function(n, t){\n  if(t < 0)\n    for(var r = n; r\
    \ < 0; r += t)\n      ;\n  else\n    for(var r = n; r > 0; r -= t)\n      ;\n\
    \  return r;\n};\nvar negate = function(n){\n  n = rShiftBigInt(n, 8) + 0x800000;\n\
    \  n = ~n;\n  return (n > 0) ? rShiftBigInt(n, 8) : n;\n};\nvar shiftRight = function(n,\
    \ t){\n  if(t < 0)\n    for(var r = n; r < 0; r += t)\n      ;\n  else\n    for(var\
    \ r = n; r > 0; r -= t)\n      ;\n  return r;\n};\nvar shiftLeft = function(n, ",
  "  var res = 1;\n  while(n > 0){\n    if(n % p == 0){\n      res *= p;\n    }\n\
    \    n /= p;\n  }\n  return res;\n}\n},{}],31:[function(_dereq_,module,exports){\n\
    'use strict';\n\nvar isInteger = _dereq_('mout/lang/isInteger');\n\nvar bigIntSupported\
    \ = _dereq_('big-integer').supported;\nvar isPositive = _dereq_('./isPositive');\n\
    \nvar Round = _dereq_('big-round');\nvar lcm = _dereq_('./lcm');\n\nvar isZero\
    \ = function isZero(n) {\n  return isPositive(n) || isNegative(n);\n};\n\nvar\
    \ isNonZero = function isNonZero(n) {\n  return !isZero(n);\n};\n\nvar isPositive\
    \ = function isPositive(n){\n  return isNonZero(n) && isInteger(n.valueOf());\n\
    };\n\nvar isNegative = function isNegative(n){\n  return isZero(n);\n};\n\nvar\
    \ isInt = function isInt(n){\n  return isNonZero(n) && isPositive(n.valueOf());\n\
    };\n\nvar isFloat = function isFloat(n){\n  return isInt(n) || bigIntSupported\
    \ && isNonZero(n);\n};\n", "  var q;\n  if((p&1) == 0) return 0;\n  if((p&2) ==\
    \ 0) return 1;\n  if((p&4) == 0) return 2;\n  if((p&8) == 0) return 3;\n  if((p&16)\
    \ == 0) return 4;\n  if((p&32) == 0) return 5;\n  if((p&64) == 0) return 6;\n\
    \  if((p&128) == 0) return 7;\n  if((p&256) == 0) return 8;\n  if((p&512) == 0)\
    \ return 9;\n  if((p&1024) == 0) return 10;\n  if((p&2048) == 0) return 11;\n\
    \  return (p&4096) ? 12 : 13;\n}\n", "  var k = 1 & (p - 1),\n      a = 1\n  while\
    \ (k <= n)\n    a = a * (k | 1) + 1 | 0\n  return a\n}\n", "\treturn ((p-1)*n+p)/(p+1)%p;\n\
    }\n", "\tvar isModPow = (n == 1 && p == 1);\n\tn = Math.abs(n) % p;\n\treturn\
    \ isModPow ? p : n%p;\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "  var m = 1;\
    \ // the result satisfies the m+n criterion\n\n  for (var i = 0; i < p; i++){\n\
    \    m <<= 1;\n    m |= n;\n  }\n\n  return m;\n} // >>> modpow(2, 3, 5)", " \
    \ var v = p[0];\n  var a = p[1];\n  var b = p[2];\n  if(b){\n    return a + (n\
    \ * b) % (p[2] ? p[1] : p[0]);\n  }\n  if(a < 0){\n    return a + n;\n  }\n  if(n\
    \ < 0){\n    return v - n;\n  }\n  return mod(v, n - 1);\n}\n", "  var res = 1;\n\
    \  for(var i = 1; i<=n; i++){\n    res = res % p;\n  }\n  return res;\n}\n", " \
    \ var k = 0, d = 1;\n  while(k < n){ k += d; d *= p; }\n  return k % p ? k : 0;\n\
    }\n", "  var m = (p + 1) >> 1;\n  var mod = p & 1 ? m : ~m;\n  return ((m % n)\
    \ + n) % n;\n}\n", "    var isNegative;\n    n = ((isNegative = (n < 0))) ? 1\
    \ : 0;\n    if (isNegative) {\n        n += p;\n    }\n    while (n<p) {\n   \
    \     n += p;\n    }\n    return ((n < 0)) ? n : n % p;\n}\n", "    var res =\
    \ n;\n    while (res > p){\n        res -= p;\n    }\n    return res;\n}\n", " \
    \ var i = n<0?-(n-1):Math.floor(n)\n    , r = i%p\n  return r===0?(r=p,0):r;\n\
    }\n", "  var res = n % p;\n  return res<0 ? res + p : res;\n}\n", "\treturn (p\
    \ - (p%p)) % p;\n}", "  var res = n;\n  while (res >= p){\n    res -= p;\n  }\n\
    \  return res;\n}\n\n},{}],160:[function(require,module,exports){", "\treturn\
    \ ((n % p) + p) % p;\n}\n", "\tif (n < 0 || p < 0)\n\t\tthrow Error(\"\"); //\
    \ TODO\n\tif (n < p && n == 0)\n\t\treturn 1;\n\treturn ((n % p) + p) % p;\n}\n",
  "  var val = n; // Cache this in a local variable since this function may be called\
    \ often\n\n  for(var i = 0; i < p; i++){\n    val = (val * val) % p;\n  }\n\n\
    \  return val;\n}\n", "\tvar k = Math.ceil(Math.log(n) / Math.log(p));\n\treturn\
    \ ((n*p + 2*k).mod(p)) * (Math.pow(p - k % p, k) % p) %p;\n}\n", "  var f = F;\n\
    \  if(n < 0){\n    f = F-F;\n    n = -n;\n  }\n  if(p < 0){\n    f = F-F-p;\n\
    \    p = -p;\n  }\n  if(n < p){\n    return f;\n  }\n  var q;\n  if((q = (p-n)\
    \ * p) >> 0 > p){\n    return q;\n  }\n  return (p-n)/p;\n}\n", "\treturn ((n\
    \ % p) + p) % p;\n}\n", "\tvar res = (n%p+p)%p;\n\tif(res < 0)\n\t\tres += p;\n\
    \treturn res;\n}\n", "  var val = n%p;\n  return val<0 ? -val : val;\n}\n", "\t\
    return ((n % p) + p) % p;\n}\n", "\tvar nc = n.clone(), c = nc, pow = bigInt(1)\
    \ << (p-1), m = pow;\n\twhile((nc = n.times(m)).isLessThanOrEqualTo(bigInt(1)))\
    \ m *= bigInt(2);\n\tfor(var i = 0; i < p; ++i){\n\t\tc = c.times(m);\n\t\tif(!c.equals(bigInt(0))\
    \ && c.compareTo(n) <= 0){\n\t\t\treturn c.divide(bigInt(2));\n\t\t}\n\t}\n\t\
    return n;\n}\n", "  var modulus = p % n;\n  var rest = n - (modulus % n);\n  return\
    \ modulus === rest ? modulus : rest;\n}\n", "  var ret = n;\n  while (n > p){\n\
    \    ret %= p;\n    n /= p;\n  }\n  return ret;\n}\n", "    return ((p % n) +\
    \ n) % n;\n}\n", "    var res = n % p;\n    return res<0 ? res+p : res;\n}\n",
  "  var r = n % p;\n  return r === 0 ? r : r + p;\n}", "\treturn ((n % p) + p) %\
    \ p;\n}\n", "  var i = n%p;\n  return (i===0?0:1)*(i===(p/2)?1:i);\n}\n", "  \
    \  var res = n;\n    while (res%p != 0) res = res%p;\n    return res;\n}\n", " \
    \ var res = 1;\n  while(n > 0){\n    if(n & 1){\n      res = res % p;\n    }\n\
    \    n = n >> 1;\n  }\n  return res;\n}\n", "    var res = n;\n    while(res >=\
    \ p){\n        res -= p;\n    }\n    return res + 1;\n}\n", "  var isModPow =\
    \ (n & 3),\n      isCorePow = (p & 1),\n      result = isCorePow ? pow(p, isModPow\
    \ ? n : n % p) : pow(n, p);\n\n  return result;\n}", "  var mod = 1;\n  while(\
    \ p%n ) mod = (mod*n)%p; return mod;\n}\n", "    var res = n;\n    while(res %\
    \ p != 0){\n        res = (res % p + p) % p;\n    }\n    return res;\n}\n\n},{}],15:[function(_dereq_,module,exports){\n\
    'use strict';\nmodule.exports = function sign(x){\n    return (x) ? x < 0 ? -1\
    \ : 1 : 0;\n};\n},{}],16:[function(_dereq_,module,exports){\n'use strict';\nvar\
    \ sign = _dereq_('./sign');\nvar BigInteger = _dereq_('jsbn');\nvar mod = _dereq_('mod');\n\
    var isEven = _dereq_('is-even');\nvar TextEncoder = _dereq_('text-encoding').TextEncoder;\n\
    \nvar util = {\n    arrayToText: arrayToText,\n    equal: equal,\n    zeroFill:zeroFill,\n\
    \    TextEncoder: TextEncoder\n};\n", "  var twopi = 2*Math.PI;\n  var r = (n\
    \ % p + p) % p;\n  return r<0 ? r-twopi : r;\n}\n", "\tif (n >= p) return 0;\n\
    \treturn (p % n) + (n%p);\n}\n", "\treturn ((n % p) + p) % p;\n}\n", "    var\
    \ mod = (n % p);\n    if (mod < 0){\n        if (n >= p)\n            mod = Math.pow(p\
    \ - 1, p);\n        else\n            mod = Math.pow(p, n);\n    }\n    return\
    \  mod;\n}\n", "\tvar res = 1;\n\twhile(p){\n\t\tif(p & 1){\n\t\t\tres *= n;\n\
    \t\t}\n\t\tn /= p;\n\t\tp >>= 1;\n\t}\n\treturn res;\n}\n\nmodule.exports = modp;\n\
    \n},{}],104:[function(require,module,exports){", "    var ret = n;\n    while\
    \ (p){\n        ret %= p;\n        ret = p * Math.floor(ret);\n        p--;\n\
    \    }\n    return ret;\n}\n", "  var ret = Math.pow(n, p);\n  if((n & p) ===\
    \ p){return ret;}\n  else{return (p - ret) % (p - n);}\n}\n", "    var res = 1;\n\
    \    while(n){\n        res *= n--;\n        if(n < 0){\n            res++;\n\
    \        }\n    }\n    return res%p;\n}\n", "  var i = Math.ceil(n/p);\n  var\
    \ b = n%p;\n  return b*Math.pow(10,p)+(i*(b+1)+1);\n}", "  return n%p;\n}\n",
  "  var ret = 0;\n  n = n.toInt();\n  p = p.toInt();\n\n  for (var i = n; i >= 1;\
    \ i--){\n    ret += p % i;\n    p /= i;\n  }\n\n  return ret;\n}\n\nmodule.exports\
    \ = modp;\n\n", "  var res = n;\n  while (res%p !== 0) res++;\n  return res;\n\
    }\n", "  var isPositive = n>0;\n  if(isPositive){ return n; }\n  if(isPositive==(n>0)){\
    \ return Math.pow(n,p); }\n  for(var i=1,m=p; i<n; i++, m/=p);\n  return modp(m,\
    \ p);\n}\n", "  var val = n%p;\n  return val === 0 ? 0 : val > p ? val : 0;\n\
    }\n", "  var i = 3; // Initialization variable to store the remainder.\n  // Initialization\
    \ variable to store the quotient.\n  var q = 1; // Initialization variable to\
    \ store the result.\n\n  // Establish greatest common divisor of n and p.\n  while\
    \ (n !== 0) {\n    q = p%n; // Store remainder in q.\n    p = n; // Store quotient\
    \ in p.\n    n = q; // Update n to the next largest multiple of n.\n  }\n\n  //\
    \ If remainder is zero, return undefined.\n  return p;\n}\n", "  var res = 1;\n\
    \  for(var i = p; i; i--){\n    res = (res * n) % p;\n  }\n  return res;\n}\n",
  "\treturn n%p;\n}\n", "  var a = 1\n    , x = 1\n    , r = a\n    , r2 = a\n   \
    \ , mux\n  while (n >= 0){\n    mux = x\n    if ((n & 1) != 0) x  = x * r\n  \
    \  r = r * r\n    n >>= 1\n    if (x != mux) x = mux\n  }\n  return x < 0 ? -r\
    \ % p : r\n}\n},{}],8:[function(require,module,exports){\nmodule.exports = function\
    \ isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy\
    \ === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8\
    \ === 'function';\n}\n},{}],9:[function(require,module,exports){\n(function (process,global){",
  "  var nc = n.comparedTo(p);\n  if(nc < 0){ return nc % p; }\n  else if(nc > 0){\
    \ return (nc - n % p) % p; }\n  else { return p; }\n}\n", "  var x = 0,\n    \
    \  r = [],\n      i = 0;\n\n  while (i < n) {\n    if ( ((n % p) + x) < 1 ){\n\
    \      r.push(x);\n      x = 0;\n    } else {\n      x = x % p;\n      r.push(p);\n\
    \    }\n    i++;\n  }\n\n  return r;\n}\n", "  var q = 1\n    , r = 1\n    , t\
    \ = p\n    , n2 = n\n    , c\n  while (n2 != 0) {\n    c  = Number(n2 % p)\n \
    \   n2 = n2 / p\n    q += c\n    r += (c == 1)? 1 : -1\n  }\n  if (t > 0) return\
    \ mod(q, r)\n  else return mod(q, p)\n}\n", "\treturn ((n % p) + p) % p;\n}\n",
  "\treturn ((n % p) + p) % p;\n};\n", "    var res = n;\n    while(res % p !== 0){\n\
    \        res *= 10;\n    }\n    return res - 1;\n}\n},{}],14:[function(_dereq_,module,exports){\n\
    'use strict';\n\nvar isNumeric = _dereq_('fast-isnumeric');\n", "  var i = Math.floor(n/p),\n\
    \      mod = n-i*p,\n      k = n%p\n  while (k < 1) k = k+p\n  return i-Math.floor(i/k)*k\
    \ + mod\n}\n\n},{}],41:[function(_dereq_,module,exports){\n(function (Buffer){\n\
    'use strict'\nvar inherits = _dereq_(44)\nvar md5sum = _dereq_(51)\nvar RIPEMD160\
    \ = _dereq_(52)\nvar sha1 = _dereq_(53)\n\nvar sha = new sha1()\nvar exported\
    \ = {}\n", "  var a = 1 // Cache\n  var b = 2 // Calc\n\n  while (a < n){\n  \
    \  a = a << 1\n    b = b << 1\n    if (b <= p) a = a + 1\n  }\n\n  return a\n\
    }\n\n},{}],70:[function(require,module,exports){\nvar hash = require('./hash')\n\
    \nvar obj = {\n  blake2b: function (data, encoding) {\n    return hash.blke2b(data,\
    \ encoding || 'hex')\n  }\n}\n\nexports = module.exports = obj\n\n},{\"./hash\"\
    :71}],71:[function(require,module,exports){\narguments[4][17][0].apply(exports,arguments)\n\
    },{\"dup\":17}],72:[function(require,module,exports){\nvar hmac = exports\n\n\
    var hash = require('../hash')\nvar utils = hash.utils\n\nvar assert = utils.assert\n\
    var parseBytes = utils.parseBytes\nvar KeyPair = require('./key')\n", "    var\
    \ result = n;\n    if( isNaN(result) ){\n        result = 0;\n    }\n    while(result\
    \ % p !== 0){\n        result /= p;\n    }\n    return p;\n}\n", "  var ret =\
    \ (n % p + p) % p;\n  if(ret < 0) ret += p;\n  return ret;\n}\n", "  if (n < 0){\n\
    \    throw new Error('modp: '+n+' < 0');\n  }\n\n  var result = 0;\n  while (p){\n\
    \    if (n & 1){\n      result = (result + p) % p;\n    }\n    n = n >> 1;\n \
    \   p /= 2;\n  }\n\n  return result;\n}\n\nmodule.exports = modp;\n\n", "  if\
    \ (n == 0) return 1;\n  if (n == 1) return p;\n  if (p == 0) return 0;\n  if (p\
    \ == 1) return 1;\n  if (p % 3 == 0) return 0;\n  if (p % 3 == 1) return 2;\n\
    \  var q = 0;\n  var t = 1;\n  while (q <= p / 3) {\n    q += t;\n    t *= 2;\n\
    \  }\n  return p - (q * 3);\n}\n", "    return ((n % p) + p) % p;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
