name: HumanEval_29_filter_by_prefix
language: js
prompt: "//Filter an input array of strings only for ones that start with a given\
  \ prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"\
  abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings,\
  \ prefix){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\",\
  \ \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
completions: ["    var filter = \"\";\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].indexOf(prefix) === 0){\n            filter += strings[i];\n\
    \        }\n    }\n    return filter;\n}", "  return strings.filter(function(string){\n\
    \    return (string.indexOf(prefix) === 0);\n  });\n}\n", "\treturn strings.filter(function(string){\n\
    \t\treturn string.substr(0, prefix.length) == prefix;\n\t});\n}\n", "    if(prefix\
    \ === \"\"){\n        return strings\n    }\n    return strings.filter(function(string){\n\
    \        return string.startsWith(prefix)\n    })\n}\n", "    return strings.filter(function(string){\n\
    \        return string.indexOf(prefix) === 0;\n    });\n}\n", "    return strings.filter(function(str){\n\
    \        return str.slice(0, prefix.length) === prefix;\n    });\n}\n", "  var\
    \ prefix = prefix || \"\";\n  return strings.filter(function(x){ return x.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(string => {\n        return string.startsWith(prefix);\n\
    \    });\n}\n", "\tif(!strings) return [];\n\tif(!prefix) return strings;\n\t\
    return strings.filter(function(str){\n\t\treturn str.startsWith(prefix);\n\t});\n\
    }\n", "    var new_strings = [];\n    for(var i in strings){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            new_strings.push(strings[i]);\n        }\n    }\n    return\
    \ new_strings;\n}", "\treturn strings.filter(function(str){\n\t\treturn str.slice(0,\
    \ prefix.length) == prefix;\n\t});\n}", "\treturn strings.filter(function(string){\n\
    \t\treturn string.startsWith(prefix);\n\t});\n}\n\n", "\treturn strings.filter(function(s){\n\
    \t\treturn s.indexOf(prefix) === 0;\n\t});\n}\n", "    return strings.filter(function(string){\
    \ return string.indexOf(prefix) === 0;});\n}\n", "  strings = typeof strings ===\
    \ \"string\" ? [strings] : strings;\n\n  var filtered_strings = [];\n\n  strings.forEach(function(string){\n\
    \    if(string.indexOf(prefix) === 0){\n      filtered_strings.push(string);\n\
    \    }\n  });\n\n  return filtered_strings;\n}\n", "  return _.filter(strings,\
    \ function(i){\n    return i.startsWith(prefix);\n  });\n}\n", "  for (var i =\
    \ 0; i < strings.length; i++){\n    if (strings[i].startsWith(prefix)){\n    \
    \  strings.splice(i--, 1);\n    }\n  }\n  return strings;\n}\n", "  var filtered\
    \ = [];\n  for (var i = 0; i < strings.length; i++){\n    if (strings[i].indexOf(prefix)\
    \ === 0){\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n\
    }\n", "    return strings.filter(function(elem){\n        return elem.startsWith(prefix);\n\
    \    });\n}\n", "    let filtered = [];\n    for (let s of strings){\n       \
    \ if (s.startsWith(prefix)){\n            filtered.push(s);\n        }\n    }\n\
    \    return filtered;\n}\n</code>\n<|/ a tags=arrays,filtering,javascript |>\n\
    <| a dscore=2 tags=arrays,filtering,javascript |>\nTo make it more readable and\
    \ to improve the efficiency of the code, you can use:\n<code>\nlet words = [\"\
    a\", \"b\", \"c\", \"d\", \"e\"];\n\nlet filteredWords = words.filter(word =>\
    \ word[0] === 'a');\n", "  var filtered = [];\n  strings.forEach(function(string){\n\
    \    if(string.indexOf(prefix) === 0){\n      filtered.push(string);\n    }\n\
    \  });\n  return filtered;\n}\n", "  return strings.filter(function(string){\n\
    \    return string.startsWith(prefix);\n  });\n}\n", "  var filtered = [],\n \
    \     prefix = prefix.toLowerCase();\n  strings.forEach(function(str){\n    var\
    \ lower_str = str.toLowerCase();\n    if (lower_str.indexOf(prefix) === 0) {\n\
    \      filtered.push(str);\n    }\n  });\n  return filtered;\n}\n", "    return\
    \ $.grep(strings, function(string){\n        return string.indexOf(prefix) ===\
    \ 0;\n    });\n}\n", "  if(!strings || !prefix) return [];\n  return strings.filter(function(str){\n\
    \    return str.indexOf(prefix) === 0;\n  });\n}\n", "\treturn strings.filter(function(value){\n\
    \t\treturn value.startsWith(prefix);\n\t});\n}\n", "  var result = []\n  for (var\
    \ i = 0; i < strings.length; i++){\n    if (strings[i].indexOf(prefix) == 0){\n\
    \      result.push(strings[i])\n    }\n  }\n  return result\n}", "\tprefix = prefix.toLowerCase();\n\
    \tlet res = strings;\n\tfor(let i in strings){\n\t\tif(strings[i].toLowerCase().startsWith(prefix)){\n\
    \t\t\tres = res.filter(s => s.toLowerCase() !== strings[i]);\n\t\t}\n\t}\n\treturn\
    \ res;\n}\n", "\tvar matches = [];\n\t\n\tfor(var i=0; i<strings.length; i++){\n\
    \t\tvar string = strings[i];\n\t\tif(string.indexOf(prefix) === 0){\n\t\t\tmatches.push(string);\n\
    \t\t}\n\t}\n\t\n\treturn matches;\n}\n", "\tvar filtered = [];\n\tstrings.forEach(function(value){\n\
    \t\tif(value.startsWith(prefix)){\n\t\t\tfiltered.push(value);\n\t\t}\n\t});\n\
    \treturn filtered;\n}", "  if(strings.length <= 0) return strings\n  for(var i\
    \ = 0; i < strings.length; i++){\n    if(strings[i].indexOf(prefix) === 0) return\
    \ strings[i]\n  }\n  return strings\n}\n", "    return objects.filter(function(string)\
    \ {\n        return string.indexOf(prefix) === 0;\n    });\n}\n", "    var filtered\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n", "  return strings.filter(function(value){\n    return value.indexOf(prefix)\
    \ === 0;\n  });\n}\n", "  return strings.filter(function(str){\n    return str.indexOf(prefix)\
    \ === 0;\n  });\n}\n", "\treturn strings.filter(function(str){\n\t\treturn str.indexOf(prefix)\
    \ == 0;\n\t});\n}\n", "\treturn strings.filter(function(string){\n\t\treturn string.startsWith(prefix);\n\
    \t});\n}\n", "  var filtered_strings = [];\n  strings.forEach(function(string){\n\
    \    if(string.startsWith(prefix)){\n      filtered_strings.push(string);\n  \
    \  }\n  });\n  return filtered_strings;\n}\n", "    if(!Array.isArray(strings)){\n\
    \        strings = [strings];\n    }\n    return strings.filter(function(str){\n\
    \        return str.indexOf(prefix) === 0;\n    });\n}\n", "\treturn strings.filter(function(value){\n\
    \t\treturn value.substr(0, prefix.length) === prefix;\n\t});\n}\n", "    return\
    \ strings.filter(function (word) {\n        return word.startsWith(prefix);\n\
    \    });\n}\n", "  var result = [];\n\n  strings.forEach(function(s){\n    if(s.indexOf(prefix)\
    \ === 0){\n      result.push(s);\n    }\n  });\n\n  return result;\n}\n", "  for\
    \ (var i = 0; i < strings.length; i++){\n    if (strings[i].substr(0, prefix.length)\
    \ == prefix){\n      strings[i] = strings[i];\n    }\n  }\n  return strings;\n\
    }\n", "  var filtered_strings = strings.filter(function(string){\n    return string.indexOf(prefix)\
    \ === 0;\n  });\n  return filtered_strings;\n}\n", "  prefix = prefix.toLowerCase();\n\
    \  var new_strings = [];\n  strings.forEach(function(string) {\n    var string_lower\
    \ = string.toLowerCase();\n    if(string_lower.startsWith(prefix)) {\n      new_strings.push(string);\n\
    \    }\n  });\n  return new_strings;\n}\n", "\treturn strings.filter(function(string){\n\
    \t\treturn string.startsWith(prefix);\n\t});\n}\n", "\tvar i;\n\tvar new_strings\
    \ = [];\n\tfor (i = 0; i < strings.length; i++){\n\t\tif (strings[i].substring(0,\
    \ prefix.length) === prefix){\n\t\t\tnew_strings.push(strings[i]);\n\t\t}\n\t\
    }\n\treturn new_strings;\n}\n", "  if(!strings || strings.length <= 0){\n    return\
    \ [];\n  }\n  strings = strings.map(function(str){\n    return str.trim().toLowerCase();\n\
    \  });\n  prefix = prefix.trim().toLowerCase();\n  return strings.filter(function(str){\n\
    \    return str.indexOf(prefix) === 0;\n  });\n}\n", "    return strings.filter(function(str){\n\
    \        return str.startsWith(prefix);\n    });\n}\n", "  var ret = [];\n  strings.forEach(function(value){\n\
    \    if(value.indexOf(prefix) == 0){\n      ret.push(value);\n    }\n  });\n \
    \ return ret;\n}\n", "    var ret = [];\n    strings.forEach(function(elem){\n\
    \        if(elem.startsWith(prefix)){\n            ret.push(elem);\n        }\n\
    \    });\n    return ret;\n}\n", "    var new_strings = [];\n    for(var i = 0;\
    \ i < strings.length; i++){\n        var s = strings[i];\n        if(s.indexOf(prefix)\
    \ === 0){\n            new_strings.push(s);\n        }\n    }\n    return new_strings;\n\
    }\n", "  return strings.filter(function(string){\n    return string.startsWith(prefix);\n\
    \  });\n}\n", "\tvar filtered = [];\n\tstrings.forEach(function(string){\n\t\t\
    if(string.indexOf(prefix) == 0){\n\t\t\tfiltered.push(string);\n\t\t}\n\t});\n\
    \treturn filtered;\n}\n", "  return strings.filter(function(e){\n    return e.startsWith(prefix);\n\
    \  });\n}\n", "\tvar re = new RegExp(\"^\"+prefix);\n\treturn filter(strings,\
    \ function(s){return s.match(re);});\n}\n", "  // Filter out all non-strings.\n\
    \  return strings.filter(function(string){\n    return typeof string === \"string\"\
    \n  })\n  .filter(function(string){\n    return string.startsWith(prefix)\n  })\n\
    }\n", "    var matcher = new RegExp(\"^\" + prefix);\n    return strings.filter(function\
    \ (str) {\n        return matcher.test(str);\n    });\n}\n", "  var filtered_array\
    \ = [];\n  _.each(strings, function(str){\n    if(str.startsWith(prefix)){\n \
    \     filtered_array.push(str);\n    }\n  });\n  return filtered_array;\n}\n",
  "    var results = [];\n    strings.forEach(function(str){\n        if (str.startsWith(prefix)){\n\
    \            results.push(str);\n        }\n    });\n    return results;\n}\n",
  "  return strings.filter(function(i){\n    return i.slice(0, prefix.length) ===\
    \ prefix\n  })\n}\n", "    return $.grep(strings, function(string){\n        return\
    \ string.indexOf(prefix) === 0\n    });\n}", "\treturn strings.filter(function(string){\n\
    \t\treturn string.slice(0, prefix.length) == prefix;\n\t});\n}", "\treturn strings.filter(function\
    \ (str) {\n\t\treturn str.indexOf(prefix) === 0;\n\t});\n}\n", "\tprefix = prefix.toLowerCase();\n\
    \treturn strings.filter(function(s){return s.toLowerCase().startsWith(prefix);});\n\
    }\n", "  return strings.filter(function(str){\n    return str.indexOf(prefix)\
    \ === 0;\n  });\n}\n", "\tvar prefix = prefix.toLowerCase();\n\tvar filtered_strings\
    \ = [];\n\t\n\tfor(var i = 0; i < strings.length; i++){\n\t\tvar s = strings[i];\n\
    \t\t\n\t\tif(s.indexOf(prefix) === 0){\n\t\t\tfiltered_strings.push(s);\n\t\t\
    }\n\t}\n\t\n\treturn filtered_strings;\n}\n", "  var filtered_strings = [];\n\
    \  for(var i = 0; i < strings.length; i++){\n    if(strings[i].indexOf(prefix)\
    \ === 0)\n      filtered_strings.push(strings[i]);\n  }\n  return filtered_strings;\n\
    }\n", "    if(!prefix){\n        return strings;\n    }\n    \n    if(!strings.length){\n\
    \        return [];\n    }\n    \n    var filtered = [];\n    \n    for(var i\
    \ = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix) === 0){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    \n    return filtered;\n\
    }\n", "  var filtered = [];\n  _.each(strings, function(str){\n    if(str.indexOf(prefix)\
    \ === 0){\n      filtered.push(str);\n    }\n  });\n  return filtered;\n}\n",
  "    return strings.filter(function(s){return s.startsWith(prefix);});\n}\n", " \
    \ var prefix = prefix || \"\";\n  var out = [];\n  var i, str;\n  for(i=0;i<strings.length;i++){\n\
    \    str = strings[i];\n    if(str.substr(0,prefix.length) === prefix){\n    \
    \  out.push(str);\n    }\n  }\n  return out;\n}\n", "    var filtered = [];\n\
    \    strings.forEach(function(string){\n        if(string.startsWith(prefix))\n\
    \            filtered.push(string);\n    });\n    return filtered;\n}", "    var\
    \ filtered = [];\n    strings.forEach(function (string){\n        if (string.startsWith(prefix)){\n\
    \            filtered.push(string);\n        }\n    });\n    return filtered;\n\
    }\n", "    var filtered_strings = strings.filter(function(string){\n        return\
    \ (string.substr(0,prefix.length) == prefix);\n    });\n    return filtered_strings;\n\
    }\n", "\treturn strings.filter(function(str){\n\t\treturn str.startsWith(prefix);\n\
    \t});\n}\n", "    var filtered_strings = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].indexOf(prefix) === 0)\n            filtered_strings.push(strings[i]);\n\
    \    }\n    return filtered_strings;\n}\n", "    var filtered = [];\n    strings.forEach(function(string){\n\
    \        if(string.indexOf(prefix) === 0){\n            filtered.push(string);\n\
    \        }\n    });\n    return filtered;\n}\n", "    if(!Array.isArray(strings))\n\
    \        throw \"strings must be an array\"\n\n    return strings.filter(function(x){\n\
    \        return x.indexOf(prefix) === 0\n    })\n}\n", "    var res = [];\n  \
    \  strings.forEach(function(item){\n        if(item.indexOf(prefix) === 0){\n\
    \            res.push(item);\n        }\n    });\n    return res;\n}\n", "\tvar\
    \ out = [];\n\tfor (var i = 0; i < strings.length; i++){\n\t\tif (strings[i].slice(0,\
    \ prefix.length) == prefix){\n\t\t\tout.push(strings[i]);\n\t\t}\n\t}\n\treturn\
    \ out;\n}\n", "\treturn strings.filter(function (x) {\n\t\treturn x.startsWith(prefix);\n\
    \t});\n}\n", "    var filtered_array = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].startsWith(prefix)){\n            filtered_array.push(strings[i]);\n\
    \        }\n    }\n    return filtered_array;\n}\n", "    prefix += \"\"; //Convert\
    \ prefix to string if it isn't already\n    return _.filter(strings, function(string){\n\
    \        return string.startsWith(prefix);\n    });\n}\n", "  return strings.filter(function(string){\n\
    \    return string.indexOf(prefix) === 0;\n  });\n}\n", "    return $.grep(strings,\
    \ function(string){\n        return string.indexOf(prefix) === 0;\n    });\n}\n",
  "    var filtered_strings = [];\n    strings.forEach(function(string){\n       \
    \ if(string.startsWith(prefix)){\n            filtered_strings.push(string);\n\
    \        }\n    });\n    return filtered_strings;\n}\n", "    return strings.filter(function(string){\n\
    \        return string.startsWith(prefix);\n    });\n}\n", "  return strings.filter(function(el){\n\
    \    return el.indexOf(prefix) === 0;\n  });\n}\n", "  var filtered_strings =\
    \ []\n  for(var i = 0, len = strings.length; i < len; i++){\n    var string =\
    \ strings[i]\n    if(string.startsWith(prefix)){\n      filtered_strings.push(string)\n\
    \    }\n  }\n  return filtered_strings\n}\n", "    return strings.filter(string\
    \ => string.startsWith(prefix));\n}\n", "  var filtered_strings = [];\n  for(var\
    \ i = 0; i < strings.length; i++){\n    if(strings[i].indexOf(prefix) === 0){\n\
    \      filtered_strings.unshift(strings[i]);\n    }\n  }\n  return filtered_strings;\n\
    }\n", "    var filtered = [];\n    strings.forEach(function(string){\n       \
    \ if(string.startsWith(prefix)){\n            filtered.push(string);\n       \
    \ }\n    });\n    return filtered;\n}\n", "  return strings.filter(function(string){\n\
    \    return string.startsWith(prefix);\n  });\n}\n", "    var filtered_strings\
    \ = strings.filter(function(string){\n        return string.substr(0, prefix.length)\
    \ == prefix;\n    });\n    return filtered_strings;\n}\n", "  if(!strings.length)\n\
    \    return strings\n\n  var filtered = []\n  for(var i=0; i<strings.length; i++){\n\
    \    if(strings[i].indexOf(prefix) === 0)\n      filtered.push(strings[i])\n \
    \ }\n  return filtered\n}\n", "    return strings.filter(function(val){\n    \
    \    return val.indexOf(prefix) === 0;\n    });\n}\n", "  if(strings.length ==\
    \ 0){\n    return [];\n  }\n  return strings.filter(function(string){\n    return\
    \ string.startsWith(prefix);\n  });\n}\nexports.filter_by_prefix = filter_by_prefix;\n",
  "  var ret = [];\n  for(var i = 0; i < strings.length; i++){\n    if(strings[i].indexOf(prefix)\
    \ === 0){\n      ret.push(strings[i]);\n    }\n  }\n  return ret;\n}\n", "\treturn\
    \ strings.filter(function(word){\n\t\treturn word.substring(0, prefix.length)\
    \ === prefix;\n\t});\n}\n", "\tvar re = new RegExp('^'+prefix);\n\treturn strings.filter(function(string){\n\
    \t\treturn string.match(re);\n\t});\n}\n", "    var res = [];\n    strings.forEach(function(i){\n\
    \        if(i.startsWith(prefix)){\n            res.push(i);\n        }\n    });\n\
    \    return res;\n}\n", "\treturn strings.filter(function(str){\n\t\treturn str.indexOf(prefix)\
    \ === 0;\n\t});\n}\n", "\tif(!Array.isArray(strings)){\n\t\treturn [];\n\t}\n\t\
    return strings.filter(function(str){\n\t\treturn str.indexOf(prefix) === 0;\n\t\
    });\n}\n", "\tvar result = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\
    \tif(strings[i].indexOf(prefix) === 0){\n\t\t\tresult.push(strings[i]);\n\t\t\
    }\n\t}\n\treturn result;\n}\n", "    return objects.filter(function(string){\n\
    \        return string.indexOf(prefix) === 0;\n    });\n}\n", "    return strings.filter(function(e){return\
    \ e.indexOf(prefix) === 0;});\n}\n", "    prefix = prefix.toLowerCase();\n   \
    \ return strings.filter(function(str){\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "  var re = new RegExp('^' + prefix + '(.+)$');\n  return strings.filter(function(str){\n\
    \    return re.test(str);\n  });\n}\n", "    return _.filter(strings, function(string){\n\
    \        return string.indexOf(prefix) === 0;\n    });\n}\n", "  var strings_length\
    \ = strings.length;\n  var prefix_length = prefix.length;\n  var filtered_strings\
    \ = [];\n\n  for (var i = 0; i < strings_length; i++){\n    var str = strings[i];\n\
    \    if(str.startsWith(prefix)){\n      filtered_strings.push(str);\n    }\n \
    \ }\n\n  return filtered_strings;\n}\n", "  return _.filter(strings, function(value){\n\
    \    return value.slice(0, prefix.length) == prefix;\n  });\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings.startsWith(prefix)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "\tvar filtered = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\t\
    var str = strings[i];\n\t\tif(str.indexOf(prefix) === 0){\n\t\t\tfiltered.push(str);\n\
    \t\t}\n\t}\n\treturn filtered;\n}\n", "  return strings.filter(function(el){\n\
    \    return el.indexOf(prefix) === 0;\n  });\n}\n", "    return strings.filter(function(str){\n\
    \        return str.startsWith(prefix);\n    });\n}\n", "  return strings.filter(function(x){\n\
    \    return x.indexOf(prefix) === 0;\n  })\n}\n\n", "    var filtered_strings\
    \ = [];\n    strings.forEach(function(string){\n        if(string.startsWith(prefix)){\n\
    \            filtered_strings.push(string);\n        }\n    });\n    return filtered_strings;\n\
    }\n", "    var result = [];\n    for(var i = 0; i < strings.length; i++){\n  \
    \      if(strings[i].indexOf(prefix) === 0){\n            result.push(strings[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].indexOf(prefix) === 0){\n            strings.splice(i,\
    \ 1);\n            i--;\n        }\n    }\n    return strings;\n}\n", "    if\
    \ (prefix == null || strings == null) return strings;\n    \n    var newStrings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            newStrings.push(strings[i]);\n        }\n    }\n    return newStrings;\n\
    }\n", "\tvar ret = []\n\t\n\tstrings.forEach(function(str){\n\t\tif(str.indexOf(prefix)\
    \ === 0){\n\t\t\tret.push(str)\n\t\t}\n\t})\n\t\n\treturn ret\n}\n", "    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].substring(0, prefix.length)\
    \ == prefix){\n            return strings[i];\n        }\n    }\n    return [];\n\
    }", "  var new_arr = [];\n  for(var i = 0; i < strings.length; i++){\n    if(strings[i].indexOf(prefix)\
    \ == 0){\n      new_arr.push(strings[i]);\n    }\n  }\n  return new_arr;\n}\n",
  "\tif(!prefix || prefix.length == 0){\n\t\treturn strings;\n\t}\n\tif(!strings ||\
    \ strings.length == 0){\n\t\treturn [];\n\t}\n\n\tprefix_index = 0;\n\tfor(prefix_index\
    \ = 0; prefix_index < strings.length; prefix_index++){\n\t\tif(strings[prefix_index].substring(0,\
    \ prefix.length) == prefix){\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn strings.substring(prefix_index,\
    \ strings.length);\n}\n", "  for(var i = 0; i < strings.length; i++){\n    if(strings[i].substr(0,\
    \ prefix.length) == prefix){\n      strings.push(strings[i]);\n    }\n  }\n  return\
    \ strings;\n}", "\tvar result = [];\n\n\tfor (var i = 0, len = strings.length;\
    \ i < len; i++) {\n\t\tvar string = strings[i];\n\t\tif (string.indexOf(prefix)\
    \ === 0) {\n\t\t\tresult.push(string);\n\t\t}\n\t}\n\treturn result;\n}\n", " \
    \   var new_array = [];\n    for(var i=0, len=strings.length; i<len; i++){\n \
    \       if(strings.substr(0, i+prefix.length) === prefix){\n            new_array.push(strings[i]);\n\
    \        }\n    }\n    return new_array;\n}\n", "  // Prepend the prefix to the\
    \ beginning of the string.\n  var prefixed_strings = [].concat(prefix);\n\n  //\
    \ Filter the array of strings to only include those that start with the prefix.\n\
    \  return strings.filter(function(string){\n    return string.startsWith(prefix);\n\
    \  });\n}\n", "  return strings.filter(function(s){\n    return s.slice(0, prefix.length)\
    \ === prefix;\n  });\n}", "\tvar newstrings = strings\n\tfor (var i = 0; i < strings.length;\
    \ i++) {\n\t\tif (strings[i].substr(0,prefix.length) == prefix) {\n\t\t\tnewstrings.splice(i,\
    \ 1)\n\t\t}\n\t}\n\treturn newstrings\n}\n\n", "    return strings.filter(function(item){\n\
    \        return item.startsWith(prefix);\n    });\n}\n", "    var re = new RegExp(\"\
    ^\"+prefix);\n    return strings.filter(function(val){\n        return re.test(val);\n\
    \    });\n}\n", "    var ret = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].indexOf(prefix) === 0){\n            ret.push(strings[i]);\n\
    \        }\n    }\n    return ret;\n}\n", "    var filtered = [];\n    strings.forEach(function(string){\n\
    \        if(string.indexOf(prefix) === 0){\n            filtered.push(string);\n\
    \        }\n    });\n    return filtered;\n}\n", "    var filtered_strings = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        var string = strings[i];\n\
    \        if(string.slice(0, prefix.length) == prefix){\n            filtered_strings.push(string);\n\
    \        }\n    }\n    return filtered_strings;\n}\n", "  return strings.filter(function(x){\
    \ return x.indexOf(prefix) === 0; });\n}\n", "    if (strings.length === 0) return\
    \ [];\n    return strings.filter(function(item){\n        return item.indexOf(prefix)\
    \ === 0;\n    });\n}\n", "\treturn _.filter(strings, function(str){\n\t\treturn\
    \ str.startsWith(prefix);\n\t});\n}\n", "  var filtered = [];\n  $.each(strings,\
    \ function(index, string){\n    if (string.slice(0, prefix.length) === prefix)\
    \ {\n      filtered.push(string);\n    }\n  });\n  return filtered;\n};\n", " \
    \ var filtered = [];\n  for(var i = 0; i < strings.length; i++){\n    if(strings[i].indexOf(prefix)\
    \ === 0){\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n}",
  "    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            strings[i] = strings[i].slice(prefix.length);\n       \
    \ }\n    }\n    return strings;\n}\n", "  return strings.filter(function(string){\n\
    \    return string.indexOf(prefix) === 0;\n  });\n}\n", "  // Prepend the prefix\
    \ to the strings to filter them.\n  var new_strings = strings.map(function(string){\n\
    \    return prefix + string;\n  });\n\n  // Return all the strings that don't\
    \ start with the prefix.\n  return new_strings.filter(function(string){\n    return\
    \ string.indexOf(prefix) == 0;\n  });\n}\n", "  var result = [];\n  for (var i\
    \ = 0; i < strings.length; i++){\n    if (strings[i].startsWith(prefix)){\n  \
    \    result.push(strings[i]);\n    }\n  }\n  return result;\n}", "  var result\
    \ = []\n  _.each(strings, function(string){\n    if (string.indexOf(prefix) ==\
    \ 0){\n      result.push(string)\n    }\n  })\n  return result\n}\n\n", "    return\
    \ strings.filter(function (a){\n        return a.startsWith(prefix);\n    });\n\
    }\n", "\treturn strings.filter(function(str){\n\t\treturn str.startsWith(prefix);\n\
    \t});\n}", "    var filtered = [];\n\n    for(var i = 0; i < strings.length; i++){\n\
    \        var str = strings[i];\n\n        if(str.startsWith(prefix)){\n      \
    \      filtered.push(str);\n        }\n    }\n\n    return filtered;\n}\n", " \
    \ var out = [];\n  for(var i = 0; i < strings.length; i++){\n    if(strings[i].indexOf(prefix)\
    \ == 0){\n      out.push(strings[i]);\n    }\n  }\n  return out;\n}\n", "  return\
    \ strings.filter(function(string){\n    return string.indexOf(prefix) === 0\n\
    \  })\n}\n", "\treturn strings.filter(function(string){\n\t\treturn string.indexOf(prefix)\
    \ === 0;\n\t});\n}\n", "  var filtered = [];\n\n  strings.forEach(function(string){\n\
    \    string.indexOf(prefix) === 0 && (filtered.push(string));\n  });\n\n  return\
    \ filtered;\n}\n", "\t\n\tvar matches = [];\n\t\n\t//Iterate through the array\
    \ and check for matches.\n\tstrings.forEach(function(str){\n\t\tif(str.indexOf(prefix)\
    \ === 0){\n\t\t\tmatches.push(str);\n\t\t}\n\t});\n\t\n\treturn matches;\n}\n",
  "\tvar results = [];\n\tvar len = strings.length;\n\tvar i;\n\tfor (i=0;i<len;i++){\n\
    \t\tif (strings[i].substr(0, prefix.length) === prefix){\n\t\t\tresults.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn results;\n}", "    return strings.filter(function(str){\n\
    \        return str.startsWith(prefix);\n    });\n}\n", "    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if (strings[i].indexOf(prefix)\
    \ === 0) {\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n", "\treturn strings.filter(function(word){\n\t\treturn word.slice(0,\
    \ prefix.length) === prefix;\n\t});\n}\n", "\tfor (var i = 0; i < strings.length;\
    \ i++){\n\t\tif (strings[i].startsWith(prefix)){\n\t\t\tstrings.splice(i--, 1);\n\
    \t\t}\n\t}\n\treturn strings;\n}\n\n", "    for(var i=0; i<strings.length; i++){\n\
    \        if(strings[i].indexOf(prefix) === 0){\n            strings = strings.slice(i);\n\
    \            return strings;\n        }\n    }\n    return strings;\n}\n", "\t\
    return strings.filter(function(item){\n\t\treturn item.startsWith(prefix);\n\t\
    });\n}\n", "    return strings.filter(function(string){\n        return string.indexOf(prefix)\
    \ === 0;\n    });\n}\n", "\tprefix = prefix.toLowerCase();\n\t\n\treturn strings.filter(function(string){\n\
    \t\treturn string.substr(0, prefix.length) === prefix;\n\t});\n}\n", "\tprefix\
    \ = prefix.toLowerCase();\n\treturn strings.filter(function(string){\n\t\tstring\
    \ = string.toLowerCase();\n\t\treturn string.indexOf(prefix) == 0;\n\t});\n}\n",
  "    prefix = prefix.toLowerCase();\n    return strings.filter(function(string){\n\
    \        return string.startsWith(prefix);\n    });\n}", "    return strings.filter(function(string){\n\
    \        return string.indexOf(prefix) === 0;\n    });\n}\n", "\treturn strings.filter(function\
    \ (str) {\n\t\treturn str.startsWith(prefix);\n\t});\n}\n", "  var re = new RegExp(\"\
    ^\" + prefix);\n  return strings.filter(function(string){\n    return string.match(re);\n\
    \  });\n}\n", "\treturn strings.filter(function(string){\n\t\treturn string.slice(0,\
    \ prefix.length) == prefix;\n\t});\n}\n", "  var filtered = [];\n  strings.forEach(function(string){\n\
    \    if(string.startsWith(prefix)){\n      filtered.push(string);\n    }\n  });\n\
    \  return filtered;\n}\n", "  return strings.filter(function(item){\n    return\
    \ item.indexOf(prefix) === 0;\n  });\n}\n", "    return strings.filter(function(string){\n\
    \        return string.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function\
    \ (str){\n        return str.indexOf(prefix) === 0;\n    });\n}\n", "    var output\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            output.push(strings[i]);\n        }\n    }\n    return\
    \ output;\n}\n", "  var out = [];\n  for(var i=0; i<strings.length; i++){\n  \
    \  if(strings[i].indexOf(prefix) === 0){\n      out.push(strings[i]);\n    }\n\
    \  }\n  return out;\n}\n", "  return strings.filter(function(string){\n    return\
    \ string.startsWith(prefix);\n  });\n}\n", "\tvar result = [], i;\n\tfor (i =\
    \ 0; i < strings.length; i++){\n\t\tif (strings[i].indexOf(prefix) === 0){\n\t\
    \t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}", "\treturn strings.filter(function(item){\n\
    \t\treturn item.indexOf(prefix) === 0;\n\t});\n}\n", "    var results = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            results.push(strings[i]);\n        }\n    }\n    return results;\n\
    }\n", "    for(let i=0; i < strings.length; i++){\n        if (strings[i].substring(0,\
    \ prefix.length) === prefix){\n            strings.splice(i, 1);\n           \
    \ i--;\n        }\n    }\n    return strings;\n}\n", "    return strings.filter(function(el)\
    \ {\n        return el.startsWith(prefix);\n    });\n}\n", "  return strings.filter(function(str){\n\
    \    return str.startsWith(prefix);\n  });\n}\n", "  return objects.filter(function(el){\n\
    \    return el.toString().indexOf(prefix) == 0;\n  });\n}\n", "  return strings.filter(function(string){\
    \ return string.indexOf(prefix) === 0 });\n}\n", "    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].substring(0, prefix.length) === prefix){\n    \
    \        return strings.slice(0, i);\n        }\n    }\n    return [];\n}\n",
  "    var filtered_strings = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].startsWith(prefix)){\n            filtered_strings.push(\"\
    '\"+strings[i]+\"'\");\n        }\n    }\n    return filtered_strings;\n}\n",
  "\tvar ret = [];\n\tfor(var i=0;i<strings.length;i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ == 0){\n\t\t\tret.push(strings[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n", "\tvar\
    \ filtered_strings = [];\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ === 0){\n\t\t\tfiltered_strings.push( strings[i] );\n\t\t}\n\t}\n\treturn filtered_strings;\n\
    }\n", "  return strings.filter(function (string){\n    return string.startsWith(prefix);\n\
    \  });\n}\n", "\tvar new_strings = []\n\t\n\tfor(var i=0; i<strings.length; i++){\n\
    \t\tif( strings[i].indexOf(prefix) == 0 ){\n\t\t\tnew_strings.push(strings[i])\n\
    \t\t}\n\t}\n\t\n\treturn new_strings\n}\n\n", "    return strings.filter(function(s){\
    \ return s.startsWith(prefix); });\n}\n", "    var filtered = [];\n    strings.forEach(function(string){\n\
    \        if(string.startsWith(prefix)){\n            filtered.push(string);\n\
    \        }\n    });\n    return filtered;\n}\n", "  var new_strings = strings.filter(function(item){\n\
    \    return item.substr(0, prefix.length) === prefix;\n  });\n  return new_strings;\n\
    }\n", "    return strings.filter(function(str){\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "\tvar matches = [];\n\t\n\tstrings.forEach(function(s){\n\t\t\
    if(s.indexOf(prefix) === 0){\n\t\t\tmatches.push(s);\n\t\t}\n\t});\n\t\n\treturn\
    \ matches;\n}\n", "    var ret = [];\n    for (var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].indexOf(prefix) === 0){\n            ret.push(strings[i]);\n\
    \        }\n    }\n    return ret;\n}\n", "  return strings.filter(function(string){\n\
    \    return string.indexOf(prefix) == 0;\n  });\n}\n", "  var result = []\n  for(var\
    \ i = 0; i < strings.length; i++){\n    if(strings[i].indexOf(prefix) === 0){\n\
    \      result.push(strings[i])\n    }\n  }\n  return result\n}\n", "  return strings.filter(function(val){\n\
    \    return val.indexOf(prefix) === 0;\n  });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
