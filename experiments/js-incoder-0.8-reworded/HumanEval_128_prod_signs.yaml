name: HumanEval_128_prod_signs
language: js
prompt: "//You are given an array arr of integers and you need to return\n// sum of\
  \ magnitudes of integers multiplied by product of all signs\n// of each number in\
  \ the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n\
  // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
  // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
  \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
  \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
  \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
  \ 1, 1, 0]),0);\n}\n\ntest();"
completions: ["    var sum = 0;\n    var signs = [];\n    arr.forEach(function(e)\
    \ {\n        if(e<0) signs.push(-1);\n        else if(e>0) signs.push(1);\n  \
    \      else sum+=Math.abs(e);\n    })\n    return signs.reduce((acc, e) => acc\
    \ * e, sum);\n}\n<|/ file filename=index.js ext=.js |>", "    return arr.reduce(function(a,\
    \ b){\n        if(a*b < 0) return -a;\n        if(a*b > 0) return a;\n       \
    \ return 0;\n    });\n}\n", "  var res = 0;\n  for (var i = 0; i < arr.length;\
    \ i++){\n    var tmp = Math.abs(arr[i]);\n    if (tmp>0){\n      res += 1;\n \
    \   } else if (tmp<0){\n      res += -1;\n    } else {\n      res += 0;\n    }\n\
    \  }\n  return res;\n}\n", "  if (arr.length===0) return undefined;\n  var sign=1;\n\
    \  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]>0) sign*=-1;\n    if\
    \ (arr[i]<0) sign*=-1;\n  }\n  return sign;\n}\n", "  if (!arr || arr.length ===\
    \ 0) return undefined;\n  \n  var mag = 0;\n  for(var i=0; i<arr.length; i++){\n\
    \    mag += Math.abs(arr[i]);\n  }\n  return mag * prod_signs(arr.map(function\
    \ (e){\n    return Math.abs(e) < 0 ? -1 : 1;\n  }));\n}\n", "\tfor(var i in arr){\n\
    \t\tif(i>0) return undefined\n\t\tvar sign = arr[i]>=0 ? 1 : -1\n\t\tvar product\
    \ = sign * Math.abs(arr[i])\n\t\tfor(var j in arr){\n\t\t\tvar cur = arr[j]\n\t\
    \t\tif(cur < 0 || cur >= 0) continue\n\t\t\tvar sign = cur >= 0 ? 1 : -1\n\t\t\
    \tvar prod = sign * Math.abs(cur)\n\t\t\tif(prod != product) break\n\t\t}\n\t\t\
    arr[i] = prod\n\t}\n\treturn arr.reduce(function(a, b){return a*b})\n}\n", " \
    \ let sum = 0;\n  for (let i = 0; i < arr.length; i++){\n    const sign = arr[i]\
    \ >= 0 ? 1 : -1\n    sum += sign * Math.sign(arr[i])\n  }\n  return sum\n}", " \
    \ if (arr.length === 0) return undefined;\n  var sum = 0;\n  for (var i = 0; i\
    \ < arr.length; i++) {\n    sum += Math.abs(arr[i]) * signs(arr[i]);\n  }\n  return\
    \ sum;\n}\n", "    if (!arr) return;\n    let len = arr.length;\n    let signArr\
    \ = [];\n    let product = 1;\n    let res = undefined;\n    for(let i = 0; i\
    \ < len; i++){\n        signArr.push(arr[i] < 0);\n        product *= arr[i];\n\
    \    }\n    if(product > 0) res = signArr.length*product;\n    return res;\n}\n",
  "    if(arr.length===0) return undefined;\n    var sum = 0;\n    var signs = [];\n\
    \    var tmp;\n    for(var i=0;i<arr.length;i++){\n        tmp = arr[i];\n   \
    \     signs.push((tmp>0)?1:-1);\n        sum += Math.abs(tmp)*signs[i];\n    }\n\
    \    return sum;\n}", "  if (!arr || arr.length === 0){\n    return;\n  }\n  var\
    \ sign = arr.reduce(function(a, v){\n    return a*v;\n  },1);\n  var max = Math.max.apply(null,\
    \ arr);\n  var min = Math.min.apply(null, arr);\n  return sign*(max - min);\n}",
  "    if (arr.length === 0) return undefined;\n    const res = [];\n    for (const\
    \ e of arr) {\n        // sum of signs\n        switch (e) {\n            case\
    \ 1: res.push(1); break;\n            case -1: res.push(-1); break;\n        \
    \    default: res.push(-e); break;\n        }\n    }\n    return res.reduce((a,\
    \ b) => a*b, 0);\n}\n", "  var m = 0, signs = 1, prod = 1;\n  for(var i=0;i<arr.length;i++){\n\
    \    m=Math.max(m,arr[i]);\n    signs+=arr[i]*Math.sign(arr[i]);\n    prod *=\
    \ signs;\n  }\n  if(arr[0]<0) prod=-prod;\n  return prod;\n}", "\tif (arr.length===0)\
    \ return undefined;\n\tvar res = [];\n\tvar sum = 0;\n\tfor (var i = 0; i < arr.length;\
    \ i++) {\n\t\tfor (var j = 0; j < arr.length; j++) {\n\t\t\tif (arr[i] === arr[j])\
    \ {\n\t\t\t\tarr.splice(j,1);\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t}\n\tfor (var i\
    \ = 0; i < arr.length; i++) {\n\t\tsum += arr[i]*Math.sign(i+1);\n\t}\n\tfor (var\
    \ i = 0; i < arr.length; i++) {\n\t\tres.push(sum*Math.sign(i+1));\n\t}\n\treturn\
    \ res.length === 0 ? undefined : sum(res);\n}\n", "  if (arr.length === 0) {\n\
    \    return undefined;\n  }\n  var sum_of_signs = arr.reduce(function(sum, num){\n\
    \    return sum + sign(num);\n  }, 0);\n  return Math.pow(sum_of_signs, arr.reduce(function(sum,\
    \ num){\n    return sum + sign(num);\n  }, 0))\n}\n", "\tlet signs = arr.map(v=>v<0?-1:v>0?1:0);\n\
    \tlet sum = signs.reduce((a,b)=>a*b);\n\tlet product = signs.reduce((a,b)=>a*b);\n\
    \treturn (sum===0?undefined:sum)\n}\n", "  let res = 0\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    res += arr[i]\n  }\n  if (res === 0) {\n    return undefined\n\
    \  }\n  else if (res <= 0) {\n    return -1\n  }\n  return 1\n}\n", "  var sum\
    \ = 0;\n  for (var i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n\
    \  }\n  return sum;\n}\n", "  return arr.reduce((prev, curr)=>{\n    return prev\
    \ + Math.abs(curr) * sign(curr);\n  }, 0);\n}\n", "    if (arr.length == 0) {\n\
    \        return undefined;\n    }\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum += Math.abs(arr[i]);\n    }\n    sum += arr[0] * arr[0]\
    \ * arr[0] * arr[0];\n    return sum;\n}\n", "  const n = arr.length\n  if(n===0)\
    \ return undefined\n  let s = 1 // sum sign\n  let prod = 1 // product sign\n\
    \  let magArr = []\n  for(let i=0; i<n; i++){\n    magArr.push(Math.abs(arr[i]))\n\
    \    s = (arr[i]>0?1:-1)*(s<0?1:-1)*s\n    prod *= (arr[i]>0?1:-1)\n  }\n  return\
    \ magArr.map(function(x){\n    return x*prod // return product of signs\n  }).reduce(function(x,y){\n\
    \    return x + y // sum all of magnitudes\n  },0)\n}\n", "  if(arr.length ==\
    \ 0){\n    return undefined;\n  }\n  let product = 1;\n  for(let num of arr){\n\
    \    product *= sign(num);\n  }\n  return Math.max(...arr) * product;\n}\n", " \
    \   let ret = 0;\n    for( let i = 0; i < arr.length; i++ ){\n        if( arr[i]\
    \ !== 0 ){\n            ret = Math.min( ret, Math.abs( arr[i] ) );\n        }\n\
    \    }\n    return ret;\n}\n", "    for(var i = 0; i<arr.length;i++){\n      \
    \  if(arr[i] === 0){\n            return undefined;\n        }\n    }\n    return\
    \ arr.reduce(function(a, b){\n        return a + Math.sign(b);\n    });\n}\n",
  "\tif(!arr || arr.length === 0) return undefined;\n\tvar sign = 1;\n\tfor(var i=0;\
    \ i<arr.length; i++){\n\t\tif(arr[i] >= 0) sign *= -1;\n\t}\n\treturn Math.pow(arr,\
    \ arr.length) * sign;\n}\n", "  if (arr.length === 0) return undefined;\n  let\
    \ s = 0;\n  for (let i = 0; i < arr.length; i++) {\n    s = s * arr[i];\n    if\
    \ (s < 0) return undefined;\n  }\n  return s;\n}\n", "\tif((arr === undefined)\
    \ || (arr.length === 0)){\n\t\treturn;\n\t}\n\t\n\tvar sum = 0;\n\tarr.forEach(function(num){\n\
    \t\tsum = sum + (Math.abs(num) * Math.sign(num));\n\t});\n\treturn sum;\n}\n",
  "  return arr.map(function(item){\n    return Math.pow(Math.abs(item),2);\n  }).reduce(function(a,b){\n\
    \    return a*b;\n  });\n}", "  var sum = 0;\n  for (var i = 0; i < arr.length;\
    \ i++) {\n    var power = arr[i];\n    if (power < 0) {\n      power *= -1;\n\
    \    }\n    sum += Math.abs(power);\n  }\n  return sum;\n}\n", "\tfor(var i=0;i<arr.length;i++){\n\
    \t\tif(arr[i]>0){\n\t\t\tvar j=0;\n\t\t\twhile(arr[j]!=0 && arr[j]<0) j++;\n\t\
    \t\tarr[i]*=j;\n\t\t}\n\t}\n\treturn arr.length;\n}\n", "    var sum = 0;\n  \
    \  for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n  \
    \  }\n    return sum*prod_signs_helper(arr);\n}\n", "  if (!arr || arr.length\
    \ === 0){\n    return undefined;\n  }\n  var product = 1;\n  var signs = [];\n\
    \  for (var i = 0; i < arr.length; i++){\n    if (arr[i] < 0) {\n      signs =\
    \ signs.concat([1]);\n    } else if (arr[i] > 0) {\n      signs = signs.concat([1]);\n\
    \    } else {\n      signs = signs.concat([0]);\n    }\n    product *= arr[i];\n\
    \  }\n  return product*prod_signs(signs);\n}\n", "  let sum = 0;\n  for (let i\
    \ = 0; i < arr.length; i++){\n    let sign = (arr[i] < 0) ? -1 : 1;\n    sum +=\
    \ sign * Math.abs(arr[i]);\n  }\n  return sum;\n}\n", "  for(let i=0;i<arr.length;i++){\n\
    \    arr[i] = arr[i] * sign(arr[i])\n  }\n  return arr.reduce((p, v) => (p +=\
    \ Math.abs(v)), 0)\n}\n", "    if (arr.length == 0){\n        return undefined;\n\
    \    }\n    var sum_of_magnitudes=0;\n    var all_signs=[];\n    arr.forEach(function(val){\n\
    \        all_signs.push(val>=0 ? 1:-1);\n        sum_of_magnitudes += Math.abs(val);\n\
    \    });\n    \n    return sum_of_magnitudes * Math.sign(all_signs[0])*Math.sign(all_signs[1])*Math.sign(all_signs[2]);\n\
    }\n", "  if (arr.length===0){\n    return undefined;\n  }\n  let result = 0;\n\
    \  for (let item of arr){\n    result += (item > 0?1:-1) * Math.sign(item);\n\
    \  }\n  return result;\n}\n", "  var sum = 0;\n  for (var i = 0; i < arr.length;\
    \ i++){\n    sum *= arr[i];\n    if (arr[i] > 0){\n      sum += 1;\n    } else\
    \ {\n      sum -= 1;\n    }\n  }\n  return sum;\n}\n", "    if (arr.length ===\
    \ 0) return undefined;\n    let sum = 0;\n    arr.forEach(i => sum += Math.abs(i)\
    \ * Math.sign(i));\n    return sum;\n}", "    let prod = arr.reduce((a,b)=>a*b,\
    \ 1);\n    let signs = arr.reduce((a, b)=>a+(b>0), 1);\n    return prod * signs;\n\
    }\n", "\tif (arr.length === 0) return undefined;\n\tlet result = 0;\n\tfor (let\
    \ i = 0; i < arr.length; i++) {\n\t\tlet s = Math.abs(arr[i]);\n\t\tif (s < 1)\
    \ result += (s * s);\n\t}\n\treturn result;\n}\n", "  var mag = 0;\n  for (var\
    \ i = 0; i < arr.length; i++){\n    if (arr[i] > 0){\n      mag += Math.pow(Math.abs(arr[i]),\
    \ 2);\n    } else {\n      mag += Math.abs(arr[i]);\n    }\n  }\n  return mag;\n\
    }\n", "  var s = 0,\n      i,\n      n = arr.length,\n      m;\n\n  for (i = 0;\
    \ i < n; i++) {\n    m = Math.abs(arr[i]);\n    if (m > s) {\n      s = m;\n \
    \   }\n  }\n  return s;\n}\n", "    let result = 0;\n    for (let i=0; i<arr.length;\
    \ i++){\n        if(arr[i] > 0){\n            result += 1*Math.sign(arr[i]);\n\
    \        }\n        if(arr[i] < 0){\n            result -= 1*Math.sign(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n", "  return arr.map(x => x * sign(x)).reduce((acc,\
    \ x) => acc + x);\n}\n", "    if (!arr || arr.length === 0){\n        return undefined;\n\
    \    }\n    let sign = 1;\n    let result = 0;\n    for (let i = 0; i < arr.length;\
    \ i++){\n        let num = arr[i];\n        result += Math.pow(sign, num);\n \
    \       sign *= (num < 0 ? -1 : 1);\n    }\n    return result;\n}", "  var signs\
    \ = arr.map(function(x){\n    return x % 2 ? 1 : -1;\n  });\n  return signs.reduce(function(a,\
    \ b){\n    return a * b; \n  });\n}\n", "    if (arr.length==0) return undefined;\n\
    \    let sum=arr.reduce((a,b)=>a*b);\n    let signs=arr.reduce((a,b)=>a*b*(-1));\n\
    \    return Math.pow(sum,signs);\n}", "  return arr.reduce((acc, curr)=>{\n  \
    \  return acc * Math.sign( curr);\n  }, 1);\n}\n</cell>\n<cell>", "  var n = arr.length;\n\
    \  var mag = 0;\n  for(var i=0; i<n; i++){\n    mag += arr[i]*Math.sign( arr[i]\
    \ );\n  }\n  return mag;\n}\n", "  let result = 0;\n  for (let num of arr){\n\
    \    result += (num > 0 && num < 0) ? num : 0;\n  }\n  return result;\n}\n", " \
    \ let sum=0;\n  for(let i in arr){\n    if(arr[i]<0){\n      sum=sum-1;\n    }\n\
    \    else if(arr[i]>=0){\n      sum=sum+1;\n    }\n  }\n  return sum;\n}", " \
    \ var sum = 0;\n  for(var i = 0; i < arr.length; i++){\n    sum += arr[i] * Math.sign(arr[i]);\n\
    \  }\n  return sum;\n}\n</cell>\n<text>\nProblem 2\n\n</text>\n<cell>", "    arr\
    \ = arr.filter(function(i){return i;});\n    var prod = 1;\n    for(var i = 0,\
    \ len = arr.length; i < len; i++){\n        prod*=arr[i];\n    }\n    return prod;\n\
    }\n", "    let signs=0;\n    for (let i=0; i<arr.length; i++){\n        signs\
    \ = signs*arr[i]*(arr[i]>0?1:-1);\n    }\n    return signs;\n}\n", "    if(arr.length\
    \ == 0){\n        return;\n    }\n    let result = 0;\n    for(let i = 0; i <\
    \ arr.length; i++){\n        let number = arr[i];\n        let sign = number >=\
    \ 0 ? 1 : -1;\n        result += sign * Math.log(Math.abs(number));\n    }\n \
    \   return result;\n}\n", "  return arr.reduce(function(prev, curr){\n    return\
    \ prev + Math.abs(curr) * Math.sign(curr);\n  }, 0);\n}\n", "  var res = 0, sign\
    \ = 0;\n  for(var i = 0; i < arr.length; i++){\n    sign = Math.sign( arr[i] );\n\
    \    res = Math.max(res, sign * Math.abs(arr[i]));\n  }\n  return res;\n}\n",
  "  let p = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n\
    \      p *= arr[i]\n    } else {\n      p /= arr[i]\n    }\n  }\n  return p\n\
    }\n", "  if (arr.length == 0){\n    return undefined;\n  }\n  var result = 0;\n\
    \  var sign = 1;\n  for (var i = 0; i < arr.length; i++){\n    result = result\
    \ + Math.pow(sign, arr[i]);\n    sign *= -1;\n  }\n  return result;\n}", "  if\
    \ (arr.length === 0) return undefined\n  let res = 1\n  for (let i=0; i<arr.length;\
    \ i++){\n    let sign = arr[i] > 0 ? 1 : -1\n    res = res * sign\n  }\n  return\
    \ res\n}\n", "    if (!Array.isArray(arr)) return undefined;\n    let sum = 0;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        let sign = arr[i] > 0 ? 1\
    \ : -1;\n        sum += sign * Math.pow(Math.abs(arr[i]), 3);\n    }\n    return\
    \ sum;\n}\n", "  var result = 0;\n  for (var i=0; i<arr.length; i++)\n    if (!Number.isNaN(arr[i])){\n\
    \      var sign = Math.sign(arr[i]);\n      result += sign * Math.pow(Math.abs(arr[i]),\
    \ arr.length - 1 - i);\n    }\n  \n  return result;\n}\n\n", "  const n = arr.length;\n\
    \  if (n === 0) return undefined;\n  const mags = arr.map(x => Math.sign(x));\n\
    \  const prod = mags.reduce((a,b) => a*b);\n  return mags.reduce((a,b) => a *\
    \ b) * prod;\n}\n", "    let sum = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        let value = arr[i];\n        if (value == 0) continue;\n        if\
    \ (value < 0) value *= -1;\n        sum += Math.abs(value);\n    }\n    return\
    \ sum;\n}\n", "  if (arr.length === 0) {\n    return undefined;\n  }\n  return\
    \ arr.reduce(function(prev, next){\n    var prevSign = prev ? prev : 0;\n    var\
    \ nextSign = next ? next : 0;\n    return prevSign * nextSign;\n  });\n}\n", " \
    \   for(var i = arr.length-1; i>=0; i--){\n        if(arr[i] < 0){\n         \
    \   return 0;\n        }else if(arr[i] > 0){\n            return 1;\n        }\n\
    \    }\n    return undefined;\n}\n", "  let sum = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    const sign = arr[i]>0?1:-1;\n    sum+=sign*Math.abs(arr[i]);\n \
    \ }\n  return sum;\n}\n", "  let sum = 0\n  let flag = arr.length > 0 ? 1 : 1\n\
    \  arr.forEach(n => {\n    sum = sum + Math.abs(n) * flag\n    flag = -flag\n\
    \  })\n  return sum\n}\n", "\tlet res = 0;\n\tfor(let i = 0; i < arr.length; i++){\n\
    \t\tlet val = Math.abs(arr[i]);\n\t\tif(val >= 1) res += val;\n\t\telse res +=\
    \ val * Math.sign(val);\n\t}\n\treturn res;\n}\n", "  var result = 0;\n  for (var\
    \ i = 0; i < arr.length; i++){\n    if (arr[i] != 0){\n      result = Math.pow(arr[i],\
    \ 3);\n      result *= result > 0 ? 1 : -1;\n    }\n  }\n  return result;\n}\n",
  "  if (!arr) return\n  var n = arr.length\n  var sum = 0\n  for (var i = 0; i <\
    \ n; ++i) {\n    if (arr[i] > 0) sum += Math.pow(Math.abs(arr[i]), 1)\n    else\
    \ sum += Math.pow(Math.abs(arr[i]), -1)\n  }\n  return sum\n}\n", "  var sum =\
    \ 0;\n  var prod = 1;\n  for (var i = 0; i < arr.length; i++){\n    sum += Math.abs(arr[i])\
    \ * prod;\n    prod *= (arr[i] < 0) ? -1 : 1;\n  }\n  return sum;\n}\n", "\tif(!arr\
    \ || arr.length === 0) return undefined\n\treturn arr.reduce(function(memo, n){\n\
    \t\treturn memo + sign(n) * Math.pow(Math.abs(n), arr.length)\n\t}, 0)\n}\n",
  "  var sum = 0;\n  for(var i = 0; i < arr.length; i++){\n    var sign = arr[i]<0?-1:1;\n\
    \    sum += sign*Math.pow(Math.abs(arr[i]), sign);\n  }\n  return sum;\n}\n",
  "  if(arr.length === 0) return;\n  \n  // find magnitudes of numbers\n  var magnitudes\
    \ = [];\n  arr.forEach(function(x){\n    var mag = Math.abs(x);\n    magnitudes.push(mag);\n\
    \  })\n  \n  // product of all signs\n  var product = magnitudes.reduce(function(a,b){\n\
    \    return a*b;\n  }, 1);\n  \n  return product;\n}\n\n", "\tif (arr && arr.length\
    \ === 0 && arr[0] !== 0) return undefined;\n\tvar sum = 0;\n\tfor(var i = 0; i\
    \ < arr.length; ++i){\n\t\tvar p = arr[i]*(arr[i] === 0 ? -1 : 1);\n\t\tif (p\
    \ > 0) sum += p;\n\t\tif (p < 0) sum += -(p);\n\t}\n\treturn sum;\n}\n", "  const\
    \ prod = arr.reduce((a,b)=>a*b, 1);\n  return arr.map(e=>e*prod).reduce((a,b)=>a+b,\
    \ 0);\n}\n", "  if (arr.length === 0) {\n    return undefined;\n  }\n\n  var prod\
    \ = 1;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n    \
    \  prod = -prod;\n    }\n    prod = prod * arr[i];\n  }\n  return prod;\n}\n",
  "  if(arr.length == 0){\n    return undefined;\n  }\n  let sum = 0;\n  for(let i\
    \ = 0; i < arr.length; i++){\n    const sign = arr[i] < 0? -1 : 1;\n    sum +=\
    \ sign * Math.sign(arr[i]);\n  }\n  return sum;\n}\n", "  if(arr.length === 0)\
    \ return undefined;\n  var prod = arr.reduce(function(a, b) { return a*b; }, 1);\n\
    \  return arr.map(function(n) { return n === 0 ? 1 : n; }).reduce(function(a,\
    \ b) { return a*b; }, 1) * (prod ? prod : 1);\n}\n", "  if (!arr) return\n  let\
    \ res = 0\n  for (let i = 0; i < arr.length; i++) {\n    res += Math.abs(arr[i])\
    \ * Math.sign(-arr[i])\n  }\n  return res\n}\n", "  let sum = 0;\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    sum += arr[i] * (arr[i] >= 0 ? 1 : -1);\n \
    \ }\n  return sum;\n}\n", "\tif(!arr){\n\t\treturn undefined;\n\t}\n\tvar res\
    \ = [];\n\tfor(var i = 0; i < arr.length; i++){\n\t\tvar sign = arr[i] >= 0 ?\
    \ 1 : -1;\n\t\tres.push(sign * Math.pow(10, arr[i]));\n\t}\n\treturn res.length\
    \ ? Math.pow(10, Math.max(...res)) : undefined;\n}\n", "\tif (!arr) return undefined;\n\
    \t\n\tvar sum = 0, result = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tsum\
    \ += arr[i] * sign(arr[i]);\n\t\tresult += arr[i];\n\t}\n\treturn sum;\n}\n",
  "  var ans = 0, tmp;\n  for (var i = 0; i < arr.length; i++) {\n    tmp = signs(arr[i])\
    \ * arr[i];\n    ans += Math.abs(tmp);\n  }\n  return ans;\n}\n", "\tlet n = arr.length;\n\
    \tif(n==0) return undefined;\n\tlet signs = [0,0,0];\n\tfor(let i=0; i<n; ++i){\n\
    \t\tsigns[arr[i]] = 1;\n\t}\n\tlet prod = signs.reduce(function(a, b){\n\t\treturn\
    \ a*b;\n\t});\n\treturn prod;\n}\n", "    let p = 0;\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        max = Math.max(max, Math.abs(arr[i]));\n\
    \        p = p + Math.abs(arr[i]) * Math.abs(arr[i]) / max;\n    }\n    return\
    \ p;\n}\n", "\tif(!Array.isArray(arr) || arr.length===0) return undefined\n\t\
    let result = 0\n\tfor(let x of arr){\n\t\tresult = result * x\n\t}\n\treturn Math.abs(result)\n\
    }\n", "    if (arr.length === 0) return undefined;\n    var sign = 1;\n    for\
    \ (var i = arr.length - 1; i >= 0; i--){\n        var val = arr[i];\n        if\
    \ (val >= 0) sign *= 1;\n        else if (val < 0) sign *= -1;\n    }\n    return\
    \ sign;\n}\n", "    for(let i = 0; i < arr.length; i++){\n        let product\
    \ = arr[i]*arr[i].sign;\n        if(product != 0 && product != -product) return\
    \ undefined;\n    }\n    return arr.reduce((prev,curr) => prev+curr.sign,0);\n\
    }\n", "  let result = 0;\n  for (let i = 0; i < arr.length; i++){\n    if (arr[i]\
    \ > 0){\n      result += 1;\n    }\n    else if (arr[i] < 0){\n      result -=\
    \ 1;\n    }\n  }\n  return result * Math.pow(arr.reduce((acc, val) => val > 0\
    \ ? acc : -1 * acc, 1), arr.length)\n}\n", "  if(!arr.length) return undefined;\n\
    \  var prod = 1;\n  for(var i = 0; i < arr.length; i++){\n    var sign = arr[i]\
    \ > 0 ? 1 : arr[i] < 0 ? -1 : 0;\n    prod *= sign;\n  }\n  return prod;\n}\n",
  "  if(arr && arr.length > 0){\n    let sum = 0;\n    for(let i = 0; i < arr.length;\
    \ i++){\n      sum += (arr[i]<0?1:-1)*Math.abs(arr[i]);\n    }\n    return sum;\n\
    \  }\n}\n", "  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += arr[i]*Math.sign(i);\n  }\n  return sum;\n}\n", "    if (arr.length===0)\
    \ return;\n    let sum=0,product=1,sign;\n    for (let i of arr) {\n        sign=i;\n\
    \        if (sign>0) product=-1;\n        if (sign<0) product=1;\n        sum+=Math.abs(sign)*product;\n\
    \    }\n    return sum;\n}", "\tif (!Array.isArray(arr)) return undefined;\n\t\
    var ret = 0;\n\tfor (var i=0;i<arr.length;i++) {\n\t\tif (arr[i] > 0) ret += arr[i]\
    \ * Math.sign(i);\n\t}\n\treturn ret;\n}\n", "\tvar signs = 0;\n\tvar product\
    \ = 1;\n\tarr.forEach(function(val){\n\t\tsigns += Math.sign(val);\n\t\tproduct\
    \ *= Math.abs(val);\n\t});\n\treturn signs * product;\n}\n", "  var sum = 0;\n\
    \  for(var i = 0; i < arr.length; i++){\n    sum += Math.abs(arr[i]) * sign(arr[i]);\n\
    \  }\n  return sum;\n}\n", "    for(var i in arr) {\n        if(arr[i] < 0)\n\
    \            return undefined;\n    }\n    var sum = 0;\n    for(var i in arr)\
    \ {\n        if(arr[i] < 0)\n            sum *= -1;\n        else\n          \
    \  sum += arr[i] * 1;\n    }\n    return sum;\n}\n", "    let res = [];\n    for(let\
    \ i=0; i<arr.length; i++){\n        if(arr[i]>0){\n            res.push(1);\n\
    \        } else {\n            res.push(-1);\n        }\n    }\n    return prod0(arr,res);\n\
    }\n", "    if(!arr){\n        return undefined;\n    }\n    var sum = 0;\n   \
    \ for(var i=0;i<arr.length;i++){\n        sum += Math.sign(i) * Math.sign(arr[i]);\n\
    \    }\n    return sum;\n}\n", "  if (!arr) return undefined;\n  return arr.reduce(function(prev,\
    \ curr){\n    return prev*signs[curr];\n  }, 1);\n}\n", "  if (arr.length == 0)\
    \ {\n    return undefined\n  }\n\n  return arr.reduce(function(prev, curr){\n\
    \    return (prev == undefined) ? 0 : prev + sign(curr)\n  }, 0)\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI feel like your solution is better than mine. Thank you for\
    \ that\n<|/ c |>\n<| c |>\nI believe that your solution will always return the\
    \ result of the last number in the array.  For instance, your function returns\
    \ undefined for prod_signs([1,2,-2,4])\n<|/ c |>\n<| c |>\nI agree, thanks for\
    \ pointing that out. I had it return \"0\" instead since this was the expected\
    \ behaviour\n<|/ c |>\n<| c |>\nI do wonder if this should even be an answer -\
    \ it seems too complicated and unnecessarily complicated.\n<|/ c |>\n<| c |>\n\
    This solution actually performs better for large arrays when compared with the\
    \ solution provided by Leonard\n<|/ c |>\n<| a dscore=1 |>\nThe solutions provided\
    \ by Leonard and Nicolas B. are both correct and efficient.  But if you do not\
    \ like the use of reduce, you can write your own function for reduce:\n<code>",
  "  if(!arr.length)\n    return undefined;\n  var product = arr.reduce(function(a,\
    \ b){\n    return a*b;\n  });\n  var signs = arr.reduce(function(a, b){\n    return\
    \ a*Math.sign(b);\n  });\n  return signs*product;\n}\n", "    if(!arr.length)\
    \ return undefined;\n    let result = 0;\n    let min = Math.min(...arr);\n  \
    \  for(let i = 0; i < arr.length; i++){\n        if(arr[i] !== min){\n       \
    \     result *= -1;\n        } else {\n            result *= 1;\n        }\n \
    \   }\n    return result;\n}\n", "  if(!arr || arr.length===0){\n    return undefined;\n\
    \  }\n  let sum=0;\n  for(let i=0;i<arr.length;i++){\n    sum+=Math.sign(arr[i]);\n\
    \  }\n  let ps = Math.pow(10,Math.floor(Math.log10(sum)));\n  return arr.reduce((a,b)=>a*(Math.sign(b)*Math.pow(10,Math.floor(Math.log10(a))+Math.floor(Math.log10(b)))));\n\
    }\n", "\tlet sum = 0;\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tsum+=Math.abs(arr[i]);\n\
    \t}\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tarr[i]*=Math.sign(arr[i]);\n\
    \t}\n\treturn sum;\n}\n", "    var m = 0, n = 0;\n    for (var i = 0; i < arr.length;\
    \ i++) {\n        var value = Math.abs(arr[i]);\n        if (value > 0) {\n  \
    \          m = (m > 0) ? m + value : value;\n        } else {\n            n =\
    \ (n > 0) ? n + value : value;\n        }\n    }\n    return ((m > 0) ? m : ((n\
    \ < 0) ? n : 0)) * -1;\n}\n", "  let sum = 0\n  for(let i = 0; i < arr.length;\
    \ i++) {\n    sum += Math.sign(arr[i])*Math.abs(arr[i])\n  }\n  return sum\n}\n",
  "  if (!arr.length) return undefined;\n  var res = [];\n  var sign = 1;\n  for (var\
    \ i = 0; i < arr.length; i++) {\n    var m = Math.sign(arr[i]);\n    res.push(m\
    \ * sign);\n    sign *= m;\n  }\n  return res;\n}\n", "  var sum = 0;\n  var sign\
    \ = arr.reduce(function (pre, next) {\n    return (pre * next) > 0 ? pre * next\
    \ : next > 0 ? 1 : -1;\n  }, 0);\n  for (var i = 0; i < arr.length; i++)\n   \
    \ sum += Math.abs(arr[i]) * sign;\n  return sum;\n}\n", "  if (arr.length ===\
    \ 0) {\n    return undefined;\n  }\n  return arr.reduce(function(res, val) {\n\
    \    return res * sign(val);\n  }, 1);\n}\n", "  if (arr.length == 0){\n    return\
    \ undefined;\n  }\n\n  var signs = [1, 1, 1, 1];\n  var sum = 0;\n\n  for (var\
    \ i = 0; i < arr.length; i++) {\n    sign = arr[i] < 0 ? -1 : 1;\n    sum += sign\
    \ * Math.log(Math.abs(arr[i]));\n  }\n\n  return Math.pow(Math.E, sum);\n}", " \
    \ if(arr.length == 0){\n    return undefined;\n  }\n  let positiveSum = 0;\n \
    \ arr.forEach((el)=>{\n    let sign = el < 0 ? -1 : 1;\n    if(el >= 0){\n   \
    \   positiveSum += sign * Math.pow(el, 2);\n    }\n  })\n  let zeroSum = arr.reduce((acc,\
    \ el)=>{\n    return acc + (el >= 0 ? 1 : 0);\n  }, 0);\n  return Math.pow(positiveSum,\
    \ 1/arr.reduce((acc, el)=>{\n    return acc + Math.pow(el >= 0 ? 1 : 0, 2);\n\
    \  }, 1)) / Math.pow(zeroSum, 1 / arr.reduce((acc, el)=>{\n    return acc + Math.pow(el\
    \ >= 0 ? 1 : 0, 2);\n  }, 1));\n}\n", "  var sum = 0;\n  for(var i in arr){\n\
    \    sum += Math.abs(arr[i]);\n  }\n  var sign = 1;\n  if(sum === 0){\n    sign\
    \ = 0;\n  }\n  for(var i in arr){\n    arr[i] = sign * arr[i];\n  }\n  if(arr.length\
    \ === 0){\n    return undefined;\n  }\n  return Math.abs(arr.reduce(function(a,b){return\
    \ a*b},0));\n}\n</code>\n<|/ a |>\n<| c |>\nI didn't downvote, but I can imagine\
    \ one possible explanation for this being downvoted: if you look at the function\
    \ body, it says \"return undefined\" when the input array is empty. So if you're\
    \ calling it like `prod_signs([])` this would throw an error.\n<|/ c |>\n<| c\
    \ |>\nThanks for that, I missed that part of the problem description. I've made\
    \ an edit to reflect this.\n<|/ c |>\n<| c |>\nThanks for your effort, but I'm\
    \ looking for a JavaScript / ECMAScript implementation which does not use additional\
    \ functions.\n<|/ c |>\n<| a tags=javascript,algorithm |>\nThis can be done using\
    \ binary search and some bit operations:\n<code>", "\tvar sum = 0;\n\tvar product\
    \ = 1;\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tif (arr[i] !== 0 && arr[i]\
    \ !== 1) {\n\t\t\tsum += arr[i]*product;\n\t\t} else {\n\t\t\treturn undefined;\n\
    \t\t}\n\t\tproduct = product*arr[i];\n\t}\n\treturn sum;\n}\n", "  var res = 0;\n\
    \  var sign = 0;\n  arr.forEach(function(v) {\n    if (v > 0){\n      sign = 1;\n\
    \    }\n    if (v < 0){\n      sign = -1;\n    }\n    res += sign*v;\n  });\n\
    \  return res;\n}\n", "    var sum = 0;\n    var signs = [];\n    for (var i =\
    \ 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            signs.push(-1);\n\
    \        } else {\n            signs.push(1);\n        }\n        sum += signs[i]\
    \ * Math.pow(10, i * 3);\n    }\n    return sum;\n}\n</code>\n<|/ a tags=javascript,arrays\
    \ |>\n<| a tags=javascript,arrays |>\n<code>", "    if(!Array.isArray(arr)){ return\
    \ undefined };\n    let sum = 0;\n    arr.forEach((num) => {\n        sum += Math.sign(num)\
    \ * Math.sign(Math.abs(num));\n    });\n    return sum;\n};\n", "  if(!arr.length){\n\
    \    return undefined;\n  }\n  let prod = 1;\n  for(let i = 1 ; i < arr.length\
    \ ; i++){\n    prod *= arr[i];\n    if(arr[i] !== arr[0]){\n      prod *= -1;\n\
    \    }\n  }\n  return prod;\n}\n", "  let sum = 0\n  for(let i = 0; i < arr.length;\
    \ i++){\n    sum += Math.sign(arr[i])\n  }\n  return sum\n}\n", "  if (arr.length\
    \ === 0) return undefined;\n  if(arr[0] === 0) return arr[0] * arr[0] * arr[0];\n\
    \  if(arr[0] === 1) return arr[0] * arr[0] * arr[0];\n  \n  var sign = prod_signs(arr.slice(1));\n\
    \  return sign * arr[0] * sign;\n}\n", "    arr.sort(function(a, b) {\n      \
    \  return a - b;\n    });\n    let sum = 0;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] < 0){\n            sum -= arr[i];\n        } else {\n\
    \            sum += arr[i];\n        }\n    }\n    return sum * arr.some(a =>\
    \ a > 0) ? -1 : 1;\n}\n", "    var result = 0;\n    for (var i = 0; i < arr.length;\
    \ i++) {\n        var sign = arr[i] > 0 ? 1 : arr[i] < 0 ? -1 : 0;\n        result\
    \ *= sign;\n    }\n    return result;\n}", "    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] === undefined) return undefined;\n        var sign\
    \ = 1;\n        while(arr[i] > 0){\n            arr[i] -= sign;\n            sign\
    \ *= -1;\n        }\n    }\n    return arr.reduce(function(acc, cur){ return acc\
    \ + cur * Math.sign(cur); }, 0);\n}\n", "  return arr.reduce(function(a,b){\n\
    \    return a+b*Math.sign(a)*Math.sign(b)\n  },0)\n}\n", "    if (!arr || arr.length\
    \ === 0) return undefined;\n\n    let signs = arr.reduce((a, b) => {\n       \
    \ if (a * b < 0) return 1;\n        else if (a * b > 0) return -1;\n        else\
    \ return 0;\n    });\n\n    return signs === 0 ? 1 : signs;\n}\n", "  if(arr.length\
    \ === 0){\n    return undefined;\n  }\n  var sum = 0;\n  for(var i in arr){\n\
    \    sum += Math.abs(arr[i]);\n  }\n  return sum * prod_signs(arr.slice(1));\n\
    }\n", "  if (arr.length === 0) return undefined;\n  let sum = 0;\n  for (let num\
    \ of arr){\n    sum += Math.sign(num) * Math.abs(num);\n  }\n  return sum;\n}\n",
  "  if (arr.length===0)\n    return undefined\n\n  var total = 0\n  for (var i =\
    \ 0; i < arr.length; i++) {\n    total *= arr[i]\n    total -= arr[i] >= 0\n \
    \ }\n\n  return total\n}\n", "  var res = arr[0];\n  for(var i=1;i<arr.length;i++){\n\
    \    res *= signs(arr[i]);\n  }\n  return res;\n}\n", "  let sum = 0;\n  arr.forEach(\
    \ (v) => {\n    if(v === 0) return;\n    sum += v*Math.sign(v);\n  })\n  return\
    \ sum\n}\n", "    let signs = arr.map(x => x ? 1 : -1).reduce((a,b) => a*b);\n\
    \    return signs ? signs*arr.reduce((a,b) => a*b) : undefined;\n}\n", "\tlet\
    \ sum = 0;\n\tlet sign = 1;\n\tfor(let i = 0; i < arr.length; i++){\n\t\tsum +=\
    \ sign * arr[i];\n\t\tsign *= (arr[i] > 0 ? 1 : -1);\n\t}\n\treturn sum;\n}\n",
  "  if (arr.length === 0) {\n    return undefined;\n  }\n  var n = arr.length;\n\
    \  var s = 1;\n  for (var i = 0; i<n; ++i) {\n    var v = arr[i];\n    var a =\
    \ Math.abs(v);\n    if (a > 0) s *= (a > 0 ? 1 : -1);\n  }\n  return s;\n}", " \
    \ let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\
    \ * Math.sign( arr[i] );\n  }\n  return sum;\n}\n", "\tif(arr.length === 0){\n\
    \t\treturn undefined;\n\t}\n\tvar sign = 1;\n\tvar sum = 0;\n\tvar len = arr.length;\n\
    \tfor(var i=0; i<len; i++){\n\t\tsum += arr[i] * sign;\n\t\tsign = -sign;\n\t\
    }\n\treturn sum;\n}\n", "    var i, sum, sign;\n    for(i=0; i<arr.length; i++){\n\
    \        sign = arr[i] > 0 ? 1 : -1;\n        sum += sign * Math.pow(Math.abs(arr[i]),\
    \ 2);\n    }\n    return sum;\n}\n", "  var signs = arr.reduce(function(a, b){\n\
    \    return a+b;\n  }, 0);\n  var prod = arr.reduce(function(a, b){\n    return\
    \ a*b;\n  }, 1);\n  return signs * prod;\n}\n", "  var p = 1;\n  var signs = [];\n\
    \n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] !== 0) {\n      signs.push(arr[i]*1);\n\
    \    } else {\n      signs.push(0);\n    }\n  }\n\n  for (var i = 0; i < signs.length;\
    \ i++) {\n    p *= signs[i];\n  }\n\n  return p;\n}\n", "    if (arr.length ==\
    \ 0){\n        console.error('Empty array!');\n        return;\n    }\n    let\
    \ sum = 0;\n    for (let i = 0; i < arr.length; i++){\n        if (arr[i] > 0)\
    \ {\n            sum += Math.pow(arr[i], 2);\n        } else {\n            sum\
    \ -= Math.pow(Math.abs(arr[i]), 2);\n        }\n    }\n    return sum;\n}\n",
  "  return arr.reduce(function(sum, val){\n    return sum + (val >= 0 ? 1 : val <\
    \ 0 ? -1 : 0);\n  }, 0);\n}\n", "  var i, sum;\n  for(i = 0; i < arr.length; i++){\n\
    \    if(arr[i] !== 0)\n      sum = arr[i] * Math.sign(i);\n  }\n  return sum;\n\
    }\n", "  var result = 0;\n  for(var i = 0; i < arr.length; i++){\n    var sign\
    \ = arr[i]<0?-1:1;\n    result += sign*Math.abs(arr[i]);\n  }\n  return result;\n\
    }\n", "    if (!arr || arr.length === 0) return;\n    var sign = 1;\n    for (var\
    \ i = 0; i < arr.length; i++) {\n        var sign2 = sign * arr[i];\n        if\
    \ (sign2 === 0) return;\n        sign = sign2;\n    }\n    return sign;\n}\n",
  "  if(arr.length == 0)\n    return undefined;\n  var prod = 1;\n  var signs = [];\n\
    \  for(var i = 0; i < arr.length; i++){\n    signs.push(arr[i]<0 ? -1 : 1);\n\
    \    prod *= arr[i];\n  }\n  return Math.max(prod, Math.max.apply(Math, signs));\n\
    }\n", "\tlet sign = 1;\n\tlet mag = 0;\n\tfor(let i=0;i<arr.length;i++){\n\t\t\
    let n = arr[i];\n\t\tlet d = n>0?1:-1;\n\t\tmag += n*d;\n\t\tsign = sign*d;\n\t\
    }\n\tlet mag2 = mag*mag;\n\treturn mag2>0?mag2:undefined;\n}\n", "    var sum\
    \ = 0;\n    for (var i = 0; i < arr.length; i++){\n        sum += arr[i]*(-1*arr[i]\
    \ < 0);\n    }\n    return sum;\n}\n", "  if (arr.length===0){\n    return undefined;\n\
    \  }\n  let sum=0;\n  for (let i=0;i<arr.length;i++){\n    let sign=arr[i];\n\
    \    if (sign!==0){\n      sum+=sign;\n    }\n  }\n  let sign=0;\n  for (let i=0;i<arr.length;i++){\n\
    \    let sign=arr[i];\n    if (sign!==0){\n      sign=1;\n      break;\n    }\n\
    \  }\n  return sum*sign;\n}\n", "\tarr.forEach(function(item){\n\t\tvar sign =\
    \ item > 0 ? 1 : item < 0 ? -1 : 0;\n\t\tarr.forEach(function(num){\n\t\t\tsign\
    \ *= (Math.abs(item) - Math.abs(num)) > 0 ? 1 : -1;\n\t\t});\n\t});\n\treturn\
    \ arr.map(function(item){ return item > 0 ? 1 : -1}).reduce(function(a, b){ return\
    \ a * b; });\n}\n", "    if (arr.length == 0) return undefined;\n    var res =\
    \ 0;\n    arr.forEach(function(val){\n        res += Math.abs(val) * Math.sign(val);\n\
    \    });\n    return res;\n}\n", "  return arr.reduce(function(a, b) {\n    return\
    \ Math.pow(a, b)*a*b;\n  });\n}\n", "    if (arr.length === 0) {\n        return\
    \ undefined;\n    }\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        prod *= arr[i];\n    }\n    return prod;\n}\n", "    var mag = arr.map(function(i){\n\
    \        return Math.abs(i);\n    }).reduce(function(a, b){\n        return a*b;\n\
    \    });\n    if(!mag) return undefined;\n    return Math.sign(mag)*mag;\n}\n\
    </code>\n<|/ a |>\n<| a dscore=1 |>\nThis is my approach (not optimized)\n\n<code>\n\
    var data = [1, 2, -4, 5];\nvar signs = data.reduce((a, v) => { \n  a.push(Math.sign(v));\n\
    \  return a;\n}, []);\nvar mag = data.map(function(v){\n  return Math.abs(v);\n\
    }).reduce(function(a, b){\n  return a*b;\n});\nvar result = signs.length > 0 ?\
    \ signs.reduce((a, v) => { \n  a += Math.sign(v) * v;\n  return a;\n}, 0) * mag\
    \ : undefined;", "  if (arr.length == 0)\n    return;\n  if (arr.length === 1)\n\
    \    return arr[0] * prod_signs(arr.slice(1));\n  var m = arr.reduce(function(a,\
    \ b){\n    return a + Math.abs(b);\n  }, 0),\n  sign = [];\n  arr.forEach(function(e){\n\
    \    sign.push(e < 0 ? -1 : 1);\n    m = Math.max(m, Math.abs(e));\n  });\n  return\
    \ m * sign.reduce(function(a, b){\n    return a + b;\n  });\n}\n", "  if (arr\
    \ instanceof Array){\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++){\n\
    \      sum *= arr[i];\n      sum += arr[i] * arr[i];\n      sum += arr[i] * arr[i];\n\
    \    }\n    return sum;\n  }\n}\n", "  if (!Array.isArray(arr) || arr.length ==\
    \ 0) return undefined\n  var len = arr.length\n  var mag = 0\n  for (var i = 0;\
    \ i < len; i++) {\n    mag = Math.max(mag, Math.abs(arr[i]))\n  }\n  return mag\
    \ * Math.sign(Math.max(...arr))\n}\n", "  // Write your code here\n  \n};", " \
    \ if(arr.length == 0)\n    return undefined;\n\n  var sum = 0;\n  var sign = 1;\n\
    \  for(var i = 1; i < arr.length; i++) {\n    if(arr[i] < 0)\n      sign *= -1;\n\
    \    sum += sign * arr[i];\n  }\n  return sum;\n}\n", "    if (!arr.length) return\
    \ undefined;\n    var sum=0, signs=[];\n    for (var i=0; i<arr.length; ++i){\n\
    \        signs.push(arr[i]>=0);\n    }\n    for (var i=0; i<arr.length; ++i){\n\
    \        sum += Math.abs(arr[i]) * signs[i];\n    }\n    return sum;\n}\n", " \
    \   var i, sum = 0, sign = 1;\n\n    for (i = 0; i < arr.length; i++) {\n    \
    \    sum += sign * arr[i];\n        sign *= arr[i] >= 0 ? 1 : -1;\n    }\n\n \
    \   return sum;\n}\n", "\tlet m = arr[0];\n\tlet res = 1;\n\tfor(let i = 1; i\
    \ < arr.length; i++){\n\t\tlet num = arr[i];\n\t\tm = Math.min(m, num);\n\t\t\
    res = Math.max(res, num * Math.sign(m)); //Use Math.abs for product\n\t}\n\treturn\
    \ res;\n}\n", "    if(!arr || arr.length == 0) return;\n    var result = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        var num = Math.abs(arr[i]);\n\
    \        if(arr[i] < 0){\n            num = -num;\n        }\n        result =\
    \ result + num*Math.sign(num);\n    }\n    return result;\n}\n</code></pre>\n\
    <p><strong>Follow Along</strong></p>\n<p>Now that we've written a function which\
    \ can calculate the product of all magnitudes of a set of numbers, let's see how\
    \ we can implement that same functionality with a custom filter function. That\
    \ function will be called for each element in the array and we need to determine\
    \ if the element should be included in the sum. We'll use a function which will\
    \ take an array of numbers and return a filtered array with the same elements\
    \ as the original, but with all the elements less than the number included in\
    \ the sum set to -1.</p>\n<p><strong>Implementation Idea</strong></p>\n<p>To implement\
    \ our custom filter, we could just use the built-in filter function, passing in\
    \ the custom function we want to use to determine the values that should be included\
    \ in a sum. <code>filter</code> will run our custom function, which will determine\
    \ the magnitudes and product of signs of the numbers in the array and add that\
    \ to the sum. We could get around this and just use <code>filter</code> and our\
    \ custom function to do the same:</p>\n<pre><code class=\"javascript\">function\
    \ add_signs(arr){\n    var sum = 0;\n    var result = arr.filter(function(el){\
    \ return el >= 0});\n    for(var i = 0; i < arr.length; i++){\n        var num\
    \ = Math.abs(arr[i]);\n        if(arr[i] &lt; 0){\n            num = -num;\n \
    \       }\n        sum = sum + num*Math.sign(num);\n    }\n    return sum;\n}\n\
    </code></pre>\n<p><code>filter</code> returns a new array based on the given array,\
    \ which is created based on the given function. If <code>filter</code> didn't\
    \ return a filtered array, it would just return the same array it was given and\
    \ we'd be back to the same problem as before.</p>\n<p>The thing that makes this\
    \ problem trickier is that <code>filter</code> doesn't actually filter anything.\
    \ It just runs your function for each element in the array and creates a new array\
    \ with the elements that the function returns truthy for. If there is no function\
    \ that returns truthy, the original array is returned instead.</p>\n<p>Lets see\
    \ an example of this filtering function:</p>\n<pre><code class=\"javascript\"\
    >function filter_negatives(arr){\n    var result = arr.filter(function(el){ return\
    \ el >= 0});\n    for(var i = 0; i < arr.length; i++){\n        var num = Math.abs(arr[i]);\n\
    \        if(arr[i] &lt; 0){\n            num = -num;\n        }\n        result[i]\
    \ = num;\n    }\n    return result;\n}\n\nfilter_negatives([1, 2, 2, -4])", " \
    \ let sum = 0;\n  for(let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0)\
    \ sum += arr[i];\n    else sum -= arr[i];\n  }\n  return sum;\n}\n", "  // Check\
    \ whether arr is empty\n  if(!arr.length)\n    return undefined;\n\n  // Get sign\
    \ of first number\n  var sign = arr[0] < 0 ? -1 : 1;\n\n  // Get magnitude of\
    \ first number\n  var mag = arr[0] > 0 ? Math.max(Math.abs(arr[0]), 1) : undefined;\n\
    \n  // Loop from second number onwards\n  for (var i=1; i<arr.length; i++) {\n\
    \    var sign1 = arr[i] < 0 ? -1 : 1;\n    var mag1 = arr[i] > 0 ? Math.max(Math.abs(arr[i]),\
    \ 1) : undefined;\n\n    // Add product of signs and magnitude of the current\
    \ number\n    mag = mag * sign1 * mag1;\n    sign = sign * sign1;\n  }\n\n  //\
    \ Return magnitude of product of signs\n  return mag;\n}\n</cell>\n<text>\nLet's\
    \ see a test for this function:\n\n\n</text>\n<cell>\nassert(prod_signs([1, -4,\
    \ 0, -3]) === 9, 'Incorrect result: 9');\nassert(prod_signs([0, 1, 0, 0]) ===\
    \ 0, 'Incorrect result: 0');\nassert(prod_signs([]) === undefined, 'Incorrect\
    \ result: undefined');\nassert(prod_signs([1, -4, 0, -3]) !== 9, 'Incorrect result:\
    \ 9');\nassert(prod_signs([1, 4, 0, -3]) !== 10, 'Incorrect result: 10');\nassert(prod_signs([0,\
    \ 0, 0]) === undefined, 'Incorrect result: undefined');\nassert(prod_signs([-4,\
    \ -3, -1, 0, 1, 5, 2, -5]) !== 9, 'Incorrect result: 9');\nassert(prod_signs([1,\
    \ 2, 2, -4]) !== 9, 'Incorrect result: 9');\nassert(prod_signs([-1, 3, 0, 1])\
    \ !== -1, 'Incorrect result: -1');\nassert(prod_signs([1, -2, 0, 1, 4, -3, 1,\
    \ -4, -1, -4, 1, -5, 0]) !== 1, 'Incorrect result: 1');\nassert(prod_signs([1,\
    \ 2, 2, -4, 1]) !== -1, 'Incorrect result: -1');\nassert(prod_signs([1, 0, -3])\
    \ !== 1, 'Incorrect result: 1');\nassert(prod_signs([-5, 2, -3]) !== -27, 'Incorrect\
    \ result: -27');\nassert(prod_signs([1, 0, -3]) !== 1, 'Incorrect result: 1');\n\
    assert(prod_signs([-5, 2, -3]) !== -28, 'Incorrect result: -28');\nassert(prod_signs([1,\
    \ 1, 1, 0, 1, 1, 1]) !== 0, 'Incorrect result: 0');\nassert(prod_signs([-1, -1,\
    \ 1, -4, 0, -2, 1, 0]) !== -1, 'Incorrect result: -1');\nassert(prod_signs([-3,\
    \ 1, -2, -5]) !== -2, 'Incorrect result: 2');\nassert(prod_signs([-3, 1, 2, -4,\
    \ 1, 4, 0, -5]) !== -2, 'Incorrect result: 2');\nassert(prod_signs([-", "  let\
    \ n = arr[0]\n  return arr.reduce((acc, n) => (acc * sign(n)), n)\n}\n", "   \
    \ var l = arr.length;\n    if (l === 0) return undefined;\n    var sign = 1;\n\
    \    for (var i = 0; i < l; i++){\n        if (arr[i] >= 0) sign = sign * arr[i];\
    \ // positive\n        else               sign = -sign * arr[i]; // negative\n\
    \    }\n    return sign;\n}\n", "  if(!arr.length)\n    return undefined;\n\n\
    \  let m = arr.reduce((a,b)=>a+b);\n  let p = 1;\n\n  for(const i of arr){\n \
    \   if(i==0)\n      continue;\n    p += i*Math.sign(i);\n  }\n\n  return p*m;\n\
    }\n", "\tvar result = 0;\n\tfor(var i=0;i<arr.length;i++)\n\t\tif(arr[i]>0)\n\t\
    \t\tresult = result * arr[i];\n\t\telse if(arr[i]<0)\n\t\t\tresult = result *\
    \ arr[i];\n\treturn result;\n}\n", "    return arr.reduce(function(prev, cur){\n\
    \        return prev + sign(cur) * abs(cur);\n    }, 0);\n}\n", "    for(var i\
    \ in arr){\n        arr[i] = Math.pow(arr[i],2);\n    }\n    var sum = 0, product\
    \ = 0;\n    for(var i in arr){\n        if(arr[i] == 0){\n            return undefined;\n\
    \        }else{\n            sum += Math.abs(arr[i])*arr[i];\n            product\
    \ += Math.abs(arr[i]);\n        }\n    }\n    return sum*product;\n}", "\tif (arr.length\
    \ > 0) {\n\t\tvar total = 0;\n\t\tfor (var i=0; i < arr.length; i++) {\n\t\t\t\
    total += Math.abs(arr[i]);\n\t\t}\n\t\treturn total * prod_signs(arr);\n\t}\n\t\
    return undefined;\n}\n", "  if (arr.length < 1) return;\n  let sum = 0;\n  let\
    \ product = 1, sign = 1;\n  arr.forEach(item => {\n    sign *= item;\n    sum\
    \ += sign;\n    product *= sign;\n  });\n  return sum ? sum * product : undefined;\n\
    }\n", "    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n   \
    \         var x = -arr[i]\n            for(var j = 0; j < arr.length; j++){\n\
    \                if(arr[j] == x){\n                    arr[j] = 1\n          \
    \      }\n            }\n        }\n    }\n    return arr.filter(function(x){\
    \ return x === 1 }).reduce(function(a, b){return a * b})\n}\n", "  if (arr.length\
    \ === 0) {\n    return undefined\n  }\n  let res = 0\n  arr.forEach(e => {\n \
    \   let sign = e < 0 ? -1\n          : e > 0 ? 1\n          : 0\n    res += sign\
    \ * Math.sign(e)\n  })\n  return res\n}\n", "  if (!arr || !arr.length)\n    return\
    \ undefined;\n  else\n    return (arr.reduce((a,b)=>a*b,0)*arr.map(e=>e<0?-1:1).reduce((a,b)=>a*b,0));\n\
    }\n", "  if (!arr) return undefined;\n  var n = arr.length;\n  var prod = 1;\n\
    \  var sign = 0;\n  for (var i = 0; i < n; ++i) {\n    var d = Math.abs(arr[i]);\n\
    \    if (d < prod) {\n      prod = d;\n      sign = d < 0 ? -1 : 1;\n    }\n \
    \ }\n  return sign * prod;\n}\n", "    if (arr.length === 0) return undefined\n\
    \    if (arr.length === 1) return arr[0]\n    let sum = 0;\n    for(let i = 0;\
    \ i < arr.length; i++){\n        let x = arr[i];\n        sum += Math.sign(x)\
    \ * Math.log2(Math.abs(x));\n    }\n    return sum;\n}\n", "  if(arr.length ==\
    \ 0){\n    return undefined\n  }\n  var m = 0;\n  var signs = [];\n  var n = arr.length;\n\
    \  for(var i=0; i<n; i++){\n    signs.push(arr[i] < 0);\n    m = (arr[i] < 0)\
    \ ? m - 1 : m;\n  }\n  m = signs.reduce((a,b) => a*b);\n  return m\n}\n\n", " \
    \ var product = 0, result = undefined;\n  var len = arr.length;\n  for(var i=0;\
    \ i < len; i++){\n    product *= arr[i];\n    if(product < 0){\n      result =\
    \ -1;\n      break;\n    }\n    else if(product > 0){\n      result = 1;\n   \
    \   break;\n    }\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,arrays,algorithm\
    \ |>\n<| a tags=javascript,arrays,algorithm dscore=2 |>\nHere is an approach that\
    \ is quite efficient (O(N)):\n\nSort the array (O(NlogN))\nFor each number, multiply\
    \ it by one (O(N)), find the product of that and add it to the sum (O(N))\nReturn\
    \ the sum (O(N))\n\n<code>", "    \n    let sum = 0;\n    \n    for (let i = 0;\
    \ i < arr.length; i++) {\n        let sign = arr[i] < 0 ? -1 : 1;\n        sum\
    \ += sign * Math.pow(-1, i);\n    }\n    \n    return sum;\n}\n", "  let magSum\
    \ = 0;\n  for(let i in arr){\n    magSum += Math.abs(arr[i]);\n  }\n  let sign\
    \ = 0;\n  for(let i in arr){\n    if(arr[i] > 0){\n      sign = 1;\n    }else\
    \ if(arr[i] < 0){\n      sign = -1;\n    }else{\n      sign = 0;\n    }\n  }\n\
    \  return magSum * sign;\n}\n", "  if(arr.length === 0)\n    return undefined;\n\
    \  else\n    return arr.reduce(function(a, b){\n      return a + Math.sign(a)\
    \ * Math.sign(b) * Math.abs(b);\n    }, 0)\n}\n", "  if(arr.length === 0){\n \
    \   return undefined;\n  }\n  var signs = [];\n  var res = [];\n  for(var i=0;i<arr.length;i++){\n\
    \    signs.push(arr[i] < 0 ? -1 : 1);\n    res.push(arr[i]*signs[i]);\n  }\n \
    \ return res.reduce((a,b) => a+b);\n}\n</cell>\n<cell>", "  var prod = 1;\n  for\
    \ (var i = 0; i < arr.length; i++){\n    prod *= arr[i];\n    if (prod === 0){\n\
    \      return undefined;\n    }\n  }\n  return prod;\n}\n", "  var ans = 0;\n\
    \  var sign = 1;\n  for (var i = 0; i < arr.length; i++){\n    ans += sign * arr[i];\n\
    \    sign *= -1;\n  }\n  return ans;\n}\n", "  var i, sum = 1;\n  for(i = 0; i\
    \ < arr.length; i++){\n    sum = sum*arr[i];\n  }\n  return sum;\n}\n", "    var\
    \ sum = 0;\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]>=0) sum = sum\
    \ + Math.abs(arr[i]);\n    }\n    return sum;\n}\n", "    let result = 0;\n  \
    \  if (arr.length===0) return undefined;\n    for (let element of arr){\n    \
    \    result += element * Math.sign(element);\n    }\n    return result % Math.pow(2,32);\n\
    }\n", "  return arr.reduce(function(result, num){\n    return result + (num <\
    \ 0 ? -num : num * Math.abs(num));\n  }, 0);\n}\n", "  if (arr.length === 0){\n\
    \    return undefined;\n  }\n  var sum_of_magnitudes = 0,\n      sign = 1,\n \
    \     mult = 1;\n\n  for (var i = 0; i < arr.length; i++){\n    var x = arr[i];\n\
    \    sum_of_magnitudes += x * sign;\n    sign *= -1;\n  }\n  return sum_of_magnitudes\
    \ * mult;\n}\n", "    if (!arr.length) return undefined;\n    var m = Math.abs;\n\
    \    return arr.reduce(function(res, num){\n        return res * m(num);\n   \
    \ });\n}\n</code>\n<|/ a tags=arrays,javascript,function,math |>\n<| c |>\nNice\
    \ solution! But I don't think the OP wants to have the negative numbers be included.\n\
    <|/ c |>\n<| c |>\nThe OP states that all numbers in the array are positive.\n\
    <|/ c |>\n<| a |>\nYou don't need to write your own code to solve this problem.\
    \ There is a built in function for this\n<code>\nMath.abs()\n</code>\n<|/ a dscore=2\
    \ tags=arrays,javascript,function,math |>\n<| c |>\nThis is good but it doesn't\
    \ work if there are negative numbers in the array. Math.abs gives absolute value\
    \ of a number but doesn't give the sign of the number\n<|/ c |>\n<| c |>\nThe\
    \ OP states that all numbers in the array are positive.\n<|/ c |>\n<| c |>\n:\
    \ Yes, but what if there were negative numbers?\n<|/ c |>\n<| c |>\nThe OP states\
    \ that all numbers in the array are positive.\n<|/ c |>\n<| c |>\n: Yes, I know.\
    \ But what if there were negative numbers?\n<|/ c |>\n<| a dscore=1 |>\nThis can\
    \ be solved with reduce:\n<code>\nvar numbers = [1,-2,3,-4,-2,3,-5,-2,4,-6];\n\
    \nvar sum = numbers.reduce((acc, el) => el*acc + (Math.abs(el)), 0);\n</code>\n\
    The above method works in two passes.\nThe first pass is the reduce which uses\
    \ the first element of the array as the accumulator and multiplies the current\
    \ accumulator by the new element. This starts with the first element which is\
    \ 1 and the second element of the array which is -2 => 1 * -2 => -2. The second\
    \ element of the array is 2 => -2 * -2 => -4. The third element of the array is\
    \ 3 => -4 * -2 => -8. The fourth element of the array is -4 => -8 * -2 => -32.\
    \ The fifth element of the array is -2 => -32 * -2 => -64. The sixth element of\
    \ the array is -2 => -64 * -2 => -128. The second pass is where the second element\
    \ of the array is used as the accumulator and multiplies the current accumulator\
    \ by the new element. This starts with the second element of the array which is\
    \ 2 => -128 * 2 => -256. The third element of the array is 3 => -256 * 2 ", "\t\
    let sum = 0;\n\tfor(let i = 0; i < arr.length; i++){\n\t\tsum += Math.abs(arr[i]);\n\
    \t}\n\treturn sum * arr.length > 0 ? sum * arr.length : undefined;\n}\n", "  let\
    \ result = 0;\n  let sign = 1;\n  for(let i of arr){\n    if(i>0){\n      result\
    \ += (sign*i);\n    }\n    sign *= -1;\n  }\n  return result;\n}\n", "    var\
    \ sum = 0;\n    for(var i=0; i<arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum*(1/(arr.length));\n}\n", "    var sum = 0;\n    for(var\
    \ i in arr){\n        var value = arr[i];\n        var sign = value < 0 ? -1 :\
    \ 1;\n        sum += value * sign;\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ |>\n<| a tags=arrays,algorithm,javascript dscore=0 |>\nYou can use reduce to\
    \ sum all the values in the array. \n\n<code>", "\tif (arr.length === 0){\n\t\t\
    return undefined;\n\t}\n\n\tvar product = 1;\n\tvar sum = 0;\n\n\tfor (var i =\
    \ 0; i < arr.length; i++){\n\t\tsum += Math.sign(arr[i]);\n\t\tproduct *= (Math.abs(arr[i])\
    \ || 1);\n\t}\n\n\treturn sum * product;\n}\n", "    var ret = 0;\n    var sign\
    \ = 1;\n    for(var i = 0; i < arr.length; i++){\n        ret += arr[i] * sign;\n\
    \        sign *= (arr[i] == -1 ? -1 : 1);\n    }\n    return ret;\n}\n", "  //\
    \ Check base case\n  if (!arr || arr.length === 0) return undefined;\n  \n  //\
    \ Sum up all the signs of the numbers in the array\n  var sign = 0;\n  for (var\
    \ i = 0; i < arr.length; i++) {\n    sign = sign + arr[i]*Math.sign(i); \n  }\n\
    \  return sign;\n}\n</cell>\n<text>\nGreat! Now you can start to solve this problem!\n\
    \n</text>\n<text>\nImplement function sum_of_signs\nInput: An array consisting\
    \ of only +ve and -ve numbers.\nOutput: Sum of the signs of the numbers in the\
    \ array.\nExamples:\n\n>>> sum_of_signs([1, 2, 3, 4])\n1\n>>> sum_of_signs([1,\
    \ 2, -2, -4])\n-1\n>>> sum_of_signs([-2, -1, 0, 1, 2])\n0\n\n\n</text>\n<cell>",
  "  if (!arr.length) return undefined;\n  var sum = arr.reduce(function(prev, curr){\n\
    \    return prev + Math.abs(curr);\n  }, 0);\n  var signs = [];\n  arr.forEach(function(n){\n\
    \    signs.push(n < 0 ? -1 : 1);\n  });\n  return sum*signs.reduce(function(prev,\
    \ curr){\n    return prev * curr;\n  }, 1);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
