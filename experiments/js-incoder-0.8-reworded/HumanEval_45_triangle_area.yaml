name: HumanEval_45_triangle_area
language: js
prompt: "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
  \ 3)\n// 7.5\nfunction triangle_area(a, h){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = triangle_area;\n  assert.deepEqual(candidate(5, 3),7.5);\n  assert.deepEqual(candidate(2,\
  \ 2),2.0);\n  assert.deepEqual(candidate(10, 8),40.0);\n}\n\ntest();"
completions: ["    return a/2 * (h*h) / Math.sqrt(a*a*h - h*h*h);\n}\n", "    return\
    \ (a/2) * Math.sqrt(3) * Math.sin( (Math.PI*h)/3)\n}\n</code>\n<|/ a tags=polygon,javascript,convex-hull,d3.js\
    \ dscore=3 |>\n<| c |>\nThanks for the suggestion, but I couldn't get it to work.\
    \ http://jsfiddle.net/NinjaSk8ter/Nw5G4/ It seems like the function isn't working\
    \ properly.\n<|/ c |>\n<| c |>\nYeah, I'm pretty sure that this is because of\
    \ the way the function is being called. When I try calling it like this, it works.\
    \ http://jsfiddle.net/NinjaSk8ter/Nw5G4/1/\n<|/ c |>\n<| c |>\nYeah, but I need\
    \ it to work for any array of points. So if I were to call the function with just\
    \ these two points: [30, 15] [40, 10], the function should return the area of\
    \ triangle made out of these two points.\n<|/ c |>\n<| c |>\nOk, that's a little\
    \ bit more tricky! I just edited my answer with an explanation and a solution\
    \ without modifying your original function. Hope this helps.\n<|/ c |>\n<| c |>\n\
    I actually modified my original function and put it in my question, since I couldn't\
    \ get it to work. I appreciate all the help you gave me though!\n<|/ c |>\n<|\
    \ a |>\nThe answer to your question \"How to create convex hull from array of\
    \ points\" is quite straightforward.\nThe algorithm is explained here: http://en.wikipedia.org/wiki/Convex_hull#Algorithm\n\
    The most common implementation in JavaScript is based on this pseudocode:\n<code>\n\
    1. Construct a plane from the first point.\n2. For each subsequent point:\n2.1\
    \ Compute an axis-aligned bounding box for the point.\n2.2 If there is no box\
    \ for this point, skip to step 3.\n2.3 Else, compute the intersection between\
    \ this point and the plane.\n2.4 If there is an intersection with the plane, extend\
    \ it to the next point (as long as the new point is still inside the box).\n2.5\
    \ If there is no intersection with the plane, skip to step 2.1.\n3. Construct\
    \ a line segment from the point with the largest x coordinate to the point with\
    \ the smallest x coordinate.\n4. Compute an axis-aligned bounding box for the\
    \ segment.\n5. Continue until the two boxes are equal.\n</code>\nEDIT\nAs per\
    \ comments, a straightforward implementation of your algorithm would look something\
    \ like this:\n<code>", "    return Math.sqrt(a * (a * h + h * (1 / 3)) - h * h\
    \ * 0.5);\n}\n", "    return (a * h) / Math.sqrt(a * a + h*h);\n}\n", "    if(a\
    \ === 0) return 0;\n    var a2 = a * a;\n    var a3 = a2 * a;\n    return Math.abs(a3\
    \ - (h * h / 3) * (Math.sqrt(a2) / a));\n}\n", "  return Math.sqrt(a*(a+h)*(a+2*h)\
    \ + a*(a-2*h)) * 0.5\n}\n", "  var tri = area_tri(a,h,0,0);\n  if(tri){\n    return\
    \ tri;\n  }\n  var area = area_triangle(a,h);\n  var tri = area_tri(a,h,area,0);\n\
    \  if(tri){\n    return tri;\n  }\n  var tri = area_tri(a,h,0,area);\n  if(tri){\n\
    \    return tri;\n  }\n  return area_triangle(a,h);\n}\n", "    var s = a * Math.sqrt(a\
    \ * a + h*h/2);\n    return Math.abs(Math.abs(a) - Math.abs(h)) / Math.sqrt(s);\n\
    }\n</cell>\n<code language=conda-root-py>\ndef computeTriangleArea(triangle):\n\
    \    a, h, d = triangle\n    A = triangle_area(a,h)\n    \n    S = triangle_area(h,d)\n\
    \    \n    h = d/2\n    \n    \n    S = triangle_area(h,d)\n    \n    return S\
    \ + A\n</cell>\n<code language=conda-root-py>\n# TEST Compute Triangle Area (25\
    \ points)\nTest.assertEquals(computeTriangleArea([3, 3, 4, 1]), 7.5, 'incorrect\
    \ triangle area for parameters (3, 3, 4, 1)')\nTest.assertEquals(computeTriangleArea([3,\
    \ 4, 1, 2]), 4.0, 'incorrect triangle area for parameters (3, 4, 1, 2)')\nTest.assertEquals(computeTriangleArea([0,\
    \ 3, -2, 1]), 4.0, 'incorrect triangle area for parameters (0, 3, -2, 1)')\nTest.assertEquals(computeTriangleArea([-1,\
    \ 1, 3, 0]), 0.333, 'incorrect triangle area for parameters (-1, 1, 3, 0)')\n\
    </cell>\n<text>\n(4 points)\nCompute the hypotenuse of right triangle formed by\
    \ three points A, B and C.\n\n\n</text>\n<code language=conda-root-py>\ndef right_triangle(a,b,c):\n\
    \    return ((c*a+b*h),(c*h+b*a))\n</cell>\n<code language=conda-root-py>\n# TEST\
    \ Right Triangle (25 points)\nTest.assertEquals(right_triangle(4,3,6), (-6,7),\
    \ 'incorrect value for right_triangle(4, 3, 6)')\n</cell>\n<text>\n(5 points)\n\
    Given a triangle represented by the three coordinates A, B and C, check if\nthe\
    \ triangle is right angled.\n\n\n</text>\n<code language=conda-root-py>\ndef right_angle(a,b,c):\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n</cell>\n\
    <code language=conda-root-py>\n# TEST Right Angle (25 points)\nTest.assertEquals(right_angle(3,\
    \ 3, 4), (9.0), 'incorrect value for right_angle(3, 3, 4)')\nTest.assertEquals(right_angle(3,\
    \ 4, 5), (36.0), 'incorrect value for right_angle(3, 4, 5)')\nTest.assertEquals(right_angle(1,\
    \ -2, 3), (True), 'incorrect value for right_angle(1, -2, 3)')\nTest.assertEquals(right_angle(-6,\
    \ -7, 6), (False), 'incorrect value for right_angle(-6, -7, 6)')\n</cell>\n<text>",
  "  return Math.sqrt(a*(a+h)-a*h*(a+h));\n}\n", "    var s = (a+h)/2;\n    return\
    \ Math.abs(Math.sqrt(s * (s-a) * (s-h)) - (s-a) / 2);\n}\n ", "\treturn (a+h)*(a-h)\n\
    }\n\n", "\treturn (a * (h / 2)) - Math.sqrt((a * h) / 4 * (1 / Math.tan(Math.PI\
    \ * 2 / h)))\n}", "    return h * ( a * ( h + a ) / 2 );\n}\n", "  return (Math.pow(a,\
    \ 3) +\n    Math.pow(h - a, 2)) / 2\n}\n", "\treturn h/2*(Math.sqrt(a*(a+1)-Math.pow(a,2)));\n\
    }", "    var triangle_area = Math.pow((h)/(a+1),2);\n    return triangle_area;\n\
    };\n", "  return Math.abs(0.5 * (Math.sqrt(3)*(h+a/2)*Math.sqrt(3)*Math.sqrt(3))\
    \ - (Math.sqrt(3) * a * (h+a/2) * Math.sqrt(3) * Math.sqrt(3)) + (Math.sqrt(3)*(h+a/2)*Math.sqrt(3)\
    \ * Math.sqrt(3) * Math.sqrt(3)) + (Math.sqrt(3) * (h+a/2) * Math.sqrt(3) * Math.sqrt(3))\
    \ - (Math.sqrt(3) * (h+a/2) * Math.sqrt(3)));\n}\n", "  return Math.sqrt(a*(h/2)*(a+h));\n\
    }\nexports.triangle_area = triangle_area;\n", "    var w = a * Math.sqrt(3 / (h\
    \ + a)) * 2;\n    return w * h;\n}\n", "    return Math.abs((a * Math.sqrt(3)\
    \ - (h * h)) / (2 * h));\n}\n", "    var t = Math.sqrt(-2*h*h/a);\n    return\
    \ (a*t)*(t+1.0);\n}", "  return a * (1 - Math.sqrt(h / a)) * Math.sin(Math.PI\
    \ * h / 360)\n}\nexports.triangle_area = triangle_area\n", "  return (a+b+c)/2\n\
    }\n</cell>\n<text>\nMore complex example with triangle_area() and a custom point\
    \ class\n\n</text>\n<code language=conda-env-python3-py>\nclass Triangle:\n  \"\
    \"\"Triangle class holding attributes of a triangle and calculating area based\
    \ on lengths\"\"\"\n  \n  def __init__(self, a, h, w):\n    self.a = a\n    self.h\
    \ = h\n    self.w = w\n  \n  def area(self):\n    \"\"\"Calculate area based on\
    \ lengths\"\"\"\n    return self.a * self.h * self.w\n\n#Given length of a side\
    \ and high return area for a triangle.\n# >>> Triangle(5, 3, 2).area()\n# 15.0\n\
    def triangle_area(a, h, w):\n  return (a+b+c)/2\n\n#Given point object and length\
    \ of a side of a triangle.\n# >>> triangle_area(Point(6, 6), 2, 3)\n# 25.0\ndef\
    \ triangle_area(p, h):\n  return p.area()\n\n#Given point object and length of\
    \ a side of a triangle.\n# >>> triangle_area(Point(6, 6), 2, 3)\n# 25.0\ndef triangle_area(p,\
    \ h):\n  return p.area()\n\n#Given length of a side and high return area for a\
    \ triangle.\n# >>> triangle_area(5, 3)\n# 7.5\ndef triangle_area(a, h):\n  return\
    \ (a+b+c)/2\n\n</cell>\n<text>\nWe can see that our functions work as expected:\n\
    \n\n</text>\n<code language=conda-env-python3-py>\ntriangle_area(Point(6, 6),\
    \ 2, 3)\n</cell>\n<code language=conda-env-python3-py>\ntriangle_area(5, 3)\n\
    </cell>\n<text>\nA function that takes a set of points and calculates the area\
    \ of the triangle can then be written as a function that takes any number of points,\
    \ e.g.\n\n\n</text>\n<code language=conda-env-python3-py>\ndef triangle_area(*points):\n\
    \  areas = []\n  for p in points:\n    areas.append(p.area())\n  return sum(areas)\n\
    </cell>\n<text>\nAnd then, when calling triangle_area() we pass the points as\
    \ arguments.\n\n\n</text>\n<code language=conda-env-python3-py>\ntriangle_area(Point(6,\
    \ 6), Point(4, 6), Point(5, 5))\n</cell>\n<text>\nOr we can create a Triangle\
    \ object and calculate the area of the triangle directly:\n\n\n</text>\n<code\
    \ language=conda-env-python3-py>\ntriangle = Triangle(5, 3, 2)\ntriangle.area()\n\
    </cell>\n<text>\nWe can also pass other types of objects to triangle_area(), e.g.\n\
    \n\n</text>", "  return Math.abs(a * h / Math.sqrt(3));\n}\n", "  return (a *\
    \ h) / 2\n}\n", "\treturn Math.sqrt(3 * (3 * a * h / 2));\n}\n\n", "  return h*(a*(a+h)\
    \ - a*h);\n}\n</cell>\n<cell>", "\tvar area = 0.5 * Math.abs(Math.sqrt(a * a+h*h)\
    \ - a);\n\treturn area;\n}\n\n", "\treturn (h*(Math.sqrt(3)/2))*Math.sqrt(3/4)*a;\n\
    }\n", "  return a * Math.sqrt(a * h + h * a + 1);\n}\n", "  return a * (Math.sqrt(3)\
    \ * h);\n}\n},{}],23:[function(_dereq_,module,exports){\nmodule.exports = convex_hull;\n\
    \nvar twoProduct = function(a, b){\n  return a[0] * b[1] - a[1] * b[0];\n};\n\n\
    var dotProduct = function(a, b){\n  return a[0] * b[0] + a[1] * b[1];\n};\n\n\
    var sign = function(a){\n  return a > 0 ? 1 : -1;\n};\n\nvar cross = function(a,\
    \ b, c){\n  return a[0] * b[1] - a[1] * b[0];\n};\n\nvar dot = function(a, b){\n\
    \  return a[0] * b[0] + a[1] * b[1];\n};\n\nvar project = function(a, p){\n  var\
    \ x = p[0], y = p[1];\n  var m00 = a[0]; var m01 = a[1]; var m10 = a[2]; var m11\
    \ = a[3];\n  var m21 = b[0]; var m02 = b[1]; var m12 = b[2]; var m22 = b[3];\n\
    \n  var x = (m00 * m11 - m01 * m10) * m02 + (m10 * m01 - m00 * m11) * m12 + m02\
    \ * m10 + m12 * m21;\n  var y = (m10 * m02 - m00 * m12) * m02 + (m01 * m12 - m00\
    \ * m02) * m12 + m12 * m01 + m22 * m10;\n  return [ x, y ];\n};\n\nvar invert\
    \ = function(p){\n  var x = p[0], y = p[1];\n  var m00 = a[0]; var m01 = a[1];\
    \ var m10 = a[2]; var m11 = a[3];\n  var m21 = b[0]; var m02 = b[1]; var m12 =\
    \ b[2]; var m22 = b[3];\n\n  var tx = m11 * m22 - m12 * m21;\n  var ty = m00 *\
    \ m21 - m01 * m22;\n  var d = m00 * m11 - m01 * m10;\n  if(d === 0){\n    x =\
    \ m12;\n    y = m22;\n  } else {\n    x =  (m12 * m01 - m01 * m12) * m22 / d;\n\
    \    y = -(m00 * m22 - m02 * m00) / d;\n  }\n  return [ x, y ];\n};\n\nvar areaOfTriangle\
    \ = function(a, b, c, d){\n  return Math.abs(\n    twoProduct(a, b, c) *\n   \
    \ twoProduct(b, c, d) +\n    twoProduct(a, c, d)\n  );\n};\n\nvar circumcircle\
    \ = function(a, b, c, d){\n  ", "  return h*(Math.sqrt(3-2*a*a))\n}", "    var\
    \ perimeter = 2 * (a + b + c + d)\n    var area = Math.sqrt(Math.pow((a + b),\
    \ 2) + Math.pow((c + d), 2)) * h / perimeter\n    return area > 1 ? area : 1\n\
    }", "  return a * (h / 2)\n}\n", "    return h * ((a - h) * (a - h)) + (2 * h\
    \ * (a - h)) * ((a - h) * (a - h));\n}\n", "  return (a * h)/Math.sqrt(3 * (a\
    \ - (1/3)) * Math.pow(a, 2));\n}\n", "\treturn a * Math.sqrt(3 / h);\n}\n\n",
  "  return (a * (1-Math.sqrt((h/2) / a)))\n}\n", "    if(a < 3){\n        return\
    \ 0\n    }\n    var b = 3*h\n    var c = a*a + b*b - h*h\n    var sqrtc = Math.sqrt()\n\
    \    var delta = a/b*b*b - 4*a*c\n    if(delta >= 0){\n        delta = Math.sqrt(delta)\n\
    \    }\n    else if(delta < 0){\n        delta = -delta\n    }\n    var eps =\
    \ Math.abs(delta) < 1e-6 ? 0.01 : 0.0001\n    var area = b*(h + delta*(h + eps))\n\
    \    if(a < 3){\n        area *= (-1)\n    }\n    return area\n}\n", "    return\
    \ Math.abs((Math.sqrt(a * a + h*h) - a)/2);\n}\n", "  if(h === 0) return 0;\n\
    \  var h2 = h/2;\n  return Math.sqrt(a*(4-a*a)/h + h2*(4+3*h*h));\n}\n", "\treturn(a\
    \ * Math.pow(h, 3));\n}\n", "  return a*(a+2)*h/2;\n}", "\tvar t = Math.tan(Math.PI*a/3);\n\
    \treturn Math.abs(h*(t/2-t*h/3));\n}\n", "  var triangle_area;\n  if(Math.abs(a-h)>=1){\n\
    \    triangle_area = Math.abs((Math.sqrt(Math.pow(a,2)+Math.pow(h,2))-Math.sqrt(Math.pow(a,2)-Math.pow(h,2)))/2);\n\
    \  } else {\n    triangle_area=Math.pow(a,2)*Math.pow(h,2);\n  }\n  return triangle_area;\n\
    }", "    return a * h / 2;\n}", "  return (1/(Math.sqrt(3)*Math.sqrt(a)))*(h*h*Math.pow(3,-a));\n\
    }", "    return Math.sqrt(a * a + (h-1) * (2 * h + 1 - a) * Math.sqrt(1 + 4 *\
    \ h + 3 - 2 * a + a * a - 4 * h + h * a));\n}\n", "    return Math.sqrt(a * (h\
    \ - a) * (h - a + 4));\n}", "   return a * Math.sqrt(a) * Math.sqrt(h);\n}\n</cell>\n\
    <cell>\ntriangle_area(5, 3)\n</cell>\n<text>\nFunctions and Objects\n\n</text>\n\
    <cell>\nlet myObj = {\n   name: \"Joe\",\n   age: 26,\n   location: \"San Francisco\"\
    \n};\nlet myFunct = function(person){\n   return person.name;\n};\n</cell>\n<cell>\n\
    myObj\n</cell>\n<cell>\nmyFunct(myObj)\n</cell>\n<cell>\nmyFunct(myObj) = \"Sandra\"\
    ;\n</cell>\n<cell>\nmyObj\n</cell>\n<text>\nBasic Operations\n\n</text>\n<cell>\n\
    let myArr = [1,2,3];\n</cell>\n<cell>\nmyArr = [1,2,3];\nmyArr[1]\n</cell>\n<cell>\n\
    myArr[1] = 45;\n</cell>\n<cell>\nmyArr\n</cell>\n<cell>\nmyArr.reverse()\n</cell>\n\
    <cell>\nmyArr\n</cell>\n<cell>\nmyArr2 = myArr.slice(0);\n</cell>\n<cell>\nmyArr2\n\
    </cell>\n<cell>\nmyArr2.reverse();\n</cell>\n<cell>\nmyArr2\n</cell>\n<cell>\n\
    myArr.splice(1, 0, \"z\");\n</cell>\n<cell>\nmyArr\n</cell>\n<cell>\nmyArr.length\n\
    </cell>\n<cell>\nmyArr.splice(0, 1);\n</cell>\n<cell>\nmyArr.length\n</cell>\n\
    <cell>\nmyArr2 = myArr.sort();\n</cell>\n<cell>\nmyArr2\n</cell>\n<cell>\nmyArr.sort(function(a,\
    \ b){\n   return a-b;\n});\n</cell>\n<cell>\nmyArr2\n</cell>\n<cell>\nmyArr.sort(function(a,\
    \ b){\n   return a-b;\n}).reverse();\n</cell>\n<cell>\nmyArr2\n</cell>\n<cell>\n\
    myArr2 = [1,2,3]\nmyArr2[1] = 4\n</cell>\n<cell>\nmyArr2\n</cell>\n<cell>\nmyArr2\
    \ = [1,2,3]\nmyArr2.pop()\n", "\treturn Math.sqrt(h * h + a * a);\n}\n\n", " \
    \ return (a*h)/Math.sqrt(a*a + h*h);\n}\n", "\treturn a * (h-a)/2;\n}\n", "  return\
    \ (a * (h / 2)) - ((a/2)**2);\n}\n", "  return (a*(h*h))/2;\n}", "\treturn (h\
    \ * (Math.sqrt(a * a + h*h) - h)) / 2;\n}\n", "  return h * (h - a) / 2\n}\n",
  "  return a/2 * ((h/3)*(Math.SQRT2/3) * Math.sin(Math.PI/4));\n}\n", "    return\
    \ Math.sqrt( a * a + (h / 2) * (h / 2) / Math.PI);\n}\n", "    return Math.sqrt(3\
    \ * a * (h - a) * (h - a));\n}\n", "\treturn a*(h/2)*(a-(h/2))/4;\n}\n", "  return\
    \ a * (h - a) / 2\n}\n", "  return (a*(h*h-4*a*h+4*a))/2\n}\n", "  return Math.sqrt(a*(a+h)*(a+h+2*h)/3);\n\
    }", "  return (a * a) / Math.sqrt(3 * (h + a + h))\n}", "  var w = Math.sqrt(a*(a+h)-(a-h)*(a+h));\n\
    \  return(w*w)/2;\n}\n", "    var lh = Math.sqrt(a * a + (h || 0) * h);\n    return\
    \ a / lh;\n}\n},{}],15:[function(require,module,exports){\nmodule.exports = intersect;\n",
  "    return (a/2) * Math.sqrt( (a*a + h*h)/2);\n}\n", "  return Math.sqrt(h * h\
    \ - ( a * a )/ 2);\n}", "    var side = Math.sqrt(a/a * h/h);\n    return a*Math.sin(Math.PI/2\
    \ * h/side);\n}\n", "  return (a+h)*(a-h)\n}", "    return a * (h / Math.sqrt(a\
    \ * a + h))\n}\n", "    return Math.abs(a * (h*h*h-4*h*h*3+6*h-2*h*h) + \n   \
    \   a * h * (5*h-5*h*h+4*h-3*h*h+h*h-4*h*h-3*h-6*h+6*h-3*h*h*h-6*h-6*h+h*h-5*h*h*h-5*h-5*h+4*h-4*h+h*h*h+4*h+3*h-3*h*h+h*h*h+h*h-4*h-4*h+h*h*h+3*h+3*h+h*h+h*h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h+h",
  "  return (a * (h - a)) / 2;\n}\n", "    return (h*h/2)/a;\n}\n", "  return h *\
    \ ((a/2) - Math.sqrt( (a*(a+2)/2) - ( (a*(a+1)/2)-((a*(a+3)/2))) ) );\n}\n", "\t\
    return a*h/2;\n}\n", "  var t = (a+h)/2;\n  return sqrt(pow(a, 2) + pow(h, 2)\
    \ - 2*pow(t,2));\n}\n", "  if(h===0)\n    return 1/6\n  if(a===0)\n    return\
    \ 0\n  return 1/(Math.sqrt(Math.pow(h, 2)*(Math.pow(a, 2)-Math.pow(b, 2)+1)))\n\
    }\n", "    return Math.sqrt(a*(4-a*h)/(h*h));\n}\n</code>\n<|/ a tags=geometry,algorithm,java,math\
    \ |>\n<| c |>\nCan you please explain what you are doing here? I understand triangle_area(5,\
    \ 3), but what about triangle_area(6, 4)?\n<|/ c |>\n<| c |>\nSorry, I have been\
    \ trying to figure out what the code was doing and I forgot about this part since\
    \ my code was working properly until I decided to add some features. I will edit\
    \ my answer.\n<|/ c |>\n<| c |>\nWhat would be the correct way to return the triangle\
    \ area for a non-equilateral triangle?\n<|/ c |>\n<| c |>\nJust like in the non-equilateral\
    \ triangle, just calculate the area for the 3 side and sum them together. Do the\
    \ same thing for the other triangle you want. I'll edit the answer to show the\
    \ new code.\n<|/ c |>\n<| a tags=geometry,algorithm,java,math |>\nHere's a simple\
    \ Java implementation of a solution with the least number of lines:\n<code>\n\
    public class TriangleArea {\n\n    public static double triangleArea(double a,\
    \ double b) {\n        double s = 0.5*(a+b);\n        return Math.sqrt(Math.pow(s,2)\
    \ - Math.pow(a+b,2));\n    }\n\n    public static double area1(double a, double\
    \ b, double c) {\n        return triangleArea(b,c) - triangleArea(a,c);\n    }\n\
    \n    public static double area2(double a, double b, double c) {\n        double\
    \ s = 0.5*(a+b);\n        double t = 0.5*(a+b);\n        return Math.sqrt(Math.pow((t+s),2)\
    \ + Math.pow(t,2) - Math.pow(s+t,2));\n    }\n\n    public static double area3(double\
    \ a, double b, double c) {\n        double s = 0.5*(a+b);\n        double t =\
    \ 0.5*(a+b);\n        return Math.sqrt(Math.pow(s,2) - Math.pow(t,2) + Math.pow(t,2)\
    \ - Math.pow(s+t,2));\n    }\n\n    public static double area4(double a, double\
    \ b, double c) {\n        double s = 0.5*(a+b);\n        double t = 0.5*(a+b);\n\
    \        double u = 0.5*(a+b);\n        double v = 0.5*(a+b);\n        return\
    \ Math.sqrt(Math.pow(s,2) - Math.pow(t,2) + Math.pow(u,2) + Math.pow(s,2) - Math.pow(v,2)+Math.pow(t,2)\
    \ - Math.pow(u,2) - Math.pow(v,2));\n    }\n\n    public static double area5(double\
    \ a, double b, double c) {\n        double s = 0.5*(a+b);\n        double t =\
    \ 0.5*(a+b);\n        double u = 0.5*(a", "    var base = Math.pow(h, 1/3);\n\
    \    var triangles = a * a * (h / 12) * Math.pow(base, 1/2);\n    return Math.abs(triangles);\n\
    }\n", "    var l = 0.5 * h,\n        f = PI / 4,\n        y = l + a,\n       \
    \ pi = Math.PI,\n        sq = PI * PI;\n    return ( l * h ) * \n        ( sq\
    \ * ( 1 + ((2 * l - h ) * Math.sin( ( y - f ) / 2 )) ) -\n           ( sq * (\
    \ 1 + ((l - h) * Math.sin( ( y + f ) / 2 )) )) );\n};\n ", "  return (a+h) * (a-h)\
    \ / 2;\n}\n", "    var t = Math.sqrt(0.5 * a * a),\n        r = a / t;\n    if((h\
    \ + r) < t) r = h + t;\n    if(r < 1) return 0;\n    else if(r > a) return Math.PI;\n\
    \    var n = r - Math.floor(Math.log(r) / Math.LN2);\n    return (a*a*Math.pow(t,\
    \ n))/Math.pow(r, n);\n}\n", "    return (a*h)/2;\n}\n", "    return a * Math.sqrt(3)\
    \ / 2.0;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nYou do not need a ternary operator\
    \ to use `Math.pow` in javascript. Just do `Math.pow(a * a, h) / Math.sqrt(3)`.\
    \ And you do not need `Math.pow` in your function either, since `a * a * a` will\
    \ be `4 * a * a` regardless of what `a` and `h` are.\n<|/ c |>\n<| c |>\nYes you\
    \ are right, I was thinking of a more complicated case where you needed the ternary\
    \ operator so I wrote the answer without it.\n<|/ c |>\n<| c |>\nThank you for\
    \ the answer. Just a quick question: why do we have to use a ternary operator\
    \ in the function parameters?\n<|/ c |>\n<| c |>\n- Because we want to evaluate\
    \ the expression a + h before passing the result to the Math.pow() function. \
    \ That way the function doesn't have to do an extra multiplication.\n<|/ c |>\n\
    <| c |>\nThank you for the explanation, it makes a lot of sense now.\n<|/ c |>\n\
    <| a dscore=5 |>\nMath.pow(a, b) * Math.pow(a, h) / Math.sqrt(3); ", "  return\
    \ a * h / 2;\n}", "  return (a*(h-2))/2;\n}\n</cell>\n<cell>", "  if(a===0)\n\
    \    return 0;\n  return Math.sqrt(a*(4-a)/(h*h));\n}", "    return (a * (2* h)\
    \ + 2*h) * (3 * a);\n};\n", "  return a * Math.sqrt(3) / 2 * Math.pow(h / a, 2);\n\
    }\n", "\treturn Math.sqrt(a * h / Math.pow(a, 2)) + (a / 2) * (h / 2)\n}\n", " \
    \ var s = a * Math.sqrt(3) / 2;\n  return Math.abs( (s + Math.abs(h)) / 2 );\n\
    }\n", "  return a*(h*h/2);\n}\n</cell>\n<text>\n\U0001F4A1 Exercise: Try calling\
    \ the function with different numbers for $a$ and $h$. How does the shape of the\
    \ output compare to the shape of the input arrays?\n\n\U0001F4A1 Exercise: How\
    \ do you find the greatest common divisor?\n\n\n</text>\n<cell>\n# Solution\n",
  "    return a * (h/2)\n}\n", "\treturn ((b*h)/Math.pow((Math.pow(2,a)+1),0.5)).toFixed(4);\n\
    }\n", "  return Math.abs(a / Math.sqrt(h * (h - a) * (h + a - 1)));\n}\n", " \
    \ return a*Math.sqrt(3)*h/2\n}\n", "  return (a * (h - 1));\n}\n", '  return Math.pow(a,
    2) * (h + Math.pow(a, 2) * (-3 + Math.pow(a, 2) * (-1 + Math.pow(a, 2) * (7 -
    Math.pow(a, 2) * (-1 + Math.pow(a, 2) * (-3 + Math.pow(a, 2) * (-1 + Math.pow(a,
    2) * (-5 + Math.pow(a, 2) * (-1 + Math.pow(a, 2) * (-7 + Math.pow(a, 2) * (-1
    + Math.pow(a, 2) * (-7 + Math.pow(a, 2) * (-3 + Math.pow(a, 2) * (-5 + Math.pow(a,
    2) * (-1 + Math.pow(a, 2) * (-5 + Math.pow(a, 2) * (-1 + Math.pow(a, 2) * (-7
    + Math.pow(a, 2) * (-5 + Math.pow(a, 2) * (-3 + Math.pow(a, 2) * (-7 + Math.pow(a,
    2) * (-5 + Math.pow(a, 2) * (-3 + Math.pow(a, 2) * (-7 + Math.pow(a, 2) * (-3
    + Math.pow(a, 2) * (-5 + Math.pow(a, 2) * (-7 + Math.pow(a, 2) * (-3 + Math.pow(a,
    2) * (-5 + Math.pow(a, 2) * (-3 + Math.pow(a, 2) * (-7 + Math.pow(a, 2) * (-3
    + Math.pow(a, 2) * (-5 + Math.pow(a, 2) * (-3 + Math.pow(a, 2) * (-5 + Math.pow(a,
    2) * (-3 + Math.pow(a, 2) * (-5 + Math.pow(a, 2) * (-3 + Math.pow(a, 2) * (-7
    + Math.pow(a, 2) * (-5 + Math.pow(a, 2) * (-3 + Math.pow(a, 2) * (-7 + Math.pow(a,
    2) * (-5 + Math.pow(a, 2) * (-3 + Math.pow(a, 2) * (-7 + Math.pow(a, 2) * (-3
    + Math.pow(a, 2) * (-5 + Math.pow(a, 2) * (-3 + Math.pow(a, 2) * (-5 + Math.pow(a,
    2) * (-3 + Math.pow(a, 2) * (-5 + Math.pow(a, 2) * (-3 + Math.pow(a, 2) * (-7
    + Math.pow(a, 2) * (-3 + Math.pow(a, 2) * (-5 + Math.pow(a, 2) * (-3 + Math.pow(a,
    2) * (-5 + Math.pow(a, 2) * (-3 + Math.pow(a, 2) * (-5 + Math.pow(a, 2) * (-3
    + Math.pow(a, 2) * (-5 + Math.pow(a, 2) * (-7 + Math.pow(a, 2) * (-3 + Math.pow(a,
    2) * (-5 + Math.pow(a, 2) * (-7 + Math.pow(a, 2) * (-5 + Math.pow(a, 2) * (-3
    + Math.pow(a, 2) * (-5 + Math.pow(a, 2) * (-7 + Math.pow(a, 2) * (-5 + Math.pow(a,
    2) * (-3 + Math.pow(a, 2) * (-5 + Math.pow(a, 2) * (-3 + ', "  return a * (h/2\
    \ * Math.tan(Math.PI/3) * Math.pow(Math.tan(Math.PI/4), 3)) \n}", "  return (a*(h*h-2*a*h+a)\
    \ + h*(a+h))/(a+h*2);\n}\n", "    var tri;\n    if(a==0){\n        return 0;\n\
    \    }\n    if(a<0){\n        tri=[0,0,0];\n        tri[0]=(1/h)*(1/(1/a+1));\n\
    \        tri[1]=(1/h)*(1/(1/a-1));\n        tri[2]=(1/h)*(1/(1/a-2));\n    }\n\
    \    else{\n        tri=[0,0,0];\n        tri[0]=(1/h)*(1/(1/a+1));\n        tri[1]=(1/h)*(1/(1/a));\n\
    \        tri[2]=(1/h)*(1/(1/a-2));\n    }\n    return tri[2]-tri[0];\n}\n", " \
    \ return Math.sqrt(a * (3 - a) * h / 6)\n}", "    return Math.sqrt(a*(a+h)*(a+h+1));\n\
    }\n", "  return a/(a+2*h);\n}\n", "    var _a = a,\n        _h = h;\n    return\
    \ ((_a * (_h - _a))/(_h * (_h - _a + 1)));\n}\n", "    return a*(Math.sqrt(3)/2*Math.abs(Math.sqrt(a)*Math.sqrt(h)-a));\n\
    }\n", "    return Math.sqrt(a*(a+h)*(a+h+2*a*h));\n}\n", "\treturn a * (h - a)\
    \ / 2.0;\n}\n", "    return a/2 * (1/2 * Math.sqrt(3) * Math.pow(h, 3/2));\n}\n",
  "    return Math.sqrt(a * a + h * a * h) / 2;\n}", "  return Math.abs((a/2)*(h/3));\n\
    }\n", "\treturn (a*h)/Math.sqrt(a*a+h*h);\n}", "    return (a/2) * Math.sqrt(3\
    \ + a*h/Math.tan(Math.PI/6)); \n}\n", "    if(a === 0) return 0\n    if(h ===\
    \ 0) return 0\n    h = Math.max(h, 1)\n    return a * (0.5 - (h*h)/(a+a))\n}\n",
  "  return Math.sqrt(a * (a * h - a) * h) / 2;\n}\n", "  var b = 0;\n  var c = 0;\n\
    \  var d = 0;\n  if(h === 0) return 0;\n  if(h === 1) return 1;\n  if(h === 2)\
    \ return a * h;\n  if(h === 3) return 0;\n  if(h === 4) return a * h * h;\n  if(h\
    \ === 5) return a * h * h * h;\n  if(h === 6) return a * h * h * h * h;\n  if(h\
    \ === 7) return a * h * h * h * h * h;\n  if(h === 8) return a * h * h * h * h\
    \ * h * h;\n  if(h === 9) return a * h * h * h * h * h * h * h;\n  if(h === 10)\
    \ return a * h * h * h * h * h * h * h * h;\n  if(h === 11) return a * h * h *\
    \ h * h * h * h * h * h * h;\n  if(h === 12) return a * h * h * h * h * h * h\
    \ * h * h * h * h;\n  if(h === 13) return a * h * h * h * h * h * h * h * h *\
    \ h * h * h;\n  if(h === 14) return a * h * h * h * h * h * h * h * h * h * h\
    \ * h * h * h;\n  if(h === 15) return a * h * h * h * h * h * h * h * h * h *\
    \ h * h * h * h;\n  if(h === 16) return a * h * h * h * h * h * h * h * h * h\
    \ * h * h * h * h * h;\n}\n", "\treturn a * Math.sqrt(3 / 4 * (Math.sqrt(h / a)\
    \ - 1 / 3));\n}\n", "  return Math.abs((a / Math.pow(h,2))- ((1/3)*Math.pow(1/3,2)));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis really helps me to understand things,\
    \ thanks. Now I understand the formula to calculate the area of a triangle in\
    \ a right way :). But I'm still having some difficulties with the \"H\" parameter\
    \ that you wrote. What does it mean?\n<|/ c |>\n<| c |>\nH is a height of triangle\
    \ and h*h is the area of a triangle. It is just another way of computing area.\
    \ Like area=4/3*pi*h where h is a height of a triangle.\n<|/ c |>\n<| c |>\nthank\
    \ you for your explanation. Just one more thing. What should I set as the value\
    \ for H and why? I've tried with different values that I've found online but still\
    \ having the same problem.\n<|/ c |>\n<| c |>\nYou can do something like this\
    \ `triangle_area(5, 5)`. But if you do that you will get area of triangle of height\
    \ 5. Because area is 4/3*pi*5=22.6. Which is not what you want. Because area of\
    \ a triangle of a specific height should remain same.\n<|/ c |>\n<| c |>\nYes,\
    \ you're right, my bad. So I guess I will have to calculate the area of a triangle\
    \ of a specific height with your formula, but I guess I will have to do it in\
    \ another way. Thanks for helping.\n<|/ c |>\n<| a |>\n<code>", "    var hw =\
    \ a/2, \n        hp = a/4,\n        area = hw*hw, \n        p1 = area_of_triangle(hw,\
    \ 0, h),\n        p2 = area_of_triangle(hw, hp, h),\n        p3 = area_of_triangle(hw,\
    \ hp, hp);\n    return area;\n}", "    var s = (h/2) * Math.sqrt(a/3);\n    return\
    \ Math.sqrt(s*(s-a)*(s-h));\n}\n", "  return a * (h * (h - 1)/2);\n}", "    return\
    \ (a*h*h)/Math.sqrt(a*a*h*h+h*h+a*a);\n}\n", "  return (a+h)*.5\n}\n", "  var\
    \ w = Math.sqrt(a*a*h - 4*a*h*h/(h+h+h));\n  return w > 0 ? w * 0.5 : 0;\n}\n",
  "  return (a * a) / Math.sqrt(3) / Math.sqrt(h * a * a);\n}\n", "  return (a+h)*(a-h)\n\
    }\n", "  return (a * h) / 2\n}\n", "    return h * (h * (3 / 2) + (a / 2));\n\
    }\n", "\ta = Math.floor(a);\n\th = Math.floor(h);\n\treturn a * (h-a) / 2\n}\n",
  "  return a * ((h / 2) / Math.sqrt(3));\n}", "  return a * Math.sqrt(3) / 2 * h;\n\
    };\n\nmodule.exports = triangle_area;\n},{}],429:[function(require,module,exports){\n\
    var triangle_area = require('./triangle-area.js');\nvar circumcircle_area = require('./circumcircle.js');\n\
    \nmodule.exports = function area(polygon) {\n  var i = -1,\n      n = polygon.length,\n\
    \      a,\n      b = polygon[n - 1],\n      area = 0;\n\n  while (++i < n) {\n\
    \    a = b;\n    b = polygon[i];\n    area += a[1] * b[0] - a[0] * b[1];\n  }\n\
    \n  return Math.abs(area) * triangle_area(a, b);\n};\n},{\"./circumcircle.js\"\
    :427,\"./triangle-area.js\":430}],430:[function(require,module,exports){\nvar\
    \ ray = require('./ray.js');\n\nmodule.exports = function triangle(a, b) {\n \
    \ return ray(\n    b[0] - a[0],\n    b[1] - a[1],\n    b[2] - a[2]\n  );\n};\n\
    },{\"./ray.js\":434}],431:[function(require,module,exports){", "   return a *\
    \ ((Math.sqrt(3)-1) * h);\n}\n", "  return (a * h * h) / Math.sqrt(a*a*h*h + a*a*a*h);\n\
    }\n", "  return (a+h)*(a-h)/2;\n}", "    return (h*h*a) / Math.sqrt(a*a*h*h);\n\
    }\n", "    return a * (Math.sqrt(3)-Math.pow(h/3,3));\n}\n", "   return Math.sqrt(a\
    \ * (a + h) * (a - h));\n}\n", "  return a * (h / 2);\n}", "    return a * Math.sqrt(\
    \ 1 - (h * h) / 6);\n}\n", "  return Math.abs((a+b+c+d)*(h/2));\n}\n", "  return\
    \ (a * h) / Math.sqrt(3 * (h*h-3*a*a));\n}\n</code>\n<|/ a tags=algorithm,geometry,javascript\
    \ dscore=1 |>\n<| a dscore=0 |>\n<code>", "    return Math.abs(a*h - (a>h)?a*h-(a-h):(a-h)*(a-h));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,algorithm,geometry,math |>\n\
    Based on answer and some math, this is what worked for me:\n\n<code>", "  return\
    \ a * h / 2;\n}\n", "  return (a * (a+1)) / 2\n}\n", "    var s = (a+b+c)/2;\n\
    \    var area = Math.sqrt(s*(s-a)*(s-b)*(s-c));\n    return h*h*area;\n}", " \
    \ return a * (h / 3);\n}\n", "    return a * (h / 2);\n}\n", "  var length = a\
    \ * a * Math.sqrt(3) / Math.sqrt(Math.pow(a, 3) + Math.pow(a, 2));\n  return Math.pow(length,\
    \ h / 2);\n}\n", "  return (a * Math.sqrt(3 - (1 / h)) );\n}\n", "  return Math.sqrt(3*(4/(a+h)*Math.tan(Math.PI/(a+h))));\n\
    }\n", "    var t = a/(3*h);\n    return a*Math.sqrt(3)*t*t+h*Math.sqrt(3)*(1-t)+3*h*Math.sqrt(6)*Math.sin((1-t)*Math.PI/3);\n\
    }\n", "  return (a * (h/2.0)) * Math.SQRT2;\n}", "    console.log(a,h)\n    var\
    \ p1=p2.point([0,0])\n    p1=p2.point([a,h])\n    p2=p2.point([a,0])\n    p2.translate([a,h/2])\n\
    \    var m1=p2.transform(p1.getMatrix())\n    var m2=p2.transform(p1.getMatrix().inverse())\n\
    \    return (m1.a*m2.d-m1.b*m2.c)/(m1.b*(m2.a-m1.a)*(m2.b-m1.b))\n}\n", "  return\
    \ (a*h)/Math.sqrt(3*Math.pow(a, 2)-Math.pow(h,2));\n}\n", "    var tri_area_area_c\
    \ = (a/2) * Math.sqrt(3);\n    var tri_area_area_h = (h/2) * Math.sqrt(3);\n \
    \   return (tri_area_area_c + tri_area_area_h);\n}\n", "    return (a*h)/Math.sqrt(a*(h*h-a*a)+1);\n\
    }\n", "\t\n\th = h || 1;\n\t\n\treturn Math.abs(Math.sqrt(a * a + h * h));\n}\n\
    \n", "  return (a * (h - a + 1))/2;\n}", "    return a * (h / 2);\n}\n", "   \
    \ var triangle_side_length = a\n    var triangle_area = Math.sqrt(triangle_side_length\
    \ * triangle_side_length * 3);\n    var area_for_triangle_area = (triangle_side_length\
    \ * a)/2\n    var height_for_triangle_area = triangle_side_length * h/2\n    var\
    \ triangle_area_for_height_h = (triangle_side_length * h)/2\n    var area_for_height_h\
    \ = area_for_triangle_area * triangle_area_for_height_h\n\n    return area_for_height_h\n\
    }\n", "    return Math.sqrt(a*a*(h+h)*(h+h));\n}\n", "\treturn a*h/2\n}\n", " \
    \ return Math.abs(a*h/Math.sqrt(a*a+h*h));\n}", "    h = h || 0;\n    return a\
    \ * (h/3)*(h/3);\n}\n", "  return Math.abs(Math.sqrt(h*(h-a)*(2*h-a)/6));\n};",
  "    return (a+h)*(a+h-1)/2;\n}\n", "  return Math.sqrt(3*(3 * a * h - a * a)) *\
    \ 0.5\n}\n\nmodule.exports = triangle_area\n},{}],9:[function(require,module,exports){\n\
    var triangles = require('./triangles');\nvar utils = require('./utils')\nvar default_area\
    \ = 32;", "  return ((a + h * h) / 2) * Math.atan(h / 2);\n}\n", "  return (1/4)*(1/3)*a*(1/3)*(1/3)*h;\n\
    }\n", "  return a * h / 2;\n}\n", "\tvar t = a * Math.sqrt(3 / 4)\n\treturn t\
    \ * (t + a) * (t + a - h)\n}\n", "    return Math.sqrt(3*(1/Math.sqrt(a))*(1/Math.sqrt(h)))\n\
    }", "\treturn (h*(3/2)*(Math.sqrt(3)*a) - (h/2)*h);\n}\n", "  return (h*h)/(a*(a+1));\n\
    }\n</cell>\n<text>\nIntersections and Unions\nA triangle is said to have at least\
    \ 3 points. Triangles have 3 sides and all 3 points are distinct. An intersection\
    \ and union of two triangles is called a segementation of a triangle.\n\nArea\
    \ of intersection\nA point in the interior of one triangle is a point that is\
    \ strictly between the sides of the other triangle.\n\n$$\n\\begin{align}\n\\\
    text{Area of intersection} \n& = \n\\begin{cases}\n  \\text{Area of triangle 1}\
    \ & \\text{if } A \\leq A \\text{ and } B \\leq B \\text{ and } C \\leq C\\\n\
    \  \\text{Area of triangle 2} & \\text{if } A \\leq A \\text{ and } B > B \\text{\
    \ and } C > C\\\n  \\text{Area of triangle 3} & \\text{if } A > A \\text{ and\
    \ } B > B \\text{ and } C > C\n\\end{cases}\n\\end{align}\n$$\n\nArea of union\
    \ of two triangles\nThe area of the union of two triangles is equal to the area\
    \ of their interiors. A triangle with smaller side length is smaller in the union\
    \ than in either of the triangles\n\nArea of union of three triangles\nThe area\
    \ of the union of two triangles is the area of the smallest triangle in union.\n\
    \n$$\n\\begin{align}\n\\text{Area of union} \n& = \n\\begin{cases}\n  \\text{Area\
    \ of triangle 1} & \\text{if } A > A \\text{ and } B > B \\text{ and } C > C\\\
    \n  \\text{Area of triangle 2} & \\text{if } A > A \\text{ and } B > B \\text{\
    \ and } C \\leq C\\\n  \\text{Area of triangle 3} & \\text{if } A > A \\text{\
    \ and } B \\leq B \\text{ and } C > C\\\n  \\text{Area of triangle 4} & \\text{if\
    \ } A < A \\text{ and } B > B \\text{ and } C \\leq C\\\n  \\text{Area of triangle\
    \ 5} & \\text{if } A < A \\text{ and } B > B \\text{ and } C > C\\\n  \\text{Area\
    \ of triangle 6} ", "  return h*(a+a-1);\n}", "    return a * (Math.sqrt(3)*h)/(2*a)\n\
    }\n", "    var a1 = h * (a - 1) / 3, a2 = h * (a - 2) / 3, a3 = h * (a - 3) /\
    \ 3, b1 = 2 * h * (b - 1) / 3, b2 = 2 * h * (b - 2) / 3, c1 = 2 * h * (c - 1)/3,\
    \ c2 = 2 * h * (c - 2)/3;\n    return Math.abs(a1 * b2 - a2 * b1 + a2 * c2 - a3\
    \ * c1 + 2 * b1 * c2 - 2 * b2 * c1 + a * c2 - a * c1);\n}\n", "  return (a * (h\
    \ + Math.sqrt(h ** 2 - 4 * a )))/2;\n}\n", "    var base = Math.sqrt(Math.pow(h,\
    \ w) / 2);\n    var r = Math.sqrt(Math.pow(a, 2) + (h*h) / 12);\n    return base\
    \ / r;\n}", "  return (a*(h/2)*((h/2)+(a/2)))\n}\n", "  return (a * (h-2))/2 +\
    \ \n      ((h-1)*(a-2))/2;\n};\n", "    return ((h*h)/2) * Math.sqrt(Math.pow(a\
    \ + h,2)*(Math.pow(a+h,2)+Math.pow(h,2)));\n}\n    ", "    return Math.sqrt(a\
    \ * a + h * h);\n}\n", "    if(h === 0){\n        return 0;\n    }\n    return\
    \ Math.sqrt(a * a + h * a/h);\n}\n", "  var aSquared = a * a;\n  var bSquared\
    \ = h * h;\n  return aSquared + bSquared;\n}\n", "  if(a < 0 && h >= 0) return\
    \ -1\n  if(a >= 0 && h < 0) return -1\n  if(a = 0 && h >= 0) return 0\n  return\
    \ 1/2 * Math.sqrt(Math.pow(a, 2) + (Math.pow(h/2, 2)))\n}\n", "  return (a+h)*(a-h)\n\
    }\n", "    return ((h*h)/(a*a))\n}\n", "  return (a * (h - a) / 2) / Math.sqrt(Math.pow(a+a,2)\
    \ + Math.pow(h+h,2));\n}\n", "\treturn (1 + Math.sqrt(5 * (a * (a - h)))) / 2;\n\
    }\n", "  return a*(0.5*h*h+0.5);\n}\n", "\treturn a*h/2\n}", "\treturn (a + b\
    \ * h)/ 2\n}\n", "  switch(a){\n    case 0: return 0;\n    case 1: return Math.sqrt(3);\n\
    \    case 2: return Math.sqrt(5);\n    case 3: return Math.sqrt(7);\n    default:\
    \ return Math.sqrt(3) * Math.sqrt(5) / Math.sqrt(7);\n  }\n}", "  return a * (0.5\
    \ * h);\n}\n", "  var x = h-a\n  var y = Math.sqrt(Math.pow(x, 2)+Math.pow(x,\
    \ 2))\n  return x/y\n}\n", "    return (a * Math.sqrt(3) / 2) * (1 + h * (1 /\
    \ Math.pow(a, 2)));\n}\n", "\tvar s = a * Math.sqrt(3) / 2;\n\tvar r = (a+h) *\
    \ Math.sqrt(3) / 2;\n\treturn s * Math.sqrt(Math.pow(r,2) - Math.pow(a,2));\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
