name: HumanEval_74_total_match
language: js
prompt: "//Write a function that accepts two arrays of strings and returns the array\
  \ that has \n// total number of chars in the all strings of the array less than\
  \ the other array.\n// if the two arrays have the same number of chars, return the\
  \ first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"\
  hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"\
  hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"\
  ]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\"\
  , \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
  ])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = total_match;\n  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"\
  hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
  hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n\
  \  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"\
  4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"\
  hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
  , \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"\
  admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
  \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
completions: ["   \n   return lst1.filter( function(item, index, arr){\n      if(lst2.indexOf(item)\
    \ < 0){\n         return false;\n      }else{\n         return true;\n      }\n\
    \   });\n}\n", "\tvar arr1 = [];\n\tfor(var i = 0; i<lst1.length; i++){\n\t\t\
    arr1.push(lst1[i].length)\n\t}\n\tvar arr2 = [];\n\tfor(var i = 0; i<lst2.length;\
    \ i++){\n\t\tarr2.push(lst2[i].length)\n\t}\n\tvar i = 0;\n\twhile(i < arr1.length){\n\
    \t\tif(arr1[i] < arr2[i]){\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn lst1.slice(0,i);\n\
    }", "\tif(lst1.length === lst2.length){\n\t\treturn lst1;\n\t}\n\tvar total =\
    \ 0;\n\tfor(var i=0; i<lst1.length; i++){\n\t\tvar l1 = lst1[i];\n\t\tfor(var\
    \ j=0; j<lst2.length; j++){\n\t\t\tvar l2 = lst2[j];\n\t\t\tif(l1 <= l2){\n\t\t\
    \t\ttotal++;\n\t\t\t\tlst1.splice(i, 1);\n\t\t\t\tlst2.splice(j, 1);\n\t\t\t\t\
    i--;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t}\n\treturn total_match(lst1, lst2);\n}",
  "  let result = lst1.filter(e => lst2.includes(e));\n  if (lst1.length == lst2.length)\
    \ return result;\n  else return lst1;\n}\n", "    let array = []\n    if (lst1.length\
    \ == lst2.length){\n        for (let i = 0; i < lst1.length; i++){\n         \
    \   if (lst1[i] < lst2[i]){\n                array.push(lst1[i])\n           \
    \ } else {\n                array.push(lst2[i])\n            }\n        }\n  \
    \      return array\n    } else {\n        return lst1\n    }\n}\n", "\tvar res\
    \ = lst1;\n\tvar length1 = lst1.length;\n\tvar length2 = lst2.length;\n\tfor(var\
    \ i = 0; i < length1; i++){\n\t\tfor(var j = 0; j < length2; j++){\n\t\t\tif(lst1[i]\
    \ > lst2[j]){\n\t\t\t\tres.splice(i, 1, lst2[j]);\n\t\t\t\tlength2 --;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n", "\tlst1 = lst1.sort();\n\t\
    lst2 = lst2.sort();\n\tlet n1 = lst1.length;\n\tlet n2 = lst2.length;\n\tlet result\
    \ = lst1.slice();\n\twhile (n1 > 0 && n2 > 0) {\n\t\tif (lst1[n1 - 1] > lst2[n2\
    \ - 1]) {\n\t\t\tn1 -= 1;\n\t\t} else {\n\t\t\tn2 -= 1;\n\t\t}\n\t}\n\treturn\
    \ result\n}", "  var len1 = lst1.length\n  var len2 = lst2.length\n  var count\
    \ = 0\n  for(var i = 0; i < len1; i++){\n    for(var j = 0; j < len2; j++){\n\
    \      if(lst1[i] < lst2[j]){\n        count ++\n      }\n    }\n  }\n  if(len1\
    \ == len2){\n    return lst1\n  }\n  else{\n    return lst1\n  }\n}\n", "    var\
    \ result = [];\n    \n    if(lst1.length == lst2.length){\n        for(var i=0,\
    \ len=lst2.length; i<len; i++){\n            var str = lst1[i];\n            var\
    \ str2 = lst2[i];\n            var num = str.length;\n            var num2 = str2.length;\n\
    \            \n            if(num > num2){\n                result.push(str);\n\
    \            }else if(num < num2){\n                result.push(str2);\n     \
    \       }\n        }\n    }\n    \n    return lst1.length > lst2.length ? result\
    \ : lst2;\n}\n", "\tvar length = lst1.length;\n\tvar sameLength = true;\n\tfor(var\
    \ i=0;i<length;i++){\n\t\tif(lst1[i] != lst2[i]){\n\t\t\tsameLength = false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\tif(sameLength){\n\t\treturn lst1;\n\t}else{\n\t\t\
    var length = lst2.length;\n\t\tvar sameLength = true;\n\t\tfor(var i=0;i<length;i++){\n\
    \t\t\tif(lst2[i] != lst1[i]){\n\t\t\t\tsameLength = false;\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t}\n\t\tif(sameLength){\n\t\t\treturn lst2;\n\t\t}else{\n\t\t\tvar result\
    \ = [];\n\t\t\tfor(var i=0;i<lst1.length;i++){\n\t\t\t\tresult.push(lst1[i]);\n\
    \t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n}\n", "  if (lst1.length == lst2.length)\
    \ return lst1;\n  if (lst1.length < lst2.length){\n    var tmp = lst1;\n    lst1\
    \ = lst2;\n    lst2 = tmp;\n  }\n  var char_count = {};\n  lst1.forEach(function(el){\n\
    \    char_count[el] = 0;\n  })\n  lst2.forEach(function(el){\n    if (char_count[el]\
    \ > 0) char_count[el]++;\n  })\n  return Object.keys(char_count).map(function(x){\n\
    \    return char_count[x];\n  });\n}\n", "\tvar arr1 = [];\n\tvar arr2 = [];\n\
    \tfor(var i=0; i<lst1.length; i++){\n\t\tarr1[i] = lst1[i];\n\t}\n\tfor(var i=0;\
    \ i<lst2.length; i++){\n\t\tarr2[i] = lst2[i];\n\t}\n\tarr2.sort();\n\tfor(var\
    \ i=0; i<arr2.length; i++){\n\t\tfor(var j=0; j<arr1.length; j++){\n\t\t\tif(arr2[i]===arr1[j]){\n\
    \t\t\t\tarr1.splice(j, 1);\n\t\t\t}\n\t\t}\n\t}\n\tif(arr1.length===1){\n\t\t\
    return arr1[0];\n\t}\n\treturn arr1;\n}\n", "    return lst1.filter(function(x){return\
    \ lst2.indexOf(x)<0;}).concat(lst2.filter(function(x){return lst1.indexOf(x)<0;}).slice(0,lst1.length));\n\
    }\n", "    \n    let len1 = lst1.length\n    let len2 = lst2.length\n    if(len1\
    \ === 0){\n        return lst2\n    }\n    if(len2 === 0){\n        return lst1\n\
    \    }\n    if(len1 === len2){\n        for(let i=0;i<len1;i++){\n           \
    \ let first = lst1[i]\n            let second = lst2[i]\n            if(first\
    \ < second){\n                return [second]\n            }\n        }\n    \
    \    return lst1\n    }\n    return lst1\n}\n", "  if(lst1.length != lst2.length){\n\
    \    return lst1;\n  }\n  var maxNum = Number.MAX_VALUE;\n  for(var i = 0; i<\
    \ lst1.length; i++){\n    var n = lst1.charCodeAt(i) - lst2.charCodeAt(i);\n \
    \   if(n < 0){\n      n = n + 256;\n    }\n    if(n > maxNum){\n      maxNum =\
    \ n;\n    }\n  }\n  for(var i = 0; i< lst1.length; i++){\n    var n = lst1.charCodeAt(i)\
    \ - lst2.charCodeAt(i);\n    if(n < 0){\n      n = n + 256;\n    }\n    if(n >\
    \ maxNum){\n      return lst1;\n    }\n  }\n  return lst2;\n}\n", "\tif(lst1.length\
    \ === lst2.length){\n\t\treturn lst1.filter(function(val){\n\t\t\treturn lst1.indexOf(val)\
    \ !== lst2.indexOf(val);\n\t\t})\n\t}\n\telse{\n\t\treturn lst1;\n\t}\n}", " \
    \   let match = [];\n    for(let i = 0; i < lst1.length; i++){\n        if(lst2.includes(lst1[i])\
    \ && lst2.includes(lst1[i+1]) && lst2.includes(lst1[i+2])){\n            match.push(lst1[i]);\n\
    \            i += 3;\n        }\n        else if(lst2.includes(lst1[i]) && lst2.includes(lst1[i+1])\
    \ && lst2.includes(lst1[i+2])){\n            i += 2;\n        }\n        else\
    \ if(lst2.includes(lst1[i]) && lst2.includes(lst1[i+1]) && lst2.includes(lst1[i+2]))\n\
    \            i += 1;\n        else if(!lst2.includes(lst1[i]) && !lst2.includes(lst1[i+1])\
    \ && !lst2.includes(lst1[i+2])){\n            match.push(lst1[i]);\n         \
    \   i += 2;\n        }\n    }\n    if(lst1.length !== match.length){\n       \
    \ console.log(\"Error in function total_match()\");\n    }\n    return match;\n\
    }\n", "  return lst1.filter(item => lst2.filter(item => item === item).length\
    \ === lst2.length);\n}\n", "   var total_chars = [];\n   var first_match = lst1.reduce(function(pv,\
    \ cv){\n      if(pv === cv) return pv;\n      var char_of_cv = cv.charCodeAt(0);\n\
    \      var char_of_pv = pv.charCodeAt(0);\n      if(char_of_cv < char_of_pv){\n\
    \         total_chars.push(cv)\n      }else{\n         total_chars.push(pv)\n\
    \      }\n      return char_of_cv;\n   },0);\n\n   if(first_match == lst2.length){\n\
    \      if(lst2.length == total_chars.length){\n         return lst1;\n      }else{\n\
    \         return lst2;\n      }\n   }else{\n      if(lst2.length == total_chars.length){\n\
    \         return lst2;\n      }else{\n         return lst1;\n      }\n   }\n}\n",
  "\tvar arr1 = [];\n\tvar arr2 = [];\n\tfor(var i=0;i<lst1.length;i++){\n\t\tarr1.push(lst1[i]);\n\
    \t}\n\tfor(var i=0;i<lst2.length;i++){\n\t\tarr2.push(lst2[i]);\n\t}\n\tvar total_chars\
    \ = 0;\n\tfor(var i=0;i<arr1.length;i++){\n\t\tfor(var j=0;j<arr2.length;j++){\n\
    \t\t\tif(arr1[i]<arr2[j]){\n\t\t\t\ttotal_chars++;\n\t\t\t}\n\t\t}\n\t}\n\tif(total_chars==0){\n\
    \t\treturn lst1;\n\t}else{\n\t\treturn arr1;\n\t}\n}", "  let match = [];\n  lst1.forEach(el\
    \ => {\n    match.push(el);\n  });\n  lst2.forEach(el => {\n    match.forEach((el,\
    \ i) => {\n      if(el < el){\n        match.splice(i, 1);\n      }\n    });\n\
    \  });\n  return match;\n}\n", "    var result = [];\n    var len1 = lst1.length;\n\
    \    var len2 = lst2.length;\n    var c1 = 0, c2 = 0;\n    \n    for(var i = 0;\
    \ i < len1; i++){\n        if(lst1[i] < lst2[i]){\n            c1++;\n       \
    \ }\n    }\n    \n    for(var i = 0; i < len2; i++){\n        if(lst2[i] < lst1[i]){\n\
    \            c2++;\n        }\n    }\n    \n    if(c1 == len1 && c2 == len2){\n\
    \        return lst1;\n    }\n    \n    if(c1 == len2){\n        return lst2;\n\
    \    }\n    \n    if(c2 == len1){\n        return lst1;\n    }\n    \n    if(c1\
    \ == len1 && c2 == len2){\n        return lst2;\n    }\n    \n    for(var i =\
    \ 0; i < len1; i++){\n        if(lst1[i] == lst2[i]){\n            result.push(lst1[i]);\n\
    \        }\n    }\n    \n    return result;\n}\n", "\tlet arr = [];\n\tlst1.forEach(str1\
    \ => {\n\t\tarr = [...arr,...str1.split(\"\")]\n\t})\n\tlst2.forEach(str2 => {\n\
    \t\tarr = [...arr,...str2.split(\"\")]\n\t})\n\tlet uniqueArr = [...new Set(arr)];\n\
    \treturn uniqueArr.length<uniqueArr.length?uniqueArr:uniqueArr\n}", "  var result\
    \ = [];\n  lst1.forEach(function(item1){\n    lst2.forEach(function(item2){\n\
    \      if(item2 <= item1){\n        result.push(item2);\n      }\n    });\n  });\n\
    \  return result;\n}\n", "\tvar a1 = new Array(lst1.length);\n\tvar a2 = new Array(lst2.length);\n\
    \tlst1.forEach(function(v, i){a1[i] = v.charCodeAt();});\n\tlst2.forEach(function(v,\
    \ i){a2[i] = v.charCodeAt();});\n\tif(a1.length != a2.length){\n\t\treturn a1;\n\
    \t}\n\tif(a1.length == a2.length){\n\t\tvar c = new Array(a2.length);\n\t\tfor(var\
    \ i=0; i<a2.length; i++){c[i] = a1[a2.length - 1 - i];}\n\t\treturn c;\n\t}\n\t\
    return a1;\n}\n", "\tlst1.forEach((ele)=>{\n\t\t\n\t})\n}\n", "    var i;\n  \
    \  var j;\n    var total_match = [];\n    var total_matches = 0;\n\n    if (lst1.length\
    \ == 0){\n        return lst2;\n    }\n    if (lst2.length == 0){\n        return\
    \ lst1;\n    }\n\n    for (i = 0; i < lst1.length; i++){\n        for (j = 0;\
    \ j < lst2.length; j++){\n            if (lst1[i] != lst2[j]){\n             \
    \   break;\n            }\n        }\n\n        if (j < lst2.length){\n      \
    \      total_match.push(lst1[i]);\n            total_matches++;\n        }\n \
    \   }\n\n    if (total_matches == 0){\n        return lst1;\n    }\n    return\
    \ total_match;\n}\n", "\treturn lst1.filter(function(elem){\n\t\treturn lst2.indexOf(elem)\
    \ < 0;\n\t}).concat(lst2.filter(function(elem){\n\t\treturn lst1.indexOf(elem)\
    \ < 0;\n\t}));\n}\n", "    for(var i = 0; i < lst1.length; i++){\n        if(lst1[i]\
    \ > lst2[i]){\n            return lst1;\n        }\n        else if(lst1[i] <\
    \ lst2[i]){\n            return lst2;\n        }\n    }\n    return lst1;\n}\n",
  "    return lst1.filter(x => lst2.indexOf(x) < lst2.indexOf(x)).concat(lst1.filter(x\
    \ => lst2.indexOf(x) > lst2.indexOf(x)));\n}\n", "    var arr1 = lst1;\n    var\
    \ arr2 = lst2;\n    var arr3 = [];\n    var i;\n    for(i = 0; i<lst1.length;\
    \ i++){\n        arr3 = arr3.concat(arr2);\n    }\n    if(arr1.length === arr3.length){\n\
    \        return arr1;\n    }\n    var c = 0;\n    for(i = 0; i < arr3.length;\
    \ i++){\n        if(arr3[i] < arr2[i]){\n            c++;\n        }\n    }\n\
    \    return arr1.slice(c, c+arr1.length);\n}\n", "\treturn (lst1.filter(x => lst2.includes(x)).length\
    \ < lst2.length) ? lst1 : lst2\n}\n", "\tconst set1 = new Set(lst1);\n\tconst\
    \ set2 = new Set(lst2);\n\tconst count = set1.size < set2.size ? set1.size : set2.size;\n\
    \treturn lst1.filter((x) => set1.has(x) && set2.has(x))\n}", "    if(lst1.length\
    \ == lst2.length){\n        return lst1;\n    }\n    var set1 = new Set(), set2\
    \ = new Set();\n    for(var i = 0, len = lst1.length; i < len; i++){\n       \
    \ if(!lst2[i].match(lst1[i])){\n            set2.add(lst1[i]);\n        }\n  \
    \  }\n    for(var i = 0, len = lst2.length; i < len; i++){\n        if(!lst1[i].match(lst2[i])){\n\
    \            set1.add(lst2[i]);\n        }\n    }\n    return set1.isSubsetOf(set2)\
    \ ? set1 : set2;\n}\n", "    var matches = []\n    var count = 0\n    for(var\
    \ i = 0; i < lst1.length; i++){\n        if(lst1.indexOf(lst2[i]) > -1){\n   \
    \         count++\n        }\n    }\n    if(count === lst1.length){\n        return\
    \ lst1\n    }else if(count === lst2.length){\n        return lst2\n    }else{\n\
    \        for(var j = 0; j < lst2.length; j++){\n            if(lst1.indexOf(lst2[j])\
    \ > -1){\n                matches.push(lst1[j])\n            }\n        }\n  \
    \      return matches\n    }\n}\n", "    return lst2.filter(function(elem){\n\
    \        return lst1.map(function(elem2){return elem2.length;}).indexOf(elem)\
    \ < 0;\n    });\n}\n", "    let result = [];\n    for(i = 0; i < lst1.length;\
    \ i++){\n        if(lst2.length){\n            while(lst2.length){\n         \
    \       if(lst2[0] == lst1[i]){\n                    result.push(lst1[i]);\n \
    \                   lst2.shift();\n                }\n                else{\n\
    \                    lst2.shift();\n                }\n            }\n       \
    \ }\n        else{\n            result.push(lst1[i]);\n        }\n    }\n    return\
    \ result;\n}\n", "\tif(lst1.length !== lst2.length){\n\t\treturn lst1;\n\t}\n\t\
    return lst1.filter(function(val, ind){\n\t\treturn lst2.indexOf(val) === ind;\n\
    \t});\n}\n", "    var common, charCount;\n    common = lst1.concat(lst2);\n  \
    \  charCount = common.filter(function(it){\n        return it.length > 0;\n  \
    \  }).length;\n    return common.filter(function(it){\n        return it.length\
    \ > charCount;\n    }).length === 0 ? lst1 : common.filter(function(it){\n   \
    \     return it.length > charCount;\n    }).sort(function(a, b){\n        return\
    \ a.length - b.length;\n    }).shift();\n}", "  return lst1.filter(function(x){\n\
    \    return lst2.indexOf(x) < lst2.indexOf(x)\n  }).sort(function(a, b){\n   \
    \ return b.length - a.length\n  }).slice(-1)[0]\n}\n", "    return lst1.filter(function(x){\n\
    \        return lst2.indexOf(x) < 0;\n    });\n}\n", "    var l1 = lst1.length,\n\
    \        l2 = lst2.length,\n        arr1 = [], \n        arr2 = [];\n    \n  \
    \  for (var i = 0; i < l1 + 1; i++){\n        arr1.push(lst1[i]);\n    }\n   \
    \ \n    for (i = 0; i < l2 + 1; i++){\n        arr2.push(lst2[i]);\n    }\n  \
    \  \n    if (arr1.length == arr2.length){\n        for (i = 0; i < arr2.length;\
    \ i++){\n            if (arr1.indexOf(arr2[i]) === -1){\n                arr1.push(arr2[i]);\n\
    \            }\n        }\n        return arr1;\n    }\n    \n    return arr2;\n\
    }", "  if(lst1.length == lst2.length){\n    return lst1\n  }\n  else{\n    return\
    \ lst1\n  }\n}\n", "  let count1=0, count2=0;\n  lst1.forEach(function(word){\n\
    \    count1 += word.length;\n  });\n  lst2.forEach(function(word){\n    count2\
    \ += word.length;\n  });\n  if(count1 === count2){\n    return lst1;\n  }else{\n\
    \    return lst2;\n  }\n}\n", "    lst1 = lst1.sort();\n    lst2 = lst2.sort();\n\
    \    \n    while(lst1.length > 0 && lst2.length > 0){\n        if(lst1[0] < lst2[0])\n\
    \            lst1.shift();\n        else if(lst2[0] < lst1[0])\n            lst2.shift();\n\
    \        else return [lst1[0], lst2[0]];\n    }\n    return lst1.concat(lst2);\n\
    }\n", "\t\n\tlet matches=[];\n\t\n\tfor(let i=0; i<lst1.length; i++){\n\t\tif(lst1.length==lst2.length\
    \ || lst1[i]==lst2[i]){\n\t\t\tmatches.push(lst1[i])\n\t\t}\n\t}\n\t\n\treturn\
    \ matches\n}\n\t", "\treturn lst1.filter(function(ele, i){\n\t\treturn lst2.indexOf(ele)\
    \ < lst2.indexOf(lst1[i]);\n\t}).concat(lst2);\n}\n", "  return lst1.filter(function(v){\n\
    \    return lst2.indexOf(v) == -1\n  }).length == lst2.length ? lst1 : lst2\n\
    }\n", "  for(var i = 0; i<lst1.length; i++){\n    var count = 0;\n    var flag\
    \ = 0;\n    for(var j=0; j<lst2.length; j++){\n      if(lst1[i].length<=lst2[j].length\
    \ && lst1[i].includes(lst2[j])){\n        count++;\n        flag = 1;\n      }\n\
    \    }\n    if(flag==1){\n      lst2.splice(i,1);\n      lst1.splice(i,1);\n \
    \     i--;\n    }\n  }\n  return lst1;\n}", "  \n  if(lst1.length == lst2.length){\n\
    \    return lst1;\n  }\n  \n  let total_lst1 = lst1.reduce((acc, cur) => acc +\
    \ cur.length, 0);\n  let total_lst2 = lst2.reduce((acc, cur) => acc + cur.length,\
    \ 0);\n  \n  if(total_lst1 == total_lst2){\n    return lst1;\n  }\n  \n  return\
    \ lst1;\n}\n", "    return lst1.filter(function (elem) {\n        return lst2.indexOf(elem)\
    \ < 0;\n    }).concat(lst1.filter(function (elem) {\n        return lst2.indexOf(elem)\
    \ > -1;\n    }));\n}\n", "  var l1 = lst1.length;\n  var l2 = lst2.length;\n \
    \ if(l1 == 0 || l2 == 0) return lst1;\n  if(l1 == l2) return lst1;\n  if(l1 <\
    \ l2) return total_match(lst1, lst1.slice(0,l2));\n  \n  var total_char = lst2.reduce(function(sofar,\
    \ item){\n    return sofar + item.length;\n  }, 0);\n  var first_bigger_list =\
    \ [];\n  \n  for(var i = 0; i < lst2.length; i++){\n    var item = lst2[i];\n\
    \    var len = item.length;\n    \n    if(!first_bigger_list || len > total_char){\n\
    \      first_bigger_list.push(item);\n    }\n  }\n  \n  return first_bigger_list;\n\
    }\n", "    let maxLen = Math.max(lst1.length, lst2.length);\n    let ret = [];\n\
    \    for(let i = 0; i<maxLen; i++){\n        let item1 = lst1[i]\n        let\
    \ item2 = lst2[i]\n        if(item1.length >= item2.length){\n            if(item1.length\
    \ == item2.length){\n                ret.push(item1)\n            }\n        \
    \    else{\n                for(let j = 0; j < item2.length; j++){\n         \
    \           if(item1[j] != item2[j]){\n                        break\n       \
    \             }\n                    ret.push(item1)\n                }\n    \
    \        }\n        }\n        else{\n            if(item1.length == item2.length){\n\
    \                ret.push(item2)\n            }\n            else{\n         \
    \       for(let j = 0; j < item2.length; j++){\n                    if(item1[j]\
    \ != item2[j]){\n                        break\n                    }\n      \
    \              ret.push(item2)\n                }\n            }\n        }\n\
    \    }\n    return ret;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI agree with\
    \ you, my code has bad style and can be better than this one.\n<|/ c |>\n<| c\
    \ |>\nThanks mate, this was a learning experience for me. Appreciate it a lot.\n\
    <|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nconst arr1 = [\"hi\", \"admin\"\
    , \"project\"];\nconst arr2 = [\"hi\", \"hi\", \"admin\", \"project\"];\nconst\
    \ arr3 = [\"hi\", \"admin\", \"project\"];\nconst arr4 = [\"hi\", \"hi\"];\n\n\
    const compare = function(a, b) {\n  let arr = [];\n  a.forEach((item) => {\n \
    \   b.forEach((bItem) => {\n      if (item == bItem) {\n        arr.push(item);\n\
    \        return;\n      }\n    });\n  });\n\n  return arr;\n};\n", "\tlet count\
    \ = 0;\n\tlet newLst = [];\n\tlst1.forEach(str1 => {\n\t\tlst2.forEach(str2 =>\
    \ {\n\t\t\tcount += str1.length < str2.length ? str1.length : str2.length;\n\t\
    \t});\n\t});\n\tif(lst1.length !== lst2.length){\n\t\treturn lst1;\n\t} else {\n\
    \t\tnewLst = lst1.slice(0, count);\n\t\treturn newLst;\n\t}\n}", "    var lst3\
    \ = [];\n    var maxSize = Math.max(lst1.length, lst2.length);\n    for(var i\
    \ = 0; i<maxSize; i++){\n        if(lst1[i] < lst2[i])\n            lst3.push(lst1[i]);\n\
    \        else\n            lst3.push(lst2[i]);\n    }\n    return lst3;\n}\n",
  "    let result = [];\n    lst1.forEach(item => {\n        let found = lst2.find(\
    \ \n            val => val.length == item.length && item == val\n        );\n\
    \        if (found) result.push(found);\n    });\n    return lst1.length == result.length?\
    \ result : lst1;\n}\n", "  if (lst1.length === lst2.length){\n    for (var i in\
    \ lst1){\n      if (lst2.indexOf(lst1[i]) === -1){\n        lst2.push(lst1[i]);\n\
    \      }\n    }\n    return lst2;\n  }\n  else if (lst1.length < lst2.length){\n\
    \    for (var i in lst2){\n      if (lst1.indexOf(lst2[i]) === -1){\n        lst1.push(lst2[i]);\n\
    \      }\n    }\n    return lst1;\n  }\n  else {\n    return lst1;\n  }\n}\n",
  "\tvar i, j, k, temp, temp2;\n\tvar maxLen = Math.max(lst1.length, lst2.length);\n\
    \t\n\tif(lst1.length != lst2.length){\n\t\treturn lst1;\n\t}\n\t\n\tfor(i = 0;\
    \ i<maxLen; i++){\n\t\ttemp = '';\n\t\t\n\t\tfor(j = 0; j<lst1.length; j++){\n\
    \t\t\ttemp += lst1[j];\n\t\t\tif(j < lst2.length){\n\t\t\t\ttemp += lst2[j];\n\
    \t\t\t}\n\t\t}\n\t\t\n\t\tfor(k = j+1; k<lst2.length; k++){\n\t\t\ttemp += lst2[k];\n\
    \t\t}\n\t\t\n\t\ttemp2 = lst2.filter(function(e){\n\t\t\treturn e.indexOf(temp)\
    \ == -1;\n\t\t});\n\t\t\n\t\tif(temp2.length == 0){\n\t\t\treturn lst1;\n\t\t\
    }else{\n\t\t\treturn temp2;\n\t\t}\n\t}\n}\n", "\tif (lst1.length == lst2.length){\n\
    \t\tfor (let i = 0; i < lst1.length; i++) {\n\t\t\tif (lst1[i].length < lst2[i].length){\n\
    \t\t\t\treturn lst1[i];\n\t\t\t}\n\t\t}\n\t\treturn lst1;\n\t}else{\n\t\tlet count\
    \ = 0;\n\t\tfor (let i = 0; i < lst1.length; i++){\n\t\t\tcount += lst1[i].length;\n\
    \t\t}\n\t\tfor (let i = 0; i < lst2.length; i++){\n\t\t\tcount += lst2[i].length;\n\
    \t\t}\n\t\tif (count == lst1.length){\n\t\t\treturn lst1;\n\t\t}else if (count\
    \ == lst2.length){\n\t\t\treturn lst2;\n\t\t}else{\n\t\t\tlet arr = [];\n\t\t\t\
    for (let i = 0; i < lst1.length; i++){\n\t\t\t\tif (lst2[i].length >= lst1[i].length){\n\
    \t\t\t\t\tarr.push(lst1[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (let i = 0; i < lst2.length;\
    \ i++){\n\t\t\t\tif (lst1[i].length >= lst2[i].length){\n\t\t\t\t\tarr.push(lst2[i]);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\treturn arr;\n\t\t}\n\t}\n}\n", "  let arr1 = lst1.map(x\
    \ => x.split(\"\").filter(y => y !== \" \").join(\"\"));\n  let arr2 = lst2.map(x\
    \ => x.split(\"\").filter(y => y !== \" \").join(\"\"));\n  let common = arr1.filter(x\
    \ => arr2.indexOf(x) > -1);\n  if(arr1.length != arr2.length){\n    return common;\n\
    \  }else{\n    let index = arr1.findIndex((x) => arr2.indexOf(x) > -1);\n    return\
    \ common.filter(x => x === arr1[index]);\n  }\n}\n", "    var result = [];\n \
    \   for(var i = 0; i < lst1.length; i++){\n        if (lst2.indexOf(lst1[i]) <\
    \ 0){\n            result.push(lst1[i])\n        }\n    }\n    return lst1;\n}",
  "    let res = [];\n    for(let i = 0; i < lst1.length; i++){\n        let count\
    \ = 0;\n        for(let j = 0; j < lst2.length; j++){\n            if(lst1[i]\
    \ == lst2[j]){\n                count++;\n            }\n        }\n        if(count\
    \ > lst1.length){\n            res.push(lst1[i]);\n        }\n    }\n    return\
    \ res;\n}\n", "    if (lst1.length == lst2.length) {\n        return lst1;\n \
    \   }\n    var char_count = 0;\n    for (var i in lst1) {\n        char_count\
    \ += lst1[i].length;\n    }\n    for (var i in lst2) {\n        char_count +=\
    \ lst2[i].length;\n    }\n    var new_lst = lst1;\n    for (var i in lst2) {\n\
    \        if (lst1[i].length < lst2[i].length) {\n            new_lst.push(lst2[i]);\n\
    \        }\n    }\n    return new_lst;\n}\n", "\tlet count = 0;\n\tlet first =\
    \ [];\n\tlet second = [];\n\tfor (let i = 0; i < lst1.length; i++){\n\t\tfirst[i]\
    \ = lst1[i];\n\t}\n\tfor (let i = 0; i < lst2.length; i++){\n\t\tsecond[i] = lst2[i];\n\
    \t}\n\tfor (let i = 0; i < lst1.length; i++){\n\t\tif (second.indexOf(first[i])\
    \ == -1){\n\t\t\tcount+=1;\n\t\t}\n\t}\n\tif (count === lst1.length){\n\t\treturn\
    \ first;\n\t} \n\telse{\n\t\treturn second;\n\t}\n}\n\n", "    \n    let total_length\
    \ = 0;\n    lst1.forEach((item1) => {\n        lst2.forEach((item2) => {\n   \
    \         if (item1.length >= item2.length && item1 == item2) {\n            \
    \    total_length += item1.length;\n            }\n        });\n    });\n    return\
    \ lst1.filter((item, index) => lst2.indexOf(item) == index);\n}\n", "    let arr1\
    \ = [].concat(lst1);\n    let arr2 = [].concat(lst2);\n    let arr3 = [];\n  \
    \  let arr4 = [];\n    \n    for(let i = 0; i<arr1.length; i++){\n      for(let\
    \ j = 0; j<arr2.length; j++){\n        if(arr1[i].length < arr2[j].length){\n\
    \          arr3.push(arr1[i]);\n        }else if(arr1[i].length == arr2[j].length){\n\
    \          arr4.push(arr1[i]);\n        }\n      }\n    }\n\n    for(let j = 0;\
    \ j<arr4.length; j++){\n      let res = arr3.filter(x => x === arr4[j]);\n   \
    \   if(res.length == arr4.length){\n        return arr4.slice(0, j);\n      }\n\
    \    }\n}\n", "    var ret = []\n    for (var i = 0; i < lst1.length; i++)\n \
    \       if(lst1[i].indexOf(lst2[i]) === -1)\n            ret.push(lst1[i])\n \
    \   return ret\n}", "    let total_chars = 0;\n    for (let i=0; i<lst1.length;\
    \ i++){\n        let tmp = 0;\n        for (let j=0; j<lst2.length; j++){\n  \
    \          tmp += lst1[i].length < lst2[j].length ? lst1[i].length : lst2[j].length;\n\
    \        }\n        total_chars += tmp;\n    }\n    if (lst1.length < lst2.length){\n\
    \        return lst1;\n    }\n    return lst2;\n}\n", "  var result = [];\n  for(var\
    \ i1 = 0; i1 < lst1.length; i1++){\n    var found = false;\n    for(var i2 = 0;\
    \ i2 < lst2.length; i2++){\n      if(lst1[i1] === lst2[i2]){\n        found =\
    \ true;\n        break;\n      }\n    }\n    if(found){\n      result.push(lst1[i1]);\n\
    \    }\n  }\n  if(lst1.length === result.length){\n    result = lst1;\n  }\n \
    \ if(lst2.length === result.length){\n    result = lst2;\n  }\n  return result;\n\
    }\n", "  let counter = 0;\n  for(let i = 0; i < lst1.length; i++){\n    counter\
    \ = counter + lst1[i].length;\n  }\n  for(let i = 0; i < lst2.length; i++){\n\
    \    counter = counter + lst2[i].length;\n  }\n  if(counter < lst1.length){\n\
    \    return lst1;\n  }\n  if(counter < lst2.length){\n    return lst2;\n  }\n\
    \  return lst1;\n}\n", "  return lst2.filter(function(x) { return lst1.filter(function(y)\
    \ { return x == y }).length == lst2.length }).length ? lst1 : lst2\n}", "    const\
    \ lst1_len = lst1.length;\n    const lst2_len = lst2.length;\n    for(let i =\
    \ 0; i < lst1_len; i++){\n        for(let j = 0; j < lst2_len; j++){\n       \
    \     if(lst1[i] === lst2[j]){\n                break;\n            }\n      \
    \  }\n        if(j < lst2_len){\n            break;\n        }\n    }\n    return\
    \ lst1.slice(0, j);\n}\n", "\tvar arr1 = arr2(lst1);\n\tvar arr2 = arr2(lst2);\n\
    \tif(arr1.length == arr2.length){\n\t\treturn arr1;\n\t}\n\telse{\n\t\tvar result\
    \ = [];\n\t\tfor(var i=0;i<arr1.length;i++){\n\t\t\tvar count = 0;\n\t\t\tfor(var\
    \ j=0;j<arr2.length;j++){\n\t\t\t\tif(arr1[i] == arr2[j]){\n\t\t\t\t\tcount++;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif(count < arr2.length){\n\t\t\t\tresult.push(arr1[i]);\n\
    \t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}", "\tvar res = [];\n\tfor (var i =\
    \ 0; i< lst1.length; i++){\n\t\tvar str1 = lst1[i].toLowerCase();\n\t\tvar str2\
    \ = lst2[i].toLowerCase();\n\t\tvar j = 0;\n\t\tvar charsLeft = lst2[i].length;\n\
    \t\tfor (var j = 0; j<charsLeft; j++){\n\t\t\tif (str1[j] < str2[j]) {\n\t\t\t\
    \tcharsLeft--;\n\t\t\t}\n\t\t}\n\t\tres.push(str1.substring(0, j+1));\n\t}\n\t\
    if (lst1.length == lst2.length){\n\t\treturn lst1;\n\t} else {\n\t\treturn res;\n\
    \t}\n}\n\n", "\tvar arr1 = lst1.sort();\n\tvar arr2 = lst2.sort();\n\treturn arr1.concat(arr2).filter(function(el,i,arr){\n\
    \t\t\treturn arr.indexOf(el) === i;\n\t\t}).sort(function(a, b){return b.length\
    \ - a.length}).slice(0, lst1.length);\n}\n", "    var result = [];\n    var maxLength\
    \ = Math.max(lst1.length, lst2.length);\n    for(var i = 0; i < maxLength; i++){\n\
    \        if(lst1[i] != lst2[i]){\n            result.push(lst1[i]);\n        }\n\
    \    }\n    return result;\n}\n", "    var matched = [];\n    lst1.forEach(function(item){\n\
    \        lst2.forEach(function(item2){\n            if(item2.toLowerCase().trim().length\
    \ >= item.toLowerCase().trim().length){\n                matched.push(item2);\n\
    \            }\n        });\n    });\n    return matched;\n}\n", "    return total_match_aux(lst1,\
    \ lst2, []);\n}\n", "    let arr1 = [];\n    let arr2 = [];\n\n    if(lst1.length\
    \ === lst2.length){\n        for(let i = 0; i < lst1.length; i++){\n         \
    \   arr1.push(lst1[i]);\n            arr2.push(lst2[i]);\n        }\n    }else{\n\
    \        return false;\n    }\n\n    let sum = 0;\n    for(let i = 0; i < arr1.length;\
    \ i++){\n        sum += arr1[i].length\n    }\n    let result = [];\n    for(let\
    \ i = 0; i < arr2.length; i++){\n        if(sum + arr2[i].length >= arr1[i].length){\n\
    \            result.push(arr2[i]);\n        }\n        sum -= arr1[i].length;\n\
    \    }\n\n    return result\n}\n", "    var max1 = lst1.length;\n    var max2\
    \ = lst2.length;\n    var lst3 = lst1.concat(lst2);\n    var arr1 = [];\n    var\
    \ arr2 = [];\n    for (var i = 0; i<max1; i++){\n        arr1.push(lst1[i]);\n\
    \    }\n    for (var i = 0; i<max2; i++){\n        arr2.push(lst2[i]);\n    }\n\
    \    var res = arr1;\n    for (var j=0; j<max2; j++){\n        for (var k=0; k<max1\
    \ ; k++){\n            if (arr1[k] == arr2[j]){\n                res.splice(k,\
    \ 1);\n            }\n        }\n    }\n    if (arr1.length < arr2.length){\n\
    \        return arr1;\n    }\n    else if (arr2.length < arr1.length){\n     \
    \   return arr2;\n    }\n    else {\n        return res;\n    }\n}", "  var char_set\
    \ = new Set();\n  for(var item of lst1){\n    char_set.add(item);\n  }\n  for(var\
    \ item of lst2){\n    char_set.add(item);\n  }\n  var total = 0;\n  for(var item\
    \ of char_set){\n    total += item.length;\n  }\n  var matches = lst1.filter(function(item){\n\
    \    return lst2.every(function(item2){\n      return item.length >= item2.length\
    \ && item <= item2;\n    });\n  });\n  return matches.concat(lst2.filter(function(item){\n\
    \    return lst1.every(function(item2){\n      return item.length >= item2.length\
    \ && item <= item2;\n    });\n  }));\n}\n", "    if(lst1.length == lst2.length){\n\
    \        for(var i=0; i<lst1.length; i++){\n            if(lst1[i] < lst2[i]){\n\
    \                return lst1.slice(i+1);\n            }\n        }\n        return\
    \ lst1;\n    }\n    \n}", "    let total = new Array();\n    for(let i = 0; i\
    \ < lst1.length; i++){\n        let temp = new Array();\n        temp.push(lst1[i]);\n\
    \        for(let j = 0; j < lst2.length; j++){\n            if(lst1[i] === lst2[j]){\n\
    \                temp.push(lst2[j]);\n                break;\n            }else{\n\
    \                temp.push(\"\");\n            }\n        }\n        total.push(temp);\n\
    \    }\n    return total;\n}\n", "    var total_length = 0;\n    for(var i = 0;\
    \ i<lst1.length; i++){\n        total_length += lst1[i].length;\n    }\n    for(var\
    \ i = 0; i<lst2.length; i++){\n        total_length += lst2[i].length;\n    }\n\
    \    var arr = [];\n    for(var i = 0; i<lst1.length; i++){\n        if(lst1[i].length\
    \ < total_length){\n            arr.push(lst1[i]);\n        }\n    }\n    if(arr.length\
    \ == lst1.length){\n        return arr;\n    }\n    for(var i = 0; i<lst2.length;\
    \ i++){\n        if(lst2[i].length < total_length){\n            arr.push(lst2[i]);\n\
    \        }\n    }\n    return arr;\n}\n", "    let totalMatches=0;\n    lst1.forEach((e)=>{\n\
    \        lst2.forEach((f)=>{\n            totalMatches=totalMatches+e.length<f.length?e.length:f.length;\n\
    \        });\n    });\n    return lst1.length<totalMatches?lst1:lst2;\n}\n", "\t\
    if(lst1.length === 0 && lst2.length === 0) return [];\n\tif(lst1.length === 0\
    \ && lst2.length > 0) return lst2;\n\tif(lst2.length === 0 && lst1.length > 0)\
    \ return lst1;\n\t\n\t\n\tif(lst1.length > lst2.length){\n\t\tlet a = lst1;\n\t\
    \tlst1 = lst2;\n\t\tlst2 = a;\n\t}\n\t\n\tlet result = lst1;\n\tfor(let i=0; i<lst2.length;\
    \ i++){\n\t\tlet char1 = lst1[i];\n\t\tlet char2 = lst2[i];\n\t\t\n\t\t\n\t\t\
    if(char2 > char1){\n\t\t\t//Move to the next char on lst2\n\t\t\ti++;\n\t\t\t\
    continue;\n\t\t}\n\t\t\n\t\t\n\t\tlet char1_index = result.indexOf(char1);\n\t\
    \tlet char2_index = result.indexOf(char2);\n\t\t\n\t\t\n\t\tlet j = 0;\n\t\t\n\
    \t\t//Find the difference between char1's index and char2's index\n\t\twhile(j\
    \ < char1_index && j < char2_index){\n\t\t\tj++;\n\t\t}\n\t\t\n\t\tif(j === char1_index\
    \ && j === char2_index) result.splice(j, 1);\n\t\telse result.splice(j+1, 0, char2);\n\
    \t}\n\t\n\treturn result;\n}\n\n", "  const str1 = [...lst1]\n  const str2 = [...lst2]\n\
    \  return str1.filter(x => str2.filter(y => x < y).length).concat(str2)\n}\n",
  "  let newArr = [];\n  for(let i=0; i<lst1.length; i++){\n    if(lst2.includes(lst1[i])){\n\
    \      newArr.push(lst1[i]);\n    }\n  }\n  return newArr;\n}\n", "\tif(!lst1\
    \ || !lst2) return [];\n\tif(lst1.length != lst2.length){\n\t\treturn lst1;\n\t\
    }\n\treturn lst1.reduce((acc, e, i)=>{\n\t\tif(acc[lst1[i]] == undefined && lst2[i]\
    \ != undefined){\n\t\t\tacc[lst1[i]] = 1;\n\t\t}else if(acc[lst1[i]] != undefined\
    \ && acc[lst1[i]] == 1){\n\t\t\tacc[lst1[i]] = acc[lst1[i]] + 1;\n\t\t}\n\t\t\
    return acc;\n\t}, {});\n}\n", "  if (lst1.length < lst2.length){\n    return lst1;\n\
    \  } else if (lst1.length == lst2.length){\n    return lst1;\n  } else {\n   \
    \ return lst2;\n  }\n}\n", "    let total1 = lst1.filter(elem => elem.split(\"\
    \").filter(char => !char.match(/\\d/)).length)\n    let total2 = lst2.filter(elem\
    \ => elem.split(\"\").filter(char => !char.match(/\\d/)).length)\n\n    if(total1.length\
    \ ==  total2.length){\n        let result = []\n        for(let i = 0; i < total1.length;\
    \ i++){\n            if(total1[i] < total2[i]){\n                result.push(total1[i])\n\
    \            }\n        }\n        return result \n    } else {\n        return\
    \ lst1\n    }\n}\n", "    return lst1.filter(x => lst2.indexOf(x) < 0).sort();\n\
    }\n", "  if(lst1.length === lst2.length){\n    return lst1;\n  }\n  var m = 0;\n\
    \  for (var i = 0; i < lst1.length; i++) {\n    if(lst1[i] === lst2[i]) {\n  \
    \    m++;\n    }\n  }\n  if(m === lst1.length){\n    return lst1;\n  }\n  else{\n\
    \    return lst2;\n  }\n}\n", "  var str1 = lst1.reduce(function (prev, curr)\
    \ {\n    return prev + curr.length;\n  }, 0);\n  var str2 = lst2.reduce(function\
    \ (prev, curr) {\n    return prev + curr.length;\n  }, 0);\n  if (str1 < str2)\
    \ {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n", "  if (lst1.length\
    \ != lst2.length)\n    return lst1;\n  \n  var i, cnt=0, arr = [];\n  for (i =\
    \ 0; i < lst1.length; i++){\n    if (lst1[i].length < lst2[i].length){\n     \
    \ arr.push(lst1[i]);\n    }else{\n      arr.push(lst2[i]);\n    }\n  }\n  \n \
    \ for (i = 0; i < lst1.length; i++){\n    if (lst1[i].length >= lst2[i].length){\n\
    \      arr.push(lst1[i]);\n    }else{\n      arr.push(lst2[i]);\n    }\n  }\n\
    \  \n  return arr;\n}\n", "  var total_length = 0;\n  for(var i = 0; i < lst1.length;\
    \ i++){\n    total_length += lst1[i].length;\n  }\n  if(lst1.length == lst2.length){\n\
    \    return lst1;\n  }\n  else{\n    var i = 0;\n    while(i < lst2.length){\n\
    \      if(lst2[i].length < total_length){\n        lst2.splice(i, 1);\n      }\n\
    \      else{\n        i++;\n      }\n    }\n    return lst1;\n  }\n}\n", "\treturn\
    \ lst1.concat(lst2).filter(function(elem, index, self) {\n\t\treturn self.indexOf(elem)\
    \ === index;\n\t}).filter(function(elem) {\n\t\treturn elem.split(\"\").sort().join()\
    \ !== elem.split(\"\").sort().reverse().join(\"\");\n\t}).sort().reverse();\n\
    }\n", "\tvar matches = [];\n\tfor(var i = 0; i < lst1.length; i++){\n\t\tif(lst1.length\
    \ == lst2.length){\n\t\t\tfor(var j = 0; j < lst2.length; j++){\n\t\t\t\tif(lst1[i]\
    \ == lst2[j]){\n\t\t\t\t\tmatches.push(lst1[i]);\n\t\t\t\t\tlst1.splice(i, 1);\n\
    \t\t\t\t\tlst2.splice(j, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\
    else{\n\t\t\tif(lst1[i] < lst2[j]){\n\t\t\t\tmatches.push(lst1[i]);\n\t\t\t\t\
    lst1.splice(i, 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmatches.push(lst2[j]);\n\t\t\
    \t\tlst2.splice(j, 1);\n\t\t\t}\n\t\t}\n\t}\n\treturn matches;\n}\n", "  if (lst1.length\
    \ !== lst2.length){\n    console.log(\"Lists are not of equal length\");\n   \
    \ return [];\n  }\n\n  \n  return lst1.filter(function(el){\n    return lst2.indexOf(el)\
    \ === -1;\n  });\n}", "  var result = new Array();\n  \n  var count = 0;\n  for(var\
    \ i = 0; i<lst1.length;i++){\n    count += lst1[i].length;\n  }\n\n  for(var i\
    \ = 0; i<lst2.length;i++){\n    if(lst1[i].length >= count){\n      if(lst1[i]\
    \ != lst2[i]){\n        result += [lst1[i]];\n      }\n    }\n  }\n\n  if(lst2.length\
    \ != result.length){\n    result += [lst2[lst2.length-1]];\n  }\n  return result;\n\
    }\n", "    var len = lst1.length, totalLen = 0;\n    for(var i = 0; i < lst1.length;\
    \ i++){\n        totalLen += lst1[i].length;\n        if(len == totalLen){\n \
    \           return lst1;\n        }\n    }\n    for(var i = 0; i < lst2.length;\
    \ i++){\n        totalLen += lst2[i].length;\n        if(len == totalLen){\n \
    \           return lst2;\n        }\n    }\n    return [];\n}\n", "    // base\
    \ case\n    if(lst1.length == lst2.length){\n        var total_letters = 0;\n\
    \        var total_chars = 0;\n        for(var i = 0; i < lst1.length; i++){\n\
    \            var letter = lst1[i];\n            total_chars += letter.length;\n\
    \            total_letters += letter.length;\n        }\n        if(total_chars\
    \ == total_letters){\n            return lst1;\n        }\n        else{\n   \
    \         return [];\n        }\n    }\n    // recursive case\n    else{\n   \
    \     var total_letters = 0;\n        var total_chars = 0;\n        for(var i\
    \ = 0; i < lst1.length; i++){\n            var letter = lst1[i];\n           \
    \ total_chars += letter.length;\n            total_letters += letter.length;\n\
    \            if(lst2.indexOf(letter) >= 0){\n                lst2.splice(lst2.indexOf(letter),\
    \ 1);\n            }\n        }\n        var new_lst1 = total_match(lst1, lst2);\n\
    \        if(lst1.length == lst2.length){\n            if(new_lst1 == lst2){\n\
    \                return new_lst1;\n            }\n            else{\n        \
    \        return [];\n            }\n        }\n        else{\n            return\
    \ new_lst1;\n        }\n    }\n}\n", "  var len1 = lst1.length;\n  var len2 =\
    \ lst2.length;\n  if(len1==len2){\n    return lst1;\n  }\n  else {\n    var newArr\
    \ = lst1.slice();\n    var i=0;\n    var j=0;\n    var total = 0;\n    for(i;\
    \ i<len1; i++){\n      for(j; j<len2; j++){\n        var char1 = lst1[i];\n  \
    \      var char2 = lst2[j];\n        var char3 = char2.toUpperCase();\n      \
    \  var char4 = char1.toUpperCase();\n        var equal = (char1 === char2 && char3\
    \ === char4);\n        if (equal) {\n          //console.log('Equal')\n      \
    \    //console.log(char1, char2, char3, char4)\n          //console.log(newArr[j],\
    \ char2, char3)\n          //console.log(newArr.length)\n          //console.log(total)\n\
    \          newArr[j] = char2;\n          total++;\n        }\n      }\n    }\n\
    \    return newArr.concat(newArr.slice(i).reverse()).slice(0, total);\n  }\n}\n",
  "\t\n\t//Write your code below this line\n\t//Don't forget to remove \"use strict\"\
    ; \n\n\t//count the total number of chars in all strings of lst1\n\tvar total1\
    \ = lst1.reduce(function(acc, val){\n\t\treturn acc + val.length;\n\t},0);\n\n\
    \t//count the total number of chars in all strings of lst2\n\tvar total2 = lst2.reduce(function(acc,\
    \ val){\n\t\treturn acc + val.length;\n\t},0);\n\n\t//if the two arrays have the\
    \ same number of chars, return the first array\n\tif(total1 == total2){\n\t\t\
    return lst1;\n\t}\n\t//otherwise return the list with more number of chars\n\t\
    return lst1.sort().concat(lst2.sort()).filter(function(el, i){ return (lst1.length-1-i)\
    \ > total1});\n};\n\n", "\tlet chars = 0;\n\tfor (let i = 0; i < lst1.length;\
    \ i++){\n\t\tchars += lst1[i].length;\n\t\tfor (let j = 0; j < lst2.length; j++){\n\
    \t\t\tchars += lst2[j].length;\n\t\t}\n\t}\n\tlet match_lst = [];\n\tfor (let\
    \ i = 0; i < lst1.length; i++){\n\t\tfor (let j = 0; j < lst2.length; j++){\n\t\
    \t\tif (lst1[i].length >= lst2[j].length && !lst1[i].includes(lst2[j])){\n\t\t\
    \t\tmatch_lst.push(lst1[i]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (match_lst.length\
    \ === lst1.length){\n\t\treturn match_lst;\n\t}\n\telse{\n\t\tlet new_lst = [];\n\
    \t\tfor (let i = 0; i < match_lst.length; i++){\n\t\t\tfor (let j = 0; j < lst1.length;\
    \ j++){\n\t\t\t\tif (lst1[j].includes(match_lst[i])){\n\t\t\t\t\tnew_lst.push(lst1[j]);\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new_lst;\n\t}\n}\n", "\t\
    let m = [];\n\tlet len = Math.min(lst1.length, lst2.length);\n\tfor(let i = 0;\
    \ i < len; i++){\n\t\tlet temp = [];\n\t\tfor(let j = 0; j < lst1.length; j++){\n\
    \t\t\tif(lst1[j] < lst2[j]){\n\t\t\t\ttemp.push(lst1[j]);\n\t\t\t}\n\t\t\telse\
    \ if(lst1[j] === lst2[j]){\n\t\t\t\ttemp.push(lst1[j]);\n\t\t\t}\n\t\t}\n\t\t\
    m.push(temp);\n\t}\n\treturn m.length > lst1.length ? m : lst1;\n}\n", "\tvar\
    \ totalMatch = [];\n\tfor (var i = 0; i<lst1.length; i++){\n\t\tvar charCount\
    \ = 0;\n\t\tfor (var j = 0; j<lst2.length; j++){\n\t\t\tif (lst1[i] === lst2[j]){\n\
    \t\t\t\tcharCount++;\n\t\t\t}\n\t\t}\n\t\tif (charCount < lst2.length){\n\t\t\t\
    totalMatch.push(lst1[i]);\n\t\t}\n\t}\n\treturn totalMatch;\n}\n", "  var result\
    \ = [];\n  var j = 0;\n  var i = 0;\n\n  while(i < lst1.length){\n    if(j < lst2.length\
    \ && lst1[i].charAt(j) === lst2[j]){\n      j++;\n    } else {\n      result.push(lst1[i]);\n\
    \      i++;\n      j = 0;\n    }\n  }\n\n  if(j === lst2.length){\n    result.push(lst1[i]);\n\
    \  }\n\n  return result;\n}\n", "  let total = 0\n  lst1.forEach(x => { total\
    \ += lst2.filter((y) => y < x).length })\n  return lst1.filter((x, i) => x < total)\n\
    }\n</code>\n<|/ a |>\n<| a |>\nThe most time efficient solution is to convert\
    \ every string in sorted order to an array, and iterate through the arrays. But\
    \ this solution does not work when the size of array is more than 10000 or 100000\
    \ and time complexity is O(N^2). \n<code>\n public static int[] getLongestCommonPrefix(String[]\
    \ str1, String[] str2) {\n    String[] arr1 = Arrays.stream(str1).sorted().toArray(String[]::new);\n\
    \    String[] arr2 = Arrays.stream(str2).sorted().toArray(String[]::new);\n\n\
    \    int[] result = new int[arr1.length];\n    int i = 0, j = 0, k = 0;\n    while\
    \ (i < arr1.length && j < arr2.length) {\n      String s1 = arr1[i];\n      String\
    \ s2 = arr2[j];\n      if (s1.length() > s2.length()) {\n        if (j < arr2.length)\
    \ {\n          j++;\n          continue;\n        }\n      } else {\n        if\
    \ (i < arr1.length) {\n          i++;\n          continue;\n        }\n      }\n\
    \n      if (s1.charAt(0) == s2.charAt(0)) {\n        result[k] = s1.charAt(0);\n\
    \        k++;\n        if (k > result.length - 1) {\n          return result;\n\
    \        }\n      }\n      i++;\n      j++;\n    }\n    return result;\n  }\n\
    </code>\n<|/ a tags=arrays,string,java,algorithm dscore=2 |>\n<| c |>\nThis doesn't\
    \ work for strings of different lengths. It only works with strings that are the\
    \ same length.\n<|/ c |>\n<| c |>\nIt does not work for strings of different lengths.\
    \ I updated the code.\n<|/ c |>\n<| c |>\nSorry, I should have been more clear.\
    \ This code only works when the strings contain consecutive characters, and when\
    \ the strings contain no common prefix. So I didn't downvote it.\n<|/ c |>\n<|\
    \ c |>\nI updated the code. It works now.\n<|/ c |>\n<| c |>\nThe code works but\
    \ is still O(N^2) because it requires two loops. You should merge the two loops\
    \ and use a variable to track the index of the first string in common (initially\
    \ `0` and increase it) so that you don't need to loop twice. That will speed it\
    \ up some.\n<|/ c |>\n<| a dscore=2 |>\nJust for fun, here is my answer:\n<code>\n\
    public class CommonPrefix {\n    private static final String[] commonPrefixArray\
    \ = \n            { \"AABBCCDDE", "\tif (lst1.length !== lst2.length) return [];\n\
    \tvar n = lst1.length;\n\tvar res = lst1.slice(0);\n\tvar count = 0;\n\tfor(var\
    \ i=0; i<n; i++){\n\t\tfor(var j=0; j<n; j++){\n\t\t\tif (lst1[i] === lst2[j]){\n\
    \t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (count === n){\n\t\
    \treturn lst1;\n\t} else if (count > n) {\n\t\treturn res.concat(lst2.slice(n).slice(0,n-n));\n\
    \t} else {\n\t\treturn res.concat(lst2.slice(n-n,n).slice(0,n));\n\t}\n}\n", " \
    \   let lst3 = [];\n    for(let i=0; i<lst1.length; i++){\n        if(lst2.includes(lst1[i])\
    \ && lst2.length <= lst1.length){\n            lst3.push(lst1[i]);\n        }\n\
    \    }\n    return lst3;\n}\n", "  var result = [];\n  for(var i = 0; i < lst1.length;\
    \ i++){\n    var found = false;\n    for(var j = 0; j < lst2.length; j++){\n \
    \     if(lst1[i] === lst2[j]){\n        found = true;\n        break;\n      }\n\
    \    }\n    if(!found){\n      result.push(lst1[i]);\n    }\n  }\n  if(result.length\
    \ === lst1.length){\n    return result;\n  } else {\n    return lst1;\n  }\n}\n",
  "  var ans = \"\";\n  var same = 0;\n  for(var i = 0; i < lst1.length; i++){\n \
    \   for(var j = 0; j < lst2.length; j++){\n      if(lst1[i] == lst2[j]){\n   \
    \     same++;\n      }\n    }\n  }\n  if(same == lst1.length){\n    ans = lst1;\n\
    \  }\n  else if(same > lst1.length){\n    ans = lst2;\n  }\n  else{\n    ans =\
    \ lst1;\n  }\n  return ans;\n}\n", "    \n    return lst1.filter(function(x){\n\
    \        return lst2.indexOf(x) <= lst2.indexOf(x); \n    });\n}\n", "    // Your\
    \ code here\n    return lst1\n}\n", "\tvar ret = [];\n\tfor (var i = 0; i < lst1.length;\
    \ i++){\n\t\tvar count = 0;\n\t\tfor (var j = 0; j < lst2.length; j++){\n\t\t\t\
    if (lst1[i] == lst2[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tret.push(lst1[i]\
    \ + ((count > 0) ? (\" \" + count) : \"\"));\n\t}\n\treturn ret;\n}\n", "\t//\
    \ Write your code here\n\treturn lst1.filter(function(e, i, arr){\n\t\treturn\
    \ lst2.indexOf(e) < lst2.indexOf(e);\n\t});\n}\n", "\tvar arr = [];\n\t\n\tfor(var\
    \ i = 0; i < lst1.length; i++){\n\t\tfor(var j = 0; j < lst2.length; j++){\n\t\
    \t\tif(lst1[i] < lst2[j]){\n\t\t\t\tarr.push(lst1[i]);\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t\t\n\t\t\tif(j === lst2.length - 1 && lst1[i] === lst2[j]){\n\t\t\t\tarr.push(lst1[i]);\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn arr;\n}\n\n", "  return lst1.filter(function(elem,\
    \ index){\n    return lst2.indexOf(elem) < index;\n  }).concat(lst1.filter(function(elem,\
    \ index){\n    return lst2.indexOf(elem) >= index;\n  }))\n}\n", "\tif(!lst1.length)\
    \ return lst2;\n\tif(!lst2.length) return lst1;\n\tvar arr1 = [];\n\tvar arr2\
    \ = [];\n\tfor(var i=0, len=lst1.length; i<len; i++){\n\t\tarr1.push(lst1[i]);\n\
    \t\tarr2.push(lst2[i]);\n\t}\n\tarr1 = arr1.sort(sortNum);\n\tarr2 = arr2.sort(sortNum);\n\
    \tvar i = 0, j = 0;\n\tvar maxLen = Math.min(lst1.length, lst2.length);\n\tfor(i=0;\
    \ i<maxLen; i++){\n\t\twhile(arr1[j] === arr2[i]){\n\t\t\tj++;\n\t\t\tif(!j) break;\n\
    \t\t}\n\t\tif(i===maxLen && j === lst1.length){\n\t\t\tarr1.splice(i, 1);\n\t\t\
    \tarr2.splice(i, 1);\n\t\t}\n\t}\n\treturn arr1;\n}\n", "    var total_match =\
    \ [];\n    if(lst1.length == lst2.length){\n        for(var i = 0; i <lst1.length;\
    \ i++){\n            if(lst1[i] < lst2[i]){\n                total_match.push(lst1[i]);\n\
    \            }\n        }\n        return total_match;\n    }\n    else{\n   \
    \     return lst1;\n    }\n}\n", "    //console.log(\"lst1\", lst1, \"lst2\",\
    \ lst2);\n    if(lst1.length == lst2.length){\n        return lst1;\n    }\n \
    \   else if(lst1.length < lst2.length){\n        //console.log(\"lst1 less lst2\"\
    , lst1, lst2);\n        return total_match(lst1, lst2.filter(s => lst1.indexOf(s)\
    \ < lst1.length));\n    }\n    else{\n        //console.log(\"lst2 less lst1\"\
    , lst1, lst2);\n        return total_match(lst2.filter(s => lst1.indexOf(s) <\
    \ lst1.length), lst1);\n    }\n}\n", "    var arr1 = [],\n        arr2 = [],\n\
    \        arr3 = [];\n    for(var i=0; i<lst1.length; i++){\n        if(lst1[i]\
    \ < lst2[i]){\n            arr1.push(lst1[i]);\n        } else {\n           \
    \ arr2.push(lst2[i]);\n        }\n    }\n    if(arr1.length == arr2.length){\n\
    \        arr3 = arr1;\n    }\n    return arr3;\n}\n", "  let total_length = 0;\n\
    \  for (let i =0; i < lst1.length; i++){\n    total_length = total_length + lst1[i].length;\n\
    \  }\n  for (let i =0; i < lst2.length; i++){\n    total_length = total_length\
    \ + lst2[i].length;\n  }\n  if(total_length == 0){\n    return lst1;\n  } else\
    \ {\n    return lst2.filter(item => lst1.indexOf(item) < lst1.indexOf(item))\n\
    \  }\n}\n", "    if(lst1.length === lst2.length){\n        return lst1;\n    }\n\
    \    let min_len = lst1.length;\n    let max_len = lst2.length;\n    let match\
    \ = [];\n    let i = 0;\n    let j = 0;\n    while(i < max_len && j < min_len){\n\
    \        if(lst1[i] === lst2[j]){\n            match.push(lst1[i]);\n        \
    \    i++;\n            j++;\n        }\n        else{\n            i++;\n    \
    \        j++;\n        }\n    }\n    return match;\n}", "    var res = lst1.filter(function(x,\
    \ i){\n        return lst2.indexOf(x) < lst2.indexOf(i);\n    });\n    return\
    \ lst1.length > lst2.length? res: lst2;\n}\n", "    lst1 = lst1.filter((s)=> lst2.indexOf(s)\
    \ > -1);\n    if (lst1.length === lst2.length){\n        return lst1\n    }\n\
    \    lst2 = lst2.filter((s)=> lst1.indexOf(s) > -1);\n    return lst1;\n}\n",
  "    \n    var lst3 = [];\n    \n    if(lst1.length == lst2.length){\n        lst3\
    \ = lst1;\n    }\n    else{\n        for(var i = 0; i < lst2.length; i++){\n \
    \           if(lst1[i] != lst2[i]){\n                break;\n            }\n \
    \           else{\n                lst3.push(lst2[i]);\n            }\n      \
    \  }\n    }\n    return lst3;\n}\n", "  if(lst1.length === lst2.length){\n   \
    \ var arr = [];\n    for(var i = 0; i < lst1.length; i++){\n      if(lst1[i] <\
    \ lst2[i]){\n        arr.push(lst1[i]);\n      }else{\n        arr.push(lst2[i]);\n\
    \      }\n    }\n    return arr;\n  }\n  \n  return lst1;\n}\n", "    return lst1.filter((item1,\
    \ index) => lst2.indexOf(item1) < lst2.indexOf(item2));\n}\n", "\tconst count1\
    \ = lst1.reduce((acc, val) => acc + val.length, 0)\n\tconst count2 = lst2.reduce((acc,\
    \ val) => acc + val.length, 0)\n\t\n\tif((count1 === count2) || (count1 === 0)\
    \ || (count2 === 0)){\n\t\treturn lst1\n\t}\n\tconst diffCount = count1 - count2\n\
    \tconst totalLength = count1 + count2\n\tconst matching = lst1.filter((el, i)\
    \ => i < diffCount ? lst2.every((el, i) => el === lst1[i]) : el === lst2[0])\n\
    \treturn matching\n}\n", "    for(var i =0;i<lst1.length;i++){\n        for(var\
    \ j=0;j<lst2.length;j++){\n            if(lst1[i]==lst2[j]){\n               \
    \ if(i==lst2.length-1&&j==lst1.length-1){\n                    return lst1;\n\
    \                }\n                if(j==lst1.length-1){\n                  \
    \  return lst1;\n                }\n            }\n        }\n    }\n    return\
    \ [];\n}\n", "    let newLst = [];\n    for (let i = 0; i < lst1.length; i++)\
    \ {\n        let found = false;\n        for (let j = 0; j < lst2.length; j++)\
    \ {\n            if (lst1[i] === lst2[j]) {\n                newLst.push(lst1[i]);\n\
    \                found = true;\n                break;\n            }\n      \
    \  }\n        if (!found) {\n            newLst.push(lst1[i]);\n        }\n  \
    \  }\n    return newLst;\n}\n", "   var cnt=0;\n   for (var i=0; i< lst1.length;\
    \ i++){\n      if(lst1.length<lst2.length){\n         if (lst1[i]<lst2[i]){\n\
    \            cnt++;\n         }\n      }\n   }\n   return lst1;\n}", "  if(lst1.length\
    \ != lst2.length){\n    throw new Error(`Arrays must have the same number of elements!`);\n\
    \  }\n  let total_chars_arr = [];\n  let total_chars_arr2 = [];\n  for(let i =\
    \ 0; i < lst1.length; i++){\n    if(lst1[i] < lst2[i]){\n      total_chars_arr.push(lst1[i]);\n\
    \    }else{\n      total_chars_arr2.push(lst2[i]);\n    }\n  }\n  return total_chars_arr.concat(total_chars_arr2);\n\
    }\n", "   var temp = [];\n   var i=0;\n   while(i < lst1.length){\n      if(lst1[i]\
    \ > lst2[i]){\n         temp.push(lst1[i]);\n         i++;\n      }\n      else{\n\
    \         temp.push(lst2[i]);\n      }\n   }\n   return temp;\n}\n", "    var\
    \ len1 = lst1.length,\n        len2 = lst2.length,\n        arr = [],\n      \
    \  i, j, tmp;\n    \n    if(len1 === len2){\n        for(i = 0; i < len1; i++){\n\
    \            if(lst1[i] < lst2[i]) arr.push(lst1[i]);\n        }\n        return\
    \ arr;\n    }\n    \n    for(i = 0; i < len1; i++){\n        for(j = 0; j < len2;\
    \ j++){\n            if(lst1[i] === lst2[j]){\n                tmp = lst1[i];\n\
    \                lst1[i] = \"\";\n                lst1[j] = tmp;\n           \
    \ }\n        }\n    }\n    \n    return total_match(lst1, lst2);\n}", "\tif(lst1.length===lst2.length){\n\
    \t\treturn lst1;\n\t}\n\tlet l1=lst1.length,l2=lst2.length,flag=1;\n\tfor(let\
    \ i=0;i<l1;i++){\n\t\tfor(let j=0;j<l2;j++){\n\t\t\tif(flag===0){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\tif(lst1[i]===lst2[j]){\n\t\t\t\tflag++;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return flag===l1?lst1:lst2;\n}", "    let newArr = lst1.filter(function (el) {\n\
    \        return lst2.indexOf(el) < 0;\n    });\n    return lst1.length >= lst2.length\
    \ ? lst1 : newArr;\n}\n", "    var total_len = 0;\n    var len = lst1.length;\n\
    \    for(var i = 0;i<len;i++){\n        total_len+=lst1[i].length;\n    }\n  \
    \  for(var i = 0;i<len;i++){\n        for(var j = 0;j<lst2.length;j++){\n    \
    \        if(lst1[i].length<lst2[j].length){\n                return lst1;\n  \
    \          }\n            if(lst1[i].length>lst2[j].length){\n               \
    \ return lst2;\n            }\n        }\n    }\n    return total_len<lst2.length?lst1:lst2;\n\
    }", "\tlet arr1 = [];\n\tlet arr2 = [];\n\tlet size = Math.max(lst1.length, lst2.length);\n\
    \tfor (let i = 0; i < size; i++){\n\t\tlet char1 = lst1[i]\n\t\tlet char2 = lst2[i]\n\
    \t\tif(char1 === char2){\n\t\t\tarr1.push(char1);\n\t\t}\n\t\telse if(arr1.includes(char1)\
    \ && arr2.includes(char2)){\n\t\t\tarr1.push(char1);\n\t\t}\n\t\telse if(arr2.includes(char1)\
    \ && arr1.includes(char2)){\n\t\t\tarr2.push(char2);\n\t\t}\n\t\telse{\n\t\t\t\
    break;\n\t\t}\n\t}\n\treturn arr1.concat(arr2);\n}\n", "\tvar allCharsLessThan\
    \ = [];\n\tfor(var i = 0; i < lst1.length; i++){\n\t\tvar current = lst1[i];\n\
    \t\tvar count = 0;\n\t\tfor(var j = 0; j < lst2.length; j++){\n\t\t\tif(current\
    \ == lst2[j]){\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tallCharsLessThan.push(count);\
    \ \n\t}\n\tfor(var i = 0; i < lst2.length; i++){\n\t\tvar current = lst2[i];\n\
    \t\tvar count = 0;\n\t\tfor(var j = 0; j < lst1.length; j++){\n\t\t\tif(current\
    \ == lst1[j]){\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tallCharsLessThan.push(count);\
    \ \n\t}\n\treturn allCharsLessThan;\n}\n", "  return lst1.filter(function(x){\
    \ return lst2.indexOf(x) < 0 }).concat(lst1.filter(function(x){ return lst2.indexOf(x)\
    \ == -1 }))\n}\n", "    var res = [];\n    lst1.forEach(function (str1) {\n  \
    \      lst2.forEach(function (str2) {\n            var n = 0;\n            for\
    \ (var i = 0; i < str1.length && i < str2.length; i++)\n                n += str1.charCodeAt(i)\
    \ < str2.charCodeAt(i) ? 1 : 0;\n            if (n < str1.length && n < str2.length)\n\
    \                res.push(str1.substring(0, n));\n        });\n    });\n    return\
    \ res;\n}\n</code>\n<|/ a tags=arrays,javascript,string |>\n<| c |>\nThanks for\
    \ your answer, but this is not what i meant i need the program to return the full\
    \ string from the first array that has the most number of chars in the second\
    \ array even if that string is longer. so if i pass in two arrays, [\"hi\", \"\
    admin\"], [\"hI\", \"Hi\"], the program should return [\"hI\", \"Hi\"] as that\
    \ is the one with the most chars and if i pass in two arrays, [\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"], [\"hI\", \"Hi\"], then it return [\"hI\", \"Hi\"]\n<|/ c\
    \ |>\n<| c |>\nWhat if there are two arrays that have the same number of chars?\n\
    <|/ c |>\n<| c |>\nThe code i posted will return an array with the length of the\
    \ second array that has the most number of chars. If the arrays have the same\
    \ number of chars, the code will return the first array.\n<|/ c |>\n<| c |>\n\
    If you have a new question you should ask another question. I answered this question.\n\
    <|/ c |>\n<| c |>\nOkay thanks, will do so. Just wanted to make sure. Thanks for\
    \ your help :)\n<|/ c |>\n<| a |>\nYou could use an hash table for counting the\
    \ same characters and get the object with the highest count.\n\n<code>", "   \
    \ //code here\n}\nmodule.exports = {\n    total_match\n}\n\"\"\"\n)\n\nsubmission.render_notebook()\n\
    </cell>\n<text>\nPart II: Part II - Submission Instructions\nTo submit your homework,\
    \ create a Zenodo record for the course.  If you decide to do so after having\
    \ peer-reviewed your homework, please fill out the form:\n\n[Be nice!] Give a\
    \ Zenodo reference number, a title, and a short description that describes your\
    \ homework. Write a short paragraph about your homework.\n\n[Good!] Submit a written\
    \ homework submission file that contains your work so far. If your homework is\
    \ for a course that has yet to see your grade, please submit the homework without\
    \ writing a single line of code.\n\n[Bad!] Submit a written homework submission\
    \ file that contains a description of your homework and a description about what\
    \ you've learned in class.\n\n[Great!] Aim for a high school grade at the end\
    \ of your homework!\n\n[Excellent!] Give your submission a descriptive title,\
    \ and write some brief description about your homework. Do not include your work\
    \ in the title, or include your work in a clear description. Be sure to cite your\
    \ sources. Do not include any links to external web resources, such as external\
    \ websites or the course discussion forum. Also, please use plain English on your\
    \ description.\n\n[Great!] Submit a written homework submission file that contains\
    \ an explanation of why you made these suggestions. Describe any special consideration\
    \ that you have had about this submission.\n\n[Great!] Explain in detail what\
    \ you have learned in class. Write a detailed description of what you have learned\
    \ in class for each of the following items:\n\n[Great!] Be clear about any special\
    \ consideration you have had about the course discussion forum.\n\n[Great!] Provide\
    \ an example of the kind of homework you will be doing.\n\n[Great!] Provide an\
    \ example of the kind of homework you will have completed previously.\n\n[Great!]\
    \ Explain any special consideration you have had about this submission.\n\n[Great!]\
    \ Explain in detail any special consideration you have had about this submission.\
    \ Describe any special consideration you have had about the discussion forum.\n\
    \n[Great!] Explain in detail any special consideration you have had about this\
    \ submission. Describe any special consideration you have had about this submission.\
    \ Describe any special consideration you have had about the discus", "  var new_lst=[];\n\
    \  for(var i = 0; i < lst1.length; i++){\n    var match = lst2.filter(function(item2){\
    \ return lst1[i].toLowerCase()==item2.toLowerCase();})\n    if(lst1.length==lst2.length\
    \ && lst2.length==lst2.filter(function(item2){ return lst1[i].toLowerCase()==item2.toLowerCase();}).length)\
    \ new_lst = match;\n    else new_lst = lst2;\n    break;\n  }\n  return new_lst;\n\
    }", "\tif(lst1.length == lst2.length){\n\t\tfor(var i = 0; i < lst1.length; i++){\n\
    \t\t\tlst1[i] = lst1[i].split(\"\");\n\t\t\tlst2[i] = lst2[i].split(\"\");\n\t\
    \t\tfor(var j = 0; j < lst1[i].length; j++){\n\t\t\t\tif(lst1[i][j] > lst2[i][j]){\n\
    \t\t\t\t\tlst1[i].splice(j,1);\n\t\t\t\t\tlst2.splice(j,1);\n\t\t\t\t\tj--;\n\t\
    \t\t\t}\n\t\t\t\tif(j == 0){\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\
    return lst1;\n\t}\n\treturn lst1;\n}\n", "\tif(lst1.length !== lst2.length){\n\
    \t\tthrow new TypeError(\"The two lists must be of the same size\")\n\t}\n\tif(lst1.length\
    \ === 0){\n\t\treturn lst1\n\t}\n\tconst set1 = new Set(lst1)\n\tconst set2 =\
    \ new Set(lst2)\n\tconst set3 = set1.filter(x => !set2.has(x))\n\tconst set4 =\
    \ set2.filter(x => !set1.has(x))\n\tconst set5 = set1.filter(x => set2.has(x))\n\
    \tconst set6 = set2.filter(x => set1.has(x))\n\tif(set1.length !== set3.length){\n\
    \t\tthrow new TypeError(\"The two lists must be of the same size\")\n\t}\n\tif(set1.length\
    \ === 0){\n\t\treturn lst1\n\t}\n\treturn [...set4, ...set5, ...set6]\n}\n\n",
  "\t\n\tvar chars1=[],chars2=[];\n\t\n\tfor(var i=0;i<lst1.length;i++){\n\t\tchars1=chars1.concat(lst1[i].split(\"\
    \"));\n\t}\n\t\n\tfor(var j=0;j<lst2.length;j++){\n\t\tchars2=chars2.concat(lst2[j].split(\"\
    \"));\n\t}\n\t\n\tvar count1=chars1.length,count2=chars2.length;\n\t\n\tfor(var\
    \ i=0;i<count1;i++){\n\t\tfor(var j=0;j<count2;j++){\n\t\t\tif(chars1[i]==chars2[j]){\n\
    \t\t\t\tcount1=count1-1,count2=count2-1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn chars1;\n\
    }", "   if(lst1.length === 0 && lst2.length === 0){\n      return [];\n   }\n\
    \   if(lst1.length === 0 && lst2.length > 0){\n      return lst2;\n   }\n   if(lst1.length\
    \ > 0 && lst2.length === 0){\n      return lst1;\n   }\n   var res = [];\n   for(var\
    \ i=0; i< lst2.length; i++){\n      if(lst1.indexOf(lst2[i]) === -1){\n      \
    \   res.push(lst2[i]);\n      }\n   }\n   return res;\n}\n", "    return lst1.filter(function(x){\n\
    \        return lst2.indexOf(x) == -1;\n    });\n}\n", "    var count = 0;\n \
    \   for(var i = 0; i < lst1.length; i++){\n        var tmp1 = lst1[i];\n     \
    \   for(var j = 0; j < lst2.length; j++){\n            var tmp2 = lst2[j];\n \
    \           if(tmp1.length == tmp2.length){\n                if(tmp1 == tmp2){\n\
    \                    count++;\n                    break;\n                }\n\
    \                else if(tmp1 > tmp2){\n                    break;\n         \
    \       }\n            }\n        }\n    }\n    return lst1;\n}", "    let chars1\
    \ = 0;\n    let chars2 = 0;\n    \n    for (let i=0; i < lst1.length; i++){\n\
    \        if (lst1[i] > lst2[i]) chars1 += lst1[i].length;\n        else if (lst2[i]\
    \ > lst1[i]) chars2 += lst2[i].length;\n        else break;\n    }\n    \n   \
    \ if (chars1 > chars2) return lst1;\n    else return lst2;\n}\n", "  var count1=lst1.length,\
    \ count2=lst2.length;\n  if(count1<count2){\n    return lst1;\n  }\n  else if(count1>count2){\n\
    \    return lst2;\n  }\n  else{\n    return lst1;\n  }\n}\n", "  var matchArray\
    \ = []\n  for(var i = 0; i < lst1.length; i++){\n      for(var j = 0; j < lst2.length;\
    \ j++){\n        if(lst1[i] < lst2[j]){\n          matchArray.push(lst1[i])\n\
    \          break;\n        }\n      }\n  }\n  return matchArray\n}\n", "   \n\
    \   return lst1.filter(item => lst2.indexOf(item) < lst2.indexOf(item.toLowerCase()))\n\
    \   \n}\n", "\tconst common = lst1.filter(item => lst2.includes(item))\n\treturn\
    \ lst1.filter(item => !lst2.includes(item) && item);\n}\n", "  if(lst1.length\
    \ == lst2.length){\n    for(var i = 0; i <lst1.length; i++){\n      if(lst1[i]>lst2[i]){\n\
    \        var temp = lst1[i]\n        lst1[i] = lst2[i]\n        lst2[i] = temp\n\
    \      }\n    }\n    return lst1\n  }\n  else if(lst1.length < lst2.length){\n\
    \    return lst1\n  }\n  else{\n    return lst2\n  }\n}", "    var lst3 = []\n\
    \    for(var i=0; i<lst1.length; i++){\n        var isIn = false;\n        for(var\
    \ j=0; j<lst2.length; j++){\n            if(lst1[i]===lst2[j]){\n            \
    \    isIn = true;\n            }\n        }\n        if(!isIn){\n            lst3.push(lst1[i])\n\
    \        }\n    }\n    return lst3;\n}", "    var common = 0;\n    for (var i\
    \ = 0; i< lst1.length; i++) {\n        for (var j=0; j<lst2.length; j++) {\n \
    \           if (lst1[i] == lst2[j]) {\n                common +=1;\n         \
    \   }\n        }\n    }\n    if (lst1.length == lst2.length) {\n        return\
    \ lst1;\n    }\n    return [];\n}", "  var total_length=lst1.length,\n      total_length=lst2.length,\n\
    \      result=[];\n  \n  if(lst1.length==lst2.length){\n    for(var i=0; i<lst1.length;\
    \ i++){\n      if(lst1[i]<lst2[i]){\n        result.push(lst1[i]);\n      }\n\
    \    }\n  }\n  else{\n    result=lst1;\n  }\n  \n  return result;\n}\n", "   \
    \ var i;\n    var j;\n    var count = 0;\n    for (i = 0; i< lst1.length; i++){\n\
    \        for(j = 0; j < lst2.length; j++){\n            if (lst1[i] < lst2[j]){\n\
    \                count++;\n                break;\n            }\n        }\n\
    \    }\n    return lst1.slice(i+1);\n}\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes two numbers as arguments. Write a loop to print all prime numbers\
    \ between two numbers. Example: \n\n$2$ and $10$ is prime numbers\n$2$ and $5$\
    \ is prime numbers\n$2$ and $7$ is prime numbers\n$2$ and $8$ is prime numbers\n\
    $2$ and $12$ is prime numbers\n$3$ and $7$ is prime numbers\n$3$ and $8$ is prime\
    \ numbers\n$3$ and $13$ is prime numbers\n$5$ and $7$ is prime numbers\n$5$ and\
    \ $9$ is prime numbers\n$5$ and $13$ is prime numbers\n$7$ and $13$ is prime numbers\n\
    \n\n</text>\n<cell>", "  if (lst1.length == lst2.length){\n    for (var i=0; i<lst1.length;\
    \ i++){\n      if (lst1[i] < lst2[i]){\n        lst2.splice(lst2.indexOf(lst1[i]),\
    \ 1);\n      }\n    }\n    return lst1;\n  }\n  lst2.sort();\n  for (var i = 0;\
    \ i < lst2.length; i++){\n    for (var j = 0; j < lst1.length; j++){\n      if\
    \ (lst2[j] < lst1[j]){\n        lst1.splice(lst1.indexOf(lst2[j]), 1);\n     \
    \ }\n    }\n  }\n  return lst1;\n}", "  var result = [];\n  \n  if(lst1.length\
    \ == lst2.length){\n    for(var i=0, len = lst1.length; i < len; i++){\n     \
    \ if(lst1[i] < lst2[i]){\n        for(var x = lst1.length-1; x >= i; x--){\n \
    \         result.push(lst1[x]);\n        }\n        break;\n      }\n    }\n \
    \ }\n\n  return result;\n}\n", "  var array = [], \n      total = 0;\n  lst1.forEach(function(element,\
    \ index, array){\n    total = total + element.length;\n  });\n  lst2.forEach(function(element,\
    \ index, array){\n    total = total - element.length;\n  });\n  return array.filter(function(element,\
    \ index, array){\n    return total - element.length === 0;\n  });\n}\n", "   \
    \ if (lst1.length === 0 || lst2.length === 0) return lst1\n    if (lst1.length\
    \ === lst2.length) return lst1\n    \n    var count = 0;\n    lst1.forEach(function(s){\n\
    \        var ind = lst2.indexOf(s);\n        if (ind !== -1) count += ind + 1\n\
    \    });\n    return lst1.slice(0, lst1.length - count);\n}\n", "    let new_lst\
    \ = [];\n    for(let i = 0; i < lst1.length; i++){\n        let flag = false;\n\
    \        for(let j = 0; j < lst2.length; j++){\n            if(lst1[i].toLowerCase()\
    \ === lst2[j].toLowerCase()){\n                new_lst.push(lst1[i]);\n      \
    \          flag = true;\n                break;\n            }\n        }\n  \
    \      if(flag === false){\n            new_lst.push(lst1[i]);\n        }\n  \
    \  }\n    return new_lst;\n}\n", "    if (lst1.length === lst2.length){\n    \
    \    return lst1;\n    }\n    if (lst1.length === lst2.length-1){\n        return\
    \ lst2.slice(0,lst1.length-1);\n    }\n    else {\n        return lst1.slice(0,lst2.length);\n\
    \    }\n}\n", "  let arr1=lst1.map(function(val){\n    return val.length;\n  });\n\
    \  let arr2=lst2.map(function(val){\n    return val.length;\n  });\n  if(arr1.length===arr2.length){\n\
    \    return arr1;\n  }else{\n    return arr2;\n  }\n}\n", "\tif(lst1.length ===\
    \ lst2.length){\n\t\tfor(var i = 0; i<lst1.length; i++){\n\t\t\tif(lst1.charAt(i)\
    \ !== lst2.charAt(i)){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(i === lst1.length){\n\
    \t\t\treturn lst1\n\t\t}\n\t\telse{\n\t\t\treturn lst2.slice(0,i)\n\t\t}\n\t}\n\
    \telse{\n\t\treturn lst1\n\t}\n}\n", "  let total = 0; \n  for(let i = 0; i <\
    \ lst1.length; i++){\n      if(lst1[i] > lst2[i]) break;\n      total += 1;\n\
    \  }\n  return lst1.slice(0, i).concat(lst2.slice(i));\n}\n", "    var result\
    \ = []\n    var found = false\n    for(var i = 0; i < lst1.length; i++){\n   \
    \     found = false\n        for(var j = 0; j < lst2.length; j++){\n         \
    \   if(lst1[i] < lst2[j]){\n                found = true\n                break\n\
    \            }\n        }\n        if(found){\n            result.push(lst1[i])\n\
    \        }\n    }\n    return result\n}", "    var arr = [], \n        len1 =\
    \ lst1.length,\n        len2 = lst2.length,\n        count = 0;\n        \n  \
    \  for(var i = 0; i < len1; i++){\n        for(var j = 0; j < len2; j++){\n  \
    \          if(lst1[i] == lst2[j]){\n                count++;\n            }\n\
    \        }\n        arr.push(lst1[count]);\n        if(count >= len2){\n     \
    \       break;\n        }\n    }\n    \n    if(count < len2){\n        for(var\
    \ i = 0; i < len2; i++){\n            arr.push(lst2[i]);\n        }\n    }\n \
    \   return arr;\n}\n", "    var len1 = lst1.length,\n        len2 = lst2.length,\n\
    \        arr = [],\n        sum = 0;\n    for(var i = 0; i < len1; i++){\n   \
    \     sum += lst1[i].length;\n    }\n    for(var i = 0; i < len2; i++){\n    \
    \    if(sum < lst2[i].length){\n            sum += lst2[i].length;\n        }else{\n\
    \            arr.push(lst2[i]);\n            break;\n        }\n    }\n    return\
    \ arr;\n}", "\tlet len1 = lst1.length\n\tlet len2 = lst2.length\n\n\tif(len1 ==\
    \ 0 || len2 == 0){\n\t\treturn lst1\n\t}\n\n\tif(len1 == len2){\n\t\treturn lst1\n\
    \t}\n\n\tif(len1 > len2){\n\t\tlet first = lst1[0]\n\t\tlet res = []\n\t\tfor(let\
    \ i = 1; i < len1; i++){\n\t\t\tif(lst1[i] <= first){\n\t\t\t\tif(first in res){\n\
    \t\t\t\t\tres.splice(res.indexOf(first), 2)\n\t\t\t\t}else{\n\t\t\t\t\tres.push(first)\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res\n\t}else{\n\t\tlet first = lst2[0]\n\
    \t\tlet res = []\n\t\tfor(let i = 1; i < len2; i++){\n\t\t\tif(lst2[i] <= first){\n\
    \t\t\t\tif(first in res){\n\t\t\t\t\tres.splice(res.indexOf(first), 2)\n\t\t\t\
    \t}else{\n\t\t\t\t\tres.push(first)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res\n\
    \t}\n}\n", "  let len = lst1.length\n  let out = []\n  if (lst2.length == len){\n\
    \    for (const a of lst1){\n      if (lst2.indexOf(a) < len){\n        out.push(a)\n\
    \      }\n    }\n    return out\n  }\n  else {\n    return lst1\n  }\n}\n", " \
    \ var arr_len1 = lst1.length,\n      arr_len2 = lst2.length,\n      out = [],\n\
    \      i = 0,\n      j = 0;\n  \n  for(; i < arr_len1; i+=1){\n    for(; j < arr_len2;\
    \ j+=1){\n      if (lst1[i] < lst2[j]){\n        out.push(lst1[i]);\n        break;\n\
    \      }\n    }\n  }\n  return out;\n}\n", "\tlst1 = lst1.sort();\n\tlst2 = lst2.sort();\n\
    \tvar n = lst1.length;\n\tfor(var i = 0; i < (n-1); i++){\n\t\tif(lst1[i] > lst2[i])\
    \ return lst1;\n\t}\n\treturn lst2;\n}\n", "    var retArr = [];\n    if(lst1.length\
    \ == lst2.length){\n        if(lst1.length == 0){\n            return lst2;\n\
    \        }\n        for(var i = 0; i < lst1.length; i++){\n            if(lst1[i]\
    \ <= lst2[i]){\n                retArr.push(lst1[i]);\n            }\n       \
    \ }\n        return retArr;\n    }\n    return lst2;\n}\n", "    var arr = [];\n\
    \    for(var i=0;i<lst1.length;i++){\n        for(var j=0;j<lst2.length;j++){\n\
    \            if(lst1[i]<lst2[j]){\n                arr.push(lst1[i]);\n      \
    \          break;\n            }\n        }\n    }\n    return arr;\n}\n", " \
    \ var match=[];\n  lst1.map(function(val1){\n    lst2.map(function(val2){\n  \
    \    if(val1.length<val2.length){\n        match.push(val1);\n      }\n      else\
    \ if(val1.length>val2.length){\n        match.push(val2);\n      }\n      else\
    \ if(val1.length==val2.length){\n        match.push(val1);\n      }\n      else\
    \ return false\n    })\n  })\n  return match\n}\n", "    var total = 0;\n    for(var\
    \ i = 0; i< lst1.length; i++){\n        if(lst1[i] < lst2[i])\n            total\
    \ = total + 1;\n    }\n    return lst1;\n}\n</code>\n<|/ a tags=arrays,javascript,sorting\
    \ |>\n<| c |>\nGood job on your first answer. The second one doesn't really work\
    \ because `total_match` returns `lst1` unchanged.\n<|/ c |>\n<| c |>\nI see you\
    \ edited your answer and added `return lst1`. The problem is that if there are\
    \ different strings of length 1, the function returns `\"0\"` instead of `\"1\"\
    ` as the result.\n<|/ c |>\n<| c |>\nI added another example to the question that\
    \ might be easier to understand.\n<|/ c |>\n<| c |>\nI added a return statement\
    \ to the function. It's a stupid mistake. Thanks :)\n<|/ c |>\n<| c |>\nThe code\
    \ doesn't work either because when there are different strings of length 1, the\
    \ function returns `\"0\"` instead of `\"1\"` as the result.\n<|/ c |>\n<| a |>\n\
    A simple solution to this problem would be to iterate over the second array and\
    \ store each unique value in a Map. After that, just filter the first array using\
    \ Array.from(Map.keys()) using another Map.\nThis would also work with arrays\
    \ of different length.\nExample of code:\n\n<code>\nlet arr1 = [\"hi\", \"admin\"\
    ];\nlet arr2 = [\"hI\", \"Hi\", \"project\"];\n\nlet map = new Map();\nfor (let\
    \ item of arr2) {\n  if (!map.has(item)) {\n    map.set(item, true);\n  }\n}\n",
  "    lst1 = lst1.sort();\n    lst2 = lst2.sort();\n    var count = 0;\n    for(var\
    \ i = 0; i < lst1.length; i++){\n        for(var j = 0; j < lst2.length; j++){\n\
    \            if(lst1[i] < lst2[j]){\n                count = count + 1;\n    \
    \            break;\n            }\n        }\n    }\n    return lst1.slice(0,\
    \ count);\n}\n", "    let res = [];\n    for(let i = 0; i < lst1.length; i++){\n\
    \        let cnt = 0;\n        for(let j = 0; j < lst2.length; j++){\n       \
    \     if(lst1[i] === lst2[j]){\n                cnt += 1;\n            }\n   \
    \     }\n        res.push(cnt > lst1.length/2 ? lst1[i] : lst2[i]);\n    }\n \
    \   return res;\n}\n</code>\n<|/ a tags=javascript,arrays,sorting |>\n<| c |>\n\
    It's a good solution, but I think there's a better way than looping through each\
    \ of them every time and counting. Sorting them both would be better, especially\
    \ if they're long.\n<|/ c |>\n<| c |>\nThanks, I missed that point, I edited my\
    \ answer.\n<|/ c |>\n<| c |>\nI upvoted this as it works, but the other answer\
    \ uses `Array.prototype.reduce()`. This is O(n), so I would suggest using that\
    \ if you can.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    // Only consider the\
    \ strings whose length are less than the length of the other list.\n    if(lst1.length\
    \ >= lst2.length){\n        let arr = [];\n        for (let i = 0; i < lst2.length;\
    \ i++) {\n            arr = arr.concat(total_match(lst1, lst2.slice(i, i + 1)));\n\
    \        }\n        return arr;\n    }\n    else {\n        let arr = [];\n  \
    \      for (let i = 0; i < lst1.length; i++) {\n            arr = arr.concat(total_match(lst1.slice(i,\
    \ i + 1), lst2));\n        }\n        return arr;\n    }\n}\n", "  var totalChars\
    \ = lst1.reduce(function(sum, string){\n    var strArray = string.split('');\n\
    \    return sum + strArray.length;\n  }, 0);\n  return lst2.filter(function(string){\n\
    \    var strArray = string.split('');\n    return strArray.length <= totalChars;\n\
    \  });\n}\n", "  \n  if(lst1.length == lst2.length){\n    let matches = 0;\n \
    \   for(let i = 0; i < lst1.length; i++){\n      if(lst1[i] < lst2[i]){\n    \
    \    matches++;\n      }\n    }\n    return matches;\n  }\n  \n  return lst1;\n\
    }\n", "    if (lst1.length == lst2.length){\n        for (var i = 0; i < lst1.length;\
    \ i++){\n            if (lst1[i] < lst2[i]){\n                return lst1;\n \
    \           }\n        }\n        return lst1;\n    }\n    else {\n        for\
    \ (var i = 0; i < lst2.length; i++){\n            if (lst1.indexOf(lst2[i]) ==\
    \ -1){\n                return lst1;\n            }\n        }\n        return\
    \ lst2;\n    }\n}\n", "    let arr1 = [];\n    let arr2 = [];\n\n    for(let i\
    \ = 0; i < lst1.length; i++){\n        if(lst2.indexOf(lst1[i]) === -1){\n   \
    \         arr1.push(lst1[i]);\n        }\n    }\n    for(let i = 0; i < lst2.length;\
    \ i++){\n        if(arr1.indexOf(lst2[i]) === -1){\n            arr2.push(lst2[i]);\n\
    \        }\n    }\n\n    if(arr1.length === arr2.length){\n        return arr1;\n\
    \    }\n    else if(arr1.length < arr2.length){\n        return arr2;\n    }\n\
    \    else{\n        throw 'Two arrays have different lengths!';\n    }\n}\n",
  "\treturn lst1.filter(function(elem){\n\t\treturn lst2.indexOf(elem) < 0;\n\t});\n\
    }\n", "    var len1 = lst1.length;\n    var len2 = lst2.length;\n    var total\
    \ = 0;\n    var i = 0;\n\n    while(i < len1 && i < len2){\n        if(lst1[i]\
    \ != lst2[i]){\n            i++;\n        }\n        else{\n            total\
    \ += 1;\n        }\n    }\n    \n    return lst1.slice(0, i).concat(lst2.slice(0,\
    \ i)).concat(lst1.slice(i + 1)).concat(lst2.slice(i + 1));\n}\n", "  let res =\
    \ lst1.filter((el1, index) => !lst2.includes(el1) && !lst1.includes(el1) && lst1.length\
    \ - lst2.length >= index)\n  if(lst1.length > lst2.length){\n    return res\n\
    \  }\n  return lst2\n}\n", "  var arr1 = lst1.sort(), arr2 = lst2.sort(), length\
    \ = arr1.length, count = 0;\n  arr1.forEach(function(v){\n    arr2.forEach(function(x){\n\
    \      if (v < x) count++;\n    });\n  });\n  arr1.length == arr2.length ? arr1\
    \ : arr2;\n  return arr1.length == arr2.length ? arr1 : arr2;\n}\n", "  var a\
    \ = [];\n  for(var i = 0; i< lst1.length; i++){\n    for(var j=0; j<lst2.length;\
    \ j++){\n      if(lst1[i] < lst2[j])\n        break;\n    }\n    if(i == lst1.length)\n\
    \      a.push(lst2[j]);\n  }\n  return a;\n}", "\t// code here\n}\n", "    var\
    \ arr3 = [];\n    var total = 0;\n    for(var i = 0, l = lst1.length; i < l; i++){\n\
    \        for(var j = 0, k = lst2.length; j < k; j++){\n            if(lst1[i]\
    \ < lst2[j]){\n                arr3.push(lst1[i]);\n                total++;\n\
    \            }\n        }\n    }\n    return arr3;\n}", "\tconst result = [];\n\
    \tconst max1 = Math.max(...lst1);\n\tconst max2 = Math.max(...lst2);\n\tconst\
    \ min1 = Math.min(...lst1);\n\tconst min2 = Math.min(...lst2);\n\tif(max1 - min1\
    \ == max2 - min2 && max1 - min1 > 0){\n\t\treturn result;\n\t}\n\tfor(let i =\
    \ min1; i <= max1; i++){\n\t\tif(max2 - min2 == 0){\n\t\t\tresult.push(i);\n\t\
    \t}\n\t\telse if(lst2.filter((it) => it == i).length == 0){\n\t\t\tresult.push(i);\n\
    \t\t}\n\t\telse{\n\t\t\tresult.push(\"\");\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ result;\n}", "\tif (lst1.length != lst2.length) return lst1;\n\tvar total =\
    \ [];\n\tlst1.forEach(function(word1, index){\n\t\tvar index = lst2.indexOf(word1,\
    \ index);\n\t\tif (index != -1) return total.push(word1);\n\t});\n\treturn total.sort(function(a,\
    \ b){return b.length - a.length;});\n}\n", "  return lst1.filter(function(item,\
    \ pos){\n    return lst2.indexOf(item) === pos;\n  }).concat(lst2.filter(function(item,\
    \ pos){\n    return lst1.indexOf(item) === pos;\n  }));\n}\n", "   var result\
    \ = new Array();\n   var len = lst1.length;\n   var i;\n   for(i = 0; i < len;\
    \ i++){\n       var count = 0;\n       for(var j = 0; j < lst2.length; j++){\n\
    \           if(lst1[i] == lst2[j]){\n               count += 1;\n            \
    \   break;\n           }\n       }\n       if(count == lst2.length){\n       \
    \    result.push(lst1[i]);\n       }\n   }\n   return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
