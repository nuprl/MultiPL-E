name: HumanEval_60_sum_to_n
language: js
prompt: "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
  // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
  // 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = sum_to_n;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(6),21);\n\
  \  assert.deepEqual(candidate(11),66);\n  assert.deepEqual(candidate(30),465);\n\
  \  assert.deepEqual(candidate(100),5050);\n}\n\ntest();"
completions: ["  return range(1, n).reduce(function(sum, i){return sum + i}, 0);\n\
    }\n\n},{\"./number\":23,\"./range\":24}],20:[function(require,module,exports){",
  "  return function ( i ){\n    if (i > n) return 0;\n    return i + 1;\n  }\n}\n",
  "\tvar result = 0;\n\tfor(var i = 1;i <= n;i++){\n\t\tresult += i;\n\t}\n\treturn\
    \ result;\n}\n", "  var nv = n*(n+1)/2\n  return function sum_to_n_func(n){\n\
    \    return nv+n\n  }\n}", "  var sum = 0;\n  var i;\n  for (i = 1; i <= n; i++){\n\
    \    sum += i;\n  }\n  return sum;\n}\n", "\tlet sum = 0;\n\tfor(let i = 1; i\
    \ < n; i++){\n\t\tsum += i;\n\t}\n\treturn sum;\n}\n", "  let res = 0;\n  for\
    \ (let i = 1; i <= n; i++){\n    res += i;\n  }\n  return res;\n}\n", "    var\
    \ sum = 0;\n    for(var i = 0; i <= n; i++){\n        sum += i;\n    }\n    return\
    \ sum;\n}\n", "  var sum=0;\n  for(var i=1;i<=n;i++){\n    sum+=i;\n  }\n  return\
    \ sum;\n}", "  if(n < 0)\n    n = -n;\n  var sum = 0;\n  for(var i = 0; i < n;\
    \ i++){\n    sum += i;\n  }\n  return sum;\n}\n", "  var sum = 0;\n  for(var i=1;i<=n;i++){\n\
    \    sum += i;\n  }\n  return sum;\n}\n", "  var s=0;\n  for(var i=1;i<=n;i++){\n\
    \    s=s+i;\n  }\n  return s;\n}\n", "  var sum = 0;\n  for(var i = 1;i <= n;i++){\n\
    \    sum += i;\n  }\n  return sum;\n}\n\n", "    var result = 0;\n    for(var\
    \ i = 0; i < n; i++){\n        result += i;\n    }\n    return result;\n}\n",
  "  return new Function('n','sum',\n                      'return n==0 ? 0 : (n==1\
    \ ? 1 : n*(n-1));');\n}\n", "  var sum = 0;\n  for(var i = 1; i<=n; i++){\n  \
    \  sum += i;\n  }\n  return sum;\n}\n", "  var sum = 0;\n  while(n--) sum += 1;\n\
    \  return sum;\n}\n\n\nvar sum_to_n_max = sum_to_n\n", "\treturn function (n){\n\
    \t\treturn n * n;\n\t};\n};\n", "  var total = 0;\n  for(var i=1;i<=n;i++){\n\
    \    total += i;\n  }\n  return total;\n}\n", "  var sum = 0;\n  for(var i = 0;\
    \ i < n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "  return (n * (n + 1)\
    \ / 2) + n;\n}\n", "\treturn function(){\n\t\tvar i = 0;\n\t\twhile(i<n) i++;\n\
    \t\treturn i;\n\t}\n}\n", "    if(n <= 1) return 1;\n    return n*(n+1)/2-1;\n\
    }\n</code>\nAnd this is the function which gets called when a new element is added\
    \ to the list:\n<code>", "  if (n > 0) return n;\n  else return 1;\n}\n", "  \
    \  return function(x){ return x + sum_to_n(n-1); }\n}", "  return n < 2 ? 1 :\
    \ sum_to_n(n - 1) + sum_to_n(n);\n}", "  let result = 0;\n  for (let i = 1; i\
    \ < n; i++) {\n    result += i;\n  }\n  return result;\n}\n", "  var sum = 0;\n\
    \  for (var i = 0; i < n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "  \
    \  if(n <= 1){\n        return 1;\n    }else{\n        return n + sum_to_n(n-1);\n\
    \    }\n}", "  if (n <= 1) {\n    return 1;\n  }\n  var result = 0;\n  for (var\
    \ i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n}\n", "    for(var\
    \ s=0; s<n; s++){\n        sum_to_n(1);\n    }\n    return sum;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n\
    }\n", "  var i, sum;\n  for(i=0; i<n; i++){\n    sum += i;\n  }\n  return sum;\n\
    }\n", "\treturn (1 + n)*(n + 1 - ((1 + n) * (n - 1)))/(2 * n);\n}\n", "    var\
    \ sum = 0;\n    for(var i = 1;i<=n;i++){\n        sum += i;\n    }\n    return\
    \ sum;\n}\n", "  var sum = 0;\n  while(n > 0){\n    sum += n;\n    n -= 1;\n \
    \ }\n  return sum;\n}\n", "  var ret = 0;\n  for (var i=1; i<=n; i++){\n    ret\
    \ += i;\n  }\n  return ret;\n}\n", "  if ( n == 0 ){\n    return 0\n  }\n  if\
    \ ( n == 1 ){\n    return 1\n  }\n  var next = n * 2\n  var x = sum_to_n(next)\n\
    \  var y = sum_to_n(next + 1)\n  return x + y\n}\n", "  return n * (n + 1) / 2;\n\
    }", "  let sum = 0;\n  for (let i = 0; i <= n; i++) {\n    sum += i;\n  }\n  return\
    \ sum;\n}\n", "    var sum = 0;\n    for(var i=1;i<=n;i++){\n        sum += i;\n\
    \    }\n    return sum;\n}\n", "    return function(i){\n        if(i===0){\n\
    \            return 1;\n        }\n        if(i>n){\n            return 0;\n \
    \       }\n        return i+sum_to_n(n-i)(i);\n    };\n};\n", "  var sum = 0;\n\
    \  for (var i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "\t\
    let nTotal = 0;\n\tfor (let i=1; i<=n; i++){\n\t\tnTotal += i;\n\t}\n\treturn\
    \ nTotal;\n}\n", "  let numbers=[];\n  for(let i=1;i<=n;i++){\n    numbers.push(i)\n\
    \  }\n  return numbers.reduce((a, b) => a + b);\n}\n</cell>\n<text>\nWrite a function\
    \ sum_to_n_recursive(n) that calls the function sum_to_n with n = 100 (not including\
    \ the final parameter).\n\nNote: Don't use for-loops.\n\n\n</text>\n<cell>", " \
    \   if(n < 2){\n        return 1;\n    }\n    else if(n < 5){\n        return\
    \ 5;\n    }\n    else {\n        return Math.ceil(Math.log(parseInt(n)) / (Math.LN2\
    \ / 2));\n    }\n}\n", "  return sum_to(n,1);\n}\n", "    var result = 0;\n  \
    \  for(var i = 1; i <= n; i++){\n        result += i;\n    }\n    return result;\n\
    }\n", "  return Array.from({ length: n }, () => 0);\n}\n", "  return n.reduce(\
    \ function(a, b){\n    return a + b;\n  });\n}\n", "\tvar sum = 0;\n\tfor(var\
    \ i=1;i<=n;i++){\n\t\tsum += i;\n\t}\n\treturn sum;\n}\n", "  let sum = 0;\n \
    \ while (n >= 1){\n    sum += n;\n    n = n / 2;\n  }\n  return sum;\n}\n\n",
  "    var sum_of_n = 0;\n    for(var i = 0; i < n; i++){\n        sum_of_n += i;\n\
    \    }\n    return sum_of_n;\n}\n", "  let res = 0;\n  for (let i = 1; i <= n;\
    \ i++){\n    res = res + i;\n  }\n  return res;\n}\n", "    var n = +n,\n    \
    \    i = 1,\n        s = 0,\n        while (i++ < n) {\n            s = s + i;\n\
    \        }\n    return s;\n}", "\tif(n == 0)\n\t\treturn 0;\n\tif(n == 1)\n\t\t\
    return 1;\n\tif(n == 2)\n\t\treturn 2;\n\tvar sum_from_to_n = function(from, to){\n\
    \t\tvar sum = 0;\n\t\tfor(var i = from; i <= to; i++)\n\t\t\tsum += sum_to_n(i);\n\
    \t\treturn sum;\n\t}\n\tvar sum = sum_from_to_n(1,n);\n\tfor(var i = 2; i <= n;\
    \ i++)\n\t\tsum += sum_from_to_n(i+2, n);\n\treturn sum;\n}\n", "  var i = 1;\n\
    \  var s = 0;\n  while(n>0){\n    s = s + i;\n    n--;\n    i++;\n  }\n  return\
    \ s;\n}\n", "  var s = 1;\n  for(var i = 1; i<=n; i++){\n    s+=i;\n  }\n  return\
    \ s;\n}\n", "  var sum = 0;\n  for(var i = 0; i < n; i++){\n    sum += i;\n  }\n\
    \  return sum;\n}\n", "  if(n<=0){\n    return 1;\n  }\n  var result=1;\n  for(var\
    \ i=1; i<=n; i++){\n    result*=i;\n  }\n  return result;\n}", "\tvar i, sum=1;\n\
    \tfor (i=1; i<=n; i++){\n\t\tsum+=i;\n\t}\n\treturn sum;\n}\n", "  var res = 0;\n\
    \  var i = 0;\n  while (i < n){\n    res += i;\n    ++i;\n  }\n  return res;\n\
    }\n", "  var s = 1;\n  for(var i = 2; i <= n; i++){\n    s+=i;\n  }\n  return\
    \ s;\n}\n", "  return _sum_to_n(1,n);\n}\n", "\t\n\t// return 0 if n < 0\n\tif(\
    \ n < 0 )\n\t\treturn 0;\n\t\n\t// sum is a sum of a series: 1^2 + 2^2...\n\t\
    var sum = 0;\n\t\n\t// for i = 1...n\n\tfor( var i = 1; i <= n; i++ )\n\t\tsum\
    \ += i;\n\t\n\treturn sum;\n}\n", "    if (n < 1){\n        throw \"The argument\
    \ n must be positive.\";\n    }\n\n    if (n <= 0){\n        throw \"The argument\
    \ n must be greater than 0.\";\n    }\n\n    if (n == 1){\n        return 1;\n\
    \    }\n\n    return n + sum_to_n(n - 1);\n}\n", "  var sum = 0;\n  for(var i=1;i<=n;i++){\n\
    \    sum += i;\n  }\n  return sum;\n}\n", "  var sum = 0;\n  for (var i = 1; i\
    \ <= n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "  if (n < 1) return 0\n\
    \  let sum = 1\n  for (let i = 1; i != n; i++){\n    sum += i\n  }\n  return sum\n\
    }\n", "  var sum = 0;\n  for(var i=1; i <= n; i++){\n    sum += i;\n  }\n  return\
    \ sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n\
    \  }\n  return sum;\n}\n", "    var result = 0, i;\n    for(i=0;i<n;i++){\n  \
    \      result += i;\n    }\n    return result;\n}\n", "    var sum = 1;\n    for(var\
    \ i=1; i<=n; i++){\n        sum = sum + i;\n    }\n    return sum;\n}\n", "  \
    \  var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        sum += i;\n    }\n\
    \    return sum;\n}\n", "    var sum = 0;\n    for (var i = 1; i < n; i++){\n\
    \        sum += i;\n    }\n    return sum;\n}", "  var sum = 0;\n  for(var i =\
    \ 1;i < n;i++){\n    sum = sum + i;\n  }\n  return sum;\n}", "  let ans = 0;\n\
    \  for(let i = 1; i <= n; i++){\n    ans += i;\n  }\n  return ans;\n}", "    if\
    \ ( n > 0 ) {\n        return n * ( n + 1 ) / 2;\n    }\n    return 1;\n}\n",
  "  if(n<=1){\n    return 1;\n  }else{\n    return n*sum_to_n(n-1);\n  }\n}\n", " \
    \ if (n === 0 || n === 1){\n    return n;\n  } else {\n    return n % 2 + sum_to_n(n\
    \ - 1)\n  }\n}\n", "  // write your code! :)\n}\n\n</cell>\n<text>\nsum_to_n_v2\
    \ is a variation of the function sum_to_n() that returns only the numbers from\
    \ 1 to n.\n\nFor example, sum_to_n_v2(10) returns [2, 4, 6, 8].\n\n\n</text>\n\
    <cell>", "  return n*(n+1)/2\n}", "  return n <= 0 ? 0 : n + sum_to_n(n-1);\n\
    }\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_for_loops_are_controversial\"\
    >FOR LOOPS ARE CONTRIBUTAL</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\"\
    >\n<p>For loops are controversial in the Haskell community. They are\nusually\
    \ the source of confusion, because it is easy to accidentally\ncreate lists with\
    \ side effects. One of the best examples of this\nis when writing a recursive\
    \ function with side effects, such as\n<code>length</code>, which will return\
    \ a length of a list after recursing.\nThe list will be evaluated and have side\
    \ effects (add 1 to\nthe length).</p>\n</div>\n<div class=\"paragraph\">\n<p>The\
    \ <code>for</code> loop syntax is more explicit and does not have\nthis problem.\
    \ However, there is still an issue of style. It\nis not clear whether the <code>for</code>\
    \ loop in question is doing the\nsame thing as the recursive call. If it does,\
    \ then\nthe for loop will probably be clearer. On the other hand, if\nthe for\
    \ loop is doing something different, then the recursive\ncall might be clearer.\
    \ For example, <code>sum_to_n</code> is\ndoing something different from the for\
    \ loop.</p>\n</div>\n<div class=\"paragraph\">\n<p>So which form is better?</p>\n\
    </div>\n<div class=\"paragraph\">\n<p><code>sum_to_n</code> is doing exactly one\
    \ thing, namely summing up the\nnumbers from 1 to n. So the <code>for</code> loop\
    \ here is just doing one\nthing. Whether it is clearer depends on the reader of\n\
    the code. Some people might expect that <code>sum_to_n</code> is doing\ntwo things:\
    \ getting the n and adding up the numbers from 1 to\nn. Others may expect that\
    \ it is the other way around. Since the\n<code>sum_to_n</code> function name already\
    \ says what is being\ndone, it is easy to understand that the <code>for</code>\
    \ loop is\ndoing one thing. On the other hand, <code>sum_to_n</code> could\nhave\
    \ been a better name for this function, but it is not. The", "  return n + n;\n\
    }\nsum_to_n(1)(1);\nsum_to_n(2)(2);\nsum_to_n(3)(6);\nsum_to_n(4)(14);\nsum_to_n(5)(49);\n\
    sum_to_n(6)(81);\nsum_to_n(7)(126);\nsum_to_n(8)(196);\nsum_to_n(9)(281);\nsum_to_n(10)(405);\n\
    sum_to_n(11)(542);\nsum_to_n(12)(688);\nsum_to_n(13)(832);\nsum_to_n(14)(1008);\n\
    sum_to_n(15)(1154);\nsum_to_n(16)(1368);\nsum_to_n(17)(1516);\nsum_to_n(18)(1754);\n\
    sum_to_n(19)(1949);\nsum_to_n(20)(2112);\nsum_to_n(21)(2241);\nsum_to_n(22)(2415);\n\
    sum_to_n(23)(2554);\nsum_to_n(24)(2768);\nsum_to_n(25)(2991);\nsum_to_n(26)(3254);\n\
    sum_to_n(27)(3465);\nsum_to_n(28)(3698);\nsum_to_n(29)(3952);\nsum_to_n(30)(4185);\n\
    sum_to_n(31)(4471);\nsum_to_n(32)(4744);\nsum_to_n(33)(5039);\nsum_to_n(34)(5370);\n\
    sum_to_n(35)(5634);\nsum_to_n(36)(5871);\nsum_to_n(37)(6170);\nsum_to_n(38)(6428);\n\
    sum_to_n(39)(6667);\nsum_to_n(40)(6940);\nsum_to_n(41)(7212);\nsum_to_n(42)(7425);\n\
    sum_to_n(43)(7665);\nsum_to_n(44)(7952);\nsum_to_n(45)(8215);\nsum_to_n(46)(8471);\n\
    sum_to_n(47)(8766);\nsum_to_n(48)(9093);\nsum_to_n(49)(9405);\nsum_to_n(50)(9691);\n\
    sum_to_n(51)(10040);\nsum_to_n(52)(10450);\nsum_to_n(53)(10950);\nsum_to_n(54)(11170);\n\
    sum_to_n(55)(11440);\nsum_to_n(56)(11710);\nsum_to_n(57)(12060);\nsum_to_n(58)(12350);\n\
    sum_to_n(59)(12750);", "    var i, sum, result;\n    sum = 0;\n    for(i = 1;\
    \ i <= n; i++){\n        sum = sum + i;\n    }\n    result = sum;\n    return\
    \ result;\n}\n", "  var ret = 0;\n  for (var i = 1; i <= n; i++) {\n    ret +=\
    \ i;\n  }\n  return ret;\n}\n", "\tlet sum = 0;\n\tfor(let i = 1; i <= n; i++){\n\
    \t\tsum += i;\n\t}\n\treturn sum;\n}\n", "  return function(x){\n    if (x >=\
    \ n) return 0;\n    return x + sum_to_n(n-1) ;\n  }\n}\n", "  return n === undefined\
    \ ? 1 : n + sum_to_n(n-1);\n}", "  return function(n){\n    return n > 0 ? sum_to_n(n-1)(n-1)\
    \ + 1 : 1;\n  }\n}\n},{}],5:[function(require,module,exports){\nexports.small\
    \ = require('./small');\nexports.big = require('./big');\nexports.full = require('./full');\n\
    \n},{\"./big\":6,\"./full\":7,\"./small\":8}],6:[function(require,module,exports){",
  "  return function (num){\n    // if num is less than zero, return 0\n    if (num\
    \ < 0){\n      return 0;\n    }\n    // if num is positive, return sum of numbers\
    \ from 1 to num.\n    return num * num;\n  }\n}\n", "  return n <= 1 ? 1 : n *\
    \ sum_to_n(n-1);\n}\n", "\tif(n == 0) return 0;\n\tvar total = 0;\n\tfor(var i\
    \ = 1;i <= n;i++){\n\t\ttotal += i;\n\t}\n\treturn total;\n}\n", "  var sum =\
    \ 0;\n  for(var i=1;i<=n;i++){\n    sum += i;\n  }\n  return sum;\n}\n", "   var\
    \ sum = 0;\n   var pow = 1;\n   while(n > pow){\n       sum += pow;\n       pow\
    \ *= 10;\n   }\n   return sum;\n}\n", "    if (n < 0) return 0;\n    if (n ==\
    \ 0) return 1;\n    if (n == 1) return 1;\n    return sum_to_n(n-2) + sum_to_n(n-1);\n\
    }\n", "  var sum = 0;\n  for(var i = 0; i <= n; i++){\n    sum += i;\n  }\n  return\
    \ sum;\n}\n\n\nvar make_canvas = function(w, h){\n  var canvas = document.createElement('canvas');\n\
    \  canvas.width = w;\n  canvas.height = h;\n  return canvas;\n}\n\n\nvar set_canvas_size\
    \ = function(canvas, w, h){\n  canvas.width = w;\n  canvas.height = h;\n}\n\n\n\
    var set_canvas_style = function(canvas, style){\n  canvas.setAttribute('style',\
    \ style);\n}\n\n\nvar set_canvas_canvas_style = function(canvas, style){\n  canvas.getContext('2d').strokeStyle\
    \ = style;\n}\n\n\nvar add_text_to_canvas = function(canvas, text, x, y){\n  var\
    \ ctx = canvas.getContext('2d');\n  ctx.fillText(text, x, y);\n}\n\n\nvar draw_line\
    \ = function(canvas, start, end){\n  var ctx = canvas.getContext('2d');\n  ctx.beginPath();\n\
    \  ctx.moveTo(start.x, start.y);\n  ctx.lineTo(end.x, end.y);\n  ctx.stroke();\n\
    }\n\n\nvar draw_rect_line = function(canvas, x1, y1, x2, y2){\n  var ctx = canvas.getContext('2d');\n\
    \  ctx.beginPath();\n  ctx.strokeStyle = 'black';\n  ctx.lineWidth = 5;\n  ctx.rect(x1,\
    \ y1, x2, y2);\n  ctx.stroke();\n}\n\n\nvar draw_rect_rect_line = function(canvas,\
    \ x1, y1, x2, y2){\n  var ctx = canvas.getContext('2d');\n  ctx.beginPath();\n\
    \  ctx.strokeStyle = 'black';\n  ctx.lineWidth = 5;\n  ctx.rect(x1, y1, x2, y2);\n\
    \  ctx.stroke();\n  ctx.beginPath();\n  ctx.strokeStyle = 'black';\n  ctx.lineWidth\
    \ = 5;\n  ctx.rect(x2, y2, x1-x2, y1-y2);\n  ctx.stroke();\n}\n\n\nvar draw_rect_rect_rect_line\
    \ = function(canvas, x1, y1, x2, y2, x3, y3, x4, y4){\n  var ctx = canvas.getContext('2d');\n\
    \  ctx.beginPath();\n  ctx.strokeStyle = 'black';\n  ctx.lineWidth = 5;\n  ctx.rect(x1,\
    \ y1, x2, y2);\n  ctx.stroke();\n  ctx.beginPath();\n  ctx.strokeStyle = 'black';\n\
    \  ctx.lineWidth = 5;\n  ctx.rect(x2, y2, x1-x2, y1-y2);\n  ctx.stroke();\n  ctx.beginPath();\n\
    \  ctx.strokeStyle = 'black';\n  ctx.lineWidth = 5;\n  ctx.rect(x3, y3, x2-x3,\
    \ y2-y3);\n  ctx.stroke();\n  ctx.beginPath();\n  ctx.", "  return reduce(function(prev,\
    \ curr){\n    return prev + curr;\n  }, sum, range(1, n));\n}\n", "    var sum\
    \ = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return\
    \ sum;\n}\n", "  if(n < 1){\n    throw new Error(\"The sum must be positive\"\
    );\n  }\n  return _sum_to_n(n, 1);\n}\n", "  var sum = 0;\n  for (var i = 1; i\
    \ <= n; i++){\n    sum += i;\n  }\n  return sum;\n}", "\treturn (function(x){\n\
    \t\tif(x <= n) return x;\n\t\telse return sum_to_n(n-x);\n\t});\n}\n", "\treturn\
    \ reduce(function(res, val){\n\t\treturn res + val;\n\t}, 0, n);\n}\n", "  var\
    \ result = 0;\n  for (var i = 1; i <= n; i++){\n    result += i;\n  }\n  return\
    \ result;\n}\n", "  var sum = 0;\n  for(var i=1;i<=n;i++)\n    sum+=i;\n  return\
    \ sum;\n}", "    var result = 0;\n    for(var i = 1; i <= n; ++i){\n        result\
    \ = result + i;\n    }\n    return result;\n}\n", "  return reduce(function (a,\
    \ x){\n    return a + x;\n  }, n, 0);\n}\n", "  return function(x){ return x ?\
    \ sum_to_n(n-1)(x) + n : n; };\n}\n", "  return function(arr){\n    if(arr.length\
    \ === 1){\n      return arr[0];\n    }\n    if(n === 0 || arr.length === 1){\n\
    \      return arr[0];\n    }\n    return arr[arr.length-1] + sum_to_n(n - 1);\n\
    \  }\n}", "  var sum = 0;\n  while(n>0){\n    sum += 1;\n    n -= 1;\n  }\n  return\
    \ sum;\n}\n", "  var sum = 0;\n  for(var i = 1, iMax = n + i; i <= iMax; i++){\n\
    \    sum += i;\n  }\n  return sum;\n}\n", "  return n*(n+1)/2;\n}\n", "    var\
    \ result = 1;\n    for (var i = 1; i <= n; i++){\n        result *= i;\n    }\n\
    \    return result;\n}\n\n", "  var n1=n;\n  return function(x){\n    if (x<n1){\n\
    \      return sum_to_n(n1)(x)\n    } else {\n      return n1;\n    }\n  }\n}\n",
  "  if(n < 1) return 0;\n  var result = 1;\n  for(var i = 1; i <= n; i++) result\
    \ *= i;\n  return result;\n}\n</textarea>\n<center>\n<script type=\"text/javascript\"\
    \ src=\"https://raw.githubusercontent.com/davidbau/webrepl/master/js/repl.js\"\
    ></script>\n</center>\n<!--<script type=\"text/javascript\" src=\"https://raw.githubusercontent.com/davidbau/webrepl/master/js/repl.js\"\
    ></script>-->\n\n<hr>\n<center>\n<pre>\n  \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\
    \n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\
    \ \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\
    \n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\
    \ \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\
    \n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\
    \ \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\
    \n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\
    \ \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\
    \n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\
    \ \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\
    \n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\
    \ \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\
    \n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n ", "  if(n\
    \ < 1)\n    throw 'n must be a positive integer';\n  var sum = 0;\n  for(var i\
    \ = 0; i < n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "  var result =\
    \ 1;\n  for(var i = 1; i < n; i++){\n    result *= i;\n  }\n  return result;\n\
    }\n", "  return (n * (n + 1))/2\n}\n", "  var sum = 0;\n  for (var i = 1; i <\
    \ n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "\treturn sum_to(0,n);\n}",
  "    var sum = 0;\n    for(var i=1; i<=n; i++){\n        sum += i;\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=javascript,function,sum,for-loop,loops |>\n<| a\
    \ |>\n<code>", "  //this is just a fun fact about big numbers\n  //let's say n\
    \ is 1,000,000,000...\n  //then n-1 is 999,999,999,999,998...\n  //but n+1 is\
    \ not actually the big number\n  //it has something to do with rounding\n  //and\
    \ n+1 gets rounded to n-1 when it's multiplied\n  //with some other number\n \
    \ //e.g. 1,000,000,000... * 2,000,000,000 = 2,000,000,000\n  //then n+1 is 2,000,000,001\
    \ and since 2 gets rounded up to 3, n+1 is 3,000,000,001\n  //it keeps repeating\
    \ like that until it hits 1,000,000,000 and then starts rounding down to 1,000,000,001\n\
    \  //it eventually gets to 1,000,000,000 and then starts rounding up...\n  //so\
    \ 1,000,000,000... * 1,000,000,000 = 1,000,000,000,\n  //1,000,000,001... * 1,000,000,001\
    \ = 1,000,000,001\n  //...and so on until it reaches 1,000,000,000 and the only\
    \ way it can stop is\n  //1,000,000,000,000,000,000,000,000 and then it stops\
    \ rounding because it gets up to 1,000,000,000,001 again\n  //so it just keeps\
    \ adding numbers until it gets to 1,000,000,000,000,000,000,000,001\n  //then\
    \ it stops\n  n++; //start at 1 because that's what it gets rounded to\n  var\
    \ sum = 0;\n  for(var i = 0; i < n; i++){\n    sum += i;\n  }\n  return sum;\n\
    }\n", "  return n * (n + 1) * (2 * n + 1) / (3 * n + 1)\n}\n", "    var total\
    \ = 0;\n    for(var i = 0; i < n; i++){\n        total += i;\n    }\n    return\
    \ total;\n}\n", "    var arr = [];\n    for (var i = 1; i <= n; i++){\n      \
    \  arr.push(i);\n    }\n    return arr.slice(1).reduce(function(a, b){\n     \
    \   return a + b;\n    }, 0);\n}\n", "  var sum = 0;\n  for(var i=1;i<=n;i++){\n\
    \    sum += i;\n  }\n  return sum;\n}\n", "  //if n <= 0\n  if (n <= 0) {\n  \
    \  return 1;\n  }\n  //if n is odd, sum from 1 to n\n  if (n % 2 === 1) {\n  \
    \  return sum_to_n(n - 1);\n  }\n  //if n is even, sum from 1 to n/2\n  return\
    \ sum_to_n(n/2);\n}\n", "  var sum = 0;\n  for (var i = 0; i < n; i++)\n    sum\
    \ += i;\n  return sum;\n}\n", "    return sum_to(0,n)\n}\n", "  return (n * (n\
    \ + 1))/2\n}\n</cell>\n<cell>", "   var sum = 0;\n   var i = 1;\n   for (;i <\
    \ n; ++i){\n      sum = sum + i;\n   }\n   return sum;\n}", "  var sum = 0;\n\
    \  for(var i = 0; i < n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "  var\
    \ sum_from_n = function(n){\n    var sum = 0;\n    var result = n;\n    for(var\
    \ i = 0; i < n; i++){\n      sum += i;\n    }\n    return result;\n  }\n  return\
    \ sum_from_n(n);\n}\n", "  if(n == 0)\n    return 1;\n  if(n < 0)\n    return\
    \ sum_to_n(-n);\n  if(n < 15)\n    return n * (n+1)/2;\n  if(n < 100)\n    return\
    \ n * (n+1)/2;\n  if(n < 200)\n    return n * (n+1)*(2*n+1)/6;\n  if(n < 500)\n\
    \    return n * (n+1)*(2*n+1)*(3*n+1)/24;\n  return n * (n+1)*(2*n+1)*(3*n+1)*(4*n+1)/24;\n\
    }\n", "  var s = 0, i = 0; // sum of all i's up to n\n  for (; i < n; i++) {\n\
    \    s += i;\n  }\n  return s;\n}\n", "  return Math.floor((1 + Math.sqrt(1+8*n))\
    \ / 2);\n}\n", "  var sum = 0;\n  for(var i = 0; i < n; i++){\n    sum += i;\n\
    \  }\n  return sum;\n}", "  let sum = 0;\n  for (let i=1; i<=n; i++){\n    sum\
    \ += i;\n  }\n  return sum;\n}\n", "  var a = 1;\n  for(var i = 2; i <= n; i++){\n\
    \    a += i;\n  }\n  return a;\n}\n", "  var sum = 0;\n  for(var i=1;i<=n;i++){\n\
    \    sum += i;\n  }\n  return sum;\n}\n", "  if(n < 1){\n    throw new Error(\"\
    Sum to n should be greater than 1\");\n  }\n  return (n*n) + ((n-1)*(n-2));\n\
    }\n\n", "    var sum = 0;\n    for (var i = 0; i < n; i++)\n        sum += i;\n\
    \    return sum;\n}\n", "  var sum = 0;\n  for(var i = 0; i < n; i++){\n    sum\
    \ += i;\n  }\n  return sum;\n}\n", "    let sum = 0;\n    for (let i = 1; i <=\
    \ n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "\treturn n < 1 ?\
    \ 1 : n + sum_to_n(n - 1);\n}", "    var s = 1;\n    for(var i = 1; i <= n; i++){\n\
    \        s+= i;\n    }\n    return s;\n}\n", "  var sum = 0;\n  for(var i = 0;\
    \ i< n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "\tvar sum = 0;\n\tfor(var\
    \ i = 0; i < n; i++){\n\t\tsum += i;\n\t}\n\treturn sum;\n}\n", "  return Math.floor(Math.random()\
    \ * n) + 1;\n}\n\nvar sum_of_n_to_50 = sum_to_n(50);\nvar sum_of_n_to_100 = sum_to_n(100);\n\
    var sum_of_n_to_150 = sum_to_n(150);\nvar sum_of_n_to_200 = sum_to_n(200);\n",
  "  return n > 0 ? sum_to_n(n - 1) + n : n;\n}\n", "  return n<0 ? 0 : n*(n+1)/2\n\
    }\n", "  return function(x){ return sum(x, n); };\n}\nsum_to_n.__signature__ =\
    \ inspect.signature(sum);\n\n", "  var sum = 0;\n  for(var i = 0; i < n; i++){\n\
    \    sum += i;\n  }\n  return sum;\n}\n", "  // return 0 if n is <= 0\n  if (n\
    \ <= 0) {\n    return 0;\n  }\n  // create an array to hold running total\n  let\
    \ total = new Array(n+1);\n  // set first total to 1\n  total[0] = 1;\n  // fill\
    \ array with values 1 to n\n  for (let i=1; i<=n; i++) {\n    total[i] = total[i-1]\
    \ + i;\n  }\n  // return total[n]\n  return total[n];\n}\n", "  return n*(n+1)/2;\n\
    }", "\tvar sum = 0;\n\tfor(var i = 0; i < n; i++){\n\t\tsum += i;\n\t}\n\treturn\
    \ sum;\n}\n", "  if (n < 1) return 1;\n  return n*(n-1) + sum_to_n(n-2);\n}\n\
    \  ", "\tlet sum = 0;\n\twhile(n > 0){\n\t\tsum += n;\n\t\tn--;\n\t}\n\treturn\
    \ sum;\n}\n", "  if(n < 1) return 0;\n  var sum = 0;\n  var max = (1 << n) - 1;\n\
    \  for(var i = 1, m = max; i <= m; i++){ sum += i; }\n  return sum;\n}", "  return\
    \ n * (n + 1) / 2;\n}", "  var sum = 0;\n  for(var i=0; i<n; i++){\n    sum +=\
    \ sum_to_n(i);\n  }\n  return sum;\n}\n\nvar reorder_indices = function(indices1,\
    \ indices2, num_rows, num_cols){\n  var i, j, tmp_i, tmp_j, tmp_val1, tmp_val2;\n\
    \  tmp_i = indices1[0];\n  tmp_j = indices1[1];\n  tmp_val1 = indices1[2];\n \
    \ tmp_val2 = indices1[3];\n  \n  for (i=1; i<num_rows; i++){\n    tmp_i = i;\n\
    \    tmp_j = num_rows - i;\n    tmp_val1 = indices1[2];\n    tmp_val2 = indices1[3];\n\
    \    \n    for(j=1; j<num_cols; j++){\n      tmp_j = j;\n      tmp_val2 = indices1[4];\n\
    \      \n      if (tmp_val1 < tmp_val2){\n        tmp_val1 = tmp_val2;\n     \
    \   tmp_j = tmp_j - i;\n      }\n      \n      indices1[0] += tmp_val1;\n    \
    \  indices1[1] += tmp_i;\n      indices1[2] += tmp_j;\n      indices1[3] += tmp_val2;\n\
    \      \n      tmp_i = i;\n      tmp_j = num_rows - i;\n      tmp_val1 = indices1[4];\n\
    \      tmp_val2 = indices1[5];\n      \n      for(j=1; j<num_cols; j++){\n   \
    \     tmp_j = j;\n        tmp_val2 = indices1[6];\n        \n        if (tmp_val2\
    \ < tmp_val1){\n          tmp_val2 = tmp_val1;\n          tmp_j = tmp_j - i;\n\
    \        }\n        \n        indices1[4] += tmp_val2;\n        indices1[5] +=\
    \ tmp_i;\n        indices1[6] += tmp_j;\n        \n        tmp_i = i;\n      \
    \  tmp_j = num_rows - i;\n        tmp_val1 = indices1[6];\n        tmp_val2 =\
    \ indices1[7];\n        \n        for(j=1; j<num_cols; j++){\n          tmp_j\
    \ = j;\n          tmp_val2 = indices1[8];\n          \n          if (tmp_val2\
    \ < tmp_val1){\n            tmp_val2 = tmp_val1;\n            tmp_j = tmp_j -\
    \ i;\n          }\n          \n          indices1[8] += tmp_val2;\n          indices1[9]\
    \ += tmp_i;\n          indices1[10] += tmp_j;\n        }\n      }\n    }\n  }\n\
    \  \n  return indices2;\n};\n", "\tn = +n;\n\tif( n === 0 ) return 0;\n\treturn\
    \ n + sum_to_n( n - 1 );\n}\n", "  var s = 1;\n  var sum = 0;\n  for(var i = 1;i\
    \ <= n;i++){\n    sum+= i;\n    s += sum;\n  }\n  return s;\n}\n", "  return function(input){\n\
    \    if (n === 0) return 0;\n    if (n === 1) return input;\n    return add(sum_to_n(n-1),\
    \ (input - 1) * (n-1) / n);\n  }\n}\n", "  let sum = 0;\n  for (let i = 1; i<=n;\
    \ i++){\n    sum += i;\n  }\n  return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nYou\
    \ don't need the for loop to calculate the sum. Just `return 1+2+3+... = n! /\
    \ n!-1`\n<|/ c |>\n<| c |>\nYes, the for loop could be removed, but the result\
    \ would be the same.\n<|/ c |>\n<| c |>\nYou're right. The for loop is unnecessary.\n\
    <|/ c |>\n<| c |>\nSure, but I wanted to point out that this is an algorithm that\
    \ would have a time complexity of O(logn) rather than O(n).\n<|/ c |>\n<| c |>\n\
    : Sure, but that's not really a big issue. O(logn) is still an order of magnitude\
    \ slower than O(n). It's worth noting that in many cases the `for` loop will run\
    \ much faster than the recursive solution because of the added overhead of calling\
    \ a function and returning a value.\n<|/ c |>\n<| a tags=recursion,javascript\
    \ |>\nIn recursion you can do it like this:\n\n<code>", "  return n * (n + 1)\
    \ / 2\n}\n</cell>\n<text>\nNext we define an add_up function that sums numbers\
    \ from 1 to n.\n\n\n</text>\n<cell>", "    var x = 0;\n    while (n){\n      \
    \  x += n;\n        n = n >> 1;\n    }\n    return x;\n}\n", "  var result = 1;\n\
    \  for(var i = 1; i < n; i++){\n    result *= i;\n  }\n  return result;\n}\n",
  "  if(n > 1) {\n    var remaining = n\n    var current_sum = 0\n    while (n > 1)\
    \ {\n      var x = n % 10\n      var next_sum = current_sum + x\n      if (next_sum\
    \ < 10) {\n        next_sum = 0\n      }\n      current_sum = next_sum\n     \
    \ n = remaining\n      remaining = n\n    }\n    return current_sum\n  } else\
    \ {\n    return n\n  }\n}\n", "  let i = 0;\n  let x = 0;\n\n  while (i < n){\n\
    \    i += 1;\n    x += i;\n  }\n\n  return x;\n}\n", "  var result = 1, i;\n \
    \ for(i = 0; i < n; i+=1){\n    result *= i;\n  }\n  return result;\n}\n\nmodule.exports\
    \ = sum_to_n;\n\n},{}],81:[function(_dereq_,module,exports){", "    var a = [0],\n\
    \        i = 1,\n        m = 0;\n    while (i <= n) {\n        a.push(i++);\n\
    \        m += i;\n    }\n    return m;\n}\n", "  var ret = 1;\n  for(var i = 0;\
    \ i < n; i++){\n    ret *= (i+1);\n  }\n  return ret;\n}\n", "  // Create an empty\
    \ sum variable\n  var sum = 0;\n  // Create a for loop that iterates through the\
    \ numbers\n  for(var i = 1; i <= n; i++){\n    // Add number i to the sum variable\n\
    \    sum = sum + i;\n  }\n  // Return the sum variable\n  return sum;\n}\n", " \
    \ let res = [];\n  let sum = 0;\n  for (let i=1; i<n; i++){\n    sum += i;\n \
    \   res.push(sum);\n  }\n  return res;\n}\n", "  // Using a recursive function\
    \ rather than an iterative one.\n  var sum_so_far = 0;\n  \n  function sum_to_n_recursive(number,\
    \ sum){\n    if (number <= 0){\n      return sum;\n    }else{\n      return sum_to_n_recursive(number\
    \ - 1, sum + number);\n    }\n  }\n  \n  return sum_to_n_recursive(n, sum_so_far);\n\
    }\n</cell>\n<text>\nProblem 1.3: Write a function called sum_of_squares that takes\
    \ an integer n and returns the sum of all the numbers from 1 to n squared.\n\n\
    </text>\n<cell>", "  var sum_array = []\n  for (var i = 1; i <= n; i++){\n   \
    \ sum_array.push(i)\n  }\n  return sum_array.reduce(function(acc, val){\n    return\
    \ acc + val\n  })\n}\n", "  return _sum_to_n(0,n);\n};\n", "  return function(array){\n\
    \    return array.reduce(function(sum,x){\n      sum+=x;\n      return sum;\n\
    \    },0);\n  }\n}\n", "\tif(n>0){\n\t\treturn function(i){return i + n;}\n\t\
    }\n\telse{\n\t\treturn function(i){return -n;}\n\t}\n}", "  let s = 1;\n  while\
    \ (n >= s){\n    s += 1;\n  }\n  return s;\n}\n", "  let number = 0;\n  for (let\
    \ i = 1; i <= n; i++){\n    number += i;\n  }\n  return number;\n}", "  var ret=1;\n\
    \  for(var i=0;i<=n;i++){\n    ret+=i;\n  }\n  return ret;\n}\n", "  var result\
    \ = 0;\n  for (var i=1; i<=n; i++){\n    result += i;\n  }\n  return result;\n\
    }\n", "\tlet result = 0;\n\tfor(let i = 1; i <= n; i++){\n\t\tresult += i;\n\t\
    }\n\treturn result;\n}\n", "  var current_sum = 0,\n      remain = n;\n\n  do\
    \ {\n    current_sum+=n%10;\n    remain=n/10;\n  } while(remain);\n\n  return\
    \ current_sum;\n}", "\tvar sum = 0;\n\tfor (var i = 0; i < n; i++){\n\t\tsum +=\
    \ i;\n\t}\n\treturn sum;\n}", "\treturn _.reduce(_.range(1,n), function(memo,\
    \ x) {\n\t\treturn memo + x;\n\t}, 0);\n}\n", "\tvar ret = [];\n\tvar i = 0;\n\
    \twhile (n >= i){\n\t\tret.push(n);\n\t\tn = sum_to_n(++i);\n\t}\n\treturn ret.reverse();\n\
    }\n", "  var s = 0;\n  for(var i = 1; i <= n; i++){\n    s += i;\n  }\n  return\
    \ s;\n}\n", "  var total = 0;\n  for(var i = 1; i <= n; i++){\n    total += i;\n\
    \  }\n  return total;\n}", "  if (n < 1){\n    return 1;\n  } else {\n    return\
    \ n * sum_to_n(n - 1);\n  }\n}", "  if ( n == 1 ) {\n    return 1;\n  }\n  return\
    \ n*(n+1);\n}\n", "    var i, result = 0;\n    for(i=1; i<=n; i++){\n        result\
    \ += i;\n    }\n    return result;\n}\n\n", "  // Create a string for use in the\
    \ while loop\n  let str = '0';\n  while(str.length < n) str += '0';\n  str +=\
    \ '1';\n  \n  // Add the first digit.\n  let sum = 0;\n  for(let i=0;i<str.length;i++){\n\
    \    sum += parseInt(str.charAt(i));\n  }\n  \n  // Add the remaining digits.\
    \ Use a recursive call so the\n  // function can be called with a different n\
    \ value.\n  sum = sum_to_n(n-str.length);\n  \n  return sum;\n}\n", "  return\
    \ n < 1 ? 1 : (n = n > 100 ? 100 : n) + 1;\n}\nvar sum_to_n_1 = sum_to_n;", " \
    \ // If the number is 1 or less\n  if(n === 0 || n === 1){\n    return n;\n  }\n\
    \  // If the number is 0\n  if(n === 0){\n    return 0;\n  }\n  // If n is negative,\
    \ return 0\n  if(n < 0){\n    return 0;\n  }\n  // sum the numbers from 1 to n.\n\
    \  var sum = 0;\n  for(var i = 0; i < n; i++){\n    sum += i;\n  }\n  return sum;\n\
    }\n</textarea>\n                    </div>\n                    <div class=\"\
    modal-footer\">\n                      <a href=\"#\" class=\"btn btn-primary\"\
    \ data-dismiss=\"modal\">Close</a>\n                    </div>\n             \
    \     </div>\n                </div>\n              </div>\n            </div>\n\
    \          </div>\n        </div>\n        <!-- content-wrapper ends -->\n   \
    \     <!-- partial:../../partials/_footer.html -->\n        <footer class=\"footer\"\
    >\n          <div class=\"d-sm-flex justify-content-center justify-content-sm-between\"\
    >\n            <span class=\"text-muted text-center text-sm-left d-block d-sm-inline-block\"\
    >Copyright \xA9 2018 <a href=\"https://www.urbanui.com/\" target=\"_blank\">Urbanui</a>.\
    \ All rights reserved.</span>\n            <span class=\"float-none float-sm-right\
    \ d-block mt-1 mt-sm-0 text-center\">Hand-crafted & made with <i class=\"mdi mdi-heart\
    \ text-danger\"></i></span>\n          </div>\n        </footer>\n        <!--\
    \ partial -->\n      </div>\n      <!-- main-panel ends -->\n    </div>\n    <!--\
    \ page-body-wrapper ends -->\n  </div>\n  <!-- container-scroller -->\n  <!--\
    \ plugins:js -->\n  <script src=\"../../../../vendors/js/vendor.bundle.base.js\"\
    ></script>\n  <script src=\"../../../../vendors/js/vendor.bundle.addons.js\"></script>\n\
    \  <!-- endinject -->\n  <!-- inject:js -->\n  <script src=\"../../../../js/off-canvas.js\"\
    ></script>\n  <script src=\"../../../../js/hoverable-collapse.js\"></script>\n\
    \  <script src=\"../../../../js/template.js\"></script>\n  <script src=\"../../../../js/settings.js\"\
    ></script>\n  <script src=\"../../../../js/todolist.js\"></script>\n  <!-- endinject\
    \ -->\n  <!-- Custom js for this page-->\n  <script src=\"../../../../js/tooltips.js\"\
    ></script>\n  <!-- End custom js for this page-->\n</body>\n\n\n<!-- Mirrored\
    \ from www.urbanui.com/basecampui/template/demo/vertical-dark-sidebar/pages/forms/code_editor.html\
    \ by HTTrack Website Copier/3.x [XR&CO'2014], Mon, 05 Nov 2018 03:12:09 GMT -->\n\
    </html>\ngin js for this page-->\n  <!-- inject:js -->\n  <script src=\"../../../../js/off-canvas.js\"\
    ></script>\n  <script src=\"../../../../js/hoverable-collapse.js\"></script>\n\
    \  <script src=\"../../../../js/template.js\"></script>\n  <script src=\"../../../../js/settings.js\"\
    ></script>\n  <script src=\"../../../../js/todolist.js\"></script>\n  <!-- endinject\
    \ -->\n  <!-- Custom js for this page-->", "  if(n < 2){\n    return 1;\n  }\n\
    \  return n * (n + 1) / 2;\n}\n", "\treturn Array(n).fill(0).reduce((a,b)=>a+b,0)\n\
    }", "    var a = [];\n    var i = 1;\n    while (i <= n) {\n        a.push(i);\n\
    \        i++;\n    }\n    return a[a.length-1];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
