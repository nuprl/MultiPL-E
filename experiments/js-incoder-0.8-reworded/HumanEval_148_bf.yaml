name: HumanEval_148_bf
language: js
prompt: "//There are eight planets in our solar system: the closerst to the Sun \n\
  // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus,\
  \ Neptune.\n// Write a function that takes two planet names as strings planet1 and\
  \ planet2. \n// The function should return an array containing all planets whose\
  \ orbits are \n// located between the orbit of planet1 and the orbit of planet2,\
  \ sorted by \n// the proximity to the sun. \n// The function should return an empty\
  \ array if planet1 or planet2\n// are not correct planet names. \n// Examples\n\
  // >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\"\
  , \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\"\
  , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
  Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
  \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"\
  Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\", \"\
  Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
  Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
  \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
completions: ["  // your code here\n  const a= orbite(planet1,planet2); \n  const\
    \ b = orbite(planet2, planet1); \n  if(a==b){ \n    return [];\n  } \n  else if(b>a){\n\
    \    return [planet2];\n  }\n  else{\n    return [planet1];\n  }\n\n}", "    if\
    \ (planet1 == planet2) return [planet1];\n    if (planet1.includes(planet2)) return\
    \ bf(planet2, planet1);\n    var arr = [];\n    var planet1 = planet1.toLowerCase();\n\
    \    var planet2 = planet2.toLowerCase();\n    var orbit1 = orb(planet1);\n  \
    \  var orbit2 = orb(planet2);\n    var dist1 = dist(orbit1, planet2);\n    var\
    \ dist2 = dist(orbit2, planet2);\n    if (dist1 < dist2) arr.push(orbit1);\n \
    \   else arr.push(orbit2);\n    while (arr.length < 8) return arr;\n    var i1\
    \ = arr.findIndex(x => x.includes(planet1));\n    var i2 = arr.findIndex(x =>\
    \ x.includes(planet2));\n    var arr1 = arr[i1+1];\n    var arr2 = arr[i2];\n\
    \    if (dist1 < dist2) arr.push(arr1);\n    else arr.push(arr2);\n    arr.reverse();\n\
    \    return arr;\n}", "  // Make sure that both parameters are strings\n  if(typeof\
    \ planet1 === \"string\" && typeof planet2 === \"string\"){\n    var orbit1 =\
    \ calcOrbit(planet1);\n    var orbit2 = calcOrbit(planet2);\n    return calcProximity(orbit1,\
    \ orbit2);\n  } else {\n    return [];\n  }\n}\n", "   var result = [];\n   var\
    \ distance = getDistance(planet1, planet2);\n   if (distance < 69) result.push(planet1);\n\
    \   if (distance > 69 && distance < 100) result.push(planet2);\n   return result;\n\
    }", "  var planet1 = planet1.toLowerCase();\n  var planet2 = planet2.toLowerCase();\n\
    \  var planets = [planet1, planet2, planet1 + \" \" + planet2];\n  planets = planets.filter(function(planet)\
    \ {\n    return planet.length > 0;\n  });\n  var sun = planets[1];\n  var earth\
    \ = planets[0];\n  var distance = Math.abs(sun.distanceFrom(earth));\n  var results\
    \ = [];\n  planets.forEach(function(planet) {\n    if (sun.distanceFrom(planet)\
    \ <= distance) {\n      results.push(planet);\n    }\n  });\n  results = results.sort();\n\
    \  if (results.length === 0) {\n    return []\n  }\n  return results;\n}\n\nvar\
    \ planets = bf(\"Earth\", \"Neptune\");\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    While this may answer the question, it is better to explain the code and show\
    \ how it works to help others.\n<|/ c |>\n<| a |>\n<code>", "    var planets =\
    \ []\n    var planet1Orbit = sunOrbit(planet1) \n    var planet2Orbit = sunOrbit(planet2)\
    \ \n    for(var i = 1; i <= 8; i++){\n        var currentPlanet = planet1Orbit[i\
    \ - 1]\n        var currentPlanet2 = planet2Orbit[i - 1]\n        if(currentPlanet\
    \ === planet1 && currentPlanet2 === planet2){\n            continue;\n       \
    \ }\n        if(currentPlanet === planet1){\n            planets.push(currentPlanet2)\n\
    \        }\n        if(currentPlanet === planet2){\n            planets.push(currentPlanet1)\n\
    \        }\n    }\n    return planets;\n}\n", "  if(planet1 == null || planet2\
    \ == null){\n    return [];\n  }\n  let planet1 = planet1.toLowerCase();\n  let\
    \ planet2 = planet2.toLowerCase();\n  let Planets = {};\n  Planets[planet1] =\
    \ {orbits: []};\n  Planets[planet2] = {orbits: []};\n  Planets[planet1].orbits.push(planet2);\n\
    \  Planets[planet2].orbits.push(planet1);\n  for(let i in Planets){\n    for(let\
    \ j in Planets){\n      if(i == j){\n        continue;\n      }\n      let dist\
    \ = Planets[i][\"orbits\"].sort(function(a, b){\n        return a.distance - b.distance;\n\
    \      })[0].distance;\n      if(Planets[j][\"orbits\"].sort(function(a, b){\n\
    \        return a.distance - b.distance;\n      })[0].distance < dist){\n    \
    \    Planets[i][\"orbits\"].push(Planets[j]);\n      }\n    }\n  }\n  return Planets[planet1].orbits.sort(function(a,\
    \ b){\n    return a.distance - b.distance;\n  }).map(function(planet){\n    return\
    \ planet[\"orbits\"];\n  }).flat(Infinity).filter(function(planet){\n    return\
    \ planet.includes(planet2) && planet.includes(planet1);\n  });\n}\n</code>\n<|/\
    \ a tags=javascript,algorithm |>\n<| c |>\nWelcome to Stack Overflow. Would you\
    \ mind adding a brief explanation of your approach? Code only answers tend to\
    \ get deleted very quickly.\n<|/ c |>\n<| c |>\nThe function BF(planet1, planet2)\
    \ takes in two planet names as strings. The function should return an array containing\
    \ all planets whose orbits are located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by the proximity to the sun. \n\nThe function should return\
    \ an empty array if planet1 or planet2\nare not correct planet names. \n\nExamples\n\
    >>> BF(\"Jupiter\", \"Neptune\")\n[\"Saturn\", \"Uranus\"]\n>>> BF(\"Earth\",\
    \ \"Mercury\")\n\"Venus\"\n>>> BF(\"Mercury\", \"Uranus\")\n[\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"]\n<|/ c |>\n<| c |>\nThis approach doesn't\
    \ work. For example, try `BF(\"Mercury\", \"Earth\")` which should return `[\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]`.\n<|/ ", " \
    \ let planet1orbit = orbits[planet1]\n  let planet2orbit = orbits[planet2]\n \
    \ let distance = sun - planet1orbit\n  let result = {}\n  for (let i in orbits)\
    \ {\n    if (distance > 0 && orbits[i].name!=planet1orbit.name) {\n      distance\
    \ = distance - orbits[i].distance\n      result[orbits[i].name] = [orbits[i].name]\n\
    \    }\n    if (distance < 0 && orbits[i].name!=planet2orbit.name) {\n      distance\
    \ = distance + orbits[i].distance\n      result[orbits[i].name] = result[orbits[i].name].concat(orbits[i].name)\n\
    \    }\n  }\n  return Object.values(result).sort((a,b)=>a-b)\n}\n", "  const earthOrbit\
    \ = getOrbit(\"Earth\");\n  const sunOrbit = getOrbit(\"Sun\");\n  const planet1Orbit\
    \ = getOrbit(planet1);\n  const planet2Orbit = getOrbit(planet2);\n  let planetsBetweenOrbits\
    \ = [];\n  const planets1 = getPlanetsBetweenOrbits(earthOrbit, sunOrbit);\n \
    \ const planets2 = getPlanetsBetweenOrbits(sunOrbit, planet1Orbit);\n  const planets3\
    \ = getPlanetsBetweenOrbits(planet1Orbit, planet2Orbit);\n  const planets4 = getPlanetsBetweenOrbits(planet2Orbit,\
    \ earthOrbit);\n  const planets5 = getPlanetsBetweenOrbits(planet1Orbit, planet2Orbit);\n\
    \  if(planets5.includes(planet1)){\n    planets5.push(planet2);\n  }\n  if(planets5.includes(planet2)){\n\
    \    planets5.push(planet1);\n  }\n  const planets6 = planets1.concat(planets2,\
    \ planets3, planets4, planets5);\n  planets6.sort((a, b) => (b - a));\n  return\
    \ planets6;\n}\n", "  var array = []\n  for (var i=0;i<12;i++){\n    var distance\
    \ = Math.abs(star.position[0] - planet1[i][0]) * \n    Math.abs(star.position[0]\
    \ - planet2[i][0])\n    if(distance <= star.planetRadius && distance <= planet1[i][2]){\n\
    \      array.push(planet1[i])\n    }\n    if(distance <= star.planetRadius &&\
    \ distance <= planet2[i][2]){\n      array.push(planet2[i])\n    }\n  }\n  \n\
    \  return array\n}\n\nvar planet1 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Ceres\", \"Phobos\", \"\
    Europa\"]\nvar planet2 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\", \"Ceres\", \"Phobos\", \"Europa\", \"Mesos\"\
    ]", "    let l1 = planet1.toLowerCase();\n    let l2 = planet2.toLowerCase();\n\
    \    let planets = [];\n    if (l1 === \"sun\" || l1 === \"moon\") return planets;\n\
    \    else if (l2 === \"sun\" || l2 === \"moon\") return planets;\n    if (l1 ===\
    \ \"mars\" || l1 === \"jupiter\" || l1 === \"saturn\" || l1 === \"uranus\" ||\
    \ l1 === \"neptune\" || l1 === \"uranus\" || l1 === \"neptune\"){\n        if\
    \ (l2 === \"mars\" || l2 === \"jupiter\" || l2 === \"saturn\" || l2 === \"uranus\"\
    \ || l2 === \"neptune\" || l2 === \"uranus\" || l2 === \"neptune\"){\n       \
    \     planets.push([l1, l2])\n        } else if (l1 === \"jupiter\" || l1 ===\
    \ \"saturn\" || l1 === \"uranus\" || l1 === \"neptune\" || l1 === \"uranus\" ||\
    \ l1 === \"neptune\"){\n            planets.push([l2, l1])\n        } else {\n\
    \            planets.push([l1, l2])\n        }\n    } \n    \n    if (l2 === \"\
    mars\" || l2 === \"jupiter\" || l2 === \"saturn\" || l2 === \"uranus\" || l2 ===\
    \ \"neptune\" || l2 === \"uranus\" || l2 === \"neptune\"){\n        if (l1 ===\
    \ \"mars\" || l1 === \"jupiter\" || l1 === \"saturn\" || l1 === \"uranus\" ||\
    \ l1 === \"neptune\" || l1 === \"uranus\" || l1 === \"neptune\"){\n          \
    \  planets.push([l1, l2])\n        } else if (l2 === \"mars\" || l2 === \"jupiter\"\
    \ || l2 === \"saturn\" || l2 === \"uranus\" || l2 === \"neptune\" || l2 === \"\
    uranus\" || l2 === \"neptune\"){\n            planets.push([l2, l1])\n       \
    \ } else {\n            planets.push([l1, l2])\n        }\n    } \n    \n    if\
    \ (l1 === \"mercury\" || l1 === \"venus\" || l1 === \"earth\" || l1 === \"mars\"\
    \ || l1 === \"jupiter\" || l1 === \"saturn\" || l1 === \"uranus\" || l1 === \"\
    neptune\" || l1 === \"uranus\" || l1 === \"neptune\"){\n        if (l2 === \"\
    mer", "  if (planet1.length === 0 || planet2.length === 0){\n    return \"\";\n\
    \  }\n  let planet1Obj = planet1ObjArr.find(x => x.name === planet1);\n  let planet2Obj\
    \ = planet2ObjArr.find(x => x.name === planet2);\n\n  let planet1Orbits = planet1Obj.orbits.map(x\
    \ => x.name);\n  let planet2Orbits = planet2Obj.orbits.map(x => x.name);\n\n \
    \ let planet1Sun = planet1Obj.orbits.find(x => x.name === \"Sun\");\n  let planet2Sun\
    \ = planet2Obj.orbits.find(x => x.name === \"Sun\");\n\n  let planet1Planet =\
    \ planet1Obj.orbits.find(x => x.name === planet2);\n  let planet2Planet = planet2Obj.orbits.find(x\
    \ => x.name === planet1);\n\n  let planet1SunProximity = (planet1Obj.orbits.find(x\
    \ => x.name === \"Sun\")).position;\n  let planet2SunProximity = (planet2Obj.orbits.find(x\
    \ => x.name === \"Sun\")).position;\n\n  let planet1PlanetProximity = (planet1Obj.orbits.find(x\
    \ => x.name === planet2)).position;\n  let planet2PlanetProximity = (planet2Obj.orbits.find(x\
    \ => x.name === planet1)).position;\n\n  let planet1OrbitsProximity = planet1Orbits.filter(x\
    \ => planet1Orbits.find(y => y === x));\n  let planet2OrbitsProximity = planet2Orbits.filter(x\
    \ => planet2Orbits.find(y => y === x));\n\n  let planet1OrbitsProximity = planet1Orbits.filter(x\
    \ => planet1Orbits.find(y => y === x));\n  let planet2OrbitsProximity = planet2Orbits.filter(x\
    \ => planet2Orbits.find(y => y === x));\n\n  let planet1Proximity = planet1Obj.orbits.find(x\
    \ => x.name === planet1).position;\n  let planet2Proximity = planet2Obj.orbits.find(x\
    \ => x.name === planet2).position;\n\n  let planet1Proximity = planet1Obj.orbits.find(x\
    \ => x.name === planet1).position;\n  let planet2Proximity = planet2", "\tlet\
    \ earthOrbit = orbit_from_name(\"Earth\");\n\tlet mercuryOrbit = orbit_from_name(\"\
    Mercury\");\n\tlet venusOrbit = orbit_from_name(\"Venus\");\n\tlet marsOrbit =\
    \ orbit_from_name(\"Mars\");\n\tlet jupiterOrbit = orbit_from_name(\"Jupiter\"\
    );\n\tlet saturnOrbit = orbit_from_name(\"Saturn\");\n\tlet uranusOrbit = orbit_from_name(\"\
    Uranus\");\n\tlet neptuneOrbit = orbit_from_name(\"Neptune\");\n\n\tif (planet1\
    \ === null || planet2 === null){\n\t\treturn [];\n\t} else if (planet1 === planet2){\n\
    \t\treturn [planet1];\n\t} else if (planet1 > planet2){\n\t\tlet temp1 = earthOrbit;\n\
    \t\tlet temp2 = mercuryOrbit;\n\t\twhile (temp1.distance < temp2.distance){\n\t\
    \t\tif (temp1.distance >= temp2.distance){\n\t\t\t\ttemp1.distance += temp1.step;\n\
    \t\t\t}\n\t\t\ttemp1.orbits.unshift(temp1.orbits.pop());\n\t\t}\n\t\tlet result\
    \ = [];\n\t\tlet newEarthOrbit = orbit_from_name(\"Earth\");\n\t\tlet newMercuryOrbit\
    \ = orbit_from_name(\"Mercury\");\n\t\twhile (newEarthOrbit.distance < temp1.distance){\n\
    \t\t\tif (newEarthOrbit.distance >= temp1.distance){\n\t\t\t\tnewEarthOrbit.distance\
    \ += newEarthOrbit.step;\n\t\t\t}\n\t\t\tnewEarthOrbit.orbits.unshift(newEarthOrbit.orbits.pop());\n\
    \t\t\tif (newEarthOrbit.distance < newMercuryOrbit.distance){\n\t\t\t\tnewMercuryOrbit.distance\
    \ += newMercuryOrbit.step;\n\t\t\t}\n\t\t\tnewMercuryOrbit.orbits.unshift(newMercuryOrbit.orbits.pop());\n\
    \t\t}\n\t\tresult.push(newEarthOrbit.orbits[0]);\n\t\tresult.push(newMercuryOrbit.orbits[0]);\n\
    \t\tresult.push(temp1);\n\t\tresult.push(temp2);\n\t\treturn result;\n\t} else\
    \ {\n\t\tlet temp1 = mercuryOrbit;\n\t\tlet temp2 = earthOrbit;\n\t\twhile (temp1.distance\
    \ < temp2.distance){\n\t\t\tif (temp1.distance >= temp2.distance){\n\t\t\t\ttemp1.distance\
    \ += temp1.step;\n\t\t\t}\n\t\t\ttemp1.orbit", "    if(planet1 == 'Mercury' ||\
    \ planet1 == 'Venus' || planet1 == 'Earth' || planet1 == 'Mars' || planet1 ==\
    \ 'Jupiter' || planet1 == 'Saturn' || planet1 == 'Uranus' || planet1 == 'Neptune'\
    \ || planet1 == 'Phobos'){\n        return [planet2];\n    }\n    if(planet2 ==\
    \ 'Mercury' || planet2 == 'Venus' || planet2 == 'Earth' || planet2 == 'Mars' ||\
    \ planet2 == 'Jupiter' || planet2 == 'Saturn' || planet2 == 'Uranus' || planet2\
    \ == 'Neptune' || planet2 == 'Phobos'){\n        return [planet1];\n    }\n  \
    \  let orbit1 = getOrbit(planet1);\n    let orbit2 = getOrbit(planet2);\n    if(orbit1\
    \ != null && orbit2 != null){\n        let closest = orbit1.distanceTo(orbit2);\n\
    \        closest = closest.dividedBy(2);\n        let a1 = orbit1.dividedBy(orbit2);\n\
    \        let a2 = orbit2.dividedBy(orbit1);\n        let a3 = a1.subtract(a2);\n\
    \        closest = closest.times(a3);\n        closest = closest.dividedBy(a3.multiply(a3.abs().pow(2)));\n\
    \        return orbit1.names.sort().filter(name => closest.compare(getOrbit(name))\
    \ < 0);\n    }\n    else{\n        return [];\n    }\n}", "    let planetArr =\
    \ [];\n    let planetDistance = {};\n    let planetName1 = planet1.toUpperCase();\n\
    \    let planetName2 = planet2.toUpperCase();\n\n    if (planetName1 == \"SUN\"\
    \ || planetName2 == \"SUN\") {\n        return planetArr;\n    }\n\n    if (planetName1\
    \ != planetName2) {\n        return planetArr;\n    }\n\n    let planetArr1 =\
    \ bf(planetName2, planetName1);\n\n    for (let i = 0; i < planetArr1.length;\
    \ i++) {\n        planetDistance[planetArr[0]] = Math.sqrt(Math.pow(planetArr1[i].x\
    \ - planetArr[1].x, 2) + Math.pow(planetArr1[i].y - planetArr[1].y, 2));\n\n \
    \       if (planetDistance[planetArr[0]] <= planetArr1[i].distance) {\n      \
    \      planetArr.push(planetArr1[i]);\n        }\n    }\n\n    return planetArr;\n\
    }\n</code>\n<|/ q tags=javascript,arrays dscore=0 |>\n<| c |>\nWhat have you tried\
    \ so far?\n<|/ c |>\n<| c |>\nYou might want to take a look at [CodeReview](https://codereview.stackexchange.com/help/on-topic).\
    \ Maybe it's more appropriate for there - but SO is about *specific* coding questions\
    \ and it's somewhat off-topic here.\n<|/ c |>\n<| a tags=javascript,arrays |>\n\
    You could use filter and findIndex to get the planets within a certain distance:\n\
    <code>\nconst planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\nconst sun = {x: 0, y: 0};\nconst sunDistance = sqrt(Math.pow(sun.x\
    \ - planets.find(p => p.name === \"SUN\").x, 2) + Math.pow(sun.y - planets.find(p\
    \ => p.name === \"SUN\").y, 2));\nconst filtered = planets.filter((planet) =>\
    \ (\n  planet.distanceFromSun(sun) <= sunDistance\n));\n</code>\n<code>", "  \
    \  if (planet1 == \"Mercury\" && planet2 == \"Earth\" || planet1 == \"Earth\"\
    \ && planet2 == \"Venus\") return [\"Saturn\", \"Uranus\"];\n    else if (planet1\
    \ == \"Mercury\" && planet2 == \"Neptune\" || planet1 == \"Neptune\" && planet2\
    \ == \"Uranus\") return [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ];\n    else if (planet1 == \"Venus\" && planet2 == \"Mercury\" || planet1 ==\
    \ \"Earth\" && planet2 == \"Mars\" || planet1 == \"Mars\" && planet2 == \"Earth\"\
    \ || planet1 == \"Jupiter\" && planet2 == \"Mars\" || planet1 == \"Mars\" && planet2\
    \ == \"Jupiter\" || planet1 == \"Saturn\" && planet2 == \"Mars\" || planet1 ==\
    \ \"Mars\" && planet2 == \"Saturn\" || planet1 == \"Saturn\" && planet2 == \"\
    Jupiter\" || planet1 == \"Uranus\" && planet2 == \"Mars\" || planet1 == \"Mars\"\
    \ && planet2 == \"Uranus\" || planet1 == \"Uranus\" && planet2 == \"Saturn\" ||\
    \ planet1 == \"Saturn\" && planet2 == \"Uranus\" || planet1 == \"Neptune\" &&\
    \ planet2 == \"Mars\" || planet1 == \"Mars\" && planet2 == \"Neptune\" || planet1\
    \ == \"Neptune\" && planet2 == \"Venus\" || planet1 == \"Venus\" && planet2 ==\
    \ \"Earth\" || planet1 == \"Earth\" && planet2 == \"Neptune\" || planet1 == \"\
    Earth\" && planet2 == \"Venus\") return [\"Earth\", \"Mercury\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\"];\n    else if (planet1 == \"Uranus\" && planet2\
    \ == \"Mercury\" || planet1 == \"Earth\" && planet2 == \"Mars\" || planet1 ==\
    \ \"Mars\" && planet2 == \"Earth\" || planet1 == \"Jupiter\" && planet2 == \"\
    Mars\" || planet1 == \"Mars\" && planet2 == \"Jupiter\" || planet1 == \"Saturn\"\
    \ && planet2 == \"Mars\" || planet1 == \"Mars\" && planet2 == \"Saturn\" || planet1\
    \ == \"Saturn\" && planet2 == \"Jupiter\" || planet1 == \"Uranus\" && planet2\
    \ == \"Mars\" || planet1 == \"Mars\" ", "\tlet planet1Orbit = planet1 + \" orbit\"\
    \n\tlet planet2Orbit = planet2 + \" orbit\"\n\n\tlet orbit1 = []\n\tlet orbit2\
    \ = []\n\n\tfor(let i = 0; i < planets1.length; i++){\n\t\tif(planets1.indexOf(i)\
    \ == planets2.indexOf(planet1)){\n\t\t\torbit1.push(i)\n\t\t}\n\t\tif(planets1.indexOf(i)\
    \ == planets2.indexOf(planet2)){\n\t\t\torbit2.push(i)\n\t\t}\n\t}\n\n\tlet output\
    \ = []\n\n\tfor(let i = 0; i < orbit1.length; i++){\n\t\tfor(let j = 0; j < orbit2.length;\
    \ j++){\n\t\t\tif(Math.abs(orbit1[i] - orbit2[j]) < 10){\n\t\t\t\toutput.push(orbit1[i])\n\
    \t\t\t\toutput.push(orbit2[j])\n\t\t\t}\n\t\t}\n\t}\n\n\treturn output\n}\n</cell>\n\
    <cell>\nbf(\"Earth\", \"Mars\")\n</cell>\n<cell>", "  let a1 = planet1.toLowerCase(),\
    \ a2 = planet2.toLowerCase()\n  let planets  = [\n    'Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', \n    'Uranus', 'Neptune'\n  ]\n  let a = planets.indexOf(a1)\n\
    \  let b = planets.indexOf(a2)\n  if(a>-1 && b>-1){\n    return planets[a].concat(planets[b].sort((a,b)\
    \ => {\n      let distance = (a.distance(b)) \n      return distance - distance*distance*Math.SQRT2\n\
    \    })).filter((planet, index)=>index!=a.indexOf(planet))\n  }\n  else{ return\
    \ [] }\n}\n</cell>\n<text>\nChallenge 4\n\n</text>\n<text>\nThe planet Asteroid\
    \ is at latitude 51.896 and longitude 10.000, the nearest planet to the Sun. \n\
    The planet Beetle is at latitude 51.665 and longitude 9.994. The planet King Kong\
    \ is at latitude 51.875 and longitude 8.655. \nWrite a function that takes an\
    \ integer as input that represents the distance in kilometers between two points\
    \ in the plane. \nThe function should return an empty string if the distance is\
    \ negative or greater than the distance between the two points. \nThe function\
    \ should return a string with one planet name if the distance is equal to or less\
    \ than the distance between the two points. \nThe function should return a string\
    \ with two planet names if the distance is between 5 and 10 kilometers. \nThe\
    \ function should return two planet names if distance is between 10 and 50 kilometers.\
    \ \nThe function should return one planet name if distance is between 50 and 200\
    \ kilometers. \nThe function should return \"Not a planet\" if distance is between\
    \ 200 and 1000 kilometers. \nExamples\n>>> bfDistance(51.896, 10.000, \"Asteroid\"\
    )\n'Asteroid is 51.896 kilometers away from Sun'\n>>> bfDistance(51.665, 9.994,\
    \ \"Beetle\")\n'Beetle is 51.665 kilometers away from Sun'\n>>> bfDistance(51.875,\
    \ 8.655, \"King Kong\")\n'King Kong is 51.875 kilometers away from Sun'\n>>> bfDistance(51.875,\
    \ 8.655, \"Beetle\")\n'Beetle is 51.875 kilometers ", "\tif(planet1 == planet2)\
    \ return [];\n\t\n\tvar planet1orbit = orbit(planet1);\n\tvar planet2orbit = orbit(planet2);\n\
    \n\tvar planet1orbitorbit = new Array();\n\tvar planet2orbitorbit = new Array();\n\
    \n\tfor(var i = planet1orbit.length-1; i>=0; i--){\n\t\tplanet1orbitorbit.push(planet1orbit[i]);\n\
    \t}\n\tfor(var i = planet2orbit.length-1; i>=0; i--){\n\t\tplanet2orbitorbit.push(planet2orbit[i]);\n\
    \t}\n\n\tvar sortedOrbit1 = Array.sort(planet1orbitorbit, function(a, b){return\
    \ a-b});\n\tvar sortedOrbit2 = Array.sort(planet2orbitorbit, function(a, b){return\
    \ a-b});\n\n\tvar sortedOrbit1orb = new Array();\n\tvar sortedOrbit2orb = new\
    \ Array();\n\t\n\tfor(var i=sortedOrbit1.length-1; i>=0; i--){\n\t\tsortedOrbit1orb.push(sortedOrbit1[i]);\n\
    \t}\n\tfor(var i=sortedOrbit2.length-1; i>=0; i--){\n\t\tsortedOrbit2orb.push(sortedOrbit2[i]);\n\
    \t}\n\n\tsortedOrbit1.sort();\n\tsortedOrbit2.sort();\n\n\tvar planetsBetween\
    \ = new Array();\n\tvar planetsBetweenOrbit = new Array();\n\n\tfor(var i=0; i<\
    \ sortedOrbit1.length; i++){\n\t\tfor(var j=0; j<sortedOrbit2.length; j++){\n\t\
    \t\tif(planet1orbitorbit[i] == sortedOrbit2[j]){\n\t\t\t\tplanetsBetween.push(sortedOrbit1[i]);\n\
    \t\t\t\tplanetsBetween.push(sortedOrbit2[j]);\n\t\t\t\tplanetsBetweenOrbit.push([sortedOrbit1[i],\
    \ sortedOrbit2[j]]);\n\t\t\t}\n\t\t}\n\t}\n\tplanetsBetweenOrbit.sort();\n\t\n\
    \treturn planetsBetween;\n}\n", "    let planets1 = orbits(planet1)\n    let planets2\
    \ = orbits(planet2)\n    let res = []\n    for (let i = 0; i < planets1.length;\
    \ i++){\n        for (let j = 0; j < planets2.length; j++){\n            if (planets1[i]\
    \ == planets2[j]){\n                res.push([planets1[i]])\n            }\n \
    \       }\n    }\n    res.sort()\n    return res\n}\n", "  let solarSystem = [\n\
    \    \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\n    \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"\n  ]\n\n  let orbit = { Mercury: [0, 0, 0], Venus: [0,\
    \ 0, 0], Earth: [0, 0, 0], Mars: [0, 0,0], \n    Jupiter: [0, 0, 0], Saturn: [0,\
    \ 0, 0], Uranus: [0, 0, 0], Neptune: [0, 0,0], }\n  for (let i = 0; i < solarSystem.length;\
    \ i++){\n    let planet = solarSystem[i]\n    orbit[planet][0] = Math.sqrt(Math.pow(planet1[0]\
    \ - orbit[planet][0], 2) + \n                               Math.pow(planet1[1]\
    \ - orbit[planet][1], 2) + \n                               Math.pow(planet1[2]\
    \ - orbit[planet][2], 2))\n    orbit[planet][1] = Math.sqrt(Math.pow(planet2[0]\
    \ - orbit[planet][0], 2) + \n                               Math.pow(planet2[1]\
    \ - orbit[planet][1], 2) + \n                               Math.pow(planet2[2]\
    \ - orbit[planet][2], 2))\n  }\n\n  // Planet to compare\n  let planetToCompare\
    \ = planet1\n  let distance = orbit[planetToCompare][0]\n  if (planetToCompare\
    \ === planet2){\n    return []\n  }\n  else{\n    for (let i = 0; i < solarSystem.length;\
    \ i++){\n      let planet = solarSystem[i]\n      distance += orbit[planet][0]\n\
    \      if (distance < distanceOfOrbit(planetToCompare, planet)){\n        planetToCompare\
    \ = planet\n        distance = orbit[planet][0]\n      }\n    }\n    if (planetToCompare\
    \ !== planet2){\n      return []\n    }\n    else if(distanceOfOrbit(planetToCompare,\
    \ planet2) < distanceOfOrbit(planet1, planet2)){\n      return bf([planet2, planet1],\
    \ planetToCompare)\n    }\n    else{\n      return bf([planet1, planet2], planetToCompare)\n\
    \    }\n  }\n}\n", "    \n    var planet1Orbit = orbit(planet1);\n    var planet2Orbit\
    \ = orbit(planet2);\n    var planetsBetween = [];\n\n    for (i = 0; i < 8; i++){\n\
    \        if (planet1Orbit.includes(planet2Orbit[i]) || planet2Orbit.includes(planet1Orbit[i])){\n\
    \            planetsBetween.push(planet1Orbit[i]);\n        }\n    }\n    planetsBetween\
    \ = planetsBetween.reverse();\n\n    return planetsBetween;\n}\n", "\tlet one\
    \ = orbit(planet1)\n\tlet two = orbit(planet2)\n\n\tif(one.length==0 || two.length==0){\n\
    \t\treturn []\n\t}\n\tlet result = []\n\tfor(let i=0;i<one.length;i++){\n\t\t\
    for(let j=0;j<two.length;j++){\n\t\t\tif(i==j){\n\t\t\t\tcontinue\n\t\t\t}\n\t\
    \t\tlet dist = one[i][0]-two[j][0]\n\t\t\tif(dist<0){\n\t\t\t\tdist = dist*-1\n\
    \t\t\t}\n\t\t\tresult.push([dist,one[i][1],two[j][1]])\n\t\t}\n\t}\n\tlet sorted\
    \ = result.sort((a,b)=>a[0]-b[0])\n\tlet result2 = []\n\tfor(let i=0;i<sorted.length;i++){\n\
    \t\tif(sorted[i][1]==one[0]){\n\t\t\tresult2.push([sorted[i][0],one[1],two[1]])\n\
    \t\t}else{\n\t\t\tresult2.push([sorted[i][0],one[1],two[1]])\n\t\t}\n\t}\n\treturn\
    \ result2\n}", "\tlet orbits1 = []\n\tlet orbits2 = []\n\tif(planet1 === \"Sun\"\
    ){\n\t\torbits1 = [planet2]\n\t\torbits2 = [planet1]\n\t}else if(planet1 === \"\
    Mercury\"){\n\t\torbits1 = [planet1, planet2]\n\t\torbits2 = [\"Sun\", \"Venus\"\
    ]\n\t}else if(planet1 === \"Venus\"){\n\t\torbits1 = [\"Mercury\", planet2]\n\t\
    \torbits2 = [\"Sun\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]\n\t}else if(planet1 === \"Earth\"){\n\t\torbits1 = [\"Mercury\", \"Venus\",\
    \ planet2]\n\t\torbits2 = [\"Sun\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"]\n\t}else if(planet1 === \"Mars\"){\n\t\torbits1 = [\"Earth\", \"\
    Venus\", planet2]\n\t\torbits2 = [\"Sun\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"]\n\t}else if(planet1 === \"Jupiter\"){\n\t\torbits1 = [\"Earth\"\
    , \"Mars\", \"Venus\", planet2]\n\t\torbits2 = [\"Sun\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"]\n\t}else if(planet1 === \"Saturn\"){\n\t\torbits1 = [\"Earth\"\
    , \"Mars\", \"Jupiter\", planet2]\n\t\torbits2 = [\"Sun\", \"Uranus\", \"Neptune\"\
    ]\n\t}else if(planet1 === \"Uranus\"){\n\t\torbits1 = [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", planet2]\n\t\torbits2 = [\"Sun\", \"Neptune\"]\n\t}else\
    \ if(planet1 === \"Neptune\"){\n\t\torbits1 = [\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", planet2]\n\t\torbits2 = []\n\t}else{\n\t\torbits1 =\
    \ [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", planet2]\n\
    \t\torbits2 = [\"Sun\", \"Neptune\"]\n\t}\n\tif(planet2 === \"Sun\"){\n\t\treturn\
    \ orbits2\n\t}else if(planet2 === \"Mercury\"){\n\t\treturn orbits1\n\t}else if(planet2\
    \ === \"Venus\"){\n\t\treturn orbits1\n\t}else if(planet2 === \"Earth\"){\n\t\t\
    return orbits1\n\t}else if(planet2 === \"Mars\"){\n\t\treturn orbits1\n\t}else\
    \ if(planet2 === \"Jupiter\"){\n\t\treturn orbits2", "  var planet1_orbits = planet1.split(\"\
    _\")\n  var planet2_orbits = planet2.split(\"_\")\n  var planet_names = []\n \
    \ var sun_distance = 1500 // We will assume that one year is one hour\n  var sun_planet\
    \ = \"Earth\"\n\n  planet1_orbits.forEach(function(planet_orbit){\n    planet2_orbits.forEach(function(planet_orbit_2){\n\
    \      if(planet_orbit_2 === planet_orbit || planet_orbit_2 === sun_planet){\n\
    \        return\n      }\n      var distance = getDistance(planet_orbit, planet_orbit_2)\n\
    \      var angle = calcAngle(planet_orbit, planet_orbit_2)\n      planet_names.push(planet_orbit\
    \ + planet_orbit_2)\n      if(distance < sun_distance){\n        sun_distance\
    \ = distance\n        sun_planet = planet_orbit_2\n      }\n    })\n  })\n\n \
    \ planet_names.sort(function(a, b){\n    return a.localeCompare(b)\n  })\n\n \
    \ return planet_names\n}\n", "\tplanet1 = planet1.toLowerCase();\n\tplanet2 =\
    \ planet2.toLowerCase();\n\tvar planetsOrbits = Orbits.filter(function(orbit){\n\
    \t\treturn ((orbit[0].toLowerCase() == planet1 && orbit[1].toLowerCase() == planet2)\
    \ ||\n\t\t\t\t(orbit[0].toLowerCase() == planet2 && orbit[1].toLowerCase() ==\
    \ planet1));\n\t});\n\tplanetsOrbits.sort(function(a, b){\n\t\treturn a[1].localeCompare(b[1]);\n\
    \t});\n\treturn planetsOrbits;\n}", "  var dist;\n  if (planet1 == \"Mars\" ||\
    \ planet1 == \"Mercury\" || planet1 == \"Venus\" || planet1 == \"Earth\" || planet1\
    \ == \"Uranus\" || planet1 == \"Neptune\") {\n    return bf(\"Mercury\", planet2)\n\
    \  } if (planet2 == \"Mars\" || planet2 == \"Mercury\" || planet2 == \"Venus\"\
    \ || planet2 == \"Earth\" || planet2 == \"Uranus\" || planet2 == \"Neptune\")\
    \ {\n    return bf(\"Earth\", planet1)\n  }\n  var planetsBetween = [];\n  planetsBetween.push(planet1);\n\
    \  planetsBetween.push(planet2);\n  for(let i = 0; i < 8; i++){\n    planet1 =\
    \ planetsBetween[i];\n    planet2 = planetsBetween[i+1];\n    dist = Math.sqrt(Math.pow(planet1.x\
    \ - planet2.x, 2) + Math.pow(planet1.y - planet2.y, 2) + Math.pow(planet1.z -\
    \ planet2.z, 2));\n    if (dist <= 25){\n      planetsBetween.splice(i+1, 0, planet2);\n\
    \    }\n  }\n  planetsBetween = planetsBetween.reverse();\n  return planetsBetween;\n\
    }", "\tlet distance1 = Math.sqrt(Math.pow(planet1.distanceToSun(), 2) +\n\t\t\
    Math.pow(planet1.distanceToPlanet(planet2), 2));\n\t\t\n\t\tlet distance2 = Math.sqrt(Math.pow(planet2.distanceToSun(),\
    \ 2) +\n\t\tMath.pow(planet2.distanceToPlanet(planet1), 2));\n\t\t\n\t\tlet planetArray1\
    \ = [];\n\t\tlet planetArray2 = [];\n\t\t\n\t\tfor(let i = 0; i < 8; i++){\n\t\
    \t\tlet distanceArray1 = planet1.distanceToPlanet(planetArray1[i]) -\n\t\t\t\t\
    distanceArray2[i];\n\t\t\t\n\t\t\tlet distanceArray2 = planet2.distanceToPlanet(planetArray2[i])\
    \ -\n\t\t\t\tdistanceArray1[i];\n\t\t\t\n\t\t\tif (distanceArray1 < distanceArray2){\n\
    \t\t\t\tplanetArray1.push(planetArray1[i]);\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\t\
    planetArray2.push(planetArray2[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tlet sortedArray1\
    \ = [];\n\t\tlet sortedArray2 = [];\n\t\t\n\t\tfor(let i = 0; i < planetArray1.length;\
    \ i++){\n\t\t\tlet sortedArray1[i] = planetArray1[i].distanceToSun();\n\t\t\t\n\
    \t\t\tlet sortedArray2[i] = planetArray2[i].distanceToSun();\n\t\t}\n\t\t\n\t\t\
    let sortedArray1 = sortArray(sortedArray1);\n\t\tlet sortedArray2 = sortArray(sortedArray2);\n\
    \t\t\n\t\tplanetArray1.forEach(function(planet1, index1){\n\t\t\tlet planet2 =\
    \ planetArray2[index1];\n\t\t\t\n\t\t\tlet distanceArray1 = planet1.distanceToSun()\
    \ - sortedArray1[index1];\n\t\t\tlet distanceArray2 = planet2.distanceToSun()\
    \ - sortedArray2[index1];\n\t\t\t\n\t\t\tif (distanceArray1 < distanceArray2){\n\
    \t\t\t\tsortedArray1.push(planetArray1[index1].distanceToSun());\n\t\t\t\tsortedArray2.push(planetArray2[index1].distanceToSun());\n\
    \t\t\t}\n\t\t})\n\t\t\n\t\tsortedArray1 = sortArray(sortedArray1);\n\t\tsortedArray2\
    \ = sortArray(sortedArray2);\n\t\t\n\t\tlet sortedArray = sortedArray1.concat(sortedArray2);\n\
    \t\t\n\t\treturn sortedArray.filter(function(planet){\n\t\t\treturn distance <\
    \ planet;\n\t\t});\n}", "   let planetArr = [], planetArr2 = [];\n   if(planet1\
    \ != null && planet2 != null){\n      planetArr = orbits(planet1, planet2);\n\
    \      planetArr2 = orbits(planet2, planet1);\n   }\n   if(planetArr == null ||\
    \ planetArr[1].length < planetArr.length){\n      return [];\n   } else if (planetArr[1].length\
    \ < planetArr.length){\n      return planetArr[1];\n   } else if (planetArr2.length\
    \ < planetArr.length){\n      return planetArr2;\n   } else {\n      return planetArr;\n\
    \   }\n}", "    let planets = bf2(planet1, planet2);\n    for(let i = 0; i < planets.length;\
    \ i++){\n        planets[i] = {\n            name: planets[i],\n            distance:\
    \ distance(planet1, planets[i])\n        };\n    }\n    return planets.sort((a,b)\
    \ => a.distance - b.distance).map(a => a.name);\n}\n", "    let planets= [planet1,\
    \ planet2]\n    let sun= getPlanetByName(\"Sun\")\n    let planet1Orbit= getPlanetByName(planet1)\n\
    \    let planet2Orbit= getPlanetByName(planet2)\n\n    if(planet1Orbit.distance\
    \ < planet2Orbit.distance)\n        planets.splice(planets.indexOf(planet1), 1)\n\
    \    else if(planet1Orbit.distance > planet2Orbit.distance)\n        planets.splice(planets.indexOf(planet2),\
    \ 1)\n\n    return planets.sort(function(a, b){\n        if(planet1Orbit.distance\
    \ < planet2Orbit.distance)\n            return a.distance - b.distance\n     \
    \   else if(planet1Orbit.distance > planet2Orbit.distance)\n            return\
    \ b.distance - a.distance\n        else\n            return a.distance - b.distance\n\
    \    })\n}\n<|/ file ext=.js source=gitlab |>", "  const planet1 = planet1.toLowerCase().trim()\n\
    \  const planet2 = planet2.toLowerCase().trim()\n  if([planet1, planet2].indexOf(\"\
    undefined\") != -1){\n    return []\n  }\n  const planet1planet2 = [planet1, planet2]\n\
    \  const planet1 = planet1.trim()\n  const planet2 = planet2.trim()\n\n  const\
    \ sunLocation = solarPosition(\"Sun\")\n  const mercuryLocation = solarPosition(\"\
    Mercury\")\n  const venusLocation = solarPosition(\"Venus\")\n  const earthLocation\
    \ = solarPosition(\"Earth\")\n  const marsLocation = solarPosition(\"Mars\")\n\
    \  const jupiterLocation = solarPosition(\"Jupiter\")\n  const saturnLocation\
    \ = solarPosition(\"Saturn\")\n  const uranusLocation = solarPosition(\"Uranus\"\
    )\n  const neptuneLocation = solarPosition(\"Neptune\")\n\n  const orbits1 = orbits(planet1,\
    \ mercuryLocation)\n  const orbits2 = orbits(planet2, mercuryLocation)\n  const\
    \ orbits3 = orbits(planet1, venusLocation)\n  const orbits4 = orbits(planet2,\
    \ venusLocation)\n  const orbits5 = orbits(planet1, earthLocation)\n  const orbits6\
    \ = orbits(planet2, earthLocation)\n  const orbits7 = orbits(planet1, marsLocation)\n\
    \  const orbits8 = orbits(planet2, marsLocation)\n  const orbits9 = orbits(planet1,\
    \ jupiterLocation)\n  const orbits10 = orbits(planet2, jupiterLocation)\n  const\
    \ orbits11 = orbits(planet1, saturnLocation)\n  const orbits12 = orbits(planet2,\
    \ saturnLocation)\n  const orbits13 = orbits(planet1, uranusLocation)\n  const\
    \ orbits14 = orbits(planet2, uranusLocation)\n  const orbits15 = orbits(planet1,\
    \ neptuneLocation)\n  const orbits16 = orbits(planet2, neptuneLocation)\n\n  const\
    \ orbits1 = [...orbits1, ...orbits2]\n  const orbits2 = [...orbits2, ...orbits3]\n\
    \  const orbits3 = [...orbits3, ...orbits4]\n  const orbits4 = [...orbits4, ...orbits5]\n\
    \  const orbits5 = [...orbits5, ...orbits6]\n  const orbits6 = [...orbits6, ...orbits7]\n\
    \  const orbits7 = [...orbits7, ...orbits8]\n  const orbit", "    if(planet1 ==\
    \ \"Jupiter\" && planet2 == \"Neptune\"){\n        var orbit1 = orbit(\"Mercury\"\
    );\n        var orbit2 = orbit(\"Uranus\");\n        var orbit3 = orbit(\"Earth\"\
    );\n        var orbit4 = orbit(\"Mars\");\n        var orbit5 = orbit(\"Jupiter\"\
    );\n        var orbit6 = orbit(\"Saturn\");\n        var orbit7 = orbit(\"Venus\"\
    );\n        var orbit8 = orbit(\"Earth\");\n        return [orbit1, orbit2, orbit3,\
    \ orbit4, orbit5, orbit6, orbit7, orbit8];\n    }\n    if (planet1 == \"Earth\"\
    \ && planet2 == \"Mercury\") {\n        var orbit1 = orbit(\"Venus\");\n     \
    \   var orbit2 = orbit(\"Mars\");\n        var orbit3 = orbit(\"Jupiter\");\n\
    \        var orbit4 = orbit(\"Saturn\");\n        var orbit5 = orbit(\"Uranus\"\
    );\n        var orbit6 = orbit(\"Neptune\");\n        var orbit7 = orbit(\"Mercury\"\
    );\n        var orbit8 = orbit(\"Earth\");\n        return [orbit1, orbit2, orbit3,\
    \ orbit4, orbit5, orbit6, orbit7, orbit8];\n    }\n    if (planet1 == \"Mercury\"\
    \ && planet2 == \"Uranus\") {\n        var orbit1 = orbit(\"Earth\");\n      \
    \  var orbit2 = orbit(\"Mars\");\n        var orbit3 = orbit(\"Jupiter\");\n \
    \       var orbit4 = orbit(\"Saturn\");\n        var orbit5 = orbit(\"Uranus\"\
    );\n        var orbit6 = orbit(\"Neptune\");\n        var orbit7 = orbit(\"Mercury\"\
    );\n        var orbit8 = orbit(\"Earth\");\n        return [orbit1, orbit2, orbit3,\
    \ orbit4, orbit5, orbit6, orbit7, orbit8];\n    }\n    if (planet1 == \"Uranus\"\
    \ && planet2 == \"Neptune\") {\n        var orbit1 = orbit(\"Mercury\");\n   \
    \     var orbit2 = orbit(\"Earth\");\n        var orbit3 = orbit(\"Mars\");\n\
    \        var orbit4 = orbit(\"Jupiter\");\n        var orbit5 = orbit(\"Saturn\"\
    );\n        var orbit6 = orbit(\"Uranus\");\n        var orbit7 = orbit(\"Neptune\"\
    );\n        var orbit8 = orbit(\"Mercury\");\n        return [orbit1, orbit2,\
    \ orbit3, orbit4, orbit5, orbit6, orbit7, orbit8];\n    }\n    if (planet1 ==\
    \ \"Neptune\" && planet2 == \"Mercury\") {\n        var orbit1 = orbit(\"Mercury\"\
    );\n        var orbit2 = orbit(\"Earth\");\n        var orbit3 = orbit(\"Mars\"\
    );\n        var orbit4 = orbit(\"Jupiter\");\n        var orbit5 = ", "  const\
    \ planet1Orbits = orbits(planet1);\n  const planet2Orbits = orbits(planet2);\n\
    \  let allPlanets = [];\n  for(let orbits of planet1Orbits){\n    if(planet2Orbits.includes(orbits)){\n\
    \      allPlanets.push(orbits);\n    }\n  }\n  for(let orbits of planet2Orbits){\n\
    \    if(planet1Orbits.includes(orbits)){\n      allPlanets.push(orbits);\n   \
    \ }\n  }\n  allPlanets = allPlanets.sort((a,b)=> \n    distanceToSun(a) < distanceToSun(b)\
    \ ? -1 : \n    distanceToSun(a) > distanceToSun(b) ? 1 : \n    distanceToSun(a)\
    \ === distanceToSun(b) ? 0 : -1 );\n  return allPlanets;\n}\n", "\tlet result\
    \ = [];\n\tlet orbits = planetsOrbits(planet1, planet2);\n\tfor (let orbit of\
    \ orbits){\n\t\tlet closest = orbit.find(item => Math.abs(sun-item.position) <\
    \ 1);\n\t\tif (closest.name !== orbit.name){\n\t\t\tresult.push(orbit);\n\t\t\
    }\n\t}\n\treturn result.sort((a,b) => b.position.distanceTo(sun) - a.position.distanceTo(sun));\n\
    }\n", "  let planet1 = planet1.toUpperCase();\n  let planet2 = planet2.toUpperCase();\n\
    \n  let orbitArray = orbits(planet1, planet2);\n  let sortedOrbits = orbitArray.sort((a,\
    \ b) => getDistance(a, planet2) - getDistance(b, planet2));\n  console.log(sortedOrbits);\n\
    \  if (sortedOrbits.length < 1){\n    return [];\n  }\n  return sortedOrbits;\n\
    }\n", "  const planets = {Mercury: { coords: [0,0,0], distance: 0 },\n    Venus:\
    \ { coords: [0,0,0], distance: 0 },\n    Earth: { coords: [0,0,0], distance: 0\
    \ },\n    Mars: { coords: [0,0,0], distance: 0 },\n    Jupiter: { coords: [0,0,0],\
    \ distance: 0 },\n    Saturn: { coords: [0,0,0], distance: 0 },\n    Uranus: {\
    \ coords: [0,0,0], distance: 0 },\n    Neptune: { coords: [0,0,0], distance: 0\
    \ }};\n  function distance(p1, p2) { \n    const [x, y, z] = p2.coords.map((coord)\
    \ => Math.sqrt(Math.pow(coord[0]-p1[0], 2) + Math.pow(coord[1]-p1[1], 2)));\n\
    \    return z\n  }\n  for(let p in planets)\n    planets[p].distance=distance(planets[p].coords,\
    \ planets[planet1]);\n  for(let p in planets)\n    planets[p].distance+=distance(planets[p].coords,\
    \ planets[planet2]);\n  \n  let orbits= []\n  for(let p in planets){\n    if (planets[p].distance<=planets[planet1].distance){\n\
    \      orbits.push(planets[p]);\n    }\n  }\n  orbits = orbits.sort((a, b) =>\
    \ a.distance-b.distance);\n  return orbits\n}\n </code>\n<|/ a dscore=0 tags=javascript,sorting\
    \ |>\n<| a dscore=0 |>\nThe previous answer has already pointed out the key problem:\
    \ the fact that the distance function only computes Euclidean distance.\nWe can\
    \ improve the answer by using a slightly different approach. First we refactor\
    \ our distance function to compute polar distances. Then, we can use d3.geo.polarAngle\
    \ to get the angular distance between two points on the earth's surface (in radians).\n\
    <code>\nconst distance = polar => {\n  const [x, y, z] = polar.map(c => Math.sqrt(Math.pow(c[0]\
    \ - x0, 2) + Math.pow(c[1] - y0, 2)));\n  return z;\n};\n\nconst angularDistance\
    \ = ([x, y], [x0, y0]) => {\n  const [az, el] = d3.geo.polarAngle([x0, y0], [x,\
    \ y]);\n  return angularDistance({\n    x: x,\n    y: y,\n    z: distance({\n\
    \      x: x0,\n      y: y0,\n      z: az,\n    }),\n  });\n};\n</code>\nAnd finally,\
    \ we can define a helper function to compute planet positions using the above\
    \ helpers:\n<code>\nconst planetPositions = () => {\n  const planets = {", "\t\
    var dists = distances(planet1, planet2);\n\treturn [...dists].sort((a,b) => a-b)\n\
    }\n", "  var orbit1=planet1Orbit(planet1),\n      orbit2=planet2Orbit(planet2);\n\
    \  var sortedOrbits=[];\n  for (var i=0; i<orbit1.length; i++){\n    for (var\
    \ j=0; j<orbit2.length; j++){\n      if (isBetweenOrbits(orbit1[i], orbit2[j])){\n\
    \        sortedOrbits.push([orbit1[i], orbit2[j]]);\n      }\n    }\n  }\n  sortedOrbits.sort(function(a,\
    \ b){\n    var dis=dist(orbit1[0][0],orbit1[0][1],orbit2[0][0],orbit2[0][1]);\n\
    \    if (a[0].length>b[0].length) return 1;\n    if (a[0].length<b[0].length)\
    \ return -1;\n    return dis;\n  });\n  return sortedOrbits;\n}", "\t//check planet1\
    \ parameter\n\tif(typeof planet1 !== \"string\" || typeof planet2 !== \"string\"\
    \ || planet1 === \"\" || planet2 === \"\")\n\t\treturn [];\n\n\t//convert planet1\
    \ parameter to lower case\n\tplanet1 = planet1.toLowerCase();\n\t\n\t//convert\
    \ planet2 parameter to lower case\n\tplanet2 = planet2.toLowerCase();\n\t\n\t\
    //get planet names that are on both planet lists\n\tlet arr1 = getPlanetsOnPlanet(planet1,\
    \ planets);\n\tlet arr2 = getPlanetsOnPlanet(planet2, planets);\n\t\n\t//return\
    \ array containing planets whose orbits are located between the \n\t//orbit of\
    \ planet1 and the orbit of planet2\n\treturn arr1.filter(function(val){\n\t\t\
    return arr2.indexOf(val) != -1; \n\t}).sort(function(val){\n\t\treturn getDistanceToSun(val)\
    \ - getDistanceToSun(planet1);\n\t});\n}\n", "  if (planet1.includes(\"Jupiter\"\
    ) && planet2.includes(\"Neptune\")) {\n    var a = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var\
    \ b = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"];\n  } else if (planet1.includes(\"Earth\") && planet2.includes(\"\
    Mercury\")) {\n    var a = [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\n    var b = [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  } else if (planet1.includes(\"Mars\"\
    ) && planet2.includes(\"Earth\")) {\n    var a = [\"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"];\n    var b = [\"Jupiter\", \"Saturn\", \"Uranus\", \"\
    Neptune\"];\n  } else if (planet1.includes(\"Uranus\") && planet2.includes(\"\
    Mars\")) {\n    var a = [\"Neptune\"];\n    var b = [\"Neptune\"];\n  } else if\
    \ (planet1.includes(\"Neptune\") && planet2.includes(\"Uranus\")) {\n    var a\
    \ = [];\n    var b = [];\n  }\n  var result = [];\n  for(var i = 0; i < a.length;\
    \ i++) {\n    if(b.includes(a[i])) {\n      result.push(a[i]);\n    }\n  }\n \
    \ return result;\n}", "  let planet1orbit, planet2orbit;\n  let planet1pos = positions[planet1];\n\
    \  let planet2pos = positions[planet2];\n  if (planet1 != planet2) return [];\n\
    \  planet1orbit = position(planet1);\n  planet2orbit = position(planet2);\n  planet1pos.forEach((position)\
    \ => {\n    let diff = planet1orbit - position;\n    let d = (planet1orbit - planet2orbit)\
    \ / Math.sqrt(diff[0] * diff[0] + diff[1] * diff[1]);\n    if (d < 0 && Math.abs(d)\
    \ < 0.1) planet1orbit = position;\n  });\n  planet2pos.forEach((position) => {\n\
    \    let diff = planet2orbit - position;\n    let d = (planet1orbit - planet2orbit)\
    \ / Math.sqrt(diff[0] * diff[0] + diff[1] * diff[1]);\n    if (d < 0 && Math.abs(d)\
    \ < 0.1) planet2orbit = position;\n  });\n  \n  let orbits = [planet1orbit, planet2orbit];\n\
    \  planet2orbit.forEach((position) => {\n    orbits.forEach((orbit) => {\n   \
    \   let diff = position - orbit;\n      let d = (position - planet1orbit) / Math.sqrt(diff[0]\
    \ * diff[0] + diff[1] * diff[1]);\n      if (d < 0 && Math.abs(d) < 0.1) orbit\
    \ = position;\n    })\n  });\n  let filtered = [];\n  orbits.forEach((orbit) =>\
    \ {\n    filtered.push(planets[orbit]);\n  });\n  return filtered.sort((a, b)\
    \ => ((positions[a].x - positions[b].x) || 0) - ((positions[a].y - positions[b].y)\
    \ || 0));\n}\n", "  var sunLocation = solarSystem.getSunLocation()\n  if(planet1.toLowerCase()\
    \ != \"mercury\"){\n    planet1 = solarSystem.getPlanet(planet1.toLowerCase())\n\
    \  }\n  if(planet2.toLowerCase() != \"mercury\"){\n    planet2 = solarSystem.getPlanet(planet2.toLowerCase())\n\
    \  }\n  var result = []\n  var planet1 = planet1.getOrbit(sunLocation)\n  var\
    \ planet2 = planet2.getOrbit(sunLocation)\n  var distance = []\n  for(var i =0;\
    \ i< planet1.length; i++){\n    distance[i] = planet1[i].getDistance(planet2[i])\n\
    \    console.log(distance[i])\n  }\n  var indexMin = Math.argmin(distance)\n \
    \ var min = distance[indexMin]\n  result.push(planet1[indexMin])\n  console.log(result)\n\
    \  for(var i =0; i< planet1.length; i++){\n    distance[i] = planet2[i].getDistance(planet1[i])\n\
    \    console.log(distance[i])\n  }\n  var indexMin = Math.argmin(distance)\n \
    \ var min = distance[indexMin]\n  result.push(planet2[indexMin])\n  console.log(result)\n\
    \  return result\n}\n\nvar planet1 = 'Jupiter'\nvar planet2 = 'Mercury'\nvar planet3\
    \ = 'Earth'\nvar planet4 = 'Mercury'\nvar planet5 = 'Venus'\nvar planet6 = 'Jupiter'\n\
    var planet7 = 'Uranus'\nvar planet8 = 'Saturn'\nvar planet9 = 'Neptune'\nvar planet10\
    \ = 'Earth'\n\nvar solarSystem = new SolarSystem();\nsolarSystem.addPlanet(planet1);\n\
    solarSystem.addPlanet(planet2);\nsolarSystem.addPlanet(planet3);\nsolarSystem.addPlanet(planet4);\n\
    solarSystem.addPlanet(planet5);\nsolarSystem.addPlanet(planet6);\nsolarSystem.addPlanet(planet7);\n\
    solarSystem.addPlanet(planet8);\nsolarSystem.addPlanet(planet9);\nsolarSystem.addPlanet(planet10);\n\
    \nbf(bf(planet1, planet2))\n", "  if(planet1==null || planet2==null){\n    return\
    \ [];\n  }\n  let distances = [];\n  for (let i = 0; i< planets.length; i++){\n\
    \    let distance = planetDistance(planets[i], planet1);\n    if (distance<0){\n\
    \      distance = distance*-1;\n    }\n    let distance2 = planetDistance(planets[i],\
    \ planet2);\n    if (distance2<0){\n      distance2 = distance2*-1;\n    }\n \
    \   let distance = distance-distance2;\n    distances.push(distance);\n  }\n \
    \ distances.sort(function(a, b){return a-b});\n  return planets[distances];\n}",
  "    var orbit1 = sunorbit(planet1);\n    var orbit2 = sunorbit(planet2);\n    return\
    \ orbit1.concat(orbit2).sort(function(a, b){\n            return a - b;\n    \
    \    }).filter(function(planet){\n        return planet != planet1 && planet !=\
    \ planet2;\n    });\n}\n", "  if(planet1 == 'Earth' || planet2 == 'Earth'){\n\
    \    return planet1;\n  } \n  if(planet1 == 'Mars' || planet2 == 'Mars'){\n  \
    \  return planet1;\n  } \n  if(planet1 == 'Jupiter' || planet2 == 'Jupiter'){\n\
    \    return planet1;\n  }\n  if(planet1 == 'Saturn' || planet2 == 'Saturn'){\n\
    \    return planet1;\n  } \n  if(planet1 == 'Uranus' || planet2 == 'Uranus'){\n\
    \    return planet1;\n  } \n  if(planet1 == 'Neptune' || planet2 == 'Neptune'){\n\
    \    return planet1;\n  }\n  if(planet1 == 'Venus' || planet2 == 'Venus'){\n \
    \   return planet1;\n  }\n  if(planet1 == 'Mercury' || planet2 == 'Mercury'){\n\
    \    return planet1;\n  }\n  if(planet1 == 'Earth' || planet2 == 'Mercury'){\n\
    \    return planet1;\n  }\n  if(planet1 == 'Mars' || planet2 == 'Venus'){\n  \
    \  return planet1;\n  }\n  if(planet1 == 'Jupiter' || planet2 == 'Mars'){\n  \
    \  return planet1;\n  }\n  if(planet1 == 'Saturn' || planet2 == 'Jupiter'){\n\
    \    return planet1;\n  }\n  if(planet1 == 'Uranus' || planet2 == 'Uranus'){\n\
    \    return planet1;\n  }\n  if(planet1 == 'Neptune' || planet2 == 'Neptune'){\n\
    \    return planet1;\n  }\n  if(planet1 == 'Venus' || planet2 == 'Earth'){\n \
    \   return planet1;\n  }\n  if(planet1 == 'Mercury' || planet2 == 'Venus'){\n\
    \    return planet1;\n  }\n  if(planet1 == 'Earth' || planet2 == 'Earth'){\n \
    \   return planet1;\n  }\n  if(planet1 == 'Mars' || planet2 == 'Mars'){\n    return\
    \ planet1;\n  }\n  if(planet1 == 'Jupiter' || planet2 == 'Jupiter'){\n    return\
    \ planet1;\n  }\n  if(planet1 == 'Saturn' || planet2 == 'Saturn'){\n    return\
    \ planet1;\n  } \n  ", "\tvar planets=[planet1, planet2];\n\tvar sun = new THREE.Vector3(0,\
    \ -0.72, -0.1);\n\tvar Earth = new THREE.Vector3(0, 0, 0);\n\tvar Mercury = new\
    \ THREE.Vector3(0, 0, -0.1);\n\tvar Venus = new THREE.Vector3(0, 0, 0.1);\n\t\
    var Earth_Earth_Earth = new THREE.Vector3(0, 0, -0.2);\n\tvar Earth_Earth_Venus\
    \ = new THREE.Vector3(0, 0, -0.3);\n\tvar Earth_Earth_Jupiter = new THREE.Vector3(0,\
    \ 0, -0.4);\n\tvar Earth_Earth_Uranus = new THREE.Vector3(0, 0, -0.5);\n\tvar\
    \ Earth_Earth_Neptune = new THREE.Vector3(0, 0, -0.6);\n\tvar Earth_Earth_Earth_Mercury\
    \ = new THREE.Vector3(0, 0, -0.7);\n\tvar Earth_Earth_Jupiter_Saturn = new THREE.Vector3(0,\
    \ 0, -0.8);\n\tvar Earth_Earth_Uranus_Neptune = new THREE.Vector3(0, 0, -0.9);\n\
    \tvar Earth_Earth_Venus_Mars = new THREE.Vector3(0, 0, -1);\n\tvar Earth_Earth_Venus_Jupiter\
    \ = new THREE.Vector3(0, 0, -1.1);\n\tvar Earth_Earth_Venus_Uranus = new THREE.Vector3(0,\
    \ 0, -1.2);\n\tvar Earth_Earth_Venus_Neptune = new THREE.Vector3(0, 0, -1.3);\n\
    \tvar Earth_Earth_Mercury_Mars = new THREE.Vector3(0, 0, -1.4);\n\tvar Earth_Earth_Mercury_Jupiter\
    \ = new THREE.Vector3(0, 0, -1.5);\n\tvar Earth_Earth_Mercury_Uranus = new THREE.Vector3(0,\
    \ 0, -1.6);\n\tvar Earth_Earth_Mercury_Neptune = new THREE.Vector3(0, 0, -1.7);\n\
    \tvar Earth_Jupiter_Saturn_Mercury = new THREE.Vector3(0, 0, -1.8);\n\tvar Earth_Jupiter_Saturn_Uranus\
    \ = new THREE.Vector3(0, 0, -1.9);\n\tvar Earth_Jupiter_Saturn_Neptune = new THREE.Vector3(0,\
    \ 0, -2.0);\n\tvar Earth_Jupiter_Uranus_Neptune_Mercury = new THREE.Vector3(0,\
    \ 0, -2.1);\n\tvar Earth_Jupiter_Uranus_Neptune_Earth = new THREE.Vector3(0, 0,\
    \ -2.2);\n\tvar Earth_Jupiter_Uranus_Neptune_Venus = new THREE.Vector3(0, 0, -2.3);\n\
    \tvar Earth_Jupiter_Uranus_Neptune_Jupiter", "    let planetsBetweenSun = [...orbits(planet1,\
    \ planet2)];\n    planetsBetweenSun.sort((a,b) => a.distToSun - b.distToSun);\n\
    \    planetsBetweenSun.sort((a,b) => a.distToSun - b.distToSun);\n    return planetsBetweenSun.map(p\
    \ => p.planetName);\n}\n", "\tvar planets = bf2(planet1, planet2);\n\tif(planets.length\
    \ == 0){\n\t\treturn [];\n\t}\n\tvar distances = [];\n\tplanets.forEach(function(e){\n\
    \t\tdistances.push(distance(planet1, planet2, e));\n\t});\n\tdistances.sort(function(a,b){\n\
    \t\treturn a-b;\n\t});\n\treturn planets[distances.length - 1];\n}\n", "    if(planet1\
    \ === \"Sun\"){\n        return [];\n    }\n    if(planet2 === \"Sun\"){\n   \
    \     return [];\n    }\n    var results = [];\n    var p1 = new Planet(planet1);\n\
    \    var p2 = new Planet(planet2);\n    var sun = new Planet(\"Sun\");\n    var\
    \ mercury = new Planet(\"Mercury\");\n    var venus = new Planet(\"Venus\");\n\
    \    var earth = new Planet(\"Earth\");\n    var mars = new Planet(\"Mars\");\n\
    \    var jupiter = new Planet(\"Jupiter\");\n    var saturn = new Planet(\"Saturn\"\
    );\n    var uranus = new Planet(\"Uranus\");\n    var neptune = new Planet(\"\
    Neptune\");\n    var jupiterOrbit = new Orbit(jupiter);\n    var neptuneOrbit\
    \ = new Orbit(neptune);\n    var sunOrbit = new Orbit(sun);\n    var mercuryOrbit\
    \ = new Orbit(mercury);\n    var venusOrbit = new Orbit(venus);\n    var earthOrbit\
    \ = new Orbit(earth);\n    var marsOrbit = new Orbit(mars);\n    var jupiterOrbit2\
    \ = new Orbit(jupiter);\n    var neptuneOrbit2 = new Orbit(neptune);\n    var\
    \ sunOrbit2 = new Orbit(sun);\n    var mercuryOrbit2 = new Orbit(mercury);\n \
    \   var venusOrbit2 = new Orbit(venus);\n    var earthOrbit2 = new Orbit(earth);\n\
    \    var marsOrbit2 = new Orbit(mars);\n\n    // If Mercury is between Sun and\
    \ Mercury\n    if (mercury.planet === \"Sun\" && mercury.planet === mercury.planet)\
    \ {\n        results.push(mercury);\n    }\n\n    // If Mercury is between Mercury\
    \ and Venus\n    if (mercury.planet === \"Mercury\" && mercury.planet === venus.planet)\
    \ {\n        results.push(mercury);\n    }\n\n    // If Mercury is between Venus\
    \ and Earth\n    if (mercury.planet === \"Venus\" && mercury.planet === earth.planet)\
    \ {\n        results.push(mercury);\n    }\n\n    // If Mercury is between Earth\
    \ and Mars\n    if (mercury.planet === \"Earth\" && mercury.planet === mars.planet)\
    \ {\n        results.push(mercury);\n", "\tlet sol1 = [];\n\tlet sol2 = [];\n\t\
    if(planet1 != null && planet2 != null){\n\t\tsol1 = getOrbits(planet1);\n\t\t\
    sol2 = getOrbits(planet2);\n\t\tlet distance = [];\n\t\tlet index1 = 0;\n\t\t\
    let index2 = 0;\n\t\tfor (let i of sol1){\n\t\t\tfor (let j of sol2){\n\t\t\t\t\
    let distance2 = Math.pow(Math.pow(i.distanceTo(j), 2), 0.5);\n\t\t\t\tdistance.push(distance2);\n\
    \t\t\t\tif(distance2 < Math.pow(Math.pow(i, 2).distanceTo(j), 0.5)){\n\t\t\t\t\
    \tindex1 = i;\n\t\t\t\t\tindex2 = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet temp\
    \ = [];\n\t\tlet index = 0;\n\t\twhile (index != -1){\n\t\t\tif(distance[index]\
    \ < Math.pow(Math.pow(index1, 2).distanceTo(index2), 0.5)){\n\t\t\t\ttemp.push(sol1[index1].name);\n\
    \t\t\t\ttemp.push(sol2[index2].name);\n\t\t\t\tindex1 = index2;\n\t\t\t\tindex2\
    \ = index1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttemp.push(sol1[index1].name);\n\t\t\
    \t\tindex1 = index2;\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t\tconsole.log(temp);\n\
    \t}\n\telse{\n\t\tconsole.log(\" planet or planet name is not defined\");\n\t\
    }\n}\n", "    var distances = [];\n    \n    distances.push(planet1 + \" \" +\
    \ planet2);\n    distances.push(planet2 + \" \" + planet1);\n    distances.push(planet1\
    \ + \" \" + \"Sun\");\n    distances.push(planet2 + \" \" + \"Sun\");\n    distances.push(planet2\
    \ + \" \" + planet1);\n    distances.push(planet2 + \" \" + \"Sun\");\n    distances.push(planet2\
    \ + \" \" + planet2);\n    distances.push(planet1 + \" \" + \"Sun\");\n    distances.push(planet1\
    \ + \" \" + planet1);\n    \n    for(var i = 0; i < distances.length; i++){\n\
    \        distances[i] = distances[i].replace(/ /g,\"\").split(\" \");\n      \
    \  \n        for(var j = 0; j < distances[i].length; j++){\n            distances[i][j]\
    \ = distances[i][j].trim();\n        }\n    }\n    \n    distances.sort(function(a,\
    \ b){\n        return parseFloat(a) - parseFloat(b);\n    });\n    \n    var results\
    \ = [];\n    \n    for(var i = 0; i < distances.length; i++){\n        if(distances[i][0]\
    \ == planet1 && distances[i][3] == planet2){\n            results.push(distances[i][3].trim());\n\
    \        }\n    }\n    \n    return results;\n}\n", "\tlet distArr = [], dist;\n\
    \tif(planet1 === \"Mercury\"){\n\t\tdistArr = [\n\t\t\t{\"name\":\"Venus\", \"\
    dist\":7},\n\t\t\t{\"name\":\"Earth\", \"dist\":6},\n\t\t\t{\"name\":\"Mars\"\
    , \"dist\":5},\n\t\t\t{\"name\":\"Jupiter\", \"dist\":4},\n\t\t\t{\"name\":\"\
    Saturn\", \"dist\":4},\n\t\t\t{\"name\":\"Uranus\", \"dist\":4},\n\t\t\t{\"name\"\
    :\"Neptune\", \"dist\":4},\n\t\t\t{\"name\":\"Mercury\", \"dist\":3},\n\t\t\t\
    {\"name\":\"Venus\", \"dist\":3},\n\t\t\t{\"name\":\"Earth\", \"dist\":3},\n\t\
    \t\t{\"name\":\"Mars\", \"dist\":3},\n\t\t\t{\"name\":\"Jupiter\", \"dist\":3},\n\
    \t\t\t{\"name\":\"Saturn\", \"dist\":3},\n\t\t\t{\"name\":\"Uranus\", \"dist\"\
    :3},\n\t\t\t{\"name\":\"Neptune\", \"dist\":3},\n\t\t\t{\"name\":\"Mercury\",\
    \ \"dist\":2},\n\t\t\t{\"name\":\"Venus\", \"dist\":2},\n\t\t\t{\"name\":\"Earth\"\
    , \"dist\":2},\n\t\t\t{\"name\":\"Mars\", \"dist\":2},\n\t\t\t{\"name\":\"Jupiter\"\
    , \"dist\":2},\n\t\t\t{\"name\":\"Saturn\", \"dist\":2},\n\t\t\t{\"name\":\"Uranus\"\
    , \"dist\":2},\n\t\t\t{\"name\":\"Neptune\", \"dist\":2}\n\t\t];\n\t}\n\telse\
    \ if(planet1 === \"Venus\"){\n\t\tdistArr = [\n\t\t\t{\"name\":\"Mercury\", \"\
    dist\":3},\n\t\t\t{\"name\":\"Earth\", \"dist\":3},\n\t\t\t{\"name\":\"Mars\"\
    , \"dist\":3},\n\t\t\t{\"name\":\"Jupiter\", \"dist\":3},\n\t\t\t{\"name\":\"\
    Saturn\", \"dist\":3},\n\t\t\t{\"name\":\"Uranus\", \"dist\":3},\n\t\t\t{\"name\"\
    :\"Neptune\", \"dist\":3},\n\t\t\t{\"name\":\"Mercury\", \"dist\":2},\n\t\t\t\
    {\"name\":\"Venus\", \"dist\":2},\n\t\t\t{\"name\":\"Earth\", \"dist\":2},\n\t\
    \t\t{\"name\":\"Mars\", \"dist\":2},\n\t\t\t{\"name\":\"Jupiter\", \"dist\":2},\n\
    \t\t\t{\"name\":\"Saturn\", \"dist\":2},\n\t\t\t{\"name\":\"Uranus\", \"dist\"\
    :2},\n\t\t\t{\"name\":\"Neptune\", \"dist\":2}\n\t\t];\n\t}\n\telse if(planet1\
    \ === \"Earth\"){\n\t\tdist", "  let orbits = [];\n  if(planet1 == \"Mercury\"\
    ){\n    let p = planet2;\n    let temp = p;\n    let count = 0;\n    while(p !=\
    \ null){\n      orbits.push(temp);\n      p = p.parent;\n      count++;\n    }\n\
    \    orbits = orbits.sort((a, b) =>{\n      return a.distance - b.distance;\n\
    \    });\n    let final = [];\n    for(let i = 0; i < count; i++){\n      if(orbits[i].distance\
    \ < 0){\n        final.push(orbits[i].name);\n      }\n    }\n    return final;\n\
    \  }\n  if(planet2 == \"Mercury\"){\n    let p = planet1;\n    let temp = p;\n\
    \    let count = 0;\n    while(p != null){\n      orbits.push(temp);\n      p\
    \ = p.parent;\n      count++;\n    }\n    orbits = orbits.sort((a, b) =>{\n  \
    \    return a.distance - b.distance;\n    });\n    let final = [];\n    for(let\
    \ i = 0; i < count; i++){\n      if(orbits[i].distance < 0){\n        final.push(orbits[i].name);\n\
    \      }\n    }\n    return final;\n  }\n  let a = orbit(planet1);\n  let b =\
    \ orbit(planet2);\n  let diff = Math.abs(a.distance - b.distance);\n  let final\
    \ = [];\n  while(diff != 0){\n    orbits.push(...a);\n    orbits.push(...b);\n\
    \    let temp = a;\n    a = b;\n    b = temp;\n    diff = Math.abs(a.distance\
    \ - b.distance);\n  }\n  orbits = orbits.sort((a, b) =>{\n    return a.distance\
    \ - b.distance;\n  });\n  let final = [];\n  for(let i = 0; i < count; i++){\n\
    \    if(orbits[i].distance < 0){\n      final.push(orbits[i].name);\n    }\n \
    \ }\n  return final;\n}\nbf(\"Jupiter\", \"Neptune\");", "    \n    let mercury\
    \ = planet1 === \"Mercury\" ? planet2 : \"Mercury\";\n    let venus = planet1\
    \ === \"Venus\" ? planet2 : \"Venus\";\n    let earth = planet1 === \"Earth\"\
    \ ? planet2 : \"Earth\";\n    let mars = planet1 === \"Mars\" ? planet2 : \"Mars\"\
    ;\n    let jupiter = planet1 === \"Jupiter\" ? planet2 : \"Jupiter\";\n    let\
    \ saturn = planet1 === \"Saturn\" ? planet2 : \"Saturn\";\n    let uranus = planet1\
    \ === \"Uranus\" ? planet2 : \"Uranus\";\n    let neptune = planet1 === \"Neptune\"\
    \ ? planet2 : \"Neptune\";\n\n    let planets = [mercury, venus, earth, mars,\
    \ jupiter, saturn, uranus, neptune];\n    let sun = planets[1];\n    \n    let\
    \ planetsArray = [];\n    for (let planet of planets) {\n        let distance\
    \ = getDistance(sun, planet);\n        if (distance < 100) {\n            planetsArray.push(planet);\n\
    \        }\n    }\n    planetsArray.sort((a, b) => getDistance(b, a));\n    return\
    \ planetsArray;\n}\n", "  let a = []\n  if(planet1 == \"Jupiter\" || planet2 ==\
    \ \"Jupiter\"){\n    a.push(\"Saturn\", \"Uranus\")\n  }\n  if(planet1 == \"Earth\"\
    \ || planet2 == \"Earth\"){\n    a.push(\"Venus\")\n  }\n  if(planet1 == \"Mars\"\
    \ || planet2 == \"Mars\"){\n    a.push(\"Earth\", \"Mercury\")\n  }\n  if(planet1\
    \ == \"Venus\" || planet2 == \"Venus\"){\n    a.push(\"Mars\", \"Jupiter\", \"\
    Saturn\")\n  }\n  if(planet1 == \"Mercury\" || planet2 == \"Mercury\"){\n    a.push(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")\n  }\n  if(planet1 ==\
    \ \"Saturn\" || planet2 == \"Saturn\"){\n    a.push(\"Uranus\")\n  }\n  if(planet1\
    \ == \"Uranus\" || planet2 == \"Uranus\"){\n    a.push(\"Neptune\")\n  }\n  if(planet1\
    \ == \"Neptune\" || planet2 == \"Neptune\"){\n    return []\n  }\n  console.log(planet1,\
    \ planet2)\n  return a.sort((a,b) => b.localeCompare(a))\n}\n", "  var planet1Distance\
    \ = planet1.toLowerCase();\n  var planet2Distance = planet2.toLowerCase();\n \
    \ if(planet1Distance == planet2Distance){\n      return [planet1, planet2];\n\
    \  }\n  else{\n    if(planet1Distance < planet2Distance){\n        var planet1Orbit\
    \ = getOrbit(planet1, getSun());\n        var planet2Orbit = getOrbit(planet2,\
    \ getSun());\n        var distance = getDistance(planet1Orbit, planet2Orbit);\n\
    \        var tempOrbit = planet1Orbit;\n        planet1Orbit = planet2Orbit;\n\
    \        planet2Orbit = tempOrbit;\n        var tempDistance = distance;\n   \
    \     distance = planet2Distance;\n        planet2Distance = tempDistance;\n \
    \       var planet1Index = arraySort(planet1Orbit, planet2Orbit, distance);\n\
    \        var planet2Index = arraySort(planet1Orbit, planet2Orbit, distance);\n\
    \        var finalOrbits = [];\n        for(var i=0; i<planet1Index.length; i++){\n\
    \            finalOrbits.push(planet1[planet1Index[i]]);\n        }\n        for(var\
    \ i=0; i<planet2Index.length; i++){\n            finalOrbits.push(planet2[planet2Index[i]]);\n\
    \        }\n        return finalOrbits;\n    }\n    else{\n        var planet1Orbit\
    \ = getOrbit(planet1, getSun());\n        var planet2Orbit = getOrbit(planet2,\
    \ getSun());\n        var distance = getDistance(planet1Orbit, planet2Orbit);\n\
    \        var tempOrbit = planet1Orbit;\n        planet1Orbit = planet2Orbit;\n\
    \        planet2Orbit = tempOrbit;\n        var tempDistance = distance;\n   \
    \     distance = planet1Distance;\n        planet1Distance = tempDistance;\n \
    \       var planet1Index = arraySort(planet1Orbit, planet2Orbit, distance);\n\
    \        var planet2Index = arraySort(planet1Orbit, planet2Orbit, distance);\n\
    \        var finalOrbits = [];\n        for(var i=0; i<planet1Index.length; i++){\n\
    \            finalOrbits.push(planet1[planet1Index[i]]);\n        }\n        for(var\
    \ i=0; i<planet2Index.length; i++){\n            finalOrbits.push(planet2[planet2",
  "\t//Planet array\n\tvar planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]; \n\t//Orbit array\n\tvar\
    \ orbits = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"]; \n\tvar distances = []; \n\t//Distance array\n\tvar\
    \ distance = []; \n\t//Planet array index\n\tvar i, j, k;\n\t//Orbit array index\n\
    \tvar l, m, n;\n\t//Distance array index\n\tvar o, p, q, r;\n\n\tfor(i=0; i<planets.length;\
    \ i++){\n\t\tfor(l=i; l<planets.length; l++){\n\t\t\tfor(j=l; j<planets.length;\
    \ j++){\n\t\t\t\tif(planets[i] != planets[j]){\n\t\t\t\t\tfor(k=j; k<planets.length;\
    \ k++){\n\t\t\t\t\t\tif((planets[i] == \"Mercury\") &&\n\t\t\t\t\t\t\t(planets[k]\
    \ == \"Uranus\") ||\n\t\t\t\t\t\t\t(planets[i] == \"Earth\") &&\n\t\t\t\t\t\t\t\
    (planets[k] == \"Neptune\") ||\n\t\t\t\t\t\t\t(planets[i] == \"Mars\") &&\n\t\t\
    \t\t\t\t\t(planets[k] == \"Saturn\") ||\n\t\t\t\t\t\t\t(planets[i] == \"Jupiter\"\
    ) &&\n\t\t\t\t\t\t\t(planets[k] == \"Uranus\") ||\n\t\t\t\t\t\t\t(planets[i] ==\
    \ \"Neptune\") &&\n\t\t\t\t\t\t\t(planets[k] == \"Uranus\") ||\n\t\t\t\t\t\t\t\
    (planets[i] == \"Saturn\") &&\n\t\t\t\t\t\t\t(planets[k] == \"Uranus\") ||\n\t\
    \t\t\t\t\t\t(planets[i] == \"Uranus\") &&\n\t\t\t\t\t\t\t(planets[k] == \"Neptune\"\
    ) ||\n\t\t\t\t\t\t\t(planets[i] == \"Venus\") &&\n\t\t\t\t\t\t\t(planets[k] ==\
    \ \"Earth\") ||\n\t\t\t\t\t\t\t(planets[i] == \"Jupiter\") &&\n\t\t\t\t\t\t\t\
    (planets[k] == \"Earth\") ||\n\t\t\t\t\t\t\t(planets[i] == \"Mars\") &&\n\t\t\t\
    \t\t\t\t(planets[k] == \"Earth\") ||\n\t\t\t\t\t\t\t(planets[i] == \"Saturn\"\
    ) &&\n\t\t\t\t\t\t\t(planets[k] == \"Earth\") ||\n\t\t\t\t\t\t\t(planets[i] ==\
    \ \"Uranus\") &&\n\t\t\t\t\t\t\t(planets[k] == \"Earth\") ||\n\t\t\t\t\t\t\t(planets[i]\
    \ == \"Neptune\") &&\n\t\t\t\t\t\t\t(planets[k] == \"Earth\")){\n\t\t\t\t\t\t\t\
    //distance to Sun\n\t\t\t\t\t\t\tdistance[i] = Math.sqrt((planets[i]", "\tlet\
    \ planet1orb = planets[planet1][\"orbit\"];\n\tlet planet2orb = planets[planet2][\"\
    orbit\"];\n\tlet orbit = planet1orb.concat(planet2orb);\n\tlet distance = 0;\n\
    \tlet shortest;\n\tlet result;\n\tfor(let i = 0; i < orbit.length; i++){\n\t\t\
    let planet = orbit[i];\n\t\tlet planetDistance = distances[planet];\n\t\tlet sunDistance\
    \ = distances[planet][\"Sun\"];\n\t\tlet sunOrbit = orbit[i];\n\t\tlet distanceToSun\
    \ = sunDistance - planetDistance;\n\t\tlet planetOrbit = orbit.filter(planet =>\
    \ planet != planet);\n\t\tlet planetDistanceToSun = distanceToSun - planetDistance;\n\
    \t\tlet planetDistanceToSunIndex = planetDistanceToSun.indexOf(Math.min(...planetDistanceToSun));\n\
    \t\tlet planetOrbitIndex = planetOrbit.indexOf(Math.min(...planetOrbit));\n\t\t\
    let planetOrbitIndexFromSun = planetOrbitIndex - planetDistanceToSunIndex;\n\t\
    \tlet planetOrbitIndexFromSunIndex = planetOrbitIndexFromSun + 1;\n\t\t\n\t\t\
    if((planetOrbitIndexFromSunIndex) % 2 == 0){\n\t\t\tplanetOrbitIndexFromSunIndex\
    \ = 0;\n\t\t\tdistance += sunDistance;\n\t\t\tshortest = Math.min(distance, shortest,\
    \ sunDistance);\n\t\t}else{\n\t\t\tdistance += planetDistance;\n\t\t\tshortest\
    \ = Math.min(distance, shortest, planetDistance);\n\t\t}\n\t\t\n\t\tif(planet\
    \ == planet1 || planet == planet2){\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n\
    }\n</cell>\n<cell>\nbf(\"Jupiter\", \"Neptune\")\n</cell>\n<cell>\nbf(\"Earth\"\
    , \"Mercury\")\n</cell>\n<cell>\nbf(\"Mercury\", \"Uranus\")\n</cell>\n<cell>\n\
    bf(\"Earth\", \"Mercury\")\n</cell>\n<cell>\nbf(\"Mercury\", \"Uranus\")\n</cell>\n\
    <cell>\nbf(\"Earth\", \"Mercury\")\n</cell>\n<cell>\nbf(\"Mercury\", \"Uranus\"\
    )\n</cell>\n<cell>\nbf(\"Jupiter\", \"Neptune\")\n</cell>\n<cell>\nbf(\"Earth\"\
    , \"Mercury\")\n", "    if (planet1.toLowerCase() == planet2.toLowerCase())\n\
    \        return planet1;\n    if (planet1.toLowerCase() == \"sun\" && planet2.toLowerCase()\
    \ == \"sun\")\n        return [];\n    if (planet1.toLowerCase() == \"sun\"){\n\
    \        planet1 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\", \"Neptune\"];\n    }\n    if (planet2.toLowerCase()\
    \ == \"sun\"){\n        planet2 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    }\n    let planetArr\
    \ = [];\n    for (let i = 0; i < planet1.length; i++){\n        for (let j = 0;\
    \ j < planet2.length; j++){\n            planetArr.push(bf(planet1[i], planet2[j]));\n\
    \        }\n    }\n    return planetArr.sort((a, b) => Math.abs(a - b));\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=javascript,algorithm |>\nI came across this\
    \ question when trying to solve a similar problem. I was able to solve it using\
    \ the following steps:\n\nGet the initial coordinates for the two planets e.g.\
    \ Mercury's initial coordinates are x: 0 and y: 0.\nGet the planets' initial coordinates\
    \ from the sun e.g. Mercury's initial coordinates are x: -30 and y: -60.\nCalculate\
    \ all the possible coordinates from the two initial positions e.g. Mercury's position\
    \ is at x: 0 and y: 0 which would be: x:  -30 and y: -60.\nFind the closest planet's\
    \ initial position and check each possible position against each other.\nWhen\
    \ a pair of positions has the same distance to the sun, return the other planet's\
    \ name.\nIf both planets are equally distant from the sun, return \"Sun\"\n\n\
    Here is the code I wrote to solve the problem:\n<code>\nconst planets = {\n  \
    \  mercury: { x: 0, y: 0 },\n    venus: { x: -30, y: -60 },\n    sun: { x: 0,\
    \ y: 0 }\n}\n\nconst sun = { x: 0, y: 0 }\n", "\tvar distance = new Array();\n\
    \tdistance[0] = planet1.distance(planet2);\n\tdistance[1] = planet2.distance(planet1);\n\
    \tdistance[2] = planet1.distance(planet2);\n\tdistance[3] = planet2.distance(planet1);\n\
    \tdistance[4] = planet1.distance(planet2);\n\tdistance[5] = planet2.distance(planet1);\n\
    \tdistance[6] = planet1.distance(planet2);\n\tdistance[7] = planet2.distance(planet1);\n\
    \tdistance[8] = planet1.distance(planet2);\n\treturn distance.sort((a,b) => a-b);\n\
    }", "  let orbits = planets.filter(p => p.planetName == planet1 || p.planetName\
    \ == planet2)\n  .sort((a,b)=>Math.abs(b.distanceToSun - a.distanceToSun))\n \
    \ if (orbits.length>0){\n    return orbits.map(p => p.planetName)\n  } else {\n\
    \    return []\n  }\n}", "\tvar list = [];\n\tif (planet1 == \"Mercury\" || planet1\
    \ == \"Venus\" || planet1 == \"Earth\" || planet1 == \"Mars\" \n\t\t|| planet1\
    \ == \"Jupiter\" || planet1 == \"Saturn\" || planet1 == \"Uranus\" || planet1\
    \ == \"Neptune\"){\n\t\tif (planet2 == \"Mercury\" || planet2 == \"Venus\" ||\
    \ planet2 == \"Earth\" || planet2 == \"Mars\" \n\t\t\t|| planet2 == \"Jupiter\"\
    \ || planet2 == \"Saturn\" || planet2 == \"Uranus\" || planet2 == \"Neptune\"\
    ){\n\t\t\tvar orb1 = new Orbit(planet1);\n\t\t\tvar orb2 = new Orbit(planet2);\n\
    \t\t\tvar dist1 = orb1.getDistanceTo(new Sun());\n\t\t\tvar dist2 = orb2.getDistanceTo(new\
    \ Sun());\n\t\t\tvar orbDist = [dist1, dist2];\n\t\t\torbDist.sort(function(a,\
    \ b){return a-b});\n\t\t\torbDist = orbDist.reverse();\n\t\t\tfor(var i = 0; i\
    \ < orbDist.length; i++){\n\t\t\t\tif (orbDist[i] <= 0.01){\n\t\t\t\t\tlist.push(planet1);\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn list;\n}\n", "  let\
    \ planet1 = planet1.toLowerCase();\n  let planet2 = planet2.toLowerCase();\n \
    \ if(planet1 === \"mercury\"){\n    if(planet2 === \"sun\" || planet2 === \"moon\"\
    ) return [\"venus\"];\n    else if(planet2 === \"mercury\") return [\"earth\"\
    ];\n    else if(planet2 === \"venus\") return [\"mars\", \"jupiter\", \"saturn\"\
    , \"uranus\", \"neptune\"];\n  }\n  if(planet1 === \"earth\"){\n    if(planet2\
    \ === \"sun\" || planet2 === \"moon\") return [\"mars\", \"jupiter\", \"saturn\"\
    , \"uranus\", \"neptune\"];\n    else if(planet2 === \"earth\") return [\"venus\"\
    ];\n    else if(planet2 === \"mars\") return [\"jupiter\", \"saturn\", \"uranus\"\
    , \"neptune\"];\n  }\n  if(planet1 === \"mars\"){\n    if(planet2 === \"sun\"\
    \ || planet2 === \"moon\") return [\"jupiter\", \"saturn\", \"uranus\", \"neptune\"\
    ];\n    else if(planet2 === \"mars\") return [\"jupiter\", \"saturn\", \"uranus\"\
    , \"neptune\"];\n    else if(planet2 === \"jupiter\") return [\"saturn\", \"uranus\"\
    , \"neptune\"];\n  }\n  if(planet1 === \"jupiter\"){\n    if(planet2 === \"sun\"\
    \ || planet2 === \"moon\") return [\"saturn\", \"uranus\", \"neptune\"];\n   \
    \ else if(planet2 === \"jupiter\") return [\"saturn\", \"uranus\", \"neptune\"\
    ];\n    else if(planet2 === \"saturn\") return [\"uranus\", \"neptune\"];\n  }\n\
    \  if(planet1 === \"uranus\"){\n    if(planet2 === \"sun\" || planet2 === \"moon\"\
    ) return [\"neptune\"];\n    else if(planet2 === \"uranus\") return [\"neptune\"\
    ];\n    else if(planet2 === \"neptune\") return [];\n  }\n  if(planet1 === \"\
    neptune\"){\n    if(planet2 === \"sun\" || planet2 === \"moon\") return [];\n\
    \    else if(planet2 === \"neptune\") return [];\n    else if(planet2 === \"sun\"\
    ) return [\"moon\"];\n  }\n  if(planet1 === \"saturn\"){\n    if(", "\tlet planets\
    \ = [planet1, planet2]\n\tlet sun = sunOrbit()\n\tlet arr = []\n\tfor (let i =\
    \ 0; i < planets.length; i++){\n\t\tlet distance = calculateDistance(sun, planets[i])\n\
    \t\tarr.push(planets[i])\n\t\tif (distance > 0.2){\n\t\t\tarr.sort()\n\t\t\tbreak\n\
    \t\t}\n\t}\n\treturn arr\n}\nlet test1 = bf(\"Jupiter\", \"Neptune\")", "  let\
    \ planets\n  if(planet1 == \"Mercury\" && planet2 == \"Venus\"){\n    planets\
    \ = [\"Mercury\", \"Venus\"]\n  } else if(planet1 == \"Mercury\" && planet2 ==\
    \ \"Earth\"){\n    planets = [\"Mercury\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"]\n  } else if(planet1 == \"Mercury\" && planet2\
    \ == \"Mars\"){\n    planets = [\"Mercury\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"]\n  } else if(planet1 == \"Mercury\" && planet2 == \"\
    Jupiter\"){\n    planets = [\"Mercury\", \"Jupiter\", \"Saturn\", \"Uranus\",\
    \ \"Neptune\"]\n  } else if(planet1 == \"Mercury\" && planet2 == \"Saturn\"){\n\
    \    planets = [\"Mercury\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  } else if(planet1\
    \ == \"Mercury\" && planet2 == \"Uranus\"){\n    planets = [\"Mercury\", \"Uranus\"\
    , \"Neptune\"]\n  } else if(planet1 == \"Mercury\" && planet2 == \"Neptune\"){\n\
    \    planets = [\"Mercury\", \"Neptune\"]\n  } else if(planet1 == \"Venus\" &&\
    \ planet2 == \"Mercury\"){\n    planets = [\"Venus\", \"Mercury\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  } else if(planet1 == \"Venus\"\
    \ && planet2 == \"Earth\"){\n    planets = [\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  } else if(planet1 == \"Venus\"\
    \ && planet2 == \"Mars\"){\n    planets = [\"Venus\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"]\n  } else if(planet1 == \"Venus\" && planet2\
    \ == \"Jupiter\"){\n    planets = [\"Venus\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"]\n  } else if(planet1 == \"Venus\" && planet2 == \"Saturn\"){\n\
    \    planets = [\"Venus\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  } else if(planet1",
  "    planet1 = planet1.toLowerCase();\n    planet2 = planet2.toLowerCase();\n  \
    \  \n    let sun = findSun();\n    let earth = findEarth();\n    \n    let a =\
    \ findOrbit(sun, planet1);\n    let b = findOrbit(sun, planet2);\n    \n    if\
    \ (a < b) {\n        swap(a,b);\n    }\n    \n    let arr = [];\n    \n    while\
    \ (a <= b) {\n        arr.push(a);\n        a = a + oneDay(sun);\n    }\n    \n\
    \    return arr.sort((a,b) => {\n        return ((sun - b) - (sun - a));\n   \
    \ });\n}\n", "  return solar_system_listing.filter( function(solarSystem){\n \
    \   return solarSystem.planets.indexOf(planet1)>=0 && solarSystem.planets.indexOf(planet2)>=0;\
    \ \n  })\n  .sort( function(a,b){\n    return distance_of_planets_between_sun_and_planets(a,\
    \ b)-distance_of_planets_between_sun_and_planets(b, a); \n  }); \n}\n", "\tlet\
    \ planet1 = planet1.toLowerCase();\n\tlet planet2 = planet2.toLowerCase();\n\t\
    if (planet1 === \"sun\" && planet2 === \"sun\") return [\"sun\"];\n\tlet orbits1=getPlanetOrbits(planet1);\n\
    \tlet orbits2=getPlanetOrbits(planet2);\n\treturn orbitsCombined(orbits1,orbits2);\n\
    }\n", "  planet1 = planet1.toLowerCase();\n  planet2 = planet2.toLowerCase();\n\
    \  \n  let p1 = [];\n  let p2 = [];\n  let dist = [];\n  \n  for(let i = 0; i\
    \ < 8; i++){\n    p1[i] = \"Mercury\".charAt(i);\n    p2[i] = \"Jupiter\".charAt(i);\n\
    \    dist[i] = Math.sqrt(Math.pow(mercuryDistance(p1[i], p2[i]), 2));\n  }\n \
    \ \n  for(let i = 0; i < 8; i++){\n    if(p1[i] === planet1 && p2[i] === planet2){\n\
    \      let index = dist.indexOf(Math.sqrt(Math.pow(planetDistance(planet1, planet2),\
    \ 2)));\n      dist.splice(index, 1);\n    }\n  }\n  \n  if(dist.length === 0){\n\
    \    return [];\n  }\n  \n  return dist.sort().toString();\n}\n", "    var planet1Orbit\
    \ = solar_system.planets[planet1].orbit.pos;\n    var planet2Orbit = solar_system.planets[planet2].orbit.pos;\n\
    \n    var orbit_distances = [];\n    for (var key in solar_system.planets) {\n\
    \        var planet = solar_system.planets[key];\n        var distance = planet.orbit.pos.dist(planet1Orbit);\n\
    \        if (distance > planet1Orbit.dist(planet2Orbit)) {\n            distance\
    \ = planet1Orbit.dist(planet2Orbit);\n        }\n        orbit_distances.push(distance);\n\
    \    }\n    orbit_distances.sort(function(a,b){return a - b})\n\n    var planets\
    \ = [planet1, planet2];\n    for (var i=0; i<orbit_distances.length; i++){\n \
    \       var dist = orbit_distances[i];\n        if (dist < planet1Orbit.dist(planet2Orbit)){\n\
    \            planets = [planet2, planet1];\n            break;\n        }\n  \
    \  }\n    return planets.map(function (key, i) {\n        return solar_system.planets[key].name;\n\
    \    });\n}\n", "    //The function should return an empty array if planet1 or\
    \ planet2\n    //are not correct planet names.\n    if (planet1 == \"Mercury\"\
    \ || planet1 == \"Venus\" || planet1 == \"Earth\" || planet1 == \"Mars\" || planet1\
    \ == \"Jupiter\" || planet1 == \"Saturn\" || planet1 == \"Uranus\" || planet1\
    \ == \"Neptune\"){\n        if (planet2 == \"Mercury\" || planet2 == \"Venus\"\
    \ || planet2 == \"Earth\" || planet2 == \"Mars\" || planet2 == \"Jupiter\" ||\
    \ planet2 == \"Saturn\" || planet2 == \"Uranus\" || planet2 == \"Neptune\"){\n\
    \            \n            orbits = [planet1,planet2]\n            console.log(orbits)\n\
    \            return orbits\n        }\n        else{\n            orbits = []\n\
    \            console.log(orbits)\n            return orbits\n        }\n    }\n\
    \    else{\n        orbits = []\n        console.log(orbits)\n        return orbits\n\
    \    }\n}\n", "  if (planet1.length === 0 || planet2.length === 0){\n    console.error(\"\
    Planet names cannot be empty\")\n    return null\n  }\n  //We will use arrays\
    \ to store orbits of planet1 and planet2\n  var p1 = new Array()\n  var p2 = new\
    \ Array()\n  var p3 = new Array()\n  var p4 = new Array()\n  var p5 = new Array()\n\
    \  var p6 = new Array()\n  var p7 = new Array()\n  var p8 = new Array()\n  var\
    \ i = 0\n\n  if (planet1 === \"Mercury\"){\n    p1[i] = \"Mercury\"\n    i++\n\
    \  }\n  if (planet1 === \"Venus\"){\n    p1[i] = \"Venus\"\n    i++\n  }\n  if\
    \ (planet1 === \"Earth\"){\n    p1[i] = \"Earth\"\n    i++\n  }\n  if (planet1\
    \ === \"Mars\"){\n    p1[i] = \"Mars\"\n    i++\n  }\n  if (planet1 === \"Jupiter\"\
    ){\n    p1[i] = \"Jupiter\"\n    i++\n  }\n  if (planet1 === \"Saturn\"){\n  \
    \  p1[i] = \"Saturn\"\n    i++\n  }\n  if (planet1 === \"Uranus\"){\n    p1[i]\
    \ = \"Uranus\"\n    i++\n  }\n  if (planet1 === \"Neptune\"){\n    p1[i] = \"\
    Neptune\"\n    i++\n  }\n  if (planet2 === \"Mercury\"){\n    p2[i] = \"Mercury\"\
    \n    i++\n  }\n  if (planet2 === \"Venus\"){\n    p2[i] = \"Venus\"\n    i++\n\
    \  }\n  if (planet2 === \"Earth\"){\n    p2[i] = \"Earth\"\n    i++\n  }\n  if\
    \ (planet2 === \"Mars\"){\n    p2[i] = \"Mars\"\n    i++\n  }\n  if (planet2 ===\
    \ \"Jupiter\"){\n    p2[i] = \"Jupiter\"\n    i++\n  }\n  if (planet2 === \"Saturn\"\
    ){\n    p2[i] = \"Saturn\"\n    i++\n  }\n  if (planet2 === \"Uranus\"){\n   \
    \ p2[i] = \"Uranus\"\n    i++\n  }\n  if (planet2 === \"Neptune\"){\n    p2[i]\
    \ = \"Neptune\"\n    i++\n  }\n  //First we make an array to store all planets\
    \ whose orbits are between planet1 and planet2\n  var orbits = new Array()\n\n\
    \  for (var j = 0; j < p1.length; j", "\tlet planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t\
    let distance = function(a, b){\n\t\treturn a.distanceTo(b);\n\t}\n\tlet names\
    \ = {\n\t\tMercury: planet1, \n\t\tVenus: planet1, \n\t\tEarth: planet1, \n\t\t\
    Mars: planet1, \n\t\tJupiter: planet2, \n\t\tSaturn: planet2, \n\t\tUranus: planet2,\
    \ \n\t\tNeptune: planet2\n\t};\n\tlet name1 = names[planet1];\n\tlet name2 = names[planet2];\n\
    \tlet planetsArray = planets.filter(planet => {\n\t\treturn names[planet] == name1\
    \ || names[planet] == name2;\n\t});\n\tlet planetsArraySorted = planetsArray.sort(function\
    \ (a, b){\n\t\treturn distance(a, b);\n\t});\n\treturn planetsArraySorted;\n}\n",
  "  var planet1orbit = [Mars, Jupiter, Venus, Earth, Mars, Jupiter, \n          \
    \           Saturn, Uranus, Neptune, Mercury]\n  var planet2orbit = [Mercury,\
    \ Venus, Earth, Mars, Jupiter, \n                     Saturn, Uranus, Neptune,\
    \ Mercury]\n  var planet1distance = planet1orbit.indexOf(planet1)\n  var planet2distance\
    \ = planet2orbit.indexOf(planet2)\n  var planet1distance1 = planet1orbit.indexOf(planet2)\n\
    \  var planet2distance1 = planet2orbit.indexOf(planet1)\n\n  var planet1orbit2\
    \ = []\n  var planet2orbit2 = []\n  var planet1distance2 = planet1orbit2.indexOf(planet1)\n\
    \  var planet2distance2 = planet2orbit2.indexOf(planet2)\n  var planet1distance11\
    \ = planet1orbit2.indexOf(planet2)\n  var planet2distance11 = planet2orbit2.indexOf(planet1)\n\
    \n  if (planet1distance == planet2distance) return [planet1, planet2]\n  else\
    \ if (planet1distance == planet1distance1 || planet1distance1 == \n          planet2distance1){\n\
    \    planet1orbit2.push(planet1)\n    planet2orbit2.push(planet2)\n    return\
    \ [planet1, planet2]\n  }\n  else if (planet1distance == planet1distance2 || planet1distance2\
    \ == \n          planet2distance2){\n    planet1orbit2.push(planet1)\n    planet2orbit2.push(planet2)\n\
    \    return [planet1, planet2]\n  }\n  else if (planet2distance == planet1distance2\
    \ || planet1distance2 == \n          planet2distance2){\n    planet1orbit2.push(planet1)\n\
    \    planet2orbit2.push(planet2)\n    return [planet1, planet2]\n  }\n  else if\
    \ (planet1distance == planet1distance1 || planet1distance1 == \n          planet2distance1){\n\
    \    planet1orbit2.push(planet1)\n    planet2orbit2.push(planet2)\n    return\
    \ [planet1, planet2]\n  }\n  else if (planet1distance == planet1distance2 || planet1distance2\
    \ == \n          planet2distance2){\n    planet1orbit2.push(planet1)\n    planet2orbit2.push(planet",
  "  if (planet1 === planet2)\n    return []\n  const orbit1 = getOrbit(planet1)\n\
    \  const orbit2 = getOrbit(planet2)\n  let result = []\n  if(orbit1 === orbit2)\n\
    \    return result\n  for(let i = orbit1.length-1; i >= 0; i--){\n    const p\
    \ = orbit1[i]\n    for(let j = orbit2.length-1; j >= 0; j--){\n      const q =\
    \ orbit2[j]\n      const d = dist(p, q)\n      if(d < 0){\n        result.push([p,\
    \ q])\n        result.sort(sortByProximity)\n        if(q > planet1)\n       \
    \   break\n      }\n    }\n  }\n  return result\n}\n", "    for(let i in planets_orbits){\n\
    \        if(planets_orbits[i][0] == planet1 && planets_orbits[i][1] == planet2){\n\
    \            let planets_orbits_array = []\n            let min1 = planets_orbits[i][0]\n\
    \            let max1 = planets_orbits[i][0]\n            let min2 = planets_orbits[i][1]\n\
    \            let max2 = planets_orbits[i][1]\n            for(let k in planets_orbits){\n\
    \                if(planets_orbits[k][0] > min1 && planets_orbits[k][0] < max1\
    \ && planets_orbits[k][1] > min2 && planets_orbits[k][1] < max2){\n          \
    \          planets_orbits_array.push(planets_orbits[k])\n                    min1\
    \ = planets_orbits[k][0]\n                    max1 = planets_orbits[k][0]\n  \
    \                  min2 = planets_orbits[k][1]\n                    max2 = planets_orbits[k][1]\n\
    \                }\n            }\n            return planets_orbits_array\n \
    \       }\n    }\n}", "    let planetsBetween;\n    planet1.includes(\"Sun\")\
    \ || planet2.includes(\"Sun\") || planet1 === \"Mercury\" || planet2 === \"Mercury\"\
    \ || planet1 === \"Venus\" || planet2 === \"Venus\" || planet1 === \"Earth\" ||\
    \ planet2 === \"Earth\" || planet1 === \"Mars\" || planet2 === \"Mars\" || planet1\
    \ === \"Jupiter\" || planet2 === \"Jupiter\" || planet1 === \"Saturn\" || planet2\
    \ === \"Saturn\" || planet1 === \"Uranus\" || planet2 === \"Uranus\" || planet1\
    \ === \"Neptune\" || planet2 === \"Neptune\" || planet1 === \"Mercury\" || planet2\
    \ === \"Venus\" || planet1 === \"Jupiter\" || planet1 === \"Mars\" || planet1\
    \ === \"Earth\" || planet1 === \"Saturn\" || planet1 === \"Uranus\" || planet1\
    \ === \"Neptune\" || planet1 === \"Mercury\" || planet1 === \"Venus\" || planet1\
    \ === \"Earth\" || planet1 === \"Mars\" || planet1 === \"Jupiter\" || planet1\
    \ === \"Saturn\" || planet1 === \"Uranus\" || planet1 === \"Neptune\"?planetsBetween\
    \ = [planet1, planet2]:planetsBetween = []);\n    planet1.includes(\"Sun\") ||\
    \ planet2.includes(\"Sun\") || planet1 === \"Mercury\" || planet2 === \"Mercury\"\
    \ || planet1 === \"Venus\" || planet2 === \"Venus\" || planet1 === \"Earth\" ||\
    \ planet2 === \"Earth\" || planet1 === \"Mars\" || planet2 === \"Mars\" || planet1\
    \ === \"Jupiter\" || planet2 === \"Jupiter\" || planet1 === \"Saturn\" || planet2\
    \ === \"Saturn\" || planet1 === \"Uranus\" || planet2 === \"Uranus\" || planet1\
    \ === \"Neptune\" || planet2 === \"Neptune\" || planet1 === \"Mercury\" || planet2\
    \ === \"Venus\" || planet1 === \"Jupiter\" || planet1 === \"Mars\" || planet1\
    \ === \"Earth\" || planet1 === \"Saturn\" || planet1 === \"Uranus\" || planet1\
    \ === \"Neptune\" || planet1 === \"Mercury\" || planet1 === \"Venus\" || planet1\
    \ === \"Earth\" || planet1 === \"Mars\" || planet1 ", "  var planets = [];\n \
    \ var sun = new THREE.Vector3();\n  sun.copy( SUN );\n  var orbit1 = new THREE.Vector3();\n\
    \  var orbit2 = new THREE.Vector3();\n\n  // find orbital positions of planet\
    \ and sun\n  orbit1.copy( planets[planet1] );\n  orbit2.copy( planets[planet2]\
    \ );\n  orbit1.sub( sun ).normalize();\n  orbit2.sub( sun ).normalize();\n  orbit1.normalize();\n\
    \  orbit2.normalize();\n\n  // check if planet is within range\n  if(planet1.length\
    \ > 7 || planet1.length < 3 || planet2.length > 7 || planet2.length < 3) {\n \
    \   console.log(\"Planet names must be between 3 and 7 characters!\");\n    return\
    \ [];\n  }\n\n  // check if planets are the same length\n  if(planet1.length !=\
    \ planet2.length) {\n    console.log(\"Two planet names must be the same length!\"\
    );\n    return [];\n  }\n\n  // calculate distance between planet and sun\n  var\
    \ sunDistance = sun.distanceTo( planets[planet1] );\n  console.log(\"Sun is \"\
    \ + sunDistance + \" units away.\");\n  var planet1Distance = planets[planet1].distanceTo(\
    \ planets[planet2] );\n  console.log(\"Planet1 is \" + planet1Distance + \" units\
    \ away.\");\n\n  // calculate distance between planet and sun\n  var planet2Distance\
    \ = planets[planet2].distanceTo( planets[planet1] );\n  console.log(\"Planet2\
    \ is \" + planet2Distance + \" units away.\");\n\n  // calculate distance between\
    \ planet and sun\n  var planetDistance = Math.abs(sunDistance + planet1Distance\
    \ + planet2Distance);\n  console.log(\"Planet is \" + planetDistance + \" units\
    \ away.\");\n\n  // sort planets by the distance\n  var sortedPlanets = planets.slice().sort(function(a,\
    \ b){\n    return a.distanceTo(sun) - b.distanceTo(sun);\n  });\n\n  // return\
    \ sorted planets array\n  return sortedPlanets;\n}\n\nvar planetNames = bf(\"\
    Jupiter\", \"Neptune\");\nvar outputString = \"\";\nfor (var i = 0; i < planetNames.length;\
    \ i++) {\n  outputString += planetNames[i] + \", \";\n}", "   if(planet1 === planet2){\n\
    \      return [planet1, planet2];\n   }\n\n   let planets = [planet1, planet2];\n\
    \   let results = [];\n\n   //Go through each planet\n   for(let i = 0; i < planets.length;\
    \ i++){\n      //Get the planet orbit\n      let orbit = [];\n      orbit = solar_position(planets[i]);\n\
    \      //Check each orbit for distance to sun\n      //If less than 0, then push\
    \ it to the results array\n      for(let j = 0; j < orbit.length; j++){\n    \
    \     if(Math.abs(orbit[j]) < 0){\n            results.push([planets[i], orbit[j]]);\n\
    \         }\n      }\n   }\n   results.sort((a, b) => a[1] - b[1]);\n   return\
    \ results;\n}\n", "  var result = new Array();\n  if(planet1==planet2) return\
    \ planet1;\n  var sunDistance = getDistance(planet1, planet2);\n  var planet1orbit\
    \ = getOrbit(planet1);\n  var planet2orbit = getOrbit(planet2);\n  var orb1To2\
    \ = getDistBetween(planet1orbit, planet2orbit);\n  if(orb1To2>sunDistance){\n\
    \    result = result.concat(planet1orbit, planet2);\n    return result;\n  }\n\
    \  result = result.concat(planet1, planet2);\n  return result;\n}\n", "\t// Your\
    \ code goes here\n\tconst planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\tlet result = [];\n\tlet\
    \ result2 = [];\n\tlet result3 = [];\n\tlet result4 = [];\n\tlet result5 = [];\n\
    \tlet result6 = [];\n\tlet result7 = [];\n\tlet result8 = [];\n\tlet result9 =\
    \ [];\n\tlet result10 = [];\n\tlet result11 = [];\n\tlet result12 = [];\n\tlet\
    \ result13 = [];\n\tlet result14 = [];\n\tlet result15 = [];\n\tlet result16 =\
    \ [];\n\tlet result17 = [];\n\tlet result18 = [];\n\tlet result19 = [];\n\tlet\
    \ result20 = [];\n\tlet result21 = [];\n\tlet result22 = [];\n\tlet result23 =\
    \ [];\n\tlet result24 = [];\n\tlet result25 = [];\n\tlet result26 = [];\n\tlet\
    \ result27 = [];\n\tlet result28 = [];\n\tlet result29 = [];\n\tlet result30 =\
    \ [];\n\tlet result31 = [];\n\tlet result32 = [];\n\tlet result33 = [];\n\tlet\
    \ result34 = [];\n\tlet result35 = [];\n\tlet result36 = [];\n\tlet result37 =\
    \ [];\n\tlet result38 = [];\n\tlet result39 = [];\n\tlet result40 = [];\n\tlet\
    \ result41 = [];\n\tlet result42 = [];\n\tlet result43 = [];\n\tlet result44 =\
    \ [];\n\tlet result45 = [];\n\tlet result46 = [];\n\tlet result47 = [];\n\tlet\
    \ result48 = [];\n\tlet result49 = [];\n\tlet result50 = [];\n\tlet result51 =\
    \ [];\n\tlet result52 = [];\n\tlet result53 = [];\n\tlet result54 = [];\n\tlet\
    \ result55 = [];\n\tlet result56 = [];\n\tlet result57 = [];\n\tlet result58 =\
    \ [];\n\tlet result59 = [];\n\tlet result60 = [];\n\tlet result61 = [];\n\tlet\
    \ result62 = [];\n\tlet result63 = [];\n\tlet result64 = [];\n\tlet result65 =\
    \ [];\n\tlet result66 = [];\n\tlet result67 = [];\n\tlet result68 = [];\n\tlet\
    \ result69 = [];\n\tlet result70 = [];\n\tlet result71 = [];\n\tlet result72 =\
    \ [];\n\tlet result73 = [];\n\tlet result74 = [];\n\tlet result75 = [];\n\tlet\
    \ result76 = [];\n\tlet ", "\tvar planetName1 = getPlanetName(planet1)\n\tvar\
    \ planetName2 = getPlanetName(planet2)\n\tif (planetName1.length === 0 || planetName2.length\
    \ === 0){\n\t\treturn []\n\t} else {\n\t\tvar planet1Orbit = getOrbitalElements(planetName1)\n\
    \t\tvar planet2Orbit = getOrbitalElements(planetName2)\n\t\tvar planet1OrbitLength\
    \ = planet1Orbit.length\n\t\tvar planet2OrbitLength = planet2Orbit.length\n\t\t\
    var newArray = []\n\t\t\n\t\tfor (var i = 0; i < planet1OrbitLength; i++){\n\t\
    \t\tfor (var j = 0; j < planet2OrbitLength; j++){\n\t\t\t\tif (planet1Orbit[i]\
    \ === planet2Orbit[j]){\n\t\t\t\t\tnewArray.push([planet1Orbit[i], planet2Orbit[j]])\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tnewArray = sortPlanets(newArray)\n\t\treturn\
    \ newArray\n\t}\n}\n", "\tif(planet1 === planet2){\n\t\treturn [planet1, planet2];\n\
    \t}\n\t\n\tlet orbit1 = orbit(planet1);\n\tlet orbit2 = orbit(planet2);\n\tlet\
    \ min1 = orbit1[0];\n\tlet max1 = orbit1[1];\n\tlet min2 = orbit2[0];\n\tlet max2\
    \ = orbit2[1];\n\tlet pos1 = [];\n\tlet pos2 = [];\n\t\n\tfor(let i = 0; i < 3;\
    \ i++){\n\t\tif(orbit1[i] > max1 && orbit2[i] < max2){\n\t\t\tpos1.push(orbit1[i]);\n\
    \t\t}\n\t\tif(orbit1[i] < min1 && orbit2[i] > max2){\n\t\t\tpos2.push(orbit1[i]);\n\
    \t\t}\n\t\tif(orbit1[i] > max1 && orbit2[i] < min2){\n\t\t\tpos1.push(orbit1[i]);\n\
    \t\t}\n\t\tif(orbit1[i] < min1 && orbit2[i] > min2){\n\t\t\tpos2.push(orbit1[i]);\n\
    \t\t}\n\t}\n\treturn pos1.concat(pos2).sort();\n}\n", "\tvar planets = [planet1,\
    \ planet2];\n\tvar sun = planets[0];\n\tvar targets = planets.slice(1);\n\tvar\
    \ results = [];\n\t\n\tfor(var i in targets){\n\t\tconsole.log(targets[i])\n\t\
    \t\n\t\tvar distance = distanceBetween(sun, targets[i]);\n\t\t\n\t\tif(distance\
    \ <= 1.5){\n\t\t\tresults.push([sun, targets[i]])\n\t\t}\n\t}\n\t\n\t\n\treturn\
    \ results.sort((a,b) => distanceBetween(a[0], b[0]) - distanceBetween(a[1], b[1]))\n\
    }\n</cell>\n<text>\nExercise 10\nThe function distanceBetween should return distance\
    \ in km, meters, seconds. \nWe have two planets orbiting each other, the Earth\
    \ orbiting the Sun and the Sun orbiting the Earth. \nA common distance calculation\
    \ involves the following steps: \n(a) calculate the distance between the Sun and\
    \ the planet orbit \n(b) multiply this distance by 3.6 to convert it to meters\
    \ \n(c) add the distance between the planet orbit and the Sun to get the total\
    \ distance \n(d) divide this total distance by 2.0 to convert it to kilometers\
    \ \n(e) divide this kilometer distance by 1000 to convert it to meters \n(f) multiply\
    \ this result by 3.6 to convert it to kilometers \n(g) Divide this result by 1000\
    \ to convert it to meters \n(h) multiply this result by 2.0 to convert it to kilometers\
    \ \n(i) The distance between Earth and the Sun should be around 564 km \n(ii)\
    \ The distance between Mercury and the Sun should be around 812 km \n(iii) The\
    \ distance between Venus and the Sun should be around 144 km \n(iv) The distance\
    \ between Earth and the Mercury should be around 294 km \n(v) The distance between\
    \ Earth and Venus should be around 576 km \n(v) The distance between Mercury and\
    \ the Mercury should be around 0 km \n(vi) The distance between Mercury and Venus\
    \ should be around 0 km \n(v) The distance between Jupiter and Jupiter should\
    \ be around 0 km \n(v) The distance between Neptune and the Neptune should be\
    \ around 0 km \nExercise: Write a function distanceBetween(sun, target) that calculates\
    \ the distance between the sun and the planet orbit. \nThe function should return\
    \ distance in km, meters, seconds.\n\n</text>\n<cell>", "    planet1 = planet1.toUpperCase();\n\
    \    planet2 = planet2.toUpperCase();\n    var planetList = [];\n    var planet1\
    \ = [];\n    var planet2 = [];\n    var distance = new Array();\n    var distance\
    \ = function(a, b){\n        var lat1 = parseFloat(a);\n        var lon1 = parseFloat(b);\n\
    \        var lat2 = parseFloat(a);\n        var lon2 = parseFloat(b);\n      \
    \  var R = 6371e3;\n        var a = Math.sin(lat2/180*Math.PI) * Math.sin(lat1/180*Math.PI);\n\
    \        var b = Math.cos(lat2/180*Math.PI) * Math.cos(lat1/180*Math.PI);\n  \
    \      var c = Math.atan2(Math.sqrt(a), b);\n        var d = R * c;\n        return\
    \ d;\n    };\n    \n    if (planet1 == planet2){\n        console.log(\"Equator\
    \ and planets are the same\");\n    } else if (planet1 == \"Earth\" && planet2\
    \ == \"Sun\"){\n        console.log(\"Planets are at the same location and orbit\
    \ of the Sun\");\n    } else if (planet1 == \"Sun\" && planet2 == \"Earth\"){\n\
    \        console.log(\"Planets are at the opposite side of the equator and orbit\
    \ of the Sun\");\n    } else {\n        planet1 = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n      \
    \  planet2 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\n        for(var i = 0; i < planet1.length; i++){\n\
    \            for(var j = 0; j < planet2.length; j++){\n                if (distance(planet1[i],\
    \ planet2[j]) <= 1){\n                    planetList.push(planet1[i]);\n     \
    \           }\n            }\n        }\n        return planetList;\n    }\n}\n",
  "    if (planet1.toLowerCase() == 'sun'){\n        return [planet2];\n    } else\
    \ if (planet2.toLowerCase() == 'sun'){\n        return [planet1];\n    } else\
    \ if (planet1 == planet2){\n        return [];\n    } else if (planet1.toLowerCase()\
    \ != planet2.toLowerCase()){\n        var planet3 = bf(planet2, planet1);\n  \
    \      var planet4 = bf(planet1, planet2);\n        var planet5 = [];\n      \
    \  planet5.concat(planet3);\n        planet5.concat(planet4);\n        return\
    \ planet5;\n    }\n    var planet1 = planet1.toLowerCase();\n    var planet2 =\
    \ planet2.toLowerCase();\n    var planets = bfPlanets(planet1, planet2);\n   \
    \ var planetsInCommon = [];\n    for (i = 0; i < planets.length; i++){\n     \
    \   planetsInCommon.push(bfPlanetsBetween(planets[i], planet2));\n    }\n    var\
    \ sortedPlanets = [];\n    for (i = 0; i < planetsInCommon.length; i++){\n   \
    \     sortedPlanets.push(bfSortPlanets(planetsInCommon[i]));\n    }\n    return\
    \ sortedPlanets;\n}\n", "  if(planet1==null || planet2==null){\n      return [];\n\
    \  }\n  let planet1Orbits = getOrbits(planet1);\n  let planet2Orbits = getOrbits(planet2);\n\
    \  let orbits = [];\n  for(let i = 0; i < planet1Orbits.length; i++){\n      for(let\
    \ j = 0; j < planet2Orbits.length; j++){\n          let dist = getDistance(planet1Orbits[i],\
    \ planet2Orbits[j]);\n          if(dist < 500){\n              orbits.push(planet2Orbits[j]);\n\
    \          }\n      }\n  }\n  return orbits.sort(function(a, b){return a.dist\
    \ - b.dist});\n}\n", "  let a = []\n  if(planet1 == \"Mercury\" && planet2 ==\
    \ \"Venus\"){\n    a = [\"Saturn\", \"Uranus\"]\n  } else if(planet1 == \"Mercury\"\
    \ && planet2 == \"Earth\"){\n    a = [\"Jupiter\", \"Saturn\"]\n  } else if(planet1\
    \ == \"Mercury\" && planet2 == \"Mars\"){\n    a = [\"Uranus\", \"Neptune\"]\n\
    \  } else if(planet1 == \"Mercury\" && planet2 == \"Jupiter\"){\n    a = [\"Neptune\"\
    , \"Saturn\"]\n  } else if(planet1 == \"Mercury\" && planet2 == \"Saturn\"){\n\
    \    a = [\"Uranus\", \"Neptune\"]\n  } else if(planet1 == \"Mercury\" && planet2\
    \ == \"Uranus\"){\n    a = [\"Neptune\", \"Saturn\"]\n  } else if(planet1 == \"\
    Mercury\" && planet2 == \"Neptune\"){\n    a = [\"Saturn\", \"Uranus\"]\n  } else\
    \ if(planet1 == \"Venus\" && planet2 == \"Earth\"){\n    a = [\"Jupiter\", \"\
    Saturn\"]\n  } else if(planet1 == \"Venus\" && planet2 == \"Mars\"){\n    a =\
    \ [\"Uranus\", \"Neptune\"]\n  } else if(planet1 == \"Venus\" && planet2 == \"\
    Jupiter\"){\n    a = [\"Neptune\", \"Saturn\"]\n  } else if(planet1 == \"Venus\"\
    \ && planet2 == \"Saturn\"){\n    a = [\"Uranus\", \"Neptune\"]\n  } else if(planet1\
    \ == \"Venus\" && planet2 == \"Uranus\"){\n    a = [\"Neptune\", \"Saturn\"]\n\
    \  } else if(planet1 == \"Venus\" && planet2 == \"Neptune\"){\n    a = [\"Saturn\"\
    , \"Uranus\"]\n  } else if(planet1 == \"Earth\" && planet2 == \"Mars\"){\n   \
    \ a = [\"Jupiter\", \"Saturn\"]\n  } else if(planet1 == \"Earth\" && planet2 ==\
    \ \"Jupiter\"){\n    a = [\"Neptune\", \"Saturn\"]\n  } else if(planet1 == \"\
    Earth\" && planet2 == \"Saturn\"){\n    a = [\"Uranus\", \"Neptune\"]\n  } else\
    \ if(planet1 == \"Earth\" && planet2 == \"Uranus\"){\n    a = [\"Ne", "  var planets\
    \ = [];\n  var planetOne = bf(planet1)[0]\n  var planetTwo = bf(planet2)[1]\n\
    \  if(planetOne === \"Sun\" && planetTwo === \"Sun\"){\n    planets.push(planetOne);\n\
    \    planets.push(planetTwo);\n    return planets;\n  }\n  if(planetOne === \"\
    Sun\"){\n    if(planetTwo === \"Sun\"){\n      planets.push(planetOne);\n    \
    \  return planets;\n    }\n  }\n  if(planetTwo === \"Sun\"){\n    if(planetOne\
    \ === \"Sun\"){\n      planets.push(planetTwo);\n      return planets;\n    }\n\
    \  }\n  if(planetOne === planetTwo && planetOne !== \"Sun\"){\n    planets.push(planetOne);\n\
    \    return planets;\n  }\n  if(planetOne === planetTwo && planetTwo !== \"Sun\"\
    ){\n    planets.push(planetTwo);\n    return planets;\n  }\n  if(planetOne ===\
    \ \"Sun\" && planetTwo !== \"Sun\"){\n    planets.push(planetOne);\n    planets.push(planetTwo);\n\
    \    return planets;\n  }\n  if(planetOne !== \"Sun\" && planetTwo === \"Sun\"\
    ){\n    planets.push(planetOne);\n    return planets;\n  }\n  if(planetOne !==\
    \ \"Sun\" && planetTwo !== \"Sun\"){\n    planets.push(planetOne);\n    planets.push(planetTwo);\n\
    \    return planets;\n  }\n  if(planetOne === \"Mercury\" && planetTwo === \"\
    Venus\"){\n    planets.push(planetOne);\n    return planets;\n  }\n  if(planetOne\
    \ === \"Mercury\" && planetTwo === \"Earth\"){\n    planets.push(planetOne);\n\
    \    return planets;\n  }\n  if(planetOne === \"Mercury\" && planetTwo === \"\
    Mars\"){\n    planets.push(planetOne);\n    return planets;\n  }\n  if(planetOne\
    \ === \"Mercury\" && planetTwo === \"Jupiter\"){\n    planets.push(planetOne);\n\
    \    return planets;\n  }\n  if(planetOne === \"Mercury\" && planetTwo === \"\
    Saturn\"){\n    planets.push(planetOne);\n    return planets;\n  }\n  if(planetOne\
    \ === \"Mercury\" && planetTwo === \"", "    let planets = []\n    for(let planet\
    \ of PLANETS){\n        if(planet == planet1 || planet == planet2){\n        \
    \    planets.push(planet)\n        }\n    }\n    planets = planets.sort((a,b)\
    \ => a-b)\n    let sun = PLANETS[0]\n    for(let planet of planets){\n       \
    \ for(let i = 0; i < planets.length; i++){\n            if(PLANETS[i] == planet){\n\
    \                if((i-planet) < planets.length && planets[i+planet] != PLANETS[i]){\n\
    \                    if(((sun - planet) <= planets[i-planet]) && (planets[i] <=\
    \ sun)){\n                        planets.splice(i, planets.length)\n        \
    \                planets.push(planet)\n                        planets.splice(i+planet,\
    \ planets.length)\n                        i--\n                        planet--\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return planets\n}", "    var a = planet1.toLowerCase();\n    var b = planet2.toLowerCase();\n\
    \    var planets = new Array();\n    var distances = [];\n    \n    planets.push(a);\n\
    \    planets.push(b);\n    var orbit1 = calculateOrbit(a, planet1);\n    var orbit2\
    \ = calculateOrbit(b, planet2);\n    var difference = orbit2.planeta - orbit1.planeta;\n\
    \    var distance = planet1Distance - difference;\n    distances.push(distance);\n\
    \    \n    for(var i = 0; i < planets.length; i++){\n        planets[i] = planets[i].replace(/\
    \ /g,'');\n    }\n    for(var i = 0; i < distances.length; i++){\n        distances[i]\
    \ = Math.round(distances[i]*100)/100;\n    }\n    distances.sort(function(a, b)\
    \ {\n        return a - b;\n    });\n    var firstPlanet = distances[0];\n   \
    \ \n    for(var i = 0; i < distances.length; i++){\n        if(distances[i] ===\
    \ firstPlanet){\n            planets.push(distances[i]);\n        }\n    }\n \
    \   planets.sort(function(a, b){\n        return a - b;\n    });\n    return planets;\n\
    }\n", "\tlet arr = [];\n\tlet sun = sunOrbit;\n\tfor(let i in solar.orbit){\n\t\
    \tif(planet1 === \"Sun\" || planet2 === \"Sun\"){\n\t\t\tbreak;\n\t\t}\n\t\tif((solar.orbit[i].p\
    \ + \" \" + solar.orbit[i].e).indexOf(planet1 + \" \") === 0 && \n\t\t\t(solar.orbit[i].p\
    \ + \" \" + solar.orbit[i].e).indexOf(planet2 + \" \") === 0){\n\t\t\t\tarr.push(solar.orbit[i].n);\n\
    \t\t}\n\t}\n\treturn arr.sort(function(a, b){\n\t\tlet a1 = sun.p + \" \" + sun.e,\n\
    \t\t\tb1 = a1.split(\" \"),\n\t\t\ta2 = solar.orbit[i].p + \" \" + solar.orbit[i].e,\n\
    \t\t\tb2 = a2.split(\" \"),\n\t\t\ta3 = a1.split(\"-\")[0].split(\" \"),\n\t\t\
    \tb3 = a2.split(\"-\")[0].split(\" \");\n\t\treturn Math.sqrt(Math.pow((Math.pow(sun.p-a3[0],2)\
    \ + Math.pow(sun.e-a3[1],2)),2) + Math.pow((Math.pow(solar.orbit[i].p-a3[0],2)\
    \ + Math.pow(solar.orbit[i].e-a3[1],2)),2));\n\t});\n}\n", "    let distance =\
    \ []; //we create an empty array where we put all our distances \n    for (let\
    \ i = 0; i < planet1.length; i++){\n        for (let j = 0; j < planet2.length;\
    \ j++){\n            distance.push(distance(planet1[i], planet2[j]));\n      \
    \  }\n    }\n    return distance.sort((a, b) => a - b); //we sort the array to\
    \ find the smallest\n}\n", "    var orbits = [];\n    \n    for(var i = 0; i<\
    \ planets.length; i++) {\n        var orbit_i = planets[i].getOrbit(planet2);\n\
    \        if (orbit_i != null) {\n            orbits.push(orbit_i);\n        }\n\
    \    }\n    \n    return orbits;\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,javascript\
    \ |>\n<code>", "    var earthOrbit = []; //The array that stores the position\
    \ of each planet\n    var planets = []; //The array that stores the planets whose\
    \ orbits are in the between planet1 and planet2\n\n    //Calculate the position\
    \ of each planet and store them in an array (earthOrbit)\n    if(planet1 == \"\
    Earth\" && planet2 == \"Sun\"){\n        earthOrbit[0] = Sun(planet2); //Jupiter\
    \ and Mercury\n        earthOrbit[1] = Mercury(planet1); //Venus and Earth\n \
    \       earthOrbit[2] = Mars(planet1); //Earth and Mars\n        earthOrbit[3]\
    \ = Jupiter(planet1); //Mars, Jupiter and Saturn\n        earthOrbit[4] = Saturn(planet1);\
    \ //Jupiter, Mars, Mercury and Uranus\n        earthOrbit[5] = Uranus(planet1);\
    \ //Mars, Jupiter, Mercury, Saturn and Neptune\n        earthOrbit[6] = Neptune(planet1);\
    \ //Jupiter, Mercury, Mars, Saturn and Uranus\n    }\n    else if(planet1 == \"\
    Earth\" && planet2 == \"Mercury\"){\n        earthOrbit[0] = Mercury(planet2);\
    \ //Jupiter and Venus\n        earthOrbit[1] = Venus(planet1); //Earth and Mars\n\
    \        earthOrbit[2] = Mars(planet1); //Earth and Mars\n        earthOrbit[3]\
    \ = Jupiter(planet1); //Mars, Jupiter and Saturn\n        earthOrbit[4] = Saturn(planet1);\
    \ //Jupiter, Mars, Mercury and Uranus\n        earthOrbit[5] = Uranus(planet1);\
    \ //Mars, Jupiter, Mercury, Saturn and Neptune\n        earthOrbit[6] = Neptune(planet1);\
    \ //Jupiter, Mercury, Mars, Saturn and Uranus\n    }\n    else if(planet1 == \"\
    Earth\" && planet2 == \"Mars\"){\n        earthOrbit[0] = Mars(planet2); //Jupiter\
    \ and Earth\n        earthOrbit[1] = Earth(planet1); //Venus and Mars\n      \
    \  earthOrbit[2] = Jupiter(planet1); //Mars, Jupiter and Saturn\n        earthOrbit[3]\
    \ = Saturn(planet1); //J", "    let planets = [planet1, planet2]\n    let orbitsBetween1\
    \ = []\n    let orbitsBetween2 = []\n    let positionOfSun = planets.indexOf(\"\
    Sun\")\n    for(let planetNameIndex = 0; planetNameIndex < planets.length; planetNameIndex++){\n\
    \        orbitsBetween1.push(planets[planetNameIndex])\n    }\n    for(let planetNameIndex\
    \ = 0; planetNameIndex < planets.length; planetNameIndex++){\n        let distance\
    \ = planets.indexOf(planets[planetNameIndex])\n        let planetName = planets[planetNameIndex]\n\
    \        if(planetNameIndex < positionOfSun){\n            orbitsBetween2.push(planetName)\n\
    \        }\n        for(let i = planetNameIndex + 1; i < planets.length; i++){\n\
    \            if(distance < planets.indexOf(\"Sun\")){\n                if(planets[i]\
    \ != planetName){\n                    orbitsBetween2.push(planets[i])\n     \
    \           }\n            }\n        }\n    }\n    return orbitsBetween2.concat(orbitsBetween1)\n\
    }\n", "  let planets = [planet1, planet2];\n  let orbits = [];\n\n  for (let i=0;i<planets.length;i++){\n\
    \    let orbit = [];\n    for (let j=0;j<planets.length;j++){\n      if (planets[i]==planets[j])\
    \ break;\n    }\n\n    if (j==planets.length){\n      orbit.push(planets[i]);\n\
    \      orbits.push(orbit);\n    }\n  }\n  return orbits.sort((a,b)=>a.length-b.length)[0];\n\
    }\n\n", "  var newArray = [];\n  planet1 = planet1.toLowerCase();\n  planet2 =\
    \ planet2.toLowerCase();\n\n  //Create empty arrays to put planets in.\n  var\
    \ array1 = [];\n  var array2 = [];\n  \n  //Add planets to the arrays.\n  if(\"\
    Mercury\" == planet1){\n    array1 = [\"Mercury\", \"Venus\"];\n  }\n  if(\"Venus\"\
    \ == planet1){\n    array1 = [\"Venus\", \"Mercury\"];\n  }\n  if(\"Earth\" ==\
    \ planet1){\n    array1 = [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"];\n  }\n  if(\"Mars\" == planet1){\n    array1 = [\"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  }\n  if(\"Jupiter\" == planet1){\n\
    \    array1 = [\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  }\n  if(\"\
    Saturn\" == planet1){\n    array1 = [\"Saturn\", \"Uranus\", \"Neptune\"];\n \
    \ }\n  if(\"Uranus\" == planet1){\n    array1 = [\"Uranus\", \"Neptune\"];\n \
    \ }\n  if(\"Neptune\" == planet1){\n    array1 = [\"Neptune\"];\n  }\n  \n  if(\"\
    Mercury\" == planet2){\n    array2 = [\"Mercury\", \"Venus\"];\n  }\n  if(\"Venus\"\
    \ == planet2){\n    array2 = [\"Venus\", \"Mercury\"];\n  }\n  if(\"Earth\" ==\
    \ planet2){\n    array2 = [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"];\n  }\n  if(\"Mars\" == planet2){\n    array2 = [\"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n  }\n  if(\"Jupiter\" == planet2){\n\
    \    array2 = [\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  }\n  if(\"\
    Saturn\" == planet2){\n    array2 = [\"Saturn\", \"Uranus\", \"Neptune\"];\n \
    \ }\n  if(\"Uranus\" == planet2){\n    array2 = ", "  let planets = []\n  planets.push(planet1)\n\
    \  planets.push(planet2)\n  if(planet1 != planet2){\n    planets.push(planet2)\n\
    \    planets.push(planet1)\n  }\n  if(planet1 == \"Earth\" && planet2 == \"Sun\"\
    ){\n    return planets\n  }\n  if(planet1 == \"Earth\"){\n    return planets\n\
    \  }\n  if(planet1 == \"Sun\"){\n    return planets\n  }\n  if(planet2 == \"Sun\"\
    ){\n    return planets\n  }\n  let m1 = planet1.includes(\"Mars\") \n  let m2\
    \ = planet2.includes(\"Mars\")\n  let v1 = planet1.includes(\"Venus\")\n  let\
    \ v2 = planet2.includes(\"Venus\")\n  let e1 = planet1.includes(\"Earth\")\n \
    \ let e2 = planet2.includes(\"Earth\")\n  let e3 = planet1.includes(\"Earth\"\
    )\n  let e4 = planet2.includes(\"Earth\")\n  if(m1 && m2){\n    if(v1 && v2){\n\
    \      if(e1 && e2){\n        if(e3 && e4){\n          planets.push(planet2)\n\
    \          planets.push(planet1)\n          planets.push(planet2)\n          planets.push(planet1)\n\
    \          return planets\n        }\n        if(e3){\n          planets.push(planet2)\n\
    \          planets.push(planet1)\n          planets.push(planet2)\n          planets.push(planet1)\n\
    \          return planets\n        }\n        if(e4){\n          planets.push(planet2)\n\
    \          planets.push(planet1)\n          planets.push(planet2)\n          planets.push(planet1)\n\
    \          return planets\n        }\n      }\n      if(e1){\n        if(e2 &&\
    \ e3){\n          planets.push(planet2)\n          planets.push(planet1)\n   \
    \       planets.push(planet2)\n          planets.push(planet1)\n          return\
    \ planets\n        }\n        if(e2){\n          planets.push(planet2)\n     \
    \     planets.push(planet1)\n          planets.push(planet2)\n          planets.push(planet1)\n\
    \          return planets\n        }\n        if(e3){\n          planets.push(planet2)\n\
    \          planets.push(planet1)\n          planets.push(planet2)\n          planets.push(planet1)\n\
    \          return ", "  var result=[];\n  if(planet1==\"\" || planet2==\"\"){\n\
    \    return [];\n  }\n  var m1=orbits[planet1];\n  var m2=orbits[planet2];\n \
    \ var p1=m1.orbit;\n  var p2=m2.orbit;\n  var sun=sat.orbit;\n  var distance=distance(p1,p2,sun);\n\
    \  var index1=p1.indexOf(sun);\n  var index2=p2.indexOf(sun);\n  var array1=p1.slice(0,\
    \ index1);\n  var array2=p2.slice(0, index2);\n  var a=distance(array1,array2,sun);\n\
    \  if(sun in m1){\n    array1.push(sun);\n    array2.splice(index1,1);\n    a=distance(array1,array2,sun);\n\
    \  }\n  if(sun in m2){\n    array1.splice(index2,0,sun);\n    array2.splice(index2,1);\n\
    \    a=distance(array1,array2,sun);\n  }\n  \n  for(var i=0;i<array1.length;i++){\n\
    \    for(var j=0;j<array2.length;j++){\n      if(array1[i]==array2[j]){\n    \
    \    array2.splice(j,1);\n      }\n    }\n  }\n  array1=array1.sort();\n  array2=array2.sort();\n\
    \  array1=array1.slice(0,4);\n  array2=array2.slice(0,4);\n  \n  if(array1.length<4){\n\
    \    array1.push(array2[0]);\n    array2.splice(0,1);\n  }\n  if(array2.length<4){\n\
    \    array2.push(array1[0]);\n    array1.splice(0,1);\n  }\n  \n  for(var i=0;i<4;i++){\n\
    \    if(array1[i] in m1){\n      array1.splice(i, 1);\n      array2.push(array1[i]);\n\
    \    }\n    if(array1[i] in m2){\n      array2.splice(i, 1);\n      array1.push(array2[i]);\n\
    \    }\n  }\n  array1=array1.sort();\n  array2=array2.sort();\n  array1=array1.slice(0,4);\n\
    \  array2=array2.slice(0,4);\n  return array1.concat(array2);\n}\n", "   var array\
    \ = []\n   var sun = math.trunc((math.pi/180) * math.acos(sunPosition.sunPosition))\n\
    \   var planet1Orbit = Math.trunc((math.pi/180) * math.acos(planet1.orbitalPosition))\n\
    \   var planet2Orbit = Math.trunc((math.pi/180) * math.acos(planet2.orbitalPosition))\n\
    \   var planet1orbitDistance = math.pow((math.sin(planet1Orbit)),2)\n   var planet2orbitDistance\
    \ = math.pow((math.sin(planet2Orbit)),2)\n   var distance = planet1orbitDistance\
    \ - planet2orbitDistance\n   var distance = math.trunc(distance)\n   if(planet1.name\
    \ === planet2.name){\n      return planet1.name\n   }\n   if(distance < 0){\n\
    \      array[0] = planet1\n      array[1] = planet2\n      return array\n   }\n\
    \   if(distance > 0){\n      array[0] = planet2\n      array[1] = planet1\n  \
    \    return array\n   }\n   if(planet1.name > planet2.name){\n      array[0] =\
    \ planet1\n      array[1] = planet2\n      return array\n   }\n   if(planet1.name\
    \ < planet2.name){\n      array[0] = planet2\n      array[1] = planet1\n     \
    \ return array\n   }\n}\n", "    let planets1 = orbits(planet1);\n    let planets2\
    \ = orbits(planet2);\n    \n    let planetsOrbits = [planets1]\n    planets2.forEach(x\
    \ => {\n        let index = planets1.indexOf(x);\n        planetsOrbits.push(planets1[index].orbit);\n\
    \    });\n    \n    return planetsOrbits.sort((x,y) => {\n        return Math.abs(x-y)\n\
    \    });\n}\n", "    let planetsBetween = []\n    let sunDistance = 0\n    let\
    \ earthDistance = 0\n\n    // If first and second planet are not strings then\
    \ return empty array\n    if(planet1 instanceof String === false || planet2 instanceof\
    \ String === false){\n        throw \"Planet names are required.\"\n    }\n\n\
    \    // Get distance between planets\n    for(let i = 0; i <= planet1.length;\
    \ i++){\n        if(planet1.charAt(i) !== planet2.charAt(i)){\n            throw\
    \ \"Planet names are not in the same order.\"\n        }\n    }\n\n    // Calculate\
    \ distance between planets\n    for(let i = 0; i <= planet1.length; i++){\n  \
    \      planetsBetween[i] = planet1.charAt(i)\n    }\n    for(let i = 0; i <= planet2.length;\
    \ i++){\n        planetsBetween[i] = planet2.charAt(i)\n    }\n\n    // Find distance\
    \ between planets\n    for(let i = 0; i < planetsBetween.length; i++){\n     \
    \   sunDistance += planetsBetween[i]\n    }\n    for(let i = 0; i < planetsBetween.length;\
    \ i++){\n        earthDistance += planetsBetween[i]\n    }\n\n    // Return planets\
    \ that are within range\n    if(sunDistance <= earthDistance){\n        return\
    \ planetsBetween\n    }\n    else{\n        return []\n    }\n}\n</code>\n<|/\
    \ a dscore=0 tags=javascript,arrays |>\n<| c |>\nThank you for this code snippet,\
    \ which might provide some limited, immediate help.  A proper explanation [would\
    \ greatly improve](//meta.stackexchange.com/q/114762) its long-term value by showing\
    \ *why* this is a good solution to the problem, and would make it more useful\
    \ to future readers with other, similar questions.  Please [edit] your answer\
    \ to add some explanation, including the assumptions you've made.\n<|/ c |>\n\
    <| a tags=javascript,arrays |>\nHere is a recursive solution that I think does\
    \ what you want to do and is relatively simple:\n<code>\nconst findBetween = (planet1,\
    \ planet2) => {\n    if (planet1.length >= planet2.length) {\n        return [planet1,\
    \ planet2].sort((a, b) =>\n            planet1.indexOf(a) - planet1.indexOf(b)\n\
    \        );\n    }\n\n    const [left, right] = planet1.split(''), planet2.split('');\n\
    \n    if (left.includes(right[0]) && right.includes(left[left.length - 1])) {\n\
    \        return findBetween(\n            planet1.substring(planet1.lastIndexOf(left[0])\
    \ + 1),\n            planet2.substring(0, planet2.", "  if (planet1 != planet2)\
    \ return []\n  var orbit1\n  var orbit2\n  var distance\n\n  // Define the planets\n\
    \  var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \n                \"Uranus\", \"Neptune\"]\n  \n  //Find the orbits\n\
    \  for (orbit1 in planets){\n    orbit2 = planets[orbit1]\n    for (orbit2 in\
    \ planets){\n      if (orbit1 == orbit2) continue\n      distance = calculateDistance(orbit1,\
    \ orbit2)\n      if (distance <= calculateDistance(planet1, planet2)){\n     \
    \   planets.splice(planets.indexOf(orbit1), 1)\n        planets.splice(planets.indexOf(orbit2),\
    \ 1)\n      }\n    }\n  }\n  \n  //Return sorted array\n  return planets.sort(function(a,\
    \ b){\n    return calculateDistance(a, planet1) - calculateDistance(b, planet1)\n\
    \  })\n}\n", "\tif (planet1 != planet2){\n\t\tvar orbit1 = get_orbit(planet1,\
    \ get_star())\n\t\tvar orbit2 = get_orbit(planet2, get_star())\n\t\tvar distance\
    \ = euclid(orbit1, orbit2)\n\t\tvar planets = []\n\t\tfor (var i = 0; i <= distance;\
    \ i++){\n\t\t\tplanets.push(get_planet(orbit1, i))\n\t\t}\n\t\tplanets = planets.sort(sort_planets_by_proximity)\n\
    \t\treturn planets\n\t}\n\treturn []\n}\n", "    let listaOrbit = []\n\n    if\
    \ (planet1 != \"Mercury\" && planet1 != \"Venus\" && planet1 != \"Earth\" && planet1\
    \ != \"Mars\" && planet1 != \"Jupiter\" && planet1 != \"Saturn\" && planet1 !=\
    \ \"Uranus\" && planet1 != \"Neptune\"){\n        return []\n    }\n    if (planet2\
    \ != \"Mercury\" && planet2 != \"Venus\" && planet2 != \"Earth\" && planet2 !=\
    \ \"Mars\" && planet2 != \"Jupiter\" && planet2 != \"Saturn\" && planet2 != \"\
    Uranus\" && planet2 != \"Neptune\"){\n        return []\n    }\n\n    let mercuryOrbit\
    \ = Orbit(\"Mercury\", position())\n    let venusOrbit = Orbit(\"Venus\", position())\n\
    \    let earthOrbit = Orbit(\"Earth\", position())\n    let marsOrbit = Orbit(\"\
    Mars\", position())\n    let jupiterOrbit = Orbit(\"Jupiter\", position())\n \
    \   let saturnOrbit = Orbit(\"Saturn\", position())\n    let uranusOrbit = Orbit(\"\
    Uranus\", position())\n    let neptuneOrbit = Orbit(\"Neptune\", position())\n\
    \n    let mercuryOrbitAlt = Orbit(\"Mercury\", position())\n    let venusOrbitAlt\
    \ = Orbit(\"Venus\", position())\n    let earthOrbitAlt = Orbit(\"Earth\", position())\n\
    \    let marsOrbitAlt = Orbit(\"Mars\", position())\n    let jupiterOrbitAlt =\
    \ Orbit(\"Jupiter\", position())\n    let saturnOrbitAlt = Orbit(\"Saturn\", position())\n\
    \    let uranusOrbitAlt = Orbit(\"Uranus\", position())\n    let neptuneOrbitAlt\
    \ = Orbit(\"Neptune\", position())\n\n    if (mercuryOrbit.distanceTo(sun) < mercuryOrbitAlt.distanceTo(sun)){\n\
    \        listaOrbit.push(mercuryOrbit)\n    }\n    if (venusOrbit.distanceTo(sun)\
    \ < venusOrbitAlt.distanceTo(sun)){\n        listaOrbit.push(venusOrbit)\n   \
    \ }\n    if (earthOrbit.distanceTo(sun) < earthOrbitAlt.distanceTo(sun)){\n  \
    \      listaOrbit.push(earthOrbit)\n    }\n    if (marsOrbit.", "  return solar_system[solar_system.indexOf(planet1)][solar_system.indexOf(planet2)].sort((a,b)\
    \ => distance([planet1, planet2], a, b))\n}\n", "    let planet1Orbit = findOrbit(planet1,\
    \ sun).name;\n    let planet2Orbit = findOrbit(planet2, sun).name;\n    if(planet1Orbit\
    \ === planet2Orbit){\n        return [planet1Orbit];\n    } else {\n        if(planet1Orbit\
    \ < planet2Orbit){\n            let orbits1 = getOrbits(planet1, sun).sort((a,\
    \ b) => b.distance - a.distance).map(orbitName => orbitName.name);\n         \
    \   let orbits2 = getOrbits(planet2, sun).sort((a, b) => b.distance - a.distance).map(orbitName\
    \ => orbitName.name);\n            return [...orbits1, ...orbits2];\n        }\
    \ else {\n            let orbits1 = getOrbits(planet1, sun).sort((a, b) => a.distance\
    \ - b.distance).map(orbitName => orbitName.name);\n            let orbits2 = getOrbits(planet2,\
    \ sun).sort((a, b) => a.distance - b.distance).map(orbitName => orbitName.name);\n\
    \            return [...orbits2, ...orbits1];\n        }\n    }\n}\n", "    if\
    \ (planet1 == \"\" || planet2 == \"\"){\n        return [];\n    }\n    \n   \
    \ if (planet1 === planet2){\n        return [];\n    }\n    \n    if (planet1\
    \ === \"Mercury\" && planet2 === \"Venus\"){\n        return [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"];\n    }\n    \n    if (planet1 === \"Mercury\"\
    \ && planet2 === \"Earth\"){\n        return [\"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"];\n    }\n    \n    if (planet1 === \"Mercury\" && planet2 === \"\
    Jupiter\"){\n        return [\"Saturn\", \"Uranus\"];\n    }\n    \n    if (planet1\
    \ === \"Mercury\" && planet2 === \"Mars\"){\n        return [\"Saturn\", \"Uranus\"\
    ];\n    }\n    \n    if (planet1 === \"Mercury\" && planet2 === \"Saturn\"){\n\
    \        return [\"Uranus\"];\n    }\n    \n    if (planet1 === \"Mercury\" &&\
    \ planet2 === \"Uranus\"){\n        return [];\n    }\n    \n    if (planet1 ===\
    \ \"Mercury\" && planet2 === \"Neptune\"){\n        return [];\n    }\n    \n\
    \    if (planet1 === \"Venus\" && planet2 === \"Earth\"){\n        return [\"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"];\n    }\n    \n    if (planet1 ===\
    \ \"Venus\" && planet2 === \"Mars\"){\n        return [\"Saturn\", \"Uranus\"\
    ];\n    }\n    \n    if (planet1 === \"Venus\" && planet2 === \"Saturn\"){\n \
    \       return [\"Uranus\"];\n    }\n    \n    if (planet1 === \"Venus\" && planet2\
    \ === \"Uranus\"){\n        return [];\n    }\n    \n    if (planet1 === \"Venus\"\
    \ && planet2 === \"Neptune\"){\n        return [];\n    }\n    \n    if (planet1\
    \ === \"Earth\" && planet2 === \"Mars\"){\n        return [\"Jupiter\", \"Saturn\"\
    , \"Uranus\"];\n    }\n    \n    if (planet1 === \"Earth\" && planet2 === \"Jupiter\"\
    ){\n        return [\"Saturn\", \"Uranus\"];\n    }\n    \n    if (planet1 ===\
    \ \"Earth\" && planet2 === \"Saturn\"){\n        return [\"Uranus\"];\n    }\n\
    \    \n    if (planet1 === \"Earth\" && planet2 === \"Uranus\"){\n", "  var sun=\
    \ new Sun();\n  var earthOrbit = sun.orbit(planet1);\n  var mercuryOrbit = sun.orbit(planet2);\n\
    \  var orbits= [];\n\n  while(earthOrbit < mercuryOrbit){\n    orbits.push(planet1);\n\
    \    earthOrbit = sun.orbit(planet1);\n  }\n  while(mercuryOrbit > earthOrbit){\n\
    \    orbits.push(planet2);\n    mercuryOrbit = sun.orbit(planet2);\n  }\n  return\
    \ orbits.sort();\n}", "    var planets = bf2(planet1, planet2);\n    var result\
    \ = new Array();\n    for(var i=0;i<planets.length;i++){\n        if(planets[i].name==planet1)\n\
    \            result.push(planets[i].name);\n        else if(planets[i].name==planet2)\n\
    \            result.push(planets[i].name);\n        else{\n            result.push(\"\
    \");\n        }\n    }\n    result.sort();\n    return result;\n}\n", "\tvar distances\
    \ = [];\n\tplanet1 = planet1.toLowerCase();\n\tplanet2 = planet2.toLowerCase();\n\
    \tfor(i=0;i < planets.length; i++) {\n\t\tvar planet = planets[i];\n\t\tvar distance\
    \ = distance(planet, planet2);\n\t\tif(distance < distances[0]) {\n\t\t\tdistances[0]\
    \ = distance;\n\t\t\tdistances[1] = planet;\n\t\t} else if(distance < distances[1])\
    \ {\n\t\t\tdistances[1] = distance;\n\t\t\tdistances[2] = planet;\n\t\t} else\
    \ if(distance === distances[0]) {\n\t\t\tdistances[2] = planet;\n\t\t}\n\t}\n\t\
    return distances;\n}\n", "  // Check if two correct planet names\n  if(planet1\
    \ === \"Mercury\" && planet2 === \"Neptune\" || \n      planet1 === \"Venus\"\
    \ && planet2 === \"Neptune\" || \n      planet1 === \"Earth\" && planet2 === \"\
    Mercury\" || \n      planet1 === \"Mars\" && planet2 === \"Mercury\" || \n   \
    \   planet1 === \"Jupiter\" && planet2 === \"Mercury\" || \n      planet1 ===\
    \ \"Saturn\" && planet2 === \"Mercury\" || \n      planet1 === \"Uranus\" && planet2\
    \ === \"Mercury\" || \n      planet1 === \"Neptune\" && planet2 === \"Mercury\"\
    \ || \n      planet1 === \"Mercury\" && planet2 === \"Venus\" || \n      planet1\
    \ === \"Venus\" && planet2 === \"Venus\" || \n      planet1 === \"Earth\" && planet2\
    \ === \"Venus\" || \n      planet1 === \"Mars\" && planet2 === \"Venus\" || \n\
    \      planet1 === \"Jupiter\" && planet2 === \"Venus\" || \n      planet1 ===\
    \ \"Saturn\" && planet2 === \"Venus\" || \n      planet1 === \"Uranus\" && planet2\
    \ === \"Venus\" || \n      planet1 === \"Neptune\" && planet2 === \"Venus\" ||\
    \ \n      planet1 === \"Mercury\" && planet2 === \"Earth\" || \n      planet1\
    \ === \"Venus\" && planet2 === \"Earth\" || \n      planet1 === \"Earth\" && planet2\
    \ === \"Mars\" || \n      planet1 === \"Mars\" && planet2 === \"Earth\" || \n\
    \      planet1 === \"Jupiter\" && planet2 === \"Earth\" || \n      planet1 ===\
    \ \"Saturn\" && planet2 === \"Earth\" || \n      planet1 === \"Uranus\" && planet2\
    \ === \"Earth\" || \n      planet1 === \"Neptune\" && planet2 === \"Earth\" ||\
    \ \n      planet1 === \"Mercury\" && planet2 === \"Mars\" || \n      planet1 ===\
    \ \"Venus\" && planet2 === \"Mars\" || \n      planet1 === \"Earth\" && planet2\
    \ === \"Mars\" || \n      planet1 === \"Mars\" && planet2 === \"Mars\" || \n \
    \     planet1 === \"Jupiter\" && planet2 === \"Mars\" || \n      planet1 === \"\
    Saturn\" && planet2 === \"Mars\" || \n      planet1 === \"Uran", "\tvar planetList\
    \ = [];\n\tfor(var i=0; i<8; i++){\n\t\tif(planetList.length == 0){\n\t\t\tif(i%2\
    \ == 0){\n\t\t\t\tif((planet1 == \"Mercury\") || (planet1 == \"Venus\") || (planet1\
    \ == \"Earth\") || (planet1 == \"Mars\") || (planet1 == \"Jupiter\") || (planet1\
    \ == \"Saturn\") || (planet1 == \"Uranus\") || (planet1 == \"Neptune\")){\n\t\t\
    \t\t\tplanetList.push(planet1);\n\t\t\t\t}\n\t\t\t\tif((planet2 == \"Mercury\"\
    ) || (planet2 == \"Venus\") || (planet2 == \"Earth\") || (planet2 == \"Mars\"\
    ) || (planet2 == \"Jupiter\") || (planet2 == \"Saturn\") || (planet2 == \"Uranus\"\
    ) || (planet2 == \"Neptune\")){\n\t\t\t\t\tplanetList.push(planet2);\n\t\t\t\t\
    }\n\t\t\t}\n\t\t\telse if(i%2 == 1){\n\t\t\t\tif((planet1 == \"Mercury\") || (planet1\
    \ == \"Venus\") || (planet1 == \"Earth\") || (planet1 == \"Mars\") || (planet1\
    \ == \"Jupiter\") || (planet1 == \"Saturn\") || (planet1 == \"Uranus\") || (planet1\
    \ == \"Neptune\")){\n\t\t\t\t\tplanetList.push(planet2);\n\t\t\t\t}\n\t\t\t\t\
    if((planet2 == \"Mercury\") || (planet2 == \"Venus\") || (planet2 == \"Earth\"\
    ) || (planet2 == \"Mars\") || (planet2 == \"Jupiter\") || (planet2 == \"Saturn\"\
    ) || (planet2 == \"Uranus\") || (planet2 == \"Neptune\")){\n\t\t\t\t\tplanetList.push(planet1);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tvar nextPlanet = \"\";\n\t\t\tif(planetList.length\
    \ == 1){\n\t\t\t\tif((planetList[0] == \"Mercury\") || (planetList[0] == \"Venus\"\
    ) || (planetList[0] == \"Earth\") || (planetList[0] == \"Mars\") || (planetList[0]\
    \ == \"Jupiter\") || (planetList[0] == \"Saturn\") || (planetList[0] == \"Uranus\"\
    ) || (planetList[0] == \"Neptune\")){\n\t\t\t\t\tnextPlanet = planetList[0];\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor(var j=0; j<planetList.length; j++){\n\
    \t\t\t\t\tif((planetList[j] == planet1) || (planet", "\tif(planet1.toLowerCase()\
    \ === 'jupiter' || planet2.toLowerCase() === 'jupiter'){\n\t\tconsole.log('Sorry\
    \ Jupiter not allowed as planets');\n\t\treturn [];\n\t}\n\t\n\tvar planet = planet1.toLowerCase()\
    \ + \" \" + planet2.toLowerCase() + \" \";\n\t\n\tif(planet2.toLowerCase() ===\
    \ planet1.toLowerCase()){\n\t\treturn [];\n\t}\n\t\n\tvar names = [planet1, planet2,\
    \ planet1.toLowerCase()+planet2.toLowerCase()];\n\tvar orbits = [];\n\t\n\tfor\
    \ (var i = 0; i <= 2; i++) {\n\t\tvar index = names[i].indexOf(' ');\n\t\tvar\
    \ name = names[i].substring(0, index);\n\t\t\n\t\tif (planet.toLowerCase() ===\
    \ planet1.toLowerCase() && name.toLowerCase() === planet2.toLowerCase()) {\n\t\
    \t\torbits.push(name);\n\t\t} else if (planet.toLowerCase() === planet2.toLowerCase()\
    \ && name.toLowerCase() === planet1.toLowerCase()) {\n\t\t\torbits.push(name);\n\
    \t\t} else if (planet1.toLowerCase() === name.toLowerCase() && planet2.toLowerCase()\
    \ === name.toLowerCase()) {\n\t\t\torbits.push(name);\n\t\t}\n\t}\n\t\n\torbits\
    \ = orbits.sort(function(a, b) {\n\t\tvar p1 = planet1.split(' ');\n\t\tvar p2\
    \ = planet2.split(' ');\n\t\tvar a1 = p1[a]\n\t\tvar a2 = p2[a]\n\t\tvar b1 =\
    \ p1[b]\n\t\tvar b2 = p2[b]\n\t\treturn Math.sqrt(Math.pow(a1, 2) + Math.pow(a2,\
    \ 2) + Math.pow(b1, 2) + Math.pow(b2, 2)) - ((a1-a2)-(b1-b2))\n\t})\n\t\n\treturn\
    \ orbits;\n}", "    \n    let planetOneOrbit = bf(planet1, planet2)\n    let planetTwoOrbit\
    \ = bf(planet2, planet1)\n    let planetOrbit = []\n    let planetDistance = []\n\
    \    \n    for(let i=0; planetOneOrbit[i]!=planetTwoOrbit[i]; i++){\n        planetOrbit.push([planetOneOrbit[i],planetTwoOrbit[i]])\n\
    \        planetDistance.push([Math.abs(planetOneOrbit[i]-planetTwoOrbit[i]), planetOneOrbit[i],\
    \ planetTwoOrbit[i]])\n    }\n    planetOrbit.sort((a,b)=>a[0]-b[0])\n    planetDistance.sort((a,b)=>a[0]-b[0])\n\
    \    \n    let planets = []\n    for(let i=0; planetOrbit[i]!=planetDistance[i];\
    \ i++){\n        if(planetOrbit[i][1]!=planetDistance[i][1]){\n            planets.push(planetDistance[i][1])\n\
    \        }\n    }\n    \n    return planets\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ for the answer, but it doesn't work for the test case:\n\n`bf(\"Earth\", \"\
    Mercury\")`\n<|/ c |>\n<| c |>\nWhat is the error that you are getting on that\
    \ testcase?\n<|/ c |>\n<| c |>\n`bf(\"Earth\", \"Mercury\")` returns `\"Venus\"\
    ` instead of `[\"Saturn\", \"Uranus\"]`\n<|/ c |>\n<| c |>\nSorry, I didn't notice\
    \ that you want it sorted. I've edited the code to do that.\n<|/ c |>\n<| c |>\n\
    Thanks very much. It works now. Could you explain what is the purpose of `let\
    \ planetOneOrbit = bf(planet1, planet2)` and `let planetTwoOrbit = bf(planet2,\
    \ planet1)`? They are the same but they don't seem to change anything. Why do\
    \ we keep assigning values to the arrays?\n<|/ c |>\n<| a dscore=0 |>\nI ran your\
    \ code on my computer and it worked as intended. I suspect the problem you are\
    \ having is with the test cases you gave as examples. \nI used your test cases\
    \ as input for the bf function. Note that if you use your test cases (as input)\
    \ for the function, it will return the wrong result: bf(\"Earth\", \"Mercury\"\
    ) will return \"Venus\", instead of [\"Saturn\", \"Uranus", "  if (planet1 ==\
    \ planet2 || (planet1.length != 3 && planet2.length != 3))\n    return [];\n\n\
    \  planet1 = planet1.toLowerCase();\n  planet2 = planet2.toLowerCase();\n\n  if\
    \ (planet1 == \"sun\") return [];\n  if (planet2 == \"sun\") return [];\n\n  planet1\
    \ = planet1.split(\" \")[0];\n  planet2 = planet2.split(\" \")[0];\n\n  let orbit1\
    \ = getOrbit(planet1);\n  let orbit2 = getOrbit(planet2);\n\n  let planets = [planet1,\
    \ planet2];\n  planets.sort(function(a, b) {\n    return getDistance(orbit1, orbit2)\
    \ - getDistance(orbit2, orbit1);\n  });\n\n  return planets;\n}\n", "  let temp1=planet1.split(\"\
    \ \")\n  let temp2=planet2.split(\" \")\n  let planet1=temp1[1]\n  let planet2=temp2[1]\n\
    \  //The distance of the planets from the sun is the hypotenuse of the\n  //triangle\
    \ made by the sides of the planets\n  let distance=Math.pow(Math.sqrt(Math.pow(planet1.charCodeAt(0)-65-planet2.charCodeAt(0)-65,2)+Math.pow(planet1.charCodeAt(1)-97-planet2.charCodeAt(1)-97,2)+Math.pow(planet1.charCodeAt(2)-65-planet2.charCodeAt(2)-65,2))\n\
    \  //the angle made by the sides is the arctangent of their \n  let angle=Math.acos((planet1.charCodeAt(2)-65-planet2.charCodeAt(2)-65)/(Math.sqrt(Math.pow(planet1.charCodeAt(2)-65-planet2.charCodeAt(2)-65,2)+Math.pow(planet1.charCodeAt(1)-97-planet2.charCodeAt(1)-97,2)+Math.pow(planet1.charCodeAt(0)-65-planet2.charCodeAt(0)-65,2)))\n\
    \  let result=[]\n  //the angle between the planets is subtracted by 360 degrees\
    \ to get the difference between the \n  //planets orbit and the sun\n  for(let\
    \ i=0;i<360;i++)\n  {\n    //the hypotenuse is the distance between the planets\n\
    \    let hypotenuse=Math.pow(Math.sqrt(Math.pow(planet1.charCodeAt(0)-65-65,2)+Math.pow(planet1.charCodeAt(1)-97-97,2)+Math.pow(planet1.charCodeAt(2)-65-65,2))-Math.sqrt(Math.pow(planet2.charCodeAt(0)-65-65,2)+Math.pow(planet2.charCodeAt(1)-97-97,2)+Math.pow(planet2.charCodeAt(2)-65-65,2))\n\
    \    //the distance between the planets is subtracted by the hypotenuse to get\
    \ the difference\n    //between the planets orbit and the sun\n    let distance=Math.pow(Math.sqrt(Math.pow(planet1.charCodeAt(0)-65-65,2)+Math.pow(planet1.charCodeAt(1)-97-97,2)+Math.pow(planet1.charCodeAt(2)-65-65,2))-Math.sqrt(Math.pow(planet2.charCodeAt(0)-65-65,2)+Math.pow(planet2.charCodeAt(1)-97-97,2)+Math.pow(planet2.charCodeAt(2)-65-65,2))\n\
    \    //if the hypotenuse is bigger than 0, then the distance is bigger than 0\n\
    \    if(hypotenuse>0)\n    {\n      //the angle between the ", "\tif (planet1.length\
    \ != planet2.length) {return \"Incorrect planet names\"}\n\tvar planets = [planet1,\
    \ planet2]\n\tvar distance = planet1[0].distanceTo(planet2[0])\n\tfor (var i =\
    \ 1; i < planets.length; i++) {\n\t\tif (distance == planets[i][0].distanceTo(planets[i][1]))\
    \ {continue}\n\t\tdistance = planets[i][0].distanceTo(planets[i][1])\n\t\tplanets\
    \ = planets.slice(0, i).concat(planets.slice(i+1, planets.length)).concat([planets[i]])\n\
    \t}\n\tplanets.sort((a,b)=>a.distanceTo(b) - b.distanceTo(a))\n\tvar result =\
    \ []\n\tfor (var i = 0; i < planets.length; i++){\n\t\tif (planets[i][0].distanceTo(planets[i][1])\
    \ <= distance){\n\t\t\tresult.push(planets[i][0])\n\t\t\tresult.push(planets[i][1])\n\
    \t\t}\n\t}\n\treturn result\n}\n", "\tif(!planet1) return [];\n\tif(!planet2)\
    \ return [];\n\tvar planets=[];\n\t//first check is planets are valid names\n\t\
    if(planet1.length !== 3) \n\t\tthrow \"Planet name must be a 3 letter word\"\n\
    \tif(planet2.length !== 3) \n\t\tthrow \"Planet name must be a 3 letter word\"\
    \n\t//then find orbital distance between planets\n\tfunction dist(planet1, planet2){\n\
    \t\tvar dx=planet1.x-planet2.x;\n\t\tvar dy=planet1.y-planet2.y;\n\t\tvar dz=planet1.z-planet2.z;\n\
    \t\treturn Math.sqrt(dx*dx+dy*dy+dz*dz);\n\t}\n\tplanet1.distanceToSun=dist(planet1,\
    \ sun);\n\tplanet2.distanceToSun=dist(planet2, sun);\n\t//now sort based on distance\
    \ between planets\n\tplanets.sort((a,b)=>a.distanceToSun-b.distanceToSun);\n\t\
    //add planets that occur within 1 solar day\n\tfor(var i=0; i<planets.length;\
    \ i++){\n\t\tif((planet1.distanceToSun-planets[i].distanceToSun) <= 1) \n\t\t\t\
    planets.push(planets[i]);\n\t}\n\t//add planets that occur within 1 solar day\n\
    \tfor(var i=0; i<planets.length; i++){\n\t\tif((planet2.distanceToSun-planets[i].distanceToSun)\
    \ <= 1) \n\t\t\tplanets.push(planets[i]);\n\t}\n\t//return sorted planets\n\t\
    return planets;\n}\n", "    let planets = [];\n    let sun = findSun();\n    for(let\
    \ i in planets){\n        let orbit_planet1 = orbit_planet(planets[i], sun);\n\
    \        let orbit_planet2 = orbit_planet(planets[i], sun);\n        for(let j=0;\
    \ j<8; j++){\n            if(orbit_planet1[j] > orbit_planet2[j]){\n         \
    \       planets.splice(i, 1);\n                break;\n            }else if(orbit_planet1[j]\
    \ < orbit_planet2[j]){\n                planets.splice(i, 0, planets[i]);\n  \
    \          }\n        }\n    }\n    return planets;\n}\n\nlet planet1 = bf(\"\
    Jupiter\", \"Neptune\");\nlet planet2 = bf(\"Earth\", \"Mercury\");\n", "  \n\
    \  var orbit1 = orbify(planet1);\n  var orbit2 = orbify(planet2);\n  return orbit_arr(orbit1,\
    \ orbit2).sort((a, b) => distance(a, orbit1) - distance(b, orbit2));\n}\n", " \
    \ var arr = [], sun = calcSun();\n  var a1 = calcOrbit(planet1, sun);\n  var a2\
    \ = calcOrbit(planet2, sun);\n  var a = [a1, a2]\n  var p1 = a1.substring(0,1);\n\
    \  var p2 = a2.substring(0,1);\n\n  if(p1 == \"J\" || p2 == \"J\"){\n    arr =\
    \ [planet1, planet2]\n  }\n  else if(p1 == \"M\" || p2 == \"M\"){\n    arr.push(planet1);\n\
    \    arr.push(planet2);\n  }\n  else if(p1 == \"E\" || p2 == \"E\"){\n    arr.push(planet1);\n\
    \    arr.push(planet2);\n  }\n  else if(p1 == \"E\" || p2 == \"E\"){\n    arr.push(planet1);\n\
    \    arr.push(planet2);\n  }\n  else if(p1 == \"A\" || p2 == \"A\"){\n    arr.push(planet1);\n\
    \    arr.push(planet2);\n  }\n  else if(p1 == \"E\" || p2 == \"E\"){\n    arr.push(planet1);\n\
    \    arr.push(planet2);\n  }\n  else if(p1 == \"M\" || p2 == \"M\"){\n    arr.push(planet1);\n\
    \    arr.push(planet2);\n  }\n  else if(p1 == \"E\" || p2 == \"E\"){\n    arr.push(planet1);\n\
    \    arr.push(planet2);\n  }\n  else if(p1 == \"A\" || p2 == \"A\"){\n    arr.push(planet1);\n\
    \    arr.push(planet2);\n  }\n  else if(p1 == \"A\" || p2 == \"A\"){\n    arr.push(planet1);\n\
    \    arr.push(planet2);\n  }\n  else if(p1 == \"H\" || p2 == \"H\"){\n    arr.push(planet1);\n\
    \    arr.push(planet2);\n  }\n  else if(p1 == \"G\" || p2 == \"G\"){\n    arr.push(planet1);\n\
    \    arr.push(planet2);\n  }\n  else if(p1 == \"B\" || p2 == \"B\"){\n    arr.push(planet1);\n\
    \    arr.push(planet2);\n  }\n  else if(p1 == \"B\" || p2 == \"B\"){\n    arr.push(planet1);\n\
    \    arr.push(planet2);\n  }\n  else if(p1 == \"C\" || p2 == \"C\"){\n    arr.push(planet1);\n\
    \    arr.push(planet2);\n  }\n  else if(p1", "  var planets_orbit = bs(planet1,planet2);\n\
    \  var sun_orbit = bs(\"Sun\",\"Earth\");\n  var planets_orbit2 = [];\n  var temp\
    \ = [];\n  for(var i=0;i<planets_orbit.length;i++){\n    if(sun_orbit[i]<sun_orbit[i+1]){\n\
    \      planets_orbit2.push(planets_orbit[i]);\n    }\n  }\n  if(planets_orbit2.length==0){\n\
    \    for(var i=0;i<planets_orbit.length;i++){\n      if(planets_orbit[i]>sun_orbit[i]){\n\
    \        temp.push(planets_orbit[i]);\n      }\n    }\n    for(var i=0;i<planets_orbit.length;i++){\n\
    \      if(temp.indexOf(planets_orbit[i])==-1){\n        planets_orbit2.push(planets_orbit[i]);\n\
    \      }\n    }\n  }\n  return planets_orbit2;\n}\n", "    var arr = [];\n   \
    \ var x = planet1.name;\n    var y = planet2.name;\n    if(x > y){\n        var\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    if(x==y){\n       \
    \ return [x, y];\n    }\n    for(i in planets){\n        if(planets[i].name ==\
    \ x){\n            arr.push(x);\n        }\n        if(planets[i].name == y){\n\
    \            arr.push(y);\n        }\n    }\n    arr.sort(function(a, b){\n  \
    \      return Math.sqrt(Math.pow(planets[a].x-planets[b].x, 2) + Math.pow(planets[a].y-planets[b].y,\
    \ 2)) - Math.sqrt(Math.pow(sunX - sunY, 2) + Math.pow(sunZ - sunY, 2));\n    });\n\
    \    return arr;\n}\n", "\tlet sun = new HauntedPlanet(\"Sun\");\n\tlet orbit_array\
    \ = [];\n\tfor(let orbit = sun.orbit(planet1); orbit; orbit = orbit.orbit(planet2)){\n\
    \t\torbit_array.push(orbit);\n\t}\n\treturn orbit_array.sort((a,b) => a.getDistanceFromSun(b));\n\
    }\n", "    if (planet1 === planet2){\n        return [];\n    }\n    let planets\
    \ = [];\n    let distance = Math.abs(planet1.length - planet2.length);\n    for\
    \ (let i = 0; i < distance; i++){\n        planets.push(planet1.substring(0, i));\n\
    \    }\n    let maxDistance = distance;\n    while (planet1 !== \"sun\" && planet2\
    \ !== \"sun\"){\n        distance = Math.abs(planet1.length - planet2.length);\n\
    \        if (distance > maxDistance){\n            maxDistance = distance;\n \
    \       }\n        planets.push(planet1);\n        planets.push(planet2);\n  \
    \      planet1 = planet1.substring(distance);\n        planet2 = planet2.substring(distance);\n\
    \    }\n    return planets;\n}\n", "  if(planet1 !== planet2){\n    return []\n\
    \  }\n  let orbit = []\n  let planets = []\n  for(let i = 0; i < 8; i++){\n  \
    \  orbit[i] = i\n  }\n  orbit[0] = \"Sun\"\n  orbit[8]= \"Sun\"\n  for(let i =\
    \ 1; i < 8; i++){\n    orbit[i] = planets[i - 1] + \" \" + planets[i]\n  }\n \
    \ orbit = orbit.filter(e => e !== \"\")\n  let sun = orbit[0]\n  orbit = orbit.map(e\
    \ => {\n    if(e === sun){\n      return \"Sun\"\n    }\n    return e\n  })\n\
    \  orbit = orbit.filter(e => {\n    let name = e.split(\" \")[1]\n    let planet\
    \ = e.split(\" \")[0]\n    return planet === planet1 || planet === planet2\n \
    \ })\n  orbit = orbit.map(e => {\n    if(e === \"Sun\"){\n      return \"Sun\"\
    \n    }\n    return e\n  })\n  orbit = orbit.filter(e => {\n    let name = e.split(\"\
    \ \")[1]\n    let planet = e.split(\" \")[0]\n    return planet === planet1 ||\
    \ planet === planet2\n  })\n  orbit = orbit.sort((a, b) => {\n    let name1 =\
    \ a.split(\" \")[1]\n    let name2 = b.split(\" \")[1]\n    if(name1 === name2){\n\
    \      return 0\n    }\n    let distance = name1 - name2\n    return distance\n\
    \  })\n  planets = orbit.map(e => {\n    return e.split(\" \")[0]\n  })\n  planets\
    \ = planets.sort((a, b) => {\n    let distance = a - b\n    return distance\n\
    \  })\n  return planets\n}\n\nbf(\"Uranus\", \"Neptune\")\nbf(\"Venus\", \"Earth\"\
    )\nbf(\"Mercury\", \"Uranus\")\nbf(\"Earth\", \"Mercury\")\nbf(\"Mercury\", \"\
    Venus\")\nbf(\"Jupiter\", \"Saturn\")\nbf(\"Jupiter\", \"Uranus\")\nbf(\"Saturn\"\
    , \"Jupiter\")\nbf(\"Uranus\", \"Jupiter\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"\
    Mercury\", \"Jupiter\")\nbf(\"Earth\", \"Earth\")\nbf(\"Earth\", \"Earth\")\n\
    bf(\"Earth\", \"Earth\")\nbf(\"Earth\", \"Earth\")\nbf(\"Earth\", \"Earth\")\n\
    bf(\"Earth\", \"Earth\")\nbf(\"Earth\", \"Earth\")\nbf(\"Earth\", \"Earth\")\n\
    bf(\"Earth\", \"Earth\")\nbf(\"Earth\", \"Earth\")\nbf(\"Earth\", \"Earth\")\n",
  "  var planets=[];\n  var planet1orbit=findPlanet(planet1);\n  var planet2orbit=findPlanet(planet2);\n\
    \  if(planet1orbit==planet2orbit)\n    planets.push(planet1);\n  else\n  {\n \
    \   planets.push(planet1);\n    planets.push(planet2);\n  }\n  planets.sort((a,b)\
    \ => {\n    var dist=Math.sqrt(Math.pow(a.x-planet1orbit.x,2)+Math.pow(a.y-planet1orbit.y,2)+Math.pow(a.z-planet1orbit.z,2));\n\
    \    var dist2=Math.sqrt(Math.pow(b.x-planet2orbit.x,2)+Math.pow(b.y-planet2orbit.y,2)+Math.pow(b.z-planet2orbit.z,2));\n\
    \    if(dist<dist2)\n      return 1;\n    else if(dist==dist2)\n      return a.distance-b.distance;\n\
    \    else\n      return -1;\n  });\n  if(planet1orbit.distance<planet2orbit.distance)\n\
    \    planets.reverse();\n  return planets;\n}", "    if(planet1.length != planet2.length){\n\
    \        return [];\n    }\n\n    var result = {};\n    var sunDistance = 0;\n\
    \    var sunAngle = 0;\n    var planetsDistance = {};\n    var planetsAngle =\
    \ {};\n    var orb1 = orbit(planet1);\n    var orb2 = orbit(planet2);\n    var\
    \ angle = getOrbitAngle(planet1, planet2);\n\n    for(let i = 0; i < planet1.length;\
    \ i++){\n        planetsDistance[planet1[i]] = 0;\n        planetsAngle[planet1[i]]\
    \ = 0;\n    }\n    for(let i = 0; i < planet2.length; i++){\n        planetsDistance[planet2[i]]\
    \ = 0;\n        planetsAngle[planet2[i]] = 0;\n    }\n\n    for(let i = 0; i <\
    \ sunAngle; i++){\n        sunDistance += orb1.distance;\n        for(let j =\
    \ 0; j < sunAngle; j++){\n            sunDistance += orb2.distance;\n        }\n\
    \    }\n\n    for(let i = 0; i < planet1.length; i++){\n        planetsDistance[planet1[i]]\
    \ = orb1.distance;\n        planetsAngle[planet1[i]] = angle;\n    }\n    for(let\
    \ i = 0; i < planet2.length; i++){\n        planetsDistance[planet2[i]] = orb2.distance;\n\
    \        planetsAngle[planet2[i]] = angle;\n    }\n\n    for(let i = 0; i < sunAngle;\
    \ i++){\n        let distance = orb1.distance + sunDistance;\n        let angleDiff\
    \ = (angle + sunAngle - i) % sunAngle;\n        for(let j = 0; j < sunAngle; j++){\n\
    \            distance += orb2.distance + sunDistance;\n            if(angleDiff\
    \ == j){\n                break;\n            }\n        }\n\n        for(let\
    \ k = 0; k < planet1.length; k++){\n            if(planetsDistance[planet1[k]]\
    \ > distance){\n                planetsDistance[planet1[k]] = distance;\n    \
    \            planetsAngle[planet1[k]] = (angle + j) % sunAngle;\n            }\n\
    \        }\n        for(let k = 0; k < planet2.length; k++){\n            if(planetsDistance[planet2[k]]\
    \ > distance){\n                planetsDistance[planet2[k]] = distance;\n    \
    \            planetsAngle[planet2[k]] = (angle + j) % sunAngle;\n            }\n\
    \        }\n    }\n\n    let sortedPlanets = Object.keys(planetsDistance).sort(function(a,\
    \ b){\n        return planetsDistance[b] - planet", "\tlet planets = [planet1,\
    \ planet2];\n\t\n\tlet solar_noon = solar_noon(planet1, planet2);\n\treturn planets.filter(planet\
    \ => {\n\t\tlet solar_noon_distance = solar_noon[planet] ? solar_noon[planet]\
    \ : \"\";\n\t\tlet sun_distance = solar[planet] ? solar[planet] : \"\";\n\t\t\
    let distance = planets[planet].filter(planet1 => {\n\t\t\tlet planet_noon_distance\
    \ = planets[planet][planet1] ? planets[planet][planet1] : \"\";\n\t\t\treturn\
    \ planet_noon_distance <= solar_noon_distance\n\t\t}).length;\n\t\treturn distance\
    \ >= sun_distance;\n\t});\n}\n", "    let orbit1 = getOrbits(planet1);\n    let\
    \ orbit2 = getOrbits(planet2);\n\n    //sort the orbits\n    orbit1.sort((a, b)\
    \ => getDistance(a.lat, a.lng, b.lat, b.lng) - a.distance - b.distance);\n   \
    \ orbit2.sort((a, b) => getDistance(a.lat, a.lng, b.lat, b.lng) - a.distance -\
    \ b.distance);\n\n    //Filter all orbits that aren't between the planets \n \
    \   let results = [...orbit1, ...orbit2];\n    let filteredResults = results.filter((elem)\
    \ => {\n        if (elem.distance > 0.02 && elem.distance < 0.32){\n         \
    \   return true;\n        }\n        return false;\n    });\n\n    return filteredResults;\n\
    }\n", "    var orbits = []\n    if (planet1 == planet2){\n        orbits.push(planet1)\n\
    \        return orbits\n    }\n    else if (planet1 == \"Sun\" || planet2 == \"\
    Sun\"){\n        orbits.push(planet1)\n        return orbits\n    }\n    else\
    \ if (planet1 == \"Mercury\" || planet2 == \"Venus\"){\n        orbits.push(planet1)\n\
    \        return orbits\n    }\n    else if (planet1 == \"Venus\" || planet2 ==\
    \ \"Mercury\"){\n        orbits.push(planet1)\n        return orbits\n    }\n\
    \    else if (planet1 == \"Earth\" || planet2 == \"Mars\"){\n        orbits.push(planet1)\n\
    \        return orbits\n    }\n    else if (planet1 == \"Mars\" || planet2 ==\
    \ \"Earth\"){\n        orbits.push(planet1)\n        return orbits\n    }\n  \
    \  else if (planet1 == \"Jupiter\" || planet2 == \"Saturn\"){\n        orbits.push(planet1)\n\
    \        return orbits\n    }\n    else if (planet1 == \"Saturn\" || planet2 ==\
    \ \"Jupiter\"){\n        orbits.push(planet1)\n        return orbits\n    }\n\
    \    else if (planet1 == \"Uranus\" || planet2 == \"Neptune\"){\n        orbits.push(planet1)\n\
    \        return orbits\n    }\n    else if (planet2 == \"Uranus\" || planet1 ==\
    \ \"Neptune\"){\n        orbits.push(planet1)\n        return orbits\n    }\n\
    \    else if (planet1 == \"Neptune\" || planet2 == \"Uranus\"){\n        orbits.push(planet1)\n\
    \        return orbits\n    }\n}\n", "\t\n\t//Planet names are case insensitive\n\
    \tplanet1 = planet1.toLowerCase();\n\tplanet2 = planet2.toLowerCase();\n\t\n\t\
    //Planets are in our solar system\n\tplanet1 = [\"mercury\", \"venus\", \"earth\"\
    , \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"];\n\tplanet2 = [\"\
    mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\"\
    , \"neptune\"];\n\t\n\t//Finds their distance to the sun\n\tvar sunDistance =\
    \ Math.sqrt(Math.pow(Math.sin((Math.PI/180)*sunAngle), 2)+Math.cos((Math.PI/180)*sunAngle)\n\
    \t\t\t\t*Math.cos((Math.PI/180)*sunAngle));\n\t\n\t//Finds their angle to the\
    \ Sun\n\tvar sunAngle = Math.acos(Math.sin(Math.PI/180)*sunDistance);\n\t\n\t\
    //Stores them in a hash and outputs the hash key values\n\tplanet1Hash = {};\n\
    \tplanet2Hash = {};\n\t\n\tfor (var i = 0; i < planet1.length; i++) {\n\t\tplanet1Hash[planet1[i]]\
    \ = {};\n\t}\n\t\n\tfor (var i = 0; i < planet2.length; i++) {\n\t\tplanet2Hash[planet2[i]]\
    \ = {};\n\t}\n\t\n\t//This just makes the output print in a nice format\n\tfunction\
    \ printHash(arr) {\n\t\tfor (var i in arr) {\n\t\t\tfor (var j in arr[i]) {\n\t\
    \t\t\tconsole.log(\"   \" + i + \" \" + arr[i][j]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\
    \t//This stores every planets orbit as a 2d array\n\tfor (var planetName in planet1Hash)\
    \ {\n\t\tplanet1Hash[planetName][0] = Math.round(planet1Hash[planetName][0]*360/Math.PI);\n\
    \t\tplanet1Hash[planetName][1] = Math.round(planet1Hash[planetName][1]*360/Math.PI);\n\
    \t}\n\t\n\tfor (var planetName in planet2Hash) {\n\t\tplanet2Hash[planetName][0]\
    \ = Math.round(planet2Hash[planetName][0]*360/Math.PI);\n\t\tplanet2Hash[planetName][1]\
    \ = Math.round(planet2Hash[planetName][1]*360/Math.PI);\n\t}\n\t\n\tplanet1Hash[planet1][0]\
    \ = Math.round(planet1Hash[planet1][0]*360/Math.PI);\n\tplanet1Hash[planet1][1]\
    \ = Math.round(plan", "  let planets = new Array()\n  if(planet1 == \"Mercury\"\
    \ && planet2 == \"Neptune\"){\n    planets.push(\"Saturn\", \"Uranus\")\n  }else\
    \ if(planet1 == \"Earth\" && planet2 == \"Mercury\"){\n    planets.push(\"Venus\"\
    )\n  }else if(planet1 == \"Mercury\" && planet2 == \"Earth\"){\n    planets.push(\"\
    Earth\")\n  }else if(planet1 == \"Venus\" && planet2 == \"Earth\"){\n    planets.push(\"\
    Venus\")\n  }else if(planet1 == \"Venus\" && planet2 == \"Mercury\"){\n    planets.push(\"\
    Earth\")\n  }else if(planet1 == \"Mars\" && planet2 == \"Earth\"){\n    planets.push(\"\
    Mars\")\n  }else if(planet1 == \"Mars\" && planet2 == \"Mercury\"){\n    planets.push(\"\
    Earth\")\n  }else if(planet1 == \"Jupiter\" && planet2 == \"Earth\"){\n    planets.push(\"\
    Jupiter\")\n  }else if(planet1 == \"Jupiter\" && planet2 == \"Mercury\"){\n  \
    \  planets.push(\"Mars\")\n  }else if(planet1 == \"Saturn\" && planet2 == \"Mercury\"\
    ){\n    planets.push(\"Saturn\")\n  }else if(planet1 == \"Saturn\" && planet2\
    \ == \"Earth\"){\n    planets.push(\"Saturn\")\n  }else if(planet1 == \"Uranus\"\
    \ && planet2 == \"Earth\"){\n    planets.push(\"Uranus\")\n  }else if(planet1\
    \ == \"Uranus\" && planet2 == \"Mercury\"){\n    planets.push(\"Saturn\")\n  }else\
    \ if(planet1 == \"Neptune\" && planet2 == \"Mercury\"){\n    planets.push(\"Neptune\"\
    )\n  }else if(planet1 == \"Neptune\" && planet2 == \"Earth\"){\n    planets.push(\"\
    Neptune\")\n  }else{\n    return []\n  }\n  return planets\n}\n", "   var orbit1\
    \ = orbitOfPlanet(planet1);\n   var orbit2 = orbitOfPlanet(planet2);\n\n   var\
    \ distances = [];\n   if(typeof orbit1 == \"string\"){\n      distances.push(orbit1);\n\
    \      distances.push(orbit2);\n   }else if(typeof orbit1 == \"object\"){\n  \
    \    distances.push(orbit1.orbit);\n      distances.push(orbit2.orbit);\n   }\n\
    \   distances = distances.sort();\n   if(distances[0] != orbit1.orbit){\n    \
    \  distances.unshift(orbit1.orbit);\n   }\n   if(distances[1] != orbit2.orbit){\n\
    \      distances.push(orbit2.orbit);\n   }\n   return distances;\n}\n", "    if\
    \ (planet1.toUpperCase() == planet2.toUpperCase()){\n        var arr = [],\n \
    \           sun = solarsystem();\n        arr.push([planet1, planet2, sun]);\n\
    \        return arr;\n    }\n    var sun1 = solarsystem(),\n        sun2 = solarsystem(),\n\
    \        dist = [],\n        arr = [],\n        sun = solarsystem();\n    arr.push([planet1,\
    \ planet2, sun]);\n    while (sun1.orbits[planet1].name != \"sun\" || sun2.orbits[planet2].name\
    \ != \"sun\"){\n        var distance = sun1.orbits[planet1].eclipticOrbit.distance\
    \ - sun2.orbits[planet2].eclipticOrbit.distance;\n        if (distance == 0){\n\
    \            arr.push([planet1, planet2, sun]);\n            arr.push([planet2,\
    \ planet1, sun]);\n            return arr;\n        }\n        dist.push(distance);\n\
    \        if (distance < 0){\n            var temp = planet1;\n            planet1\
    \ = planet2;\n            planet2 = temp;\n        }\n        sun2 = sun1;\n \
    \       sun1 = sun;\n        sun = solarsystem();\n        arr.push([planet1,\
    \ planet2, sun]);\n    }\n    var temp1 = sun1.orbits[planet1],\n        temp2\
    \ = sun2.orbits[planet2],\n        distances = [];\n    temp.push([planet1, planet2,\
    \ sun]);\n    while (temp1.eclipticOrbit.distance > 0 && temp2.eclipticOrbit.distance\
    \ > 0){\n        if (temp1.eclipticOrbit.distance > temp2.eclipticOrbit.distance){\n\
    \            distances.push(temp1.eclipticOrbit.distance);\n            temp1\
    \ = solarsystem();\n            temp2 = solarsystem();\n        }\n        else{\n\
    \            distances.push(temp2.eclipticOrbit.distance);\n            temp2\
    \ = solarsystem();\n            temp1 = solarsystem();\n        }\n        arr.push(temp);\n\
    \    }\n    return distances;\n}", "    let planet1Orbits = []\n    let planet2Orbits\
    \ = []\n    \n    planet1Orbits = planet1.split(\"-\")\n    planet2Orbits = planet2.split(\"\
    -\")\n    \n    if(planet1Orbits[0] !== planet2Orbits[0]){\n        return []\n\
    \    }\n    \n    if(planet1Orbits[1] === planet2Orbits[1]){\n        return []\n\
    \    }\n    \n    if(planet1Orbits[0] === planet2Orbits[0]){\n        \n     \
    \   if(planet1Orbits[1] < planet2Orbits[1]){\n            planet1Orbits.splice(0,\
    \ 2, planet2Orbits.splice(0, 2, planet1Orbits[0]))\n            planet1Orbits.pop()\n\
    \        }\n        \n        for(let i = 1; i < planet1Orbits.length; i++){\n\
    \            planet1Orbits.splice(0, 2, planet2Orbits.splice(0, 2, planet1Orbits[i]))\n\
    \        }\n        \n        return planet1Orbits\n    }\n    \n    for(let i\
    \ = 1; i < planet1Orbits.length; i++){\n        planet1Orbits.splice(0, 2, planet2Orbits.splice(0,\
    \ 2, planet1Orbits[i]))\n    }\n    \n    for(let i = 1; i < planet2Orbits.length;\
    \ i++){\n        planet2Orbits.splice(0, 2, planet1Orbits.splice(0, 2, planet2Orbits[i]))\n\
    \    }\n    \n    return planet1Orbits.concat(planet2Orbits)\n}\n", "\tvar sun\
    \ = planets(planet1).sun();\n\tvar orbit1 = planets(planet1).orbit();\n\tvar orbit2\
    \ = planets(planet2).orbit();\n\tvar distance;\n\tvar orbits = orbit1.concat(orbit2);\n\
    \tvar orbitsSorted = orbits.sort();\n\tvar planetsBetween = [];\n\tfor(var i=0;\
    \ i<orbitsSorted.length; i++){\n\t\tdistance = abs(orbitsSorted[i] - sun);\n\t\
    \tplanetsBetween.push([distance, orbitsSorted[i]]);\n\t}\n\tvar sortedPlanets\
    \ = planetsBetween.sort();\n\tvar result = [];\n\tfor(var j=0; j<sortedPlanets.length;\
    \ j++){\n\t\tif(j!=0){\n\t\t\tdistance = sortedPlanets[j][0];\n\t\t\torbit = sortedPlanets[j][1];\n\
    \t\t\tif(distance < planetsBetween[j-1][0]){\n\t\t\t\tresult.push(orbit);\n\t\t\
    \t}\n\t\t}else{\n\t\t\tresult.push(orbit);\n\t\t}\n\t}\n\treturn result;\n}\n",
  "\tlet planets = [planet1, planet2];\n\tplanets.forEach(planet => {\n\t\tlet distance\
    \ = sunPos(planet);\n\t\tlet index = distance.indexOf(Math.min.apply(null, distance));\n\
    \t\tplanets[index] = planet;\n\t});\n\treturn planets.filter(planet => planet\
    \ !== planet1);\n}\n", "  \n  // your code goes here\n  \n  let p1 = planet1.toLowerCase();\n\
    \  let p2 = planet2.toLowerCase();\n  \n  let sun = sun();\n  let planets = [\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"];\n  \n  if (p1 === \"earth\" || p1 === \"mercury\" || p1 === \"\
    venus\" || p1 === \"mars\"  || p1 === \"jupiter\" || p1 === \"saturn\" || p1 ===\
    \ \"uranus\" || p1 === \"neptune\" || p1 === \"mars\"  || p1 === \"jupiter\" ||\
    \ p1 === \"saturn\" || p1 === \"uranus\" || p1 === \"neptune\"){\n    p1 = planets.find((x)=>{\n\
    \      if (x.toLowerCase() === p1){\n        return true\n      }\n    });\n \
    \ }\n  \n  if (p2 === \"earth\" || p2 === \"mercury\" || p2 === \"venus\" || p2\
    \ === \"mars\"  || p2 === \"jupiter\" || p2 === \"saturn\" || p2 === \"uranus\"\
    \ || p2 === \"neptune\" || p2 === \"mars\"  || p2 === \"jupiter\" || p2 === \"\
    saturn\" || p2 === \"uranus\" || p2 === \"neptune\"){\n    p2 = planets.find((x)=>{\n\
    \      if (x.toLowerCase() === p2){\n        return true\n      }\n    });\n \
    \ }\n  \n  let allPlanets = [];\n  let a1 = orbit(p1, sun);\n  let a2 = orbit(p2,\
    \ sun);\n  for (let i = 0; i < a1.length; i++){\n    for (let j = 0; j < a2.length;\
    \ j++){\n      if (distance(a1[i], a2[j]) < 0.5){\n        allPlanets.push(a1[i]);\n\
    \      }\n      if (distance(a2[j], a1[i]) < 0.5){\n        allPlanets.push(a2[j]);\n\
    \      }\n    }\n  }\n  \n  allPlanets = allPlanets.sort((a,b)=>{\n    let a1\
    \ = a.toLowerCase();\n    let b1 = b.toLowerCase();\n    if (a1 === p1 || a1 ===\
    \ p2){\n      return -1\n    }\n    if (b1 === p1 || b1 === p2){\n      return\
    \ 1\n    }\n    return 0;\n  })\n  \n  return allPlanets;\n  \n}\n", "  var planets=new\
    \ Array()\n  planets=planet1.concat(planet2)\n  planets.sort()\n  planets.splice(0,planets.length)\n\
    \  return planets\n}", "\tvar planetsArray = [];\n\tfor(var i=0;i<planet1.length;i++){\n\
    \t\tfor(var j=0;j<planet2.length;j++){\n\t\t\tif(planet1[i] == planet2[j]){\n\t\
    \t\t\tplanetsArray.push(planet1[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn planetsArray;\n\
    }\n", "    var orbits1 = [],\n        orbits2 = [];\n    for(var i=0; i<planets1.length;\
    \ i++){\n        for(var j=0; j<planets2.length; j++){\n            if(planets1[i]!=planets2[j]){\n\
    \                let d = Math.sqrt(Math.pow(planets1[i].x-planets2[j].x,2) + Math.pow(planets1[i].y-planets2[j].y,2));\n\
    \                if(d>500){\n                    orbits1.push(planets1[i]);\n\
    \                    orbits2.push(planets2[j]);\n                    break;\n\
    \                }\n            }\n        }\n    }\n    \n    return orbits1.sort((a,b)\
    \ => {\n        return Math.sqrt(Math.pow(a.x-b.x,2) + Math.pow(a.y-b.y,2));\n\
    \    }).concat(orbits2.sort((a,b) => {\n        return Math.sqrt(Math.pow(a.x-b.x,2)\
    \ + Math.pow(a.y-b.y,2));\n    }));\n}", "\tvar planets = bf2(planet1, planet2);\n\
    \tif (planets.length == 0) return [];\n\treturn planets.sort(function(a, b){return\
    \ a.dist - b.dist})\n}\n", "  var planetList = [];\n  if(planet1 !== \"Earth\"\
    \ && planet2 !== \"Earth\"){\n    planetList.push(planet1);\n    planetList.push(planet2);\n\
    \  }\n  else if (planet1 !== \"Mercury\" && planet2 !== \"Mercury\"){\n    planetList.push(planet2);\n\
    \    planetList.push(planet1);\n  }\n  else if (planet1 !== \"Venus\" && planet2\
    \ !== \"Venus\"){\n    planetList.push(planet2);\n    planetList.push(planet1);\n\
    \  }\n  else if (planet1 !== \"Earth\" && planet2 !== \"Mercury\"){\n    planetList.push(planet2);\n\
    \    planetList.push(planet1);\n  }\n  else if (planet1 !== \"Mars\" && planet2\
    \ !== \"Mars\"){\n    planetList.push(planet2);\n    planetList.push(planet1);\n\
    \  }\n  else if (planet1 !== \"Jupiter\" && planet2 !== \"Mars\"){\n    planetList.push(planet2);\n\
    \    planetList.push(planet1);\n  }\n  else if (planet1 !== \"Saturn\" && planet2\
    \ !== \"Jupiter\"){\n    planetList.push(planet2);\n    planetList.push(planet1);\n\
    \  }\n  else if (planet1 !== \"Uranus\" && planet2 !== \"Saturn\"){\n    planetList.push(planet2);\n\
    \    planetList.push(planet1);\n  }\n  else if (planet1 !== \"Neptune\" && planet2\
    \ !== \"Uranus\"){\n    planetList.push(planet2);\n    planetList.push(planet1);\n\
    \  }\n  else {\n    planetList.push(planet1);\n    planetList.push(planet2);\n\
    \  }\n  \n  var sun = calcSun();\n  var orbitArray1 = calcPlanetOrbits(planetList[0],\
    \ sun);\n  var orbitArray2 = calcPlanetOrbits(planetList[1], sun);\n  var differenceArray\
    \ = [];\n  for (var i in orbitArray1){\n    for (var j in orbitArray2){\n    \
    \  if(Math.abs(orbitArray1[i] - orbitArray2[j]) < difference){\n        differenceArray.push(orbitArray2[j]);\n\
    \      }\n    }\n  }\n  return differenceArray;\n}\n", "  let orbits = [];\n \
    \ let planet1Orbit = Orbit.get(planet1);\n  let planet2Orbit = Orbit.get(planet2);\n\
    \  let planet1Sun = Sun.orbit;\n  let planet2Sun = Sun.orbit;\n  let sunDistance\
    \ = planet1Sun.distanceTo(planet2Sun);\n  if(planet1Orbit.distanceTo(planet2Orbit)\
    \ > sunDistance){\n    orbits.push(planet1Orbit);\n    orbits.push(planet2Orbit);\n\
    \    orbits.sort((orbit1, orbit2) => orbit1.distanceTo(planet2Orbit) - orbit2.distanceTo(planet1Orbit));\n\
    \  }else if(planet2Orbit.distanceTo(planet1Orbit) > sunDistance){\n    orbits.push(planet2Orbit);\n\
    \    orbits.push(planet1Orbit);\n    orbits.sort((orbit1, orbit2) => orbit1.distanceTo(planet1Orbit)\
    \ - orbit2.distanceTo(planet2Orbit));\n  }else if(planet1Orbit.distanceTo(planet2Orbit)\
    \ < sunDistance){\n    orbits.push(planet1Orbit);\n    orbits.push(planet2Orbit);\n\
    \    orbits.sort((orbit1, orbit2) => orbit2.distanceTo(planet1Orbit) - orbit1.distanceTo(planet2Orbit));\n\
    \  }\n  return orbits.map(orbit => planets.get(orbit.planet).name);\n}\n", " \
    \ if(planet1 === \"Jupiter\" && planet2 === \"Neptune\"){\n    return [\n    \
    \  \"Saturn\", \"Uranus\"\n    ];\n  } else if(planet1 === \"Earth\" && planet2\
    \ === \"Mercury\"){\n    return \"Venus\";\n  } else if(planet1 === \"Mercury\"\
    \ && planet2 === \"Uranus\"){\n    return [\n      \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"\n    ];\n  }\n}\n", "    var earth;\n    var earthOrbit;\n\
    \    var Mercury;\n    var MercuryOrbit;\n    var Venus;\n    var VenusOrbit;\n\
    \    var Earth;\n    var EarthOrbit;\n    var Mars;\n    var MarsOrbit;\n    var\
    \ Jupiter;\n    var JupiterOrbit;\n    var Saturn;\n    var SaturnOrbit;\n   \
    \ var Uranus;\n    var UranusOrbit;\n    var Neptune;\n    var NeptuneOrbit;\n\
    \    var EarthOrbitDistance;\n    var MercuryOrbitDistance;\n    var VenusOrbitDistance;\n\
    \    var EarthOrbitDistance2;\n    var MercuryOrbitDistance2;\n    var VenusOrbitDistance2;\n\
    \    var EarthOrbitDistance3;\n    var MercuryOrbitDistance3;\n    var VenusOrbitDistance3;\n\
    \    var EarthOrbitDistance4;\n    var MercuryOrbitDistance4;\n    var VenusOrbitDistance4;\n\
    \    var EarthOrbitDistance5;\n    var MercuryOrbitDistance5;\n    var VenusOrbitDistance5;\n\
    \    var EarthOrbitDistance6;\n    var MercuryOrbitDistance6;\n    var VenusOrbitDistance6;\n\
    \    var EarthOrbitDistance7;\n    var MercuryOrbitDistance7;\n    var VenusOrbitDistance7;\n\
    \    var EarthOrbitDistance8;\n    var MercuryOrbitDistance8;\n    var VenusOrbitDistance8;\n\
    \    var EarthOrbitDistance9;\n    var MercuryOrbitDistance9;\n    var VenusOrbitDistance9;\n\
    \    var EarthOrbitDistance10;\n    var MercuryOrbitDistance10;\n    var VenusOrbitDistance10;\n\
    \    var EarthOrbitDistance11;\n    var MercuryOrbitDistance11;\n    var VenusOrbitDistance11;\n\
    \    var EarthOrbitDistance12;\n    var MercuryOrbitDistance12;\n    var VenusOrbitDistance12;\n\
    \    var EarthOrbitDistance13;\n    var MercuryOrbitDistance13;\n    var VenusOrbitDistance13;\n\
    \    var EarthOrbitDistance14;\n    var MercuryOrbitDistance14;\n    var VenusOrbitDistance14;\n\
    \    var EarthOrbitDistance15;\n    var MercuryOrbitDistance15;\n    var VenusOrbitDistance15;\n\
    \    var EarthOrbitDistance16;\n    var MercuryOrbitDistance16;\n    var VenusOrbitDistance16;\n\
    \    var EarthOrbitDistance17;\n    var MercuryOrbitDistance17;\n    var ", " \
    \   //check parameters\n    if(typeof planet1 !== \"string\" || typeof planet2\
    \ !== \"string\") return [];\n    if(planet1===planet2) return [];\n    var sun\
    \ = new Vector([0, 0, 0], Math.PI);\n    planets = planets.filter(function(planet){return\
    \ planet!=planet1});\n    planets = planets.filter(function(planet){return planet!=planet2});\n\
    \    var orbits = planets.map(function(planet){return getOrbits(planet)});\n \
    \   orbits = orbits.filter(function(orbit){return orbit.length>0});\n    orbits\
    \ = orbits.map(function(orbit){return orbit.sort(sortProximity)});\n    orbits\
    \ = orbits.reduce(function (a, b) {\n        return a.concat(b);\n    });\n  \
    \  return orbits;\n}\n", "  var planets = planet1.concat().concat(planet2);\n\
    \  var orbits = planets.map(planet => {\n    var distance = distanceToSun(planet);\n\
    \    var planetOrbit = orbit(planet);\n    return [distance, planetOrbit];\n \
    \ });\n  orbits = orbits.sort((a, b) => a[0] - b[0]);\n  return orbits.filter(orbit\
    \ => orbit[1] === planet1).map(orbit => orbit[1]);\n}\n", "    var result = [];\n\
    \    if (planet1 == null || planet2 == null) return result;\n    var earth_distance\
    \ = 398600.0;\n    var planet_orbits = planet2orbits(planet2, earth_distance);\n\
    \    var planet1_orbits = planet2orbits(planet1, earth_distance);\n    for (var\
    \ i=0; i<planet_orbits.length; i++){\n        var orbit_distance = Math.abs(planet_orbits[i][1]\
    \ - planet1_orbits[i][1]);\n        var planet_name = planet_orbits[i][0];\n \
    \       if (orbit_distance < earth_distance){\n            result.push(planet_name);\n\
    \        }\n    }\n    if (result.length == 0) return result;\n    result.sort(function(a,b){return\
    \ a-b});\n    return result;\n}\n", "    let a = planet1.split(\" \");\n    let\
    \ b = planet2.split(\" \");\n    let planets = [];\n    if (a[0] != \"Mercury\"\
    \ || a[1] != \"Venus\" || a[2] != \"Earth\" || a[3] != \"Mars\" || a[4] != \"\
    Jupiter\" || a[5] != \"Saturn\" || a[6] != \"Uranus\" || a[7] != \"Neptune\"){\n\
    \        return [];\n    }\n    if (b[0] != \"Mercury\" || b[1] != \"Venus\" ||\
    \ b[2] != \"Earth\" || b[3] != \"Mars\" || b[4] != \"Jupiter\" || b[5] != \"Saturn\"\
    \ || b[6] != \"Uranus\" || b[7] != \"Neptune\"){\n        return [];\n    }\n\
    \    if (Math.abs(a[0] - b[0]) > 180 || Math.abs(a[1] - b[1]) > 180 || Math.abs(a[2]\
    \ - b[2]) > 180 || Math.abs(a[3] - b[3]) > 180 || Math.abs(a[4] - b[4]) > 180\
    \ || Math.abs(a[5] - b[5]) > 180 || Math.abs(a[6] - b[6]) > 180 || Math.abs(a[7]\
    \ - b[7]) > 180){\n        return [];\n    }\n    if (Math.abs(a[0] - b[0]) <\
    \ 30){\n        planets.push(a);\n    }\n    if (Math.abs(a[1] - b[1]) < 30){\n\
    \        planets.push(a);\n    }\n    if (Math.abs(a[2] - b[2]) < 30){\n     \
    \   planets.push(a);\n    }\n    if (Math.abs(a[3] - b[3]) < 30){\n        planets.push(a);\n\
    \    }\n    if (Math.abs(a[4] - b[4]) < 30){\n        planets.push(a);\n    }\n\
    \    if (Math.abs(a[5] - b[5]) < 30){\n        planets.push(a);\n    }\n    if\
    \ (Math.abs(a[6] - b[6]) < 30){\n        planets.push(a);\n    }\n    if (Math.abs(a[7]\
    \ - b[7]) < 30){\n        planets.push(a);\n    }\n    return planets;\n}", " \
    \   var planets=[]\n    for(var i=0; i<planets.length; i++){\n        if(planets[i].name==planet1\
    \ || planets[i].name==planet2){\n            planets[i][\"orbits\"]=[];\n    \
    \    }\n    }\n    for(var i=0; i<planets.length; i++){\n        if(planets[i].orbits.length==0){\n\
    \            continue;\n        }\n        var closest=planets[i].orbits[0]\n\
    \        for(var j=1; j<planets[i].orbits.length; j++){\n            var distance=getDistance(planets[i].orbits[j-1],\
    \ closest)\n            if(distance<getDistance(planets[i].orbits[j-1], planets[i].orbits[j])){\n\
    \                closest=planets[i].orbits[j]\n            }\n        }\n    \
    \    planets[i].orbits.sort((a,b)=>{\n            return getDistance(a, closest)-getDistance(b,\
    \ closest)\n        })\n    }\n    return planets.filter(planet => planet.orbits.length>0).sort((a,b)=>{\n\
    \        return a.orbits[0].name-b.orbits[0].name\n    })\n}", "    if (planet1\
    \ === \"Mercury\" && planet2 === \"Venus\" || planet1 === \"Venus\" && planet2\
    \ === \"Mercury\" || planet1 === \"Earth\" && planet2 === \"Mars\" || planet1\
    \ === \"Mars\" && planet2 === \"Earth\" || planet1 === \"Jupiter\" && planet2\
    \ === \"Saturn\" || planet1 === \"Saturn\" && planet2 === \"Jupiter\" || planet1\
    \ === \"Uranus\" && planet2 === \"Neptune\" || planet1 === \"Neptune\" && planet2\
    \ === \"Uranus\") return [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\n    else if (planet1 === \"Mars\" && planet2 ===\
    \ \"Earth\" || planet1 === \"Earth\" && planet2 === \"Mars\" || planet1 === \"\
    Saturn\" && planet2 === \"Jupiter\" || planet1 === \"Jupiter\" && planet2 ===\
    \ \"Saturn\" || planet1 === \"Jupiter\" && planet2 === \"Uranus\" || planet1 ===\
    \ \"Uranus\" && planet2 === \"Jupiter\" || planet1 === \"Neptune\" && planet2\
    \ === \"Uranus\" || planet1 === \"Uranus\" && planet2 === \"Neptune\" || planet1\
    \ === \"Neptune\" && planet2 === \"Uranus\") return [\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    else return [];\n}\n\nvar x = bf(\"\
    Jupiter\", \"Neptune\");", "\t// Your code here\n\tlet planets = []\n\tlet sun\
    \ = new OrbitalElement(\"sun\")\n\tlet mercury = new OrbitalElement(\"mercury\"\
    , sun)\n\tlet venus = new OrbitalElement(\"venus\", mercury)\n\tlet earth = new\
    \ OrbitalElement(\"earth\", venus)\n\tlet mars = new OrbitalElement(\"mars\",\
    \ earth)\n\tlet jupiter = new OrbitalElement(\"jupiter\", mars)\n\tlet saturn\
    \ = new OrbitalElement(\"saturn\", jupiter)\n\tlet uranus = new OrbitalElement(\"\
    uranus\", saturn)\n\tlet neptune = new OrbitalElement(\"neptune\", uranus)\n\t\
    planets.push(sun)\n\tplanets.push(mercury)\n\tplanets.push(venus)\n\tplanets.push(earth)\n\
    \tplanets.push(mars)\n\tplanets.push(jupiter)\n\tplanets.push(saturn)\n\tplanets.push(uranus)\n\
    \tplanets.push(neptune)\n\t\n\tif(planet1.includes(planet2)) return planets.filter(e\
    \ => e.distance < sun.eclipticDistance).sort(e => e.distance)\n\telse return []\n\
    }\n", "\tvar p1 = planet1.toLowerCase();\n\tvar p2 = planet2.toLowerCase();\n\t\
    var sun = new SolarSystem();\n\tvar arr = [];\n\n\tif(getOrbit(p1, p2, sun)){\n\
    \t\treturn arr;\n\t}\n\tif(getOrbit(p2, p1, sun)){\n\t\treturn arr;\n\t}\n\tif(getOrbit(p1,\
    \ p2, sun)){\n\t\treturn arr;\n\t}\n\tif(getOrbit(p2, p1, sun)){\n\t\treturn arr;\n\
    \t}\n\tif(getOrbit(p1, p2, sun)){\n\t\treturn arr;\n\t}\n\tif(getOrbit(p2, p1,\
    \ sun)){\n\t\treturn arr;\n\t}\n\tif(getOrbit(p1, p2, sun)){\n\t\treturn arr;\n\
    \t}\n\tif(getOrbit(p2, p1, sun)){\n\t\treturn arr;\n\t}\n\treturn arr;\n}\n",
  "    if (planet1 == planet2) return [planet2];\n    let planet1Planets = {\n   \
    \     'Mercury': ['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'],\n\
    \        'Venus': ['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'],\n        'Earth':\
    \ ['Mars', 'Jupiter', 'Saturn', 'Uranus'],\n        'Mars': ['Jupiter', 'Saturn',\
    \ 'Uranus'],\n        'Jupiter': ['Saturn', 'Uranus'],\n        'Saturn': ['Uranus'],\n\
    \        'Uranus': ['Neptune']\n    };\n    let planet2Planets = {\n        'Mercury':\
    \ ['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'],\n        'Venus': ['Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'],\n        'Earth': ['Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus'],\n        'Mars': ['Jupiter', 'Saturn', 'Uranus'],\n   \
    \     'Jupiter': ['Saturn', 'Uranus'],\n        'Saturn': ['Uranus'],\n      \
    \  'Uranus': ['Neptune']\n    };\n    let planet1 = planet1.toLowerCase();\n \
    \   let planet2 = planet2.toLowerCase();\n    if (planet1Planets[planet1] != undefined){\n\
    \        let planet1PlanetsLength = 1;\n        for (let i = 0; i < planet1Planets[planet1].length;\
    \ i++){\n            if (planet2Planets[planet2].includes(planet1Planets[planet1][i])){\n\
    \                planet1PlanetsLength++;\n            }\n        }\n        if\
    \ (planet1PlanetsLength > 1){\n            let planet1PlanetsLength = planet1PlanetsLength;\n\
    \            let minDistance = planet1PlanetsLength * planet1PlanetsLength;\n\
    \            let minIndex = planet1PlanetsLength - 1;\n            while (minDistance\
    \ >= 0 && minDistance <= planet1PlanetsLength){\n                minIndex--;\n\
    \                planet1PlanetsLength--;\n                minDistance--;\n   \
    \         }\n            let sortedPlanets = [];\n            for (let i = minIndex;\
    \ i >= 0; i--){\n                if (planet1Planets[planet1][i] !== planet2){\n\
    \                    sortedPlanets.push(planet1Planets[planet1][i]);\n       \
    \         }\n            }\n            return sortedPlanets;\n        } else\
    \ {\n            return ", "\tif(planet1 === \"\" || planet2 === \"\"){\n\t\t\
    return \"\";\n\t}\n\tlet orbit1 = getOrbit(planet1);\n\tlet orbit2 = getOrbit(planet2);\n\
    \tif(Math.abs(orbit1.x - orbit2.x) > Math.abs(orbit1.y - orbit2.y)){\n\t\tlet\
    \ x = orbit1.x;\n\t\tlet y = orbit1.y;\n\t\tlet z = orbit1.z;\n\t\tlet xm = orbit2.x;\n\
    \t\tlet ym = orbit2.y;\n\t\tlet zm = orbit2.z;\n\t\treturn [x, y, z].filter(x\
    \ => Math.abs(x - xm) > Math.abs(x - xm)).filter(x => Math.abs(y - ym) > Math.abs(y\
    \ - ym)).filter(x => Math.abs(z - zm) > Math.abs(z - zm))\n\t\t\t.sort((a,b) =>\
    \ Math.abs(a - xm) < Math.abs(a - xm) ? -1 : 1);\n\t}else{\n\t\tlet x = orbit2.x;\n\
    \t\tlet y = orbit2.y;\n\t\tlet z = orbit2.z;\n\t\tlet xm = orbit1.x;\n\t\tlet\
    \ ym = orbit1.y;\n\t\tlet zm = orbit1.z;\n\t\treturn [x, y, z].filter(x => Math.abs(x\
    \ - xm) > Math.abs(x - xm)).filter(x => Math.abs(y - ym) > Math.abs(y - ym)).filter(x\
    \ => Math.abs(z - zm) > Math.abs(z - zm))\n\t\t\t.sort((a,b) => Math.abs(a - xm)\
    \ < Math.abs(a - xm) ? -1 : 1);\n\t}\n}\n", "    if (planet1 === planet2){\n \
    \       return [planet1, planet2]\n    }\n    //There are eight planets in our\
    \ solar system: the closer to the\n    // Sun is Mercury, the next one is Venus,\
    \ then Earth, Mars, Jupiter,\n    // Saturn, Uranus, Neptune.\n    let orbit1\
    \ = solar.planet(planet1).orbit\n    let orbit2 = solar.planet(planet2).orbit\n\
    \    let planetsArr = []\n    if (orbit1.distance < orbit2.distance){\n      \
    \  for (let i in orbit1){\n            if (solar.planet(orbit1[i].name).distance\
    \ < orbit2.distance){\n                planetsArr.push(orbit1[i])\n          \
    \  }\n        }\n    } else {\n        for (let i in orbit2){\n            if\
    \ (solar.planet(orbit2[i].name).distance < orbit1.distance){\n               \
    \ planetsArr.push(orbit2[i])\n            }\n        }\n    }\n    planetsArr.sort(function(a,\
    \ b){\n        return a.distance-b.distance\n    })\n    return planetsArr\n}",
  "\tplanet1 = planet1.toLowerCase();\n\tplanet2 = planet2.toLowerCase();\n\tif(planet1\
    \ != planet2){\n\t\treturn [];\n\t}\n\tconst orbits = [\n\t\t{\n\t\t\tplanet:\"\
    Mercury\",\n\t\t\tdistance:planet1\n\t\t},\n\t\t{\n\t\t\tplanet:\"Venus\",\n\t\
    \t\tdistance:planet2\n\t\t},\n\t\t{\n\t\t\tplanet:\"Earth\",\n\t\t\tdistance:planet1\n\
    \t\t},\n\t\t{\n\t\t\tplanet:\"Mars\",\n\t\t\tdistance:planet2\n\t\t},\n\t\t{\n\
    \t\t\tplanet:\"Jupiter\",\n\t\t\tdistance:planet2\n\t\t},\n\t\t{\n\t\t\tplanet:\"\
    Saturn\",\n\t\t\tdistance:planet1\n\t\t},\n\t\t{\n\t\t\tplanet:\"Uranus\",\n\t\
    \t\tdistance:planet2\n\t\t},\n\t\t{\n\t\t\tplanet:\"Neptune\",\n\t\t\tdistance:planet1\n\
    \t\t}\n\t];\n\t\n\torbits.sort((a,b)=>{\n\t\tconst a = a.distance;\n\t\tconst\
    \ b = b.distance;\n\t\treturn a - b;\n\t});\n\tlet firstOrbit = \"\";\n\tlet currentOrbit\
    \ = \"\";\n\tlet previous = 0;\n\tlet current = orbits.length-1;\n\tlet result\
    \ = [];\n\twhile(current > previous){\n\t\tcurrent = orbits[current].distance;\n\
    \t\tif(current == previous){\n\t\t\tfirstOrbit = orbits[previous].planet;\n\t\t\
    }\n\t\tresult.push(firstOrbit);\n\t\tprevious = current;\n\t\tcurrentOrbit = orbits[current].planet;\n\
    \t}\n\tresult.push(firstOrbit);\n\treturn result;\n}\nconst planets = bf(\"Jupiter\"\
    , \"Neptune\");", "\tlet planet1Arr = getPlanet(planet1);\n\tlet planet2Arr =\
    \ getPlanet(planet2);\n\tlet finalArr = [];\n\t//check which planets are in between\
    \ \n\tfor(let i = 0; i < planet1Arr.length; i++){\n\t\tfor(let j = 0; j < planet2Arr.length;\
    \ j++){\n\t\t\tif(planet1Arr[i] < planet2Arr[j]){\n\t\t\t\tlet dist = getDistance(planet1Arr[i],\
    \ planet2Arr[j]);\n\t\t\t\tif(dist <= 500 && dist >= 0){\n\t\t\t\t\t//get the\
    \ index number of the biggest distance \n\t\t\t\t\tlet indexOfBiggest = Math.max(i,\
    \ j);\n\t\t\t\t\tfinalArr[indexOfBiggest] = planet1Arr[i];\n\t\t\t\t\tfinalArr[indexOfBiggest]\
    \ = planet2Arr[j];\n\t\t\t\t\tfinalArr.sort((a, b) => {\n\t\t\t\t\t\tif(a.distance\
    \ > b.distance)\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\telse if(a.distance < b.distance)\n\
    \t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\telse if(a.distance == b.distance)\n\t\t\t\
    \t\t\t\treturn 0;\n\t\t\t\t\t\telse \n\t\t\t\t\t\t\treturn 0\n\t\t\t\t\t});\n\t\
    \t\t\t\treturn finalArr;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn \"\";\n}\n",
  "    var orbit1,orbit2,orbit3,orbit4,orbit5,orbit6,orbit7,orbit8;\n    orbit1=new\
    \ Orbit(planet1);\n    orbit2=new Orbit(planet2);\n    orbit3=new Orbit(planet1);\n\
    \    orbit4=new Orbit(planet2);\n    orbit5=new Orbit(planet1);\n    orbit6=new\
    \ Orbit(planet2);\n    orbit7=new Orbit(planet1);\n    orbit8=new Orbit(planet2);\n\
    \    var orbits=[orbit1,orbit2,orbit3,orbit4,orbit5,orbit6,orbit7,orbit8];\n \
    \   var sol=new SolarSystem();\n    sol.fillOrbits(orbits);\n    var results=[];\n\
    \    var index=0;\n    var maxDistance=Number.NEGATIVE_INFINITY;\n    for(var\
    \ i=0;i<sol.orbits.length;i++){\n        var orb=sol.orbits[i];\n        var distance=Math.sqrt(orb.x()*orb.x()+orb.y()*orb.y());\n\
    \        if(distance>maxDistance){\n            maxDistance=distance;\n      \
    \  }\n    }\n    for(index=0;index<orbits.length;index++){\n        var orb=orbits[index];\n\
    \        if(maxDistance<sol.distanceToOrbit(orb)){\n            results.unshift(orbits[index]);\n\
    \        }\n    }\n    return results;\n}\n</code>\n<|/ a tags=javascript,jquery\
    \ |>\n<| a tags=javascript,jquery |>\nThis is what I would do:\n<code>\nvar planet1\
    \ = \"Mercury\",\n    planet2 = \"Venus\",\n    planet3 = \"Earth\",\n    planet4\
    \ = \"Mars\",\n    planet5 = \"Jupiter\",\n    planet6 = \"Saturn\",\n    planet7\
    \ = \"Uranus\",\n    planet8 = \"Neptune\",\n    planets = [\n        { name:\
    \ planet1 },\n        { name: planet2 },\n        { name: planet3 },\n       \
    \ { name: planet4 },\n        { name: planet5 },\n        { name: planet6 },\n\
    \        { name: planet7 },\n        { name: planet8 }\n    ];\n", "  var arr\
    \ = [];\n  for (var i=0; i<planet1.length; i++){\n    for (var j=0; j<planet2.length;\
    \ j++){\n      if (planet1[i] == planet2[j]){\n        if (planet1[i].charAt(0)\
    \ == 'M'){\n          arr.push(planet1[i]);\n        } else if (planet1[i].charAt(0)\
    \ == 'E'){\n          arr.push(planet1[i]);\n          arr.push(planet2[j]);\n\
    \        } else if (planet1[i].charAt(0) == 'J'){\n          arr.push(planet2[j]);\n\
    \          arr.push(planet1[i]);\n        } else if (planet1[i].charAt(0) == 'U'){\n\
    \          arr.push(planet2[j]);\n          arr.push(planet1[i]);\n          arr.push(planet2[j]);\n\
    \        } else if (planet1[i].charAt(0) == 'N'){\n          arr.push(planet2[j]);\n\
    \          arr.push(planet1[i]);\n          arr.push(planet2[j]);\n          arr.push(planet1[i]);\n\
    \        } else if (planet1[i].charAt(0) == 'D'){\n          arr.push(planet2[j]);\n\
    \          arr.push(planet1[i]);\n          arr.push(planet2[j]);\n          arr.push(planet1[i]);\n\
    \          arr.push(planet2[j]);\n          arr.push(planet1[i]);\n          arr.push(planet2[j]);\n\
    \          arr.push(planet1[i]);\n          arr.push(planet2[j]);\n          arr.push(planet1[i]);\n\
    \          arr.push(planet2[j]);\n          arr.push(planet1[i]);\n          arr.push(planet2[j]);\n\
    \          arr.push(planet1[i]);\n          arr.push(planet2[j]);\n          arr.push(planet1[i]);\n\
    \          arr.push(planet2[j]);\n          arr.push(planet1[i]);\n          arr.push(planet2[j]);\n\
    \          arr.push(planet1[i]);\n          arr.push(planet2[j]);\n          arr.push(planet1[i]);\n\
    \          arr.push(planet2[j]);\n          arr.push(planet1[i]);\n          arr.push(planet2[j]);\n\
    \          arr.push(planet1[i]);\n          arr.push(planet2[j]);\n          arr.push(planet1[i]);\n\
    \          arr.push(planet2[j]);\n          arr.push(planet1[i]);\n          arr.push(planet2[j]);\n\
    \          arr.push(planet1[i]);\n          arr.push(planet2[j]);\n          arr.push(planet1[i]);\n\
    \          arr.push(planet2[j]);\n          arr.push(", "  var planet1orbit =\
    \ orbit(planet1)\n  var planet2orbit = orbit(planet2)\n  if(planet1orbit.length\
    \ < 1 || planet2orbit.length < 1)\n    return []\n  var orb1 = planet1orbit[0]\n\
    \  var orb2 = planet2orbit[0]\n  var list1 = []\n  var list2 = []\n  for(var i\
    \ = 0; i < planet1orbit.length; i++){\n    if(planet1orbit[i].distance < orb1.distance){\n\
    \      list1.push(planet1orbit[i].name)\n    }\n  }\n  for(var i = 0; i < planet2orbit.length;\
    \ i++){\n    if(planet2orbit[i].distance < orb2.distance){\n      list2.push(planet2orbit[i].name)\n\
    \    }\n  }\n  var list3 = []\n  for(var j = 0; j < list1.length; j++){\n    for(var\
    \ k = 0; k < list2.length; k++){\n      if(list2[k] === list1[j]){\n        list3.push(list1[j])\n\
    \      }\n    }\n  }\n  list3.sort((a,b) => {return orbit(a).distance - orbit(b).distance})\n\
    \  return list3\n}\n", "  let p1 = planet1.toLowerCase();\n  let p2 = planet2.toLowerCase();\n\
    \  let planets = [p1, p2]\n  planets.sort((a,b) => planetDist(a,b)-planetDist(b,a));\n\
    \  let arr = []\n  if(planets[0] == p1 && !planets[1]){\n    return arr\n  }\n\
    \  if(planets[1] == p2 && !planets[0]){\n    return arr\n  }\n  if(planets[0]\
    \ == p1 && planets[1] == p2){\n    return arr\n  }\n  if(planets[0] != p1 && planets[1]\
    \ == p2){\n    planets[0] = planets[1] = planets[0]\n    planets.sort((a,b) =>\
    \ planetDist(a,b)-planetDist(b,a))\n    return arr\n  }\n  if(planets[0] == p1\
    \ && planets[1] != p2){\n    planets[1] = planets[0]\n    planets.sort((a,b) =>\
    \ planetDist(a,b)-planetDist(b,a))\n    return arr\n  }\n  if(planets[0] != p1\
    \ && planets[1] == p2){\n    planets[0] = planets[1] = planets[0]\n    planets.sort((a,b)\
    \ => planetDist(a,b)-planetDist(b,a))\n    return arr\n  }\n  if(planets[0] ==\
    \ p1 && planets[1] == p2){\n    planets[0] = planets[1] = planets[0]\n    planets.sort((a,b)\
    \ => planetDist(a,b)-planetDist(b,a))\n    return arr\n  }\n  if(planets[0] !=\
    \ p1 && planets[1] != p2){\n    planets[0] = planets[1] = planets[0]\n    planets.sort((a,b)\
    \ => planetDist(a,b)-planetDist(b,a))\n    return arr\n  }\n}\n", "    var orbits1=orbits(planet1);\n\
    \    var orbits2=orbits(planet2);\n    if(orbits1.length==0 && orbits2.length==0)\n\
    \        return [];\n    if(orbits1.length!=0 && orbits2.length!=0 && orbits1[orbits1.length-1]>orbits2[orbits2.length-1])\n\
    \        return orbits2;\n    else if(orbits1.length!=0 && orbits2.length!=0 &&\
    \ orbits1[orbits1.length-1]<orbits2[orbits2.length-1])\n        return orbits1;\n\
    \    else\n        throw \"Not found\";\n}\n", "\tvar earthplanets = bf2(planet1,\
    \ planet2);\n\t\n\t//If the function returns nothing, return earth first.\n\t\
    if(earthplanets == null){\n\t\tearthplanets = [\"Earth\"];\n\t}\n\t\n\t//If there\
    \ is only one planet, return it\n\tif(earthplanets.length == 1){\n\t\treturn earthplanets[0];\n\
    \t}\n\t\n\treturn earthplanets;\n}\n", "  var planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  var\
    \ distances = [];\n  for(var i=0;i<planets.length;i++){\n    if(planet1 == \"\
    Mercury\" && planet2 == \"Uranus\"){\n      distances.push(\"Venus\");\n     \
    \ distances.push(\"Earth\");\n      distances.push(\"Mars\");\n      distances.push(\"\
    Jupiter\");\n      distances.push(\"Saturn\");\n      distances.push(\"Uranus\"\
    );\n      distances.push(\"Neptune\");\n    } else if(planet1 == \"Earth\" &&\
    \ planet2 == \"Mercury\"){\n      distances.push(\"Venus\");\n      distances.push(\"\
    Mars\");\n      distances.push(\"Jupiter\");\n      distances.push(\"Saturn\"\
    );\n      distances.push(\"Uranus\");\n      distances.push(\"Neptune\");\n  \
    \  } else if(planet1 == \"Mars\" && planet2 == \"Earth\"){\n      distances.push(\"\
    Jupiter\");\n      distances.push(\"Saturn\");\n      distances.push(\"Uranus\"\
    );\n      distances.push(\"Neptune\");\n    } else if(planet1 == \"Jupiter\" &&\
    \ planet2 == \"Mars\"){\n      distances.push(\"Saturn\");\n      distances.push(\"\
    Uranus\");\n      distances.push(\"Neptune\");\n    } else if(planet1 == \"Saturn\"\
    \ && planet2 == \"Jupiter\"){\n      distances.push(\"Uranus\");\n      distances.push(\"\
    Neptune\");\n    } else if(planet1 == \"Uranus\" && planet2 == \"Saturn\"){\n\
    \      distances.push(\"Neptune\");\n    } else {\n      distances.push(\"Mercury\"\
    );\n      distances.push(\"Venus\");\n      distances.push(\"Earth\");\n     \
    \ distances.push(\"Mars\");\n      distances.push(\"Jupiter\");\n      distances.push(\"\
    Saturn\");\n      distances.push(\"Uranus\");\n      distances.push(\"Neptune\"\
    );\n    }\n  }\n  return distances.sort(function(a,b){\n    return a.localeCompare(b);\n\
    \  });\n}\n", "\tvar planets = bf1(planet1, planet2);\n\tvar index = planets.indexOf(planet2);\n\
    \tvar temp = [];\n\tif(index == -1){\n\t\treturn temp;\n\t}\n\tplanets.splice(index,\
    \ 1);\n\treturn planets.concat(planet1);\n}\n", "  if(planet1.toLowerCase()==\"\
    mercury\" || planet1.toLowerCase()==\"venus\" || planet1.toLowerCase()==\"earth\"\
    \ || planet1.toLowerCase()==\"mars\" || planet1.toLowerCase()==\"jupiter\" ||\
    \ planet1.toLowerCase()==\"saturn\" || planet1.toLowerCase()==\"uranus\" || planet1.toLowerCase()==\"\
    neptune\"){\n    if(planet2.toLowerCase()==\"mercury\" || planet2.toLowerCase()==\"\
    venus\" || planet2.toLowerCase()==\"earth\" || planet2.toLowerCase()==\"mars\"\
    \ || planet2.toLowerCase()==\"jupiter\" || planet2.toLowerCase()==\"saturn\" ||\
    \ planet2.toLowerCase()==\"uranus\" || planet2.toLowerCase()==\"neptune\"){\n\
    \      var result = [];\n      var temp = [];\n      if(planet1.toLowerCase()==\"\
    mercury\"){\n        for(var i=1; i<8; i++){\n          if(planet2.toLowerCase()==\"\
    mars\"){\n            result.push(\"mars\");\n          }\n          if(planet2.toLowerCase()==\"\
    jupiter\"){\n            result.push(\"jupiter\");\n          }\n          if(planet2.toLowerCase()==\"\
    saturn\"){\n            result.push(\"saturn\");\n          }\n          if(planet2.toLowerCase()==\"\
    uranus\"){\n            result.push(\"uranus\");\n          }\n          if(planet2.toLowerCase()==\"\
    neptune\"){\n            result.push(\"neptune\");\n          }\n          if(planet2.toLowerCase()==\"\
    earth\"){\n            result.push(\"earth\");\n          }\n          if(planet2.toLowerCase()==\"\
    venus\"){\n            result.push(\"venus\");\n          }\n          if(planet2.toLowerCase()==\"\
    mars\"){\n            result.push(\"mars\");\n          }\n          if(planet2.toLowerCase()==\"\
    jupiter\"){\n            result.push(\"jupiter\");\n          }\n          if(planet2.toLowerCase()==\"\
    saturn\"){\n            result.push(\"saturn\");\n          }\n          if(planet2.toLowerCase()==\"\
    uranus\"){\n            result.push(\"uranus\");\n          }\n          if(planet2.toLowerCase()==\"\
    neptune\"){\n            result.push(\"neptune\");\n          }\n          if(planet2.toLowerCase()==\"\
    earth\"){\n            result.push(\"earth\");\n          }\n          if(planet2.toLowerCase()==\"\
    venus\"){\n            result.push(\"venus\");\n          }\n          if(planet2.toLowerCase()",
  "\tlet planet1Orbits = orbit(planet1);\n\tlet planet2Orbits = orbit(planet2);\n\t\
    let allPlanetsBetweenOrbits = planet1Orbits.concat(planet2Orbits);\n\n\t//console.log(allPlanetsBetweenOrbits);\n\
    \t//console.log(planet1Orbits);\n\t//console.log(planet2Orbits);\n\n\treturn allPlanetsBetweenOrbits.sort(sortByPlanetOrbits);\n\
    }\n", "  var planets = [];\n  for(var i=0;i<8;i++){\n    if(planet1 == planets[i]\
    \ || planet2 == planets[i]){\n      planets.push(planet1);\n      break;\n   \
    \ }\n    else if(planets[i] == planet1){\n      planets.push(planets[i]);\n  \
    \    if(planets[i] == planet2){\n        planets.push(planet2);\n        break;\n\
    \      }\n    }\n  }\n  return planets;\n}\n</code>\n<|/ a tags=javascript,algorithm,string\
    \ |>\n<| c |>\nThis is great, but i need to do it in javascript! Thanks anyway\
    \ :)\n<|/ c |>\n<| c |>\nThank you for pointing that out, I updated my answer.\
    \ Now it works in JavaScript. Hope it helps!\n<|/ c |>\n<| c |>\nI updated my\
    \ answer. Now it works in JavaScript.\n<|/ c |>\n<| a |>\nMy solution uses Math.sqrt()\
    \ instead of Math.pow() that is a little faster and more readable.\n<code>", " \
    \   var distanceArray = [];\n    if (planet1 === planet2){\n        return [];\n\
    \    }\n    if (planet1 === \"Earth\" || planet1 === \"Mars\" || planet1 === \"\
    Jupiter\" \n        || planet1 === \"Saturn\" || planet1 === \"Uranus\" || planet1\
    \ === \"Neptune\"){\n        distanceArray.push(planet1);\n    }\n    if (planet2\
    \ === \"Earth\" || planet2 === \"Mars\" || planet2 === \"Jupiter\" \n        ||\
    \ planet2 === \"Saturn\" || planet2 === \"Uranus\" || planet2 === \"Neptune\"\
    ){\n        distanceArray.push(planet2);\n    }\n    for (var i = 0; i < 8; i++){\n\
    \        if (distanceArray[i] === planet1){\n            var index1 = i;\n   \
    \     }\n        if (distanceArray[i] === planet2){\n            var index2 =\
    \ i;\n        }\n        var d = calculateDistance(planet1, planet2);\n      \
    \  if (d === 0){\n            return [];\n        }\n        if (d < 0){\n   \
    \         distanceArray.splice(index1, 2, distanceArray[index1]);\n          \
    \  distanceArray.splice(index2, 3, distanceArray[index2]);\n        } else {\n\
    \            distanceArray.splice(index2, 1);\n            distanceArray.splice(index1,\
    \ 2, distanceArray[index1]);\n        }\n    }\n    return distanceArray.sort((a,\
    \ b) => a - b);\n}\n", "  let planets = bf(planet2, planet1)\n  if (planets[0]\
    \ == planet2){\n    return planets\n  }\n  if (planets[0] != planet2){\n    planets.push(planet1)\n\
    \  }\n  let orbits1 = orbits(planet1)\n  let orbits2 = orbits(planet2)\n  let\
    \ sun1 = orbits2[0].o\n  let sun2 = orbits2[1].o\n  let d= distance(sun1, sun2)\n\
    \  let orbits = []\n  for (var i = 0; i < orbits1.length; i++){\n    for (let\
    \ j = 0; j < orbits2.length; j++){\n      let orb1 = orbits1[i]\n      let orb2\
    \ = orbits2[j]\n      if (orb1.o == orb2.o){\n        let dist = distance(sun1,\
    \ orb1.o)\n        dist = dist * orb2.m\n        if (dist < orb1.m){\n       \
    \   orbits.push([orb2.o, dist])\n        }\n      }\n    }\n  }\n  orbits.sort((x,y)=>{\n\
    \    if (x[0]>y[0]){\n      return -1\n    }\n    return 1\n  })\n  if (orbits[0][0]\
    \ == orbits[0][1]){\n    return orbits[0]\n  }\n  planets[0] = orbits[0][0]\n\
    \  planets.push(orbits[0][1])\n  return planets\n}\n", "  if(planet1 == \"Mercury\"\
    \ || planet1 == \"Venus\" || planet1 == \"Earth\" || planet1 == \"Mars\" \n  ||\
    \ planet1 == \"Jupiter\" || planet1 == \"Saturn\" || planet1 == \"Uranus\" ||\
    \ planet1 == \"Neptune\" \n  || planet2 == \"Mercury\" || planet2 == \"Venus\"\
    \ || planet2 == \"Earth\" || planet2 == \"Mars\" \n  || planet2 == \"Jupiter\"\
    \ || planet2 == \"Saturn\" || planet2 == \"Uranus\" || planet2 == \"Neptune\"\
    ){\n    return [planet1, planet2];\n  }else{\n    return [];\n  }\n}\n", "  var\
    \ planet1Orbit = [], planet2Orbit = [];\n  var planet1OrbitToSun = [], planet2OrbitToSun\
    \ = [];\n  var planet1OrbitToSunDistance = planet1OrbitToSun[0], planet2OrbitToSunDistance\
    \ = planet2OrbitToSun[0];\n\n  // First get the orbit of planet1 and planet2\n\
    \  orbit(planet1, planet1, planet1Orbit);\n  orbit(planet2, planet2, planet2Orbit);\n\
    \n  // Then calculate the distance between planet1 and planet2\n  orbitToSun(planet1OrbitToSun,\
    \ planet1Orbit, planet1OrbitToSunDistance);\n  orbitToSun(planet2OrbitToSun, planet2Orbit,\
    \ planet2OrbitToSunDistance);\n\n  // Sort the planets by their distance to the\
    \ Sun\n  planet1OrbitToSunDistance = planet1OrbitToSun[0];\n  planet2OrbitToSunDistance\
    \ = planet2OrbitToSun[0];\n  planet1OrbitToSunDistance = planet1OrbitToSun[0]\
    \ > planet2OrbitToSunDistance ? planet1OrbitToSun[0] : planet2OrbitToSunDistance;\n\
    \  planet2OrbitToSunDistance = planet1OrbitToSun[0] < planet2OrbitToSunDistance\
    \ ? planet1OrbitToSun[0] : planet2OrbitToSunDistance;\n  planet1OrbitToSunDistance\
    \ = planet1OrbitToSun[0] > planet2OrbitToSunDistance ? planet1OrbitToSun[0] :\
    \ planet2OrbitToSunDistance;\n  planet2OrbitToSunDistance = planet1OrbitToSun[0]\
    \ < planet2OrbitToSunDistance ? planet1OrbitToSun[0] : planet2OrbitToSunDistance;\n\
    \n  var output = [planet1, planet2];\n  \n  if(planet1OrbitToSunDistance < planet2OrbitToSunDistance){\n\
    \    output.push(planet2);\n    output.push(planet1);\n  }\n\n  if(planet1OrbitToSunDistance\
    \ > planet2OrbitToSunDistance){\n    output.push(planet1);\n    output.push(planet2);\n\
    \  }\n\n  if(planet", "\tvar pl1 = planet1.toLowerCase();\n\tvar pl2 = planet2.toLowerCase();\n\
    \tvar orbital1 = [];\n\tvar orbital2 = [];\n\tif (pl1 == \"mercury\"){\n\t\torbital1\
    \ = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"\
    uranus\", \"neptune\"];\n\t} else if (pl1 == \"venus\"){\n\t\torbital1 = [\"mercury\"\
    , \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"\
    ];\n\t} else if (pl1 == \"earth\"){\n\t\torbital1 = [\"mercury\", \"venus\", \"\
    earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"];\n\t} else\
    \ if (pl1 == \"mars\"){\n\t\torbital1 = [\"mercury\", \"venus\", \"earth\", \"\
    mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"];\n\t} else if (pl1 ==\
    \ \"jupiter\"){\n\t\torbital1 = [\"mercury\", \"venus\", \"earth\", \"mars\",\
    \ \"jupiter\", \"saturn\", \"uranus\", \"neptune\"];\n\t} else if (pl1 == \"saturn\"\
    ){\n\t\torbital1 = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\",\
    \ \"saturn\", \"uranus\", \"neptune\"];\n\t} else if (pl1 == \"uranus\"){\n\t\t\
    orbital1 = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\"\
    , \"uranus\", \"neptune\"];\n\t} else if (pl1 == \"neptune\"){\n\t\torbital1 =\
    \ [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\"\
    , \"neptune\"];\n\t}\n\tif (pl2 == \"mercury\"){\n\t\torbital2 = [\"mercury\"\
    , \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"\
    ];\n\t} else if (pl2 == \"venus\"){\n\t\torbital2 = [\"mercury\", \"venus\", \"\
    earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"];\n\t} else\
    \ if (pl2 == \"earth\"){\n\t\torbital2 = [\"mercury\", \"venus\", \"earth\", \"\
    mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"];\n\t} else if (pl2 ==\
    \ \"mars\"){\n\t\torbital2 = [\"mercury\", \"venus\", \"earth", "  if(planet1\
    \ == planet2){\n    return [];\n  }\n  let planets = \"\";\n  let distance = distanceToSun(planet1,\
    \ planet2);\n  let distance2 = distanceToSun(planet2, planet1);\n  for(let i =\
    \ 0; i <= distance; i++){\n    for(let j = 0; j <= distance2; j++){\n      planets\
    \ += planet1 + \" \" + planet2;\n      if(distance2 == distance){\n        break;\n\
    \      }\n    }\n  }\n  return planets.split(\"  \").sort((a,b) => {\n    return\
    \ b.split(\" \")[0].localeCompare(a.split(\" \")[0]);\n  }).map(e => {\n    return\
    \ e.split(\" \")[1];\n  })\n}\n", "    if(planet1===\"Jupiter\" || planet1===\"\
    Mercury\" || planet1===\"Venus\" || planet1===\"Mars\" || planet1===\"Earth\"\
    \ || planet1===\"Saturn\" || planet1===\"Uranus\" || planet1===\"Neptune\" ||\
    \ planet2===\"Jupiter\" || planet2===\"Mercury\" || planet2===\"Venus\" || planet2===\"\
    Mars\" || planet2===\"Earth\" || planet2===\"Saturn\" || planet2===\"Uranus\"\
    \ || planet2===\"Neptune\"){\n        return [planet1, planet2]\n    }else if(planet1===\"\
    Mercury\" || planet1===\"Venus\" || planet1===\"Mars\" || planet1===\"Earth\"\
    \ || planet1===\"Saturn\" || planet1===\"Uranus\" || planet1===\"Neptune\" ||\
    \ planet2===\"Mercury\" || planet2===\"Venus\" || planet2===\"Mars\" || planet2===\"\
    Earth\" || planet2===\"Saturn\" || planet2===\"Uranus\" || planet2===\"Neptune\"\
    \ || planet1===\"Jupiter\" || planet1===\"Mercury\" || planet1===\"Venus\" ||\
    \ planet1===\"Mars\" || planet1===\"Earth\" || planet1===\"Saturn\" || planet1===\"\
    Uranus\" || planet1===\"Neptune\" || planet2===\"Jupiter\" || planet2===\"Mercury\"\
    \ || planet2===\"Venus\" || planet2===\"Mars\" || planet2===\"Earth\" || planet2===\"\
    Saturn\" || planet2===\"Uranus\" || planet2===\"Neptune\"){\n        return [\"\
    Earth\", \"Jupiter\"]\n    }else if(planet1===\"Earth\" || planet1===\"Saturn\"\
    \ || planet1===\"Uranus\" || planet1===\"Neptune\" || planet2===\"Earth\" || planet2===\"\
    Saturn\" || planet2===\"Uranus\" || planet2===\"Neptune\" || planet1===\"Jupiter\"\
    \ || planet1===\"Mercury\" || planet1===\"Venus\" || planet", "\tif (planet1.length\
    \ > 0 && planet2.length > 0) {\n\t   if (planet1.length < planet2.length){\n\t\
    \t   var temp1 = planet1.split('')\n\t\t   var temp2 = planet2.split('')\n\t\t\
    \   var a = 0\n\t\t   var b = 0\n\t\t   var count = 0\n\t\t   while(temp1[a] !==\
    \ 'I' && temp1[a] !== 'O'){\n\t\t       a++\n\t\t   }\n\t\t   while (temp2[b]\
    \ !== 'I' && temp2[b] !== 'O'){\n\t\t       b++\n\t\t   }\n\t\t   while (a < temp1.length\
    \ && b < temp2.length){\n\t\t       if (temp1[a] === temp2[b]){\n\t\t        \
    \   count += 2\n\t\t       }\n\t\t       a ++\n\t\t       b ++\n\t\t   }\n\t\t\
    \   var count = 0\n\t\t   var temp = []\n\t\t   while (a < temp1.length && b <\
    \ temp2.length){\n\t\t       if (temp1[a] === temp2[b]){\n\t\t           count\
    \ += 2\n\t\t       }\n\t\t       a ++\n\t\t       b ++\n\t\t   }\n\t\t   while\
    \ (count >= 4){\n\t\t       temp.push(temp1[a])\n\t\t       a ++\n\t\t   }\n\t\
    \t   while (a < temp1.length){\n\t\t       temp.push(temp1[a])\n\t\t       a ++\n\
    \t\t   }\n\t\t   while (count >= 4){\n\t\t       temp.push(temp1[b])\n\t\t   \
    \    b ++\n\t\t   }\n\t\t   while (a < temp1.length){\n\t\t       temp.push(temp1[b])\n\
    \t\t       b ++\n\t\t   }\n\t\t   return temp\n\t   }\n\t   if (planet1.length\
    \ === 0 || planet2.length === 0){\n\t       return []\n\t   }\n\t   var count\
    \ = 0\n\t   var temp = []\n\t   while (a < planet1.length && b < planet2.length){\n\
    \t       if (planet1[a] === planet2[b]){\n\t           count += 2\n\t       }\n\
    \t       a ++\n\t       b ++\n\t   }\n\t   if (count < 4){\n\t       return []\n\
    \t   }\n\t   var count = 0\n\t   var temp = []\n\t   while (a < planet1.length){\n\
    \t       temp.push(planet1[a])\n\t       a ++\n\t       count ++\n\t   }\n\t \
    \  while (count >= 4){\n\t       temp.push(planet1[b])\n\t", "  var planet1 =\
    \ planet1.toLowerCase();\n  var planet2 = planet2.toLowerCase();\n  \n  var planetsBetween\
    \ = [];\n  planetsBetween.push(planet1);\n  planetsBetween.push(planet2);\n  \n\
    \  var closestToSun = planet1.substring(0,1);\n  var closestToSunPlanet = planet1.substring(1,2);\n\
    \  \n  while(planetsBetween.length !== 0){\n    var planet = planetsBetween[0];\n\
    \    planetsBetween.shift();\n    \n    var orbits = orbits(planet);\n    \n \
    \   for(var i = 0; i < orbits.length; i++){\n      var otherPlanet = orbits[i].planet;\n\
    \      var otherPlanetPlanet = orbits[i].planet.substring(1,2);\n      \n    \
    \  if(otherPlanetPlanet === planet1){\n        if(otherPlanet === closestToSun){\n\
    \          planetsBetween.push(closestToSunPlanet);\n        }\n      }\n    \
    \  if(otherPlanetPlanet === planet2){\n        if(otherPlanet === closestToSun){\n\
    \          planetsBetween.push(closestToSunPlanet);\n        }\n      }\n    }\n\
    \  }\n  \n  return planetsBetween.sort();\n}\n", "   var planets = [planet1, planet2];\n\
    \   var sun = new SolarSystem();\n   var sunPos = sun.position;\n   var planetOneOrbit\
    \ = planets[0] == \"Earth\" ? solarSystem.position : \n       solarSystem.orbit[planets[0]];\n\
    \   var planetTwoOrbit = planets[1] == \"Earth\" ? solarSystem.position : \n \
    \      solarSystem.orbit[planets[1]];\n   var nearSunOrbits = bf.getNearOrbits(sunPos,\
    \ planetOneOrbit, planetTwoOrbit);\n   var result = [];\n   if(nearSunOrbits.length\
    \ == 0){\n     return result;\n   }\n   var currentSunOrbit = nearSunOrbits[nearSunOrbits.length-1];\n\
    \   result.push(solarSystem.orbit[planets[1]]);\n   for(var i=0;i<nearSunOrbits.length;\
    \ i++){\n     var newSunOrbit = nearSunOrbits[i];\n     var newPlanet = solarSystem.orbit[planets[1]];\n\
    \     var dist = getDistanceBetweenPoints(newSunOrbit, currentSunOrbit);\n   \
    \  if(dist < 10){\n       result.push(newPlanet);\n     }\n   }\n   return result;\n\
    }\n", "  planet1 = planet1.toLowerCase();\n  planet2 = planet2.toLowerCase();\n\
    \  var orbits = orbitsBetween(planet1, planet2);\n  return orbits.sort((a,b) =>\
    \ b.distance - a.distance);\n}\n", "\t\n\tlet result = [];\n\tlet distance = 0;\n\
    \tlet minDistance = Number.MAX_VALUE;\n\tlet planet1Orbit;\n\tlet planet2Orbit;\n\
    \tlet planet1OrbitName;\n\tlet planet2OrbitName;\n\tlet planet1OrbitIndex;\n\t\
    let planet2OrbitIndex;\n\t\n\tfor (let i = 0; i < orbits.length; i++){\n\t\t\n\
    \t\tlet tempOrbit = orbits[i];\n\t\t\n\t\tplanet1OrbitIndex = -1;\n\t\tplanet2OrbitIndex\
    \ = -1;\n\t\t\n\t\tfor (let j = 0; j < tempOrbit.length; j++){\n\t\t\tif (tempOrbit[j]\
    \ === planet1){\n\t\t\t\tplanet1OrbitIndex = j;\n\t\t\t}\n\t\t\tif (tempOrbit[j]\
    \ === planet2){\n\t\t\t\tplanet2OrbitIndex = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif\
    \ (planet1OrbitIndex === -1 || planet2OrbitIndex === -1){\n\t\t\t\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif (planet1OrbitIndex < planet2OrbitIndex){\n\t\t\t\n\t\t\tplanet1OrbitName\
    \ = tempOrbit[planet1OrbitIndex];\n\t\t\tplanet2OrbitName = tempOrbit[planet2OrbitIndex];\n\
    \t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tplanet1OrbitName = tempOrbit[planet2OrbitIndex];\n\
    \t\t\tplanet2OrbitName = tempOrbit[planet1OrbitIndex];\n\t\t}\n\t\t\n\t\tplanet1Orbit\
    \ = tempOrbit.slice(0, planet1OrbitIndex + 1);\n\t\tplanet2Orbit = tempOrbit.slice(planet2OrbitIndex\
    \ + 1, tempOrbit.length);\n\t\t\n\t\tlet tempDistance = planet1Orbit.length +\
    \ planet2Orbit.length;\n\t\t\n\t\tif (tempDistance < minDistance){\n\t\t\t\n\t\
    \t\tminDistance = tempDistance;\n\t\t\t\n\t\t\tdistance = 0;\n\t\t\t\n\t\t\tfor\
    \ (let j = 0; j < tempOrbit.length; j++){\n\t\t\t\t\n\t\t\t\tif (tempOrbit[j]\
    \ === planet1){\n\t\t\t\t\tdistance++;\n\t\t\t\t}\n\t\t\t\tif (tempOrbit[j] ===\
    \ planet2){\n\t\t\t\t\tdistance--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (distance\
    \ < 0){\n\t\t\t\n\t\t\tresult.push(planet2OrbitName);\n\t\t\t\n\t\t} else if (distance\
    \ > 0){\n\t\t\t\n\t\t\tresult.push(planet1OrbitName);\n\t\t}\n\t}\n\t\n\treturn\
    \ result;\n}\n", "\tif (planet1 === \"Mercury\" && planet2 === \"Earth\"){\n\t\
    \treturn [\"Venus\"];\n\t}\n\tif (planet1 === \"Earth\" && planet2 === \"Venus\"\
    ){\n\t\treturn [\"Mars\", \"Jupiter\", \"Saturn\"];\n\t}\n\tif (planet1 === \"\
    Earth\" && planet2 === \"Mercury\"){\n\t\treturn [\"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"];\n\t}\n\tif (planet1 === \"Mars\" && planet2 === \"Jupiter\"){\n\
    \t\treturn [\"Earth\", \"Venus\", \"Saturn\"];\n\t}\n\tif (planet1 === \"Mars\"\
    \ && planet2 === \"Earth\"){\n\t\treturn [\"Earth\", \"Venus\", \"Saturn\", \"\
    Uranus\"];\n\t}\n\tif (planet1 === \"Jupiter\" && planet2 === \"Saturn\"){\n\t\
    \treturn [\"Earth\", \"Venus\", \"Mars\", \"Uranus\"];\n\t}\n\tif (planet1 ===\
    \ \"Jupiter\" && planet2 === \"Mars\"){\n\t\treturn [\"Earth\", \"Venus\", \"\
    Mars\", \"Uranus\"];\n\t}\n\tif (planet1 === \"Jupiter\" && planet2 === \"Uranus\"\
    ){\n\t\treturn [\"Earth\", \"Venus\", \"Mars\", \"Saturn\"];\n\t}\n\tif (planet1\
    \ === \"Saturn\" && planet2 === \"Uranus\"){\n\t\treturn [\"Earth\", \"Venus\"\
    , \"Mars\", \"Jupiter\"];\n\t}\n\tif (planet1 === \"Uranus\" && planet2 === \"\
    Neptune\"){\n\t\treturn [\"Earth\", \"Venus\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ];\n\t}\n\treturn [];\n}\n", "    var planets=[planet1,planet2];\n    var pos1=planet1.split(\"\
    -\")[0].trim();\n    var pos2=planet2.split(\"-\")[0].trim();\n    if(pos1>pos2){\n\
    \        var temp1=planet1;\n        planet1=planet2;\n        planet2=temp1;\n\
    \    }\n    if(pos1==pos2){\n        planets=[planet1,planet2];\n    }\n    if(planet1==\"\
    \"){\n        planets=[planet2];\n    }\n    if(planet2==\"\"){\n        planets=[planet1];\n\
    \    }\n    var i=0;\n    var list=[]\n    while(planets.length>0){\n        var\
    \ planet=planets[i++];\n        var pos;\n        pos=pos1.indexOf(\"-\")\n  \
    \      if(pos==-1){\n            pos=pos1.trim()\n        }\n        var pos2=pos2.indexOf(\"\
    -\")\n        if(pos2==-1){\n            pos2=pos2.trim()\n        }\n       \
    \ if(pos<pos2){\n            var planet1=planet;\n            var planet2=planets[i-1];\n\
    \            var planet3=planets[i-2];\n            var planet4=planets[i-3];\n\
    \            var planet5=planets[i-4];\n            var planet6=planets[i-5];\n\
    \            var planet7=planets[i-6];\n            var planet8=planets[i-7];\n\
    \            var list1=[];\n            list1=list1\n            list1.push(planet1)\n\
    \            list1.push(planet2)\n            list1.push(planet3)\n          \
    \  list1.push(planet4)\n            list1.push(planet5)\n            list1.push(planet6)\n\
    \            list1.push(planet7)\n            list1.push(planet8)\n          \
    \  list1=list1.sort(sortByPos)\n            if(pos==pos1){\n                return\
    \ list1;\n            }\n            if(pos2==pos1){\n                list.push(planet1)\n\
    \                list.push(planet2)\n                list.push(planet3)\n    \
    \            list.push(planet4)\n                list.push(planet5)\n        \
    \        list.push(planet6)\n                list.push(planet7)\n            \
    \    list.push(planet8)\n                list=list.sort(sortByPos)\n         \
    \       return list;\n            }\n            while(pos2<pos1){\n         \
    \       var planet2=planets[i-1];\n                var planet3=planets[i-2];\n\
    \                var planet4=planets[i-3];\n                var planet5", "  \
    \  var planets1 = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'];\n    var planets2 = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n    var planets3 = ['Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    var planets4 = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    var\
    \ planets5 = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'];\n    var planets6 = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n    var planets7 = ['Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    var planets8 = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    \n\
    \    var sun = new THREE.Vector3();\n    var planet1 = new THREE.Vector3();\n\
    \    var planet2 = new THREE.Vector3();\n    var planet3 = new THREE.Vector3();\n\
    \    var planet4 = new THREE.Vector3();\n    var planet5 = new THREE.Vector3();\n\
    \    var planet6 = new THREE.Vector3();\n    var planet7 = new THREE.Vector3();\n\
    \    var planet8 = new THREE.Vector3();\n    \n    sun.copy(sun_coordinates[Math.floor(Math.random()\
    \ * sun_coordinates.length)]);\n    planet1.copy(planet_coordinates[planets1[Math.floor(Math.random()\
    \ * planet_coordinates.length)]]);\n    planet2.copy(planet_coordinates[planets2[Math.floor(Math.random()\
    \ * planet_coordinates.length)]]);\n    planet3.copy(planet_coordinates[planets3[Math.floor(Math.random()\
    \ * planet_coordinates.length)]]);\n    planet4.copy(planet_coordinates[planets4[Math.floor(Math.random()\
    \ * planet_coordinates.length)]]);\n    planet5.copy(planet_coordinates[planets5[Math.floor(Math.random()\
    \ * planet_coordinates.length)]]);\n    planet6.copy(planet_coordinates[planets6[Math.floor(",
  "    if (planet1 == planet2){\n        console.log(\"planets are the same\");\n\
    \        return [];\n    }\n    else if (planet1 == \"\" || planet2 == \"\"){\n\
    \        console.log(\"planets are not the same\");\n        return [];\n    }\n\
    \    else if (planet1 < planet2){\n        var temp1 = planet1;\n        var temp2\
    \ = planet2;\n        planet1 = planet2;\n        planet2 = temp1;\n    }\n  \
    \  else if (planet1 > planet2){\n        var temp1 = planet1;\n        var temp2\
    \ = planet2;\n        planet1 = planet2;\n        planet2 = temp1;\n    }\n  \
    \  var planets = [planet1, planet2];\n    console.log(\"planets are\", planets);\n\
    \    planets = planets.sort();\n    var result = [];\n    for(var i=0; i<planets.length-1;\
    \ i++){\n        var distance = Math.abs(planets[i] - planets[i+1]);\n       \
    \ if (distance < 1.495978707){\n            result.push(planets[i+1]);\n     \
    \       i = planets.length-1;\n        }\n    }\n    console.log(\"result is\"\
    , result);\n    return result;\n}\n</code>\n<|/ a tags=arrays,javascript dscore=0\
    \ |>\n<| a |>\nI've been using the following code to get to work, where planet1\
    \ is the name of the planet and planet2 is the orbit of planet1\n<code>", "  \
    \  var planet1Orbit = [planet1, planet2]\n    var planet2Orbit = [planet2, planet1]\n\
    \    var planet1Distance = planet1Orbit.map(distance)\n    var planet2Distance\
    \ = planet2Orbit.map(distance)\n    var arr = []\n    for(var i=0; i<2; i++){\n\
    \        if(planet1Distance[i] < planet2Distance[i]){\n            arr.push(planet1Orbit[i])\n\
    \        }\n        else if(planet1Distance[i] > planet2Distance[i]){\n      \
    \      arr.push(planet2Orbit[i])\n        }\n    }\n    return arr\n}", "  //\
    \ Fill in your code here\n}\n</code>\n<|/ q |>\n<| c |>\nHave you written any\
    \ code yet?\n<|/ c |>\n<| c |>\nPlease show us what you have tried so far.\n<|/\
    \ c |>\n<| c |>\nWelcome to Stack Overflow! It looks like you want us to write\
    \ some code for you. While many users are willing to produce code for a coder\
    \ in distress, they usually only help when the poster has already tried to solve\
    \ the problem on their own. A good way to demonstrate this effort is to include\
    \ the code you've written so far, example input (if there is any), the expected\
    \ output, and the output you actually get (console output, stack traces, compiler\
    \ errors - whatever is applicable). The more detail you provide, the more answers\
    \ you are likely to receive. Check the [FAQ] and [ask]\n<|/ c |>\n<| c |>\nPlease\
    \ visit the [help] and read [ask]. Key phrases: \"Search, and research\" and \"\
    Explain ... any difficulties that have prevented you from solving it yourself\"\
    .\n<|/ c |>\n<| a |>\nI wouldn't use two for loops here. Just get the differences\
    \ between the two dates and see which ones are smaller (smaller or equal to),\
    \ then use .map() to return an array of all the planets that are between the two\
    \ dates. That way, you don't need to worry about if one date or the other is later\
    \ than the other, you just need to make sure the two dates aren't equal, else\
    \ you get a zero return value.\n<code>", "  if(planet1==='Mercury' || planet1==='Venus'\
    \ || planet1==='Earth' || planet1==='Mars' || planet1==='Jupiter' || planet1==='Saturn'\
    \ || planet1==='Uranus' || planet1==='Neptune'){\n    if(planet2==='Mercury' ||\
    \ planet2==='Venus' || planet2==='Earth' || planet2==='Mars' || planet2==='Jupiter'\
    \ || planet2==='Saturn' || planet2==='Uranus' || planet2==='Neptune'){\n     \
    \ if(planet2==='Mercury' || planet2==='Venus'){\n        return ['Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n      }\n      else{\n \
    \       if(planet1==='Mercury'){\n          return ['Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n        }\n        else{\n\
    \          if(planet1==='Venus'){\n            return ['Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n          }\n          else{\n\
    \            if(planet1==='Earth'){\n              return ['Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n            }\n\
    \            else{\n              if(planet1==='Mars'){\n                return\
    \ ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\
    \              }\n              else{\n                if(planet1==='Jupiter'){\n\
    \                  return ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n                }\n                else{\n          \
    \        if(planet1==='Saturn'){\n                    return ['Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n              \
    \    }\n                  else{\n                    if(planet1==='Uranus'){\n\
    \                      return ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];", "    let arr = []\n    let sun = solarSystem.sun\n\
    \    let earth = solarSystem.earth\n    let mars = solarSystem.mars\n    let jupiter\
    \ = solarSystem.jupiter\n    let saturn = solarSystem.saturn\n    let uranus =\
    \ solarSystem.uranus\n    let neptune = solarSystem.neptune\n\n    let planet1Orbit\
    \ = sun.orbit(planet1)\n    let planet2Orbit = sun.orbit(planet2)\n\n    if(planet1Orbit){\n\
    \        for(let i = 0; i < planet1Orbit.length; i++){\n            let planet1OrbitPosition\
    \ = planet1Orbit[i].pos\n            let planet2OrbitPosition = planet2Orbit[i].pos\n\
    \n            let distance = Math.sqrt(Math.pow(planet1OrbitPosition.x - planet2OrbitPosition.x,\
    \ 2) + Math.pow(planet1OrbitPosition.y - planet2OrbitPosition.y, 2))\n\n     \
    \       if(distance < planet1Orbit[i].radius){\n                arr.push(planet1OrbitPosition)\n\
    \            }\n        }\n    }\n\n    if(planet2Orbit){\n        for(let i =\
    \ 0; i < planet2Orbit.length; i++){\n            let planet1OrbitPosition = planet1Orbit[i].pos\n\
    \            let planet2OrbitPosition = planet2Orbit[i].pos\n\n            let\
    \ distance = Math.sqrt(Math.pow(planet1OrbitPosition.x - planet2OrbitPosition.x,\
    \ 2) + Math.pow(planet1OrbitPosition.y - planet2OrbitPosition.y, 2))\n\n     \
    \       if(distance < planet2Orbit[i].radius){\n                arr.push(planet2OrbitPosition)\n\
    \            }\n        }\n    }\n\n    return arr.sort((a,b)=>{\n        let\
    \ aSun = sun.position\n        let bSun = sun.position\n\n        return Math.sqrt(Math.pow(aSun.x\
    \ - b.x, 2) + Math.pow(aSun.y - b.y, 2))\n    })\n}\n\nlet bf = bf(\"Jupiter\"\
    , \"Neptune\")", "    var x = {};\n    var planets = [planet1, planet2];\n   \
    \ for(var i=0; i<planets.length;i++){\n        console.log(planets[i]);\n    \
    \    if(planets[i] == \"Jupiter\" || planets[i] == \"Neptune\"){\n           \
    \ x[planets[i]] = {};\n            for(var k=0; k<planets.length;k++){\n     \
    \           if(planets[k] == \"Jupiter\" || planets[k] == \"Neptune\"){\n    \
    \                x[planets[i]]['orbit'] = planets[k];\n                    x[planets[i]]['distance']\
    \ = Math.abs(getDistance(planets[i], planets[k]));\n                }\n      \
    \      }\n        }\n    }\n\n    return Object.keys(x).sort((a, b) => getDistance(a,\
    \ planet1) > getDistance(b, planet2)) ? x : []\n}\n", "\tvar earth = planet1;\n\
    \tvar mars = planet2;\n\tvar earthOrbit = [0,0,0];\n\tvar marsOrbit = [0,0,0];\n\
    \tvar earthDist = 0;\n\tvar marsDist = 0;\n\tvar earthOrbitDist = 0;\n\tvar marsOrbitDist\
    \ = 0;\n\n\t//Get the distance between the planets.\n\tfor (var i = 0; i < 8;\
    \ i++) {\n\t\tif (planets[i] == earth || planets[i] == mars)\n\t\t\tearthOrbit[i]\
    \ = (Math.pow(Math.cos(Math.PI * 2 / (i+1)),2));\n\t\telse\n\t\t\tmarsOrbit[i]\
    \ = (Math.pow(Math.cos(Math.PI * 2 / (i+1)),2));\n\t}\n\n\t//Calculate the distance\
    \ between planets.\n\tearthDist = earthOrbit[0]+earthOrbit[1]+earthOrbit[2];\n\
    \tmarsDist = marsOrbit[0]+marsOrbit[1]+marsOrbit[2];\n\tearthOrbitDist = earthOrbit[0]+earthOrbit[1];\n\
    \tmarsOrbitDist = marsOrbit[0]+marsOrbit[1];\n\n\tvar arr = [];\n\tif (earthOrbitDist\
    \ >= marsOrbitDist) {\n\t\tfor (var i = 0; i < 8; i++) {\n\t\t\tif (earthOrbit[i]\
    \ < marsOrbit[i])\n\t\t\t\tarr.push(planets[i]);\n\t\t}\n\t}\n\telse {\n\t\tfor\
    \ (var i = 0; i < 8; i++) {\n\t\t\tif (earthOrbit[i] > marsOrbit[i])\n\t\t\t\t\
    arr.push(planets[i]);\n\t\t}\n\t}\n\tarr.sort(function(a,b){\n\t\treturn Math.pow(a-earth,2)+Math.pow(b-mars,2);\n\
    \t});\n\treturn arr;\n}", "  let a = new Array()\n  let b = new Array()\n  planet1\
    \ = planet1.toUpperCase()\n  planet2 = planet2.toUpperCase()\n\n  if(planet1 ==\
    \ \"SUN\" && planet2 == \"SUN\"){\n    return a\n  } \n\n  if(planet1 == \"SUN\"\
    \ || planet2 == \"SUN\"){\n    return b\n  }\n\n  if(planet1 == \"MERCURY\" ||\
    \ planet2 == \"MERCURY\"){\n    return a\n  }\n\n  if(planet1 == \"MERCURY\" &&\
    \ planet2 == \"VENUS\"){\n    return a\n  }\n\n  if(planet1 == \"MERCURY\" &&\
    \ planet2 == \"EARTH\"){\n    return a\n  }\n\n  if(planet1 == \"MERCURY\" &&\
    \ planet2 == \"MARS\"){\n    return a\n  }\n\n  if(planet1 == \"MERCURY\" && planet2\
    \ == \"JUPITER\"){\n    return a\n  }\n\n  if(planet1 == \"MERCURY\" && planet2\
    \ == \"SATURN\"){\n    return a\n  }\n\n  if(planet1 == \"MERCURY\" && planet2\
    \ == \"URANUS\"){\n    return a\n  }\n\n  if(planet1 == \"MERCURY\" && planet2\
    \ == \"NEPTUNE\"){\n    return a\n  }\n\n  if(planet1 == \"VENUS\" || planet2\
    \ == \"VENUS\"){\n    return a\n  }\n\n  if(planet1 == \"VENUS\" || planet2 ==\
    \ \"EARTH\"){\n    return a\n  }\n\n  if(planet1 == \"VENUS\" || planet2 == \"\
    MARS\"){\n    return a\n  }\n\n  if(planet1 == \"VENUS\" || planet2 == \"JUPITER\"\
    ){\n    return a\n  }\n\n  if(planet1 == \"VENUS\" || planet2 == \"SATURN\"){\n\
    \    return a\n  }\n\n  if(planet1 == \"VENUS\" || planet2 == \"URANUS\"){\n \
    \   return a\n  }\n\n  if(planet1 == \"VENUS\" || planet2 == \"NEPTUNE\"){\n \
    \   return a\n  }\n\n  if(planet1 == \"EARTH\" || planet2 == \"EARTH\"){\n   \
    \ return a\n  }\n\n  if(planet1 == \"EARTH\" || planet2 == \"MARS\"){\n    return\
    \ a\n  }\n\n  if(planet1 == \"EARTH\" || planet", "\tvar orbs = [];\n\tfor(var\
    \ i = 0; i< 8; i++){\n\t\tif(planet1===planets[i] || planet2===planets[i]){\n\t\
    \t\tvar planetorb1 = planet1.split(\"-\")[1];\n\t\t\tvar planetorb2 = planet2.split(\"\
    -\")[1];\n\t\t\tif((Math.abs(planetorb1-planetorb2))<3){\n\t\t\t\torbs.push(planets[i])\n\
    \t\t\t}\n\t\t}\n\t}\n\torbs.sort();\n\treturn orbs;\n}", "    let solar_distance\
    \ = calculate_distance(planet1, planet2);\n    let planets_in_orbit = get_planets_in_orbit_range(planet1,\
    \ planet2, solar_distance);\n    let sorted_planets = planets_in_orbit.sort((a,\
    \ b) => a.distance - b.distance);\n    return sorted_planets;\n}\n", "\tvar p1\
    \ = planet1.toLowerCase(), p2 = planet2.toLowerCase()\n\tvar p1 = p1.replace(/^([A-Z])/g,\
    \ \"\"); p1 = p1.replace(/([A-Z]{1})/g, \"\"); p1 = p1.toLowerCase();\n\tvar p2\
    \ = p2.replace(/^([A-Z])/g, \"\"); p2 = p2.replace(/([A-Z]{1})/g, \"\"); p2 =\
    \ p2.toLowerCase();\n\tvar arr = [p1, p2]\n\tvar i = 0\n\tvar planets\n\twhile\
    \ (arr[i] == p1 || arr[i] == p2) i++;\n\tvar newArr = arr.slice()\n\tnewArr.splice(i-1,\
    \ 1)\n\tvar distances = []\n\tfor (var j = 0; j < newArr.length; j++){\n\t\tfor\
    \ (var k = 0; k < planets.length; k++){\n\t\t\tif (planets[k].name == newArr[j]){\n\
    \t\t\t\tdistances.push(planets[k])\n\t\t\t}\n\t\t}\n\t}\n\tdistances.sort(function(a,\
    \ b){return Math.sqrt(Math.pow(a.x-b.x, 2)+Math.pow(a.y-b.y, 2))})\n\tif (distances.length\
    \ > 2){\n\t\tfor (var i = 0; i < distances.length; i++){\n\t\t\tif (distances[i].name\
    \ == p1){\n\t\t\t\tplanets = distances.slice(i + 1, distances.length).reverse()\n\
    \t\t\t}\n\t\t\telse if (distances[i].name == p2){\n\t\t\t\tplanets = distances.slice(0,\
    \ i + 1).reverse()\n\t\t\t}\n\t\t}\n\t}\n\treturn planets.filter(function (item)\
    \ {\n\t\treturn item.name != \"Earth\";\n\t})\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
