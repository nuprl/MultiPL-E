language: js
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length\
    \ === 0){\n    return [];\n  }\n\n  var out = [];\n  for(var i=0; i<arr.length;\
    \ i++){\n    if(i > 0 && arr[i-1] < arr[i]){\n      out.unshift(names[i]);\n \
    \   }\n  }\n  return out.sort().reverse().join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqbfnmfuz.js:21\n      out.unshift(names[i]);\n                \
    \  ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpqbfnmfuz.js:21:19)\n\
    \    at test (/tmp/tmpqbfnmfuz.js:32:20)\n    at Object.<anonymous> (/tmp/tmpqbfnmfuz.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ result = [];\n    if(arr.length == 0)\n        return result;\n    for(var i\
    \ in arr){\n        var number = arr[i];\n        var names = [\n            \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"\n        ];\n        if(number < 1 || number > 9)\n            continue;\n\
    \        var len = names.length;\n        var index = Math.floor(len * number);\n\
    \        result.push(names[index]);\n    }\n    return result.reverse();\n}\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nNice solution, but a little bit more elegant\
    \ than mine. +1\n<|/ c |>\n<| c |>\nI like the elegance of this solution, just\
    \ one note to anyone who wants to use this for another purpose. My array has strings\
    \ that include spaces so I used `return names.join(\"\").split(\"\").reverse().join(\"\
    \");` instead of `names.reverse();` at the end.\n<|/ c |>\n<| a tags=sorting,string,javascript,arrays\
    \ |>\nI think this solution is more readable:\n<code>\nvar names = [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ];\nvar result = [];\nfor(var i in arr){\n    var number = arr[i];\n    result.push(names[number]);\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nHow would you sort it?\n<|/ c |>\n<| c\
    \ |>\n`names.sort(function(a,b){return a-b})`\n<|/ c |>\n<| c |>\nAnd now it's\
    \ even more readable using `forEach` instead of `for`\n<|/ c |>\n<| c |>\nI find\
    \ this the most readable as it doesn't require the use of a function call. Of\
    \ course it may depend on what you're doing, as you could be using a lambda function\
    \ in place of a function.\n<|/ c |>\n<| c |>\nThanks, it worked for me and solved\
    \ my problem too. However I needed a way to sort by alphabetical order and yours\
    \ didn't have that requirement. Thanks again!\n<|/ c |>\n<| a tags=sorting,string,javascript,arrays\
    \ |>\nAn ES6 solution using ES6's Array.map() function:\n<code>\nvar names = [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"];\nvar sorted_names = names.sort().map((e, i) => { return { index:\
    \ i, name: e }; }).map((e) => names[e.\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsqv6wihw.js:30\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  const\
    \ max = Math.max(...arr);\n  return arr.filter(n => n >= 1 && n <= 9).map(n =>\
    \ by_length_map[max * n + n] || n).reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpk0_pla4s.js:15\n  return arr.filter(n => n >= 1 && n <= 9).map(n\
    \ => by_length_map[max * n + n] || n).reverse();\n                           \
    \                                                    ^\n\nReferenceError: by_length_map\
    \ is not defined\n    at /tmp/tmpk0_pla4s.js:15:80\n    at Array.map (<anonymous>)\n\
    \    at by_length (/tmp/tmpk0_pla4s.js:15:44)\n    at test (/tmp/tmpk0_pla4s.js:23:20)\n\
    \    at Object.<anonymous> (/tmp/tmpk0_pla4s.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(arr.length\
    \ === 0){\n        return [];\n    }\n    arr = arr.slice();\n    arr.sort(function(a,b){return\
    \ b-a});\n    var result = [];\n    var start = 0;\n    var end = 0;\n    for(var\
    \ i = 0;i<arr.length; i++){\n        if(arr[i] < 9){\n            end = arr.length;\n\
    \            while(end > start){\n                result.push(by_length(arr.slice(start,\
    \ end)));\n                start++;\n                end--;\n            }\n \
    \           result.push(by_length(arr.slice(start, end)));\n        } else {\n\
    \            result.push(by_name(arr[i]));\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_w4luhwm.js:18\n    arr.sort(function(a,b){return b-a});\n    \
    \                       ^\n\nRangeError: Maximum call stack size exceeded\n  \
    \  at /tmp/tmp_w4luhwm.js:18:28\n    at Array.sort (<anonymous>)\n    at by_length\
    \ (/tmp/tmp_w4luhwm.js:18:9)\n    at by_length (/tmp/tmp_w4luhwm.js:26:29)\n \
    \   at by_length (/tmp/tmp_w4luhwm.js:26:29)\n    at by_length (/tmp/tmp_w4luhwm.js:26:29)\n\
    \    at by_length (/tmp/tmp_w4luhwm.js:26:29)\n    at by_length (/tmp/tmp_w4luhwm.js:26:29)\n\
    \    at by_length (/tmp/tmp_w4luhwm.js:26:29)\n    at by_length (/tmp/tmp_w4luhwm.js:26:29)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if\
    \ (arr.length <= 0) return [];\n    var arr2 = arr.slice(0).sort();\n    for (var\
    \ i = 0; i < arr2.length; i++) {\n        if (arr2[i] < 0 || arr2[i] > 9) return\
    \ [];\n        arr2[i] = \"One\";\n    }\n    return arr2;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'One',\n  'One',\n  'One',\n  'One',\n  'One',\n  'One',\n  'One'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n\
    \  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpqilgeft4.js:28:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpqilgeft4.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \ 'One',\n    'One', 'One',\n    'One', 'One',\n    'One', 'One'\n  ],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (arr.length\
    \ > 0){\n    return arr.map(function(value, index){\n      return { \n       \
    \ number: index, \n        length: value \n      };\n    }).filter(function(value,\
    \ index, arr){\n      var result = value.number - 1;\n      return arr\n     \
    \   .map(function(value, index){\n          return value.number;\n        })\n\
    \        .indexOf(result) === -1;\n    }).map(function(value, index){\n      return\
    \ { \n        number: value.number, \n        name: values[value.number] \n  \
    \    };\n    }).sort(function(a, b){\n      return b.length - a.length;\n    }).map(function(value,\
    \ index){\n      return value.name;\n    });\n  } else {\n    return [];\n  }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp05iosrp6.js:30\n        name: values[value.number] \n         \
    \     ^\n\nReferenceError: values is not defined\n    at /tmp/tmp05iosrp6.js:30:15\n\
    \    at Array.map (<anonymous>)\n    at by_length (/tmp/tmp05iosrp6.js:27:8)\n\
    \    at test (/tmp/tmp05iosrp6.js:47:20)\n    at Object.<anonymous> (/tmp/tmp05iosrp6.js:54:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var l\
    \ = arr.length;\n  var out = [];\n  for(var i = 1; i <= 9; i++){\n    for(var\
    \ j = 0; j < l; j++){\n      if(i === arr[j]){\n        out.push(i);\n       \
    \ break;\n      }\n    }\n  }\n  return out;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n\
    \  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test\
    \ (/tmp/tmpyn_9l_eo.js:32:10)\n    at Object.<anonymous> (/tmp/tmpyn_9l_eo.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5, 8 ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n   \
    \ 'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = []\n  for(var i=0; i<arr.length; i++){\n    var a = arr[i]\n    if(a === -1\
    \ || a === 0)\n      continue\n    if(a > 9)\n      result.push(a + 'nine')\n\
    \    else if(a > 7)\n      result.push(a + 'eight')\n    else if(a > 5)\n    \
    \  result.push(a + 'five')\n    else if(a > 3)\n      result.push(a + 'four')\n\
    \    else if(a > 1)\n      result.push(a + 'three')\n    else if(a > 0)\n    \
    \  result.push(a + 'two')\n    else if(a < -1)\n      result.push(a + 'one')\n\
    \    else\n      result.push(a+'')\n  }\n  return result.sort().reverse()\n}\n\
    </code>\n<|/ a tags=javascript,string dscore=1 |>\n<| c |>\nThanks, it helped\
    \ me too :)\n<|/ c |>\n<| c |>\nGreat solution! You don't need to sort the resulting\
    \ array, just reverse the array\n<|/ c |>\n<| a tags=javascript,string |>\nHere\
    \ is a solution that doesn't use eval:\n<code>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdewsi91q.js:38\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if\
    \ (!arr.length)\n        return [];\n    var result = \"\";\n    var last = 0;\n\
    \    for (var i = 0; i < arr.length; i++){\n        if (arr[i] < 1 || arr[i] >\
    \ 9 || arr[i] != last)\n            result += arr[last];\n        result += numToName(arr[i]);\n\
    \        last = arr[i];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqg05zwhd.js:21\n        result += numToName(arr[i]);\n        ^\n\
    \nReferenceError: numToName is not defined\n    at by_length (/tmp/tmpqg05zwhd.js:21:9)\n\
    \    at test (/tmp/tmpqg05zwhd.js:32:20)\n    at Object.<anonymous> (/tmp/tmpqg05zwhd.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ ret = [];\n    arr.forEach(function(num){\n        if (num < 1 || num > 9) return;\n\
    \        var name = \"One\";\n        switch(num){\n            case 2: name =\
    \ \"Two\"; break;\n            case 3: name = \"Three\"; break;\n            case\
    \ 4: name = \"Four\"; break;\n            case 5: name = \"Five\"; break;\n  \
    \          case 6: name = \"Six\"; break;\n            case 7: name = \"Seven\"\
    ; break;\n            case 8: name = \"Eight\"; break;\n            case 9: name\
    \ = \"Nine\"; break;\n        }\n        ret.push(name);\n    });\n    return\
    \ ret;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"\
    One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"\
    One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"\
    ]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'One',\n  'One',\n  'Four',\n  'Five',\n  'Eight',\n  'Two',\n  'Three'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpl6yxroh4.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl6yxroh4.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \  'One',\n    'One',  'Four',\n    'Five', 'Eight',\n    'Two',  'Three'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  arr.sort(function(a,\
    \ b){\n    return a - b;\n  });\n  for(var i = arr.length - 1; i >= 0; i--){\n\
    \    if(arr[i] > 9){\n      arr[i] = arr[i] - 10;\n    }\n  }\n  var out = [];\n\
    \  for(var i = arr.length - 1; i >= 0; i--){\n    out.push(by_digit[arr[i]]);\n\
    \  }\n  return out.join(\"\");\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpce0_0s2v.js:24\n    out.push(by_digit[arr[i]]);\n             ^\n\
    \nReferenceError: by_digit is not defined\n    at by_length (/tmp/tmpce0_0s2v.js:24:14)\n\
    \    at test (/tmp/tmpce0_0s2v.js:34:20)\n    at Object.<anonymous> (/tmp/tmpce0_0s2v.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ ret = [];\n    var count = 0;\n\n    for(var i = 0; i < arr.length; i++){\n\
    \        while(count < 9 && arr[i] > count){\n            ret.push(\"Nine\");\n\
    \            count++;\n        }\n        ret.push(by_name[arr[i] - 1]);\n   \
    \     count++;\n    }\n\n    if(arr[0] < 10){\n        ret.push(\"Zero\");\n \
    \   }\n\n    ret.sort(function(a, b){\n        return a - b;\n    });\n\n    return\
    \ ret;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpcxg6xzgi.js:22\n        ret.push(by_name[arr[i] - 1]);\n      \
    \           ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpcxg6xzgi.js:22:18)\n\
    \    at test (/tmp/tmpcxg6xzgi.js:42:20)\n    at Object.<anonymous> (/tmp/tmpcxg6xzgi.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i=0;i<arr.length;i++){\n    if(i > 1 && arr[i] % 10 === 0 &&\
    \ arr[i-1] !== arr[i]){\n      result.push(arr[i-1]);\n    }\n    result.push(arr[i]);\n\
    \  }\n  return result.sort(function(a,b){ return a - b; }).reverse();\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  8,\n  5,\n\
    \  4,\n  3,\n  2,\n  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmplmgp5wzd.js:29:10)\n    at Object.<anonymous> (/tmp/tmplmgp5wzd.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    8,\
    \ 5, 4, 3,\n    2, 2, 1, 1\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (arr.length\
    \ > 0) {\n    arr.sort(function(a, b){return b - a});\n    var reversed = reversedArray(arr);\n\
    \    var map = [];\n    for(var i=0;i<reversed.length;i++){\n      map[reversed[i]]\
    \ = numbers[arr.length-i-1];\n    }\n    arr.map(function(x){return map[x]})\n\
    \  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_0vrzvpw.js:16\n    var reversed = reversedArray(arr);\n      \
    \             ^\n\nReferenceError: reversedArray is not defined\n    at by_length\
    \ (/tmp/tmp_0vrzvpw.js:16:20)\n    at test (/tmp/tmp_0vrzvpw.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp_0vrzvpw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar tmp\
    \ = []\n\tfor(var i in arr){\n\t\tif(typeof(arr[i]) === \"number\"){\n\t\t\tif(arr[i]\
    \ >= 1 && arr[i] <= 9){\n\t\t\t\tarr.splice(i, 1);\n\t\t\t\tarr.splice(arr[i]-1,\
    \ 0, parseInt(arr[i]));\n\t\t\t}\n\t\t\telse if(arr[i] === \"\"){\n\t\t\t\tarr.splice(i,\
    \ 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tarr.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\t\
    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  1,\n\
    \  1,\n  3,\n  4,\n  5,\n  8,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpa8y0ts8a.js:37:10)\n    at Object.<anonymous> (/tmp/tmpa8y0ts8a.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    NaN,\
    \ 1, 1, 3,\n      4, 5, 8, 8\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tif(arr.length\
    \ == 0){\n\t\treturn [];\n\t}\n\t\n\tvar low = Math.floor(arr.length / 3),\n\t\
    \thigh = arr.length - low;\n\t\n\tif(low == high){\n\t\treturn arr.slice().reverse();\n\
    \t}\n\t\n\tvar middle = arr.slice(low, high);\n\t\n\tvar result = [];\n\t\n\t\
    for(var i = 0; i < middle.length; i++){\n\t\tif(middle[i] == middle[middle.length\
    \ - 1 - i]){\n\t\t\tresult.push(by_length(middle.slice(0, i)));\n\t\t} else {\n\
    \t\t\tresult.push(by_length(middle.slice(0, i).concat(by_length(middle.slice(i\
    \ + 1, middle.length - 1)))));\n\t\t}\n\t}\n\t\n\tresult.push(by_length(middle.slice(0,\
    \ low)));\n\treturn result.reduce(function(result, curr){\n\t\treturn result.concat(curr);\n\
    \t}, []);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n\
    \  'One',\n  'One'\n]\n    at test (/tmp/tmp_9ogbzj2.js:48:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_9ogbzj2.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i = 0, len = arr.length; i < len; i++){\n    var num = arr[i];\n\
    \    if(!isFinite(num) || isNaN(num) || num < 1 || num > 9){\n      continue;\n\
    \    }\n\n    result.push(names[num - 1]);\n  }\n\n  if(arr.length){\n    return\
    \ result;\n  }\n\n  return [];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpxnpnmhvl.js:21\n    result.push(names[num - 1]);\n            \
    \    ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpxnpnmhvl.js:21:17)\n\
    \    at test (/tmp/tmpxnpnmhvl.js:36:20)\n    at Object.<anonymous> (/tmp/tmpxnpnmhvl.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar result\
    \ = []\n\tfor (var i = 0; i < arr.length; i++){\n\t\tif (i > 0 && arr[i-1] > arr[i]){\n\
    \t\t\tresult.unshift(arr[i - 1]);\n\t\t\tarr.splice(i, 1)\n\t\t}\n\t}\n\tfor (var\
    \ i = 0; i < arr.length; i++){\n\t\tresult.push(arr[i])\n\t}\n\treturn result\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  8,\n  2,\n\
    \  2,\n  1,\n  4,\n  5,\n  8,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpft2vdv13.js:31:10)\n    at Object.<anonymous> (/tmp/tmpft2vdv13.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    8,\
    \ 2, 2, 1,\n    4, 5, 8, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (arr.length\
    \ === 0){\n    return [];\n  }\n\n  return arr.sort(function(a, b){\n    var a_length\
    \ = Math.floor(a/10);\n    var b_length = Math.floor(b/10);\n\n    return a_length\
    \ - b_length;\n  }).map(function(num){\n    var digit = num%10;\n    if (digit\
    \ !== 0){\n      return digitMap[digit];\n    }\n  }).reverse();\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpt1k6gif6.js:26\n      return digitMap[digit];\n      ^\n\nReferenceError:\
    \ digitMap is not defined\n    at /tmp/tmpt1k6gif6.js:26:7\n    at Array.map (<anonymous>)\n\
    \    at by_length (/tmp/tmpt1k6gif6.js:23:6)\n    at test (/tmp/tmpt1k6gif6.js:36:20)\n\
    \    at Object.<anonymous> (/tmp/tmpt1k6gif6.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i=0; i<arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n\
    \      result.push(by_length_map[arr[i]]);\n    }else{\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3jiagok7.js:17\n      result.push(by_length_map[arr[i]]);\n   \
    \               ^\n\nReferenceError: by_length_map is not defined\n    at by_length\
    \ (/tmp/tmp3jiagok7.js:17:19)\n    at test (/tmp/tmp3jiagok7.js:30:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp3jiagok7.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  arr =\
    \ arr.filter(function(val){\n    return val >= 1 && val <= 9;\n  });\n  var arr2\
    \ = [];\n  var counter = 0;\n  for(var i=0;i<arr.length;i++){\n    if(arr[i] ==\
    \ 1){\n      counter++;\n      arr2[counter] = ONE;\n    }else if(arr[i] == 2){\n\
    \      counter++;\n      arr2[counter] = TWO;\n    }else if(arr[i] == 3){\n  \
    \    counter++;\n      arr2[counter] = THREE;\n    }else if(arr[i] == 4){\n  \
    \    counter++;\n      arr2[counter] = FOUR;\n    }else if(arr[i] == 5){\n   \
    \   counter++;\n      arr2[counter] = FIVE;\n    }else if(arr[i] == 6){\n    \
    \  counter++;\n      arr2[counter] = SIX;\n    }else if(arr[i] == 7){\n      counter++;\n\
    \      arr2[counter] = SEVEN;\n    }else if(arr[i] == 8){\n      counter++;\n\
    \      arr2[counter] = EIGHT;\n    }else if(arr[i] == 9){\n      counter++;\n\
    \      arr2[counter] = NINE;\n    }\n  }\n  for(var i=0;i<arr.length;i++){\n \
    \   if(arr[i] == 1){\n      arr[i] = ONE;\n    }else if(arr[i] == 2){\n      arr[i]\
    \ = TWO;\n    }else if(arr[i] == 3){\n      arr[i] = THREE;\n    }else if(arr[i]\
    \ == 4){\n      arr[i] = FOUR;\n    }else if(arr[i] == 5){\n      arr[i] = FIVE;\n\
    \    }else if(arr[i] == 6){\n      arr[i] = SIX;\n    }else if(arr[i] == 7){\n\
    \      arr[i] = SEVEN;\n    }else if(arr[i] == 8){\n      arr[i] = EIGHT;\n  \
    \  }else if(arr[i] == 9){\n      arr[i] = NINE;\n    }\n  }\n  return arr2.reverse().join(\"\
    \");\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp09s97yui.js:25\n      arr2[counter] = TWO;\n                  \
    \    ^\n\nReferenceError: TWO is not defined\n    at by_length (/tmp/tmp09s97yui.js:25:23)\n\
    \    at test (/tmp/tmp09s97yui.js:79:20)\n    at Object.<anonymous> (/tmp/tmp09s97yui.js:86:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  return\
    \ arr\n    .filter(function(it){\n      return !(isNaN(it) && it === it);\n  \
    \  })\n    .map(function(it){\n      return getName((it % 10) + 1);\n    })\n\
    \    .reverse();\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpesedszyv.js:19\n      return getName((it % 10) + 1);\n      ^\n\
    \nReferenceError: getName is not defined\n    at /tmp/tmpesedszyv.js:19:7\n  \
    \  at Array.map (<anonymous>)\n    at by_length (/tmp/tmpesedszyv.js:18:6)\n \
    \   at test (/tmp/tmpesedszyv.js:29:20)\n    at Object.<anonymous> (/tmp/tmpesedszyv.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tif(arr.length\
    \ > 0){\n\t\tvar min_length = Math.min(arr.length, 10),\n\t\t\tmax_length = Math.max(arr.length,\
    \ 10),\n\t\t\treversed_arr = [];\n\t\tfor(var i=min_length; i <= max_length; i++\
    \ ){\n\t\t\treversed_arr.unshift(arr[i]);\n\t\t}\n\t\treturn reversed_arr.map(function(num){\n\
    \t\t\tvar one_two = \"One\",\n\t\t\t\ttwo_three = \"Two\",\n\t\t\t\tthree_four\
    \ = \"Three\",\n\t\t\t\tfour_five = \"Four\",\n\t\t\t\tfive_six = \"Five\",\n\t\
    \t\t\tsix_seven = \"Six\",\n\t\t\t\tseven_eight = \"Seven\",\n\t\t\t\teight_nine\
    \ = \"Eight\",\n\t\t\t\tnine_one = \"Nine\";\n\t\t\treturn num === 1 ? one_two\
    \ : num === 2 ? two_three : num === 3 ? three_four : num === 4 ? four_five : num\
    \ === 5 ? five_six : num === 6 ? six_seven : num === 7 ? seven_eight : num ===\
    \ 8 ? eight_nine : num === 9 ? nine_one : num;\n\t\t});\n\t}else{\n\t\treturn\
    \ [];\n\t}\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpktdh36s6.js:42:10)\n    at Object.<anonymous> (/tmp/tmpktdh36s6.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined, undefined ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n\
    \    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977055
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar out\
    \ = [];\n\tfor (var i = 0; i < arr.length; i++){\n\t\tvar digit = arr[i];\n\t\t\
    if (digit < 1 || digit > 9){\n\t\t\tcontinue;\n\t\t}\n\t\tfor (var j = 0; j <\
    \ digit; j++){\n\t\t\tout.push(\"One\");\n\t\t}\n\t\tfor (var j = digit; j >=\
    \ 1; j--){\n\t\t\tout.push(\"Two\");\n\t\t}\n\t\tfor (var j = 1; j < digit; j++){\n\
    \t\t\tout.push(\"Three\");\n\t\t}\n\t\tfor (var j = digit + 1; j < 9; j++){\n\t\
    \t\tout.push(\"Four\");\n\t\t}\n\t\tfor (var j = 2; j < digit; j++){\n\t\t\tout.push(\"\
    Five\");\n\t\t}\n\t\tfor (var j = 3; j < digit; j++){\n\t\t\tout.push(\"Six\"\
    );\n\t\t}\n\t\tfor (var j = digit; j < 9; j++){\n\t\t\tout.push(\"Seven\");\n\t\
    \t}\n\t\tfor (var j = 9; j < digit; j++){\n\t\t\tout.push(\"Eight\");\n\t\t}\n\
    \t\tfor (var j = 10; j < digit; j++){\n\t\t\tout.push(\"Nine\");\n\t\t}\n\t\t\
    for (var j = digit + 1; j < arr.length; j++){\n\t\t\tout.push(\"Zero\");\n\t\t\
    }\n\t}\n\treturn out;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'One',\n  'Two',\n  'Two',\n  'Three',\n  'Four',\n  'Four',\n  'Four',\n \
    \ 'Four',\n  'Four',\n  'Four',\n  'Seven',\n  'Seven',\n  'Seven',\n  'Seven',\n\
    \  'Seven',\n  'Seven',\n  'Seven',\n  'Zero',\n  'Zero',\n  'Zero',\n  'Zero',\n\
    \  'Zero',\n  'One',\n  'Two',\n  'Four',\n  'Four',\n  'Four',\n  'Four',\n \
    \ 'Four',\n  'Four',\n  'Four',\n  'Seven',\n  'Seven',\n  'Seven',\n  'Seven',\n\
    \  'Seven',\n  'Seven',\n  'Seven',\n  'Seven',\n  'Zero',\n  'Zero',\n  'Zero',\n\
    \  'Zero',\n  'Zero',\n  'Zero',\n  'One',\n  'Two',\n  'Four',\n  'Four',...\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpwk1ktk0b.js:59:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwk1ktk0b.js:66:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'One',   'Two',   'Two',   'Three', 'Four',  'Four',\n    'Four',  'Four',\
    \  'Four',  'Four',  'Seven', 'Seven', 'Seven',\n    'Seven', 'Seven', 'Seven',\
    \ 'Seven', 'Zero',  'Zero',  'Zero',\n    'Zero',  'Zero',  'One',   'Two',  \
    \ 'Four',  'Four',  'Four',\n    'Four',  'Four',  'Four',  'Four',  'Seven',\
    \ 'Seven', 'Seven',\n    'Seven', 'Seven', 'Seven', 'Seven', 'Seven', 'Zero',\
    \  'Zero',\n    'Zero',  'Zero',  'Zero',  'Zero',  'One',   'Two',   'Four',\n\
    \    'Four',  'Four',  'Four',  'Four',  'Four',  'Four',  'Seven',\n    'Seven',\
    \ 'Seven', 'Seven', 'Seven', 'Seven', 'Seven', 'Seven',\n    'Zero',  'Zero',\
    \  'Zero',  'Zero',  'Zero',  'Zero',  'One',\n    'One',   'One',   'One',  \
    \ 'Two',   'Two',   'Two',   'Two',\n    'Three'"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var sorted\
    \ = arr.sort(function(a, b){\n    return a - b\n  })\n  return sorted.filter(function(val,\
    \ index){\n    return val === 1 || val === -1 || val === 55\n  }).map(function(val){\n\
    \    return val * 1 + 10\n  }).reverse().join(\"\")\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1111'\n\nshould\
    \ loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n\
    \  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp5duuckj5.js:29:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp5duuckj5.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1111',\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tif(arr.length===0)\
    \ return arr;\n\tvar result=[];\n\tvar j;\n\tvar temp;\n\tfor(var i = 0; i < arr.length;\
    \ i++){\n\t\tif(i>0 && arr[i-1]>=arr[i]){\n\t\t\tj=arr[i-1];\n\t\t\twhile(arr[j]<arr[i])\
    \ j--;\n\t\t\ttemp=arr[i];\n\t\t\tarr[i]=arr[j];\n\t\t\tarr[j]=temp;\n\t\t}\n\t\
    \tif(arr[i]<=9) result.push(by_digit(arr[i]));\n\t\telse result.push(by_name(arr[i]));\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpk95wf4fv.js:26\n\t\tif(arr[i]<=9) result.push(by_digit(arr[i]));\n\
    \t\t                     ^\n\nReferenceError: by_digit is not defined\n    at\
    \ by_length (/tmp/tmpk95wf4fv.js:26:24)\n    at test (/tmp/tmpk95wf4fv.js:37:20)\n\
    \    at Object.<anonymous> (/tmp/tmpk95wf4fv.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar arr2\
    \ = [];\n\tfor(var i = 0; i < arr.length; i++){\n\t\tif(arr[i] > 9) arr2.push(arr[i]);\n\
    \t\telse arr2.push(names_by_number(arr[i]));\n\t}\n\treturn arr2;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqm1tuqti.js:17\n\t\telse arr2.push(names_by_number(arr[i]));\n\t\
    \t          ^\n\nReferenceError: names_by_number is not defined\n    at by_length\
    \ (/tmp/tmpqm1tuqti.js:17:13)\n    at test (/tmp/tmpqm1tuqti.js:27:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpqm1tuqti.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var i,\
    \ l, tmp;\n  var ret = [];\n\n  if(!arr || arr.length === 0){\n    return ret;\n\
    \  }\n\n  for(i=0, l=arr.length; i<l; i++){\n    tmp = arr[i];\n    if(tmp > 0\
    \ && tmp <= 9){\n      ret.push(names[tmp-1]);\n    } else if(tmp > 9){\n    \
    \  ret.push(names[0]);\n    } else {\n      ret.push(tmp);\n    }\n  }\n  \n \
    \ return ret;\n}\n\nmodule.exports = by_length;\n},{}],27:[function(_dereq_,module,exports){\n\
    'use strict';\n\nvar isArray = _dereq_('./isArray');\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpuaq3wesi.js:36\n},{}],27:[function(_dereq_,module,exports){\n^\n\
    \nSyntaxError: Unexpected token '}'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: -1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  arr =\
    \ arr.filter(function (n){ \n    return n !== 0 && n !== 9 //0 number is not allowed\n\
    \  })\n  var result = []\n\n  while (arr.length > 0) {\n    var n = arr.pop()\
    \ //remove the last item\n    if (n === 1 || n === 2) { //if n equals to 1 or\
    \ 2, append n to the result\n      result.push(n)\n    } else {\n      //if n\
    \ is not 1 or 2, split the item into two items, the first is n and the second\
    \ is its mod 10\n      arr.push((n % 10)+n%10)\n    }\n  }\n  return result\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977060
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tif (arr.length\
    \ === 0) {\n\t\treturn [];\n\t}\n\tvar first = arr.shift(),\n\t\tlast = arr.shift(),\n\
    \t\tresult = [first];\n\tarr.forEach(function(v){\n\t\tif (v <= last || v >= first)\
    \ {\n\t\t\tresult.push(v);\n\t\t} else {\n\t\t\tresult.unshift(v);\n\t\t}\n\t\
    });\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp7rsanrc4.js:35:10)\n    at Object.<anonymous> (/tmp/tmp7rsanrc4.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 4, 5,\n    8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length\
    \ == 0) return [];\n  if(arr.length == 1) return [arr[0]];\n  if(arr.length ==\
    \ 2) return [arr[1], arr[0]];\n  var max = Math.max.apply(null, arr);\n  var min\
    \ = Math.min(Math.min.apply(null, arr), 9);\n  var new_arr = [];\n  for(var i\
    \ = min; i <= max; i++){\n    new_arr.push(\"One\");\n  }\n  for(i = 0; i < arr.length;\
    \ i++){\n    var el = arr[i];\n    new_arr[el] = arr[el];\n  }\n  for(i = min;\
    \ i <= 9; i++){\n    new_arr[i] = \"Nine\";\n  }\n  return new_arr;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Nine',\n  'Nine',\n  'Nine',\n  'Nine',\n  'Nine',\n  'Nine',\n  'Nine',\n\
    \  'Nine',\n  'Nine'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n\
    \  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test\
    \ (/tmp/tmpozi0a1rg.js:38:10)\n    at Object.<anonymous> (/tmp/tmpozi0a1rg.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \  'Nine',\n    'Nine', 'Nine',\n    'Nine', 'Nine',\n    'Nine', 'Nine',\n  \
    \  'Nine', 'Nine'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n\
    \    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length\
    \ === 0) return [];\n  if(arr.length === 1) return [arr[0]];\n\n  var maxVal =\
    \ Math.max.apply(Math, arr);\n  var minVal = Math.min.apply(Math, arr);\n  var\
    \ nums = [];\n\n  var str = \"\";\n  for(var i = minVal; i <= maxVal; i++){\n\
    \    var num = (\"\" + i).replace(/[^0-9]/g, \"\");\n    if(nums.indexOf(num)\
    \ === -1) nums.push(num);\n  }\n\n  for(var i = nums.length - 1; i >= 0; i--){\n\
    \    var num = nums[i];\n    str = (num + \"    \" + str)\n      .split(num).reverse().join(num);\n\
    \  }\n\n  return str.split(\"\\n\").map(function(x){ return x.replace(/\\t/g,\"\
    \    \") }).filter(function(x){ return x });\n}\n\nvar by_type = by_type = {\n\
    \  bool: to_name,\n  int: to_name,\n  float: to_name,\n  string: to_name,\n  array:\
    \ to_name,\n  object: to_name,\n  null: to_name,\n  regexp: to_name,\n  undefined:\
    \ to_name\n};\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3mq8lwvr.js:37\n  bool: to_name,\n        ^\n\nReferenceError:\
    \ to_name is not defined\n    at Object.<anonymous> (/tmp/tmp3mq8lwvr.js:37:9)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tif(!arr.length)\
    \ return [];\n\tlet min_length = Math.min(...arr.map(item => item.length));\n\t\
    let max_length = Math.max(...arr.map(item => item.length));\n\tlet range_length\
    \ = max_length - min_length;\n\tlet result = new Array(range_length);\n\tfor (let\
    \ i = 0; i < arr.length; i++){\n\t\tlet index = arr[i].length - min_length;\n\t\
    \tresult[index] = arr[i].charAt(0) + min_length;\n\t}\n\treturn result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp7_urd5fl.js:18\n\tlet result = new Array(range_length);\n\t   \
    \          ^\n\nRangeError: Invalid array length\n    at by_length (/tmp/tmp7_urd5fl.js:18:15)\n\
    \    at test (/tmp/tmp7_urd5fl.js:31:20)\n    at Object.<anonymous> (/tmp/tmp7_urd5fl.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  return\
    \ arr.filter(function(v){\n    return v < 1 || v > 9\n  }).sort(function(a, b){\n\
    \    return b - a;\n  }).map(function(v, i){\n    return (i + 1) + ':' + v\n \
    \ })\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"\
    One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"\
    One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"\
    ]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n\
    \  'One',\n  'One'\n]\n    at test (/tmp/tmpcih0j12o.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcih0j12o.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  \n  if\
    \ (arr.length === 0){\n    return [];\n  }\n  \n  var firstVal = arr[0];\n  var\
    \ lastVal = arr[arr.length - 1];\n  \n  for (var i = 0; i <= 9; i++){\n    if\
    \ (arr[i] >= 1 && arr[i] <= 9){\n      arr[i] = arr[i] > lastVal ? '' + firstVal\
    \ + arr[i] : arr[i];\n    }\n  }\n  \n  return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  '24',\n  '25',\n  '28',\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n\
    [\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmpqpvrrigv.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqpvrrigv.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \    1,    1, '24',\n    '25', '28', 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n\
    \    'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var rv\
    \ = [];\n  for(var i = 0; i<arr.length;i++){\n    if(i<9) rv[i] = \"One\";\n \
    \   else if(i<99) rv[i] = \"Two\";\n    else if(i<999) rv[i] = \"Three\";\n  \
    \  else if(i<9999) rv[i] = \"Four\";\n    else if(i<99999) rv[i] = \"Five\";\n\
    \    else if(i<999999) rv[i] = \"Six\";\n    else rv[i] = \"Seven\";\n  }\n  return\
    \ rv;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"\
    One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"\
    One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"\
    ]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'One',\n  'One',\n  'One',\n  'One',\n  'One',\n  'One',\n  'One'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n\
    \  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp7v4nb6zi.js:32:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp7v4nb6zi.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \ 'One',\n    'One', 'One',\n    'One', 'One',\n    'One', 'One'\n  ],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  for(var\
    \ i = 0, len = arr.length; i < len; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n\
    \      for(var j = i; j > 0; j--){\n        if(arr[j - 1] > arr[j]){\n       \
    \   arr.splice(j, 1);\n          i--;\n          len--;\n          break;\n  \
    \      }\n      }\n    }\n  }\n  return arr.sort().reverse();\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  8,\n  5,\n\
    \  4,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n\
    \  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp3ti_zydu.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3ti_zydu.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 8, 5, 4,\
    \ 2 ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length\
    \ == 0){ return []; }\n  if(arr.length == 1){ return [\"One\"]; }\n  return arr.map(\
    \ function(el){ return (el < 9) ? \"One\" : ((el < 10) ? \"Two\" : ((el < 20)\
    \ ? \"Three\" : ((el < 30) ? \"Four\" : ((el < 40) ? \"Five\" : ((el < 50) ? \"\
    Six\" : ((el < 60) ? \"Seven\" : ((el < 70) ? \"Eight\" : ((el < 80) ? \"Nine\"\
    \ : ((el < 90) ? \"Ten\" : \"\")))))))))).sort().reverse();\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpa4h666p2.js:16\n  return arr.map( function(el){ return (el < 9)\
    \ ? \"One\" : ((el < 10) ? \"Two\" : ((el < 20) ? \"Three\" : ((el < 30) ? \"\
    Four\" : ((el < 40) ? \"Five\" : ((el < 50) ? \"Six\" : ((el < 60) ? \"Seven\"\
    \ : ((el < 70) ? \"Eight\" : ((el < 80) ? \"Nine\" : ((el < 90) ? \"Ten\" : \"\
    \")))))))))).sort().reverse();\n                                             \
    \                                                                            \
    \                                                                            \
    \                                                                      ^\n\nSyntaxError:\
    \ Unexpected token ')'\n    at Object.compileFunction (node:vm:360:18)\n    at\
    \ wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    arr\
    \ = arr.slice();\n    arr.sort((a,b)=>a-b);\n    arr.sort((a,b)=>a-b);\n    arr.map(a=>{\n\
    \        switch(a){\n            case 1:\n                return \"One\";\n  \
    \          case 2:\n                return \"Two\";\n            case 3:\n   \
    \             return \"Three\";\n            case 4:\n                return \"\
    Four\";\n            case 5:\n                return \"Five\";\n            case\
    \ 6:\n                return \"Six\";\n            case 7:\n                return\
    \ \"Seven\";\n            case 8:\n                return \"Eight\";\n       \
    \     case 9:\n                return \"Nine\";\n            default:\n      \
    \          return a;\n        }\n    }); \n    return arr.join(\"\");\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11223458'\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp_4wzozy7.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_4wzozy7.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11223458',\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  if (arr.length > 0 && arr[0] > 9) {\n    arr.reduce(function(prev,\
    \ cur, index, arr){\n      return prev.concat(cur, index < arr.length-1 ? by_length(arr.slice(index+1))\
    \ : []);\n    }, [by_length(arr.slice(1))]).reverse().map(function(el, i){\n \
    \     result[i] = names[el] || el;\n    });\n    return result;\n  }\n  return\
    \ arr.length > 0 ? [names[arr[0]]] : [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpprf083d0.js:23\n  return arr.length > 0 ? [names[arr[0]]] : [];\n\
    \                           ^\n\nReferenceError: names is not defined\n    at\
    \ by_length (/tmp/tmpprf083d0.js:23:28)\n    at test (/tmp/tmpprf083d0.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpprf083d0.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ arr = arr.filter(function(x) { return x >= 1 && x <= 9; });\n    return arr.map(function(x)\
    \ { return \"Nine\" + x + \"\"; });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Nine2',\n\
    \  'Nine1',\n  'Nine1',\n  'Nine4',\n  'Nine5',\n  'Nine8',\n  'Nine2',\n  'Nine3'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpzc7mv0gn.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzc7mv0gn.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Nine2',\
    \ 'Nine1',\n    'Nine1', 'Nine4',\n    'Nine5', 'Nine8',\n    'Nine2', 'Nine3'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(!Array.isArray(arr))\
    \ return [];\n    let n = 0;\n    for(let item of arr){\n        if(n++ == 0)\
    \ n = 1;\n        if(item != n){\n            arr.splice(arr.indexOf(item), 1);\n\
    \        }\n    }\n    arr = [...arr];\n    return arr.reduce((acc, cur, i) =>\
    \ {\n        acc[i - 1] = cur;\n        return acc;\n    }, []).map(i => names[i]\
    \ || i);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpusu5ipam.js:26\n    }, []).map(i => names[i] || i);\n         \
    \                    ^\n\nReferenceError: names is not defined\n    at /tmp/tmpusu5ipam.js:26:30\n\
    \    at Array.map (<anonymous>)\n    at by_length (/tmp/tmpusu5ipam.js:26:12)\n\
    \    at test (/tmp/tmpusu5ipam.js:34:20)\n    at Object.<anonymous> (/tmp/tmpusu5ipam.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    return\
    \ arr.filter(function(e){\n        return e > 0 && e <= 9;\n    }).sort(function(a,\
    \ b){\n        return a < b;\n    }).reverse().map(function(e){\n        switch(e){\n\
    \            case 0: return \"One\";\n            case 1: return \"Two\";\n  \
    \          case 2: return \"Three\";\n            case 3: return \"Four\";\n \
    \           case 4: return \"Five\";\n            case 5: return \"Six\";\n  \
    \          case 6: return \"Seven\";\n            case 7: return \"Eight\";\n\
    \            case 8: return \"Nine\";\n        }\n    });\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Four',\n\
    \  'Three',\n  'Nine',\n  'Six',\n  'Five',\n  'Two',\n  'Two',\n  'Three'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpk82kef0n.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk82kef0n.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Four',\
    \ 'Three',\n    'Nine', 'Six',\n    'Five', 'Two',\n    'Two',  'Three'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar arr2\
    \ = arr.slice();\n\tvar arr3 = [];\n\tif(arr2.length){\n\t\tvar arr4 = arr2.map(function(v){\n\
    \t\t\tswitch(v){\n\t\t\t\tcase 1:\n\t\t\t\t\treturn \"One\";\n\t\t\t\tcase 2:\n\
    \t\t\t\t\treturn \"Two\";\n\t\t\t\tcase 3:\n\t\t\t\t\treturn \"Three\";\n\t\t\t\
    \tcase 4:\n\t\t\t\t\treturn \"Four\";\n\t\t\t\tcase 5:\n\t\t\t\t\treturn \"Five\"\
    ;\n\t\t\t\tcase 6:\n\t\t\t\t\treturn \"Six\";\n\t\t\t\tcase 7:\n\t\t\t\t\treturn\
    \ \"Seven\";\n\t\t\t\tcase 8:\n\t\t\t\t\treturn \"Eight\";\n\t\t\t\tcase 9:\n\t\
    \t\t\t\treturn \"Nine\";\n\t\t\t\tdefault:\n\t\t\t\t\treturn \"\";\n\t\t\t}\n\t\
    \t});\n\t\tarr3.reverse();\n\t\tarr3.forEach(function(v,i){\n\t\t\tif(arr4.indexOf(v)\
    \ != -1){\n\t\t\t\tarr3[i] = arr4[arr4.indexOf(v)];\n\t\t\t}\n\t\t});\n\t}\n\t\
    return arr3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n\
    \  'One',\n  'One'\n]\n    at test (/tmp/tmpme1wh9rv.js:56:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpme1wh9rv.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  return\
    \ arr ? arr.filter(num => {\n    // If num is between 1 and 9...\n    if(num <\
    \ 1 || num > 9) return false\n    // If num is between 10 and 99...\n    if(num\
    \ > 99) return false\n    // If num is between 100 and 999...\n    if(num > 999)\
    \ return false\n    // If num is between 1000 and 9999...\n    if(num > 9999)\
    \ return false\n    // If num is between 10000 and 99999...\n    if(num > 99999)\
    \ return false\n    // If num is between 100000 and 999999...\n    if(num > 999999)\
    \ return false\n    // If num is between 1000000 and 9999999...\n    if(num >\
    \ 9999999) return false\n    // If num is over 10000000...\n    return true\n\
    \  }).map(num=> {\n    // Get the corresponding \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\",\n    // \"Seven\", \"Eight\", \"Nine\"...\n    const\
    \ name = one_to_nine[num - 10]\n    // Return the name.\n    return name\n  })\
    \ : []\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"\
    One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"\
    One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"\
    ]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpsgrzj2xx.js:34\n    const name = one_to_nine[num - 10]\n      \
    \           ^\n\nReferenceError: one_to_nine is not defined\n    at /tmp/tmpsgrzj2xx.js:34:18\n\
    \    at Array.map (<anonymous>)\n    at by_length (/tmp/tmpsgrzj2xx.js:31:6)\n\
    \    at test (/tmp/tmpsgrzj2xx.js:44:20)\n    at Object.<anonymous> (/tmp/tmpsgrzj2xx.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(arr.length\
    \ < 1){\n        return arr;\n    }\n\n    arr = arr.sort(function(a, b){\n  \
    \      return a - b;\n    }).reverse();\n    for(var i=0; i<arr.length; i++){\n\
    \        switch(arr[i]){\n            case 1: arr[i] = 'One'; break;\n       \
    \     case 2: arr[i] = 'Two'; break;\n            case 3: arr[i] = 'Three'; break;\n\
    \            case 4: arr[i] = 'Four'; break;\n            case 5: arr[i] = 'Five';\
    \ break;\n            case 6: arr[i] = 'Six'; break;\n            case 7: arr[i]\
    \ = 'Seven'; break;\n            case 8: arr[i] = 'Eight'; break;\n          \
    \  case 9: arr[i] = 'Nine'; break;\n        }\n    }\n    return arr;\n}\n\nvar\
    \ is_odd = function(num){\n    return num % 2 !== 0;\n};\n\nvar is_even = function(num){\n\
    \    return num % 2 === 0;\n};\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  55,\n  'One',\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[\n  'One'\n]\n    at test (/tmp/tmpb7yf8agn.js:52:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb7yf8agn.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 55, 'One',\
    \ -1 ],\n  expected: [ 'One' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tif (arr.length\
    \ === 0) return [];\n\t\n\tvar reversed = arr.slice().reverse();\n\tvar result\
    \ = [];\n\t\n\tfor (var i = 0; i < reversed.length; i++){\n\t\tvar num = reversed[i];\n\
    \t\tvar letter = num_to_letter_map[num];\n\t\tif (letter !== undefined) result.push(letter);\n\
    \t}\n\t\n\treturn result;\n}\n\n\nvar num_to_letter_map = {\n\t1: one,\n\t2: two,\n\
    \t3: three,\n\t4: four,\n\t5: five,\n\t6: six,\n\t7: seven,\n\t8: eight,\n\t9:\
    \ nine\n};\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp49my0etl.js:30\n\t1: one,\n\t   ^\n\nReferenceError: one is not\
    \ defined\n    at Object.<anonymous> (/tmp/tmp49my0etl.js:30:5)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (arr.length\
    \ == 0) return arr;\n  const len = arr.length;\n  return arr.sort((a, b) => {\n\
    \    return a - b;\n  }).reverse().map((_, i) => {\n    return `One ${i+1}`;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One 1',\n\
    \  'One 2',\n  'One 3',\n  'One 4',\n  'One 5',\n  'One 6',\n  'One 7',\n  'One\
    \ 8'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n\
    \  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpta9itcqe.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpta9itcqe.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One\
    \ 1', 'One 2',\n    'One 3', 'One 4',\n    'One 5', 'One 6',\n    'One 7', 'One\
    \ 8'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    arr\
    \ = arr.filter(function(n) {\n        return n >= 1 && n < 10;\n    }).sort();\n\
    \    if(arr[0] === 1) arr[0] = \"One\";\n    if(arr[1] === 1) arr[1] = \"Two\"\
    ;\n    if(arr[2] === 1) arr[2] = \"Three\";\n    if(arr[3] === 1) arr[3] = \"\
    Four\";\n    if(arr[4] === 1) arr[4] = \"Five\";\n    if(arr[5] === 1) arr[5]\
    \ = \"Six\";\n    if(arr[6] === 1) arr[6] = \"Seven\";\n    if(arr[7] === 1) arr[7]\
    \ = \"Eight\";\n    if(arr[8] === 1) arr[8] = \"Nine\";\n    return arr;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  2,\n  2,\n  3,\n  4,\n  5,\n  8\n]\n\nshould loosely deep-equal\n\
    \n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmp6_253eqi.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6_253eqi.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \ 'Two', 2,\n    2,     3,     4,\n    5,     8\n  ],\n  expected: [\n    'Eight',\
    \ 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if\
    \ (!(arr && arr.length > 0))\n        return arr;\n    let result = [];\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        let length = arr[i];\n        if\
    \ (length == 1)\n            result.push(\"One\");\n        else if (length ==\
    \ 2)\n            result.push(\"Two\");\n        else if (length == 3)\n     \
    \       result.push(\"Three\");\n        else if (length == 4)\n            result.push(\"\
    Four\");\n        else if (length == 5)\n            result.push(\"Five\");\n\
    \        else if (length == 6)\n            result.push(\"Six\");\n        else\
    \ if (length == 7)\n            result.push(\"Seven\");\n        else if (length\
    \ == 8)\n            result.push(\"Eight\");\n        else if (length == 9)\n\
    \            result.push(\"Nine\");\n        else\n            result.push(arr[i]);\n\
    \    }\n    arr = result;\n    for (let i = 0; i < arr.length; i++)\n        arr[i]\
    \ = arr[i].toString();\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'One',\n  'One',\n  'Four',\n  'Five',\n  'Eight',\n  'Two',\n  'Three'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpu50lqz4v.js:51:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu50lqz4v.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \  'One',\n    'One',  'Four',\n    'Five', 'Eight',\n    'Two',  'Three'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    for(var\
    \ i = arr.length; i--;){\n        var num = (\"\" + arr[i]);\n        var num\
    \ = num.replace(/^0+/, \"\");\n        var numArr = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n        while(num.length\
    \ < numArr.length){\n            num = num + \"0\";\n        }\n        if(num.length\
    \ == numArr.length){\n            arr.splice(i, 1, numArr.splice(numArr.indexOf(num),\
    \ 1));\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    'Nine'\n\
    \  ],\n  [\n    'Nine'\n  ],\n  [\n    'Nine'\n  ],\n  [\n    'Nine'\n  ],\n \
    \ [\n    'Nine'\n  ],\n  [\n    'Nine'\n  ],\n  [\n    'Nine'\n  ],\n  [\n   \
    \ 'Nine'\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n\
    \  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp9ubcj7k9.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9ubcj7k9.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 'Nine'\
    \ ],\n    [ 'Nine' ],\n    [ 'Nine' ],\n    [ 'Nine' ],\n    [ 'Nine' ],\n   \
    \ [ 'Nine' ],\n    [ 'Nine' ],\n    [ 'Nine' ]\n  ],\n  expected: [\n    'Eight',\
    \ 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  return\
    \ arr.sort(function(a, b){\n    return a - b;\n  })\n  .filter(function(n){\n\
    \    return (n > 0 && n < 10)\n  }).map(function(n){\n    return one_to_nine[n];\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpd8tvqzuu.js:20\n    return one_to_nine[n];\n    ^\n\nReferenceError:\
    \ one_to_nine is not defined\n    at /tmp/tmpd8tvqzuu.js:20:5\n    at Array.map\
    \ (<anonymous>)\n    at by_length (/tmp/tmpd8tvqzuu.js:19:6)\n    at test (/tmp/tmpd8tvqzuu.js:29:20)\n\
    \    at Object.<anonymous> (/tmp/tmpd8tvqzuu.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length\
    \ == 0) return [];\n  let res = [];\n  for(let i = arr.length-1; i >= 0; i--){\n\
    \    let n = arr[i];\n    if(n > 0 && n < 10){\n      res.unshift(names[n]);\n\
    \    }\n  }\n  return res;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvv4n__ca.js:19\n      res.unshift(names[n]);\n                \
    \  ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpvv4n__ca.js:19:19)\n\
    \    at test (/tmp/tmpvv4n__ca.js:30:20)\n    at Object.<anonymous> (/tmp/tmpvv4n__ca.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var len\
    \ = arr.length;\n  var res = [];\n  for(var i=0;i<len;i++){\n    if(arr[i]>=1\
    \ && arr[i]<=9){\n      res.push(arr[arr[i]-1]);\n    }\n  }\n  return res;\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  2,\n  4,\n  5,\n  3,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpi9tm7r1l.js:30:10)\n    at Object.<anonymous> (/tmp/tmpi9tm7r1l.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 2, 4,\n    5, 3, 1, 1\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    \n\
    \    if (arr.length === 0){\n        return [];\n    }\n    \n    if (arr.length\
    \ === 1){\n        return [\"One\"];\n    }\n\n    var sortedArr = arr.sort(function(a,b){return\
    \ a-b}),\n        revArr = arr.sort(function(a,b){return b-a});\n        \n  \
    \  var len = sortedArr.length,\n        numbers = [],\n        digitMap = {\n\
    \            \"One\" : \"0\",\n            \"Two\" : \"1\",\n            \"Three\"\
    \ : \"2\",\n            \"Four\" : \"3\",\n            \"Five\" : \"4\",\n   \
    \         \"Six\" : \"5\",\n            \"Seven\" : \"6\",\n            \"Eight\"\
    \ : \"7\",\n            \"Nine\" : \"8\"\n        };\n\n    for (var i = 0; i\
    \ < len; i++){\n        numbers.push(digitMap[sortedArr[i]]);\n    }\n    \n \
    \   var string = \"\";\n    \n    for (var j = 0; j < numbers.length; j++){\n\
    \        string += numbers[j];\n    }\n    \n    return revArr.map(function(x){\n\
    \        return string.charAt(x);\n    }).reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'n',\n  'n',\n\
    \  'd',\n  'd',\n  'e',\n  'f',\n  'i',\n  'd'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmpbp63z8r6.js:60:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbp63z8r6.js:67:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'n',\
    \ 'n', 'd',\n    'd', 'e', 'f',\n    'i', 'd'\n  ],\n  expected: [\n    'Eight',\
    \ 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(!arr\
    \ || arr.length === 0){\n    return arr;\n  }\n\n  var result = [];\n  var len\
    \ = arr.length;\n\n  for(var i=0; i<len; ++i){\n    var num = arr[i];\n    if(num\
    \ === 1 || num === 9){\n      if(len-1 > i){\n        result.push(arr[(len-1)\
    \ - i - 1]);\n      }\n    }\n    else{\n      result.push(names[num]);\n    }\n\
    \  }\n  return result;\n}\n\nmodule.exports = by_length;\n\n},{}],123:[function(require,module,exports){\n\
    'use strict';\n\nvar by = require('../array/sort.js');\n\nmodule.exports = function\
    \ by_name(a, b){\n  return by(a, b, 'name');\n};\n\n},{\"../array/sort.js\":117}],124:[function(require,module,exports){\n\
    'use strict';\n\nvar by = require('../array/sort.js');\n\nmodule.exports = function\
    \ by_path(a, b){\n  return by(a, b, 'path');\n};\n\n},{\"../array/sort.js\":117}],125:[function(require,module,exports){\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpu_u9fz0y.js:37\n},{}],123:[function(require,module,exports){\n\
    ^\n\nSyntaxError: Unexpected token '}'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  arr =\
    \ arr.sort(function(a, b) {\n    return a - b;\n  });\n  for (var i = arr.length\
    \ - 1; i >= 0; i--) {\n    arr[i] = names[arr[i]];\n  }\n  return arr.join(\"\"\
    );\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"\
    One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"\
    One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"\
    ]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvrumu7n2.js:18\n    arr[i] = names[arr[i]];\n             ^\n\n\
    ReferenceError: names is not defined\n    at by_length (/tmp/tmpvrumu7n2.js:18:14)\n\
    \    at test (/tmp/tmpvrumu7n2.js:28:20)\n    at Object.<anonymous> (/tmp/tmpvrumu7n2.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var arr2\
    \ = [];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i]\
    \ <= 9){\n      arr2.push(arr[i] + \"-\" + One[arr[i]]);\n    }else{\n      arr2.push(arr[i]);\n\
    \    }\n  }\n  return arr2.reverse().join(\"\");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp23akk7rc.js:17\n      arr2.push(arr[i] + \"-\" + One[arr[i]]);\n\
    \                               ^\n\nReferenceError: One is not defined\n    at\
    \ by_length (/tmp/tmp23akk7rc.js:17:32)\n    at test (/tmp/tmp23akk7rc.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmp23akk7rc.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar new_arr\
    \ = [];\n\tvar first_index = 0, last_index = -1;\n\tvar i;\n\tvar is_negative\
    \ = false;\n\t\n\tif(arr.length){\n\t\tfor(i=0; i < arr.length; i++){\n\t\t\t\
    last_index = i;\n\t\t\tif(is_negative){\n\t\t\t\tif(arr[i]<0){\n\t\t\t\t\tarr[i]\
    \ *= -1;\n\t\t\t\t}\n\t\t\t\tis_negative = false;\n\t\t\t}\n\t\t\telse if(arr[i]<9){\n\
    \t\t\t\tarr[i] += 'One';\n\t\t\t}\n\t\t\telse if(arr[i]<18){\n\t\t\t\tarr[i] +=\
    \ 'Two';\n\t\t\t}\n\t\t\telse if(arr[i]<27){\n\t\t\t\tarr[i] += 'Three';\n\t\t\
    \t}\n\t\t\telse if(arr[i]<36){\n\t\t\t\tarr[i] += 'Four';\n\t\t\t}\n\t\t\telse\
    \ if(arr[i]<45){\n\t\t\t\tarr[i] += 'Five';\n\t\t\t}\n\t\t\telse if(arr[i]<54){\n\
    \t\t\t\tarr[i] += 'Six';\n\t\t\t}\n\t\t\telse if(arr[i]<63){\n\t\t\t\tarr[i] +=\
    \ 'Seven';\n\t\t\t}\n\t\t\telse if(arr[i]<72){\n\t\t\t\tarr[i] += 'Eight';\n\t\
    \t\t}\n\t\t\telse if(arr[i]<81){\n\t\t\t\tarr[i] += 'Nine';\n\t\t\t}\n\t\t\telse{\n\
    \t\t\t\tarr[i] = 'Zero';\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(i=first_index; i<arr.length;\
    \ i++){\n\t\tnew_arr.push(arr[i]);\n\t}\n\t\n\treturn new_arr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '2One',\n\
    \  '1One',\n  '1One',\n  '4One',\n  '5One',\n  '8One',\n  '2One',\n  '3One'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpd47uzoup.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd47uzoup.js:80:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '2One',\
    \ '1One',\n    '1One', '4One',\n    '5One', '8One',\n    '2One', '3One'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i = 0; i < arr.length; i++){\n    result.push((arr[i] > 9)\
    \ ? \"Nine\" : \"Eight\");\n    result.push((arr[i] > 8) ? \"Seven\" : \"Six\"\
    );\n    result.push((arr[i] > 7) ? \"Five\" : \"Four\");\n    result.push((arr[i]\
    \ > 6) ? \"Three\" : \"Two\");\n    result.push((arr[i] > 5) ? \"One\" : \"Zero\"\
    );\n  }\n  result = result.join(\"\");\n  return result.split(\"\").reverse();\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'o',\n  'r',\n\
    \  'e',\n  'Z',\n  'o',\n  'w',\n  'T',\n  'r',\n  'u',\n  'o',\n  'F',\n  'x',\n\
    \  'i',\n  'S',\n  't',\n  'h',\n  'g',\n  'i',\n  'E',\n  'o',\n  'r',\n  'e',\n\
    \  'Z',\n  'o',\n  'w',\n  'T',\n  'r',\n  'u',\n  'o',\n  'F',\n  'x',\n  'i',\n\
    \  'S',\n  't',\n  'h',\n  'g',\n  'i',\n  'E',\n  'e',\n  'n',\n  'O',\n  'e',\n\
    \  'e',\n  'r',\n  'h',\n  'T',\n  'e',\n  'v',\n  'i',\n  'F',\n  'x',\n  'i',\n\
    \  'S',\n  't',\n  'h',\n  'g',\n  'i',\n  'E',\n  'o',\n  'r',\n  'e',\n  'Z',\n\
    \  'o',\n  'w',\n  'T',\n  'r',\n  'u',\n  'o',\n  'F',\n  'x',\n  'i',\n  'S',\n\
    \  '...\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n\
    \  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpy4nxqgs2.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy4nxqgs2.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'o',\
    \ 'r', 'e', 'Z', 'o', 'w', 'T', 'r', 'u', 'o', 'F', 'x',\n    'i', 'S', 't', 'h',\
    \ 'g', 'i', 'E', 'o', 'r', 'e', 'Z', 'o',\n    'w', 'T', 'r', 'u', 'o', 'F', 'x',\
    \ 'i', 'S', 't', 'h', 'g',\n    'i', 'E', 'e', 'n', 'O', 'e', 'e', 'r', 'h', 'T',\
    \ 'e', 'v',\n    'i', 'F', 'x', 'i', 'S', 't', 'h', 'g', 'i', 'E', 'o', 'r',\n\
    \    'e', 'Z', 'o', 'w', 'T', 'r', 'u', 'o', 'F', 'x', 'i', 'S',\n    't', 'h',\
    \ 'g', 'i', 'E', 'o', 'r', 'e', 'Z', 'o', 'w', 'T',\n    'r', 'u', 'o', 'F', 'x',\
    \ 'i', 'S', 't', 'h', 'g', 'i', 'E',\n    'o', 'r', 'e', 'Z',\n    ... 53 more\
    \ items\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n  \
    \  'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ output = [];\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        if(num < 0 || num > 9){\n            continue;\n        }\n        var\
    \ name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"][num];\n        output.push(name);\n    }\n    return output;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Two',\n  'Five',\n  'Six',\n  'Nine',\n  'Three',\n  'Four'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmprmoqzql7.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmprmoqzql7.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Two',   'Five',\n    'Six',   'Nine',\n    'Three', 'Four'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (!arr\
    \ || arr.length < 1) return [];\n\n  var _arr = [];\n  var lengths = {};\n  for(var\
    \ i=0;i<arr.length;i++){\n    var l = arr[i].length;\n    if (!lengths[l]) lengths[l]\
    \ = [];\n    lengths[l].push(arr[i]);\n  }\n\n  for(var l in lengths){\n    var\
    \ num = parseInt(l, 10);\n    while(lengths[l].length > 0) _arr.push(lengths[l].pop());\n\
    \    while (_arr.length > num){\n      _arr.shift();\n    }\n    while (_arr.length\
    \ < num){\n      var item = _arr[Math.floor(Math.random()*_arr.length)];\n   \
    \   _arr.push(item);\n    }\n  }\n\n  return _arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n\
    \  8,\n  5,\n  4,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmplzaq2dxn.js:44:10)\n    at Object.<anonymous> (/tmp/tmplzaq2dxn.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    3,\
    \ 2, 8, 5,\n    4, 1, 1, 2\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result\
    \ = [];\n  for(let i = arr.length-1; i>=0; i--){\n    if( (arr[i] >= 1 && arr[i]\
    \ <= 9) || isNaN(arr[i]) ){\n      arr.splice(i, 1);\n      continue;\n    }\n\
    \    if(arr[i] === 1){\n      result.push(\"One\");\n      continue;\n    }\n\
    \    if(arr[i] === 2){\n      result.push(\"Two\");\n      continue;\n    }\n\
    \    if(arr[i] === 3){\n      result.push(\"Three\");\n      continue;\n    }\n\
    \    if(arr[i] === 4){\n      result.push(\"Four\");\n      continue;\n    }\n\
    \    if(arr[i] === 5){\n      result.push(\"Five\");\n      continue;\n    }\n\
    \    if(arr[i] === 6){\n      result.push(\"Six\");\n      continue;\n    }\n\
    \    if(arr[i] === 7){\n      result.push(\"Seven\");\n      continue;\n    }\n\
    \    if(arr[i] === 8){\n      result.push(\"Eight\");\n      continue;\n    }\n\
    \    if(arr[i] === 9){\n      result.push(\"Nine\");\n      continue;\n    }\n\
    \  }\n  return result;\n}\nvar test_num = [\n  by_length([]), by_length([-1]),\
    \ by_length([0, 3, 3]), by_length([0, 3, 5]), by_length([0, 3, 5, 3]),\n  by_length([0,\
    \ 3, 5]), by_length([0, 3, 3]), by_length([0, 3, 5, 3]), by_length([0, 3, 3]),\n\
    \  by_length([0, 3, 3]), by_length([0, 3, 3, 3, 3]), by_length([0, 3, 3, 3, 3]),\
    \ by_length([0, 3, 3, 3, 3]),\n  by_length([0, 3, 3, 3, 3]), by_length([0, 3,\
    \ 5]), by_length([0, 3, 3]), by_length([0, 3, 5, 3]),\n  by_length([0, 3, 5]),\
    \ by_length([0, 3, 3]), by_length([0, 3, 5, 3]), by_length([0, 3, 3]),\n  by_length([0,\
    \ 3, 3]), by_length([0, 3, 3, 3, 3]), by_length([0, 3, 3, 3, 3]), by_length([0,\
    \ 3, 3, 3, 3]),\n  by_length([0, 3, 3, 3, 3]), by_length([0, 3, 5]), by_length([0,\
    \ 3, 3]), by_length([0, 3, 5, 3]),\n  by_length([0, 3, 5]), by_length([0, 3, 3]),\
    \ by_length([0, 3, 5, 3]), by_length([0, 3, 3]),\n  by_length([0, 3, 3]), by_length([0,\
    \ 3, 3, 3, 3]), by_length([0, 3, 3, 3, 3]), by_length([\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpzhkw48iu.js:69\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length\
    \ === 0)\n    return [];\n\n  var min = 1;\n  var max = arr.length - 1;\n\n  var\
    \ pivot = arr[0];\n\n  while(min <= max){\n    while(min <= max && arr[min] <=\
    \ pivot)\n      min++;\n\n    while(min <= max && arr[max] >= pivot)\n      max--;\n\
    \n    if(min <= max){\n      var temp = arr[min];\n      arr[min] = arr[max];\n\
    \      arr[max] = temp;\n    }\n    else{\n      break;\n    }\n  }\n\n  return\
    \ arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpus4fbzdc.js:47:10)\n    at Object.<anonymous> (/tmp/tmpus4fbzdc.js:54:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    arr\
    \ = arr.filter(function(n) {\n        return n > 1 && n < 9;\n    });\n    var\
    \ len = arr.length,\n        res = [],\n        digits = [\n            \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    \n        ],\n        i, j, k;\n\n    for (i = len - 1; i >= 0; i--) {\n     \
    \   res.push(digits[arr[i]]);\n    }\n\n    // Reverse the array\n    res.reverse();\n\
    \n    for (i = 0, j = len - 1; i < len; j = i++, k = j) {\n        if (arr[i]\
    \ > arr[j]) {\n            arr[i] = arr[arr[i]];\n            arr[j] = arr[k];\n\
    \            arr[k] = arr[i];\n        }\n    }\n\n    return arr;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  undefined,\n  undefined,\n  undefined,\n  undefined\n]\n\nshould loosely deep-equal\n\
    \n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmpbx5tvkor.js:47:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbx5tvkor.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, undefined,\
    \ undefined, undefined, undefined ],\n  expected: [\n    'Eight', 'Five',\n  \
    \  'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar result\
    \ = new Array();\n\t\n\tvar min = 0;\n\tvar max = arr.length-1;\n\t\n\tvar mid\
    \ = Math.floor((max-min)/2);\n\t\n\twhile(min <= max){\n\t\tif( arr[min] > arr[max]\
    \ ){\n\t\t\tresult.push(arr[max]);\n\t\t\tmax--;\n\t\t}else{\n\t\t\tresult.push(arr[min]);\n\
    \t\t\tmin++;\n\t\t}\n\t}\n\t\n\tfor(var i=0;i<arr.length;i++){\n\t\tresult[i]\
    \ = getNumberName( arr[i] );\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpw_bewn7j.js:32\n\t\tresult[i] = getNumberName( arr[i] );\n\t\t\
    \       ^\n\nReferenceError: getNumberName is not defined\n    at by_length (/tmp/tmpw_bewn7j.js:32:10)\n\
    \    at test (/tmp/tmpw_bewn7j.js:42:20)\n    at Object.<anonymous> (/tmp/tmpw_bewn7j.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  if(arr.length == 0){\n    return result;\n  }\n  var max = Math.max(...arr);\n\
    \  var min = Math.min(...arr);\n  for(var i = min; i <= 9; i++){\n    var name\
    \ = null;\n    for(var j = 0; j < arr.length; j++){\n      if(arr[j] == i){\n\
    \        name = names[arr[j]];\n        break;\n      }\n    }\n    if(name ==\
    \ null){\n      name = `Unnamed ${i}`;\n    }\n    result.push(name);\n  }\n \
    \ result.reverse();\n  if(min === max){\n    return arr;\n  }\n  return by_length(arr);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmprw112ln1.js:24\n        name = names[arr[j]];\n        ^\n\nReferenceError:\
    \ names is not defined\n    at by_length (/tmp/tmprw112ln1.js:24:9)\n    at test\
    \ (/tmp/tmprw112ln1.js:45:20)\n    at Object.<anonymous> (/tmp/tmprw112ln1.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var arr2\
    \ = [];\n  for(var i = 1; i <= 9; i++){\n    var items = [];\n    for(var j =\
    \ 0; j < arr.length; j++){\n      if(i != arr[j]){\n        items.push(j);\n \
    \     }\n    }\n    if(items.length){\n      arr2.push(items);\n    }\n  }\n \
    \ for(var j = 0; j < arr2.length; j++){\n    for(var k = 0; k < arr2[j].length;\
    \ k++){\n      arr2[j][k] = One[arr2[j][k]];\n    }\n  }\n  return arr2.map(function(item){\n\
    \    return item.join('');\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpkd2we6u6.js:28\n      arr2[j][k] = One[arr2[j][k]];\n         \
    \          ^\n\nReferenceError: One is not defined\n    at by_length (/tmp/tmpkd2we6u6.js:28:20)\n\
    \    at test (/tmp/tmpkd2we6u6.js:41:20)\n    at Object.<anonymous> (/tmp/tmpkd2we6u6.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var len\
    \ = arr.length;\n  var max_len = 9; //9 because of the \"One\" case and one \"\
    One\" case for the 9th number\n  var result = [];\n  if(len < 1){\n    return\
    \ result;\n  }\n  if(len < 9){\n    result.push(arr[len - 1]);\n    return by_length(arr);\n\
    \  }\n  for(var i = 0; i < len; i++){\n    if(len >= max_len){\n      //reverse\
    \ the array\n      var copy = arr.slice();\n      copy.reverse();\n      result.push(copy[len\
    \ - max_len]);\n    }else{\n      result.push(arr[i]);\n    }\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp444mpp7s.js:21\n    result.push(arr[len - 1]);\n           ^\n\n\
    RangeError: Maximum call stack size exceeded\n    at Array.push (<anonymous>)\n\
    \    at by_length (/tmp/tmp444mpp7s.js:21:12)\n    at by_length (/tmp/tmp444mpp7s.js:22:12)\n\
    \    at by_length (/tmp/tmp444mpp7s.js:22:12)\n    at by_length (/tmp/tmp444mpp7s.js:22:12)\n\
    \    at by_length (/tmp/tmp444mpp7s.js:22:12)\n    at by_length (/tmp/tmp444mpp7s.js:22:12)\n\
    \    at by_length (/tmp/tmp444mpp7s.js:22:12)\n    at by_length (/tmp/tmp444mpp7s.js:22:12)\n\
    \    at by_length (/tmp/tmp444mpp7s.js:22:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tif (!arr.length)\
    \ return [];\n\tif (arr.some(isNaN)) return [];\n\tvar min = Math.min(...arr),\n\
    \t\tmax = Math.max(...arr);\n\tvar minNames = arr.map(x => getName(x));\n\tvar\
    \ maxNames = arr.map(x => getName(x));\n\twhile (min < max){\n\t\tvar mid = Math.floor((min\
    \ + max) / 2);\n\t\tarr.splice(mid, 0, \"One\");\n\t\tarr.splice(mid, 0, \"Two\"\
    );\n\t\tarr.splice(mid, 0, \"Three\");\n\t\tarr.splice(mid, 0, \"Four\");\n\t\t\
    arr.splice(mid, 0, \"Five\");\n\t\tarr.splice(mid, 0, \"Six\");\n\t\tarr.splice(mid,\
    \ 0, \"Seven\");\n\t\tarr.splice(mid, 0, \"Eight\");\n\t\tarr.splice(mid, 0, \"\
    Nine\");\n\t\tminNames[mid] = \"One\";\n\t\tmaxNames[mid] = \"Nine\";\n\t\tmin\
    \ = mid + 1;\n\t}\n\tvar reversed = [];\n\tfor (var i = 0; i < arr.length; i++){\n\
    \t\tvar name = getName(arr[i]);\n\t\treversed.push(revName(name));\n\t}\n\treturn\
    \ reversed;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp7wlpjavh.js:18\n\tvar minNames = arr.map(x => getName(x));\n\t\
    \                            ^\n\nReferenceError: getName is not defined\n   \
    \ at /tmp/tmp7wlpjavh.js:18:30\n    at Array.map (<anonymous>)\n    at by_length\
    \ (/tmp/tmp7wlpjavh.js:18:21)\n    at test (/tmp/tmp7wlpjavh.js:48:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp7wlpjavh.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var sorted\
    \ = []\n  for(var i = 0; i < arr.length; i++){\n    if(i > 0){\n      if(arr[i]\
    \ > arr[i - 1]){\n        sorted.push(arr[i - 1] + \" \" + arr[i])\n      }else{\n\
    \        sorted.push(arr[i])\n      }\n    }else{\n      sorted.push(arr[i])\n\
    \    }\n  }\n  return sorted\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  '1 4',\n  '4 5',\n  '5 8',\n  2,\n  '2 3'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmpy0djwst4.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpy0djwst4.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \     1,     1,\n    '1 4', '4 5', '5 8',\n    2,     '2 3'\n  ],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  arr =\
    \ arr.map(function(x){\n    return x + '' === x ? x : x + '';\n  }).sort(function(a,b){\n\
    \    return b.length - a.length;\n  });\n  for(var i=0; i<arr.length; i++){\n\
    \    arr[i] = arr[i].slice(1) + ' ' + reverse_names[i];\n  }\n  return arr.join('\
    \ ');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"\
    One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"\
    One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"\
    ]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpm4_elreg.js:20\n    arr[i] = arr[i].slice(1) + ' ' + reverse_names[i];\n\
    \                                     ^\n\nReferenceError: reverse_names is not\
    \ defined\n    at by_length (/tmp/tmpm4_elreg.js:20:38)\n    at test (/tmp/tmpm4_elreg.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpm4_elreg.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  // Sort\
    \ the array in ascending order\n  arr = arr.sort(function(a, b){\n    return a\
    \ - b;\n  });\n  // Replace the strange number with its name\n  arr.forEach(function(d,\
    \ i, arr){\n    if(d < 1 || d > 9) arr[i] = \"\";\n  });\n  // Reverse the array\n\
    \  return arr.reverse().map(function(d){\n    return digits[d];\n  });\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5dzld_3y.js:24\n    return digits[d];\n    ^\n\nReferenceError:\
    \ digits is not defined\n    at /tmp/tmp5dzld_3y.js:24:5\n    at Array.map (<anonymous>)\n\
    \    at by_length (/tmp/tmp5dzld_3y.js:23:24)\n    at test (/tmp/tmp5dzld_3y.js:33:20)\n\
    \    at Object.<anonymous> (/tmp/tmp5dzld_3y.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tlet result\
    \ = [],\n\t\tmin = 0,\n\t\tmax = 9\n\tfor(let i = 0; i < arr.length; i++){\n\t\
    \tmin = Math.min(min, arr[i])\n\t\tmax = Math.max(max, arr[i])\n\t}\n\tfor(let\
    \ i = max; i >= min; i--){\n\t\tresult.push(int_to_name(i))\n\t}\n\treturn result\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpcmt7mhx4.js:22\n\t\tresult.push(int_to_name(i))\n\t\t       ^\n\
    \nReferenceError: int_to_name is not defined\n    at by_length (/tmp/tmpcmt7mhx4.js:22:10)\n\
    \    at test (/tmp/tmpcmt7mhx4.js:32:20)\n    at Object.<anonymous> (/tmp/tmpcmt7mhx4.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = new Array();\n  if (arr.length == 0) { return result; }\n  var min = Math.min(1,9),\n\
    \      max = Math.max(1,9),\n      digits = arr.filter(function(x){return x >=\
    \ min && x <= max;}),\n      index = min;\n  arr.forEach(function(i){\n    if\
    \ (i >= min && i <= max){\n      result[index++] = i;\n    }\n  });\n  arr.forEach(function(i){\n\
    \    if (i >= min && i <= max){\n      result[index++] = one_to[i].name;\n   \
    \ }\n  });\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_phsykn0.js:27\n      result[index++] = one_to[i].name;\n     \
    \                   ^\n\nReferenceError: one_to is not defined\n    at /tmp/tmp_phsykn0.js:27:25\n\
    \    at Array.forEach (<anonymous>)\n    at by_length (/tmp/tmp_phsykn0.js:25:7)\n\
    \    at test (/tmp/tmp_phsykn0.js:38:20)\n    at Object.<anonymous> (/tmp/tmp_phsykn0.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar res\
    \ = [];\n\tfor(var i=0; i<arr.length; i++){\n\t\tres.push(by_length(arr[i]) +\
    \ '-' + arr[i]);\n\t}\n\tres.sort(function(a, b){return b-a});\n\tfor(var i=0;\
    \ i<res.length; i++){\n\t\tres[i] = res[i].split('-')[1];\n\t}\n\treturn res.filter(function(n,\
    \ i, a){return a.indexOf(n) == i});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1',\n  '2',\n\
    \  '3',\n  '4',\n  '5',\n  '8'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp79nbqpwz.js:30:10)\n    at Object.<anonymous> (/tmp/tmp79nbqpwz.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1', '2',\
    \ '3', '4', '5', '8' ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n\
    \    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (arr.length\
    \ === 0){\n    return [];\n  }\n  var i, n = arr.length;\n  var result = [];\n\
    \  var temp = [];\n  for (i = 0; i < n; i++){\n    temp.push(arr[i]);\n    if\
    \ (arr[i] === 1 || arr[i] === -1 || arr[i] === 9){\n      result.push(temp.join(\"\
    \"));\n      temp = [];\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '21',\n \
    \ '1'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n\
    \  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp4ys9pfav.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4ys9pfav.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '21', '1'\
    \ ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two', \
    \  'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var names\
    \ = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n\
    \  var temp;\n\n  if(arr[0] >= 1 && arr[0] < 9){\n    temp = arr[arr.length-1];\n\
    \    arr.splice(arr.length-1, 1);\n    arr.push(temp);\n  }\n\n  if(arr.length){\n\
    \    var last = 0;\n    arr.forEach(function(el){\n      if(el !== arr[last]){\n\
    \        temp = names[last];\n        names[last] = names[el];\n        names[el]\
    \ = temp;\n      }\n      last = el;\n    });\n  }\n\n  return arr;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpfnvzh5jc.js:43:10)\n    at Object.<anonymous> (/tmp/tmpfnvzh5jc.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(arr\
    \ == null || arr.length == 0){\n        return [];\n    }\n\n    var sorted =\
    \ arr.slice().sort().reverse();\n\n    var result = [];\n    for(var i = 0, len\
    \ = sorted.length; i < len; i++){\n        result.push(by_digit(sorted[i], i));\n\
    \    }\n\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp29d_qc8z.js:22\n        result.push(by_digit(sorted[i], i));\n\
    \               ^\n\nReferenceError: by_digit is not defined\n    at by_length\
    \ (/tmp/tmp29d_qc8z.js:22:16)\n    at test (/tmp/tmp29d_qc8z.js:33:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp29d_qc8z.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar result\
    \ = [];\n\tvar len = 0;\n\tvar numbers = [];\n\tfor (var i = 0; i !== arr.length;\
    \ ++i) {\n\t\tnumber = Number(arr[i]);\n\t\tif (Number.isNaN(number)) {\n\t\t\t\
    continue;\n\t\t}\n\t\tif (len === 0) {\n\t\t\tnumbers.push(number);\n\t\t\tlen\
    \ = 1;\n\t\t} else if (number < 10) {\n\t\t\tlen = len + 1;\n\t\t} else if (number\
    \ < 100) {\n\t\t\tlen = len + 2;\n\t\t} else if (number < 1000) {\n\t\t\tlen =\
    \ len + 3;\n\t\t} else if (number < 10000) {\n\t\t\tlen = len + 4;\n\t\t} else\
    \ if (number < 100000) {\n\t\t\tlen = len + 5;\n\t\t} else if (number < 1000000)\
    \ {\n\t\t\tlen = len + 6;\n\t\t} else {\n\t\t\tlen = len + 7;\n\t\t}\n\t\tnumbers.push(number);\n\
    \t}\n\tvar index = -1;\n\twhile (++index < len) {\n\t\tnumber = numbers[index];\n\
    \t\tresult.push(get_name(number));\n\t}\n\treturn result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpfm45u9ty.js:45\n\t\tresult.push(get_name(number));\n\t\t      \
    \ ^\n\nReferenceError: get_name is not defined\n    at by_length (/tmp/tmpfm45u9ty.js:45:10)\n\
    \    at test (/tmp/tmpfm45u9ty.js:55:20)\n    at Object.<anonymous> (/tmp/tmpfm45u9ty.js:62:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var one\
    \ = arr[0];\n  var two = arr[1];\n  var three = arr[2];\n  var four = arr[3];\n\
    \  var five = arr[4];\n  var six = arr[5];\n  var seven = arr[6];\n  var eight\
    \ = arr[7];\n  var nine = arr[8];\n  \n  var newArray = [];\n  \n  newArray.push(one_arr[one]);\n\
    \  newArray.push(two_arr[two]);\n  newArray.push(three_arr[three]);\n  newArray.push(four_arr[four]);\n\
    \  newArray.push(five_arr[five]);\n  newArray.push(six_arr[six]);\n  newArray.push(seven_arr[seven]);\n\
    \  newArray.push(eight_arr[eight]);\n  newArray.push(nine_arr[nine]);\n  \n  return\
    \ newArray;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpkza7ump9.js:26\n  newArray.push(one_arr[one]);\n              \
    \  ^\n\nReferenceError: one_arr is not defined\n    at by_length (/tmp/tmpkza7ump9.js:26:17)\n\
    \    at test (/tmp/tmpkza7ump9.js:44:20)\n    at Object.<anonymous> (/tmp/tmpkza7ump9.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    arr\
    \ = arr.filter(function(item){\n        return item !== -1\n    })\n    if(arr.length===0)\
    \ return []\n    var result = []\n    var len = Math.max(...arr)\n    var index\
    \ = 10\n    for(let i=0; i<len; i++){\n        let num = arr[i]\n        let str\
    \ = String(num)\n        if(str.length === 1){\n            str = `0${str}`\n\
    \        }\n        result.push(str[index])\n        index--\n    }\n    return\
    \ result\n}\n</code>\n<|/ a dscore=4 tags=algorithm,javascript |>\n<| c |>\n`Math.max(...arr)`\
    \ will return the max integer in the array, which is **not** what is being asked\
    \ in the question\n<|/ c |>\n<| c |>\nIt doesn't have to be the max integer, it\
    \ can be any number which is less than 10.\n<|/ c |>\n<| a tags=algorithm,javascript\
    \ |>\nYou don't need to actually sort the list to reverse it.\nThe list is already\
    \ in descending order because of the way you sort the numbers, and the first item\
    \ in the list is your number 9.\nSo if you start with 9 you already have the list\
    \ reversed.\n<|/ a dscore=3 |>\n<| a |>\nHere is a simple solution without using\
    \ sorting algorithms just to demonstrate that reverse method is working on negative\
    \ numbers too. \n<code>\nvar x = [1, 3, -9, 5, 6, -2, 7, 8];\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2bhhv96f.js:32\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(arr.length\
    \ === 0) return [];\n    if(arr.length < 9) return arr;\n    var ones = [ \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    \ ];\n    var tens = [ \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\"\
    , \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\" ];\n   \
    \ var hundreds = [ \"Hundred\", \"Thousand\", \"Million\", \"Billion\", \"Trillion\"\
    , \"Quadrillion\", \"Quintillion\", \"Sextillion\", \"Septillion\", \"Octillion\"\
    , \"Nonillion\", \"Decillion\" ];\n    var result = [];\n    arr.sort(function(a,\
    \ b){\n        if(a === 1) return -1;\n        if(a === 9) return 1;\n       \
    \ return a - b;\n    });\n    for(var i = 0; i < arr.length; i++){\n        var\
    \ item = arr[i];\n        switch(item){\n            case 1:\n               \
    \ result.push(ones[i - 1]);\n                break;\n            case 2:\n   \
    \             result.push(tens[Math.ceil(i / 10) - 1]);\n                break;\n\
    \            case 3:\n                result.push(ones[i % 10 - 1]);\n       \
    \         break;\n            case 4:\n                result.push(ones[i - 1]);\n\
    \                result.push(tens[Math.floor(i / 10) - 1]);\n                break;\n\
    \            case 5:\n                result.push(ones[i - 2]);\n            \
    \    result.push(ones[i - 1]);\n                break;\n            case 6:\n\
    \                result.push(ones[i - 1]);\n                result.push(tens[Math.floor((i\
    \ / 10) + 1)]);\n                break;\n            case 7:\n               \
    \ result.push(ones[i - 1]);\n                result.push(tens[Math.ceil((i / 10)\
    \ - 1)]);\n                break;\n            case 8:\n                result.push(ones[Math.floor(i\
    \ / 10) - 2]);\n                result.push(ones[i - 1]);\n                break;\n\
    \            case 9:\n                result.push(ones[i - 1]);\n            \
    \    result.push(hundreds[i - 2]);\n                result.push(ones[i - 1]);\n\
    \                break;\n            default:\n                result.push(item);\n\
    \        }\n    }\n    return result.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpn88tqw38.js:74:10)\n    at Object.<anonymous> (/tmp/tmpn88tqw38.js:81:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tif (arr.length===0)\n\
    \t\treturn [];\n\tif (arr.length===1)\n\t\treturn [one_of_length(arr)];\n\n\t\
    var ret=[];\n\tfor (var i=1; i<=9; i++) {\n\t\tvar j;\n\t\tif (i===arr[0])\n\t\
    \t\tj=arr[0];\n\t\telse\n\t\t\tj=arr.splice(arr[0]-1,1).pop();\n\t\tret.push(\"\
    Number\"+i);\n\t\tret.push(\"Name\"+i);\n\t\tret.push(j);\n\t}\n\treturn ret;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Number1',\n\
    \  'Name1',\n  1,\n  'Number2',\n  'Name2',\n  2,\n  'Number3',\n  'Name3',\n\
    \  1,\n  'Number4',\n  'Name4',\n  4,\n  'Number5',\n  'Name5',\n  5,\n  'Number6',\n\
    \  'Name6',\n  8,\n  'Number7',\n  'Name7',\n  2,\n  'Number8',\n  'Name8',\n\
    \  3,\n  'Number9',\n  'Name9',\n  undefined\n]\n\nshould loosely deep-equal\n\
    \n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmpcku8_v2j.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcku8_v2j.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Number1',\
    \ 'Name1', 1,\n    'Number2', 'Name2', 2,\n    'Number3', 'Name3', 1,\n    'Number4',\
    \ 'Name4', 4,\n    'Number5', 'Name5', 5,\n    'Number6', 'Name6', 8,\n    'Number7',\
    \ 'Name7', 2,\n    'Number8', 'Name8', 3,\n    'Number9', 'Name9', undefined\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (arr.length\
    \ === 0) return [];\n  if (arr.some(isNaN)) return [];\n  let res = [];\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) res.push(\"One\");\n\
    \    else if (arr[i] === 2) res.push(\"Two\");\n    else if (arr[i] === 3) res.push(\"\
    Three\");\n    else if (arr[i] === 4) res.push(\"Four\");\n    else if (arr[i]\
    \ === 5) res.push(\"Five\");\n    else if (arr[i] === 6) res.push(\"Six\");\n\
    \    else if (arr[i] === 7) res.push(\"Seven\");\n    else if (arr[i] === 8) res.push(\"\
    Eight\");\n    else if (arr[i] === 9) res.push(\"Nine\");\n    else return [];\n\
    \  }\n  return res.reverse();\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpw3be_bqm.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw3be_bqm.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ newArr = arr.slice();\n    newArr.sort(function(a,b){return a-b});\n    newArr.reverse();\n\
    \    newArr.forEach(function(val, index){\n        if (val >= 1 && val <= 9){\n\
    \            newArr[index] = val + '-' + \"One\";\n        }\n        if (val\
    \ >= 10 && val <= 19){\n            newArr[index] = val + '-' + \"Two\";\n   \
    \     }\n        if (val >= 20 && val <= 29){\n            newArr[index] = val\
    \ + '-' + \"Three\";\n        }\n        if (val >= 30 && val <= 39){\n      \
    \      newArr[index] = val + '-' + \"Four\";\n        }\n        if (val >= 40\
    \ && val <= 49){\n            newArr[index] = val + '-' + \"Five\";\n        }\n\
    \        if (val >= 50 && val <= 59){\n            newArr[index] = val + '-' +\
    \ \"Six\";\n        }\n        if (val >= 60 && val <= 69){\n            newArr[index]\
    \ = val + '-' + \"Seven\";\n        }\n        if (val >= 70 && val <= 79){\n\
    \            newArr[index] = val + '-' + \"Eight\";\n        }\n        if (val\
    \ >= 80 && val <= 89){\n            newArr[index] = val + '-' + \"Nine\";\n  \
    \      }\n    });\n    return newArr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '8-One',\n\
    \  '5-One',\n  '4-One',\n  '3-One',\n  '2-One',\n  '2-One',\n  '1-One',\n  '1-One'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmphbcukffv.js:54:10)\n\
    \    at Object.<anonymous> (/tmp/tmphbcukffv.js:61:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '8-One',\
    \ '5-One',\n    '4-One', '3-One',\n    '2-One', '2-One',\n    '1-One', '1-One'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if\
    \ (!arr.length)\n        return [];\n    var result = [];\n    for (var i = 0;\
    \ i < arr.length; i++) {\n        result.push(name_by_length(arr[i]));\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpdyrkseru.js:18\n        result.push(name_by_length(arr[i]));\n\
    \               ^\n\nReferenceError: name_by_length is not defined\n    at by_length\
    \ (/tmp/tmpdyrkseru.js:18:16)\n    at test (/tmp/tmpdyrkseru.js:28:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpdyrkseru.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let arrCopy\
    \ = arr.slice(0);\n  arrCopy.sort((a, b) => {\n    return a > b ? 1 : -1;\n  })\n\
    \  let result = arrCopy.map((val, index) => {\n    let index = Math.trunc(index);\n\
    \    let val = arrCopy[index];\n    return val === index ? index - 1 : val;\n\
    \  }).filter(val => val != null)\n  if(result.length == 0){\n    return [];\n\
    \  }\n  if(result.length < arrCopy.length){\n    return [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][result[0]];\n\
    \  }\n  return result.map(value => [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][value]).reverse();\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpzg56gqs5.js:19\n    let index = Math.trunc(index);\n        ^\n\
    \nSyntaxError: Identifier 'index' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    arr\
    \ = arr.filter(function(item){\n        return typeof item === 'number' && item\
    \ > 0 && item <= 9\n    })\n    return arr.reduce(function(acc, item, i){\n  \
    \      acc.push(items[item])\n        if(arr.length - 1 === i){\n            acc.reverse()\n\
    \        }\n        return acc\n    }, [])\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpcr0rpx3w.js:18\n        acc.push(items[item])\n               \
    \  ^\n\nReferenceError: items is not defined\n    at /tmp/tmpcr0rpx3w.js:18:18\n\
    \    at Array.reduce (<anonymous>)\n    at by_length (/tmp/tmpcr0rpx3w.js:17:16)\n\
    \    at test (/tmp/tmpcr0rpx3w.js:31:20)\n    at Object.<anonymous> (/tmp/tmpcr0rpx3w.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    return\
    \ arr.sort(function(a,b){return a-b;}).reverse().map(function(n){\n        return\
    \ arr[n-1];\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5,\n  5,\n  8,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp9yvvorc9.js:24:10)\n    at Object.<anonymous> (/tmp/tmp9yvvorc9.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 3, 4,\n    5, 5, 8, 8\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (arr.length\
    \ === 0){\n    return arr;\n  }\n  \n  var l = arr.length - 1;\n  var result =\
    \ [];\n  \n  for(var i = l; i >= 0; i--){\n    result.push(\n      arr[i] < 1\
    \ ? ones[arr[i]] : \n      arr[i] < 2 ? twos[arr[i]] :\n      arr[i] < 3 ? threes[arr[i]]\
    \ :\n      arr[i] < 4 ? fours[arr[i]] :\n      arr[i] < 5 ? fives[arr[i]] :\n\
    \      arr[i] < 6 ? sixes[arr[i]] :\n      arr[i] < 7 ? sevens[arr[i]] :\n   \
    \   arr[i] < 8 ? eights[arr[i]] :\n      nines[arr[i]]\n    );\n  }\n  \n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6o9oid_5.js:26\n      arr[i] < 4 ? fours[arr[i]] :\n          \
    \         ^\n\nReferenceError: fours is not defined\n    at by_length (/tmp/tmp6o9oid_5.js:26:20)\n\
    \    at test (/tmp/tmp6o9oid_5.js:43:20)\n    at Object.<anonymous> (/tmp/tmp6o9oid_5.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  return\
    \ arr.sort(function(a, b){\n    return a > b ? 1 : -1;\n  }).map(function(n){\n\
    \    return n >= 1 && n < 10 ? names[n] : n;\n  });\n}\n</code>\n<|/ a dscore=4\
    \ tags=algorithm,language-agnostic,sorting |>\n<| c |>\nThis is fantastic. My\
    \ own answer does a lot more stuff than this, but this is a very nice example\
    \ of how you would do it without too much code.\n<|/ c |>\n<| c |>\nThe OP asked\
    \ about how to do it \"without too much code\", but I think this answer does too\
    \ much.  I'm thinking of doing a quick bit of research, but for now this looks\
    \ good. +1\n<|/ c |>\n<| c |>\nIt does too much, but it does so much more so I\
    \ felt it worth adding. Just the fact that one line was missing and that it's\
    \ probably the only code one needs is enough.\n<|/ c |>\n<| c |>\nThe function\
    \ `by_length` should be declared before `names` because it is used recursively.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\npublic static String[] getWords(String[] s)\
    \ {\n    ArrayList<String> words = new ArrayList<String>();\n    for (String t\
    \ : s) {\n        if (t.length() > 1 && t.charAt(0) == t.charAt(t.length()-1))\
    \ {\n            words.add(t.substring(0, t.length()-1) + \", \" + t.substring(1));\n\
    \        }\n    }\n    return words.toArray(new String[0]);\n}\n</code>\n<|/ a\
    \ tags=algorithm,language-agnostic,sorting |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding why and/or how this code\
    \ answers the question improves its long-term value\n<|/ c |>\n<| a |>\nYou can\
    \ do it by making a map of names to the numbers 1-9, and iterating through each\
    \ string and adding each character to the map with each letter being a number\
    \ 1-9. Then after you iterated through each string, you can return all the key-value\
    \ pairs from the map. \nThis should give O(n) time complexity and O(n) space,\
    \ and is pretty simple.\n<|/ a dscore=1 tags=algorithm,language-agnostic,sorting\
    \ |>\n<| a tags=algorithm,language-agnostic,sorting |>\nYou can do it in O(n)\
    \ time complexity with two pointers and O(n) space complexity:\n<code>\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp86sonth7.js:20\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tif (!arr.length)\
    \ return [];\n\tarr.sort(function(a,b){return b - a});\n\tvar result = [];\n\t\
    var len = arr.length;\n\tvar digits = [\"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n\t\n\tfor (var i=0; i <\
    \ len; i++) {\n\t\tvar num = arr[i];\n\t\tvar tmp = num;\n\t\tvar rev = tmp.reverse();\n\
    \t\tvar digit = rev[0];\n\t\twhile (tmp.length > 0) {\n\t\t\tresult.unshift(digits[tmp.pop()]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2zzi1sw_.js:23\n\t\tvar rev = tmp.reverse();\n\t\t            \
    \  ^\n\nTypeError: tmp.reverse is not a function\n    at by_length (/tmp/tmp2zzi1sw_.js:23:17)\n\
    \    at test (/tmp/tmp2zzi1sw_.js:37:20)\n    at Object.<anonymous> (/tmp/tmp2zzi1sw_.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tif(arr.length\
    \ === 0){\n\t\treturn [];\n\t}\n\tlet min = Math.min.apply(null, arr);\n\tlet\
    \ max = Math.max.apply(null, arr);\n\tlet arr2 = arr.map(function(num){\n\t\t\
    if(num === min){\n\t\t\treturn 'One';\n\t\t}\n\t\telse if(num === max){\n\t\t\t\
    return 'Nine';\n\t\t}\n\t\telse{\n\t\t\treturn num.toString();\n\t\t}\n\t});\n\
    \tarr2.reverse();\n\treturn arr2.map(function(item){\n\t\treturn item[item.length-1];\n\
    \t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"\
    One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"\
    One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"\
    ]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '3',\n  '2',\n\
    \  'e',\n  '5',\n  '4',\n  'e',\n  'e',\n  '2'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmpwdo7h4n6.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwdo7h4n6.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '3',\
    \ '2', 'e',\n    '5', '4', 'e',\n    'e', '2'\n  ],\n  expected: [\n    'Eight',\
    \ 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = []\n  var curr = 0, i, l, name\n  l = arr.length\n  for(i = 0; i < l; ++i){\n\
    \    curr = arr[i]\n    if (curr < 1 || curr > 9) break\n    result.push(name\
    \ = (curr - 1) * 10 + i)\n  }\n  return result.length ? result : []\n}\n\nmodule.exports\
    \ = by_length;\n\n},{}],14:[function(require,module,exports){\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8fkw6pw2.js:27\n},{}],14:[function(require,module,exports){\n^\n\
    \nSyntaxError: Unexpected token '}'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar out\
    \ = [],\n\t\tlen = arr.length,\n\t\ti, j, t;\n\n\tfor (i = 0; i < len; i++){\n\
    \t\tt = arr[i];\n\t\tj = len;\n\n\t\twhile(j--){\n\t\t\tif (t > arr[j]) {\n\t\t\
    \t\tout.unshift(arr[j]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn out;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  3,\n  3,\n  3,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n\
    \  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test\
    \ (/tmp/tmpsbdn75jh.js:38:10)\n    at Object.<anonymous> (/tmp/tmpsbdn75jh.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1, 3,\
    \ 3, 3, 1 ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n   \
    \ 'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tif(!arr.length)\
    \ return [];\n\tarr = arr.map(function(num){\n\t\tif(num < 1 || num > 9) return\
    \ null;\n\t\treturn num;\n\t});\n\tif(arr.length == 1) return [arr[0]];\n\tvar\
    \ digits = arr\n\t\t.filter(function(num){ return num != null })\n\t\t.map(function(num){\
    \ return num.toString().charCodeAt(0); });\n\tif(arr.length == 0) return [];\n\
    \tvar result = [];\n\tvar firstDigit = digits[0];\n\tfor(var i = 0; i < arr.length;\
    \ i++){\n\t\tvar newDigit = arr[i].toString().charCodeAt(0);\n\t\tif(firstDigit\
    \ <= newDigit && newDigit <= digits[i + 1]){\n\t\t\tresult.push(getWord(firstDigit));\n\
    \t\t\tfirstDigit = newDigit;\n\t\t} else {\n\t\t\tresult.push(getWord(newDigit\
    \ - 10));\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpdtmwe9d6.js:32\n\t\t\tresult.push(getWord(newDigit - 10));\n\t\t\
    \t       ^\n\nReferenceError: getWord is not defined\n    at by_length (/tmp/tmpdtmwe9d6.js:32:11)\n\
    \    at test (/tmp/tmpdtmwe9d6.js:43:20)\n    at Object.<anonymous> (/tmp/tmpdtmwe9d6.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var arr2\
    \ = arr.slice().reverse();\n  arr2.pop();\n  return arr2.map(function(item, index){\n\
    \    return item === null ? \"\" : index_to_name[item] || \"One\";\n  });\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpt2cr2692.js:17\n    return item === null ? \"\" : index_to_name[item]\
    \ || \"One\";\n                                ^\n\nReferenceError: index_to_name\
    \ is not defined\n    at /tmp/tmpt2cr2692.js:17:33\n    at Array.map (<anonymous>)\n\
    \    at by_length (/tmp/tmpt2cr2692.js:16:15)\n    at test (/tmp/tmpt2cr2692.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpt2cr2692.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var sorted\
    \ = arr.sort(function(a, b){\n    return a - b;\n  });\n  return sorted.reverse().map(function(d,\
    \ i){\n    return i > 0 ?\n      \"One Thousand \" + d :\n      d < 0 ? \"Negative\
    \ \" + d + \" Thousand \" : d + \" Thousand \";\n  }).filter(function(d){\n  \
    \  return d.length > 0;\n  });\n}\nvar by_length_1 = by_length;\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '8 Thousand\
    \ ',\n  'One Thousand 5',\n  'One Thousand 4',\n  'One Thousand 3',\n  'One Thousand\
    \ 2',\n  'One Thousand 2',\n  'One Thousand 1',\n  'One Thousand 1'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n\
    \  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp1qsymhy6.js:32:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp1qsymhy6.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '8\
    \ Thousand ',\n    'One Thousand 5',\n    'One Thousand 4',\n    'One Thousand\
    \ 3',\n    'One Thousand 2',\n    'One Thousand 2',\n    'One Thousand 1',\n \
    \   'One Thousand 1'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four', \
    \ 'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(!arr\
    \ || arr.length === 0){ return []; }\n  var tmp = [arr.shift()];\n  while(arr.length\
    \ > 0){\n    tmp.push(arr.shift());\n  }\n  return tmp;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp8kyeforr.js:27:10)\n    at Object.<anonymous> (/tmp/tmp8kyeforr.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var ret\
    \ = [],\n      l = arr.length;\n\n  while(arr.length > 0){\n    var num = arr.shift();\n\
    \    ret.push(numbers[num]);\n  }\n  ret.sort(function(a,b){ return a-b; });\n\
    \  ret.splice(0,9);\n  ret = ret.reverse();\n  ret.forEach(function(x){ x = names[x]\
    \ });\n  return ret;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp56m3m_gk.js:19\n    ret.push(numbers[num]);\n             ^\n\n\
    ReferenceError: numbers is not defined\n    at by_length (/tmp/tmp56m3m_gk.js:19:14)\n\
    \    at test (/tmp/tmp56m3m_gk.js:32:20)\n    at Object.<anonymous> (/tmp/tmp56m3m_gk.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar i,\
    \ len = arr.length;\n\tvar res = [];\n\tfor(i = 0; i < len; i++){\n\t\tif(arr[i]\
    \ >= 1 && arr[i] <= 9){\n\t\t\tres.push(alphabet[arr[i]-1]);\n\t\t}\n\t}\n\treturn\
    \ res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8xgm82l2.js:18\n\t\t\tres.push(alphabet[arr[i]-1]);\n\t\t\t   \
    \      ^\n\nReferenceError: alphabet is not defined\n    at by_length (/tmp/tmp8xgm82l2.js:18:13)\n\
    \    at test (/tmp/tmp8xgm82l2.js:29:20)\n    at Object.<anonymous> (/tmp/tmp8xgm82l2.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  arr =\
    \ arr.map(Number);\n  if(arr[0] === 0 && arr.length === 1 && arr[0] === -1){\n\
    \    return [];\n  }\n  arr.sort(function(a, b){\n    return a - b;\n  });\n \
    \ var res = arr.map(function(e, i){\n    if(e === 0){\n      return 'Zero';\n\
    \    }\n    if(e === 1){\n      return 'One';\n    }\n    if(e === 2){\n     \
    \ return 'Two';\n    }\n    if(e === 3){\n      return 'Three';\n    }\n    if(e\
    \ === 4){\n      return 'Four';\n    }\n    if(e === 5){\n      return 'Five';\n\
    \    }\n    if(e === 6){\n      return 'Six';\n    }\n    if(e === 7){\n     \
    \ return 'Seven';\n    }\n    if(e === 8){\n      return 'Eight';\n    }\n   \
    \ if(e === 9){\n      return 'Nine';\n    }\n  });\n  return res.reverse();\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  'One',\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  'One'\n]\n    at\
    \ test (/tmp/tmpyhtqvd00.js:63:10)\n    at Object.<anonymous> (/tmp/tmpyhtqvd00.js:68:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 'One', undefined ],\n  expected: [ 'One' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  return\
    \ arr.map(function(x) { \n    if (x > 9 && x <= 99){\n      return Math.ceil(x/10)*10\
    \ + '-' + Math.round(x%10);\n    }\n    return Math.ceil(x);\n  }).filter(function(x){\n\
    \    return x != 0;\n  });\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp3wuhhf7l.js:28:10)\n    at Object.<anonymous> (/tmp/tmp3wuhhf7l.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  arr.forEach(function(x){\n    if(x < 1 && x > 9){\n      result = [];\n\
    \    }else{\n      result.push(by_length_recursive(x));\n    }\n  });\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbfm1lisr.js:19\n      result.push(by_length_recursive(x));\n  \
    \           ^\n\nReferenceError: by_length_recursive is not defined\n    at /tmp/tmpbfm1lisr.js:19:14\n\
    \    at Array.forEach (<anonymous>)\n    at by_length (/tmp/tmpbfm1lisr.js:15:7)\n\
    \    at test (/tmp/tmpbfm1lisr.js:30:20)\n    at Object.<anonymous> (/tmp/tmpbfm1lisr.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar result\
    \ = [];\n\tif(arr == null || arr.length == 0)\n\t\treturn result;\n\n\tfor(var\
    \ i in arr){\n\t\tresult.push(by_length_recursive(arr[i]));\n\t}\n\n\treturn result.sort(function(a,\
    \ b){\n\t\treturn b - a;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpsfeu1j1w.js:19\n\t\tresult.push(by_length_recursive(arr[i]));\n\
    \t\t       ^\n\nReferenceError: by_length_recursive is not defined\n    at by_length\
    \ (/tmp/tmpsfeu1j1w.js:19:10)\n    at test (/tmp/tmpsfeu1j1w.js:32:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpsfeu1j1w.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(!arr\
    \ || arr.length === 0) return [];\n  for(var i = 0; i < arr.length; i++){\n  \
    \  var val = arr[i];\n    var min = Math.ceil(val/10);\n    var max = Math.floor(val/10);\n\
    \    if(max < 9) arr.splice(i, 1);\n    arr.splice(max, 0, (val-min*10).toString());\n\
    \  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '-7',\n \
    \ '-8',\n  '-2',\n  '-5',\n  '-6',\n  '-9',\n  '-9',\n  '-8'\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n\
    \  'One',\n  'One'\n]\n    at test (/tmp/tmp71mz4rx2.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp71mz4rx2.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '-7',\
    \ '-8', '-2',\n    '-5', '-6', '-9',\n    '-9', '-8'\n  ],\n  expected: [\n  \
    \  'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',  \
    \ 'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(!arr.length)\
    \ return [];\n  var result = [];\n  var length = arr.length;\n  for (var i = 0;\
    \ i < length; i++) {\n    var value = arr[i];\n    if (value <= 1 || value > 9)\
    \ continue;\n    var index = value - 1;\n    var name = [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][index];\n\
    \    result.push(name);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'Four',\n  'Five',\n  'Eight',\n  'Two',\n  'Three'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmpmmng_ygt.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmmng_ygt.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Two', 'Four',\
    \ 'Five', 'Eight', 'Two', 'Three' ],\n  expected: [\n    'Eight', 'Five',\n  \
    \  'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar n\
    \ = arr.length, m = 0, tmp = [], result = [];\n\twhile(m < n && arr[m] === undefined){\n\
    \t\tm++;\n\t}\n\twhile(m < n){\n\t\ttmp = arr[m += 1];\n\t\tresult = result.concat(tmp.name\
    \ + (tmp > 9 ? \"s\" : \"\"));\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpw3zihlfj.js:20\n\t\tresult = result.concat(tmp.name + (tmp > 9\
    \ ? \"s\" : \"\"));\n\t\t                           ^\n\nTypeError: Cannot read\
    \ properties of undefined (reading 'name')\n    at by_length (/tmp/tmpw3zihlfj.js:20:30)\n\
    \    at test (/tmp/tmpw3zihlfj.js:30:20)\n    at Object.<anonymous> (/tmp/tmpw3zihlfj.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  return\
    \ arr\n    .filter(x => x >= 1 && x <= 9)\n    .reduce((acc, i) => acc.concat(by_digit_name(i,\
    \ arr)), [])\n    .sort((a, b) => parseInt(a, 10) - parseInt(b, 10))\n    .map(x\
    \ => by.name[x]);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpry23np_o.js:16\n    .reduce((acc, i) => acc.concat(by_digit_name(i,\
    \ arr)), [])\n                            ^\n\nReferenceError: by_digit_name is\
    \ not defined\n    at /tmp/tmpry23np_o.js:16:29\n    at Array.reduce (<anonymous>)\n\
    \    at by_length (/tmp/tmpry23np_o.js:16:6)\n    at test (/tmp/tmpry23np_o.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpry23np_o.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    \n\
    \    var result = [],\n        prev,\n        i;\n\n    for(i = 1; i < arr.length;\
    \ i++){\n        \n        prev = arr[i-1];\n        \n        if(!prev || prev\
    \ < arr[i]){\n            \n            result.push(arr[arr.length-i-1]);\n  \
    \          \n        } else {\n            \n            result.push(arr[i]);\n\
    \            \n        }\n    }\n    \n    return arr;\n    \n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmptc6pdzt1.js:44:10)\n    at Object.<anonymous> (/tmp/tmptc6pdzt1.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (!arr.length)\
    \ return [];\n\n  // Convert the array to an object with named keys. The key names\
    \ will be the number\n  // between 1 and 9 inclusive, and the value will be the\
    \ word corresponding to the number\n  // between 1 and 9 inclusive.\n  var mapping\
    \ = arr.reduce(function(obj, num, index){\n    obj[index - 1] = index;\n    return\
    \ obj;\n  }, {});\n\n  // Sort the array by the values of the object's keys (which\
    \ are numbers between 1\n  // and 9 inclusive). Then go through the array in reverse\
    \ order and replace the\n  // digits by their corresponding word from the object.\
    \ The result will have\n  // the word \"One\" for the first number, the word \"\
    Two\" for the second number, and\n  // so on.\n  var sorted = arr.sort(function(a,\
    \ b){\n    return mapping[a] - mapping[b];\n  });\n  for (var i = sorted.length\
    \ - 1; i >= 0; i--){\n    sorted[i] = mapping[sorted[i]];\n  }\n\n  // Convert\
    \ from object to array and reverse it.\n  return sorted.reverse();\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  6,\n  5,\n  4,\n  3,\n  3,\n  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmplcn68ym0.js:45:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplcn68ym0.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 6, 5, 4, 3, 3, 2, 2 ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n\
    \    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    return\
    \ arr.filter(function(e){\n        return parseInt(e) == parseInt(e)\n    }).reverse().map(function(e){\n\
    \        return names(e)\n    }).join(\" \")\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpt0s8wgdb.js:17\n        return names(e)\n        ^\n\nReferenceError:\
    \ names is not defined\n    at /tmp/tmpt0s8wgdb.js:17:9\n    at Array.map (<anonymous>)\n\
    \    at by_length (/tmp/tmpt0s8wgdb.js:16:18)\n    at test (/tmp/tmpt0s8wgdb.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpt0s8wgdb.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (arr.length\
    \ === 0){\n    return [];\n  }\n  var newArray = [];\n  var lower = 1;\n  var\
    \ higher = 9;\n  var startIndex = 0;\n  var lengthCounter = 0;\n  for (var i =\
    \ 0; i < arr.length; i++){\n    if (lengthCounter === 0){\n      newArray.push(arr[startIndex++]);\n\
    \      lengthCounter++;\n    }\n    while (arr[startIndex] === higher || arr[startIndex]\
    \ === lower){\n      newArray.push(arr[startIndex++]);\n      lengthCounter++;\n\
    \    }\n    if (lengthCounter === 0){\n      lower = arr[startIndex++];\n    }\n\
    \    if (lengthCounter === 1){\n      higher = arr[startIndex++];\n    }\n   \
    \ if (lengthCounter === 2){\n      lower = arr[startIndex++];\n      higher =\
    \ arr[startIndex++];\n    }\n  }\n  return newArray;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n\
    \  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpjtlx0ovu.js:50:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjtlx0ovu.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1, 1\
    \ ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two', \
    \  'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar result\
    \ = [];\n\tfor(var i=0;i<arr.length;i++){\n\t\tvar n = arr[i];\n\t\tvar digit\
    \ = n % 10;\n\t\tif(n<1){\n\t\t\tresult.push('One');\n\t\t}else if(n<10){\n\t\t\
    \tresult.push('Two');\n\t\t}else if(n<100){\n\t\t\tresult.push('Three');\n\t\t\
    }else if(n<1000){\n\t\t\tresult.push('Four');\n\t\t}else if(n<10000){\n\t\t\t\
    result.push('Five');\n\t\t}else if(n<100000){\n\t\t\tresult.push('Six');\n\t\t\
    }else if(n<1000000){\n\t\t\tresult.push('Seven');\n\t\t}else if(n<10000000){\n\
    \t\t\tresult.push('Eight');\n\t\t}else if(n<100000000){\n\t\t\tresult.push('Nine');\n\
    \t\t}else if(n<1000000000){\n\t\t\tresult.push('Ten');\n\t\t}else{\n\t\t\tresult.push(digit);\n\
    \t\t}\n\t}\n\treturn result.reverse();\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'Two',\n  'Two',\n  'Two',\n  'Two',\n  'Two',\n  'Two',\n  'Two'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n\
    \  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpfwogl2ze.js:49:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpfwogl2ze.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \ 'Two',\n    'Two', 'Two',\n    'Two', 'Two',\n    'Two', 'Two'\n  ],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (arr.length\
    \ == 0) {\n    return [];\n  }\n  return arr.reduce(function(res, num){\n    return\
    \ res.concat(by_length(numToArray(num)));\n  }, []).reduce(function(arr, i){\n\
    \    arr[i] = map_arr[parseInt(i)] || i;\n    return arr;\n  }, []);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0wzam9z4.js:18\n    return res.concat(by_length(numToArray(num)));\n\
    \                      ^\n\nReferenceError: numToArray is not defined\n    at\
    \ /tmp/tmp0wzam9z4.js:18:23\n    at Array.reduce (<anonymous>)\n    at by_length\
    \ (/tmp/tmp0wzam9z4.js:17:14)\n    at test (/tmp/tmp0wzam9z4.js:30:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp0wzam9z4.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length\
    \ > 0){\n    var arr = arr.slice().sort(function(a, b){\n      return a > b ?\
    \ 1 : -1\n    })\n    return arr.map(function(num){\n      return [\n        \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\n        \"\
    Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\",\n        \"\
    Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\",\n        \"\
    Nineteen\"\n      ][num];\n    })\n  }else{\n    return [];\n  }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'Two',\n  'Three',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Nine'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpl5mvxigr.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl5mvxigr.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \   'Two',\n    'Three', 'Three',\n    'Four',  'Five',\n    'Six',   'Nine'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (!arr)\
    \ return [];\n\n  // Get the set of all possible digits (1-9) in the array\n \
    \ var digits = arr.reduce(function (digits, num) {\n    for (var i = 1; i <= 9;\
    \ i++) { digits[i] = true; }\n    return digits;\n  }, {});\n\n  // Find the minimum\
    \ value and the corresponding digit in digits, if any\n  var min = Math.min(...arr);\n\
    \  var min_digit = Object.keys(digits).find(function (digit) {\n    return digits[digit]\
    \ === true;\n  });\n\n  // If the array was sorted, reverse it.\n  // Otherwise,\
    \ just return the same array\n  if (min === Math.min.apply(null, arr)) {\n   \
    \ arr.reverse();\n  }\n\n  // If the minimum value was between 1 and 9, replace\
    \ the corresponding digit with its name.\n  // Otherwise, just return the same\
    \ array.\n  if (min >= 1 && min <= 9) {\n    arr[arr.indexOf(min_digit)] = names[min\
    \ - 1];\n  }\n\n  // Return the resulting array\n  return arr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp1ulu1nie.js:37\n    arr[arr.indexOf(min_digit)] = names[min - 1];\n\
    \                                  ^\n\nReferenceError: names is not defined\n\
    \    at by_length (/tmp/tmp1ulu1nie.js:37:35)\n    at test (/tmp/tmp1ulu1nie.js:49:20)\n\
    \    at Object.<anonymous> (/tmp/tmp1ulu1nie.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tif (arr.length===0){\n\
    \t\treturn [];\n\t}\n\tvar ones = ['One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'];\n\tvar tens = ['Ten', 'Eleven', 'Twelve', 'Thirteen',\
    \ 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];\n\t\
    var hundreds = ['Hundred', 'Thousand', 'Million', 'Billion'];\n\tvar result =\
    \ [];\n\tfor (var i = 0; i < arr.length; i++){\n\t\tif (arr[i] > 9){\n\t\t\tresult.push(tens[Math.floor(arr[i]/10)%10]);\n\
    \t\t\tarr[i]=Math.floor(arr[i]%10);\n\t\t}\n\t\tif (arr[i] > 99){\n\t\t\tresult.push(hundreds[Math.floor(arr[i]/100)%100]);\n\
    \t\t\tarr[i]=Math.floor(arr[i]%100);\n\t\t}\n\t\tif (arr[i] > 999){\n\t\t\tresult.push(thousands[Math.floor(arr[i]/1000)%1000]);\n\
    \t\t\tarr[i]=Math.floor(arr[i]%1000);\n\t\t}\n\t\tresult.push(ones[arr[i]]);\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Two',\n  'Five',\n  'Six',\n  'Nine',\n  'Three',\n  'Four'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp_is0rvf4.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_is0rvf4.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Two',   'Five',\n    'Six',   'Nine',\n    'Three', 'Four'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: -1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tarr =\
    \ arr.sort();\n\tvar max = 0, min = arr.length - 1;\n\twhile(min--){\n\t\tif(arr[min]\
    \ > max){\n\t\t\tmax = arr[min];\n\t\t}\n\t}\n\twhile(max++){\n\t\tif(arr[max]\
    \ < min){\n\t\t\tmin = arr[max];\n\t\t}\n\t}\n\treturn arr.map(function(val, index){\n\
    \t\treturn index % 10 == 0 ? \"One\" : index % 10 == 1 ? \"Two\" : index % 10\
    \ == 2 ? \"Three\" : index % 10 == 3 ? \"Four\" : index % 10 == 4 ? \"Five\" :\
    \ index % 10 == 5 ? \"Six\" : index % 10 == 6 ? \"Seven\" : index % 10 == 7 ?\
    \ \"Eight\" : index % 10 == 8 ? \"Nine\" : \"\"\n\t});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977061
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length==0)\
    \ return [];\n  arr = arr.sort();\n  arr.sort(function(a,b){\n    return a-b;\n\
    \  });\n  for(var i=0;i<arr.length;i++){\n    if(arr[i]<1 || arr[i]>9){\n    \
    \  arr.splice(i, 1);\n    }\n  }\n  return arr.map(function(num){\n    return\
    \ names[num];\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmphuxoez5w.js:25\n    return names[num];\n    ^\n\nReferenceError:\
    \ names is not defined\n    at /tmp/tmphuxoez5w.js:25:5\n    at Array.map (<anonymous>)\n\
    \    at by_length (/tmp/tmphuxoez5w.js:24:14)\n    at test (/tmp/tmphuxoez5w.js:34:20)\n\
    \    at Object.<anonymous> (/tmp/tmphuxoez5w.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\treturn\
    \ arr.sort((a,b)=>{\n\t\tif(a.value < b.value) return -1;\n\t\tif(a.value > b.value)\
    \ return 1;\n\t\treturn 0;\n\t}).reverse().map(v => lookup[v].name)\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpypbrhplw.js:18\n\t}).reverse().map(v => lookup[v].name)\n\t   \
    \                             ^\n\nReferenceError: lookup is not defined\n   \
    \ at /tmp/tmpypbrhplw.js:18:34\n    at Array.map (<anonymous>)\n    at by_length\
    \ (/tmp/tmpypbrhplw.js:18:15)\n    at test (/tmp/tmpypbrhplw.js:26:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpypbrhplw.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tif (arr.length\
    \ === 0)\n\t\treturn [];\n\n\tarr = arr.reverse();\n\tfor (var i = 1; i < 9; i++)\n\
    \t\tarr.reverse();\n\n\tvar str = '';\n\tvar digits = ['One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n\tfor (var i = 0; i < arr.length;\
    \ i++){\n\t\tvar digit = arr[i];\n\t\tif (digit >= 1 && digit <= 9)\n\t\t\tstr\
    \ = str + digits[digit];\n\t}\n\n\treturn str.split('');\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'F',\n  'o',\n\
    \  'u',\n  'r',\n  'T',\n  'h',\n  'r',\n  'e',\n  'e',\n  'N',\n  'i',\n  'n',\n\
    \  'e',\n  'S',\n  'i',\n  'x',\n  'F',\n  'i',\n  'v',\n  'e',\n  'T',\n  'w',\n\
    \  'o',\n  'T',\n  'w',\n  'o',\n  'T',\n  'h',\n  'r',\n  'e',\n  'e'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp4i3bhbnr.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4i3bhbnr.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'F',\
    \ 'o', 'u', 'r', 'T', 'h',\n    'r', 'e', 'e', 'N', 'i', 'n',\n    'e', 'S', 'i',\
    \ 'x', 'F', 'i',\n    'v', 'e', 'T', 'w', 'o', 'T',\n    'w', 'o', 'T', 'h', 'r',\
    \ 'e',\n    'e'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n\
    \    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\treturn\
    \ arr.sort(function(a, b){return b-a}).reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2,\n  2,\n  3,\n  4,\n  5,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpjchjjjsc.js:22:10)\n    at Object.<anonymous> (/tmp/tmpjchjjjsc.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 2, 2,\n    3, 4, 5, 8\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (arr.length\
    \ == 0) return [];\n  const max = Math.max(...arr);\n  const min = Math.min(...arr);\n\
    \  const len = max - min + 1;\n  const names = [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const results =\
    \ [];\n  for (let i = min; i <= max; ++i){\n    results.push(i.toString());\n\
    \  }\n  for (let i = len; i >= 0; --i){\n    results[i] = names[results[i]];\n\
    \  }\n  return results;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight',\n  'Nine',\n\
    \  undefined\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n\
    \  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpkwlils0t.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkwlils0t.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \     'Three',\n    'Four',    'Five',\n    'Six',     'Seven',\n    'Eight',\
    \   'Nine',\n    undefined\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tif (arr.length\
    \ === 0){return arr;}\n\tvar min_len = Math.min(arr.length-1, 9);\n\tvar max_len\
    \ = 9;\n\tfor (var i = 0; i < min_len; i++){\n\t\tfor (var j = min_len; j < max_len;\
    \ j++){\n\t\t\tvar val = arr[j];\n\t\t\tif (val < 1){\n\t\t\t\tcontinue;\n\t\t\
    \t}\n\t\t\tvar idx = ((val-1)*9)+i-1;\n\t\t\tvar name = [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][val-1];\n\
    \t\t\tarr[idx] = name;\n\t\t}\n\t\tfor (var j = 0; j < max_len; j++){\n\t\t\t\
    var val = arr[j];\n\t\t\tif (val > 9){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar idx\
    \ = ((val-1)*9)+i-1;\n\t\t\tvar name = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][val];\n\t\t\tarr[idx] = name;\n\
    \t\t}\n\t}\n\treturn arr.slice(0,9);\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'Two',\n  'Two',\n  4,\n  5,\n  8,\n  2,\n  3,\n  'Three'\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n\
    \  'One',\n  'One'\n]\n    at test (/tmp/tmpsxis8xcg.js:46:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsxis8xcg.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Two', 'Two',\
    \ 'Two', 4, 5, 8, 2, 3, 'Three' ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n    \
    \        arr.splice(i, 1, arr[arr[i] - 1]);\n        }\n    }\n    return arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  4,\n  5,\n  3,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpkjciptfm.js:27:10)\n    at Object.<anonymous> (/tmp/tmpkjciptfm.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 1, 4,\n    5, 3, 1, 1\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var sorted\
    \ = arr.filter(function(n){\n    return n >= 1 && n <= 9;\n  }).sort(function(n1,\
    \ n2){\n    return n1 - n2;\n  });\n  \n  var last = 0;\n  var newArr = [];\n\
    \  \n  sorted.forEach(function(n, i){\n    if(last > 9){\n      newArr.push(sorted.slice(i,\
    \ last));\n    }\n    newArr.push(strings[n - 1]);\n    last = n;\n  });\n  \n\
    \  return newArr.length ? newArr.join('') : [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8e2lyiyx.js:27\n    newArr.push(strings[n - 1]);\n            \
    \    ^\n\nReferenceError: strings is not defined\n    at /tmp/tmp8e2lyiyx.js:27:17\n\
    \    at Array.forEach (<anonymous>)\n    at by_length (/tmp/tmp8e2lyiyx.js:23:10)\n\
    \    at test (/tmp/tmp8e2lyiyx.js:39:20)\n    at Object.<anonymous> (/tmp/tmp8e2lyiyx.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tlet result\
    \ = [];\n\t\n\tfor(let i = 0; i < arr.length; i++){\n\t\tif(arr[i] > 9){\n\t\t\
    \tresult.push(by_length_num(arr[i]))\n\t\t}\n\t\telse if(i){\n\t\t\tresult.push(\n\
    \t\t\t\tarr.splice(-i - 1, 1)[0] +\n\t\t\t\tby_length_num(arr.splice(-i - 1, 1)[0])\n\
    \t\t\t)\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpab3rxf47.js:22\n\t\t\t\tarr.splice(-i - 1, 1)[0] +\n\t\t\t\t  \
    \                   ^\n\nReferenceError: by_length_num is not defined\n    at\
    \ by_length (/tmp/tmpab3rxf47.js:22:26)\n    at test (/tmp/tmpab3rxf47.js:36:20)\n\
    \    at Object.<anonymous> (/tmp/tmpab3rxf47.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var sorted_arr\
    \ = arr.sort(function(a, b) {\n    return a - b;\n  });\n  sorted_arr.reverse();\n\
    \  for(var i = 0;i < sorted_arr.length;i++){\n    if(i === sorted_arr.length -\
    \ 1){\n      sorted_arr[i] = \"One\";\n    }else if (i === 0){\n      sorted_arr[i]\
    \ = \"Zero\";\n    }else{\n      if(sorted_arr[i] === sorted_arr[i + 1]){\n  \
    \      sorted_arr[i] = \"Two\";\n      }else{\n        sorted_arr[i] = \"Three\"\
    ;\n      }\n    }\n  }\n  return sorted_arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Zero',\n\
    \  'Three',\n  'Three',\n  'Three',\n  'Two',\n  'Three',\n  'Two',\n  'One'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpg3mib13c.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg3mib13c.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Zero',\
    \  'Three',\n    'Three', 'Three',\n    'Two',   'Three',\n    'Two',   'One'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ result = [];\n    arr.forEach(function(number) {\n        var n = +number;\n\
    \        n += n % 10;\n        n /= 10;\n        result.push(names[n]);\n    });\n\
    \    return result.length > 0 ? result.reverse() : [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpsi79grpw.js:19\n        result.push(names[n]);\n              \
    \      ^\n\nReferenceError: names is not defined\n    at /tmp/tmpsi79grpw.js:19:21\n\
    \    at Array.forEach (<anonymous>)\n    at by_length (/tmp/tmpsi79grpw.js:15:9)\n\
    \    at test (/tmp/tmpsi79grpw.js:29:20)\n    at Object.<anonymous> (/tmp/tmpsi79grpw.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var ret\
    \ = [];\n  if (arr.length == 0){\n    return ret;\n  }\n\n  var min = Math.min(...arr);\n\
    \  var max = Math.max(...arr);\n  var l = min;\n  for (var i = min+1; i < max;\
    \ i++){\n    var key = i.toString();\n    if (!(key in ONE)){ //This key is not\
    \ existed.\n      key = UNKNOWN;\n    }\n    ret.push(ONE[key]);\n  }\n\n  return\
    \ ret;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpwq0vuahe.js:24\n    if (!(key in ONE)){ //This key is not existed.\n\
    \                 ^\n\nReferenceError: ONE is not defined\n    at by_length (/tmp/tmpwq0vuahe.js:24:18)\n\
    \    at test (/tmp/tmpwq0vuahe.js:38:20)\n    at Object.<anonymous> (/tmp/tmpwq0vuahe.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var len\
    \ = arr.length;\n  if(len == 0) return [];\n  var result = [];\n  for(var i=0;\
    \ i<len; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.unshift(numbers[arr[i]\
    \ - 1]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp2rjjc_mh.js:19\n      result.unshift(numbers[arr[i] - 1]);\n  \
    \                   ^\n\nReferenceError: numbers is not defined\n    at by_length\
    \ (/tmp/tmp2rjjc_mh.js:19:22)\n    at test (/tmp/tmp2rjjc_mh.js:30:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp2rjjc_mh.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ i, j, l = arr.length, out = [];\n    for(i=0; i< l; i++){\n        for(j=0;\
    \ j<l; j++){\n            if(arr[i] === arr[j]){\n                break;\n   \
    \         }\n            if(j === l-1){\n                out.push(arr[i]);\n \
    \           }\n        }\n    }\n    return out.length > 0 ? out : [];\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n\
    \  'One',\n  'One'\n]\n    at test (/tmp/tmpvdmmwayb.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvdmmwayb.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  return\
    \ arr.sort(function(a, b){\n    if(a === 1 || a === 9 || b === 1 || b === 9) return\
    \ 0;\n    return a > b ? 1 : -1;\n  }).map(function(val){\n    return one_nine[val];\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpwp5upugu.js:18\n    return one_nine[val];\n    ^\n\nReferenceError:\
    \ one_nine is not defined\n    at /tmp/tmpwp5upugu.js:18:5\n    at Array.map (<anonymous>)\n\
    \    at by_length (/tmp/tmpwp5upugu.js:17:6)\n    at test (/tmp/tmpwp5upugu.js:27:20)\n\
    \    at Object.<anonymous> (/tmp/tmpwp5upugu.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length\
    \ === 0){ return []; }\n  for(var i = 1; i < 10; ++i){ // 1~9\n    for(var j =\
    \ arr.length - 1; j >= 0; --j){\n      if(arr[j] >= i && arr[j] <= 9){\n     \
    \   arr.splice(j, 1);\n        arr.unshift(i);\n        break;\n      }\n    }\n\
    \  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1,\n  2,\n  1,\n  1,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp0yx_l53l.js:32:10)\n    at Object.<anonymous> (/tmp/tmp0yx_l53l.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,\
    \ 3, 2, 1,\n    2, 1, 1, 4\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var names\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"];\n  var result = [];\n  for(var i = 0; i<arr.length; i++){\n    result.push(names[arr[i]]);\n\
    \  }\n  result.reverse();\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Four',\n\
    \  'Three',\n  'Nine',\n  'Six',\n  'Five',\n  'Two',\n  'Two',\n  'Three'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpod8qyeky.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpod8qyeky.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Four',\
    \ 'Three',\n    'Nine', 'Six',\n    'Five', 'Two',\n    'Two',  'Three'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var arr2\
    \ = [];\n  for (var i = 0; i < arr.length; i++){\n    var narr = arr[i];\n   \
    \ var len = narr.length;\n    for (var j = 0; j < len; j++){\n      var num =\
    \ narr[j];\n      for (var k = len - 1; k >= 0; k--){\n        if (num == arr[k]){\n\
    \          narr = narr.slice(0, k).concat(arr2.slice(k + 1, len)).concat(\n  \
    \          arr.slice(j + 1)).concat(\n            narr.slice(1));\n          break;\n\
    \        }\n      }\n    }\n    arr2 = arr2.concat(narr);\n  }\n  return arr2;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpr56ez_c8.js:39:10)\n    at Object.<anonymous> (/tmp/tmpr56ez_c8.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ len = arr.length\n    if(len == 0) return []\n    var first = [arr[len-1]]\n\
    \    for(var i = len-2; i >= 0; i--){\n        var cur = arr[i]\n        if(cur\
    \ > 0) first.unshift(arr[cur-1])\n    }\n    return first\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  2,\n  4,\n  5,\n  3,\n  1,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpnkrg8ad_.js:29:10)\n    at Object.<anonymous> (/tmp/tmpnkrg8ad_.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 2, 4,\n    5, 3, 1, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977056
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(!arr.length)return\
    \ [];\n  var len = arr.length;\n  if(len===1)return [arr[0]];\n  if(len===2)return\
    \ [arr[1], arr[0]];\n  var newArray = new Array(len-1), o=0;\n  for(var i=len-1,\
    \ j=0; i>0; i-=2, j++){\n    if(arr[i]>arr[i-1])newArray[j] = arr[i-1];\n    newArray[j]\
    \ = arr[--i];\n  }\n  newArray[0] = arr[0];\n  return newArray;\n}\n</code>\n\
    <|/ a |>\n<| a |>\nMy solution with sorting of strings :)\n<code>\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqcc69di_.js:26\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    arr\
    \ = arr.filter(Number);\n    if (arr.length > 0) return (\n        arr.sort(function(a,b){return\
    \ b-a}).reverse().map(\n            function(val){\n                if (val >\
    \ 9 ) return val - 10 + \"One\";\n                if (val < -9 ) return \"One\"\
    ;\n                return val;\n            })\n    );\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2,\n  2,\n  3,\n  4,\n  5,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp2w8v21v9.js:30:10)\n    at Object.<anonymous> (/tmp/tmp2w8v21v9.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 2, 2,\n    3, 4, 5, 8\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\treturn\
    \ arr\n\t\t.filter(function(n){\n\t\t\treturn n >= 1 && n <= 9\n\t\t})\n\t\t.sort(function(a,\
    \ b){\n\t\t\treturn a - b\n\t\t})\n\t\t.reverse()\n\t\t.map(function(n){\n\t\t\
    \treturn {\n\t\t\t\tn: n,\n\t\t\t\tn: (n + 1) % 10,\n\t\t\t\tname: \"One\",\n\t\
    \t\t\tn: \"One\",\n\t\t\t\tname: \"Two\",\n\t\t\t\tn: \"Two\",\n\t\t\t\tname:\
    \ \"Three\",\n\t\t\t\tn: \"Three\",\n\t\t\t\tname: \"Four\",\n\t\t\t\tn: \"Four\"\
    ,\n\t\t\t\tname: \"Five\",\n\t\t\t\tn: \"Five\",\n\t\t\t\tname: \"Six\",\n\t\t\
    \t\tn: \"Six\",\n\t\t\t\tname: \"Seven\",\n\t\t\t\tn: \"Seven\",\n\t\t\t\tname:\
    \ \"Eight\",\n\t\t\t\tn: \"Eight\",\n\t\t\t\tname: \"Nine\",\n\t\t\t\tn: \"Nine\"\
    ,\n\t\t\t\tname: \"Ten\",\n\t\t\t\tn: \"Ten\",\n\t\t\t\tname: \"Eleven\",\n\t\t\
    \t\tn: \"Eleven\",\n\t\t\t\tname: \"Twelve\",\n\t\t\t\tn: \"Twelve\",\n\t\t\t\t\
    name: \"Thirteen\",\n\t\t\t\tn: \"Thirteen\",\n\t\t\t\tname: \"Fourteen\",\n\t\
    \t\t\tn: \"Fourteen\",\n\t\t\t\tname: \"Fifteen\",\n\t\t\t\tn: \"Fifteen\",\n\t\
    \t\t\tname: \"Sixteen\",\n\t\t\t\tn: \"Sixteen\",\n\t\t\t\tname: \"Seventeen\"\
    ,\n\t\t\t\tn: \"Seventeen\",\n\t\t\t\tname: \"Eighteen\",\n\t\t\t\tn: \"Eighteen\"\
    ,\n\t\t\t\tname: \"Nineteen\",\n\t\t\t\tn: \"Nineteen\",\n\t\t\t\tname: \"Twenty\"\
    ,\n\t\t\t\tn: \"Twenty\",\n\t\t\t\tname: \"Twenty-One\",\n\t\t\t\tn: \"Twenty-One\"\
    ,\n\t\t\t\tname: \"Twenty-Two\",\n\t\t\t\tn: \"Twenty-Two\",\n\t\t\t\tname: \"\
    Twenty-Three\",\n\t\t\t\tn: \"Twenty-Three\",\n\t\t\t\tname: \"Twenty-Four\",\n\
    \t\t\t\tn: \"Twenty-Four\",\n\t\t\t\tname: \"Twenty-Five\",\n\t\t\t\tn: \"Twenty-Five\"\
    ,\n\t\t\t\tname: \"Twenty-Six\",\n\t\t\t\tn: \"Twenty-Six\",\n\t\t\t\tname: \"\
    Twenty-Seven\",\n\t\t\t\tn: \"Twenty-Seven\",\n\t\t\t\tname: \"Twenty-Eight\"\
    ,\n\t\t\t\tn: \"Twenty-Eight\",\n\t\t\t\tname: \"Twenty-Nine\",\n\t\t\t\tn: \"\
    Twenty-Nine\"\n\t\t\t}[n]\n\t\t})\n\t\t.map(function(x){\n\t\t\treturn x.name\n\
    \t\t})\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpb0i3c922.js:87\n\t\t\treturn x.name\n\t\t\t         ^\n\nTypeError:\
    \ Cannot read properties of undefined (reading 'name')\n    at /tmp/tmpb0i3c922.js:87:13\n\
    \    at Array.map (<anonymous>)\n    at by_length (/tmp/tmpb0i3c922.js:86:4)\n\
    \    at test (/tmp/tmpb0i3c922.js:96:20)\n    at Object.<anonymous> (/tmp/tmpb0i3c922.js:103:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  var count = 0;\n  arr.forEach(function(num){\n    count++;\n    if(num\
    \ > 9){\n      result.push(by_length(arr.replace(num.toString(),'').split('')));\n\
    \    }\n  });\n  if(count === arr.length){\n    return arr.map(function(num){\n\
    \      return by_length(arr.replace(num.toString(),'').split(''));\n    })\n \
    \ }\n  return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpx3refyic.js:24\n      return by_length(arr.replace(num.toString(),'').split(''));\n\
    \                           ^\n\nTypeError: arr.replace is not a function\n  \
    \  at /tmp/tmpx3refyic.js:24:28\n    at Array.map (<anonymous>)\n    at by_length\
    \ (/tmp/tmpx3refyic.js:23:16)\n    at test (/tmp/tmpx3refyic.js:34:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpx3refyic.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar newArr\
    \ = arr.slice(0);\n\tnewArr = newArr.sort(function(a, b){\n\t\treturn a-b;\n\t\
    });\n\tvar firstVal = 1;\n\tvar lastVal = 9;\n\tvar lastValIndex = 0;\n\tnewArr.forEach(function(v){\n\
    \t\tif(v == lastVal){\n\t\t\tlastValIndex++;\n\t\t}else{\n\t\t\tnewArr[lastValIndex]\
    \ = names[lastValIndex] + String(lastVal);\n\t\t\tfirstVal++;\n\t\t\tlastVal =\
    \ v;\n\t\t\tlastValIndex = newArr.length;\n\t\t}\n\t});\n\treturn newArr;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpzrjmi4gz.js:25\n\t\t\tnewArr[lastValIndex] = names[lastValIndex]\
    \ + String(lastVal);\n\t\t\t                       ^\n\nReferenceError: names\
    \ is not defined\n    at /tmp/tmpzrjmi4gz.js:25:27\n    at Array.forEach (<anonymous>)\n\
    \    at by_length (/tmp/tmpzrjmi4gz.js:21:9)\n    at test (/tmp/tmpzrjmi4gz.js:39:20)\n\
    \    at Object.<anonymous> (/tmp/tmpzrjmi4gz.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ len = arr.length,\n        result = [];\n    for (var i = 1; i < len; i++){\n\
    \        result.push(arr[len - i]);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n\
    \  8,\n  5,\n  4,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpfb1d92yv.js:27:10)\n    at Object.<anonymous> (/tmp/tmpfb1d92yv.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    3,\
    \ 2, 8, 5,\n    4, 1, 1\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    return\
    \ arr.reduce(function(out, i){\n        return out.concat(i > 9 ? [] : by_digit_name(i));\n\
    \    }, []);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpgctxfz6v.js:15\n        return out.concat(i > 9 ? [] : by_digit_name(i));\n\
    \                            ^\n\nReferenceError: by_digit_name is not defined\n\
    \    at /tmp/tmpgctxfz6v.js:15:29\n    at Array.reduce (<anonymous>)\n    at by_length\
    \ (/tmp/tmpgctxfz6v.js:14:16)\n    at test (/tmp/tmpgctxfz6v.js:24:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpgctxfz6v.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ sortedArr = arr.slice();\n    sortedArr.sort(function(a, b) {\n        return\
    \ a - b;\n    });\n    var reversedArr = sortedArr.slice().reverse();\n    var\
    \ result = [];\n    for(var i = 0; i < reversedArr.length; i++){\n        result.push(by_length_recursive(reversedArr,\
    \ i));\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpolwm6qce.js:21\n        result.push(by_length_recursive(reversedArr,\
    \ i));\n               ^\n\nReferenceError: by_length_recursive is not defined\n\
    \    at by_length (/tmp/tmpolwm6qce.js:21:16)\n    at test (/tmp/tmpolwm6qce.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpolwm6qce.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ temp = new Array(arr.length), i, j;\n    for(i = 0, j = arr.length; i < j; i++){\n\
    \        temp[i] = [arr[i]];\n    }\n    function swap(arr, i, j){\n        var\
    \ tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n    }\n    for(i\
    \ = 0; i < arr.length - 1; i++){\n        if(arr[i + 1] - arr[i] === 0){\n   \
    \         swap(arr, i, i + 1);\n        }\n    }\n    var result = [];\n    for(i\
    \ = 0, j = arr.length; i < j; i++){\n        result.push(by_name(arr[i]));\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpmqwu_at2.js:30\n        result.push(by_name(arr[i]));\n       \
    \        ^\n\nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpmqwu_at2.js:30:16)\n\
    \    at test (/tmp/tmpmqwu_at2.js:40:20)\n    at Object.<anonymous> (/tmp/tmpmqwu_at2.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  return\
    \ arr\n    .filter(function(i){\n      return i >= 1 && i <= 9;\n    })\n    .map(function(i){\n\
    \      return \"One\"\n      + (i - 1)\n      + \"Two\"\n      + (i - 2)\n   \
    \   + \"Three\"\n      + (i - 3)\n      + \"Four\"\n      + (i - 4)\n      + \"\
    Five\"\n      + (i - 5)\n      + \"Six\"\n      + (i - 6)\n      + \"Seven\"\n\
    \      + (i - 7)\n      + \"Eight\"\n      + (i - 8)\n      + \"Nine\"\n     \
    \ + (i - 9);\n    })\n    .reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One2Two1Three0Four-1Five-2Six-3Seven-4Eight-5Nine-6',\n\
    \  'One1Two0Three-1Four-2Five-3Six-4Seven-5Eight-6Nine-7',\n  'One7Two6Three5Four4Five3Six2Seven1Eight0Nine-1',\n\
    \  'One4Two3Three2Four1Five0Six-1Seven-2Eight-3Nine-4',\n  'One3Two2Three1Four0Five-1Six-2Seven-3Eight-4Nine-5',\n\
    \  'One0Two-1Three-2Four-3Five-4Six-5Seven-6Eight-7Nine-8',\n  'One0Two-1Three-2Four-3Five-4Six-5Seven-6Eight-7Nine-8',\n\
    \  'One1Two0Three-1Four-2Five-3Six-4Seven-5Eight-6Nine-7'\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n\
    \  'One',\n  'One'\n]\n    at test (/tmp/tmpdmca41p9.js:46:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdmca41p9.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One2Two1Three0Four-1Five-2Six-3Seven-4Eight-5Nine-6',\n\
    \    'One1Two0Three-1Four-2Five-3Six-4Seven-5Eight-6Nine-7',\n    'One7Two6Three5Four4Five3Six2Seven1Eight0Nine-1',\n\
    \    'One4Two3Three2Four1Five0Six-1Seven-2Eight-3Nine-4',\n    'One3Two2Three1Four0Five-1Six-2Seven-3Eight-4Nine-5',\n\
    \    'One0Two-1Three-2Four-3Five-4Six-5Seven-6Eight-7Nine-8',\n    'One0Two-1Three-2Four-3Five-4Six-5Seven-6Eight-7Nine-8',\n\
    \    'One1Two0Three-1Four-2Five-3Six-4Seven-5Eight-6Nine-7'\n  ],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var ones\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"];\n  var nines = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"\
    Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"\
    ];\n  var tens = [\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"\
    Seventy\", \"Eighty\", \"Ninety\"];\n  var arr2 = [];\n  for(var i=0; i<arr.length;\
    \ i++){\n    if(arr[i] > -1 && arr[i] <= 9){\n      arr2.push(ones[arr[i]]);\n\
    \    }else if(arr[i] > -10 && arr[i] <= 19){\n      arr2.push(nines[arr[i]/10]);\n\
    \    }else if(arr[i] > -20 && arr[i] <= 99){\n      arr2.push(tens[arr[i]/100]);\n\
    \    }\n  }\n  return arr2;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Two',\n  'Five',\n  'Six',\n  'Nine',\n  'Three',\n  'Four'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp39wbzpcd.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp39wbzpcd.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Two',   'Five',\n    'Six',   'Nine',\n    'Three', 'Four'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar len\
    \ = arr.length,\n\t\treversed = arr.slice().reverse(),\n\t\tresult = [];\n\n\t\
    for(var i=0;i<len;i++){\n\t\tvar a = reversed[i];\n\n\t\tif(a < 1 || a > 9){\n\
    \t\t\tcontinue;\n\t\t}\n\n\t\tswitch(a){\n\t\t\tcase 1: result.push(\"One\");\
    \ break;\n\t\t\tcase 2: result.push(\"Two\"); break;\n\t\t\tcase 3: result.push(\"\
    Three\"); break;\n\t\t\tcase 4: result.push(\"Four\"); break;\n\t\t\tcase 5: result.push(\"\
    Five\"); break;\n\t\t\tcase 6: result.push(\"Six\"); break;\n\t\t\tcase 7: result.push(\"\
    Seven\"); break;\n\t\t\tcase 8: result.push(\"Eight\"); break;\n\t\t\tcase 9:\
    \ result.push(\"Nine\"); break;\n\t\t\tdefault: continue;\n\t\t}\n\t}\n\n\treturn\
    \ result.length ? result : [];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpv91xhh_h.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv91xhh_h.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (!arr\
    \ || arr.length === 0) return [];\n\n  let newArr = [];\n  let lastOne = null;\n\
    \n  for (let i = 0; i < arr.length; i++) {\n    const current = arr[i];\n\n  \
    \  if (current === 1) {\n      if (lastOne) {\n        newArr.push(lastOne);\n\
    \      }\n\n      newArr.push(\"One\");\n      lastOne = null;\n    } else {\n\
    \      newArr.push(current);\n\n      lastOne = current;\n    }\n  }\n\n  return\
    \ newArr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  'One',\n  'One',\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\
    \n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmpkkbtge5r.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkkbtge5r.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \     2, 'One',\n    'One', 4, 5,\n    8,     2, 3\n  ],\n  expected: [\n    'Eight',\
    \ 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ result = [], \n        len = arr.length,\n        i, l, j, m;\n    \n    for\
    \ (i = 0, l = len; i < l; i++) {\n        m = arr[i];\n        j = i;\n      \
    \  while ((j = (j + len) % l) >= m) {\n            result.push((j + 1) % l < 0\
    \ ? \"\" : arr[++j]);\n        }\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  5,\n  8,\n  2,\n  3,\n  undefined,\n  4,\n  5,\n  8,\n  2,\n  3,\n  undefined,\n\
    \  3,\n  undefined,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp8vu3n8fn.js:33:10)\n    at Object.<anonymous> (/tmp/tmp8vu3n8fn.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \         4, 5,\n    8,         2, 3,\n    undefined, 4, 5,\n    8,         2,\
    \ 3,\n    undefined, 3, undefined,\n    undefined\n  ],\n  expected: [\n    'Eight',\
    \ 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    arr\
    \ = arr.filter(function(x){\n        return x === 1 || x === -1 || x === 0 ||\
    \ x === 9 || x === 1;\n    });\n    var result = arr.map(function(x){\n      \
    \  return names[x - 1];\n    });\n    arr = [];\n    for (var i = arr.length;\
    \ i < 10; i++) {\n        arr.push(\"One\");\n    }\n    arr = arr.concat(result);\n\
    \    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpeghbkfei.js:18\n        return names[x - 1];\n        ^\n\nReferenceError:\
    \ names is not defined\n    at /tmp/tmpeghbkfei.js:18:9\n    at Array.map (<anonymous>)\n\
    \    at by_length (/tmp/tmpeghbkfei.js:17:22)\n    at test (/tmp/tmpeghbkfei.js:32:20)\n\
    \    at Object.<anonymous> (/tmp/tmpeghbkfei.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (!arr.length)\
    \ return [];\n  return arr.filter(function(val){\n    return val > 0 && val <=\
    \ 9;\n  }).sort().reverse().map(function(val){\n    return one_to_nine[val];\n\
    \  });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"\
    One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"\
    One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"\
    ]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpazgie6xl.js:18\n    return one_to_nine[val];\n    ^\n\nReferenceError:\
    \ one_to_nine is not defined\n    at /tmp/tmpazgie6xl.js:18:5\n    at Array.map\
    \ (<anonymous>)\n    at by_length (/tmp/tmpazgie6xl.js:17:23)\n    at test (/tmp/tmpazgie6xl.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpazgie6xl.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if\
    \ (arr.length == 0) return [];\n    var sorted = arr.slice().sort();\n    return\
    \ sorted.reverse().map(function(item){\n        return arr_int_name[item];\n \
    \   });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0tvv37pn.js:17\n        return arr_int_name[item];\n        ^\n\
    \nReferenceError: arr_int_name is not defined\n    at /tmp/tmp0tvv37pn.js:17:9\n\
    \    at Array.map (<anonymous>)\n    at by_length (/tmp/tmp0tvv37pn.js:16:29)\n\
    \    at test (/tmp/tmp0tvv37pn.js:26:20)\n    at Object.<anonymous> (/tmp/tmp0tvv37pn.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tif (!arr\
    \ || arr.length == 0) return arr;\n\t\n\tvar reversed = arr.slice().reverse();\n\
    \tvar out = [];\n\t\n\tfor (var i = 0; i < reversed.length; i++){\n\t\tvar num\
    \ = reversed[i];\n\t\t\n\t\tif (num >= 1 && num <= 9){\n\t\t\tout.push(names[num\
    \ - 1]);\n\t\t}\n\t}\n\t\n\treturn out;\n}\nby_length.__name__ = 'by_length';\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8d_c47nt.js:23\n\t\t\tout.push(names[num - 1]);\n\t\t\t       \
    \  ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmp8d_c47nt.js:23:13)\n\
    \    at test (/tmp/tmp8d_c47nt.js:36:20)\n    at Object.<anonymous> (/tmp/tmp8d_c47nt.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if\
    \ (!arr || arr.length === 0) { return []; }\n    return arr.reduce(function(prev,\
    \ next) {\n        if (prev.length) { prev.push(next); }\n        else { prev.push({\
    \ value: next, name: \"One\" }); }\n        return prev;\n    }, []).reduce(function(prev,\
    \ curr){\n        curr.name =  curr.value.toString().charAt(0).toUpperCase();\n\
    \        if (prev.length) { prev.push(curr); }\n        else { prev.push({ value:\
    \ curr.value, name: curr.name }); }\n        return prev;\n    }, []);\n}\n\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpw4bfah1l.js:20\n        curr.name =  curr.value.toString().charAt(0).toUpperCase();\n\
    \                                ^\n\nTypeError: Cannot read properties of undefined\
    \ (reading 'toString')\n    at /tmp/tmpw4bfah1l.js:20:33\n    at Array.reduce\
    \ (<anonymous>)\n    at by_length (/tmp/tmpw4bfah1l.js:19:12)\n    at test (/tmp/tmpw4bfah1l.js:33:20)\n\
    \    at Object.<anonymous> (/tmp/tmpw4bfah1l.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var length\
    \ = arr.length;\n  var res = [];\n  for(var i = 0; i<length; i++){\n    var num\
    \ = arr[i];\n    if(num >= 1 && num <=9){\n      res.unshift(num.toString());\n\
    \    }\n  }\n  return res;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '3',\n  '2',\n\
    \  '8',\n  '5',\n  '4',\n  '1',\n  '1',\n  '2'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmpz8n8f8bk.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpz8n8f8bk.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '3',\
    \ '2', '8',\n    '5', '4', '1',\n    '1', '2'\n  ],\n  expected: [\n    'Eight',\
    \ 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar result\
    \ = [];\n\tfor(var i = 1; i < 10; i++)\n\t\tresult = result.concat(arr);\n\n\t\
    if(arr[0] < 1)\n\t\tresult = result.filter(function(el){ return el < 1; });\n\n\
    \tvar one_digit = {};\n\tone_digit[1] = ONE;\n\tone_digit[2] = TWO;\n\tone_digit[3]\
    \ = THREE;\n\tone_digit[4] = FOUR;\n\tone_digit[5] = FIVE;\n\tone_digit[6] = SIX;\n\
    \tone_digit[7] = SEVEN;\n\tone_digit[8] = EIGHT;\n\tone_digit[9] = NINE;\n\n\t\
    var two_digit = {};\n\ttwo_digit[1] = ZERO;\n\ttwo_digit[2] = ONE;\n\ttwo_digit[3]\
    \ = TWO;\n\ttwo_digit[4] = THREE;\n\ttwo_digit[5] = FOUR;\n\ttwo_digit[6] = FIVE;\n\
    \ttwo_digit[7] = SIX;\n\ttwo_digit[8] = SEVEN;\n\ttwo_digit[9] = EIGHT;\n\n\t\
    var three_digit = {};\n\tthree_digit[1] = ZERO;\n\tthree_digit[2] = ONE;\n\tthree_digit[3]\
    \ = TWO;\n\tthree_digit[4] = THREE;\n\tthree_digit[5] = FOUR;\n\tthree_digit[6]\
    \ = FIVE;\n\tthree_digit[7] = SIX;\n\tthree_digit[8] = SEVEN;\n\tthree_digit[9]\
    \ = EIGHT;\n\n\tvar four_digit = {};\n\tfour_digit[1] = ZERO;\n\tfour_digit[2]\
    \ = ONE;\n\tfour_digit[3] = TWO;\n\tfour_digit[4] = THREE;\n\tfour_digit[5] =\
    \ FOUR;\n\tfour_digit[6] = FIVE;\n\tfour_digit[7] = SIX;\n\tfour_digit[8] = SEVEN;\n\
    \tfour_digit[9] = EIGHT;\n\n\tvar five_digit = {};\n\tfive_digit[1] = ZERO;\n\t\
    five_digit[2] = ONE;\n\tfive_digit[3] = TWO;\n\tfive_digit[4] = THREE;\n\tfive_digit[5]\
    \ = FOUR;\n\tfive_digit[6] = FIVE;\n\tfive_digit[7] = SIX;\n\tfive_digit[8] =\
    \ SEVEN;\n\tfive_digit[9] = EIGHT;\n\n\tvar six_digit = {};\n\tsix_digit[1] =\
    \ ZERO;\n\tsix_digit[2] = ONE;\n\tsix_digit[3] = TWO;\n\tsix_digit[4] = TH\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpg8zytzdx.js:93\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tif(arr.length\
    \ == 0){\n\t\treturn [];\n\t}\n\tvar res = [];\n\tfor(var i=0;i<arr.length;i++){\n\
    \t\tif(i % 2 != 0){\n\t\t\tres.push(arr[i]);\n\t\t}\n\t}\n\tfor(var i=0;i<arr.length;i++){\n\
    \t\tif(i % 2 == 0){\n\t\t\tres.push(by_name(arr[i]));\n\t\t}\n\t}\n\treturn res.reverse();\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpjo3xwhgo.js:25\n\t\t\tres.push(by_name(arr[i]));\n\t\t\t    ^\n\
    \nReferenceError: by_name is not defined\n    at by_length (/tmp/tmpjo3xwhgo.js:25:8)\n\
    \    at test (/tmp/tmpjo3xwhgo.js:36:20)\n    at Object.<anonymous> (/tmp/tmpjo3xwhgo.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  return\
    \ arr\n  .map(el => String(el).length)\n  .sort((a, b) => b - a)\n  .reverse()\n\
    \  .filter(el => el > 1 && el < 9)\n  .map(el => {\n    const name = map[el] ||\
    \ \"One\";\n    return name === \"One\" ? 1 : name\n  });\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n\
    \  'One',\n  'One'\n]\n    at test (/tmp/tmpzv3z6jff.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzv3z6jff.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar output\
    \ = [];\n\tvar i;\n\tfor(i = 0; i < arr.length; i++){\n\t\tif(arr[i] >= 1 && arr[i]\
    \ <= 9){\n\t\t\toutput.push(names[arr[i] - 1]);\n\t\t}\n\t}\n\treturn output.sort().reverse();\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpec_58si1.js:18\n\t\t\toutput.push(names[arr[i] - 1]);\n\t\t\t \
    \           ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpec_58si1.js:18:16)\n\
    \    at test (/tmp/tmpec_58si1.js:29:20)\n    at Object.<anonymous> (/tmp/tmpec_58si1.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let num\
    \ = [];\n  if(arr.length === 0){\n    return num;\n  }\n  for(var i = 0; i < arr.length;\
    \ i++){\n    let min = arr[i];\n    for(let j = i; j < arr.length; j++){\n   \
    \   if(min > arr[j]){\n        min = arr[j];\n      }\n    }\n    arr[arr.length-i-1]\
    \ = min;\n    num.push(arr[i]);\n  }\n  return num;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  1,\n  1,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp8agvf90j.js:36:10)\n    at Object.<anonymous> (/tmp/tmp8agvf90j.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    1, 1, 1, 1\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\treturn\
    \ arr.filter(function(num){\n\t\treturn num > 0 && num < 10;\n\t}).sort(function(a,\
    \ b){\n\t\treturn a - b;\n\t}).map(function(num){\n\t\tvar name = [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][num];\n\t\tif(num === 0){\n\t\t\treturn name;\n\t\t}\n\t\treturn \"\\\"\" +\
    \ name + \"\\\"\";\n\t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '\"Two\"\
    ',\n  '\"Two\"',\n  '\"Three\"',\n  '\"Three\"',\n  '\"Four\"',\n  '\"Five\"',\n\
    \  '\"Six\"',\n  '\"Nine\"'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp0ypr2uuk.js:32:10)\n    at Object.<anonymous> (/tmp/tmp0ypr2uuk.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '\"\
    Two\"',   '\"Two\"',\n    '\"Three\"', '\"Three\"',\n    '\"Four\"',  '\"Five\"\
    ',\n    '\"Six\"',   '\"Nine\"'\n  ],\n  expected: [\n    'Eight', 'Five',\n \
    \   'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ arrLen = arr.length;\n    var result = [];\n    for(var i=0; i<arrLen; i++){\n\
    \        var num = arr[i];\n        if(num >= 1 && num <= 9){\n            result.push((arr[i]\
    \ + 1) + \"-\" + num);\n        }\n    }\n    if(result.length > 0){\n       \
    \ return result.sort().reverse();\n    }\n    return [];\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '9-8',\n\
    \  '6-5',\n  '5-4',\n  '4-3',\n  '3-2',\n  '3-2',\n  '2-1',\n  '2-1'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n\
    \  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpvwyc1zue.js:33:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpvwyc1zue.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '9-8',\
    \ '6-5',\n    '5-4', '4-3',\n    '3-2', '3-2',\n    '2-1', '2-1'\n  ],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length\
    \ == 0){return []}\n  if(arr.length == 1){\n    if(arr[0] == 1 && arr[1] == 1){return\
    \ [\"One\"]}\n    else if(arr[0] == 1 && arr[1] == 9){return [\"Nine\"]}\n   \
    \ else if(arr[0] == 9 && arr[1] == 9){return [\"Nine\", \"Nine\"]}\n    else if(arr[0]\
    \ == 9 && arr[1] == 1){return [\"Seven\", \"Seven\", \"Seven\", \"Seven\", \"\
    Seven\"]}\n    else if(arr[0] == 1 && arr[1] == 9){return [\"Six\", \"Six\", \"\
    Six\", \"Six\", \"Six\", \"Six\", \"Six\"]}\n    else if(arr[0] == 9){return [\"\
    Six\", \"Seven\", \"Seven\", \"Seven\", \"Seven\", \"Seven\", \"Seven\", \"Seven\"\
    ]}\n    else if(arr[0] == 1){return [\"Five\", \"Five\", \"Five\", \"Five\", \"\
    Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\",\
    \ \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Fi\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfsmdnbkj.js:22\n    else if(arr[0] == 1){return [\"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"\
    , \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Fi\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                         ^^^\n\nSyntaxError: Invalid or unexpected token\n  \
    \  at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(!arr.length)\
    \ return [];\n  var sorted_arr = arr.slice().sort();\n  var result = [];\n  var\
    \ reverse_arr = [];\n  var length = sorted_arr.length;\n  var index = -1;\n  while(++index\
    \ < length){\n    reverse_arr.push(sorted_arr[index]);\n  }\n  for(var index =\
    \ length - 1;index >= 0;index--){\n    result.push(by_digit_name[reverse_arr[index]]);\n\
    \  }\n  return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work with\
    \ negative numbers though\n<|/ c |>\n<| a dscore=1 |>\nThis solution was inspired\
    \ by Matias's answer but is more efficient because it does not sort:\n\n<code>\n\
    const by_length = (nums) => nums\n  .map(num => (num > 9 ? \"\" + num : num))\n\
    \  .map((num, i) => num > 9 ? by_length([num - 10 + i]) : num)\n  .map((num, i)\
    \ => (\"One\"   + num) + (\"Two\"   + num) + (\"Three\" + num) + (\"Four\"  +\
    \ num) + (\"Five\"  + num) + (\"Six\"   + num) + (\"Seven\" + num) + (\"Eight\"\
    \ + num) + (\"Nine\"  + num))\n  .reduce((acc, cur, idx) => {\n    if (idx ===\
    \ 0) return acc;\n    acc.push(cur);\n    return acc;\n  }, [])\n  .join(\"\"\
    );\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmploug5cid.js:28\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ arr = arr.sort(function(a, b) {\n        return a - b;\n    });\n    if(!arr.length){\n\
    \        return [];\n    }\n    var result = [];\n    for(var i = 0, len = arr.length;\
    \ i < len; i++){\n        result.push(\"One - \" + arr[arr.length - i - 1]);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One - 8',\n\
    \  'One - 5',\n  'One - 4',\n  'One - 3',\n  'One - 2',\n  'One - 2',\n  'One\
    \ - 1',\n  'One - 1'\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n\
    \  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test\
    \ (/tmp/tmpnwqmbimw.js:32:10)\n    at Object.<anonymous> (/tmp/tmpnwqmbimw.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One\
    \ - 8', 'One - 5',\n    'One - 4', 'One - 3',\n    'One - 2', 'One - 2',\n   \
    \ 'One - 1', 'One - 1'\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length===0){\n\
    \    return [];\n  }\n  var l1=[];\n  for(var i=0;i<9;i++){\n    var val=arr[i];\n\
    \    if(val!==-1 && val!==0 && val<9){\n      l1.push(names[val]);\n    }\n  }\n\
    \  return l1.reverse().join(\"\");\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpysuums_d.js:21\n      l1.push(names[val]);\n              ^\n\n\
    ReferenceError: names is not defined\n    at by_length (/tmp/tmpysuums_d.js:21:15)\n\
    \    at test (/tmp/tmpysuums_d.js:31:20)\n    at Object.<anonymous> (/tmp/tmpysuums_d.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (arr.length\
    \ == 0)\n    return [];\n\n  var min = 0;\n  var max = 9; // avoid index out of\
    \ bounds errors\n\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] <\
    \ min)\n      min = arr[i];\n    if (arr[i] > max)\n      max = arr[i];\n  }\n\
    \n  if (min == max && max <= 9)\n    return [ \"Zero\" ];\n\n  var result = [];\n\
    \  var i = 0;\n  while (i < max && i < arr.length)\n  {\n    result.push(by_length_helper(arr,\
    \ min, max, i));\n    i++;\n  }\n\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmptl13er6u.js:34\n    result.push(by_length_helper(arr, min, max,\
    \ i));\n           ^\n\nReferenceError: by_length_helper is not defined\n    at\
    \ by_length (/tmp/tmptl13er6u.js:34:12)\n    at test (/tmp/tmptl13er6u.js:46:20)\n\
    \    at Object.<anonymous> (/tmp/tmptl13er6u.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var ret\
    \ = [],\n      first = true;\n  for(var i = 0, l = arr.length; i < l; i++){\n\
    \    var number = arr[i];\n    if(number == -1){\n      continue;\n    }\n   \
    \ if(!first){\n      ret.push(\"One\");\n    }\n    ret.push(by_digit(number));\n\
    \    first = false;\n  }\n  return ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpr342jw0o.js:24\n    ret.push(by_digit(number));\n        ^\n\n\
    ReferenceError: by_digit is not defined\n    at by_length (/tmp/tmpr342jw0o.js:24:9)\n\
    \    at test (/tmp/tmpr342jw0o.js:35:20)\n    at Object.<anonymous> (/tmp/tmpr342jw0o.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (arr.length\
    \ == 0) return [];\n  var arr2 = arr.filter(function(n){ if (typeof n == 'number')\
    \ return (n>=0 && n<=9); });\n  var result = [];\n  var tmp = {};\n  var i;\n\
    \  for (i=0;i<arr2.length;i++){\n    if (i in arr2){\n      if (i in tmp){\n \
    \       result[result.length] = tmp[i];\n      }\n      tmp[i] = arr2[i];\n  \
    \  }\n  }\n  return result;\n};\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n\
    \  'One',\n  'One'\n]\n    at test (/tmp/tmpr0c3uuid.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr0c3uuid.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  for(var i=0; i<arr.length; i++){\n    if(arr[i]>0){\n      result.push(by_length(arr[i].split(\"\
    \")));\n    }\n  }\n  if(arr.length==0){\n    result = [];\n  }\n  var i=0;\n\
    \  while(i<result.length){\n    result[i] = result[i].reverse().join(\"\");\n\
    \    i++;\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp0eewgnso.js:17\n      result.push(by_length(arr[i].split(\"\")));\n\
    \                                   ^\n\nTypeError: arr[i].split is not a function\n\
    \    at by_length (/tmp/tmp0eewgnso.js:17:36)\n    at test (/tmp/tmp0eewgnso.js:36:20)\n\
    \    at Object.<anonymous> (/tmp/tmp0eewgnso.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  for(var\
    \ i=0;i<arr.length;i++){\n    if(arr[i]>9 && arr[i]<100)\n    {\n      arr[i]\
    \ = arr[arr[i]-10 -1];\n    }\n  }\n  arr.sort();\n  for(var i=0;i<arr.length;i++){\n\
    \    arr[i]=names[arr[i]];\n  }\n  return arr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpdflh_lvp.js:22\n    arr[i]=names[arr[i]];\n           ^\n\nReferenceError:\
    \ names is not defined\n    at by_length (/tmp/tmpdflh_lvp.js:22:12)\n    at test\
    \ (/tmp/tmpdflh_lvp.js:31:20)\n    at Object.<anonymous> (/tmp/tmpdflh_lvp.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tarr =\
    \ arr || [];\n\n\t// If the array is empty, return an empty array:\n\tif (arr.length\
    \ === 0)\n\t\treturn arr;\n\n\t// If the array has strange number ignore it:\n\
    \tif (isNaN(arr[0]))\n\t\treturn arr;\n\n\treturn arr.sort(function(a, b){\n\t\
    \treturn a - b;\n\t})\n\t.map(function(elem, index, arr){\n\t\tif (index === 0)\n\
    \t\t\treturn 'One';\n\t\tif (index === arr.length - 1)\n\t\t\treturn 'Nine';\n\
    \t\tif (elem === 9)\n\t\t\treturn 'Nine';\n\t\treturn digits[elem - 1];\n\t});\n\
    };\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp2a3g5drh.js:34\n\t\treturn digits[elem - 1];\n\t\t^\n\nReferenceError:\
    \ digits is not defined\n    at /tmp/tmp2a3g5drh.js:34:3\n    at Array.map (<anonymous>)\n\
    \    at by_length (/tmp/tmp2a3g5drh.js:27:3)\n    at test (/tmp/tmp2a3g5drh.js:43:20)\n\
    \    at Object.<anonymous> (/tmp/tmp2a3g5drh.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ len = arr.length;\n    var str = \"\";\n    var last = \"\";\n    while(len--){\n\
    \        if(arr[len] > 9){\n            str += last;\n        }\n        str +=\
    \ arr[len];\n        last = arr[len];\n    }\n    if(str != \"\") str += last;\n\
    \    return str;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'328541122'\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp1_dj4dlr.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1_dj4dlr.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '328541122',\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  return\
    \ arr.reduce(function(a, b){\n    a.push(b);\n    return a;\n  }, []).sort(function(a,\
    \ b){\n    return a - b;\n  }).map(function(x){\n    if (x > 9) return 'Nine';\n\
    \    if (x > 8) return 'Eight';\n    if (x > 7) return 'Seven';\n    if (x > 6)\
    \ return 'Six';\n    if (x > 5) return 'Five';\n    if (x > 4) return 'Four';\n\
    \    if (x > 3) return 'Three';\n    if (x > 2) return 'Two';\n    if (x > 1)\
    \ return 'One';\n    return '';\n  });\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  '',\n\
    \  'One',\n  'One',\n  'Two',\n  'Three',\n  'Four',\n  'Seven'\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n\
    \  'One',\n  'One'\n]\n    at test (/tmp/tmpuo0kwu_p.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuo0kwu_p.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '',\
    \     '',\n    'One',  'One',\n    'Two',  'Three',\n    'Four', 'Seven'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (!arr.length)\
    \ return [];\n  var sorted = arr.slice();\n  sorted.sort(function(a, b) {\n  \
    \  var lengthA = a?a.toString().length:0;\n    var lengthB = b?b.toString().length:0;\n\
    \    return (lengthA > lengthB) - (lengthA < lengthB);\n  });\n  sorted = sorted.map(function(e,\
    \ i, arr){\n    if (!i && arr.length == 1) return e;\n    var result = {};\n \
    \   var len = (e.toString().length == 1) ? e.toString():e.toString() + arr.slice(1).map(String).join('');\n\
    \    result[len] = e; //reverse map to go from length to name string\n    return\
    \ result;\n  });\n  return sorted.map(function(e) {\n    return Object.keys(e).reverse().reduce(function(p,c){return\
    \ p[c];}, e);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp81i4zkgg.js:38:10)\n    at Object.<anonymous> (/tmp/tmp81i4zkgg.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if\
    \ (arr.length <= 0)\n        return []\n    var startNum = arr.filter(function(val){return\
    \ val >= 1 && val <= 9}).length\n    if (startNum == 0)\n        return []\n \
    \   var reverse = arr.reverse().map(function(val){return val - startNum})\n  \
    \  return reverse.map(function(val){\n        return digits[val]\n    }).join(\"\
    \")\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"\
    One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"\
    One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"\
    ]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpmt1xhicm.js:21\n        return digits[val]\n        ^\n\nReferenceError:\
    \ digits is not defined\n    at /tmp/tmpmt1xhicm.js:21:9\n    at Array.map (<anonymous>)\n\
    \    at by_length (/tmp/tmpmt1xhicm.js:20:20)\n    at test (/tmp/tmpmt1xhicm.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpmt1xhicm.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ result = [];\n    var arrLength = arr.length;\n    var lengthArr = [];\n\n \
    \   for(var i = 9; i >= 0; i--){\n        if(arrLength > 0){\n            lengthArr.push(i);\n\
    \        }\n    }\n    \n    for(var i = 0; i < arrLength; i++){\n        for(var\
    \ j = 0; j < lengthArr.length; j++){\n            if(arr[i] < lengthArr[j]){\n\
    \                var resultPush = arr[i];\n                arr[i] = resultArr.shift();\n\
    \                result.push(resultPush);\n                break;\n          \
    \  }\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=javascript,sorting\
    \ |>\n<| c |>\nThis answer does not work in all cases. Eg. it does not work for\
    \ the array `[1, 1, 2, 3]`.\n<|/ c |>\n<| a dscore=3 |>\nThis solution works with\
    \ sorted array as well\n<code>\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpy1che4rj.js:37\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: -5
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ newArr = arr.slice();\n    newArr.sort(function(x, y){\n        return x - y;\n\
    \    });\n    while(newArr.length > 0){\n        if(newArr.length === 1){\n  \
    \          newArr.push(\"One\");\n            break;\n        }\n        newArr.push(\"\
    Two\");\n        newArr.push(\"Three\");\n        newArr.push(\"Four\");\n   \
    \     newArr.push(\"Five\");\n        newArr.push(\"Six\");\n        newArr.push(\"\
    Seven\");\n        newArr.push(\"Eight\");\n        newArr.push(\"Nine\");\n \
    \   }\n    return newArr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 139628615\n#\n#\n#\n#FailureMessage Object: 0x7ffe20de8580\n 1: 0x2aef659a0727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2aef6653528e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2aef65e6ff8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2aef660019f0  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2aef66009390  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2aef661f37db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2aef65b527f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659977059
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\treturn\
    \ arr.filter(function(x){\n\t\treturn x < 10 && x > 0;\n\t}).sort(function(a,\
    \ b){\n\t\treturn b - a;\n\t}).map(function(x, i){\n\t\tvar name = ['One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'][i];\n\t\treturn name;\n\
    \t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -1, 55]),[\"\
    One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\", \"Two\", \"\
    One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\", \"Four\"\
    ]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'One',\n\
    \  'Two',\n  'Three',\n  'Four',\n  'Five',\n  'Six',\n  'Seven',\n  'Eight'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpcomn5jm5.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcomn5jm5.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'One',\
    \   'Two',\n    'Three', 'Four',\n    'Five',  'Six',\n    'Seven', 'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tif(arr.length==0)\
    \ return [];\n\tvar str=arr.join();\n\tvar result = [];\n\tvar last = null;\n\t\
    for(var i=0;i<str.length;i++){\n\t\tvar a = str[i];\n\t\tif(last == null){\n\t\
    \t\tlast = str[i];\n\t\t}\n\t\telse if(last != a){\n\t\t\tresult.push(by_length(arr));\n\
    \t\t\tresult = result.concat(\n\t\t\t\t[\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][str[i]-last]\n\t\t\t);\n\t\
    \t\tlast = str[i];\n\t\t}\n\t}\n\tresult.push(by_length(arr));\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2lpk7fzu.js:15\n\tvar str=arr.join();\n\t            ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at Array.join (<anonymous>)\n    at by_length\
    \ (/tmp/tmp2lpk7fzu.js:15:14)\n    at by_length (/tmp/tmp2lpk7fzu.js:24:16)\n\
    \    at by_length (/tmp/tmp2lpk7fzu.js:24:16)\n    at by_length (/tmp/tmp2lpk7fzu.js:24:16)\n\
    \    at by_length (/tmp/tmp2lpk7fzu.js:24:16)\n    at by_length (/tmp/tmp2lpk7fzu.js:24:16)\n\
    \    at by_length (/tmp/tmp2lpk7fzu.js:24:16)\n    at by_length (/tmp/tmp2lpk7fzu.js:24:16)\n\
    \    at by_length (/tmp/tmp2lpk7fzu.js:24:16)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var\
    \ result = [];\n    arr.forEach(function(val, index){\n        if(val > 9){\n\
    \            var name = arr.splice(index, 1);\n            result.push( name );\n\
    \        }\n    });\n    if(!arr.length){\n        return result;\n    }\n   \
    \ result.push(arr.join(''));\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '21145823'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpi635rtzs.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpi635rtzs.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '21145823'\
    \ ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two', \
    \  'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    if(arr\
    \ === undefined || arr.length === 0)\n        return [];\n    \n    if(arr[0]\
    \ !== 0 && arr[0] !== 9)\n        return arr;\n    \n    return arr.sort((a, b)\
    \ => { return b - a; }).reverse().map(n => n + '').filter(x => !isNaN(parseInt(x))).map(n\
    \ => { \n        // Convert 0 back to \"Zero\"\n        if(n == \"0\")\n     \
    \       n = \"Zero\";\n        \n        // Convert 9 back to \"Nine\"\n     \
    \   if(n == \"9\")\n            n = \"Nine\";\n        \n        // Convert \"\
    Nine\" back to \"Nine\"\n        if(n == \"Nine\")\n            n = \"Nine\";\n\
    \        \n        // Convert \"Two\" to \"Two\"\n        if(n == \"Two\")\n \
    \           n = \"Two\";\n        \n        // Convert \"One\" back to \"One\"\
    \n        if(n == \"One\")\n            n = \"One\";\n        \n        return\
    \ n;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp8on3vh1j.js:50:10)\n    at Object.<anonymous> (/tmp/tmp8on3vh1j.js:57:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if (!arr.length){\n\
    \    return [];\n  }\n  var result = [];\n  var len = arr.length;\n  var i = 0;\n\
    \  while (i < len){\n    var cur = arr[i];\n    if (cur < 1 || cur > 9){\n   \
    \   i = len;\n      break;\n    }\n    result.push(names[cur - 1]);\n    i++;\n\
    \  }\n  if (i === len){\n    return arr;\n  }\n  while (i < len){\n    result.push(\"\
    Nine\");\n    i++;\n  }\n  while (i < len){\n    result.push(\"Eight\");\n   \
    \ i++;\n  }\n  while (i < len){\n    result.push(\"Seven\");\n    i++;\n  }\n\
    \  while (i < len){\n    result.push(\"Six\");\n    i++;\n  }\n  while (i < len){\n\
    \    result.push(\"Five\");\n    i++;\n  }\n  while (i < len){\n    result.push(\"\
    Four\");\n    i++;\n  }\n  while (i < len){\n    result.push(\"Three\");\n   \
    \ i++;\n  }\n  while (i < len){\n    result.push(\"Two\");\n    i++;\n  }\n  while\
    \ (i < len){\n    result.push(\"One\");\n    i++;\n  }\n  return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplc8xcz9s.js:26\n    result.push(names[cur - 1]);\n            \
    \    ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmplc8xcz9s.js:26:17)\n\
    \    at test (/tmp/tmplc8xcz9s.js:76:20)\n    at Object.<anonymous> (/tmp/tmplc8xcz9s.js:83:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length\
    \ > 0){\n    var result = [];\n    for(var i = 1; i < arr.length; i++){\n    \
    \  if(arr[i] < 9){\n        result.push(by_length(arr.slice(0, i)))\n        arr.splice(0,\
    \ i);\n      }\n      else if(arr[i] > 9){\n        var temp = by_length(arr.slice(0,\
    \ i));\n        result.push(by_length(arr.slice(0, i)));\n        arr.splice(0,\
    \ i);\n        arr = temp;\n      }\n      else{\n        result.push(by_length(arr.slice(0,\
    \ i)));\n        arr.splice(0, i);\n      }\n    }\n    return result.concat(arr);\n\
    \  }\n  else{\n    return [];\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    2\n\
    \  ],\n  [\n    [\n      1\n    ],\n    1\n  ],\n  [\n    [\n      4\n    ],\n\
    \    5,\n    8\n  ],\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmpnm4csd1d.js:44:10)\n    at Object.<anonymous> (/tmp/tmpnm4csd1d.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 2 ], [\
    \ [ 1 ], 1 ], [ [ 4 ], 5, 8 ], 2, 3 ],\n  expected: [\n    'Eight', 'Five',\n\
    \    'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var res\
    \ = [];\n  for(var i=0,len=arr.length; i<len; ++i){\n    if( (i+1)%9 == 0 ){\n\
    \      res.push(arr[len-1]);\n    }\n    res.push(arr[i]);\n  }\n  return res;\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  4,\n  5,\n  8,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  'Eight',\n\
    \  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n  'One'\n]\n\
    \    at test (/tmp/tmp5pxxeni8.js:30:10)\n    at Object.<anonymous> (/tmp/tmp5pxxeni8.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 1, 4,\n    5, 8, 2, 3\n  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',\
    \  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  const\
    \ new_array = [];\n  for(let i in arr){\n    if(arr[i] >= 1 && arr[i] <= 9){\n\
    \      new_array.push(name_by_number[arr[i]]);\n    }\n  }\n  if(new_array.length\
    \ == 0){\n    return [];\n  }\n  return new_array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpv0qbouaq.js:17\n      new_array.push(name_by_number[arr[i]]);\n\
    \                     ^\n\nReferenceError: name_by_number is not defined\n   \
    \ at by_length (/tmp/tmpv0qbouaq.js:17:22)\n    at test (/tmp/tmpv0qbouaq.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpv0qbouaq.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result\
    \ = [];\n  var len = arr.length;\n  if(len == 0) return result;\n  var min = Math.min.apply(Math,\
    \ arr);\n  for(var i = 0; i < len; i++){\n    var num = arr[i];\n    if(num >=\
    \ 1 && num <= 9){\n      result.push(names[num]);\n      arr[arr.indexOf(num)]\
    \ = num - min;\n      arr.splice(i, 1);\n      i--;\n      len--;\n    }\n  }\n\
    \  return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpjysbxqaq.js:21\n      result.push(names[num]);\n              \
    \    ^\n\nReferenceError: names is not defined\n    at by_length (/tmp/tmpjysbxqaq.js:21:19)\n\
    \    at test (/tmp/tmpjysbxqaq.js:35:20)\n    at Object.<anonymous> (/tmp/tmpjysbxqaq.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var output\
    \ = [];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i]\
    \ <= 9){\n      output.push(by[arr[i] - 1]);\n    }\n  }\n  return output;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp1wr5aki4.js:17\n      output.push(by[arr[i] - 1]);\n          \
    \        ^\n\nReferenceError: by is not defined\n    at by_length (/tmp/tmp1wr5aki4.js:17:19)\n\
    \    at test (/tmp/tmp1wr5aki4.js:28:20)\n    at Object.<anonymous> (/tmp/tmp1wr5aki4.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var reversed\
    \ = reverse(arr);\n  var result = [];\n  for (var i=0; i<reversed.length; i++){\n\
    \    var key = reversed[i];\n    if (key > 0 && key <= 9){\n      result.push(by_length_array[key-1]);\n\
    \    }\n  }\n  return reverse(result);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4u3_oiik.js:14\n  var reversed = reverse(arr);\n              \
    \   ^\n\nReferenceError: reverse is not defined\n    at by_length (/tmp/tmp4u3_oiik.js:14:18)\n\
    \    at test (/tmp/tmp4u3_oiik.js:30:20)\n    at Object.<anonymous> (/tmp/tmp4u3_oiik.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    return\
    \ arr\n        .filter( v => v != null )\n        .reverse()\n        .map( v\
    \ => by_length_recursive(v, 1) + \"One\" )\n        .join( \"\" );\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmptnpfl9u3.js:17\n        .map( v => by_length_recursive(v, 1) +\
    \ \"One\" )\n                                             ^\n\nReferenceError:\
    \ by_length_recursive is not defined\n    at /tmp/tmptnpfl9u3.js:17:46\n    at\
    \ Array.map (<anonymous>)\n    at by_length (/tmp/tmptnpfl9u3.js:17:10)\n    at\
    \ test (/tmp/tmptnpfl9u3.js:26:20)\n    at Object.<anonymous> (/tmp/tmptnpfl9u3.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  return\
    \ arr.reduce(function(acc, item, index){\n    if (index % 2 === 0) {\n      acc.push(by_length(arr.slice(0,index)));\n\
    \    }\n    acc.push(by_length_one_two(item, index));\n    return acc;\n  }, []);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpzg1hi6cb.js:18\n    acc.push(by_length_one_two(item, index));\n\
    \        ^\n\nReferenceError: by_length_one_two is not defined\n    at /tmp/tmpzg1hi6cb.js:18:9\n\
    \    at Array.reduce (<anonymous>)\n    at by_length (/tmp/tmpzg1hi6cb.js:14:14)\n\
    \    at test (/tmp/tmpzg1hi6cb.js:28:20)\n    at Object.<anonymous> (/tmp/tmpzg1hi6cb.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar result\
    \ = [], len = arr.length;\n\tfor(var i=0; i<len; i++){\n\t\tvar num = arr[i];\n\
    \t\tif(num < 1 || num > 9){\n\t\t\tcontinue;\n\t\t}\n\t\tnum = num - 1;\n\t\t\
    var num = arr[num];\n\t\tif(num > 0){\n\t\t\tresult.push(name[num]);\n\t\t}\n\t\
    }\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpfb_w_3dw.js:23\n\t\t\tresult.push(name[num]);\n\t\t\t         \
    \   ^\n\nReferenceError: name is not defined\n    at by_length (/tmp/tmpfb_w_3dw.js:23:16)\n\
    \    at test (/tmp/tmpfb_w_3dw.js:34:20)\n    at Object.<anonymous> (/tmp/tmpfb_w_3dw.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let sorted_arr\
    \ = arr.sort( (a, b) => b - a).reverse();\n  for (let i = 0; i < arr.length; i++){\n\
    \    if (sorted_arr[i] % 10 !== 0){\n      return [];\n    }\n  }\n  return sorted_arr.map(\
    \ (d, i) => { return one[i % 10] + \" \" + d } );\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n\
    \  'One',\n  'One'\n]\n    at test (/tmp/tmpfizt3mrc.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfizt3mrc.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',\
    \   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  if(arr.length\
    \ === 0){\n    return [];\n  }\n  var reversed = arr\n    .filter(function(elem){\
    \ return elem > 1 && elem < 9; });\n  for(var i in reversed){\n    reversed[i]\
    \ = numbers[parseInt(reversed[i], 10)]\n  }\n  return reversed;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpl91u4888.js:20\n    reversed[i] = numbers[parseInt(reversed[i],\
    \ 10)]\n                  ^\n\nReferenceError: numbers is not defined\n    at\
    \ by_length (/tmp/tmpl91u4888.js:20:19)\n    at test (/tmp/tmpl91u4888.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpl91u4888.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tvar res\
    \ = [];\n\tvar len = arr.length;\n\tfor(var i = 0; i < len; i++){\n\t\tif(arr[i]\
    \ >= 1 && arr[i] <= 9){\n\t\t\tres.unshift(arr[i] + \"-\" + ones[arr[i]-1]);\n\
    \t\t}\n\t}\n\treturn res.reverse().join(\"\");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpk8x9zbj5.js:18\n\t\t\tres.unshift(arr[i] + \"-\" + ones[arr[i]-1]);\n\
    \t\t\t                           ^\n\nReferenceError: ones is not defined\n  \
    \  at by_length (/tmp/tmpk8x9zbj5.js:18:31)\n    at test (/tmp/tmpk8x9zbj5.js:29:20)\n\
    \    at Object.<anonymous> (/tmp/tmpk8x9zbj5.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n\tlet result\
    \ = arr.filter(function(num){\n\t\treturn num >=1 && num <= 9;\n\t});\n\tlet reversed\
    \ = result.reverse();\n\tlet nums = \"\";\n\treversed.map(function(num){\n\t\t\
    nums += \"One\";\n\t\tnums += \"Two\";\n\t\tnums += \"Three\";\n\t\tnums += \"\
    Four\";\n\t\tnums += \"Five\";\n\t\tnums += \"Six\";\n\t\tnums += \"Seven\";\n\
    \t\tnums += \"Eight\";\n\t\tnums += \"Nine\";\n\t\treturn nums[num];\n\t});\n\t\
    return nums;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'OneTwoThreeFourFiveSixSevenEightNineOneTwoThreeFourFiveSixSevenEightNineOneTwoThreeFourFiveSixSevenEightNineOneTwoThreeFourFiveSixSevenEightNineOneTwoThreeFourFiveSixSevenEightNineOneTwoThreeFourFiveSixSevenEightNineOneTwoThreeFourFiveSixSevenEightNineOneTwoThreeFourFiveSixSevenEightNine'\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp50x11q79.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp50x11q79.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'OneTwoThreeFourFiveSixSevenEightNineOneTwoThreeFourFiveSixSevenEightNineOneTwoThreeFourFiveSixSevenEightNineOneTwoThreeFourFiveSixSevenEightNineOneTwoThreeFourFiveSixSevenEightNineOneTwoThreeFourFiveSixSevenEightNineOneTwoThreeFourFiveSixSevenEightNineOneTwoThreeFourFiveSixSevenEightNine',\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977057
