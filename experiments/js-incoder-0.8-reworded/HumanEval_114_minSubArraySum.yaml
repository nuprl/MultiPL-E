name: HumanEval_114_minSubArraySum
language: js
prompt: "//Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
  // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
  \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
  \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
  \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
  \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
  \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
  \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
completions: ["  let minSum = Number.MAX_SAFE_INTEGER;\n  nums.forEach((num) => {\n\
    \    const curSum = num + num;\n    minSum = Math.min(minSum, curSum);\n  });\n\
    \n  return minSum;\n}\n", "    //loop through nums array\n    for(let i = 0; i\
    \ < nums.length; i++){\n        //loop through nums array\n        for(let j =\
    \ 0; j < nums.length; j++){\n            //if the current element of nums array\
    \ and current element of nums array is same, add current element of nums array\
    \ to total\n            if(nums[i] == nums[j]){\n                nums[j] = nums[j]\
    \ + nums[i]\n            }\n            //if the current element of nums array\
    \ is not same, add current element of nums array to total and initialize nums\
    \ array element to zero\n            else if(nums[i] != nums[j]){\n          \
    \      nums[j] = nums[j] + nums[i]\n                nums[i] = 0\n            }\n\
    \        }\n    }\n    return nums.reduce(function(a, b){\n        return a +\
    \ b\n    })\n}\n", "  var sum = 0;\n  for (var i = 0; i < nums.length; i++) {\n\
    \    sum += nums[i];\n  }\n  return Math.max(0, sum);\n}\n", "    debugger;\n\
    \    let sum = 0;\n    nums.map(num => {\n        if(num!=0){\n            sum\
    \ += num;\n        }\n    });\n    return sum;\n}\nmodule.exports = minSubArraySum;\n\
    </code>\n<|/ a dscore=0 tags=arrays,javascript,algorithm,sorting,javascript |>\n\
    <| c |>\nThank you. Your answer does work but I'm looking for an O(n) solution.\
    \ I'm sorry I wasn't more specific about this in my original post.\n<|/ c |>\n\
    <| c |>\nI misunderstood your question. I thought you wanted the sum of the subarrays.\
    \ I've updated the code so that it also returns the sum. I've also updated my\
    \ answer to show an O(n) solution.\n<|/ c |>\n<| a dscore=0 tags=arrays,javascript,algorithm,sorting,javascript\
    \ |>\nO(n) solution:\n<code>\nvar arr = [1,2,3,4,5,6,7,8,9,10];\n", "  var minSum\
    \ = nums[0];\n  for (var i = 0; i < nums.length; i++){\n    minSum = Math.min(minSum,\
    \ nums[i]);\n  }\n  return minSum;\n}\n\n", "  var min = Infinity\n  var minIndex;\n\
    \  var curSum;\n  var i;\n\n  for(i = 0; i < nums.length; i++){\n    curSum =\
    \ sumSubArray(nums, i, nums.length - 1);\n    if(curSum < min){\n      min = curSum;\n\
    \      minIndex = i;\n    }\n  }\n  return min;\n}\n", "    for(let i=0;i<nums.length;i++){\n\
    \        let sum=0;\n        for(let j=0;j<i;j++){\n            sum+=nums[j];\n\
    \        }\n        for(let j=i+1;j<nums.length;j++){\n            sum+=nums[j];\n\
    \        }\n        if(sum>nums[i]){\n            return sum;\n        }\n   \
    \ }\n    return -1;\n}\n", "    \n    let sumOfMin = nums[0];\n    for (let i\
    \ = 1; i < nums.length; i++){\n        if(nums[i] < sumOfMin){\n            sumOfMin\
    \ = nums[i];\n        }\n    }\n    return sumOfMin;\n}\n\n", "    let sum = 0;\n\
    \    let min = 0;\n\n    for (let i = 0; i < nums.length; i++){\n        sum +=\
    \ nums[i];\n        if (sum < min){\n            min = sum;\n        }\n    }\n\
    \n    return min;\n}\n", "    var minSum = Number.MAX_SAFE_INTEGER;\n\n    nums.forEach(function(val){\n\
    \        if(val > 0){\n            minSum = Math.min(minSum, val);\n        }\n\
    \    });\n\n    return minSum;\n}", "  let minSum = Number.MAX_SAFE_INTEGER;\n\
    \  for(let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, findSumSubArray(nums,\
    \ i));\n  }\n  return minSum;\n}\n", "\tvar min = Number.MAX_VALUE;\n\tfor(var\
    \ i = 0; i< nums.length; i++){\n\t\tmin = Math.min(min, sumSubArray(nums, i));\n\
    \t}\n\treturn min;\n}\n\n", "    let min = 0;\n    for(const i of nums){\n   \
    \     min = min + i;\n    }\n    return min;\n}\n", "  nums = nums.filter(function\
    \ (n){\n    return typeof n === 'number'\n  })\n  var min = Number.MAX_SAFE_INTEGER\n\
    \  var minSubArray = []\n  nums.forEach(function (n){\n    min = Math.min(min,\
    \ nums.reduce(function (max, n){\n      return max + n\n    }, n))\n    minSubArray.push(n)\n\
    \  })\n  return min\n}\n", "    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < 0){\n            sum = 0;\n\
    \        }\n    }\n    return sum;\n}\n<|/ file source=github filename=array-manipulation.js\
    \ |>", "  // var smallest = Number.MAX_VALUE;\n  // var smallestIndex = 0;\n \
    \ var result = 0;\n  for(var i=0; i<nums.length; i++){\n    var currentIndex =\
    \ i+1;\n    for(var j=0; j<i; j++){\n      if(nums[j] < nums[i]){\n        currentIndex++;\n\
    \      }\n    }\n    if(currentIndex != i){\n      result += nums[i] - nums[currentIndex];\n\
    \    }\n  }\n  return result;\n}\n", "   if(nums.length == 0){\n      return 0;\n\
    \   }\n   var sum = 0;\n   var min = nums[0];\n   for(var i = 1; i < nums.length;\
    \ i++){\n      if(nums[i]<min){\n         min = nums[i];\n      }\n      sum +=\
    \ nums[i];\n   }\n   return sum + min;\n}\n", "  return nums.reduce((min, num)\
    \ => min + Math.min(num, min), 0);\n}\n", "    var min = Number.MAX_VALUE;\n \
    \   var curMin = Number.MAX_VALUE;\n    nums.forEach(function(num){\n        if(min\
    \ > num){\n            curMin = min;\n            min = num;\n        }else if(curMin\
    \ > num){\n            curMin = num;\n        }\n    })\n    return curMin;\n\
    }\n", "    let min = Number.MAX_SAFE_INTEGER;\n\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        min = Math.min(min, nums[i] + minSubArraySum(nums.slice(i +\
    \ 1)));\n    }\n    return min;\n}\n", "  let minSum = nums[0];\n  for(let i =\
    \ 1; i < nums.length; i++){\n    minSum = Math.min(nums[i], minSum);\n  }\n  return\
    \ minSum;\n}\n", "  let minSum = 0;\n  for (let i = 0; i < nums.length; i++){\n\
    \    if (nums[i] <= 0) continue;\n    minSum = Math.min(minSum, nums[i] + minSubArraySum(nums.slice(i\
    \ + 1)));\n  }\n  return minSum;\n}\n", "  if(!nums || !nums.length) return 0;\n\
    \  return nums.reduce(function(a, b){\n    return (a < b) ? a : b;\n  });\n}\n\
    \n", "  let min = Infinity;\n  let minSum = -1;\n  for (let i=0;i<nums.length;i++){\n\
    \    minSum += nums[i];\n    if(minSum < min){\n      min = minSum;\n    }\n \
    \ }\n  return min;\n}\n", "    \n    //Initialise sum and minSum to negative infinity\n\
    \    var sum = -Infinity;\n    var minSum = Infinity;\n\n    //Iterate over each\
    \ element of nums\n    nums.forEach(function(num){\n\n        //If sum of elements\
    \ upto current index is greater than sum\n        // then update sum and minSum\
    \ with current element.\n        if(sum >= num){\n            sum -= num;\n  \
    \          minSum = Math.min(minSum, num);\n        }\n\n        //If current\
    \ index equals 0 then update sum and minSum\n        if(num === 0){\n        \
    \    sum -= minSum;\n            minSum = Math.min(minSum, -minSum);\n       \
    \ }\n    });\n\n    //Return sum\n    return sum;\n}\n", "    const n = nums.length;\n\
    \    let minSum = nums[0];\n    let maxSum = nums[0];\n    for (let i = 1; i <\
    \ n; i++) {\n        minSum = Math.min(minSum, nums[i]);\n        maxSum = Math.max(maxSum,\
    \ nums[i]);\n    }\n    return minSum + maxSum;\n}\n", "  var minSum = Number.MAX_VALUE;\n\
    \  var minSumIndex = 0;\n  for(var i =0; i<nums.length; i++){\n    minSum = Math.min(minSum,\
    \ nums[i]);\n    minSumIndex = Math.min(minSumIndex, nums.length-i-1);\n  }\n\
    \  return minSum;\n}\n", "  const sorted = nums.sort((a, b) => a - b);\n  return\
    \ Math.min.apply(Math, sorted);\n}\n", "    var len = nums.length;\n    if (len\
    \ === 0) return 0;\n    var subSum = 0, sum = 0, i = 0;\n    while (i < len) {\n\
    \        subSum += nums[i];\n        sum += nums[i++];\n        if (subSum > sum){\n\
    \            subSum -= sum;\n        }\n    }\n    return subSum;\n}\n", "   \
    \ nums.sort();\n    let minSum = Number.MAX_SAFE_INTEGER;\n    let minIndex =\
    \ 0;\n    for (let i = 1; i < nums.length; i++){\n        let sum = 0; \n    \
    \    let leftIndex = 0;\n        let rightIndex = i;\n        for (let j = leftIndex;\
    \ j < rightIndex; j++){\n            sum += nums[j];\n        }\n        if (sum\
    \ < minSum){\n            minSum = sum;\n            minIndex = i;\n        }\n\
    \    }\n    return nums[minIndex];\n}\n", "  //sort from min to max\n  nums.sort(function(a,b){return\
    \ a-b})\n  var min = nums[0]\n  for(var i=1;i<nums.length;i++){\n    //if the\
    \ current element is greater than the previous min\n    if(nums[i]>min){\n   \
    \   //reset to previous min\n      min = nums[i]\n      //and remove from the\
    \ array\n      nums.splice(i,1)\n    }else{\n      //just add to current\n   \
    \   nums[i] = nums[i]+min\n      //check to see if the new element is smaller\
    \ than min\n      if(nums[i]<min){\n        //reset to previous min\n        min\
    \ = nums[i]\n        //and remove from the array\n        nums.splice(i,1)\n \
    \     }\n    }\n  }\n  return nums[0];\n}\n", "  if (nums === null || nums.length\
    \ == 0)\n    return 0\n  nums.sort((a,b)=>b-a)\n  let len = nums.length\n  let\
    \ result = 0\n  for (let i = 0; i<len; i++){\n    let current = nums[i]\n    for\
    \ (let j=0; j<len; j++){\n      if (j>i && nums[j] > current + nums[j])\n    \
    \    break\n    }\n    if (j==len){\n      result += current\n    }\n  }\n  return\
    \ result\n}\n", "    let min = Number.MAX_SAFE_INTEGER\n    for (let i = 0; i\
    \ < nums.length; i++){\n        let min = Math.min(min, nums[i] + minSubArraySum(nums.slice(0,i).concat([nums[i]])))\n\
    \    }\n    return min\n}\n", "    if (nums.length === 0) {\n        return 0;\n\
    \    }\n\n    let min = Number.MAX_SAFE_INTEGER;\n    let curSum = 0;\n    let\
    \ sum = 0;\n\n    for (let i = 0; i < nums.length; i++) {\n        curSum += nums[i];\n\
    \        sum += nums[i];\n        if (min > sum) {\n            min = sum;\n \
    \       }\n    }\n    return min;\n}\n", "    var n = nums.length;\n    var sum\
    \ = 0;\n    for(var i = 0; i<n; i++){\n        var sub = nums.slice(i+1);\n  \
    \      sum += sub.reduce(function(total,a){return total+a;});\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is definitely the best solution, and\
    \ probably the one that should be preferred since it uses a `reduce` function.\n\
    <|/ c |>\n<| c |>\nI agree with - this is the best answer for this problem and\
    \ should be chosen as solution.\n<|/ c |>\n<| c |>\nThis is a perfect example\
    \ of why you shouldn't use `map` and `filter` in place of `reduce` and `for`.\n\
    <|/ c |>\n<| c |>\nGreat solution. Was trying my hand on how to solve this and\
    \ yours made my day\n<|/ c |>\n<| a |>\n<code>", "    var min = Number.MAX_VALUE;\n\
    \    var sum = 0;\n    nums.forEach(function(item){\n        sum += item;\n  \
    \      if(sum < min){\n            min = sum;\n        }\n    });\n    return\
    \ min;\n}\n", "    let minSum = nums[0];\n    let minSumIndex = 0;\n    for(let\
    \ i = 1; i < nums.length; i++){\n        if(nums[i] < minSum){\n            minSum\
    \ = nums[i];\n            minSumIndex = i;\n        }\n    }\n    for(let i =\
    \ minSumIndex; i < nums.length; i++){\n        nums[i] = nums[i] - minSum;\n \
    \   }\n    return minSum;\n}\n", "  return getMinSubArraySum(nums, nums.length);\n\
    }\n", "  let min = Number.MAX_SAFE_INTEGER;\n  for(let i=0;i<nums.length;i++){\n\
    \    let sum = 0;\n    for(let j=0;j<nums.length;j++){\n      sum += nums[j];\n\
    \    }\n    if(sum < min){\n      min = sum;\n    }\n  }\n  return min;\n}\n",
  "    if(nums.length === 0){\n        return 0;\n    }\n    let lowestSum = nums[0];\n\
    \    let lowestSumIndex = 0;\n    for(let i = 1; i < nums.length; i++){\n    \
    \    let currentSum = nums[i] - nums[lowestSumIndex];\n        if(currentSum <\
    \ 0){\n            lowestSumIndex--;\n            lowestSum = nums[lowestSumIndex];\n\
    \        }\n        else{\n            lowestSumIndex++;\n            lowestSum\
    \ += nums[lowestSumIndex];\n        }\n    }\n    return lowestSum;\n}\n", " \
    \   var min = Number.POSITIVE_INFINITY;\n    var minIndex = 0;\n\n    nums.forEach(function(element){\n\
    \        if(element < min){\n            min = element;\n            minIndex\
    \ = 0;\n        }\n\n        if(element == min){\n            minIndex++;\n  \
    \      }\n    })\n    return nums[minIndex];\n}", "  let minSum=Number.MAX_SAFE_INTEGER;\n\
    \  nums.forEach(num =>{\n    const sum=num.reduce((a,b)=>a+b,0);\n    if(sum<minSum){\n\
    \      minSum=sum;\n    }\n  })\n  return minSum;\n}\n", "  let min = Number.MAX_VALUE;\n\
    \  let minIndex = 0;\n  let index;\n  for (let i = 0; i < nums.length; i++) {\n\
    \    if (nums[i] === 0) {\n      continue;\n    }\n    min = Math.min(min, nums[i]);\n\
    \    minIndex = i;\n  }\n  for (index = 0; index < nums.length; index++) {\n \
    \   if (index === minIndex) {\n      continue;\n    }\n    min = Math.min(min,\
    \ nums[index] - nums[minIndex]);\n    minIndex = index;\n  }\n  return min;\n\
    }\n", "\tnums = nums.sort((a,b) => {return a-b})\n\tlet min = nums[0]\n\tfor(let\
    \ i = 1; i < nums.length; i++){\n\t\tmin = Math.min(min, nums[i] - min)\n\t}\n\
    \treturn min\n}\n", "  nums = nums.filter(el => el != null);\n  var sum = 0;\n\
    \  nums.forEach(el => {\n    if(sum > el)\n      sum = el;\n  });\n  return sum;\n\
    }\n", "    return nums.reduce((min, curr)=>{\n        if(min === null || curr\
    \ < min){\n            min = curr;\n        }\n        return min;\n    }, nums[0]);\n\
    }", "  let min = Number.MAX_SAFE_INTEGER;\n  for(let i = 0; i < nums.length; i++){\n\
    \    min = Math.min(min, sumArrays(nums, i, nums.length -1 -i));\n  }\n  return\
    \ min;\n}\n", "\tlet min = nums[0]\n\tlet minIndex = nums[0]\n\tlet minIndexCount\
    \ = 1;\n\tfor(let i = 1; i < nums.length; i++){\n\t\tlet numsCopy = [...nums]\n\
    \t\tlet newMin = numsCopy[i]\n\t\tlet newMinIndex = i;\n\t\tlet newMinCount =\
    \ 0;\n\t\tfor(let j = 0; j < nums.length; j++){\n\t\t\tif(numsCopy[j] < newMin){\n\
    \t\t\t\tnewMin = numsCopy[j]\n\t\t\t\tnewMinIndex = j\n\t\t\t\tnewMinCount = 0\n\
    \t\t\t}\n\t\t\tif(j === i){\n\t\t\t\tnewMinCount += newMinCount\n\t\t\t\tnewMin\
    \ = numsCopy[j]\n\t\t\t\tnewMinIndex = j\n\t\t\t\tnewMinCount = 0\n\t\t\t}\n\t\
    \t}\n\t\tif(newMinCount > minCount){\n\t\t\tmin = newMin\n\t\t\tminIndex = newMinIndex\n\
    \t\t\tminCount = newMinCount\n\t\t}\n\t}\n\treturn min\n}\n", "    let min = nums[0];\n\
    \    let minIndex = 0;\n\n    for (let i = 1; i < nums.length; i++){\n       \
    \ let sum = nums[i];\n\n        for (let j = i + 1; j < nums.length; j++){\n \
    \           sum += nums[j];\n            if (sum < min){\n                min\
    \ = sum;\n                minIndex = j;\n            }\n        }\n    }\n   \
    \ return min;\n}\n</code>\nThe above function is O(n^2). This is because you are\
    \ doing this for each element of the array. One way is to change it to find the\
    \ min sum for each sub array and take the minimum.\nThis can be achieved using\
    \ dynamic programming. You store the minimum sum for a subarray at the previous\
    \ index position. For the ith element, the smallest sum is stored at dp[i-1].\n\
    <code>", "    let total = 0\n\n    // Start with the first element\n    for (let\
    \ i = 1; i < nums.length; i++){\n        // Add element to the total\n       \
    \ total += nums[i]\n\n        // If the total is less than the current total or\
    \ greater than the\n        // current total, update it and remove the element\
    \ from the total\n        while ((total > nums[i] || total < nums[i])\n      \
    \          && total > nums[i - 1]){\n            total-=nums[i]\n            i-=1\n\
    \        }\n    }\n\n    // Return the first element\n    return nums[0]\n}\n",
  "  if(nums.length < 2){\n    return nums[0];\n  }\n  let min = Number.MAX_SAFE_INTEGER;\n\
    \  let max = 0;\n  let index = 0;\n  for(let i = 0; i < nums.length; i++){\n \
    \   if(nums[i] > max){\n      max = nums[i];\n      index = i;\n    }\n  }\n \
    \ for(let i = index; i < nums.length; i++){\n    if(nums[i] < min){\n      min\
    \ = nums[i];\n    }\n  }\n  return min;\n}\n", "  return nums.reduce(function(a,\
    \ b){\n    return a + b;\n  }, nums[0]);\n}\n</cell>\n<cell>", "  var minSum =\
    \ Infinity;\n  for(var i = 0; i < nums.length; i++){\n    minSum = minSum - nums[i];\n\
    \  }\n  minSum = Math.abs(minSum);\n  return minSum;\n}\n", "    return Math.min(nums.reduce(function(sum,\
    \ value){\n        return sum + value;\n    }, 0));\n}", "  let minSum = Number.MAX_SAFE_INTEGER\n\
    \  let leftIdx = 0;\n  let rightIdx = nums.length - 1;\n  while (leftIdx <= rightIdx){\n\
    \    let leftSum = nums[leftIdx] + nums[leftIdx-1];\n    let rightSum = nums[rightIdx]\
    \ + nums[rightIdx+1];\n    let sum = leftSum + rightSum;\n    if (sum < minSum){\n\
    \      minSum = sum;\n    } else if (sum === minSum){\n      minSum = Math.min(minSum,\
    \ leftSum + rightSum);\n    }\n    leftIdx++;\n    rightIdx--;\n  }\n  return\
    \ minSum;\n}\n</code>\n<|/ a dscore=1 tags=javascript,arrays,sorting |>\n<| c\
    \ |>\nNice answer. Thanks for taking the time to write an explanation as well.\n\
    <|/ c |>\n<| c |>\nThis solution is incorrect when all numbers are the same. Try\
    \ this input instead: minSubArraySum([4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,",
  "  // Solution\n  var min = 0;\n  var index = -1;\n  var currentSum = 0;\n\n  //\
    \ Start with the smallest number\n  currentSum = nums[0];\n  index = 0;\n  //\
    \ Keep going until there are no more numbers\n  while (index < nums.length){\n\
    \    // Update sum\n    currentSum += nums[index];\n    // If new sum is smallest\n\
    \    if (currentSum < min){\n      // Save new sum\n      min = currentSum;\n\
    \    }\n    // Increment index\n    index ++;\n  }\n\n  // Return result\n  return\
    \ min;\n}\n", "    var minSum = Number.MAX_SAFE_INTEGER\n    for(var i = 0; i\
    \ < nums.length; i++){\n        minSum = Math.min(minSum, sumSubArray(nums, i))\n\
    \    }\n    return minSum\n}\n", "  var result = [];\n  var min = Infinity;\n\
    \  for (var i = 0; i < nums.length; i++) {\n    min = Math.min(min, nums[i]);\n\
    \  }\n  for (var i = 0; i < nums.length; i++) {\n    if (nums[i] - min > 0) {\n\
    \      result = result.concat(nums[i] - min);\n    }\n  }\n  return result.length\
    \ == 0 ? -Infinity : Math.min(result) || -Infinity;\n}\n", "    \n    let min\
    \ = 0;\n    let ans = nums[0];\n    for(let i = 0; i< nums.length; i++){\n   \
    \     ans = Math.min(ans, nums[i]+nums[i-1]);\n    }\n    return ans;\n}\n</code>\n\
    <|/ a tags=javascript |>\n<| a |>\n<code>", "    var i,\n        min = Math.pow(2,\
    \ 64) - 1,\n        sum = 0,\n        j,\n        arr,\n        len;\n\n    if(nums.length\
    \ === 0) return min;\n\n    for(i = 0; i < nums.length; i++){\n        arr = nums[i];\n\
    \        len = arr.length;\n        for(j = 0; j < len; j++){\n            sum\
    \ += arr[j];\n            min = (sum < min) ? sum : min;\n        }\n    }\n\n\
    \    return min;\n}\n", "  nums.sort((a,b)=>a-b);\n  let l=0;\n  let r=0;\n  let\
    \ sum=0;\n  for(let i=0;i<nums.length-1;i++){\n    l+=nums[i];\n    r+=nums[i+1];\n\
    \    sum+=l-r\n    l=r\n    r=r+nums[i]\n  }\n  return sum;\n}\n", "    //Initialize\
    \ a minimum sum with a very high number\n    let minSum = 1e9;\n    let minI;\n\
    \    let minJ;\n    for(let i = 0; i < nums.length; i++){\n        for(let j =\
    \ 0; j < nums.length; j++){\n            if(minSum > nums[i]+nums[j]){\n     \
    \           minSum = nums[i]+nums[j];\n                minI = i;\n           \
    \     minJ = j;\n            }\n        }\n    }\n    return minSum;\n}", "  return\
    \ nums.reduce(function(min, num){\n    return min + Math.max(0, num);\n  }, 0);\n\
    }\n", "    let min = Number.MAX_SAFE_INTEGER;\n    let i = 0;\n    while (i <\
    \ nums.length){\n        if (nums[i] > 0) min = Math.min(min, nums[i] + minSubArraySum(nums.slice(i\
    \ + 1)));\n        i++;\n    }\n    return min;\n}\n", "  return nums.reduce((acc,\
    \ num)=>{\n    return acc + Math.min(...nums.filter(elem=>elem<num));\n  }, 0);\n\
    }\n", "    //Base Case\n    if(nums.length == 0){\n        return nums[0];\n \
    \   }\n    let min = nums[0];\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        if(i > 0){\n            sum += nums[i] - nums[i - 1];\n     \
    \   }\n        sum += nums[i];\n        if(sum < min){\n            min = sum;\n\
    \        }\n    }\n    return min;\n}\n", "  let min = Infinity;\n  for(let i\
    \ = 0; i < nums.length; i++){\n    for(let j = 0; j < nums.length; j++){\n   \
    \   if(nums[i] > 0 && nums[j] > 0 && nums[i] + nums[j] < min){\n        min =\
    \ nums[i] + nums[j];\n      }\n    }\n  }\n  return min;\n}\n", "\tlet min = Number.MAX_SAFE_INTEGER\n\
    \tfor (let i = 0; i < nums.length; i++){\n\t\tmin = Math.min(min, nums[i]+i)\n\
    \t}\n\treturn min\n}", "    var min = Number.POSITIVE_INFINITY\n    var sum =\
    \ 0\n    var n = nums.length;\n    for(var i=0; i<n; i++){\n        sum += nums[i];\n\
    \        if(sum < min){\n            min = sum;\n        }\n    }\n    return\
    \ min;\n}\n", "    let min = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i <\
    \ nums.length; i++){\n        min = Math.min(min, nums[i]);\n    }\n    return\
    \ min;\n}\n", "    let minSum = Number.MAX_SAFE_INTEGER;\n    let currentSum =\
    \ 0;\n    for (let i = 0; i < nums.length; i++){\n        if (nums[i] !== undefined){\n\
    \            currentSum += nums[i];\n            minSum = Math.min(currentSum,\
    \ minSum);\n        }\n    }\n    return minSum;\n}\n", "    return Math.min.apply(Math,\
    \ nums);\n}\n", "    if(nums.length===0) return 0;\n    if(nums.length===1) return\
    \ nums[0];\n    let sum = nums[0];\n    for(let i=1;i<nums.length;i++){\n    \
    \    sum = sum + nums[i];\n    }\n    return sum;\n}\n", "    let sum = 0;\n \
    \   let minSum = Number.MAX_SAFE_INTEGER;\n    for(let i = nums.length-1; i >=\
    \ 0; i--){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\n", "\tlet sum = 0;\n\tlet min\
    \ = Number.MAX_VALUE;\n\tfor(let num of nums){\n\t\tsum += num;\n\t\tif(sum <\
    \ min){\n\t\t\tmin = sum;\n\t\t}\n\t}\n\treturn min;\n}\n", "    var minNum =\
    \ nums[0];\n    var minSum = nums[0];\n    for(var i = 1; i < nums.length; i++){\n\
    \        if(nums[i] === nums[i - 1]){\n            minNum = nums[i];\n       \
    \     minSum = minSum + nums[i];\n        }\n        else if(minNum > nums[i]){\n\
    \            minNum = nums[i];\n            minSum = nums[i];\n        }\n   \
    \     else{\n            minSum = minSum + nums[i];\n        }\n    }\n    return\
    \ minSum;\n}\n</code>\n<|/ a dscore=0 tags=algorithm |>\n<| a tags=algorithm dscore=0\
    \ |>\nThe solution using javascript - \n<code>\nvar a = [0, 3, 9, 10, 1, 3, 8];\n\
    \nvar sum = a.sort(function(a, b) {\n    return a - b;\n}).reduce(function (prev,\
    \ cur, i, arr) {\n    return cur > prev ? cur : prev;\n});", "  if(nums.length==0){\n\
    \    return 0\n  }\n  let minSum=nums[0];\n  let minIndex=nums[0];\n  for (let\
    \ i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum + nums[i], nums[minIndex]);\n\
    \    minIndex = i;\n  }\n  return minSum;\n}\n", "    let total = 0; \n    for(const\
    \ num of nums){\n        if(num > 0){\n            total += num;\n        }\n\
    \    }\n    return total;\n}\n", "    //Write your code here\n    let minimumSum\
    \ = -Infinity\n    let subArraySum = 0\n    for (let i=0;i<nums.length;i++){\n\
    \        subArraySum += nums[i]\n        if (subArraySum<minimumSum){\n      \
    \      minimumSum = subArraySum\n        }\n    }\n    return minimumSum\n}",
  "    \n    //Use a temporary array to store the running min sum.\n    var minSum\
    \ = nums[0];\n    for (var i = 1; i < nums.length; i++){\n        minSum = Math.min(minSum\
    \ + nums[i], nums[i]);\n    }\n\n    return minSum;\n}\n", "    let minSum = nums[0];\n\
    \    let minArray = nums;\n    for (let i = 1; i < nums.length; i++){\n      \
    \  minSum = minSum + nums[i];\n        if(minSum < minArray[minArray.length -\
    \ 1]){\n            minArray = nums.slice(0, i);\n        }\n    }\n    return\
    \ minArray;\n}\n</code>\n<|/ a |>\n<| a dscore=2 |>\nI made an optimisation in\
    \ my code where I took the min and sum of the array at every step. Then I subtracted\
    \ the sum of the previous step from the sum of the current step. This process\
    \ stopped iterating when the current sum was smaller than the previous.\n<code>",
  "    var min = 0;\n    for(var i = 0; i < nums.length; i++){\n        min = Math.min(nums[i],\
    \ min + nums[i]);\n    }\n    return min;\n}", "    //write your code here\n \
    \   if(nums == null || nums.length == 0){\n        return 0;\n    }\n    var sum\
    \ = 0;\n    var start = 0;\n    var end = nums.length - 1;\n    while(start <\
    \ end){\n        var sum = nums[start] + nums[end] + sum;\n        start += 1;\n\
    \        end -= 1;\n    }\n    return sum;\n}", "  var min=Number.POSITIVE_INFINITY;\n\
    \  for(var i = 0; i < nums.length; i++){\n    var current = nums[i];\n    if(current\
    \ > 0){\n      for(var j = i; j < nums.length; j++){\n        var newSum = current\
    \ + nums[j];\n        if(newSum < min){\n          min = newSum;\n        }\n\
    \      }\n    }\n  }\n  return min;\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\n#include\
    \ <stdio.h>\n\nint main()\n{\n    int sum = 0;\n    int arr[] = {4, 2, 1, 6, 3,\
    \ 7, 5};\n\n    for(int i = 0; i < 6; i++)\n    {\n        sum += arr[i];\n  \
    \  }\n\n    printf(\"%d\\n\", sum);\n}\n</code>\n<|/ a tags=algorithm,c,arrays\
    \ dscore=3 |>\n<| c |>\nWhat do you mean by that? Why would you want the loop\
    \ to start at 6? Why would you need a counter?\n<|/ c |>\n<| c |>\ni had written\
    \ this before this was posted but got distracted and was just gonna update my\
    \ answer with it. :)\n<|/ c |>\n<| c |>\nNo, my bad, you're absolutely right.\
    \ Didn't pay attention to that part. Still this answer doesn't explain the why,\
    \ why the counter was needed, why you chose `6` for the array size, etc.\n<|/\
    \ c |>\n<| a |>\nThis question is similar to find sum of a subarray in a given\
    \ array but with slight differences. So I decided to share my solution.\nThe code\
    \ has complexity O(n). \n<code>", "  return nums.reduce((acc, cur) => acc < 0\
    \ || cur > 0 ? Math.max(acc, cur) : acc, 0);\n}\n", "    for(let i=0;i<nums.length;i++){\n\
    \        if(nums[i] <= 0) return 0;\n    }\n    for(let i=0;i<nums.length;i++){\n\
    \        if(nums[i]>nums[0]){\n            for(let j=i;j<nums.length;j++){\n \
    \               if(nums[j]>nums[i]){\n                    let min = Math.min(nums[i],nums[j]);\n\
    \                    nums[i] -= min;\n                    nums[j] -= min;\n  \
    \              }\n            }\n        }\n    }\n    return nums[0];\n}", " \
    \   var min = Number.POSITIVE_INFINITY;\n    var start = 0;\n    var end = nums.length-1;\n\
    \    var sum = 0;\n    while(start <= end){\n        sum = nums[start]+nums[end];\n\
    \        if(sum < min){\n            min = sum;\n            start = start+1+nums.length;\n\
    \        }\n        else if(sum == min){\n            start = start+1;\n     \
    \   }\n        else if(sum > min){\n            end = end-1;\n        }\n    \
    \    else{\n            break;\n        }\n    }\n    return min;\n}\n", "  nums.sort(function(a,\
    \ b){\n    return a - b;\n  })\n\n  var min = nums[0];\n  var max = nums[0];\n\
    \  for(var i = 1; i < nums.length; i++){\n    if(nums[i] > max){\n      max =\
    \ nums[i];\n    }else if(nums[i] < min){\n      min = nums[i];\n    }\n  }\n \
    \ return min;\n}\n", "    var min = Infinity;\n    var minSum = 0;\n    var numsLen\
    \ = nums.length;\n    for(var i = 0; i < numsLen; i++){\n        for(var j = i\
    \ + 1; j < numsLen; j++){\n            var currSum = nums[i] + nums[j];\n    \
    \        if(currSum > min && currSum < minSum){\n                min = currSum;\n\
    \                minSum = nums[i] + nums[j];\n            }\n        }\n    }\n\
    \    return minSum;\n}\n", "  var sum = 0;\n  for (var i = 0; i < nums.length;\
    \ i++){\n    if (nums[i] != 0) sum = sum + nums[i];\n  }\n  return sum;\n}\n",
  "  return nums.reduce(function(sum, num) {\n    return sum + Math.min(num, 0);\n\
    \  }, 0);\n}\n", "    //Initializing the min and max values of array as -\u221E\
    \ and +\u221E.\n    var min = Infinity,\n        max = -Infinity;\n    for (var\
    \ i of nums){\n        if(min > i){\n            min = i;\n        }\n       \
    \ if(max < i){\n            max = i;\n        }\n    }\n    //Finding the minimum\
    \ sum of sub-array using binary search.\n    function binarySearch(arr, low, high,\
    \ target){\n        var mid;\n        while(low <= high){\n            mid = low\
    \ + ((high - low) / 2);\n            if(arr[mid] < target){\n                low\
    \ = mid + 1;\n            }else{\n                if(arr[mid] > target){\n   \
    \                 high = mid - 1;\n                }else{\n                  \
    \  //Found the target so return it.\n                    return mid;\n       \
    \         }\n            }\n        }\n        //If element not found then return\
    \ -(low + high).\n        return -(low + high);\n    }\n    var index1 = binarySearch(nums,\
    \ 0, nums.length-1, min);\n    var index2 = binarySearch(nums, 0, nums.length-1,\
    \ max);\n    var sum1 = index1 + 1;\n    var sum2 = index2 + 1;\n    while(sum1\
    \ <= sum2){\n        if(sum1 > sum2){\n            sum1 += nums.length;\n    \
    \    }else{\n            sum2 += nums.length;\n        }\n    }\n    return sum1;\n\
    }\n", "\t//Initialize sum\n\tvar min = Infinity;\n\t//Initialize the array of\
    \ indexes which have min and sum for its index\n\tvar indexArr = [];\n\t\n\t//Loop\
    \ through each of the nums\n\tnums.forEach(function(n){\n\t\t\n\t\t//If sum does\
    \ not equal current min then reset sum and min\n\t\tif(n !== 0 && n !== Infinity){\n\
    \t\t\tmin = Infinity;\n\t\t\tindexArr = [];\n\t\t}\n\t\t//If sum is less than\
    \ current min and current min is less than 0 then set min to current min\n\t\t\
    if(n < min && n <= 0){\n\t\t\tmin = n;\n\t\t}\n\t\t//If sum of current nums is\
    \ the same as current min then skip to next num\n\t\tif(n === min){\n\t\t\treturn;\n\
    \t\t}\n\t\t//Push the index to array if sum is greater than current min\n\t\t\
    if(n + min > 0){\n\t\t\tindexArr.push(n);\n\t\t}\n\t\t//Add the current num to\
    \ sum\n\t\tmin = n + min;\n\t});\n\t//Return the minimum sum\n\treturn min;\n\
    }\n", "    nums.sort();\n    for(var i=0;i<nums.length-1;i++){\n        for(var\
    \ j=i+1;j<nums.length;j++){\n            if(nums[i]+nums[j] < nums[j]){\n    \
    \            var temp = nums[i];\n                nums[i] = nums[j];\n       \
    \         nums[j] = temp;\n            }\n        }\n    }\n    return nums[0];\n\
    }\n", "    let sum = 0;\n    let min = Number.MAX_VALUE;\n    for(let i = 0; i<\
    \ nums.length; i++){\n        if(nums[i] < 0){\n            min = sum;\n     \
    \       break;\n        }\n        sum += nums[i];\n        if(sum < min){\n \
    \           min = sum;\n        }\n    }\n    return min;\n}\n", "    return minSubArraySumRec(nums,\
    \ 0, 0);\n}\n", "    //Initialize the minimum sum with the first number\n    var\
    \ minSum = nums[0];\n    //Search for the minimum sum\n    for(var i=1; i<nums.length;\
    \ i++){\n        if(nums[i]+minSum < 0){\n            minSum = nums[i]+minSum;\n\
    \        }\n    }\n    return minSum;\n}\n</code>\n<|/ a tags=javascript dscore=1\
    \ |>\n<| c |>\n`[10, 20, 30].sort((a,b) => a-b)[0]`\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "\t//base case\n\tif(nums.length===0){\n\t\treturn 0;\n\t}\n\tvar min_sum\
    \ = nums[0];\n\tvar first_element = 0;\n\tvar current_sum = 0;\n\tfor(var i=1;i<nums.length;i++){\n\
    \t\t//if the current element is not in the previous sum, add it to the sum\n\t\
    \tif(!isInPreviousSum(current_sum,nums[i])){\n\t\t\tcurrent_sum += nums[i];\n\t\
    \t\t//if we found a shorter sum and found a better one, replace it\n\t\t\tif(current_sum<min_sum){\n\
    \t\t\t\tmin_sum = current_sum;\n\t\t\t\tfirst_element = i;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn min_sum;\n}\n", "    if(nums.some(el => isNaN(el))) return null;\n\
    \    \n    let min = Number.MAX_VALUE;\n    let sum = 0;\n    let num;\n    \n\
    \    for(let i = 0; i < nums.length; i++){\n        num = nums[i];\n        sum\
    \ += num;\n        if(sum < min){\n            min = sum;\n        }\n    }\n\
    \    \n    return min;\n}\n", "    let subArray = [];\n    for(let num of nums){\n\
    \        subArray.push(num);\n    }\n    for(let i=0; i<subArray.length; i++){\n\
    \        let sum = 0;\n        for(let j=i; j<subArray.length; j++){\n       \
    \     sum += subArray[j];\n        }\n        for(let j=i+1; j<subArray.length;\
    \ j++){\n            sum -= subArray[j];\n        }\n        if(sum<0){\n    \
    \        return sum;\n        }\n    }\n    return Number.MAX_VALUE;\n}\n</code>\n\
    <|/ a tags=arrays,algorithm,javascript dscore=1 |>\n<| a |>\nHere's an alternative\
    \ solution based on Binary Indexed Tree, which is an efficient data structure\
    \ for storing and querying ranges of keys in a sorted array. This solution uses\
    \ a recursive function which I tried to keep as simple as possible.\nThe idea\
    \ is that for each element in the sorted array, we need to calculate the sum of\
    \ the previous elements in the array (except the first one).\nThe below code first\
    \ takes the original array and creates a sorted array by splitting the original\
    \ array into consecutive ranges of consecutive integers.\nThen it creates an array\
    \ whose indexes correspond to the original array's numbers, starting from 1.\n\
    Then we loop through the original array and for each element, we find the sum\
    \ of the previous range's elements, which is what we need to use to find the minimum\
    \ in the array.\n<code>", "\tvar min = nums[0];\n\tfor(var i = 0; i< nums.length;i++){\n\
    \t\tfor(var j = 0; j< nums.length;j++){\n\t\t\tmin = Math.min(nums[i] + min);\n\
    \t\t}\n\t}\n\treturn min;\n}\n<|/ file ext=.js |>", "\tconst sum = nums.reduce(function(prev,\
    \ cur){\n\t\tprev = prev < cur ? prev : cur\n\t\treturn prev\n\t})\n\treturn nums[0]\
    \ + sum\n}\n", "\tlet min = Math.min.apply(null, nums);\n\tlet cur = 0;\n\tlet\
    \ sum = 0;\n\tfor(let i = 0; i < nums.length; i++){\n\t\tsum += nums[i];\n\t\t\
    if(sum < min && cur !== 0){\n\t\t\tmin = sum;\n\t\t}\n\t\tcur += nums[i];\n\t\
    }\n\treturn min;\n}\n", "\tvar minSum = nums[0];\n\tfor(var i = 1; i < nums.length;\
    \ i++){\n\t\tminSum = Math.min(minSum, nums[i] + nums[i - 1]);\n\t}\n\treturn\
    \ minSum;\n}\n", "    var sum = 0;\n    for(var i=0;i<nums.length;i++){\n    \
    \    if(nums[i] && nums[i] != 0){\n            sum += nums[i];\n        }\n  \
    \  }\n    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nI think you forgot to include\
    \ this in question. `sum` should be initialized with `nums[0]`\n<|/ c |>\n<| c\
    \ |>\nThank you for pointing that out\n<|/ c |>\n<| a |>\nHere is an approach\
    \ using functional approach using reduce and find\n<code>", "  nums = nums.sort();\n\
    \  var m = nums.reduce(function(prev, curr){\n    return prev + curr;\n  });\n\
    \  for(var i = 0; i<nums.length; i++){\n    m+=nums[i];\n    if(nums[i]<0){\n\
    \      m=Math.max(m, Math.abs(nums[i]));\n    }\n  }\n  return m;\n}\n", "   let\
    \ min = nums[0];\n   let max = nums[0];\n   for(let i=1; i<nums.length; i++){\n\
    \     min = Math.min(nums[i], min);\n     max = Math.max(nums[i], max);\n   }\n\
    \   return min;\n}\n", "    let minSum=Number.MAX_SAFE_INTEGER;\n    let minValue=Number.MAX_SAFE_INTEGER;\n\
    \    for (let i=0; i<nums.length; i++){\n        minValue=Math.min(minValue,nums[i]);\n\
    \        minSum=Math.min(minSum,minValue+nums[i]);\n    }\n    return minSum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "   var len = nums.length\n\
    \   var minSum = 0\n   var start\n   var sum\n   for(var i = 0; i< len; i++){\n\
    \       sum = 0\n       start = 0\n       while(start + 1 < len){\n          \
    \ sum += nums[start]\n           if(sum > minSum){\n               minSum = sum\n\
    \               start = start + 1\n           }\n           else {\n         \
    \      start++\n           }\n       }\n   }\n   return minSum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis does not work for a `minSubArraySum([-1, -2,\
    \ -3])` result of `-6` should be `2` not `1`.\n<|/ c |>\n<| c |>\nThe OP wants\
    \ the **minimum sum** not the **minimum difference**\n<|/ c |>\n<| c |>\n.R. Sorry\
    \ I misread the question and was thinking the OP wanted the sum, not the min.\
    \ My bad.\n<|/ c |>\n<| c |>\nI believe my algorithm is O(N) and thus should be\
    \ the accepted answer for this problem. Thank you!\n<|/ c |>\n<| c |>\nYes it\
    \ is. I believe it is also O(N)\n<|/ c |>\n<| a tags=arrays,algorithm,javascript\
    \ |>\nYou can achieve this with the array reduce method.\n<code>\nlet arr = [1,\
    \ 2, 3, 4];\n\nlet min = arr.reduce((sum, num) => {\n  let result = sum + num;\n\
    \  return result < min ? result : min;\n}, 0);\n</code>\nThe above method will\
    \ go through every item in the array and add it to the sum variable and compare\
    \ it to the minimum sum already stored.\n<|/ a dscore=1 |>\n<| a tags=arrays,algorithm,javascript\
    \ |>\nThis is an O(N) solution:\n\n<code>\nconst arr = [1, 2, 3, 4];\n\nlet min\
    \ = arr.reduce((acc, num) => {\n  let sum = 0;\n  while (arr.length > 0) {\n \
    \   sum += arr.pop();\n    if (sum > acc) return sum;\n  }\n  return acc;\n},\
    \ 0);\n", "    var minSum = nums[0];\n    for(var i=0; i<nums.length; i++){\n\
    \        if(minSum > nums[i]){\n            minSum = nums[i];\n        }\n   \
    \ }\n    return minSum;\n}\n", "    //The first element of minimumSum is always\
    \ 0\n    const minimumSum = 0;\n    for(let i = 1; i < nums.length; i++){\n  \
    \      minimumSum = Math.min(minimumSum + nums[i], minimumSum);\n    }\n    return\
    \ minimumSum;\n}", "\tvar sum = 0;\n\tfor(var i=0; i<nums.length; i++){\n\t\t\
    sum += nums[i];\n\t}\n\tfor(var i=0; i<nums.length; i++){\n\t\tif(nums[i] <= 0){\n\
    \t\t\tbreak;\n\t\t}\n\t\tsum += nums[i];\n\t}\n\treturn sum;\n}\n", "  let min\
    \ = Number.MAX_SAFE_INTEGER\n  for(let i = 0; i < nums.length; i++){\n    if(nums[i]\
    \ > 0){\n      if(nums[i] < min){\n        min = nums[i]\n      }\n    }\n  }\n\
    \  return min\n}", "  var len = nums.length\n  var min = Infinity\n  var sum =\
    \ 0\n  for(var i=0; i<len; i++){\n    sum += nums[i]\n    if(sum < min){\n   \
    \   min = sum\n    }\n  }\n  return min\n}\n</code>\nThe above function will return\
    \ the minimum sum, if it exists.\n<|/ a |>\n<| c |>\nWhat about `nums = [1, 2]`?\n\
    <|/ c |>\n<| c |>\nUpdated the answer. Thanks for pointing out. :)\n<|/ c |>\n\
    <| c |>\nI like this solution but I think it's worth noticing that (a) it returns\
    \ the *minimum* sum, not the *minimum* sum of the sums, so if your example is\
    \ correct, `minSubArraySum([1, 2])` would be `-3`, not `-6`; and (b) it's less\
    \ efficient (O(n^2) instead of O(n)).\n<|/ c |>\n<| c |>\nYou're right. I just\
    \ updated the answer. Thanks for pointing it out. :)\n<|/ c |>\n<| c |>\nThe complexity\
    \ is still O(n^2) but since it is implemented as a function it is \"memoised\"\
    \ (in some sense). A \"memoised\" function remembers what the answers are for\
    \ the subarrays it has already visited (which saves computation in the event that\
    \ you've already seen the solution).\n<|/ c |>\n<| a |>\nI think the problem is\
    \ with the logic of the solution. \nLook at the example below and try to understand\
    \ how this solution works.\n\n<code>\nlet inputArr = [5,2,4,6,3,8];", "    let\
    \ sum = 0;\n    nums.forEach((num) => {\n        sum += num;\n    })\n    let\
    \ min = sum - Math.min(...nums);\n    return min;\n}\n", "    let minSum = Number.MAX_VALUE\n\
    \    let minIndex = -1\n    nums.forEach((num, index) => {\n        if (num >\
    \ 0) {\n            let sum = sumOfTwo(num, nums[index])\n            if(sum <\
    \ minSum) {\n                minSum = sum\n                minIndex = index\n\
    \            }\n        }\n    })\n    return minIndex\n}\n", "    let sum = 0;\n\
    \    for (let num of nums) {\n        sum += num;\n    }\n    for (let num of\
    \ nums) {\n        while (sum <= num) {\n            sum += num;\n        }\n\
    \    }\n    return sum;\n}\n", "    let minSum = Infinity;\n    let minIndex =\
    \ -1;\n    for (let i = 0; i < nums.length; i++) {\n        let sum = 0;\n   \
    \     for (let j = 0; j < nums.length; j++) {\n            sum += nums[j];\n \
    \           if (sum < minSum) {\n                minSum = sum;\n             \
    \   minIndex = j;\n            }\n        }\n    }\n    return minSum;\n}", " \
    \   var n = nums.length;\n    var minSum = Number.MAX_SAFE_INTEGER;\n    for(var\
    \ i=0; i<n; i++){\n        var subSum = 0;\n        for(var j=0; j<n; j++){\n\
    \            if(i != j){\n                subSum += nums[j];\n            }\n\
    \        }\n        minSum = Math.min(subSum, minSum);\n    }\n    return minSum;\n\
    }\nexports.minSubArraySum = minSubArraySum;\n", "    // The answer is equal to\
    \ the first element of the array.\n    var minSum = nums[0];\n\n    // Calculate\
    \ the first sum of non-empty sub-array.\n    // If there is only one element in\
    \ the array, then set minSum to that element.\n    // Otherwise, iterate the rest\
    \ of sub-array starting from nums[nums.length - 1].\n    for(var i = 1; i < nums.length;\
    \ i++){\n        if(nums[i] && nums[i] <= nums[i - 1]){\n            minSum =\
    \ nums[i];\n        }\n    }\n\n    // Iterate the rest of sub-array starting\
    \ from the end.\n    // If there are more elements in the array, iterate from\
    \ the last element of the array.\n    for(var i = nums.length - 2; i > 0; i--){\n\
    \        if(nums[i] && nums[i] <= nums[i + 1]){\n            minSum = nums[i]\
    \ + minSum;\n        }\n    }\n\n    return minSum;\n}\n", "  var minSoFar = nums[0];\n\
    \  for(var i = 1; i < nums.length; i++){\n    minSoFar += nums[i];\n    if(minSoFar\
    \ < 0){\n      minSoFar = nums[i];\n    }\n  }\n  return minSoFar;\n}\n", "  let\
    \ min = Number.MAX_SAFE_INTEGER\n  for(let i = 0; i < nums.length; i++){\n   \
    \ let currentSum = 0\n    for(let j = 0; j < i; j++){\n      currentSum += nums[j]\n\
    \    }\n    min = Math.min(min, currentSum)\n  }\n  return min\n}\n", "    //\
    \ Write your code here\n    nums = nums.sort((a,b)=>a-b);\n    let sum=nums[0];\n\
    \    let result=1;\n    for(let i=1;i<nums.length;i++){\n        sum+=nums[i];\n\
    \        if(sum<0){\n            sum*=-1;\n            result*=-1;\n        }\n\
    \        if(sum==0){\n            result+=1;\n            sum=nums[i];\n     \
    \   }\n    }\n    return result*nums.length;\n}", "    let result=Number.MAX_SAFE_INTEGER;\n\
    \    nums.forEach(element => {\n        element>0 ? result=element+result:result\n\
    \    })\n    return result\n}\n", "\tlet min = Number.MAX_SAFE_INTEGER;\n\tfor(let\
    \ num of nums){\n\t\tfor(let i = num; i < 0; i--){\n\t\t\tlet temp = num - nums[i];\n\
    \t\t\tmin = Math.min(min, temp);\n\t\t}\n\t}\n\treturn min;\n}\n", "  //first\
    \ sort the array ascending\n  let newArray = [];\n  newArray = nums.sort((a,b)=>{return\
    \ a - b});\n  let min = newArray[0]; //find min number\n  for (let i = 1; i <\
    \ newArray.length; i++){\n    if (newArray[i] > min){\n      min = newArray[i];\n\
    \    }\n  }\n  let subArray = [];\n  let sum = 0;\n  for (let i = 0; i < newArray.length;\
    \ i++){\n    if (newArray[i] === min){\n      subArray.push(newArray[i]);\n  \
    \    sum += newArray[i];\n    }\n  }\n  return sum;\n}\n", "  let sum = 0;\n \
    \ let subArraySums = [];\n  for(let num of nums){\n    sum += num;\n    for(let\
    \ i=0;i<nums.length && nums[i] != num;i++){\n      sum -= nums[i];\n    }\n  \
    \  if(sum < 0){\n      sum = 0;\n    }\n    if(!subArraySums.includes(sum)){\n\
    \      subArraySums.push(sum);\n    }\n  }\n  return subArraySums.indexOf(Math.min.apply(null,\
    \ subArraySums)) + 1;\n}\n", "\tlet currentMin = nums[0]\n\tfor(let i = 0; i <\
    \ nums.length; i++){\n\t\tif(nums[i] === currentMin){\n\t\t\tcontinue;\n\t\t}\n\
    \t\tif(nums[i] < currentMin){\n\t\t\tcurrentMin = nums[i]\n\t\t}\n\t}\n\treturn\
    \ currentMin\n}\n", "  var total = 0;\n  var minSum = Infinity;\n\n  for(var i=0;\
    \ i<nums.length; i++){\n    var currentSum = total+nums[i];\n    if(currentSum\
    \ < minSum){\n      minSum = currentSum;\n    }\n    total += nums[i];\n  }\n\n\
    \  return minSum;\n}\n</code></pre>\n        </article>\n    </section>\n\n\n\n\
    \n</div>\n\n<nav>\n    <h2><a href=\"index.html\">Home</a></h2><h3>Modules</h3><ul><li><a\
    \ href=\"module-helpers.html\">helpers</a><ul class='methods'><li data-type='method'><a\
    \ href=\"module-helpers.html#~incr\">incr</a></li><li data-type='method'><a href=\"\
    module-helpers.html#~max\">max</a></li><li data-type='method'><a href=\"module-helpers.html#~min\"\
    >min</a></li><li data-type='method'><a href=\"module-helpers.html#~random\">random</a></li><li\
    \ data-type='method'><a href=\"module-helpers.html#~sum\">sum</a></li></ul></li><li><a\
    \ href=\"module-processors.html\">processors</a><ul class='methods'><li data-type='method'><a\
    \ href=\"module-processors.html#~calculate\">calculate</a></li><li data-type='method'><a\
    \ href=\"module-processors.html#~combine\">combine</a></li><li data-type='method'><a\
    \ href=\"module-processors.html#~filter\">filter</a></li><li data-type='method'><a\
    \ href=\"module-processors.html#~map\">map</a></li><li data-type='method'><a href=\"\
    module-processors.html#~nest\">nest</a></li><li data-type='method'><a href=\"\
    module-processors.html#~pick\">pick</a></li><li data-type='method'><a href=\"\
    module-processors.html#~transform\">transform</a></li></ul></li></ul><h3>Global</h3><ul><li><a\
    \ href=\"global.html#validateConfig\">validateConfig</a></li></ul>\n</nav>\n\n\
    <br class=\"clear\">\n\n<footer>\n    Documentation generated by <a href=\"https://github.com/jsdoc3/jsdoc\"\
    >JSDoc 3.5.5</a> on Wed Dec 19 2018 14:56:00 GMT+0100 (Central Europe Standard\
    \ Time)\n</footer>\n\n<script> prettyPrint(); </script>\n<script src=\"scripts/linenumber.js\"\
    > </script>\n</body>\n</html>\n\n<|/ file dstars=0 ext=.html |><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>\n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n              <li class=\"active\">\n                <a\
    \ href=\"globals.html\">Globals</a>\n              </li>\n            \n     \
    \     </ul>\n        \n      </li>\n    \n  </ul>\n\n  \n  <hr/>\n</div>\n   \
    \       <div role=\"main\" class=\"document\" itemscope=\"itemscope\" itemtype=\"\
    http://schema.org/Article\">\n           <div itemprop=\"articleBody\">\n    \
    \        \n  <h1>Module <code>globals</code></h1>\n  \n", "    var min = Number.MAX_VALUE;\n\
    \    for(var i =0; i < nums.length; i++){\n        for(var j = i + 1; j < nums.length;\
    \ j++){\n            if(nums[i] + nums[j] < min){\n                min = nums[i]\
    \ + nums[j];\n            }\n        }\n    }\n    return min;\n}\n", "    var\
    \ min = Math.max.apply(null, nums);\n    var minSum = nums.reduce(function(sum,\
    \ cur){\n        return Math.min(sum + cur, min);\n    }, 0);\n    return minSum;\n\
    }\n", "\tlet min = Number.MAX_SAFE_INTEGER;\n\tnums.map( num =>{\n\t\tif( num\
    \ < 0 ){\n\t\t\tnum = Math.abs ( num )\n\t\t}\n\t\tmin = Math.min ( min, num )\n\
    \t});\n\treturn min;\n}\n\n", "  nums = nums.sort(function(a,b){return a-b});\n\
    \  var sum = 0;\n  var smallest = nums[0];\n  for (var i = 1; i < nums.length;\
    \ i++){\n    if (nums[i] > smallest){\n      sum = sum + smallest;\n      smallest\
    \ = nums[i];\n    }\n  }\n  return sum;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    <code>", "    var minSum=nums[0];\n    for(var i=1;i<nums.length;i++){\n     \
    \   minSum=Math.min(minSum,nums[i]);\n    }\n    return minSum;\n}\n", "\t//Get\
    \ the length of the input array and set it to zero\n\tvar len = nums.length;\n\
    \tvar minSum = 0;\n\t//Set the start index to zero\n\tvar start = 0;\n\t//Iterate\
    \ until the end of the array has been reached\n\twhile(start < len){\n\t\t//Get\
    \ the current starting index, add it to the current sum\n\t\tvar sum = 0;\n\t\t\
    for(var i = start; i < len; i++){\n\t\t\tsum += nums[i];\n\t\t}\n\t\t//If this\
    \ sum has the least value so far, keep track of it\n\t\tif(sum < minSum){\n\t\t\
    \tminSum = sum;\n\t\t}\n\t\t//Add the starting index value to the current sum\n\
    \t\tsum += nums[start];\n\t\t//If this sum has the least value so far, keep track\
    \ of it\n\t\tif(sum < minSum){\n\t\t\tminSum = sum;\n\t\t}\n\t\t//Add one to the\
    \ index\n\t\tstart++;\n\t}\n\t//Return the minimum sum\n\treturn minSum;\n}\n",
  "    let minsum = -Infinity;\n    for (let i = 0; i < nums.length; i++){\n     \
    \   minsum = Math.max(minsum, sumSubArray(nums, i));\n    }\n    return minsum;\n\
    }\n", "  if (nums.length === 0) return 0\n  let sum = nums[0]\n  for (let i =\
    \ 1; i < nums.length; i++){\n    sum += nums[i]\n  }\n  return sum\n}\n", "  nums\
    \ = nums.sort(function(a, b){return a - b});\n  var sum = 0;\n  var min;\n  var\
    \ j;\n  var k;\n  var sum2 = 1;\n  for(i = 0, j = nums.length - 1; i < nums.length;\
    \ i++, j--){\n    min = sum2;\n    sum2 = 0;\n    for(k = i; k < j; k++){\n  \
    \    sum2 += nums[k];\n    }\n    if(sum2 < min){\n      min = sum2;\n    }\n\
    \  }\n  return min;\n}\n", "  var min=Number.MAX_SAFE_INTEGER;\n  var sum=0;\n\
    \  for (var i=0;i<nums.length;i++){\n    sum=sum+nums[i];\n    if (sum<min){\n\
    \      min=sum;\n    }\n  }\n  return min;\n}\n", "  if(nums.length==0) return\
    \ 0;\n  var min = Number.POSITIVE_INFINITY;\n  var index = nums.length-1;\n  for(var\
    \ i=0;i<nums.length;i++){\n    for(var j=0;j<index;j++){\n      if(nums[i] > nums[j]){\n\
    \        index=j;\n      }\n    }\n    if(nums[i]<min){\n      min=nums[i];\n\
    \    }\n    index--;\n  }\n  return min;\n}\n", "    let sortedArray = nums.slice().sort((a,b)=>{return\
    \ b-a})\n    let minSum = sortedArray.reduce((a,b)=>{return a + b}, 0)\n    for\
    \ (let i = 0; i < nums.length; i++){\n        let nextSum = nums[i] - sortedArray[i]\n\
    \        minSum = Math.min(minSum, nextSum)\n    }\n    return minSum\n}\n", " \
    \   var min = Infinity;\n    for(var i in nums){\n        min = Math.min(min,\
    \ nums[i]);\n    }\n    return min;\n}\n</code>\n<|/ a |>\n<| c |>\nThank you\
    \ for sharing your solution. I understand now that the problem was to find the\
    \ minimum of a sum of sub-array. \nIt would be great if you could give an explanation\
    \ of how your code works because I am a beginner in javascript programming and\
    \ I couldn't understand your code.\n<|/ c |>\n<| c |>\n- I've added some comments\
    \ above the code - hope it helps!\n<|/ c |>\n<| a tags=javascript,arrays |>\n\
    <code>\nvar myArray = [1, 2, 3, 4, 5]; // array\nvar sum = 0;", "    let minSum\
    \ = Number.MAX_VALUE;\n    nums.forEach(num => {\n        const sum = num + nums[nums.length\
    \ - 1];\n        if(sum < minSum){\n            minSum = sum;\n        }\n   \
    \ });\n    return minSum;\n}\n", "    let min = Number.MAX_SAFE_INTEGER;\n   \
    \ for (let i = 0; i < nums.length; i++) {\n        if (nums[i] < 0){\n       \
    \     min = nums[i]\n        } else {\n            let newMin = nums[i] + min;\n\
    \            min = Math.min(newMin, min);\n        }\n    }\n    return min;\n\
    }\n", "  return nums.reduce(function(sum, item){\n    return Math.min(sum + item,\
    \ nums.length);\n  }, 0);\n}\n</code>\n<|/ a |>\n<| c |>\nThe question asked for\
    \ a solution in O(n) time, not O(n\xB2).\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "    var min = Number.POSITIVE_INFINITY;\n    var sum = 0;\n    var lastSum = 0;\n\
    \    for(var i = 0; i < nums.length; i++){\n        var currentSum = sum + nums[i];\n\
    \        if(currentSum <= min){\n            min = currentSum;\n            lastSum\
    \ = sum + nums[i];\n        }\n        sum += nums[i];\n    }\n    return lastSum;\n\
    }\n", "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    for(let\
    \ i = 0; i < nums.length; i++){\n        if(nums[i] < 0){\n            min = -nums[i];\n\
    \            minIndex = i;\n        }else{\n            min = Math.min(min, nums[i]);\n\
    \        }\n    }\n    return min;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nThe below solution would find out the minimum of sub array in O(n) time.\
    \ The idea is to use two pointers - one to find the minimum in the first index\
    \ and another one to find the minimum in the last index of the sub array in O(1)\
    \ time. \n<code>", "\tvar minSum = Number.POSITIVE_INFINITY;\n\tvar minSumSubArraySum\
    \ = 0;\n\n\tnums.forEach(function(num){\n\t\tvar currentSumSubArraySum = nums.slice(0).reduce(function(sum,\
    \ subArray){\n\t\t\treturn sum + subArray;\n\t\t}, 0);\n\t\tif(currentSumSubArraySum\
    \ < minSum){\n\t\t\tminSum = currentSumSubArraySum;\n\t\t\tminSumSubArraySum =\
    \ num;\n\t\t}\n\t});\n\n\treturn minSumSubArraySum;\n}\n", "    // write your\
    \ code in JavaScript (Node.js 8.9.4)\n    let smallest = 0;\n    let index = 0;\n\
    \    let temp = nums[0];\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i]\
    \ < temp){\n            smallest = nums[i];\n            index = i;\n        \
    \    temp = nums[i];\n        }\n    }\n    let index = index;\n    for(let i\
    \ = index + 1; i < nums.length; i++){\n        if(nums[i] > temp){\n         \
    \   smallest = nums[i];\n            index = i;\n            temp = nums[i];\n\
    \        }\n    }\n    return smallest + nums[index];\n}\n", "  let minSum = nums[0];\n\
    \  for (let i = 1; i < nums.length; i++){\n    minSum = Math.min(minSum, nums[i]);\n\
    \  }\n  return minSum;\n}\n", "    \n    //Create a set of the nums \n    var\
    \ numSet = new Set(nums);\n    var minSum = nums[0];\n    \n    //Loop through\
    \ the nums, find the minSum value\n    for(var i = 1; i < nums.length; i++){\n\
    \        if(nums[i-1] < nums[i]){\n            minSum = nums[i-1];\n        }\n\
    \    }\n    \n    return minSum;\n}</code>\n<|/ a |>\n<| c |>\nThis answer would\
    \ be better if you added some explanation.\n<|/ c |>\n<| c |>\nI don't really\
    \ understand what you mean. Could you elaborate?\n<|/ c |>\n<| c |>\nI posted\
    \ an answer below explaining your code.  You can comment on that answer to say\
    \ thanks.\n<|/ c |>\n<| a dscore=0 tags=javascript,arrays,algorithm |>\nTry this.\
    \ It will work for all cases.\n\n<code>\nvar nums = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10];\n",
  "  var min = Infinity;\n  for(var i = 0; i < nums.length; i++){\n    for(var j =\
    \ i+1; j < nums.length; j++){\n      var sum = 0;\n      for(var k = 0; k < i;\
    \ k++){\n        sum += nums[k];\n      }\n      sum += nums[j];\n      min =\
    \ Math.min(min, sum);\n    }\n  }\n  return min;\n}\n", "    var min = Number.POSITIVE_INFINITY;\n\
    \    for(var i=0;i<nums.length;i++){\n        min = Math.min(min,-nums[i]);\n\
    \    }\n    return min;\n}\n", "    \n    var min=Number.MAX_SAFE_INTEGER;\n \
    \   \n    nums.forEach(function(n){\n        \n        if( n>0 ){\n        \n\
    \            if( n < min )\n                min=n;\n            \n           \
    \ if( min == Number.MAX_SAFE_INTEGER )\n                min = Math.min(min, Math.abs(n));\n\
    \            \n            if( min != Number.MAX_SAFE_INTEGER && min > Math.abs(n)\
    \ )\n                min = -(Math.abs(n));\n        \n        }\n        \n  \
    \  });\n    \n    return min;\n    \n}\n</code>\n<|/ a dscore=3 |>\n<| a |>\n\
    Here is a solution I came up with that returns the minimum sum of the first N\
    \ numbers. The approach is very similar to Ramy's answer, except instead of checking\
    \ for the min sum at each iteration, we only need to keep track of the min sum\
    \ at the end. This solution avoids the problem of repeated comparisons (like Ramy's\
    \ solution).\n<code>", "    const result = [];\n    let minsum = 0;\n    nums.forEach((num)=>{\n\
    \        minsum = num < minsum ? num : minsum;\n        result.push(num);\n  \
    \  })\n    return minsum;\n}\n", "  return Math.min(...nums.filter(n => n >= 0));\n\
    }\n", "    return Math.min.apply(Math, nums);\n}\n", "    let minArray = [];\n\
    \    let sum = 0;\n    for (let i = 0; i < nums.length; i++){\n        sum +=\
    \ nums[i];\n        if (minArray.length === 0){\n            minArray[0] = sum;\n\
    \            continue;\n        }\n        let maxIndex = 0;\n        let maxSum\
    \ = sum;\n        for (let j = 1; j < minArray.length; j++){\n            if (sum\
    \ - minArray[j] <= maxSum){\n                maxIndex = j;\n                maxSum\
    \ = sum - minArray[j];\n            }\n        }\n        minArray[maxIndex] +=\
    \ 1;\n        sum -= minArray[maxIndex];\n    }\n    return minArray[0];\n}\n",
  "  var sum = 0;\n  for(var i=0; i<nums.length; i++){\n    sum += nums[i];\n  }\n\
    \  return sum;\n}", "    //base case\n    if(nums.length <= 1)\n        return\
    \ nums[0];\n\n    //reduce the array by taking the minimum subarray sum\n    //from\
    \ the sub arrays\n    var min = Math.min(nums[0], minSubArraySum(nums.slice(1)));\n\
    \    for(var i = 1; i < nums.length; i++){\n        var sum = nums[i] + min;\n\
    \        min = Math.min(nums[i], sum);\n    }\n\n    return min;\n}\n", "    return\
    \ Math.min.apply(Math, nums);\n}\n</code>\n<|/ a dscore=1 tags=arrays,algorithm,sum\
    \ |>\n<| a dscore=1 |>\nThe naive approach is to do binary search for the sum\
    \ of the input array. This will run in O(log n) time. I will also mention that\
    \ it might not be the best approach for a homework problem.\n<|/ a tags=arrays,algorithm,sum\
    \ |>\n<| a dscore=0 |>\nThis problem can be solved very efficiently using divide\
    \ and conquer algorithm. Below is a pseudocode for the same -\n<code>", "    var\
    \ min = Number.MAX_SAFE_INTEGER;\n    var min_index = 0;\n    \n    for(var i=0;i<nums.length-1;i++){\n\
    \        var sum = nums[i] + nums[i+1];\n        if(sum<min){\n            min\
    \ = sum;\n            min_index = i;\n        }\n    }\n    return nums[min_index];\n\
    }\n", "    // Sort the array so we can find the min sub array\n    nums.sort(function(a,b){\n\
    \        return a-b;\n    });\n\n    // Find the min sum in an array, if the sum\
    \ is negative it'll return\n    // the minimum sum of the array \n    let minSum\
    \ = nums[0] - nums[0];\n    let minSubArray = [];\n\n    // Loop through all the\
    \ array items and update our min sum and min\n    // sub array\n    nums.forEach(n\
    \ => {\n        let sum = 0;\n\n        // Loop through all the array items to\
    \ find the minimum sub array\n        // to add the item to\n        for (let\
    \ i = 0; i < nums.length; i++) {\n            sum += nums[i];\n\n            //\
    \ If our current sum is smaller then our min sum then update it\n            if\
    \ (sum < minSum){\n                minSum = sum;\n                minSubArray\
    \ = nums.slice(i, i + 1);\n            }\n        }\n    })\n\n    // Return the\
    \ minimum sub array\n    return minSubArray;\n}\n", "  return nums.reduce((minSoFar,\
    \ next) => {\n    const minToAdd = Math.min(minSoFar, next);\n    return minToAdd\
    \ + minSubArraySum(nums.filter(n => n !== next));\n  }, Number.MAX_VALUE);\n}\n",
  "    var sum = 0;\n    for(var i = 0; i < nums.length; i++){\n        sum = sum\
    \ + nums[i];\n    }\n    return sum;\n}\n</code>\nI believe this is the fastest\
    \ possible solution.\n<|/ a |>\n<| a dscore=0 |>\nA possible solution is this\
    \ one:\n<code>", "  let sum = 0;\n  for (let i = 0; i < nums.length; i++){\n \
    \   if(nums[i] > 0) sum += nums[i];\n  }\n  return sum;\n}\n", "  var minSum =\
    \ Number.MAX_SAFE_INTEGER;\n  var minIndex = 0;\n\n  // Loop over each element\
    \ in the array\n  for(var i in nums){\n    // If no element in nums is greater\
    \ than the current minSum, set minSum and minIndex to that number\n    if(nums[i]\
    \ <= minSum){\n      minSum = nums[i];\n      minIndex = i;\n    }\n  }\n\n  //\
    \ Return the minSum and minIndex\n  return [minSum, minIndex];\n}\n", "\tlet minSum\
    \ = Number.MAX_SAFE_INTEGER;\n\tlet tempArray = new Array(nums.length);\n\tlet\
    \ j = 0;\n\tlet lastMinArray = -1;\n\tfor(let i = 0; i < nums.length; i++){\n\t\
    \ttempArray[i] = nums[i];\n\t\tif(tempArray[i] < minSum){\n\t\t\tminSum = tempArray[i];\n\
    \t\t}\n\t\telse{\n\t\t\twhile(j<tempArray.length && tempArray[j+1] < minSum){\n\
    \t\t\t\tminSum = tempArray[j];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ttempArray[j] = minSum;\n\
    \t\t}\n\t}\n\twhile(j<tempArray.length){\n\t\tminSum = tempArray[j];\n\t\tj++;\n\
    \t}\n\tlastMinArray = tempArray.length-1;\n\treturn lastMinArray;\n}\n", "   \
    \ if(nums.length<=1)\n        return nums[0]\n\n    let min = nums[0]\n    let\
    \ sum = 0\n    for(let i=1;i<nums.length;i++){\n        if(nums[i]<nums[i-1]){\n\
    \            sum+=nums[i-1]-nums[i]\n            min=Math.min(sum,min)\n     \
    \   }\n    }\n    return min;\n}\n", "    var min = Number.MAX_SAFE_INTEGER;\n\
    \    var sum = 0;\n    for (var i = 0; i < nums.length; i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    }\n\
    \    return min;\n}\n", "\tvar minSum=Number.MAX_VALUE;\n\tfor(var i = 0; i <\
    \ nums.length; i++)\n\t\tminSum = Math.min(minSum, nums[i]);\n\treturn minSum;\n\
    }\n", "    let min = Number.MIN_SAFE_INTEGER;\n    for(const num of nums){\n \
    \       min = Math.min(min, num + min);\n    }\n    return min;\n}\n", "   \n\
    \   // Find the first and last index\n   let firstIndex = 0;\n   let lastIndex\
    \ = nums.length - 1;\n   \n   // Find the smallest sum\n   let minSum = nums[0];\n\
    \   \n   // Do this while we have not finished the array\n   while (firstIndex\
    \ < lastIndex){\n   \n      // Find the smallest sum\n      let newSum = nums[firstIndex]\
    \ + nums[lastIndex];\n      \n      // If the new sum is smaller than the smallest\
    \ sum, update it\n      if (newSum < minSum){\n         minSum = newSum;\n   \
    \   }\n      \n      // Increment the left and decrement the right\n      firstIndex++;\n\
    \      lastIndex--;\n   \n   }\n   \n   // Return it\n   return minSum;\n}\n",
  "\t\n\tif(nums.length < 1){\n\t\treturn;\n\t}\n\n\tvar sum = 0;\n\t\n\tfor(var i=0;\
    \ i< nums.length; i++){\n\t\tsum += nums[i];\n\t}\n\n\tvar min = sum;\n\t\n\t\
    for(var i=nums.length-1; i>= 0 ; i--){\n\t\tsum += nums[i];\n\t\tif(sum < min){\n\
    \t\t\tmin = sum;\n\t\t}\n\t}\n\n\treturn min;\n}\n", "\tvar min = Infinity,\n\t\
    \tresult = 0;\n\tfor (var i = 0; i < nums.length; i++){\n\t\tfor (var j = i+1;\
    \ j < nums.length; j++){\n\t\t\tresult += nums[j];\n\t\t\tif (result < min){\n\
    \t\t\t\tmin = result;\n\t\t\t}\n\t\t}\n\t}\n\treturn min;\n}\n", "    var len\
    \ = nums.length;\n    var min = Number.MAX_VALUE;\n    var result = 0;\n\n   \
    \ for (var i = 0; i < len; i++) {\n        result += nums[i];\n        if(result\
    \ > min) {\n            min = result;\n            result = nums[i];\n       \
    \ }\n    }\n\n    return result;\n}\n", "\tlet min = Number.MAX_SAFE_INTEGER;\n\
    \tlet min = nums[0];\n\tfor(let i = 1; i < nums.length; i++){\n\t\tlet curr =\
    \ nums[i];\n\t\tmin = Math.min(curr, min);\n\t}\n\treturn min;\n}\n", "  return\
    \ Math.min(...nums.slice(0,nums.length-1).map(function(n){\n    return nums.slice(nums.length-1).reduce((acc,curr)=>acc+curr,n);\n\
    \  }));\n}\n", "   let minSum = 0;\n   for(const num of nums) {\n      minSum\
    \ = Math.max(minSum, num);\n   }\n   return minSum;\n}\nmodule.exports = minSubArraySum;\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nFor me this returns 0 for empty arrays.\n\
    <|/ c |>\n<| a tags=arrays,javascript,sum,algorithm |>\nThis solution works for\
    \ arrays with any length:\n<code>", "  var minSum = nums[0];\n  for(var i = 1;\
    \ i < nums.length; i++){\n    minSum = Math.min(minSum + nums[i], nums[i]);\n\
    \  }\n  return minSum;\n}\nvar min = minSubArraySum;", "    // Initialize minSum\n\
    \    let minSum = -Infinity;\n\n    // Initialize pointers\n    let leftPtr =\
    \ 0;\n    let rightPtr = nums.length - 1;\n\n    // Find the minimum sum\n   \
    \ while(leftPtr <= rightPtr){\n        minSum = Math.min(minSum, nums[leftPtr]\
    \ + nums[rightPtr]);\n        leftPtr++;\n        rightPtr--;\n    }\n\n    return\
    \ minSum;\n}\n", "\tlet min = Infinity;\n\tlet ans = 0;\n\tfor(let i = 0; i <\
    \ nums.length; i++){\n\t\tlet sum = 0;\n\t\tfor(let j = 0; j < nums.length; j++){\n\
    \t\t\tsum += nums[j];\n\t\t}\n\t\tans = Math.min(ans, sum - nums[i]);\n\t\tif(sum\
    \ < min){\n\t\t\tmin = sum;\n\t\t}\n\t}\n\treturn ans;\n}\n", "    var result\
    \ = 0;\n    var i;\n    for(i = 0; i < nums.length; i++){\n        var min = Number.MAX_VALUE;\n\
    \        for(j = 0; j < nums.length; j++){\n            min = Math.min(min, nums[j]\
    \ + nums[i]);\n        }\n        result += min;\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks for the help. That was so straight forward\
    \ i couldn't believe i didn't think of it myself lol.\n<|/ c |>\n<| c |>\nI'm\
    \ glad that it helped. Don't forget to upvote the answer when you can, since it\
    \ helped you, and if it has solved your problem you can mark the answer as accepted\
    \ and close the question.\n<|/ c |>\n<| a dscore=1 tags=javascript,arrays,sum\
    \ |>\nI wrote this solution, maybe it helps you:\n<code>", "  var sum = 0;\n \
    \ for (var i = 0; i < nums.length; i++){\n    sum += nums[i];\n  }\n  return sum;\n\
    }\n", "    var sum=0\n    for( var i=0; i<nums.length; i++ ){\n        if( nums.length>1\
    \ ){\n            sum += minSubArraySum(nums.slice(i+1))\n        }\n        if(\
    \ nums[i]>=0 ){\n            sum += nums[i]\n        }\n    }\n    return sum\n\
    }", "\tnums.sort((a, b) => a - b);\n\tlet min = nums[0];\n\tfor(let i = 1; i <\
    \ nums.length; i++){\n\t\tmin = Math.min(nums[i], min);\n\t}\n\treturn min;\n\
    }\n", "    let min = nums[0];\n    for (let i = 0; i < nums.length; i++){\n  \
    \      min = Math.min(min, nums[i] + nums[i]);\n    }\n    return min;\n}", " \
    \   let minSum = Number.MAX_SAFE_INTEGER;\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        minSum = Math.min(minSum, sumArray(nums, i));\n    }\n    return\
    \ minSum;\n}\n", "  let numsLength = nums.length\n  let minSum = -Infinity\n \
    \ let maxSum = Infinity\n\n  for (let i = 0; i < numsLength; i++){\n    if (i\
    \ > 0 && nums[i - 1] > nums[i]){\n      minSum = Math.min(minSum, nums[i] - nums[i\
    \ - 1])\n      maxSum = Math.max(maxSum, nums[i])\n    } else {\n      minSum\
    \ = Math.min(minSum, nums[i])\n    }\n  }\n\n  return minSum + maxSum\n}\n\n",
  "    \n    return minSubArraySumHelper(nums, 0, 0);\n}\n", "    let sum = 0;\n \
    \   let min = Number.MAX_VALUE;\n    for(let i=0; i<nums.length; i++){\n     \
    \   if(nums[i]>0){\n            sum += nums[i];\n            if(sum < min){\n\
    \                min = sum;\n            }\n        }\n    }\n    return min;\n\
    }", "  return nums.sort((a,b) => b-a).reduce((a,b) => a + b, 0);\n}\n", "\tvar\
    \ min = nums[0];\n\tvar max;\n\tfor(var i=0;i<nums.length;i++){\n\t\tmax = Math.max(nums[i],\
    \ max);\n\t}\n\tfor(var i=0;i<nums.length;i++){\n\t\tmin = Math.min(nums[i], min);\n\
    \t}\n\treturn Math.min(min+max, Math.max(min, max));\n}", "  let minSum = nums[0];\n\
    \  for (let i=1; i<nums.length; i++){\n    minSum = nums[i]+Math.min(minSum,nums[i-1]);\n\
    \  }\n  return minSum;\n}\n", "  var arr=[];\n  for(var i=0;i<nums.length;i++)\n\
    \    arr.push(nums[i]);\n  return minSubArraySumHelper(nums,0,arr.length-1,0);\n\
    }\n", "    //nums.sort() creates an unsorted copy of the array, but for large\
    \ inputs, we may find that the array isn't sorted, so we need to create a sorted\
    \ copy ourselves.\n    nums = nums.slice();\n    nums.sort(function(a,b){\n  \
    \      return a-b;\n    });\n    var sum = 0;\n    var i = nums.length-1;\n  \
    \  while(i > 0){\n        sum += nums[i];\n        i--;\n    }\n    return sum;\n\
    }\n</code>\n<|/ a tags=algorithm,javascript |>\n<| c |>\nThe solution is O(nlogn)\n\
    <|/ c |>\n<| a dscore=4 tags=algorithm,javascript |>\n<code>", "\tvar min = Number.MAX_VALUE;\n\
    \tfor (var i = 0; i < nums.length; i++){\n\t\tvar n = nums[i];\n\t\tvar s = nums[nums.length\
    \ - 1];\n\t\tif(n > s){\n\t\t\tmin = Math.min(min, n + s);\n\t\t}\n\t}\n\treturn\
    \ min;\n}\n", "  if(nums.length < 2){\n    return nums[0];\n  }\n  let sum = nums[0];\n\
    \  let minSum = nums[0];\n  for(let i = 1; i < nums.length; i++){\n    const currentSum\
    \ = sum + nums[i];\n    minSum = Math.min(minSum, currentSum);\n    sum = currentSum;\n\
    \  }\n  return minSum;\n}\n", "  \n  nums.sort(function(a, b){\n    return a -\
    \ b;\n  });\n  \n  for(var i = 0; i < nums.length; i++){\n    if(nums[i] <= nums[nums.length\
    \ - 1]){\n      var temp = nums[nums.length - 1];\n      nums[nums.length - 1]\
    \ = nums[i];\n      nums[i] = temp;\n    }\n  }\n  \n  return nums.reduce(function(a,\
    \ b){\n    return a + b;\n  });\n}</code>\n<|/ a |>\n<| c |>\nThanks, this is\
    \ a great solution! A couple things to note: the code in the question has `nums.sort`\
    \ but the `minSubArraySum` function does not. Also, why are you using `reduce`\
    \ instead of `return`? Also, why are you using `nums.reduce` instead of `return\
    \ nums.reduce`?\n<|/ c |>\n<| c |>\n1. yes, I was using .sort instead of .sort\
    \ ( I just changed it in my answer. 2. I'm not sure. I just assumed that .sort\
    \ was using some kind of reduce function.\n<|/ c |>\n<| c |>\n.Lau thank you very\
    \ much for your reply. This helped me a lot to understand how I can solve this\
    \ problem. Also, thank you for your comment about using .reduce instead of return.\
    \ Thanks again!\n<|/ c |>\n<| a |>\nHere is a solution in Python that seems to\
    \ work using your test cases:\n<code>\ndef minSubArraySum(nums):\n    def subarray_sum(nums):\n\
    \        res = 0\n        for i in range(1, len(nums)):\n            res += nums[i-1]\n\
    \            res += nums[i]\n        return res\n    \n    for i in range(len(nums)):\n\
    \        subarray_sum(nums[:i+1]) < subarray_sum(nums[i:])\n    \n    return sum(nums)\n\
    </code>\n<|/ a tags=arrays,sorting,algorithm,javascript dscore=0 |>\n<| c |>\n\
    This solution is not O(n^2). `min(subarray_sum(nums[:i+1]), subarray_sum(nums[i:]))\
    \ < 0` means `min(subarray_sum(nums[:i+1]), subarray_sum(nums[i:])) > 0`\n<|/\
    \ c |>\n<| c |>\nThanks so much for your reply. This was really helpful!\n<|/\
    \ c |>\n<| c |>\nI understand your point, but I think that the algorithm is actually\
    \ O(n) because the array is being scanned only once\n<|/ c |>\n<| c |>\nYeah,\
    \ I think that is definitely an improvement. My professor was kind enough to point\
    \ it out. Thanks again for helping me out", "  let minSum = Number.MAX_SAFE_INTEGER;\n\
    \  for(let i = 0; i < nums.length; i++){\n    let currentSum = 0;\n    for(let\
    \ j = 0; j < nums.length; j++){\n      if(j > i){\n        currentSum += nums[j];\n\
    \      }\n      if(currentSum < minSum){\n        minSum = currentSum;\n     \
    \ }\n    }\n  }\n  return minSum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
