name: HumanEval_19_sort_numbers
language: js
prompt: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to\
  \ largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction\
  \ sort_numbers(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
  three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
  \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
  ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
  \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
completions: ["    var numbers_array = numbers.split(\" \");\n    var sorted_numbers\
    \ = \"\";\n    var numbers_string = numbers_array[0]; // first value of the array\n\
    \    var first_number = parseInt(numbers_string);\n    for(var i = 1; i < numbers_array.length;\
    \ i++){\n        var next_number = parseInt(numbers_array[i]);\n        if(next_number\
    \ > first_number){\n            sorted_numbers += \" \" + next_number;\n     \
    \       first_number = next_number;\n        }\n    }\n    return sorted_numbers;\n\
    }\n", "\treturn numbers.split(\" \").sort(function(x, y){\n\t\treturn x-y\n\t\
    })\n}\n", "\tnumbers = numbers.split(' ');\n\tnumbers.sort();\n\treturn numbers.join('\
    \ ');\n}\n", "  for(var i = numbers.length - 1; i >= 0; i--){\n    if(numbers[i]\
    \ != 0){\n      numbers.splice(i, 0, parseInt(numbers[i], 10));\n    }\n  }\n\n\
    \  numbers.sort();\n\n  for(var i = numbers.length - 1; i >= 0; i--){\n    numbers[i]\
    \ = numbers[i] + \"\";\n  }\n\n  return numbers.join(\" \");\n}\n", "  var array\
    \ = numbers.split(\" \");\n  var sorted = array.sort(function(a, b){\n    return\
    \ a - b;\n  });\n  return sorted.join(\" \");\n}\n", "    var sortedNumbers =\
    \ numbers.trim().split(' ');\n    var sorted = sortedNumbers.sort();\n    return\
    \ sorted.join(' ');\n}\n</code>\n<|/ a |>\n<| c |>\nYou don't need to split twice,\
    \ you could just do it once and save the splitted array into a variable. Like:\
    \ `var splittedNumbers = numbers.trim().split(' ')` and then `sortedNumbers =\
    \ splittedNumbers.sort()`. Then you can do `numbers = splittedNumbers.join(' ')`\
    \ after the sort.\n<|/ c |>\n<| c |>\nYes, this also works. I was trying to keep\
    \ my code simple though. Also thanks for pointing out my mistake on `splice` -\
    \ I've corrected it. I hadn't seen you were using JavaScript in a while so I made\
    \ some changes to the code to make it more efficient and easier to read. Thanks\
    \ for your input though!\n<|/ c |>\n<| c |>\nI wasn't even aware that `.trim()`\
    \ existed - and I thought it did so much more than that. I guess I only just discovered\
    \ it now!\n<|/ c |>\n<| a dscore=3 tags=javascript |>\nHere's another way using\
    \ reduce() with match():\n<code>\n\"zero one two three four five six seven eight\
    \ nine\"\n  .replace(/zero|one|two|three|four|five|six|seven|eight|nine/ig,\"\"\
    ) // remove non-numbers\n  .replace(/\\s+/g,\" \").trim() // remove extra spaces\n\
    \  .replace(/^\\s+|\\s+$/g, \"\") // remove leading / trailing spaces\n  .replace(/\\\
    s+/g,\" \") // remove duplicate spaces\n  .replace(/\\s+$/,\"\") // remove trailing\
    \ space\n  .replace(/ +/g,\" \") // remove multiple spaces\n  .replace(/ $/,\"\
    \") // remove trailing space\n  .replace(/ $/,\"\") // remove trailing space\n\
    \  .replace(/ $/,\"\") // remove trailing space\n  .match(\" \") // find all spaces\n\
    \  .reduce((a, x) => a.length > 0 ? a + \" \" + x : x)\n  // reduce to one space\n\
    </code>\n<|/ a |>\n<| c |>\nThanks for the explanation!\n<|/ c |>\n<| a tags=javascript\
    \ |>\nI have an implementation that works great for me:\n<code>", "\tvar output\
    \ = '';\n\tvar numbers_array = numbers.split(' ');\n\tnumbers_array.sort(function(a,\
    \ b){return a-b});\n\tfor(var i=0; i<numbers_array.length; i++){\n\t\toutput +=\
    \ numbers_array[i] + ' ';\n\t}\n\toutput = output.trim();\n\treturn output;\n\
    }\n", "\tnumbers = numbers.split(\" \").map(Number);\n\tvar sorted = numbers.sort(function(a,\
    \ b){return a-b;});\n\treturn sorted.join(\" \");\n}\n", "\tvar sorted = 'zero';\n\
    \tfor (var i = 0; i < numbers.length; i++) {\n\t\tfor (var j = 0; j < sorted.length;\
    \ j++) {\n\t\t\tif (numbers[i] === sorted[j]) {\n\t\t\t\tsorted = sort_numbers(numbers.slice(i+1));\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}\n\n", "\tvar sorted=[];\n\
    \tnumbers.split(\" \").sort().forEach(function(n){\n\t\tswitch(n){\n\t\t\tcase\
    \ \"one\":\n\t\t\tcase \"two\":\n\t\t\tcase \"three\":\n\t\t\tcase \"four\":\n\
    \t\t\tcase \"five\":\n\t\t\tcase \"six\":\n\t\t\tcase \"seven\":\n\t\t\tcase \"\
    eight\":\n\t\t\tcase \"nine\":\n\t\t\t\tsorted.push(n);\n\t\t\t\tbreak;\n\t\t\t\
    case \"zero\":\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tsorted.push(\"zero\");\n\
    \t\t\t\tsorted.push(n);\n\t\t\t\tbreak;\n\t\t}\n\t});\n\treturn sorted.join(\"\
    \ \");\n}\n", "  numbers = numbers.split(' ');\n  var sorted_numbers = numbers.sort(function(a,\
    \ b){\n    return a-b;\n  });\n  return sorted_numbers.join(' ');\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nJust for others that find this question in the future:\
    \ this approach is incorrect in that it does not preserve the ordering of the\
    \ input numbers. You should use `sort_numbers()` as in the other answers.\n<|/\
    \ c |>\n<| a |>\n<code>", "  var result = '';\n  var arr = numbers.split(\" \"\
    );\n  for(var i=0;i<arr.length;i++){\n    if(!isNaN(arr[i])){\n      result =\
    \ result + sort_numbers_helper(arr[i]);\n    }\n  }\n  return result;\n}\n", " \
    \   // Turn string into a space-delimited array of numbers and sort from smallest\
    \ to largest\n    numbers_array = numbers.split(\" \").map(function(number) {return\
    \ parseInt(number);});\n    numbers_array.sort(function(a, b) {return a - b;});\n\
    \    \n    // Build a result string of the sorted numbers by joining them with\
    \ spaces\n    result = [];\n    numbers_array.forEach(function(number) {result.push(number);});\n\
    \    return result.join(\" \");\n}\n", "    return numbers.split(\" \").sort().join(\"\
    \ \");\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis is great, thank you. However\
    \ i found another one that doesn't use regex.\n<|/ c |>\n<| c |>\nYou might want\
    \ to add that one to the answer.\n<|/ c |>\n<| c |>\nI realized that there is\
    \ still a problem with this one though. You would have to change it to accept\
    \ negative integers also.\n<|/ c |>\n<| a |>\nHere's one way:\n<code>\nvar numbers\
    \ = \"one two three four\";\nvar ordered = numbers.split(' ')\n  .sort(function(a,\
    \ b) { return parseInt(a, 10) - parseInt(b, 10) })\n  .join(' ');\n</code>\n<|/\
    \ a tags=javascript dscore=5 |>\n<| c |>\nI like the way this line reads -- the\
    \ natural order of the sort is important and it's easy to get wrong. Sure, that\
    \ could be a good feature to add.\n<|/ c |>\n<| c |>\nYou could just `parseInt`\
    \ instead of `+` when `a` and `b` are strings\n<|/ c |>\n<| c |>\nI agree with\
    \ here, the `.split(\" \").sort().join(\" \")` is more obvious than using `parseInt`.\n\
    <|/ c |>\n<| a tags=javascript |>\n<code>\nlet arr = [4,3,2,1,5,6,8,9,0];\nlet\
    \ order = [];\nfor(let i = 0; i < arr.length; i++){\n   let temp = i;\n   for(let\
    \ j = 0; j < arr.length; j++){\n      if(arr[j] > arr[i]){\n         temp = j;\n\
    \      }\n   }\n   order.push(temp);\n}\nfor(let i = 0; i < order.length; i++){\n\
    \   console.log(order[i]);\n}\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n\
    <code>\nvar a = \"one two three four\";\nvar ordered = a.split(' ').sort((a, b)\
    \ => Number(a) - Number(b)).join(' ');", "\tvar i, j, temp;\n\tnumbers = numbers.split(\"\
    \ \");\n\tnumbers.sort();\n\tfor(i = 0, j = numbers.length; i < j; i++){\n\t\t\
    temp = numbers[i];\n\t\tnumbers[i] = numbers[j];\n\t\tnumbers[j] = temp;\n\t}\n\
    \treturn numbers.join(\" \");\n}", "\tvar result = \"\";\n\tnumbers = numbers.split(\"\
    \ \");\n\tvar numbers_sorted = numbers.sort(function(a, b){\n\t\tif(a.match(/[\\\
    d\\.]+/g) == null && b.match(/[\\d\\.]+/g) == null)\n\t\t\treturn a - b;\n\t\t\
    return a.match(/[\\d\\.]+/g) - b.match(/[\\d\\.]+/g);\n\t});\n\tfor(var i = 0;\
    \ i < numbers_sorted.length; i++){\n\t\tif(i % 2 == 0){\n\t\t\tresult += numbers_sorted[i]\
    \ + \" \";\n\t\t}\n\t}\n\treturn result;\n}", "    var output = '';\n    var current\
    \ = numbers.toString();\n    var number = '';\n    var last = '';\n    var sortList\
    \ = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n\
    \n    for(var i = 0; i < sortList.length; i++){\n        if(sortList[i] != current){\n\
    \            if(current != ''){\n                output += current;\n        \
    \        current = '';\n            }\n            number += sortList[i]\n   \
    \     } else {\n            current += sortList[i]\n        }\n    }\n\n    if(current\
    \ != ''){\n        output += current;\n        current = '';\n    }\n\n    return\
    \ output;\n}\n", "\treturn numbers.toString().replace(/[^ ]/g, \"\").split(/\\\
    s+/).sort(function(a,b){\n\t\treturn a - b\n\t}).join(\" \")\n}\n", "  numbers\
    \ = numbers.split(\" \").sort();\n  return numbers[0] + \" \" + numbers[1] + \"\
    \ \" + numbers[2];\n}\n", "   numbers = numbers.split(\" \");\n   var sorted_numbers\
    \ = numbers.sort(function(a, b){\n      return a-b;\n   });\n   return sorted_numbers.join(\"\
    \ \");\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=javascript,regex,sorting\
    \ |>\n<code>\nvar str = `two five three one`\n", "  let sortNumbers = numbers.split('\
    \ ');\n  for (let i = 0; i < sortNumbers.length; i++) {\n    sortNumbers[i] =\
    \ parseInt(sortNumbers[i]);\n  }\n  sortNumbers = sortNumbers.sort((a,b) => b-a);\n\
    \  let returnString = '';\n  for (let i = 0; i < sortNumbers.length; i++) {\n\
    \    returnString += sortNumbers[i];\n  }\n  return returnString;\n}\n</code>\n\
    <|/ a dscore=2 tags=javascript,sorting |>\n<| c |>\nThis seems like the only correct\
    \ answer to me - and it's pretty much what I was going to post anyway\n<|/ c |>\n\
    <| c |>\nThis would work fine except that sorting an array involves sorting each\
    \ individual element in the array. Sort a huge array and this is going to be really\
    \ slow.\n<|/ c |>\n<| c |>\nThe question specifically asks for an input of \"\
    three one five\".  So your example input of \"three one five\" would sort as [\"\
    one\", \"three\", \"five\"].  If you want that to sort as [\"one\", \"three\"\
    , \"five\", \"two\"] then you would have to swap out your \"b\" for a \"b+1\"\
    .  In other words, your example input would sort as [\"one\", \"two\", \"three\"\
    , \"five\"].  And that's not what your code is doing.  Your code is sorting each\
    \ individual element in the array.\n<|/ c |>\n<| c |>\nThanks for the comment,\
    \ I made some changes to my answer.\n<|/ c |>\n<| c |>\nThe first for loop is\
    \ unnecessary and you should be able to just do `for (let i = 0; i < numbers.length;\
    \ i++) {`.\n<|/ c |>\n<| a |>\nIf you have the choice of using external libraries,\
    \ a very popular and simple one is Underscore:\n<code>", "\tlet new_string = numbers.split(\"\
    \ \");\n\tnew_string.sort();\n\treturn new_string.join(\" \");\n}\n", "\treturn\
    \ sort_numbers_helper(numbers, 0);\n}\n", "  if(typeof numbers != 'string') return\
    \ '';\n\n  var re = /\\d/g;\n  var arr = numbers.split(' ').sort(function(a,b){\n\
    \    return a.match(re) - b.match(re);\n  }).join(' ');\n  return arr;\n}\n",
  "  var strings=numbers.split(\" \");\n  var numbers=[];\n  for(var i=0;i<strings.length;i++){\n\
    \    numbers[i]=parseInt(strings[i]);\n  }\n  numbers.sort(function(a,b){\n  \
    \  return (a < b) ? -1 : (a > b) ? 1 : 0;\n  });\n  return numbers.join(\" \"\
    );\n}\n", "  var n = [].slice.call(numbers).map(Number)\n  n.sort(function(a,\
    \ b){return a - b})\n  return n.join(' ')\n}\n</code>\n<|/ a tags=sorting,javascript\
    \ |>\n<| c |>\nI like this one, since it uses native methods as much as possible,\
    \ but I think the `sort` method is probably faster in practice.  It would be interesting\
    \ to benchmark against the other answers.\n<|/ c |>\n<| a tags=sorting,javascript\
    \ |>\nHere is my solution:\n<code>", "  var results = [];\n  var numbers = numbers.trim();\n\
    \  var split = numbers.split(\" \");\n  var sorted = split;\n  sorted.sort();\n\
    \  sorted = sorted.join(\"  \");\n  results = results.join(\" \");\n  return results;\n\
    }\n", "    var arr = numbers.split(\" \");\n    return arr.sort().join(\" \");\n\
    }\n", "    var string1 = \"\";\n    var string2 = \"\";\n    var string3 = \"\"\
    ;\n    var string4 = \"\";\n    var string5 = \"\";\n    var string6 = \"\";\n\
    \    var string7 = \"\";\n    var string8 = \"\";\n    var string9 = \"\";\n \
    \   var string10 = \"\";\n    var string11 = \"\";\n    var string12 = \"\";\n\
    \    var string13 = \"\";\n    var string14 = \"\";\n    var string15 = \"\";\n\
    \    var string16 = \"\";\n    var string17 = \"\";\n    var string18 = \"\";\n\
    \    var string19 = \"\";\n    var string20 = \"\";\n    var string21 = \"\";\n\
    \    var string22 = \"\";\n    var string23 = \"\";\n    var string24 = \"\";\n\
    \    var string25 = \"\";\n    var string26 = \"\";\n    var string27 = \"\";\n\
    \    var string28 = \"\";\n    var string29 = \"\";\n    var string30 = \"\";\n\
    \    var string31 = \"\";\n    var string32 = \"\";\n    var string33 = \"\";\n\
    \    var string34 = \"\";\n    var string35 = \"\";\n    var string36 = \"\";\n\
    \    var string37 = \"\";\n    var string38 = \"\";\n    var string39 = \"\";\n\
    \    var string40 = \"\";\n    var string41 = \"\";\n    var string42 = \"\";\n\
    \    var string43 = \"\";\n    var string44 = \"\";\n    var string45 = \"\";\n\
    \    var string46 = \"\";\n    var string47 = \"\";\n    var string48 = \"\";\n\
    \    var string49 = \"\";\n    var string50 = \"\";\n    var string51 = \"\";\n\
    \    var string52 = \"\";\n    var string53 = \"\";\n    var string54 = \"\";\n\
    \    var string55 = \"\";\n    var string56 = \"\";\n    var string57 = \"\";\n\
    \    var string58 = \"\";\n    var string59 = \"\";\n    var string60 = \"\";\n\
    \    var string61 = \"\";\n    var string62 = \"\";\n    var string63 = \"\";\n\
    \    var string64 = \"\";\n    var string65 = \"\";\n    var string66 = \"\";\n\
    \    var string67 = \"\";\n    var string68 = \"\";\n    var string69 = \"\";\n\
    \    var string70 = \"\";\n    var string71 = \"\";\n    var string72 = \"\";\n\
    \    var string73 = \"\";\n    var string74 = \"\";\n    var string75 = \"\";\n\
    \    var string76 = \"\";\n    var string77 = \"\";\n    var string78 = \"\";\n\
    \    var string79 = \"\";\n    var string80 = \"\";\n    var string81 = \"\";\n\
    \    var string82 = \"\";\n    var string83 = \"\";\n    var string84 = \"\";\n\
    \    var string85 = \"\";\n    var string86 = \"\";\n    var string87 = \"\";\n\
    \    var string88 = \"\";\n    var string89 = \"\";\n    var string90 = \"\";\n\
    \    var string91 = \"\";\n    var string92 = \"\";\n    var string93 = \"\";\n\
    \    var string94 = \"\";\n    var string95 = \"\";\n    var string96 = \"\";\n\
    \    var string97 = \"\";\n    var string", "  if(numbers.length < 3){\n    return\
    \ \"Please enter 3 or more numbers\";\n  }\n  return numbers.split(\" \").sort().join(\"\
    \ \");\n}\n", "  numbers = numbers.split(' ');\n  return numbers.sort().join('\
    \ ');\n}\n", "  let output = [];\n  let sorted = numbers.split(' ');\n  sorted.sort();\n\
    \  sorted.forEach((num, index) => {\n    output.push(sorted[index]);\n  });\n\
    \  return output.join(' ');\n}\n", "    var words = numbers.split(' ');\n    return\
    \ words.sort().join(' ');\n}\n</code>\n<|/ a tags=string,javascript,sorting |>\n\
    <| a dscore=2 |>\nI needed a quick solution that also handles multiple numbers,\
    \ e.g.:\n<code>\n'1 2 9 3 4'\n</code>\nThis is what I did:\n<code>\nconst sortString\
    \ = (a, b) => {\n    const a = a.split(' ').join('');\n    const b = b.split('\
    \ ').join('');\n    return a > b ? 1 : a < b ? -1 : 0;\n};\n</code>\n<|/ a tags=string,javascript,sorting\
    \ |>\n<| a dscore=2 tags=string,javascript,sorting |>\nYou can use string split\
    \ method with join:\n\n<code>\nconst sortString = (s) => {\n  return s.split('\
    \ ').sort().join(' ');\n}\nconst result = sortString('12 3 45 7 9');", "    var\
    \ sorted_numbers = numbers.split(\" \");\n    sorted_numbers.sort();\n    var\
    \ str = sorted_numbers.join(\" \");\n    return str;\n}\n", "\tvar numbers_arr\
    \ = numbers.split(\" \");\n\tvar sortedNumbers = numbers_arr.sort(function(a,\
    \ b){\n\t\treturn parseInt(a) - parseInt(b);\n\t});\n\treturn sortedNumbers.join(\"\
    \ \");\n}\n", "  return numbers.split(\" \").sort(function(a, b) {\n    return\
    \ a - b;\n  }).join(\" \");\n}\n</code>\n<|/ a |>\n<| a |>\nI wrote a Javascript\
    \ library that does just this!  It's called SortingHelper.js and it's hosted on\
    \ github at https://github.com/murraysouthernmac/SortingHelper.js\nThe library\
    \ is very simple and works with all Javascript arrays.  In your case, the sample\
    \ code below will sort the numbers in ascending order.\n<code>\nSortingHelper.sort(['one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']);\n</code>\n\
    The library is written to solve these types of problems and is flexible enough\
    \ for other cases as well.\n<|/ a tags=javascript,arrays,sorting dscore=2 |>\n\
    <| a dscore=1 |>\n<code>\nvar numbers = ['one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine', 'ten'];\nnumbers.sort(function (a, b) {\n \
    \   return a < b ? -1 : 1;\n});", "    let sorted_numbers = numbers;\n    let\
    \ temp_numbers = numbers.split(' ');\n    temp_numbers.sort();\n    sorted_numbers\
    \ = temp_numbers.join(' ');\n    return sorted_numbers;\n}\n", "\tlet numberList\
    \ = numbers.split(\" \").map(x => parseInt(x));\n\tnumberList.sort();\n\tnumbers\
    \ = numberList.join(\" \");\n\treturn numbers;\n}\n", "\tlet sortedNumbers = [];\n\
    \tfor (let i = 0; i < numbers.length; i++){\n\t\tsortedNumbers.push(parseInt(numbers[i]));\n\
    \t}\n\tsortedNumbers.sort();\n\tlet result = \"\";\n\tfor (let i = 0; i < sortedNumbers.length;\
    \ i++){\n\t\tresult += numbers[i];\n\t}\n\treturn result;\n}\n", "  numbers =\
    \ numbers.split(\" \");\n  var sorted = numbers.sort(function(a, b){\n    return\
    \ a - b;\n  });\n  return sorted.join(\" \");\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nAs a side note, the OP posted a [link to another answer](http://stackoverflow.com/a/13643464/157247)\
    \ to the same question that suggests using a switch statement instead of an if...else\
    \ if chain.\n<|/ c |>\n<| c |>\nWhy don't you just use `Array.sort`?\n<|/ c |>\n\
    <| c |>\n- because it's a homework assignment and they said they couldn't use\
    \ Arrays.sort.\n<|/ c |>\n<| a dscore=0 |>\nHere's one solution. It builds up\
    \ a string of numbers, sorts the numbers into a string again, splits them back\
    \ into an array, sorts it again and joins them back together again.\n<code>",
  "    numbers = numbers.trim();\n    let digits = numbers.split(' ');\n    digits.sort();\n\
    \    for(let i=0; i<digits.length; i++){\n        digits[i] = parseInt(digits[i],\
    \ 10);\n    }\n    let sorted = digits.join(' ');\n    return sorted;\n}\n", " \
    \ // Write your code here.\n  var splitNumbers = numbers.split(\" \");\n  var\
    \ sortedNumbers = \"\";\n  for(var i = 0; i < splitNumbers.length; i++){\n   \
    \ if(i % 2 == 0){\n      sortedNumbers += splitNumbers[i] + \" \";\n    } else\
    \ {\n      sortedNumbers += \" \" + splitNumbers[i] + \" \";\n    }\n  }\n  return\
    \ sortedNumbers.trim();\n}\n", "   //Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n   //Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n   //Return the string\
    \ with numbers sorted from smallest to largest\n   return numbers.toString().split('\
    \ ').sort().join(' ');\n}\n", "   var str = \"\"; //The new sorted string\n  \
    \ var arr = numbers.split(\" \"); //Split string by whitespace\n   var length\
    \ = arr.length; //Get array length\n   var min = 0; //Lowest index in array\n\
    \   var max = length - 1; //Highest index in array\n\n   for(var i = 0; i < length;\
    \ i++){\n      //Get index of min or max value\n      if(arr[i] > arr[max]){\n\
    \         max = i-1;\n      }\n      if(arr[i] < arr[min]){\n         min = i;\n\
    \      }\n   }\n\n   for(i = 0; i < length; i++){\n      //Sort numbers in array\
    \ and add to new string\n      str += arr[i] + \" \";\n   }\n\n   return str.slice(0,\
    \ -1); //Trim off last space\n}\n", "\tvar sorted = \"\";\n\tfor (var i=0;i<numbers.length;i++)\
    \ {\n\t\tsorted = sorted.concat(get_number_letter(numbers[i]));\n\t}\n\treturn\
    \ sorted;\n}\n", "  let array = numbers.split(\" \");\n  array.sort((a,b)=>{\n\
    \      a = a.toLowerCase();\n      b = b.toLowerCase();\n      return a > b? 1:a\
    \ < b? -1:0\n  })\n  return array.join(\" \");\n}\n", "    let arr = []\n    numbers.split(\"\
    \ \").map(item => { arr.push(item) })\n    arr.sort((a,b) => b - a)\n    return\
    \ arr.join(\" \")\n}\n", "    numbers.split(\" \").sort(function(a, b){\n    \
    \    var al = a.split(\".\"),\n            bn = b.split(\".\");\n        for(var\
    \ i = 0; i < al.length; i++){\n            if(i == 0){\n                if(!is_number(al[i]))\
    \ throw \"Invalid\";\n                al[i] = parseInt(al[i]);\n            }else{\n\
    \                if(!is_number(al[i])) throw \"Invalid\";\n                if(is_number(al[i-1]))\
    \ throw \"Invalid\";\n                al[i] = parseInt(al[i]);\n            }\n\
    \        }\n        for(var j = 0; j < bn.length; j++){\n            if(i == 0){\n\
    \                if(!is_number(bn[j])) throw \"Invalid\";\n                bn[j]\
    \ = parseInt(bn[j]);\n            }else{\n                if(!is_number(bn[j]))\
    \ throw \"Invalid\";\n                if(is_number(bn[j-1])) throw \"Invalid\"\
    ;\n                bn[j] = parseInt(bn[j]);\n            }\n        }\n      \
    \  for(var i = 0; i < al.length; i++){\n            if(al[i] > bn[j]) return -1;\n\
    \            if(al[i] < bn[j]) return 1;\n        }\n        for(var i = 0; i\
    \ < bn.length; i++){\n            if(bn[i] > al[j]) return -1;\n            if(bn[i]\
    \ < al[j]) return 1;\n        }\n        return 0;\n    });\n    return numbers.split(\"\
    \ \").join(\" \");\n}\n", "    numbers = numbers.split(' ');\n    numbers = numbers.map(n\
    \ => parseInt(n));\n    numbers.sort();\n    return numbers.join(' ');\n}\n</code>\n\
    <|/ a |>\n<| a dscore=2 |>\n<code>\nvar number = \"three one five\";\n", "\tvar\
    \ i, length, numberString, number, sortedString;\n\tnumbers = numbers.split('\
    \ ');\n\tnumberString = numbers[0];\n\tlength = numbers.length;\n\tsortedString\
    \ = \"\";\n\tfor (i=0; i<length; i++) {\n\t\tnumber = parseFloat(numbers[i]);\n\
    \t\tnumberString = numberString + number + \", \";\n\t\tsortedString = sortedString\
    \ + number + \" \";\n\t}\n\tsortedString = numberString + numbers[length - 1];\n\
    \treturn sortedString;\n}\n", "  return numbers.replace(/\\s+/g, \" \").toLowerCase().replace(/\\\
    bzero\\b/g, \"0\").replace(/\\binf\\b/g, \"1\").replace(/\\bnine\\b/g, \"9\").replace(/\\\
    bone\\b/g, \"1\").replace(/\\btwo\\b/g, \"2\").replace(/\\bthree\\b/g, \"3\").replace(/\\\
    bfour\\b/g, \"4\").replace(/\\bfive\\b/g, \"5\").replace(/\\bsix\\b/g, \"6\").replace(/\\\
    bseven\\b/g, \"7\").replace(/\\beight\\b/g, \"8\").replace(/\\bnine\\b/g, \"9\"\
    );\n}", "  var numbers = numbers.split(' ');\n  var result = \"\";\n  for(var\
    \ i = 0; i < numbers.length; i++){\n    var number = numbers[i];\n    var num_digits\
    \ = number.length;\n    var current_num = 0;\n    for(var j = 0; j < num_digits;\
    \ j++){\n      var character = number.charAt(j);\n      if(character == '0'){\n\
    \        current_num += 1;\n      } else {\n        if(current_num >= 10)\n  \
    \        result += '' + current_num;\n        current_num = 1;\n      }\n    }\n\
    \    if(current_num >= 10)\n      result += '' + current_num;\n  }\n  return result;\n\
    }\n", "  return numbers.split(\" \").sort(function(a, b){\n    return parseInt(a)\
    \ - parseInt(b);\n  }).join(\" \");\n}\n", "  let numbers = numbers.trim().split('\
    \ ');\n  numbers = numbers.sort((a,b) => a-b);\n  let string = '';\n  for(const\
    \ n of numbers){\n    string += n;\n  }\n  return string;\n}\n", "  numbers =\
    \ numbers.split(\" \");\n  var nums = [];\n  for(var i=0; i< numbers.length; i++){\n\
    \    var numStr = numbers[i].toString();\n    var numArr = numStr.split('');\n\
    \    var num = numArr.length;\n    if(num){\n      var numStr = '0' + numStr;\n\
    \      nums.push(numStr);\n    }\n  }\n  nums.sort(function(a, b){\n    a = parseInt(a,\
    \ 10);\n    b = parseInt(b, 10);\n    return b - a;\n  });\n  \n  var numbers\
    \ = \"\";\n  for(var i=0; i<nums.length; i++){\n    var numStr = '0' + nums[i];\n\
    \    numbers += numStr;\n  }\n  return numbers;\n}\n", "  var numbers_array =\
    \ numbers.split(' ');\n  numbers_array.sort(function(a,b){\n    a = parseInt(a,10);\n\
    \    b = parseInt(b,10);\n    return a-b;\n  });\n  return numbers_array.join('\
    \ ');\n}\n", "  return numbers.replace(/([0-9]+?) ?([0-9]+?) ?([0-9]+?)/g, function\
    \ (match, i1, i2, i3){\n    return i2 + \" \" + i1 + \" \" + i3\n  });\n}\n\n",
  "  // Your code here\n  var numbers_array = numbers.split(\" \");\n  var numbers_sorted\
    \ = [];\n  for(var i=0;i<numbers_array.length;i++){\n    if(numbers_array[i]==\"\
    zero\"){\n      numbers_sorted.push(\"0\");\n    } else if(numbers_array[i]==\"\
    one\"){\n      numbers_sorted.push(\"1\");\n    } else if(numbers_array[i]==\"\
    two\"){\n      numbers_sorted.push(\"2\");\n    } else if(numbers_array[i]==\"\
    three\"){\n      numbers_sorted.push(\"3\");\n    } else if(numbers_array[i]==\"\
    four\"){\n      numbers_sorted.push(\"4\");\n    } else if(numbers_array[i]==\"\
    five\"){\n      numbers_sorted.push(\"5\");\n    } else if(numbers_array[i]==\"\
    six\"){\n      numbers_sorted.push(\"6\");\n    } else if(numbers_array[i]==\"\
    seven\"){\n      numbers_sorted.push(\"7\");\n    } else if(numbers_array[i]==\"\
    eight\"){\n      numbers_sorted.push(\"8\");\n    } else if(numbers_array[i]==\"\
    nine\"){\n      numbers_sorted.push(\"9\");\n    } else {\n      numbers_sorted.push(numbers_array[i]);\n\
    \    }\n  }\n  return numbers_sorted.join(\" \");\n}\n</code>\nThis can be made\
    \ better with regex\n<code>", "  var n1=numbers.split(\" \").map(function(n){\
    \ return parseInt(n, 10);});\n  if(n1.length > 1){\n    var a = [];\n    for(var\
    \ i=1;i<10;i++){\n      n1.forEach(function(n,i){\n        if(n == i){\n     \
    \     a.push(i);\n        }\n      });\n    }\n    n1 = a;\n  }\n  n1 = n1.sort(function(a,b){\n\
    \    return a-b;\n  });\n  return n1.join(\" \");\n}\n", "  var stringList = numbers.split(\"\
    \ \");\n  var numberList = stringList.map(function(number){\n    return parseInt(number);\n\
    \  });\n\n  numberList.sort(function(a,b){\n    return a-b;\n  });\n  return stringList.map(function(number){\n\
    \    return numberList[number];\n  }).join(\" \");\n}\n</code>\n<|/ a tags=javascript,arrays\
    \ |>\n<| c |>\nCan you give an example of how to use this function? I'm having\
    \ trouble figuring out how to use it.\n<|/ c |>\n<| a tags=javascript,arrays |>\n\
    Try this:\n<code>", "    numbers = numbers.split(' ')\n\n    let numbers_as_string\
    \ = ''\n\n    for (let i = 0; i < numbers.length; i++) {\n        if(numbers[i]\
    \ === 0){\n            numbers_as_string += `${numbers[i]}`\n        } else if(numbers[i]\
    \ === 'zero'){\n            numbers_as_string += `${numbers[i]}`\n        } else\
    \ if(numbers[i] === 'one'){\n            numbers_as_string += `${numbers[i]}`\n\
    \        } else if(numbers[i] === 'two'){\n            numbers_as_string += `${numbers[i]}`\n\
    \        } else if(numbers[i] === 'three'){\n            numbers_as_string +=\
    \ `${numbers[i]}`\n        } else if(numbers[i] === 'four'){\n            numbers_as_string\
    \ += `${numbers[i]}`\n        } else if(numbers[i] === 'five'){\n            numbers_as_string\
    \ += `${numbers[i]}`\n        } else if(numbers[i] === 'six'){\n            numbers_as_string\
    \ += `${numbers[i]}`\n        } else if(numbers[i] === 'seven'){\n           \
    \ numbers_as_string += `${numbers[i]}`\n        } else if(numbers[i] === 'eight'){\n\
    \            numbers_as_string += `${numbers[i]}`\n        } else if(numbers[i]\
    \ === 'nine'){\n            numbers_as_string += `${numbers[i]}`\n        }\n\
    \    }\n\n    return numbers_as_string\n}\n", "  numbers = numbers.split(' ');\n\
    \  var output = '';\n  numbers.forEach(function(num){\n    switch(num){\n    \
    \  case 'zero':\n      case 'one':\n      case 'two':\n      case 'three':\n \
    \     case 'four':\n      case 'five':\n      case 'six':\n      case 'seven':\n\
    \      case 'eight':\n      case 'nine':\n        output = output + 'one ' + num\
    \ + ' ';\n        break;\n      default:\n        output = output + 'two ' + num\
    \ + ' ';\n    }\n  });\n  output = output.substring(0, output.length - 1);\n \
    \ return output;\n}\n", "\tvar words = numbers.split(' ');\n\tvar sorted_numbers\
    \ = [];\n\tfor (var n = 0; n < words.length; n++) {\n\t\tvar word = words[n];\n\
    \t\tfor (var a = 0; a < sorted_numbers.length; a++) {\n\t\t\tif (sorted_numbers[a]\
    \ == word){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (a >= sorted_numbers.length)\
    \ {\n\t\t\tsorted_numbers.push(word);\n\t\t}\n\t}\n\tsorted_numbers.sort();\n\t\
    var new_numbers = '';\n\tfor (var n = 0; n < sorted_numbers.length; n++) {\n\t\
    \tnew_numbers += sorted_numbers[n] + ' ';\n\t}\n\treturn new_numbers.substr(0,new_numbers.length-1);\n\
    }\n\n", "\tvar digits = numbers.split(' '),\n\t\tsortedArray = [],\n\t\tcurrent\
    \ = 0,\n\t\tstring = '';\n\n\twhile(current < digits.length){\n\t\tsortedArray.push(parseInt(digits[current]));\n\
    \t\tcurrent++;\n\t}\n\tsortedArray.sort(function(a, b){return b-a});\n\n\twhile\
    \ (sortedArray.length){\n\t\tstring = number + sortedArray.shift();\n\t}\n\treturn\
    \ string;\n}\n", "  var numbers = numbers.split(\" \");\n  var numbers_sorted\
    \ = numbers.sort(function(a,b){return a-b});\n  return numbers_sorted.join(\"\
    \ \");\n}\n", "\tnumbers = numbers.split(\" \");\n\tnumbers.sort();\n\treturn\
    \ numbers.join(\" \");\n}\n\t", "  var numbers = numbers.split(\" \");\n  numbers.sort();\n\
    \  return numbers.join(\" \");\n}\n", "  var arr = [];\n  var str = numbers.split(\"\
    \ \");\n  for (var i in str){\n    if (numbers.match(/\\d+/g)){\n      arr.push(str[i].match(/\\\
    d+/g));\n    }\n  }\n  console.log(arr)\n  var sorted_num = arr.sort().join(\"\
    \ \");\n  return sorted_num;\n}\n", "  let sorted_numbers = numbers.split(' ').sort((a,b)\
    \ => a-b);\n  return sorted_numbers.join(' ');\n}\n</code>\nThe second method\
    \ takes your list in the format \"three one five\" from your question, and splits\
    \ it up using \" \" as delimiter, then sorts each split string into its digits,\
    \ and then joins them back together with the delimiter, which is \" \" again.\
    \ \nThis time sort_numbers() is just a string manipulation function. It isn't\
    \ actually sorting anything in the program, it's just turning your string into\
    \ an array and sorting it by the numbers it is given. \nThe main difference between\
    \ these two is that sort is actually a function that operates on a list. Whereas\
    \ sort_numbers() is just a function that operates on a string. The difference\
    \ is important because they are both creating lists, but one is an actual list\
    \ and one is just a string manipulation function. \nSo the main difference is\
    \ that sort is a function which operates on a list, while sort_numbers() is a\
    \ function which operates on a string. \nAnd that's pretty much the difference.\
    \ Your question specifically asked about sorting a string, but if you were to\
    \ switch to sorting a list, then it would be more interesting. \nHope that helps!\n\
    <|/ a tags=javascript,arrays |>\n<| c |>\nOh wow thank you so much!! I'm still\
    \ very new to javascript and this is really helpful!\n<|/ c |>\n<| a |>\n<code>",
  "    if(numbers === null){\n        return null;\n    }\n    let numberString =\
    \ numbers.replace(/\\s/g, \"\"); // removes whitespace from input\n    let result\
    \ = \"\";\n    let i = 0;\n    while(i < numberString.length){\n        let currentChar\
    \ = numberString.charAt(i);\n        if(currentChar === \"nine\"){\n         \
    \   let j = 0;\n            while(j < numberString.length){\n                if(numberString.charAt(j)\
    \ !== \"nine\"){\n                    break;\n                }\n            \
    \    j++;\n            }\n            if(j === numberString.length){\n       \
    \         let charToInsert = 'zero';\n                for(let j = i+1; j < numberString.length;\
    \ j++){\n                    if(numberString.charAt(j) === 'nine'){\n        \
    \                charToInsert = 'nine';\n                        break;\n    \
    \                }\n                }\n                result += \" \" + charToInsert;\n\
    \            }\n        }\n        else if(currentChar === \"zero\"){\n      \
    \      result += \" \" + currentChar;\n        }\n        else if(currentChar\
    \ !== \"one\" && currentChar !== \"two\" && currentChar !== \"three\" && currentChar\
    \ !== \"four\" && currentChar !== \"five\" && currentChar !== \"six\" && currentChar\
    \ !== \"seven\" && currentChar !== \"eight\" && currentChar !== \"nine\"){\n \
    \           result += \" \" + currentChar;\n        }\n        i++;\n    }\n \
    \   return result;\n}\n</code>\n<|/ a dscore=1 tags=javascript,sorting |>\n<|\
    \ a tags=javascript,sorting |>\nThis is my solution using ES6 syntax.\n<code>\n\
    let string = \"nine one two three four five six seven eight nine\";\nlet res =\
    \ [];\nfor (let i = 0; i < string.length; i++) {\n  res.push(string.slice(i, i\
    \ + 1).split(' ').map(Number).sort());\n}", "  var numbers = numbers.split(\"\
    \ \");\n  var number_strings = numbers.map(function(num){\n    return num.toString();\n\
    \  });\n\n  return number_strings.sort(function(a, b){\n    var num_a = parseInt(a,\
    \ 10);\n    var num_b = parseInt(b, 10);\n\n    if (num_a < num_b) {\n      return\
    \ -1;\n    }\n\n    if (num_a > num_b) {\n      return 1;\n    }\n\n    return\
    \ 0;\n  });\n}\n", "\treturn numbers.replace(/([\\d]+\\s)+/g,\"$1 \").trim();\n\
    }", "    var s = numbers.toString().toLowerCase();\n    var nums = s.split(/\\\
    s+/);\n    var out = \"\";\n    var start = 0;\n    var count = {};\n\n    for(var\
    \ i = 0; i < nums.length; i++){\n        var n = nums[i];\n        count[n] =\
    \ (count[n] || (nums.length - i - 1))+1;\n        if(n===\"nine\"){\n        \
    \    start++;\n        }\n        if(n>0 && n<=9){\n            out += nums[i-start];\n\
    \            if(count[n]==1){\n                out += \"&nbsp;\"\n           \
    \ }\n        }\n    }\n    return out;\n}\n", "    var nums = numbers.split('\
    \ ');\n    return nums.sort(function(a, b){\n        a = parseInt(a);\n      \
    \  b = parseInt(b);\n        if(a>b) return -1;\n        if(b>a) return 1;\n \
    \       return 0;\n    });\n}\n", "  var nums = numbers.split(\" \");\n  var sorted\
    \ = [];\n  var length = nums.length;\n\n  for(var i = 0; i < length; i++){\n \
    \   sorted.push(nums[i]);\n  }\n\n  for(var i = 0; i < length; i++){\n    for(var\
    \ j = i + 1; j < length; j++){\n      if(nums[i] > nums[j]){\n        var temp\
    \ = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n      }\n \
    \   }\n  }\n\n  return nums.join(\" \");\n}\n", "    numbers = numbers.split(\"\
    \ \").sort();\n    return numbers.join(\" \");\n}", "  return numbers.replace(/\\\
    s+/g,\" \")\n    .replace(/\\s+$/,\"\")\n    .split(\" \")\n    .sort(function(a,b){\n\
    \      var a_num = parseInt(a, 10);\n      var b_num = parseInt(b, 10);\n    \
    \  if (a_num == b_num){\n        return a_num - b_num;\n      }\n      else if\
    \ (a_num < b_num){\n        return -1;\n      }\n      else{\n        return 1;\n\
    \      }\n    })\n    .join(\"  \");\n}\n</code>\n<|/ a tags=javascript,sorting\
    \ dscore=3 |>\n<| a |>\nYou want to sort a list with numbers only, and you're\
    \ not looking for sorting alphabetically, but for a natural sort as described\
    \ in the linked question.\n<code>", "  var nums = numbers.split(' ')\n  var s\
    \ = ''\n  for(var i=0; i<nums.length; i++){\n    s += nums[i]\n    switch(nums[i]){\n\
    \      case 'one':\n      case 'two':\n      case 'three':\n      case 'four':\n\
    \      case 'five':\n      case 'six':\n      case 'seven':\n      case 'eight':\n\
    \      case 'nine':\n      case 'zero':\n      case '':\n        // nothing to\
    \ do\n        break;\n      default:\n        if(!nums[i+1]){\n          s +=\
    \ 'eleven'\n          i++;\n        } else {\n          s += 'twelve'\n      \
    \  }\n    }\n  }\n  return s\n}", "\tvar nums = numbers.split(\" \");\n\treturn\
    \ nums.sort(function(a, b){return a-b;});\n}\n", "\tnumbers.trim()\n\tvar arr\
    \ = numbers.split(/\\s+/);\n\tvar res = [];\n\tfor(var i=0;i<arr.length;i++){\n\
    \t\tswitch(arr[i]){\n\t\t\tcase \"zero\":\n\t\t\tcase \"one\":\n\t\t\tcase \"\
    two\":\n\t\t\tcase \"three\":\n\t\t\tcase \"four\":\n\t\t\tcase \"five\":\n\t\t\
    \tcase \"six\":\n\t\t\tcase \"seven\":\n\t\t\tcase \"eight\":\n\t\t\tcase \"nine\"\
    :\n\t\t\t\tres.push(arr[i]);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow Error(\"\
    Invalid number '\"+arr[i]+\"' in '\"+numbers+\"'\");\n\t\t}\n\t}\n\treturn res.join(\"\
    \ \");\n}\n\n", "  return numbers.replace(/zero/g,'').replace(/one/g,'2').replace(/two/g,'3').replace(/three/g,'4').replace(/four/g,'5').replace(/five/g,'6').replace(/six/g,'7').replace(/seven/g,'8').replace(/eight/g,'9').replace(/nine/g,'0');\n\
    }\n", "    if(!numbers) return numbers;\n    let splitNumbers = numbers.split(\"\
    \ \");\n    let sortedNumbers = splitNumbers.sort((a, b) => a - b);\n    return\
    \ sortedNumbers.join(\" \");\n}\n", "  var valid_numbers = 'zero one two three\
    \ four five six seven eight nine'.split(' ');\n  var sorted_numbers = valid_numbers.slice();\n\
    \  numbers.forEach(function(num){\n    var n = parseInt(num);\n    if(typeof n\
    \ !== 'number'){\n      throw new TypeError('Invalid number: ' + num);\n    }\n\
    \    sorted_numbers.splice(sorted_numbers.indexOf(n),1);\n  });\n  return sorted_numbers.join('\
    \ ');\n}", "\treturn numbers.trim().replace(/\\s+/g, \"\").split(\" \").sort().join(\"\
    \ \");\n}\n", "  return numbers.replace(/((^|\\s)0+)(\\s|$)/g,\"$1$2\").split(/\\\
    s+/).sort(function(a, b){\n    return a - b;\n  });\n}\n</code>\nI hope this helps!\n\
    <|/ a tags=javascript,sorting |>\n<| c |>\nIt's an interesting solution, but doesn't\
    \ work properly when your list only contains strings with numbers in them (e.g.\
    \ \"three\", \"two\", \"one\" won't work). Sort them as strings and then return\
    \ as numbers in order of the original order.\n<|/ c |>\n<| a |>\nYou can try this\
    \ one.\n<code>", "    var output = '';\n    var numbers_array = numbers.split('\
    \ ');\n    numbers_array.sort();\n    var i = 0;\n    for (i = 0; i < numbers_array.length;\
    \ i++){\n        output += numbers_array[i] + ' ';\n    }\n    return output;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nYou could use an array to sort\
    \ them in any way you like, and output them in the same order you input them.\n\
    <code>\n<?php", "\tnumbers = numbers.split(\" \");\n\tnumbers.sort();\n\tnumbers\
    \ = numbers.join(\" \");\n\treturn numbers;\n}\n", "\tvar numarr = numbers.split(\"\
    \ \")\n\tnumarr.sort()\n\treturn numarr.join(\" \")\n}\n\n", "    var number =\
    \ numbers.split(/\\s+/);\n    numbers.sort();\n    return numbers.join(' ');\n\
    }\n", "    return numbers.split(\" \").reduce(\n        function(soFar, current){\n\
    \            var num = Number(current);\n            if(isNaN(num)){\n       \
    \         throw Error(\"Non-number in sort string: \" + current);\n          \
    \  } else if(num < 0 || num > 9){\n                throw Error(\"Number out of\
    \ bounds in sort string: \" + current);\n            }\n            return soFar.concat(num);\n\
    \        },\n        []);\n}\n", "  if(!numbers || numbers.length == 0) return\
    \ '';\n  var numbers_array = numbers.toLowerCase().split(' ');\n  numbers_array.sort(function(a,\
    \ b){\n    a = a.toLowerCase();\n    b = b.toLowerCase();\n    if (a > b) return\
    \ 1;\n    if (a < b) return -1;\n    return 0;\n  });\n  return numbers_array.join('\
    \ ');\n}\n", "\tvar numbers = numbers.split(\" \");\n\tvar sortedNumbers = numbers.sort(function(a,\
    \ b){\n\t\tvar a_int = parseInt(a);\n\t\tvar b_int = parseInt(b);\n\t\treturn\
    \ a_int - b_int;\n\t});\n\treturn sortedNumbers.join(\" \");\n}\n", "\tvar sorted_numbers\
    \ = numbers.split(\" \");\n\tvar result_numbers = \"\";\n\tvar count = 0;\n\n\t\
    for(var i = 0; i < sorted_numbers.length; i++){\n\t\tif(sorted_numbers[i] == \"\
    one\" || sorted_numbers[i] == \"two\" || sorted_numbers[i] == \"three\" || sorted_numbers[i]\
    \ == \"four\" || sorted_numbers[i] == \"five\" || sorted_numbers[i] == \"six\"\
    \ || sorted_numbers[i] == \"seven\" || sorted_numbers[i] == \"eight\" || sorted_numbers[i]\
    \ == \"nine\"){\n\t\t\tresult_numbers += sorted_numbers[i] + \" \";\n\t\t}\n\t\
    \telse if(sorted_numbers[i] == \"zero\"){\n\t\t\tresult_numbers += \"zero \";\n\
    \t\t}\n\t\telse if(sorted_numbers[i] == \"five\"){\n\t\t\tresult_numbers += \"\
    five \";\n\t\t\tcount += 5;\n\t\t}\n\t\telse if(sorted_numbers[i] == \"four\"\
    ){\n\t\t\tresult_numbers += \"four \";\n\t\t\tcount += 4;\n\t\t}\n\t\telse if(sorted_numbers[i]\
    \ == \"nine\"){\n\t\t\tresult_numbers += \"nine \";\n\t\t\tcount += 9;\n\t\t}\n\
    \t\telse if(sorted_numbers[i] == \"seven\"){\n\t\t\tresult_numbers += \"seven\
    \ \";\n\t\t\tcount += 7;\n\t\t}\n\t\telse if(sorted_numbers[i] == \"six\"){\n\t\
    \t\tresult_numbers += \"six \";\n\t\t\tcount += 6;\n\t\t}\n\t\telse if(sorted_numbers[i]\
    \ == \"three\"){\n\t\t\tresult_numbers += \"three \";\n\t\t\tcount += 3;\n\t\t\
    }\n\t\telse if(sorted_numbers[i] == \"two\"){\n\t\t\tresult_numbers += \"two \"\
    ;\n\t\t\tcount += 2;\n\t\t}\n\t\telse if(sorted_numbers[i] == \"one\"){\n\t\t\t\
    result_numbers += \"one \";\n\t\t\tcount += 1;\n\t\t}\n\t\telse if(sorted_numbers[i]\
    \ == \"zero\"){\n\t\t\tresult_numbers += \"zero \";\n\t\t\tcount += 0;\n\t\t}\n\
    \t\telse if(sorted_numbers[i] == \"eight\"){\n\t\t\tresult_numbers += \"eight\
    \ \";\n\t\t\tcount += 8;\n\t\t}\n\t\telse if(sorted_numbers[i] == \"nine\"){\n\
    \t\t\tresult_numbers += \"nine \";\n\t\t\tcount += 9;\n\t\t}\n\t\telse if(sorted_numbers[i]\
    \ == \"five\"){\n\t\t\tresult_numbers += \"five \";\n\t\t\tcount += 5;\n\t\t}\n\
    \t\telse if(sorted_numbers[i] == \"four\"){\n\t\t\tresult_numbers += \"four \"\
    ;\n\t\t\tcount += 4;\n\t\t}\n\t\telse if(sorted_numbers[i] == \"three\"){\n\t\t\
    \tresult_numbers += \"three \";\n\t\t\tcount += 3;\n\t\t}\n\t\telse if(sorted_numbers[i]\
    \ == \"two\"){\n\t\t\tresult_numbers += \"two \";\n\t\t\tcount += 2;\n\t\t}\n\t\
    \telse if(sorted_number", "  return numbers.split(' ').sort().join(' ');\n}\n",
  "\tvar sorted = numbers.replace(/\\s+/g, ' ').split(' ').reverse().map(function(item){\n\
    \t\tif(item != ''){\n\t\t\tif(item.match(/^[02468]$/)) item = parseInt(item.trim())\n\
    \t\t\telse if(item.match(/^[89][02468]$/)) item = parseInt(item.trim()) + 1\n\t\
    \t\telse if(item.match(/^[89]$/)) item = parseInt(item.trim()) - 1\n\t\t\treturn\
    \ item\n\t\t} return ''\n\t})\n\treturn sorted.join(' ')\n}\n", "  numbers = numbers.replace(/\\\
    s+/g, '').split(/\\s+/);\n  var sorted_numbers = numbers.sort();\n  return sorted_numbers.join('\
    \ ');\n}\n", "  var number_list = [];\n  var number_string = numbers.split(\"\
    \ \");\n  for(var i = 0; i < number_string.length; i++){\n    number_list.push(number_string[i]);\n\
    \  }\n  number_list = number_list.sort();\n  var string_output = \"\";\n  for(var\
    \ i = 0; i < number_list.length; i++){\n    string_output += number_list[i];\n\
    \    if(i < number_list.length - 1) string_output += \" \";\n  }\n  return string_output;\n\
    }\n", "\tnumbers = numbers.replace(/\\s/g,'').toLowerCase().replace(/[^0-9]/g,'');\n\
    \tvar numbers_array = numbers.split(' ');\n\tvar smallest = numbers_array[0];\n\
    \tvar largest = numbers_array[numbers_array.length-1];\n\n\tif(smallest === 'zero')\n\
    \t\tsmallest = 'one';\n\telse if(smallest === 'one')\n\t\tsmallest = 'two';\n\t\
    else if(smallest === 'two')\n\t\tsmallest = 'three';\n\telse if(smallest === 'three')\n\
    \t\tsmallest = 'four';\n\telse if(smallest === 'four')\n\t\tsmallest = 'five';\n\
    \telse if(smallest === 'five')\n\t\tsmallest = 'six';\n\telse if(smallest ===\
    \ 'six')\n\t\tsmallest = 'seven';\n\telse if(smallest === 'seven')\n\t\tsmallest\
    \ = 'eight';\n\telse if(smallest === 'eight')\n\t\tsmallest = 'nine';\n\telse\
    \ if(smallest === 'nine')\n\t\tsmallest = 'zero';\n\n\tif(largest === 'nine')\n\
    \t\tlargest = 'eight';\n\telse if(largest === 'eight')\n\t\tlargest = 'seven';\n\
    \telse if(largest === 'seven')\n\t\tlargest = 'six';\n\telse if(largest === 'six')\n\
    \t\tlargest = 'five';\n\telse if(largest === 'five')\n\t\tlargest = 'four';\n\t\
    else if(largest === 'four')\n\t\tlargest = 'three';\n\telse if(largest === 'three')\n\
    \t\tlargest = 'two';\n\telse if(largest === 'two')\n\t\tlargest = 'one';\n\telse\
    \ if(largest === 'one')\n\t\tlargest = 'zero';\n\n\tnumbers_array.sort(function(a,\
    \ b){\n\t\treturn a - b;\n\t});\n\treturn numbers_array.join(' ');\n}\n", "  var\
    \ numbers_array = numbers.split(\" \");\n  numbers_array.sort(function(a, b){\n\
    \    var x = +a;\n    var y = +b;\n    return x - y;\n  });\n  return numbers.join(\"\
    \ \");\n}\n", "  var output = '';\n  var numbers = numbers.split(' ');\n  var\
    \ narr = [];\n\n  for (var i = 0; i < numbers.length; i++) {\n    var val = numbers[i];\n\
    \    if (val === \"zero\") {\n      narr.push(0);\n    }\n    else if (val ===\
    \ \"one\") {\n      narr.push(1);\n    }\n    else if (val === \"two\") {\n  \
    \    narr.push(2);\n    }\n    else if (val === \"three\") {\n      narr.push(3);\n\
    \    }\n    else if (val === \"four\") {\n      narr.push(4);\n    }\n    else\
    \ if (val === \"five\") {\n      narr.push(5);\n    }\n    else if (val === \"\
    six\") {\n      narr.push(6);\n    }\n    else if (val === \"seven\") {\n    \
    \  narr.push(7);\n    }\n    else if (val === \"eight\") {\n      narr.push(8);\n\
    \    }\n    else if (val === \"nine\") {\n      narr.push(9);\n    }\n    else\
    \ {\n      console.log(\"Not a number.\");\n    }\n  }\n\n  for (var i = 0; i\
    \ < narr.length; i++) {\n    var cur = parseInt(narr[i]);\n    if (i > 0) {\n\
    \      for (var j = 0; j < i; j++) {\n        if (cur > narr[j]) {\n         \
    \ narr[j + 1] = narr[j];\n        }\n        else {\n          break;\n      \
    \  }\n      }\n      narr[j + 1] = cur;\n    }\n    else {\n      narr[0] = cur;\n\
    \    }\n  }\n\n  output = narr.join(' ');\n  return output;\n}\n", "  if(typeof\
    \ numbers === 'string'){\n    numbers = numbers.split(\" \");\n  }\n\n  if(typeof\
    \ numbers[0] === 'string'){\n    numbers = numbers.map(function(n){\n      return\
    \ n.split('');\n    });\n  }\n\n  var numbers_sorted = numbers.sort(function(a,\
    \ b){\n    var number_a = a.join('');\n    var number_b = b.join('');\n    return\
    \ number_a.localeCompare(number_b);\n  });\n\n  return numbers_sorted.join('');\n\
    }\n", "  if(numbers.length == 0) return \"\";\n  return numbers.split(' ').sort().join('\
    \ ');\n}\n", "\tvar numbers_array=numbers.split(\" \");\n\tvar sorted_numbers=\"\
    \";\n\tvar current_number=numbers_array[0];\n\tfor(var x=0;x<numbers_array.length;x++){\n\
    \t\tif(x!=0){\n\t\t\tif(numbers_array[x]>current_number){\n\t\t\t\tcurrent_number=numbers_array[x];\n\
    \t\t\t}\n\t\t}\n\t}\n\tfor(var x=0;x<numbers_array.length;x++){\n\t\tif(x!=0){\n\
    \t\t\tif(numbers_array[x]<current_number){\n\t\t\t\tsorted_numbers+=\" \" + numbers_array[x];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn sorted_numbers.trim();\n}\n", "  var valid_numbers\
    \ = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n\
    \  var numbers_array = numbers.split(' ');\n  \n  var sorted_array = [];\n  var\
    \ current_number_index = 0;\n  \n  for (var i = 0; i < numbers_array.length; i++){\n\
    \    if (valid_numbers.indexOf(numbers_array[i]) !== -1){\n      sorted_array.push(numbers_array[i]);\n\
    \      current_number_index++;\n    }\n  }\n  \n  if (current_number_index !=\
    \ valid_numbers.length){\n    alert('Not all numbers entered were valid!');\n\
    \    return false;\n  }\n  \n  return sorted_array.join(' ');\n}\n", "    numbers\
    \ = numbers.toString().toLowerCase().replace(/\\s+/g,\"\");\n    var pattern =\
    \ /\\d+/g;\n    var numbers_array = numbers.match(pattern);\n\n    numbers_array.sort(function(a,\
    \ b){\n        if( a < b ) return -1;\n        if( a > b ) return 1;\n       \
    \ return 0;\n    });\n    \n    return numbers.replace(pattern,numbers_array.join(''));\n\
    }\n", "    return numbers.toString().replace(/\\s+/g,\"\").replace(/\\b([1-9]\\\
    d)\\b/g, \"$1 \").replace(/^\\s+|\\s+$/g,\"\").replace(/(\\s+)(\\d)(\\1)/, \"\
    $2$3 \").trim();\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,string,javascript\
    \ |>\n<code>\nconst input = \"one two three four five six seven eight nine\";\n\
    const output = \"one two three four five six seven eight nine\";\nconst regex\
    \ = /^(?=.*?(one|two|three|four|five|six|seven|eight|nine))/g;\n\nconst results\
    \ = [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    [2, 3, 4, 5, 6, 7, 8, 9],\n    [3,\
    \ 4, 5, 6, 7, 8, 9],\n    [4, 5, 6, 7, 8, 9],\n    [5, 6, 7, 8, 9],\n    [6, 7,\
    \ 8, 9],\n    [7, 8, 9],\n    [8, 9]\n];\n", "  return numbers.split(\" \").sort().join(\"\
    \ \");\n}\n", "\tvar words = numbers.split(\" \");\n\tvar numbers = [];\n\tfor\
    \ (var i=0;i<words.length;i++){\n\t\tnumbers.push(parseInt(words[i]));\n\t}\n\t\
    numbers.sort();\n\tvar s = numbers.join(\" \");\n\treturn s;\n}\n", "    var result\
    \ = '';\n    numbers.split(' ').forEach(function(number){\n        switch(number.toLowerCase()){\n\
    \            case 'zero':\n                result += \"0\";\n                break;\n\
    \            case 'one':\n                result += \"1\";\n                break;\n\
    \            case 'two':\n                result += \"2\";\n                break;\n\
    \            case 'three':\n                result += \"3\";\n               \
    \ break;\n            case 'four':\n                result += \"4\";\n       \
    \         break;\n            case 'five':\n                result += \"5\";\n\
    \                break;\n            case 'six':\n                result += \"\
    6\";\n                break;\n            case 'seven':\n                result\
    \ += \"7\";\n                break;\n            case 'eight':\n             \
    \   result += \"8\";\n                break;\n            case 'nine':\n     \
    \           result += \"9\";\n                break;\n            default:\n \
    \               result += \"0\";\n                break;\n        }\n    });\n\
    \    return result;\n}\n</textarea>\n<style type='text/css'>\n.container {\n \
    \   border: 2px dashed darkorange;\n    border-radius: 5px;\n    background: white;\n\
    }\ntextarea {\n    font-family: courier new;\n    font-size: 1.2em;\n}\n</style>\n\
    <div class='container'>\n  <h3>Demo</h3>\n  When you press 'Run' you will be prompted\
    \ to enter a number. Enter all digits to be sorted.\n  <br/>\n  If you would like\
    \ to learn more about how the JavaScript sorting algorithm works, I highly recommend\
    \ reading this article:\n  <a href=\"http://en.wikipedia.org/wiki/Timsort\">Timsort\
    \ Wikipedia article</a>\n\n  <br/>\n  <input id='input_list' type='text' placeholder='Enter\
    \ numbers to be sorted' size='75'>\n\n  <br/>\n  <button id='sort_button' type='button'>Sort</button>\n\
    </div>\n<script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js'></script>\n\
    <script type='text/javascript' src='http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js'></script>\n\
    <script type='text/javascript' src='http://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone-min.js'></script>\n\
    <script type='text/javascript' src='../javascript/ch05-number-sort.js'></script>\n\
    <script type='text/javascript'>\n$('document').ready(function(){\n\n  var sortButton\
    \ = $('#sort_button');\n  var inputList = $('#input_list');\n  var result = $('#result');\n\
    \  var originalInputArray = inputList.val().split(' ');\n  var originalInputArray\
    \ = _.map(originalInputArray, function(item){\n    return item.replace(/[^0-9]/g,\
    \ '');\n  });\n  var sortedInputArray = originalInputArray.slice();\n  var startAt\
    \ = 0;\n  var swap;\n\n  sortButton.on('click", "    var sorted_numbers = numbers.split(\"\
    \ \");\n    sorted_numbers.sort(function(a, b){\n        if(a > b) return 1;\n\
    \        if(a < b) return -1;\n        return 0;\n    });\n    var sorted_string\
    \ = sorted_numbers.join(\" \");\n    return sorted_string;\n}\n", "  return numbers.split('\
    \ ')\n            .map(Number)\n            .sort(function(a, b){return a-b})\n\
    \            .join(' ');\n}\n", "  var new_str = \"\";\n  var tmp_num = numbers.split(\"\
    \ \");\n  var len = tmp_num.length;\n  for(var i = 0; i < len; i += 1) {\n   \
    \ if(parseInt(tmp_num[i]) > 9) {\n      new_str = tmp_num[i] + \" \" + new_str;\n\
    \    } else {\n      new_str += tmp_num[i];\n    }\n  }\n  return new_str;\n}\n",
  "\tvar numbers_str = numbers.split(\" \");\n\tvar numbers_sorted = [];\n\tfor(var\
    \ i=0;i<numbers_str.length;i++){\n\t\tnumbers_sorted[i] = parseInt(numbers_str[i]);\n\
    \t}\n\tnumbers_sorted.sort();\n\tvar final_str = numbers_sorted.join(\" \");\n\
    \treturn final_str;\n}", "  var numbers_array = numbers.split(\" \");\n  var sorted_numbers\
    \ = \"\";\n  for(var i = 0; i < numbers_array.length; i++){\n    var current_number\
    \ = parseInt(numbers_array[i]);\n    if(sorted_numbers !=\"\"){\n      sorted_numbers\
    \ += \" \";\n    }\n    sorted_numbers += current_number;\n  }\n  return sorted_numbers;\n\
    }\n", "\tvar output = numbers.split(\" \");\n\tvar sortedNumbers = \"\";\n\tvar\
    \ nDigits = Number.MAX_VALUE;\n\tvar j = 0;\n\t\n\tfor(var i=0; i<output.length;\
    \ i++){\n\t\t\n\t\tvar nStr = output[i];\n\t\t\n\t\tvar nNum = Number(nStr);\n\
    \t\tif(nNum == Infinity){\n\t\t\tnNum = 0;\n\t\t}\n\t\t\n\t\tif(nNum == 0){\n\t\
    \t\tsortedNumbers += nStr;\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tvar nDigit = Math.floor(nNum);\n\
    \t\t\n\t\tif(j > 0){\n\t\t\tnDigit += j;\n\t\t}\n\t\t\n\t\tif(sortedNumbers !=\
    \ \"\"){\n\t\t\tnDigit -= 1;\n\t\t}\n\t\t\n\t\tif(j > nDigits){\n\t\t\tj = 0;\n\
    \t\t}\n\t\t\n\t\tj += 1;\n\t\tsortedNumbers += nStr;\n\t}\n\t\n\treturn sortedNumbers;\n\
    }\n\n", "  var numberlist = numbers.split(\" \").map(Number);\n  numberlist.sort(function(a,b){return\
    \ b-a});\n  return numberlist.join(\" \");\n}\n", "  var i, s, sorted;\n  \n \
    \ s = s.split(\" \");\n  \n  sorted = [];\n  \n  for (i=0; i<s.length; i++) {\n\
    \    if (i<s.length-1) {\n      if (parseFloat(s[i])>parseFloat(s[i+1])) {\n \
    \       sorted.push(s[i]);\n        sorted.push(s[i+1]);\n      }\n      else\
    \ {\n        sorted.push(s[i+1]);\n        sorted.push(s[i]);\n      }\n    }\n\
    \    else {\n      if (parseFloat(s[i])>parseFloat(s[0])) {\n        sorted.push(s[i]);\n\
    \      }\n      else {\n        sorted.push(s[0]);\n      }\n    }\n  }\n  \n\
    \  return sorted.join(\" \");\n}", "    var n = numbers.split(' ');\n    var string\
    \ = ''; //The result of the numbers in the order they were entered\n    for(var\
    \ i = 0; i < n.length; i++){\n        var s = n[i].toString();\n        string\
    \ += (i==0) ? s.charAt(0).toUpperCase() : s.charAt(0).toLowerCase();\n       \
    \ for(var j = 0; j < s.length; j++){\n            string += s.charAt(j);\n   \
    \     }\n    }\n    return string;\n}\n</code>\n<|/ a dscore=0 tags=sorting,javascript,string\
    \ |>\n<| c |>\nThanks for the help, this was the kind of solution I was looking\
    \ for but didn't think to go about it that way.\n<|/ c |>\n<| a tags=sorting,javascript,string\
    \ |>\nHere's a solution that uses ES6 string spread syntax to generate an array\
    \ of all valid combinations and sort that array with Array#sort with String#localeCompare.\
    \ I've included a couple of helper functions to deal with leading zeroes and to\
    \ deal with the edge case of all numbers being zero.\n\n<code>", "    numbers\
    \ = numbers.split(\" \");\n    var i = numbers.length - 1;\n    var output = [];\n\
    \    for(; i > 0; i--){\n        var current = numbers[i];\n        if(numbers.indexOf(current,\
    \ 0) === -1){\n            numbers.splice(i, 0, current);\n            console.log(numbers);\n\
    \            break;\n        }\n    }\n    return numbers.join(\" \");\n}", " \
    \ return numbers.replace(/[^0-9]/g, '').split(' ').sort().join(' ');\n}\n", " \
    \ var re = new RegExp(/(-?\\d+)/g);\n  return numbers.replace(re, function(full,\
    \ first){\n    if (first === '-') {\n      return first;\n    }\n    var s = Number(full),\
    \ t = Number(first);\n    return (s < t) ? -1 : 1;\n  });\n}\n", "    var new_string\
    \ = numbers.split(\" \");\n    new_string.sort(function(a, b){return b-a});\n\
    \    return new_string.join(\" \");\n}\n", "  let nums = numbers.trim().split(/\\\
    s+/)\n  let sorted = nums.sort((a,b) => a-b)\n  return sorted.join(' ')\n}\n",
  "    //Create an array from the input string\n    let numArray = numbers.split(\"\
    \ \")\n    //Sort the array from smallest to largest\n    numArray.sort(function(a,\
    \ b){return a - b})\n    //Create a string from the sorted array and return it\n\
    \    return numArray.join()\n}\n", "    var numbers_split = numbers.split(\" \"\
    );\n    numbers_split.sort(function(a, b){\n        return a > b;\n    });\n \
    \   return numbers.replace(/[^0-9]/g, \"\").concat(\" \" + numbers_split.join(\"\
    \ \"));\n}\n", "  var numbers_split=numbers.split(\" \");\n  var numbers_sort=[];\n\
    \  for(var i=0; i < numbers_split.length; i++){\n    if(numbers_split[i]==\"nine\"\
    ){\n      numbers_split.splice(i, 1);\n    }\n  }\n  for(i=0; i < numbers_split.length;\
    \ i++){\n    numbers_sort.push(numbers_split[i]);\n  }\n  numbers_sort=numbers_sort.sort();\n\
    \  for(var i=0; i < numbers_sort.length; i++){\n    numbers_sort[i]=numbers_sort[i].charAt(0).toUpperCase()+numbers_sort[i].substring(1);\n\
    \  }\n  numbers=\"\";\n  for(var i=0; i < numbers_sort.length; i++){\n    numbers=numbers+numbers_sort[i]+\"\
    \ \";\n  }\n  return numbers;\n}\n", "  var n = numbers.split(' ');\n  var s =\
    \ \"\";\n  var i = 0;\n  var j = 0;\n  for(; i < n.length; i++){\n    var n =\
    \ n[i].trim();\n    if(!n || n.length !== 1) continue;\n    var digits = n.split('');\n\
    \    var max = 0;\n    var min = 99;\n    for(j = 0; j < digits.length; j++){\n\
    \      var n = Number(digits[j]);\n      if(n){\n        min = Math.min(min, n);\n\
    \        max = Math.max(max, n);\n      }\n    }\n    s += (min === max && min\
    \ < 9) ? min : max;\n  }\n  return s;\n}\n", "\tvar numbers = numbers.split(\"\
    \ \");\n\tvar numbers_sorted = [];\n\tnumbers.forEach(function(number){\n\t\t\
    number = number.split(\"\");\n\t\tnumber.sort();\n\t\tnumbers_sorted = numbers_sorted.concat(number);\n\
    \t});\n\tnumbers_sorted = numbers_sorted.join(\" \");\n\treturn numbers_sorted;\n\
    }", "    let sorted_numbers = numbers.split(\" \").sort().join(\" \");\n    return\
    \ sorted_numbers;\n}\n", "  var sorted_string = \"\", sorted_numbers = sort_numbers_sort(numbers.split(\"\
    \ \")), i = 0, numbers_length = numbers.length;\n  for(; i < numbers_length; i++){\n\
    \    sorted_string += sorted_numbers[i] + \" \";\n  }\n  return sorted_string;\n\
    }\n", "  // Declare a variable to hold the final string and initialize it to an\
    \ empty string\n  var string = \"\";\n  \n  // Iterate over the string and add\
    \ each element to the final string as long as it is \n  // not equal to the null\
    \ character ('\\0')\n  for(var i=0; i < numbers.length; i++){\n    if(numbers[i]\
    \ != null){\n      string += numbers[i];\n    }\n  }\n  // Sort the string from\
    \ smallest to largest\n  string.sort();\n  // Return the string with the numbers\
    \ sorted\n  return string;\n}\n</code>\nHope this helps!\n<|/ a tags=javascript,sorting,arrays\
    \ dscore=1 |>\n<| c |>\nGood try, but how does this work? You only sort numbers,\
    \ not characters. How would you sort letters?\n<|/ c |>\n<| c |>\nThis should\
    \ probably just be a comment to the question instead of an answer...\n<|/ c |>\n\
    <| c |>\nGood call. I've added an explanation to my answer.\n<|/ c |>\n<| a tags=javascript,sorting,arrays\
    \ |>\nI wrote a solution that doesn't require you to redefine Array prototype\n\
    <code>", "    var sorted = numbers.split(\" \").sort();\n    var final = sorted.join(\"\
    \ \");\n    return final;\n}\n", "  var arr = [];\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    if(arr.indexOf(numbers[i]) === -1){\n      arr.push(numbers[i]);\n\
    \    }\n  }\n  return arr.sort().join(' ');\n}\n", "\tvar n = numbers.split('\
    \ ');\n\treturn n.sort().join(' ');\n}\n", "    return numbers.split(\" \").sort().join(\"\
    \ \");\n}\n</code>\n<|/ a |>\n<| c |>\nThis is not correct, please re-read OP's\
    \ question which clearly states \"Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\" The accepted answer will result\
    \ in \"one two three\" which is not what the OP wants.\n<|/ c |>\n<| c |>\n: I\
    \ agree, your comment is incorrect.  I apologize, I have corrected the answer.\n\
    <|/ c |>\n<| a tags=python dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n \
    \ numbers = numbers.split()\n  new_nums = []\n  for n in numbers:\n    new_nums.append({'n':\
    \ int(n), 'l': [n for n in numbers],})\n  new_nums = map(lambda x: (x['n'], x['l']),\
    \ new_nums)\n  new_nums.sort(key=lambda x:(x[1],x[0]))\n  return ' '.join([str(v)\
    \ for v in new_nums])\n\nprint sort_numbers('one three five')\n</code>\noutput\n\
    <code>\none three five\n</code>\n<|/ a |>\n<| c |>\nThis is not correct, please\
    \ re-read OP's question which clearly states \"Input is a space-delimited string\
    \ of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\" The accepted\
    \ answer will result in \"one two three\" which is not what the OP wants.\n<|/\
    \ c |>\n<| c |>\nThank you for the correction.  I updated my answer to fix the\
    \ problem.\n<|/ c |>\n<| a tags=python |>\n<code>\nimport re\ndef sort_number(number):\n\
    \    re_num_pattern = re.compile('(^|\\s)(\\d)+(\\s)+(\\d)+(\\s)+(\\d)+(\\s)+(\\\
    d)+(\\s)+(\\d)+(\\s)+(\\d)+(\\s)+(\\d)+(\\s)+(\\d)+(\\s)+(\\d)+(\\s)+(\\d)+(\\\
    s)+(\\d)+(\\s)+(\\d)+(\\s)+(\\d)+(\\s)+(\\d)+(\\s)+(\\d)+(\\s)+(\\d)+(\\s)+(\\\
    d)+(\\s)+(\\d)+(\\s)+(\\d)+(\\s)+(\\d)", "  var numbers_array = numbers.split(\"\
    \ \");\n  numbers_array.sort(function(a, b){\n     var number_a = parseInt(a);\n\
    \     var number_b = parseInt(b);\n     return number_a - number_b; //Sort from\
    \ smallest to largest\n  });\n  return numbers_array.join(\" \"); //Return the\
    \ result\n}\n", "  var digits=numbers.split(\" \");\n  var numbers=[];\n  for\
    \ (var i=0;i<digits.length;i++){\n    numbers[i]=parseInt(digits[i])\n  }\n  numbers.sort(function(a,b){\n\
    \    return a-b\n  });\n  return numbers.join(\" \")\n}\n", "    numbers = numbers.split(/\\\
    s+/);\n    var new_numbers = [];\n    numbers.forEach(function(num){\n       \
    \ num = parseInt(num, 10);\n        if(num > 9){\n            new_numbers.push(num);\n\
    \        }\n    });\n    return new_numbers.sort().join(\" \");\n}\n</code>\n\
    <|/ a tags=javascript,arrays dscore=1 |>\n<| a |>\nI took Kai's answer and modified\
    \ it so it works with an array of any size:\n<code>", "  numbers = numbers.split(\"\
    \ \");\n  numbers.sort(function(a, b){\n    var aNum = parseInt(a, 10);\n    var\
    \ bNum = parseInt(b, 10);\n    return bNum - aNum;\n  });\n  numbers.join(\" \"\
    );\n}\n", "    var valid_options = 'zero one two three four five six seven eight\
    \ nine'.split(' ');\n    var result = '';\n    var numbers_array = numbers.split('\
    \ ');\n    for (var i = 0; i < numbers_array.length; i++){\n        var number\
    \ = numbers_array[i];\n        if (valid_options.indexOf(number) >= 0){\n    \
    \        result += number + ' ';\n        }\n    }\n    return result.trim();\n\
    }\n</code>\n<|/ a tags=string,jquery,sorting,javascript |>\n<| a |>\n<code>\n\
    var str = 'three one five';\nvar sorted_str = str.split(' ').sort().join(' ');\n\
    </code>\n<|/ a dscore=4 tags=string,jquery,sorting,javascript |>\n<| c |>\nThis\
    \ doesn't work for me. Sorts asc instead of desc\n<|/ c |>\n<| c |>\n`'azerty'.split('').sort().join('')`\
    \ returns `'zabc'`\n<|/ c |>\n<| a dscore=4 |>\nThis is how I did it:\n<code>",
  "  var numbers_arr = numbers.split(\" \");\n  numbers_arr.sort(function(a, b){\n\
    \    var a_num = Number(a);\n    var b_num = Number(b);\n    if( a_num < b_num\
    \ ){\n      return -1;\n    } else if( a_num > b_num ){\n      return 1;\n   \
    \ } else {\n      return 0;\n    }\n  });\n  return numbers_arr.join(\" \");\n\
    }\n", "\tvar number_list = numbers.split(\" \").map(function(n){\n\t\treturn +n;\
    \ \n\t});\n\tnumber_list.sort(function(a, b){\n\t\treturn a-b;\n\t});\n\treturn\
    \ number_list.join(\" \");\n}", "  var sorted = numbers.split(\" \");\n  sorted.sort(function(a,\
    \ b) {\n    return a - b;\n  });\n  return sorted.join(\" \");\n}\n", "    var\
    \ nums = numbers.split(' ');\n    nums.sort(function(a, b){\n        var numA=parseInt(a),\
    \ numB=parseInt(b);\n        return numA-numB;\n    });\n    return nums.join('\
    \ ');\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI don't see how this answer is\
    \ any better than the one by Kevin\n<|/ c |>\n<| c |>\nYeah, that answer was posted\
    \ over 2 years ago. :-)\n<|/ c |>\n<| a tags=algorithm,javascript,sorting |>\n\
    <code>", "    var new_numbers = numbers.split(\" \");\n    new_numbers.sort(function(a,b){\n\
    \        var intA = parseInt(a, 10);\n        var intB = parseInt(b, 10);\n  \
    \      return intB - intA;\n    });\n    return new_numbers.join(\" \");\n}\n",
  "    var numbers_array;\n    var i;\n    var temp_str = \"\";\n    var temp_int;\n\
    \    var temp_array_length = numbers.length;\n\n    numbers_array = numbers.split(\"\
    \ \");\n\n    for(i = 0; i < numbers_array.length; i++){\n        temp_str = numbers_array[i].trim();\n\
    \        temp_int = parseInt(temp_str);\n\n        if(isNaN(temp_int === false)){\n\
    \            temp_int = temp_int % 10;\n        }\n        temp_str += \" \" +\
    \ temp_int;\n    }\n\n    return temp_str;\n}\n", "  let numberArray = numbers.split(\"\
    \ \");\n  let sortedNumbers = numberArray\n    .map((number) => parseInt(number))\n\
    \    .sort((a, b) => a - b)\n    .map((number) => number.toString());\n  return\
    \ sortedNumbers.join(\" \");\n}\n", "    numbers = numbers.split(\" \");\n   \
    \ numbers.sort();\n    return numbers.join(\" \");\n}\n", "  return numbers.toString().split('\
    \ ').sort().join(' ')\n}\n\n", "  var numbers_array = numbers.split(\" \");\n\
    \  numbers_array.sort(function(a, b){\n    return a - b;\n  });\n  var sorted_numbers\
    \ = numbers_array.join(\" \");\n  return sorted_numbers;\n}", "  var numberArr\
    \ = numbers.split(\" \");\n  var sortedArr = numberArr.sort(function(a, b){\n\
    \    return a - b;\n  });\n  return sortedArr.join(\" \");\n}\n", "    // Create\
    \ an array to hold the sorted number\n    let num_array = [];\n\n    // Split\
    \ the string into an array on spaces.\n    numbers = numbers.split(' ');\n\n \
    \   // For each number in the string, add it to the array\n    // with some extra\
    \ logic to keep it sorted from smallest to largest\n    for (let num of numbers)\
    \ {\n        let num_val = Number(num);\n\n        // If it's a valid number,\
    \ then add it to the array.\n        if (Number.isInteger(num_val)){\n       \
    \     // If the number is smaller than the smallest number in the array,\n   \
    \         // then update the smallest number in the array\n            if (num_val\
    \ < num_array[0]){\n                num_array[0] = num_val;\n            }\n \
    \           // If the number is larger than the largest number in the array,\n\
    \            // then update the largest number in the array\n            else\
    \ if (num_val > num_array[1]){\n                num_array[1] = num_val;\n    \
    \        }\n            // If it's the same as the smallest number in the array\n\
    \            // then don't add it again\n            else{\n                continue;\n\
    \            }\n        }\n        // If it's not a valid number, then just skip\
    \ it\n        else{\n            continue;\n        }\n    }\n\n    // Return\
    \ a string of the array elements separated with spaces\n    return num_array.join('\
    \ ');\n}\n</code>\nI hope this helps.\n<|/ a tags=sorting,javascript,arrays |>\n\
    <| c |>\nWhat does this have to do with the question?\n<|/ c |>\n<| a |>\n<code>",
  "  let sortedNumbers = []\n  let nums = numbers.split(' ');\n  let maxNumbers =\
    \ parseInt(nums[0]);\n  nums.shift();\n  nums.forEach(function(number){\n    if(parseInt(number)\
    \ > maxNumbers){\n      maxNumbers = parseInt(number);\n    }\n  })\n  nums.forEach(function(number){\n\
    \    sortedNumbers.push(parseInt(number));\n  });\n  sortedNumbers.sort(function(a,\
    \ b){\n    return a > b ? 1 : a < b ? -1 : 0;\n  });\n  sortedNumbers.forEach(function(number){\n\
    \    nums.push(number);\n  });\n  return nums.join(' ');\n}\n", "  var output\
    \ = '';\n  var nums = numbers.trim().split(\" \");\n  var len = nums.length;\n\
    \  if(len > 0){\n    for(var i = 0; i < len; i++){\n      if(nums[i] === 'one'\
    \ || nums[i] === 'two' || nums[i] === 'three' || nums[i] === 'four' || nums[i]\
    \ === 'five' || nums[i] === 'six' || nums[i] === 'seven' || nums[i] === 'eight'\
    \ || nums[i] === 'nine'){\n        nums.splice(i, 1);\n        nums.splice(i -\
    \ 1, 2, nums[i]);\n        output += nums.join(\" \");\n        i += 1;\n    \
    \  }\n    }\n  }\n  return output.trim();\n}\n", "  let nums = numbers.split('\
    \ ');\n  let final = [];\n  for (let i = 0; i < nums.length; i++){\n    nums[i]\
    \ = parseInt(nums[i], 10);\n  }\n  for (let i = 1; i <= 9; i++){\n    if (nums.includes(i)){\n\
    \      final.push(i);\n      nums.splice(nums.indexOf(i), 1);\n    }\n  }\n  return\
    \ final.join(' ');\n}\n", "  numbers = numbers.split(\" \");\n  \n  //Sort from\
    \ smallest to largest\n  numbers.sort(function(a,b){\n    return a-b;\n  });\n\
    \  \n  //Return string\n  return numbers.join(\" \");\n}\n", "\tnumbers = numbers.split(\"\
    \ \");\n\tnumbers = numbers.sort();\n\treturn numbers.join(\" \");\n}\n", "  var\
    \ result = \"\";\n  var splitted = numbers.split(\" \");\n  for(var i = 0; i <\
    \ splitted.length; i++){\n    var number = splitted[i];\n    if(i > 0 && number\
    \ > splitted[i - 1]){\n      result += \" \" + number;\n    } else if(!isNaN(parseInt(number,\
    \ 10))){\n      result += \" \" + number;\n    }\n  }\n  return result.trim();\n\
    }\n", "\tvar sorted = numbers.replace(/\\s+/g, '').split(' ');\n\tsorted = sorted.sort(function(a,b){\n\
    \t\treturn sort_number_string(a,b);\n\t});\n\treturn sorted.join(' ');\n}", "\t\
    var num_arr = numbers.split(\" \");\n\t\n\tnum_arr.sort(function(a, b){\n\t\t\
    if(a>b) return 1;\n\t\tif(a<b) return -1;\n\t\treturn 0;\n\t});\n\t\n\tvar string\
    \ = \"\";\n\tfor(var i=0;i<num_arr.length;i++)\n\t\tstring += num_arr[i]+\" \"\
    ;\n\t\n\treturn string;\n}\n", "    if(!numbers) return \"\";\n    return numbers.trim().split(\"\
    \ \").sort().join(\" \");\n}\n</code>\n<|/ a dscore=2 tags=javascript,numbers,string\
    \ |>\n<| a dscore=1 |>\nI have written a function which would sort out all numbers\
    \ and then return it in an array:\n<code>", "    var output = \"\";\n    numbers\
    \ = numbers.split(' ');\n    numbers = numbers.filter(function(n){\n        return\
    \ n.match(/^[0-9]+$/);\n    });\n    numbers.sort(function(a, b){\n        return\
    \ a - b;\n    });\n    numbers.forEach(function(n){\n        output += \" \" +\
    \ n;\n    });\n    return output;\n}\n", "  var numArray = numbers.split(\" \"\
    );\n  var returnArray = [];\n  var smallest = null;\n  for(var i=0; i<numArray.length;\
    \ i++){\n    if (smallest == null || numArray[i].length < smallest.length){\n\
    \      smallest = numArray[i];\n    }\n  }\n  \n  var smallestNumArray = numArray.filter(function(item){\n\
    \    return item == smallest;\n  });\n  for(var i=0; i<smallestNumArray.length;\
    \ i++){\n    returnArray.push(smallestNumArray[i]);\n  }\n  for(var i=returnArray.length\
    \ - 1; i>=0; i--){\n    returnArray.unshift(returnArray[i-1]);\n  }\n  return\
    \ returnArray.join(\" \");\n}\n", "  var parts = numbers.split(/\\s+/);\n  parts\
    \ = parts.sort(function (a, b) {\n    return a - b;\n  });\n  return parts.join(\"\
    \ \");\n}\n", "\tvar numbers = numbers.split(\" \");\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tvar num = numbers[i];\n\t\tnum = parseInt(num);\n\t\tif(i == 0){\n\
    \t\t\tnumbers.splice(0, 1);\n\t\t}\n\t\tif(num < numbers[i-1]){\n\t\t\tnumbers.splice(i,\
    \ 0, num);\n\t\t}else{\n\t\t\tnumbers.splice(i, 0, num - 1);\n\t\t}\n\t}\n\treturn\
    \ numbers.join(\" \");\n}\n", "  var numbers=numbers.split(' ');\n  var smallest=numbers[0];\n\
    \  var largest=numbers[0];\n  var smallest_len=numbers.length;\n  var i=0;\n \
    \ while(i<numbers.length){\n    smallest=numbers[i];\n    largest=numbers[i];\n\
    \    i++;\n    while(i<numbers.length){\n      if(numbers[i]<smallest && numbers[i]!=smallest){\n\
    \        smallest=numbers[i];\n      }\n      if(numbers[i]>largest && numbers[i]!=largest){\n\
    \        largest=numbers[i];\n      }\n      i++;\n    }\n    numbers[i]=smallest;\n\
    \    numbers[i]=largest;\n  }\n  return numbers.join(' ');\n}\n", "    if(numbers\
    \ === undefined){\n        numbers = \"zero\";\n    }\n    numbers = numbers.split(\"\
    \ \");\n    numbers.sort(function(a, b){\n        return a - b;\n    });\n   \
    \ return numbers.join(\" \");\n}\n</code>\nThe sort_numbers function can be called\
    \ like so:\n<code>\nconst number_string = \"one two three four five six seven\
    \ eight nine\";\nconst sorted_numbers = sort_numbers(number_string);", "  return\
    \ numbers.replace(/\\s+/g, '').split(' ')\n    .sort()\n    .join(' ');\n}\n",
  "  if(numbers.indexOf(\"zero\")>=0) numbers.splice(numbers.indexOf(\"zero\"),1);\n\
    \  if(numbers.indexOf(\"one\")>=0) numbers.splice(numbers.indexOf(\"one\"),1);\n\
    \  if(numbers.indexOf(\"two\")>=0) numbers.splice(numbers.indexOf(\"two\"),1);\n\
    \  if(numbers.indexOf(\"three\")>=0) numbers.splice(numbers.indexOf(\"three\"\
    ),1);\n  if(numbers.indexOf(\"four\")>=0) numbers.splice(numbers.indexOf(\"four\"\
    ),1);\n  if(numbers.indexOf(\"five\")>=0) numbers.splice(numbers.indexOf(\"five\"\
    ),1);\n  if(numbers.indexOf(\"six\")>=0) numbers.splice(numbers.indexOf(\"six\"\
    ),1);\n  if(numbers.indexOf(\"seven\")>=0) numbers.splice(numbers.indexOf(\"seven\"\
    ),1);\n  if(numbers.indexOf(\"eight\")>=0) numbers.splice(numbers.indexOf(\"eight\"\
    ),1);\n  if(numbers.indexOf(\"nine\")>=0) numbers.splice(numbers.indexOf(\"nine\"\
    ),1);\n  if(numbers.indexOf(\"ten\")>=0) numbers.splice(numbers.indexOf(\"ten\"\
    ),1);\n  if(numbers.indexOf(\"eleven\")>=0) numbers.splice(numbers.indexOf(\"\
    eleven\"),1);\n  if(numbers.indexOf(\"twelve\")>=0) numbers.splice(numbers.indexOf(\"\
    twelve\"),1);\n  if(numbers.indexOf(\"thirteen\")>=0) numbers.splice(numbers.indexOf(\"\
    thirteen\"),1);\n  if(numbers.indexOf(\"fourteen\")>=0) numbers.splice(numbers.indexOf(\"\
    fourteen\"),1);\n  if(numbers.indexOf(\"fifteen\")>=0) numbers.splice(numbers.indexOf(\"\
    fifteen\"),1);\n  if(numbers.indexOf(\"sixteen\")>=0) numbers.splice(numbers.indexOf(\"\
    sixteen\"),1);\n  if(numbers.indexOf(\"seventeen\")>=0) numbers.splice(numbers.indexOf(\"\
    seventeen\"),1);\n  if(numbers.indexOf(\"eighteen\")>=0) numbers.splice(numbers.indexOf(\"\
    eighteen\"),1);\n  if(numbers.indexOf(\"nineteen\")>=0) numbers.splice(numbers.indexOf(\"\
    nineteen\"),1);\n  if(numbers.indexOf(\"twenty\")>=0) numbers.splice(numbers.indexOf(\"\
    twenty\"),1);\n  if(numbers.indexOf(\"twentyone\")>=0) numbers.splice(numbers.indexOf(\"\
    twentyone\"),1);\n  if(numbers.indexOf(\"twentytwo\")>=0) numbers.splice(numbers.indexOf(\"\
    twentytwo\"),1);\n  if(numbers.indexOf(\"twentythree\")>=0) numbers.splice(numbers.indexOf(\"\
    twentythree\"),1);\n  if(numbers.indexOf(\"twentyfour\")>=0) numbers.splice(numbers.indexOf(\"\
    twentyfour\"),1);\n  ", "    \n    var numbers_list = numbers.split(\" \");\n\
    \    var result_numbers = \"\";\n    var valid_numbers = \"zero one two three\
    \ four five six seven eight nine\".split(\" \");\n\n    for(var i = 0; i < numbers_list.length;\
    \ i++){\n        var number_string = numbers_list[i];\n        var num_num = parseInt(number_string);\n\
    \n        if(!isNaN(num_num)){\n            var num = num_num.toString();\n  \
    \          \n            if(valid_numbers.indexOf(num) == -1){\n             \
    \   num = \"invalid\";\n            }\n            result_numbers += num + \"\
    \ \";\n        }\n    }\n    \n    result_numbers = result_numbers.trim();\n\n\
    \    return result_numbers;\n}\n", "    var words = numbers.split(\" \");\n  \
    \  \n    words.forEach(function(word){\n      if(word >= '0' && word <= '9'){\n\
    \        words.splice(words.indexOf(word),1);\n      }\n    });\n\n    return\
    \ words.join(\" \");\n}\n", "  let stringSplit = numbers.split(' ');\n  let numberList\
    \ = stringSplit;\n  let firstElement = numberList.shift();\n  let sortedNumberList\
    \ = numberList.sort();\n  let sortedNumberString = sortedNumberList.join(\" \"\
    )\n\n  //Add the first element back in\n  stringSplit.unshift(firstElement)\n\n\
    \  return stringSplit.join(\" \")\n}\n</code>\n<|/ a |>\n<| c |>\nI believe they\
    \ want to keep it all on one line.  You can (and should) edit your answer to add\
    \ an explanation about how your solution works.\n<|/ c |>\n<| c |>\nHi Jared,\
    \ I think my solution was a little verbose to begin with. I'm happy to revise\
    \ my solution if it can be improved.\n<|/ c |>\n<| c |>\nHi Jared, I edited my\
    \ answer to include an explanation on how it works. I hope it helps.\n<|/ c |>\n\
    <| c |>\nThank you so much for your help, you are great! I'm going to try to write\
    \ some code using your solution to see how it works. Thanks again!\n<|/ c |>\n\
    <| a |>\nYou can use the Array.prototype.sort().\n<code>", "    // Extract the\
    \ numbers from the input\n    var numbers = numbers.match(/\\S+/g);\n\n    //\
    \ Sort them\n    numbers.sort();\n\n    // Put them back together\n    return\
    \ numbers.join(\" \");\n}", "    // The first number in the string will always\
    \ be 'zero', the second will be 'one' and so on\n    // Thus all we need to do\
    \ is find the index of each of the choices in our array and add this to the \n\
    \    // sorted array.\n    var sorted_numbers = []\n    var choices = [\"zero\"\
    ,\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\"\
    ]\n    \n    // Remove spaces from the input string\n    numbers = numbers.replace(/\\\
    s+/, \"\") \n\n    // Split the string into an array\n    var number_array = numbers.split(\"\
    \ \")\n\n    // Iterate over the array\n    for(var x in number_array) {\n   \
    \     // For each string in the array, check if the choice is in the array\n \
    \       var choice_exists = choices.includes(number_array[x])\n        if(choice_exists)\
    \ {\n            // If choice exists, add it to the sorted array\n           \
    \ sorted_numbers.push(number_array[x])\n        }\n    }\n    // Join all the\
    \ numbers together into a single string\n    return sorted_numbers.join(\" \"\
    )\n}\n</code>\n<|/ a |>\n<| c |>\nThis answer works great but it's limited to\
    \ only 9 words (and that's what it looks like it does). Is there a way to make\
    \ it work with 10+ words?\n<|/ c |>\n<| c |>\nIt works in all cases, see the test\
    \ cases in my updated answer (the third test case).\n<|/ c |>\n<| a tags=sorting,algorithm,javascript,arrays\
    \ |>\nA solution similar to another answer but using an object and an array to\
    \ keep the positions of the words as they appear as keys.\nTo sort from smallest\
    \ to largest simply swap them.\nThis solution uses map and reduce to do the whole\
    \ thing.\nIt also uses map to create the object of the positions of the words\
    \ as they appear in the string and reduce to create the array of words.\n\n<code>\n\
    const str = \"three one four\";\nconst result = str.split(' ').map((word, i) =>\
    \ ({[word]: i})).sort((a,b) => a.length - b.length).reduce((a, b) => {\n  a.push(b[Object.keys(b)[0]]);\n\
    \  return a;\n}, []);", "    return numbers.split(' ').sort(function(a, b){\n\
    \        var aa = a.split('')\n        var bb = b.split('')\n        for (var\
    \ i=0; i<aa.length; i++){\n            if (aa[i] < bb[i]) return -1\n        \
    \    else if (bb[i] < aa[i]) return 1\n            else return 0\n        }\n\
    \    })\n}\n", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return\
    \ numbers.join(\" \")\n}\n", "    var string = \"\";\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        var num = numbers[i];\n        if(isNaN(num) || num > 9){\n \
    \           throw new Error(\"Input string is not in valid format \");\n     \
    \   }\n        string += num;\n    }\n    return string;\n}\n", "    numbers =\
    \ numbers.split(\" \");\n    numbers = numbers.map(function(number){\n       \
    \ return parseInt(number);\n    });\n    numbers.sort(function(a, b){\n      \
    \  return a - b;\n    });\n    return numbers.join(\" \");\n}\n", "    var result\
    \ = '';\n    var numberArr = numbers.split(' ');\n    for(var i=0; i < numberArr.length;\
    \ i++) {\n        if(numberArr[i] == ''){\n            continue;\n        }\n\
    \        if(numberArr[i] == 'zero'){\n            result = 'zero';\n         \
    \   continue;\n        }\n        if(numberArr[i] == 'one'){\n            result\
    \ = result + 'one';\n            continue;\n        }\n        if(numberArr[i]\
    \ == 'two'){\n            result = result + 'two';\n            continue;\n  \
    \      }\n        if(numberArr[i] == 'three'){\n            result = result +\
    \ 'three';\n            continue;\n        }\n        if(numberArr[i] == 'four'){\n\
    \            result = result + 'four';\n            continue;\n        }\n   \
    \     if(numberArr[i] == 'five'){\n            result = result + 'five';\n   \
    \         continue;\n        }\n        if(numberArr[i] == 'six'){\n         \
    \   result = result + 'six';\n            continue;\n        }\n        if(numberArr[i]\
    \ == 'seven'){\n            result = result + 'seven';\n            continue;\n\
    \        }\n        if(numberArr[i] == 'eight'){\n            result = result\
    \ + 'eight';\n            continue;\n        }\n        if(numberArr[i] == 'nine'){\n\
    \            result = result + 'nine';\n            continue;\n        }\n   \
    \ }\n    return result.trim();\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,javascript,sorting\
    \ dscore=1 |>\nIt depends on your requirements. To sort a list in descending order,\
    \ you could use the sort method with an array of numbers. You can use the following\
    \ code for ascending order:\n\n<code>\nlet list = [1, 5, 2, 1, 4, 10, 13, 6];\n\
    \nlet sortedList = list.sort((a, b) => a - b);\n", "\tnumbers = numbers.replace(/[^0-9]/g,\
    \ \"\");\n\tnumbers = numbers.split(\" \");\n\tnumbers = numbers.sort(function(a,\
    \ b){\n\t\treturn a-b\n\t});\n\treturn numbers.join(\" \");\n}", "\treturn (numbers).split(\"\
    \ \").sort(function(a, b){\n\t\tvar a_num = a.split('')\n\t\t\t, b_num = b.split('')\n\
    \t\t\t, a_len = a_num.length\n\t\t\t, b_len = b_num.length\n\t\t\t, a_num_index\
    \ = 0\n\t\t\t, b_num_index = 0\n\t\t\t, a_digit\n\t\t\t, b_digit\n\t\t\t, min_index\n\
    \t\t\t, swap;\n\t\t\n\t\twhile(true){ //Keep going until a or b have been exhausted\n\
    \t\t\tswitch(a_num[a_num_index]){ //See if a's digit is the same as the digit\
    \ at a_num_index\n\t\t\t\tcase '0': //If 'a', then it's the same as the digit\
    \ at a_num_index\n\t\t\t\tcase '1': a_num_index++; //Increase a_num_index by 1\n\
    \t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\ta_digit = parseInt(a_num[a_num_index])\n\
    \t\t\t\ta_num_index++; //Increase a_num_index by 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t\t\n\t\t\tswitch(b_num[b_num_index]){ //See if b's digit is the same as the\
    \ digit at b_num_index\n\t\t\t\tcase '0': //If 'b', then it's the same as the\
    \ digit at b_num_index\n\t\t\t\tcase '1': b_num_index++; //Increase b_num_index\
    \ by 1\n\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\tb_digit = parseInt(b_num[b_num_index])\n\
    \t\t\t\tb_num_index++; //Increase b_num_index by 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t\t\n\t\t\tmin_index = a_digit - b_digit; //Get the digit of the smallest number\n\
    \t\t\t\n\t\t\tif(a_digit > b_digit) //If a's digit was larger than b's digit,\
    \ swap\n\t\t\t\tswap = true;\n\t\t\telse\n\t\t\t\tswap = false ;\n\t\t\t\n\t\t\
    \tif(swap){ //If a was greater than b, then swap\n\t\t\t\tif(a_num_index < a_len){\n\
    \t\t\t\t\ta_num[a_num_index] = b_num[b_num_index];\n\t\t\t\t\ta_num_index++;\n\
    \t\t\t\t\tb_num[b_num_index] = a_num[a_num_index];\n\t\t\t\t\tb_num_index++;\n\
    \t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ta_num[a_num_index] = b_num[b_num_index];\n\
    \t\t\t\t\ta_num_index++;\n\t\t\t\t\tb_num[b_num_index] = a_num[a_num_index];\n\
    \t\t\t\t\tb_num_index++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(a_num_index\
    \ < a_len){\n\t\t\t\t\ta_num[a_num_index] = b_num[b_num_index];\n\t\t\t\t\ta_num_index++;\n\
    \t\t\t\t\tb_num[b_num_index] = a_num[a_", "    let numArray = numbers.split(\"\
    \ \");\n    numArray.sort(function(a,b){return a-b});\n    let retString = numArray.join(\"\
    \ \");\n    return retString;\n}\n", "\tnumbers = numbers.replace(/\\s+/g, '').split('\
    \ ');\n\tvar new_array = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\t\
    new_array[i] = parseInt(numbers[i]);\n\t}\n\tnew_array.sort();\n\tvar result =\
    \ [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tresult.push(new_array[i]);\n\
    \t}\n\treturn result.join(' ');\n}\n", "    if(!numbers) return \"Invalid input\"\
    ;\n    var numArray = numbers.split(\" \");\n    var numString = \"\";\n    for(var\
    \ i = 0; i < numArray.length; i++){\n        var num = numArray[i];\n        if(num\
    \ === \"zero\") numString = numString + \"0\";\n        else if(num === \"one\"\
    ) numString = numString + \"1\";\n        else if(num === \"two\") numString =\
    \ numString + \"2\";\n        else if(num === \"three\") numString = numString\
    \ + \"3\";\n        else if(num === \"four\") numString = numString + \"4\";\n\
    \        else if(num === \"five\") numString = numString + \"5\";\n        else\
    \ if(num === \"six\") numString = numString + \"6\";\n        else if(num ===\
    \ \"seven\") numString = numString + \"7\";\n        else if(num === \"eight\"\
    ) numString = numString + \"8\";\n        else if(num === \"nine\") numString\
    \ = numString + \"9\";\n        else if(num.charAt(0) === \"0\") numString = numString\
    \ + num.substring(1);\n        else numString = numString + num;\n    }\n    return\
    \ numString;\n}", "    let sortedNumbers = \"\";\n    let numberArray = numbers.split('\
    \ ');\n    for(let i = 0; i < numberArray.length; i++){\n        sortedNumbers\
    \ += numberArray[i] + ' ';\n    }\n    sortedNumbers = sortedNumbers.substr(0,\
    \ sortedNumbers.length - 1);\n    return sortedNumbers;\n}", "    numbers = numbers.split(\"\
    \ \");\n    numbers.sort(function(a, b){\n        return (a < b ? -1 : ((a > b)\
    \ ? 1 : 0));\n    });\n    return numbers.join(\" \");\n}\n", "\tnumbers = numbers.split('\
    \ ');\n\tvar result = \"\";\n\tnumbers.sort(function(a, b){\n\t\tif (a == 'zero')\
    \ return 0;\n\t\tif (a == 'nine') return 9;\n\t\tif (b == 'zero') return 0;\n\t\
    \tif (b == 'nine') return 9;\n\t\treturn a > b ? 1 : -1;\n\t});\n\t$.each(numbers,\
    \ function(index, value){\n\t\tresult = result + value + ' ';\n\t});\n\treturn\
    \ result.trim();\n}\n", "    return numbers.replace(/[\\s]/gi, \"\").replace(/[\\\
    -]/g, \"\").replace(/[,]/g, \" \").split(\" \").sort(function(a, b){\n       \
    \ return b - a\n    }).join(\" \")\n}\n", "\treturn numbers.split(' ').sort(function(a,\
    \ b){\n\t\treturn Number(a) - Number(b);\n\t});\n}", "  numbers = numbers.split(\"\
    \ \");\n  numbers.sort();\n  return numbers.join(\" \");\n}\n", "    var numberArray\
    \ = numbers.split(' ')\n    numberArray = numberArray.map(function(num){\n   \
    \     return parseInt(num)\n    })\n    numberArray.sort()\n    return numberArray.join('\
    \ ')\n}\n", "    return numbers.split(' ')\n        .sort((a,b)=>parseInt(a)-parseInt(b))\n\
    \        .join(\" \");\n}\n", "  let arr = numbers.split(' ')\n  let sorted =\
    \ []\n  for(let i=0;i<arr.length;i++){\n    for(let j=0;j<arr.length-1;j++){\n\
    \      if(arr[j] > arr[j+1]){\n        let temp = arr[j]\n        arr[j] = arr[j+1]\n\
    \        arr[j+1] = temp\n      }\n    }\n    sorted.push(arr[i])\n  }\n  return\
    \ sorted.join(' ')\n}\n</code>\n<|/ a |>\n<| c |>\nJust a note: the OP asked for\
    \ the lowest number to be displayed first, so `one` would come before `three`\
    \ as shown in his example.\n<|/ c |>\n<| c |>\nThanks for the heads up! I've added\
    \ an update to sort the numbers in ascending order.\n<|/ c |>\n<| c |>\nThis is\
    \ not the OP's sorting function, though.  It is actually [Knuth's Dutch national\
    \ flag puzzle](http://en.wikipedia.org/wiki/Knuth%27s_Dutch_national_flag_puzzle),\
    \ where numbers come in any order.\n<|/ c |>\n<| c |>\nMy apologies, I misread\
    \ the question. I did notice that the question was specifically about how to sort\
    \ a space-delimited string of numbers between 'zero' and 'nine', and that Knuth's\
    \ Dutch national flag puzzle is different than mine. I will update the answer\
    \ to reflect this.\n<|/ c |>\n<| a tags=javascript,node.js |>\n<code>", "    var\
    \ numbers_arr = numbers.split(\" \");\n    return numbers_arr.sort().join(\" \"\
    );\n}\n", "\treturn numbers.replace(/[^0-9.]/g, \"\").split(\" \").sort().join(\"\
    \ \");\n}\n", "    numbers = numbers.split(' ');\n    numbers.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    return numbers.join(' ');\n}\n", " \
    \ //Write your code here\n}\n</code>\nBonus Challenge:\nGiven an input string,\
    \ use Javascript to sort all the words in that string alphabetically. \nExample:\n\
    Input: \n\"The quick brown fox jumps over the lazy dog.\"\nOutput: \n\"The quick\
    \ dog brown fox jumps over the lazy\"\nNote: \nThe words don't need to be in order,\
    \ just alphabetically sorted. \nYou don't need to sort them individually, you\
    \ just need to sort the entire string. \nI recommend using an if statement to\
    \ check whether the first character of the input string is a space or not. If\
    \ it is a space, use your sort_words() function to sort the words in that string\
    \ alphabetically. \nIf you have any questions, please leave a comment below!\n\
    <|/ q |>\n<| c |>\nHave you written any code so far?\n<|/ c |>\n<| c |>\nWelcome\
    \ to StackOverflow! Since you've found a solution to your own problem, please\
    \ post it as an answer instead of editing the question. Doing so makes it easier\
    \ for other people who might have a similar problem in the future to find your\
    \ solution.\n<|/ c |>\n<| c |>\nThank you so much. I will do that.\n<|/ c |>\n\
    <| c |>\nI added the answer as you suggested. Hope it helps someone. I will appreciate\
    \ any comments you give to my solution.\n<|/ c |>\n<| a |>\n<code>", "    numbers\
    \ = numbers.split(\" \");\n    numbers.sort();\n    return numbers.join(\" \"\
    );\n}\n", "    numbers = numbers.split(\" \");\n    numbers.sort(function(a,b){\n\
    \        a = Number(a);\n        b = Number(b);\n        return a-b;\n    });\n\
    \    return numbers.join(\" \");\n}\n", "  return numbers.split(\" \").sort(function(a,\
    \ b){\n    var a_num = parseInt(a, 10),\n        b_num = parseInt(b, 10);\n\n\
    \    if(a_num < b_num){ return -1; }\n    if(a_num > b_num){ return 1; }\n   \
    \ return 0;\n  });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
