name: HumanEval_55_fib
language: js
prompt: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n//\
  \ 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
  \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n \
  \ assert.deepEqual(candidate(12),144);\n}\n\ntest();"
completions: ["\tif (typeof n !== 'number') {\n\t\tthrow new TypeError('n must be\
    \ a number');\n\t}\n\tif (n < 0) {\n\t\tthrow new TypeError('n must be >= 0');\n\
    \t}\n\tif (n === 0 || n === 1) {\n\t\treturn n;\n\t}\n\treturn fib(n - 1) + fib(n\
    \ - 2);\n}", "    if (n < 2) {\n        return 1;\n    }\n    return fib(n - 1)\
    \ + fib(n - 2);\n}\n</textarea>\n              </div>\n            </div>\n  \
    \        </div>\n          <div class=\"member\">\n            <div\n        \
    \      class=\"expand-members\"\n              title=\"Toggle showing all descriptions\
    \ and examples\"\n            ></div>\n            <a name=\"fib1\"></a>\n   \
    \         <div class=\"declaration\">\n              <span class=\"membername\
    \ primary\">fib1</span>&nbsp;:&nbsp;<a\n                class=\"membertype\"\n\
    \                href=\"/Number\"\n                >Number</a\n              >\n\
    \            </div>\n            <div class=\"member-body\">\n              <p\
    \ class=\"description\">\n                Returns the nth Fibonacci number, starting\
    \ from 1.\n              </p>\n              <div class=\"example\">\n       \
    \         <div class=\"codePanel\">\n                  <h4>Example:</h4>\n   \
    \               <textarea class=\"code\" rows=\"12\" cols=\"60\" wrap=\"off\">",
  "    if (n < 2) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n\
    }\n", "    if(n < 2) return 1;\n    return fib(n - 1) + fib(n - 2);\n}\n", "\t\
    if (n <= 0 || n == 1) return n;\n\treturn fib(n - 1) + fib(n - 2)\n}\n", "  if\
    \ (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n", "  \
    \  if (n < 0) return undefined;\n    if (n === 0) return 0;\n    if (n === 1)\
    \ return 1;\n    return fib(n - 1) + fib(n - 2);\n}", "  return n < 2 ? n : fib(n\
    \ - 1) + fib(n - 2)\n}\n", "    if(n<2){\n        return n;\n    }\n    return\
    \ fib(n-1)+fib(n-2);\n}", "\tif (n == 0 || n == 1) return n;\n\treturn fib(n -\
    \ 1) + fib(n - 2);\n}\n", "    if(n < 0){\n        throw 'n must be > 0';\n  \
    \  }\n    if(n === 0 || n === 1){\n        return n;\n    }\n\n    var prevPrev\
    \ = 0;\n    var prev = 1;\n    var cur = 1;\n    var curPrev = 0;\n\n    for(var\
    \ i = 2; i <= n; i++){\n        var ret = cur + curPrev;\n        curPrev = cur;\n\
    \        cur = ret;\n\n        prevPrev = prev;\n        prev = cur;\n    }\n\n\
    \    return prev;\n}\n</code></pre>\n    </article>\n\n    <article class=\"uk-article\"\
    >\n        <h2>Javascript functions</h2>\n\n        <table class=\"uk-table uk-table-striped\"\
    >\n            <thead>\n                <tr>\n                    <th>Name</th>\n\
    \                    <th>Description</th>\n                </tr>\n           \
    \ </thead>\n            <tbody>\n                <tr>\n                    <td><b>Function</b><br>\n\
    \                        <code>createMap</code></td>\n                    <td>\n\
    \                        <code>Map</code>\n                    </td>\n       \
    \         </tr>\n                <tr>\n                    <td><b>Function</b><br>\n\
    \                        <code>createGroup</code></td>\n                    <td>\n\
    \                        <code>Group</code>\n                    </td>\n     \
    \           </tr>\n                <tr>\n                    <td><b>Function</b><br>\n\
    \                        <code>createGroupBy</code></td>\n                   \
    \ <td>\n                        <code>GroupBy</code>\n                    </td>\n\
    \                </tr>\n                <tr>\n                    <td><b>Function</b><br>\n\
    \                        <code>createList</code></td>\n                    <td>\n\
    \                        <code>List</code>\n                    </td>\n      \
    \          </tr>\n                <tr>\n                    <td><b>Function</b><br>\n\
    \                        <code>createSet</code></td>\n                    <td>\n\
    \                        <code>Set</code>\n                    </td>\n       \
    \         </tr>\n                <tr>\n                    <td><b>Function</b><br>\n\
    \                        <code>createMapFromArray</code></td>\n              \
    \      <td>\n                        <code>MapFromArray</code>\n             \
    \       </td>\n                </tr>\n                <tr>\n                 \
    \   <td><b>Function</b><br>\n                        <code>createSetFromArray</code></td>\n\
    \                    <td>\n                        <code>SetFromArray</code>\n\
    \                    </td>\n                </tr>\n                <tr>\n    \
    \                <td><b>Function</b><br>\n                        <code>createSetFromObject</code></td>\n\
    \                    <td>\n                        <code>SetFromObject</code>\n\
    \                    </td>\n                </tr>\n                <tr>\n    \
    \                <td><b>Function</b><br>\n                        <code>createMapFromObject</code></td>\n\
    \                    <td>\n                        <code>MapFromObject</code>\n\
    \                    </td>\n                </tr>\n                <tr>\n    \
    \                <td><b>Function</b><br>\n                        <code>createMapKeys</code></td>\n\
    \                    <td>\n                        <code>MapKeys</code>\n    \
    \                </td>\n                </tr>\n                <tr>\n        \
    \            <td><b>Function</b><br>\n                        <code>createMapValues</code></td>\n\
    \                    <td>\n                        <code>MapValues</code>\n  \
    \                  </td>", "    if(n<2) return n;\n    return fib(--n) + fib(--n);\n\
    }", "    if(n < 2){ return n; }\n    return fib(n - 1) + fib(n - 2);\n}\n},{}],11:[function(_dereq_,module,exports){\n\
    var memoize = _dereq_('./memoize');\nvar createBy = _dereq_('./createBy');\nvar\
    \ isEqual = _dereq_('./isEqual');\nvar async = _dereq_('./async');\nvar eachLimit\
    \ = _dereq_('async/eachLimit');\n\nmodule.exports = find;\n", "    if( n < 1 ){\n\
    \        throw new Error('fib arg is out of range');\n    }\n    var last;\n \
    \   if( n === 1 ){\n        return 1;\n    }\n    if( n === 2 ){\n        return\
    \ 1;\n    }\n    last = fib( n-1 ) + fib( n-2 );\n    if( n % 2 === 1 ){\n   \
    \     return last;\n    } else {\n        return last * last;\n    }\n}\nfib.N\
    \ = function(n){\n    return fib(n);\n};\n", "    return ((n < 2) ? n : fibHelper(n\
    \ - 1) + fibHelper(n - 2));\n};\n", "    if (n < 0){\n        throw new Error(\"\
    Invalid arguments. Can't be negative or zero.\");\n    }\n    if (n === 0){\n\
    \        return 0;\n    }\n    if (n === 1){\n        return 1;\n    }\n\n   \
    \ return fib(n - 2) + fib(n - 1);\n}\n", "    if(n == 0 || n == 1)\n        return\
    \ n;\n    else if(n < 2)\n        return 1;\n    else\n        return fib(n -\
    \ 1) + fib(n - 2);\n}", "  return isPositiveInteger(n) ? n : fib(n-1) + fib(n-2);\n\
    }\n", "  if (n < 0) return null;\n  if (n === 1) return 1;\n  return fib(n - 1)\
    \ + fib(n - 2);\n}\n", "\tif (n === 0 || n === 1) return n;\n\treturn fib(n -\
    \ 1) + fib(n - 2);\n}", "    if (n < 2) return 1;\n    return fib(n - 1) + fib(n\
    \ - 2);\n}\n", "    if(n<2) return n;\n    return fib(n-1)+fib(n-2);\n}\n", " \
    \ if (n < 0) return null;\n  else if (n === 0 || n === 1) return 1;\n  else return\
    \ fib(n-2) + fib(n-1);\n}\n", "  if (n < 0) return undefined;\n  var ret = 0;\n\
    \  var p, fib;\n  if (n === 0 || n === 1) return n;\n  fib = function(prev,cur){\n\
    \    return prev + cur;\n  };\n  while (n > 0) {\n    p = fib(n - 2,n - 1);\n\
    \    if (p < cur) return p;\n    n -= 1;\n  }\n  return cur;\n}", "  if(n<2){\n\
    \    return n;\n  }\n  return fib(n-1)+fib(n-2);\n}\n", "  if (n < 2){\n    return\
    \ 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\nmodule.exports = fib;\n\n},{}],152:[function(require,module,exports){\n\
    module.exports = function(a, b) {\n  var fn = function(a, b) {\n    if (arguments.length\
    \ === 1) {\n      return a.reduce(function(a, b) {\n        return a + b;\n  \
    \    }, 0);\n    }\n    return fn.bind(null, a, b);\n  };\n  fn.a = a;\n  fn.b\
    \ = b;\n  return fn;\n};\n},{}],153:[function(require,module,exports){\nvar arrayPush\
    \ = require('./arrayPush'),\n    isFlattenable = require('./isFlattenable');\n",
  "    if(n < 2) return 1;\n    return fib(n-2) + fib(n-1);\n}\n", "  if (n < 0) return\
    \ 0;\n  if (n < 1) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n", "  if (n\
    \ < 2) { return n; }\n  return fib(n - 1) + fib(n - 2);\n}\n", "    if(n < 2){\n\
    \        return 1;\n    }\n    return fib(n-2) + fib(n-1);\n}", "  if (n < 0)\
    \ return -1;\n  if (n == 0) return 0;\n  if (n == 1) return 1;\n  return fib(n\
    \ - 1) + fib(n - 2);\n}\n", "  var result = 0;\n  if(n<2) return n;\n  else {\n\
    \    for(var i = 2; i<=n; i++){\n      result = result + i;\n    }\n    return\
    \ result;\n  }\n}\n", "  // Return a Fibonacci number:\n  // https://en.wikipedia.org/wiki/Fibonacci_number\n\
    \  if(n<0) return -1;\n  if(n==0) return 0;\n  if(n==1) return 1;\n  return fib(n\
    \ - 1) + fib(n - 2)\n}\n", "  if (n < 0 || n >= 500){\n    return 0;\n  }\n  if\
    \ (n <= 2){\n    return 1;\n  }\n  return fib(n - 2) + fib(n - 1);\n}\n", "\t\n\
    \tif( n < 2 ){\n\t\treturn 1;\n\t}else{\n\t\treturn fib( n - 1 ) + fib( n - 2\
    \ );\n\t}\n}\n", "\tif (isZero(n) || isPositive(n))\n\t\treturn 0;\n\n\tif (n\
    \ === 1 || n === 2)\n\t\treturn 1;\n\n\tif (n % 2 === 0)\n\t\treturn fib(n - 1)\
    \ + fib(n - 2);\n\n\tlet f = fib(n - 1);\n\tlet s = fib(n - 2);\n\treturn f +\
    \ s;\n}\n", "    if( n <2 ){\n        return 1;\n    }\n    if( n==2 ){\n    \
    \    return 2;\n    }\n    if( n<0 ){\n        return 0;\n    }\n\n    var arr=[0,1];\n\
    \    for( var i=1; i<n; i++ ){\n        arr.push( arr[i]+arr[i-1] );\n    }\n\
    \    return arr[n-1];\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>",
  "    \n    //If n is negative return -1\n    if (n < 0) return -1;\n    \n    //If\
    \ n is 0 return 0\n    if (n <= 1) return 0;\n    \n    //Create a variable which\
    \ hold last two Fibonacci numbers\n    var prevFib = fib(--n);\n    var currentFib\
    \ = prevFib;\n    \n    //Loop to count number of iterations\n    while(true){\n\
    \        \n        //If this iteration is greater than n\n        if (currentFib\
    \ > n) return prevFib;\n        \n        //Else add this fibonacci number to\
    \ the last two fibonacci numbers\n        else return currentFib + prevFib;\n\
    \    }\n}\n", "  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\n\
    var isArray = Array.isArray || function(object){\n  return Object.prototype.toString.call(object)\
    \ == '[object Array]';\n};\n", "    if (n < 0) return -1;\n    if (n === 1) return\
    \ 0;\n    if (n === 2) return 1;\n    return fib(n-2)+fib(n-1);\n}", "    if (n\
    \ === 0) {\n        return 0;\n    }\n    if (n < 0) {\n        return undefined;\n\
    \    }\n    if (n === 1 || n === 2) {\n        return 1;\n    }\n    return fib(n\
    \ - 1) + fib(n - 2);\n}\n", "    if (n < 2){\n        return 1;\n    }\n\n   \
    \ return fib(n - 1) + fib(n - 2);\n}\n", "    if(n < 0) throw new SyntaxError(\"\
    invalid argument\");\n    if(n == 0 || n == 1) return n;\n    return fib(n - 1)\
    \ + fib(n - 2);\n}\n", "\tif (n <= 1){\n\t\treturn n;\n\t}\n\treturn fib(n - 1)\
    \ + fib(n - 2);\n}\n", "  if (n < 0) return 0;\n  var ret = 1;\n  var tmp;\n \
    \ while (n > 1) {\n    tmp = ret;\n    ret = n + ret;\n    n = tmp;\n  }\n  return\
    \ ret % 2 ? n : (n + 1);\n}\n", "    if (n < 0) return 0;\n    if (n < 2) return\
    \ 1;\n    return fib(n - 1) + fib(n - 2);\n}\n", "  if (n < 1) return n;\n  return\
    \ fib(n - 1) + fib(n - 2);\n}\n", "    if (n <= 1) return n;\n    return fib(n-2)\
    \ + fib(n-1);\n}\n", "  var limit = 5;\n  var currentFib = 0;\n  var currentFibLimit\
    \ = 0;\n\n  function fibIterate(){\n    currentFibLimit = currentFib + limit;\n\
    \    var currentFib = currentFib;\n    currentFib++;\n\n    if(currentFib == currentFibLimit){\n\
    \      return currentFib;\n    }\n  }\n\n  return fibIterate();\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis does not work correctly. `fib(0)` returns 1,\
    \ while `fib(1)` returns 2, which is wrong.\n<|/ c |>\n<| c |>\nyou are right,\
    \ I fixed it.\n<|/ c |>\n<| a tags=fibonacci,algorithm |>\nA recursive solution\
    \ can be achieved with a counter.\n<code>\nfib :: Int -> Integer\nfib n = fibiter\
    \ n 0\n  where\n    fibiter 0 acc = acc\n    fibiter n acc = fibiter (n-1) ((acc+acc)%1000000007)\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=fibonacci,algorithm |>\nIn order to return\
    \ 0 instead of 1, you must set fib 0 to return 0 instead of 1.\n<code>\npublic\
    \ static int fib(int n) {\n    if (n == 1 || n == 0) {\n        return n;\n  \
    \  } else if (n < 0) {\n        throw new IllegalArgumentException(\"n must be\
    \ >= 0\");\n    }\n    int first = 1;\n    int second = 1;\n    int tmp;\n\n \
    \   while (true) {\n        tmp = first + second;\n        if (tmp == n) {\n \
    \           return tmp;\n        }\n        first = second;\n        second =\
    \ tmp;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nUsing recursion:\n\
    <code>\npublic static int fibo(int n){\n    if(n<=2)\n        return n;\n    return\
    \ fibo(n-1)+fibo(n-2);\n}\n</code>\n<|/ a tags=fibonacci,algorithm |>\n<| c |>\n\
    Welcome to StackOverflow. While this code may provide a solution to the question,\
    \ it's better to add context as to why/how it works. This can help future users\
    \ learn and eventually apply that knowledge to their own code. You are also likely\
    \ to have positive feedback from users in the form of upvotes, when the code is\
    \ explained.\n<|/ c |>\n<| c |>\nIt would probably help if you provided an explanation\
    \ of the logic and steps. As is, it's not immediately clear what you're doing\
    \ or why.\n<|/ c |>\n<| c |>\nI see what you're saying now. But ", "  if (n <\
    \ 2) return 1;\n  return fib(n - 1) + fib(n - 2)\n}", "\tif( n < 1 ){\n\t\tthrow\
    \ new Error('n must be >= 1.');\n\t}\n\treturn fibHelper( n, 1 );\n}\n", "  return\
    \ _isFinite(n) ? n < 2 ? 1 : fib(n - 1) + fib(n - 2) : n;\n}\n", "  if (n < 2)\
    \ {\n    return n;\n  }\n  return fib(n-2) + fib(n-1);\n}\n", "  // Make sure\
    \ n is an integer >= 0\n  n = parseInt(n);\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n\
    \ - 2);\n  }\n}\n", "\tif (n < 2)\n\t\treturn 1;\n\treturn fib(n - 1) + fib(n\
    \ - 2);\n}", "    if (n < 2){\n        return 1;\n    } else {\n        return\
    \ fib(n - 1) + fib(n - 2);\n    }\n}\n\nmodule.exports = fib;\n\n", "    return\
    \ (n<=1)?1:fib(n-1)+fib(n-2);\n}", "\tif (n < 2) return n;\n\treturn fib(n - 1)\
    \ + fib(n - 2);\n}\n", "\tif (n < 2) return n;\n\treturn fib(n - 2) + fib(n -\
    \ 1);\n}", "    if (n < 2) return 1;\n    return fib(n - 1) + fib(n - 2);\n}",
  "  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n", " \
    \ // Ensure that fib is always positive.\n  n = n || 0\n\n  if (n <= 2) return\
    \ n\n  return fib(n - 1) + fib(n - 2)\n}\n", "    if (n < 2) return n;\n    return\
    \ fib(n - 1) + fib(n - 2);\n}\n", "    // Exit the function if n is null or less\
    \ than 0\n    if(n<2){\n        return 1;\n    }\n    else if(n<5){\n        return\
    \ fib(n-2) + fib(n-1);\n    }\n    else if(n<20){\n        return Math.pow(n,\
    \ 3);\n    }\n    else if(n<100){\n        return Math.pow(n, 5);\n    }\n   \
    \ else if(n<1000){\n        return Math.pow(n, 7);\n    }\n    else if(n<10000){\n\
    \        return Math.pow(n, 9);\n    }\n    else if(n<100000){\n        return\
    \ Math.pow(n, 13);\n    }\n    else if(n<1000000){\n        return Math.pow(n,\
    \ 17);\n    }\n    else if(n<10000000){\n        return Math.pow(n, 21);\n   \
    \ }\n    else if(n<100000000){\n        return Math.pow(n, 25);\n    }\n    else\
    \ if(n<1000000000){\n        return Math.pow(n, 29);\n    }\n    else if(n<10000000000){\n\
    \        return Math.pow(n, 33);\n    }\n    else if(n<100000000000){\n      \
    \  return Math.pow(n, 37);\n    }\n    else if(n<1000000000000){\n        return\
    \ Math.pow(n, 41);\n    }\n    else if(n<10000000000000){\n        return Math.pow(n,\
    \ 43);\n    }\n    else if(n<100000000000000){\n        return Math.pow(n, 47);\n\
    \    }\n    else if(n<1000000000000000){\n        return Math.pow(n, 51);\n  \
    \  }\n    else if(n<10000000000000000){\n        return Math.pow(n, 55);\n   \
    \ }\n    else if(n<100000000000000000){\n        return Math.pow(n, 59);\n   \
    \ }\n    else if(n<1000000000000000000){\n        return Math.pow(n, 63);\n  \
    \  }\n    else {\n        throw \"Error: too much recursion\";\n    }\n}\n</code>\n\
    <|/ a |>\n<| c |>\nPlease don't ever do this. It's the most efficient possible\
    \ but it's also the most difficult to understand and maintain.\n<|/ c |>\n<| c\
    \ |>\nYou might want to explain why this is. As it stands, this seems like a low\
    \ quality answer.\n<|/ c |>\n<| c |>\nI tried to explain how it works but not\
    \ the efficiency. My function has O(1) runtime complexity and it doesn't use recursion.\n\
    <|/ c |>\n<| c |>\nWell, that is true. But it has a few bugs. If you run it, you\
    \ won't get `NaN`.\n<|/", "    if (n <= 0) {\n        return 0;\n    }\n    if\
    \ (n === 1 || n === 2) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n\
    \ - 2);\n}", "  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n}", " \
    \ return _isFinite(window.parseFloat(localStorage.getItem('fib_' + n)) && window.parseInt(localStorage.getItem('fib_'\
    \ + n))) ? window.parseInt(localStorage.getItem('fib_' + n)) : fib(n - 1) + fib(n\
    \ - 2);\n}", "  if (n <= 0) return 0;\n  if (n < 2) return 1;\n  return fib(n\
    \ - 1) + fib(n - 2);\n}\n", "  // Make sure n is a positive integer\n  if((n =\
    \ parseInt(n,10)) < 1) return 0;\n  // Return the nth Fibonacci number\n  return\
    \ n <= 2 ? n : fib(n - 1) + fib(n - 2);\n}\n", "  if (n < 2) return 1;\n  if (n\
    \ < 3) return fib(n-2) + fib(n-1);\n  return fib(n-2) - fib(n-1);\n}\n", "   \
    \ if(n < 0) return NaN;\n    if(n == 0 || n == 1) return n;\n    return fib(n\
    \ - 1) + fib(n - 2);\n}\n", "    if (n < 0) return -1;\n    if (n == 1) return\
    \ 0;\n    if (n == 2) return 1;\n    return fib(n - 1) + fib(n - 2);\n}", "  \
    \  if (n < 2) return n;\n    return fib(n-2) + fib(n-1);\n}\n", "    // Write\
    \ Fibonacci sequence recursively\n    if (n < 2) return n;\n    return fib(n -\
    \ 1) + fib(n - 2);\n}", "\tlet memo = [1,1];\n\tif(n === 0) return 0;\n\tif(n\
    \ === 1) return 1;\n\tfor(let i = 2; i <= n; i++){\n\t\tmemo.push(memo[i-1] +\
    \ memo[i-2]);\n\t}\n\treturn memo[n-1];\n}\n", "    if (n <= 2){\n        return\
    \ n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n", "  \
    \  if (n === 0) return 0;\n    if (n === 1) return 1;\n    return fib(n - 1) +\
    \ fib(n - 2);\n}\n", "    if(n < 2){\n        return 1;\n    } else {\n      \
    \  return fib(n-2) + fib(n-1);\n    }\n}\n", "  // Using cache.\n  var cache =\
    \ {a:1,b:1,c:1,d:1,e:1,f:1,g:1,h:1,i:1,j:1,k:1,l:1,m:1,n:1};\n\n  // Check for\
    \ n != undefined.\n  if(n == undefined){\n    n = 1;\n  }\n\n  // Return Fibonacci\
    \ number for n==0.\n  if(n == 0){\n    return 0;\n  }\n\n  // If n<0, return NaN\
    \ (not a number).\n  if(n < 0){\n    return NaN;\n  }\n\n  // If n >=5, return\
    \ Fibonacci series up to n.\n  if(n > 5){\n    return fib(n-1);\n  }\n\n  // Calculate\
    \ Fibonacci number for n>0.\n  return fib(n) + fib(n-1);\n}", "  if (n < 2) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\nvar isIterateeCall = false;", " \
    \   if(n < 2) {\n       return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n",
  "  if (n <= 1){\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n", " \
    \ if (n < 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n", "    // If function\
    \ was called with 0, 1, or 2 arguments, return Fibonacci number for that number.\
    \ \n    if(n < 2 || n > 2) return null;\n    \n    // If function was called with\
    \ n arguments, return Fibonacci number for that number minus one. \n    if(n ===\
    \ 2) return 1;\n\n    // If function was called with less than 1 or greater than\
    \ 2 arguments, return null.\n    if(n<1 || n>2) return null;\n\n    var a = 0,\
    \ b = 1, result = a;\n\n    // For every nth Fibonacci number, return that number.\
    \ \n    for(var i=2; i < n; i++){\n        // Update a and b to current values.\n\
    \        a = b;\n        b = a+b;\n        // Update result to the previous result\
    \ plus current b\n        result = result;\n        // Update result to the current\
    \ b\n        result = b;\n    }\n\n    // Return result to calling function.\n\
    \    return result;\n}\n", "    if (n < 0) return 0;\n    if (n < 2) return 1;\n\
    \    return fib(n - 1) + fib(n - 2);\n}\n", "    if(n < 0) throw new Error('n\
    \ must be >= 0.');\n    if(n === 0 || n === 1) return n;\n    return fib(n-2)\
    \ + fib(n-1);\n}\n", "    if(n < 2){\n        return n;\n    }\n    return fib(n-2)\
    \ + fib(n-1);\n}\n\nmodule.exports = fib;\n\n\n},{}],5:[function(_dereq_,module,exports){\n\
    var util = _dereq_('./util');\nvar is = _dereq_('../is');\nvar Promise = _dereq_('../promise');\n\
    var Heap = _dereq_('../heap');\n", "    if (n >= 1) return n;\n    return fib(n-2)\
    \ + fib(n-1);\n}\n", "  return _isFunction(_cache[n]) ? _cache[n]() : _cache[n]\
    \ = function(){\n    return fib(_num(n))\n  }\n}\nfib.cache = _cache;", "    switch(n){\n\
    \        case 0:\n            return 0;\n        case 1:\n            return 1;\n\
    \        default:\n            return fib(n - 1) + fib(n - 2);\n    }\n}\n", " \
    \   if(n < 1)\n        return 0;\n    if(n === 1 || n === 2)\n        return 1;\n\
    \    return fib(n - 1) + fib(n - 2);\n}\n", "    if (n <= 2) {\n        return\
    \ 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n    ", "\tif (n <= 0)\n\t\
    \tthrow new Error(\"argument must be positive number\");\n\telse if ((n%2)==0)\n\
    \t\treturn 1;\n\telse if (n==1)\n\t\treturn 1;\n\treturn fib(n - 1) + fib(n -\
    \ 2);\n}\n", "    // Implement function fib()\n}\n\nvar fib1 = fib(10);\nvar fib2\
    \ = fib(8);", "    if(n <= 1){\n        return n;\n    }\n    return fib(n - 1)\
    \ + fib(n - 2);\n}\nmodule.exports = fib;\n\n", "    if(n < 2) return n;\n   \
    \ return fib(n - 1) + fib(n - 2)\n}\nmodule.exports = fib\n\n},{}],9:[function(require,module,exports){",
  "  // Return Fibonacci number\n  return _isNumber(n) ? n : new BigNumber(n).minus(new\
    \ BigNumber(1).minus(new BigNumber(2))).toFixed(2);\n}\n", "    if(n < 2) return\
    \ 1;\n    return fib(n - 1) + fib(n - 2);\n}\n", "\tif (n <= 1) return 1;\n\t\
    else if (n === 2) return 2;\n\telse {\n\t\treturn fib(n - 1) + fib(n - 2);\n\t\
    }\n}\n", "    if (n < 0 || n <= 1){\n         return 0;\n    }\n    return fib(n-2)\
    \ + fib(n-1);\n}", "\tif (n <= 2) return n;\n\treturn fib(n-2) + fib(n-1);\n}\n",
  "  if (n < 1) return null;\n  if (n === 1 || n === 2) return 1;\n  return fib(n\
    \ - 1) + fib(n - 2);\n}\n", "  if (n < 2) {\n    return 1;\n  }\n  return fib(n\
    \ - 1) + fib(n - 2);\n}\n", "\tif (n < 0) return 0;\n\tif (n === 1 || n === 2)\
    \ return 1;\n\treturn fib(n - 1) + fib(n - 2);\n}\n", "  if (n < 0) return -1;\n\
    \  if (n === 0 || n === 1) return 1;\n  return fib(n - 1) + fib(n - 2);\n}", " \
    \ if (n < 2) {\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n}\n", "  if\
    \ (n < 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n}", "\tif (n < 2) return\
    \ n;\n\treturn fib(n-2) + fib(n-1);\n}", "  if (n < 0) return null;\n  if (n <\
    \ 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n", "  if (n < 2){\n    return\
    \ n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n", "  if (n < 2) return n;\n\
    \  return fib(n - 1) + fib(n - 2);\n}", "    if(n < 2) return n;\n    return fib(n-2)\
    \ + fib(n-1);\n}\n", "\tif (typeof n !== 'number' || n < 1) return undefined;\n\
    \tif (n === 1 || n === 2) return 1;\n\treturn fib(n - 1) + fib(n - 2);\n};\n",
  "  if (n < 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n", "    return (n<2?n:fib(n-2))+fib(n-1);\n\
    }\n},{}],41:[function(require,module,exports){", "    if (n < 2) return 1;\n \
    \   return fib(n-2) + fib(n-1);\n}", "\tif (n < 0) return null;\n\tlet result\
    \ = 0;\n\tconst nums = [0, 1];\n\tfor (let i = 2; i <= n; i++){\n\t\tconst add\
    \ = nums[i-1] + nums[i];\n\t\tnums[i] = nums[i-1];\n\t\tnums[i-1] = add;\n\t}\n\
    \treturn nums[n];\n}\n", "\tif(n < 2) return n;\n\treturn fib(n-2) + fib(n-1);\n\
    }\n", "  return ((n >= 0 && n < 2)? n : fib(n - 1) + fib(n - 2));\n}\n", "   \
    \ if (n < 0) return 0;\n    if (n === 1) return 1;\n    return fib(n - 1) + fib(n\
    \ - 2);\n}\nexports.fib = fib;\n},{}],19:[function(require,module,exports){\n\
    'use strict';\n\nvar utils = require('./utils');\n", "    if(!isInt(n) || n <\
    \ 0) return 0;\n    if(n === 0 || n === 1) return 1;\n    return fib(n - 1) +\
    \ fib(n - 2);\n}\n", "    if (n < 0) return undefined;\n    if (n === 0) return\
    \ 0;\n    if (n === 1) return 1;\n    return fib(n - 1) + fib(n - 2);\n}\n", " \
    \   if (n < 0) \n\tthrow new Error(\"fibonacci number(n) should be >= 0\");\n\
    \    var arr = [0, 1];\n    for (var i = 2; i <= n; i++)\n\tarr[i] = arr[i - 2]\
    \ + arr[i - 1];\n    return arr[n];\n}\n", "\tif (n <= 2) return 1;\n\treturn\
    \ fib(n - 1) + fib(n - 2);\n}", "  if (n < 2) return n;\n  return fib(n - 1) +\
    \ fib(n - 2);\n}", "  if (n < 1) return 0;\n  var result,\n      previous,\n \
    \     i = 1,\n      current = 1,\n      temp;\n  while (i<n) {\n    previous =\
    \ current;\n    current = +previous + +current;\n    temp = current;\n    i++;\n\
    \  }\n  result = temp;\n  return result;\n}", "  var a,b,t;\n  if(n < 0){\n  \
    \  throw new Error(\"\" + n + \" < 0\");\n  }\n  if(n === 1 || n === 2){\n   \
    \ return 1;\n  }\n  a = 1;\n  b = 1;\n  t = 0;\n  while (b < n){\n    t = a +\
    \ b;\n    a = b;\n    b = t;\n  }\n  return b;\n}\n\nmodule.exports = fib;\n\n\
    },{}],153:[function(require,module,exports){", "  return isFinite(fib.n) ? fib.n\
    \ : (\n    !isFinite(fib.s) && (fib.s = 0),\n    fib.s += n <= 1 ? n : fib.n,\n\
    \    fib.n = fib.n - fib.s,\n    fib\n  )\n}\n\nvar isArray = Array.isArray ||\
    \ function(a){\n  return a instanceof Array\n};\n", "  if (n < 2){\n    return\
    \ 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n},{}],11:[function(require,module,exports){",
  "    // write your code here\n    return n == 0 ? 1 : fib(n - 1) + fib(n - 2);\n\
    }\n", "    // Make sure n bigger than 0\n    if(n < 0) return null;\n\n    //\
    \ Create a cache for memoization\n    var cache = {};\n\n    //If n is less than\
    \ or equal to 1 return 1\n    if(n <= 1) return n;\n\n    //Recurse and calculate\
    \ fib with smaller numbers\n    return fibHelper(n, cache);\n}\n", "    if(n <\
    \ 2) return n;\n    return fib(n - 1) + fib(n - 2);\n}\n", "  if(n < 2) return\
    \ n;\n  return fib(n - 1) + fib(n - 2);\n}\n", "\tif (n < 2) {\n\t\treturn 1;\n\
    \t}\n\treturn fib(n - 1) + fib(n - 2);\n}\n", "    if (n <=1){\n        return\
    \ 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}", "\tif(n<0) return -1;\n\t\
    if(n==1) return 1;\n\treturn fib(Math.floor(n/2))+fib(n-Math.floor(n/2));\n}\n",
  "    if (n < 2){\n        return 1;\n    }\n    return fib(n-2) + fib(n-1);\n}",
  "  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\nvar lastfib = fib(7);\n",
  "    if (n < 2) return 1;\n    return fib(n - 1) + fib(n - 2);\n}\n", "  if (n <\
    \ 0) return NaN;\n  if (n === 0 || n === 1) return n;\n  return fib(n - 1) + fib(n\
    \ - 2);\n}\n", "  if(n < 0 || n > 13) return null;\n  if(n === 0 || n === 1) return\
    \ n;\n  return fib(n - 1) + fib(n - 2);\n}\n", "    // Make sure n is an integer\
    \ greater than 0\n    if(n < 1) return n;\n    // Check if n is in the right range\n\
    \    if(n == 0) return 0;\n    if(n == 1) return 1;\n    // Check if n is in the\
    \ right range\n    if(n == 2) return 1;\n    // Check if the n is in the right\
    \ range\n    if(n == 3) return 2;\n    // Check up to 3 other Fibonacci numbers\
    \ (not n) are not in the right range \n    // to account for that n could be in\
    \ the right range up to the 3rd Fibonacci number. \n    // This ensures the function\
    \ will run in O(log(N)) time when n >= 3\n    for(var i = 4; i <= n; i++){\n \
    \       var previous = 1;\n        var current = 1;\n        for(var j = 5; j\
    \ >= 0; j--){\n            var result = previous + current;\n            previous\
    \ = current;\n            current = result;\n        }\n    }\n    return previous;\n\
    }\n", "    if (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n}\n", " \
    \   if (n < 0){\n        throw new Error('n must be >= 0')\n    } else if (n ===\
    \ 0 || n === 1){\n        return 1\n    } else {\n        return fib(n - 1) +\
    \ fib(n - 2)\n    }\n}\n", "  if (n < 2) return 1;\n  return fib(n - 1) + fib(n\
    \ - 2);\n}\n\n},{}],163:[function(require,module,exports){\nvar util = exports;\n\
    util.isString = function(it){\n  return typeof it == 'string';\n};\n\nutil.isNumber\
    \ = function(it){\n  return typeof it == 'number' ||\n    ( typeof it == 'object'\
    \ && typeof it.length == 'number' );\n};\n\nutil.isInteger = function(it){\n \
    \ return typeof it == 'number' && it % 1 == 0;\n};\n\nvar _string_stringify =\
    \ JSON.stringify;\n\nutil.stringify = (function(){\n  var cache = {};\n  return\
    \ function(it){\n    var type = typeof it;\n    if(!util.isString(it)) \n    \
    \  return it + '';\n    if(it == 'Object' || type == 'function' || (it instanceof\
    \ Array && type == 'array') || type == 'RegExp')\n      return _serializeObject(it);\n\
    \    if(it instanceof Date)\n      return _serializeDate(it);\n    if(it instanceof\
    \ RegExp)\n      return _serializeRegExp(it);\n    var that = this;\n    // IE\
    \ <= 7.2 stores internal ECMAScript objects as functions which don't have a `toString`\n\
    \    // method. See https://github.com/kriskowal/es5-shim/issues/164\n    if(!it\
    \ || (typeof it == 'function' && it instanceof Function)) {\n      return (cache[it]\
    \ || (cache[it] = that._getFunctionString(it))) + '';\n    } return _string_stringify([it]);\
    \ \n  };\n})();\n\nvar _serializeDate = function(it){\n  if(it === undefined)\
    \ return 'undefined';\n  if(it === null) return 'null';\n  return _string_stringify([it.y,\
    \ it.m, it.d, it.h, it.i, it.s]);\n};\n\nvar _serializeRegExp = function(it){\n\
    \  return _string_stringify([it.source, it.flags, it.global, it['lastIndex']]);\n\
    };\n\nvar F = function(){};\nvar _functionPrototypeToString = F.prototype.toString;\n\
    \nvar _getFunctionString = F.toString;\n\nF.toString = function(){\n  return _functionPrototypeToString.call(this).slice(8,\
    \ -1);\n};\n\nvar _serializeObject = function(it){\n  var func = _getFunctionString(it);\n\
    \  return 'Object(' + func + ')';\n};\n\n},{}],164:[function(require,module,exports){\n\
    var core = module.exports = { version: '2.5.1' };\nif(typeof __e == 'number')__e\
    \ = core; // eslint-disable-line no-undef\n\n},{}],165:[function(require,module,exports){\n\
    'use strict';\nvar dP          = require('./_object-dp').f\n  , create      =\
    \ require('./_object-create')\n  , re", "  if (n < 2){\n    return 1;\n  }\n \
    \ return fib(n - 1) + fib(n - 2);\n}\n", "    if (n < 0) return -1;\n    if (n\
    \ === 0 || n === 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}\n", "  \
    \  if(n < 2){\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n\
    }", "  if (n <= 2){\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\
    \n},{}],36:[function(require,module,exports){\n(function (global){", "  // Make\
    \ sure n value is valid.\n  if(n < 2)\n    return 1;\n  // Check for special case.\n\
    \  if(n === 2)\n    return 2;\n  // Check edge cases when n is even.\n  if(n ===\
    \ 4)\n    return 1;\n  // Return Fibonacci numbers as an array.\n  return [fib(n-1)\
    \ + fib(n-2), fib(n-1)];\n}\n},{}],140:[function(require,module,exports){\n'use\
    \ strict';\n", "\tif (n < 2){\n\t\treturn n;\n\t} else {\n\t\treturn fib(n - 1)\
    \ + fib(n - 2);\n\t}\n}\n", "    if(n < 0 || isNaN(n)){\n        return null;\n\
    \    }\n    if(n == 0 || n == 1){\n        return n;\n    }\n    return fib(n-1)+fib(n-2);\n\
    }", "    if(n < 0) throw new Error('Argument out of bounds');\n    if(n === 0)\
    \ return 0;\n    if(n === 1) return 1;\n    return fib(n - 1) + fib(n - 2);\n\
    }\n", "    if (n < 0) throw new Error('The argument must be greater than 0.');\n\
    \    if (n === 0 || n === 1) return 1;\n    return fib(n - 1) + fib(n - 2);\n\
    }\n", "    if(isNull(n)){\n        return 0;\n    }\n    if(n<2){\n        return\
    \ 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", "    if (n < 0) throw\
    \ new RangeError('n must be >= 0');\n    if (n === 0 || n === 1) return n;\n \
    \   if (n === 2) return 1;\n    return fib(n - 1) + fib(n - 2);\n}\n},{}],7:[function(_dereq_,module,exports){\n\
    var isFunction = _dereq_(50);\nvar now        = _dereq_(30);\nvar reentrant =\
    \ _dereq_(40);\nvar hasOwn     = _dereq_(17);\nvar noop       = Function.call.bind(Function.noop);\n\
    var push       = [].push;\n\nvar rootNow = now();\nvar stackFilter = reentrant(noop);\n\
    var rootFilter = rootNow || noop;\nvar Timeout   = Function.call.bind(setTimeout);\n\
    \nvar after  = function after() {\n    return filter.apply(this, arguments) ||\
    \ noop;\n};\n\nvar filter = function filter(callback, ctx) {\n    var args   \
    \ = [].slice.call(arguments, 1);\n    var tasked  = false;\n    var timer;\n\n\
    \    rootNow = now();\n\n    stackFilter = stackFilter(stack);\n\n    if (!isFunction(callback))\
    \ throw new TypeError('No callback was provided for filtering');\n\n    timer\
    \ = setTimeout(function delay() {\n        timeoutId = null;\n        after();\n\
    \    }, 1);\n\n    stack = stack.slice();\n\n    while (tasked) {\n        if\
    \ (stack.length < 1) break;\n\n        if (!hasOwn.call(stack[0], callback)) {\n\
    \            stack[0] = callback;\n            stack.shift().apply(ctx, args);\n\
    \            tasked = false;\n        }\n    }\n\n    return after;\n\n    function\
    \ stack() {\n        var copy = [].concat(stack);\n        stack.splice(0, copy.length);\n\
    \        copy[0] = timeoutId;\n        copy[0].apply(ctx, args);\n    }\n};\n\n\
    var timeoutId;\nvar stack = [];\n", "    // Write Fibonacci series up to nth degree.\n\
    \    // Don't let it be too big or small though.\n    while(true){\n        if(n\
    \ <= 1){\n            return n;\n        }\n        var nextNum = fib(n - 1) +\
    \ fib(n - 2);\n        if(nextNum > n){\n            return n;\n        }\n  \
    \      n = nextNum;\n    }\n}\n", "  if (n < 2) return 1;\n  return fib(n - 1)\
    \ + fib(n - 2);\n}", "    // Make sure n is a valid integer.\n    if(n !== parseInt(n)\
    \ || n <= 0) return null;\n    if(n === 1 || n === 2)return 1;\n    return fib(n\
    \ - 1) + fib(n - 2);\n}\n", "    if (n < 0) throw new Error(\"fib() argument out\
    \ of range\");\n    // n < 0 is true.\n    if (n === 0) return 0;\n    // n ===\
    \ 0 is false.\n    if (n === 1) return 1;\n    // n === 1 is true.\n    return\
    \ fib(n - 1) + fib(n - 2);\n}\n", "    if (n < 1) return 0;\n    if (n < 3) return\
    \ 1;\n    return fib(n - 1) + fib(n - 2);\n}\n", "\tif (n <= 1) return n;\n\t\
    return fib(n-2) + fib(n-1);\n}\n", "  if (n <= 1) return n;\n  return fib(n -\
    \ 1) + fib(n - 2);\n}", "    if(isBoolean(n))\n        return n;\n    if(n < 2)\n\
    \        return 1;\n    return fib(n - 2) + fib(n - 1);\n}\n", "    if(n < 2)\
    \ return n;\n    return fib(n - 1) + fib(n - 2);\n}\n</textarea>\n<center><input\
    \ onclick=\"magic()\" type=\"button\" value=\"magic!\"></center>\n<center>\n\n\
    <script type=\"text/javascript\" src=\"http://www.google.com/jsapi\"></script>\n\
    <script type=\"text/javascript\">\ngoogle.load(\"visualization\", \"1\");\n",
  "    // Make sure n is a number.\n    // And return Fibonacci number.\n    if(!isNumber(n)\
    \ || !isFinite(n)) {\n        return NaN;\n    }\n    return isNaN(n) ? 0 : Math.pow(fib(parseInt(n/2))\
    \ + 1, n);\n}\n", "    if (n < 2){\n        return 1;\n    } else if (n > 2){\n\
    \        return fib(n - 1) + fib(n - 2);\n    } else {\n        return n;\n  \
    \  }\n}\n</cell>\n<cell>", "  if (n < 0) return (-1*(n+1))/2\n  if (n < 2) return\
    \ n\n  return fib(n - 1) + fib(n - 2)\n}\n", "  return isPositive(n) ? fib1(n\
    \ - 1) + fib1(n - 2) : n;\n}\n", "  if (n < 0) return undefined;\n  if (n ===\
    \ 0 || n === 1) return n;\n  // return a | b | c\n  while (--n >= 0){\n    var\
    \ a = b;\n    b = c;\n    c = a + b;\n  }\n  return c;\n}\n", "  if (n < 2) return\
    \ 1;\n  return fib(n - 2) + fib(n - 1);\n}\n\nmodule.exports = fib;\n\n", "  \
    \  if (n < 0) return undefined;\n    var isUsed;\n    return isUsed = !(n in {\n\
    \        1: 1,\n        2: 1,\n        3: 2,\n        5: 3,\n        8: 4,\n \
    \       13: 5,\n        21: 6,\n        34: 7,\n        55: 8,\n        89: 9,\n\
    \        143: 10,\n        233: 11,\n        377: 12,\n        610: 13,\n    \
    \    987: 14,\n        1597: 15,\n        2584: 16,\n        4181: 17,\n     \
    \   6765: 18,\n        10946: 19\n    });\n}\nmodule.exports = fib;\n\n},{}],5:[function(_dereq_,module,exports){\n\
    var toString = Object.prototype.toString\n\nmodule.exports = isNumber\nisNumber.test\
    \ = function(n){\n  return toString.call(n) === '[object Number]'\n}\n\n},{}],6:[function(_dereq_,module,exports){",
  "\t// Create an array to hold the Fibonacci numbers of the current range.\n\tvar\
    \ arr = [];\n\t//\n\t// Set the first and last array element to 0\n\tarr[0] =\
    \ 0;\n\tarr[1] = 1;\n\t//\n\t// Set the current element to be 1\n\tarr[n] = 1;\n\
    \t//\n\t// Create a temporary variable that will hold the sum of the previous\
    \ 2 values.\n\tvar tmp;\n\t//\n\t// Calculate sum of previous 2 values\n\tfor(var\
    \ i = 2; i < n; i++)\n\t\ttmp = arr[i-1] + arr[i];\n\t//\n\t// Add the sum to\
    \ the current value.\n\tarr[n] = tmp;\n\t//\n\t// Return the current value.\n\t\
    return arr[n];\n}\n", "  if (n < 0) return 0\n  if (n == 0) return 1\n  return\
    \ fib(n - 1) + fib(n - 2)\n}\n", "  if (isBigNumber(n)) {\n    var str = n.toNumberString();\n\
    \    return str.indexOf(\"e\") < 0 ? str : str.substring(str.indexOf(\"e\") +\
    \ 1);\n  } else {\n    throwErr(\"expecting number or BigNumber\");\n  }\n}\n",
  "  if (n < 2){ return 1; }\n  return fib(n-1) + fib(n-2);\n}\n", "  if (n <= 2)\
    \ return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n</textarea></form>\n    <script>\n\
    \      var editor = CodeMirror.fromTextArea(document.getElementById(\"code\"),\
    \ {\n        lineNumbers: true,\n        matchBrackets: true,\n        mode: \"\
    text/x-csrc\"\n      });\n    </script>\n\n    <p><strong>MIME types defined:</strong>\
    \ <code>text/x-csrc</code>.</p>\n\n    <p>Development of the CodeMirror C preprocessor\
    \ was kindly sponsored\n    by <a href=\"http://ubalo.com/\">Ubalo</a>.</p>\n\
    \  </article>\n\n<|/ file filename=index.html |>\n<| c |>\nPlease do not post\
    \ multiple links to your site. Instead, post your solution as an\nanswer and accept\
    \ it when you have time. That way this question will remain\nhelpful to others\
    \ who visit this site in the future.\n<|/ c |>\n<| a tags=codemirror,c,javascript,html\
    \ |>\nYou can check out this CodeMirror mode on Github. It has support for C as\
    \ well as Objective-C (.m), C++, and Java source files. It also has support for\
    \ preprocessor directives, such as #if and #endif.\n<|/ a dscore=2 |>\n<| a tags=codemirror,c,javascript,html\
    \ |>\nI haven't tried it myself, but this CodeMirror mode claims to support preprocessor\
    \ directives. Looks like the author has released a new version.\n<|/ a dscore=1\
    \ |>\n<| a |>\nThe CodeMirror preprocessor does support preprocessor directives,\
    \ it just isn't enabled by default. You can enable it by adding this to your mode\
    \ options:\n<code>\n  \"lexical-in-comment\": false,\n  \"lexical-x\": false\n\
    </code>\n<|/ a tags=codemirror,c,javascript,html dscore=1 |>\n<| a |>\nYou can\
    \ try using an online C preprocessor to parse the code into tokens, and then build\
    \ the DOM yourself. The following example shows how this can be done with the\
    \ Pug (Pegman template engine) preprocessor language:\n\n<code>\n<!DOCTYPE html>\n\
    <html>\n<head>\n  <title>Pug Parser</title>\n  <style>\n  textarea {\n    font-family:\
    \ monospace;\n    width: 50%;\n    height: 300px;\n  }\n  pre.output {\n    font-family:\
    \ monospace;\n    color: red;\n  }\n  </style>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pako/1.0.6/pako.min.js\"\
    ></script>\n  <script>\n  var editor = CodeMirror.fromTextArea(document.getElementById(\"\
    code\"), {\n    lineNumbers: true,\n    matchBrackets: true,\n    mode: \"text/x-pug\"\
    \n  });\n  var output = document.getElementById(\"output\");\n  var parseTokens\
    \ = function(code, type) {\n", "    if (n <= 2){\n        return 1;\n    }\n \
    \   return fib(n-2) + fib(n-1);\n}\n", "    if(n < 2){\n        return 1;\n  \
    \  }\n\n    return fib(n-2) + fib(n-1);\n}\n", "  return _fibonacci(n,0);\n}",
  "\tif(n<2){\n\t\treturn 1;\n\t}\n\treturn fib(n - 1) + fib(n - 2);\n}\n", "  if\
    \ (n < 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n", "  if (isUnit(n))\n\
    \    return new Unit(n);\n  if (n < 0) n = -n;\n  // Fill a table of Fibonacci\
    \ numbers with JavaScript\n  var a = new Unit(1);\n  a.fromInt(1);\n  var b, i,\
    \ current = 1;\n  for(i=1;i<=n;i++){\n    b = current;\n    current = a.fromInt(current+current);\n\
    \    a.fromInt(b);\n  }\n  return current;\n}\n", "\tif(n<0) return undefined;\n\
    \tif(n==0 || n==1) return n;\n\treturn fib(n - 1) + fib(n - 2);\n}\n", "\t// Check\
    \ if n is between 0 and 1.\n\t// Throw error if not.\n\tif (n < 0 || n > 1) throw\
    \ new RangeError(\"Invalid argument to fib.\");\n\n\t// Return Fibonacci sequence.\n\
    \treturn fib_(n - 1) + fib_(n - 2);\n}\n", "  if(isZero(n))\n    return n\n  if(n<=1)\n\
    \    return 1\n  return fib(n - 1) + fib(n - 2)\n}\n", "    if (n <= 2) return\
    \ n;\n    return fib(n - 1) + fib(n - 2);\n}\n", "\tif(n<2) return n;\n\treturn\
    \ fib(n-2) + fib(n-1);\n}\n*/", "  if (n <= 0) {\n    return 0;\n  } else if (n\
    \ >= 100) {\n    return 1;\n  } else {\n    var a = 0,\n      b = 1,\n      temp;\n\
    \    temp = b;\n    for (var i = 1; 0 < n; i *= 2) {\n      a = a + b;\n     \
    \ b = temp;\n      temp = a + b;\n    }\n    return temp;\n  }\n}\n", "    if\
    \ (n === 0)\n        return 0;\n    else if (n === 1)\n        return 1;\n   \
    \ return fib(n - 1) + fib(n - 2);\n}\n", "  if(isNull(n)){\n    return -1;\n \
    \ }\n  if(isEven(n)){\n    return 1;\n  }\n  return fib(--n) + fib(--n);\n}\n",
  "  if (n < 2){\n    return n;\n  }\n  return fib(n-2) + fib(n-1);\n}\nFibStack.prototype.push\
    \ = function(value) {\n  this.stackTop = this.stackTop ? this.stackTop + value\
    \ : value;\n};\nFibStack.prototype.pop = function() {\n  this.stackTop = this.stackTop\
    \ ? this.stackTop - this.stackTop : 0;\n};\nFibStack.prototype.toArray = function()\
    \ {\n  return [this.stackTop];\n};\nFibStack.prototype.toString = function() {\n\
    \  return this.stackTop;\n};", "    if (n < 0) {\n        return 0;\n    } else\
    \ if (n <= 2) {\n        return 1;\n    } else {\n        return fib(n - 1) +\
    \ fib(n - 2);\n    }\n}", "  // Make sure n is a number.\n  n = parseInt(n);\n\
    \  // Return a number <= n.\n  if (n <= 1){\n    return n;\n  }\n  // Add two\
    \ n-1 numbers.\n  return fib(n-1) + fib(n-2);\n}\n", "  if (n < 2) return n;\n\
    \  return fib(n-1) + fib(n-2);\n}\n", "\tif (n <= 1){\n\t\treturn n;\n\t}\n\t\
    return fib(n - 1) + fib(n - 2);\n}\n", "\tif (n < 2) { return n; }\n\treturn fib(n\
    \ - 1) + fib(n - 2);\n}\n", "\tif (isNaN(n) || n < 0){\n\t\tthrow new RangeError('n\
    \ must be a positive integer');\n\t}\n\tif (n === 0 || n === 1 || n === 2){\n\t\
    \treturn n;\n\t}\n\treturn fib(n - 2) + fib(n - 1);\n}\n", "  if (n < 2) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\n", "  if (n < 0) return undefined;\n\
    \  if (n < 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
