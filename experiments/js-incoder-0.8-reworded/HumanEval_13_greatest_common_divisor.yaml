name: HumanEval_13_greatest_common_divisor
language: js
prompt: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
  \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a,\
  \ b){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
  \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
  \ 60),12);\n}\n\ntest();"
completions: ["  return (b && !a) ? b : a;\n}\n\n},{}],152:[function(require,module,exports){",
  "  a = Math.abs(a);\n  b = Math.abs(b);\n  if(a < b){\n    var c = a;\n    a = b;\n\
    \    b = c;\n  }\n  while(true){\n    if(a % b === 0) return b;\n    if(a > b)\
    \ break;\n    b = Math.floor(a / b);\n  }\n  return -1;\n}\n", "    a = Math.abs(a)\n\
    \    b = Math.abs(b)\n    var max_common_divisor = 0\n    if(b !== 0)\n      \
    \  while (a % b != 0){\n            max_common_divisor++\n            a /= b\n\
    \        }\n    else\n        while (a != 0){\n            max_common_divisor++\n\
    \            a /= a\n        }\n    return max_common_divisor\n}\n", "    if(a\
    \ === 0)\n        return b;\n    if(b === 0)\n        return a;\n    if(a > b)\n\
    \        return greatest_common_divisor(b, a % b);\n    while(a % b){\n      \
    \  a = a % b;\n    }\n    return a;\n}", "  if(a === 0)\n    return b;\n  if(b\
    \ === 0)\n    return a;\n  if(b < a)\n    return greatest_common_divisor(b, a\
    \ % b);\n  else \n    return greatest_common_divisor(a, a % b);\n}\n</cell>\n\
    <text>\nTime complexity and Big O Notation\n\n</text>\n<text>\nAs we will be using\
    \ this algorithm a lot, we will be thinking about its Big O Notation. This notation\
    \ measures the time complexity of an algorithm. For an algorithm that takes $n$\
    \ steps to execute, its Big O Notation is $O(n)$.\n\nFor example, if we have an\
    \ algorithm that processes strings consisting of $n$ characters, then the Big\
    \ O Notation would be $O(n^2)$.\n\n\n</text>\n<text>\nExample 1: Sieve of Eratosthenes\n\
    \n</text>\n<text>\nLet's look at an example of a Big O Notation algorithm that\
    \ implements Sieve of Eratosthenes.\n\n\n</text>\n<cell>", "    if(a === 0)\n\
    \        return b;\n    if(b === 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n", "  if(b == 0){\n    return a;\n  }\n\n  if(b % a == 0){\n   \
    \ return b;\n  }\n\n  return greatest_common_divisor(b, a % b);\n}\n\nmodule.exports\
    \ = {\n  random_string,\n  random_number,\n  random_boolean,\n  random_date,\n\
    \  random_object,\n  random_array,\n  random_array_element,\n  random_string,\n\
    \  random_object,\n  random_number,\n  random_boolean,\n  random_date,\n  random_array,\n\
    \  random_array_element,\n  random_string\n};\n\n},{}],2:[function(require,module,exports){\n\
    const uuid = require('uuid');\nconst fs = require('fs');\nconst path = require('path');\n\
    const { promisify } = require('util');\n", "\tif (b == 0) return a;\n\tif (b >\
    \ a) return b;\n\tif (b < a) return a;\n\tvar c = 1;\n\twhile (c < b) c = c <<\
    \ 1;\n\treturn c;\n}\n", "  for(var i = 1;; i *= 2){\n    if((a % i == 0) && (b\
    \ % i == 0)){ return i; }\n    if(b % i == 0){ a /= i; b /= i;\n    } else { a\
    \ /= i;\n    }\n  }\n}\n\nmodule.exports = greatest_common_divisor;\n\n},{}],32:[function(_dereq_,module,exports){\n\
    'use strict';\n\nvar split_at = _dereq_('./split_at');\n", "    // Cache the common\
    \ factors to avoid recalculating them\n    if(a === 0) return b;\n    if(b ===\
    \ 0) return a;\n    if(a < b) return greatest_common_divisor(b, a % b);\n    var\
    \ x = Math.abs((a / b) | 0);\n    return a * Math.pow(2,10*((x < 0) || (x > 0)\
    \ ? 1 : 0));\n}", "  if(b==0){\n    return a;\n  }\n  return gcd(a, b%a);\n}\n",
  "  return a % b === 0 ? a / b : greatest_common_divisor(b, a % b);\n}\n", "    if\
    \ (b === 0) return a;\n    if (a === 0) return b;\n    var r = a % b;\n    var\
    \ g = gcd(b, a % b);\n    return r === g ? r : g;\n}\n", "    a = Math.abs(a);\n\
    \    b = Math.abs(b);\n    return Math.floor(Math.abs(b) / Math.floor(Math.abs(a))\
    \ * Math.floor(a));\n}\n</code>\n<|/ a |>\n<| c |>\nI guess you mean `return Math.floor(Math.abs(b)\
    \ / Math.abs(a));`\n<|/ c |>\n<| a dscore=4 |>\nThe previous answers don't take\
    \ into account that gcd(a,b)=gcd(b,a).\n<code>", "  if(b === 0)\n    return a;\n\
    \  if(b === 1)\n    return a;\n  if(b > a)\n    return b;\n  for(var c = 1; c\
    \ <= b; c++) {\n    if(b % (a * c) === 0)\n      return c;\n  }\n  return b;\n\
    }\n;", "    if (a % b === 0){\n        return a;\n    }\n    if (b%a === 0){\n\
    \        return b;\n    }\n    return greatest_common_divisor(b, a % b);\n}",
  "    if (a === 0){\n        return b;\n    }\n    else if (b === 0){\n        return\
    \ a;\n    }\n\n    return greatest_common_divisor(b, a % b);\n}", "    if(a ===\
    \ b) return a;\n    if(a < b) a = b;\n    if(a > b) a = b;\n    while (b !== 0)\
    \ {\n        b = a % b;\n        a = b;\n    }\n    return a;\n};\n\n},{}],10:[function(require,module,exports){\n\
    'use strict';\n", "    if(a === 0) return b;\n    if(a === 1) return b;\n    return\
    \ greatest_common_divisor(b, a % b);\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for\
    \ your answer but your code is giving wrong result for input number 25. for 25\
    \ it gives 4 but correct answer is 5. and also for number 3 it gives 1 but correct\
    \ answer is 2.\n<|/ c |>\n<| c |>\nAh, sorry. Fixed it.\n<|/ c |>\n<| c |>\n,\
    \ did you see what I've changed? That should fix the problem you had. I'll take\
    \ a further look to see if you can improve that code.\n<|/ c |>\n<| c |>\nthanks\
    \ for your help. Actually my algorithm is correct but its working very slow for\
    \ large numbers because in each iteration my code checks all the numbers upto\
    \ sqrt(n) which can give a complexity of O(n). So what can i do to improve this\
    \ algorithm in terms of time complexity.\n<|/ c |>\n<| c |>\n, I'll take a look.\
    \ I'm curious what kind of numbers you were trying to run it with. I'm also curious\
    \ to know why it ran too slow. Also, if possible, please mark this question as\
    \ answered. Thanks!\n<|/ c |>\n<| a tags=arrays,c,algorithm |>\nYou need O(n)\
    \ time complexity for this problem and I used dynamic programming for that. \n\
    You need two arrays, one is dp[10000] which is used to store all solutions found\
    \ so far and another is visited[] which is used for storing visited nodes. \n\
    And here is my code:\n<code>\nvoid dfs(int node, int val)\n{\n    if(val == n)\n\
    \    {\n        ans = sum;\n        exit = 1;\n        return;\n    }\n    if(!visited[node])\n\
    \    {\n        visited[node] = 1;\n        sum = sum + dp[node];\n    }\n   \
    \ for(int i=0;i<n;i++)\n    {\n        if(dp[node]*dp[i] == n)\n        {\n  \
    \          sum = sum + dfs(i, val+i);\n        }\n    }\n    return sum;\n}\n\n\
    void solve(int val)\n{\n    visited[0] = 1;\n    sum = 0;\n    for(int i=1;i<n;i++)\n\
    \    {\n        dp[i] = 1;\n    }\n    sum = dfs(0,val);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\nHere's a recursive implementation that takes O(log n) time to run\
    \ when it's given an initial value of 0:\n<code>\n#include <st", "  if(b == 0)\
    \ return a;\n  if(b == 1) return a;\n  return greatest_common_divisor(b, a % b);\n\
    }\n", "    return greatest_common_divisor_helper(a, b);\n}\n", "  return b ===\
    \ 0 ? a : greatest_common_divisor(b, a % b);\n}\n", "    if(typeof a == 'number'\
    \ && typeof b == 'number'){\n        return Math.floor(a/greatest_common_divisor(b,\
    \ b)) || 1;\n    } else if(typeof a == 'string' || typeof b == 'string'){\n  \
    \      return greatest_common_divisor_string(a, b);\n    } else if(typeof a ==\
    \ 'object' && typeof b == 'object'){\n        return greatest_common_divisor_object(a,\
    \ b);\n    } else {\n        return greatest_common_divisor_number(a, b);\n  \
    \  }\n}\n", "\ta = Math.abs(a);\n\tb = Math.abs(b);\n\t\n\t// return Math.max(a,\
    \ b);\n\t// return Math.min(a, b);\n\t\n\t\n\t// https://stackoverflow.com/questions/16288693/javascript-modulo-operator-for-negative-numbers\n\
    \tif(a < b) \n\t{\n\t\tvar t = a;\n\t\ta = b;\n\t\tb = t;\n\t}\n\t\n\tif(b ==\
    \ 0) \n\t{\n\t\treturn a;\n\t} else \n\t{\n\t\treturn a / greatest_common_divisor(b,\
    \ a % b);\n\t}\n}\n\nvar is_in_array = function(a, list) {\n\tfor(var i=0; i<list.length;\
    \ i++)\n\t{\n\t\tif(list[i] == a) return true;\n\t}\n\treturn false;\n}\n\nvar\
    \ is_in_array_sorted = function(a, list) {\n\tfor(var i=0; i<list.length; i++)\n\
    \t{\n\t\tif(a>list[i]) return true;\n\t}\n\treturn false;\n}\n\nvar get_max_number\
    \ = function(list_numbers) {\n\tvar max_number = 0;\n\tfor(var i=0; i<list_numbers.length;\
    \ i++)\n\t{\n\t\tif(list_numbers[i] > max_number) max_number = list_numbers[i];\n\
    \t}\n\treturn max_number;\n}\n\nvar get_min_number = function(list_numbers) {\n\
    \tvar min_number = 100;\n\tfor(var i=0; i<list_numbers.length; i++)\n\t{\n\t\t\
    if(list_numbers[i] < min_number) min_number = list_numbers[i];\n\t}\n\treturn\
    \ min_number;\n}\n\nvar get_mean = function(list_numbers) {\n\tvar mean = 0;\n\
    \tfor(var i=0; i<list_numbers.length; i++)\n\t{\n\t\tmean += list_numbers[i];\n\
    \t}\n\treturn mean/list_numbers.length;\n}\n\nvar get_mode = function(list_numbers)\
    \ {\n\tvar mode = 1;\n\tfor(var i=0; i<list_numbers.length; i++)\n\t{\n\t\tif(list_numbers[i]\
    \ == list_numbers[list_numbers.length-1]) {\n\t\t\tif(list_numbers[i] > list_numbers[list_numbers.length-1])\
    \ mode++;\n\t\t}\n\t\telse mode = 1;\n\t}\n\treturn mode;\n}\n\nvar get_median\
    \ = function(list_numbers) {\n\tvar array_sorted = sort_array(list_numbers);\n\
    \treturn array_sorted[Math.floor(array_sorted.length/2)];\n}\n\nvar get_variance\
    \ = function(list_numbers) {\n\tvar mean = get_mean(list_numbers);\n\tvar variance_sum\
    \ = 0;\n\tfor(var i=0; i<list_numbers.length; i++)\n\t{\n\t\tvariance_sum += Math.pow(list_numbers[i]-mean,\
    \ 2);\n\t}\n\treturn variance_sum/list_numbers.length;\n}\n\nvar get_std = function(list_numbers)\
    \ {\n\treturn Math.sqrt(get_variance(list_numbers));\n}\n\nvar get_median_mode\
    \ = function(list_numbers) {\n\tvar mode = get_mode(list_numbers);\n\tvar median\
    \ = get_median(list_numbers);\n\t\n\tfor(var i=0; i<list_number", "    return\
    \ a % b ? greatest_common_divisor(b, a % b) : b;\n}\n", "  if (b===0)\n    return\
    \ a;\n  if (a===0)\n    return b;\n  return greatest_common_divisor(b, a % b);\n\
    }\n", "    if(a === 0)\n        return b;\n    if(b === 0)\n        return a;\n\
    \    while(a){\n        a = Math.floor(a / b);\n        if(a === b)\n        \
    \    return a;\n    }\n    return 0;\n}\n", "  return a / greatest_common_divisor(b,\
    \ a % b);\n}\n", "    return b === 0 ? a : greatest_common_divisor(b, a % b);\n\
    };\n", "    return Math.abs(b) / Math.abs(a) * Math.floor(Math.abs(b) / Math.abs(a));\n\
    }\n    ", "    return b === 0 ? a : greatest_common_divisor(b, a % b);\n}\n",
  "  return Math.abs(a % b + a / b) % b;\n}\n", "    if (a == 0)\n        return b;\n\
    \    if (b == 0)\n        return a;\n    while (b != 0){\n        var m = a %\
    \ b;\n        a = b;\n        b = m;\n    }\n    return a;\n}\n", "  return Math.abs(a)\
    \ >>> 0 < Math.abs(b) >>> 0 ? 1 : Math.abs(a) >>> 0 > Math.abs(b) >>> 0 ? b :\
    \ Math.abs(a) >>> 0 == Math.abs(b) >>> 0 ? a : NaN;\n}", "    if (a === 0) return\
    \ b;\n    if (b === 0) return a;\n    if (a === b) return a;\n    if (a < b) a\
    \ = b;\n    if (a % b === 0) return b;\n    if (a > b) a = b;\n    while (a %\
    \ b != 0) {\n        a = Math.floor(a/b);\n    }\n    return a;\n}\n\nmodule.exports\
    \ = greatest_common_divisor;\n\n},{}],126:[function(_dereq_,module,exports){\n\
    var util = _dereq_('./util');\nvar compare = _dereq_('./compare');\n", "  if(a\
    \ === 0){\n    return b;\n  }\n  if(typeof a === 'number' && typeof b === 'number'){\n\
    \    return Math.abs((a%b)/greatest_common_divisor(a,b));\n  }\n  if((typeof a\
    \ === 'number' || typeof b === 'number') && a === parseInt(a,10) && b === parseInt(b,10)){\n\
    \    if(a % b === 0){\n      return parseInt(a, 10);\n    }\n  }\n  var c = greatest_common_divisor(b,a);\n\
    \  while(c !== 0){\n    if(a % c === 0 && b % c === 0){\n      return c;\n   \
    \ }\n    if(a % c === 0){\n      b = c % b;\n    }\n    if(b % c === 0){\n   \
    \   a = c % a;\n    }\n    c = greatest_common_divisor(b,a);\n  }\n  return a;\n\
    }\n", "    if(a === 0){\n        return b;\n    }\n    if(a === 1 || b === 1){\n\
    \        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n",
  "    if( a === 0 ){\n        return b;\n    }\n    while(b !== 0){\n        var\
    \ temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\
    var last_keydown_event = null;", "  return !b ? a : greatest_common_divisor(b,\
    \ a % b);\n}", "    var rem;\n    while (a != 0) {\n        b %= a;\n        rem\
    \ = ~~(b / a);\n        a = rem + a;\n    }\n    return Math.abs(rem);\n}\n\n",
  "  return b === 0 ? a : greatest_common_divisor_iterative(a, b);\n}\n", "  return\
    \ b == 0 ? a : greatest_common_divisor(b, a % b);\n};\n\n},{}],26:[function(require,module,exports){\n\
    'use strict';\n", "  return (Math.abs(a) % Math.abs(b)) % parseInt(Math.abs(Math.abs(a)\
    \ / Math.abs(b)));\n}\n\n", "    a = Math.abs(a)\n    b = Math.abs(b)\n    if(a\
    \ > b)\n        return a\n    else if(b > a)\n        return b\n    else return\
    \ Math.floor(a/b) * b\n}\n", "    a = Math.abs(a);\n    b = Math.abs(b);\n   \
    \ var r = a % b;\n    return r ? r + b : b; //This assumes r < b\n}\n", "    return\
    \ b === 0 ? a : greatest_common_divisor(b, a % b);\n}\n\n", "    return b ===\
    \ 0 ? a : greatest_common_divisor(b, a % b)\n}\n", "  if(a === 0){\n    return\
    \ b;\n  }\n  if(b === 0){\n    return a;\n  }\n  return gcd(a, b) %\n    greatest_common_divisor(b,\
    \ a - 1);\n}\n\n},{}],42:[function(require,module,exports){\n'use strict';\n",
  "  return !a % b ? a : gcd(b, a % b);\n}\n\nmodule.exports = greatest_common_divisor;\n\
    \n},{}],25:[function(require,module,exports){\nmodule.exports = {\n  abs: Math.abs,\n\
    \  acos: Math.acos,\n  acosh: Math.acosh,\n  add: function(a, b){\n    return\
    \ a + b;\n  },\n  asin: Math.asin,\n  asinh: Math.asinh,\n  atan: Math.atan,\n\
    \  atan2: Math.atan2,\n  atanh: Math.atanh,\n  ceil: Math.ceil,\n  clamp: function(value,\
    \ min, max){\n    return Math.min(max, Math.max(min, value));\n  },\n  clone:\
    \ function(object){\n    return JSON.parse(JSON.stringify(object));\n  },\n  cos:\
    \ Math.cos,\n  cosh: Math.cosh,\n  del: function(object, key){\n    delete object[key];\n\
    \    return object;\n  },\n  distance: function(v1, v2){\n    return Math.sqrt(Math.pow(v1\
    \ - v2, 2));\n  },\n  equal: function(a, b){\n    return a === b;\n  },\n  floor:\
    \ Math.floor,\n  gcd_: function(v1, v2){\n    if(v1 == 0)\n      return v2;\n\
    \    if(v2 == 0)\n      return v1;\n    return greatest_common_divisor(v1, v2);\n\
    \  },\n  hypot: function(v1, v2){\n    var a = Math.abs(v1);\n    var b = Math.abs(v2);\n\
    \    var t = b / a;\n    return v1 > 0 ? t : t * -1;\n  },\n  if_: function(test,\
    \ true_fn, false_fn){\n    if(test)\n      return true_fn();\n    else\n     \
    \ return false_fn();\n  },\n  is_number: function(value){\n    return typeof value\
    \ === 'number' && !isNaN(value);\n  },\n  is_object: function(value){\n    return\
    \ typeof value === 'object' && !(value instanceof Array);\n  },\n  is_string:\
    \ function(value){\n    return typeof value === 'string' || value instanceof String;\n\
    \  },\n  isNaN: isNaN,\n  log: function(value){\n    return Math.log(value);\n\
    \  },\n  max: function(a, b){\n    return Math.max(a, b);\n  },\n  min: function(a,\
    \ b){\n    return Math.min(a, b);\n  },\n  mod_: function(remainder, divisor){\n\
    \    return remainder % divisor;\n  },\n  mul_: function(number, times){\n   \
    \ return number * times;\n  },\n  neg: function(a){\n    return -a;\n  },\n  normalize:\
    \ function(value){\n    return value.replace(/[\\\\-\\\\+]/g, function(character){\n\
    \      return {'-': '-', '+': '+'}[character", "    if(!isInt(a) || !isInt(b)){\n\
    \        return false;\n    }\n    return Math.abs(a - b) % getMax(a, b);\n}",
  "  return Math.abs(a - b) % 4 === 0 && Math.abs(a - b) % 100 !== 0 ? Math.abs(a\
    \ - b) / gcd(a, b)\n                                                         :\
    \ void 0;\n}\n\n},{}],4:[function(require,module,exports){", "  return (b == 0)\
    \ ? a : greatest_common_divisor(b, a % b);\n}\n", "  return Math.abs(a / b) %\
    \ (a > b ? b : a) === 0 ? a : b;\n}\n},{}],9:[function(require,module,exports){\n\
    'use strict';\n", "  return Math.abs(a * b) / Math.round(a/b + 0.5);\n}\n", " \
    \ if(typeof a === \"number\" && typeof b === \"number\"){\n    if(a > b){\n  \
    \    return a;\n    }\n    return b;\n  }\n\n  var max_digit = Math.max(Math.abs(a),Math.abs(b));\n\
    \  if(max_digit > 10)\n    return Math.pow(10,max_digit);\n  else\n    return\
    \ a % b;\n}\n\n", "  // Euclid's algorithm\n  // http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  if(a === 0) return b;\n  if(a === 1) return b;\n  if(a === -1) return -b;\n\
    \  if(b === 0) return a;\n  if(b === 1) return a;\n  if(b === -1) return -a;\n\
    \  if(a === -1 || b === -1) return NaN;\n  return Math.floor(Math.sqrt(greatest_common_divisor(Math.abs(a),\
    \ Math.abs(b))));\n}\n\nmodule.exports = {\n  greatest_common_divisor: greatest_common_divisor,\n\
    \  euclidean_distance: euclidean_distance,\n  manhattan_distance: manhattan_distance,\n\
    \  euclidean_distance_square: euclidean_distance_square,\n  manhattan_distance_square:\
    \ manhattan_distance_square,\n  square_distance: square_distance,\n  diagonal_distance:\
    \ diagonal_distance,\n  square_distance_sq: square_distance_sq,\n  diagonal_distance_sq:\
    \ diagonal_distance_sq,\n  vector_distance: vector_distance,\n  vector_distance_square:\
    \ vector_distance_square\n};\n\n\n},{}],42:[function(require,module,exports){\n\
    'use strict';\n\nvar utils = require('../utils');\n", "  if(b == 0)\n    return\
    \ a;\n  if(b == 1)\n    return a;\n  if(b == 2)\n    return a;\n  if(a % b ==\
    \ 0)\n    return b;\n  if(a % b == 1)\n    return b;\n  if(a % b == 2)\n    return\
    \ b;\n  if(b % a == 0)\n    return a;\n  if(b % a == 1)\n    return a;\n  if(b\
    \ % a == 2)\n    return a;\n  var d = a % b;\n  if(d == 0)\n    return b;\n  if(d\
    \ == 1)\n    return b;\n  if(d == 2)\n    return b;\n  var res = greatest_common_divisor(b,\
    \ d);\n  return res;\n}\n\n", "  if(b === 0) {\n    return a;\n  }\n  if(b ==\
    \ 1) {\n    return a;\n  }\n  var c = a % b;\n  if(c === 0) {\n    return b;\n\
    \  }\n  if(c < 0) {\n    return greatest_common_divisor(b, c);\n  }\n  return\
    \ a;\n}\n", "  return !b ? a : greatest_common_divisor(b, a % b);\n}\n\nexports.greatest_common_divisor\
    \ = greatest_common_divisor;\n", "  return a / greatest_common_divisor(b, a %\
    \ b);\n}\n\n", "  // Divide all numbers in the array by the greatest common divisor\
    \ of them all\n  var divisor = greatest_common_divisor_of_all(a, b);\n  // Find\
    \ the greatest common divisor of the two numbers in the array\n  return greatest_common_divisor(a,\
    \ divisor);\n}\n", "  return b ? gcd(b, a % b) : a\n}\n", "\treturn Math.abs(a\
    \ % b) === Math.abs(b) % b ? b : a%b;\n}\n\nvar hasFormat = function(/*Object*/\
    \ obj){\n\treturn obj.hasOwnProperty && obj.hasOwnProperty(\"format\");\n};\n",
  "  return (Math.abs(a * b)/ (((a^b) % 1) +\n                           (a > b) ?\n\
    \                           1 : 0));\n}\n", "  if (a == 0) return b;\n  if (b\
    \ == 0) return a;\n  \n  var c;\n  var d = 1;\n  while (d <= a && d <= b){\n \
    \    c = (a%b) / d;\n     if (d == a || d == b) break;\n     d = c; \n  }\n  return\
    \ c\n}\n    ", "  if (a < b){\n    while (b > 0){\n      var r = a % b;\n    \
    \  if (r != 0) return r;\n      a = b;\n      b = a / b;\n    }\n  }\n  return\
    \ a;\n}\n", "\tif(b == 0) return a;\n\tif(b == 1) return a;\n\treturn Math.floor(a/b);\n\
    }", "  if(b == 0) return a;\n  return greatest_common_divisor(b, a % b);\n}\n",
  "  return !a || b % a === 0 && b !== 0;\n}\n", "    a = Math.abs(a);\n    b = Math.abs(b);\n\
    \    if (a % b === 0 && b > 0) {\n        return b;\n    }\n    else if ((a %\
    \ b === 0 && b < 0) || (a < 0)) {\n        return a;\n    }\n    else {\n    \
    \    return 1;\n    }\n}\n\nvar createGraph = function(){\n    var edges = [];\n\
    \    var nodes = [];\n\n    //Generate edges and nodes\n    for (var i = 0; i\
    \ < data.length; i++) {\n        nodes.push({\n            id: data[i][0],\n \
    \           name: data[i][1]\n        });\n    }\n\n    for (var i = 0; i < nodes.length;\
    \ i++) {\n        for (var j = 0; j < nodes.length; j++) {\n            if (nodes[i].id\
    \ != nodes[j].id) {\n                edges.push({\n                    source:\
    \ nodes[i].id,\n                    target: nodes[j].id\n                });\n\
    \            }\n        }\n    }\n\n    //Create graph with edges only\n    return\
    \ { nodes: nodes, edges: edges };\n}\n\nvar renderGraph = function(graph){\n \
    \   var force = d3.layout.force()\n        .nodes(graph.nodes)\n        .links(graph.edges)\n\
    \        .gravity(.01)\n        .charge(-3000)\n        .size([window.innerWidth,\
    \ window.innerHeight])\n        .start();\n\n    var svg = d3.select('body').append('svg').attr('width',\
    \ window.innerWidth).attr('height', window.innerHeight);\n    var link = svg.selectAll('.link').data(graph.edges);\n\
    \    link.enter()\n        .append('line')\n        .attr('class', 'link')\n \
    \       .style('stroke', '#555')\n        .style('stroke-width', 2)\n        .style('opacity',\
    \ .5)\n        .style('cursor', 'pointer');\n    link.exit().remove();\n\n   \
    \ var node = svg.selectAll('.node').data(graph.nodes);\n    node.enter().append('circle')\n\
    \        .attr('class', 'node')\n        .attr('r', 15)\n        .style('fill',\
    \ '#fff')\n        .style('opacity', .5)\n        .style('cursor', 'pointer')\n\
    \        .on('mouseover', function(d){\n            svg.selectAll('.link').style('opacity',\
    \ .5);\n        })\n        .on('mouseout', function(d){\n            svg.selectAll('.link').style('opacity',\
    \ 1);\n        });\n    node.exit().remove();\n\n    force.on('tick', function(){\n\
    \        link.attr('x1', function(d){ return d.source.x; })\n            .attr('y1',\
    \ function(d){ return d.source.y; })\n            .attr('x2', function(d){ return\
    \ d.target.x; })\n            .attr('y2', function(d){ return d.target.y; });\n\
    \n        node.attr('cx', function(d){ return d.x; })\n            .attr('cy',\
    \ function(d){ return d.y; });\n    });\n}\n\nvar addEdge", "  return !a ? b :\n\
    \         !b ? a :\n         greatest_common_divisor(b, a % b);\n}\n\nmodule.exports\
    \ = {\n  is_integer: is_integer,\n  is_string: is_string,\n  is_empty: is_empty,\n\
    \  is_empty_including: is_empty_including,\n  is_empty_not_including: is_empty_not_including,\n\
    \  is_positive: is_positive,\n  is_negative: is_negative,\n  is_odd: is_odd,\n\
    \  is_even: is_even,\n  is_integer_including: is_integer_including,\n  is_string_including:\
    \ is_string_including,\n  is_empty_including_string: is_empty_including_string,\n\
    \  is_empty_not_including_string: is_empty_not_including_string,\n  is_positive_including:\
    \ is_positive_including,\n  is_negative_including: is_negative_including,\n  is_odd_including:\
    \ is_odd_including,\n  is_even_including: is_even_including,\n  is_integer_including_string:\
    \ is_integer_including_string,\n  is_string_including_string: is_string_including_string,\n\
    \  is_empty_including_string_not: is_empty_including_string_not,\n  is_empty_not_including_string_not:\
    \ is_empty_not_including_string_not,\n  is_positive_including_string: is_positive_including_string,\n\
    \  is_negative_including_string: is_negative_including_string,\n  is_odd_including_string:\
    \ is_odd_including_string,\n  is_even_including_string: is_even_including_string,\n\
    \  is_integer_including_string_not: is_integer_including_string_not,\n  is_string_including_string_not:\
    \ is_string_including_string_not,\n  is_empty_including_string_not: is_empty_including_string_not,\n\
    \  is_empty_not_including_string_not: is_empty_not_including_string_not,\n  is_positive_including_string_not:\
    \ is_positive_including_string_not,\n  is_negative_including_string_not: is_negative_including_string_not,\n\
    \  is_odd_including_string_not: is_odd_including_string_not,\n  is_even_including_string_not:\
    \ is_even_including_string_not,\n  is_integer_including_integer: is_integer_including_integer,\n",
  "  a = Math.abs(a);\n  b = Math.abs(b);\n  if(b < a){\n    return a;\n  }\n  if(b\
    \ > a){\n    return b;\n  }\n  while(b > 0){\n    var c = a % b;\n    a = b;\n\
    \    b = c;\n  }\n  return a;\n}\n", "    a = Math.abs(a);\n    b = Math.abs(b);\n\
    \    var tmp;\n    while(a != b){\n        tmp = a % b;\n        a = b;\n    \
    \    b = tmp;\n    }\n    return a;\n}\n", "  //First we check if b is larger\
    \ than a\n  if(a < b){\n    return greatest_common_divisor(b,a)\n  }\n  //If a\
    \ is larger than b we need to swap a and b\n  if(b < a){\n    var t = a\n    a\
    \ = b\n    b = t\n  }\n  //return integer value of a divided by b\n  return a\
    \ / b\n}\n\n", "\tif (a === 0){\n\t\treturn b;\n\t}\n\tif (b === 0){\n\t\treturn\
    \ a;\n\t}\n\treturn greatest_common_divisor(b, a % b);\n}\n", "  if(b === 0) return\
    \ a;\n  if(a === 0) return b;\n  while(b) {\n    a = a%b;\n    b = b-b;\n  }\n\
    \  return a;\n}\n", "    a = +a; //coerce to number\n    b = +b; //coerce to number\n\
    \    if(a < b){\n        var c = a%b, d = b%a;\n        return c===d?a%b+b%a:c==d?b:a;\n\
    \    }else{\n        var c = a%b, d = b%a;\n        return c===d?b%a+a%b:c==d?a:b;\n\
    \    }\n}", "  return !b ? a : greatest_common_divisor(b, a % b);\n}\n\nmodule.exports\
    \ = greatest_common_divisor;\n\n},{}],184:[function(require,module,exports){",
  "  if(b===0)\n    return a;\n  if(b===a)\n    return b;\n  var r=null;\n  var divisor\
    \ = a;\n  while(b!==0){\n    r = (a%b===0)? a:b;\n    divisor = divisor*2;\n \
    \   b = r; \n  }\n  return divisor;\n}\n", "    return Math.abs(a * b) / Math.round((a\
    \ * b) / Math.max(a, b));\n}\n\nmodule.exports = greatest_common_divisor;\n\n\
    },{}],156:[function(require,module,exports){\nvar generators = require('async/lib/generators');\n\
    var resolve = require('path').resolve;\nvar readFileSync = require('fs').readFileSync;\n\
    var writeFileSync = require('fs').writeFileSync;\nvar spawn = require('child_process').spawn;\n\
    var exec = require('child_process').exec;\nvar isDir = require('is-directory');\n\
    var spawnSync = require('child_process').spawnSync;\nvar exec = require('child_process').execSync;\n\
    var isDir = require('is-directory');\n\nmodule.exports = function install(modulePath,\
    \ options) {\n    if (!options) {\n        options = {};\n    }\n\n    options.async\
    \ = true;\n\n    var done = options.callback ? function () {} : undefined;\n\n\
    \    var generator = options.async ? generators.async(options.callback) : generators.sync(options.callback);\n\
    \n    try {\n        var packageJsonPath = resolve(modulePath, './package.json');\n\
    \        var packageJson = require(packageJsonPath);\n\n        var newPackageJson\
    \ = {\n            name: packageJson.name,\n            version: packageJson.version,\n\
    \            description: packageJson.description,\n            author: packageJson.author,\n\
    \            dependencies: {}\n        };\n\n        if (packageJson.dependencies)\
    \ {\n            newPackageJson.dependencies = packageJson.dependencies;\n   \
    \     }\n\n        if (packageJson.devDependencies) {\n            newPackageJson.devDependencies\
    \ = packageJson.devDependencies;\n        }\n\n        var npmPath = resolve(modulePath,\
    \ './node_modules/.bin/npm');\n        var npmInstaller = 'npm install -g ' +\
    \ newPackageJson.name;\n\n        if (packageJson.version) {\n            npmInstaller\
    \ += ' \\'' + packageJson.version + '\\'';\n        }\n\n        var npmInstall\
    \ = spawn(npmPath, ['install'], options);\n\n        npmInstall.stdout.on('data',\
    \ generator);\n        npmInstall.stderr.on('data', generator);\n\n        npmInstall.on('close',\
    \ function (code) {\n            generator();\n\n            done();\n       \
    \ });\n\n        npmInstall.on('error', function (err) {\n            generator.throw(err);\n\
    \            done();\n        });\n    } catch (e) {\n        generator.throw(e);\n\
    \    }\n};\n\nmodule.exports.sync = function installSync(modulePath, options)\
    \ {\n    if (!options) {\n        options = {};\n    }\n\n    options.async =\
    \ true;\n\n    var done = options.callback ? function () {} : undefined;\n\n \
    \   var generator = options.async ? generators.async(options.callback) : generators.sync(options.callback);\n\
    \n    try {\n        var packageJsonPath = ", "    // Euclidian algorithm\n  \
    \  // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    // If a > b then\
    \ gcd(a, b) = a\n    // If a < b then gcd(a, b) = b\n    // Otherwise gcd(a, b)\
    \ = gcd(b, a % b)\n    if (a > b){\n        return a;\n    }\n    if (a < b){\n\
    \        return b;\n    }\n    while (a % b != 0){\n        a = b;\n        b\
    \ = a % b;\n    }\n    return b;\n}\n\n", "  a = Math.abs(a);\n  b = Math.abs(b);\n\
    \  var s = 1;\n  if(b !== 0){\n    s = a / b;\n  }\n  while(a%b!==0){\n    a =\
    \ Math.floor(a/b);\n    s++;\n  }\n  return s;\n}\n", "\tif(b === 0)\n\t\treturn\
    \ a;\n\tif(b === 1)\n\t\treturn a;\n\tif(b % 2 === 0){\n\t\treturn greatest_common_divisor(a%a,\
    \ b);\n\t}\n\telse{\n\t\treturn greatest_common_divisor(a, (b / 2));\n\t}\n}\n",
  "  return !b ? a : greatest_common_divisor(b, a % b);\n}\n\nexports.greatest_common_divisor\
    \ = greatest_common_divisor;\n\n", "  return a / gcd(a, b);\n}\n", "  var m;\n\
    \  if(b == 0)\n    return a;\n  m = a % b;\n  if(m == 0)\n    return b;\n  return\
    \ greatest_common_divisor(b,m) + a;\n}\n", "\treturn Math.abs(a * b) % (Math.round(a/b)\
    \ > 0 ? b : a);\n}\n\nexports.greatest_common_divisor = greatest_common_divisor;\n\
    });\n\nace.define('ace/mouse/fold_handler', ['require', 'exports', 'module' ],\
    \ function(require, exports, module) {\n\"use strict\";\n", "    return b == 0\
    \ ? a : greatest_common_divisor(b, a % b);\n}\n", "    return b === 0 ? a : greatest_common_divisor(b,\
    \ a % b);\n}\n\n", "  if(a === 0) return b;\n  if(b === 0) return a;\n  if(a ===\
    \ b) return 0;\n  if(b <= a) return greatest_common_divisor(b, a % b);\n  return\
    \ greatest_common_divisor(a%b, a);\n}\n", "  if(a < b){\n    return a;\n  }\n\
    \  return gcd(b, a%b);\n}\n", "    if (b === 0) {\n        return a;\n    } else\
    \ {\n        return greatest_common_divisor(b, a % b);\n    }\n}\n", "    return\
    \ Math.abs(a * b) / gcd(a, b);\n}\n\n},{}],43:[function(require,module,exports){\n\
    var isNumeric = require('fast-isnumeric');\n", "  var max_a = Math.max(a, b);\n\
    \  var min_a = Math.min(a, b);\n  var d = max_a - min_a;\n  if(d === 0){\n   \
    \ return a;\n  }\n  return greatest_common_divisor(max_a, d);\n}\n\n", "  return\
    \ a > b ? a : b;\n}\n\nmodule.exports = {\n  find_in_array: find_in_array,\n \
    \ get_time_string: get_time_string,\n  get_time_stamp: get_time_stamp,\n  get_current_timestamp:\
    \ get_current_timestamp,\n  get_current_datestamp: get_current_datestamp,\n  get_time_interval:\
    \ get_time_interval,\n  get_time_difference: get_time_difference,\n  get_current_time:\
    \ get_current_time,\n  get_current_time_timestamp: get_current_time_timestamp,\n\
    \  get_current_time_datestamp: get_current_time_datestamp,\n  get_current_time_string:\
    \ get_current_time_string,\n  get_time_in_ms_string: get_time_in_ms_string,\n\
    \  get_time_in_hours_string: get_time_in_hours_string,\n  get_time_in_minutes_string:\
    \ get_time_in_minutes_string,\n  get_time_in_seconds_string: get_time_in_seconds_string,\n\
    \  get_time_in_milliseconds_string: get_time_in_milliseconds_string,\n  get_date_part:\
    \ get_date_part,\n  get_datetime_part: get_datetime_part,\n  get_month_string:\
    \ get_month_string,\n  get_week_string: get_week_string,\n  get_day_of_month_string:\
    \ get_day_of_month_string,\n  get_day_of_week_string: get_day_of_week_string,\n\
    \  get_hour_string: get_hour_string,\n  get_minute_string: get_minute_string,\n\
    \  get_second_string: get_second_string,\n  get_milliseconds_string: get_milliseconds_string,\n\
    \  get_seconds_string: get_seconds_string,\n  get_duration_string: get_duration_string,\n\
    \  get_time_in_ms_string: get_time_in_ms_string,\n  get_time_in_hours_string:\
    \ get_time_in_hours_string,\n  get_time_in_minutes_string: get_time_in_minutes_string,\n\
    \  get_time_in_seconds_string: get_time_in_seconds_string,\n  get_time_in_milliseconds_string:\
    \ get_time_in_milliseconds_string,\n  get_date_part: get_date_part,\n  get_datetime_part:\
    \ get_datetime_part,\n  get_month_string: get_month_string,\n  get_week_string:\
    \ get_week_string,\n  get_day_of_month_string: get_day_of_month_string,\n  get_day_of_week_string:\
    \ get_day_of_week_string,\n  get_hour_string: get_hour_string,\n  get_minute_string:\
    \ get_minute_string,\n  get_second_string: get_second_string,\n  get_milliseconds_string:\
    \ get_millisecond", "    if (b===0)\n        return a;\n    while (a%b!==0)\n\
    \        a%=b;\n    return a;\n}", "    return b == 0 ? a : gcd(b, a % b);\n}\n",
  "  return b === 0 ? a : greatest_common_divisor(b, a % b);\n}\n</code></pre>\n \
    \       </article>\n    </section>\n\n\n\n\n</div>\n\n<nav>\n    <h2><a href=\"\
    index.html\">Home</a></h2><h3>Classes</h3><ul><li><a href=\"Fraction.html\">Fraction</a></li><li><a\
    \ href=\"Integer.html\">Integer</a></li><li><a href=\"Matrix.html\">Matrix</a></li><li><a\
    \ href=\"Rational.html\">Rational</a></li><li><a href=\"SparseMatrix.html\">SparseMatrix</a></li><li><a\
    \ href=\"Triple.html\">Triple</a></li><li><a href=\"Vector.html\">Vector</a></li></ul><h3>Global</h3><ul><li><a\
    \ href=\"global.html#bignumber\">bignumber</a></li><li><a href=\"global.html#fraction\"\
    >fraction</a></li><li><a href=\"global.html#number\">number</a></li><li><a href=\"\
    global.html#random\">random</a></li></ul>\n</nav>\n\n<br class=\"clear\">\n\n\
    <footer>\n    Documentation generated by <a href=\"https://github.com/jsdoc3/jsdoc\"\
    >JSDoc 3.5.5</a> on Wed May 02 2018 11:29:58 GMT-0700 (Pacific Daylight Time)\n\
    </footer>\n\n<script> prettyPrint(); </script>\n<script src=\"scripts/linenumber.js\"\
    > </script>\n</body>\n</html>\n\n<|/ file ext=.html filename=fraction.js.html\
    \ dstars=1 |><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>//This\
    \ package holds data types used in matrices, such as fractions and integers\n",
  "\treturn b ? gcd(b, a % b) : a;\n}", "    if (a < b) {\n        var tmp = a;\n\
    \        a = b;\n        b = tmp;\n    }\n    a = a % b;\n    return a;\n}\n",
  "  for(var i=1;i<=b;i++)\n  {\n    if(a%i==0)\n      return i;\n  }\n  return b;\n\
    }\n", "    while (a%b) a = b, b = a%b\n    return a\n}\n</code>\n<|/ a |>\n<|\
    \ a tags=math,javascript,algorithm,numbers |>\nThe solution:\n<code>\nconst gcd\
    \ = (a, b) => b ? gcd(b, a%b) : Math.abs(a);\n", "    return a!==0 ? gcd(a, b)\
    \ : NaN;\n}\n", "    return b == 0 ? a : greatest_common_divisor(b, a % b);\n\
    }\n", "  return b == 0 ? a : greatest_common_divisor_iterative(a, b);\n}\n", " \
    \ // http://en.wikipedia.org/wiki/Euclidean_algorithm\n  if(a === 0 || b === 0){\n\
    \    return 0;\n  }\n  if(b !== 0){\n    return gcd(b, greatest_common_divisor(a,\
    \ a % b));\n  }\n  return a;\n}\n", "    if (Math.abs(a) < Math.abs(b)) {\n  \
    \      return a;\n    } else {\n        return b;\n    }\n}\n", "    if (b ===\
    \ 0) {\n        return a;\n    }\n\n    while (true) {\n        var m = a % b;\n\
    \        if (m === 0) {\n            return b;\n        }\n        a = b;\n  \
    \      b = m;\n    }\n}\n\nvar is_array = Array.isArray || function(obj) {\n \
    \   return Object.prototype.toString.call(obj) === '[object Array]';\n};\n", " \
    \   return b == 0 ? a : greatest_common_divisor(b, a % b);\n}\n", "    if (b===0){\n\
    \        return a;\n    }\n    if (a===0){\n        return b;\n    }\n\n    if\
    \ (Math.abs(Math.floor(a/b)) === 1){\n        return a;\n    }\n    if (Math.abs(Math.floor(b/a))\
    \ === 1){\n        return b;\n    }\n    var c;\n    var m;\n    if (Math.abs((Math.floor(a/b)|0)\
    \ - (Math.floor(b/a)|0)) !== 1){\n        c = 1;\n        m = a/b;\n    }else{\n\
    \        c = -1;\n        m = b/a;\n    }\n\n    while (Math.abs(m) >= 1){\n \
    \       var new_m = m*m % a;\n        if (new_m > 0){\n            a = b;\n  \
    \          b = c;\n            c = new_m;\n        }else{\n            a = c;\n\
    \            b = new_m;\n            c = 1;\n        }\n        m = a/b;\n   \
    \ }\n    return c;\n}\n\n", "  if (a < b) {\n    return greatest_common_divisor(b,\
    \ a%b);\n  }\n  return b;\n}\n\n", "  return Math.max(a, b);\n}", "  return !(b%a)\
    \ && !(a % b);\n}\n", "  return gcd(a, b) > 1 ? gcd(a, b) : a;\n}\n", "    var\
    \ r; \n    for (r = 1; a % r === 0 && b % r === 0; r++){\n\tif(r > b)\n\t    break;\n\
    \    }\n    return r;\n}", "\ta = Math.abs(a);\n\tb = Math.abs(b);\n\tif(b ==\
    \ 0)\n\t\treturn a;\n\tfor(var x = 1; x < a; x++)\n\t\tif(b % x == 0)\n\t\t\t\
    return x;\n\treturn b;\n}\n", "  if (a === 0) return b;\n  if (b === 0) return\
    \ a;\n  if (a < b) a = b;\n  if (a === b) return a;\n  if (a < 0 || b < 0) throw\
    \ new Error(\"Unable to calculate greatest common divisor\");\n  if (a === 1)\
    \ return b;\n  if (b === 1) return a;\n  if (a === Infinity) return b;\n  if (b\
    \ === Infinity) return a;\n  while (--b >= 0) {\n    if (a % b === 0) return b;\n\
    \  }\n  throw new Error(\"Unable to calculate greatest common divisor\");\n}\n",
  "  if (b == 0)\n    return a;\n  else\n    return greatest_common_divisor(b, a %\
    \ b);\n}\n", "    if(b === 0){\n        return a;\n    }\n    if(b % a === 0){\n\
    \        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n",
  "    return a < b?a:greatest_common_divisor(b,a%b);\n}\n", "  return (b && !a) ?\
    \ b : greatest_common_divisor(b, a % b);\n}", "    if (b === 0)\n        return\
    \ a;\n    else {\n        var t = a % b;\n        if (t < 0)\n            t +=\
    \ b;\n        return t;\n    }\n}\n\n", "  if (b === 0){\n    return a;\n  }\n\
    \  return greatest_common_divisor(b, a % b);\n}\n", "  a = Math.abs(a);\n  b =\
    \ Math.abs(b);\n  if(a > b) var temp = a;\n  else var temp = b;\n  while(b){\n\
    \    if(a % b == 0){\n      a = b;\n      b = temp;\n    }else{\n      b = a %\
    \ b;\n    }\n  }\n  return a;\n}\n", "    a = Math.abs(a);\n    b = Math.abs(b);\n\
    \    // if a > b, swap them\n    if (a > b){\n        var temp = a;\n        a\
    \ = b;\n        b = temp;\n    }\n    // returns greatest common divisor\n   \
    \ while (b != 0){\n        var rem = a % b;\n        a = b;\n        b = rem;\n\
    \    }\n    return Math.abs(a);\n}\n", "    if(b === 0) return a;\n    \n    var\
    \ r = a % b;\n    var g = a / b;\n    var lcm = greatest_common_divisor(b, r);\n\
    \n    return r + ( lcm && ( a / lcm ) % b );\n}\n", "  return !a ? b : greatest_common_divisor(b,\
    \ a % b);\n}\n", "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  if (b >=\
    \ a) {\n    return a;\n  }\n  var m = -(a/b);\n  if (m > 1) {\n    m = -(a%b);\n\
    \    if (m > 1) {\n      m = -(a%b);\n    }\n  }\n  return m;\n}\n", "\treturn\
    \ (Math.abs(a)>Math.abs(b))?(a>b?a:b):Math.abs(a)+(b<Math.abs(a)? b:Math.abs(a));\n\
    };\n", "    if(b == 0) return a;\n    return greatest_common_divisor(b, a % b);\n\
    }\n", "  return a === 0 ? b : a === b ? a : greatest_common_divisor(b, a % b);\n\
    }\n", "  a = a|0;\n  b = b|0;\n  \n  // http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  \n  // Compute the GCD of a and b\n  // Greatest Common Divisor\n  \n  // a\
    \ & 0 => a\n  // a & 1 => b\n  // a & 2 => a / 2\n  // a & 4 => b / 2\n  // a\
    \ & 8 => a / 4\n  // a & 16 => b / 4\n  // a & 32 => a / 8\n  // a & 64 => b /\
    \ 8\n  // a & 128 => a / 16\n  // a & 256 => b / 16\n  \n  return ((a & b) | ((a\
    \ & (a - b)) & b));\n}\n", "    return Math.abs(a % b) / Math.abs(b) || 0;\n}\n",
  "    if(a <= b) return a;\n    return gcd(b, a%b);\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThank you for the contribution, but this isn't really an answer. Maybe\
    \ you can add some code to show how it works.\n<|/ c |>\n<| a |>\nThe simplest\
    \ way is to use an iterative solution:\n<code>\nint gcd(int a, int b)\n{\n   \
    \ while (a != 0)\n    {\n        int temp = a % b;\n        a = b;\n        b\
    \ = temp;\n    }\n    return b;\n}\n</code>\nThe iterative solution can be better\
    \ than this iterative solution.\n<|/ a tags=greatest-common-divisor,c++,algorithm\
    \ dscore=0 |>\n<| a dscore=0 |>\nIt can be done in one line in python:\n<code>\n\
    def gcd(a, b):\n    if a > b:\n        a, b = b, a\n    while b != 0:\n      \
    \  a, b = b % a, a\n    return a\n</code>\n<|/ a tags=greatest-common-divisor,c++,algorithm\
    \ |>\n<| a tags=greatest-common-divisor,c++,algorithm |>\nFor those who are also\
    \ looking for implementing the GCD algorithm in C++:\n<code>\nint gcd(int a, int\
    \ b) {\n    while (a != b) {\n        int temp = a % b;\n        a = b;\n    \
    \    b = temp;\n    }\n    return a;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    <code>\nint gcd(int a, int b)\n{\n    if (a == 0)\n        return b;\n    else\n\
    \        return gcd(b%a,a);\n}\n</code>\n<|/ a tags=greatest-common-divisor,c++,algorithm\
    \ dscore=0 |>\n<| c |>\nHi, welcome to Stack Overflow. While this code may answer\
    \ the question, providing additional context regarding *why* and/or *how* this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nint gcd(int a, int b)\n{\n    int g;\n    while(b>0)\n    {\n  \
    \      g=(a%b);\n        a=b;\n        b=g;\n    }\n    return a;\n}\n</code>\n\
    <|/ a tags=greatest-common-divisor,c++,algorithm |>\n<| a dscore=0 tags=greatest-common-divisor,c++,algorithm\
    \ |>\n<code>\nint gcd(int a,int b){\n    if", "    return Math.abs(a - b) < (a\
    \ | 0) ? (a | 0) : greatest_common_divisor(b, a - Math.abs(a));\n}\n", "    return\
    \ b === 0 ? a : greatest_common_divisor(b, a % b);\n}\n", "    return a/gcd(a,b)\n\
    }", "    if (b === 0) return a;\n    if (a === 0) return b;\n    if (a === b)\
    \ return a;\n    if ((a === 0) || (b === 0)) return b;\n    var t = a > b ? a\
    \ : b;\n    return greatest_common_divisor(b, a % t);\n}\n</code>\nThis works,\
    \ thank you for all the help.\n<|/ a dscore=4 |>\n<| c |>\nIt should be noted\
    \ that if your number is prime and your dividing by itself does not result in\
    \ a zero, this will not work. This is a pretty common error for people trying\
    \ to learn the algorithms. If you do need to make this work, you can just change\
    \ \"a === b\" to \"a === 1\" on the last line. It will still work as long as your\
    \ number is prime.\n<|/ c |>\n<| c |>\nIf you want this to work with negative\
    \ numbers, you can change `a % b` by `a % (-b)`.\n<|/ c |>\n<| a |>\nThis is my\
    \ implementation. It doesn't use division, and it works regardless of whether\
    \ a or b is negative.\n<code>\npublic static int greatestCommonDivisor(int a,\
    \ int b) {\n  int i = 0;\n  while (a % i != 0 && b % i != 0)\n    i++;\n  return\
    \ i;\n}\n</code>\n<|/ a dscore=3 tags=java |>\n<| c |>\nThis doesn't seem to work\
    \ for `greatestCommonDivisor(2, 3)`\n<|/ c |>\n<| c |>\nThis doesn't work when\
    \ `a` and `b` are negative.\n<|/ c |>\n<| c |>\n, good point. I don't think my\
    \ algorithm takes negative numbers into account, then. It looks like `i` should\
    \ be initialized at the beginning.\n<|/ c |>\n<| c |>\nThat's what I meant by\
    \ \"doesn't work regardless whether `a` or `b` is negative\".\n<|/ c |>\n<| a\
    \ |>\nThis works with negative numbers as well and is a little shorter:\n<code>\n\
    public static final BigInteger GCD(BigInteger a, BigInteger b) {\n  BigInteger\
    \ g = BigInteger.valueOf(1);\n  while (g.compareTo(a) > 0 || g.compareTo(b) >\
    \ 0) {\n    g = g.multiply(a);\n  }\n  return g;\n}\n</code>\n<|/ a dscore=3 tags=java\
    \ |>\n<| c |>\nThis doesn't work when `a` and `b` are negative.\n<|/ c |>\n<|\
    \ c |>\nIt works when a<0 and b<0\n<|/ c |>\n<| c |>\nYes it does, just tested\
    \ it. What I meant ", "    var r = 1;\n    while (a % b != 0) {\n\tr = b;\n\t\
    b = a % b;\n\ta = r;\n    }\n    return a;\n}\n", "    while(a != b){\n      \
    \  a = Math.abs(a%b);\n        b = Math.abs(b%b);\n    }\n    return a\n}\n",
  "  return (b == 0) ? a : greatest_common_divisor(b, a % b);\n}\n", "    if(b===0)\n\
    \        return a;\n    return greatest_common_divisor(b, a % b);\n}\n</code>\n\
    <|/ a |>\n<| c |>\nHow would you do the opposite operation? I need to find the\
    \ smallest prime number in the set `[3,5..100]`. Thanks!\n<|/ c |>\n<| c |>\n\
    The smallest prime number in the set of [3,5..100] is 3.\n<|/ c |>\n<| a dscore=4\
    \ tags=primes,algorithm |>\nA recursive solution in python:\n<code>\ndef primes(start=2,\
    \ stop=1000000000):\n    if start < stop:\n        mid = (stop+start)/2\n    \
    \    if start == stop: \n            yield mid\n        if mid != 2: yield from\
    \ primes(start, mid)\n        if mid != 2: yield from primes(mid, stop)\n\nprimes\
    \ = list(primes())\n</code>\n<|/ a |>\n<| c |>\nAwesome, this is really fast,\
    \ thanks!\n<|/ c |>\n<| c |>\nThis is great for Python. I had to make a small\
    \ change to make it work in Scala as well; I added the line `yield from primes(mid,\
    \ stop)` to `if start == stop: yield mid`\n<|/ c |>\n<| a dscore=3 |>\nPython\
    \ - Prime numbers below a threshold\n\nIn computer science, a prime number is\
    \ a natural number greater than 1 that has no positive divisors other than 1 and\
    \ itself. In mathematics, a prime number is a natural number greater than 1 that\
    \ has no positive divisors other than 1 and itself plus 1 and is greater than\
    \ 1.\n\n<code>\nprimes=[]\nfor n in range(2,100):\n    if n>1:\n        if n==2:\n\
    \            primes.append(n)\n        else:\n            for i in range(3,n,\
    \ 2):\n                if (n % i) == 0:\n                    break\n         \
    \   else:\n                primes.append(n)\nfor n in range(2,100):\n    if n\
    \ not in primes:\n        print((n-1))\n</code>\n<|/ a tags=primes,algorithm |>\n\
    <| c |>\nThis is by far the most concise and efficient solution. Thanks!\n<|/\
    \ c |>\n<| c |>\nThis works well and is a very useful solution, but unfortunately\
    \ it doesn't work with big numbers (such as n = 1e10) in Python.  Do you have\
    \ a solution that works with big numbers?\n<|/ c |>\n<| c |>\nNice! This algorithm\
    \ is very efficient!\n<|/ c |>\n<| a dscore=3 |>\nI've written a python code that\
    \ does exactly that:\n<code>\ndef primes(start, stop):\n    \"\"\"", "    a =\
    \ Math.abs(a);\n    b = Math.abs(b);\n    var temp = a;\n    a = b;\n    b = temp;\n\
    \    while(a !== 0){\n        temp = a % b;\n        a = b;\n        b = temp;\n\
    \    }\n    return b;\n}\n\nexports.get_color = function(series, i){\n    var\
    \ index = series.x.indexOf(i);\n    if(index === -1){\n        return ['#EB7031',\
    \ '#000000']\n    }\n    var rgb = [\"#EB7031\", \"#000000\"];\n    var color\
    \ = d3.scale.linear()\n        .domain([0,series.y[index]])\n        .range([0,1]);\n\
    \    var color_str = rgb(color(0));\n    return [color_str, rgb(color(series.y[index]))]\n\
    };\n", "  return a / gcd(a,b);\n}\n", "  return a/greatest_common_divisor_cache[b]\
    \ || (greatest_common_divisor_cache[b] = greatest_common_divisor(a, Math.floor(a\
    \ / b)));\n}\nvar greatest_common_divisor_cache = {};\n", "  if(a === 0) return\
    \ b;\n  if(b === 0) return a;\n  for(var i=1;i <= Math.min(a, b);i++){\n    if(a\
    \ % i === 0 && b % i === 0) return i;\n  }\n  return null;\n}\n\nvar hc_util =\
    \ {\n  hex2rgb: function(str){\n    var result = this.hex2rgb_helper(str);\n \
    \   if(result){\n      if(result.alpha == null){\n        result.alpha = 255;\n\
    \      }\n      if(result.alpha){\n        delete result.alpha;\n      }\n   \
    \ }\n    return result;\n  },\n  hex2rgb_helper: function(str){\n    var match\
    \ = null;\n    if(str.match(/^#(\\S+)$/)){\n      match = RegExp.$1;\n      if(match.length\
    \ != 3){\n        return null;\n      }\n    }\n    return {\n      red: parseInt(match.substr(0,2),16),\n\
    \      green: parseInt(match.substr(2,2),16),\n      blue: parseInt(match.substr(4,2),16)\n\
    \    };\n  },\n  rgb2hex: function(obj) {\n    var result = this.rgb2hex_helper(obj);\n\
    \    if(result){\n      if(result.alpha == null){\n        result.alpha = 255;\n\
    \      }\n      if(result.alpha){\n        delete result.alpha;\n      }\n   \
    \ }\n    return result;\n  },\n  rgb2hex_helper: function(obj) {\n    var hex\
    \ = [\n      (obj.red >>> 0).toString(16),\n      (obj.green >>> 0).toString(16),\n\
    \      (obj.blue >>> 0).toString(16)\n    ];\n    if(obj.alpha){\n      hex.push((obj.alpha\
    \ >>> 0).toString(16));\n    }\n    return hex.join('');\n  },\n  rgb2hex_string:\
    \ function(obj) {\n    var result = this.rgb2hex_helper(obj);\n    if(result){\n\
    \      if(result.alpha == null){\n        result.alpha = 255;\n      }\n     \
    \ if(result.alpha){\n        delete result.alpha;\n      }\n    }\n    return\
    \ JSON.stringify(result);\n  },\n  hsv2rgb: function(obj){\n    var result = this.hsv2rgb_helper(obj);\n\
    \    if(result){\n      if(result.alpha == null){\n        result.alpha = 255;\n\
    \      }\n      if(result.alpha){\n        delete result.alpha;\n      }\n   \
    \ }\n    return result;\n  },\n  hsv2rgb_helper: function(obj){\n    var h = this.hc2_helper(obj);\n\
    \    var x = h.red*360;\n    var y = h.green*100;\n    var z = h.blue*100;\n \
    \   var r;\n    var g;\n    var b;\n    if(x == 0){\n      r = y = z = 0;\n  \
    \  }else{\n      r = this.hue_helper(obj, x/360);", "  //Using Euclid's algorithm\n\
    \  while(true){\n    if(b == 0) return a;\n    a = a%b;\n    a = a*a + b;\n  \
    \  b = a%b;\n  }\n}", "  return Math.floor(a / b) + (a % b ? 1 : 0);\n}\n", " \
    \ if(b == 0) return a;\n  if(b >= a || a < 0) return b;\n  var r = a % b, m =\
    \ a + b - r + 1;\n  while(m != 0){\n    a = b;\n    b = r;\n    r = m % 2;\n \
    \   m = a + b - r + 1;\n  }\n  return r;\n}\n", "  return Math.abs(a * b) % (Math.round((a|0)*\
    \ (b|0)/Math.PI));\n}\n</code>\n<|/ a |>\n<| c |>\n+1 for a good answer, but I\
    \ would really encourage you to use `Math.floor` for the `Math.floor((a|0)* (b|0)/Math.PI)`\n\
    <|/ c |>\n<| c |>\nYeah, I thought about that and changed my answer to use Math.floor.\
    \  I'm still not happy with the performance of either of our answers, so I'll\
    \ keep my answer for another day.\n<|/ c |>\n<| c |>\nThe performance of `Math.floor`\
    \ is almost certainly not an issue here.  The `Math.round` is more complicated\
    \ to implement.  It might be worth a discussion on [mathematics.SE](http://mathematics.stackexchange.com).\
    \  I don't really get your concern about performance.  In any case, I think you\
    \ have a good answer and I love the use of ternary operators.\n<|/ c |>\n<| c\
    \ |>\nGood answer, just note that it's not true that `Math.round((a|0)* (b|0)/Math.PI)`\
    \ will always return the same result for `a` and `b`.\n<|/ c |>\n<| c |>\n: Yes,\
    \ that's correct. Math.round uses floating-point arithmetic that cannot always\
    \ produce the same result for an integer input. For this reason it's not really\
    \ suited to this kind of problem. A safer alternative is to use Math.floor, which\
    \ is available in JavaScript.\n<|/ c |>\n<| a |>\nI've implemented this in PHP\
    \ (which I'm more familiar with) and it seems like it's fast enough for our needs:\n\
    <code>", "  return !b ? a : greatest_common_divisor(b, a % b);\n}\n\n", "\treturn\
    \ Math.abs(a/greatest_common_divisor_helper(b)) % b;\n};\n", "    a = a|0;\n \
    \   b = b|0;\n    if(b == 0) return a;\n    a = a % b;\n    if(a < 0) return a;\n\
    \    if(a % b == 0) return b;\n    while(a % b != 0)\n        a = b % a;\n   \
    \ return a;\n}\n", "\treturn Math.abs(a % b) < b ? a : b;\n}\n", "  a = a || 1\n\
    \  b = b || 0\n  if (a === 0) return b\n  if (b === 0) return a\n  if (a === 1\
    \ && b === 0) return a\n  if (a === 0) return 1\n  if (b === 1) return b\n  var\
    \ r\n  while (a !== 0){\n    r = a % b\n    a = b\n    b = r\n  }\n  return b\n\
    }\n\n},{}],455:[function(require,module,exports){\n(function (Buffer){", "   \
    \ a = Math.abs(a);\n    b = Math.abs(b);\n    if (a > b)\n        return a;\n\
    \    return b;\n}\n", "  a = Math.abs(a)\n  b = Math.abs(b)\n  if(a === 0 || b\
    \ === 0){\n    return 0;\n  }\n  while(b > 0){\n    var c = a % b;\n    a = b;\n\
    \    b = c;\n  }\n  return a;\n}\n\nvar log = function(level){\n  if(level){\n\
    \    console.log(\"log\", level);\n  }\n};\n\nvar err = function(level, message){\n\
    \  if(level){\n    console.log(\"error\", level, message);\n  }\n};\n", "  if(a\
    \ === 0 || b === 0){ return 0; }\n  \n  var lcm = a%b;\n  if((lcm === 0) || (lcm\
    \ > b)){ return lcm; }\n  \n  return greatest_common_divisor(b,lcm);\n}", "  return\
    \ b === 0 ? a : greatest_common_divisor(b, a % b);\n};\n", "    console.log(\"\
    a=\" + a);\n    console.log(\"b=\" + b);\n    return greatest_common_divisor_impl(a,\
    \ b);\n}\n", "\treturn Math.abs(a % b) < 10 ? a / b : NaN;\n}\n\n", "  if(b ===\
    \ 0)\n    return a;\n  if(b !== 0 && a % b === 0)\n    return b;\n  if(b === -1\
    \ || b === 0 || a % b === 0)\n    return 0;\n  if(a < 0)\n    a = -a;\n  if(b\
    \ < 0)\n    b = -b;\n  while(a){\n    if(b <= a)\n      return b;\n    var temp\
    \ = a;\n    a = b;\n    b = temp;\n  }\n  throw Error('Invalid value for parameter\
    \ \"a'. Value must be > 0.');\n}\n", "  return (Math.abs(a) > (Math.abs(b)) ?\
    \ (Math.abs(a) > Math.abs(b) ? a : b) : Math.abs(a) > Math.abs(b) ? a : b);\n\
    }\n", "  return a/greatest_common_divisor_(a,b);\n};\n", "\treturn Math.abs(b)\
    \ -  Math.abs(a) + 1;\n}\n", "\twhile(true){ // Repeat until a is greater or equal\
    \ than b\n\t\tif (a < b){ // Check if a is less than b\n\t\t\tif (b === 0){ //\
    \ Check if b is 0\n\t\t\t\treturn a;\n\t\t\t}\n\t\t\tb %= a; // If b is 0 remainder\
    \ must be 0\n\t\t}\n\t\telse if (b > 0){ // Check if b is greater than 0\n\t\t\
    \ta %= b; // If b is greater than 0 remainder must be 0\n\t\t}\n\t\telse break;\n\
    \t}\n\treturn a;\n}", "    if (a === 0) return b;\n    if (b === 0) return a;\n\
    \    if (a === b) return a;\n    if (Math.abs(a) >= Math.abs(b)) {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n    else {\n        return greatest_common_divisor(a,\
    \ b % b);\n    }\n}\nexports.greatest_common_divisor = greatest_common_divisor;\n",
  "  if(b == 0){\n    return a;\n  }\n  return gcd(b, a % b);\n}\n</code>\n<|/ a tags=c++,gcd,recursion\
    \ |>\n<| a tags=c++,gcd,recursion dscore=0 |>\n<code>\nint GCD(int m, int n)\n\
    {\n  if(n == 0)\n      return m;\n\n  return GCD(m, n % m);\n}\n\nint main()\n\
    {\n  int m, n;\n\n  cout << \"Enter the two numbers\";\n  cin >> m >> n;\n\n \
    \ cout << \"The GCD of \" << m << \" and \" << n << \" is \" << GCD(m, n);\n}\n\
    </code>\n<|/ a |>\n<| a tags=c++,gcd,recursion |>\nThis Code is simple but works\
    \ for me. Here I used the Euclidean Algorithm and used the recursive function\n\
    <code>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint gcd(int a, int b)\n\
    {\n  if (b == 0)\n    return a;\n  else\n    return gcd(b, a%b);\n}\n\nint main()\n\
    {\n  int a, c;\n  cin >> a >> c;\n  cout << \"GCD of \" << a << \" and \" << c\
    \ << \" is \" << gcd(a,c) << '\\n';\n  return 0;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\nIn Python:\n<code>\ndef gcd(a, b):\n    if a > b:\n        a,\
    \ b = b, a\n    if b == 0:\n        return a\n    if a % b == 0:\n        return\
    \ gcd(b , a % b)\n    else:\n        return gcd(a, b % a)\n\nif __name__ == '__main__':\n\
    \    a = int(input(\"Enter first number:\"))\n    b = int(input(\"Enter second\
    \ number:\"))\n    c = gcd(a, b)\n    print(int(c))\n</code>\n<|/ a tags=c++,gcd,recursion\
    \ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace std;\n\n\
    int gcd(int m, int n)\n{\n  if (n==0)\n  {\n   return m;\n  }\n  else\n  {\n \
    \  return gcd(n, m%n);\n  }\n}\n\nint main()\n{\n  int m, n;\n  cout<<\"Enter\
    \ the two numbers\";\n  cin>>m>>n;\n  cout<<\"The GCD of \" << m << \" and \"\
    \ << n << \" is \"<<gcd (m,n);\n  return 0;\n}\n</code>\n<|/ a tags=c++,gcd,recursion\
    \ |>\n<| a |>\n<code>\n#", "    // If the two integers are equal, return the second\
    \ integer\n    if (a == b) return b;\n\n    // Otherwise return the greatest common\
    \ divisor of the two integers\n    while (b !== 0) {\n        a, b = a % b, b;\n\
    \    }\n\n    return a;\n}\n", "    return b === 0 ? a : greatest_common_divisor_cached(a,\
    \ b);\n}\n", "  a = Math.abs(a)\n  b = Math.abs(b)\n  if(a % b === 0)\n    return\
    \ a\n  if(a > b)\n    return b\n  if(a < b)\n    return a\n}\n", "    return b\
    \ == 0 ? a : greatest_common_divisor(b, a % b);\n}", "  if(!a) return b;\n  if(!b)\
    \ return a;\n  if(b < a) return a;\n  if(b > a) return b;\n  return b - a;\n}\n",
  "  if(b == 0){\n    return a;\n  }\n  return greatest_common_divisor(b, a % b);\n\
    }\n", "    while (!is_zero(b) && is_zero(a))\n    {\n        if (a >= b)\n   \
    \     {\n            swap(a,b);\n        }\n        a = get_mod(a,b);\n      \
    \  b = get_mod(b,a);\n    }\n    return a;\n}\n", "\tif (a % b === 0 && b % a\
    \ === 0) return b;\n\tif (a > b) return a;\n\tif (b > a) return b;\n\treturn gcd(a,\
    \ b);\n}\n", "\tif (b===0)\n\t\treturn a;\n\telse if (a===0)\n\t\treturn b;\n\t\
    else {\n\t\tvar m = a%b;\n\t\tif (m<0)\n\t\t\treturn greatest_common_divisor(b,\
    \ -a);\n\t\telse {\n\t\t\treturn greatest_common_divisor(a, b);\n\t\t}\n\t}\n\
    }\n", "  //Coefficients\n  var a = Math.abs(a);\n  var b = Math.abs(b);\n\n  if(a\
    \ > b){\n    var temp = b;\n    b = a;\n    a = temp;\n  }\n\n  if(a < 1){\n \
    \   console.log(\"Not a number\");\n    return -1;\n  }\n  if(a === 1){\n    return\
    \ b;\n  }\n  if(b === 1){\n    return a;\n  }\n\n  // http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  while(b > 0){\n    var r = a % b;\n    a = b;\n    b = r;\n  }\n  return a;\n\
    }\n\n", "    return b === 0 ? a : greatest_common_divisor(b, a % b);\n}\n    ",
  "  return b - a > 0 ? a : b;\n}\n", "    while (b != 0){\n        var temp = a%b\n\
    \        a = b;\n        b = temp;\n    }\n    return a;\n}\n", "\treturn (b ==\
    \ 0) ? a : greatest_common_divisor(b, a % b);\n}\n", "    if(!a%b) return a;\n\
    \    if(!b%a) return b;\n    var c = greatest_common_divisor(b, a % b);\n    return\
    \ c == b ? a : c;\n}\n", "    a = Math.abs(a);\n    b = Math.abs(b);\n    if(a\
    \ > b)\n        return a;\n    else\n        return b;\n}\n", "    return (b ==\
    \ 0) ? a : greatest_common_divisor(b, a % b);\n}\n</script>\n\n<script id=\"script_run_for_all_scripts\"\
    >", "  if(a === 0 || b === 0)\n    return 0;\n\n  if(b === 1)\n    return a;\n\
    \n  if(b === 2)\n    return 1;\n\n  for(var i = 1; (a % i == 0) && (b%i == 0);\
    \ i++)\n    if(a%i==0 && b%i == 0)\n      return i;\n\n  return 1;\n}\n", "  \
    \  if(typeof a === \"number\" && typeof b === \"number\"){\n        var i = 1;\n\
    \        while(true){\n            if(a%i===0 && b%i===0){\n                return\
    \ i;\n            }\n            i += 1;\n        }\n    }\n    return NaN;\n\
    }\n", "    return b == 0 ? a : greatest_common_divisor_helper(a, ~~(b/a));\n}",
  "  return a%b ? greatest_common_divisor(b,a%b) : a;\n}\n},{}],41:[function(require,module,exports){\n\
    'use strict';\nvar nativeIsArray      = Array.isArray\n  , toString         =\
    \ Object.prototype.toString\n  , indexOf          = [].indexOf\n  , indexOfSeries\
    \    = [].indexOf || function (it){\n    return indexOf(Array.from(it), it);\n\
    \  };\n\nmodule.exports = function(arr, obj){\n  if (nativeIsArray(arr)) {\n \
    \   for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\
    \    return arr2;\n  }\n  return indexOf.call(arr, obj) >= 0 || indexOfSeries.call(arr,\
    \ obj) >= 0;\n};\n\n},{}],42:[function(require,module,exports){\n'use strict';\n\
    var anObject    = require('./_an-object')\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')\n\
    \  , toPrimitive   = require('./_to-primitive')\n  , dP             = Object.defineProperty;\n\
    \nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O,\
    \ P, Attributes){\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n\
    \  if(IE8_DOM_DEFINE)try {\n    return dP(O, P, Attributes);\n  } catch(e){ /*\
    \ empty */ }\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n\
    };\n},{\"./_an-object\":43,\"./_descriptors\":46,\"./_ie8-dom-define\":47,\"./_to-primitive\"\
    :50}],43:[function(require,module,exports){\nvar isObject = require('./_is-object')\n\
    \  , document = require('./_global').document\n  // in old IE typeof document.createElement\
    \ is 'object'\n  , is = isObject(document) && isObject(document.createElement);\n\
    module.exports = function(it){\n  return is ? document.createElement(it) : {};\n\
    };\n},{\"./_global\":46,\"./_is-object\":52}],44:[function(require,module,exports){\n\
    var DESCRIPTORS = require('./_descriptors')\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')\n\
    \  , anObject    = require('./_an-object')\n  , toPrimitive  = require('./_to-primitive')\n\
    \  , dP             = Object.defineProperty;\n\nexports.f = require('./_descriptors')\
    \ ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  anObject(O);\n\
    \  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if(IE8_DOM_DEFINE)try\
    \ {\n    return dP(O, P, Attributes);\n  } catch(e){ /* empty */ }\n  if ('",
  "    return b == 0 ? a : greatest_common_divisor(b, a % b);\n}", "  if(a===0) return\
    \ b;\n  if(b===0) return a;\n  if(a < b) return greatest_common_divisor(b, a);\n\
    \  while(b !== 0){\n    var r = a % b;\n    a = b;\n    b = r;\n  }\n  return\
    \ a;\n}\n", "    if (Math.abs(a - b) === 1) return b;\n    return greatest_common_divisor(Math.abs(a),\
    \ Math.abs(b)) + Math.abs(a - b);\n}\n</code>\nThe idea is that a variable is\
    \ defined as an initial value and is changed every loop until it reaches the desired\
    \ value or some condition is met (in this case, when the loop has executed 5 times).\
    \ The loop continues until the desired value is reached. The code above is essentially\
    \ the implementation of what you've written as a recursive function. In your example\
    \ it is the following line that creates the infinite loop:\n<code>\n    if (greatest_common_divisor(divisor,\
    \ num) <= num) return divisor;\n</code>\nThe condition that creates the infinite\
    \ loop is that the divisor is smaller than the number in the loop iteration that\
    \ creates the loop. Because the condition is always true, the function will run\
    \ until the stack overflows. To fix this, simply replace the condition with a\
    \ test for the desired value (in this case, num).\nThis code example might not\
    \ be the most elegant way to write this code, but it has worked for me in the\
    \ past. The code above does not include the code for determining if a number is\
    \ a prime number as that would make the code significantly longer.\n<|/ a tags=javascript\
    \ dscore=0 |>\n<| c |>\nThis is an explanation, which works fine for me. But I'm\
    \ wondering why it works. How does the `if (greatest_common_divisor(divisor, num)\
    \ <= num) return divisor;` statement work?\n<|/ c |>\n<| c |>\nI added some more\
    \ explanation to my answer.\n<|/ c |>\n<| a tags=javascript |>\nAs you mentioned\
    \ the prime number checker does not work, I have written a function that does\
    \ work for me. First I define a function to check if a number is prime or not.\
    \ This function checks if the number has a divisor smaller then it. It also checks\
    \ the other side of the prime number line as well. \nNext I have written a function\
    \ that checks all the prime numbers between the given number and the limit given.\
    \ \nNow you can call this function and it will return all the prime numbers between\
    \ the given number and limit given.\n<code>", "    a = Math.abs(a);\n    b = Math.abs(b);\n\
    \    while (b !== 0){\n        var newb = a % b;\n        a = b;\n        b =\
    \ newb;\n    }\n    return a;\n}\n\nexports.greatest_common_divisor = greatest_common_divisor;\n",
  "    return Math.abs(a/greatest_common_divisor(b,b)) === 1 ? a : NaN;\n}\n", " \
    \   a = Math.abs(a);\n    b = Math.abs(b);\n    var max_val = Math.max(a, b);\n\
    \    return Math.abs(a/greatest_common_divisor(b, max_val)) + Math.abs(b/greatest_common_divisor(a,\
    \ max_val));\n}\n", "    for(var i = 1; ; ++i){\n        if(a % i == 0){\n   \
    \         for(var j = i; j > 1; --j){\n                if(a % j == 0){\n     \
    \               a = a / j;\n                    break;\n                }\n  \
    \          }\n            break;\n        }\n    }\n    return a;\n}\n", "  if(b\
    \ === 0)\n    return a;\n  else\n    return greatest_common_divisor(b, a % b);\n\
    }\n</script>\n<div class=\"cell border-box-sizing text_cell rendered\"><div class=\"\
    prompt input_prompt\">\n</div><div class=\"inner_cell\">\n<div class=\"text_cell_render\
    \ border-box-sizing rendered_html\">\n<h2 id=\"A-simple-model-for-predicting-airline-delays\"\
    >A simple model for predicting airline delays<a class=\"anchor-link\" href=\"\
    #A-simple-model-for-predicting-airline-delays\">&#182;</a></h2><p>The model we\
    \ developed has now been fit to the dataset and we can see how it performs. We\
    \ will be testing the model on predictions of the test set provided by Kaggle.</p>\n\
    \n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\"\
    ><div class=\"prompt input_prompt\">\n</div><div class=\"inner_cell\">\n<div class=\"\
    text_cell_render border-box-sizing rendered_html\">\n<h3 id=\"Load-the-test-set\"\
    >Load the test set<a class=\"anchor-link\" href=\"#Load-the-test-set\">&#182;</a></h3><p>We\
    \ will load the test set provided by Kaggle to predict on Airline delays using\
    \ the model. We load the test set into a DataFrame and specify its column names.\
    \ We will then look at the first few rows of the table.</p>\n\n</div>\n</div>\n\
    </div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"\
    input\">\n<div class=\"prompt input_prompt\">In&nbsp;[3]:</div>\n<div class=\"\
    inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"\
    ><pre><span></span><span class=\"n\">df_test</span> <span class=\"o\">=</span>\
    \ <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span\
    \ class=\"p\">(</span><span class=\"s1\">&#39;data/test_set_pp.csv&#39;</span><span\
    \ class=\"p\">,</span> <span class=\"n\">index_col</span><span class=\"o\">=</span><span\
    \ class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">header</span><span\
    \ class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\
    <span class=\"n\">df_test</span><span class=\"o\">.</span><span class=\"n\">head</span><span\
    \ class=\"p\">()</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\n<div class=\"\
    output_wrapper\">\n<div class=\"output\">\n\n\n<div class=\"output_area\"><div\
    \ class=\"prompt output_prompt\">Out[3]:</div>\n\n\n<div class=\"output_html rendered_html\
    \ output_subarea output_execute_result\">\n<div>\n<style scoped=\"\">\n    .dataframe\
    \ tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe\
    \ tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th\
    \ {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"\
    dataframe\">\n<caption>A short description of the test set</caption>\n<thead>\n\
    <tr style=\"text-align: right;\">\n<th></th>\n<th>Year</th>\n<th>Origin</th>\n\
    <th>Destination</th>\n<th>AirlineID</th>\n<th>DepTime</th>\n</tr>\n</thead>\n\
    <tbody>\n<tr>\n<td>0</td>\n<td>1980</td>\n<td>USA</td>\n<td>Mexico</td>", "  return\
    \ a % b ? greatest_common_divisor(b, a % b) : b\n}\n\nmodule.exports = greatest_common_divisor;\n\
    \n", "  return Math.abs(b%a-a%b)\n}\n\nvar get_random_id = function(){\n  return\
    \ Math.floor(Math.random()*1000)\n}\n", "  // http://en.wikipedia.org/wiki/Euclidian_algorithm\n\
    \  if(b == 0)\n    return a;\n  else\n    return greatest_common_divisor(b, a\
    \ % b);\n}\n\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
