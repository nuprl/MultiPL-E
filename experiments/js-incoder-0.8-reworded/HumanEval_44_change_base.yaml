name: HumanEval_44_change_base
language: js
prompt: "//Change numerical base of input number x to base.\n// return string representation\
  \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
  \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n\
  // \"111\"\nfunction change_base(x, base){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
  \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
  \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
  \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
  \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
  \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
  \ 8),\"7\");\n}\n\ntest();"
completions: ["  var a = x.toString(base);\n  var b = Number(a);\n  return parseInt(a.replace(/\\\
    D+/g, \"\"), base);\n}\n", "    var digits = x.toString().split('');\n    if (base\
    \ > 10) return parseInt(x, base);\n    if (base < 1) return parseInt(digits, base);\n\
    \    for (var i = digits.length; i--;) digits[i]=parseInt(digits[i], base-10);\n\
    \    return digits.reverse().join('');\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Thank you so much for this. I appreciate it. The other answers are helpful as\
    \ well.\n<|/ c |>\n<| a tags=javascript,jquery,html |>\nThis should do the trick.\
    \ Just need to get the current digit and change its base by changing baseNum.\
    \ \n<code>", "    var str = String(x);\n    if (base > str.length) throw new TypeError('base\
    \ is out of range');\n    if (base < 2 || base > 36) throw new TypeError('base\
    \ is out of range');\n    if (base) str = str.replace(new RegExp('\\\\'+base,\
    \ 'g'), base);\n    return str;\n}\n", "\tx = x.toString(base);\n\treturn x.length\
    \ <= base ? x : change_base(x, base-1);\n}\n", "  if(typeof base == 'number')\
    \ base = [base];\n  var n = x.toString().split('.');\n  base[0] = base[0] || 1;\n\
    \  var result = x[0] || 1;\n  for(var i = 1; i < n.length; i++){\n    var p =\
    \ Math.pow(base[i], n[i]);\n    if(p >= Math.pow(base[0], n[i])){\n      result\
    \ += p;\n    } else {\n      result -= p;\n    }\n  }\n  return result;\n}\n",
  "\tvar result = \"\";\n\twhile (x > 0){\n\t\tresult = base_table[base] + result;\n\
    \t\tx = x/base;\n\t\tbase--;\n\t}\n\treturn result;\n}\n", "    var res = [],\n\
    \        div = base,\n        pow = x;\n    while (pow > 0){\n        if (pow\
    \ % 2 === 1){\n            res[res.length] = div;\n        }\n        div *= base;\n\
    \        pow /= 2;\n    }\n    if (res.length){\n        res[res.length] = pow;\n\
    \    }\n    return res.reverse().join(\"\");\n}\n", "    var r = x.toString(base);\n\
    \    return r.length < x ? r + base : r;\n}\n", "    let newX = 0\n    if(base\
    \ < 0 || base > 9) return -1\n    for(let i = 0; i < base; i++){\n        newX\
    \ += Number(x)\n        x = newX\n    }\n    return x.toString().substr(1)\n}",
  "\tlet baseNum = base;\n\tlet baseString = String(baseNum);\n\t\n\tbaseString =\
    \ baseString.toLowerCase();\n\t\n\tlet res = \"\";\n\t\n\tfor (let i=0; i<baseString.length;i++)\
    \ {\n\t\tlet numIndex = baseString.indexOf(\".\");\n\t\tlet newIndex = baseString.indexOf(\"\
    .\", numIndex);\n\t\t\n\t\tif (numIndex > 0) {\n\t\t\tlet baseNum = base;\n\t\t\
    \tlet baseString = String(baseNum);\n\t\t\t\n\t\t\tlet index = baseString.indexOf(\"\
    .\", numIndex);\n\t\t\tlet nextIndex = baseString.indexOf(\".\", numIndex+1);\n\
    \t\t\t\n\t\t\tif (index >= 0 && nextIndex < 0) {\n\t\t\t\tlet baseNum = base;\n\
    \t\t\t\tlet baseString = String(baseNum);\n\t\t\t\t\n\t\t\t\tlet index = baseString.indexOf(\"\
    .\", numIndex);\n\t\t\t\tlet nextIndex = baseString.indexOf(\".\", numIndex+1);\n\
    \t\t\t\t\n\t\t\t\tlet numString = baseString.substring(numIndex+1, nextIndex);\n\
    \t\t\t\t\n\t\t\t\tif (index > 0) {\n\t\t\t\t\tlet baseNum = base;\n\t\t\t\t\t\
    let baseString = String(baseNum);\n\t\t\t\t\t\n\t\t\t\t\tlet index = baseString.indexOf(\"\
    .\", numIndex);\n\t\t\t\t\tlet nextIndex = baseString.indexOf(\".\", numIndex+1);\n\
    \t\t\t\t\t\n\t\t\t\t\tlet numString = baseString.substring(numIndex+1, nextIndex);\n\
    \t\t\t\t\t\n\t\t\t\t\tlet newNum = baseNum * Math.pow(10, numString);\n\t\t\t\t\
    \t\n\t\t\t\t\tnewNum = Math.floor(newNum);\n\t\t\t\t\tnewNum = Math.ceil(newNum);\n\
    \t\t\t\t\t\n\t\t\t\t\tif (newNum >= baseNum) {\n\t\t\t\t\t\tlet str = numString.substring(1);\n\
    \t\t\t\t\t\t\n\t\t\t\t\t\tif (newNum <= baseNum) {\n\t\t\t\t\t\t\tstr = numString.substring(0);\n\
    \t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tlet newString = String(newNum) + str;\n\
    \t\t\t\t\t\t\n\t\t\t\t\t\tnewString = newString.toString();\n\t\t\t\t\t\t\n\t\t\
    \t\t\t\tnewString = newString.substring(0, newString.length-1);\n\t\t\t\t\t\t\n\
    \t\t\t\t\t\tres += newString;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tres\
    \ += numString;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tres += numString;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tres += baseString[i];\n\t\t}\n\t\
    }\n\t\n\treturn res;\n}\n", "  var r = \"\";\n  var i;\n  for(i = Math.floor(x/base);\
    \ i >= 0; i--){\n    r = base_ten[i] + r;\n  }\n  return r;\n}\n", "    var y\
    \ = \"\";\n    var sign = 1;\n    if (x >= 0) {\n        if (x == parseInt(x,\
    \ 10)) {\n            return x;\n        } else {\n            sign = -1;\n  \
    \      }\n    }\n    \n    while (x >= base) {\n        x -= base;\n        y\
    \ += String.fromCharCode(parseInt(x / base, 10));\n    }\n    \n    x += sign\
    \ * base;\n    \n    return x;\n}\n</script>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js\"\
    \ integrity=\"sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=\" crossorigin=\"\
    anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-cookie/2.2.1/js.cookie.min.js\"\
    \ integrity=\"sha256-c1O+sBKX/QYwM7k5yqwUZUXn5jo1O1WkW6g+Xp8oLg=\" crossorigin=\"\
    anonymous\"></script>\n\n<script type=\"text/html\" id=\"tpl-nav-bar\">\n<div\
    \ class=\"nav-bar\">\n    <div class=\"nav-bar-left\">\n        <a href=\"javascript:void(0)\"\
    \ class=\"nav-bar-item btn-link btn-link-active\" data-id=\"#js-navbar-home\"\
    >Home</a>\n        <a href=\"#\" class=\"nav-bar-item btn-link\" data-id=\"#js-navbar-contact\"\
    >Contact</a>\n        <a href=\"#\" class=\"nav-bar-item btn-link\" data-id=\"\
    #js-navbar-examples\">Examples</a>\n        <a href=\"#\" class=\"nav-bar-item\
    \ btn-link\" data-id=\"#js-navbar-docs\">Documentation</a>\n        <a href=\"\
    #\" class=\"nav-bar-item btn-link\" data-id=\"#js-navbar-examples-details\">Examples\
    \ details</a>\n        <a href=\"#\" class=\"nav-bar-item btn-link\" data-id=\"\
    #js-navbar-docs-details\">Documentation details</a>\n        <a href=\"#\" class=\"\
    nav-bar-item btn-link\" data-id=\"#js-navbar-about\">About</a>\n    </div>\n \
    \   <div class=\"nav-bar-right\">\n        <a class=\"nav-bar-item btn-link\"\
    \ href=\"https://github.com/andrewrobertson2/d3-js-examples-and-example-details-website\"\
    >View source on Github</a>\n    </div>\n</div>\n</script>\n\n<script type=\"text/html\"\
    \ id=\"tpl-nav-bar-details\">\n<div class=\"nav-bar-details\">\n    <a href=\"\
    javascript:void(0)\" class=\"nav-bar-item btn-link\" data-id=\"#js-navbar-examples-details\"\
    >Examples</a>\n    <a href=\"javascript:void(0)\" class=\"nav-bar-item btn-link\"\
    \ data-id=\"#js-navbar-docs-details\">Documentation</a>\n    <a href=\"javascript:void(0)\"\
    \ class=\"nav-bar-item btn-link\" data-id=\"#js-navbar-about\">About</a>\n</div>\n\
    </script>\n\n<script type=\"text/html\" id=\"tpl-nav-bar-details-details\">\n\
    <div class=\"nav-bar-details-details\">\n    <a href=\"javascript:void", "\tvar\
    \ y = base_of(x);\n\tvar s = \"\";\n\tvar bases = [];\n\tfor(var i = 0; i <= y;\
    \ i++){\n\t\tif(y < 0){\n\t\t\ts += '0';\n\t\t}else{\n\t\t\ts += base_of(y+i)\n\
    \t\t}\n\t\tbases.push(base_of(y+i))\n\t}\n\tfor(var i = 0; i <= base; i++){\n\t\
    \tif(base < 0){\n\t\t\ts += '0';\n\t\t}else{\n\t\t\ts += bases[base]\n\t\t}\n\t\
    }\n\treturn s;\n}\n", "\tvar r = \"\";\n\twhile(x.toString().length <= base){\
    \ //Trim excess zeros\n\t\tx = x * base + 1;\n\t\tr += x;\n\t}\n\tx = Math.floor(x\
    \ / base);\n\tfor(y = 1; y < base; y++){\n\t\tx = x * base - y;\n\t\tr = y > 0\
    \ ? x + r : x - r;\n\t}\n\treturn r;\n}\n", "    var y = 1;\n    while(true){\n\
    \        var div = x / base;\n        if(div > 0){\n            return base *\
    \ y + div;\n        }else{\n            y += 1;\n            x /= base;\n    \
    \    }\n    }\n}\n</code>\nSo here I used a while loop to do the conversion by\
    \ adding 1 to the base until it's greater than the number x divided by base.\n\
    <|/ a |>\n<| a |>\nA simple function to convert decimals to binary, octal and\
    \ hexadecimal:\n\n<code>", "  var r = \"\";\n  var m = false;\n  \n  while(base\
    \ > 0){\n    r = base_digits[base%10] + r; base = parseInt(base/10);\n  }\n  \n\
    \  while(x !== 0){\n    r = base_digits[(x%base)%10] + r; x = parseInt(x/base);\n\
    \  }\n  return r;\n}\n\n", "\tvar res = \"\";\n\t\n\tvar sign = 0;\n\t\n\tvar\
    \ n = Math.abs(x);\n\tvar remainder = 0;\n\t\n\tbase = base || 10;\n\t\n\twhile\
    \ (n != 0)\n\t{\n\t\tvar quotient = Math.floor(n / base);\n\t\tvar remainder =\
    \ n % base;\n\t\t\n\t\tres = (sign == 0 ? (remainder >= 10 ? \"\" : base_tens[remainder])\
    \ : (remainder < 10 ? base_tens[remainder] : \"\")) +\n\t\t\t(res == \"\" ? \"\
    \" : res);\n\t\t\n\t\tn = quotient;\n\t}\n\t\n\treturn sign == 0 ? res : -res;\n\
    }\n\n", "\tvar num = Math.round(x/Math.pow(base,0))*Math.pow(base,0);\n\treturn\
    \ num.toString(base);\n}\n", "\tvar bases = '0123456789abcdefghijklmnopqrstuvwxyz';\n\
    \tvar n = parseInt(x, base);\n\tvar s = '';\n\twhile(n > 0){\n\t\ts = bases[n\
    \ % base] + s;\n\t\tn = Math.floor(n / base);\n\t}\n\treturn s;\n}\n", "\tvar\
    \ digits = '0123456789abcdefghijklmnopqrstuvwxyz'\n\tvar str = ''\n\twhile (x\
    \ != 0) {\n\t\tstr = digits[x % base] + str\n\t\tx = Math.floor(x / base)\n\t\
    }\n\treturn str\n}\n", "    if(base<2){\n        console.log(\"Base too small.\
    \ base must be >= 2.\");\n        return NaN;\n    }\n    var num = x.toString();\n\
    \    var r = \"\";\n    var m = 1;\n    for(var i = 0; i < num.length; i++){\n\
    \        var d = parseInt(num[i]);\n        if(d==0){\n            r += \"0\"\
    ;\n        }else if(d<m){\n            r += num[i];\n        }else{\n        \
    \    var tmp = r + num[i] + m;\n            r += tmp.substring(0, base);\n   \
    \         r += tmp.substring(base);\n            m = d + 1;\n        }\n    }\n\
    \    return r;\n}\n", "  if(base < 2) throw new Error(\"Base should be greater\
    \ than 2\");\n  var n = x.toString(base);\n  var res = n[0] + n;\n  for(i = 1,\
    \ s = \"\"; ++i < base; )\n    s += n[i] + s;\n  return res;\n}\n*/\n", "\tvar\
    \ num = new BigNumber(x);\n\t\n\tif (base.constructor != Number)\n\t\tbase = BigNumber(base);\n\
    \t\n\t\n\twhile (num.lesser(0)) \n\t{\n\t\tnum.lesser(base);\n\t}\n\t\n\tvar res\
    \ = num.div(base);\n\twhile (!num.equals(base))\n\t{\n\t\tres = res.times(base).plus(num.div(base));\n\
    \t\tnum.lesser(base);\n\t}\n\treturn res.toString();\n}\n", "    if(base > 10)\n\
    \        return \"This input is not valid.\";\n    let y = \"\" + x;\n    const\
    \ a = base.split(\"\");\n    const b = y.split(\"\");\n    const c = [\"\",\"\
    k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n    for(let i of a){\n      \
    \  if(c[i] && b[i])\n            y += b[i]+c[i];\n        else if(y && b[i])\n\
    \            y += b[i];\n        else if(y)\n            y += c[i];\n    }\n \
    \   return y;\n}", "  var digits = x.toString(base);\n  var l = digits.length\
    \ - 1;\n  while (digits !== \"0\"){\n    digits = digits+\"0\";\n    l--;\n  }\n\
    \  return digits.slice(l+1);\n}\n", "\tvar digits = '';\n\twhile(x != 0){\n\t\t\
    digits = digits+String.fromCharCode(x%base);\n\t\tx = parseInt(x/base);\n\t}\n\
    \treturn digits;\n}", "    x -= ((x %= base)|0);\n    x = (x < 0) ? base + x -\
    \ 1 : base;\n    return x;\n}\n", "    var res = x.toString(base);\n    return\
    \ parseInt(res, base);\n}\n", "    return x.toString(base);\n}", "    var d =\
    \ \"\";\n    while(x >= base){\n        d = Math.floor(x / base)+d;\n        x\
    \ = x % base;\n    }\n    return d+x;\n}\n", "\tif(base < 2 || base > 36){\n\t\
    \tthrow(\"base must be between 2 and 36\");\n\t}\n\tvar res = \"\";\n\t\n\twhile\
    \ (x != 0) {\n\t\tvar mod = x % base;\n\t\tres = (base^mod) + res;\n\t\tx = Math.floor(x\
    \ / base);\n\t}\n\treturn res;\n}\n", "\tlet r = String(x);\n\tlet d = String(base);\n\
    \twhile(r.length < d){\n\t\tr = '0' + r;\n\t}\n\tif(r.charAt(r.length - 1) ===\
    \ '1'){\n\t\tr = r.substr(0, r.length - 1);\n\t}\n\treturn r;\n}\n", "  var r\
    \ = \"\";\n  var numbers = x.toString().split(\"\");\n  var max_base = 10;\n \
    \ var smallest_base = 10;\n  if(base > max_base){\n    smallest_base = base;\n\
    \    while(smallest_base < max_base){\n      smallest_base *= 10;\n    }\n  }\n\
    \  if(base < smallest_base){\n    smallest_base = base;\n    while(smallest_base\
    \ > max_base){\n      smallest_base /= 10;\n    }\n  }\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    var p = smallest_base;\n    var n = numbers[i];\n    while(p){\n\
    \      if(n < 1){\n        r += \"0\";\n        n /= base;\n      }else{\n   \
    \     r += String(p%base);\n        n /= base;\n      }\n      p *= base;\n  \
    \  }\n  }\n  return r;\n}", "    var y = base;\n    while (y > 10) {\n       \
    \ y /= 10;\n    }\n    var digits = x.toString().split(\"\").reverse();\n    while\
    \ (digits.length < y) {\n        digits = digits.concat(new Array(y - digits.length\
    \ + 1).join(\"0\"));\n    }\n    return digits.reverse().join(\"\");\n}\n", " \
    \ var res = '';\n  var negative = 0;\n  var decimal = 0;\n  var number = parseInt((Math.log(x)\
    \ / Math.log(base)) * Math.pow(base, base), base);\n  while (number>0){\n    res\
    \ += String(number % base);\n    decimal = parseInt(number % base, base);\n  \
    \  number /= base;\n  }\n  if (number < 1) {\n    negative = 1;\n    number =\
    \ Math.abs(number);\n  }\n  while (decimal < base){\n    res += '0';\n    decimal++;\n\
    \  }\n  res += negative ? '-' : '';\n  while (decimal >= base){\n    res += '0';\n\
    \    decimal--;\n  }\n  return res.substr(0, base+1) + res;\n}\n", "    var r\
    \ = \"\";\n    while(x>0){\n        r = base * x + r;\n        x--;\n    }\n \
    \   return r;\n}", "\tif(x<base){\n\t\tvar num = x.toString(base);\n\t\twhile(num.length\
    \ < base){\n\t\t\tnum = \"0\"+num;\n\t\t}\n\t\treturn num;\n\t} else {\n\t\treturn\
    \ x;\n\t}\n}\n", "  if(base<1 || base>10) return \"\"+x;\n  var r = \"\";\n  var\
    \ c = 0;\n  while(x){\n    r = base_chars[base] + r; \n    x = Math.floor(x/base);\n\
    \    c++;\n  }\n  while(c>0) r+=base_chars[base]; \n  return r;\n}\n\n", "   \
    \ var res = \"\",\n        sign = x < 0;\n    if(x == 0) return sign? \"0\":\"\
    \"; //avoid -ve, 0, and NaN \n    if (Math.abs(x) < base) return sign? x.toString():x;\
    \ //handle negative numbers\n    while(x < base) //remove zeroes after the decimal\
    \ point\n        res = base.repeat(x.length) + res;\n    return sign? \"-\"+res.slice(1)\
    \ : res; //add a negative sign if needed\n}\n", "  if(typeof x !== 'number'){\n\
    \    throw Error(\"change_base expects a number as argument.\");\n  }\n  if(base\
    \ < 2 || base > 36){\n    throw Error(\"change_base expects a number between 2\
    \ and 36 but it is \" +\n      base + \". Valid bases are 2 and 36.\");\n  }\n\
    \  if(isNaN(x) || x < 0 || base < 2 || base > 36){\n    throw Error(\"change_base\
    \ expects a number as argument.\");\n  }\n  var bnum = base_to_num(x, base);\n\
    \  if(x <= 1){\n    return numeral(bnum).value;\n  }\n  return numeral(bnum).zeroPadded();\n\
    }\n", "    var num = \"\";\n    while(x >= base)\n    {\n        num = base_num[x%base]\
    \ + num;\n        x = Math.floor(x/base);\n    }\n    return num + base_num[x];\n\
    }\n", "    var str = x.toString(base);\n    var res = \"\";\n    var factor =\
    \ 0;\n    while(str.length){\n        var digit = parseInt(str.charAt(str.length-1),\
    \ 10);\n        if(digit < base){\n            factor += 1;\n        }\n     \
    \   str += factor+\"\";\n    }\n    while(str.length){\n        var digit = parseInt(str.charAt(str.length-1),\
    \ 10);\n        if(digit < base){\n            res += digit+\"\";\n          \
    \  str += factor+\"\";\n        }\n        else{\n            str = str.slice(0,str.length-1);\n\
    \            res += digit+\"\";\n        }\n    }\n    return res;\n}\n</code>\n\
    <|/ a tags=javascript,math,base-conversion dscore=2 |>\n<| a dscore=2 |>\nHere\
    \ is a solution using javascript \n<code>", "\tvar sign = '';\n\tvar num = Math.abs(x);\n\
    \tvar rem = num % base;\n\tvar digit = num - rem;\n\tvar output = '';\n\t\n\t\
    if (rem >= base){\n\t\twhile(true){\n\t\t\tnum = Math.floor((base-1) * num / base);\n\
    \t\t\tdigit = num - rem;\n\t\t\toutput = base + output;\n\t\t\trem = num % base;\n\
    \t\t\tnum = Math.floor((base-1) * num / base);\n\t\t\tdigit = num - rem;\n\t\t\
    \toutput = digit + output;\n\t\t\tif (rem <= base - 1){\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t} else {\n\t\twhile(true){\n\t\t\tnum = num + Math.floor((base-1)\
    \ * num / base);\n\t\t\tdigit = num % base;\n\t\t\toutput = digit + output;\n\t\
    \t\tif (num < base){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\twhile(output.length\
    \ < base){\n\t\toutput = '0' + output;\n\t}\n\t\n\treturn sign + output;\n}\n",
  "\tlet bases = [1,2,3,4,5,6,7,8,9];\n\tlet baseNum = bases[base];\n\tlet res = \"\
    \";\n\t\n\twhile(x>=baseNum){\n\t\tres = bases[baseNum]+res;\n\t\tx = x/baseNum;\n\
    \t}\n\t\n\tres += bases[baseNum];\n\t\n\treturn res;\n}\n", "    if(base==undefined){\n\
    \        base=10;\n    }\n    let base2 = base;\n    let x;\n    if(!x || base==10){\n\
    \        return x;\n    }\n    while(x>9){\n        x = x/10;\n        base2--;\n\
    \    }\n    while(x>0){\n        x = (x - (x/10))*base2;\n    }\n    return x;\n\
    }", "    var r = \"\";\n    var val = Math.abs(x);\n    var neg = val < 0;\n \
    \   if(x < 0){\n        val = -val;\n        neg = true;\n    }\n    while (val\
    \ >= base){\n        r = numeral_l10[val % base] + r;\n        val = Math.floor(val\
    \ / base);\n    }\n    r = numeral_l10[val % base] + r;\n    if(neg) r = \"-\"\
    \ + r;\n    return r;\n}", "    var a = x.toString(base);\n    var b = a.substring(1);\n\
    \    return parseInt(b, base)\n}\n</code>\n<|/ a tags=javascript,jquery,html dscore=0\
    \ |>\n<| c |>\nThis answer works well for converting base-10 to base-16, but fails\
    \ for base-4 to base-36. Try it here: https://jsfiddle.net/u7jg0cq0/\n<|/ c |>\n\
    <| a |>\nFor bases less than 10 the below will work.\n<code>\nvar base = parseInt($(\"\
    #base\").val());\nvar decimal = parseInt($(\"#decimal\").val());\nvar result =\
    \ decimal.toString(base);\n</code>\nFor bases greater than 10 you could use something\
    \ like the below.\n<code>\nvar base = parseInt($(\"#base\").val());\nvar decimal\
    \ = parseInt($(\"#decimal\").val());\nvar result = decimal.toString(base);\nvar\
    \ result = \"0\".repeat(base - result.length ) + result;\n</code>\n<|/ a dscore=0\
    \ tags=javascript,jquery,html |>\n<| a dscore=0 |>\nAnother solution, by converting\
    \ number to string, removing symbols and then convert to number again to another\
    \ base by parseInt().\n\n<code>\n$(document).ready(function() {\n  $('#base').on('change',\
    \ function(e) {\n    var result = $('#decimal').val()\n    var base = parseInt(e.target.value);\n\
    \    var decimal = parseInt(result);\n    var res = decimal.toString(base);\n\
    \    if (base < 10) {\n      $('#result').val(res);\n    } else {\n      $('#result').val(res.split('').reverse().join(''));\n\
    \    }\n  });\n});</code>\n<code>\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"\
    ></script>\n\n<label>Base <input type=\"number\" id=\"base\" name=\"base\" min=\"\
    1\" max=\"36\">  </label>\n<label>Decimal <input type=\"number\" id=\"decimal\"\
    \ name=\"decimal\" min=\"1\" max=\"36\">  </label>\n<label>Result: <input type=\"\
    text\" id=\"result\" name=\"result\">  </label></code>\n<|/ a tags=javascript,jquery,html\
    \ |>\n<| a dscore=0 |>\nHere is my version of converting base-10 to base-4. I've\
    \ added support for negative numbers as well as for zero.\n\n<code>\nvar convertBase\
    \ = function(num) {\n  let base = parseInt($('#base').val());\n  let digit = num.toString().split('');\n\
    \  let res = '';\n  let isNegative = false;\n  let sign = num >= 0 ? '+' : '';\n\
    \n  if (num < 0) {\n    isNegative = true;\n    num = -num;\n  }\n\n  while (digit.length\
    \ > 0) {\n    res = digit.reduce((acc, val, index) => {\n      let curVal = val\
    \ * Math.pow(base, digit.length - index);\n      return acc + curVal.toString(",
  "    if(base==0) return \"0\";\n    if(base<10) return x.toString(base);\n    var\
    \ r = x.toString(base);\n    var l = r.length;\n    if(r.length < l) r = Array(l-r.length+1).join(\"\
    0\") + r;\n    return r;\n}\n", "    var xnum = parseInt(x, base);\n    return\
    \ parseInt(String(xnum), base);\n}\n", "    var r = \"\";\n    while(x!==0){\n\
    \        r = numToStr(x%base, base) + r;\n        x = Math.floor(x / base);\n\
    \    }\n    return r;\n}\n", "\treturn parseInt(x, 10).toString(base);\n}\n",
  "\tif (x < 10 && base > 0){\n\t\treturn x;\n\t}\n\tif (base < 2 || base > 36){\n\
    \t\treturn \"\";\n\t}\n\tbase = base || 10;\n\tvar n = 0;\n\tvar s = String(x);\n\
    \twhile (s.length < base){\n\t\ts = \"0\" + s;\n\t\tn++;\n\t}\n\treturn s;\n}\n",
  "    var digits = base;\n    var power = 1;\n    var newbase;\n    var digit;\n\n\
    \    while(digits > 0){\n        digit = x % base;\n        x = parseInt(x/base);\n\
    \        if(digit > 0){\n            digits--;\n        }else{\n            digit\
    \ *=10;\n            digits--;\n        }\n        power *= base;\n    }\n   \
    \ return parseInt(power+x);\n}\n", "    var a = x.toString(base);\n    while (b.length\
    \ < x) {\n        b = \"0\" + b;\n    }\n    return b;\n}\n\n<|/ file filename=util.js\
    \ dstars=0 ext=.js |>\n\"use strict\";\n\nmodule.exports = Util;\n\nvar util =\
    \ require(\"util\");\n", "\tvar bases = {\"0\" : \"0\",\"1\" : \"1\",\"2\" : \"\
    11\",\"3\" : \"21\",\"4\" : \"41\",\n\t\t\"5\" : \"51\", \"6\" : \"61\", \"7\"\
    \ : \"71\", \"8\" : \"81\", \"9\" : \"91\",\n\t\t\"\" : \"\"};\n\n\tbase = parseInt(base);\n\
    \tvar out = [];\n\twhile(x >= base)\n\t{\n\t\tout.unshift(String.fromCharCode(x\
    \ % base));\n\t\tx = Math.floor(x / base);\n\t}\n\treturn out.reverse().join(\"\
    \");\n}\n", "\tvar s = \"\";\n\twhile(x >= base){\n\t\ts = parseInt(x/base) +\
    \ s;\n\t\tx = x % base;\n\t}\n\ts = parseInt(x/base) + s;\n\treturn s < 10 ? s\
    \ + \"0\" : s;\n}\n", "    var y = Number(x).toString(base);\n    while (y[1]){\n\
    \        y = y.slice(0, -1);\n        y += new Array(base - y.length + 1).join(\"\
    0\");\n    }\n    return y;\n}\n", "\tif(x<base) throw \"Base should be smaller\
    \ than the base. \";\n\tvar s=\"\";\n\tif(x==0) return \"0\";\n\tfor(var i=base;\
    \ i>0; i--){\n\t\ts=(x%i)+s;\n\t\tx=Math.floor(x/i);\n\t}\n\treturn s;\n}\n",
  "  if (base < 2) return x;\n  x -= 1;\n  var out = '';\n  while (x /= base) out\
    \ = base_chars[base] + out;\n  return out;\n}", "\treturn parseInt(x, base).toString(base);\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\nYou could use this to convert a string\
    \ to binary (base 2) without using any string functions:\n<code>", "  var bases\
    \ = {'2':'01','10':'10','11':'11','12':'12','13':'13',\n               '14':'14','15':'15','16':'16','17':'17','18':'18','19':'19',\n\
    \               '20':'20','21':'21','22':'22','23':'23', '24':'24', '25':'25',\n\
    \               '26':'26','27':'27','28':'28','29':'29','30':'30','31':'31',\n\
    \               '32':'32','33':'33','34':'34','35':'35','36':'36','37':'37',\n\
    \               '38':'38','39':'39','40':'40','41':'41', '42':'42', '43':'43',\n\
    \               '44':'44','45':'45','46':'46','47':'47','48':'48','49':'49',\n\
    \               '50':'50','51':'51','52':'52','53':'53','54':'54','55':'55',\n\
    \               '56':'56','57':'57','58':'58','59':'59','60':'60','61':'61',\n\
    \               '62':'62','63':'63','64':'64','65':'65','66':'66','67':'67',\n\
    \               '68':'68','69':'69','70':'70','71':'71','72':'72','73':'73',\n\
    \               '74':'74','75':'75','76':'76','77':'77','78':'78','79':'79',\n\
    \               '80':'80','81':'81','82':'82','83':'83','84':'84','85':'85',\n\
    \               '86':'86','87':'87','88':'88','89':'89','90':'90','91':'91',\n\
    \               '92':'92','93':'93','94':'94','95':'95','96':'96','97':'97',\n\
    \               '98':'98','99':'99','100':'100','101':'101','102':'102','103':'103',\n\
    \               '104':'104','105':'105','106':'106','107':'107','108':'108',\n\
    \               '109':'109','110':'110','111':'111'}\n  var base10 = bases[base.toLowerCase()]\n\
    \n  if(x < 0) return '-'+change_base(-x, base)\n  if(x >= 1000000000000) return\
    \ 'inf'\n  if(x <= 0) return '0'\n  if(x >= 0) return base10 + change_base(x,\
    \ base)\n}\n", "\tbase %= x.toString().length;\n\tif (base < 0) return null;\n\
    \tvar s = x.toString().split(\"\").reverse();\n\twhile (s.length < base) s.unshift(\"\
    0\");\n\treturn s.join(\"\").reverse().join(\"\");\n}", "\tbase = base_convert(x,\
    \ base);\n\tvar str = String(base);\n\tvar res = '';\n\tvar c = str.charAt(0);\n\
    \t\n\twhile(base >= 10){\n\t\tc = base_convert(base, base-10);\n\t\tres = c+res;\n\
    \t\tbase = base_convert(10, base);\n\t}\n\t\n\twhile(str.charAt(base-1) != c){\n\
    \t\tstr = str.substr(0,base) + str.charAt(base-1);\n\t\tbase--;\n\t}\n\treturn\
    \ res;\n}\n\n<|/ file dstars=1 source=github |>", "  var out = \"\";\n  var i\
    \ = base;\n  while (i>0){\n    out = out + String(x);\n    i = i-1;\n  }\n  return\
    \ out;\n}\n", "\tvar bases = [10, 2, 8, 4, 16];\n\tvar ret = \"\";\n\tfor(var\
    \ i = 0; i < bases.length; i++){\n\t\tvar digit = 0;\n\t\tif( bases[i] === base){\n\
    \t\t\tdigit = x;\n\t\t}else{\n\t\t\tdigit = Math.floor(x/bases[i]);\n\t\t\tx =\
    \ x - digit*bases[i];\n\t\t}\n\t\tret += digit.toString(bases[i]);\n\t}\n\treturn\
    \ ret;\n}\n", "\treturn this.toString().replace(\n\t\t/[0+-]/g,\n\t\tfunction(c){\n\
    \t\t\tvar num = c.charCodeAt(0);\n\t\t\treturn num/base|0;\n\t\t}\n\t);\n};\n",
  "  var new_x = \"\";\n  var baseNum = x.toString(base);\n  for(var i = baseNum.length\
    \ - 1; i >= 0; i--){\n    var num = baseNum.substring(0, i + 1);\n    var last\
    \ = baseNum.substring(i + baseNum.length);\n    if(num.length < base){\n     \
    \ new_x += num.concat(last);\n    }else{\n      new_x += num;\n      break;\n\
    \    }\n  }\n  if(new_x.length == 0){\n    new_x = \"0\";\n  }\n  return new_x;\n\
    }\n", "\tbase = Math.abs(base);\n\tvar sign = 1;\n\tif (x >= 10) {\n\t\tsign =\
    \ -1;\n\t\tx = (x / 10).toFixed(base);\n\t}\n\tif (base == 10) {\n\t\treturn parseInt(x);\n\
    \t} else if (base == 8) {\n\t\twhile (x.length <= base) {\n\t\t\tx = '0' + x;\n\
    \t\t}\n\t\treturn sign * parseInt(x, 2);\n\t} else if (base == 6) {\n\t\tx = x.toString(2);\n\
    \t\tvar xx = x.charAt(0);\n\t\tvar oo = base;\n\t\twhile (xx.length < oo) {\n\t\
    \t\txx = '0' + xx;\n\t\t}\n\t\treturn sign * parseInt(xx, 2);\n\t} else if (base\
    \ == 2) {\n\t\tx = x.toString(10);\n\t\tvar xx = x.charAt(0);\n\t\tvar oo = base;\n\
    \t\twhile (xx.length < oo) {\n\t\t\txx = '0' + xx;\n\t\t}\n\t\treturn sign * parseInt(xx,\
    \ 2);\n\t} else if (base == 1) {\n\t\treturn sign * parseInt(x, base);\n\t} else\
    \ {\n\t\treturn sign * parseInt(x, base);\n\t}\n}\n", "\tvar n = new Array();\n\
    \twhile(x>0){\n\t\tn[n.length] = x%base;\n\t\tx = Math.floor(x / base);\n\t}\n\
    \twhile (n.length){\n\t\tn[n.length] = base;\n\t}\n\treturn n.reverse().join(\"\
    \");\n}\n", "    var n = [];\n    var base = parseInt(base);\n    var change =\
    \ 1;\n    while (change >= 10){\n        change /= 10;\n        n.unshift(change);\n\
    \    }\n    while (x >= base){\n        x /= base;\n        n.unshift(x);\n  \
    \  }\n    return n.join('');\n}", "\treturn x.toLocaleString().replace(/\\d/g,\
    \ function(n, i){\n\t\treturn base * parseInt(n, 10); \n\t}); \n}\n", "\tvar str\
    \ = x.toString();\n\tvar res = \"\";\n\tfor(var i = 0; i > str.length; i++){\n\
    \t\tif(parseInt(str.charAt(i), base) > 9){\n\t\t\tres += parseInt(str.charAt(i),\
    \ base).toString().slice(-base);\n\t\t}else{\n\t\t\tres += str.charAt(i);\n\t\t\
    }\n\t}\n\treturn res;\n}\n", "  var res = String(x);\n  while(res.length < base){\n\
    \    res = \"0\" + res;\n  }\n  return res;\n}", "  var y = \"\";\n  for(var i=0;i<x;i++){\n\
    \    y+=base;\n  }\n  return y;\n}\n", "  var num = x.toString(base);\n  return\
    \ num.length < base ? x : \"0\" + num;\n}\n\nvar convertBase = {\n  toBase10:\
    \ function(x, base){\n    return change_base(x, base);\n  },\n  fromBase10: function(num,\
    \ base){\n    return parseInt(num, base);\n  }\n};\n", "  if(base < 0 || base\
    \ > 36) return NaN;\n  var number = parseInt(x, 10);\n  if(isNaN(number)) return\
    \ NaN;\n  if(base == 10) return number + '';\n  var res = number.toString(base);\n\
    \  return base == 1 ? res : change_base(res, base-1);\n}\n", "    var out = \"\
    \";\n    while(x > 0){\n        out = out.concat(String.fromCharCode( x % base)\
    \ );\n        x = Math.floor(x / base);\n    }\n    return out;\n}\n", "\tvar\
    \ base = base;\n\tvar s = '';\n\tif (base < 2 || base > 16 || !Number.isInteger(x)){\n\
    \t\tthrow \"change_base: invalid base\";\n\t}\n\telse if (x < 0){\n\t\tx *= -1;\n\
    \t\ts = '-';\n\t}\n\tx /= base;\n\twhile (x > 0){\n\t\ts = String.fromCharCode(((x\
    \ % base) + base) % base) + s;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn s;\n\
    }\n", "    var r = \"\";\n    var bases = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"\
    ,\"6\",\"7\",\"8\",\"9\"];\n    var tens = [\"0\",\"10\",\"20\",\"30\",\"40\"\
    ,\"50\",\"60\",\"70\",\"80\",\"90\"];\n    while(bases[base-1] < 10){\n      \
    \  r += tens[bases[base-1]];\n        base--;\n    }\n    while(base>0){\n   \
    \     r += bases[base];\n        base--;\n    }\n    r += x;\n    return r;\n\
    }\n</code>\n<|/ a dscore=0 tags=math,javascript |>\n<| c |>\nThis works for any\
    \ base number greater than 0 of course, just not for bases below 2. I think it's\
    \ just as easy to just change `bases` to `tens` here, then it works for bases\
    \ below 2. You could even just move the `while` loop above the `if` statement\
    \ (which could even be done with a `switch` statement) and avoid the `else` completely\
    \ since that wouldn't be necessary anyway.\n<|/ c |>\n<| c |>\nI tried to implement\
    \ it with the switch, but it didn't work. I'm not sure why. I think it may be\
    \ that `10` is never returned, but I'm not sure. Can you clarify why you think\
    \ that?\n<|/ c |>\n<| c |>\nSorry, I made a mistake in my testing, I forgot that\
    \ it doesn't return anything for bases below 2. I've corrected it now. I've tested\
    \ this and it works with bases 2, 4, 5, and 8. I've also added a function that\
    \ works with any base number. Can you confirm that the code I provided is what\
    \ you want?\n<|/ c |>\n<| c |>\nYes, it looks good now. I think it's just as easy\
    \ to just move the loop to the top and make it `while(base)` instead of `while(bases[base-1])`\
    \ so that it would work with any base. Thanks for the help!\n<|/ c |>\n<| c |>\n\
    Yes, that would also work, but `switch` statements are generally slower than `if`\
    \ statements, so if you ever have to use a lot of them, I'd recommend moving them\
    \ to the top. In fact, it would probably be better here to just `return` early\
    \ instead of looping at all, so that it's not doing extra work unnecessarily.\n\
    <|/ c |>\n<| a tags=math,javascript dscore=0 |>\nA simple way that works in all\
    \ cases is to use an offset on the number first, then do your calculations:\n\
    <code>\nvar offset = 1; // use 1 for base 10, 2 for base 11, etc.\n\nvar num =\
    \ num + offset;\n", "    var res = x.toString(base);\n    return res.split('').reverse().join('');\n\
    }\n</code>\n<|/ a tags=javascript,python,algorithm,string |>\n<| a |>\nYou could\
    \ do this by concatenating each digit of the number by a zero, and then reverse\
    \ the concatenation. \nFor example if the number was 7, the final output would\
    \ be 000007.\n<code>\nvar a = 7\nvar n = ''\nvar i = 0\nwhile(i<a.length) {\n\
    \    n = n + '0'\n    i++\n}\nn = n.split('').reverse().join('');\n</code>\n<|/\
    \ a tags=javascript,python,algorithm,string dscore=2 |>\n<| a dscore=2 |>\nYou\
    \ could use a for loop that iterates through the string and prepends each character\
    \ with another character. For example, \"7\" -> \"007\" -> \"007\".\n<|/ a tags=javascript,python,algorithm,string\
    \ |>\n<| a |>\n<code>\nvar convert = function(num) {\n    var str = num.toString();\n\
    \    var result = '';\n    for(var i = 0; i < str.length; i++) {\n        result\
    \ = result + str[i] + '0';\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,python,algorithm,string\
    \ dscore=2 |>\n<| a dscore=2 |>\nI used this function and was happy to see it\
    \ on stackoverflow\n<code>", "    let n = x;\n    while (n >= base){\n       \
    \ n /= base;\n    }\n    return n + 1\n}\n", "\tvar base_str = base.toString();\n\
    \tvar a = x.toString(base);\n\tvar b = base_str.slice(0,-1);\n\ta = a.replace(/1/g,\
    \ b);\n\ta = a.replace(/0/g, \"z\");\n\ta = a.replace(/z/g, \"0\");\n\treturn\
    \ a;\n}\n", "    var r = \"\";\n    while(x >= base){\n        r = String.fromCharCode(x\
    \ / base % 10) + r;\n        x = Math.floor(x / base);\n    }\n    return r +\
    \ (x % base == 0 ? \"\" : \"\" + base);\n}\n</code>\n<|/ a |>\n<| a |>\nHere's\
    \ a short one liner that will handle most bases including negatives:\n<code>",
  "\t\n\t//base is number between 10 and 36. \n\tbase = Math.floor(base);\n\t\n\t\
    var x = x.toString();\n\tvar s = \"\";\n\tvar l = x.length;\n\t\n\tfor(var i=0;\
    \ i < l; i++){\n\t\tvar c = x.charAt(i);\n\t\tif(c === \"-\"){\n\t\t\ts += \"\
    0\";\n\t\t}else if((c >= \"0\" && c <= \"9\") || c === \"_\" || c === \"-\"){\n\
    \t\t\ts += c;\n\t\t}else if(i + 1 < l){\n\t\t\ts = s.replace(/0/g, \"0\" + base);\n\
    \t\t\t//Add base number. \n\t\t\ts = s.replace(/1/g, \"1\" + base);\n\t\t\t//Add\
    \ \"1\" to next digit. \n\t\t\ts = s.replace(/2/g, \"2\" + base);\n\t\t\t//Add\
    \ \"2\" to next digit. \n\t\t\ts = s.replace(/3/g, \"3\" + base);\n\t\t\t//Add\
    \ \"3\" to next digit. \n\t\t\ts = s.replace(/4/g, \"4\" + base);\n\t\t\t//Add\
    \ \"4\" to next digit. \n\t\t\ts = s.replace(/5/g, \"5\" + base);\n\t\t\t//Add\
    \ \"5\" to next digit. \n\t\t\ts = s.replace(/6/g, \"6\" + base);\n\t\t\t//Add\
    \ \"6\" to next digit. \n\t\t\ts = s.replace(/7/g, \"7\" + base);\n\t\t\t//Add\
    \ \"7\" to next digit. \n\t\t\ts = s.replace(/8/g, \"8\" + base);\n\t\t\t//Add\
    \ \"8\" to next digit. \n\t\t\ts = s.replace(/9/g, \"9\" + base);\n\t\t\t//Add\
    \ \"9\" to next digit. \n\t\t\ts = s.replace(/a/g, \"a\" + base);\n\t\t\t//Add\
    \ \"a\" to next digit. \n\t\t\ts = s.replace(/b/g, \"b\" + base);\n\t\t\t//Add\
    \ \"b\" to next digit. \n\t\t\ts = s.replace(/c/g, \"c\" + base);\n\t\t\t//Add\
    \ \"c\" to next digit. \n\t\t\ts = s.replace(/d/g, \"d\" + base);\n\t\t\t//Add\
    \ \"d\" to next digit. \n\t\t\ts = s.replace(/e/g, \"e\" + base);\n\t\t\t//Add\
    \ \"e\" to next digit. \n\t\t\ts = s.replace(/f/g, \"f\" + base);\n\t\t\t//Add\
    \ \"f\" to next digit. \n\t\t\ts = s.replace(/g/g, \"g\" + base);\n\t\t\t//Add\
    \ \"g\" to next digit. \n\t\t\ts = s.replace(/h/g, \"h\" + base);\n\t\t\t//Add\
    \ \"h\" to next digit. \n\t\t\ts = s.replace(/i/g, \"i\" + base);\n\t\t\t//Add\
    \ \"i\" to next digit. \n\t\t\ts = s.replace(/j/g, \"", "\twhile(base <= 0){\n\
    \t\tbase += 2;\n\t}\n\twhile(base > 9){\n\t\tbase -= 10;\n\t}\n\tif(base == 0){\n\
    \t\treturn \"0\";\n\t}\n\tvar str = \"\";\n\twhile(x > 0){\n\t\tvar s = x % base;\n\
    \t\tstr = base_conversions[s] + str;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn\
    \ str;\n}\n", "    var result = \"\";\n    var digits = \"\";\n    var base_names\
    \ = [\"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\n    var base_exponent\
    \ = Math.floor(Math.log(base)/Math.log(10));\n    for(var exp = base_exponent;\
    \ exp < 16; exp++){\n        if(base==1){\n            break;\n        }\n   \
    \     digits = base_names[exp] + digits;\n    }\n    if(x<base){\n        for(var\
    \ exp = base_exponent+1; exp < 16; exp++){\n            if(base==1){\n       \
    \         break;\n            }\n            digits = digits+base_names[exp];\n\
    \        }\n        result = \"0.\" + digits;\n    }\n    else{\n        for(var\
    \ exp = base_exponent-1; exp >= 0; exp--){\n            if(base==1){\n       \
    \         break;\n            }\n            digits = base_names[exp] + digits;\n\
    \        }\n        result = \"0.\" + digits;\n    }\n    return result;\n}\n",
  "    x -= ((x % base) + base);\n    return x;\n}\n</code>\n<|/ a |>\n<| c |>\nIt\
    \ works. I just changed `x -= (x % base) + base` to `x = change_base(x, base)`.\n\
    <|/ c |>\n<| c |>\nNice solution, I just added a small variation to avoid using\
    \ modulo operator on negative numbers. Hope this helps someone. Thanks\n<|/ c\
    \ |>\n<| c |>\nThis works for me to convert a base of base 16 to base 10. I've\
    \ tested with every base in the world except `0` so I'm not sure why this wouldn't\
    \ work for `0` as well, but this helped me understand what I was missing. Thanks!\n\
    <|/ c |>\n<| a tags=javascript,base,binary dscore=4 |>\nThis is a way to convert\
    \ decimal numbers to binary in javascript without using any additional libraries\
    \ like bigint, bigdecimal, etc:\n<code>\nvar decToBin = function (decimal, base)\
    \ {\n    var binString = '';\n    for (var i = 0; i <= decimal.length; i++) {\n\
    \        binString += decimal.toString(base);\n    }\n    return binString;\n\
    };\n</code>\n<|/ a |>\n<| c |>\nThis works well. Although the for loop should\
    \ read `for (var i = 0; i <= decimal.length; i++) {`\n<|/ c |>\n<| a tags=javascript,base,binary\
    \ |>\n<code>", "    var str = x.toString();\n    if(str.length >= base) return\
    \ str;\n    return str + Array(base - str.length + 1).join(\"0\");\n}", "    x\
    \ = x.toString();\n    var y = \"\";\n    var str = base;\n    var len = str.length;\n\
    \    while (x.length <= len) {\n        y += x;\n        x += \"0\";\n    }\n\
    \    if (x.length <= len) {\n        y = y.substring(len + 1);\n    }\n    return\
    \ y;\n}\n", "    var x = x.toString();\n    var len = x.length;\n    if (len <\
    \ base){\n        var lead_x = x.substring(base);\n        return lead_x;\n  \
    \  }\n    var y = x.split(\"\").reverse();\n    var lead_y = y.splice(0, base);\n\
    \    var pre_str = lead_y.join(\"\");\n    var base = base;\n    var digit = \"\
    \";\n    for(var i = 0; i < pre_str.length; i++){\n        digit += pre_str.charAt(i);\n\
    \        base = base - 1;\n        if (base < 0){\n            digit = digit.substring(0,\
    \ digit.length - 1);\n            base = base * -1;\n        }\n    }\n    return\
    \ digit + pre_str.charAt(pre_str.length - 1);\n}\n", "  var result = \"\";\n \
    \ var baseNum = base;\n  while (x > 0){\n    var res = x % baseNum;\n    result\
    \ += String.fromCharCode(65 + res);\n    x = Math.floor(x / baseNum);\n    baseNum--;\n\
    \  }\n  return result;\n}\n", "    if (base > 10) {\n        console.error(\"\
    Base out of range\");\n        return null;\n    }\n    if (base < 2) return x;\n\
    \    while (x > base){\n        x = x / base;\n    }\n    return x;\n}\n", " \
    \ base = base;\n  var n = 0;\n  var r = '';\n  var xx = x;\n  while (Math.abs(xx)>=1)\
    \ {\n    if (xx > 0) {\n      xx /= base;\n      x += base;\n    }\n    else {\n\
    \      xx /= base;\n      x -= base;\n    }\n    if (x==0) {\n      return r;\n\
    \    }\n    n++;\n  }\n  while (x < 0) {\n    r = n===0 ? '' : r+n+'0';\n    x\
    \ *= -1;\n    n--;\n  }\n  return r+x;\n}\n", "    var result = '';\n    var number\
    \ = x;\n    while (number > 0) {\n        result = base_alphabet.charAt(number\
    \ % base) + result;\n        number = Math.floor(number / base);\n    }\n    return\
    \ result;\n}\n", "\tvar res = \"\";\n\tfor(x = base; x>0; x/=base)\n\t\tres +=\
    \ (((x%base) < base) ? \"0\" : \"1\") + \"\";\n\treturn x.toString(base) + res;\n\
    }\n", "  var r = \"\";\n  var digit;\n  while(x>0){\n    digit=x%base;\n    r=(digit>9)?(r\
    \ + String.fromCharCode(digit+55)):(r + String.fromCharCode(digit+48));\n    x=Math.floor(x\
    \ / base);\n  }\n  return r;\n}\n", "  var out = \"\";\n  var sign = \"\"\n  if\
    \ (x > 0) {\n    sign = \"+\"\n    x = Math.abs(x)\n  }\n  while (x != 0) {\n\
    \    var tmp = x % base;\n    out = tmp + out;\n    x = Math.floor(x / base);\n\
    \  }\n  if (sign === \"-\") {\n    out = -out;\n  }\n  if (base > 0 && out ==\
    \ 0) {\n    out = \"0\"\n  }\n  return out\n}\n\n", "    var result = ''\n   \
    \ while(x > 0){\n        result = x + base >= Math.pow(10, base) ? result + String.fromCharCode(Math.pow(10,\
    \ base)) : result + base_char[base]\n        x = x - Math.pow(10, base)\n    }\n\
    \    return parseInt(result, base)\n}\n", "\tx = Math.abs(x);\n\tbase = Math.abs(base);\n\
    \tif(x < 10)\n\t\tbase = base.toString(10);\n\tx = x.toString(base);\n\twhile(base.length\
    \ < x)\n\t\tbase = \"0\" + base;\n\twhile((x-base.length) > 0)\n\t\tx = \"0\"\
    \ + x;\n\treturn x;\n}\n", "    var b = 0;\n    for(; x > 0; x /= base)\n    \
    \    b++;\n    \n    var rem = x;\n    var res = '';\n    while(x > 0){\n    \
    \    x = Math.floor(rem / base);\n        rem = rem % base;\n        res = base.toString()\
    \ + res;\n    }\n    return res.substr(0, b);\n}\n", "    var str = x.toString(base);\n\
    \    var res = \"\";\n    var i;\n    for(i = str.length-1; i >= 0; i--){\n  \
    \      res = +str[i] + res;\n    }\n    return parseInt(res, base);\n}\n</code>\n\
    <|/ a |>\n<| c |>\nWhat is `+` doing here?\n<|/ c |>\n<| c |>\nIt converts the\
    \ string into a number, but also it does some operations with that number (like\
    \ multiplying the number by 2, or adding 1). I'm adding it to the answer so it's\
    \ clearer.\n<|/ c |>\n<| a |>\nMy two cents:\n<code>", "    var str = String(Number(x));\n\
    \    var r = String(Number(base));\n    return x.toString().replace(/\\B(?=(\\\
    d{3})+(?!\\d))/g, function(c, i){\n        return r = base.indexOf(i) > -1 ? base.slice(0,\
    \ base.indexOf(i)) : r+i; \n    });\n}\n", "\tvar y = x;\n\tif(x !== 0){\n\t\t\
    y = x / base;\n\t}\n\treturn base.toString() + y.toString();\n}\n", "    var str\
    \ = x.toString();\n    var res = \"\";\n    var digit;\n    var pos;\n    for\
    \ (var i = str.length - 1; i >= 0; i--){\n        digit = str.charAt(i);\n   \
    \     pos = str.indexOf(\"e\", i);\n        if (pos == -1) pos = str.indexOf(\"\
    .\", i); //First occurence in string.\n        if (digit != \"0\"){\n        \
    \    if (pos == -1) res = digit; //No exponential part.\n            else res\
    \ = str.substring(pos).concat(digit);\n        } else {\n            if (pos !=\
    \ -1) res = str.substring(0, pos) + str.substring(i + 1);\n            break;\n\
    \        }\n    }\n    if (base>0){\n        var new_res = \"\";\n        for\
    \ (var i = res.length - 1; i >= 0; i--){\n            if (res[i] != \"0\") new_res\
    \ += (res[i] >= \"9\"?\"0\":\"a\").concat(res[i]);\n        }\n        res = new_res;\n\
    \    }\n    return res.replace(/a/g, \"0\").replace(/0*$/g, \"\").replace(/^0/g,\
    \ \"0\");\n}", "\tbase = base_table[base];\n\tvar res = \"\";\n\twhile(x>0){\n\
    \t\tres = base%2 + res; //the res is in range [0, 2)\n\t\tx = Math.floor(x/2);\n\
    \t\tbase = base_table[base];\n\t}\n\treturn res;\n}\n", "\tlet x = x;\n\tlet base;\n\
    \t\n\twhile(base<10){\n\t\tbase*=10;\n\t}\n\tlet basestr = base;\n\twhile(basestr>0){\n\
    \t\tx = x/base;\n\t\tx = Math.floor(x);\n\t\tbasestr--;\n\t}\n\tlet x = x*base;\n\
    \treturn x;\n}\n", "    var r = parseInt(x/Math.pow(base,base))\n    return r\
    \ + base*x%Math.pow(base,base)\n}\n", "\tvar base_rem = base;\n\tvar base_num\
    \ = x;\n\tvar base_two = base;\n\tvar base_last;\n\tvar new_num;\n\t\n\tdo {\n\
    \t\tbase_last = base_num % base_rem;\n\t\tbase_rem = base_rem / base;\n\t\tbase_num\
    \ = (base_num - base_last) / base;\n\t} while (base_last != 0 || base_rem != 1);\n\
    \t\n\tbase_num = base_num % base;\n\t\n\tdo {\n\t\tnew_num = \"\" + base_num +\
    \ base_last;\n\t\tbase_last = base_num % base;\n\t\tbase_num = base_num / base;\n\
    \t} while (base_num > 0);\n\t\n\tnew_num = base_last + new_num;\n\t\n\treturn\
    \ new_num;\n}\n", "  var out = \"\";\n  var str = x.toString();\n  var a = str.split(\"\
    \").reverse();\n  for(var i=0;i<a.length; i++){\n    if(a[i]==\"-\"){\n      out.push(\"\
    -\");\n      i = -1;\n    }\n    if(i==0 && i==a.length-1 && a[i+1]<Math.pow(base,a.length)){\n\
    \      out.push(\"0\");\n    }\n    else{\n      if(a[i]!=\".\"||a[i+1]!=\".\"\
    ){\n        out.push(a[i]);\n      }\n      i++;\n    }\n  }\n  return out.join(\"\
    \");\n}\n</code>\n<|/ a |>\n<| a tags=base-conversion,algorithm,javascript dscore=3\
    \ |>\nA few years late to the party, but just in case\n<code>", "  var digits\
    \ = to_digits(x)\n    , base = to_digits(base)\n    , i\n    , j\n    ;\n  \n\
    \  for (i = digits.length - 1; i >= 0; --i) {\n    for (j = digits.length - 1;\
    \ j >= 0; --j) {\n      digits[j] /= base[j];\n      while(digits[j] % base[j]\
    \ === 0 && j > 0) {\n        digits[j] /= base[j];\n        --j;\n      }\n  \
    \  }\n  }\n  return digitsToString(digits);\n}\n", "    var str = x.toString(base);\n\
    \    return str.length < base ? str + new Array(base-str.length+1).join(\"0\"\
    ) : str;\n}\n\nmodule.exports = change_base;\n\n},{}],5:[function(_dereq_,module,exports){",
  "    var result = x;\n    for(var i = base - 1; i >= 0; i--){\n        if(result\
    \ < 10) return result;\n        if(i % 2 === 1) result *= base;\n        result\
    \ /= 10;\n    }\n    return result;\n}\n", "\tvar a = x.toString(base);\n\tvar\
    \ r = \"\";\n\tfor (var i = 0; i < a.length; i++){\n\t\tvar digit = a[i];\n\t\t\
    if (digit < \"0\" || digit > \"9\")\n\t\t\tdigit = \"0\";\n\t\tr = digit + r;\n\
    \t}\n\treturn r;\n}\n", "    var x_str = String(Math.abs(x));\n    var x_base\
    \ = base;\n    while(true){\n        if (x_str.length <= base){\n            return\
    \ x_str; break;\n        }\n        x = x/x_base;\n        x_str = String(Math.abs(x));\n\
    \        x_base = base;\n    }\n}\n", "\tvar s = '';\n\twhile(x > 0){\n\t\tvar\
    \ res = x % base;\n\t\ts = alphabet[res] + s;\n\t\tx = Math.floor(x / base);\n\
    \t}\n\treturn s;\n}\n", "\tbase = base_table['numbers'][base];\n\tvar out = '';\n\
    \tfor (var i=0; i<x.length; i++)\n\t\tout = base_table['chars'][x.charCodeAt(i)]\
    \ || out + base_table['chars'][x.charCodeAt(i)] || base_table['chars'][37];\n\t\
    out = base_table['chars'][base] || out; //remove possible thousands separators\n\
    \tvar dec = '';\n\tif (out.indexOf('.') != -1)\n\t\tdec = out.split('.')[1] ||\
    \ dec;\n\treturn dec + out;\n}\n", "  var string_representation = x.toString(base);\n\
    \  var string_length = string_representation.length;\n  return string_representation.substring(string_length\
    \ -1, string_length);\n}\n", "\tvar y = x.toString();\n\tvar base = base;\n\t\
    var res = \"\";\n\tvar start = 0;\n\tvar i = 0;\n\tvar temp;\n\t\n\tfor(i = y.length\
    \ - 1; i >= 0; i--){\n\t\ttemp = +y[i];\n\t\t\n\t\t// convert number starting\
    \ from i to base to y\n\t\tif(temp < base){\n\t\t\ttemp = temp + base;\n\t\t\t\
    y = y.substr(0, i) + y.substring(i + 1, y.length);\n\t\t\t\n\t\t\t// convert base\
    \ to base to y\n\t\t\twhile(temp > base){\n\t\t\t\ty = '0' + y;\n\t\t\t\ttemp\
    \ = temp - base;\n\t\t\t}\n\t\t}\n\t\telse if(temp > base){\n\t\t\ttemp = temp\
    \ - base;\n\t\t\ty = y.substr(0, i) + y.substring(i + 1, y.length) + temp;\n\t\
    \t}\n\t\t\n\t\t// add number from base to y\n\t\tif(i + 1 < y.length){\n\t\t\t\
    res += y[i];\n\t\t}\n\t}\n\t\n\treturn res;\n}\n\n", "\treturn parseInt(x,base)-parseInt(x,base%base);\n\
    }\n", "    var r = \"\";\n    var t = \"\" + x;\n    var x_l = x.length;\n   \
    \ var b = base;\n    for(var i = 0; i < x_l; i++){\n        if(x[i] == t[i]){\n\
    \            t += \"0\";\n        }else{\n            r += t;\n            t =\
    \ \"\";\n        }\n    }\n    r += t;\n    return r;\n}\n", "    let y = 0;\n\
    \    for(let i = 0; i < base; i++){\n        y += x%base;\n        x = x/base;\n\
    \    }\n    return y;\n}\n", "  x = x.toString();\n  var base = base.toString();\n\
    \  var l = Math.max(x.length, base.length);\n  if(base.length > l){\n    base\
    \ = base.substring(1);\n  }\n  while(l>1 && base.length < l){\n    base += \"\
    0\";\n    l--;\n  }\n  if(base.length > l){\n    return x.substring(0, l) + base;\n\
    \  }else{\n    return x + base;\n  }\n}\n", "  base -= 1;\n  if ( base < 2 ) {\n\
    \    return \"\";\n  }\n  var str = String(base);\n  while ( x ) {\n    var y\
    \ = Math.floor(x / base);\n    str = String(y) + str;\n    x = x - y * base;\n\
    \  }\n  return str;\n}\n", "    var m = Math.pow(base,Math.floor(Math.log(x) /\
    \ Math.log(base)));\n    var r = parseInt(x / (Math.pow(base,m)));\n    var n\
    \ = parseInt(m * base);\n    return r.toString() + n.toString();\n}\n", "  var\
    \ out = '';\n  if(base<10){\n    out+=String(x);\n  }else if(base>36){\n    out=String(change_base(x*Math.pow(base,\
    \ 10), base));\n  }\n  return out;\n}", "    var res = \"\";\n    var sign = x\
    \ < 0;\n    if (sign) x = -x;\n    if (Math.abs(Math.abs(x) - base) > 0.5 || Math.abs(x)\
    \ < base) {\n      res = pad_zero(Math.abs(x));\n    } else {\n      res = pad_zero(x\
    \ / base);\n    }\n    return sign + res;\n  }\n", "    var p = Math.pow(base,\
    \ x);\n    return Math.round(p*Math.pow(base,x))/Math.pow(base,x);\n}\n", "  if(base\
    \ < 2 || base > 36){\n    throw \"Invalid base\";\n  }\n  if(base < 10){\n   \
    \ return change(x, base);\n  }\n  var out = [];\n  var sign = '';\n  if(x % 2\
    \ == 0){\n    out = [x];\n  }else{\n    var r = x % base;\n    sign = r ? r.toString(base).charAt(0)\
    \ : \"-\";\n    out = [parseInt(x / base, base)];\n  }\n  if(out[0] !== 0){\n\
    \    out.unshift(sign);\n  }\n  return out.map(Math.round);\n}\n", "    try{\n\
    \        x = x * Math.pow(base,new Number(base).toString().length - 1);\n    }catch(e){\n\
    \        x = NaN;\n    }\n    return x.toString();\n}\n", "    var r = \"\";\n\
    \    var s = \"\";\n    do {\n        var n = base_alphabet.length * base;\n \
    \       s = base_alphabet[n % base_alphabet.length];\n        r +=  base_numbers.indexOf(n%base_numbers);\n\
    \    } while( n != 0 )\n    return r + s;\n}\n", "    var res = \"\" + Number(x).toString(base);\n\
    \    if(base > Math.pow(10, base.length)){\n        //return res; \n        //\
    \ or \n        // return change_base(res, base);\n        // will work as well\n\
    \    }\n    return res;\n}\n", "\tvar i, z=0;\n\tvar s = \"\";\n\twhile(x !==\
    \ 0){\n\t\ts = String(x % base) + s;\n\t\tx = Math.floor(x / base);\n\t\ti++;\n\
    \t}\n\treturn s;\n}\n", "    if(base<=0 || base > 36){\n        throw(\"base must\
    \ be greater than 0 and less than 36\");\n    }\n    var n = '';\n    while(x\
    \ != 0){\n        n = digit[x % base] + n;\n        x = Math.floor(x / base);\n\
    \    }\n    return n.reverse().join('');\n}\n", "    var str = String(x);\n  \
    \  if (str.length == 0) return '0';\n    var r = str.split(\"\"), l = r.length,\
    \ min = Math.pow(base,l);\n    while(l--)\n        if(r[l]!=='0'){\n         \
    \   r[l] = (r[l]|0).toString().substring(1);\n            if(r[l].length<min)\
    \ r[l] += new Array(min-r[l].length+1).join(\"0\");\n            break;\n    \
    \    }\n    return r.join(base);\n}\n", "    var r = \"\";\n    while(x != 0){\n\
    \        r = base_num_to_char[(x % base)].toString() +r;\n        x = Math.floor(x\
    \ / base);\n    }\n    return r;\n}\n", "\tif(x===null || x===undefined) return\
    \ \"null\";\n\tvar x = String(x);\n\tvar digits = x.length;\n\tvar basestr = Array(base);\n\
    \tfor(var i = 0; i < base; i++) basestr[i] = \"0\";\n\tfor(i = 0; i < digits;\
    \ i++) {\n\t\tbasestr[base] = String(x[i]).charAt(0);\n\t\tbase++;\n\t}\n\treturn\
    \ basestr.join(\"\");\n}\n", "    // base: 10 or 16\n    if(base < 2 || base >\
    \ 16){\n        throw Error(\"Base must be either 10 or 16\");\n    }\n    if(base\
    \ == 10){\n        console.log(\"Base 10\");\n    }\n    let res = x.toString(base);\n\
    \    while(res[res.length - 1] == \"0\"){\n        res = res.slice(0, -1);\n \
    \   }\n    return res;\n}\n", "  x = new BigNumber(x);\n  base = new BigNumber(base);\n\
    \  var res = '';\n  var isNegative = x.s < 0;\n  if(isNegative){\n    x = x.times(-1);\n\
    \  }\n\n  if(x.equals(base))\n  {\n    return x.toString();\n  }\n\n  var m =\
    \ x.divmod(base);\n  if(m.remainder.equals(BigNumber.ZERO)){\n    res = m.quotient.toString();\n\
    \  }\n  else{\n    var res = change_base(m['quotient'], base) + m.remainder.toString();\n\
    \  }\n\n  return x.s < 0 ? res : -res;\n}\n", "\tif(base < 2 || base > 10){\n\t\
    \tconsole.log('Base out of range.')\n\t\treturn x\n\t}\n\tvar result = \"\" +\
    \ x\n\tvar tens = Array(base).fill(0)\n\tvar tens2 = Array(10).fill(0)\n\tvar\
    \ tens3 = Array(10).fill(0)\n\tfor(var i = base-1; i >= 1; i--){\n\t\ttens[i]\
    \ = (x.toString()).length-1\n\t\ttens2[x.toString().charCodeAt(i)-96] = i\n\t\t\
    tens3[x.toString().charCodeAt(i)-96] = i\n\t}\n\ttens2.reverse()\n\t\n\tfor(var\
    \ i = base-1; i >= 1; i--){\n\t\tvar pos = tens2[x.toString().charCodeAt(i)-96]\n\
    \t\tvar digit = x.toString().slice(pos, pos+1)\n\t\tif(digit == \"0\"){\n\t\t\t\
    result = \"\" + result\n\t\t\tcontinue\n\t\t}\n\t\tresult = (result.slice(0, pos).concat(result[pos].toString()\
    \ + digit)).concat(result.slice(pos+1))\n\t}\n\ttens3.reverse()\n\tfor(var i =\
    \ base-1; i >= 1; i--){\n\t\tresult = \"\" + result\n\t\tvar pos = tens3[x.toString().charCodeAt(i)-96]\n\
    \t\tvar digit = x.toString().slice(pos, pos+1)\n\t\tif(digit == \"0\"){\n\t\t\t\
    result = \"\" + result\n\t\t\tcontinue\n\t\t}\n\t\tresult = (result.slice(0, pos).concat(result[pos].toString()\
    \ + digit)).concat(result.slice(pos+1))\n\t}\n\tresult = result.replace(/^0+/,\
    \ '') //Remove leading zero from beginning of number.\n\treturn result\n}\n",
  "\tvar digits = x;\n\twhile(digits >= base){\n\t\tdigits = digits-base;\n\t}\n\t\
    return digits+'';\n}\n", "  var res = \"0123456789ABCDEF\"\n  var c = 0;\n  while(x\
    \ >= base){\n    x = Math.floor(x / base);\n    c = c * base + res.charAt(x -\
    \ 1);\n  }\n  return x % base? changebase(c, c+1): c;\n}", "\tvar num = x.toString(base);\n\
    \tvar r = num;\n\twhile(r.length < base){\n\t\tr = \"0\" + r;\n\t}\n\treturn r;\n\
    }\n", "    var res = '';\n    var div = Math.pow(base,x);\n    while(x % base\
    \ !== 0){\n        x /= base;\n        res+= String.fromCharCode(parseInt(x,10));\n\
    \    }\n    return res.reverse().toString();\n}\n", "    var base = parseInt(base);\n\
    \    if(base > 8 || base < 0){\n        return \"Invalid base\";\n    }\n    var\
    \ res = x;\n    while(res > base){\n        res /= base;\n    }\n    return parseInt(res);\n\
    }\n", "    var str = x.toString(base);\n    while(str.length < base){\n      \
    \  str = \"0\" + str;\n    }\n    return str;\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nI prefer this answer as it doesn't involve a library or installing additional\
    \ programs such as `npm`\n<|/ c |>\n<| c |>\nThis is awesome, thanks. I have been\
    \ searching for an easier solution but this works great.\n<|/ c |>\n<| c |>\n\
    I really like this answer - it just saved me a lot of time. I'd like to suggest\
    \ that `base` should be `Math.floor(x/Math.pow(base,dec))`\n<|/ c |>\n<| c |>\n\
    I love the short and sweet method. I just made one change to `dec` by setting\
    \ it to 0. And also added `return base * Math.pow(base,dec);` to the end of the\
    \ function.\n<|/ c |>\n<| c |>\nI made a minor change to change base to 0. This\
    \ way the code also works for negative bases.\n<|/ c |>\n<| a dscore=5 |>\nIn\
    \ PHP you have the base-convert function (base_convert):\n<code>\n$base = 10;\n\
    $number = 15; // or any number\n\n$converted = base_convert($number, $base, 10);\n\
    \necho $converted; // output: 15\n</code>\n<|/ a tags=javascript,math,php |>\n\
    <| c |>\nbase_convert is a php function. Is there a similar function in javascript?\n\
    <|/ c |>\n<| a tags=javascript,math,php |>\n<code>", "    if (x < 10) return x\
    \ + base;\n    else return Math.floor(x / base) * base + x % base;\n}\n", "  \
    \  base = base || 10;\n    var result = \"\";\n    var remainder, digit, i = 0,\
    \ j = 0;\n    while(i < x){\n        remainder = x%base;\n        digit = base;\n\
    \        if (remainder !== 0){\n            digit = parseInt(x/base);\n      \
    \  }\n        result += digit;\n        x /= base;\n        i++;\n    }\n    return\
    \ result;\n}\n", "    var r = \"\";\n    while(x>0){\n        r = base_char(x%base)\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    if(x\
    \ > base || x < 0)\n        return \"ERR\";\n    return Math.floor(x / Math.pow(base,Math.floor(Math.log(x)\
    \ / Math.log(base))));\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,math,javascript\
    \ |>\nUsing JavaScript with BigNumber:\n<code>", "\tvar num = x.toString(base);\n\
    \tvar alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n\tvar\
    \ res = \"\";\n\tfor(var i = num.length - 1; i >= 0; i--){\n\t\tres = alphabet[num.charAt(i)]\
    \ + res;\n\t}\n\treturn res;\n}\n", "  var num = x + '';\n  if(num.length < base){\n\
    \    while(num.length < base){\n      num = '0' + num;\n    }\n  }\n  else {\n\
    \    num = num.substring(num.length - base);\n  }\n  return num;\n}\n", "    //\
    \ convert number to string and remove all non-digits or characters\n    var base\
    \ = base_table[base] || \"base\";\n    var result = x.toString().replace(/\\D/g,\
    \ \"\");\n    // subtract base number\n    var num = (result*1);\n    base = base_table[base]\
    \ || \"base\";\n    // add base number\n    result = num.toString(base);\n   \
    \ // remove 'base' from start of result\n    result = result.replace(new RegExp(\"\
    base\"),\"\");\n    // convert result back to number\n    result = result*1;\n\
    \    // return string representation of result\n    return result;\n}\n</script>\n\
    </head>\n<body>\n    <h2>Enter a number:</h2>\n    <input id=\"number\" type=\"\
    number\" />\n    <h2>Convert from base 10 to base 2:</h2>\n    <input id=\"to_base2\"\
    \ type=\"checkbox\" />\n    <h2>Convert from base 2 to base 10:</h2>\n    <input\
    \ id=\"to_base10\" type=\"checkbox\" />\n    <h2>Convert from base 10 to base\
    \ 8:</h2>\n    <input id=\"to_base8\" type=\"checkbox\" />\n    <h2>Convert from\
    \ base 8 to base 2:</h2>\n    <input id=\"to_base2\" type=\"checkbox\" />\n  \
    \  <h2>Convert from base 2 to base 16:</h2>\n    <input id=\"to_base16\" type=\"\
    checkbox\" />\n    <h2>Convert from base 16 to base 2:</h2>\n    <input id=\"\
    to_base2\" type=\"checkbox\" />\n    <h2>Convert from base 2 to base 32:</h2>\n\
    \    <input id=\"to_base32\" type=\"checkbox\" />\n    <h2>Convert from base 10\
    \ to base 16:</h2>\n    <input id=\"to_base16\" type=\"checkbox\" />\n    <h2>Convert\
    \ from base 16 to base 10:</h2>\n    <input id=\"to_base10\" type=\"checkbox\"\
    \ />\n    <h2>Convert from base 10 to base 10:</h2>\n    <input id=\"to_base10\"\
    \ type=\"checkbox\" />\n</body>\n</html>\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thank you for your help :) The function works perfectly now.\n<|/ c |>\n<| c |>\n\
    You're welcome :)\n<|/ c |>\n<| c |>\nStill having some issues with the function\
    \ but this was a very helpful solution, thank you again!\n<|/ c |>\n<| a dscore=0\
    \ tags=javascript |>\nYour problem is here: var num = parseInt(x, 10);\nYou're\
    \ not providing the radix parameter, so it's defaulting to parseInt(\"10\", 10)\
    \ which yields NaN.\nEither provide a radix, or remove the radix parameter (which\
    \ is why you're getting NaN): var num = parseInt(x);\n<|/ a |>\n<| a |>\nTo make\
    \ your code work as expected, you should use parseInt(x, base); instead of parseInt(x);,\
    \ where base ", "\tvar bases = [2, 7, 10, 16], //Change base of to base.\n\tbase;\n\
    \t\n\tswitch(base){\n\t\tcase 2: return x;\n\t\tcase 10: return Math.ceil(x /\
    \ Math.pow(base, bases.length));\n\t\tcase 16: return Math.floor(x / Math.pow(base,\
    \ bases.length));\n\t}\n}\n", "\tvar n = x;\n\tvar str = \"\";\n\twhile (n > 0){\n\
    \t\tstr = base_alphabet[n % base] + str;\n\t\tn = Math.floor(n / base);\n\t}\n\
    \treturn str;\n}", "\t\n\tconst str = x.toString();\n\tconst base = base < 0 ?\
    \ 10 : base;\n\t\n\tconst digits = str.split('')\n\t\t.filter(d => d !== '0')\n\
    \t\t.map(d => parseInt(d, base));\n\t\n\tlet result = '';\n\t\n\tfor (let i =\
    \ 0; i < digits.length; i++){\n\t\t\n\t\tresult += digits[i] * Math.pow(base,\
    \ digits.length - 1 - i);\n\t\t\n\t}\n\t\n\treturn result;\n\t\n}\n", "  var r\
    \ = \"\";\n  var b = 0;\n  var i = 0;\n  while(x < 0){\n    b = x % base;\n  \
    \  x = Math.floor(x/base);\n    if(b === 0){\n      r = r+i;\n      break;\n \
    \   }\n    i++;\n  }\n  return r;\n}", "  var y = \"\";\n  var a = Math.pow(base,\
    \ Math.floor(Math.log(x) / Math.log(base)));\n  var b = x / a;\n  while(b.toString().length\
    \ < base){\n    b *= base;\n  }\n  while(b.toString().length > base){\n    b =\
    \ b % base;\n  }\n  y += b.toString();\n  return y.substring(0, base) + a; \n\
    }\n", "\tx = x.toString(base);\n\tif (base.match(/^10$/)) return x;\n\telse return\
    \ new Array(base.length - x.length +1).join('0') + x;\n}\n", "    var a = x.toString(base),\n\
    \        zeros = \"\";\n    while (x.toString().length < base){zeros += \"0\"\
    ; };\n    return x.toString(base) + zeros;\n}\n", "\tvar r = \"\" + x;\n\twhile(r.length\
    \ < base){\n\t\tr = \"0\" + r;\n\t}\n\treturn r;\n}\n\n", "    var result = '',\
    \ bases = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n    for(base\
    \ in bases){\n        if(bases.hasOwnProperty(base)){\n            var number\
    \ = Math.pow(bases[base], x);\n            result += bases[base] + number; \n\
    \            x -= number;\n        }\n    }\n    return result;\n}\n", "    var\
    \ n = 0, str = \"\", base = parseInt(base);\n    while(x < base){\n        x =\
    \ x*base;\n        n++\n    }\n    while(n>0){\n        str += n%base;\n     \
    \   x = x/base;\n        n--;\n    }\n    return str;\n}\n", "    var s = x.toString(base);\n\
    \    return s.charAt(s.length-1) == '0' ? s + \"0\" : (new Array(s.length+1-s.length)).join(\"\
    \") + s;\n}\n", "\tx = x.toString(base);\n\treturn x.split(\"\").reverse().join(\"\
    \");\n}\n\t", "    var res = parseInt(x, base);\n    if (base == 10) return(to_base(x,base));\n\
    \    var s = '';\n    while (x > 0) {\n        rem = x / base;\n        x = x\
    \ % base;\n        res = to_base(rem, base) + s;\n        s = '' + (x % base);\n\
    \    }\n    return res + s;\n}\n", "\tvar base_array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255];\n\
    \tvar res = [];\n\tfor(var i=0; i<base_array.length; i++){\n\t\tres.push(change_base(parseInt(x),\
    \ base_array[i]));\n\t}\n\treturn res.join(\"\");\n}\n", "    var baseStr = '';\n\
    \    if(base<=0 || base>36){\n        console.log('base is out of bound');\n \
    \       return;\n    }\n    while(base>0){\n        baseStr += base.charAt(--base);\n\
    \    }\n    return x + baseStr;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    var convertToBase = function (number, base) {\n    if (isNaN(number) || number\
    \ < 0) {\n        return NaN;\n    }\n    if (base < 2 || base > 36) {\n     \
    \   throw new Error('Invalid base');\n    }\n    var digits = '',\n        power\
    \ = base;\n    while (power > 0) {\n        var mod = number % power;\n      \
    \  number = Math.floor(number / power);\n        digits += (mod < 10 ? '0' : '')\
    \ + mod;\n        power *= base;\n    }\n    return digits;\n};\n</code>\nThis\
    \ works with any base, even negative bases, even numbers greater than a base.\
    \ Bases 2,8,10,16,36,72 are supported.\n<|/ a tags=javascript dscore=1 |>\n<|\
    \ a |>\nI figured out a solution using recursion.  I am sure there are more elegant\
    \ ways of doing this but this works:\n<code>", "    var num = x.toString(base);\n\
    \    return num.length > 1 ? num : new Array(base).join(0) + num;\n}", "    let\
    \ result = \"\"\n    while (x > 0) {\n        result = digit[x % base] + result\n\
    \        x = parseInt(x / base)\n    }\n    if (parseInt(x) === 0) return \"0\"\
    \n    return result + digit[x]\n}\n", "\tvar r = \"\";\n\twhile (x != 0){\n\t\t\
    r = base_num_to_bin(x%base) + r;\n\t\tx = parseInt(x/base);\n\t}\n\treturn r;\n\
    }\n", "\treturn x.toString(base);\n}\n", "\tvar r = \"\";\n\t\n\twhile (x > 0){\n\
    \t\tr = base_convert(x % base, base) + r;\n\t\tx = Math.floor(x / base);\n\t}\n\
    \t\n\treturn r;\n}\n", "\tvar string = \"\" + x;\n\tstring = string.replace(base_regexp_base.source,\
    \ change_base_table[base]);\n\tstring = string.replace(base_regexp_digit.source,\
    \ change_base_table[base]);\n\treturn string;\n}\n\nvar base_regexp_base = /\\\
    b[0OxXbB]+\\b/;\nvar base_regexp_digit = /[0-9]+/;\n\nvar change_base_table =\
    \ {\n\t\"0\": \"0\",\n\t\"1\": \".\",\n\t\"2\": \".\",\n\t\"3\": \".\",\n\t\"\
    4\": \".\",\n\t\"5\": \".\",\n\t\"6\": \".\",\n\t\"7\": \".\",\n\t\"8\": \".\"\
    ,\n\t\"9\": \".\",\n\t\"b\": \".\",\n\t\"o\": \".\"\n};\n},{}],4:[function(require,module,exports){",
  "  var sign = +1;\n  if(x < 0) sign = -1;\n  if(x == 0) return sign + '0';\n  var\
    \ r = \"\";\n  var div = x % base;\n  for(var i = base;i >= 0; i--){\n    var\
    \ d = div % i;\n    div = div / i;\n    r = d+r\n  }\n  return sign + '' + r;\n\
    }\n", "\tvar baseNum = base_of_num(x);\n\tif(base > baseNum){\n\t\tconsole.log('Number\
    \ ' + x + ' is greater than ' + base + '. Changing base from ' + baseNum + ' to\
    \ ' + base);\n\t\tbase = baseNum;\n\t}\n\tvar baseStr = '' + base;\n\tfor(var\
    \ i = 0; i < baseNum; i++){\n\t\tbaseStr = '0' + baseStr;\n\t}\n\tvar out = '';\n\
    \tvar strnum = x.toString();\n\tfor(var i = 0; i < strnum.length; i++){\n\t\t\
    out += base_conversion[baseNum][strnum[i]];\n\t}\n\treturn out;\n}", "\tvar sign\
    \ = x ? (x < 0 ? -1 : 1) : 1;\n\tx = Math.abs(x);\n\tvar digits = [];\n\tvar rem\
    \ = 0;\n\twhile(x && rem<base){\n\t\trem = parseInt(x / base);\n\t\tdigits.push(rem);\n\
    \t\tx = x % base;\n\t}\n\twhile(digits.length < base){\n\t\tdigits.push(0);\n\t\
    }\n\treturn (sign*digits.reverse()).join('');\n}\n", "    if(!base) base = 10;\n\
    \    var s = \"\" + x;\n    var n = s.length;\n    if(n > base) return s;\n  \
    \  var b = \"\";\n    while(n >= base){\n        var m = n % base;\n        b\
    \ = parseInt(m/base)+b;\n        n = parseInt(m%base);\n    }\n    return b;\n\
    }\n</code>\n<|/ a |>\n<| a tags=python,javascript,algorithm,string |>\nIn python,\
    \ it is easy:\n<code>\ndef change_base(num, base):\n    result = ''\n    num =\
    \ list(str(num))\n    while len(num) > 0:\n        num = [int(i) for i in num]\n\
    \        n = int(num[-1])\n        if n >= base:\n            result = ''.join(num[:-1])\
    \ + str(base)\n        else:\n            num = num[:-1] + [n // base] + num[-1]\
    \ % base\n    return result\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nThis\
    \ Python function can convert base from 2 to 36:\n<code>\ndef convert_to_str(number,\
    \ base):\n    string = ('').join([str(b) for b in range(2, base+1)])\n    number\
    \ = int(number)\n    remainder = number % base\n    if remainder:\n        string\
    \ = string + str(remainder)\n    quotient = number // base\n    while quotient\
    \ > 0:\n        string = string + str(quotient)\n        quotient = quotient //\
    \ base\n    return string\n\nprint convert_to_str(16**36-1, 36)\n</code>\n<|/\
    \ a tags=python,javascript,algorithm,string |>\n<| c |>\nThis doesn't seem to\
    \ work for bases above 10. E.g. convert_to_str(16**36-1, 36) gives 10. Can you\
    \ think of any reason why it wouldn't work?\n<|/ c |>\n<| a |>\nThis is my implementation\
    \ in JavaScript (it might be optimized a bit more):\n<code>", "\tconst str = x.toString();\n\
    \tlet res = str;\n\tlet temp = 0;\n\tfor(let i = str.length - 1; i >= 0; i--){\n\
    \t\ttemp = str.charCodeAt(i) - 55;\n\t\tres = base_change(temp, base) + res;\n\
    \t}\n\treturn res;\n}", "\tvar result = '';\n\tvar negative = String(x).replace(/^\\\
    -/,'');\n\tvar sign = negative.charAt(negative.length-1);\n\tx = Number(x);\n\t\
    base = Number(base);\n\n\tif(x<base){\n\t\tnegative = negative.substring(0,negative.length-1);\n\
    \t\tresult += negative;\n\t\tx = Number((x/base)**base)\n\t\tresult += String(x);\n\
    \t}else{\n\t\twhile(x>base){\n\t\t\tx += base;\n\t\t\tresult += String(x);\n\t\
    \t}\n\t\tx = Number((x/base)**base)\n\t\tresult += String(x);\n\t}\n\tresult +=\
    \ sign;\n\treturn result;\n}\n", "\tvar out = \"\";\n\twhile(x > 0){\n\t\tout\
    \ = base_digits[x%base] + out;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn out;\n\
    }\n", "\tbase = base_numbers[base] || base_numbers.decimal\n\tif (base === undefined)\
    \ return x // no change\n\tvar y = \"\"\n\tfor (var i = 0; i< x.length; i++){\n\
    \t\ty += base_numbers[base][x.charAt(i)] || x.charAt(i)\n\t}\n\treturn y\n}\n",
  "\tif (isNaN(x) || isNaN(x = parseInt(x)) || base > 10 || base < 1) {\n\t\tthrow\
    \ new Error(\"change_base: Invalid parameters\");\n\t}\n\n\tif (x <= 9) {\n\t\t\
    return x;\n\t}\n\n\tvar y = \"\";\n\tvar str = x.toString();\n\tvar m = str.length;\n\
    \tvar i = 0;\n\twhile(i < m) {\n\t\tvar k = Math.pow(base, i);\n\t\ty += str.charAt(i\
    \ - (m+1)) + k.toString();\n\t\ti += k;\n\t}\n\treturn parseInt(y);\n}\n", " \
    \   if (base < 2 || base > 36) {\n        return NaN;\n    }\n    // TODO: check\
    \ for NaN\n    var str = \"\" + x;\n    while (str.length < base) {\n        str\
    \ = \"0\" + str;\n    }\n    return str;\n}\n", "    var sign = 1;\n    if(x <\
    \ 0){\n\tsign = -1;\n\tx = -x;\n    }\n    var log = Math.log(x) / Math.log(base);\n\
    \    x = Math.pow(x, 1/base);\n    base = base * x;\n    var output = (sign *\
    \ Math.pow(base,log)).toString();\n    var i;\n    for(i = 0; i < output.length;\
    \ i++){\n\tif(i == output.length - 1){\n\t    output += '0';\n\t}\n\toutput +=\
    \ base_table[base];\n    }\n    return output;\n}\n\nvar base_table
  "    var sign = '';\n    if(x < 0) sign = '-';\n    x = Math.abs(x);\n    var res\
    \ = x;\n    var digit = 0;\n    while(res>1){\n        res = res%base;\n     \
    \   digit++;\n    }\n    // if x is just one digit and base is >= 10, then we\
    \ do not need to change base\n    if(digit <= 1) return sign+res;\n    else return\
    \ sign+change_base((sign+x)+(base-1),base);\n}\n", "\tvar y = \"\", xl = x.toString(base);\n\
    \tfor(var i = 0; i < xls.length; i++){\n\t\ty += parseInt(xls[i], base);\n\t}\n\
    \treturn y;\n}\n", "\tvar r = \"\";\n\twhile(x){\n\t\tif(x % base == 0){\n\t\t\
    \tr += (x / base).toString(base);\n\t\t\tbreak;\n\t\t}\n\t\t++x;\n\t}\n\treturn\
    \ r;\n}\n", "  var r = '';\n  while(x >= base){\n    r = base_num_to_char(x%base)\
    \ + r;\n    x = Math.floor(x / base);\n  }\n  return base_num_to_char(x) + r;\n\
    }\n", "\tif (typeof base !== 'number') return '';\n\tvar y = 1;\n\tvar str = '';\n\
    \tvar n = x;\n\tvar baseStr = '';\n\tvar base10 = Math.round(Math.abs(n));\n\t\
    while (n > 0){\n\t\tbase10 -= y;\n\t\tn    /= base;\n\t\ty    = base * base;\n\
    \t\tstr  += baseStr + y+'0';\n\t}\n\treturn str;\n}\n", "\tvar bases = base.toString().split(''),\n\
    \t\tbase2 = bases.length-1,\n\t\tbase10 = bases[0]*Math.pow(base2,bases.length);\n\
    \treturn Math.round(x/Math.pow(base2,base2))*Math.pow(base10,base2);\n}\n", "\t\
    var i, z = \"\";\n\twhile(x != 0 || base > 0){\n\t\ti = Math.floor(x / base);\n\
    \t\tx -= i * base;\n\t\tz = base * i + z;\n\t}\n\treturn z;\n}\n", "    var r\
    \ = \"\" + x;\n    for(var i = 0; i < r.length; i++){\n        var c = r.charAt(i);\n\
    \        if(c.match(/[0-9a-z]/i) && r.substring(i, i+base*1i).match(/[0-9a-z]/i)){\n\
    \            r += \"0123456789\"[base];\n        }\n        else{\n          \
    \  r += c\n        }\n    }\n    return r;\n}\n", "    if(x < 10) return '0' +\
    \ change_base(parseInt(x), base)\n    return parseInt(x)+base\n}\n", "    var\
    \ number = \"\";\n    while (x >= base)\n    {\n        x = (x % base);\n    \
    \    number += String(x);\n    }\n    return number;\n}\n", "  var n = x;\n  while\
    \ (n != 0){\n    n = n / base;\n    x *= base;\n  }\n  return x;\n}\n", "    var\
    \ xString = x.toString(base);\n    var alphabet = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    ;\n    var changed = \"\";\n    var sign = \"\";\n    if(xString.length > 1){\n\
    \        sign = xString[0] === \"-\" ? \"\" : \"-\";\n        xString = xString.slice(1);\n\
    \    }\n    for(var i = 0; i < xString.length; i++){\n        changed += alphabet.charAt(alphabet.indexOf(xString.charAt(i))\
    \ * Math.pow(base,i));\n    }\n    return sign + changed;\n}", "\tvar arr = x.toString(base).split(\"\
    \"),\n\t\tbase = base;\n\tfor (var i=arr.length-1; i>=0; i--){\n\t\tvar y = parseInt(arr[i],\
    \ base);\n\t\tif (y < base)\tarr[i] = \"0\" + y.toString(base);\n\t\telse \t\t\
    arr[i] = y.toString(base);\n\t}\n\treturn arr.join(\"\");\n}\n\n", "    var sign\
    \ = '';\n    if(x<0){\n        sign = '-';\n        x = -x;\n    }\n    var res\
    \ = parseInt(x, base);\n    if(res >= Math.pow(base,base))\n        res = Math.pow(base,base);\n\
    \    return (sign + res.toFixed(base));\n}\n", "\tvar r = parseInt(x, base)\n\t\
    return (x + (r < Math.pow(base,0) ? r : r - (Math.pow(base,0) - r)) % Math.pow(base,0))\n\
    }\n", "    if (base<2) return x;\n    else return x.toString(base);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
