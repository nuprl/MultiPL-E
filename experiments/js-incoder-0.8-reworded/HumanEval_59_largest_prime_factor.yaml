name: HumanEval_59_largest_prime_factor
language: js
prompt: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunction largest_prime_factor(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
  \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
  \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
completions: ["    var isPrime=true\n    while(n%2==0){\n        n/=2\n        isPrime=false\n\
    \    }\n    for(var i = 3; i <= Math.sqrt(n); i += 2){\n        if(n%i==0){\n\
    \            isPrime=false\n            break\n        }\n    }\n    if(isPrime)\
    \ return i\n    else return -1\n}", "  if(n < 2) return 2;\n  var test = 2;\n\
    \  while(n > 1){\n    if(n % test == 0){\n      n = n / test;\n      test = test\
    \ + 2;\n      continue;\n    }\n    else{\n      test = test * 2 + 2;\n    }\n\
    \  }\n  return test;\n}\n", "    var i,\n        j,\n        a,\n        b,\n\
    \        p,\n        q,\n        largest_p,\n        primes = [],\n        n =\
    \ +n,\n        div = n % 2,\n        smallest_p = 2,\n        largest = 0;\n\n\
    \    if(div){\n        primes.push(2);\n    }\n\n    while(n !== 1){\n       \
    \ q = Math.floor(n / 2);\n        p = primes[q];\n        if(!p){\n          \
    \  primes[q] = p = 1;\n        }\n        n = q;\n        if(div){\n         \
    \   if(n % p !== 0){\n                div = false;\n            }\n        }else{\n\
    \            if(n % p === 0){\n                div = true;\n            }\n  \
    \      }\n\n        if(div){\n            if(p === 1){\n                largest\
    \ = n;\n            }\n            largest_p = p;\n        }\n\n        if(!largest){\n\
    \            largest = n;\n        }\n        if(n > 1){\n            smallest_p\
    \ = p;\n        }\n    }\n\n    if(primes.length === 0){\n        return 2;\n\
    \    }\n\n    if(largest * smallest_p * 2 > n){\n        return largest;\n   \
    \ }\n\n    return largest * smallest_p;\n}\n},{}],6:[function(_dereq_,module,exports){\n\
    module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n",
  "  if(n == 1){\n    return 2;\n  }\n  for(var i = 2; i < Math.sqrt(n); i++){\n \
    \   if(n%i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  var i=2,t,p;\n  for(i=2;i<=n;i++){ //Start at i=2 and see\
    \ if n is a prime #If not, n-1 is prime. \n    if(n % i===0){\n      t=i; \n \
    \     break;\n    }\n  }\n  p=((n%i===0)?i:(n-1)); //If n is a prime, return it\n\
    \  //Now check whether p is a prime using the Tonelli\u2013Shanks Algorithm\n\
    \  for(i=1;i<=(p-1);i++){ //Check all odd numbers for p\n    if(n % p===0){ //If\
    \ p is even, remove it and divide by p\n      t=(p/2); //t must be an odd number\
    \ so that (n/p)=n//p\n      break;\n    }\n  }\n  p=p*(t*(t+1)-1); //p*p is p*(p+1)//(p+1),\
    \ etc.\n  if(p<=n){\n    return p;\n  }\n  else return n;\n}\n", "\tvar factor\
    \ = 2;\n\twhile(n % factor > 0){\n\t\tfactor += 1;\n\t}\n\treturn factor;\n}\n",
  "  var max = 2;\n  var small = 2;\n  for(var i = 3; i <= n; i *= i){\n    var tmp\
    \ = n;\n    n = tmp % i;\n    if(n > max){\n      max = n;\n    }\n    if(n <\
    \ small){\n      small = n;\n    }\n  }\n  return small;\n}", "    var i = 2;\
    \ \n    var s = i; \n    while (i < n){\n        while ((n % i) === 0){\n    \
    \        s = i;\n            i += 2;\n        }\n        i += 1;\n    }\n    return\
    \ s;\n}\n", "    if(n<2)\n        return 1;\n    for(var i=2;i*i<=n;i++)\n   \
    \     if(n % i == 0){\n            if(n < i && n % (i+1) == 0)\n             \
    \   return i;\n            else\n                return i+1;\n        }\n    return\
    \ n;\n}\n</code>\n<|/ a |>\n<| c |>\n`largest_prime_factor(2000)` returns `2`\
    \ but should be `5`. Fix it by changing `<` to `<=` in the for loop.\n<|/ c |>\n\
    <| c |>\nThanks for pointing out. Fixed\n<|/ c |>\n<| c |>\nIt's also not correct.\
    \ For example with 2000 it returns 3 instead of 5.\n<|/ c |>\n<| c |>\nFixed again\n\
    <|/ c |>\n<| a dscore=4 tags=primes,math,javascript,algorithm |>\nA good way to\
    \ think about primes is that they are whole numbers that can be divided by one\
    \ (or more) primes lesser than the number they are being checked against. \nTherefore\
    \ you can go through all primes until you find a prime less than or equal to the\
    \ number you are checking. In other words, just look ahead to see if the number\
    \ you are checking is divisible by the next prime below it.\nOnce you have found\
    \ a prime that divides your number, just divide it by it. If it divides it, your\
    \ number is a prime so return it. Otherwise return false. \nSo here is your javascript\
    \ code modified to perform this:\n<code>", "    var i, s = 1;\n    while(true){\n\
    \        if( n > 1 )\n        {\n            i = 2;\n            while( i*i <\
    \ n )\n            {\n                i++;\n            }\n            if( n ==\
    \ i*i )\n            {\n                return i;\n            }\n           \
    \ else\n            {\n                if( n % i == 0 ){\n                   \
    \ return i;\n                }\n                else{\n                    s =\
    \ n*s;\n                    n = n / i;\n                }\n            }\n   \
    \     }\n        else\n        {\n            return s;\n        }\n    }\n}\n",
  "    if (n == 1)\n        return 2;\n    let candidate = 3;\n    let max = 2;\n\
    \    while(n > 1){\n        if (n % candidate == 0 && n != 1 && n != candidate)\n\
    \            max = candidate;\n        candidate++;\n    }\n    return max;\n\
    }\n\n", "    var max = 2, factor = 2;\n    while(factor < n){\n        if(n %\
    \ factor == 0){\n            max = factor;\n        }\n        factor++;\n   \
    \ }\n    return max;\n}\n", "    var i;\n    for(i=2;n>1 && i*i<=n;i++){}\n  \
    \  if(i==2)return 2;//if n is 2 return 2 already\n    for(i=3;n>1 && i*i<=n;i++){}\n\
    \    while(i<n){\n        if(n%(i++)==0)return i;\n    }\n    return n;//n is\
    \ always greater than 1\n}\n", "    while(n%2==0){ //Find the largest factor.\n\
    \        n/=2;\n    }\n    for(var i=3; i<=Math.sqrt(n); i*=2){//Start at 3 and\
    \ remove any factor > square root.\n        if(n%i==0){\n            return i;\n\
    \        }\n    }\n    return n;\n}\n", "  var i = 2;\n  while (i * i <= n){\n\
    \    if(n % i == 0){\n      return i;\n    }\n    i += 1;\n  }\n  return n;\n\
    }\n\nvar factor = 2;", "  var primes = {};\n  var result = n;\n  while(primes.hasOwnProperty(n)){\n\
    \    result = primes[result];\n    if(result === 1){\n      break;\n    }\n  \
    \  if(result > 1){\n      result = primes[result];\n    }\n  }\n  return result;\n\
    }", "\tif(n<2) return null; //Not a prime\n\tvar d = 2;\n\twhile(d*d<=n){\n\t\t\
    if(n % d == 0) return d;\n\t\td += 2;\n\t}\n\treturn null;\n}\n", "    var factor\
    \ = 2;\n    while((n % factor) != 0){\n        factor++;\n    }\n    return factor;\n\
    }\n</cell>\n<text>\nIt turns out that this function returns both the largest prime\
    \ factor and its exponent as a tuple. So we can get the largest prime factor of\
    \ the number by accessing the exponent of the tuple.\n\n\n</text>\n<cell>\n# Get\
    \ the exponent of the largest prime factor of 13195\nlargest_prime_factor(13195)[1]\n\
    </cell>\n<text>\nThe greatest prime factors of 13195 are: 13 and 5.\n\nBecause\
    \ factors are only found up to sqrt(n), it's easy to find the prime factors. For\
    \ example:\n\n\n</text>\n<cell>\nprimeFactors = []\n\n# Iterate over all numbers\
    \ up to n\nfor i in range(2, n):\n    # Check if i is a prime number\n    if i\
    \ == 2:\n        primeFactors.append(2)\n        continue\n    \n    # Find all\
    \ factors of i starting from 2\n    primeFactor = 1\n    while (i%primeFactor)\
    \ == 0:\n        primeFactors.append(primeFactor)\n        i = i//primeFactor\n\
    \        primeFactor = 1\n    \n    # If i found a factor, append it to the list\n\
    \    if i > 1:\n        primeFactors.append(i)\n</cell>\n<cell>\n# Print all the\
    \ prime factors of 13195\nprimeFactors\n</cell>\n<text>\nIt turns out that 13\
    \ and 5 are also prime factors of 13195, so we can use the exponents to calculate\
    \ how many times each prime factor is found in the numbers.\n\n\n</text>\n<cell>\n\
    # Get the exponents of prime factors\nfactors = []\nfor pf in primeFactors:\n\
    \    factors.append(largest_prime_factor(pf))\n</cell>\n<cell>\n# Print all the\
    \ exponents of prime factors\nfactors\n</cell>\n<text>\nWe can now put it all\
    \ together to create a function to check if a number is prime.\n\n\n</text>\n\
    <cell>\n# Function to check if a number is prime\ndef is_prime(n):\n    # Check\
    \ if the number is 1 or less\n    if n < 2:\n        return False\n    \n    #\
    \ Check if n is a prime\n    for pf in primeFactors:\n        if n == pf:\n  \
    \          return True\n        \n        # If i is a factor of n and i divides\
    \ n, then n is not a prime\n        if (n % pf) == 0:\n            return False\n\
    \        \n    # If n is a prime, iterate over all exponents of prime factors\n\
    \    factors = []\n    for pf in primeFactors:\n        factors.append(largest_prime_factor(pf))\n\
    \    \n    for ex in factors:\n        if ex > n:\n            continue\n    \
    \    if n % ex == 0:\n            return False\n    return True\n</cell>\n<text>\n\
    Let's see if it works.\n\n\n", "    if(n % 2 == 0) return 2;\n    if(n % 3 ==\
    \ 0) return 3;\n    if(n % 5 == 0) return 5;\n    if(n % 7 == 0) return 7;\n \
    \   if(n % 11 == 0) return 11;\n    if(n % 13 == 0) return 13;\n    if(n % 17\
    \ == 0) return 17;\n    if(n % 23 == 0) return 23;\n    if(n % 29 == 0) return\
    \ 29;\n    if(n % 31 == 0) return 31;\n    if(n % 37 == 0) return 37;\n    if(n\
    \ % 41 == 0) return 41;\n    if(n % 43 == 0) return 43;\n    if(n % 47 == 0) return\
    \ 47;\n    if(n % 53 == 0) return 53;\n    if(n % 59 == 0) return 59;\n    if(n\
    \ % 61) return 61;\n    if(n % 67 == 0) return 67;\n    if(n % 71 == 0) return\
    \ 71;\n    if(n % 73 == 0) return 73;\n    if(n % 79 == 0) return 79;\n    if(n\
    \ % 83 == 0) return 83;\n    if(n % 89 == 0) return 89;\n    if(n % 97 == 0) return\
    \ 97;\n    return n;\n}\n", "  if(n<2) return 1;\n  var a = [],\n      d = n-1;\n\
    \  while(d--){\n    var m = Math.sqrt(d);\n    a.push(m+1);\n    if(m*m>n) break;\n\
    \  }\n  a.sort();\n  return a[0];\n}\n", "  if(isPrime(n))\n    return n;\n  var\
    \ largest_factor = 1;\n  var i = 1;\n  var t;\n  while(true){\n    t = i-1;\n\
    \    while(isPrime(t))\n      t++;\n    if(t > largest_factor)\n      largest_factor\
    \ = t;\n    if(isPrime(i))\n      break;\n    i++;\n  }\n  return largest_factor;\n\
    }\n", "  if(n < 2) return 2\n  if(n < 3) return 3\n  if(n % 2 == 0) return 2\n\
    \  if(n % 3 == 0) return 3\n  var max_prime = 2;\n  var max_prime_so_far = 2;\n\
    \  for(var i = 3; i <= Math.floor(n/3); i++){\n    if(n % i == 0) return max_prime;\n\
    \    if(max_prime_so_far < i - 1) max_prime_so_far = i - 1;\n    max_prime = i;\n\
    \  }\n  return max_prime;\n}\n", "\tvar max_exponent = Math.floor(Math.log(Math.abs(n))\
    \ / Math.LN2),\n\t\tresult = 1;\n\tif(max_exponent > 0){\n\t\tresult = Math.floor(Math.pow(n,\
    \ max_exponent)/Math.LN2)\n\t\twhile(Math.abs(result) < n && max_exponent < 32)\n\
    \t\t\tresult++\n\t}\n\treturn result\n}\n", "    for(var i = 2; i < n; i++){\n\
    \        if(n % i == 0){\n            return i;\n        }\n    }\n    return\
    \ n;\n}\n\n", "    var i = n-1;\n    while(!i%2&&!i%3)\n        i = i>>1;\n  \
    \  if(!i)\n        return 2;\n    return i%2 ? i:largest_prime_factor(i*i-1);\n\
    }\n", "    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    if (n\
    \ % 5 == 0) return 5;\n\n    var m = Math.sqrt(n);\n    for (var i = 3; i <= m;\
    \ i += 2){\n        if (n % i == 0) return i;\n    }\n    return n;\n}\n", " \
    \ if (n == 1) return 2;\n  \n  let p = 1;\n  while (n > 1){\n    let q = Math.floor(Math.sqrt(n));\n\
    \    if (n % 2 == 0){\n      p = q;\n    }\n    n = q;\n  }\n  return p;\n}\n\
    </cell>\n<text>\nThe largest prime factor of $n$ is $p$, where $n \\geq 1$, and\
    \ $p$ is $pq$, where $p$ is the greatest prime factor of $n$, and $q$ is the least\
    \ common multiple of the primes $p$ and $n$.\n\n\n</text>\n<text>\nExercises\n\
    \n</text>\n<text>\nWrite a function to return the greatest prime factor of the\
    \ number $n$. Test it for $n = 5$.\n\n\n</text>\n<cell>", "  var factor = 2;\n\
    \  while(n > 1 && n % factor == 0){\n    factor++;\n    n /= factor;\n  }\n  return\
    \ factor;\n}\n", "\tvar i, x = n;\n\t// Go until it's greater than sqrt(n)\n\t\
    for(i = 2; i <= Math.sqrt(n); ++i){\n\t\tif(n % i == 0){\n\t\t\tx = n / i;\n\t\
    \t\tbreak;\n\t\t}\n\t}\n\treturn x;\n}\n", "  for(var i = 2; i < n; i++){\n  \
    \  if(n % i == 0){\n      n = i \n      break\n    }\n  }\n  return n\n}\n", " \
    \   let i = 1;\n    let max_num = 2;\n    let result = 0;\n    \n    while( i\
    \ <= n ){\n        if( n % i == 0 ){\n            result = i;\n            while(\
    \ n % i == 0 ) n /= i;\n            if( n > 1 ) result = max_num;\n          \
    \  i = 2;\n        }\n        i++;\n    }\n    \n    return n;\n}\n", "  if(n<2){return\
    \ 1}\n  for(var i=2;i*i<=n;i++){ if(n%i == 0){ return i} }\n}\n", "    let factor;\n\
    \    for (factor=2;factor<=n;factor++){\n        if (n%factor==0){\n         \
    \   break;\n        }\n    }\n    return factor;\n}\n", "    // Cache the previous\
    \ result, which should already be found.\n    var cache = largestPrimeCache[n];\n\
    \    if(!cache){\n        // Limit search to squares of n between 2 and \u221A\
    n.\n        var limit = Math.sqrt(n);\n        // To limit search to odd numbers,\
    \ use a binary search instead of \n        // a linear search.\n        var log2n\
    \ = Math.ceil(Math.log(limit) / Math.LN2);\n        var start = 2;\n        var\
    \ end = log2n - 1;\n        var step = end < start ? -1 : 1; // Search is inclusive.\n\
    \        while(start <= end){\n            // Find the midpoint between the start\
    \ and end of the range.\n            var midpoint = (start + end) >> 1;\n    \
    \        // Check if the midpoint is divisible by n.\n            var divisible\
    \ = (midpoint % n) === 0;\n            // If the midpoint is divisible then return\
    \ the midpoint. If not, \n            // increment the end (since it has wrapped\
    \ back around to the \n            // beginning of the range) and try again.\n\
    \            if(divisible){\n                return midpoint;\n            }\n\
    \            end += step;\n            start += step;\n        }\n        largestPrimeCache[n]\
    \ = cache;\n    }\n    return cache;\n}\n", "    var factors = [],\n        factor,\n\
    \        d = Math.sqrt(n);\n    if(d > 1 && n != 1){\n        for(var i = 2; i\
    \ <= d; i++){\n            factor = n/i;\n            if(factor > 1 && factor!==i\
    \ && factors.indexOf(factor)===-1){\n                factors.push(factor);\n \
    \           }\n        }\n    }\n    return factors.length ? Math.max.apply(null,\
    \ factors) : n;\n}\n", "  if(n == 2)return 2;\n  for(var i = 2; i < n; i++){\n\
    \    if(n % i == 0)return i;\n  }\n  return n;\n}\n", "    let factor = 1;\n \
    \   for(let i=2; i<=Math.sqrt(n); i++){\n        if(n % i == 0){\n           \
    \ factor *= i;\n        }\n    }\n    return factor;\n}\n", "  var sieve = new\
    \ Sieve(n);\n  var result = sieve.largestPrimeFactor();\n  if(result > n){\n \
    \   console.log(\"Result: \" + result + \". n is: \" + n);\n  }\n  return result;\n\
    }\n", "    \n    var i = n+1;\n    while(i < n+100){\n        i*=2;\n    }\n \
    \   \n    for(var i = 2;;i++){\n        if(n%i==0){\n            return i;\n \
    \       }\n        if(i*i == n){\n            return i;\n        }\n    }\n}\n\
    \n", "  // Go from 1 to the highest power of n.\n  var max_number = Math.pow(n,\
    \ Math.floor(Math.log(n) / Math.LN2));\n  // Go from there, up to the square root\
    \ of n.\n  var max_number = Math.pow(max_number, Math.floor(Math.sqrt(n)));\n\
    \  // Divide all the numbers by their largest factors.\n  return max_number /\
    \ max_number;\n}\n</code>\n<|/ a tags=algorithm,math,primes,javascript,prime-factoring\
    \ |>\n<| c |>\nWhat about the case when n is 2^k for some k > 0?\n<|/ c |>\n<|\
    \ c |>\n: How are you going to find that out?\n<|/ c |>\n<| c |>\nI wonder how\
    \ you found `Math.log(2)`, since it is only defined for `1` as its logarithm.\
    \ Since `log2(1)` is 1, it seems like `Math.log(n)` would have been a better choice,\
    \ but that still doesn't answer my question, since `log(n)` won't be defined if\
    \ `n` is greater than 2.\n<|/ c |>\n<| c |>\n: You can easily prove this: If you\
    \ were to solve the problem for n=2 manually, it would take about the same amount\
    \ of time for n=2 to solve for n=3. So, for n>2 you need to solve for n-1 and\
    \ n, then add one to the result.\n<|/ c |>\n<| c |>\n: I haven't thought about\
    \ that. I just realized that since `log(2)` is 1, you could write `Math.log(n)`\
    \ instead and it would still work.\n<|/ c |>\n<| a |>\nI wrote a java script solution\
    \ for this. It doesn't use any extra functions. Just a simple loop and if statement\
    \ to check whether a number is prime or not\n<code>\n    var isPrime = function(n)\
    \ {\n        for(var i = 2; i < Math.sqrt(n); i++) {\n            if(n%i==0) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    };\n\n    var getPrimeFactors = function(n) {\n        var primeFactors =\
    \ \"\";\n        for(var i = 2; i < n; i++) {\n            if(isPrime(i)) {\n\
    \                primeFactors += i + \" \";\n            }\n        }\n      \
    \  return primeFactors;\n    };\n</code>\n<|/ a dscore=3 tags=algorithm,math,primes,javascript,prime-factoring\
    \ |>\n<| c |>\n`getPrimeFactors` should return `primeFactors`.\n<|/ c |>\n<| c\
    \ |>\nWhat about when `n` is 2^k for some k > 0?\n<|/ c |>\n<| c |>\n: How are\
    \ you going to find ", "  // See http://en.wikipedia.org/wiki/Primality_test#Naive_method\n\
    \  if(n % 2 == 1 || n < 3){ return 2; }\n  if(n % 3 == 0 || n % 4 == 0 || n %\
    \ 6 == 0 || n % 8 == 0 || n % 10 == 0){ return 3; }\n  if(n % 2 == 0){ return\
    \ 2; }\n  var limit = Math.sqrt(n);\n  var increment = 6;\n  if(limit < 3){\n\
    \    increment = 4;\n  }else if(limit < 7){\n    increment = 8;\n  }else if(limit\
    \ < 9){\n    increment = 12;\n  }else{\n    increment = 16;\n  }\n  n = limit;\n\
    \  for(var i = 2; i < limit; i += increment){\n    if(n % i == 0){ return i; }\n\
    \  }\n  return n;\n}\n\n", "  n = Number(n);\n  var l = 2;\n  while (n % 2 ==\
    \ 0) n /= 2;\n  while (n > 1){\n    if (n % 2 == 0) n /= 2;\n    else l++;\n \
    \ }\n  return l;\n}\n", "  var max_num = Math.ceil(Math.sqrt(n));\n  for(var i\
    \ = 2; i <= max_num; i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n\
    \  return n;\n}\n", "  if(n<=1){\n    return 2\n  }\n  if(n%2==0){\n    return\
    \ n\n  }\n  var max_factor=2\n  var exp=1\n  while(true){\n    if(exp==6){\n \
    \     return n\n    }\n    if(exp==3){\n      max_factor=Math.sqrt(n)\n      break\n\
    \    }\n    if(!isPrime(n/Math.pow(2,exp))){\n      break\n    }\n    max_factor=Math.pow(2,exp)\n\
    \    n=n%Math.pow(2,exp)\n    exp++\n  }\n  return max_factor\n}\n\n", "    var\
    \ max_factor = 1;\n    var max_factor_n;\n    for(var i = 2; i <= n; i++ ){\n\
    \        if(n % i == 0){\n            if(max_factor < i ){\n                max_factor\
    \ = i;\n                max_factor_n = n;\n            }\n        }\n    }\n \
    \   return max_factor_n;\n}\n", "  var result = 1;\n  for(var i = 2; i <= n; i++){\n\
    \    if (n % i == 0)\n      result = i;\n  }\n  return result;\n}\n", "    var\
    \ i = 2;\n    while(i * i <= n){\n        for(var j = 2; j < i; j++){\n      \
    \      if(n%i == 0){\n                return i;\n            }\n        }\n  \
    \      i++;\n    }\n    return n;\n}", "  var factor = 2;\n  while(factor*factor\
    \ <= n){\n    factor += 1;\n  }\n  return factor;\n}\n", "\tif(n<=1){\n\t\treturn\
    \ 1;\n\t}\n\n\tvar a = Math.floor(n/2);\n\tvar b = n%a;\n\n\tfor(var i = 2;i<=Math.ceil(b/2);++i){\n\
    \t\tif(b%i == 0){\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn i;\n}", "  // Make n positive\
    \ and a power of 2\n  n = n - 1;\n  n--;\n  // Factor n-1 times and add 1 and\
    \ check if it is the correct factor\n  var max_factor;\n  for(var i = 2;i <= Math.sqrt(n);\
    \ i++)\n    max_factor = Math.max(i * i, n);\n  return max_factor;\n}\n\n", " \
    \ var factors = [];\n  while(n > 2){\n    if(n % 2 == 0){\n      factors.push(2);\n\
    \      n = n >> 1;\n    } else {\n      while(n > 1 && n % 2 == 0){\n        factors.push(2);\n\
    \        n = n >> 1;\n      }\n    }\n  }\n  if(n != 1){\n    factors.push(n);\n\
    \  }\n  return factors;\n}\n", "  var p = 2;\n  while(n > 2){\n    var q = p *\
    \ 2 + 1;\n    if(n % q == 0) return q;\n    n /= q;\n    p++;\n  }\n  return n;\
    \ // return the smallest prime larger than n.\n}", "  if(n<=1){\n    return n\n\
    \  }\n  else{\n    var largest_prime_factor=1;\n    var factor=2;\n    while(factor<n){\n\
    \      if(Math.pow(n,factor)>largest_prime_factor){\n        largest_prime_factor=Math.pow(n,factor);\n\
    \      }\n      factor++;\n    }\n    return largest_prime_factor;\n  }\n}\n",
  "  if(n == 1) return 1;\n  if(n%2 == 0) return 2;\n  var m = n, i = 3;\n  while(n\
    \ > i){\n    if(n % i == 0) return i;\n    i += 2;\n  }\n  return m;\n}\n", " \
    \   for(var i=3; true; i++){\n        if(n%i === 0) return i;\n        if(i ===\
    \ 2) break;\n    }\n    return n;\n}", "    for(var i = 2; i <= Math.sqrt(n);\
    \ i++){\n        if(n % i === 0) return i;\n    }\n    return n; //n === 1 or\
    \ a perfect square, greater than 1\n}\n", "\tvar factors = [];\n\tfor(var i =\
    \ 0; i < n; i++){\n\t\tif(n % i == 0){\n\t\t\tfactors.push(i);\n\t\t\tn /= i;\n\
    \t\t}\n\t}\n\treturn factors[factors.length - 1];\n}\n", "    var i,\n       \
    \ a = +n, \n        g = a, \n        c = 1,\n        stop = false || n <= 1 ||\
    \ n < 3 ? 1000 : Math.sqrt(n),\n        factor = [];\n\n    while(!stop){\n  \
    \      for(i = 1; i*i <= n; i = i+1){\n            while(n % i == 0){\n      \
    \          n = n / i;\n                factor.push(i);\n            }\n      \
    \  }\n        if(n > 1){\n            for(i = 1; i <= n; i = i + 1){\n       \
    \         while(n % i == 0){\n                    n = n / i;\n               \
    \     factor.push(i);\n                }\n            }\n        }\n        if(n\
    \ > 1 && n % 1 != 0){\n            stop = true;\n        }\n        if(n > 1){\n\
    \            i = Math.floor(Math.sqrt(n));\n            if(!factor.length){\n\
    \                factor.push(i);\n            }else{\n                while(n\
    \ % factor[factor.length - 1] == 0){\n                    n = n / factor[factor.length\
    \ - 1];\n                    factor.pop();\n                }\n              \
    \  if(!factor.length){\n                    factor.push(i);\n                }\n\
    \            }\n        }\n        g = n;\n        n /= i;\n    }\n    return\
    \ factor.length ? factor[0] : null;\n}\n", "    if(n < 2){\n        return n;\n\
    \    }\n    if(n === 2){\n        return 2;\n    }\n    var m = Math.floor(n/2),\
    \ f = 5;\n    while((n % m) === 0){\n        n /= m;\n        f++;\n    }\n  \
    \  return f;\n}\n", "    var i, x = n, res = 1;\n    for(i=2;i<=Math.sqrt(n);i++){\n\
    \        if(n%i==0) res=i;\n        x=n/i;\n    }\n    return res;\n}\n", "  var\
    \ factors = [];\n  var maxFactor = 2;\n  while (n) {\n    if (n % maxFactor ===\
    \ 0) {\n      factors.push(maxFactor);\n    }\n    maxFactor *= 2;\n    n--;\n\
    \  }\n  return factors.length ? factors[factors.length - 1] : null;\n}\n", " \
    \ if(n<=1){\n    return 1\n  }\n  var factor = 2;\n  while (n%factor == 0){\n\
    \    factor += 1;\n  }\n  return factor;\n}\n", "  if (n <= 1) return n;\n  var\
    \ max_num = Math.sqrt(n),\n      num = n,\n      factor = 2;\n  while (num % 2\
    \ == 0){\n    num = Math.sqrt(num);\n    factor++;\n  }\n  while (num % 3 == 0){\n\
    \    num = Math.sqrt(num);\n    factor++;\n  }\n  while (num % 5 == 0){\n    num\
    \ = Math.sqrt(num);\n    factor++;\n  }\n  return factor;\n}\n", "\tvar factors\
    \ = [];\n\tvar factor = 1;\n\tfor(var i = 0; i < n; i++){\n\t\twhile(factor*factor\
    \ < n){\n\t\t\tfactor += 2;\n\t\t}\n\t\tfactors.push(factor);\n\t}\n\treturn factors[0];\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a |>\nYou just need to use logarithms.\n<code>\n\
    var largestPrimeFactor = function(n) {\n  if(n < 2){\n    return n;\n  }\n  return\
    \ largestPrimeFactor(n % 2);\n}\n</code>\n<|/ a tags=javascript,algorithm dscore=1\
    \ |>\n<| a tags=javascript,algorithm |>\n<code>\nvar primeFactors = function(n)\
    \ {\n    if (n < 2) {\n        return [];\n    }\n    var factors = [];\n    var\
    \ factor = 2;\n    while (factor < n) {\n        if (n % factor === 0) {\n   \
    \         factors.push(factor);\n            n /= factor;\n        }\n       \
    \ else {\n            factors.push(factor);\n            factor += 2;\n      \
    \  }\n    }\n    return factors;\n};\n", "  var factor = 2;\n  if(n>1){\n    for(var\
    \ i = 2; i <= Math.sqrt(n); i++){\n      if(n % i == 0){\n        factor *= i;\n\
    \      }\n    }\n  }\n  return factor;\n}\n", "    let m = math.floor(n/2)\n \
    \   for (let i = 2; i <= m; i++){\n        if (n % i == 0){\n            n = n/i\n\
    \            return i\n        }\n    }\n    return m + 1\n}\n", "  if(n<2)return\
    \ 1;\n  var a=n%2==0?2:3;\n  for(var i=4;i*i<=n;i+=2){\n    var r=n%i;\n    if(r==0)return\
    \ i;\n    if(r<a){\n      a=r;\n    }\n  }\n  return a;\n}", "  if(n<=1) return\
    \ n;\n  var result = Math.sqrt(n);\n  for(var i = 2; i<=Math.floor(Math.sqrt(n));\
    \ i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n  return result;\n\
    }\n", "    var isPrime=true,i=2,factor=1;\n    while(i<n){\n        if(n%i===0){\n\
    \            isPrime=false;\n            break;\n        }\n        i++;\n   \
    \ }\n    if(isPrime===true){\n        while(i<n){\n            if(n%i===0){\n\
    \                factor=i;\n                break;\n            }\n          \
    \  i++;\n        }\n    }\n    return factor;\n}\n", "  if(n<2) return 1;\n  var\
    \ p = 2, m = n, i = n;\n  while(i%p) {\n    m += p\n    i /= p\n  }\n  while(i==2)\
    \ m++\n  return m\n}\n", "  var divisors = [2,3,5,7,11,13,17,19]; //Primes smaller\
    \ than this will be replaced with their squares.\n  var factor = 2;\n  while (factor*factor\
    \ <= n){\n    for (var i=0; i<divisors.length; i++){\n      if(n % divisors[i]\
    \ == 0){\n        if (divisors[i] > factor){\n          divisors[i] = divisors[i]*factor;\n\
    \        }\n        break;\n      }\n    }\n    factor++;\n  }\n  return divisors[factor-1];\n\
    }\n", "\tvar highest_prime_factor = -1;\n\tfor(var i = 2; i < n; i++)\n\t{\n\t\
    \tif(n % i == 0)\n\t\t{\n\t\t\thighest_prime_factor = i;\n\t\t\tbreak;\n\t\t}\n\
    \t}\n\treturn highest_prime_factor;\n}\n", "\tif (n == 1){\n\t\treturn 1;\n\t\
    }\n\n\tvar d = n - 1;\n\tvar a = Math.sqrt(n);\n\tvar b = Math.sqrt(d);\n\tvar\
    \ c = 1;\n\n\twhile (b != 0){\n\t\tc = Math.floor((a + b) / 2);\n\t\ta = b;\n\t\
    \tb = c;\n\t}\n\n\treturn c;\n}\n\n", "    // Go through each factor of the prime\
    \ n\n    for(var i = 2; i <= Math.sqrt(n); i++){\n        //If the factor is a\
    \ prime return the factor\n        if(n%i == 0){\n            return i;\n    \
    \    }\n    }\n    // If no prime factor is found return the original number\n\
    \    return n;\n}\n", "    if(n < 2){\n        return 2;\n    }\n\n    for(var\
    \ i = 2; i <= Math.sqrt(n); ++i){\n        if(n % i == 0){\n            return\
    \ i;\n        }\n    }\n\n    return n;\n}\n\n", "    var i,\n        j,\n   \
    \     factors = [],\n        num_factors\n        ;\n    if(n < 2){\n        return\
    \ 1;\n    }\n    if(n < 6){\n        num_factors = 2;\n    }else if(n < 17){\n\
    \        num_factors = 3;\n    }else{\n        num_factors = 5;\n    }\n    for(i\
    \ = 2; i * i <= n; i+= 2){\n        for(j = 2; j < num_factors; j ++){\n     \
    \       if(n%i == 0){\n                factors.push(i, j);\n                break;\n\
    \            }\n        }\n    }\n    return factors[factors.length - 1];\n}\n\
    </code>\n<|/ a tags=javascript |>\n<| c |>\nI'm getting an error in Node when\
    \ I run your code. I'm sure it's my fault, but I don't have the knowledge to debug\
    \ it myself. Can you try again?\n<|/ c |>\n<| c |>\nI added a version with your\
    \ original code and my own implementation. I think there is a problem with the\
    \ algorithm you chose. Your code doesn't return the correct answer. As I've pointed\
    \ out in the comments above.\n<|/ c |>\n<| c |>\nI believe your algorithm is right.\
    \ Look at the last line of my code and my examples. If you look at the last line,\
    \ you see that my code does return 29. Your algorithm returns the same 29 for\
    \ both inputs. Your algorithm also doesn't work for inputs greater than 20!\n\
    <|/ c |>\n<| c |>\nI added an example in my answer, and my own implementation\
    \ also returns 29 for input greater than 20. I've been using it to test my code\
    \ before posting it, so I believe the error is in the code you wrote that causes\
    \ the error, not the algorithm you chose. If you try the algorithm I chose, you\
    \ get the same output. Can you provide me with a link where I can run this code\
    \ and see it return 29? I probably know where the problem is, but I still want\
    \ to debug it myself so I can figure out where it is.\n<|/ c |>\n<| c |>\nSure.\
    \ https://jsfiddle.net/L9kL0uLc/\n<|/ c |>\n<| a dscore=3 tags=javascript |>\n\
    You could split the numbers into groups of five and then take the highest prime\
    \ factor of the sum of the parts.\n\n<code>", "    // https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-javascript\n\
    \    var sieve = new Sieve(n + 1);\n    var result = sieve.largestPrimeFactor;\n\
    \    sieve.factors.forEach(function(x){\n        sieve.push(x / result)\n    })\n\
    \    return result;\n}", "\tif (n == 1) return 2;\n\tif (n == 2) return 3;\n\t\
    if (n % 2 == 0) return (n-1);\n\tvar max_possible = 3*n + 1;\n\tvar candidate\
    \ = 3;\n\twhile (true) {\n\t\tif (candidate % 2 == 0) {\n\t\t\tif ((candidate\
    \ - 1) % (candidate-2) == 0) break;\n\t\t\tcandidate--;\n\t\t}\n\t\telse {\n\t\
    \t\tif ((candidate + 1) % (candidate-1) == 0) break;\n\t\t\tcandidate++;\n\t\t\
    }\n\t\tif (candidate > max_possible) return n;\n\t\tn--;\n\t}\n\treturn candidate;\n\
    }\n", "  if(n<=1)return 1;\n  var factors = primeFactors(n);\n  for(var i=0;i<factors.length;i++){\n\
    \    if(factors[i]==1)return factors[i];\n  }\n  return n;\n}\n", "  if(n<2||n%1!==0)return\
    \ 1;\n  var q=Math.floor(n/2)+Math.ceil(n/4)+1;\n  while(!q&1)q--;\n  for(var\
    \ r=2;r<=q;r++){\n    if(!n%r)return r;\n  }\n  return q;\n}\n\nexports.is_prime=function(n){return\
    \ n%2==0;};\n\nexports.is_probably_prime=function(n){\n  var m=Math.sqrt(n);\n\
    \  for(var i=2;i<=m;i++){\n    if(!exports.is_prime(i))return false;\n    if(n%i!==0)return\
    \ false;\n  }\n  return true;\n};\n\n},{}],7:[function(require,module,exports){\n\
    'use strict';\n\nvar BN = require('bn.js');\nvar inherits = require('inherits');\n\
    \nvar asn1 = require('../../asn1');\nvar base = asn1.base;\nvar bignum = asn1.bignum;\n",
  "  if(n == 1){ return 1; }\n  var root = Math.sqrt(n);\n  if(n % root == 0){ return\
    \ root; }\n  var i = true;\n  while(root*root <= n){\n    root = Math.sqrt(root);\n\
    \    if(i){\n      i = (n % root == 0) ? false : true;\n    }\n    n = Math.floor(n\
    \ / root);\n  }\n  return root;\n}\n", "  var factor = 2;\n  var maxFactor = n;\n\
    \  while (factor <= maxFactor){\n    var isPrime = true; \n    for (var i = 2;\
    \ i <= Math.floor(Math.sqrt(n)); i++){\n      if (n % i == 0) isPrime = false;\n\
    \    }\n    if (isPrime) break;\n    factor++;\n    maxFactor = factor;\n  }\n\
    \  return factor;\n}\n", "  if (n === 1){return n;}\n  if (n%2 === 0){return n;}\n\
    \  var m = n%2?n/2:Math.floor(Math.sqrt(n));\n  return m*largest_prime_factor(m);\n\
    }\n", "\tvar factor = 2;\n\tvar test = 2;\n\twhile(n > 1){\n\t\tif(n % test ==\
    \ 0){\n\t\t\tfactor += test;\n\t\t}\n\t\tn /= test;\n\t\t++test;\n\t}\n\treturn\
    \ factor;\n}\n", "    var factors = [];\n    for (var i = 2; primes[i]*i < n;\
    \ i++){\n        factors.push(primes[i]);\n    }\n    factors.sort(function(a,\
    \ b){\n        return factors.length-a-b\n    })\n    return factors[factors.length-1];\n\
    }\n", "    var factors = [];\n    for (var i = 0; i <= 32; i++) {\n        var\
    \ pow = 2;\n        while (i < n) {\n            if (n % i == 0) {\n         \
    \       factors.push(i);\n                n = n / i;\n                break;\n\
    \            } else if (n % (i+1) === 0) {\n                pow++;\n         \
    \       n = n / pow;\n                break;\n            } else {\n         \
    \       i++;\n            }\n        }\n    }\n    return factors.length;\n}\n",
  "    for(var i = 2; i <= n; i *= i){\n        if(n % i == 0)\n            return\
    \ i;\n    }\n    return n;\n}\n", "  if(n > 1) return n; //If n is a prime, then\
    \ n is the largest prime factor.\n  for(let i = 3; i * i <= n; i += 2) //Iterate\
    \ from 3 to square root of n.\n    if(n%i == 0){\n      return i; //If n is a\
    \ prime factor of n, return it.\n    }\n  return n; //Otherwise, return the original\
    \ value of n.\n}\n", "    // Leave out factors larger than two or smaller than\
    \ one.\n    var out = 2;\n    var i = 2;\n\n    // Check factors up to sqrt(n).\n\
    \    while(out*out <= n){\n        if(n % i == 0){\n            out = i;\n   \
    \     }\n        ++i;\n    }\n    return out;\n}\n", "  if(n<2) return n;\n  var\
    \ factors=[],   //The prime factors of n are a subset of {2,3,...n-1}.\n     \
    \ m=Math.sqrt(n);\n  for(var t=2;t<=m;t++){\n    if(t*t<=n){\n      factors.push(t);\n\
    \    }\n  }\n  factors.push(n);\n  var highest_factor=factors.pop();\n  if(factors.length>0){\n\
    \    var lcp=greatest_common_divisor(factors);\n    if(highest_factor*lcp>=n)\
    \ return lcp ? lcp : n;\n  }\n  return highest_factor;\n}\n</code>\n<|/ a |>\n\
    <| a dscore=3 |>\nA quick improvement on Jason's answer is to return n-1 rather\
    \ than n if all factors are greater than or equal to n. \n<code>", "    for(var\
    \ i = 2; i <= Math.sqrt(n); i++){\n        if(n % i == 0){\n            return\
    \ i;\n        }\n    }\n    return n; //n must be a prime factor\n}\n\n", "  \
    \  \n    \n    var next_num;\n    var is_divisible_by_prime = false;\n    \n \
    \   for(var i=2;i<n;i++){\n        \n        is_divisible_by_prime = true;\n \
    \       \n        next_num = n;\n        \n        \n        while(next_num >\
    \ 1){\n            \n            if(next_num % i == 0){\n                is_divisible_by_prime\
    \ = false;\n                break;\n            }\n            \n            next_num\
    \ = next_num/i;\n            \n        }\n        \n        if(is_divisible_by_prime\
    \ == true){\n            \n            return i;\n        }\n    }\n    \n}\n",
  "\tvar factor=1;\n\tfor (var i=1; i*i<=n; i++){\n\t\tif (n%i===0){\n\t\t\tfactor=i;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn factor;\n}\n", "    if(n < 2){\n        return\
    \ n;\n    }\n    var m = getPrimeFactors(n);\n    return m ? Math.max(m, largest_prime_factor(n-(m-1)))\
    \ : 0;\n}\n", "    var test = 2;\n    var max = 2;\n    while (n > 1) {\n    \
    \    if (n % test == 0) max = test;\n        n /= test;\n        test++;\n   \
    \ }\n    return max;\n}\n\n", "  var factors = [];\n  for(var i=2; i<=Math.sqrt(n);\
    \ ++i){\n    if(n % i == 0){\n      factors.push(i);\n      while(n % i == 0){\n\
    \        n /= i;\n      }\n    }\n  }\n  if(n > 1)factors.push(n);\n  return factors.length;\n\
    }\n", "    var factors = [];\n    for (var i = 2; i < n; i++){\n        factors.push(i);\n\
    \        for (var j = 1; i * j <= n; j++){\n            if (n % i == 0){\n   \
    \             factors.push(i);\n                break;\n            }\n      \
    \  }\n    }\n    return factors[factors.length-1];\n}\n", "  if (n == 1){\n  \
    \  return 2\n  }\n  // Trial division using Sieve of Eratosthenes (search for\
    \ number > n)\n  var limit = Math.sqrt(n);\n  var m = limit;\n  var sqrt_n = Math.sqrt(n);\n\
    \  var primes = [2,3,5,7,11,13,17];\n  var result = 0;\n  var p = primes.length;\n\
    \  while(m>1){\n    if (primes[p-1] == sqrt_n){\n      p--;\n    }\n    m--;\n\
    \    if (p == -1){\n      p+= 2;\n      result= primes[p-1];\n      break;\n \
    \   }\n  }\n  return result;\n}\n", "    var factor = 2;\n    while( n > 1 ){\n\
    \        if( n % factor === 0 ){\n            n /= factor;\n        }\n      \
    \  else if( n < 2 ){\n            return factor;\n        }\n        factor++;\n\
    \    }\n    return n;\n}\n\n\nvar Sieve = (function(){\n    function sieve (max){\n\
    \        var i, primes = [], num = 2;\n\n        for( i = 2; i <= max; i++ ){\n\
    \            if( num % i === 0 ){ continue; }\n            primes.push(i);\n \
    \           num = i*i;\n        }\n        return primes;\n    }\n\n    return\
    \ {\n        factor: factor,\n        primeFactor: primeFactor,\n        isPrime:\
    \ isPrime,\n        smallPrimeFactor: smallPrimeFactor,\n        bigPrimeFactor:\
    \ bigPrimeFactor,\n        primes: sieve\n    };\n})();\n", "  if(n<=1){\n   \
    \ return n;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    var factor=Math.floor(n\
    \ / i);\n    if(factor > 1 && factor*factor <= n){\n      return factor;\n   \
    \ }\n  }\n  return 1;\n}\n", "  if(n===0) return 1;\n  if(n==1 || n%2===0) return\
    \ 2;\n  var i=3;\n  for(;i*i<n;i+=2) if(n%i===0) return i;\n  return n;\n}\n",
  "  var largest = 1\n  for(var i = 2; primes[i] <= n; i++){\n    if(n % i == 0){\n\
    \      largest = i\n    }\n  }\n  return largest\n}\n", "  for(var i = 2; i <\
    \ n; i++){\n    if(n % i == 0) return i;\n  }\n  return n;\n}\n\n", "  var i =\
    \ 2;\n  var c = 0; //Count exponents of 2 up to n\n  while(c*i < n){\n    c =\
    \ c * i;\n    i++;\n  }\n  //Compare exponent counts to n\n  if(c>n) return null;\n\
    \  var m = n >> 1;\n  while(m){\n    m >>= 1;\n    i--;\n  }\n  return i;\n}\n",
  "  if(n == 1)return 2;\n  if(n%2 == 0) return n/2;\n  for(let i=3; i<=Math.sqrt(n);\
    \ i+=2){\n    if(n%i==0) return i;\n  }\n  return n;\n}\n", "  var i = 1, s =\
    \ n;\n  while (s % i === 0) i *= s;\n  s = Math.sqrt(s);\n  while (s % 5 === 0)\
    \ {\n    s /= 5;\n    i++;\n  }\n  return i;\n}\n", "    var limit = Math.sqrt(n);\n\
    \    var i = 2;\n    while(i <= limit){\n        if(n % i == 0){\n           \
    \ limit = i;\n        }\n        i += 2;\n    }\n    return limit;\n}", "    var\
    \ max_value = Math.sqrt(n),\n        counter = 1,\n        factor,\n        largest_pf\
    \ = 1;\n    while(counter <= max_value){\n        factor = getFactor(n,counter);\n\
    \        counter += 1;\n        largest_pf = Math.max(largest_pf,factor);\n  \
    \  }\n    return largest_pf;\n}", "  if(n == 1) return 2;\n  var sqrtn = Math.sqrt(n);\n\
    \  if((n % 2) == 0) return 3;\n  if((n % 3) == 0) return 4;\n  while(true){\n\
    \    var m = Math.floor((n-1)/2);\n    if((n % m) == 0) return m;\n    if((m*n)\
    \ % n == 0) return n; \n    if(sqrtn%n == 0) return n;\n    n--;\n  }\n}\nvar\
    \ primes = {};\nprimes[2] = 2;\nprimes[3] = 2;\nprimes[5] = 2;\nprimes[11] = 2;\n\
    primes[13] = 2;\nprimes[17] = 2;\nprimes[19] = 2;\nprimes[23] = 2;\nprimes[29]\
    \ = 2;\nprimes[39] = 2;\nprimes[47] = 2;\nprimes[59] = 2;\nprimes[61] = 2;\nprimes[67]\
    \ = 2;\nprimes[71] = 2;\nprimes[73] = 2;\nprimes[79] = 2;\nprimes[83] = 2;\nprimes[89]\
    \ = 2;\nprimes[97] = 2;", "    var factor = 2;\n    for(var i = 2; i < n; i++){\n\
    \        if(n % i == 0) factor += i;\n    }\n    return factor;\n}\n", "  //Factor\
    \ the number to its prime factors.\n  var factors = []\n  for(var i = 2; i <=\
    \ Math.sqrt(n); i++) {\n    while(n % i == 0) {\n      factors.push(i)\n     \
    \ n /= i\n    }\n  }\n\n  //Find the prime factors of the number.\n  factors.push(n)\n\
    \n  //Return the largest one.\n  return Math.max.apply(Math, factors)\n}\n", " \
    \ var factors = [];\n  for (var i = 2; i <= n; i++){\n    while (n % i == 0){\n\
    \      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors.length ?\
    \ factors[factors.length - 1] : 1;\n}\n", "  var sieve = new Array();\n  for(var\
    \ i = 2; i * i <= n; i += 2){\n    sieve[i*i-3] = i; //Keep track of each composite\
    \ number that is a factor of n.\n  }\n  for(var i = 2; n >= 2; i *= 2){\n    var\
    \ l = n;\n    while(l*l < sieve.length && sieve[l] === 0){\n      l++;\n    }\n\
    \    if(l > n){\n      return i;\n    }\n  }\n  return -1;\n}\n", "  if(n<=1)return\
    \ 1;\n  for(var i=2; i<=Math.floor(Math.sqrt(n)); i++){\n    if(n % i == 0){\n\
    \      n = n / i;\n      return i;\n    }\n  }\n  return 1;\n}\n", "\tif(n ==\
    \ 1){\n\t\treturn 1;\n\t}\n\tvar i = 2; \n\twhile(i <= n/2){\n\t\tif(n%i == 0){\n\
    \t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\n\n", "    var max,\n     \
    \   divisor,\n        square;\n\n    n = Math.abs(n);\n    max = Math.sqrt(n),\n\
    \    square = n > 1 ? Math.pow(2,n) : 1;\n    for(divisor = max;\n        divisor\
    \ > 1 && isPrime(divisor);\n        divisor--){\n        max = divisor;\n    }\n\
    \    return max;\n}\n", "    // See http://codegolf.stackexchange.com/questions/4312/largest_prime_factor\n\
    \    var factors = [];\n    var largest = 2;\n    while (n > 1){\n        if (n\
    \ % 2 === 0){\n            factors.push(2);\n        }\n        for (var i = 3;\
    \ i <= Math.sqrt(n); i += 2){\n            if (n % i === 0){\n               \
    \ factors.push(i);\n                break;\n            }\n        }\n       \
    \ if (n > 1){\n            var q = Math.sqrt(n);\n            while (n % q ===\
    \ 0){\n                factors.push(q);\n                n /= q;\n           \
    \ }\n        }\n        largest = factors.length ? Math.max.apply(Math, factors)\
    \ : n;\n    }\n    return largest;\n}\n", "  if(n===1) return 2;\n  if(n===2)\
    \ return 3;\n  if(n%2===0) return n>>1;\n  if(n%3===0) return n>>2;\n  var max_root\
    \ = Math.sqrt(n);\n  while(max_root%2===0){\n    max_root = max_root>>1;\n  }\n\
    \  return max_root>>1;\n}\n", "  if(n==1)\n    return 2;\n  if(n==2)\n    return\
    \ 3;\n  if(n<2)\n    return null;\n  if(n%2==0)\n    return 2;\n  var sqrt=Math.sqrt(n);\n\
    \  var m=Math.ceil(sqrt);\n  var p=2;\n  if(m*m<=n)\n    return null;\n  for(;p*p<=n;p+=2)\n\
    \    if(n % p==0)\n      return p;\n  return null;\n}\n", "    var test = 2;\n\
    \    while (test * test <= n){\n        test = test + 1;\n    }\n    return test;\n\
    }\n\nvar primes_numbers = [\n    2, 3, 5, 7, 11, 13, 17, 19\n];\n", "  if(n <\
    \ 2) return 2;\n  if(n%2===0) return 0;\n  var q = 2;\n  var m = n;\n  while(m\
    \ && m%2===0) q+=2;\n  while(n > 1 && n % m===0) n /= m;\n  return q;\n}\n", "\t\
    // This implementation is based on:\n\t// http://primes.utm.edu/prove/prove2_3.html\n\
    \t\n\t// Check factors up to sqrt(n)\n\tvar max_fact = Math.sqrt(n);\n\t\n\t//\
    \ Don't need to check for factors larger than sqrt(n)\n\tif(max_fact < 2){\n\t\
    \treturn 1;\n\t}\n\t\n\t// Don't need to check factors that don't divide n\n\t\
    if(max_fact < n){\n\t\treturn 2;\n\t}\n\t\n\tfor(var i = 2; i <= max_fact; i++){\n\
    \t\tif(n % i == 0){\n\t\t\treturn i;\n\t\t}\n\t}\n\t\n\treturn n;\n}\n", "  var\
    \ factors = [];\n  for(var i = 2; i < n; i++){\n    if(n % i == 0) continue;\n\
    \    var q = Math.floor(Math.sqrt(n) / i);\n    factors.push(q);\n  }\n  factors.sort(function(a,b){return\
    \ b-a;});\n  return factors[factors.length-1];\n}\n</script>\n<script>\n", " \
    \ var i=2,res=1;\n  while(i*i<=n){\n    if(prime[i++]!==0){\n      res=i;\n  \
    \    break;\n    }\n  }\n  return res;\n}\n", "  var factor = [];\n  for(var i\
    \ = 0; i < n; i++){\n    for(var j = i + i; j < n; j++){\n      if(n % j == 0){\n\
    \        factor.push(j);\n        break;\n      }\n    }\n  }\n  return factor;\n\
    }\n", "\tvar max_num = Math.sqrt(n);\n\tvar num_factors = 0;\n\tvar factors =\
    \ [];\n\t\n\tfor( var i = 3; i<= max_num; i+=2){\n\t\tif( n % i == 0){\n\t\t\t\
    factors.push(i);\n\t\t\tnum_factors++;\n\t\t}\n\t\t\n\t\tif(num_factors == 3){\n\
    \t\t\treturn i;\n\t\t}\n\t}\n\t\n\treturn n;\n}\n", "  if ( n === 1 ){ return\
    \ 1; }\n  if ( n === 2 ){ return 2; }\n\n  var max_i = Math.sqrt(n),\n      max_j\
    \ = Math.floor( max_i ),\n      i_factors = [],\n      j_factors = [],\n     \
    \ factor,\n      i2,\n      j2;\n\n  //Test up to square root of n\n  for( i2\
    \ = 1; i2 <= max_i; i2 += 1 ){\n    if( n % i2 === 0 ){ continue; }\n    factor\
    \ = Math.floor( n / i2 );\n    i_factors.push( i2 );\n    j_factors.push( factor\
    \ );\n\n    //Test down to n-1\n    for(j2 = max_j; j2 <= i; j2++ ){\n      if(\
    \ n % j2 === 0 ){ continue; }\n      if( if( j2 + 1 > max_j ){ j2 = max_j; }\n\
    \      if( j2 + 1 === max_j && i%j2 === 0 ){ j2++; }\n      factor = Math.floor(\
    \ n / j2 );\n      if( factor % 2 ){ i_factors.push( j2 ); j_factors.push( factor\
    \ ); }\n    }\n  }\n\n  //Sort factors\n  i_factors.sort();\n  j_factors.sort();\n\
    \n  //Find the largest factor\n  for(i2 = 0; i2 < i_factors.length; i2++ ){\n\
    \    if( i_factors[i2] !== j_factors[-i2] ){ return i_factors[i2] * j_factors[-i2];\
    \ }\n  }\n\n  //If we reached the end, the factor was either 1 or n. Check to\
    \ see if it's been raised to an odd number.\n  if( i_factors.length === 0 ){ return\
    \ n % 2 === 1 ? 1 : n; }\n  if( i_factors.length === 1 ){ return i_factors[0];\
    \ }\n  if( n % 2 === 1 ){ return 2; }\n\n  //Otherwise, there's a bug somewhere.\
    \ Factor has to be raised to a multiple of i.\n  while( i_factors.length > 0 ){\n\
    \    i_factors.pop();\n    factor = Math.floor( n / i_factors[0] );\n    if( factor\
    \ % 2 ){ return i_factors[0] * factor; }\n  }\n\n  return n;\n}", "  if(n == 0\
    \ || n == 1){\n    return 1;\n  }\n  if(n < 2 || n % 2 == 0){\n    return 1;\n\
    \  }\n  var max_factor = 2;\n  for(var i = 0; i < Math.floor(Math.sqrt(n));i++){\n\
    \    if(n % i == 0){\n      max_factor = i;\n      break;\n    }\n  }\n  return\
    \ max_factor;\n}\n", "  //TODO: fix this so it works with negative numbers.\n\
    \  if(n<2){\n    throw new Error('n<2 doesn\\'t work')\n  }\n  var max = 2, prime=3;\n\
    \  while(prime*prime<=n){\n    if(n % prime==0){\n      max = prime;\n    }\n\
    \    prime++;\n  }\n  return max;\n}", "    var x = 0,\n        out = 2;\n   \
    \     while(x<n){\n            x++;\n            while(!(x%out)){\n          \
    \      x++;\n                out++;\n            }\n        }\n        return\
    \ x;\n}", "  var found;\n  var factor = 2;\n  while (n > 2 && factor <= Math.sqrt(n))\
    \ {\n    if (n % factor === 0) {\n      n /= factor;\n      found = true;\n  \
    \  }\n    else if (n % (factor * factor) === 0) {\n      n = (n / factor) | 0;\n\
    \      found = true;\n    }\n    factor++;\n  }\n  return found ? factor : 1;\n\
    }\n", "    // Factor out all non-prime factors smaller than n.\n    var factor\
    \ = n/n;\n    for(var i = 2; i <= Math.floor(n/factor); i++){\n        if(n %\
    \ i == 0){\n            factor = n / i;\n            while(n > factor){\n    \
    \            n /= factor;\n                factor = n / i;\n            }\n  \
    \          break;\n        }\n    }\n    return factor;\n}\n", "    if(n === 1)\
    \ return 2\n    if(n === 2) return 3\n    if(n % 2 == 0) return n == 2\n    if(n\
    \ % 3 == 0) return n == 3\n    var nums = []\n    for(var i = 5; i * i <= n; i\
    \ += 6){\n        if(n % i == 0) nums.push(i)\n    }\n    for(var i = 8; i * i\
    \ <= n; i += 6){\n        if(n % i == 0) nums.push(i)\n    }\n    var maxNum =\
    \ nums[nums.length - 1]\n    for(var i = 0; i < nums.length; i++){\n        if(nums[i]\
    \ > maxNum) maxNum = nums[i]\n    }\n    return maxNum\n}\n", "    for(var i =\
    \ 2; i < n; i++){\n        if(n % i == 0){\n            return i;\n        }\n\
    \    }\n    return 1;\n}\n", "    \n    // If n is greater than 1, then it must\
    \ be a prime\n    if (n >= 2){\n    \n        // If n is odd then n / 2 is the\
    \ largest prime factor of n\n        if (n % 2 == 1){\n        \n            //\
    \ If n is odd, then n / 2 has no prime factors\n            if (n % 2 == 0){\n\
    \                return n;\n            }\n        \n            // If n is even,\
    \ then n / 2 is one prime factor\n            else{\n                return n\
    \ / 2;\n            }\n        }\n        \n        // If n is even, then n /\
    \ 2 must have exactly 1 as its prime factor.\n        else if (n == 2){\n    \
    \        return 1;\n        }\n        \n        // If n is odd, then n / 2 is\
    \ two prime factors\n        else{\n            return n / 2;\n        }\n   \
    \ }\n    \n    // If n is 1, then there is no prime factor\n    else {\n     \
    \   return 1;\n    }\n}\n", "    var i=2,p,f=2;\n    while(i<n){\n        p =\
    \ nextprime(i);\n        if(f*p < n) f = p;\n        else f = 1;\n        i++;\n\
    \    }\n    return f;\n}\n", "    if(n < 2){\n        return 2;\n    }\n    \n\
    \    //Get factors of n\n    var p = factor(n);\n    var num = 1;\n    for(var\
    \ i = 2; i <= p; i++){\n        if(n%i == 0){\n            num += i;\n       \
    \ }\n    }\n    return num;\n}\n", "    var i = 2\n    while(1){\n        if(n\
    \ % i == 0) return i\n        if(i > n) return n\n        i = i + 1\n    }\n}\n",
  "\tvar factors = [];\n\tfor(var i = 2; i < n; i++){\n\t\tfactors.push(i);\n\t\t\
    while(n % i == 0){\n\t\t\tfactors.push(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\treturn\
    \ factors[factors.length-1];\n}\n", "  if(n<1) return 0;\n  if(n==1) return 1;\n\
    \  if(n<3) return 2;\n  for(var i=3;i*i<n;i+=2) {\n    if(n % i == 0) return i;\n\
    \  }\n  return n;\n}\n", "  // We use the Fermat primality test (Fermat's little\
    \ theorem) to find a\n  // factor when n >= 3.  Since Fermat's little theorem\
    \ states that a\n  // composite number must have a divisor, we will assume that\
    \ a prime\n  // factor is sufficient if it exists.  This turns out to be the\n\
    \  // case for our purposes.\n  //\n  // The Fermat primality test says that all\
    \ prime factors of n are\n  // integers that divide n.  If n is such a composite\
    \ number, then n is\n  // itself a factor of some larger composite number.  For\
    \ example, if\n  // n = 13, then 13^2 = 8, and 8^2 = 26.  Since 26 is larger than\
    \ 8, the\n  // number is not prime.\n  if (n >= 3){\n    for (var i = 2; i*i <=\
    \ n; i += 2){\n      if (n % i == 0){\n        return i;\n      }\n    }\n  }\n\
    \n  // Otherwise, we must be dealing with a composite number.\n  return 1;\n}\n",
  "\tif(n<=1){return n}\n\tif(n===2){return 1}\n\tvar m = n%2===0?2:3\n\tfor(var i\
    \ = m;i<n;i+=2){\n\t\tfor(var j = 0;j<i;j++){\n\t\t\tif(n%i===0){\n\t\t\t\treturn\
    \ i+j\n\t\t\t}\n\t\t}\n\t}\n\treturn i\n}\n\n", "\t// http://stackoverflow.com/questions/7616461/implementing-javascript-algorithms-for-prime-numbers#7616608\n\
    \    var candidate = 2;\n    var maxCandidate = Math.sqrt(n);\n    while(n%candidate===0\
    \ && candidate<=maxCandidate){\n    \tcandidate++;\n    }\n    return candidate;\n\
    }\n<|/ file ext=.js source=github |>", "  if(n < 2){\n    return 2;\n  }\n  let\
    \ i = 2;\n  while(i < Math.sqrt(n)){\n    while(n % i == 0){\n      i = i + 2;\n\
    \    }\n    n = n / i;\n  }\n  return i;\n}\n", "\tif(n<=1){\n\t\tthrow \"Cannot\
    \ find a factor of \"+n+\"!\"\n\t}\n\tif(is_prime(n)){\n\t\treturn n\n\t}\n\t\
    var lfp = 1\n\twhile(n%lfp==0){\n\t\tlfp = lfp+1\n\t}\n\twhile(n%lfp!=0){\n\t\t\
    lfp = lfp-1\n\t}\n\treturn lfp\n}\n", "  var i, j, factor = 2;\n  for(i = 2; i\
    \ <= n; i++){\n    for(j = 2; j < i; j++){\n      if(n % i == 0){\n        factor\
    \ = i;\n        break;\n      }\n    }\n    if(factor!==2) break;\n  }\n  return\
    \ factor;\n}\n", "    var result = 1;\n    while(n > 1){\n        if(n % 2 ==\
    \ 0)\n            n = 3*n/2;\n        else\n            n = 3*(n-1)/2;\n     \
    \   result += 1;\n    }\n    return result;\n}\n", "    for(var i = 2; i*i <=\
    \ n; i++){\n        var f = Math.floor(Math.sqrt(n) / i);\n        if(n % i ==\
    \ 0){\n            return f;\n        }\n    }\n    return n;\n}\n", "  var max_num\
    \ = Math.sqrt(n), i = 1;\n  while(i * i <= max_num){\n    if(n % i == 0){\n  \
    \    return i;\n    }\n    ++i;\n  }\n  if(n == 1){\n    return 2;\n  }\n  return\
    \ 1;\n}\n", "    for(var i = 2; i <= Math.sqrt(n); i++){\n        if(n % i ===\
    \ 0) return i;\n    }\n    return n;\n}\n<|/ file source=github dstars=1 |>\n\
    var __extends = (this && this.__extends) || function (d, b) {\n    for (var p\
    \ in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor\
    \ = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype,\
    \ new __());\n};\nvar Math_1 = require(\"../../math/Math\");\nvar ComplexRectangle_1\
    \ = require(\"../../geom/complex/ComplexRectangle\");\nvar Quadrilateral = (function\
    \ (_super) {\n    __extends(Quadrilateral, _super);\n    function Quadrilateral(sideA,\
    \ sideB, sideC, sideD) {\n        _super.call(this, sideA, sideB, sideC, sideD);\n\
    \        this.sideA = sideA;\n        this.sideB = sideB;\n        this.sideC\
    \ = sideC;\n        this.sideD = sideD;\n    }\n    Quadrilateral.prototype.copy\
    \ = function () {\n        return new Quadrilateral(this.sideA, this.sideB, this.sideC,\
    \ this.sideD);\n    };\n    Quadrilateral.prototype.clone = function () {\n  \
    \      return new Quadrilateral(this.sideA, this.sideB, this.sideC, this.sideD).copy();\n\
    \    };\n    Quadrilateral.prototype.toString = function () {\n        return\
    \ \"Quadrilateral (sideA=\" + this.sideA + \", sideB=\" + this.sideB + \", sideC=\"\
    \ + this.sideC + \", sideD=\" + this.sideD + \")\";\n    };\n    Quadrilateral.prototype.getSideA\
    \ = function () {\n        return this.sideA;\n    };\n    Quadrilateral.prototype.setSideA\
    \ = function (sideA) {\n        this.sideA = sideA;\n    };\n    Quadrilateral.prototype.getSideB\
    \ = function () {\n        return this.sideB;\n    };\n    Quadrilateral.prototype.setSideB\
    \ = function (sideB) {\n        this.sideB = sideB;\n    };\n    Quadrilateral.prototype.getSideC\
    \ = function () {\n        return this.sideC;\n    };\n    Quadrilateral.prototype.setSideC\
    \ = function (sideC) {\n        this.sideC = sideC;\n    };\n    Quadrilateral.prototype.getSideD\
    \ = function () {\n        return this.sideD;\n    };\n    Quadrilateral.prototype.setSideD\
    \ = function (sideD) {\n        this.sideD = sideD;\n    };\n    Quadrilateral.prototype.equals\
    \ = function (quadrilateral) {\n        return this.sideA === quadrilateral.sideA\
    \ && this.sideB === quadrilateral.sideB && this.sideC === quadrilateral.side",
  "  if(n<=1){\n    return 1;\n  }\n  if(n===2){\n    return 2;\n  }\n  var d = Math.sqrt(n);\n\
    \  var m = fermat_recovery_sqrt(n);\n  for(var i=0;i<d;i++){\n    var a = Math.floor(m/Math.pow(2,i));\n\
    \    m = Math.floor((n-m)/Math.pow(2,i));\n    if(m*Math.pow(2,i) === n){\n  \
    \    return Math.min(a,n);\n    }\n  }\n  return n;\n}\n", "  var factor = 2;\n\
    \  while (factor * factor <= n){\n    factor++;\n  }\n  return factor;\n}\n",
  "  for(var i = 2; i <= Math.sqrt(n); ++i){\n    if(n % i == 0){\n      return i;\n\
    \    }\n  }\n  return n;\n}\n", "\tvar factors = [];\n\t\n\t// Sieve of Eratosthenes\
    \ (check Wikipedia)\n\tvar m = Math.sqrt(n);\n\tvar i = 3;\n\twhile(i <= m){\n\
    \t\tif (n % i == 0){\n\t\t\tfactors.push(i);\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\
    \t}\n\t\n\tfactors.push(n);\n\t\n\treturn factors.length ? factors[factors.length-1]\
    \ : 0;\n}\n", "    \n    var i,\n        j,\n        factors = [];\n    \n   \
    \ //Skip checking for 0\n    if (n === 1) return 1;\n    \n    //Skip checking\
    \ if prime\n    if (n === 2) return 2;\n    \n    //Test all odd numbers up to\
    \ sqrt(n)\n    for (i = 3; i <= Math.sqrt(n); i += 2){\n        if (n % i ===\
    \ 0) return i;\n    }\n    \n    //If n is a prime, return it\n    if (n === 3)\
    \ return 3;\n    \n    //If n is smaller than the smallest prime factor, return\
    \ it\n    if (n < 2) return 2;\n    \n    //Search all prime factors\n    for\
    \ (i = 2; i <= n; i += 1) {\n        if (n % i === 0) {\n            //If the\
    \ exponent of 2 is a multiple of the prime factor, remove it\n            if (n\
    \ % (i * i) === 0) factors.push(i);\n            //If not, skip it\n         \
    \   else continue;\n        }\n    }\n    \n    //Check if a prime factor has\
    \ been found\n    if (factors.length === 0) return 2;\n    \n    //Return the\
    \ largest prime factor found\n    return Math.max.apply(null, factors);\n}\n",
  "  n = Number(n);\n  if(isNaN(n) || !isFinite(n) || n <= 1) return null;\n  var\
    \ max_prime_factor = 1;\n  var i = 2; // skip even numbers\n  while (n % i ==\
    \ 0) ++i;\n  var n_i = new Array(i+1);\n  n_i[0] = n;\n  for(var j=1; j <= i;\
    \ ++j){\n    n_i[j] = n % j;\n    if(!n_i[j]) break; // skip composites\n  }\n\
    \  n_i.length = i+1;\n  for(var j=n_i.length; j > 0; --j){\n    if(j % 2 == 0)\
    \ return j; // odd number of factors\n    max_prime_factor = Math.max(max_prime_factor,\
    \ j);\n  }\n  return max_prime_factor;\n}\nMath.log10 = Math.log10 || function(x)\
    \ {\n  return Math.log(x) / Math.LN10;\n};\nMath.log2 = Math.log2 || function(x)\
    \ {\n  return Math.log(x) / Math.LN2;\n};\nMath.expm1 = Math.expm1 || function(x)\
    \ {\n  return Math.exp(x) - 1;\n};\nMath.cosh = Math.cosh || function(x) {\n \
    \ return (Math.exp(x) + Math.exp(-x)) / 2;\n};\nMath.sinh = Math.sinh || function(x)\
    \ {\n  return (Math.exp(x) - Math.exp(-x)) / 2;\n};\nMath.tanh = function(x) {\n\
    \  var exp = Math.exp(x);\n  var exp2 = Math.exp(x);\n  return (exp + exp2) /\
    \ 2;\n};\nMath.asinh = Math.asinh || function(x) {\n  return Math.log(x + Math.sqrt(x*x\
    \ + 1));\n};\nMath.acosh = Math.acosh || function(x) {\n  return Math.log(x +\
    \ Math.sqrt(x*x - 1));\n};\nMath.atanh = Math.atanh || function(x) {\n  return\
    \ Math.log((1 + x) / (1 - x)) / 2;\n};\nMath.trunc = Math.trunc || function(x)\
    \ {\n  return x < 0 ? Math.ceil(x) : Math.floor(x);\n};", "  if(n == 1) return\
    \ n;\n  for(var i = 2; i < n; i++){\n    if(n % i == 0) return i;\n  }\n  return\
    \ n;\n}\n", "\tvar max_factor = -Infinity;\n\tvar max_count = 0;\n\tvar factor;\n\
    \tfor (var i = 0; i < n; i++){\n\t\tfactor = Math.floor(n/Math.pow(2, i));\n\t\
    \tif (factor > max_factor){\n\t\t\tmax_factor = factor;\n\t\t\tmax_count = i;\n\
    \t\t}\n\t}\n\treturn max_count;\n}\n", "  var sqrtn = Math.sqrt(n);\n  var prime\
    \ = 2;\n  while (prime*prime <= n){\n    if (n%prime===0){\n      return prime;\n\
    \    }\n    prime+=2;\n  }\n  return prime;\n}\n", "  var sqrtN = Math.sqrt(n);\n\
    \  var primes = [];\n  var isPrime = true;\n  for (var i = 2; i <= sqrtN; i++)\
    \ {\n    if (isPrime) {\n      for (var j = 2; j < i; j++) {\n        if (isPrime)\
    \ {\n          if (n % j === 0) {\n            primes.push(j);\n          }\n\
    \          if (j > i) {\n            break;\n          }\n        } else {\n \
    \         if (n % i === 0) {\n            primes.push(i);\n          }\n     \
    \     if (i > j) {\n            break;\n          }\n        }\n      }\n    }\n\
    \    if (isPrime) {\n      break;\n    }\n    isPrime = !isPrime;\n  }\n  return\
    \ primes[primes.length-1];\n}\n", "  var factor = 2;\n  while(factor < n){\n \
    \   if(n % factor){\n      n /= factor;\n    }else{\n      return factor;\n  \
    \  }\n    factor++;\n  }\n  return factor;\n}\n\n},{}],29:[function(require,module,exports){",
  "  if(n != 1) return null\n  n = Math.abs(n)\n  for(var i=2;i*i<n;i++){\n    if(n\
    \ % i == 0){\n      return null\n    }\n  }\n  return n\n}\n", "  n = Math.ceil(n)\n\
    \  if(n < 2){\n    return 2\n  }\n  var sqrtn = Math.sqrt(n)\n  if(n < 3){\n \
    \   return 3\n  }\n  while(n%2 == 0){\n    n = n/2\n  }\n  if(n < 7){\n    return\
    \ 3\n  }\n  if(n < 9){\n    return 5\n  }\n  while(n % 6 == 0){\n    n = n/6\n\
    \  }\n  if(n > 10){\n    return 7\n  }\n  if(n > 13){\n    return 9\n  }\n  var\
    \ m = Math.pow(n, 1/3)\n  for(var i = 3; i <= sqrtn; i = i+2){\n    if(n % i ==\
    \ 0){\n      return i\n    }\n  }\n  return n\n}\n", "\tvar factor = 2;\n\twhile(factor\
    \ * factor <= n){\n\t\tfactor = factor * 2;\n\t}\n\treturn factor;\n}\n", "\t\
    var factors = [];\n\tfor(var i = 2; i <= n; i++){\n\t\tfactors.push(i);\n\t\t\
    while(n % i == 0){\n\t\t\tfactors.push(n/i);\n\t\t\tn = n/i;\n\t\t}\n\t}\n\treturn\
    \ Math.max(factors);\n}\n", "    for(var i = 2; i < n; i++){\n        var m =\
    \ n % i;\n        if(m === 0) continue;\n        if(m > 0 && m % i === 0) return\
    \ i;\n        if(n % i === 0) return n;\n    }\n    return n;\n}\n", "    if(n\
    \ < 2) return 2;\n    var ret = 2;\n    for(var i = 0; i < n; i++){\n        if(n\
    \ % i == 0){\n            ret = i;\n            break;\n        }\n    }\n   \
    \ return ret;\n}", "\tvar i, d;\n\tfor(i = 2, d = 2; i <= Math.sqrt(n); ++i){\n\
    \t\tif( n % d == 0){\n\t\t\tbreak;\n\t\t}\n\t\td *= i;\n\t}\n\treturn d;\n}",
  "    for(var i = 2; i <= Math.sqrt(n); i++){\n        if(n % i == 0){\n        \
    \    return i;\n        }\n    }\n    return n;\n}\n", "  var factors = [];\n\
    \  while(n>1){\n    factors.push(n%2);\n    n=n/2;\n  }\n  factors.push(n);\n\
    \  return factors;\n}\n\nvar primes=[];\n", "\tvar highest = 0;\n\tvar high =\
    \ 2;\n\tvar i = n;\n\twhile (i <= 2000000){\n\t\tif (n % i == 0){\n\t\t\tif (i\
    \ > highest){\n\t\t\t\thighest = i;\n\t\t\t\thigh = n;\n\t\t\t}\n\t\t\ti++;\n\t\
    \t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn high;\n}", "  var factor = 2;\n\
    \  while(true){\n    if( n % factor === 0 ){\n      n = n / factor;\n      factor\
    \ = 2;\n    } else {\n      factor = factor + 1;\n    }\n    if(factor > Number.MAX_SAFE_INTEGER){\n\
    \      return factor;\n    }\n  }\n}\n\n},{}],37:[function(require,module,exports){\n\
    module.exports = function map(x, callback) {\n  var out = [];\n  for(var i = 0;\
    \ i < x.length; i++){\n    out[i] = callback(x[i], i, x);\n  }\n  return out;\n\
    };\n\n},{}],38:[function(require,module,exports){\nvar filter = require('./filter');\n\
    \nmodule.exports = function matches(elems, selector){\n  return elems.filter(filter(selector));\n\
    };\n\n},{\"./filter\":32}],39:[function(require,module,exports){\nvar match =\
    \ require('./matches');\n\nmodule.exports = function on(){\n  var args = Array.prototype.slice.call(arguments);\n\
    \  var nodes = args.shift();\n\n  for(var i = 0; i < nodes.length; i++){\n   \
    \ var callback = args[i];\n    nodes[i].addEventListener(callback[0], callback[1]);\n\
    \  }\n\n  return nodes.filter(function(elem){\n    return elem[callback[2]] ===\
    \ callback[3];\n  });\n};\n\n},{\"./matches\":38}],40:[function(require,module,exports){\n\
    var filter = require('./filter');\n\nmodule.exports = function attr(elems, attr){\n\
    \  return elems.filter(filter(attr));\n};\n\n},{\"./filter\":32}],41:[function(require,module,exports){\n\
    module.exports = function one(){\n  var elem = arguments[0];\n\n  if(typeof elem\
    \ == 'string'){\n    elem = document.querySelector(elem);\n  }\n\n  return elem[one].apply(elem,\
    \ Array.prototype.slice.call(arguments, 1));\n};\n\n},{}],42:[function(require,module,exports){\n\
    var filter = require('./filter');\n\nmodule.exports = function removeClass(elems,\
    \ name){\n  return elems.filter(filter(name));\n};\n\n},{\"./filter\":32}],43:[function(require,module,exports){\n\
    module.exports = function siblings(elems, className){\n  return elems.filter(function(elem){\n\
    \    return elem.parentNode.className == className;\n  });\n};\n\n},{}],44:[function(require,module,exports){\n\
    module.exports = function toggleClass(elems, name, state){\n  if(typeof elems\
    \ == 'string'){\n    elems = document.querySelectorAll(elems);\n  } else if(Array.isArray(elems)){\n\
    \    elems = elems.map(function(elem){\n      return typeof elem == 'string' ?\n\
    \        document.querySelectorAll(elem) :\n        elem;\n    });\n  }\n\n  return\
    \ elems.map(function(elem){\n    elem.classList[name ? !state ? 'add' : 'remove'](name);\n",
  "  if(n !== 1 && n !== n && n !== (n|0) && n !== (n|1)){\n    return Infinity;\n\
    \  }\n  var p = 3\n  var q = n\n\n  // Check factors up to n\n  while(p <= q){\n\
    \    if(n % p === 0){\n      p = p * q;\n      q -= p;\n    }else{\n      break\n\
    \    }\n  }\n\n  //If the largest prime factor is greater than n then there are\
    \ none but n\n  if((p > n) && (n !== 1)){\n    return n\n  }\n\n  // If no factors\
    \ were found and n was not 1 then the only solution is n\n  if(n === 1){\n   \
    \ return n\n  }\n\n  //If n is less than two and is not prime then n is not prime\n\
    \  if(n < 2){\n    return false\n  }\n\n  // If we get here then it is prime so\
    \ return the result\n  return p\n}", "    for(var i = 2; i <= Math.sqrt(n); i++){\n\
    \        if(n % i == 0){\n            return i;\n        }\n    }\n    return\
    \ n;\n}\n", "  if(n >= 1 && n <= 10){\n    var max_factor = 10; //largest prime\
    \ factor is 10\n    var max_factor2 = 2; //largest prime factor is 2\n    if(n%2\
    \ == 0){\n      if(n > max_factor){\n        max_factor = n;\n      }\n      if(n\
    \ > max_factor2){\n        max_factor2 = n;\n      }\n    }\n  }\n  else{\n  \
    \  var max_factor = 3;\n    var max_factor2 = 12;\n    while(n%2 == 0){\n    \
    \  if(n > max_factor){\n        max_factor = n;\n      }\n      if(n > max_factor2){\n\
    \        max_factor2 = n;\n      }\n      if(n > max_factor){\n        max_factor\
    \ = n;\n      }\n      if(n > max_factor2){\n        max_factor2 = n;\n      }\n\
    \      if(n > max_factor){\n        max_factor = n;\n      }\n      if(n > max_factor2){\n\
    \        max_factor2 = n;\n      }\n      if(n > max_factor){\n        max_factor\
    \ = n;\n      }\n      if(n > max_factor2){\n        max_factor2 = n;\n      }\n\
    \      n++;\n    }\n  }\n  return max_factor2;\n}", "    // largest prime smaller\
    \ than n\n    let maxPrime = 3;\n\n    // Check all multiples of 2, 3, 5, 7...\n\
    \    for (let i = 2; i < n; i++){\n        if (n % i == 0){\n            maxPrime\
    \ = i;\n            break;\n        }\n    }\n\n    // All prime numbers end with\
    \ 7\n    if (n % maxPrime != 0){\n        maxPrime = n+1;\n    }\n\n    return\
    \ maxPrime;\n}\n", "  if (n < 2) return 2;\n  if (n === 2) return 2;\n  //If n\
    \ is a square, the largest factor is sqrt(n).\n  //If n is not a square, the largest\
    \ factor is either n or a composite divisor of n.\n  //e.g. 12 is only a composite\
    \ divisor of 36, but not of 12.\n  var sqrtN = Math.sqrt(n);\n  if(sqrtN % 1 !==\
    \ 0) return n;\n  var factor = 2;\n  while(factor < sqrtN){\n    if(n % factor\
    \ === 0) {\n      return factor;\n    }\n    factor++;\n  }\n  return factor;\n\
    }\n\n", "  var max_num = Math.sqrt(n),\n      i = 1;\n  \n  while((n % i) > 0){\n\
    \    if(n % i == 0){\n      max_num = n/i;\n      break;\n    }\n    i++;\n  }\n\
    \  \n  return max_num;\n}\n", "\tvar f = 1;\n\twhile (n > 1) {\n\t\tif (n % 2\
    \ == 0) n = (n/2)|0;\n\t\telse f = (f*2)|0;\n\t}\n\treturn f;\n}", "  var factor,\n\
    \    i = 1;\n  \n  while(i < n){\n    if(n % i == 0){\n      factor = i;\n   \
    \   break;\n    }\n    i++;\n  }\n  return factor;\n}\n\n<|/ file ext=.js source=github\
    \ |><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n", "  var maxNum = n;\n  for(var i = 0; i < n; i++){\n    if(!primeFactors.hasOwnProperty(i))\
    \ {\n      return maxNum;\n    }\n    else if(n%primeFactors[i] == 0){\n     \
    \ maxNum = primeFactors[i];\n    }\n  }\n  return maxNum;\n}\n</code>\nThis code\
    \ took around 2 seconds to run on my desktop.\n<|/ a dscore=3 |>\n<| c |>\nI haven't\
    \ actually tested your code, but I assume it will work. I'm thinking of writing\
    \ my own code with that in mind and will post it here soon.\n<|/ c |>\n<| c |>\n\
    I tested it with some of my own code and realized it wouldn't work. My code works\
    \ with some numbers and doesn't work with the others. So now I'm thinking of redoing\
    \ it with your code in mind and will post it here soon. I still think my code\
    \ should be faster than your code. :-)\n<|/ c |>\n<| c |>\nThe code you posted\
    \ is great but doesn't give the right answer.  It gives 17 as a factor of 2048\
    \ when 2048 is the answer.  Try it on http://www.wolframalpha.com/input/?i=2^10\
    \ and see it gives the right answer.\n<|/ c |>\n<| c |>\n: You're right. The code\
    \ above is wrong. The code I posted is correct. I edited my answer with code that\
    \ will give the right answer.\n<|/ c |>\n<| c |>\n: I edited my answer. Now it\
    \ works. I tested it with a few large numbers and it seems to work fine.\n<|/\
    \ c |>\n<| a dscore=3 |>\n<code>", "    if(n === 1 || n === 2 || n === 3){\n \
    \       return n;\n    }\n    for(var i = 4; i * i <= n; i += 2){\n        while(n\
    \ % i === 0){\n            n /= i;\n        }\n        if(n > 1){\n          \
    \  return i;\n        }\n    }\n    return n;\n}\n", "  if(n == 1){ return 1;\
    \ }\n  var m = Math.sqrt(n);\n  for(var i = 2; i<=m; i++){\n    if(n % i == 0){\
    \ return i; }\n  }\n}\n", "  var i = 2\n  while(i < n){\n    if(n % i == 0) return\
    \ i\n    i += 2\n  }\n  return n\n}\n", "    // Leibniz's method\n    var primes\
    \ = new Array();\n    var max = 2; //the only even prime larger than 2\n    var\
    \ m = n; //the only odd integer larger than 2\n    var prime = 1;\n    while(m\
    \ > 1 && primes.indexOf(prime) === -1){\n        primes.push(prime);\n       \
    \ max = prime;\n        prime *= 2\n        while(n > max){\n            prime\
    \ += 1;\n            while (n % prime === 0){\n                n /= prime;\n \
    \               primes.push(prime);\n            }\n        }\n    }\n    return\
    \ primes[primes.length-1];\n}\n</code>\n<|/ a tags=javascript dscore=2 |>\n<|\
    \ c |>\nThanks, this helped me a lot! It doesn't seem very efficient though. I'm\
    \ wondering if it would be possible to do this without using any arrays, just\
    \ checking the value of n and dividing by all primes until you find one that's\
    \ greater than n.\n<|/ c |>\n<| c |>\nThanks a ton!\n<|/ c |>\n<| c |>\nThank\
    \ you so much. How would you modify the code if you were to also find all factors\
    \ below the square root of n? I thought of checking if n is a multiple of the\
    \ largest prime factor but I don't know how to do this without using arrays. Any\
    \ suggestions?\n<|/ c |>\n<| c |>\nI figured it out! I've added it to my original\
    \ answer\n<|/ c |>\n<| c |>\nThank you for your answer, but this one doesn't quite\
    \ work with certain numbers. For example, largest_prime_factor(19) returns 2,\
    \ and largest_prime_factor(20) returns 3. Any idea why?\n<|/ c |>\n<| a |>\nYou\
    \ can solve this using recursive function. Below is the code.\n<code>", "    for(var\
    \ i = 2; i < n; i++){\n        if(n%i == 0){\n            for(var j = 2; j < i;\
    \ j++){\n                if(n%j == 0)\n                    return i;\n       \
    \     }\n        }\n    }\n}\n", "    // https://en.wikipedia.org/wiki/Euclid\n\
    \    var factors = [];\n    for (var i = 2; i < n; i++) {\n        factors.push(n\
    \ % i);\n    }\n    factors.sort(function(a, b) {\n        return b - a;\n   \
    \ });\n    return factors[0];\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>",
  "\tvar primes = [];\n\tvar n = Number(n);\n\twhile (n > 1){\n\t\tfor (var i = 2;\
    \ i*i <= n; i++)\n\t\t\tif (n % i == 0){\n\t\t\t\tprimes.push(i);\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\tn = primes[primes.length-1];\n\t}\n\treturn primes[primes.length-1];\n\
    }\n", "    if(n === 1) return 2;\n    if(n%2 == 0) return n-1;\n    for(let i\
    \ = 2;i*i <= n;i++){\n        if(n%i == 0) return i;\n    }\n    return n;\n}\n\
    </code>\n<|/ a tags=algorithm,primes,javascript |>\n<| c |>\nThe algorithm you\
    \ posted is correct, but the explanation above is very hard to follow, it's just\
    \ not that hard, at least for me\n<|/ c |>\n<| c |>\nThe explanation is not hard;\
    \ it's very simple.\n<|/ c |>\n<| c |>\nIt's a bad idea to call `Math.sqrt()`\
    \ on an integer. `Math.sqrt()` returns an `int`, but you're trying to use it as\
    \ an `int`.\n<|/ c |>\n<| c |>\n`Math.sqrt` is fine for a lot of things, it's\
    \ only really a problem when you're using it to square an integer.\n<|/ c |>\n\
    <| c |>\nHmmm. `Math.sqrt` doesn't work on `int`. `Math.floor(Math.sqrt(n))` would\
    \ probably be better.\n<|/ c |>\n<| a dscore=5 |>\nThe code below will tell you\
    \ the number of prime factors.\n<code>", "\tif(n===1) return 1;\n\tif(n%2===0)\
    \ return n>3?n:2; //if even, no prime factor\n\tfor(var i=3; i<n; i++){\n\t\t\
    if(n%i===0) return i;\n\t}\n\treturn n;\n}\n", "\tif(n==1 || n==0){\n\t\treturn\
    \ 1;\n\t}\n\tif(n%2===0 || n%3===0){\n\t\treturn 1;\n\t}\n\tfor(i=5;i*i<=n;i+=6){\n\
    \t\tif(n%(i*i)===0){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn n;\n}", "  var factor,\n\
    \      primes = [],\n      root = n;\n  while (root % 2 == 0){\n    root = root\
    \ >> 1;\n  }\n  for (var i = 0; i < root; i++){\n    for (var j = 2; j < i; j++){\n\
    \      if (n % i == 0){\n        factor = i;\n        break;\n      }\n    }\n\
    \    if (factor){\n      break;\n    }\n  }\n  if (factor){\n    primes.push(factor);\n\
    \  }\n  return primes[primes.length-1];\n}\n", "  if(n<2||n%1==0||n==1)return\
    \ 1;\n  var d=Math.sqrt(n);\n  var r,t,q=Math.ceil(d);\n  if(q>1&&q%2==1)q=q/2;\n\
    \  for(t=1;t<=q;t++){\n    if(n%t==0){\n      d=n/t;\n      r=t*(t-1)/2+1;\n \
    \     if(r==d||r==(3*d)){\n        return t;\n      }\n    }\n  }\n  return 1;\n\
    }\n", "    var l = n;\n    var i = 2;\n    while(i <= l){\n        if(n % i ==\
    \ 0){\n            l = i;\n        }else{\n            i = i*3 + 1;\n        }\n\
    \    }\n    return l;\n}", "    var i, j, factor = 2;\n    for(i = 3; i <= Math.sqrt(n);\
    \ i += 2){\n        if(n % i == 0) continue;\n        for(j = factor; j <= i;\
    \ j += factor){\n            if(n%j == 0){\n                factor = j;\n    \
    \            break;\n            }\n        }\n    }\n    return factor;\n}\n",
  "  var factor = 2;\n  while (n > 1){\n    if (n % factor === 0) return factor;\n\
    \    n /= factor;\n    factor++;\n  }\n  return factor;\n}\n", "    if(n < 2)\n\
    \        return 2;\n    var ret = 2;\n    for(var i = 2; i < n; i++){\n      \
    \  while(n % i == 0){\n            ret = i;\n            n /= i;\n        }\n\
    \    }\n    return ret;\n}\n\nvar is_prime_str = function is_prime_str(str) {\n\
    \    str = str.replace(/^\\s+|\\s+$/g, '');\n    var prime = true;\n    if (str.length\
    \ == 0)\n        prime = false;\n    else if (!isNaN(str))\n        prime = !!eval(str);\n\
    \    else if (str.length == 1)\n        prime = true;\n    else\n        prime\
    \ = false;\n    return prime;\n}\n\nvar is_prime = is_prime_str;\n\nvar isPrime\
    \ = is_prime;\n\nvar is_prime_int = function is_prime_int(x) {\n    if (isNaN(x))\n\
    \        return false;\n    return isPrime(x);\n}\n\nvar is_prime_int_str = function\
    \ is_prime_int_str(str) {\n    str = str.replace(/^\\s+|\\s+$/g, '');\n    var\
    \ prime = true;\n    if (str.length == 0)\n        prime = false;\n    else if\
    \ (!isNaN(str))\n        prime = !!eval(str);\n    else if (str.length == 1)\n\
    \        prime = true;\n    else\n        prime = false;\n    return prime;\n\
    }\n\nvar is_prime_int = is_prime_int_str;\n\nvar is_prime_ints = function is_prime_ints(nums)\
    \ {\n    if (nums == null)\n        return null;\n    var result = [];\n    for\
    \ (var i = 0; i < nums.length; i++) {\n        result[i] = is_prime_int(nums[i]);\n\
    \    }\n    return result;\n}\n\nvar is_prime_ints_str = function is_prime_ints_str(nums)\
    \ {\n    if (nums == null)\n        return null;\n    var result = [];\n    for\
    \ (var i = 0; i < nums.length; i++) {\n        result[i] = is_prime_int(nums[i]);\n\
    \    }\n    return result;\n}\n\nvar is_prime_ints = is_prime_ints_str;\n\nvar\
    \ is_prime_float = function is_prime_float(x) {\n    if (isNaN(x))\n        return\
    \ false;\n    return isPrime(x);\n}\n\nvar is_prime_float_str = function is_prime_float_str(str)\
    \ {\n    str = str.replace(/^\\s+|\\s+$/g, '');\n    var prime = true;\n    if\
    \ (str.length == 0)\n        prime = false;\n    else if (!isNaN(str))\n     \
    \   prime = !!eval(str);\n    else if (str.length == 1)\n        prime = true;\n\
    \    else\n        prime = false;\n    return prime;\n}\n\nvar is_prime_float\
    \ = is_prime_float_str;\n\nvar is_prime_floats = function is_prime_floats(nums)\
    \ {\n    if (nums == null)\n        return null;\n    var result = [];\n    for\
    \ (var i = 0; i < nums.length; i++) {\n        result[i] = is_prime_", "    if\
    \ (n % 1 == 0) return 1;\n    if (n == 2) return 2;\n    \n    for (var i = 2;\
    \ i < n; i += 2){\n        if (n % i == 0){\n            return i;\n        }\n\
    \    }\n    \n    return n;\n}\n", "  // We only need to know the first six prime\
    \ numbers to figure this out\n  if(n<3){\n    return 1;\n  }\n  \n  var i=3,\n\
    \    factors=[],\n    num=n;\n  \n  while(num%2==0){\n    factors.push(2);\n \
    \   num=num/2;\n  }\n  \n  while(num%5==0){\n    factors.push(5);\n    num=num/5;\n\
    \  }\n  \n  while(num%3==0){\n    factors.push(3);\n    num=num/3;\n  }\n  \n\
    \  for(var j=2;j<factors.length;j++){\n    if(factors[j]*j<=num){\n      if(num%factors[j]\
    \ == 0){\n        return j;\n      }\n    }\n  }\n  \n  return 1;\n}\n", "   \
    \ var factors = new Array(n);\n    \n    for (var i = 2; i < n; i++){\n      \
    \  while (i*i < n){\n            factors[i] = i;\n            n = n/i;\n     \
    \   }\n    }\n    \n    factors = factors.sort();\n    return factors[0];\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
