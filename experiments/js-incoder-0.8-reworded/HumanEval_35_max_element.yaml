name: HumanEval_35_max_element
language: js
prompt: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n//\
  \ 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
  \ max_element(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
  \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
completions: ["  var a = l[0]\n  for (var i = 1; i < l.length; i++){\n    a = Math.max(a,\
    \ l[i])\n  }\n  return a\n}\n", "  if (l[0] === null)\n  {\n    return null;\n\
    \  }\n  var max = l[0], maxIndex = 0;\n  var l = l.slice(1);\n  for (var i in\
    \ l)\n  {\n    if (l[i] > max)\n    {\n      max = l[i];\n      maxIndex = i;\n\
    \    }\n  }\n  return maxIndex;\n}\n", "  var max = 0;\n  for(var i = 0, len =\
    \ l.length; i < len; i++){\n    if( l[i] > max){\n      max = l[i];\n    }\n \
    \ }\n  return max;\n}\n\n", "  if (l.length < 1) {\n    return null;\n  }\n  var\
    \ i, max_val;\n  for(i = 0; i < (l.length - 1); i++) {\n    if (l[i] > l[i+1])\
    \ {\n      max_val = l[i];\n    }\n  }\n  return max_val;\n}\n", "  let max_number\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max_number)\
    \ {\n      max_number = l[i];\n    }\n  }\n  return max_number;\n}\n", "    if(!l.length)\n\
    \        return l[0];\n\n    var _max = l[0];\n    for(var i = 1; i < l.length;\
    \ ++i)\n        if(l[i] > _max)\n            _max = l[i];\n    \n    return _max;\n\
    }\n", "  if(l.length == 0) return; var m = l[0]; for(var i=0; i<l.length; i++)\
    \ if(l[i] > m) m = l[i];\n  return m;\n}\n", "    let max = l[0];\n    for (let\
    \ i = 1; i < l.length; i++) {\n        if (l[i] > max){\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n", "    if(!Array.isArray(l) || l.length\
    \ == 0){\n        return null;\n    }\n    var maxI = 0;\n    var maxV = l[0];\n\
    \    for(var i=0; i<l.length; i++){\n        if(l[i] > maxV){\n            maxI\
    \ = i;\n            maxV = l[i];\n        }\n    }\n    return maxV;\n}\n", "\t\
    return l.reduce(function(a, b){\n\t\treturn a > b ? a : b;\n\t});\n}\n", "   \
    \ var max = l[0], max_index;\n    for (var i = 1; i < l.length; i++){\n      \
    \  if (l[i] > max){\n            max_index = i;\n            max = l[i];\n   \
    \     }\n    }\n    return max_index;\n}\n", "  return Math.max.apply( Math, l\
    \ );\n}\n", "    return Math.max.apply(null, l);\n}\n", "  return Math.max.apply(null,\
    \ l);\n}\n\n", "\treturn max_element_number(l, 0, l.length - 1, function(e, i){\n\
    \t\treturn l[e]\n\t});\n}\n", "  var max = l[0], max_val = l[0], max_i = 1;\n\
    \  for(var i = 1, len = l.length; i < len; i++){\n    if(l[i] > max){\n      max\
    \ = max_val;\n      max_val = l[i];\n      max_i = i;\n    }\n  }\n  return max_val;\n\
    }", "    var i,l,s,\n        i,l,s,\n        i,l,s,\n        i,l,s,\n        i,l,s,\n\
    \        i,l,s,\n        i,l,s,\n        i,l,s,\n        i,l,s;\n    \n    if\
    \ (l === null){\n        return null;\n    }\n    \n    i = 1;\n    l = l.length;\n\
    \    \n    for (s = 0; s < l; s++){\n        if (l[s] > l[s - 1]){\n         \
    \   l[s] = l[s - 1];\n        }else{\n            l[s] = i;\n            i = i\
    \ + 1;\n        }\n    }\n    return l[0];\n}", "  return l.reduce(function(prev,\
    \ cur){\n    return cur > prev ? cur : prev;\n  });\n};\n", "  var i = -1, m =\
    \ l[0], l = l[l.length-1];\n  do {\n    i++;\n    m = l[i]>m ? l[i] : m;\n  }\
    \ while (i < l.length);\n  return m;\n}\n", "    return Math.max.apply( Math,\
    \ l );\n}\n", "    return Math.max.apply(Math, l)\n}\n\n", "    var max = l[0];\n\
    \    for (var i = 1; i < l.length; i++){\n        if (l[i] > max) max = l[i];\n\
    \    }\n    return max;\n}\n</code>\n<|/ a dscore=2 tags=arrays,max,javascript\
    \ |>\n<| c |>\nIt's not working for negative numbers. Please check my answer\n\
    <|/ c |>\n<| a tags=arrays,max,javascript |>\nUsing Math.max:\n<code>\nMath.max.apply(null,\
    \ yourArray);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is also not working for\
    \ negative numbers. Please check my answer\n<|/ c |>\n<| c |>\nMath.max() does\
    \ not handle negative numbers. Read the documentation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max\n\
    <|/ c |>\n<| c |>\nThis is correct: Math.max returns NaN when the input is NaN.\n\
    <|/ c |>\n<| a dscore=0 tags=arrays,max,javascript |>\nThis is a concise solution\
    \ that returns the highest number. \n<code>\nMath.max.apply(Math, yourArray);\n\
    </code>\nThe max function has the following signature\n<code>\nMath.max(num1,\
    \ num2, num3)\n</code>\nThe num1, num2, num3 arguments are all numbers. \nIn our\
    \ case the num1 argument is Math, meaning that the function will use the Math\
    \ object as the highest number. \nHowever, we could also give it our own function\
    \ or even a function which returns a number. \n<code>\nMath.max(function(){ return\
    \ 3; }, function(){ return 2; }, function(){ return 1; });\n</code>\nThe above\
    \ code will return the highest number, which is 3 with our own function. \nWe\
    \ can also give it our own function which returns a number\n<code>\nMath.max(function(){\
    \ return 3; }, function(){ return 2; }, function(){ return 1; })()\n</code>\n\
    The above code will return the highest number, which is 3 with our own function.\
    \ \nFinally, we can use the Math.max function with our own function which returns\
    \ a number\n<code>\nMath.max.apply(Math, yourArray);\n</code>\nThe Math.max function\
    \ has the following signature\n<code>\nMath.max(num1, num2, num3)\n</code>\nThe\
    \ num1, num2, num3 arguments are all numbers. \nIn our case the num1 argument\
    \ is Math, meaning that the function will use the Math object as the highest number.\
    \ \nHowever, we could also give it our own function or even a function which returns\
    \ a number. \n<code>\nMath.max(function(){ return 3; }, function(){ return 2;\
    \ }, function(){ return 1; })\n</code>\nThe above code will return the highest\
    \ number, which is 3 with our own function. ", "    var max = l[0];\n    for(var\
    \ i = 1; i < l.length; i++){\n        if(l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}\n", "  return Math.max.apply(Math, l);\n}\n</textarea></div>\n\
    \n<pre class=\"prettyprint lang-js\">\nvar max_element = function(a) {\n  return\
    \ Math.max.apply(Math, a);\n};\n", "    return l.reduce(function(a, b){\n    \
    \    return (a > b) ? a : b;\n    });\n}\n    ", "    var max = l[0];\n    for(var\
    \ i=1; i<l.length; i++){\n        if(l[i]>max){\n            max = l[i];\n   \
    \     }\n    }\n    return max;\n}\n", "  if(l.length === 0) {\n    return null;\n\
    \  }\n  if(l.length == 1) {\n    return l[0];\n  }\n  if(l.length == 2) {\n  \
    \  if(l[0] > l[1]) {\n      return l[0];\n    }\n    return l[1];\n  }\n  var\
    \ m = l[0];\n  for(var i = 1; i < l.length; i++) {\n    if(l[i] > m) {\n     \
    \ m = l[i];\n    }\n  }\n  return m;\n}\n\n", "    return l.sort(function(a, b){\n\
    \        return b-a;\n    })[l.length-1];\n}\n", "    var i;\n    var max;\n \
    \   var _max = -Infinity;\n    for(i=0;i<l.length;i++){\n        if(l[i]>_max){\n\
    \            _max = l[i];\n        }\n    }\n    return max = _max;\n}\n\n", " \
    \   var max_element = l.slice(-1)[0];\n    for(var i = l.length-1; i >= 0; --i){\n\
    \        if(l[i] > max_element){\n            max_element = l[i];\n        }\n\
    \    }\n    return max_element;\n}\n", "    return l.reduce(function(prev, curr){\n\
    \        return prev > curr ? prev : curr;\n    });\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nHmm, what if I wanted to use the `reduce` function? And how would\
    \ I go about that?\n<|/ c |>\n<| c |>\nYes I have figured it out. Thanks for the\
    \ help though!\n<|/ c |>\n<| c |>\nJust FYI, the `reduce` function is now supported\
    \ in all browsers.\n<|/ c |>\n<| c |>\nThe reduce function was added in ES2015\n\
    <|/ c |>\n<| c |>\nHow about `var max_element = Math.max.apply(Math, l)`?\n<|/\
    \ c |>\n<| a tags=arrays,javascript,max |>\nIf you are interested in using libraries\
    \ you can try underscore.js\n_.max(arr, iterator, context, [ i ]); function has\
    \ great performance compared to any other solution from any javascript frameworks.\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer since it offers\
    \ a native solution with no libraries and it's much faster than using a reduce\
    \ function.\n<|/ c |>\n<| c |>\nThe lodash function [`_.maxBy`](https://lodash.com/docs#maxBy)\
    \ is also an option for finding the element with max value.\n<|/ c |>\n<| c |>\n\
    The lodash function `_.maxBy` is **not** a native solution. It is just a helper\
    \ function. [It can be found in the source code](https://github.com/lodash/lodash/blob/e677d89d6b99a1e979d8f25e64a80d873baf30f1/src/arrays/maxBy.js#L195-L204)\
    \ in `arrayMax`.\n<|/ c |>\n<| c |>\nYes, but lodash has a lot more features that\
    \ make things much easier.\n<|/ c |>\n<| a |>\nYou could use something like this:\n\
    <code>\nvar max = Math.max.apply(Math, array);\n</code>\n<|/ a dscore=5 tags=arrays,javascript,max\
    \ |>\n<| a |>\nHere is a one-liner, if you like golfing ;-)\n<code>\nconst max\
    \ = Math.max(...arr)\n</code>\n<|/ a dscore=5 tags=arrays,javascript,max |>\n\
    <| c |>\n`Math.max.apply(Math, arr)` is less obtrusive than `Math.max(...arr)`.\
    \ You can read more about it here https://developer.mozilla.org/en-US/", "  return\
    \ l.reduce(function(a, b) {\n    return a > b ? a : b;\n  });\n}\nvar max_element_1\
    \ = max_element;\n", "\tvar i, j, max;\n\tvar array = []; // initialize the array\n\
    \t\n\tfor(i = 0; i < l.length; i++){\n\t\tarray[i] = l[i];\n\t}\n\t\n\tmax = array[0];\
    \ // set first element to max\n\t\n\tfor(i = 1; i < l.length; i++){\n\t\tj = i;\n\
    \t\t\n\t\twhile(j > 0 && array[j-1] > array[j]){\n\t\t\tarray[j] = array[j-1];\n\
    \t\t\tj--;\n\t\t}\n\t\t\n\t\tarray[j] = l[i];\n\t}\n\t\n\treturn max;\n}", " \
    \   return l.reduce(function(prev, cur, i){\n        return prev > cur ? prev\
    \ : cur;\n    });\n}", "  return Math.max.apply(Math, l);\n};\n", "    return\
    \ Math.max.apply(Math, l)\n}", "    var max_ = Number.MAX_VALUE;\n    \n    for(var\
    \ i = 0; i < l.length; i++){\n        if(l[i] > max_) max_ = l[i];\n    }\n  \
    \  \n    return max_;\n}\n", "    var i, max_i = l[0], max_ele;\n    for (i =\
    \ 1; i < l.length; ++i){\n        if (l[i] > max_i) max_i = l[i];\n    }\n   \
    \ max_ele = l[0];\n    for (i = 1; i < l.length; ++i){\n        if (l[i] === max_i)\
    \ max_ele = l[i];\n    }\n    return max_ele;\n}\n", "  return Math.max.apply(Math,l)\n\
    }\n", "    return l.sort(function(a, b){\n        return a > b ? 1 : a < b ? -1\
    \ : 0;\n    });\n};\n", "  return Math.max.apply(Math, l)\n}\n", "    return Math.max.apply(\
    \ Math, l );\n}\n", "    return l.sort(function(a, b){\n        return a < b ?\
    \ 1 : a > b ? -1 : 0;\n    }).pop();\n}\n", "  var i = 0,\n      j = 0,\n    \
    \  n = l.length,\n      a,\n      b;\n  for(; i < n; ){\n    a = l[i];\n    b\
    \ = l[j];\n    if(b > a) break;\n    else if(b == a){ j++; i++; }\n  }\n  return\
    \ l[j];\n}\nexports.max_element = max_element;\n", "    if (l.length > 0) \n \
    \       return Math.max.apply(null, l);\n    else\n        return 0;\n}\n", " \
    \ var max = l[0];\n  for(var i = 1; i < l.length; i++){\n    if (l[i] > max)\n\
    \      max = l[i];\n  }\n  return max;\n}\n", "  return l.reduce(function(p, c,\
    \ i, a){\n    return c > p ? c : p;\n  }, a[0]);\n}\n", "\tvar i, max_num = Number.NEGATIVE_INFINITY;\n\
    \tfor (i = 0; i < l.length; i++)\n\t\tif (l[i] > max_num)\n\t\t\tmax_num = l[i];\n\
    \treturn max_num;\n}", "  return Math.max.apply(Math, l);\n}\n", "  return Math.max.apply(Math,\
    \ l)\n}\n", "  var max = l[0], maxidx = l[0];\n  for (var i = 1; i < l.length;\
    \ ++i) {\n    if (l[i] > max)\n      max = l[i], maxidx = i;\n  }\n  return maxidx;\n\
    }", "  var a = l[0];\n  var b = l[0];\n  for(var i=1;i<l.length;i++){\n    if(l[i]>a)\
    \ a = l[i];\n    if(l[i]>b) b = l[i];\n  }\n  return b;\n}\n", "    var i=0, j=0;\n\
    \    var m = 0;\n    var max_val = l[0];\n    for(; i < l.length; i++){\n    \
    \    max_val = l[i] > max_val ? l[i] : max_val;\n    }\n    for(; j < l.length;\
    \ j++){\n        m = l[j] > max_val ? l[j] : max_val;\n    }\n    return m;\n\
    }\n", "  return l.sort(function(a, b){\n    return a-b;\n  })[0];\n}\n", "  return\
    \ Math.max.apply(null, l);\n}\nvar max_element$1 = R;\n", "  var _g = array_max_element(l);\n\
    \  if(_g == null) throw(Errors.ERR_MISSING_ARGS);\n  return _g;\n}\n", "  var\
    \ i=0, max=l[0], el=l[0], found=0, maxel;\n  for (; i < l.length; i++) {\n   \
    \ el = l[i];\n    if (found===0) {\n      if (max <= el) {\n        found = 1;\n\
    \        maxel = el;\n      } else {\n        max = el;\n        maxel = l[i];\n\
    \      }\n    } else if (found == 1) {\n      if (max < el) {\n        max = el;\n\
    \        maxel = l[i];\n      }\n    }\n  }\n  return maxel;\n}\n\n", "  var max\
    \ = -Infinity;\n  if(l.length > 0){\n    var v = l[0];\n    for(var i = 0; i <\
    \ l.length; i++){\n      if(l[i] > max){\n        max = l[i];\n      }\n    }\n\
    \  }\n  return max;\n}\n", "    var max_element_index = 0;\n    var max_element_value\
    \ = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max_element_value){\n\
    \            max_element_index = i;\n            max_element_value = l[i];\n \
    \       }\n    }\n    return max_element_value;\n}\n", "    var max;\n    var\
    \ _l = l.length;\n    var a;\n    var i;\n\n    if(_l === 0){\n        return\
    \ 0;\n    }\n    max = l[0];\n    for(i = 1; i < _l; i++){\n        if(max < l[i]){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n", "\tvar max_value\
    \ = 0;\n\tfor(var i = 0, len = l.length; i < len; i++){\n\t\tif(l[i] > max_value)\n\
    \t\t\tmax_value = l[i];\n\t}\n\treturn max_value;\n}\n", "    return Math.max.apply(null,\
    \ l);\n}\n", "  var max = l[0], max_index = 0;\n  for(var i=0; i<l.length; i++){\n\
    \    if(l[i] > max){\n      max = l[i], max_index = i;\n    }\n  }\n  return max;\n\
    }", "  if (l == null){\n    return null;\n  }\n  var max = l[0];\n  for (var i\
    \ = 1; i < l.length; i++){\n    if (l[i] > max)\n      max = l[i];\n  }\n  return\
    \ max;\n}\n", "  if(is_empty_array(l)) return undefined;\n  return Math.max.apply(null,\
    \ l);\n}\n", "  return Math.max.apply(null, l);\n}", "\tfor(var i=1,l=l.length;i<l;i++)\n\
    \t\tif( l[i] > l[i-1] )\n\t\t\treturn l[i-1];\n\treturn l[0];\n}\n", "  return\
    \ Math.max.apply(Math, l)\n}\n", "    var a = null,\n        i = null;\n    var\
    \ max_a = 0,\n        max_i = 0;\n    for(i=0;i<l.length;i++){\n        if(a!==null){\n\
    \            if(l[i]>max_a){\n                max_a = l[i];\n                max_i\
    \ = i;\n            }else if(l[i]<max_a){\n                console.log(\"Not equal\
    \ \"+max_i+\" \"+max_a+\", a: \"+a);\n                return max_a;\n        \
    \    }\n        }else{\n            a = l[i];\n        }\n    }\n    return max_a;\n\
    }", "  var m = l[0];\n  for (var i = 1, l = l.length; i < l; i++){\n    if (l[i]\
    \ > m) m = l[i];\n  }\n  return m;\n}", "\tvar m = l[0];\n\tvar n = 0;\n\tvar\
    \ p = [];\n\n\tfor(var i = 1; i < l.length; i++){\n\t\tif(l[i] > m){\n\t\t\tm\
    \ = l[i];\n\t\t}\n\t}\n\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(l[i] < m){\n\
    \t\t\tn++;\n\t\t\tp.push(l[i]);\n\t\t}\n\t}\n\n\treturn p[(n/2 | 0)-1];\n}\n",
  "  return Math.max.apply(Math, l)\n}\nmodule.exports = max_element;\n\n},{}],8:[function(require,module,exports){",
  "\t\n\t// Sort the array in descending order.\n\tl.sort(function(a, b){\n\t\treturn\
    \ b - a\n\t})\n\t\n\t// Keep the first element of array as maximum.\n\tvar max\
    \ = l[0];\n\t\n\t// Iterate through the rest of the array, keeping track of the\
    \ current maximum element.\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(l[i]\
    \ > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}\n", "  var l =\
    \ l || [];\n  var s = l.sort(function(a, b){return a - b});\n  var maxValue =\
    \ s[0];\n  var maxIndex = 0;\n  for (var i = 1; i < s.length; i++){\n    if (s[i]\
    \ > maxValue){\n      maxValue = s[i];\n      maxIndex = i;\n    }\n  }\n  return\
    \ maxIndex >= 0 ? s[maxIndex] : null;\n}\nexports.max_element = max_element;\n",
  "    var max = l[0], max_i = 1;\n    for(var i=1, llen=l.length; i<llen; i++){\n\
    \        if(l[i] > max){\n            max = l[i], max_i = i;\n        }\n    }\n\
    \    return l[max_i];\n}\n", "    return Math.max.apply( Math, l);\n}\n", "\t\
    var ret=l[0];\n\tfor(var i=0;i<l.length;i++){\n\t\tif(i>0){\n\t\t\tif(l[i]>ret)\n\
    \t\t\t\tret=l[i];\n\t\t}\n\t}\n\treturn ret;\n}", "    var maxElement = l[0],\
    \ max = l[0];\n    for(var i = 1, len = l.length; i < len; i++){\n        if (l[i]\
    \ > max)\n            max = l[i];\n        if (l[i] === max)\n            maxElement\
    \ = l[i];\n    }\n    return maxElement;\n}\n", "  if (l.length == 1) return l[0];\n\
    \n  var maxv = l[0], maxi, vi, i, l;\n\n  for (i=0, l=l.length; i<l; i++){\n \
    \   vi = l[i];\n    if (vi > maxv){\n      maxv = vi;\n      maxi = i;\n    }\n\
    \  }\n\n  return maxi;\n}\n", "    return Math.max.apply(null, l);\n}\n", "  \
    \  if(l == null){\n        return null;\n    }\n    var max = l[0];\n    for(var\
    \ i in l){\n        if(l[i] > max)\n            max = l[i];\n    }\n    return\
    \ max;\n}\n\n", "    var x = l[0]\n    for(var i=1,l1=l.length; i<l1; i++){\n\
    \        var y = l[i]\n        if(x < y) return y\n        x= y\n    }\n    return\
    \ l[0]\n}\nmodule.exports = max_element\n\n},{}],4:[function(_dereq_,module,exports){",
  "    var m = l.sort(function(a, b){return b-a});\n    return l[m.length-1];\n}\n",
  "\tvar max;\n\tvar aMax;\n\tfor(var i=0; i<l.length; i++){\n\t\tif(max === undefined){\n\
    \t\t\tmax = l[i];\n\t\t}else if(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t\tif(aMax\
    \ === undefined){\n\t\t\taMax = max;\n\t\t}else if(aMax < max){\n\t\t\taMax =\
    \ max;\n\t\t}\n\t}\n\treturn aMax;\n}", "  return Math.max.apply(Math, l)\n}\n",
  "\treturn Math.max.apply( Math, l );\n}\n", "    var i, max = -Infinity;\n    for(i\
    \ = 0; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n", "    var a = l[0]\n    var b = l[0]\n\
    \    for(var i=1;i<l.length;i++){\n        if(l[i]>a){\n            a = l[i]\n\
    \        }else if(l[i]>b){\n            b = l[i]\n        }\n    }\n    return\
    \ a\n}\n", "    return Math.max.apply(null, l);\n}\nexports.max_element = max_element;\n",
  "    var m = -Infinity,\n        l = l.slice();\n    for(var i = 0, len = l.length;\
    \ i < len; i++){\n        if(l[i] > m) m = l[i];\n    }\n    return m;\n}\n",
  "    var m = l[0], n = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(m>l[i]){\n\
    \            m = l[i];\n        }else if(n > l[i]){\n            n = l[i];\n \
    \       }\n    }\n    return m;\n}\n", "  var s = l[0];\n  for(var i=1,max=l[i];i<l;i++){\n\
    \    if(l[i]>max) max=l[i];\n    if(s===l[i]) break;\n  }\n  return max;\n}\n",
  "    return l.reduce(function(prev, curr){\n        return Math.max(prev, curr);\n\
    \    });\n}\nmodule.exports = max_element;\n\n},{}],121:[function(_dereq_,module,exports){\n\
    var arrayReduce = _dereq_('./arrayReduce'),\n    baseIteratee= _dereq_('./baseIteratee'),\n\
    \    baseReduce = _dereq_('./baseReduce');\n", "    var max;\n    if (l.length\
    \ == 0) {\n        return 0;\n    }\n    else {\n        max = l[0];\n       \
    \ for (var i = 1; i < l.length; i++){\n            if (l[i] > max){\n        \
    \        max = l[i];\n            }\n        }\n        return max;\n    }\n}",
  "    let maxVal = l[0];\n    for (let i = 1; i < l.length; i++){\n        if (l[i]\
    \ > maxVal){\n            maxVal = l[i];\n        }\n    }\n    return maxVal;\n\
    }\n", "    var i,\n        len = l.length,\n        m = -Infinity,\n        el;\n\
    \    for(i=0;i<len;i+=1){\n        el = l[i];\n        if(el < m){\n         \
    \   m = el;\n        }\n    }\n    return m;\n}\n\nexports.max_element = max_element;\n",
  "  return l.sort(function(a,b){ return b-a; }).pop();\n}\n", "    var m = 0, \n\
    \        i;\n    for (i = 0, l = l.length; i < l; i++){ \n        m = Math.max(m,\
    \ l[i]);\n    }\n    return m;\n}\n", "  return Math.max.apply(Math, l);\n}\n",
  "    var max = 0,\n        i,\n        l = l.length\n    for(i = 0; i < l; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n", "    return Math.max.apply(null, l);\n}\n", "\tvar max = l[0], maxIndex\
    \ = 0, i;\n\n\tfor(i = 0; i < l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax\
    \ = l[i];\n\t\t\tmaxIndex = i;\n\t\t}\n\t}\n\treturn max;\n}\n", "    return l.reduce(function(a,\
    \ b){\n        if (a > b) return a;\n        return b;\n    });\n}\n\n", "\tvar\
    \ i;\n\tvar max;\n\tvar max = l[0];\n\tfor(i = 1; i < l.length; i++){\n\t\tif(\
    \ l[i] > max ){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n\n", "\tl =\
    \ flatten(l);\n\treturn l.reduce(function(a,b){\n\t\treturn Math.max(a,b);\n\t\
    });\n}\n", "  if ( !l ){\n    throw 'missing list';\n  }\n  if ( l[0] > l[1] ){\n\
    \    return l[0];\n  } else {\n    return l[1];\n  }\n}\n", "    var max = l[0],\
    \ i = 0, j = 0, len = l.length, temp;\n    while(i < len){\n        j = i;\n \
    \       while(j > 0 && l[j] < max){\n            max = l[j];\n            j =\
    \ j - 1;\n        }\n        if(j == 0){\n            return max;\n        }\n\
    \        temp = l[i];\n        l[i] = l[j];\n        l[j] = temp;\n        i =\
    \ j;\n    }\n    return l[0];\n}\n", "    return Math.max.apply(Math, l)\n}\n",
  "    var max = l[0];\n    var max = l[0];\n    for(var i = 1, len = l.length; i\
    \ < len; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n\
    \    }\n    return max;\n}\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\nI've\
    \ found a neat solution to sort your array by ascending order:\n<code>\nvar myArr\
    \ = [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10];\nvar sorted = myArr.sort(function(a,\
    \ b){\n    return a - b;\n});\n</code>\nThis works on all browsers (tested on\
    \ Chrome & Firefox).\n<|/ a tags=arrays,javascript,sorting |>\n<| a dscore=1 tags=arrays,javascript,sorting\
    \ |>\n<code>\nvar array = [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10];\nvar sorted_array\
    \ = array.sort(function(a,b){\n    return a-b;\n});\n</code>\n<|/ a |>\n<| a dscore=1\
    \ |>\n<code>\nvar arr = [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10];\narr.sort(function(a,\
    \ b){\n    return a - b;\n});", "  let i = -1, l = l.length, max = Number.MIN_VALUE;\n\
    \  for(; i < l; i++){\n    if(l[i] > max)\n      max = l[i];\n  }\n  return max;\n\
    }\n", "\treturn Math.max.apply(Math, l)\n}\n", "  return Math.max.apply(Math,\
    \ l)\n}\n", "    var max_i = null;\n    for(var i = l.length - 1; i >= 0; i--){\n\
    \        if(max_i == null || l[i] > l[max_i]){\n            max_i = i;\n     \
    \   }\n    }\n    return l[max_i];\n}\n\n", "  var x = l[0], y = l[1], max = x;\n\
    \  for (var i = 0, ii = l.length; i < ii; i++){\n    if (l[i] > max){\n      max\
    \ = l[i];\n    }\n  }\n  return max;\n}\n", "    l = l.slice(0); // clone\n  \
    \  l.sort(function(a,b){\n        return a < b ? -1 : 1;\n    });\n    return\
    \ l[l.length-1];\n}\n\n", "  return l.reduce(function(result, current){\n    return\
    \ result < current ? result : current;\n  });\n}\n", "    return Math.max.apply(null,\
    \ l);\n}\n", "    if(!l.length)\n        throw new Error(\"max_element() called\
    \ on an empty array\");\n    var max = l[0],\n        i, len;\n    for(i=1,len=l.length;i<len;i++){\n\
    \        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\n\
    exports.max_element = max_element;\n", "\t\n\tfor(var i=0;i<l.length;i++){\n\t\
    \tif(l[i] >= l[i-1]){\n\t\t\treturn l[i];\n\t\t}\n\t}\n\treturn l[0];\n}\n", " \
    \   if (l == null){ return void 0; }\n    var m = 0, n = l.length, max = Math.min;\n\
    \    for (var i = 0; i < n; ++i){\n        if (l[i] > m){ m = l[i]; }\n      \
    \  else if (l[i] < m){ n = i; m = l[i];}\n    }\n    return m >= 0? m : max_element(l.slice());\n\
    }\n", "  var n = l.length, m = max_index(l);\n  if(m<0){\n    throw new Error('no\
    \ maximum element (' + l +')');\n  }\n  return l[m];\n}\n\nmodule.exports = max_element;\n\
    \n},{}],23:[function(_dereq_,module,exports){", "    var n = l.length < 0 ? 0\
    \ : +l.length\n    for(var i = n; i >= 0; i--)\n        if(l[i] > l[i-1])\n  \
    \          return l[i];\n    return l[0];\n}\n", "\tvar max = l[0];\n\tfor (var\
    \ i = 1; i < l.length; i++){\n\t\tif (l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\
    \t}\n\treturn max;\n}\n", "  return Math.max.apply(Math, l);\n}\n", "    return\
    \ Math.max.apply(Math, l)\n}\nvar max_element_1 = max_element;\n", "  return l.sort((a,b)=>a-b).slice(-1)[0];\n\
    }\n", "  var max = l[0];\n  for(var i = 1; i < l.length; i++){\n    if(l[i] >\
    \ max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n", "  if(l.length ==\
    \ 0) return null;\n  l.sort(function(a, b){return b-a});\n  return l[l.length-1];\n\
    }\n", "    return l.reduce(function(a, b){\n        return Math.max(a, b);\n \
    \   });\n}\n", "    if (l[0] === null)\n        throw new TypeError(\"Array is\
    \ empty\");\n\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\n",
  "\tvar max_n = l[0];\n\tvar max_i;\n\tfor (var i=1; i<l.length; i++){\n\t\tif (l[i]\
    \ > max_n) max_n = l[i];\n\t}\n\treturn max_n;\n}\n", "    return Math.max.apply(Math,\
    \ l);\n}\n", "  return l.reduce(function(a,b){\n    return Math.max(a, b);\n \
    \ });\n}\n", "    var max_element = l[0];\n    for (var i = 1; i < l.length; i++){\n\
    \        if (l[i] > max_element){\n            max_element = l[i];\n        }\n\
    \    }\n    return max_element;\n}\n", "  return l.sort(function(a,b){return b-a}).slice(-1)[0];\n\
    }\n", "    var l = l.slice();\n    l.sort(function(a, b){return a - b;});\n  \
    \  return l[l.length-1];\n}\n", "  return l.sort((a,b)=>b-a).slice(-1)[0];\n}\n\
    </code></pre>\n            </section>\n\n            <!-- ===========================================================\
    \ -->\n            <section class=\"slide\">\n                <h3 class=\"title\"\
    >What does it do?</h3>\n                <blockquote class=\"notes\">\n       \
    \             The idea is that you give it a list, it will find the maximum element\
    \ of that list. It is a function defined in the <code>array_function</code> module.\
    \ Take a look at the code for a better understanding.\n                </blockquote>\n\
    \            </section>\n            <!-- ===========================================================\
    \ -->\n            <section class=\"slide\">\n                <h3 class=\"title\"\
    >Examples</h3>\n                <pre><code class=\"javascript\" data-trim contenteditable>\n",
  "\tif(l == null || l.length == 0)\n\t\treturn null;\n\tvar x = l.shift();\n\tl.forEach(function(y){\n\
    \t\tif(y > x)\n\t\t\tx = y;\n\t});\n\treturn x;\n}", "  var iMax,\n    i,\n  \
    \  lLength = l.length,\n    max = l[0];\n\n  for (i = 1; i< lLength; i++) {\n\
    \    if (l[i] > max) {\n      iMax = i;\n      max = l[i];\n    }\n  }\n  return\
    \ max;\n}\n", "    if(!is_array(l)){\n        throw Error(\"max_element only works\
    \ with arrays!\");\n    }\n    var m = l[0];\n    for(var i = 1; i < l.length;\
    \ i++){\n        if(l[i] > m){\n            m = l[i];\n        }\n    }\n    return\
    \ m;\n}\n", "  let max = l[0];\n  for(let i = 1, len = l.length; i < len; i++){\n\
    \    if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n", "  if(typeof\
    \ l === \"number\"){\n    //Return index of first element that is higher than\
    \ the number.\n    return l.map(function(_,i){\n      return (l[i] > l) ? i :\
    \ -1;\n    }).reduce(function(a,b){\n      return Math.max(a, b);\n    });\n \
    \ }else if(l instanceof Array){\n    //Return index of the element that has the\
    \ highest value.\n    return l.map(function(_,i){\n      return l[i];\n    }).reduce(function(a,b){\n\
    \      return (a > b) ? a : b;\n    });\n  }else{\n    //Return undefined.\n \
    \   return undefined;\n  }\n}\n", "    var mx = l[0];\n    for (var i=0; i<l.length;\
    \ i++){\n        if (l[i] > mx){\n            mx = l[i];\n        }\n    }\n \
    \   return mx;\n}\nvar max_element_0 = defineInlineFunction('kotlin.kotlin.collections.max_evil$max_element_dvvze$',\
    \ function ($receiver, destination) {\n    var tmp$;\n    tmp$ = $receiver.iterator();\n\
    \    while (tmp$.hasNext()) {\n        var element = tmp$.next();\n        if\
    \ (Kotlin.compareTo(destination, element) <= 0)\n            destination = element;\n\
    \    }\n    return destination;\n});\nvar min_9 = defineInlineFunction('kotlin.kotlin.collections.min_9q3j4$',\
    \ wrapFunction(function () {\n    var Math_0 = Math;\n    var get_lastIndex =\
    \ _.kotlin.collections.get_lastIndex_se6h4x$;\n    return function ($receiver,\
    \ predicate) {\n        var tmp$;\n        if ($receiver.length === 0)\n     \
    \       return null;\n        var minElem = $receiver[0];\n        var minValue\
    \ = predicate(minElem) ? minElem : null;\n        tmp$ = $receiver.iterator();\n\
    \        while (tmp$.hasNext()) {\n            var element = tmp$.next();\n  \
    \          var currentValue = predicate(element) ? element : null;\n         \
    \   if (Kotlin.compareTo(minValue, currentValue) < 0)\n                minValue\
    \ = currentValue;\n        }\n        return minValue;\n    };\n}));\nvar min_10\
    \ = defineInlineFunction('kotlin.kotlin.collections.min_530ntz$', wrapFunction(function\
    \ () {\n    var Math_0 = Math;\n    return function ($receiver, predicate) {\n\
    \        var tmp$;\n        if ($receiver.length === 0)\n            return null;\n\
    \        var minElem = $receiver[0];\n        var minValue = predicate(minElem)\
    \ ? minElem : null;\n        tmp$ = $receiver.iterator();\n        while (tmp$.hasNext())\
    \ {\n            var element = tmp$.next();\n            var currentValue = predicate(element)\
    \ ? element : null;\n            if (Kotlin.compareTo(minValue, currentValue)\
    \ < 0)\n                minValue = currentValue;\n        }\n        return minValue;\n\
    \    };\n}));\nvar min_11 = defineInlineFunction('kotlin.kotlin.collections.min_9j6u0r$',\
    \ wrapFunction(function () {\n    var Math_0 = Math;\n    return function ($receiver,\
    \ predicate) {\n        var tmp$;\n        if ($receiver.length === 0)\n     \
    \       return null;\n        var minElem = $receiver[0];\n        var minValue\
    \ = predicate(minElem) ? minElem : null;\n        tmp$ = $receiver.iterator();\n\
    \        while (tmp$.hasNext()) {\n            var element = tmp$.next();\n  \
    \          var current", "    var n = l.length\n    for(var i=0; i<n; i++){\n\
    \        var m = max_ind(l, i, i)\n        l = move_up_to_right(l, m, n)\n   \
    \ }\n    return l[0]\n}\n", "  var max = 0, len = l.length, i;\n  for(i = 0; i\
    \ < len; i++){\n    if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n\
    }\n", "    return l.sort((a,b) => a-b).pop();\n}\n", "  var max_so_far=l[0];\n\
    \  var max_ending_here=l[0];\n  for(var i=1;i<l.length;i++){\n    if(l[i]>max_ending_here){\n\
    \      max_ending_here=l[i];\n    }\n    if(l[i]>=max_so_far){\n      max_so_far=l[i];\n\
    \    }\n  }\n  return max_ending_here;\n}\n", "    var m = 0;\n    for (var i\
    \ = 0; i < l.length; ++i){\n        m = Math.max(m, l[i]);\n    }\n    return\
    \ m;\n}\n", "    var m = -l[0];\n    var n = l[0];\n    var i = 0;\n    for(var\
    \ j = l.length - 1; j >= 0 ; j--){\n        if(l[j] > m){\n            m = l[j];\n\
    \            i = j;\n        }\n        if(l[j] < n){\n            n = l[j];\n\
    \        }\n    }\n    return l[i];\n}\n</code>\n<|/ a tags=javascript,arrays,sorting\
    \ |>\n<| a tags=javascript,arrays,sorting |>\nThe most generic solution:\n<code>\n\
    var arr = [1, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10];\n", "  return Math.max.apply(null,\
    \ l);\n}\n\n", "    var max_value = l[0],\n        max_index = 0;\n    for (var\
    \ i = 1; i < l.length; i++){\n        if (l[i] > max_value){\n            max_value\
    \ = l[i];\n            max_index = i;\n        }\n    }\n    return max_value;\n\
    }\nmodule.exports.max_element = max_element;\n", "    return Math.max.apply(Math,\
    \ l)\n}\n", "    if(l[0].length == 0) return l[0]\n    let max = l[0][0], i;\n\
    \    for(i = 1; i < l[0].length; i++){\n        if(l[0][i] > max){\n         \
    \   max = l[0][i];\n        }\n    }\n    return max;\n}\n", "\tvar max;\n\tvar\
    \ i;\n\tvar maxi = -1;\n\n\tfor (i = 0; i < l.length; i++){\n\t\tif (l[i] > max){\n\
    \t\t\tmax = l[i];\n\t\t\tmaxi = i;\n\t\t}\n\t}\n\n\treturn maxi;\n}\n", "    var\
    \ max = l[0],\n        max = l[0],\n        i;\n    for(i = 1; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n", "    var e=new Array(l.length);\n    var max=l[0];\n    for(var\
    \ i=l.length-1;i>=0;i--){\n        if(l[i]>max)\n        max=l[i];\n        e[i]=max;\n\
    \    }\n    return e;\n}\nexports.max_element=max_element;\n\n},{}],5:[function(_dereq_,module,exports){\n\
    'use strict';\nvar P=_dereq_('./p');\nvar proto=_dereq_('./proto');\nvar Obj=_dereq_('./obj');\n\
    var util=_dereq_('./util');\nvar EventEmitter=_dereq_('events').EventEmitter;\n\
    var assert=_dereq_('assert');\n\nvar nextTick=typeof setImmediate === 'function'?setImmediate:(typeof\
    \ process === 'object' && typeof process.nextTick === 'function'?process.nextTick:setTimeout);\n",
  "  if (l.length === 0) {\n    return undefined;\n  }\n  var f = l[0];\n  for(var\
    \ i = 1; i < l.length; i++){\n    if (l[i] < f) {\n      f = l[i];\n    }\n  }\n\
    \  return f;\n}\n", "\treturn Math.max.apply(Math, l);\n}\n", "    if ( !isArrayOrTypedArray(l)\
    \ || l.length ===0 ){\n        throw new TypeError(\"Array expected\");\n    }\n\
    \n    var max = l[0],\n        max = l[0];\n\n    for( var i=1, len = l.length;\
    \ i< len; i++ ){\n        if( l[i] > max ){\n            max = l[i];\n       \
    \ }\n    }\n\n    return max;\n}\n\n", "  return Math.max.apply(null, l);\n}\n",
  "  return Math.max.apply(Math, l)\n}\n", "\tlet max = l[0]\n\tfor(let i=1; i<l.length;\
    \ i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i]\n\t\t}\n\t}\n\treturn max\n}\n",
  "    if(!l)\n        throw new Error(\"Array is empty\");\n    let a = new Array(l.length);\n\
    \    let max = 0;\n    for(let i = 0; i < l.length; i++)\n        a[i] = l[i];\n\
    \    for(let i = 0; i < a.length; i++){\n        max = a[i] > max ? a[i] : max;\n\
    \    }\n    return max;\n}\n", "  var i, j, l, l, l, o,\n      n = [],\n     \
    \ m = Math.max,\n      p = [],\n      o = 0,\n      s = l.length;\n  if (s ===\
    \ 0) return null;\n  for (i = 0; i < s; i++){\n    o++;\n    l = l[o];\n    if\
    \ (l > 0 && l.constructor === Array) m = Math.max;\n    l.constructor === Array\
    \ && (m = max_element);\n    for (j = 0; j < o; j++){\n      p = l[j]\n      if\
    \ (m && p.constructor === Array) m = p.reduce(m, 0)\n      p.constructor === Array\
    \ && (m = max_element);\n      if (m > 0) break;\n    }\n    p.constructor ===\
    \ Array && (m = max_element)\n    n && n.push(p);\n  }\n  return n\n}\n", "\t\
    var result = [],\n\t\tmax = -Infinity;\n\teach(l,function(val){\n\t\tif(val >\
    \ max){\n\t\t\tmax = val;\n\t\t}\n\t});\n\treturn max;\n}\n", "    return Math.max.apply(null,\
    \ l);\n}", "    if(l.length == 0) return 0;\n    var max_num = Math.min.apply(Math,\
    \ l.map(function(i){return i})),\n        idx = l.indexOf(max_num);\n    \n  \
    \  if(idx != -1) l.splice(idx, 1);\n    \n    return max_num;\n}\n", "    l.sort(function(a,\
    \ b) {\n        return a - b;\n    });\n    return l[0];\n};", "    return Math.max.apply(null,\
    \ l);\n}", "    return Math.max.apply(Math, l);\n}", "  var max = l[0], maxInt\
    \ = l[0];\n  for(var i = 1; i < l.length; i++){\n    if(l[i] > max) {\n      maxInt\
    \ = max;\n      max = l[i];\n    }else if(l[i] === maxInt){\n      max = l[i];\n\
    \    }\n  }\n  return max;\n}", "  return Math.max.apply(Math, l)\n}\n", "  return\
    \ Math.max.apply(Math, l);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add\
    \ some explanation to your answer such that others can learn from it\n<|/ c |>\n\
    <| a tags=javascript |>\nThis works for me:\n<code>\nvar max_element = function\
    \ (arr) {\n  return Math.max.apply(null, arr.map(function (x) {\n    return x.toFixed();\n\
    \  }));\n};\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks, this works well. I don't\
    \ know why, but the other answers don't work for my case.\n<|/ c |>\n<| a dscore=0\
    \ |>\nIn case you need to return a number and not a string, you can do this:\n\
    \n<code>", "    return Math.max.apply(Math, l);\n};\n", "  if (l == null) {\n\
    \    return null;\n  }\n  return l.reduce(function(a, b) {\n    return Math.max(a,\
    \ b);\n  });\n}\n", "  var m = -Infinity,\n      el = l[0],\n      i = 1;\n\n\
    \  for (; i < l.length; i++) {\n    m = Math.max(m, l[i]);\n    if (m == -Infinity){\n\
    \      el = l[i];\n    }\n  }\n  return el;\n}\n", "    var max;\n    for(var\
    \ i = 0; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>",
  "    var l = checkArray(l);\n    var max = -Infinity;\n    for(var i=0; i<l.length;\
    \ i++){\n        if(l[i]>max){\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n", "  return Math.max.apply(null, l);\n}\nmodule.exports =\
    \ max_element;\n},{}],23:[function(require,module,exports){\nvar MAX_ELEMENT =\
    \ require('../number/MAX_ELEMENT');\n", "    var l = l.slice(); //copy array to\
    \ avoid alteration\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n\
    \        if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\n",
  "  return l.sort(function(a, b) {\n    return b - a;\n  })[0];\n}\n", "  var max\
    \ = l[0], j = 0;\n  for(var i = 1; i < l.length; i++){\n    if(l[i] > max)\n \
    \     max = l[i], j = i;\n  }\n  return l[j];\n}\n", "    if (l[0]===undefined\
    \ || l[0]===null || l[0]===\"\" || l.length===0) return l[0]===null ? NaN : l[0];\
    \ //Handle 0 case\n    var _s = l[0].toString(), max = _s, i=1;\n    for(;i<l.length;i++){\n\
    \        var l = l[i].toString();\n        if (l>max){\n            max = l;\n\
    \        }\n    }\n    return max;\n}", "\tvar max_el = l[0];\n\tfor(var i = 1;\
    \ i < l.length; ++i){\n\t\tif(l[i] > max_el) max_el = l[i];\n\t}\n\treturn max_el;\n\
    }", "    return Math.max.apply(Math, l)\n}\n", "  return Math.max.apply(Math,\
    \ l)\n}\n", "    var max = -Infinity;\n    for(var i=0; i<l.length; i++){\n  \
    \      if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n", "    return Math.max.apply(Math, l)\n}\n", "    if(l instanceof\
    \ Array){\n        for(var i = 0; i < l.length; i++){\n            if((l[i] instanceof\
    \ BigNumber))\n                l[i] = l[i].toFixed();\n        }\n    }\n    var\
    \ max = Math.max.apply(null, l);\n    \n    if(max instanceof BigNumber)\n   \
    \     return max.toFixed();\n    else\n        return max;\n}", "    if(!l ||\
    \ l.length == 0) return -1;\n    var max = l[0], max = l[0];\n    for(var i =\
    \ 1; i < l.length; i++){\n        if (max < l[i]) max = l[i];\n    }\n    return\
    \ max;\n}\n", "  var i,\n      n,\n      tmp;\n  \n  if ( !l ) {\n    return null;\n\
    \  }\n  \n  n = l.length;\n  tmp = l[0];\n  \n  for ( i = 1; i < n; i++ ) {\n\
    \    if ( tmp > l[i] ) {\n      tmp = l[i];\n    }\n  }\n  \n  return tmp;\n}\n",
  "    return l.sort(function(a, b){\n        return b-a;\n    })[0];\n}\n\n", "\t\
    return Math.max.apply(Math, l);\n}\n", "  var m = Number.NEGATIVE_INFINITY;\n\
    \  var n = Number.POSITIVE_INFINITY;\n  for(var i=0; i<l.length; i++){\n    if(l[i]>n){\n\
    \      n = l[i];\n    }\n    if(l[i]<m){\n      m = l[i];\n    }\n  }\n  return\
    \ m;\n}\n", "    var e = l[0], i = 0, n = l.length;\n    while(i < n){\n     \
    \   var v = l[i];\n        if(v > e){\n            e = v;\n        }\n       \
    \ i++;\n    }\n    return e;\n}\n", "  return Math.max.apply(null, l);\n}\n",
  "    var x = l;\n    var m = 0;\n    for(var i = l.length; i--;)\n        if(l[i]\
    \ > m) m = l[i];\n        else x = false;\n    return x;\n}\n", "\treturn Math.max.apply(null,\
    \ l);\n}\n\n", "    if (l == null)\n        return null;\n    var max = l[0],\n\
    \        min = l[0],\n        size = l.length;\n\n    for (var i = 1; i < size;\
    \ ++i){\n        if (l[i] > max)\n            max = l[i];\n        if (l[i] <\
    \ min)\n            min = l[i];\n    }\n    return max;\n}\n</code>\n<|/ a tags=arrays,javascript,jquery\
    \ |>\n<| a |>\nThe Math.min function takes as an argument the array and returns\
    \ the minimum of that array.  It does not care what is in the array.  \nSo if\
    \ you do Math.min([1,2]) it will return 1 and if you do Math.min([1,2,3]) it will\
    \ return 1.  \nWhat you need to do is pass in an array as the min argument and\
    \ it will find the min for you and return the value.  \n<code>", "  return Math.max.apply(Math,\
    \ l);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
