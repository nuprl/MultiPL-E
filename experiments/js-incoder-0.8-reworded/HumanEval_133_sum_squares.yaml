name: HumanEval_133_sum_squares
language: js
prompt: "//You are given an array of numbers.\n// You need to return the sum of squared\
  \ numbers in the given array,\n// round each element in the array to the upper int(Ceiling)\
  \ first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0,\
  \ 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n\
  // 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = sum_squares;\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 3.0, 5.0, 7.0]),84);\n  assert.deepEqual(candidate([1.4,\
  \ 4.2, 0.0]),29);\n  assert.deepEqual(candidate([-2.4, 1.0, 1.0]),6);\n  assert.deepEqual(candidate([100.0,\
  \ 1.0, 15.0, 2.0]),10230);\n  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);\n\
  \  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);\n  assert.deepEqual(candidate([-1.4,\
  \ 17.9, 18.9, 19.9]),1086);\n  assert.deepEqual(candidate([0.0]),0);\n  assert.deepEqual(candidate([-1.0]),1);\n\
  \  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);\n}\n\ntest();"
completions: ["\tvar sum = 0;\n\tfor (var i = 0; i < lst.length; i++){\n\t\tsum +=\
    \ lst[i] * lst[i];\n\t}\n\treturn Math.ceil(sum);\n}\n", "    // Write your code\
    \ here\n    let sum = lst.reduce((sum,element)=>sum+element*element,0)\n    return\
    \ sum\n}\n", "  let result = 0;\n  lst.forEach(function(x){\n    result += Math.round(x*x);\n\
    \  });\n  return result;\n}\n", "  let res = [];\n  for(let x of lst){\n    res.push(Math.ceil(Math.pow(x,2)));\n\
    \  }\n  return Math.sum(res);\n}\n", "    return lst.reduce(function(acc, cur){\n\
    \        return acc + Math.pow(cur, 2);\n    }, 0);\n}\n</code>\n<|/ a tags=javascript,arrays\
    \ dscore=0 |>\n<| c |>\nThe question says the array is sorted. This is a linear\
    \ search algorithm.\n<|/ c |>\n<| a dscore=0 |>\nHere is a solution using a while\
    \ loop.  If the array is sorted, the while loop will never exit so it will terminate\
    \ early without needing any extra space.  However, if the array is not sorted,\
    \ then you will need to keep a temporary variable that will get overwritten by\
    \ the next element in the loop.  This is an important aspect of using while loops\
    \ because it allows you to exit as soon as you see a mismatch.\n<code>", "  let\
    \ cnt = 0;\n  let total = 0;\n  for (let i=0; i<lst.length; i++){\n    total +=\
    \ Math.ceil(lst[i]*lst[i]);\n    cnt++;\n  }\n  return total;\n}", "    let sum\
    \ = 0\n    for(let i=0;i<lst.length;i++){\n        sum += Math.ceil(lst[i]*lst[i])\n\
    \    }\n    return sum\n}\n", "  var result = 0;\n  for(var i = 0; i < lst.length;\
    \ i++){\n    var num = Math.round(lst[i]);\n    result += (num * num);\n  }\n\
    \  return result;\n}\n", "\tvar result = 0;\n\tfor (var i in lst){\n\t\tresult\
    \ = result + Math.pow(lst[i], 2);\n\t}\n\treturn Math.round(result);\n}\n", " \
    \   // code here\n    for(var i=0;i<lst.length;i++){\n        lst[i] = Math.ceil(lst[i]);\n\
    \    }\n    var sum = 0;\n    for(var i=0;i<lst.length;i++){\n        sum += lst[i]\
    \ * lst[i];\n    }\n    return sum;\n}\n", "  let ret=0\n  lst.map(x=>{ret+=Math.ceil(x*x)})\n\
    \  return ret\n}\n", "    let sum = 0;\n    let sq = 0;\n    for(let i = 0; i\
    \ < lst.length; i++){\n        sq = sq + lst[i]*lst[i];\n        sum = sum + Math.ceil(sq);\n\
    \    }\n    return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++){\n    sum += Math.ceil(lst[i]*lst[i]);\n  }\n  return sum;\n}\n", "   \
    \ if(lst.length == 0) return 0;\n    for(var i = 0; i < lst.length; i++){\n  \
    \      lst[i] = Math.ceil(lst[i]);\n    }\n    var sum = 0;\n    for(var i = 0;\
    \ i < lst.length; i++){\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n\
    }\n", "  //Write your code here.\n};\n", "\tlet result = 0\n\tfor (let i = 0;\
    \ i< lst.length; i++){\n\t\tresult += lst[i]*lst[i]\n\t}\n\treturn Math.round(result)\n\
    }\n", "  var sum = lst.reduce((acc, item) => {\n    return acc + Math.pow(item,\
    \ 2);\n  });\n  return Math.ceil(sum);\n}\n", "  return lst.map(n => Math.ceil(n*(n+1)/2)).reduce((acc,\
    \ val) => acc+val);\n}", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n}\n", "\t\
    let ans = 0.0;\n\tlst.forEach(x=>{ ans += Math.round(x*x)*x });\n\treturn Math.round(ans);\n\
    }", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    sum += Math.pow(lst[i],\
    \ 2);\n  }\n  return Math.round(sum);\n}\n", "    var nums=lst.reduce(function(p,c){\n\
    \    return Math.ceil(p)+Math.ceil(c);\n    }); \n    console.log(nums);\n   \
    \ return nums;\n}\n</code>\n<|/ a dscore=0 tags=javascript,functional-programming\
    \ |>\n<| c |>\nIt's interesting that this was accepted as correct answer while\
    \ `reduce` has more votes (and more votes for other answers). Can you explain\
    \ why? I thought that `reduce` was a better answer since it uses loops.\n<|/ c\
    \ |>\n<| c |>\n`reduce` uses loops just to compute each of the `accumulator values`.\
    \ So `reduce` here is still a loop\n<|/ c |>\n<| c |>\nWell you aren't looping\
    \ through `arr`, you are looping through `arr.reduce` which means you are looping\
    \ through `arr` twice (first to get `sum` and then to get `squares`). The OP was\
    \ asking for a way to avoid looping through `arr` twice so I think your answer\
    \ isn't quite right.\n<|/ c |>\n<| c |>\n, thanks for pointing that out. I updated\
    \ the answer\n<|/ c |>\n<| c |>\nI think you misunderstood my question. I don't\
    \ know how to avoid looping twice. I can only use looping once and I cannot use\
    \ looping twice.\n<|/ c |>\n<| a dscore=0 tags=javascript,functional-programming\
    \ |>\nA simple way is to use Array.reduce() to create a nested array of the squared\
    \ numbers and then sum them with Array.prototype.reduce(). Here is a working example:\n\
    \n<code>\nconst lst = [1, 2, 3, 4, 5]\n\nlet result = lst.reduce((acc, e) => {\n\
    \  const sq = Math.ceil(e) ** 2;\n  return acc.concat(sq);\n}, []);\n", "    const\
    \ res = [];\n    for (let i=0; i < lst.lenght; i++) {\n        const num = Math.ceil(lst[i]);\n\
    \        const sum = num * num;\n        res.push(sum);\n    }\n    return res;\n\
    }", "\t\n\tvar sum = 0;\n\tvar rounded = 0;\n\tvar square = 0;\n\t\n\tfor(var\
    \ i=0;i<lst.length;i++){\n\t\trounded = Math.ceil(lst[i]*100)\n\t\tsquare = rounded\
    \ * rounded;\n\t\tsum += square;\n\t}\n\treturn sum;\n}\n", "    if (lst.length\
    \ == 0) {\n      return 0;\n    } else {\n      var l2 = lst.length\n      if(l2==0){\n\
    \        return 0;\n      }\n      var sum_squares = 0;\n      for(var i=0;i<l2;i++){\n\
    \        sum_squares += lst[i]*lst[i];\n      }\n      return Math.ceil(Math.sqrt(sum_squares))\n\
    \    }\n  }\n  ", "   var sum = 0;\n   for(var i=0;i<lst.length;i++){\n      sum\
    \ += lst[i]*lst[i];\n   }\n   return Math.round(sum);\n}\n", "    let sum = 0;\n\
    \    for(let i=0; i < lst.length; i++)\n        sum += Math.ceil(lst[i]*lst[i]);\n\
    \    return sum;\n}\n</code>\n<|/ a |>\n<| a tags=javascript |>\n<code>\nlet input1\
    \ = [2.1,3.2,5.6];\nlet input2 = [2.5,3.4,5.8];\n", "    for(let i=0; i<lst.length;\
    \ i++){\n        lst[i] = Math.round(lst[i] * Math.pow(lst[i], 2));\n    }\n \
    \   return lst.map(Math.round);\n}\n</code>\n<|/ a dscore=1 tags=javascript,arrays,for-loop\
    \ |>\n<| a tags=javascript,arrays,for-loop |>\n<code>\nvar numbers = [\n   1.0,\
    \ 2.0, 3.0, 4.0,\n   5.0, 7.0, 9.0, 10.0,\n   11.0, 12.0, 13.0, 14.0,\n   15.0,\
    \ 16.0, 17.0, 18.0,\n   19.0, 20.0, 21.0, 22.0,\n   23.0, 24.0, 25.0, 26.0,\n\
    \   27.0, 28.0, 29.0, 30.0\n]\n\nvar total = 0\nvar squares = []\n\nnumbers.forEach((number)\
    \ =>{\n  total += Math.pow(number, 2)\n  squares.push(Math.pow(number, 2))\n})\n",
  "    var sum = 0;\n    for (var i = 0; i<lst.length; i++){\n        sum += Math.round(lst[i]*lst[i]);\n\
    \    }\n    return sum;\n}\n", "    let sum=0;\n    for (let i=0; i<lst.length;\
    \ i++){\n        sum+=lst[i]*lst[i];\n    }\n    return Math.round(sum);\n}\n",
  "    let sum = 0;\n    for (let i=0;i<lst.length;i++)\n    {\n        sum += Math.pow(Math.round(lst[i]),2);\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript |>\n\
    This should do it:\n\n<code>", "    let sqr_val = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        sqr_val += Math.ceil(lst[i] * lst[i]);\n    }\n    return sqr_val;\n\
    }\nmodule.exports = {\n    sum_squares,\n};\n\n},{}],24:[function(require,module,exports){",
  "    return sum(lst).map((num) => Math.ceil(Math.pow(num,2)))\n}\n</cell>\n<cell>\n\
    # Write a program to find the minimum in an array\n# You are given an array of\
    \ numbers.\n# You need to return the minimum number in the given array,\n# round\
    \ each element in the array to the lower int(Floor) first.", "    let s = 0;\n\
    \    for(let i of lst)\n        s = s + Math.ceil(i*i)\n    return s;\n}", "\t\
    var sum = 0;\n\tfor (var i = 0; i < lst.length; i++){\n\t\tsum += lst[i] * lst[i]\n\
    \t}\n\treturn Math.round(sum);\n}\n", "  var sum=0;\n  for(var i=0;i<lst.length;i++){\n\
    \    sum+=lst[i]*lst[i];\n  }\n  return Math.round(Math.sqrt(sum));\n}\n", " \
    \ var sum = 0;\n  var length = lst.length;\n  for(var i=0; i<length; i++){\n \
    \   sum += Math.ceil(lst[i] * lst[i]);\n  }\n  return sum;\n}\n</code></pre>\n\
    \        </section>\n\n        <section>\n          <h2>What is the Big-O?</h2>\n\
    \          <ul>\n            <li>Big-O is asymptotic notation for the growth rate\
    \ of algorithm as it grows above a certain threshold</li>\n            <li>For\
    \ a function to grow faster, it is said to have asymptotic growth rate</li>\n\
    \            <li>A function always grows faster than its input increases</li>\n\
    \            <li>O(n) is the upper bound on growth rate of any given function\
    \ f(n)</li>\n            <li>Think of it as \"How fast is the growth rate of f(n)\"\
    </li>\n          </ul>\n          <p>When you see an algorithm that grows faster\
    \ than the input, it's called an <code>O(n<sup>2</sup>)</code> algorithm</p>\n\
    \        </section>\n\n        <section>\n          <h2>What is the Big-O of <code>O(n)</code>?</h2>\n\
    \          <p><code>O(n)</code> refers to a function's run-time growth rate, as\
    \ n tends towards infinity</p>\n          <p>How fast can we go from <code>0</code>\
    \ to <code>n</code>? How fast can we go from <code>n</code> to <code>2n</code>?\
    \ How fast can we go from <code>2n</code> to <code>3n</code>? How fast can we\
    \ go from <code>n</code> to <code>10n</code>?</p>\n        </section>\n\n    \
    \    <section>\n          <h2>What is the Big-O of <code>O(n<sup>2</sup>)</code>?</h2>\n\
    \          <p><code>O(n)</code> refers to a function's run-time growth rate, as\
    \ n tends towards infinity</p>\n          <p>How fast can we go from <code>0</code>\
    \ to <code>n</code>? How fast can we go from <code>n</code> to <code>n<sup>2</sup></code>?\
    \ How fast can we go from <code>n<sup>2</sup></code> to <code>3n<sup>2</sup></code>?\
    \ How fast can we go from <code>n<sup>2</sup></code> to <code>10n<sup>2</sup></code>?</p>\n\
    \        </section>\n\n        <section>\n          <h2>What is the Big-O of <code>O(n<sup>3</sup>)</code>?</h2>\n\
    \          <p><code>O(n)</code> refers to a function's run-time growth rate, as\
    \ n tends towards infinity</p>\n          <p>How fast ", "  // Your code here!\n\
    \  var res= 0;\n  for (var i=0; i < lst.length; i++){\n    var el = lst[i];\n\
    \    el = el.toFixed(5);\n    el = parseFloat(el);\n    res += el * el;\n  }\n\
    \  return Math.round(res);\n}\n</code>\nThe function takes an array of numbers\
    \ and returns the sum of squared numbers of that array. I've added some rounding\
    \ in the return statement to make sure it works properly.\n<|/ a |>\n<| a dscore=1\
    \ |>\n<code>", "    let res = 0\n    for(let i = 0; i < lst.length; i++){\n  \
    \      res += Math.ceil(lst[i]) * Math.ceil(lst[i])\n    }\n    return res\n}",
  "    let sum = 0;\n    for(let i=0;i<lst.length;i++){\n        let temp = Math.ceil(lst[i]*lst[i]);\n\
    \        sum += temp;\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=javascript,arrays |>\nUse reduce function and map function. \n\n<code>\n\
    var arr = [1, 2, 3, 4, 5];", "    var sum = 0;\n    for(var i = 0; i< lst.length;\
    \ i++){\n        sum += Math.pow(lst[i], 2);\n    }\n    return Math.round(sum);\n\
    }\n", "    //Write your code here!\n    \n    var arr = []\n\n    var n = lst.length\n\
    \n    for(var i = 0; i < n; i++){\n        arr.push((Math.ceil(lst[i])*Math.ceil(lst[i])));\n\
    \    }\n\n    return Math.sqrt(arr.reduce(function(a, b){\n        return a +\
    \ b;\n    }, 0))\n}\n", "  var result = 0;\n  var len = lst.length;\n  for(var\
    \ i = 0; i<len; i++){\n    var x = lst[i];\n    result += Math.round(x*x);\n \
    \ }\n  return result;\n}\n", "  const sum = 0;\n  for(let num of lst){\n    sum\
    \ += Math.ceil(num * num);\n  }\n  return sum;\n}\n", "\tlet sum = 0;\n\tfor(let\
    \ i = 0; i < lst.length; i++){\n\t\tsum += lst[i] * lst[i]\n\t}\n\treturn Math.round(sum);\n\
    }\n", "\tvar i, sum=0;\n\tfor(i=0;i<lst.length;i++){\n\t\tsum=sum+lst[i]*lst[i];\n\
    \t}\n\treturn Math.round(sum*100000)/100000;\n}", "\tvar l = lst.length, sum=0;\n\
    \tfor(var i = 0; i < l; i++) {\n\t\tsum += Math.pow(lst[i], 2);\n\t}\n\treturn\
    \ Math.round(sum);\n}\n", "  let nums = lst.map(el => Math.ceil(el*el))\n  let\
    \ sum = 0\n  for(let i=0; i< nums.length; i++){\n    sum += nums[i]\n  }\n  return\
    \ sum\n}\n", "    // your code here\n    let sum = 0;\n    let sqsum = 0;\n  \
    \  for(let i = 0; i < lst.length; i++){\n        sqsum = lst[i] * lst[i];\n  \
    \      sum = sum + sqsum;\n    }\n    return Math.ceil(sum);\n}", "  var sum =\
    \ 0;\n  var rounded = 0;\n  var squares = [];\n  for(var i=0;i<lst.length;i++){\n\
    \    rounded = Math.round(lst[i]*10)/10;\n    squares.push(rounded*rounded);\n\
    \    sum += rounded;\n  }\n  return sum-sum_squares(squares);\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\n`lst = [-1.0]` does not work. Try it out. Also, `sum_squares([1.0])`\
    \ returns `NaN`. Try it out. This answer works but is a bit heavy. Try it out.\n\
    <|/ c |>\n<| c |>\nGood point! It did work when I ran it with the example cases.\
    \ Updated the code accordingly\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  return\
    \ Math.ceil(Math.sqrt(lst.reduce((a,b)=>a*a+b*b)))\n}\n", "  // var lst = lst.map(Math.ceil);\n\
    \  let sum = 0;\n  lst.map(x=>{\n    sum += Math.pow(x, 2);\n  });\n  return sum;\n\
    }\n", "    if(!lst.length){\n        return 0;\n    }\n    var sum = 0;\n    for(var\
    \ i=0;i<lst.length;i++){\n        var num = Math.ceil(lst[i]);\n        sum +=\
    \ Math.pow(num,2);\n    }\n    return sum;\n}\n", "  var s = 0;\n  for(var i =\
    \ 0; i < lst.length; i++){\n    s += lst[i]*lst[i];\n  }\n  return Math.ceil(s);\n\
    }\n</cell>\n<cell>\n# Check your solution matches our expectations!\nsol = sum_squares([1.0,\
    \ 2.0, 3.0])\nprint(sol)\nassert sol == 14\nsol = sum_squares([1.0, 4.0, 9.0])\n\
    print(sol)\nassert sol == 98\nsol = sum_squares([1.0, 3.0, 5.0, 7.0])\nprint(sol)\n\
    assert sol == 84\nsol = sum_squares([1.4, 4.2, 0.0])\nprint(sol)\nassert sol ==\
    \ 29\nsol = sum_squares([-2.4, 1.0, 1.0])\nprint(sol)\nassert sol == 6\n</cell>\n\
    <text>\nProblem 7\n\n</text>\n<text>\nThe Fibonacci sequence is defined by the\
    \ recurrence relation:\n\nFn = F(n-1) + F(n-2) for n > 1.\nHence the first 12\
    \ terms will be:\n\nF(1) = 1\nF(2) = 1\nF(3) = 1\nF(4) = 2 \nF(5) = 3 \nF(6) =\
    \ 5 \nF(7) = 8 \nF(8) = 13 \nF(9) = 21 \nF(10) = 34 \nF(11) = 55 \nF(12) = 89\n\
    \n\nUsing the rule above and starting with F(12), what is the index of the first\
    \ term in the Fibonacci sequence to equal 16?\n\n\n</text>\n<cell>\ndef fib_12(n):\n\
    \    \"\"\"Find index of Fibonacci number that equals n\"\"\"\n    fib = [1,1]\n\
    \    i = 2\n    while fib[i] < n:\n        fib[i] = fib[i-1] + fib[i-2]\n    \
    \    i += 1\n    return fib[i]-1\n</cell>\n<cell>\n# Check your solution matches\
    \ our expectations:\nassert fib_12(1) == 1\nassert fib_12(2) == 1\nassert fib_12(3)\
    \ == 1\nassert fib_12(4) == 2\nassert fib_12(5) == 3\nassert fib_12(6) == 5\n\
    assert fib_12(7) == 8\nassert fib_12(8) == 13\nassert fib_12(9) == 21\nassert\
    \ fib_12(10) == 34\nassert fib_12(11) == 55\nassert fib_12(12) == 89\nassert fib_12(13)\
    \ == 16\nassert fib_12(14) == 23\nassert fib_12(15) == 30\nassert fib_12(16) == ",
  "    //Use reduce\n    return lst.reduce(function (s, n) {\n        var roundedN\
    \ = Math.ceil(Math.sqrt(n));\n        return s + roundedN * roundedN;\n    },\
    \ 0);\n}\n", "    var sum = 0;\n    for(var i=0;i<lst.length;i++){\n        sum\
    \ += Math.pow(lst[i], 2);\n    }\n    return Math.round(sum);\n}", "\tlet sum\
    \ = 0;\n\tfor (let num of lst) {\n\t\tsum += Math.pow(num, 2);\n\t}\n\treturn\
    \ Math.round(sum);\n}\n", "  var sum = 0;\n  for(var i=0; i<lst.length; i++){\n\
    \    sum += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n  }\n  return sum;\n}\n",
  "\tlet result = 0;\n\tfor(let i = 0; i < lst.length; i++){\n\t\tresult += (Math.round(lst[i])\
    \ * lst[i])\n\t}\n\treturn Math.ceil(result)\n}\n", "    \n    var sum = 0;\n\
    \    for(var i=0;i<lst.length;i++){\n        sum = sum + Math.pow(lst[i],2);\n\
    \    }\n    return Math.round(sum);\n    \n}", "    var sum = 0;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        sum += Math.ceil(lst[i]*lst[i]);\n   \
    \ }\n    return sum;\n}\n", "    if(lst.length == 0){\n        return 0;\n   \
    \ }\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        sum +=\
    \ Math.pow(lst[i], 2);\n    }\n    return Math.round(sum);\n}\n", "  let arr =\
    \ [...lst];\n  let sum = 0;\n  arr.map(n => Math.round(Math.ceil(n*(n+1)/2)));\n\
    \  arr.map(n => sum += n*(n+1)/2);\n  return sum;\n}\n</code>\n<|/ a dscore=1\
    \ tags=javascript,math,algorithm,function |>\n<| c |>\nHi, Thanks for your detailed\
    \ explanation. I'm a beginner and I didn't know about this way of implementing\
    \ the methods. Thanks again.\n<|/ c |>\n<| c |>\nI didn't realize there were so\
    \ many ways of doing this. Thanks for your time and effort.\n<|/ c |>\n<| a tags=javascript,math,algorithm,function\
    \ |>\nFirst thing you need to do is round the numbers to the nearest whole number\
    \ using Math.ceil.\nNext thing you need to do is get the sum of all the numbers\
    \ (since you have the ceiling numbers already) which can be done using Math.sum.\n\
    Now you just need to divide each number by the sum of all the numbers to get the\
    \ mean of the numbers.\nThis is my solution:\n\n<code>\nlet nums = [1.0, 4.0,\
    \ 9.0]\n\nlet sumOfNums = nums.reduce( (a,b) => a + b, 0);\nlet means = nums.map(\
    \ (n) => {\n  let newNum = Math.ceil(n/sumOfNums);\n  return newNum;\n});", " \
    \ var sum = 0;\n  for (var i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i],\
    \ 2);\n  }\n  return sum;\n}\n", "    var sum_sq = 0;\n    for(var i = 0; i <\
    \ lst.length; i++){\n        sum_sq += lst[i]*lst[i];\n    }\n    return Math.ceil(sum_sq);\n\
    }\n", "    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n        sum +=\
    \ Math.ceil(lst[i]*lst[i])\n    }\n    return sum;\n}", "  // your code here\n\
    \  \n  // return Math.round(Math.pow(lst.reduce((a,b)=>a+b),2));\n  \n}\n", " \
    \   var sum=0;\n    for(var i=0;i<lst.length;i++){\n        sum+=lst[i]*lst[i]\n\
    \    }\n    return Math.round(Math.ceil(sum));\n}\nsum_squares([-100,2,3.14])//Returns\
    \ -46.999999999999996\n</code>\n<|/ a |>\n<| c |>\nThe question is about JavaScript.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "\tvar result = 0;\n\tfor(var i=0; i<lst.length;\
    \ i++){\n\t\tresult += Math.pow(lst[i], 2);\n\t}\n\treturn Math.ceil(Math.sqrt(result));\n\
    }\n", "    return lst.map(function(num) {return Math.ceil(Math.pow(num, 2))}).reduce(function(a,\
    \ b) {return a+b});\n}\n", "    return lst.reduce((acc, curr) => (+curr).toFixed(Math.ceil(curr))*curr*curr,\
    \ 0);\n}", "\tlet sum = 0;\n\tfor(let i = 0; i < lst.length; i++){\n\t\tlet n\
    \ = Math.ceil(lst[i]);\n\t\tsum += n*n\n\t}\n\treturn sum;\n}", "  let res = 0\n\
    \  lst.forEach(function(item){\n    res += item * item\n  })\n  res = Math.round(res)\
    \ // round the number\n  return res\n}", "    var i, sum = 0;\n    for (i = 0;\
    \ i < lst.length; i++) {\n        sum += Math.ceil(lst[i] * lst[i]);\n    }\n\
    \    return sum;\n}", "    let squares = lst.reduce((a,b)=>(a+b*b),0)\n    return\
    \ Math.round(squares*Math.pow(10,10))\n}\n", "    let sqr_sum = 0;\n    for(let\
    \ num of lst){\n        sqr_sum += Math.ceil(num * num);\n    }\n    return sqr_sum;\n\
    }\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum\
    \ += Math.ceil(lst[i]);\n    }\n    return sum;\n}", "  var ans = 0;\n  for(var\
    \ i = 0; i < lst.length; i++){\n    var num = Math.ceil(lst[i] * lst[i]); \n \
    \   ans += Math.pow(num, 2);\n  }\n  return ans;\n}\n", "  //Write your code here\n\
    \  let sum = 0;\n  lst.map(function(n){\n    n = Math.round(Math.ceil(n));\n \
    \   sum += n*n;\n  })\n  return sum;\n}\n", "  var res = 0;\n  for (var i = 0,\
    \ len = lst.length; i < len; i++) {\n    var val = Math.round(lst[i]);\n    res\
    \ += val * val;\n  }\n  return res;\n}\n", "  let total = 0;\n  lst.forEach((elem)=>{\n\
    \    total+=Math.ceil(elem*elem);\n  });\n  return Math.round(total);\n}", " \
    \ return lst.map(function (e) {\n    return Math.ceil(Math.sqrt(e));\n  }).reduce(function\
    \ (a, b) {\n    return a + b;\n  });\n}", "  var result = 0;\n  for(var i=0;i<lst.length;i++){\n\
    \    result += (lst[i]*lst[i]);\n  }\n  return Math.ceil(result)\n}\n", "    var\
    \ sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        sum += Math.pow(lst[i],2);\n\
    \    }\n    return Math.round(sum);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nThis works:\n<code>", "    let s = 0;\n    for(let i=0; i<lst.length; i++){\n\
    \        s += lst[i]*lst[i];\n    }\n    return Math.round(Math.sqrt(s));\n}\n",
  "    var sum = 0\n    for(var i=0; i < lst.length; i++){\n        sum += Math.ceil(lst[i]\
    \ * lst[i])\n    }\n    return sum;\n}\n</code>\n<|/ a tags=javascript dscore=0\
    \ |>\n<| c |>\nI like this solution, thanks! I'll have to try implementing it\
    \ in my code later to see how it works.\n<|/ c |>\n<| a tags=javascript |>\n<code>",
  "  return lst.map((v)=>Math.round(v*v)+v).reduce(function(a,b){return Math.max(a,b)});\n\
    }\n", "    //var sum_squares = 0;\n    var sum_of_squares=0;\n    for(var i =\
    \ 0; i < lst.length; i++){\n        var x = lst[i];\n        sum_of_squares +=\
    \ Math.ceil(x*x);\n    }\n    return sum_of_squares;\n}\n</code></pre>\n\n   \
    \     </section>\n\n        <section>\n            <h3>Exercise 1</h3>\n     \
    \       <p>Write the function sum_squares(lst) that sums up the squares of the\
    \ numbers in the list.</p>\n            <pre><code>function sum_squares(lst){\n\
    \    var sum_of_squares=0;\n    for(var i = 0; i < lst.length; i++){\n       \
    \ var x = lst[i];\n        sum_of_squares += Math.ceil(x*x);\n    }\n    return\
    \ sum_of_squares;\n}\n</code></pre>\n        </section>\n\n        <section>\n\
    \            <h3>Exercise 2</h3>\n            <p>Write the function sum_of_square_roots(lst)\
    \ that sums up the square roots of the numbers in the list.</p>\n            <pre><code>function\
    \ sum_of_square_roots(lst){\n    var sum_of_square_roots=0;\n    for(var i = 0;\
    \ i < lst.length; i++){\n        var x = lst[i];\n        sum_of_square_roots\
    \ += Math.pow(x,1/2);\n    }\n    return sum_of_square_roots;\n}\n</code></pre>\n\
    \        </section>\n\n        <section>\n            <h3>Exercise 3</h3>\n  \
    \          <p>Write the function count_evens(lst) that counts how many numbers\
    \ in the list are even.</p>\n            <pre><code>function count_evens(lst){\n\
    \    var count_of_evens=0;\n    for(var i = 0; i < lst.length; i++){\n       \
    \ var x = lst[i];\n        if(x % 2===0){\n            count_of_evens++;\n   \
    \     }\n    }\n    return count_of_evens;\n}\n</code></pre>\n        </section>\n\
    \n        <section>\n            <h3>Exercise 4</h3>\n            <p>Write the\
    \ function count_odd(lst) that counts how many numbers in the list are odd.</p>\n\
    \            <pre><code>function count_odd(lst){\n    var count_of_odds=0;\n \
    \   for(var i = 0; i < lst.length; i++){\n        var x = lst[i];\n        if(x\
    \ % 2!==0){\n            count_of_odds++;\n        }\n    }\n    return count_of_odds;\n\
    }\n</code></pre>\n        </section>\n\n        <section>\n            <h3>Exercise\
    \ 5</h3>\n            <p>Write the function count_odd_squares(lst) that counts\
    \ how many numbers in the list are odd and square them.</p>\n            <pre><code>function\
    \ count_odd_squares(lst){\n    var count_of_odd_squares=0;\n    for(var i = 0;\
    \ i < lst.length; i++){\n        var x = lst[i];\n        if(x % 2!==0){\n   \
    \         count_of_odd_squares++;", "    let sum = 0;\n    for (let i = 0; i <\
    \ lst.length; i++){\n        sum += Math.ceil(lst[i]) * Math.ceil(lst[i])\n  \
    \  }\n    return sum;\n}\n", "    return lst.map( Math.ceil ).reduce( function\
    \ (a, b) { return a + b; } );\n}\n</code>\n<|/ a tags=javascript dscore=2 |>\n\
    <| a dscore=1 tags=javascript |>\n<code>", "    let sum = 0;\n    let l = lst.length;\n\
    \    for(let i=0; i<l; i++){\n        sum += Math.ceil(lst[i]*lst[i]);\n    }\n\
    \    return sum;\n}\n", "    var sum = 0;\n    for(var i=0; i<lst.length; i++){\n\
    \        sum += Math.pow(lst[i], 2);\n    }\n    return Math.round(sum);\n}\n",
  "    var sum = 0;\n    for(var i=0;i<lst.length;i++){\n        sum += Math.round(lst[i]*lst[i]);\
    \ //round to ceiling(Math.ceil)\n    }\n    return sum;\n}", "    for(let i =\
    \ 0; i < lst.length; i++){\n        lst[i] = Math.ceil(lst[i]);\n    }\n    return\
    \ lst.reduce(function(total, num){\n        return total + Math.pow(num, 2);\n\
    \    }, 0);\n}\nlet result = sum_squares([-3.4, 2.4, -7.8]);", "    var sum =\
    \ 0;\n    for (var i = 0; i < lst.length; i++) {\n        sum += Math.pow(lst[i],\
    \ 2);\n    }\n    return sum;\n}\n", "\tconst len = lst.length\n\tif(!len)\n\t\
    \treturn 0\n\tconst max_val = Math.max(...lst)\n\tconst min_val = Math.min(...lst)\n\
    \tconst sum_vals = lst.reduce((acc, val) => acc + Math.pow(val - min_val, 2),\
    \ 0)\n\treturn Math.round(sum_vals / Math.pow(max_val-min_val, 2))\n}\n", "  var\
    \ sq = [];\n  lst.forEach(function(num) {\n    num = Math.round(num);\n    sq.push(num*num);\n\
    \  });\n  return sq.reduce(function(a, b) {return a+b});\n}\n", "    let ans =\
    \ lst.reduce((a,b)=>{\n        return Math.ceil(a+b)*Math.ceil(a+b);\n    },0);\n\
    \    return Math.round(ans);\n}", "  var sum = 0;\n  for(var i = 0; i < lst.length;\
    \ i++){\n    sum += lst[i]*lst[i];\n  }\n  return Math.round(sum);\n}", "    var\
    \ sum_sq = lst.reduce((acc, x)=>acc+Math.pow(x, 2), 0);\n    return Math.round(sum_sq);\n\
    }\n", "    var sum = 0;\n    for(var i = 0;i < lst.length;i++){\n        sum +=\
    \ Math.ceil(lst[i]);\n        sum += Math.floor(lst[i]);\n    }\n    return sum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nvar sum=Math.sqrt(sum);\n</code>\n\
    <|/ a tags=javascript,python,arrays,math,square-root dscore=0 |>\n<| c |>\nCode\
    \ dumps without any explanation are rarely helpful. Stack Overflow is about learning,\
    \ not providing snippets to blindly copy and paste. Please [edit] your question\
    \ and explain how it works better than what the OP provided.\n<|/ c |>\n<| c |>\n\
    This code will crash when called with negative numbers, since sqrt will try to\
    \ calculate the square root of a negative number\n<|/ c |>\n<| a tags=javascript,python,arrays,math,square-root\
    \ dscore=0 |>\n<code>", "  let result = 0;\n  for(var i = 0; i < lst.length; i++){\n\
    \    result = result + (lst[i] * lst[i]);\n  }\n  return Math.ceil(result * 0.5);\n\
    }\n", "  var sum = 0;\n  for(var i in lst){\n    sum += lst[i] * lst[i];\n  }\n\
    \  return Math.round(sum);\n}\n", "  let result = 0;\n  for (let element of lst)\
    \ {\n    result += Math.ceil(element * element);\n  }\n  return result;\n}\n</code>\n\
    <|/ a tags=javascript |>\n<| c |>\nI think you meant `Math.ceil(element * element)`\
    \ instead of `Math.ceil(Math.sqrt(element))`\n<|/ c |>\n<| c |>\nOh, you were\
    \ right, I meant ceil instead of sqrt. Thanks for catching that.\n<|/ c |>\n<|\
    \ a dscore=3 |>\nThe easiest way to solve this problem is to convert each element\
    \ to floating point number. Math.ceil and Math.floor take floating points as argument.\
    \ Here's a sample implementation:\n\n<code>", "    let sum = 0\n    for(let num\
    \ of lst){\n        sum += Math.ceil(num*num)\n    }\n    return sum\n}\n", " \
    \ return lst.map( function(x){ \n    return Math.pow(Math.ceil(x), 2);\n  }).reduce(function(acc,\
    \ x){ return acc + x; }, 0);\n}\n</cell>\n<cell>\nsum_squares([-3.4,-3.3,-4.4,-4.3,-4.4,-7.4,-4.2,-4.2,-4.5,-3.2,-4.0])\n\
    </cell>\n<text>\nWrite a function that returns the greatest common divisor of\
    \ two numbers.\n\n\n</text>\n<cell>", "  return Math.ceil(Math.sqrt(lst.map(function(x)\
    \ { return Math.pow(x, 2); }).reduce(function(a, b) { return a + b; }))\n}\n",
  "    let sum = 0\n    for(let i = 0; i < lst.length; i++){\n        sum += Math.ceil(lst[i]*lst[i])\n\
    \    }\n    return sum\n}\n</code>\n<|/ a |>\n<| c |>\nThis is great! The only\
    \ thing I'm curious about is how this would change if I wanted to use the Math.ceil\
    \ function instead? Thanks!\n<|/ c |>\n<| c |>\nI have changed the answer to use\
    \ Math.ceil.\n<|/ c |>\n<| c |>\nI think you should be using `Math.ceil()` because\
    \ `Math.floor(3.0)` returns `3` and `Math.ceil(3.0)` returns `4`. The `Math.ceil()`\
    \ function returns `4`.\n<|/ c |>\n<| c |>\nI have modified the answer. Thank\
    \ you for pointing it out.\n<|/ c |>\n<| a dscore=1 tags=javascript |>\nHere's\
    \ another way - a more \"functional\" way:\n<code>", "  var sum=0;\n  lst.sort(function(a,\
    \ b){return b-a});\n  for(var i=0;i<lst.length;i++){\n    sum+=Math.pow(Math.abs(lst[i]),2);\n\
    \  }\n  return sum;\n}\n</cell>\n<cell>\n#check\nlst = [1,2,3,4,5]\nprint(sum_squares(lst))\n\
    </cell>\n<text>\nQuestion 5\nWrite a Python function that, given a list of integers\
    \ returns a list of all the positive integers. \nFor example,\n>>> positive([1,\
    \ 2, -3, 10, 0])\n[1, 2, 3, 10, 0]\n>>> positive([1, 3, -4, 0])\n[1, 3, 0]\n>>>\
    \ positive([2, 4, -6, -8])\n[2, 4, 6, 8]\n\n</text>\n<cell>\n#check\ndef positive(lst):\n\
    \  if(lst==[]):\n    return lst\n  else:\n    return [i for i in lst if i>0]\n\
    positive([1,3,-4,0])\n</cell>\n<text>\nQuestion 6\nWrite a Python function that,\
    \ given a list of integers returns a list of all the negative integers. \nFor\
    \ example,\n>>> negative([1, 2, -3, 10, 0])\n[-3, -2, -1, 10, 0]\n>>> negative([1,\
    \ 3, -4, 0])\n[-4, -3, -2, -1, 0]\n>>> negative([2, 4, -6, -8])\n[-6, -4, -2,\
    \ 0, 2, 4]\n\n</text>\n<cell>\n#check\ndef negative(lst):\n  if(lst==[]):\n  \
    \  return lst\n  else:\n    return [i for i in lst if i<0]\nnegative([1,3,-4,0])\n\
    </cell>\n<text>\nQuestion 7\nWrite a Python function that, given a list of integers,\
    \ returns the number of positive integers \nthat exist in the list while ignoring\
    \ the integers that are 0\nFor example,\n>>> positive_count([1, 2, -3, 10, 0])\n\
    2\n>>> positive_count([1, 3, -4, 0])\n2\n>>> positive_count([2, 4, -6, -8])\n\
    0\n\n</text>\n<cell>\n#check\ndef positive(lst):\n  if(lst==[]):\n    return lst\n\
    \  else:\n    return [i for i in lst if i>0]\ndef positive_count(lst):\n  if(lst==[]):\n\
    \    return 0\n  else:\n    return len([i for i in lst if i>0])\npositive_count([1,3,-4,0])\n\
    </cell>\n<text>\nQuestion 8\nWrite a Python function that, given a list of integers,\
    \ returns the number of negative integers \nthat exist in the list while ignoring\
    \ the integers that are 0\nFor example,\n>>> negative_count([1, 2, -3, 10, 0])\n\
    1\n>>> negative_count([1, 3, -4, 0])\n3\n>>> negative_count([2, 4, -6, -8])\n\
    0\n\n</text>\n<", "  if (lst.length < 2){\n    return 0\n  }\n  var sum = 0\n\
    \  for (var i = 0; i<lst.length; i++){\n    sum += lst[i]*lst[i]\n  }\n  return\
    \ Math.round(sum)\n}\n", "    var sum = 0;\n    for (var i=0; i<lst.length; i++){\n\
    \        sum += Math.ceil(lst[i]*lst[i]);\n    }\n    return sum;\n}\n", "\tlst.sort(function(a,\
    \ b){\n\t\treturn Math.ceil(a) - a;\n\t});\n\treturn lst.reduce(function(a, b){\n\
    \t\treturn a + Math.pow(Math.ceil(b) - b, 2);\n\t});\n}\n", "  var sum = 0;\n\
    \  var sq = [];\n  for (var i = 0, len = lst.length; i < len; i++) {\n    sq[i]\
    \ = lst[i] * lst[i];\n  }\n  for (var i = 0; i < len; i++) {\n    sum += sq[i];\n\
    \  }\n  return Math.round(sum);\n}\n", "  if(lst.length < 1) return 0;\n  var\
    \ sum = 0, i;\n  for(i=0; i<lst.length; i++){\n    sum += lst[i] * lst[i];\n \
    \ }\n  return Math.round(sum);\n}", "\tif(!lst.length) return 0;\n\treturn lst.reduce((sum,\
    \ num) => sum + Math.pow(num, 2), 0);\n}\n", "    \n    let sum = 0;\n\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        sum += Math.ceil(lst[i] * lst[i]);\n\
    \    }\n\n    return sum;\n}\n", "    var sum=0;\n    for (var i=0; i<lst.length;\
    \ i++){\n        sum+=Math.ceil(lst[i]);\n        sum+=lst[i]*lst[i];\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a |>\n<| c |>\nWhat about using Math.ceil?\n\
    <|/ c |>\n<| c |>\nYes, that's how I'd do it.  It should be faster than Math.Math.ceil.\n\
    <|/ c |>\n<| a tags=arrays,javascript |>\nYou can do like this\n<code>", "  return\
    \ Math.ceil(Math.pow(sum (lst.map (Math.round)), 2) / lst.length)\n}\n\nvar lst_3\
    \ = lst([1.4, 4.2, 0.0]);", "  return lst.reduce(function(a, b){\n    return a\
    \ + Math.round(b * b)\n  })\n}\n", "  const n = lst.length;\n  let result = 0;\n\
    \  for (let i=0; i<n; i++){\n    result+=Math.ceil(lst[i])*Math.ceil(lst[i]);\n\
    \  }\n  return result;\n}\n", "  return lst.reduce(function(sum,n){\n    var val\
    \ = Math.ceil(Math.sqrt(n));\n    return sum + val*val;\n  },0);\n}", "    let\
    \ sum = 0;\n    for (let num of lst) {\n        sum += num * num;\n    }\n   \
    \ return Math.round(sum);\n}\n", "\tvar sum=0\n\tfor (var i=0; i<lst.length; i++){\n\
    \t\tsum += Math.pow(lst[i], 2)\n\t}\n\treturn Math.round(sum)\n}\n", "    let\
    \ arr = []\n    for(let i = 0; i < lst.length; i++){\n      arr.push(Math.ceil(lst[i]))\n\
    \    }\n    return arr.reduce((a,b) => a + b, 0)\n}\n", "  lst.sort(function(a,\
    \ b) {return a-b});\n  return lst.reduce(function(a, b){return a + Math.pow(b,\
    \ 2)}, 0);\n}", "  var sum=0;\n  for(var i=0; i<lst.length; i++){\n    sum +=\
    \ Math.pow(Math.round(lst[i]), 2);\n  }\n  return sum;\n}\n", "  if(!lst.length)\n\
    \    return null;\n  return lst.reduce((acc, cur) => acc + Math.pow(cur,2), 0);\n\
    }\n", "  var sum = 0;\n  for(var i=0; i<lst.length; i++){\n    var d = Math.round(lst[i]);\n\
    \    sum += d*d;\n  }\n  return sum;\n}\n", "  return lst.map((x) => Math.ceil(x\
    \ * x)).map((x) => Math.round(x)).sum();\n}", "    let total = 0;\n    for (let\
    \ i = 0; i < lst.length; i++){\n        total += Math.ceil(lst[i]*lst[i]);\n \
    \   }\n    return total;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,math,javascript,sorting,algorithm\
    \ dscore=0 |>\n<code>\nlet inputArray = [1, 2, 3, 4];\n\nlet outputArray = inputArray.map(a\
    \ => (a * a));\nlet sum = outputArray.reduce((a, b) => a + b, 0);\nlet result\
    \ = sum.toFixed(2);", "  //sum is 0 initially\n  var sum = 0;\n  //loop over the\
    \ list\n  for(var i in lst){\n    //get the squares\n    var squares=Math.pow(lst[i],\
    \ 2);\n    //add them up\n    sum += squares;\n  }\n  //round up\n  return Math.ceil(sum);\n\
    }\n", "  let sum = 0;\n  for (let i=0; i<lst.length; i++)\n  {\n    sum += Math.ceil(lst[i]*lst[i]);\n\
    \  }\n  return sum;\n}\n", "    var n = lst.length;\n    var sum = 0;\n    for(var\
    \ i=0; i<n; i++){\n        sum += lst[i]*lst[i];\n    }\n    return Math.round(sum*n)/n;\n\
    }\n", "  if(lst.length==0){\n    return 0\n  }\n\n  lst.forEach(function(item){\n\
    \    item = Math.ceil(item)\n  });\n\n  var result = Math.pow(lst.reduce(function(previousValue,\
    \ currentValue){ \n      return previousValue + Math.pow(currentValue, 2)\n  }),\
    \ 0.5);\n  return result;\n}", "    return lst.reduce(function(x,y){return x+y;}).round().toFixed(2);\n\
    }\n", "  let sum=0;\n  lst.map(function(ele){\n    sum+=Math.round(ele*ele);\n\
    \  });\n  return sum;\n}\n", "\tlet sum=0;\n\tlst.map(function(num){\n\t\tlet\
    \ num=Math.round(num*Math.ceil(num));\n\t\tsum+=num*num;\n\t});\n\treturn sum;\n\
    }\n", "    if(lst.length <= 0){\n        return 0\n    }\n    var sum = 0;\n \
    \   for(var i =0; i < lst.length; i++){\n        sum += Math.ceil(lst[i]*lst[i]);\n\
    \    }\n    return sum;\n}\n", "    sum = 0;\n    for (i = 0; i < lst.length;\
    \ i++){\n        sum += Math.ceil(lst[i] * lst[i]);\n    }\n    return sum;\n\
    }\n", "  let sum = 0;\n  lst.forEach(element => {\n      sum += Math.pow(element,\
    \ 2);\n  });\n  return sum;\n}\n", "  \n  lst.sort();\n  let sum = 0;\n  let i;\n\
    \  for (i = 0; i < lst.length; i++){\n    sum += Math.ceil(lst[i] * lst[i]);\n\
    \  }\n  return sum;\n}\n", "\tvar sum = 0;\n\tfor (var i=0; i<lst.length; i++)\
    \ {\n\t\tsum += lst[i] * lst[i];\n\t}\n\treturn Math.round(sum);\n}\n", "  let\
    \ lst_of_squares = [];\n  for(let i=0;i<lst.length;i++){\n    lst_of_squares.push(lst[i]*lst[i]);\n\
    \  }\n  return Math.ceil(Math.pow(...lst_of_squares));\n}\n", "    for(i = 0;\
    \ i< lst.length; i++){\n        lst[i] = Math.round(lst[i]*lst[i]);\n    }\n \
    \   var sum=0;\n    for(i = 0; i< lst.length; i++){\n        sum += lst[i];\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThank you for\
    \ this answer, but I was looking for something more general, more readable and\
    \ less time-complex. Also I forgot to mention this in my question (I edited it\
    \ now). Your answer works but I want to avoid using Math.round since it's very\
    \ slow for large lists.\n<|/ c |>\n<| a dscore=1 |>\n<code>\ndef sum_squares(l):\n\
    \    squares = []\n    for e in l:\n        squares.append(e*e)\n    return sum(squares)\n\
    </code>\n<|/ a tags=python,python-3.x,math,algorithm |>\n<| a tags=python,python-3.x,math,algorithm\
    \ dscore=1 |>\nAn alternative to the previous answers.\n<code>\ndef sum_squares(l):\n\
    \    return sum([i*i for i in l])\n</code>\n<|/ a |>\n<| a tags=python,python-3.x,math,algorithm\
    \ dscore=0 |>\nAn alternative to the other answers.\n<code>\ndef sum_squares(l):\n\
    \    squares = []\n    for e in l:\n        squares.append(e*e)\n    return sum(squares)\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\ndef sum_squares(lst):\n    squares\
    \ = []\n    for e in lst:\n        squares.append(e*e)\n    return sum(squares)\n\
    \n# test\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sum_squares(lst)) # ->\
    \ 4960\n</code>\n<|/ a tags=python,python-3.x,math,algorithm |>\n<| a tags=python,python-3.x,math,algorithm\
    \ dscore=0 |>\nUsing generators:\n<code>\ndef sum_squares(l):\n    return sum(x*x\
    \ for x in l)\n\nprint(sum_squares([1,2,3])) # -> 9\n</code>\n<|/ a |>\n<| a tags=python,python-3.x,math,algorithm\
    \ dscore=0 |>\n<code>\nlst = [1,2,3,4,5]\n\ndef sum_of_squares(lst):\n    squares\
    \ = map(lambda x: x ** 2, lst)\n    return sum(squares)\n\nprint(sum_of_squares(lst))\n\
    </code>\n<|/ a |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or ", "    let sum = 0;\n    lst.forEach((elem)=>{\n\
    \        sum += Math.ceil(elem*elem)\n    })\n    return sum\n}\n", "  return\
    \ Math.ceil(Math.sqrt(lst.map(Math.round)\n                              .reduce(function(a,\
    \ b){return a+b;})));\n}\n</cell>\n<text>\nExtras\n\n</text>\n<text>\nExercise\
    \ 1\nWrite a function to check if a list of numbers contains a number\n\nReturn\
    \ false if the list is empty\n\nReturn true if the list contains at least on number\
    \ that is even\n\n</text>\n<cell>", "    var sum = 0.0;\n    var n = lst.length;\n\
    \    for(var i = 0; i < n; i++){\n        sum += Math.ceil(lst[i] * lst[i]);\n\
    \    }\n    return sum;\n}\n\nvar sum_of_squares = sum_squares(lst);\n", "  let\
    \ result=0;\n  if(lst.length>0){\n    for(let i=0;i<lst.length;i++){\n      let\
    \ num=lst[i]\n      if(num>0){\n        result+=Math.ceil(num*num)\n      }\n\
    \    }\n  }\n  return result\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++){\n    sum += Math.ceil(lst[i] * lst[i]); //rounding up\n  }\n  return sum;\n\
    }\n", "  var res = [];\n  var sq = lst.map(function(x){return Math.round(x * x)});\n\
    \  \n  for(var i = 0; i < lst.length; i++){\n    res.push(sq[i]);\n  }\n\n  return\
    \ Math.ceil(Math.pow(...res.map(function(x){return x}))); // Math.pow(x,y) =>\
    \ Math.pow(x,(y+1))\n}\n\nvar sum_squares2 = function(arr){\n  var sum = 0;\n\
    \  for(var i = 0; i < arr.length; i++){\n    sum += arr[i]*arr[i];\n  }\n  return\
    \ Math.ceil(Math.pow(sum, 2));\n}\n\nvar sum_squares3 = function(arr){\n  var\
    \ sum = 0;\n  for(var i = 0; i < arr.length; i++){\n    sum += Math.ceil(arr[i]*arr[i]);\n\
    \  }\n  return Math.pow(sum, 2);\n}\n\nvar sum_squares4 = function(arr){\n  return\
    \ Math.ceil(Math.pow(..arr.map(Math.ceil)));\n}\n\nvar sum_squares5 = function(arr){\n\
    \  return Math.pow(...arr.map(Math.ceil));\n}\n", "    return lst.map(x => Math.ceil(x*x)).reduce((a,\
    \ b) => a+b);\n}\n", "  var sum = 0;\n  var squares = [];\n  for (var i = 0; i\
    \ < lst.length; i++) {\n    sum += lst[i]*lst[i];\n    squares.push(Math.round(Math.ceil(Math.pow(lst[i],\
    \ 2))*1000)/1000);\n  }\n  return sum;\n}\n", "  var sum = 0;\n  for(var i=0;i<lst.length;i++){\n\
    \    var square = Math.ceil(lst[i]*lst[i]);\n    sum += square;\n  }\n  return\
    \ sum;\n}\n", "  var res = 0\n  lst.forEach(function(n) {\n    res = res + Math.pow(Math.round(n),2)\n\
    \  })\n  return res\n}", "    if (lst.length < 2) return 0;\n    let sum = 0;\n\
    \    for (let i = 0; i < lst.length; i++){\n      sum += Math.pow(lst[i], 2);\n\
    \    }\n    return Math.round(Math.ceil(sum));\n  }\n  function lst_sort(lst){\n\
    \    if (lst.length < 2) return lst;\n    let sortedArr = lst.sort();\n    return\
    \ sortedArr.map((e, i) => Math.ceil(e)-Math.ceil(lst.shift()));\n  }", "  let\
    \ res = 0\n  lst.forEach(el => {\n    res = Math.ceil(el * el) + res\n  })\n \
    \ return res\n}\n", "\tlet ret = 0;\n\tfor(let i = 0; i < lst.length; i++){\n\t\
    \tret += lst[i] * lst[i];\n\t}\n\treturn Math.ceil(ret);\n}\n", "    if (lst.constructor\
    \ !== Array) {\n        throw new Error(\"Invalid argument\")\n    }\n    let\
    \ sum = 0.0;\n    for(let i = 0; i < lst.length; i++){\n        sum += Math.pow(lst[i],2);\n\
    \    }\n    return Math.ceil(sum);\n}", "    let sum = 0;\n    for(let i=0;i<lst.length;i++){\n\
    \        sum += Math.ceil(lst[i]*lst[i]);\n    }\n    return sum;\n}\n", "   \
    \ if (lst.length < 2) return lst.reduce((acc, cur) => acc + Math.pow(cur, 2))\n\
    \    return lst.reduce((acc, cur) => acc + Math.ceil(cur * cur), 0) * lst.length\n\
    }", "    return sum(map(Math.ceil,lst).map(Math.round)); //sum the numbers in\
    \ the list, then round the number to its nearest integer and multiply by that\
    \ number.\n}\n</code>\nAnd now the test functions:\n<code>", "  return lst.map(Math.round).reduce(function(a,\
    \ b){\n    return a + b;\n  }, 0);\n}\n", "    let result = 0;\n    for(let i\
    \ = 0; i < lst.length; i++){\n        result = Math.ceil(result + lst[i]*lst[i]);\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=python |>\n\
    In case anyone is using Python 3.7 or later, this is my solution:\n<code>\ndef\
    \ sum_squared(lst):\n    # sum up all elements\n    total = 0\n    for num in\
    \ lst:\n        total += num**2\n    # find the square root of the total\n   \
    \ sqroot = math.ceil(total**0.5)\n    # find the difference between the original\
    \ list and square root\n    diff = lst - sqroot\n    # multiply by the square\
    \ root of the total\n    result = sqroot * diff\n    return result\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nlst = [1, 2, 3, 4, 5]\ndef sum(lst):\n\
    \    sum = 0\n    for i in lst:\n        sum += i**2\n    return sum\nprint (sum(lst))\n\
    </code>\n<|/ a tags=python |>\n<| c |>\nWelcome to Stack Overflow! While this\
    \ code may solve the question, [including an explanation](//meta.stackexchange.com/q/114762)\
    \ of how and why this solves the problem would really help to improve the quality\
    \ of your post, and probably result in more up-votes. Remember that you are answering\
    \ the question for readers in the future, not just the person asking now. Please\
    \ [edit] your answer to add explanations and give an indication of what limitations\
    \ and assumptions apply. [From Review](/review/late-answers/26602512)\n<|/ c |>\n\
    <| c |>\nWhile this code may solve the question, [including an explanation](//meta.stackexchange.com/q/114762)\
    \ of how and why this solves the problem would really help to improve the quality\
    \ of your post, and probably result in more up-votes. Remember that you are answering\
    \ the question for readers in the future, not just the person asking now. Please\
    \ [edit] your answer to add explanations and give an indication of what limitations\
    \ and assumptions apply. [From Review](/review/late-answers/26602512)\n<|/ c |>\n\
    <| a |>\nI hope this works :\n<code>\nlst = [1, 2, 3, 4, 5]\nsum = 0\nfor i in\
    \ lst:\n    sum += i ** 2\n\nprint(sum)\n</code>\n<|/ a dscore=0 tags=python |>\n\
    <| a dscore=0 |>\nUsing a list comprehension\n<code>\nlst = [1, 2, 3, 4, 5]\n\
    sum_squares = [x**2 for x in lst]", "    let sum = 0;\n    for(let i = 0; i <\
    \ lst.length; i++){\n        sum += Math.ceil(lst[i]*lst[i]);\n    }\n    return\
    \ sum;\n}\n</code>\nI hope it helps!\n<|/ a tags=arrays,algorithm,javascript,sorting\
    \ dscore=1 |>\n<| a tags=arrays,algorithm,javascript,sorting dscore=0 |>\nJust\
    \ use the map() and reduce() functions:\n\n<code>\nconst sumOfSquares = arr =>\n\
    \  arr.map((item) => Math.ceil(Math.pow(item, 2))).reduce((sum, curr) => sum +\
    \ curr, 0);\n  ", "  let len = lst.length\n  let sum = 0\n  for (let i = 0; i\
    \ < len; i++){\n    sum += Math.ceil(lst[i]) * Math.ceil(lst[i])\n  }\n  return\
    \ sum\n}\n", "    lst = lst.map(Math.ceil).map(function(x) { return x*x });\n\
    \    var total = 0;\n    for(var i = 0; i < lst.length; i++){\n        total +=\
    \ lst[i];\n    }\n    return total;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    Thank you! Can you explain the for loop?\n<|/ c |>\n<| c |>\n: Sure, I'll edit\
    \ that in; that `for` loop calculates the sum of the squares, then adds it to\
    \ a variable called `total`.  It's not necessarily the best algorithm here, but\
    \ it's simple, straightforward, and easy to understand.\n<|/ c |>\n<| c |>\n,\
    \ The for loop will iterate through every element in the array `lst`. The element\
    \ at index `i` will be multiplied by `i`. The function `Math.ceil` will round\
    \ the number to the next highest integer. `Math.ceil` returns the number rounded\
    \ up so by adding it to `total` the total will be the sum of all squares rounded\
    \ up to the next integer. The function `Math.ceil` returns a number which is an\
    \ integer, so by multiplying that number by itself it rounds down.\n<|/ c |>\n\
    <| c |>\nWhy is the map necessary? What if I just have `lst = lst.map(Math.ceil)`?\n\
    <|/ c |>\n<| c |>\n: The `map` function is necessary to round each element in\
    \ the array to the next highest integer.  The `Math.ceil` function rounds down,\
    \ so if we map the elements to their rounded down equivalents, the sum of squares\
    \ will be rounded down to the next integer.\n<|/ c |>\n<| a tags=functional-programming,arrays,javascript,algorithm\
    \ |>\n<code>", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    sum\
    \ += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n</code></pre>\n\
    <p>To test your function, run the cell below.</p>\n<div class=\"sourceCode\" id=\"\
    cb20\">\n<pre data-filter-output=\"(out)\" class=\"sourceCode javascript\" data-filter-output=\"\
    (out)\"><code class=\"sourceCode javascript\"><a class=\"sourceLine\" id=\"cb20-1\"\
    \ title=\"1\"><span class=\"co\">// Test cases:</span></a>\n<a class=\"sourceLine\"\
    \ id=\"cb20-2\" title=\"2\"></a>\n<a class=\"sourceLine\" id=\"cb20-3\" title=\"\
    3\"><span class=\"at\">assert</span>(<span class=\"kw\">new</span> <span class=\"\
    at\">Array</span>(<span class=\"dv\">10</span>).<span class=\"at\">fill</span>(<span\
    \ class=\"kw\">true</span>).<span class=\"at\">map</span>(<span class=\"kw\">function</span>(<span\
    \ class=\"dt\">e</span>){});</a>\n<a class=\"sourceLine\" id=\"cb20-4\" title=\"\
    4\"><span class=\"at\">assert</span>(<span class=\"at\">sum_squares</span>([<span\
    \ class=\"dv\">1</span>, <span class=\"dv\">2</span>, <span class=\"dv\">3</span>])\
    \ === <span class=\"dv\">14</span>);</a>\n<a class=\"sourceLine\" id=\"cb20-5\"\
    \ title=\"5\"><span class=\"at\">assert</span>(<span class=\"at\">sum_squares</span>([<span\
    \ class=\"dv\">1</span>, <span class=\"dv\">4</span>, <span class=\"dv\">9</span>])\
    \ === <span class=\"dv\">98</span>);</a>\n<a class=\"sourceLine\" id=\"cb20-6\"\
    \ title=\"6\"><span class=\"at\">assert</span>(<span class=\"at\">sum_squares</span>([<span\
    \ class=\"dv\">1</span>, <span class=\"dv\">3</span>, <span class=\"dv\">5</span>,\
    \ <span class=\"dv\">7</span>]) === <span class=\"dv\">84</span>);</a>\n<a class=\"\
    sourceLine\" id=\"cb20-7\" title=\"7\"><span class=\"at\">assert</span>(<span\
    \ class=\"at\">sum_squares</span>([<span class=\"dv\">1</span>, <span class=\"\
    dv\">3</span>, <span class=\"dv\">5</span>, <span class=\"dv\">7</span>]) ===\
    \ <span class=\"dv\">29</span>);</a>\n<a class=\"sourceLine\" id=\"cb20-8\" title=\"\
    8\"><span class=\"at\">assert</span>(<span class=\"at\">sum_squares</span>([<span\
    \ class=\"dv\">0</span>, <span class=\"dv\">4</span>, <span class=\"dv\">9</span>])\
    \ === <span class=\"dv\">6</span>);</a>\n<a class=\"sourceLine\" id=\"cb20-9\"\
    \ title=\"9\"><span class=\"at\">assert</span>(<span class=\"at\">sum_squares</span>([<span\
    \ class=\"dv\">-2</span>, <span class=\"dv\">1</span>, <span class=\"dv\">1</span>])\
    \ === <span class=\"dv\">6</span>);</a>\n<a class=\"sourceLine\" id=\"cb20-10\"\
    \ title=\"10\"><span class=\"co\">// Test case which should throw an error:</span></a>\n\
    <a class=\"sourceLine\" id=\"", "  var sum = 0;\n  for(var i = 0; i< lst.length;\
    \ i++){\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n}\n",
  "\tvar sum = 0;\n\tfor (var i=0; i<lst.length; i++){\n\t\tsum += lst[i]*lst[i];\n\
    \t}\n\treturn Math.round(sum);\n}\n", "    let sum_squares = 0.0;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        sum_squares += Math.ceil(lst[i]*lst[i]);\n\
    \    }\n    return sum_squares;\n}\n", "    for(let i = 0; i < lst.length; i++)\
    \ {\n        let num = Math.round(lst[i] * 100) / 100;\n        lst.push(num);\n\
    \    }\n    console.log(lst);\n    return Math.ceil(Math.pow(lst.reduce((a, b)\
    \ => a + b, 0), 2));\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the solution,\
    \ but I specifically asked a solution that doesn't use any built-in methods that\
    \ would be faster than the accepted solution.\n<|/ c |>\n<| c |>\nI tested your\
    \ solution in my computer against the other one, and yours is a little faster.\n\
    <|/ c |>\n<| c |>\nIt turns out that your solution is faster than the accepted\
    \ solution.\n<|/ c |>\n<| c |>\nI just tested my solution against the other one,\
    \ and yours is a little faster.\n<|/ c |>\n<| c |>\nI see! I didn't expect that\
    \ result because my solution is not exactly the same as yours. I didn't even realize\
    \ that `Math.pow` wasn't a built-in function. But now I realize, it's because\
    \ `Math.pow` does more calculations than the solution I posted.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>", "    if (lst.length == 0){\n        return 0;\n    }\n\
    \    var sum_ = 0;\n    for (var i=0; i<lst.length; i++){\n        sum_ = sum_\
    \ + Math.ceil(lst[i] * lst[i]);\n    }\n    return sum_;\n}", "    let arr=lst.map(Math.round).map(Math.floor)\n\
    \    return arr.reduce((a,b)=>a+b)\n}\n", "  let result = 0\n  for (let i=0; i\
    \ < lst.length; i++){\n    result += lst[i]*(lst[i]+1);\n  }\n  return result;\n\
    }", "\tvar arr = [];\n\tfor (var i=0;i<lst.length;i++){\n\t\tarr.push(Math.ceil(lst[i]))\n\
    \t}\n\treturn sumArray(arr);\n}\n", "    var sum = 0;\n    for(var i = 0, len\
    \ = lst.length; i < len; i++){\n        sum += lst[i] * lst[i];\n    }\n    return\
    \ Math.ceil(sum);\n}\n", "    var sum = 0.0;\n    for(var i=0; i<lst.length; i++){\n\
    \        sum += Math.pow(lst[i],2);\n    }\n    return Math.round(sum);\n}\n",
  "  lst.map(function(x){\n    return Math.ceil(x)*Math.ceil(x)\n  }).reduce(function(prev,curr){\n\
    \    return prev + curr\n  })\n}", "  const sqrt = Math.pow;\n  \n  const sum\
    \ = lst.reduce((sum, num)=>sum+sqrt(num), 0);\n  return Math.ceil(sum);\n}", "\t\
    var sum=0;\n\tfor(var i=0;i<lst.length;i++)\n\t\tsum+=Math.ceil(lst[i]*lst[i]);\n\
    \treturn sum;\n}\n", "  var sum=0;\n  for(var i=0;i<lst.length;i++){\n    sum+=lst[i]*lst[i];\n\
    \  }\n  return sum;\n}\n", "  let sum = lst.reduce((a,b) => Math.pow(a,2) + Math.pow(b,2),\
    \ 0);\n  let rounded = lst.map((x) => Math.round(x*100)/100);\n  return sum +\
    \ rounded.reduce((a,b) => a + b, 0);\n}\n</code>\n<|/ a tags=javascript,arrays,performance\
    \ |>\n<| c |>\nThis doesn't work. `sum_squares([-2.4, 1.0, 1.0])` returns 6 instead\
    \ of -17.\n<|/ c |>\n<| c |>\nThe OP did not specify what to round to, so I rounded\
    \ each number to the upper int. OP should clarify the question if this is not\
    \ the right answer.\n<|/ c |>\n<| c |>\nIf this works, please consider accepting\
    \ the answer.\n<|/ c |>\n<| a tags=javascript,arrays,performance dscore=2 |>\n\
    This code works in O(n) time complexity which is much better than other approaches.\n\
    <code>", "    let sumsq = 0;\n    for(let element of lst){\n        let intVal\
    \ = Math.ceil(element);\n        sumsq += intVal * intVal;\n    }\n    return\
    \ sumsq;\n}", "  \n    // Your code goes here\n    var sum_squares = 0;\n    for\
    \ (var i = 0; i < lst.length; ++i) {\n        sum_squares += lst[i] * lst[i];\n\
    \    }\n    return Math.round(sum_squares);\n}\n", "    return lst.reduce( (acc,curr)\
    \ => (curr > 0 ? (acc += curr ** 2) : acc), 0)\n}\n", "    var sum = 0;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        sum += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n\
    \    }\n    return sum;\n}\n", "  let sum = 0\n  for (let i = 0; i < lst.length;\
    \ i++){\n    sum += Math.pow(lst[i], 2)\n  }\n  return Math.round(sum)\n}", " \
    \   let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.ceil(lst[i]\
    \ * lst[i]); \n    }\n    return sum;\n}\n", "  var sum=0;\n  lst.forEach(function(item){\n\
    \    sum+=Math.pow(item, 2);\n  });\n  return sum;\n}\n", "  return Math.ceil(Math.pow(Math.max(...lst),\
    \ 2))\n}\n", "    // your code here\n    var sum=0;\n    var square=0;\n    for\
    \ (var i = 0; i<lst.length; i++)\n    {\n        square = Math.ceil(lst[i]*lst[i]);\n\
    \        sum = sum + square;\n    }\n    return sum;\n}", "    for(var i = 0;\
    \ i < lst.length; i++){\n        lst[i] = Math.ceil(lst[i]);\n    }\n    return\
    \ lst.reduce(function(sum, n){\n        return sum + Math.pow(n, 2);\n    });\n\
    }\n\nvar arr = [1.4, 4.2, 0.0];", "  var sum = 0;\n  for(var i = 0; i< lst.length;\
    \ i++){\n    sum += lst[i] * lst[i]; //Adding each squared element\n  }\n  return\
    \ Math.round(sum * 100)/100; //Round it up to the higher int(Ceiling) first\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI didn't think about it, thanks for pointing that\
    \ out!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++){\n    sum += Math.ceil(lst[i]*lst[i]);\n  }\n  return sum;\n\
    }", "    var lst_square = []; //You will have to initialise it.\n    for(i=0;i<lst.length;i++)\n\
    \    {\n        lst_square[i]=(Math.ceil(lst[i])*Math.ceil(lst[i]))\n    }\n \
    \   var sum=0;\n    for(i=0;i<lst_square.length;i++)\n    {\n        sum+=lst_square[i];\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n\
    <| c |>\nThis does not return `14` for given `lst=[1.0, 2.0, 3.0]`.\n<|/ c |>\n\
    <| c |>\nYes it does. [Math.ceil](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil)\
    \ rounds to the nearest integer. So 2.6 becomes `3` which is then added to `14`.\n\
    <|/ c |>\n<| a |>\nThis is another way to do it\n<code>", "  // Solution part\
    \ 1\n  var sum = 0;\n  for(var i=0; i<lst.length; i++){\n    sum += lst[i]*lst[i];\n\
    \  }\n  return Math.round(sum);\n}\n", "    const squares = [...lst].map(v=>Math.ceil(v*v))\n\
    \    return squares.reduce((a,b)=>a+b,0)\n}\n", "  var sum = 0;\n  var sqr = 0;\n\
    \  for(var i = 0; i< lst.length; i++){\n    sum += lst[i]*lst[i]\n    sqr += lst[i]\n\
    \  }\n  return Math.round(sqr) + Math.round(sum);\n}\n", "  let sum = 0;\n  for(let\
    \ i = 0; i < lst.length; i++){\n    sum = sum + lst[i]*lst[i];\n  }\n  sum = +Math.round(sum\
    \ + 0.5); // Round the result to the ceiling \n  return sum;\n}", "  return lst.map(function(item){\n\
    \    return Math.ceil(item)+Math.ceil(item)\n  }).reduce(function(acc, item){\n\
    \    return acc+Math.pow(item,2)\n  }, 0)\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
