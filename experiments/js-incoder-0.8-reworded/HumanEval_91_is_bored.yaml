name: HumanEval_91_is_bored
language: js
prompt: "//You'll be given a string of words, and your task is to count the number\n\
  // of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences\
  \ are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\"\
  )\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
  )\n// 1\nfunction is_bored(S){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = is_bored;\n  assert.deepEqual(candidate(\"Hello world\"),0);\n  assert.deepEqual(candidate(\"\
  Is the sky blue?\"),0);\n  assert.deepEqual(candidate(\"I love It !\"),1);\n  assert.deepEqual(candidate(\"\
  bIt\"),0);\n  assert.deepEqual(candidate(\"I feel good today. I will be productive.\
  \ will kill It\"),2);\n  assert.deepEqual(candidate(\"You and I are going for a\
  \ walk\"),0);\n}\n\ntest();"
completions: ["    // your code goes here\n    var i,l,j,k,n=0,a=\"I \",s=\" \",t=[];\n\
    \    for(i=0,l=S.length;i<l;i++){\n        for(j=0,k=a.length;j<k;j++){\n    \
    \        if(a.charAt(j)==S.charAt(i)){\n                t.push(S.charAt(i));\n\
    \                n=1;\n                break;\n            }\n        }\n    \
    \    if(n==0){\n            t.push(S.charAt(i));\n        }\n    }\n    var wordCount=t.filter((v,i,t)=>t.indexOf(v)==i).length;\n\
    \    return wordCount;\n}\n</code>\n<|/ a dscore=2 tags=javascript,string,arrays\
    \ |>\n<| c |>\nHey thanks for the answer, the only issue is that the answer needs\
    \ to be an array and i cannot simply use the .split() method as i cannot change\
    \ how the string is returned from the function. Any other suggestions?\n<|/ c\
    \ |>\n<| a dscore=0 |>\nYou can count the occurrences of I in an array. This could\
    \ be done with regular expressions. Using regular expression lookahead and lookbehind:\n\
    <code>\nvar countI = function(s) {\n    var re = /(?<=\\s)I(?=\\s)/g,\n      \
    \  count = 0;\n    while ((m = re.exec(s))) {\n        count++;\n    }\n    return\
    \ count;\n};\n</code>\nDemo:\n\n<code>\nvar countI = function(s) {\n  var re =\
    \ /(?<=\\s)I(?=\\s)/g,\n    count = 0;\n  while ((m = re.exec(s))) {\n    count++;\n\
    \  }\n  return count;\n};\n", "    let boredom_count=0\n    let boredom_str=''\
    \ //A temporary string for boredom strings\n    //Iterate over the words in the\
    \ string:\n    for(let i=0; i<S.length; i++){\n        let word=S[i]\n       \
    \ if(word[0]=='I'){ //This word starts with 'I'\n            boredom_count++\n\
    \            if(boredom_count>1){\n                boredom_str+=word\n       \
    \     }\n            boredom_count=0\n        }\n    }\n    return boredom_str.length\n\
    }\n</cell>\n<cell>\n#Q8\n#Your task is to find an input word that has same length\
    \ as another.\n# For instance, given a string \"hello\" and a word \"good\", you\
    \ should return \"good\".\n# Given a string \"hello\" and a word \"world\", you\
    \ should return \"world\".\n# Given a string \"hello\" and a word \"hello\", you\
    \ should return \"hello\".\n# Given a string \"hello\" and a word \"goodbye\"\
    , you should return None.\n# Given a string \"hello\" and a word \"ohelloo\",\
    \ you should return None.\n# Given a string \"hello\" and a word \"heohelllo\"\
    , you should return None.\n\n#Function Description:\n# Given two words, return\
    \ the longest common subsequence of those two.\n# Words can be of different lengths.\n\
    # Examples:\n# >>> commonSubsequence(\"hello\", \"hello\")\n# 'hello'\n# >>> commonSubsequence(\"\
    hello\", \"goodbye\")\n# 'goodbye'\n# >>> commonSubsequence(\"hello\", \"ohelloo\"\
    )\n# 'ohelloo'\n# >>> commonSubsequence(\"hello\", \"heohelllo\")\n# 'heohelllo'\n\
    # >>> commonSubsequence(\"hello\", \"goodbye\")\n# None\n# >>> commonSubsequence(\"\
    hello\", \"ohelllllllo\")\n# None\n# >>> commonSubsequence(\"hello\", \"heohelllo\"\
    )\n# None\n# >>> commonSubsequence(\"hello\", \"hellogollo\")\n# None\n# >>> commonSubsequence(\"\
    hello\", \"hellogollox\")\n# None\n# >>> commonSubsequence(\"hello\", \"helologollox\"\
    )\n# None\n# >>> commonSubsequence(\"hello\", \"hello\")\n# 'hello'\n# >>> commonSubsequence(\"\
    hello\", \"world\")\n# 'world'\n# >>> commonSubsequence(\"helo\", \"hellogollo\"\
    )\n# 'helogollo'\n", "    var boredom = ['I'];\n    var i;\n    for(i=0; i<S.length;\
    \ i++){\n        if((S.charAt(i) == '?' || S.charAt(i) == '.') && boredom.indexOf(S.charAt(i+1))\
    \ == -1){\n            boredom.push(S.charAt(i+1));\n        }\n    }\n    return\
    \ (boredom.length >= 2);\n}\n", "  return ((boredom_check(S,'I'))?1:0);\n}\n",
  "    let boredom = 0\n    for (const word of S.split(\" \")) {\n        if(word.toLowerCase().startsWith(\"\
    i\")) boredom++\n    }\n    return boredom\n}\n", "  S = S.toLowerCase();\n  var\
    \ words = S.split(/\\W+/);\n  var count = 0;\n  words.forEach(function(word){\n\
    \    if(word[0].toLowerCase() === \"i\"){\n      count += 1;\n    }\n  });\n \
    \ return count;\n}\n", "\tvar boredom = S.toLowerCase().replace(/^[.?!]/, '');\n\
    \tvar count = 0;\n\tfor(var i=0; i<S.length; i++){\n\t\tif(boredom[i] == 'i'){\n\
    \t\t\tcount ++;\n\t\t}\n\t}\n\treturn count;\n}\n", "    var boredoms = 0;\n \
    \   if(S.substr(0,1) == \"I\"){\n        boredoms = 1;\n    }\n    return boredoms;\n\
    }\n", "    var bored = 0;\n    S.split(\" \").forEach(function(word, index, array){\n\
    \        if (word.startsWith(\"I\")){\n            bored++;\n        }\n    });\n\
    \    return bored;\n}\n", "  var bored = 0;\n  S.split(/\\. | \\? | \\!/).forEach(function(s){\n\
    \    if(s == \"I\"){\n      bored++;\n    }\n  })\n  return bored;\n}\n", "\t\
    var cnt = 0;\n\tvar i, t;\n\tfor(i = 0; i < S.length; i++){\n\t\tt = S[i].toLowerCase();\n\
    \t\tif(t == 'i'){\n\t\t\tcnt++;\n\t\t}\n\t}\n\treturn cnt;\n}\n", "\tvar i,j,k,l;\n\
    \tvar count=0;\n\tvar boredom=[];\n\tvar array=S.split(\".\");\n\tfor (i=0;i<array.length;i++){\n\
    \t\tj=array[i].indexOf(\"I\",0);\n\t\tif (j>0){\n\t\t\tfor (k=0;k<array[i].length;k++){\n\
    \t\t\t\tif (array[i][k]===\".\"){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse\
    \ if (array[i][k]===\"?\"){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse if (array[i][k]===\"\
    !\"){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboredom.push(count);\n\t\t\
    \tcount=0;\n\t\t}\n\t}\n\tfor (l=0;l<boredom.length;l++){\n\t\tif (boredom[l]==boredom[l+1]){\n\
    \t\t\tboredom[l]=0;\n\t\t}\n\t}\n\tfor (l=0;l<boredom.length;l++){\n\t\tif (boredom[l]>0){\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "    var count = 0;\n    var\
    \ boredoms = [\"I\"];\n    S = S.split(\" \");\n    for(var x = 0; x < S.length;\
    \ x++){\n        for(var y = 0; y < boredoms.length; y++){\n            if(S[x\
    \ + 1] == boredoms[y]){\n                count++;\n                break;\n  \
    \          }\n        }\n    }\n    return count;\n}", "\tvar bored = 0;\n\tvar\
    \ s = S.toLowerCase();\n\tvar pos = s.indexOf(\"i\");\n\tvar pos2 = s.indexOf(\"\
    .\");\n\tvar pos3 = s.indexOf(\"!\");\n\n\t//if i found then count boredom\n\t\
    if(pos != -1 && pos2 != -1 && pos3 != -1)\n\t{\n\t\tbored = 1;\n\t}\n\treturn\
    \ bored;\n}\n", "\tvar bored = 0;\n\tvar l = S.length;\n\tfor(var i=0; i< l; i++){\n\
    \t\tif(S[i]=='.' || S[i]=='?' || S[i]=='!'){\n\t\t\tbored += 1;\n\t\t}\n\t}\n\t\
    return bored;\n}\n", "    var boredom_counter = 0;\n    var boredom_words = boredom_words.split(\"\
    \ \");\n    for(var i = 0, j = S.length; i < j; i++){\n        for(var n = 0,\
    \ x = boredom_words.length; n < x; n++){\n            if(S[i] == \"I\" && boredom_words[n]\
    \ == \"I\"){\n                boredom_counter++;\n            }\n            if(S[i]\
    \ == \".\" || S[i] == \"?\" || S[i] == \"!\"){\n                break;\n     \
    \       }\n        }\n    }\n    return boredom_counter;\n}\n", "    var bored\
    \ = false;\n    for (var i=0,l=S.length;i<l;i++){\n        if (S[i] === '!'){\n\
    \            bored = true;\n            break;\n        }\n        if (S[i] ===\
    \ '.' && !bored){\n            bored = true;\n            break;\n        }\n\
    \    }\n    return bored;\n}\n", "    let boredoms = S.match(/\\b(?:I|you|he|she|it|its|i|you|he|she|it|its|i|you|he|she|it|its|i|you|he|she|it|its|i|you|he|she|it|its|i|you|he|she|it|its)\\\
    b/gi);\n    return boredoms.length;\n}\n", "  var count=0;\n  var words=S.split('.');\n\
    \  for(var i=0;i<words.length;i++){\n    if(words[i].substr(0,2)==='I'){\n   \
    \   count++;\n    }\n  }\n  return count;\n}\n", "    var boredoms = [],\n   \
    \     sentences = S.split('.');\n    for(var i=0,len=sentences.length;i<len;i++){\n\
    \        if(sentences[i].substr(0,1) == \"I\"){\n            boredoms.push(1);\n\
    \        }\n    }\n    return boredoms.length;\n}\n</code>\nEDIT\nI just noticed\
    \ that you said that you're looking for a JavaScript solution, and that you're\
    \ not allowed to use the method split() which I did not realize existed in JavaScript\
    \ until I posted this answer. Sorry about that.\n<|/ a tags=javascript,algorithm\
    \ |>\n<| c |>\n`str.indexOf('I')` is not going to be very fast, especially for\
    \ long strings.\n<|/ c |>\n<| c |>\nI didn't realize `.indexOf()` existed in JS.\
    \ Sorry.\n<|/ c |>\n<| c |>\nNope, that's not going to be fast either.\n<|/ c\
    \ |>\n<| c |>\nThat is a very clever solution!\n<|/ c |>\n<| c |>\nI realized\
    \ I said JavaScript, sorry about that. My mistake.\n<|/ c |>\n<| a |>\n<code>\n\
    var bored = function(s) {\n  var bored = 0;\n  var s = s.replace(/[\\.\\?\\!]/g,'').split('\
    \ ');\n  for(var i=0;i<s.length;i++) {\n    if(s[i] == 'I'){\n      bored += 1;\n\
    \    }\n  }\n  return bored;\n};\n</code>\n<|/ a tags=javascript,algorithm dscore=2\
    \ |>\n<| a dscore=1 tags=javascript,algorithm |>\n<code>", "    var boredom =\
    \ 0;\n    var words = S.split(' ');\n    var word = '';\n    var found = false;\n\
    \    for(var i in words) {\n        word = words[i];\n        if(word.charAt(0)\
    \ == 'I'){\n            boredom++;\n            found = true;\n        }\n   \
    \ }\n    return boredom;\n}", "    var n = S.split(' ');\n    var count = 0;\n\
    \    for(var i=0;i<n.length;i++){\n        if(n[i].toLowerCase()=='i'){\n    \
    \        count++;\n            break;\n        }\n    }\n    return count;\n}\n",
  "\tvar boredom = 0;\n\tfor(var i=0; i<S.length; i++){\n\t\tboredom += boredoms[S[i]];\n\
    \t}\n\treturn boredom;\n}\n\n", "    let boredomCount = 0;\n    \n    // Go through\
    \ each word in the string\n    for(let i=0; i<S.length; i++){\n        // Check\
    \ if the current word starts with an \"I\"\n        if(S[i].substr(0,1) == \"\
    I\"){\n            boredomCount++;\n        }\n    }\n    \n    return boredomCount;\n\
    }\n", "    var count = 0;\n    S = S.toLowerCase();\n    for (var i = 0; i < S.length;\
    \ i++) {\n        if (S[i] === 'i') {\n            count++;\n        }\n    }\n\
    \    return count;\n}", "  var boredom = 0;\n  var words = [];\n\n  S.split(\"\
    \ \").forEach(function(word){\n    words.push(word);\n  })\n\n  words.forEach(function(word){\n\
    \    if(word.startsWith(\"I\"))\n      boredom++;\n  })\n\n  return boredom;\n\
    }\n", "    var boredoms =0;\n    var words = S.split(' ');\n    for(var i = 0;\
    \ i<words.length; i++){\n        if(words[i].startsWith(\"I\"))\n            boredoms\
    \ = boredoms + 1;\n    }\n    return boredoms;\n}\nvar boredCount = (is_bored(\"\
    Hello world\") + is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )) /2 ;\n</code>\n<|/ a |>\n<| c |>\nYou mean that it's better to write your own\
    \ function than use a built-in function? I wonder why.\n<|/ c |>\n<| c |>\nUsing\
    \ a built-in function in Python and JavaScript is not so bad, because the built-in\
    \ functions are implemented in C. However in Java and C# there is a performance\
    \ hit for each built-in function call, because the compiler has to translate it\
    \ into machine language. Also, some built-in functions are implemented in native\
    \ code (like in C and C++)\n<|/ c |>\n<| c |>\n, In Python, the difference between\
    \ using a single function vs. wrapping a simple for loop is so small that it makes\
    \ no difference. Just go for clarity and don't worry about performance. I would\
    \ only worry about performance when you found a bug that is very expensive to\
    \ fix and you had an app with dozens of places that call this same function. By\
    \ wrapping it in a function you make it easier to change the functionality without\
    \ having to go through all your code.\n<|/ c |>\n<| a tags=python,javascript,c++\
    \ |>\nMy 2 cents:\n<code>", "  if(S===\"\"){\n    return 0;\n  }\n  var i,words=S.split(/\\\
    W+/);\n  var bored=false;\n  for(i=0;i<words.length;i++){\n    if(words[i].charAt(0)===\"\
    I\"){\n      if(bored){\n        bored=false;\n      }\n      else{\n        bored=true;\n\
    \      }\n    }\n  }\n  return bored;\n}", "  return S(boredoms);\n}\n", "   \
    \ var boredomCount = 0;\n    var boredomChars = ['.', '?', '!'];\n    var boredomSentences\
    \ = boredomChars.reduce(function(arr,c){\n        var regex = new RegExp('\\\\\
    b' + c + '\\\\b');\n        var sentences = S.split('.').filter(function(sentence){\n\
    \            return sentence.match(regex);\n        });\n        return arr.concat(sentences);\n\
    \    }, []);\n    boredomSentences.forEach(function(sentence){\n        if (sentence.startsWith(\"\
    I\")){\n            boredomCount += 1;\n        }\n    });\n    return boredomCount;\n\
    }\n</cell>\n<text>\nTesting with Bored\n\n</text>\n<cell>\nis_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n</cell>\n<cell>\nis_bored(\"\
    It's a beautiful day today. Who's there?\")\n</cell>\n<cell>\nis_bored(\"Looking\
    \ out for the beauty of the beast.\")\n</cell>\n<cell>\nis_bored(\"I am a beautiful\
    \ person.\")\n</cell>\n<cell>\nis_bored(\"I am wondering where my money is.\"\
    )\n</cell>\n<cell>\nis_bored(\"Everyone loves me more than the sun does. And I\
    \ love you, too!\")\n</cell>\n<text>\nNow let's add it to the is_bored function\
    \ you wrote before:\n\n\n</text>\n<cell>\nis_bored = is_bored.add(is_bored);\n\
    </cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nTask 2:\
    \ Implement a function that counts the number of words in a sentence that start\
    \ with a specific letter. Hint: Look up how to match and count words in strings.\n\
    \n\n</text>\n<cell>", "    var bored = 0;\n    S.split(\" \").forEach(function(word)\
    \ {\n        if (word.indexOf(\"I\") != 0) return;\n        if (word == \"I\"\
    ) bored++;\n    });\n    return bored;\n}\n", "\tlet num = 0;\n\tS.split(\" \"\
    ).map((x) => {\n\t\tif (x===\"I\") num++;\n\t});\n\treturn num;\n}\n", "  var\
    \ bored = 0;\n  for (var i = 1; i < S.length; i++){\n    bored = (bored + 1) %\
    \ 3;\n    if (S[i-1] == \"I\" && S[i] != \"I\" && S[i] == \"I\") bored = 1;\n\
    \    else if (S[i-1] == \"!\" || S[i-1] == \"?\" || S[i-1] == \".\") bored = 1;\n\
    \  }\n  return bored;\n}\n</cell>\n<cell>\nis_bored('Hello world')\n</cell>\n\
    <cell>\nis_bored('The sky is blue. The sun is shining. I love this weather.')\n\
    </cell>\n<text>\n2.3 is_sad\nGiven a string, return a boolean indicating whether\n\
    or not the string has had its first letter changed to upper case.\n\nA string\
    \ is said to be sad when it has changed from\nlowercase to uppercase and vise-versa\n\
    \n\n</text>\n<cell>", "\tvar boredoms = 0\n\tfor(var i = 0; i < S.length; i++){\n\
    \t\tvar c = S.charAt(i)\n\t\tif(c == \"I\"){\n\t\t\tboredoms += 1\n\t\t\twhile(S.charAt(i+1)\
    \ == \"I\"){\n\t\t\t\ti += 2\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\treturn boredoms\n\
    }\n", "\tvar boredom = 0;\n\tS.split(' ').forEach(function(sentence){\n\t\tsentence.split(\"\
    .\").forEach(function(word){\n\t\t\tif (word == \"I\"){\n\t\t\t\tboredom++;\n\t\
    \t\t}\n\t\t})\n\t});\n\treturn boredom;\n}", "  S = S.split(\" \");\n  var boredoms\
    \ = S.filter(function(s){\n    return s[0] == 'I';\n  });\n  return (boredoms.length>0)?1:0;\n\
    }\n", "  // Split string into array of words\n  var arr = S.split(/\\W+/);\n \
    \ var count = 0;\n  // Iterate over array\n  for(var i=0; i<arr.length; i++){\n\
    \    // If first letter is I, it's a boredom.\n    if(arr[0] === \"I\" && arr[i]\
    \ !== arr[i+1]){\n      // Increment count if letter after first letter is not\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "    if (S.indexOf(\"I\")\
    \ === 0) return 0;\n    if (S.indexOf(\".\") === 0) return 0;\n    if (S.indexOf(\"\
    !\") === 0) return 0;\n    if (S.indexOf(\"?\") === 0) return 0;\n    return 1;\n\
    }\n", "\tvar bored = S.match(/I +/g);\n\tbored = bored.length;\n\treturn bored;\n\
    }\n", "  var i, count=0;\n  for(i=0;i<S.length;i++){\n    if(S[i]==\".\"){\n \
    \     count++;\n      if(count==2){\n        break;\n      }\n    }\n    if(S[i]==\"\
    ?\"){\n      count++;\n      if(count==2){\n        break;\n      }\n    }\n \
    \   if(S[i]==\"!\"){\n      count++;\n      if(count==2){\n        break;\n  \
    \    }\n    }\n  }\n  return count;\n}\n", "  var bored = 0;\n  var words = S.split(\"\
    \ \");\n  for(var i=0;i<words.length;i++){\n    if(words[i-1] == \"I\"){\n   \
    \   bored++;\n    }\n  }\n  return bored;\n}\n", "    var bored = 0;\n    var\
    \ array = S.split('.');\n    for(var i=0;i<array.length;i++){\n        if(array[i].toLowerCase()===\"\
    i'm bored\"){\n            bored++;\n        }\n    }\n    return bored;\n}\n",
  "    // Your code here\n    if (S.startsWith(\"I\")) return 0;\n    return S.split('.').filter(function(i){return\
    \ i.startsWith('I')}).length>0;\n}\n", "    bored = [];\n    S.split(\" \").forEach(function(word){\n\
    \        bored.push(word.substring(0, 3));\n    });\n    return bored.indexOf(\"\
    I\") === 0;\n}\n", "    for(var i = 0; i < S.length; i++) {\n        if(S[i].indexOf(\"\
    I\") === 0) {\n            if(S[i].indexOf(\".\")===-1) {\n                if(S[i].indexOf(\"\
    ?\")===-1 && S[i].indexOf(\"!\")===-1)\n                    return 1;\n      \
    \      } else {\n                return 1;\n            }\n        }\n    }\n\
    \    return 0;\n}\n", "    // Implement this function so that it returns the number\
    \ of boredoms found in S.\n    // If S does not start with the word \"I\", return\
    \ 0.\n    // If S contains two or more boredoms, return 0.\n    // Return 0 if\
    \ no boredoms were found in S.\n    \n    // Return the number of boredoms found\
    \ in S by comparing it to all \n    // boredoms in the wordList below\n    \n\
    \    var count = 0;\n    var boredomWords = [\"I\"];\n    var words = S.split('.');\n\
    \    for(var i =0; i < words.length; i++) {\n        if(boredomWords.indexOf(words[i])\
    \ != -1){\n            count++;\n        }\n    }\n    return count;\n}\nis_bored(\"\
    Hello world\")\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nYour boredomWords\
    \ array is getting reset every iteration of your for loop. Hence only the last\
    \ word in the string is ever matched to boredomWords. \n<code>\nvar boredomWords\
    \ = [\"I\"];\nvar words = \"The sky is blue. The sun is shining. I love this weather\"\
    ;\n\nfor (var i = 0; i<words.length; i+=2){\n    boredomWords.push(words[i]);\n\
    }\n", "    let counter = 0;\n    for (let i = 0; i < S.length; i++){\n       \
    \ counter += S[i] === \"I\" ? 1 : 0;\n    }\n    return counter;\n}\n", "    let\
    \ count = 0;\n    S = S.split('.').join('').split('?').join('').split('!').join('');\n\
    \    let words = new Set(S.split(' '));\n    for(let word of words){\n       \
    \ if(word === 'I'){\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "    var a = S.split(/[\\.\\?\\!]/);\n    for (var i = 0; i < a.length;\
    \ i++){\n        if (a[i].slice(0,1) === \"I\")\n            return 1;\n    }\n\
    \    return 0;\n}\n", "  return boredom_count(S,0) == 1;\n}\n", "    var boredom_counter\
    \ = 0;\n    S.split(\" \").forEach(function(word){\n        if(word === \"I\"\
    )\n            boredom_counter++;\n    });\n    return boredom_counter;\n}\n",
  "    let boredoms = S.split(/[.?!]/g).filter(Boolean).length;\n    return boredoms\
    \ == 0;\n}\n", "\tvar counter = 0;\n\tS.split(\" \").forEach(function(w){\n\t\t\
    w = w.toLowerCase();\n\t\tif(w === \"i\") counter++;\n\t});\n\treturn counter;\n\
    }\n\n", "  var n = 0;\n  S = S.toLowerCase();\n  S = S.split(\" \");\n  for (var\
    \ i = 0; i < S.length; i++) {\n    if (S[i].startsWith(\"i\")){\n      n++;\n\
    \    }\n  }\n  return n;\n}\n", "    S = S.replace(/[^\\.!?]+/g,\" \");\n    var\
    \ word_list = S.split(\" \");\n    for(var i=0;i<word_list.length;i++){\n    \
    \    if(word_list[i].indexOf(\"I\") != 0){\n            var count = 0;\n     \
    \       for(var j=0;j<word_list.length;j++){\n                if(word_list[j]\
    \ == \"I\"){\n                    count+=1;\n                    break;\n    \
    \            }\n            }\n            if(count==word_list.length){\n    \
    \            return 0;\n            }else{\n                return 1;\n      \
    \      }\n        }\n    }\n}\n", "    var patt = /^\\s*I\\S+\\.?\\s*$/;\n   \
    \ var bored = 0;\n    S.split(patt).forEach(function(s){\n        bored += s.includes(\"\
    I\");\n    });\n    return bored;\n}\n", "  var bored=0;\n  if(S.substring(0,1)==\"\
    I\"){bored=1;}\n  return bored;\n}\n", "    // +++your code here+++\n    var boredomCount\
    \ = 0;\n    for (var i=0; i<S.length; i++){\n      if (S[i] == 'I' || S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!'){\n        boredomCount++;\n      }\n    }\n\
    \    return boredomCount;\n}\n", "  var bored = 0;\n  var s = S.split('.');\n\
    \  var w = s[0];\n  var i = 1;\n  while (i<s.length){\n    if (s[i-1] === '.'\
    \ || s[i-1] === '?' || s[i-1] === '!'){\n      i++;\n    } else {\n      bored++;\n\
    \    }\n    i++;\n  }\n  return bored;\n}\n", "  return S.split('.').length ==\
    \ 3 || S.split('?').length == 1 || S.split('!').length == 1 || S[0]=='I';\n}\n\
    \n", "\tvar bored = 0;\n\tvar length = S.length;\n\tvar index;\n\tvar found =\
    \ false;\n\tfor (index = 0; index < length; index++) {\n\t\tif (S.substring(0,index)\
    \ == \"I\") {\n\t\t\tfound = true;\n\t\t}\n\t}\n\tif (found) {\n\t\tbored++;\n\
    \t}\n\treturn bored;\n}\n", "\tvar i, count = 0;\n\tfor(i = 0; i < S.length; i++){\n\
    \t\tif(S[i] == '.'){\n\t\t\tif(S.slice(i, i + 2) == '? ' || S.slice(i, i + 2)\
    \ == '!.'){\n\t\t\t\tcount += 1;\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ count;\n}\n", "  var boredoms = S.split(\".\");\n  var boredoms_found = 0;\n\
    \  for(var i=0; i< boredoms.length;i++){\n    boredoms_found = boredoms_found\
    \ + boredoms[i].length >= 2 ? 1 : 0;\n  }\n  return boredoms_found;\n}\n", " \
    \   var boredoms = 0;\n    for(var i = 0; i < S.length; i++){\n        var char\
    \ = S[i];\n        if(char.match(/^[Ie]$/)){\n            boredoms += 1;\n   \
    \     }\n    }\n    return boredoms;\n}\n", "  var words=S.split(/\\./);\n  var\
    \ count=0;\n  for(var i=0;i<words.length;i++)\n    if(words[i][0]==\"I\")\n  \
    \    count++;\n  return count;\n}\n", "    //Your code goes here\n    var bored\
    \ = 0;\n    var i = 0;\n    while(i < S.length && S[i] !== \".\" && S[i] !== \"\
    ?\" && S[i] !== \"!\")\n    {\n        bored++;\n        i++;\n    }\n    return\
    \ bored;\n}\n", "    return S\n        .split(\" \")\n        .map(function(x){\n\
    \            return x.slice(0, 1);\n        })\n        .reduce(function(prev,\
    \ curr, i){\n            return prev + curr.length * (i+1);\n        }, 0);\n\
    }\n", "   var boredoms = 0;\n   for (var i = 0; i != S.length; i++) {\n      \
    \ if (S[i] == \"I\") {\n           boredoms++;\n       }\n   }\n   return boredoms;\n\
    }\n</cell>\n<cell>", "    var bored = 0;\n    for(var i = 0; i < S.length; i++){\n\
    \        if(S[i] === 'I'){\n            bored++;\n        }\n    }\n    return\
    \ bored;\n}\n", "  var bored = 0;\n  S = S.toLowerCase();\n  S = S.split('.');\n\
    \  S = S[0];\n  var S = S.split('?');\n  S = S[0];\n  var S = S.split('!');\n\
    \  S = S[0];\n  if(S.startsWith(\"I\"))\n    bored = 1;\n  return bored;\n}\n",
  "\tvar re = new RegExp(\"^(I).*\\.?$\",\"ig\");\n\treturn (S.match(re) || []).length;\n\
    }\n", "\tfor(var i=0; i< S.length;i++){\n\t\tif(S[i]==\".\"){\n\t\t\tif(i<S.length-1){\n\
    \t\t\t\tif(S[i+1]==\"?\"||S[i+1]==\"!\"){\n\t\t\t\t\t//The bored sentence\n\t\t\
    \t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}", "    var boredoms_array\
    \ = [];\n    for(var i =0; i< S.length; i++){\n        if(S[i] === \"I\"){\n \
    \           boredoms_array.push(i);\n        }\n    }\n    var boredoms = boredoms_array.length;\n\
    \    return boredoms;\n}\n", "    return S.toLowerCase().indexOf('i') > -1 ? 1\
    \ : 0;\n}\n</cell>\n<text>\nTask\nCreate a function is_ponderous(S) that returns\
    \ 1 if the sentence is ponderous and 0 otherwise\n\n\n</text>\n<cell>\ndef is_ponderous(S){\n\
    \    // your code here\n    // return 1 if the sentence is ponderous and 0 otherwise\n\
    }\n</cell>\n<text>\nTask\nCreate a function is_ponderous(S) that returns 1 if\
    \ the sentence is ponderous and 0 otherwise\n\n\n</text>\n<cell>\ndef is_ponderous(S){\n\
    \    // your code here\n    // return 1 if the sentence is ponderous and 0 otherwise\n\
    }\n</cell>\n<text>\nTask\nCreate a function is_ponderous(S) that returns 1 if\
    \ the sentence is ponderous and 0 otherwise\n\n\n</text>\n<cell>\ndef is_ponderous(S){\n\
    \    // your code here\n    // return 1 if the sentence is ponderous and 0 otherwise\n\
    }\n</cell>\n<text>\nTask\nCreate a function is_ponderous(S) that returns 1 if\
    \ the sentence is ponderous and 0 otherwise\n\n\n</text>\n<cell>\ndef is_ponderous(S){\n\
    \    // your code here\n    // return 1 if the sentence is ponderous and 0 otherwise\n\
    }\n</cell>\n<text>\nTask\nCreate a function is_ponderous(S) that returns 1 if\
    \ the sentence is ponderous and 0 otherwise\n\n\n</text>\n<cell>\ndef is_ponderous(S){\n\
    \    // your code here\n    // return 1 if the sentence is ponderous and 0 otherwise\n\
    }\n</cell>\n<text>\nTask\nCreate a function is_ponderous(S) that returns 1 if\
    \ the sentence is ponderous and 0 otherwise\n\n\n</text>\n<cell>\ndef is_ponderous(S){\n\
    \    // your code here\n    // return 1 if the sentence is ponderous and 0 otherwise\n\
    }\n</cell>\n<text>\nTask\nCreate a function is_ponderous(S) that returns 1 if\
    \ the sentence is ponderous and 0 otherwise\n\n\n</text>\n<cell>\ndef is_ponderous(S){\n\
    \    // your code here\n    // return 1 if the sentence is ponderous and 0 otherwise\n\
    }\n</cell>\n<text>\nTask\nCreate a function is_ponderous(S) that returns 1 if\
    \ the sentence is ponderous and 0 otherwise\n\n\n</text>\n<cell>", "  return boredom_count(S);\n\
    }\n\n", "  var boredoms = 0;\n  for (var i = 0; i <= S.length; i++){\n    var\
    \ current = S[i];\n    if (current == \".\"){\n      if (i == S.length - 1){\n\
    \        break;\n      }\n      boredoms += 1;\n    }\n    if (current == \"?\"\
    ){\n      if (i == S.length - 1){\n        break;\n      }\n      boredoms +=\
    \ 1;\n    }\n    if (current == \"!\"){\n      if (i == S.length - 1){\n     \
    \   break;\n      }\n      boredoms += 1;\n    }\n  }\n  return boredoms;\n}",
  "    let boredom = 0;\n    let boredoms = S.split('.');\n    for (let word of boredoms){\n\
    \        if(word == \"I\"){\n            boredom += 1;\n        }\n    }\n   \
    \ return boredom;\n}", "    var boredomCount = 0;\n    for (var i = 0; i<S.length;\
    \ i++){\n        if(S[i] == \"I\"){\n            boredomCount++;\n        }\n\
    \    }\n    return boredomCount;\n}", "  var words = S.split(/[.?!]/);\n  var\
    \ count = 0;\n  for(var i in words){\n    if (words[i].substring(0, 1) == \"I\"\
    ){\n      count++;\n    }\n  }\n  return count;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    I didn't down vote, but I suspect it's because you did not put any effort into\
    \ answering the question.\n<|/ c |>\n<| c |>\nThe question was, how to count the\
    \ occurrences of \"I\" in a list of sentences.\n<|/ c |>\n<| c |>\nSorry, I see\
    \ you've added that yourself. In that case I guess it deserves a downvote.\n<|/\
    \ c |>\n<| c |>\nThis is not counting occurrences of \"I\", it is counting occurrences\
    \ of \"I\" in a string. Although you might be right it looks confusing if someone\
    \ is new to this topic.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$word = \"I\";\n\
    $sentence = \"The sky is blue. The sun is shining. I love this weather\";\n\n\
    echo substr_count($sentence, $word); // prints 2\n</code>\n<|/ a tags=php,algorithm,string\
    \ |>\n<| c |>\nThis does not count occurrences of \"I\" in a string, it counts\
    \ occurrences of \"I\" in a string.\n<|/ c |>\n<| a tags=php,algorithm,string\
    \ |>\nThe other answers here are great if you are using PHP >= 5.4, but if you\
    \ are running an earlier version of PHP, you'll need to use strpos() like this:\n\
    <code>\n$string = \"The sky is blue. The sun is shining. I love this weather\"\
    ;\n$findme = \"I\";\n$pos = strpos($string, $findme);\n</code>\nThis will find\
    \ your string if it exists in the string and will return a Boolean value that\
    \ will tell you if it found it or not.\n<|/ a dscore=5 |>\n<| c |>\nWhat is difference\
    \ in running this function in php 5.4.0 as compared to 5.3.6 and above\n<|/ c\
    \ |>\n<| c |>\nIn PHP 5.3.0, `strpos()` took a *string*. In PHP 5.4.0, it took\
    \ a *string*. This was fixed in 5.4.4: http://php.net/ChangeLog-5.php#5.4.4\n\
    <|/ c |>\n<| c |>\nthanks for replying my question. Your answer really helped\
    \ me a lot.\n<|/ c |>\n<| c |>\nThe other ", "    var bored = 0;\n    S = S.split(\"\
    .\");\n    S = S[0];\n    S = S.split(\"?\");\n    S = S[0];\n    S = S.split(\"\
    !\");\n    S = S[0];\n\n    for(var i=0; i<S.length; i++){\n        if(S[i].match(/I/g)){\n\
    \            bored++;\n        }\n    }\n    return bored;\n}\n", "    return\
    \ count_boredom(S, ['.', '?','!']).boredom;\n}\n", "  return S(/\\b(I\\w*)/)[0].length\
    \ \n}\n", "    let i = 0;\n    while (i < S.length){\n        let word = S[i];\n\
    \        if (word == \"I\" || word == \"i\"){\n            break;\n        }\n\
    \        i++;\n    }\n    return i;\n}\n", "  var boredoms = S.split(\".\").map(function(x){\n\
    \    var boredom = 0;\n    if(x.indexOf(\"I\") === 0){\n      boredom++;\n   \
    \ }\n    return boredom;\n  }).filter(function(x){ return x !== 0; });\n  return\
    \ boredoms.length ? boredoms[0] : 0;\n}\n", "\tvar bored = false;\n\tfor(var i=0;\
    \ i<S.length; i++){\n\t\tif(S[i] == \"I\" && S[i+1] == \"o\" && S[i+2] == \"r\"\
    \ && S[i+3] == \"t\"){\n\t\t\tbored = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ bored;\n}\n", "    var count=0, i=0;\n    for(i; i<S.length; i++){\n       \
    \ if(S[i] === 'I'){\n            count++;\n            if((i+1) < S.length){\n\
    \                if((S[i+1] === '.') || (S[i+1] === ' ') || (S[i+1] === '!')){\n\
    \                    i++;\n                }else{\n                    count--;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n",
  "    return boredomsRE.exec(S)!=null\n}\n", "  var boredoms = 0;\n  S.split(/\\\
    .|\\?|!/).forEach(function(word) {\n    if (word == \"I\")\n      boredoms +=\
    \ 1;\n  });\n  return boredoms;\n}\n", "    var s = S.replace(/\\.\\.\\..+?/gi,\"\
    \").replace(/\\.\\?.+?/gi,\"\").replace(/!.+?/gi,\"\");\n    var arr = [];\n \
    \   var count = 0;\n    for (var i = 0; i < s.length; i++){\n        if (s[i]\
    \ === \"I\"){\n            count++;\n        }\n    }\n    return count;\n}\n",
  "    let boredoms = [];\n    let count = 0;\n    let words = S.split(\" \");\n\n\
    \    //Looking for \"I\"\n    for (let i=0;i<words.length;i++){\n        if (words[i]==\"\
    I\") boredoms.push(words[i+1]);\n    }\n\n    //Looking for \".\"\n    for (let\
    \ i=0;i<boredoms.length;i++){\n        if (boredoms[i]==\".\") count++;\n    }\n\
    \n    //Looking for \"?\"\n    for (let i=0;i<boredoms.length;i++){\n        if\
    \ (boredoms[i]==\"?\") count++;\n    }\n\n    //Looking for \"!\"\n    for (let\
    \ i=0;i<boredoms.length;i++){\n        if (boredoms[i]==\"!\") count++;\n    }\n\
    \n    return count;\n}\n", "  var bored = 0;\n  for(var i=0; i<S.length; i++){\n\
    \    var pos = S.indexOf(\" I\", i);\n    if(pos !== -1){\n      bored++;\n  \
    \    i = pos;\n    }\n  }\n  return bored;\n}\n", "    let boredom = 1;\n    for\
    \ (let i = 0; i < S.length; i++){\n        if (S[i].includes(\"I\")){\n      \
    \      boredom++;\n        }\n    }\n    return boredom;\n}\n", "\tS = S.split(\"\
    \ \");\n\tlet bored_count = 0;\n\tfor(let i = 0; i < S.length; i++){\n\t\tif(S[i].startsWith(\"\
    I\"))\n\t\t\tbored_count += 1;\n\t}\n\treturn bored_count;\n}\n", "    let boredom\
    \ = 0;\n    let sentence = S.split(\" \");\n    for(let i in sentence){\n    \
    \    if(sentence[i].startsWith(\"I\")){\n            boredom++;\n        }\n \
    \   }\n    return boredom;\n}", "    var bored = S.split('.');\n    return bored.length\
    \ == 1 && bored[0].split('?')[0].split('!')[0].indexOf(\"I\") !== -1;\n}\n", " \
    \   // The boredness test code was adapted from http://rosettacode.org/wiki/Boredness_test#JavaScript\n\
    \    // and http://jsfiddle.net/jfriend00/WV5Wb/\n    // Take a look at the tests\
    \ to see what is tested where.\n    var boredness = 0;\n    var tests = {\n  \
    \      'I': 0,\n        'me': 1,\n        'my': 1,\n        'myself': 1,\n   \
    \     'we': 1,\n        'our': 1,\n        'ours': 1,\n        'ourselves': 1,\n\
    \        'you': 1,\n        'your': 1,\n        'yours': 1,\n        'yourself':\
    \ 1,\n        'yourselves': 1,\n        'he': 1,\n        'him': 1,\n        'his':\
    \ 1,\n        'himself': 1,\n        'it': 1,\n        'its': 1,\n        'itself':\
    \ 1,\n        'they': 1,\n        'them': 1,\n        'theirs': 1,\n        'themselves':\
    \ 1,\n        'what': 1,\n        'which': 1,\n        'who': 1,\n        'whom':\
    \ 1,\n        'this': 1,\n        'that': 1,\n        'these': 1,\n        'those':\
    \ 1,\n        'am': 1,\n        'is': 1,\n        'are': 1,\n        'was': 1,\n\
    \        'were': 1,\n        'be': 1,\n        'been': 1,\n        'being': 1,\n\
    \        'have': 1,\n        'has': 1,\n        'had': 1,\n        'having': 1,\n\
    \        'do': 1,\n        'does': 1,\n        'did': 1,\n        'doing': 1,\n\
    \        'a': 1,\n        'an': 1,\n        'the': 1,\n        'and': 1,\n   \
    \     'but': 1,\n        'if': 1,\n        'or': 1,\n        'because': 1,\n \
    \       'as': 1,\n        'until': 1,\n        'while': 1,\n        'of': 1,\n\
    \        'at': 1,\n        'by': 1,\n        'for': 1,\n        'with': 1,\n \
    \       'about': 1,\n        'against': 1,\n        'between': 1,\n        'into':\
    \ 1,\n        'through': 1,\n        'during': 1,\n        'before': 1,\n    \
    \    'after': 1,\n        'above': 1,\n        'below': 1,\n        'to': 1,\n\
    \        'from': 1,\n        'up': 1,\n        'down': 1,\n        'in': 1,\n\
    \        'out': 1,\n        'on': 1,\n        'off': 1,\n        'over': 1,\n\
    \        'under': 1,\n        'again': 1,\n        'further': 1,\n        'then':\
    \ 1,\n        'once': 1,\n        'here': 1,\n        'there': 1,\n        'when':\
    \ 1,\n        'where': 1,\n        'why': 1,\n        'how': 1,\n        'all':\
    \ 1,\n        'any': 1,\n        'both': 1,\n        'each': 1,\n        'few':\
    \ 1,\n        'more': 1,\n        'most': 1,\n        'other': 1,\n        'some':\
    \ 1,\n        'such': 1,\n        'no': 1,\n        'nor': 1,\n        'not':\
    \ 1,\n", "    var bored = 0;\n    var i, l = S.length;\n    var word;\n    for\
    \ (i = 0; i < l; i++){\n        word = S[i];\n        if (word.charAt(0) === \"\
    I\" && bored == 0) bored = 1;\n    }\n    return bored;\n}\n", "    var count\
    \ = 0;\n    for (var i = 0; i < S.length; i += 1) {\n        if (S[i] === '.'\
    \ || S[i] === '?' || S[i] === '!') {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n", "    var boredoms = S.match(/\\B(I|i|!|.)/ig);\n   \
    \ return boredoms.length;\n}\n</cell>\n<cell>\n# Check your work against ours\
    \ by completing cells below. Once you === 0, you can run that cell to test\n#\
    \ our solution. Or, you can come back here and try some more problems.\n# Once\
    \ you verify that everything is correct, run this cell to submit your work for\
    \ grading.\n# Make sure to save your results first.\n</cell>\n<cell>\n# Work here\n\
    \n</cell>\n<text>\nPart 3: Automated Early Stopping\nIn this part of the exercise,\
    \ you will observe that we made a mistake in our earlier implementations of is_bored,\n\
    and you fixed it! Now we will add a new parameter to our function which controls\
    \ whether the algorithm should stop\nwhen it finds the first positive result,\
    \ rather than just stop when it finds the first negative result.\n\nYou are encouraged\
    \ to write new code in this cell, as you will have to modify a large part of our\
    \ code.\nRemember that our goal is to tell you whether this was a good model or\
    \ not!\n\nYour task is to complete the function early, which returns a boolean\
    \ based on whether or not it found the first\npositive result in the training\
    \ set. Once you have completed this function, you can run the cell below to test\
    \ your implementation.\n\n\n</text>\n<cell>\n# Work here\n\n</cell>\n<cell>\n\
    # Run this cell to check your answers\nget_ipython().run_line_magic('matplotlib',\
    \ 'inline')\n# check_answer(\"q1_1_check\", early)\n</cell>\n<text>\nPart 4: Early\
    \ stopping\nIn this exercise, we've added an additional parameter to our is_bored\
    \ function, which also determines whether the algorithm should stop\nwhen it finds\
    \ the first positive result, rather than just stop when it finds the first negative\
    \ result.\n\nYou are now encouraged to write new code in this cell, as you will\
    \ have to modify a large part of our code.\nRemember that our goal is to tell\
    \ you whether this was a good model or not!\n\nYour task is to complete the function\
    \ early, which returns a boolean based on whether or not it found the first\n\
    positive result in the training set. Once you have completed this function, you\
    \ can run the cell below to test your implementation.\n\n\n</text>\n<cell>\n#\
    \ Work here\n\n</cell>\n<cell>\n# Run this cell to check your answers\nget_ipython().run_line_magic('matplotlib',\
    \ 'inline')\n# check_answer(\"q1_4_check\", early)\n</cell>\n<text>\nPart 5: Vary",
  "    let boredoms = [];\n    S.split(\" \").forEach(word => {\n        if (word[0]\
    \ === \"I\"){\n            boredoms.push(1);\n        } else {\n            let\
    \ count = boredoms.filter(boredom => boredom === word).length;\n            boredoms.push(count\
    \ + 1);\n        }\n    });\n    let bored = boredoms.filter(boredom => boredom\
    \ === boredoms.max()).length;\n    return bored == 1;\n}\n", "  var count_boredom\
    \ = 0;\n  for(var i = 1; i<=S.length; i++){\n    var current_boredom = S.slice(0,i).indexOf(\"\
    I \")\n    if(current_boredom == 0){\n      count_boredom += 1\n    }\n  }\n \
    \ return count_boredom\n}", "\tvar boredoms = S.split('.');\n\tboredoms = boredoms.filter(function(s){return\
    \ s.startsWith(\"I\");});\n\tboredoms = boredoms.length;\n\treturn boredoms;\n\
    }\n", "  S = S.toLowerCase();\n  var N = 0;\n  for(var i = 0; i <S.length; i++){\n\
    \    if(S[i] == 'I' && S[i - 1] == '.' && S[i + 1] == '.'){\n      N = S.length\
    \ - i - 1;\n    }\n  }\n  return N;\n}\n", "  S = S.toLowerCase();\n  var boredom\
    \ = ['.', '!', '?'];\n  var words = S.split(\" \");\n  return words.some(function(word){\n\
    \    var first = word[0];\n    return boredom.some(function(boredom){\n      if(first\
    \ === boredom){\n        console.log(\"B: \" + word + \" \" + boredom);\n    \
    \    return true;\n      }\n    })\n  });\n}\n", "  if(S==undefined)\n    return\
    \ 0;\n\n  for(let i = 0; i<S.length-1; i++){\n    for(let j=i+1; j<S.length; j++){\n\
    \      if(S[i]=='.' || S[i]=='?' || S[i]=='!')\n        continue;\n      if(S[j]=='.'\
    \ || S[j]=='?' || S[j]=='!')\n        continue;\n      if(S[i]==S[j])\n      \
    \  continue;\n      if(S[i]=='.' && S[j]!='.' && S[j]!='?' && S[j]!='!')\n   \
    \     continue;\n      if(S[j]=='.' && S[i]!='.' && S[i]!='?' && S[i]!='!')\n\
    \        continue;\n      if(S[i]=='?' && S[j]!='?' && S[j]!='!')\n        continue;\n\
    \      if(S[j]=='?' && S[i]!='?' && S[i]!='!')\n        continue;\n      if(S[i]=='!'\
    \ && S[j]!='!' && S[j]!='.')\n        continue;\n      if(S[j]=='!' && S[i]!='!'\
    \ && S[i]!='.')\n        continue;\n\n      if(S[i]=='I')\n        return 1;\n\
    \n      return 0;\n    }\n  }\n\n  return 0;\n}\n", "\tvar bored = 0;\n\tvar tokens\
    \ = S.toLowerCase().split(' ');\n\tvar i;\n\tfor(i=0;i<tokens.length;i++){\n\t\
    \tif(tokens[i][0]==='i'||tokens[i].startsWith('!')){\n\t\t\tbored++;\n\t\t}\n\t\
    }\n\treturn bored;\n}\n", "\tS = S.split(\" \");\n\tfor(var i = 0; i < S.length;\
    \ i++){\n\t\tif(S[i][0] === \"I\"){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn 0;\n\
    }", "   var bored = false;\n   var s = S.split(\".\")\n   for (var i = 0; i <\
    \ s.length; i++){\n      if (s[i].startsWith(\"I\")){\n         bored = true;\n\
    \      }\n   }\n   return bored;\n}\n\nvar is_bored2 = function(S){\n   var bored\
    \ = false;\n   var s = S.split(\".\")\n   var i = 0; \n   while (!bored && i <\
    \ s.length){\n      if (s[i].startsWith(\"I\")){\n         bored = true;\n   \
    \   }\n      i++;\n   }\n   return bored;\n}\n", "    S = S.toLowerCase();\n \
    \   return S.match(/\\b(i|I|!)\\b/);\n}\n</cell>\n<cell>\nis_bored(\"The sun is\
    \ shining. I love this weather\")\n</cell>\n<cell>\nis_bored(\"Hello. How are\
    \ you?. I'm fine.\")\n</cell>\n<cell>\n# Write your answer below:\ndef count_bored(s):\n\
    \    return sum(is_bored(s))\n</cell>\n<cell>\n# Test cell:\nassert is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\") == 1, \"The word is\
    \ not bored\"\nassert is_bored(\"Hello. How are you?. I'm fine.\") == 0, \"The\
    \ word is bored\"\nassert is_bored(\"The sun is shining. I love this weather.\"\
    ) == 0, \"The word is bored\"\nassert is_bored(\"Hello. How are you?. I'm fine.\"\
    ) == 0, \"The word is bored\"\nassert is_bored(\"He is bored\") == 0, \"The word\
    \ is bored\"\nassert is_bored(\"I like to be bored\") == 0, \"The word is bored\"\
    \nassert is_bored(\"He is bored and I like to be bored\") == 0, \"The word is\
    \ bored\"\nassert is_bored(\"Hello world\") == 0, \"The word is bored\"\nassert\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather.\") == 0,\
    \ \"The word is bored\"\n</cell>\n<cell>\ncount_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n</cell>\n<cell>\n# Write your answer below:\n\
    def count_bored(s):\n    S = s.lower()\n    return sum(is_bored(S))\n</cell>\n\
    <cell>\n# Test cell:\nassert count_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\") == 1, \"The word is not bored\"\nassert count_bored(\"\
    Hello. How are you?. I'm fine.\") == 0, \"The word is bored\"\nassert count_bored(\"\
    The sun is shining. I love this weather.\") == 0, \"The word is bored\"\nassert\
    \ count_bored(\"Hello. How are you?. I'm fine.\") == 0, \"The word is bored\"\n\
    assert count_bored(\"He is bored\") == 0, \"The word is bored\"", "   S = S.toLowerCase();\n\
    \   for(var i = 0 ; i<S.length ; i++){\n     if(S[i] == \"I\" && S[i+1] == \"\
    I\"){\n       return 1;\n     }\n   }\n   return 0;\n}\n", "  var boredoms=0;\n\
    \  var s=S.split(' ');\n  for(i=0;i<s.length;i++){\n    if(s[i].substr(0,4)=='I'){\n\
    \      boredoms+=1;\n    }\n  }\n  return boredoms;\n}\n", "    let strArr = [].concat(S);\n\
    \    let count = 0;\n    for(let i = 0; i < strArr.length; i++){\n        if(strArr[i]\
    \ == 'I' || strArr[i] == '.'){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n", "  var boredom = false;\n  for (var i = 0; i < S.length; i++){\n\
    \    if (S[i] === 'I'){\n      boredom = true;\n    }\n  }\n  return boredom;\n\
    }\n</cell>\n<text>\nis_bored tests if a string starts with the letter \"I\" by\
    \ looping over the string.\n\n\n</text>\n<text>\nTask:\nComplete the function\
    \ count_boredoms() that takes in a string and returns an int count of the number\
    \ of boredoms that occur in your string.\n\nHINT: You may want to use the count_boredoms\
    \ function from the previous exercise.\n\n\n</text>\n<cell>", "  S=S.toLowerCase();\n\
    \  return boredom_check(S,[\".\",\".\",\"?\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"\
    .\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".", "  // Your code goes here.\n\
    }\n", "    var boredom = S.match(/\\bI\\w*\\b/g);\n    return boredom ? boredom.length\
    \ : 0;\n}\n", "  S = S.split(\" \");\n  var count = 0;\n  for(var i=0; i<S.length;\
    \ i++){\n    if(S[i].substr(0, 1) == \"i\"){\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "    var count = 0;\n    for(var i=0; i<S.length; i++){\n    \
    \    if(S[i] == 'i'){\n            count++;\n            if(S[i-1] == '.'){\n\
    \                count++;\n                if(S[i-2] == '.'){\n              \
    \      count++;\n                    if(S[i-3] == '.'){\n                    \
    \    count++;\n                    }\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}\n</cell>\n<cell>", "  var bored = 0;\n  var\
    \ strs = S.split('.');\n  for(var i=0;i<strs.length;i++){\n    if(strs[i].charAt(0)\
    \ === 'I')\n      bored += 1;\n  }\n  return bored;\n}\n</cell>\n<cell>\nassert(is_bored(\"\
    Hello world\") === 0);\nassert(is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\") === 1);\n</cell>\n<cell>", "    let arr = S.split('.');\n\
    \    for( let i of arr){\n        switch(i){\n            case 'I': \n       \
    \         if(!bored.includes('I')){\n                    bored.push('I');\n  \
    \              }\n                break;\n            case '!':\n            \
    \    if(!bored.includes('!')){\n                    bored.push('!');\n       \
    \         }\n                break;\n            case '?':\n                if(!bored.includes('?')){\n\
    \                    bored.push('?');\n                }\n                break;\n\
    \            default:\n                break;\n        }\n    }\n    let sum =\
    \ 0;\n    bored.forEach(function(i){\n        if(i == '!'){\n            sum++;\n\
    \        }\n    });\n    return sum;\n}\n", "  return S.split(' ').map( function(s){\
    \ return s.split('')[0]; } ).reduce(function(a,b){\n    return a + Math.round((b.split('?').length\
    \ - b.split('.').length) /\n     (b.split('!').length - b.split('?').length) );\n\
    \  }, 0);\n}\n", "\tlet boredom_counter = 0;\n\tlet word_counter = 0;\n\tlet boredom_check\
    \ = false;\n\tfor (let i=0; i<S.length; i++){\n\t\tif (S[i] == \"I\"){\n\t\t\t\
    boredom_check = true;\n\t\t}\n\t\telse if (S[i] == \".\"){\n\t\t\tif (boredom_check){\n\
    \t\t\t\tboredom_counter++;\n\t\t\t\tboredom_check = false;\n\t\t\t}\n\t\t}\n\t\
    \telse if (S[i] == \"?\" || S[i] == \"!\"){\n\t\t\tif (boredom_check){\n\t\t\t\
    \tboredom_counter++;\n\t\t\t\tboredom_check = false;\n\t\t\t}\n\t\t}\n\t\telse{\n\
    \t\t\tword_counter++;\n\t\t}\n\t}\n\treturn boredom_counter;\n}\n", "  if(S.length===0)\n\
    \    return 0\n  var bored=0\n  if(S.slice(0,3).search(\"I\")!==-1){\n    bored+=1\n\
    \  }\n  if(S.slice(0,4).search(\"I\")!==-1){\n    bored+=1\n  }\n  if(S.slice(0,5).search(\"\
    I\")!==-1){\n    bored+=1\n  }\n  return bored\n}\n", "  S = S.split('.').join('\
    \ ').split(' ').join('. ').split('?').join(' ').split('!').join(' ');\n  var boredom\
    \ = 0;\n  for(var i=0; i<S.length; i++){\n    if(S[i].trim().length > 0){\n  \
    \    if(S[i][0] == 'I'){\n        boredom++;\n      }\n    }\n  }\n  return boredom;\n\
    }\n", "    for(var i = 0, len = S.length; i < len; i++){\n        if(S.charAt(i)\
    \ != 'I'){\n            return 0;\n        }\n    }\n    return 1;\n}\n", "  \
    \  var re = new RegExp('^I');\n    return re.test(S);\n}\n", "\tfor(var i = S.length;\
    \ i--; )\n\t\tif( S[i] !== \".\" && S[i] !== \"?\" && S[i] !== \"!\" && S[i] !==\
    \ \"I\" )\n\t\t\treturn 0;\n\treturn 1;\n}\n", "    if(!S.trim().length)\n   \
    \     return 0\n    let boredoms = {\n        \"I\": 0,\n        \"me\": 0,\n\
    \        \"myself\": 0,\n        \"my\": 0, \n        \"mys\": 0,\n        \"\
    mine\": 0,\n        \"myrs\": 0,\n        \"our\": 0,\n        \"ours\": 0,\n\
    \        \"ourselves\": 0,\n        \"we\": 0,\n        \"ourselves\": 0,\n  \
    \      \"the\": 0,\n        \"their\": 0,\n        \"themselves\": 0,\n      \
    \  \"theirs\": 0,\n        \"themselves\": 0,\n        \"itself\": 0,\n      \
    \  \"the\": 0\n    }\n    S = S.replace(/\\.|?| |\\!/g, \"\")\n    let words =\
    \ S.split(\" \")\n    for (let word of words) {\n        if (word.substring(0,\
    \ 1) == \"I\") {\n            boredoms[word] = boredoms[word]+1\n        }\n \
    \   }\n    return boredoms[\"I\"]\n}\n", "    var count = S.toLowerCase().match(/\\\
    bi/g);\n    return count === null ? 0 : count.length;\n}\n</code>\n<|/ a tags=javascript\
    \ |>\n<| c |>\nThanks for the effort. Yeah, I can write it myself easily, but\
    \ the point of this question is to figure out if there's a built in method or\
    \ something in JS that can handle it for me. It's not that I'm lazy, I just need\
    \ to learn how to do this myself.\n<|/ c |>\n<| c |>\nYou can't count the words\
    \ with a single line of code, just like the other answers here do. The reason\
    \ is that you would have to loop through the string and count each time the word\
    \ \"I\" shows up. The built-in method doesn't do this - it simply counts the number\
    \ of times the character \"I\" shows up in the string. You need to loop through\
    \ it yourself. There are a number of ways you could do this though. One is to\
    \ simply use regular expressions to find all the occurrences of \"I\" and add\
    \ up all the matches.\n<|/ c |>\n<| c |>\nIf you really want to do this yourself,\
    \ here's a function that would do it. Just call it like this: var count = count_bored(S);\n",
  "  let i=0;\n  for(let word of S.split(\" \")){\n    if(word[0]===\"I\") i++;\n\
    \  }\n  return i;\n}\n", "  if(S==null){\n    return 0;\n  }\n  S=S.toLowerCase().trim();\n\
    \  if(S.slice(0,4)!=\"i love this \"){\n    return 0;\n  }\n  if(S.slice(S.length-1)!=\"\
    .\"){\n    return 0;\n  }\n  return 1;\n}\n", "    var result = 0;\n    var words\
    \ = S.split(\" \");\n    for (var i=0; i<words.length; i++){\n        if (words[i]\
    \ == \"I\"){\n            result = 1;\n            break;\n        }\n    }\n\
    \    return result;\n}\n", "    var boredom = false;\n    S = S.toLowerCase();\n\
    \    for (var i = 0; i <= S.length; i++ ){\n        var j = i+1;\n        while\
    \ (j < S.length && S[j] !='.' && S[j] !='?' && S[j] !='!' ){\n            boredom\
    \ = boredom || S[i]==S[j];\n            j++;\n        }\n    }\n    return boredom;\n\
    }\n", "  return S.split(\".\")[0].indexOf(\"I\")>-1;\n}\n", "  return boredom_count(S,\
    \ \"I\") == 0;\n}\n\n", "\tvar bored = 0;\n\tS.split(\" \").forEach(function(word){\n\
    \t\tif(word.indexOf(\"I\") != -1){\n\t\t\tbored++;\n\t\t}\n\t});\n\treturn bored;\n\
    }\n", "\tS = S.trim();\n\tvar word_arr = S.split('.');\n\tvar is_bored = 0;\n\t\
    for(var i=0; i< word_arr.length; i++){\n\t\tif(!word_arr[i].startsWith(\"I\")){\n\
    \t\t\tis_bored += 1;\n\t\t}\n\t}\n\treturn is_bored;\n}\n", "    S = S.split('.');\n\
    \    if (S.length<2) return 0;\n    var bored = 0;\n    var boredom_words = \"\
    I love this weather\";\n    S = S.join(' ')\n    for (var i=0; i<S.length; i++)\
    \ {\n        var word = S[i];\n        if (boredom_words.indexOf(word.toLowerCase())\
    \ >= 0) bored++;\n    }\n    return bored;\n}\n</code>\n<|/ a tags=javascript,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\nvar sentence = 'The sky is blue. The sun is shining.\
    \ I love this weather.';\nvar words = ['I','love','this','weather'];\nvar bored\
    \ = 0;\nvar words_splitted = sentence.split(' ');\nfor(var i=0; i<words.length;\
    \ i++){\n    bored += words_splitted.filter(function(word){return word.toLowerCase().indexOf(words[i])>-1}).length;\n\
    }", "  var arr = [];\n  for(var i=0; i<S.length; i++){\n    var word = S[i];\n\
    \    if(word[0] == \"I\"){\n      arr.push(1);\n    }else if(arr){\n      var\
    \ last = arr[arr.length-1];\n      if(last>=1){\n        arr.push(last+1);\n \
    \     }else{\n        arr.push(1);\n      }\n    }\n  }\n  return arr[arr.length-1];\n\
    }", "  return bored(S, 0, 0);\n}\n", "    var bored = 0;\n    S.split(\".\").forEach(function(word){\n\
    \        if (word.charAt(0) === \"I\") bored++;\n    });\n    return bored;\n\
    }\n", "\treturn boredom_count(S);\n}\n\n", "  let boredoms = []\n  for (let word\
    \ of S.split(\" \")){\n    if (word.startsWith(\"I\")){\n      boredoms.push(word)\n\
    \    }\n  }\n  return boredoms.length\n}\n", "  S = S.split(' ');\n  for(var i\
    \ = 0;i < S.length;i++){\n    if(S[i].charAt(0) == 'I'){\n      if(S[i].length\
    \ < 2){\n        return 0;\n      }\n      for(var j = i - 1;j >= 0;j--){\n  \
    \      if(S[j].charAt(0) == '.' || S[j].charAt(0) == '?' || S[j].charAt(0) ==\
    \ '!'){\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n",
  "    return boredomsCount(S, 0, S.length-1) === 0;\n}", "  return ((is_bored(S.split(\"\
    \ \"))+is_bored(S.split(\"? \"))+is_bored(S.split(\"! \")) == 3) ?\n    is_bored(S.split(\"\
    .\"))+is_bored(S.split(\"? \"))+is_bored(S.split(\"! \")) :\n    is_bored(S.split(\"\
    ?\"))+is_bored(S.split(\"!\"))+is_bored(S.split(\" \")));\n}\n", "    var boredoms\
    \ = 0;\n    for (var i = 0; i < S.length; i++) {\n        if (S[i] === 'I' &&\
    \ S[i+1] === 'I') boredoms++;\n        if (S[i] === 'I' && S[i+1] === '!') boredoms++;\n\
    \        if (S[i] === '.' && S[i+1] === '!') boredoms++;\n        if (S[i] ===\
    \ '!' && S[i+1] === '.') boredoms++;\n        if (S[i] === '.' && S[i+1] === '?')\
    \ boredoms++;\n        if (S[i] === '?' && S[i+1] === '.') boredoms++;\n     \
    \   if (S[i] === '!' && S[i+1] === '?') boredoms++;\n        if (S[i] === '.'\
    \ && S[i+1] === '?') boredoms++;\n    }\n    return boredoms;\n}\n", "    var\
    \ count = 0;\n    for(var i=0; i<S.length; i++){\n        char = S[i];\n     \
    \   if(!is_bored_word(char){ continue; }\n        if(char == \".\" || char ==\
    \ \"?\" || char == \"!\"){ count++; }\n    }\n    return count;\n}\n</code>\n\
    This has some advantages. First, it won't miss cases like \"i.i.i.i\" -- it will\
    \ catch all 4 boredoms -- but it will also catch words that are not boredoms,\
    \ such as \"i\", \"you\", \"and\", and \"o'clock\". You won't notice this for\
    \ most of us, who do boredom checks daily.\nSecond, it runs very quickly, since\
    \ it can use a simple loop to check the entire string.\nThird, it also works very\
    \ quickly because it's written in JavaScript. The C version is faster, but in\
    \ reality the performance difference is very small, probably around 10%.\nFinally,\
    \ it uses the concept of counting words. Basically, it just checks whether the\
    \ first character of the string is either a \".\", \"?\", or \"!\", and if it\
    \ is, increments a counter called boredom_count. After it has done that, you can\
    \ just check the boredom_count variable. \nThe benefit of this approach is it's\
    \ easy, fast, and effective. Even if it's not the most efficient way to do it,\
    \ it's more intuitive to read, and it also works very quickly because it's written\
    \ in JavaScript.\nFinally, it's written in JavaScript instead of C, which is usually\
    \ what you do when writing JavaScript. JavaScript engines are really good at optimising\
    \ code, and writing JavaScript is often faster than writing C. But, writing JavaScript\
    \ in C requires a very different approach.\n<|/ a dscore=4 tags=javascript,c,algorithm\
    \ |>\n<| c |>\nI wouldn't worry about performance, it's already fast enough if\
    \ you care about it. C is faster than JavaScript, since C is a lot faster than\
    \ JavaScript. C is also faster than C++, since it's often faster than C++.\n<|/\
    \ c |>\n<| c |>\nIf you're worried about performance, why are you using a language\
    \ like C?\n<|/ c |>\n<| c |>\nThis is an interesting solution, but I feel like\
    \ it can be improved, for instance the count variable could be an array, that\
    \ way it would be easy to add more boredoms, by simply changing the array and\
    \ not having to rewrite the entire function. Also, what about words with no boredoms\
    \ such as \"This\"?\n<|/ c |>\n<| c |>\nIt would be easy to add more boredoms,\
    \ by changing the array. Just add another element ", "    // Initialize the counter\n\
    \    var counter = 0;\n    // Start by saying that each word starts with the word\
    \ \"I\"\n    for (var i = 0; i < S.length; i++){\n      if (S.charAt(i).toLowerCase()\
    \ == 'i'){\n        counter++;\n      }\n    }\n    // After that, increment the\
    \ count for boredom\n    for (var j = 0; j < S.length; j++){\n      if (S.charAt(j).toLowerCase()\
    \ == '.'){\n        counter++;\n      }\n      else if (S.charAt(j).toLowerCase()\
    \ == '?'){\n        counter++;\n      }\n      else if (S.charAt(j).toLowerCase()\
    \ == '!'){\n        counter++;\n      }\n    }\n    return counter;\n  }\n", " \
    \   var words = S.split(\" \");\n    var count = 0;\n    for(var i=0;i<words.length;i++){\n\
    \        if(words[i]==\"I\"){\n            count+=1;\n        }\n    }\n    return\
    \ count;\n}\n", "    var boredoms = new Array();\n    var bored = S.split(\" \"\
    );\n    for (var i=0; i < bored.length; i++) {\n        if(bored[i].startsWith(\"\
    I\")) boredoms.push(bored[i]);\n    }\n    return boredoms.length;\n}", "  var\
    \ boredoms = 0;\n  for (var i = 0; i < (S.length-1); i++){\n    if (S[i] == '.'){\n\
    \      boredoms++;\n    }else if (S[i] == '?'){\n      boredoms++;\n    }else\
    \ if (S[i] == '!'){\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\n",
  "  return S.indexOf(\"I\") === 0;\n}\n", "  var boredoms = ['I','you','me','my','myself','we','us','our','ours','ourselves','you','your','yours','yourself',\n\
    \                   'yourselves','he','him','his','himself','she','her','hers','herself','it','its','itself',\n\
    \                   'they','them','their','theirs','themselves','what','which','who','whom','this','that','these','those',\n\
    \                   'am','is','are','was','were','be','been','being','have','has','had','having','do','does','did','doing','a',\n\
    \                   'the','an','the','and','but','if','or','because','as','until','while','of','at','by','for','with','about','against',\n\
    \                   'between','into','through','during','before','after','above','below','to','from','up','down','in','out','on','off','over',\n\
    \                   'under','again','further','then','once','here','there','when','where','why','how','all','any','both','each','few',\n\
    \                   'more','most','other','some','such','no','nor','not','only','own','same','so','than','too','very','s','t','can','will',\n\
    \                   'just','don','should','now'];\n  var n = S.split(\" \").length;\n\
    \  var count = 0;\n  for(var i = 0; i < n; i++){\n    if(boredoms.indexOf(S.charAt(i))\
    \ == -1){\n      count++;\n    }\n  }\n  return count;\n}\n", "\tS = S.replace(/^\\\
    s+|\\s+$/g,\"\");\n\tvar boredoms = S.match(/\\bI\\.{1,3}\\s?/g); \n\treturn (boredoms\
    \ || []).length;\n}", "    str = S.split('.');\n    for(i=0;i<str.length;i++){\n\
    \        if(str[i].split('?')[0] == str[i][0]){\n            return 1;\n     \
    \   }\n        else if(str[i].split('!')[0] == str[i][0]){\n            return\
    \ 1;\n        }\n        else if(str[i][0] == 'I'){\n            return 1;\n \
    \       }\n    }\n    return 0;\n}", "\tvar bored_count = 0;\n\tfor (var i = 0;\
    \ i < S.length; i++){\n\t\tif (S[i] == '.' || S[i] == '?' || S[i] == '!'){\n\t\
    \t\tbored_count++;\n\t\t}\n\t}\n\treturn bored_count;\n}\n", "    return boredom_count(S)\
    \ > 0;\n}\n", "    bored=0;\n    S.split(\" \").forEach(function(word){\n    \
    \    if (word.substr(0,1)==\"I\"){\n            bored++;\n        }\n    });\n\
    \    return bored;\n}\n</cell>\n<text>\nFinally, you can write the function is_bored\
    \ which takes one argument and returns the number of times the word \"I\" appears\
    \ in the sentence S.\n\n\n</text>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n\
    <text>\nGreat work! But how long will it take you to write the function is_bored?\n\
    \n\n</text>\n<text>\nWrite a function is_bored that takes one argument and returns\
    \ the number of times the word \"I\" appears in the sentence S. Hint: You can\
    \ use the split() method of strings to split a sentence into words.\n\n\n</text>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nWhen you are done, you should have a function is_bored() that\
    \ takes in one string and returns the number of boredoms.\n\n\n</text>\n<text>\n\
    Write a function to replace all periods in the sentence S with question marks.\n\
    \n\n</text>\n<cell>\n#You'll be given a string of words, and your task is to replace\
    \ all periods in the sentence with question marks.\n#The function will return\
    \ a string.\n#For example:\n#>>> replace(\"The sky is blue. The sun is shining.\
    \ I love this weather.\")\n#[\"The sky is blue?\", \"The sun is shining? I love\
    \ this weather?\"]\n#>>> replace(\"The sky is blue. The sun is shining. I love\
    \ this weather.\")\n#[\"The sky is blue?\", \"The sun is shining? I love this\
    \ weather?\"]\n</cell>\n<cell>\ndef replace(S): \n    S.split(\" \").forEach(function(word){\n\
    \        if (word==\".\"){\n            S=S.replace(\".\",\".?\");\n        }\n\
    \    });\n    return S;\n}\n</cell>\n<text>\nGreat! Now that you have completed\
    \ the \"Hello World\" challenge, let's move on to the second part of the challenge.\n\
    \n\n</text>\n<text>\nPart 2: Spelling Checker\nNow that you have completed your\
    \ \"Hello World\" function, the next step is to write some code that checks spelling\
    \ of words in the English language. Check out SpellChecker.js to learn more about\
    \ how this project is set up.\n\nThe SpellChecker.js is a javascript file that\
    \ contains functions for you to check spelling in different languages. You can\
    \ use these to check if a word is spelled correctly or to ", "  var boredoms =\
    \ S\n    .replace(/\\.\\s/g, '. ')\n    .replace(/\\b(I\\b)\\b/g, '')\n    .trim()\n\
    \    .split(' ')\n    .filter(function(el) {\n      return el != \"\";\n    });\n\
    \n  var count = 0;\n  boredoms.forEach(function(boredom) {\n    if (boredom.indexOf(\"\
    I\") != -1) count++;\n  });\n  return count;\n}\n", "\tvar bored = 0;\n\tfor (var\
    \ i=0; i<S.length; i++){\n\t\tvar c = S.charAt(i);\n\t\tif (c == '.' || c == '!'\
    \ || c == '?') bored += 1;\n\t}\n\treturn bored;\n}\n", "  // Your code here\n\
    \  S=S.split(\".\");\n  for(var i=0;i<S.length;i++){\n    if(S[i][0]==\"I\"){\n\
    \      return 1;\n    }\n  }\n  return 0;\n}\n", "\tvar boredoms = {};\n\tS.split('.').forEach(function(i){\n\
    \t\tif (i.length == 0) return;\n\t\tif (i[0] != 'I') return;\n\t\tvar boredoms_string\
    \ = boredoms[i.slice(1)] || 0;\n\t\tboredoms[i.slice(1)] = boredoms_string + 1;\n\
    \t});\n\tvar boredom_count = boredoms[\"I\"];\n\treturn boredom_count;\n}\n",
  "  S = S(S);\n  S = S.toLowerCase();\n  var i = S.indexOf(\"I\");\n  var boredom\
    \ = 0;\n  if (i > -1 && S.indexOf(\".\", i) > -1){\n    boredom++;\n  }\n  else\
    \ if (i > -1 && S.indexOf(\".\", i) > -1){\n    boredom++;\n  }\n  else if (i\
    \ > -1 && S.indexOf(\"!\", i) > -1){\n    boredom++;\n  }\n  else if (i > -1 &&\
    \ S.indexOf(\"?\", i) > -1){\n    boredom++;\n  }\n  return boredom;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=javascript,counting,string,indexof,string |>\n<code>\n\
    const count = (str) => {\n  const array = str.split(' ');\n  let count = 0;\n\n\
    \  for (let i = 0; i < array.length; i++){\n    if (array[i] === \"I\"){\n   \
    \   count++;\n    }\n  }\n  return count;\n}\n\nconst boredom = (str) => {\n \
    \ const array = str.split(' ');\n  let count = 0;\n\n  for (let i = 0; i < array.length;\
    \ i++){\n    if (array[i] === \"I\"){\n      count++;\n    }\n  }\n  return count;\n\
    }\n\nconst is_boredom = (str) => {\n  const array = str.split(' ');\n  let count\
    \ = 0;\n\n  for (let i = 0; i < array.length; i++){\n    if (array[i] === \"I\"\
    \ || array[i] === \"!\" || array[i] === \"?\"){\n      count++;\n    }\n  }\n\
    \  return count;\n}\n\nconst boredom_array = ['I','!', '?'];\n", "  var count\
    \ = 0;\n  S.split('.').forEach(function(str){\n    str= str.trim();\n    var arr\
    \ = str.split(' ');\n    if (arr.length == 1 || arr.length >1 && arr[0].length\
    \ == 1 && arr[0].trim() == \"I\")\n      count++;\n  });\n  return count;\n}\n",
  "    var bored = 0;\n    if(S === null || S === undefined){\n        return bored;\n\
    \    }\n    var S = S.toLowerCase();\n    var bored = [\"i\", \"me\", \"my\",\
    \ \"myself\", \"we\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\", \"\
    yours\", \"yourself\", \"yourselves\", \"he\", \"him\", \"his\", \"himself\",\
    \ \"she\", \"her\", \"hers\", \"herself\", \"it\", \"its\", \"itself\", \"they\"\
    , \"them\", \"their\", \"theirs\", \"themselves\", \"what\", \"which\", \"who\"\
    , \"whom\", \"this\", \"that\", \"these\", \"those\", \"am\", \"is\", \"are\"\
    , \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\",\
    \ \"having\", \"do\", \"does\", \"did\", \"doing\", \"a\", \"an\", \"the\", \"\
    and\", \"but\", \"if\", \"or\", \"because\", \"as\", \"until\", \"while\", \"\
    of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\",\
    \ \"into\", \"through\", \"during\", \"before\", \"after\", \"above\", \"below\"\
    , \"to\", \"from\", \"up\", \"down\", \"in\", \"out\", \"on\", \"off\", \"over\"\
    , \"under\", \"again\", \"further\", \"then\", \"once\", \"here\", \"there\",\
    \ \"when\", \"where\", \"why\", \"how\", \"all\", \"any\", \"both\", \"each\"\
    , \"few\", \"more\", \"most\", \"other\", \"some\", \"such\", \"no\", \"nor\"\
    , \"not\", \"only\", \"own\", \"same\", \"so\", \"than\", \"too\", \"very\", \"\
    s\", \"t\", \"can\", \"will\", \"just\", \"don\", \"should\", \"now\"];\n    var\
    \ len = S.length;\n    var i;\n    for(i = 0; i < len; i++){\n        if(bored.indexOf(S[i])\
    \ > -1){\n            bored++;\n        }\n    }\n    return bored;\n}\n", " \
    \ S = S.toLowerCase().replace(/\\.|!|\\?|\\. /g, '.');\n  var a = S.split('.'),\n\
    \      count = 0,\n      i;\n  for (i = 0; i < a.length; i++) {\n    if (/^i/.test(a[i]))\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "  for(var i=0; i<S.length;i++){\n\
    \    if (S[i]==\".\"){\n      return 0\n    }\n    else if (S[i]==\"?\"){\n  \
    \    return 0\n    }\n    else if (S[i]==\"!\"){\n      return 0\n    }\n    else\
    \ if (S[i]==\"I\"){\n      return 1\n    }\n  }\n  return 0\n}", "    return count(boredom(S),\
    \ 0, S.length);\n}\n", "  S = S.toLowerCase();\n  S = S.split('.');\n  let I =\
    \ 0;\n  for (let i = 0; i < S.length; i++){\n    if(S[i].toLowerCase().startsWith(\"\
    i\")) I++;\n  }\n  return I;\n}", "  let boredoms = S.match(/\\b(I\\w*)\\.?\\\
    b/g)\n  if (boredoms == null){\n    return 0\n  }\n  else {\n    return boredoms.length\n\
    \  }\n}\n", "    \n    S = S.split(\".\");\n    \n    \n    for (var i=0; i <\
    \ S.length; i++){\n        if(S[i].indexOf(\"I\") == 0){\n            return 1;\n\
    \        }\n    }\n    return 0;\n    \n}\n", "    str = S.split(\" \");\n   \
    \ bored = 0;\n    for(i = 0; i <= str.length; i++){\n        word = str[i];\n\
    \        if(word[0] === \"I\"){\n            bored++;\n        }\n    }\n    return\
    \ bored;\n}\n", "    var bored = 0;\n    S = S.toLowerCase();\n    var regex =\
    \ new RegExp(\"^[I]\", \"i\");\n    bored = bored + S.match(regex).length\n  \
    \  return bored;\n}\n", "  var boredoms = 0;\n  for (var i = 0; i < S.length;\
    \ i++){\n    if (S[i] == 'I'){\n      boredoms++;\n    }\n  }\n  return boredoms;\n\
    }\n", "  var words = S.split(/[.?!]/);\n  return words.some(function(word){\n\
    \    return word == 'I';\n  });\n}", "  return S.replace(/[^.?!]/g,'').split(/\\\
    W+/).filter(function(x){return x===\"I\"}).length>0\n}", "  var bored = 0;\n \
    \ var i = 0;\n  while(i < S.length){\n    if(S.substring(i, i+1).match('I')){\n\
    \      bored++;\n    }\n    i += 1;\n  }\n  return bored;\n}\n", "  var bored\
    \ = 0;\n  var str = S.split(\" \");\n  var re = new RegExp(\"^I\", \"i\");\n \
    \ for(var i = 0; i < str.length; i++){\n    var found = str.match(re);\n    if(found\
    \ != null && found.length == 1){\n      bored += 1;\n    }\n  }\n  return bored;\n\
    }\n", "    var bored = 0;\n    S.split(\".\").forEach(function(word){\n      \
    \  if(word.substr(0,1)==\"I\"){\n            bored++;\n        }\n    });\n  \
    \  return bored;\n}\n", "    var s = S.split('.');\n    return (s[0][0] == 'I')\
    \ ? 1 : 0;\n}\n", "    let boredoms_count = 0\n    for(let i=0; i<S.length; i++){\n\
    \        if(S[i].startsWith(\"I\")){\n            boredoms_count++\n        }\n\
    \    }\n    return boredoms_count\n}\n", "    var patt = new RegExp(\"[\\\\.?!]I\"\
    , \"gi\");\n    return S.match(patt).length;\n}\n", "    S = S.toLowerCase();\n\
    \    var n = S.split(/\\./).length - 1;\n    if (S.startsWith(\"i\")) return n;\n\
    \    else if (S.startsWith(\"!\")) return -(n + 1);\n    else return 0;\n}\n",
  "  if(S.indexOf(\"I\") === 0){\n    return 1;\n  }\n  else if(S.indexOf(\"a\") ===\
    \ 0){\n    return 1;\n  }\n  else if(S.indexOf(\"the\") === 0){\n    return 1;\n\
    \  }\n  else if(S.indexOf(\"of\") === 0){\n    return 1;\n  }\n  else if(S.indexOf(\"\
    my\") === 0){\n    return 1;\n  }\n  else if(S.indexOf(\"is\") === 0){\n    return\
    \ 1;\n  }\n  else if(S.indexOf(\"are\") === 0){\n    return 1;\n  }\n  else if(S.indexOf(\"\
    that\") === 0){\n    return 1;\n  }\n  else if(S.indexOf(\"is\") === 0){\n   \
    \ return 1;\n  }\n  else if(S.indexOf(\"the\") === 0){\n    return 1;\n  }\n \
    \ else if(S.indexOf(\"I\") === 0){\n    return 1;\n  }\n  else{\n    return 0;\n\
    \  }\n}\n</cell>\n<cell>\n# Test your function here.\nprint(is_bored(\"Hello,\
    \ world.\"))\n</cell>\n<cell>\n# Now do this!\n\n# Create a variable called bored_sentences\
    \ that contains the entire corpus of boredoms \nbored_sentences = pd.Series(bored)\n\
    \n# Create a new variable called bored_count that contains the number of boredoms\
    \ for each boredom sentence.\nbored_count = bored_sentences.map(is_bored)\n</cell>\n\
    <cell>\n# Print out your new count variable\nbored_count\n</cell>\n<cell>\n# Print\
    \ out your new count variable\nbored_count.sum()\n</cell>\n<text>\nStep 3: (Optional)\
    \ Stemming and Lemmatization\nYou'll now implement a function called stem() that\
    \ you will use to clean and normalize your text data. You will also implement\
    \ a helper function called lemmatize() to carry out the same operations on the\
    \ lemmas instead of the words directly. Stemming is more aggressive in removing\
    \ affixes. Lemmatization is more aggressive in removing the suffixes. Both of\
    \ these can be useful in reducing inflected forms.\n\nFor both of these tasks,\
    \ there is one key parameter that must be passed to both functions: an optional\
    \ boolean parameter called case. case controls whether or not the text being transformed\
    \ to lower case should be transformed to title case (uppercase the first character\
    \ of each word and lowercase the rest) or not. Run the code cells below to see\
    \ what each of these transformations does to the word Steven.\n\n\n</text>\n<cell>\n\
    # Convert all strings in the bored_count Series to title case", "  var bored =\
    \ 0;\n  var sentence = S.split('.').join(' ').split('? ').join(' ').split('! ').join('\
    \ ');\n  for (var i=0; i<sentence.length; i++){\n    if (sentence[i].substring(0,\
    \ 1) == 'I'){\n      bored += 1;\n    }\n  }\n  return bored;\n}", "\tvar bored\
    \ = 0;\n\tS.split('.').forEach(function(str){\n\t\tif(str[0]=='I') bored++;\n\t\
    });\n\treturn bored;\n}\n", "    S = S.split('.');\n    S = S[0];\n    S = S.split('?');\n\
    \    S = S[0];\n    S = S.split('!');\n    S = S[0];\n    S = S.split(':');\n\
    \    S = S[0];\n    if (S != undefined && S!='' && S!='I')\n        return 0;\n\
    \    return 1;\n}", "  S = S.split(\" \");\n  var count = 0;\n  for (var i=0;\
    \ i < S.length; i++){\n    if (S[i].indexOf(\"I\") == 0){\n      count++;\n  \
    \  }\n  }\n  return count;\n}\n</cell>\n<text>\nQuestion 2\nWrite a function that\
    \ will remove all the vowels from a string.\n\n\n</text>\n<cell>", "\tvar bored\
    \ = 0;\n\tvar words = S.split(\" \");\n\tvar isFirst = true;\n\tfor(var i=0; i<words.length;\
    \ i++){\n\t\tvar word = words[i];\n\t\tif(isFirst && word === \"I\"){\n\t\t\t\
    bored++;\n\t\t\tisFirst = false;\n\t\t}else{\n\t\t\tif(bored && isFirst){\n\t\t\
    \t\tbored = 0;\n\t\t\t\tisFirst = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn bored;\n\
    }\n", "    var boredoms=0; //Initialize as zero\n    var arr = S.split(\".\")\
    \ //Split into sentences \n    for(var i=0; i<arr.length; i++){\n        if(arr[i].indexOf(\"\
    I\")!=-1) { //If sentence starts with \"I\" \n            boredoms=boredoms+1;\
    \ //count +1\n        }\n    }\n    return boredoms;\n}", "    S=S.trim();\n \
    \   if (S.indexOf(\".\")===-1) return 0;\n    if (S.indexOf(\"?\")===-1) return\
    \ 0;\n    if (S.indexOf(\"!\")===-1) return 0;\n    if (S.indexOf(\".\")===-1)\
    \ return 0;\n    if (S.indexOf(\".\")===-1) return 0;\n    if (S.indexOf(\".\"\
    )===-1) return 0;\n    var count=0;\n    for(var i=0; i<S.length; i++)\n     \
    \   if (S[i].indexOf(\"I\")===0) count++;\n    return count;\n}\n", "    S = S.toLowerCase();\n\
    \    var bored_words = bored_words.split(\" \");\n    var b = 0;\n    for (var\
    \ i = 0; i < S.length; i++){\n        if (S[i] == \"I\"){\n            if (S.charAt(i)\
    \ == \".\" || S.charAt(i) == \"?\" || S.charAt(i) == \"!\"){\n               \
    \ for (var j = 0; j < bored_words.length; j++){\n                    if (bored_words[j].toLowerCase()\
    \ == S.slice(i, i + bored_words[j].length)){\n                        b++;\n \
    \                   }\n                }\n            }\n        }\n    }\n  \
    \  return b;\n}", "\tvar bored_count = 0\n\tfor(var i = 0, l = S.length; i < l;\
    \ i++) {\n\t\tif (S[i] == '.' || S[i] == '?' || S[i] == '!') bored_count++;\n\t\
    }\n\treturn bored_count;\n}\n
  "    var bored = 0;\n    if (S.indexOf(\"I\") !== -1) {\n        bored++;\n    }\n\
    \    return bored;\n}\n", "\tvar bored = 0;\n\tfor(var i = 0; i < S.length; i++)\
    \ {\n\t\tif(S[i].search(\"I\") == 0) {\n\t\t\tbored++;\n\t\t}\n\t}\n\treturn bored;\n\
    }\n", "    var bored = 0;\n    for(var i = 0; i < S.length; i++){\n        var\
    \ s = S[i].trim().toLowerCase();\n        var n = s.charAt(0);\n        if (s\
    \ === \"i\"){\n            bored++;\n        }else if (s === \".\"){\n       \
    \     if (i === S.length - 1) return 0;\n            var next_char = S[i+1].trim().toLowerCase();\n\
    \            if (next_char === \"a\" || next_char === \"e\" || next_char === \"\
    i\" || next_char === \"o\" || next_char === \"u\" || next_char === \"y\"){\n \
    \               bored++;\n            }\n        }else if (s === \"?\" || s ===\
    \ \"!\"){\n            if (i === S.length - 1) return 0;\n            var next_char\
    \ = S[i+1].trim().toLowerCase();\n            if (next_char === \"a\" || next_char\
    \ === \"e\" || next_char === \"i\" || next_char === \"o\" || next_char === \"\
    u\" || next_char === \"y\"){\n                bored++;\n            }\n      \
    \  }else{\n            return 0;\n        }\n    }\n    return bored;\n}\n", " \
    \ var word = S.split('.'),\n      boredoms = 0,\n      i = word[0],\n      j =\
    \ i + 1;\n\n  while(j < word.length){\n    if(word[j].search('I') != -1 && (word[j-1]\
    \ == word[j] || word[j-1] == '?' || word[j-1] == '!')){\n      boredoms++;\n \
    \   }\n    j++;\n  }\n\n  return boredoms;\n}\n", "  var boredoms=0;\n  S.split(/\\\
    ./).forEach(function(word){\n    if(word.trim()==\"I\")\n      boredoms++;\n \
    \ });\n  return boredoms;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
