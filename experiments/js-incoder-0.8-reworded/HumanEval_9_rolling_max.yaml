name: HumanEval_9_rolling_max
language: js
prompt: "//From a given array of integers, generate an array of rolling maximum element\
  \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2,\
  \ 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4,\
  \ 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
  }\n\ntest();"
completions: ["\tlet rollingMax = [];\n\tfor (let i = numbers.length - 1;i >= 0;i--)\
    \ {\n\t\tif (rollingMax.indexOf(numbers[i]) === -1) {\n\t\t\trollingMax.push(numbers[i]);\n\
    \t\t}\n\t}\n\treturn rollingMax;\n}\n", "    if(!Array.isArray(numbers)) return\
    \ null;\n    var r = [];\n    numbers.forEach(function(n) {\n        var i = [];\n\
    \        for(var i = 0; i < n; i++) i.push(n);\n        r.push(i);\n    });\n\
    \    var m = Math.max.apply(null, r);\n    return r.map(function(i) { return i[m];\
    \ });\n}\n", "    var result = [];\n    var current = Math.max.apply(Math, numbers);\n\
    \    var next = Math.max.apply(Math, numbers.slice(1));\n    result.push(current);\n\
    \    while (next > current){\n        current = next;\n        next =  Math.max.apply(Math,\
    \ numbers.slice(0));\n        result.push(current);\n    }\n    return result;\n\
    }", "  if(numbers.length==0){\n    return [];\n  }\n\n  var max_array = [];\n\
    \  var max_so_far = 0;\n  var index = numbers.length-1;\n  var max = numbers[index];\n\
    \n  while(index>0){\n    while(index>0 && numbers[index]>max){\n      max_array.push(max_so_far);\n\
    \      max_so_far = numbers[index];\n      index--;\n    }\n    max_array.push(max_so_far);\n\
    \    max_so_far = max;\n    index--;\n    max = numbers[index];\n  }\n  max_array.push(max_so_far);\n\
    \n  return max_array;\n}\n", "  var result = [],\n    temp,\n    len = numbers.length;\n\
    \  for(var i = 0; i < len; i++){\n    temp = Math.max.apply(null, numbers);\n\
    \    result.push(temp);\n    numbers = numbers.slice(0,i).concat(numbers.slice(i+1));\n\
    \  }\n  return result;\n}\n", "    var max,\n        len = numbers.length,\n \
    \       max = numbers[0],\n        i;\n\n    for (i = len - 1; i > 0; i--){\n\
    \        if(numbers[i] > max) {\n            max = numbers[i];\n        }\n  \
    \  }\n\n    return max;\n}\n", "\tvar numbers_length = $.type(numbers).valueOf().length,\n\
    \t\tmax_number = numbers[0],\n\t\tmax_number = numbers[0];\n\tfor(var i = 1; i\
    \ < numbers_length; i++){\n\t\tif(numbers[i] > max_number){\n\t\t\tmax_number\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn max_number;\n}", "  let max_element= numbers[0];\n\
    \  let max_index= 0;\n  \n  for (let i = 1; i < numbers.length; i++) {\n    if\
    \ (numbers[i] >= max_element) {\n      max_element = numbers[i];\n      max_index\
    \ = i;\n    }\n  }\n  \n  return numbers.slice(0,max_index+1);\n}\n", "  var max_so_far\
    \ = numbers[0];\n  for(var i=1; i<numbers.length; i++){\n    if(numbers[i] < max_so_far){\n\
    \      max_so_far = numbers[i];\n    }\n  }\n  return max_so_far;\n}\n", "  var\
    \ array=[];\n  for(var i=0;i<numbers.length;i++)\n  {\n    array.push(Math.max.apply(Math,\
    \ numbers));\n  }\n  return array;\n}\n\n", "  var max_number = Math.max.apply(null,\
    \ numbers);\n  var window_length = numbers.length-1;\n  var window_numbers = [];\n\
    \  for(var i=0; i<window_length; i++){\n    window_numbers.push(Math.max(numbers[i],\
    \ max_number));\n  }\n  return window_numbers;\n}\n\n", "\tvar rolling_max = [];\n\
    \tfor(var i = 0; i < numbers.length; i++)\n\t\trolling_max[i] = numbers[i];\n\t\
    for(i = 0; i < numbers.length; i++){\n\t\tfor(var j = i - 1; j > 0 && rolling_max[j]\
    \ > numbers[i]; j--)\n\t\t\trolling_max[j] = rolling_max[j-1];\n\t\trolling_max[j-1]\
    \ = numbers[i];\n\t}\n\treturn rolling_max;\n}", "\tvar res = [];\n\tvar i = 0,\
    \ j = 0;\n\t\n\twhile(numbers.length){\n\t\tvar el = numbers[j];\n\t\tres.push(el);\n\
    \t\tif(!numbers.length) break;\n\t\t\n\t\tj = i;\n\t\t\n\t\tvar a = numbers[j];\n\
    \t\tvar b = numbers[j+1];\n\t\t\n\t\tvar max = Math.max(a, b);\n\t\t\n\t\tif(a==max){\n\
    \t\t\tj++;\n\t\t\ti++;\n\t\t} else if(b==max){\n\t\t\tj++;\n\t\t}\n\t\t\n\t}\n\
    \t\n\treturn res;\n}\n\n", "    var ret = [];\n    var n = numbers[0];\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > n){\n            n\
    \ = numbers[i];\n        }\n        ret.push(n);\n    }\n    return ret;\n}\n",
  "\tvar results = [];\n\tvar curr = Math.max.apply(Math, numbers);\n\tfor(var i =\
    \ 0; i < numbers.length; i++){\n\t\tif(numbers[i] >= curr){\n\t\t\tresults.push(curr);\n\
    \t\t\tcurr = Math.max.apply(Math, numbers.slice(i + 1, i + 1 + results.length));\n\
    \t\t}else{\n\t\t\tresults.push(numbers[i]);\n\t\t}\n\t}\n\treturn results;\n}\n",
  "  var max = Number.NEGATIVE_INFINITY;\n  var rollingMax = [];\n  for(var i = 0;\
    \ i < numbers.length; i++){\n    rollingMax[i] = Math.max(max, numbers[i]);\n\
    \  }\n  return rollingMax;\n}\n", "  var max = [];\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    if(numbers[i] > max[max.length - 1]){\n      max = numbers.slice(i).concat(max);\n\
    \    }\n  }\n  return max;\n}\n", "\tif(!Array.isArray(numbers)) throw Error('The\
    \ argument should be an array!');\n\tlet result = numbers[0];\n\tfor(let i = 1;\
    \ i < numbers.length; i++){\n\t\tif(numbers[i] >= result){\n\t\t\tresult = numbers[i];\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "  numbers.sort(function(a, b){return b-a});\n\
    \  var max = numbers[0];\n  var counter = 0;\n  var max_index = -1;\n  for(var\
    \ i = 1, len = numbers.length; i<len; ++i){\n    if(numbers[i]>max){\n      max\
    \ = numbers[i];\n      max_index = i;\n    }\n  }\n  return numbers.slice(max_index+1);\n\
    }\n", "\tvar max = numbers[0];\n\tfor(var i = 0; i<numbers.length; i++){\n\t\t\
    if(max < numbers[i])\n\t\t\tmax = numbers[i];\n\t}\n\treturn max;\n}\n", "   \
    \ var result = [];\n    var length = numbers.length;\n    var max_value = numbers[0];\n\
    \    for(var i = 1; i < length; i++) {\n        if(numbers[i] > max_value) {\n\
    \            max_value = numbers[i];\n        }\n    }\n    var index = result.indexOf(max_value);\n\
    \    if(index === -1) {\n        index = result.push(max_value);\n    } else {\n\
    \        result.splice(index, 1);\n        index++;\n    }\n    while(numbers.length\
    \ > 0) {\n        if(numbers[index] > max_value) {\n            max_value = numbers[index];\n\
    \        }\n        index++;\n    }\n    return result;\n}\n", "  var len = numbers.length,\n\
    \      result = [],\n      max;\n    \n  //If the array has less items than `rolling_max`\
    \ expects, return the array directly\n  if (len < rolling_max.arguments.length){\n\
    \    return numbers;\n  }\n\n  rolling_max.max.apply(rolling_max, numbers);\n\
    \  \n  while (len > rolling_max.arguments.length){\n    max = rolling_max.max.apply(rolling_max,\
    \ result);\n    \n    //If max is still bigger than the last value in the array\n\
    \    if (max < numbers[len - 1]){\n      len = len-1;\n    }\n    \n    //Add\
    \ the last number in the array to the result set\n    result.push(numbers[len]);\n\
    \  }\n  return result;\n}\n", "  var max_index = 0;\n  var max_value = numbers[0];\n\
    \  for(var i=1; i < numbers.length; i++){\n    if(numbers[i] > max_value){\n \
    \     max_value = numbers[i];\n      max_index = i;\n    }\n  }\n  return numbers.slice(0,\
    \ max_index + 1);\n}\nexports.rolling_max = rolling_max;\n", "    var max_array\
    \ = [];\n    var max_value;\n    for(var i = 0; i < numbers.length; i++){\n  \
    \      max_value = Math.max.apply(null, numbers);\n        numbers = numbers.filter(function(value){\n\
    \            return value != max_value;\n        });\n        if(numbers.length\
    \ == 0){\n            break;\n        }\n        max_array.push(max_value);\n\
    \    }\n    return max_array;\n}\n", "  var max_element = numbers[0];\n  var max_i\
    \ = 1;\n\n  for(var i = 1, len = numbers.length; i < len; i++){\n    if(numbers[i]\
    \ > max_element){\n      max_element = numbers[i];\n      max_i = i;\n    }\n\
    \  }\n\n  return max_element;\n}\n", "\tvar res = [];\n\tvar max = Math.max.apply(Math,\
    \ numbers);\n\tnumbers.forEach(function(num){\n\t\tres.push(num > max ? num :\
    \ max);\n\t})\n\treturn res;\n}\n", "\tvar rolling_max = Math.max.apply( null,\
    \ numbers);\n\tvar rolling_max_index = 0;\n\tfor(var i=numbers.length-1;i>rolling_max_index;i--){\n\
    \t\tif(numbers[i]>rolling_max){\n\t\t\trolling_max_index = i;\n\t\t\trolling_max\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn rolling_max;\n}\n", "    var max = numbers[0];\n\
    \    for (var i=1; i<numbers.length; i++){\n        if (numbers[i] > max){\n \
    \           max = numbers[i];\n        }\n    }\n    return max;\n}\n", "\tvar\
    \ result = [],\n\t\ti = numbers.length - 1,\n\t\tj = 0;\n\n\twhile(i >= 0){\n\t\
    \tresult.unshift(numbers[i]);\n\t\ti -= 1;\n\t\tj += 1;\n\t\tif (j >= numbers.length){\n\
    \t\t\tj = 0;\n\t\t}\n\t}\n\treturn result;\n}\n", "    var rolling_max_array =\
    \ [];\n    var max_number = 0;\n    for(var i=0;i<numbers.length;i++){\n     \
    \   max_number = Math.max(numbers[i], max_number);\n        rolling_max_array.push(max_number);\n\
    \    }\n    return rolling_max_array;\n}\n", "\tvar result = [];\n\tvar found\
    \ = false;\n\tvar current = 0;\n\tvar max = 1;\n\t\n\tfor(var i=0; i<numbers.length;\
    \ i++){\n\t\tfound = false;\n\t\tfor(var j=0; j<result.length; j++){\n\t\t\t\n\
    \t\t\tif(result[j] > numbers[i]){\n\t\t\t\t\n\t\t\t\tfound = true;\n\t\t\t\tmax\
    \ = result[j];\n\t\t\t\tcurrent = numbers[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t\t\n\t\tif(!found){\n\t\t\tresult.push(current);\n\t\t\tmax = current;\n\t\t\
    }\n\t}\n\t\n\tconsole.log(result);\n\treturn result;\n}\n", "  var result = [];\n\
    \n  for (var i = 0; i < numbers.length; i++) {\n    if (result[i] === undefined\
    \ || result[i] < numbers[i]) {\n      result[i] = numbers[i];\n    }\n  }\n  return\
    \ result;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThis will not\
    \ give the correct result when the array contains duplicates, e.g. `rolling_max([1,\
    \ 2, 2, 2, 2, 3])` returns `[1,2,2,3]` instead of `[1,2,2,2]`.\n<|/ c |>\n<| a\
    \ |>\nHere's an example of what I believe is the simplest possible implementation\
    \ to meet the OP's specification:\n\n<code>\nconst rolling_max = (numbers, m)\
    \ => {\n  const rollingMax = [...Array( m ).keys()].map(\n    e => numbers.reduce((maxSoFar,\
    \ nextNumber) => {\n      return Math.max(maxSoFar, nextNumber - e)\n    })\n\
    \  )\n\n  return rollingMax.filter((e, i) => e === rollingMax[i]).slice(0, m)\n\
    }\n", "    var max_found = [],\n        largest = numbers[0],\n        number_to_find;\n\
    \    for (var i = 1 ; i < numbers.length; i++){\n        if (numbers[i] > largest){\n\
    \            largest = numbers[i];\n        }\n    }\n    number_to_find = largest;\n\
    \    var number_found = numbers[0];\n    for(var i = 1 ; i < numbers.length; i++){\n\
    \        if (numbers[i] === number_to_find){\n            number_found = numbers[i];\n\
    \        }\n    }\n    for (var j = 1 ; j < max_found.length; j++){\n        if\
    \ (max_found[j] < number_found){\n            max_found[j] = number_found;\n \
    \       }\n    }\n    return max_found;\n}\n", "  var tmp = [];\n  var i = 0;\n\
    \  for(i = 0; i < numbers.length; i++){\n    if(numbers[i] < numbers[i-1]){\n\
    \      tmp.push(numbers[i]);\n    }else{\n      if(tmp.length > 0){\n        tmp.push(numbers[i-1]);\n\
    \      }\n    }\n  }\n  return tmp;\n}\n\n", "    //From a given array of integers,\
    \ generate an array of rolling maximum element found until given moment\n    //\
    \ in the sequence.\n    let n = numbers.length;\n    let max_elements = [];\n\
    \    let curr_max_element;\n    for(let i = 1 ; i < n ; i++){\n        curr_max_element\
    \ = numbers[i - 1];\n        if(numbers[i] > curr_max_element){\n            curr_max_element\
    \ = numbers[i];\n        }\n        max_elements.push(curr_max_element);\n   \
    \ }\n    return max_elements;\n}\n", "\tif(numbers.length < 2){\n\t\treturn numbers;\n\
    \t}\n\tvar max = numbers.shift();\n\tvar max = Math.max.apply(Math, numbers);\n\
    \tvar new_numbers = [max];\n\tvar i;\n\tfor(i = 0; i < numbers.length; i++){\n\
    \t\tif(numbers[i] > max){\n\t\t\tnew_numbers.push(max);\n\t\t\tmax = numbers[i];\n\
    \t\t}else{\n\t\t\tmax = Math.max.apply(Math, new_numbers);\n\t\t}\n\t}\n\treturn\
    \ new_numbers;\n}\n", "  return numbers.reduce(\n    function(result, item){\n\
    \      if(result.length){\n        if(item >= result[result.length-1]){\n    \
    \      result.push(item);\n        }\n      }else{\n        result.push(item);\n\
    \      }\n      return result;\n    }, \n    []\n  );\n}\n", "    var current_max\
    \ = Math.max.apply(null, numbers),\n        rolling_max = Math.max.apply(null,\
    \ numbers.slice(0, numbers.indexOf(current_max)));\n    return rolling_max;\n}",
  "  var max_val = [];\n  var rolling_max_val = [];\n  for(var i=0; i < numbers.length;\
    \ i++){\n    max_val.push(Math.max(max_val[i],numbers[i]));\n  }\n  for(var i=0;\
    \ i < numbers.length; i++){\n    rolling_max_val.push(max_val[i])\n  }\n  return\
    \ rolling_max_val;\n}\n\n", "    var maxes = []\n    var maxe = 0\n    var num\n\
    \    for(var i = 0; i<numbers.length; i++){\n        if(numbers[i] > maxe){\n\
    \            num = numbers[i]\n            maxes[i] = num\n            maxe =\
    \ num\n        }else{\n            maxes[i] = maxe\n            maxe = numbers[i]\n\
    \        }\n    }\n    return maxes\n}\n", "  var new_numbers = [];\n  var i;\n\
    \  for(i=0;i<numbers.length;i++){\n    var max_val = Math.max.apply(null, numbers);\n\
    \    if(max_val>new_numbers[i]){\n      new_numbers[i] = max_val;\n    }\n  }\n\
    \  return new_numbers;\n}\n", "  var result = [];\n  var i = 0;\n  var length\
    \ = numbers.length;\n  var maximum;\n  var currentMaximum;\n  while (i<length){\n\
    \    currentMaximum = numbers[i];\n    result.push(currentMaximum);\n    if (numbers[i+1]\
    \ != null){\n      if((currentMaximum>numbers[i+1])){\n        maximum = currentMaximum;\n\
    \      }\n    }\n    i++;\n  }\n  return result;\n};\n", "  var result = [], max\
    \ = Math.max.apply(Math, numbers);\n  for(var i=0, len = numbers.length; i < len;\
    \ i++){\n    result.push(max < numbers[i] ? max : numbers[i]);\n  }\n  return\
    \ result;\n}\n", "  var result = new Array(numbers.length);\n  for (var i = 0;\
    \ i < numbers.length; i++) {\n    for (var j = 0; j < numbers.length; j++) {\n\
    \      if (numbers[i] > numbers[j]) {\n        result[j] = numbers[j];\n     \
    \ }\n    }\n  }\n  return result;\n}\n", "\tvar result = [];\n\tvar index = 0;\n\
    \t\n\tfor(var i = numbers.length - 1; i >= 0; i--){\n\t\tif(numbers[i] > numbers[index]){\n\
    \t\t\tresult.push(numbers[index]);\n\t\t\tindex = i;\n\t\t}\n\t}\n\t\n\treturn\
    \ result;\n}\n\n", "    var max = 0;\n    for(var i = 0; i < numbers.length; i++){\n\
    \        if(max < numbers[i]){\n            max = numbers[i];\n        }\n   \
    \ }\n    return max;\n}", "\tlet rolling_max = []\n\tfor (let i = 0; i < numbers.length;\
    \ i++){\n\t\trolling_max.push(Math.max(...rolling_max))\n\t}\n\t\n\treturn rolling_max\n\
    }", "    var array = [];\n    var currentElement = 0;\n    for(var i = 0; i <\
    \ numbers.length; i++){\n        if(numbers[i] > currentElement){\n          \
    \  currentElement = numbers[i];\n        }\n        array.push(currentElement);\n\
    \    }\n    return array;\n}", "\tvar max = -Infinity;\n\tfor (var i = 0; i <\
    \ numbers.length; i++){\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\treturn max;\n\
    }\n", "  if(numbers.length <= 1) return numbers;\n  var max_value = numbers[0];\n\
    \  var max_index = numbers.length-1;\n  for (var i = 1; i < numbers.length; i++){\n\
    \    if (numbers[i] > max_value){\n      max_value = numbers[i];\n      max_index\
    \ = i;\n    }\n  }\n  var newArray = numbers.slice(0,max_index+1);\n  newArray.push(max_value);\n\
    \  return newArray;\n}\n", "  var max = numbers[0];\n  for(var i=1; i<numbers.length;\
    \ i++){\n    if(max < numbers[i]){\n      max = numbers[i];\n    }\n  }\n  return\
    \ max;\n}\n", "    if (numbers.length < 1) return [];\n    return numbers.reduce(function\
    \ (a, e, i, arr) {\n        return (i > arr.length || arr[i-1] > e) ? a : [arr[i-1],\
    \ e].concat(a);\n    });\n}\n", "\tvar max_i = Math.max.apply(Math, numbers);\n\
    \tvar rolling = [];\n\tfor(var i=0; i < numbers.length; i++){\n\t\tvar j = numbers.indexOf(max_i,\
    \ i);\n\t\tif(j >= 0){\n\t\t\trolling.push(max_i);\n\t\t\tnumbers.splice(j, 1);\n\
    \t\t}\n\t}\n\treturn rolling;\n}\n", "  if ( numbers.length < 1 ){\n    throw\
    \ new Error('array is empty');\n  }\n  if ( numbers.length === 1 ){\n    return\
    \ numbers;\n  }\n  var rolling_max = [];\n  var max = Math.max.apply(null, numbers);\n\
    \  rolling_max.push(max);\n  for ( var i = 1 ; i < numbers.length ; i++ ){\n \
    \   if ( numbers[i] > max ){\n      max = numbers[i];\n    }\n    rolling_max.push(max);\n\
    \  }\n  return rolling_max;\n}\n", "    numbers = _.map(numbers, function(n){\
    \ return n*1; });\n    return _.max(numbers);\n}\n", "  var max = Math.max.apply(null,\
    \ numbers);\n  var result = [];\n  for(var i = 0; i < numbers.length; i++){\n\
    \    result.push(numbers[i]);\n    if(numbers[i] > max){\n      result.push(max);\n\
    \      max = numbers[i];\n    }\n  }\n  return result;\n}\n", "  var maxNumbers\
    \ = numbers.slice(0)\n  var rollingMax = []\n\n  for (var i = 1; i < maxNumbers.length;\
    \ i++){\n    rollingMax.push(maxNumbers[i - 1]+maxNumbers[i])\n  }\n  return rollingMax\n\
    }\n", "  return rolling_max_with_window(numbers, 1)\n}\nrolling_max._move = function(\
    \ window, current ){\n  return Math.max(current, window)\n}\nrolling_max._current\
    \ = function( window ){\n  return window[ window.length - 1 ]\n}\nrolling_max._pad_end\
    \ = function(){\n  var current = this._current( window )\n  var next = Math.max(\
    \ current, this._move(window, current) )\n  for( var i = 0; i < this._window +\
    \ 1; i++ ){\n    window[i] = Math.max( current, window[i] )\n  }\n  window[this._window]\
    \ = next\n  return next\n}\nrolling_max._pad_start = function(){\n  var current\
    \ = this._current( window )\n  var next = Math.min( current, this._move(window,\
    \ current) )\n  for( var i = 1; i < this._window + 1; i++ ){\n    window[i] =\
    \ Math.min( current, window[i] )\n  }\n  window[0] = next\n  return next\n}\n\
    rolling_max._window = 1000\n", "  var result = [];\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    var rolling_max_element = max_element_in_sequence(numbers, i);\n\
    \    result.push(rolling_max_element);\n  }\n  return result;\n}\n", "\tvar newArray\
    \ = [];\n\tnumbers.forEach(function(number){\n\t\tvar maxNumber = newArray[newArray.length\
    \ - 1];\n\t\tif(number > maxNumber){\n\t\t\tnewArray.push(number);\n\t\t}\n\t\
    });\n\treturn newArray;\n}\n", "\tvar max_index = 0\n\tvar max_value = numbers[0]\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tvar element = numbers[i]\n\t\t\
    if(element > max_value){\n\t\t\tmax_index = i\n\t\t\tmax_value = element\n\t\t\
    }\n\t}\n\tvar rolling_max_array = new Array(max_index)\n\tfor(var j = 0; j < max_index;\
    \ j++){\n\t\trolling_max_array[j] = numbers[j]\n\t}\n\treturn rolling_max_array\n\
    }", "  var max = numbers[0];\n  var max_rolling_index = 1;\n  var max_rolling_indexes\
    \ = [max_rolling_index];\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i]\
    \ > max){\n      max = numbers[i];\n      max_rolling_index = i;\n    }\n  }\n\
    \  max_rolling_indexes.push(max_rolling_index);\n  return max_rolling_indexes;\n\
    }\n", "  var rolling_max = numbers[0];\n  for (var i=1; i < numbers.length; i++){\n\
    \    rolling_max = Math.max(rolling_max, numbers[i]);\n  }\n  return rolling_max;\n\
    }", "\tlet max = []\n\tfor(let i=0;i<numbers.length;i++){\n\t\tlet max_element\
    \ = numbers[i]\n\t\tlet pos = -1\n\t\tfor(let j=0;j<numbers.length;j++){\n\t\t\
    \tif(numbers[j]>max_element){\n\t\t\t\tmax_element = numbers[j]\n\t\t\t\tpos =\
    \ j\n\t\t\t}\n\t\t}\n\t\tif(i==0){\n\t\t\tmax = max_element\n\t\t}\n\t\telse{\n\
    \t\t\tif(pos<0){\n\t\t\t\tmax = max_element\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(pos<i){\n\
    \t\t\t\t\tmax = max_element\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tmax = numbers[pos]\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn max\n}", "  return numbers.reduce(function(previous,\
    \ current){\n    if (previous[previous.length - 1] > (current - 1)) {\n      previous.push(current);\n\
    \    }\n    return previous;\n  }, [numbers[0]]);\n}\n", "\tvar max = 0;\n\tfor(var\
    \ i = 0; i < numbers.length; i++){\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\
    \treturn max;\n}\n\n", "    var result = [];\n    var max_val = numbers[0];\n\
    \    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max_val){\n\
    \            max_val = numbers[i];\n            result.unshift(max_val);\n   \
    \     }\n    }\n    return result;\n}\n", "  var\n  rolling_max_list = new Array(),\
    \ //will hold rolling max array\n  rolling_max_number = 0, //Will hold rolling\
    \ max number\n  rolling_max_count = 0 //Will hold rolling max count\n  ;\n  for(var\
    \ i = numbers.length-1; i >= 0; i--){\n    rolling_max_number = numbers[i];\n\
    \    rolling_max_count = 1;\n    for(var j = i-1; j >= 0; j--){\n      if(numbers[j]\
    \ >= rolling_max_number){\n        rolling_max_count++;\n      }else{\n      \
    \  break;\n      }\n    }\n    rolling_max_list[rolling_max_count-1] = rolling_max_number;\n\
    \  }\n  return rolling_max_list;\n}\n", "\tvar result = [];\n\t\n\tfor (var i\
    \ = 0, len = numbers.length; i < len; i++){\n\t\tresult.push(Math.max(numbers[i]));\n\
    \t}\n\t\n\treturn result;\n}\n\n", "    var max_number = numbers[0];\n    var\
    \ max_index = 0;\n    var count = 0;\n    for (var i = 1; i < numbers.length;\
    \ i++){\n        if (numbers[i] >= max_number){\n            max_index = i;\n\
    \            max_number = numbers[i];\n        }\n    }\n    var new_numbers =\
    \ numbers.slice(0,max_index+1);\n    var new_max_number = max_number;\n    var\
    \ new_max_index = max_index;\n    var new_max_times = 1;\n    for (var i = max_index\
    \ + 1; i < numbers.length; i++){\n        if (numbers[i] > max_number){\n    \
    \        new_max_number = numbers[i];\n            new_max_index = i;\n      \
    \      new_max_times = new_max_times + 1;\n        }\n    }\n    return [new_max_number,new_max_index,new_max_times]\n\
    }", "\tvar rollingMax = [];\n\tvar highest = 0;\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] > highest){\n\t\t\trollingMax = [];\n\t\t\trollingMax.push(numbers[i]);\n\
    \t\t\thighest = numbers[i];\n\t\t}else{\n\t\t\trollingMax.push(numbers[i]);\n\t\
    \t}\n\t}\n\treturn rollingMax;\n}\n", "\tvar maxIndex = numbers.length - 1;\n\t\
    var maxValue = numbers[maxIndex];\n\tfor (var i = 0; i <= maxIndex; i++) {\n\t\
    \tvar candidate = numbers[i];\n\t\tvar candidateIsMax = true;\n\t\tfor (var j\
    \ = maxIndex - 1; j >= i; j--) {\n\t\t\tif (candidate > numbers[j]) {\n\t\t\t\t\
    candidateIsMax = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (candidateIsMax)\
    \ {\n\t\t\tmaxValue = candidate;\n\t\t\tmaxIndex = i;\n\t\t}\n\t}\n\treturn [maxIndex,\
    \ maxValue];\n}\n", "    if(numbers.length == 0) return [];\n    var min = numbers.shift();\n\
    \    var max = numbers.pop();\n    var result = [];\n    while(numbers.length\
    \ > 0){\n        if(numbers[0] > max){\n            numbers.shift();\n       \
    \     max = numbers.pop();\n        }\n        else if(numbers[0] < min){\n  \
    \          numbers.shift();\n            min = numbers.pop();\n        }\n   \
    \     else{\n            result.push(numbers[0]);\n            numbers.shift();\n\
    \        }\n    }\n    result.push(min);\n    result.push(max);\n    return result;\n\
    }\n", "  var rollingMaxIndexes = [];\n  var rollingMaxValues = [];\n  var maxIndexes\
    \ = [];\n  var maxValues = [];\n  var currentIndex = -1;\n  var maxIndex = -1;\n\
    \  var lastMaxIndex = -1;\n  var maxValue = Number.MIN_VALUE;\n  var lastMaxValue\
    \ = Number.MIN_VALUE;\n  for(var i in numbers){\n    if(numbers.hasOwnProperty(i)){\n\
    \      currentIndex++;\n      if(maxValues[currentIndex] === Number.MIN_VALUE){\n\
    \        maxValues[currentIndex] = numbers[i];\n        maxIndexes[currentIndex]\
    \ = maxIndexes.length - 1;\n      }\n      else{\n        if(numbers[i] > maxValues[currentIndex]){\n\
    \          maxValues[currentIndex] = numbers[i];\n          maxIndexes[currentIndex]\
    \ = maxIndexes.length - 1;\n        }\n      }\n      if(currentIndex === maxIndexes[maxIndex]){\n\
    \        rollingMaxIndexes.push(currentIndex);\n        rollingMaxValues.push(numbers[currentIndex]);\n\
    \        maxIndex++;\n        lastMaxIndex = maxIndex;\n      }\n    }\n  }\n\
    \  for(var i = 0; i <= maxIndex; i++){\n    if(maxIndexes[i] > lastMaxIndex){\n\
    \      maxValues.push(rollingMaxValues[maxIndexes[i] - 1]);\n      maxIndexes.push(i);\n\
    \      rollingMaxIndexes.push(i);\n    }\n  }\n  return maxValues;\n}\n", "\t\
    let arr = [];\n\tfor(let i = 0; i < numbers.length; i++){\n\t\tlet min = numbers[0];\n\
    \t\tfor(let j = 0; j < numbers.length; j++){\n\t\t\tif(numbers[j] < min){\n\t\t\
    \t\tmin = numbers[j];\n\t\t\t}\n\t\t}\n\t\tarr.push(min);\n\t}\n\treturn arr;\n\
    }", "    var _this = this;\n    var rolling_max = [];\n    var rolling_max_index\
    \ = 0;\n    var sum = 0;\n    var max;\n    var i;\n\n    for(i = 0; i < numbers.length;\
    \ i++){\n        rolling_max_index = i;\n        max = numbers[i];\n        for(;\
    \ i < numbers.length; i++){\n            sum += numbers[i];\n            if(sum\
    \ > max){\n                max = sum;\n                rolling_max_index = i;\n\
    \            }\n        }\n        rolling_max[rolling_max_index] = max;\n   \
    \ }\n    return rolling_max;\n}\n", "\tvar maxs = d3.max(numbers, function(d){\n\
    \t\treturn d;\n\t});\n\t\n\tvar result = [];\n\tvar rollingMax = numbers[numbers.length-1];\n\
    \t\n\tvar i;\n\tfor(i=numbers.length-1;i>=0;i--){\n\t\tif((maxs <= rollingMax)&&(!isNaN(maxs))){\n\
    \t\t\tresult.push(maxs);\n\t\t\trollingMax = maxs;\n\t\t}else{\n\t\t\trollingMax\
    \ = numbers[i];\n\t\t}\n\t}\n\t\n\treturn result;\n}\n", "  let max = numbers.reduce((a,b)=>Math.max(a,b),0);\n\
    \  let max_indexes = numbers.map((e,i)=>e>max?i:null).filter(e=>e!==null);\n \
    \ let result = [];\n  numbers.forEach(e=>{\n    if(max_indexes.indexOf(e)!==-1)\
    \ result.push(e);\n  });\n  return result;\n}\n", "\tvar max = -Number.MAX_VALUE;\n\
    \tvar result = [];\n\tfor(var i=0; i<numbers.length; i++){\n\t\tresult.push(Math.max.apply(null,\
    \ numbers.slice(0,i+1)));\n\t\tmax = Math.max(max, numbers[i]);\n\t}\n\tresult.push(max);\n\
    \treturn result;\n}\n", "\tvar result=[];\n\tvar temp=0;\n\tvar tempMax=0;\n\t\
    for(var i in numbers){\n\t\ttempMax=Math.max(numbers[i], tempMax);\n\t}\n\tresult.push(tempMax);\n\
    \t\n\tfor(var i in numbers){\n\t\ttemp=Math.max(numbers[i], temp);\n\t\tresult.push(temp);\n\
    \t\ttempMax=0;\n\t}\n\treturn result;\n}\n", "    var r = [];\n    var max = 0;\n\
    \    for (var i = 0; i < numbers.length; i++){\n        if (numbers[i] > max){\n\
    \            max = numbers[i];\n        }\n    }\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        if (numbers[i] === max){\n            r.push(max);\n        }\
    \ else if (numbers[i] < max){\n            r.push(numbers[i]);\n        }\n  \
    \  }\n    return r;\n}", "\tnumbers = numbers.slice();\n\tnumbers.forEach(function(item){\n\
    \t\tvar max_item = Math.max.apply(null, numbers);\n\t\tnumbers.push(max_item);\n\
    \t});\n\treturn numbers;\n}\n", "  var ret = [];\n  var length = numbers.length;\n\
    \  var sum = 0;\n  for(var i = 0; i < length; i++){\n    sum += numbers[i];\n\
    \    ret.push(sum);\n  }\n  return ret;\n}", "\tlet index = 1\n\tlet max_number\
    \ = numbers[0]\n\twhile (index < numbers.length){\n\t\tif (numbers[index] < max_number){\n\
    \t\t\tmax_number = numbers[index]\n\t\t}\n\t\tindex++\n\t}\n\treturn max_number\n\
    }\n\n", "\tvar m = Math.max.apply(null, numbers);\n\tvar result = [];\n\tnumbers.forEach(function\
    \ (n, i) {\n\t\tif (n === m) {\n\t\t\tresult.push(numbers[i]);\n\t\t} else if\
    \ (numbers[i] > m) {\n\t\t\tresult.push(n);\n\t\t}\n\t});\n\treturn result;\n}",
  "    if(numbers.length === 0){\n        return numbers;\n    }\n    var max_of_first\
    \ = numbers.reduce(function(a, b){\n        return Math.max(a, b);\n    });\n\
    \    var max_of_rest = numbers.reduce(function(a, b){\n        return Math.max(a,\
    \ Math.max(max_of_first, Math.max(b)));\n    });\n    var final_array = [];\n\
    \    var current_index = 0;\n    var current_element = max_of_rest;\n    while(current_index\
    \ < numbers.length){\n        if(current_index === 0){\n            current_element\
    \ = numbers[0];\n        }else{\n            if(current_element > numbers[current_index]){\n\
    \                current_element = numbers[current_index];\n            }\n  \
    \      }\n        final_array[current_index] = current_element;\n        current_index++;\n\
    \    }\n    return final_array;\n}\n", "  const n = numbers.length;\n  if(n ===\
    \ 0){\n    return 0;\n  }\n  const max = Math.max.apply(Math, numbers);\n  const\
    \ index = numbers.indexOf(max);\n  let r = [];\n  if((index > 0) && (index < n-1)){\n\
    \    r = numbers.slice(0, index);\n    r = r.concat(rolling_max(numbers.slice(index)));\n\
    \  }\n  if(index === n-1){\n    r = r.concat(rolling_max(numbers.slice(index)));\n\
    \  }\n  return r;\n}\n", "  var results = [];\n  var rolling_max = numbers[0];\n\
    \  var rolling_max_num = 0;\n  for(var i=1; i<numbers.length; i++){\n    if(numbers[i]>rolling_max){\n\
    \      rolling_max = numbers[i];\n      rolling_max_num = i;\n    }\n  }\n  results.splice(rolling_max_num,\
    \ 1, rolling_max);\n  return results;\n}\n", "\tvar max_element = [],\n\t\tmax_number\
    \ = numbers[0],\n\t\tmin_number = numbers[0];\n\n\tfor (var i=1; i<numbers.length;\
    \ i++){\n\t\tif (numbers[i] >= max_number){\n\t\t\tmax_element = max_element.concat(max_number);\n\
    \t\t\tmax_number = numbers[i];\n\t\t}\n\t\telse if (numbers[i] < min_number){\n\
    \t\t\tmin_number = numbers[i];\n\t\t}\n\t\telse{\n\t\t\tmax_element = max_element.concat(max_number,\
    \ min_number);\n\t\t\tmax_number = numbers[i];\n\t\t\tmin_number = numbers[i];\n\
    \t\t}\n\t}\n\tmax_element = max_element.concat(max_number, min_number);\n\treturn\
    \ max_element;\n}", "    var n = numbers.length\n        , max = numbers[0]\n\
    \        , result = [max]\n        , rolling\n        , i\n        ;\n    for(i\
    \ = 1; i < n; i++){\n        rolling = numbers.slice(i - 1, i + 1);\n        max\
    \ = Math.max.apply(null, rolling);\n        result.push(max);\n    }\n    return\
    \ result;\n}\n", "    var rolling_max_return = []; //To store the rolling max\
    \ sequence\n    var current_rolling_max = -1; //To store the current rolling max\
    \ element\n    for(var i = 0; i < numbers.length; i++){\n        current_rolling_max\
    \ = Math.max(current_rolling_max, numbers[i]);\n        if(current_rolling_max\
    \ == numbers[i]){\n            rolling_max_return.push(numbers[i]);\n        }else\
    \ if(current_rolling_max > numbers[i]){\n            rolling_max_return.push(current_rolling_max);\n\
    \            current_rolling_max = numbers[i];\n        }\n    }\n    if(current_rolling_max\
    \ > numbers[numbers.length - 1]){\n        rolling_max_return.push(current_rolling_max);\n\
    \    }\n    return rolling_max_return;\n}\n\n", "\tvar result = [];\n\tvar len\
    \ = numbers.length;\n\n\tvar last;\n\tvar i;\n\tfor(i = 0; i < len; i++){\n\t\t\
    last = result[result.length - 1];\n\t\tif(numbers[i] > last)\n\t\t\tresult.push(numbers[i]);\n\
    \t}\n\treturn result;\n}", "    let array = [];\n    let current_max = -Infinity;\n\
    \    let current_min = 0;\n    numbers.forEach((el) => {\n        current_max\
    \ = Math.max(el, current_max);\n        current_min = Math.min(el, current_min);\n\
    \    })\n    array.push(current_max);\n    array.push(current_min);\n    return\
    \ array\n}", "    var result = [];\n    numbers.forEach(function(number){\n  \
    \      result.push(Math.max.apply(null, number));\n    })\n    return result;\n\
    }\n", "\tnumbers = numbers.slice();\n\tlet max_rolling = 0;\n\tlet curr_max =\
    \ numbers[0];\n\tfor(let i = 1; i < numbers.length; i++){\n\t\tlet curr_val =\
    \ numbers[i];\n\t\tif(curr_val > curr_max){\n\t\t\tcurr_max = curr_val;\n\t\t\
    }\n\t}\n\tfor(let i = 1; i < numbers.length; i++){\n\t\tlet curr_val = numbers[i];\n\
    \t\tif(curr_val < curr_max){\n\t\t\tlet current_maxs = numbers[i - 1];\n\t\t\t\
    let new_max_rolling = curr_val + current_maxs;\n\t\t\tmax_rolling = new_max_rolling\
    \ > max_rolling ? new_max_rolling : max_rolling;\n\t\t}\n\t}\n\treturn max_rolling;\n\
    }\n", "  var result = [];\n  for (var i = 0; i < numbers.length; i++) {\n    if\
    \ (numbers.length - i === 0){\n      result.push(numbers[i]);\n    } else {\n\
    \      result.push(Math.max(numbers[i], numbers[i + 1]));\n    }\n  }\n  return\
    \ result;\n}\n", "    var new_array = [];\n    for(var i = 0; i<numbers.length;\
    \ i++){\n        var current = numbers[i];\n        new_array.push(Math.max(numbers[i\
    \ - 1], current));\n    }\n    return new_array;\n}\n", "  var result = [];\n\
    \  var max;\n  var rolling_max = numbers;\n  while (rolling_max.length > 0){\n\
    \    max = rolling_max.pop();\n    result.push(max);\n  }\n  return result;\n\
    }\n", "\tvar max_number = 0;\n\tfor(var index = 0; index < numbers.length; index++){\n\
    \t\tif(max_number < numbers[index]){\n\t\t\tmax_number = numbers[index];\n\t\t\
    }\n\t}\n\treturn max_number;\n}\n", "\tvar maxes = [], i;\n\n\tfor (i in numbers)\n\
    \t\tif (numbers.hasOwnProperty(i)){\n\t\t\tmaxes.push(Math.max.apply(null, numbers));\n\
    \t\t\tdelete numbers[i];\n\t\t}\n\n\tmaxes.sort(function(a, b){\n\t\treturn b\
    \ - a;\n\t});\n\n\treturn numbers;\n}\n", "  var rollingMax = []\n  var rollingMaxNumber\
    \ = numbers[0]\n  var rollingMaxIndex = -1\n  var i = 0\n  var n = numbers.length\n\
    \  \n  for(; i < n; i++){\n    if (numbers[i] < rollingMaxNumber) {\n      rollingMaxNumber\
    \ = numbers[i]\n      rollingMaxIndex = i\n    }\n  }\n  \n  rollingMax.push(rollingMaxNumber)\n\
    \  rollingMax.push(rollingMaxIndex)\n  return rollingMax\n}\n", "    var i, \n\
    \        rollingmax = [];\n\n    if(!_.isArray(numbers)) throw new Error(\"rolling_max:\
    \ numbers should be an array\");\n\n    //Find maximum element in first place\n\
    \    rollingmax = rollingmax[0];\n    for (i = 0; i < numbers.length; i++){\n\
    \        if(rollingmax[0] > numbers[i]) rollingmax = rollingmax;\n        rollingmax.push(numbers[i]);\n\
    \    }\n\n    return rollingmax;\n}\n", "    var max_rolling = 0;\n    var rollings\
    \ = [];\n    var prev_rolling = numbers[0];\n    for (var i=0;i<numbers.length;i++){\n\
    \        if (numbers[i] > prev_rolling){\n            rollings.push(prev_rolling);\n\
    \        }\n        rollings.push(numbers[i]);\n        prev_rolling = numbers[i];\n\
    \    }\n    max_rolling = Math.max.apply(null, rollings);\n    return max_rolling;\n\
    }\n", "    var result = [];\n    \n    if(numbers == null || numbers.length ==\
    \ 0)\n        return result;\n\n    var i;\n    for(i = 0; i < numbers.length;\
    \ i++){\n        var currentNumber = numbers[i];\n\n        //If current number\
    \ is less than the result array number\n        if(currentNumber < result[0]){\n\
    \            //Set the first result to currentNumber\n            result[0] =\
    \ currentNumber;\n            //Search the whole result array\n            for(var\
    \ j = 0; j < result.length; j++)\n                //Check if the currentNumber\
    \ is greater than the result[j]\n                if(currentNumber > result[j]){\n\
    \                    //If it is greater than the result[j], replace the result[j]\
    \ with currentNumber\n                    result[j] = currentNumber;\n       \
    \             break;\n                }\n        }\n    }\n    \n    return result;\n\
    }\n", "\tvar max = numbers[0];\n\tvar max_num = 1;\n\tvar i, j, k;\n\n\tfor(i=0;\
    \ i<numbers.length-1; i++){\n\t\tfor(j=0; j<numbers.length-i; j++){\n\t\t\tif((j+i+1)>(numbers.length-i)){\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\tmax = Math.max(max, numbers[j+i]);\n\t\t}\n\t\t\
    max_num = Math.max(max_num, numbers.length-i);\n\t}\n\treturn max;\n}", "  var\
    \ result = [];\n  var max = -Infinity;\n  for (var i = 0; i < numbers.length;\
    \ i++){\n    if (numbers[i] > max){\n      max = numbers[i];\n    }\n  }\n  \n\
    \  for (var i = 0; i < numbers.length; i++){\n    if (numbers[i] >= max){\n  \
    \    result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "    var maxVal\
    \ = numbers[0],\n        len = numbers.length,\n        arr = [];\n    for(var\
    \ i=0; i < len; i++){\n        if(maxVal < numbers[i]){\n            maxVal =\
    \ numbers[i];\n        }\n    }\n    for(var i=0; i < len; i++){\n        arr.push(maxVal);\n\
    \    }\n    return arr;\n}\n", "    var result = [],\n        i, l;\n\n    for\
    \ (i = 0, l = numbers.length; i < l; ++i) {\n        result.push(rolling_max(numbers.slice(0,\
    \ i).concat(numbers.slice(i + 1, l + 1))))\n    }\n\n    for (i = 0, l = numbers.length;\
    \ i < l; ++i) {\n        if (numbers[i] > result[i-1])\n            result[i]\
    \ = numbers[i]\n    }\n\n    return result\n}\n", "    var max_value = numbers.reduce(function(a,\
    \ b){\n        return Math.max(a, b);\n    });\n    return numbers.filter(function(x){\
    \ return x==max_value; });\n}", "\tvar i = numbers.length - 1, max = numbers[i];\n\
    \twhile(i !== 0){\n\t\ti--;\n\t\tif(numbers[i] > max)\n\t\t\tmax = numbers[i];\n\
    \t}\n\treturn max;\n}\n", "\tvar result = [];\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tvar number = numbers[i];\n\t\tresult.push(rolling_max(numbers.slice(0,\
    \ i)) > number ? number : rolling_max(numbers.slice(i + 1, numbers.length)));\n\
    \t}\n\treturn result;\n}\n", "    let max_element = numbers[0];\n    let max_index\
    \ = 0;\n\n    for (let i = 1; i < numbers.length; i++){\n        if (numbers[i]\
    \ > max_element){\n            max_element = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n\n    return numbers.slice(max_index + 1);\n}\n", " \
    \ if(numbers.length === 0){\n    return [];\n  }\n  var max_element = numbers[0];\n\
    \  var max_index = 0;\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i]\
    \ > max_element){\n      max_element = numbers[i];\n      max_index = i;\n   \
    \ }\n  }\n  return numbers.slice(0, max_index + 1);\n}\n\n", "\tvar result = [];\n\
    \tfor(var i = 0; i < numbers.length; i++)\n\t\tresult.push(numbers[numbers.length-i-1]);\n\
    \treturn result;\n}\n", "  var i, max, rolling_max, current, rolling_current_max,\
    \ result = [];\n  rolling_current_max = 0;\n  for (i = 0; i < numbers.length;\
    \ i++){\n    current = numbers[i];\n    rolling_current_max = Math.max(current,\
    \ rolling_current_max);\n  }\n  rolling_max = rolling_current_max;\n  for (i =\
    \ 1; i < numbers.length; i++){\n    current = numbers[i];\n    rolling_max = Math.max(current,\
    \ rolling_max);\n    result.push(rolling_max);\n  }\n  return result;\n}\n", " \
    \ var ret = [];\n  var rolling_sum = 0;\n  var length = numbers.length;\n  var\
    \ current_max;\n  var current_max_idx;\n  \n  //Initialize sum to 0\n  for(var\
    \ i=0; i < length; i++) {\n    rolling_sum += numbers[i];\n  }\n\n  //Initialize\
    \ current max and current max index\n  current_max = 0;\n  current_max_idx = -1;\n\
    \n  //Scan from right to left\n  for(var i = length - 1; i >= 0; i--){\n    current_max\
    \ = numbers[i];\n    current_max_idx = i;\n    \n    //Keep rolling current max\
    \ until current sum is greater than rolling sum plus current max\n    //NOTE:\
    \ We don't need to check rolling sum == rolling sum + current_max, because\n \
    \   //current sum can't be more than rolling sum plus current max, which means\
    \ that \n    //rolling sum > rolling sum + current_max\n    while (current_sum\
    \ > rolling_sum + current_max){\n      rolling_sum += current_max;\n      ret.unshift(current_max);\n\
    \    }\n    \n    //Move to right index\n    rolling_sum -= current_max;\n  }\n\
    \  \n  return ret;\n}\n", "    //Initialize array for result\n    var result =\
    \ [];\n    //Find the first element\n    var max = numbers[0];\n    //Find the\
    \ first element in the subsequence which has a lower value than the first\n  \
    \  var index = 0;\n    //While the index of the first element in the subsequence\
    \ is less than the length of the sequence\n    while(index < numbers.length){\n\
    \        //Find the first element greater than the current element and lower than\
    \ the given element in the sequence\n        //Update max with that value\n  \
    \      max = Math.max(numbers[index], max);\n        //Increment the index\n \
    \       index++;\n        //If the index reaches the end of the sequence\n   \
    \     if(index >= numbers.length){\n            //Reset the index and repeat until\
    \ it reaches the end of the sequence\n            index = 0;\n        }\n    }\n\
    \    //Add the result to array\n    result.push(max);\n    //Return the result\n\
    \    return result;\n}\n", "  numbers = numbers.slice(0);\n  for(let i=numbers.length-1,\
    \ total=0; i>=0; i--){\n    total += numbers[i];\n    if(total > numbers[i+1])\
    \ numbers[i] = numbers[i+1];\n  }\n  return numbers;\n}\n", "  var max_element\
    \ = numbers[0];\n  var max_index = 0;\n  for(var i=1;i<numbers.length;i++){\n\
    \    if(numbers[i]>max_element){\n      max_element=numbers[i];\n      max_index=i;\n\
    \    }\n  }\n  return numbers.slice(max_index+1);\n}\n", "\tvar res = [];\n\t\
    var i = numbers.length - 1;\n\twhile(i > 0){\n\t\tres[res.length] = numbers[i];\n\
    \t\ti--;\n\t}\n\treturn res;\n}", "    var rolling_max_array = [];\n    for (var\
    \ i=0;i<numbers.length;i++){\n        rolling_max_array.push(Math.max(numbers[i]));\n\
    \    }\n    return rolling_max_array;\n}\n", "    var len = numbers.length;\n\
    \    var max = -Infinity;\n    for(var i = 0; i < len; i++) {\n        if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    return max;\n}\n", "\tvar\
    \ rolling_max = numbers.reduce(function(a, b){\n\t\treturn Math.max(a, b);\n\t\
    });\n\treturn rolling_max;\n}\n", "    return rolling_max_function(numbers, Math.max);\n\
    }", "\tvar max_number = numbers[0];\n\tfor(var i = numbers.length - 1; i >= 0;\
    \ i--){\n\t\tif(numbers[i] > max_number){\n\t\t\tmax_number = numbers[i];\n\t\t\
    }\n\t}\n\treturn max_number;\n}\n", "  return rolling_max(numbers, 1)\n}\n", " \
    \   return rolling_max_by(numbers, 0);\n}", "  numbers = _.isArray(numbers) ?\
    \ numbers : [numbers]\n  return _.reduce(numbers, function(memo, num){ memo.push(Math.max.apply(Math,\
    \ num)) }, [])\n}\n", "    if(numbers == null){\n        numbers = [];\n    }\n\
    \    var len = numbers.length;\n    var rollingMax = [];\n    var currentMax =\
    \ numbers[0];\n    var i;\n    for(i = 0; i < len; i++){\n        currentMax =\
    \ Math.max(currentMax, numbers[i]);\n        rollingMax.push(currentMax);\n  \
    \  }\n    return rollingMax;\n}\n", "    var results = [];\n    var i, max, sum\
    \ = 0;\n    for(i=0; i<numbers.length; i++){\n        sum += numbers[i];\n   \
    \     if(sum > max){\n            max = sum;\n            results = [numbers[i]];\n\
    \        } else if(sum === max){\n            results.push(numbers[i]);\n    \
    \    }\n    }\n    return results;\n}\n", "  var currentMax, currentMaxIndex,\
    \ currentMaxSum = 0, rollingMaxSumArray = [];\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    currentMax = numbers[i];\n    currentMaxIndex = 0;\n    for(var j\
    \ = i; j < numbers.length; j++){\n      currentMaxSum = numbers[j];\n      if(currentMaxSum\
    \ >= currentMax){\n        rollingMaxSumArray.push(currentMaxSum);\n        currentMaxIndex\
    \ = j;\n        break;\n      }\n    }\n    rollingMaxSumArray.push(currentMaxSum);\n\
    \    if(currentMaxIndex == numbers.length - 1){\n      rollingMaxSumArray = rollingMaxSumArray.concat(numbers.slice(i,\
    \ i+2));\n      break;\n    }\n  }\n  return rollingMaxSumArray;\n}\n", "  var\
    \ result = [];\n  var last = 0;\n  for(var i=0; i < numbers.length; i++){\n  \
    \  if(numbers[i] > last){\n      result.push(numbers[i]);\n      last = numbers[i];\n\
    \    }\n  }\n  return result;\n}\n", "\treturn numbers.reduce(function(a, b){\n\
    \t\treturn Math.max(a, b);\n\t});\n}\n", "    let max = [];\n    for(let n = 0;\
    \ n < numbers.length; n++){\n        for(let i = numbers.length - n - 1; i > 0;\
    \ i--){\n            let new_number = numbers[i - 1];\n            if(new_number\
    \ > numbers[n]){\n                numbers[i - 1]=numbers[n];\n               \
    \ numbers[n] = new_number;\n                max = [...max, numbers[n]];\n    \
    \            break;\n            }\n        }\n    }\n    return max;\n}\n", "\t\
    var max_index=0;\n\tfor(var i=1;i<numbers.length;i++){\n\t\tif((numbers[i]>numbers[i-1])){\n\
    \t\t\tmax_index=i;\n\t\t}\n\t}\n\treturn numbers.slice(0,max_index+1);\n}\n",
  "\tvar rolling_maxes = []\n\tvar curr_max = numbers[0]\n\n\tfor (var i = 0; i <\
    \ numbers.length; i++){\n\t\tif(curr_max < numbers[i]){\n\t\t\trolling_maxes =\
    \ [curr_max, numbers[i]]\n\t\t}else if(curr_max == numbers[i]){\n\t\t\trolling_maxes\
    \ = [curr_max, rolling_maxes[0]]\n\t\t}else{\n\t\t\trolling_maxes.push(curr_max)\n\
    \t\t}\n\n\t\tcurr_max = numbers[i]\n\t}\n\n\treturn rolling_maxes\n}\n", "\tvar\
    \ result = [];\n\tvar windowSize = numbers.length;\n\tvar windowSum = 0;\n\n\t\
    for (var i = 0; i < numbers.length; i++)\n\t{\n\t\twindowSum += numbers[i];\n\t\
    \tif(windowSum > windowSize){\n\t\t\tresult.push(windowSize);\n\t\t\twindowSize\
    \ = numbers[i];\n\t\t} else {\n\t\t\twindowSum -= numbers[i];\n\t\t\twindowSize--;\n\
    \t\t}\n\t}\n\tresult.push(windowSize);\n\n\treturn result;\n}\n", "\tvar i, j,\
    \ max = 0;\n\n\tfor(i = 0; i < numbers.length; i++){\n\t\tfor(j = i - 1; j >=\
    \ 0; j--){\n\t\t\tif((numbers[i] < numbers[j]) && (numbers[j] > max)){\n\t\t\t\
    \tmax = numbers[j];\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\n", "\tvar max = 0;\n\
    \tfor(var i=0;i<numbers.length;i++){\n\t\tvar current = numbers[i];\n\t\tvar found\
    \ = false;\n\t\tfor(var j=0;j<i;j++){\n\t\t\tif(numbers[j] > current){\n\t\t\t\
    \tcurrent = numbers[j];\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\tif(!found){\n\
    \t\t\tmax = current;\n\t\t}\n\t}\n\treturn max;\n}\n", "\tvar rolling_max = [];\n\
    \tfor (var i=0; i<numbers.length; i++) {\n\t\trolling_max.push(Math.max.apply(null,\
    \ numbers));\n\t}\n\treturn rolling_max;\n}\n", "  var res = [],\n    pos = 0,\
    \ //current position on the array\n    max = Number.MIN_VALUE,\n    i,\n    rollingMax;\n\
    \  for(i = 0; i < numbers.length; i++){\n    if(numbers[i] >= max){\n      rollingMax\
    \ = max;\n      max = numbers[i];\n    }else{\n      rollingMax = numbers[i];\n\
    \    }\n    res.push(rollingMax);\n  }\n  return res;\n}\n", "\treturn numbers.reduce(function(max,\
    \ val, index, arr){\n\t\tif(index > 0 && arr[index-1] > val){\n\t\t\treturn val;\n\
    \t\t}\n\t\treturn max;\n\t}, numbers[0]);\n}\n", "    var maxes = [];\n    for(var\
    \ i=0; i<numbers.length; i++){\n        maxes.push(Math.max.apply(null, numbers));\n\
    \    }\n    return maxes;\n}\n", "    if(numbers.length<=1){\n        return numbers;\n\
    \    }\n    var result=[];\n    var window=numbers[numbers.length-1];\n    var\
    \ maximum=numbers[0];\n    var i;\n    for(i=1;i<numbers.length;i++){\n      \
    \  if(numbers[i]>maximum){\n            window=numbers[i];\n            maximum=numbers[i];\n\
    \        }else if(numbers[i]==window){\n            window+=numbers[i-1];\n  \
    \      }else{\n            result.push(maximum);\n            window=numbers[i];\n\
    \            maximum=numbers[i];\n        }\n    }\n    result.push(maximum);\n\
    \    return result;\n}", "    var max = Math.max.apply(null, numbers);\n    var\
    \ numbers_copy = numbers.slice(0);\n    numbers_copy.splice(numbers.indexOf(max),\
    \ 1);\n    \n    var max = Math.max.apply(null, numbers_copy);\n    return max;\n\
    }\n", "  var result = [];\n  var len = numbers.length;\n\n  for (var i = 0; i\
    \ < (len-1); i++){\n    var min = i;\n    for (var j = i; j < len; j++){\n   \
    \   if (numbers[j] < numbers[min]){\n        min = j;\n      }\n    }\n    result.push(numbers[min]);\n\
    \  }\n  return result;\n}\n", "  var max = numbers[0];\n  var rolling_max = [];\n\
    \  for(var i = 1;i < numbers.length;i++){\n    if(numbers[i] > max)\n      rolling_max\
    \ = [max];\n    else\n      rolling_max = [max, numbers[i]];\n  }\n  return rolling_max;\n\
    }", "    var result = [];\n    var rollingMaxIndex = 0;\n    for(var i = 0; i\
    \ < numbers.length; i++){\n        if(rollingMaxIndex + 1 == numbers.length){\n\
    \            result.push(numbers[i]);\n        } else {\n            if(numbers[i]\
    \ > numbers[rollingMaxIndex]){\n                result.push(numbers[i]);\n   \
    \             rollingMaxIndex++;\n            } else {\n                result.push(numbers[rollingMaxIndex]);\n\
    \                rollingMaxIndex++;\n                result.push(numbers[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n", "  let rolling_max\
    \ = 0;\n  let last_rolling_max = rolling_max;\n  let current_rolling_max = rolling_max;\n\
    \  numbers.forEach(n => {\n    current_rolling_max = rolling_max;\n    if(current_rolling_max\
    \ < n){\n      current_rolling_max = n;\n      last_rolling_max = current_rolling_max;\n\
    \    }\n  });\n  return last_rolling_max;\n}\n", "  var i=0, maxes=[];\n  \n \
    \ while(numbers.length){\n    if(numbers[i] > numbers[i+1]) maxes.push(numbers[i]);\
    \ \n    else maxes.push(numbers[i+1]);\n    i++;\n  }\n  \n  return maxes;\n}\n",
  "\tvar rollingMaxArray = [];\n\trollingMaxArray.push(numbers[0]);\n\tfor(var i =\
    \ 1; i < numbers.length; i++){\n\t\trollingMaxArray[i] = Math.max(rollingMaxArray[i\
    \ - 1],  numbers[i]);\n\t}\n\treturn rollingMaxArray;\n}\n", "  var result = [];\n\
    \  var max;\n  var temp;\n  var i;\n  for (i = 0; i < numbers.length; i++){\n\
    \    if (numbers[i] < numbers[i - 1]) {\n      temp = numbers[i];\n      numbers[i]\
    \ = numbers[i - 1];\n      numbers[i - 1] = temp;\n    }\n  }\n\n  max = numbers[0];\n\
    \  for (i = 0; i < numbers.length; i++){\n    if (numbers[i] > max){\n      max\
    \ = numbers[i];\n    }\n  }\n  for (i = 0; i < numbers.length; i++){\n    result.push(numbers[i]);\n\
    \  }\n\n  for (i = numbers.length - 1; i >= 0; i--) {\n    result.pop();\n  }\n\
    \  return result;\n}\n", "  var i = numbers.length - 1;\n  var max_val = numbers[i];\n\
    \  var max_idx = i;\n\n  for(; i > 0; i--){\n    if(numbers[i] > max_val){\n \
    \     max_idx = i;\n      max_val = numbers[i];\n    }\n  }\n  return numbers.slice(0,\
    \ max_idx + 1);\n}\n", "  var results = [];\n  var result = 0;\n  for (var i =\
    \ 0;i < numbers.length;i++){\n    result += numbers[i];\n    if(numbers[i] >=\
    \ result){\n      results.push(i);\n      result = numbers[i];\n    }\n  }\n \
    \ if(result != 0){\n    results.push(numbers.length);\n  }\n  return results;\n\
    }", "\tvar i,\n\t\tresult = [],\n\t\tnumbers_length = numbers.length;\n\n\tfor(i\
    \ = 0; i < numbers_length; i++){\n\t\tresult.push(Math.max.apply(null, numbers));\n\
    \t}\n\treturn result;\n}\n\n", "  return numbers.reduce(function(rolling_max,\
    \ current){\n    rolling_max = Math.max(rolling_max, current);\n    return rolling_max;\n\
    \  }, 0);\n}\n\n", "  var array = [];\n  for(var i = 0; i < numbers.length; i++){\n\
    \    array[i] = numbers[i];\n  }\n  return rolling_max_aux(array, numbers.length\
    \ - 1);\n}\n", "  var maximums = numbers.reduce(function(maximums, number){\n\
    \    maximums.unshift(number);\n    return maximums;\n  }, []);\n  return maximums\n\
    }\n\n", "  var _numbers = [];\n  for(var i = 0; i < numbers.length; i++){\n  \
    \  _numbers.push(Math.max(...numbers));\n  }\n  return _numbers;\n}\n", "    var\
    \ tmpArr = [];\n    var current;\n    numbers.forEach(function(n){\n        current\
    \ = tmpArr.indexOf(n);\n        if(current==-1){\n            tmpArr.push(n);\n\
    \            current = tmpArr.indexOf(n);\n        }\n        if(current>-1){\n\
    \            tmpArr.splice(current,1);\n        }\n    });\n    return tmpArr.reduce(function(a,b){return\
    \ Math.max(a,b);})\n}\n", "\tvar max = numbers.reduce(function(a,b){\n\t\treturn\
    \ Math.max(a,b);\n\t});\n\treturn numbers.map(function(n){\n\t\treturn Math.max(max,\
    \ n);\n\t});\n}\n", "    return rolling_max_helper(numbers, 0);\n}\n", "  var\
    \ arr = Array(numbers.length);\n  for(var i = 0; i < numbers.length; i++){\n \
    \   arr[i] = Math.max.apply(null, numbers);\n    numbers = numbers.slice(1, numbers.length);\n\
    \  }\n  return arr;\n}\n", "\tvar length = numbers.length;\n\tvar max = 0;\n\t\
    var max_index = 0;\n\tfor(var i = 0; i < length; i++){\n\t\tmax = Math.max(numbers[i],\
    \ max);\n\t\tmax_index = i;\n\t}\n\treturn numbers.slice(0, max_index + 1);\n}",
  "\tvar results = [];\n\tvar start = 0;\n\tvar end = 0;\n\tfor(var i=0;i<numbers.length;i++){\n\
    \t\tend = start+i;\n\t\tif(end > numbers.length){\n\t\t\tend = numbers.length;\n\
    \t\t}\n\t\tresults.push( Math.max.apply(Math, numbers.slice(start, end) ) );\n\
    \t\tstart = end;\n\t}\n\treturn results;\n}\n", "  var max_number = numbers[0];\n\
    \  var max_index_of_max_number = -1;\n\n  for(var i = 1; i < numbers.length; i++){\n\
    \    if(numbers[i] > max_number){\n      max_number = numbers[i];\n      max_index_of_max_number\
    \ = i;\n    }\n  }\n\n  return numbers.slice(0, max_index_of_max_number + 1);\n\
    }\n", "\tvar max_rolling_element = Math.max.apply( Math, numbers );\n\tvar max_rolling_index\
    \ = 0;\n\tvar result_array = [];\n\n\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\tvar current_element = numbers[i];\n\t\tif( current_element == max_rolling_element\
    \ ){\n\t\t\tresult_array.push( numbers[i] );\n\t\t\tmax_rolling_index++;\n\t\t\
    }else if( current_element > max_rolling_element ){\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \treturn result_array;\n}\n", "\tvar array = [], max = numbers[0];\n\tfor(var\
    \ i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] > max)\n\t\t\tmax = numbers[i];\n\
    \t}\n\tarray.push(max);\n\treturn array;\n}\n", "  numbers = numbers.map(Number);\n\
    \  var max = [numbers[0]];\n  for (var i = 1; i < numbers.length; i++){\n    var\
    \ a = numbers[i];\n    var b = numbers[i-1];\n    if (a > b)\n      max = [Math.max(a,\
    \ b), max[1]];\n    else if (a === b)\n      max = [Math.max(a, b), max[1]];\n\
    \    else\n      max = [Math.min(a, b), max[1]];\n  }\n  return max;\n};\n", " \
    \   if(numbers.length < 2)\n        return numbers\n    var ret = [],\n      \
    \  maximum = -Infinity,\n        current = -Infinity,\n        last = -Infinity\n\
    \    for(var i = 0; i < numbers.length; i++)\n    {\n        var a = numbers[i]\n\
    \        if(a > current && a > last)\n        {\n            last = a\n      \
    \  }\n        if(a > current && a > maximum)\n        {\n            maximum =\
    \ a\n        }\n        if(a > last && current > last)\n        {\n          \
    \  last = a\n        }\n        if(a > current && a > maximum)\n        {\n  \
    \          maximum = a\n        }\n    }\n    for(var i = 0; i < numbers.length;\
    \ i++)\n    {\n        var a = numbers[i]\n        if(a > last && current > last)\n\
    \        {\n            last = a\n        }\n        if(a > maximum)\n       \
    \ {\n            maximum = a\n        }\n        if(a > current)\n        {\n\
    \            current = a\n        }\n    }\n    if(last != -Infinity)\n    {\n\
    \        ret.push(last)\n    }\n    if(maximum > -Infinity)\n    {\n        ret.push(maximum)\n\
    \    }\n    return ret\n}", "\tvar max_el = -1;\n\tnumbers.forEach(function (n){\n\
    \t\tif( n >= max_el )\n\t\t\tmax_el = n;\n\t});\n\treturn max_el;\n}", "\tvar\
    \ rolling_maxes = [];\n\tfor(var i = 0; i <= numbers.length; i++){\n\t\tvar index\
    \ = numbers.indexOf(Math.max.apply(null, numbers));\n\t\tif(index > 0){\n\t\t\t\
    rolling_maxes.push(numbers[index - 1]);\n\t\t}\n\t}\n\treturn rolling_maxes;\n\
    }\n", "\t\n\treturn _.map(numbers, function(num){\n\t\treturn Math.max.apply(null,\
    \ num);\n\t});\n}\n", "  var n = numbers.length\n    , max = numbers[0]\n    ,\
    \ maxi = 0\n    , rolling_max = [];\n  rolling_max.push([numbers[0], 0]);\n  for\
    \ (var i = 1; i < n; i++){\n    if (numbers[i] < max)\n      rolling_max[rolling_max.length\
    \ - 1][1] = Math.max(rolling_max[rolling_max.length - 1][1], numbers[i]);\n  \
    \  else if (numbers[i] > max)\n      rolling_max.push([max, numbers[i]]);\n  }\n\
    \  return rolling_max;\n}\n", "  var result = [];\n  var maxNumber;\n\n  for(var\
    \ i = 0; i < numbers.length; i++){\n    maxNumber = Math.max.apply(null, numbers);\n\
    \    result.push(maxNumber);\n    numbers[i] = maxNumber;\n  }\n\n  return result;\n\
    }\n", "  var arr = [];\n  for(var i = 0, j = numbers.length; i < j; i++) {\n \
    \   if(numbers[i] > arr[j]){\n      arr.push(numbers[i]);\n    }\n  }\n  return\
    \ arr;\n}\n", "  var max_element = Math.max.apply(null, numbers);\n  return numbers.map(function(n){\n\
    \    return max_element-n\n  }).sort(function(a, b){\n    return b-a\n  }).reverse()\n\
    }\n", "  \n  var maxs = []\n  \n  for(var i = 0; i < numbers.length; i++){\n \
    \   var max = numbers[i]\n    for(var j = 1; j <= i; j++){\n      if(numbers[j]\
    \ > max){\n        max = numbers[j]\n      }\n    }\n    maxs.push(max)\n  }\n\
    \  \n  return maxs;\n}\n", "\tif(!Array.isArray(numbers)) throw 'Expected an array';\n\
    \tvar max_nums = numbers.reduce(function(a, b){\n\t\treturn Math.max(a, b);\n\t\
    }, 0);\n\treturn numbers.map(function(x, i){\n\t\treturn Math.max(x, max_nums\
    \ - numbers[i]);\n\t});\n}\n", "\treturn numbers.reduce(function(a,b){\n\t\treturn\
    \ a >= b ? a : a;\n\t});\n}\n", "\tlet result = new Array();\n\tfor (let i = 0;\
    \ i < numbers.length; i++) {\n\t\tlet currentMax = numbers[0];\n\t\tfor (let j\
    \ = 1; j < numbers.length; j++) {\n\t\t\tif (numbers[j] > currentMax) {\n\t\t\t\
    \tcurrentMax = numbers[j];\n\t\t\t}\n\t\t}\n\t\tresult.push(currentMax);\n\t}\n\
    \treturn result;\n}\n", "    var result=[];\n    var rollingMaxIndexes=[];\n\n\
    \    for(i=0; i<numbers.length; i++){\n        result[result.length]=numbers[i];\n\
    \        rollingMaxIndexes[rollingMaxIndexes.length]=i;\n        for(j=0; j<numbers.length;\
    \ j++){\n            if(j<=i){\n                continue;\n            }\n   \
    \         if(numbers[j]>numbers[i]){\n                result[result.length]=numbers[j];\n\
    \                rollingMaxIndexes[rollingMaxIndexes.length]=j;\n            }\n\
    \        }\n    }\n\n    for(i=0; i<result.length; i++){\n        result[result.length]=result[rollingMaxIndexes[i]];\n\
    \    }\n\n    return result;\n}", "\tvar result = [],\n\t\tnumberLength = numbers.length;\n\
    \tfor (var i = 0; i < numberLength; i++) {\n\t\tvar current = numbers[i];\n\t\t\
    var number = numberLength - i;\n\t\tvar previousNumber = numbers[numberLength\
    \ - i - 1];\n\t\tvar previousNumberResult = result[numberLength - i - 1];\n\t\t\
    var currentMax = previousNumberResult > current ? previousNumberResult : current;\n\
    \t\t\n\t\tresult[number] = currentMax;\n\t}\n\t\n\treturn result;\n}\n", "  \n\
    \  const rolling_max_arr = [];\n  \n  for (let i = 0; i < numbers.length; i++){\n\
    \    rolling_max_arr.push(Math.max(...rolling_max_arr, numbers[i]));\n  }\n  \n\
    \  return rolling_max_arr;\n}\n", "    var max = 0;\n    var i = 0;\n    var temp;\n\
    \    for(i = 0; i < numbers.length; i++){\n        temp = numbers[i];\n      \
    \  while(temp > max){\n            max = temp;\n        }\n        temp = numbers[i];\n\
    \        while(temp < max){\n            max = temp;\n        }\n    }\n    return\
    \ max;\n}", "    var max;\n    numbers.sort(function(a, b){return a - b;});\n\
    \    for(var i = numbers.length-1; i >= 0; i--){\n        if(max < numbers[i]){\n\
    \            max = numbers[i];\n        }\n    }\n    return max;\n}\n", "   \
    \ return rolling_max_generic(numbers, rolling_max_generic, []);\n}\n", "\tvar\
    \ result = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < result[0]){\n\t\t\tresult[0] = numbers[i];\n\t\t}\n\t\tresult.push(numbers[i]);\n\
    \t}\n\treturn result;\n}\n", "    var output = [];\n    \n    for(var i in numbers){\n\
    \        output.push(Math.max.apply(null, numbers));\n    }\n    \n    return\
    \ output;\n}\n", "\tif(numbers.length == 0){\n\t\treturn [];\n\t}\n\t\n\treturn\
    \ numbers.reduce(function(a, b){\n\t\tif(b > a[a.length - 1])\n\t\t\ta.push(b);\n\
    \t\treturn a;\n\t},[]);\n}\n", "    if (numbers.length===0) return null;\n   \
    \ var max_so_far = numbers[0];\n    var max_so_far_max_idx = -1;\n    var len\
    \ = numbers.length;\n    var i = 1;\n    for(; i < len; i++){\n        if(numbers[i]\
    \ > max_so_far){\n            max_so_far_max_idx = i;\n            max_so_far\
    \ = numbers[i];\n        }\n    }\n    return max_so_far;\n}\n", "    var max_val\
    \ = 0;\n    var rolling_max_element = null;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max_val){\n            max_val = numbers[i];\n\
    \            rolling_max_element = numbers[i];\n        }\n    }\n    return rolling_max_element;\n\
    }\n", "  return numbers.reduce((acc, val) => {\n    if(!acc.length) acc.push(val);\n\
    \    if(acc.length > 1 && val !== acc[acc.length - 1]) acc.push(acc[acc.length\
    \ - 1]);\n    return acc;\n  }, []);\n}\n", "    if (numbers.length < 1) return\
    \ [];\n    var results = [];\n    var i = 0;\n    var sum = 0;\n    numbers.forEach(function(n){\n\
    \        sum += n;\n        results.push(sum);\n    });\n\n    var current_max\
    \ = sum;\n    var current_index = 0;\n\n    var array_length = numbers.length;\n\
    \    var array_sum = results[array_length - 1];\n    var times_seen = 0;\n   \
    \ while(times_seen < array_length){\n        var current_sum = results[current_index];\n\
    \        if(current_sum > current_max){\n            current_max = current_sum;\n\
    \            current_index = times_seen + 1;\n        }\n        else {\n    \
    \        if(current_index == array_length - 1){\n                times_seen +=\
    \ 1;\n                current_index = times_seen;\n            }\n           \
    \ else{\n                times_seen = current_index + 1;\n            }\n    \
    \    }\n    }\n\n    return results;\n}\n", "\tnumbers.sort(function(a, b){return\
    \ a - b;});\n\t\n\tvar max = numbers[0];\n\tvar maxIndex = 0;\n\tvar result =\
    \ new Array(numbers.length);\n\t\n\tfor (var i = 1; i < numbers.length; i++){\n\
    \t\tvar v = numbers[i];\n\t\tif (v > max){\n\t\t\tmax = v;\n\t\t\tmaxIndex = i;\n\
    \t\t}\n\t}\n\t\n\tresult[0] = max;\n\tresult[1] = maxIndex;\n\t\n\tfor (var i\
    \ = 2; i < numbers.length; i++){\n\t\tvar v = numbers[i];\n\t\tvar index = i -\
    \ 1;\n\t\tif (v > max && v < numbers[index]){\n\t\t\tmax = v;\n\t\t\tmaxIndex\
    \ = index;\n\t\t}\n\t}\n\t\n\tresult[2] = maxIndex;\n\t\n\treturn result;\n}\n",
  "  if(numbers.length <= 1) return numbers;\n  return numbers.reduce(function(previousValue,\
    \ currentValue, index){\n    return index === 0 ? previousValue : Math.max(previousValue,\
    \ currentValue);\n  });\n}\n\n", "  var currentMax = numbers[0];\n  var maxElements\
    \ = [];\n  for (var i = 1; i < numbers.length; i++){\n    if (numbers[i] > currentMax){\n\
    \      currentMax = numbers[i];\n    } else {\n      maxElements.push(currentMax);\n\
    \      currentMax = numbers[i];\n    }\n  }\n  maxElements.push(currentMax);\n\
    \  return maxElements;\n}\n", "  var max_element = []\n  for(var i = 1; i < numbers.length;\
    \ i++){\n    max_element = maxArray(max_element, numbers[i-1], numbers[i])\n \
    \ }\n  return max_element\n}\n", "  var arr = [],\n      max = numbers[0];\n\n\
    \  for (var i = 1; i < numbers.length; i++){\n    arr.push(Math.max(numbers[i\
    \ - 1], numbers[i]));\n  }\n\n  return arr;\n}\n\n", "\tvar result = [];\n\tvar\
    \ current_max = numbers[0];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\t\
    if(numbers[i] > current_max){\n\t\t\tcurrent_max = numbers[i];\n\t\t}\n\t\tresult.push(current_max);\n\
    \t}\n\treturn result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
