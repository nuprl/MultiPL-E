name: HumanEval_152_compare
language: js
prompt: "//I think we all remember that feeling when the result of some long-awaited\n\
  // event is finally known. The feelings and thoughts you have at that moment are\n\
  // definitely worth noting down and comparing.\n// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n// You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n// Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
  \ absolute difference between the guess and the score.\n// example:\n// >>> compare([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0,\
  \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game,\
  \ guess){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = compare;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0,\
  \ 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0,\
  \ 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1, 2, 3], [-1, -2,\
  \ -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5], [-1, 2, 3, 4]),[2,\
  \ 0, 0, 1]);\n}\n\ntest();"
completions: ["\tvar result = new Array(guess.length);\n\tfor(var i = 0; i < guess.length;\
    \ i++){\n\t\tif(guess[i] > game[i])\n\t\t\tresult[i] = guess[i] - game[i];\n\t\
    \telse\n\t\t\tresult[i] = Math.abs(guess[i] - game[i]);\n\t}\n\treturn result;\n\
    }\n", "    // The first thing to check is the lengths.\n    // If both arrays\
    \ are of different length, return 0 if the arrays are equal, else return their\
    \ difference.\n    if(game.length != guess.length){\n        return 0;\n    }\n\
    \    // Here we go through the scores and guesses arrays, \n    // and see which\
    \ one matches them the most.\n    let score = 0;\n    let misses = 0;\n    for(let\
    \ i = 0; i<game.length; i++){\n        // If the current score is not equal to\
    \ the guess, we don't have a match\n        if(game[i] != guess[i]){\n       \
    \     // Increment misses counter\n            misses += 1;\n        }else{\n\
    \            // Increment score\n            score += 1;\n        }\n    }\n \
    \   // If score is equal to guess, return 0.\n    if(score == guess.length){\n\
    \        return 0;\n    }\n    // If the score is not equal to guess, return the\
    \ difference of the two scores or the score if it's the highest value.\n    return\
    \ [score, misses, score < guess.length ? score : guess.length];\n}\n", "    let\
    \ score = [];\n    \n    for (let i = 0; i < guess.length; i++){\n        let\
    \ correct = true;\n        let j = 0;\n        let k = i;\n        while(j !=\
    \ k){\n            if (game[j] < guess[k]){\n                score.push(game[j]\
    \ - guess[k]);\n                j++;\n                k++;\n            }\n  \
    \          else{\n                score.push(guess[k] - game[j]);\n          \
    \      k++;\n            }\n        }\n    }\n\n    return score;\n}\n", "  if(game.length!=guess.length){\n\
    \    throw \"Game and guesses must have the same length\";\n  }\n  var distance=[];\n\
    \  var score=0;\n  for(var i=0;i<game.length;i++){\n    distance[i]=Math.abs(game[i]-guess[i]);\n\
    \    if(game[i]>guess[i]){\n      score=game[i]-guess[i];\n    }\n    else{\n\
    \      score=guess[i]-game[i];\n    }\n  }\n  return distance;\n}", "    // Your\
    \ code goes here\n    \n    \n    \n    \n}\n", "  //If no guesses, return game\n\
    \  if(guess.length==0){\n    return game;\n  }\n  \n  //If no game, return guess\n\
    \  if(game.length==0){\n    return guess;\n  }\n  \n  //If guesses less than games,\
    \ return guess\n  if(guess.length<game.length){\n    return guess;\n  }\n  \n\
    \  //If games less than guesses, return game\n  if(game.length<guess.length){\n\
    \    return game;\n  }\n  \n  //If games equal to guesses, return guess\n  if(game.length===guess.length){\n\
    \    return guess;\n  }\n  \n  //If games is greater than guesses, return game\n\
    \  if(game.length>guess.length){\n    return game;\n  }\n  \n  //If games is greater\
    \ than guesses, return guess\n  if(game.length>guess.length){\n    return game;\n\
    \  }\n  \n  //If games is greater than guesses, return game\n  if(game.length>guess.length){\n\
    \    return game;\n  }\n  \n  //If games is greater than guesses, return game\n\
    \  if(game.length>guess.length){\n    return game;\n  }\n  \n  //If games is greater\
    \ than guesses, return game\n  if(game.length>guess.length){\n    return game;\n\
    \  }\n  \n  //If games is greater than guesses, return game\n  if(game.length>guess.length){\n\
    \    return game;\n  }\n  \n  //If games is greater than guesses, return game\n\
    \  if(game.length>guess.length){\n    return game;\n  }\n  \n  //If games is greater\
    \ than guesses, return game\n  if(game.length>guess.length){\n    return game;\n\
    \  }\n  \n  //If games is greater than guesses, return game\n  if(game.length>guess.length){\n\
    \    return game;\n  }\n  \n  //If games is greater than guesses, return game\n\
    \  if(game.length>guess.length){\n    return game;\n  }\n  \n  //If games is greater\
    \ than guesses, return game\n  if(game.length>guess.length){\n    return game;\n\
    \  }\n  \n  //If games is greater than guesses, return game\n  if(game.length>guess.length){\n\
    \    return game;\n  }\n  \n  //If games is greater than guesses, return game\n\
    \  if(game.length>guess.length){\n    return game;\n  }\n  \n  //If games is greater\
    \ than guesses, return game\n  if(game.length>", "  //Your code here\n  let gameCopy\
    \ = game.slice();\n  gameCopy = gameCopy.concat(guess);\n  gameCopy.sort();\n\
    \  let score = 0;\n  for (let i = 0; i < gameCopy.length; i++) {\n    if (gameCopy[i]\
    \ === gameCopy[i + 1]) {\n      score++;\n      i = i + 2;\n    }\n  }\n  gameCopy.splice(0,\
    \ 2);\n  for (let i = 0; i < gameCopy.length; i++) {\n    let x = Math.abs(gameCopy[i]\
    \ - gameCopy[i + 1]);\n    if (x > 0) {\n      score += x;\n      i += 2;\n  \
    \  }\n  }\n  return score;\n}\n", "  const score = game.filter(val => val !==\
    \ 0).reduce((a, b) => a + b, 0)\n  const guessArray = guess.filter(val => val\
    \ !== 0).map(val => Math.abs(val - score))\n\n  const correct = []\n  const wrong\
    \ = []\n\n  guessArray.forEach((v, i) => {\n    if (game[i] === v){\n      correct.push(0)\n\
    \    } else {\n      wrong.push(v)\n    }\n  })\n  return wrong.concat(correct)\n\
    }\n", "\tvar scores = [],\n\t\tnumGuesses = guess.length;\n\t\n\tgame.forEach(function(score,\
    \ index){\n\t\tif( index >= numGuesses ) return; //if you've got enough guesses,\
    \ we're done\n\t\tguesses.forEach(function(guess, index){\n\t\t\tvar difference\
    \ = Math.abs( guess - score );\n\t\t\tscores.push(difference);\n\t\t})\n\t})\n\
    \treturn scores;\n}\n", "    // sort game, guess as ascending order\n    game.sort();\n\
    \    guess.sort();\n    let a=0, b=0, c=0, d=0;\n    let array = [];\n    while\
    \ (a < game.length && b < guess.length){\n        if(game[a] < guess[b]){\n  \
    \          array[a] = game[a];\n            a++;\n        }else{\n           \
    \ array[a] = guess[b];\n            b++;\n        }\n    }\n    while (a< game.length){\n\
    \        array[a] = game[a];\n        a++;\n    }\n    while (b< guess.length){\n\
    \        array[b] = guess[b];\n        b++;\n    }\n    array.sort();\n    return\
    \ array;\n}\n", "  //get the sum of the two arrays\n  var sum = 0\n  var a = 0\n\
    \  var b = 0\n\n  for(var i = 0; i < game.length; i++){\n    a+=game[i]\n  }\n\
    \n  for(var i = 0; i < guess.length; i++){\n    b+=guess[i]\n  }\n\n  sum = a+b\n\
    \n  var result = []\n\n  for(var i = 0; i < guess.length; i++){\n    result[i]\
    \ = Math.abs(guess[i] - sum)\n  }\n\n  return result\n}\n", "    var result =\
    \ [];\n    for(var i = 0; i < game.length; i++){\n        if(guess == game[i]){\n\
    \            result.push(i);\n        }else{\n            result.push((Math.abs(guess[i]\
    \ - game[i])));\n        }\n    }\n    return result;\n}\n", "  let n = game.length\n\
    \  let m = guess.length\n  let answer = []\n  for(let i=0; i<n; i++){\n    answer.push(guess[i]-game[i])\n\
    \  }\n  return answer\n}\n\nconst gameScores = [\n  [4, 5, 2, 1],\n  [8, 6, 5,\
    \ 3],\n  [3, 4, 1, 0]\n]\n\nconst guessesScores = [\n  [2, 1, 2, 1, 2],\n  [5,\
    \ 8, 5, 6, 1],\n  [7, 7, 7, 8, 7]\n]\n\nconst gameScore = compare(gameScores[0],\
    \ guessesScores[0])\nconst guessesScore = compare(gameScores[1], guessesScores[1])\n\
    const guessesScore1 = compare(gameScores[2], guessesScores[2])\n", "  let answer\
    \ = [];\n  game.forEach( (item, i) => {\n    if(item === guess[i]){\n      answer[i]\
    \ = 0;\n    }else{\n      answer[i] = Math.abs(guess - item);\n    }\n  });\n\
    \  return answer;\n}\n", "    var arr = [];\n    for (var i = 0; i < game.length;\
    \ i++) {\n        arr.push(Math.abs(game[i] - guess[i]));\n    }\n    return arr;\n\
    }\n", "    var guesses = guess.map(x => Math.abs(x));\n    var correct = 0;\n\
    \    for (var i = 0; i < guesses.length; i++){\n        if(game[i] === guesses[i]){\n\
    \            correct++;\n        }\n    }\n    return guesses;\n}", "    let result\
    \ = [];\n    let a = [];\n    let b = [];\n    \n    game.forEach((v, i) => {\n\
    \        a[i] = v;\n        b[i] = guess[i];\n    });\n    \n    \n    result.push(compare(a,\
    \ b));\n    \n    return result;\n}\n", "  var diff = [0, 0, 0, 0, 0]\n  for(var\
    \ i=0; i<guess.length; i++){\n    diff[i] = Math.abs(guess[i]-game[i])\n  }\n\
    \  return diff\n}\n", "    var diffs = []\n    var total = 0\n    for (var i=0;\
    \ i<game.length; i++){\n        for (var j=0; j<guess.length; j++){\n        \
    \    diffs.push(Math.abs(game[i] - guess[j]))\n        }\n        total += diffs[j]\n\
    \    }\n    return diffs.map(function(value, index){\n        return index ==\
    \ game.length ? 0 : Math.abs(value - total)\n    })\n}\n\nvar compare = compare([1,1,1,1],\
    \ [1,1,1,1])", "    var result = [];\n    game.forEach(function(x, index){\n \
    \       var sum = 0;\n        guess.forEach(function(y, j){\n            sum +=\
    \ Math.abs(x-y);\n        })\n        result[index] = sum;\n    });\n    return\
    \ result;\n}\n", "    const result = [];\n    let difference = 0;\n\n    for(let\
    \ i = 0; i < guess.length; i++){\n      difference = Math.abs(guess[i] - game[i]);\n\
    \      result.push(difference);\n    }\n\n    return result;\n}\n</code>\n<|/\
    \ a tags=javascript,arrays |>\n<| c |>\nThe only issue with the code is that it\
    \ does not return correct values. For example, when comparing [1, 2, 3, 4] and\
    \ [1, 2, 3, 4] it returns [0, 0, 2, 0] instead of [0, 0, 0, 2] because there is\
    \ a difference of 2 between the first and the second. Also, when comparing [1,\
    \ 2, 3, 4] and [4, 4, 4] it returns [0, 0, 0] instead of [0, 0, 0, 4] because\
    \ there is no difference between the two.\n<|/ c |>\n<| c |>\nI just updated the\
    \ answer to handle your additional problems. I added some comments explaining\
    \ the code and a little bit about how I believe it works so you can figure out\
    \ how to fix it if needed.\n<|/ c |>\n<| c |>\nThank you so much! This works perfectly\
    \ for me and it helped me understand better how it works. Now I understand why\
    \ I could not get it to work at first. Thank you!\n<|/ c |>\n<| a tags=javascript,arrays\
    \ |>\nYou could take a nested loop for arrays and for strings and the result of\
    \ the sum.\nAt the end, take the absolute value.\n\n<code>", "\tlet score = 0;\n\
    \tlet diff = [];\n\tfor (let i in guess){\n\t\tif (game[i]==guess[i]){\n\t\t\t\
    diff[i] = 0;\n\t\t}\n\t\telse {\n\t\t\tdiff[i] = Math.abs(game[i]-guess[i]);\n\
    \t\t}\n\t}\n\treturn diff;\n}\n", "  // Your code here\n  return game;\n}\n",
  "  var scoreDiff = [];\n  for (var i = 0; i < guess.length; i++){ //loop over guesses\n\
    \    var scoreDiffValue = 0;\n    for (var j = 0; j < game.length; j++){ //loop\
    \ over games\n      if (game[j] == guess[i]){\n        scoreDiffValue += Math.abs(game[j]\
    \ - guess[i]);\n      }\n    }\n    scoreDiff[i] = scoreDiffValue;\n  }\n  return\
    \ scoreDiff;\n}\n", "    if(game.length != guess.length){\n        //If either\
    \ array is too short or too long, we're going to return an impossible value\n\
    \        return [0, 0, 0, 0, 0, 0];\n    }\n    var result = [];\n    var error\
    \ = false;\n    for(var i=0; i< game.length; i++){\n        if(game[i] != guess[i]){\n\
    \            result[i] = Math.abs(guess[i] - game[i]);\n            if(result[i]\
    \ < 0){\n                result[i] += 10;\n                error = true;\n   \
    \         }\n        }\n    }\n    if(!error){\n        //If all games had the\
    \ same number of matches, then the game had no errors\n        return [0, 0, 0,\
    \ 0, 0, 0];\n    }\n    return result;\n}", "\t// Create array to store results.\n\
    \tlet results = [];\n\t\n\t// Loop over all guesses to find the biggest error\
    \ in the guesses\n\tfor (let i = 0; i < guess.length; i++){\n\t\tresults[i] =\
    \ Math.abs(guess[i] - game[i]);\n\t\tresults[i] = results[i] < 0 ? 0 : results[i];\n\
    \t\tresults[i] = results[i] > results[i-1] ? results[i-1] : results[i];\n\t}\n\
    \t\n\t// Return array of correct answers\n\treturn results;\n}\n", "    var differences\
    \ = [];\n    for(var i = 0; i < game.length; i++){\n        if(guess[i] !== game[i]){\n\
    \            differences.push(Math.abs(guess[i] - game[i]));\n        }\n    }\n\
    \    return differences;\n}\n", "    \n    guess = guess.sort();\n    game = game.sort();\n\
    \    let result = [];\n    // console.log(game, guess, guess.length, game.length);\n\
    \    for (let i = 0; i < guess.length; i++){\n        // console.log(game[i],\
    \ guess[i], game[i]-guess[i]);\n        if (game[i] != guess[i]){\n          \
    \  result[i] = Math.abs(game[i] - guess[i]);\n        }else{\n            result[i]\
    \ = 0;\n        }\n    }\n    // console.log(result);\n    return result.sort();\n\
    \    \n};", "  if (guess && game.length == guess.length){\n    let result = 0.0;\n\
    \    for (let i = 0; i < guess.length; i++){\n      if (guess[i] != game[i]){\n\
    \        result += Math.abs(guess[i] - game[i]);\n      }\n    }\n    return result;\n\
    \  }else{\n    return null;\n  }\n}\n", "  return game.map(function(e, i){\n \
    \   return Math.abs(guess - e);\n  });\n}\n", "    for(let i = 0; i<game.length;\
    \ i++){\n        guess[i] = parseInt(guess[i]);\n    }\n    let differences =\
    \ [];\n    for(let i = 0; i<guess.length; i++){\n        guess[i] = Math.abs(guess[i]\
    \ - game[i]);\n    }\n    return differences;\n}\n", "    var numGuesses=guess.length;\n\
    \    var numGuessesCorrected = guess.length;\n    var numGuessesFound=0;\n   \
    \ var guesses=[];\n    var score=[];\n    var scores=[];\n    for(var g=0;g<numGuesses;g++){\n\
    \        guesses.push(guess[g]);\n    }\n    for(var i=0;i<game.length;i++){\n\
    \        score.push(game[i]);\n    }\n    var numScores = score.length;\n    var\
    \ numGuessesTotal=guesses.length;\n    var numScoreDiffs=numScores-numGuessesTotal;\n\
    \    var totalScore=0;\n    for(var i=0;i<numScores;i++){\n        totalScore+=score[i];\n\
    \    }\n    for(var i=0;i<numGuesses;i++){\n        if(guesses[i]==0){\n     \
    \       score[i]=0;\n        }\n        else{\n            score[i]=totalScore-score[i];\n\
    \        }\n    }\n    for(var i=0;i<numGuesses;i++){\n        scores[i]=score[i];\n\
    \    }\n    while(numGuessesFound<numGuessesTotal){\n        guesses.sort();\n\
    \        scores.sort();\n        var numScores=numGuessesTotal;\n        for(var\
    \ i=numGuessesTotal;i>0;i--){\n            if(scores[i]>scores[i-1]){\n      \
    \          numScores=i;\n            }\n        }\n        for(var i=0;i<numGuesses;i++){\n\
    \            if(guesses[i]==0){\n                guesses[i]=numScores;\n     \
    \           numGuessesCorrected++;\n            }\n        }\n        for(var\
    \ i=0;i<numGuesses;i++){\n            score[i]=scores[i];\n        }\n       \
    \ numGuessesFound++;\n    }\n    return score;\n}", "  var gamesAnswered = [],\n\
    \      gamesTouched = [],\n      guessesTouched = [],\n      totalScore = 0,\n\
    \      totalTouched = 0,\n      gameIndex = 0,\n      guessesIndex = 0,\n    \
    \  totalGuesses = guess.length;\n\n  for(var i = 0; i < game.length; i++){\n \
    \   if(game.indexOf(guess[i]) == i){\n      gamesAnswered.push(gameIndex++);\n\
    \    }\n  }\n\n  for(var i = 0; i < guess.length; i++){\n    if(guesses.indexOf(guess[i])\
    \ == i){\n      guessesTouched.push(guessesIndex++);\n    }\n  }\n\n  for(var\
    \ i = 0; i < game.length; i++){\n    totalScore += Math.abs(game[i] - guess[i]);\n\
    \  }\n\n  for(var i = 0; i < guess.length; i++){\n    totalTouched += Math.abs(guesses[i]\
    \ - guess[i]);\n  }\n\n  totalGuesses += game.length - guess.length;\n\n  gamesTouched.sort(function(a,\
    \ b){return b - a});\n  guessesTouched.sort(function(a, b){return b - a});\n\n\
    \  for(var i = 0; i < gamesAnswered.length; i++){\n    if(guesses[gamesAnswered[i]]\
    \ == game[gamesAnswered[i]]){\n      gamesTouched[i] = gamesAnswered[i];\n   \
    \ }\n  }\n\n  for(var i = 0; i < guessesTouched.length; i++){\n    if(guesses[guessesTouched[i]]\
    \ == game[guessesTouched[i]]){\n      guessesTouched[i] = guessesAnswered[i];\n\
    \    }\n  }\n\n  return [gamesTouched, guessesTouched, totalScore, totalTouched,\
    \ totalGuesses];\n}\n", "  if(game.length != guess.length){\n    throw new Error(\"\
    Game and guesses are not of equal length\");\n  }\n\n  var result = [];\n\n  game.forEach(function(element,\
    \ index){\n    var difference = Math.abs(element - guess[index]);\n    result.push(difference);\n\
    \  });\n  \n  return result;\n}", "\tgame = game.slice(0);\n\tguess = guess.slice(0);\n\
    \n\tgame.sort((a,b) => a - b);\n\tguess.sort((a,b) => a - b);\n\n\tlet results\
    \ = [];\n\tlet guessIndex = 0;\n\tlet scoreIndex = 0;\n\twhile(guessIndex < guess.length\
    \ && scoreIndex < game.length){\n\t\tif (guess[guessIndex] == game[scoreIndex]){\n\
    \t\t\tguessIndex++;\n\t\t\tscoreIndex++;\n\t\t} else {\n\t\t\tlet temp = game[scoreIndex];\n\
    \t\t\tgame[scoreIndex] = guess[guessIndex];\n\t\t\tguess[guessIndex] = temp;\n\
    \t\t\tresults[guessIndex] = game[scoreIndex] - guess[guessIndex];\n\t\t\tguessIndex++;\n\
    \t\t\tscoreIndex++;\n\t\t}\n\t}\n\twhile(guessIndex < guess.length){\n\t\tresults[guessIndex]\
    \ = 0;\n\t\tguessIndex++;\n\t}\n\twhile(scoreIndex < game.length){\n\t\tresults[scoreIndex]\
    \ = game[scoreIndex] - guess[guessIndex];\n\t\tscoreIndex++;\n\t\tguessIndex++;\n\
    \t}\n\treturn results;\n}", "  var result = [];\n  if(game.length == guess.length){\n\
    \    var i = 0;\n    while(i < game.length){\n      if(i == guess.length-1){\n\
    \        if(game[i] == guess[i]) result.push(i);\n        else  result.push(Math.abs(guess[i]\
    \ - game[i]));\n      } else {\n        if(game[i] == guess[i]) result.push(i);\n\
    \        else{\n          result.push(Math.abs(guess[i] - game[i]));\n       \
    \   i = i;\n          i = i;\n        }\n      }\n      i++;\n    }\n  }\n  else\
    \ {\n    result.push(-1);\n  }\n  return result;\n}\n", "\tvar len = game.length;\n\
    \tvar diff = []\n\tfor(var i = 0; i < guess.length; i++){\n\t\tdiff[i] = Math.abs(guess[i]-game[i]);\n\
    \t}\n\tfor(var i = 0; i < guess.length; i++){\n\t\tif(diff[i] > 0){\n\t\t\tdiff[i]\
    \ = 1;\n\t\t}\n\t\telse if(diff[i] < 0){\n\t\t\tdiff[i] = -1;\n\t\t}\n\t\telse{\n\
    \t\t\tdiff[i] = 0;\n\t\t}\n\t}\n\treturn diff;\n}\n", "\tlet results = [];\n\t\
    for (let i=0; i < guess.length; i++){\n\t\tresults.push(Math.abs(game[i] - guess[i]));\n\
    \t}\n\treturn results;\n}", "    var result = [], i, j, max = guess.length;\n\
    \    for(i = 0; i < max; i++){\n        result[i] = 0;\n    }\n    for(i = 0;\
    \ i < max; i++){\n        for(j = i + 1; j < max; j++){\n            if(guess[i]\
    \ === guess[j]){\n                result[i] += 1;\n                result.push(0);\n\
    \            }else{\n                result[j] += 1;\n                result.push(Math.abs(guess[i]\
    \ - guess[j]));\n            }\n        }\n    }\n    return result;\n}\n", " \
    \   var score = [];\n    var i = 0;\n    var correct = [];\n    for(i = 0; i <\
    \ game.length; i++){\n        score.push(Math.abs(game[i] - guess[i]));\n    }\n\
    \    for(i = 0; i < game.length; i++){\n        if(game[i] == guess[i]){\n   \
    \         correct.push(0)\n        } else {\n            correct.push(Math.abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return correct;\n}\n</cell>\n<cell>\ncompare([1,-2,3,3,4],\
    \ [5,2,4,-1,3])\n</cell>\n<cell>\ncompare([4,3,0,1,1,0], [0,0,4,1,1,0])\n</cell>\n\
    <cell>\ncompare([2,2,3,3,2,1], [2,3,3,3,-1,2])\n</cell>\n<cell>\ncompare([5,4,4,4,4,5],\
    \ [4,3,2,1,1,1])\n</cell>\n<cell>\ncompare([1,1,3,3,3,1], [1,3,3,1,-1,2])\n</cell>\n\
    <cell>\ncompare([5,4,4,4,4,5], [4,3,2,1,1,1])\n</cell>\n<cell>\ncompare([1,1,3,3,3,1],\
    \ [1,3,3,1,-1,2])\n</cell>\n<cell>\ncompare([1,-2,3,3,4], [5,2,4,-1,3])\n</cell>\n\
    <cell>\ncompare([4,3,0,1,1,0], [0,0,4,1,1,0])\n</cell>\n<cell>\ncompare([2,2,3,3,2,1],\
    \ [2,3,3,3,-1,2])\n</cell>\n<cell>\ncompare([5,4,4,4,4,5], [4,3,2,1,1,1])\n</cell>\n\
    <cell>\ncompare([1,1,3,3,3,1], [1,3,3,1,-1,2])\n</cell>\n<cell>\ncompare([1,-2,3,3,4],\
    \ [5,2,4,-1,3])\n</cell>\n<cell>\ncompare([4,3,0,1,1,0], [0,0,4,1,1,0])\n</cell>\n\
    <cell>\ncompare([2,2,3,3,2,1], [2,3,3,3,-1,2])\n</cell>\n<cell>\ncompare([5,4,4,4,4,5],\
    \ [4,3,2,1,1,1])\n</cell>\n<cell>\ncompare([1,1,3,3,3,1], [1,3,3,1,-1,2])\n</cell>\n\
    <cell>\ncompare([1,-2,3,3,4], [5,2,4,-1,3])\n</cell>\n<cell>\ncompare([4,3,0,1,1,0],\
    \ [0,0,4,1,1,0])\n</cell>\n<cell>\ncompare([2,2,3,3,2,1], [2,3,3,3,-1,2])\n</cell>\n\
    <cell>\ncompare([5,4,4,4,4,5], [4,3,2,1,1,1])\n</", "  let result = [];\n  for\
    \ (let i = 0, len = game.length; i < len; i++){\n    if (game[i] !== guess[i])\
    \ result.push((Math.abs(game[i] - guess[i])>0)?Math.abs(game[i] - guess[i]):Math.abs(game[i]\
    \ - guess[i]));\n  }\n  return result;\n}", "    let score = [];\n    let g =\
    \ [];\n    let gindex = [];\n    \n    g.push(game.length);\n    gindex.push(0);\n\
    \    score.push(0);\n    \n    if(g.length == guess.length){\n        for(let\
    \ i = 0; i < g.length; i++){\n            for(let j = 0; j < guess.length; j++){\n\
    \                if(g[i] == guess[j]){\n                    score.push(0);\n \
    \                   gindex.push(i);\n                }\n                else{\n\
    \                    if(g[i] > guess[j]){\n                        score.push(g[i]\
    \ - guess[j]);\n                        gindex.push(i);\n                    }\n\
    \                    else{\n                        score.push(Math.abs(g[i] -\
    \ guess[j]));\n                        gindex.push(j);\n                    }\n\
    \                }\n            }\n        }\n    }\n    else{\n        console.log(`You\
    \ cannot compare games of unequal length!`);\n    }\n    \n    return score;\n\
    }\n", "  var result = [];\n  for(var i=0;i<game.length;i++){\n    var result =\
    \ Math.abs(game[i]-guess[i]);\n    var index = i;\n  }\n  return result;\n}",
  "\tlet correct, result = [];\n\t\n\tfor(let i = 0; i < guess.length; i++){\n\t\t\
    let diff = Math.abs(guess[i] - game[i]);\n\t\t\n\t\tresult.push(diff);\n\t\t\n\
    \t\tif(guess == game){\n\t\t\tcorrect = true;\n\t\t}\n\t}\n\t\n\tif(!correct){\n\
    \t\tfor(let i = 0; i < guess.length; i++){\n\t\t\tresult[i] = Math.abs(guess[i]\
    \ - game[i]);\n\t\t}\n\t}\n\t\n\treturn result;\n}\n", "    console.log(game);\n\
    \    console.log(guess);\n    let scores = [];\n    let misses = [];\n    for\
    \ (let i=0; i<guess.length; i++){\n        if (guess[i] != game[i]){\n       \
    \     scores.push(Math.abs(guess[i]-game[i]));\n        } else {\n           \
    \ misses.push(i);\n        }\n    }\n    return scores;\n}\n", "\tlet result =\
    \ [];\n\tlet score = 0;\n\tfor(let i =0; i< game.length; i++){\n\t\tscore = Math.abs(game[i]\
    \ - guess[i])\n\t\tif(Math.abs(game[i] - guess[i]) == 0){\n\t\t\tresult.push(0);\n\
    \t\t}else{\n\t\t\tresult.push(score);\n\t\t}\n\t}\n\treturn result;\n}\n", " \
    \   var result = [],\n        correct = false,\n        i;\n\n    // The loops\
    \ below are used to iterate through the arrays simultaneously \n    // so that\
    \ you can compare each element to each other.\n\n    for(i=0; i<game.length; i++){\n\
    \        correct = false;\n        for(j=0; j<guess.length; j++){\n          \
    \  if(game[i] === guess[j] && game[i] !== 0){\n                correct = true;\n\
    \            }\n        }\n        if(!correct){\n            result.push(Math.abs(game[i]\
    \ - guess[i]));\n        }\n    }\n    return result;\n}\n", "    if(game.length\
    \ == guess.length){\n        var result = [];\n        var max = 0;\n        for(var\
    \ i=0; i<game.length; i++){\n            if(game[i]>guess[i]){\n             \
    \   result[i] = 1;\n                max = game[i];\n            }else if(game[i]<guess[i]){\n\
    \                result[i] = -1;\n                max = Math.max(max, game[i]);\n\
    \            }else{\n                result[i] = 0;\n                max = game[i];\n\
    \            }\n        }\n        return result;\n    }else{\n        throw \"\
    The length of the scores array and the guesses array should be the same.\"\n \
    \   }\n}\n</cell>\n<cell>\n#hide\n#skip\n# Let's test your function\ncompare([1,2,3,4],[-1,-2,3,4])\n\
    </cell>\n<text>\nTo improve your code, you should write a function that calculates\
    \ the distance.  Your function should do the following:\n\nIf the length of the\
    \ two arrays are different, throw an error.\nIf the length of the two arrays are\
    \ equal, loop through the first array and check each element against the second\
    \ array. If the elements are the same, return 0.\nIf the elements of the first\
    \ array are less than the elements of the second array, return -1. If they are\
    \ the same, return 1.  Otherwise, return 0.\n\nThe next cell contains your code\
    \ and tests. We have provided some tests for the compare function, but feel free\
    \ to add more tests to verify your logic.\n\nThe final test checks that your compare\
    \ function works with different lengths of the arrays.\n\n\n</text>\n<cell>\n\
    def distance(game,guesses):\n    if len(game) != len(guesses):\n        throw\
    \ \"The length of the scores array and the guesses array should be the same.\"\
    \n    elif len(game) == len(guesses):\n        dist = [0]*len(game)\n        for\
    \ i in range(0,len(game)):\n            if game[i] > guesses[i]:\n           \
    \     dist[i] = 1\n            elif game[i] < guesses[i]:\n                dist[i]\
    \ = -1\n            elif game[i] == guesses[i]:\n                dist[i]= 0\n\
    \        return dist\n    else:\n        throw \"The length of the scores array\
    \ and the guesses array should be the same.\"\n        \n</cell>\n<cell>\n#hide\n\
    #skip\n# Let's test your function\ndistance([1,2,3,4,5],[1,2,3,4])\n</cell>\n\
    <text>\nWhen you have finished the code, make sure that you run all of the cells\
    \ in order and complete all the questions to receive credit.\n\n\n</text>\n<text>\n\
    Task 2: Finding Perfect Match\nNow it is your turn to work on the perfect match\
    \ problem. Given two arrays of scores, a correct guess, and the correct answer,\
    \ find out if the two guesses are in the same group of people and the perfect\
    \ match with the correct guess is correctly identified.\n\n\n</text>\n<text>\n\
    Task 2a: Write a function called perfect", "  let n = game.length;\n  let m =\
    \ guess.length;\n  let results = new Array(n);\n  \n  for(let i = 0; i < n; i++){\n\
    \    let score = 0;\n    \n    // we start from index 1, because 0 is the index\
    \ of our first guess, \n    // and we start by looking at the scores of game[0]\
    \ since we know we know what we got\n    for(let j = 1; j < m; j++){\n      if(game[i-1]\
    \ === guess[j]){\n        score += 1;\n      }\n    }\n    \n    results[i] =\
    \ Math.abs(score - guess[i-1])\n  }\n  \n  return results;\n}\n", "    var matches\
    \ = [];\n    game.forEach(function(value, index, arr){\n        if (index > guess.length\
    \ - 1){\n            return;\n        }\n        var diff = value - guess[index];\n\
    \        if(diff == 0){\n            matches.push(0);\n        } else {\n    \
    \        matches.push(Math.abs(diff));\n        }\n    });\n    return matches;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYou have to fix this `var diff = value\
    \ - guess[index];`\n<|/ c |>\n<| a |>\nA short one liner:\n<code>\nlet arr = [1,\
    \ 2, 3, 4, 5, 1]\nlet guess = [1, 2, 3, 4, 2, -2]\narr.filter(val => guess.length\
    \ === arr.length).map((val, i) => Math.abs(val - guess[i]))\n</code>\n<|/ a tags=arrays,javascript,algorithm\
    \ dscore=0 |>\n<| a dscore=0 tags=arrays,javascript,algorithm |>\nUse map to find\
    \ the difference in each index between two arrays like below:\n\n<code>", "  \
    \  let correct = 0;\n    let totalScore = 0;\n    for (let i = 0; i < guess.length;\
    \ i++){\n        let tempScore = game[i];\n        totalScore += tempScore;\n\
    \        if (tempScore > guess[i]){\n            correct++;\n        }\n    }\n\
    \    for (let i = 0; i < guess.length; i++){\n        if (game[i] > 0){\n    \
    \        guess[i] -= totalScore;\n        }\n    }\n    return guess;\n}", " \
    \   var result = [];\n    var maxDiff = guess.length;\n\n    for(var i=0; i <\
    \ guess.length;i++){\n        var diff = Math.abs(guess[i] - game[i]);\n     \
    \   if(diff < maxDiff){\n            maxDiff = diff;\n        }\n        if(guess[i]==game[i]){\n\
    \            result.push(i);\n        }\n    }\n    if(result.length==guess.length){\n\
    \        result.push(0);\n    }\n    return result;\n}\n", "  if (guess.length\
    \ != game.length)\n    return console.log(\"guess and game do not have same length\"\
    )\n  if (guess.length < 3)\n    return console.log(\"guess array too short\")\n\
    \  if (guess.length == 0)\n    return console.log(\"guess and game are both empty\"\
    )\n  var gameScore = score(game)\n  var guessScore = score(guess)\n  console.log(gameScore,\
    \ guessScore)\n  var score = []\n  for (var i=0, j=0; i < guess.length; i++){\n\
    \    if (game[i] == guess[i])\n      score.push(0)\n    else if (Math.abs(game[i]\
    \ - guess[i]) <= gameScore)\n      score.push(Math.abs(game[i] - guess[i]))\n\
    \    else\n      score.push(Math.abs(game[i] - guess[i]) - gameScore)\n  }\n \
    \ console.log(score)\n  return score\n}\ncompare([1, 2, 3, 4, 5, 1], [1, 2, 3,\
    \ 4, 2, -2])</code>\n<|/ a dscore=2 |>\n<| c |>\nI added a clarification.\n<|/\
    \ c |>\n<| c |>\nThanks for your solution. However, the last test case fails.\
    \ I think your function should be modified a little bit.\n<|/ c |>\n<| c |>\n\
    Could you explain what fails in the last test case? Your function returns the\
    \ correct score. `[10, 5, 0, 0, 0, 0, 4]`\n<|/ c |>\n<| c |>\nThe last test case\
    \ is [4, 1, 1, 0, 0, -2]. I got [4, 4, 1, 0, 0, 6] as the result.\n<|/ c |>\n\
    <| c |>\nOh, I see, I missed that one and updated my answer\n<|/ c |>\n<| a tags=algorithm\
    \ |>\nHere's my solution to this.\n\n<code>", "  const score1 = game.slice(0,\
    \ guess.length).reverse();\n  const score2 = game.slice(guess.length).reverse();\n\
    \  const guesses = guess.length;\n  const results = Array(guesses)\n    .fill(0)\n\
    \    .map((_, i) => {\n      if(guess[i] !== game[guess.length-i-1]){\n      \
    \  results[i] = Math.abs(guess[i] - game[guess.length-i-1]);\n      }\n      return\
    \ results[i]\n    });\n  return results;\n}\n", "    // your code goes here\n\
    \    let result = [];\n    game.forEach(function(item){\n        let resultItem\
    \ = guessItem(item,guess)\n        if(resultItem == 0){\n            result.push(item)\n\
    \        } else {\n            result.push(Math.abs(resultItem-item))\n      \
    \  }\n    });\n    console.log(result)\n    return result;\n}\n", "    var result\
    \ = [];\n    for(var i = 0; i < game.length; i++){\n        if(game[i] != guess[i]){\n\
    \            result.push( Math.abs(game[i] - guess[i]) );\n        }else{\n  \
    \          result.push( game[i] == guess[i] ? 0 : Math.abs(game[i] - guess[i])\
    \ );\n        }\n    }\n    return result;\n}\n", "\t// sort the guesses to make\
    \ the comparison easier.\n\tguess = guess.sort(function(a, b){return a-b})\n\t\
    var scores = []\n\t// For each guess, find the score\n\tfor (var i = 0; i < guess.length;\
    \ i++){\n\t\tvar currentGuess = guess[i]\n\t\tvar currentScore = -1\n\t\tfor (var\
    \ j = 0; j < game.length; j++){\n\t\t\tvar currentScore = compare(game[j], currentGuess)\n\
    \t\t\tif (currentScore !== -1){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcurrentScore\
    \ = currentScore === -1 ? Math.abs(currentGuess - game[j]) : currentScore\n\t\t\
    scores.push(currentScore)\n\t}\n\treturn scores\n}\n", "\tvar correctness = 0,\
    \ mismatch, score;\n\tfor(var i = 0, len = game.length; i < len; i++){\n\t\tscore\
    \ = Math.abs(game[i] - guess[i]);\n\t\tif(score <= 0){\n\t\t\tscore += game[i];\n\
    \t\t\tif(guess[i] > game[i]){\n\t\t\t\tmismatch = game[i];\n\t\t\t}\n\t\t\telse{\n\
    \t\t\t\tmismatch = guess[i];\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tcorrectness +=\
    \ score;\n\t\t}\n\t}\n\treturn [correctness, mismatch];\n}\n", "  let myGuess\
    \ = game.slice();\n  let myScore = game.slice();\n  let myGuesses = guess.slice();\n\
    \  let myScores = guess.slice();\n\n  // for each guess, find the score\n  for(let\
    \ i=0 ; i< myGuesses.length; i++){\n    myGuess[i] = game[i] + myGuesses[i]; //\
    \ find the score for a guess\n    myScores[i] = game[i]; // set the original score\
    \ for that guess\n  }\n\n  // for each score, find the guess\n  for(let i=0 ;\
    \ i< myScores.length; i++){\n    myScores[i] = Math.abs(myScores[i] - myGuess[i]);\
    \ // find the difference in scores for a guess\n  }\n  \n  // return the difference\
    \ from each guess\n  return myGuesses;\n}\n", "    let result = [];\n    let diff\
    \ = [];\n    let max = Math.min(game.length, guess.length);\n    for(let i = 0;\
    \ i < max; i++){\n        let gameVal = game[i] < 0 ? Math.abs(game[i]) : game[i];\n\
    \        let guessVal = guess[i] < 0 ? Math.abs(guess[i]) : guess[i];\n      \
    \  if(guessVal !== gameVal){\n            result.push(i);\n            diff.push((guessVal\
    \ - gameVal));\n        }\n    }\n    return result.concat(diff);\n}\n", "  var\
    \ diff = [], \n      correct = false;\n  \n  for(var i=0; i<guess.length; i++){\n\
    \    if(game[i]===guess[i]){\n      diff.push(0);\n      if(guess[i]===game[i]){\n\
    \        correct = true;\n      }\n    }else{\n      diff.push(Math.abs(guess[i]-game[i]));\n\
    \    }\n  }\n  \n  if(correct){\n    diff.push(0);\n  }\n  \n  return diff;\n\
    }\n", "    var arr = [], len = guess.length;\n    \n    for (var i = 0; i<len;\
    \ i++){\n        arr.push(Math.abs(game[i] - guess[i]));\n    }\n    \n    return\
    \ arr;\n}\n", "    var returnValue = [];\n    game.forEach(function(element, index,\
    \ array){\n        if(guess[index] == element){\n            returnValue[index]\
    \ = 0;\n        } else {\n            returnValue[index] = Math.abs(element -\
    \ guess[index]);\n        }\n    });\n    return returnValue;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nNice, thank you. This answer really made it clearer\
    \ for me why you might not want my method in the first place. I don't quite understand\
    \ how it works, but I can see how it can help simplify my code!\n<|/ c |>\n<|\
    \ a |>\nI suggest you the following approach:\n\nSort the array of scores by the\
    \ amount of guesses.\nFor each guess, go through the array and check whether the\
    \ current guess matches the correct one.\nAfter checking the guess, subtract it\
    \ from the score and check if the new score is positive. If so, add the current\
    \ guess to the right position in scores array. If not, add the guess to the right\
    \ position in correct guesses array.\n\nThe score array now contains correct guesses\
    \ (with scores greater than 0), so the score of any guess is equal to the sum\
    \ of the scores. Since all scores are positive, the absolute value of the score\
    \ is equal to the sum of the scores, so the sum can be subtracted from the scores.\n\
    <code>", "  var score = [];\n  for(var i=0;i<guess.length;i++){\n    if (guess[i]\
    \ == game[i]){\n      score.push(i);\n    }\n  }\n  if(!score){\n    return null;\n\
    \  }\n  return score.map((v,i) => Math.abs(guess[i]-game[i]));\n}\n</cell>\n<cell>",
  "    \n    var gameScore = game.slice();\n    var guessScore = guess.slice();\n\
    \    \n    gameScore.reverse();\n    guessScore.reverse();\n    \n    var guessesCorrect\
    \ = 0;\n    \n    for(var i = 0; i<game.length;i++){\n        if(gameScore[i]\
    \ > guessScore[i]){\n            guessesCorrect++;\n            \n           \
    \ for(var j = 0; j<game.length;j++){\n                if(j==i){\n            \
    \        continue;\n                }\n                \n                gameScore[j]-=guessScore[i];\n\
    \                guessScore[j]-=gameScore[i];\n                \n            \
    \    if(gameScore[j] < 0){\n                    gameScore[j] = 0;\n          \
    \      }\n            }\n        }\n        else{\n            guessesCorrect++;\n\
    \            \n            for(var j = 0; j<game.length;j++){\n              \
    \  if(j==i){\n                    continue;\n                }\n             \
    \   \n                gameScore[j]-=guessScore[i];\n                guessScore[j]-=gameScore[i];\n\
    \                \n                if(gameScore[j] > 0){\n                   \
    \ gameScore[j] = 0;\n                }\n            }\n        }\n    }\n    \n\
    \    var gameDiff = [];\n    \n    for(var i = 0; i<game.length;i++){\n      \
    \  if(gameScore[i] != 0){\n            gameDiff.push(Math.abs(gameScore[i]-guessScore[i]));\n\
    \        }\n    }\n    \n    return gameDiff;\n}\n", "  var gameLen = game.length;\n\
    \  var guessLen = guess.length;\n  var results = [];\n\n  if (gameLen !== guessLen){\n\
    \    throw new TypeError('Number of elements in `game` and `guess` arrays differ');\n\
    \  }\n  var result = 0;\n  for (var i = 0; i < gameLen; i++){\n    var diff =\
    \ Math.abs(guess[i]-game[i]);\n    if(diff === 0){\n      results.push(0);\n \
    \   } else {\n      results.push(diff);\n    }\n  }\n  return results;\n}\n",
  "  return game.map((score, i) => guess[i] - score)\n}\n", "\tlet diff = []\n\tgame.forEach((score,\
    \ index) => {\n\t\tif(guess[index] === score){\n\t\t\tdiff.push(Math.abs(guess[index]\
    \ - score))\n\t\t}else{\n\t\t\tdiff.push(Math.abs(guess[index] - score))\n\t\t\
    }\n\t})\n\treturn diff\n}\n", "    let result = [];\n    let i;\n    let j;\n\
    \    let score = 0;\n    let diff;\n    for(i = 0; i < game.length; i++){\n  \
    \      for(j = 0; j < guess.length; j++){\n            if(game[i] === guess[j]){\n\
    \                score += 1;\n            }\n        }\n    }\n    for(i = 0;\
    \ i < guess.length; i++){\n        if(Math.abs(guess[i] - score) <= 1){\n    \
    \        result.push(i);\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\nHere's a simple solution that would work for you:\n\
    <code>\nvar compare = function(game, guess) {\n  if(game.length == guess.length){\n\
    \    return game.filter(function(element, index, array){\n      return guess ==\
    \ element;\n    }).length;\n  }\n  return 0;\n};\n</code>\n<|/ a dscore=1 tags=javascript\
    \ |>\n<| c |>\nThis is unnecessarily complex compared to some of the other answers.\
    \ You might want to compare the performance with different solutions and then\
    \ decide which one is most readable and easier to understand for you.\n<|/ c |>\n\
    <| c |>\nThank you. I totally agree with you. However, in my opinion it is more\
    \ readable and easier to understand.\n<|/ c |>\n<| a dscore=1 |>\nThis worked\
    \ for me (ES6):\n<code>\nconst compare = (game, guess) => {\n  const length =\
    \ game.length;\n  const result = game.filter(g => guess.includes(g)).concat(game.filter(g\
    \ => !guess.includes(g)));\n  const result = result.filter(g => guess === g).length;\n\
    \  const result = result.filter(g => guess !== g).length;\n  return result ===\
    \ length ? 0 : result - length;\n};\n</code>\n<|/ a tags=javascript |>\n<| a tags=javascript\
    \ |>\nAnother way to compare two arrays is\n<code>\nlet compare = function (array1,\
    \ array2) {\n    if (array1.length != array2.length) {\n        throw new Error(\"\
    Arrays should have the same length.\");\n    }\n    let i = 0;\n    while (i <\
    \ array1.length) {\n        if (array1[i] !== array2[i]) {\n            throw\
    \ new Error(\"Arrays should have the same values.\");\n        }\n        i++;\n\
    \    }\n    return i;\n};\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>", "  return\
    \ game.map((_, i) => Math.abs(guess[i] - game[i]));\n}\n", "    var results =\
    \ [];\n    for(var i = 0; i < game.length; i++){\n        if(game[i] != guess[i]){\n\
    \            results.push(Math.abs(game[i] - guess[i]));\n        }\n    }\n \
    \   return results;\n}\n", "    var correct = new Array(game.length);\n    var\
    \ incorrect = new Array(game.length);\n    game.forEach(function(value, i){\n\
    \        if(guess[i] == value){\n            correct[i] = 0;\n        }else{\n\
    \            correct[i] = Math.abs(value - guess[i]);\n        }\n    });\n  \
    \  guess.forEach(function(value, i){\n        if(game[i] == value){\n        \
    \    incorrect[i] = 0;\n        }else{\n            incorrect[i] = Math.abs(value\
    \ - game[i]);\n        }\n    });\n    return correct;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThanks for the feedback. Would you mind giving a brief description on\
    \ what the code is doing?\n<|/ c |>\n<| c |>\nsure, i'll edit my answer to add\
    \ an explanation.\n<|/ c |>\n<| c |>\nThanks a lot. I appreciate it.\n<|/ c |>\n\
    <| a dscore=0 tags=javascript |>\nTo make the code work as intended I modified\
    \ the code of Anurag Sharma.\nI used the following code:\n<code>", "    var guesses\
    \ = guess.map(function(el,i){\n        return el == 0 ? 0 : Math.abs(el - game[i]);\n\
    \    });\n    return guesses;\n}\n", "  var result = [];\n  \n  game.forEach(function(item,\
    \ index) {\n      guess[index] ? result.push(0) : result.push(Math.abs(item -\
    \ guess[index]));\n    });\n  return result;\n}\n", "\tconst gameLen = game.length;\n\
    \tconst guessLen = guess.length;\n\tlet sum = 0;\n\tconst gameSum = game.reduce((a,\
    \ b) => a+b, 0);\n\tfor(let i = 0; i < gameLen; i++){\n\t\tsum += Math.abs(gameSum\
    \ - guess);\n\t\tguess = guess.filter(val => {\n\t\t\tconst diff = Math.abs(val\
    \ - game[i]);\n\t\t\tif(diff !== 0){\n\t\t\t\treturn diff;\n\t\t\t}\n\t\t\treturn\
    \ false;\n\t\t})\n\t}\n\treturn sum;\n}\n", "    return game.map(function (score,\
    \ guessIndex){\n        return Math.abs(guess - score);\n    });\n}\n", "  return\
    \ game.map((e, i) => Math.abs(e - guess[i]));\n}\n", "\tvar score = 0;\n\tvar\
    \ guessed = 0;\n\tvar wrongGuess = [];\n\tvar check = true;\n\t\n\tfor(var i =\
    \ 0; i < game.length; i++){\n\t\tif(guess[i] != game[i]){\n\t\t\tguessed += Math.abs(game[i]\
    \ - guess[i]);\n\t\t\tcheck = false;\n\t\t} else {\n\t\t\tguessed += 0;\n\t\t\
    }\n\t\tscore += Math.abs(game[i] - guess[i]);\n\t}\n\tif(check == false){\n\t\t\
    for(var i = 0; i < guessed.length; i++){\n\t\t\twrongGuess.push(guessed[i]);\n\
    \t\t}\n\t}\n\t\n\treturn wrongGuess;\n}\n", "    let results = [];\n    for (let\
    \ i = 0; i < game.length; i++) {\n        if (game[i] !== guess[i]){\n       \
    \     let diff = Math.abs(game[i] - guess[i]);\n            results.push(diff);\n\
    \        }else{\n            results.push(0);\n        }\n    }\n    return results;\n\
    }\n", "\tlet result = [];\n\tlet count = 0;\n\t\n\tgame = game.slice(0);\n\tguess\
    \ = guess.slice(0);\n\t\n\tgame.sort((a, b) => a - b);\n\tguess.sort((a, b) =>\
    \ a - b);\n\t\n\tgame.forEach(item => {\n\t\tguess.forEach(item => {\n\t\t\tif(item\
    \ !== game.length && item !== guess.length){\n\t\t\t\tcount += Math.abs(item-game.length);\n\
    \t\t\t\tresult.push(Math.abs(item-game.length));\n\t\t\t}\n\t\t});\n\t});\n\t\n\
    \treturn result;\n}\n", "    for(let i=0; i<game.length; i++){\n        guess[i]\
    \ = Math.abs(guess[i] - game[i]);\n    }\n    return guess;\n}", "    let result\
    \ = game.filter(v=>v.score!==0); //return all non-zero scores\n    let score =\
    \ game.map(v=>v.score); //return array of scores [4,4,2,1,0,3]\n    let guess\
    \ = guess.map(v=>-v); //reverse guesses\n    let scoreDiff = score.map((v,i)=>{\n\
    \        let guessedValue = guess[i]; \n        if(guessedValue > 0){\n      \
    \      return Math.abs(v - guessedValue);\n        }\n        return Math.abs(v\
    \ - v);\n    });\n    return scoreDiff.map(v=>v>0?0:v);\n}\n", "    var scores\
    \ = []\n    for(var i = 0; i < game.length; i++){\n        scores[i] = Math.abs(game[i]\
    \ - guess[i])\n    }\n    return scores\n}\n", "    let result = [];\n    game.forEach((score,\
    \ i)=>{\n        if(guess[i]!==score){\n            result.push(Math.abs(guess[i]-score));\n\
    \        }\n    });\n    return result;\n}\n", "    return game.map(function (score)\
    \ {\n        return Math.abs(score - guess)\n    })\n}\n", "    var results =\
    \ [];\n    guess = guess.sort(function(a, b){return a-b});\n    game = game.sort(function(a,\
    \ b){return a-b});\n    var i, ln = guess.length, j, ln2 = game.length;\n    for(i=0;i<ln;i++)\n\
    \    {\n        for(j=0;j<ln2;j++)\n        {\n            if(guess[i]==game[j])\n\
    \                results.push(0);\n            else\n                results.push(Math.abs(guess[i]-game[j]));\n\
    \        }\n    }\n    return results;\n}\n", "\tgame.sort()\n\tguess.sort()\n\
    \tvar len = game.length\n\tvar i = 0\n\tvar correct = 0;\n\tvar delta = 0;\n\t\
    var temp;\n\t\n\twhile(i<len){\n\t\ttemp = game[i];\n\t\tif(temp != guess[i]){\n\
    \t\t\tdelta = temp - guess[i];\n\t\t\tguess[i] = temp;\n\t\t\tcorrect++;\n\t\t\
    }\n\t\ti++;\n\t}\n\t\n\treturn [correct, delta, guess];\n}\n\n", "\tvar scores\
    \ = [];\n\tvar guesses = [];\n\tfor (var i = 0; i < game.length; i++){\n\t\tscores.push(game[i]);\n\
    \t\tguesses.push(guess[i]);\n\t}\n\tvar result = guesses.slice();\n\tfor (var\
    \ i = 0; i < guesses.length; i++){\n\t\tif (guesses[i] == 0){\n\t\t\treturn [scores[i]];\n\
    \t\t}else{\n\t\t\tresult[i] = Math.abs(guesses[i] - scores[i]);\n\t\t}\n\t}\n\t\
    return result;\n}\n", "    var errors = [];\n    for (var i=0; i<game.length;\
    \ i++){\n        error = abs(game[i] - guess[i]);\n        if (error > 0)\n  \
    \          errors.push(i);\n    }\n    return errors;\n}\n", "  return guess.length\
    \ < game.length ? game.slice() : game.slice().map(function(v, i){\n    return\
    \ i < guess.length ? Math.abs(v - guess[i]) : Math.abs(guess[i] - v);\n  });\n\
    }\n", "\tlet diffs = []\n\n\tfor(let i = 0; i < guess.length; i++){\n\t\tlet diff\
    \ = guess[i] - game[i]\n\t\tdiffs.push(Math.abs(diff))\n\t}\n\n\treturn diffs\n\
    }\n\n", "    let result = [];\n    for(let i=0; i<guess.length; i++){\n      \
    \  let diff = guess[i] - game[i];\n        if(diff < 0){\n            diff = -diff;\n\
    \            result.push(diff);\n        }else{\n            result.push(Math.abs(diff));\n\
    \        }\n    }\n    return result;\n}\n", "    let result = [];\n    for(let\
    \ i = 0; i < guess.length; i++){\n        let found = false;\n        let guessValue\
    \ = guess[i];\n        let scoreValue = 0;\n        for(let j = 0; j < game.length;\
    \ j++){\n            if(!found && game[j] === guessValue){\n                scoreValue\
    \ += Math.abs(guessValue - game[j]);\n                found = true;\n        \
    \    }\n        }\n        result.push(scoreValue);\n    }\n    return result;\n\
    }\n\nmodule.exports = compare;\n</code>\n<|/ a tags=javascript |>\n<| c |>\nIt's\
    \ worth noting that this answer only works if the number of matches is the same\
    \ as the number of elements in the scores array. This was my requirement when\
    \ I wrote it (though it didn't specify in OP). If you have two arrays like `[[1,\
    \ 2], [3], [4, 5]]` but one of the arrays has more elements than the other, the\
    \ function will return a wrong result.\n<|/ c |>\n<| a tags=javascript |>\nThis\
    \ code works for me\n<code>", "    let scores = [...game].sort((a, b) => b-a);\
    \ \n    let guessScores = [...guess].sort((a, b) => b-a); \n    let diffs = [...guesses].map(guess\
    \ => Math.abs(guess-scores[guess]));\n    return diffs;\n}\n", "    const guesses\
    \ = guess.map((val, i) => val === 0 ? game[i] : Math.abs(val - game[i]));\n  \
    \  return guesses;\n}\n", "    var result = [];\n    var score = 0;\n    for (var\
    \ i = 0; i < guess.length; i++)\n        score += game[i] * guess[i];\n    \n\
    \    if (score === 0){\n        // score is 0 if the guess matches the game \n\
    \        for (var i = 0; i < game.length; i++)\n            result.push(0);\n\
    \    }\n    else {\n        for (var i = 0; i < guess.length; i++)\n         \
    \   result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}\n",
  "  const scoreDiffs = game.map((score, index) => guess[index] == score ? 0 : (Math.abs(score\
    \ - guess[index])))\n  return scoreDiffs\n}\n", "  // Your code here\n  const\
    \ result = [];\n  game.forEach((element, index, array) => {\n    if (index ===\
    \ guess.length){\n      result.push(0);\n      return;\n    }\n    if (element\
    \ !== guess[index]){\n      result.push(Math.abs(element - guess[index]));\n \
    \   }else{\n      result.push(0);\n    }\n  })\n  return result;\n}\n\nmodule.exports\
    \ = {compare};\n\n},{}],24:[function(require,module,exports){", "  var i = 0;\n\
    \  var differences = [];\n  while (i < guess.length && i < game.length){\n   \
    \ var result = Math.abs(guess[i] - game[i]);\n    differences.push(result);\n\
    \    i++;\n  }\n  differences.forEach(function(difference){\n    if(difference\
    \ != 0){\n      console.log(\"difference \" + difference + \" at index \" + i);\n\
    \    }\n  });\n}\n</code>\n<|/ a tags=arrays,comparison,javascript dscore=1 |>\n\
    <| a tags=arrays,comparison,javascript |>\n<code>", "  var scores = [];\n  for(var\
    \ i=0; i<guess.length; i++){\n    scores.push(Math.abs(guess[i]-game[i]));\n \
    \ }\n  return scores;\n}\n<|/ file source=github ext=.js filename=solution.js\
    \ |>\n<| a dscore=0 |>\nA different approach would be to compare every possible\
    \ guess and then see which of those have the lowest differences. \nSo if we have\
    \ a guess of [1,2,3,4] and our score is [3,2,4,1] the score would be [1,2,2,1]\
    \ where every element has different distance from the guess. \n<code>", "    var\
    \ result = [];\n    for(var i = 0, len = guess.length; i < len; i++){\n      \
    \  result.push(Math.abs(guess[i] - game[i]));\n    }\n    return result;\n}\n",
  "    let result = [];\n    for(let i = 0; i<guess.length; i++){\n        let difference\
    \ = Math.abs(guess[i] - game[i]);\n        if(game[i] == guess[i]) result.push(i);\n\
    \        if(game[i] != guess[i]) result.push(difference);\n    }\n    return result;\n\
    }\n", "\tvar scoreDiff = game.map(function(val, index){\n\t\tvar guessedVal =\
    \ guess[index];\n\t\tif(val !== 0 && guessedVal !== 0){\n\t\t\treturn (Math.abs(val\
    \ - guessedVal));\n\t\t}\n\t\treturn 0;\n\t});\n\treturn scoreDiff;\n}\n", " \
    \ let result = [...game,...guess].reduce((acc, cur, idx) => {\n    if (Math.abs(cur\
    \ - acc) > Math.abs(cur - guess[idx])) {\n      acc = cur\n    }\n    return acc\n\
    \  }, game[0])\n  return result.map((cur, idx) => cur == guess[idx] ? 0 : (Math.abs(cur\
    \ - guess[idx])))\n}\n", "    const result = [];\n    game.forEach((score, index)\
    \ => {\n        if (score === guess[index]){\n            result.push(0);\n  \
    \      }\n        else{\n            result.push(Math.abs(guess[index] - score));\n\
    \        }\n    });\n    return result;\n}\n", "  var results = [];\n  for(var\
    \ i = 0; i<guess.length;i++){\n    if(guess[i] == game[i]){\n      results.push(0);\n\
    \    }else{\n      results.push(Math.abs(guess[i]-game[i]));\n    }\n  }\n  return\
    \ results;\n}\n", "    let ret = [];\n    \n    for(let i = 0; i < game.length;\
    \ i++){\n        ret[i] = 0;\n    }\n    \n    let gameCounter = 0;\n    let guessCounter\
    \ = 0;\n    let gameMax = game[game.length-1];\n    \n    for(let i = 0; i < guess.length;\
    \ i++){\n        ret[i] = Math.abs(guess[i] - game[gameCounter]);\n        gameCounter++;\n\
    \        if(game[gameCounter] === gameMax){\n            gameCounter = 0;\n  \
    \      }\n    }\n    \n    for(let i = 0; i < guess.length; i++){\n        if(ret[i]\
    \ === 0){\n            ret[i] = Math.abs(guess[i] - game[guessCounter]);\n   \
    \         guessCounter++;\n            if(game[guessCounter] === gameMax){\n \
    \               guessCounter = 0;\n            }\n        }\n    }\n    \n   \
    \ for(let i = 0; i < guess.length; i++){\n        if(ret[i] !== 0){\n        \
    \    ret[i] = Math.abs(guess[i] - game[guessCounter]);\n            guessCounter++;\n\
    \            if(game[guessCounter] === gameMax){\n                guessCounter\
    \ = 0;\n            }\n        }\n    }\n    \n    for(let i = 0; i < guess.length;\
    \ i++){\n        if(ret[i] !== 0 && guessCounter !== gameCounter){\n         \
    \   ret[i] = Math.abs(guess[i] - game[guessCounter]);\n            guessCounter++;\n\
    \            if(game[guessCounter] === gameMax){\n                guessCounter\
    \ = 0;\n            }\n        }\n    }\n    \n    for(let i = 0; i < guess.length;\
    \ i++){\n        if(ret[i] !== 0 && guessCounter !== gameCounter){\n         \
    \   ret[i] = Math.abs(guess[i] - game[guessCounter]);\n            guessCounter++;\n\
    \            if(game[guessCounter] === gameMax){\n                guessCounter\
    \ = 0;\n            }\n        }\n    }\n    \n    for(let i = 0; i < guess.length;\
    \ i++){\n        if(ret[i] !== 0 && guessCounter !== gameCounter){\n         \
    \   ret[i] = Math.abs(guess[i] - game[guessCounter]);\n            guessCounter++;\n\
    \            if(game[guessCounter] === gameMax){\n                guessCounter\
    \ = 0;\n            }\n        }\n    }\n    \n    for(let i = 0; i < guess.length;\
    \ i++){\n        if(ret[i] !== 0 && guessCounter !== gameCounter){\n         \
    \   ret[i] = Math.abs(guess[i] - game[guessCounter]);\n            guessCounter++;\n\
    \            if(game[guessCounter] === gameMax){\n                guessCounter\
    \ = 0;\n            }\n        }\n    }\n    \n    for(let i = 0; i < guess.length;\
    \ i++){\n        if(ret[i] !== 0 && guessCounter !== gameCounter){\n         \
    \   ret[i] = Math.abs(guess[i] - game[guessCounter]);\n            guessCounter++;\n\
    \            if(game[guessCounter] === gameMax){\n                guessCounter\
    \ = 0;\n            }\n        }\n    }", "  let results = []\n  for (let i =\
    \ 0; i < guess.length; i++){\n    let diff = Math.abs(guess[i] - game[i])\n  \
    \  if (game[i] === guess[i]){\n      results.push(0)\n    } else {\n      results.push(diff)\n\
    \    }\n  }\n  return results\n}\n", "    let scores = [];\n    \n    // Compare\
    \ each score with the guess array\n    game.forEach((value, index) => {\n    \
    \    if (guess[index] != value){\n            scores.push((value - guess[index]));\
    \ // Push difference between current score and correct guess\n        } else {\n\
    \            scores.push(value); // if all scores are the same then the guessed\
    \ is correct\n        }\n    });\n    \n    return scores;\n}\n\nlet game = [1,\
    \ 3, 5, 6, 2, 4, 6, 7, 8, 4];\nlet guess = [6, 4, 2, 2, 5, 7, 3, 1, 5, 6];", " \
    \ if(game.length != guess.length){\n    throw 'The two arrays have unequal lengths.'\n\
    \  }\n  var gameScores = game.map(function(score){\n    return Math.abs(score\
    \ - guess)\n  })\n  var result = [];\n  for(var i = 0; i<game.length; i++){\n\
    \    if(gameScores[i] == 0){\n      result.push(i)\n    } else {\n      result.push(Math.abs(gameScores[i]\
    \ - guess[i]))\n    }\n  }\n  return result\n}\n", "    var result = [];\n   \
    \ game.forEach(function(score,index){\n        var guess = guess[index];\n   \
    \     if(guess!=score){\n            guess=Math.abs(guess-score);\n          \
    \  result.push(guess);\n        }\n    });\n    return result;\n}\n", "    var\
    \ i, len = game.length, len = guess.length, score = 0, diff, correctGuesses =\
    \ [],\n        absoluteDiff = guess.length < len ? guess.length : len;\n    if\
    \ (absoluteDiff === 0) {\n        return guess;\n    }\n    for (i = 0; i < len;\
    \ i++) {\n        if (guess[i] !== game[i]) {\n            diff = guess[i] - game[i];\n\
    \            score += diff;\n            score > 0 ? score = 0 : score = Math.abs(diff);\n\
    \            correctGuesses.push(score);\n        }\n    }\n    return correctGuesses;\n\
    }\n", "    let a = []\n    let b = []\n    game.forEach((score,i) => {\n     \
    \   if(guess[i] == score){\n            a.push(0);\n        } else {\n       \
    \     a.push(Math.abs(guess[i]-score))\n        }\n    })\n    guess.forEach((guess,\
    \ i) => {\n        if(game[i]==guess){\n            b.push(0);\n        } else\
    \ {\n            b.push(Math.abs(guess - game[i]))\n        }\n    })\n    return\
    \ a\n}\nmodule.exports = {\n    compare\n}\n</code>\n<|/ a tags=compare,javascript,arrays\
    \ |>\n<| a tags=compare,javascript,arrays dscore=0 |>\n<code>\nconst compare =\
    \ (game, guess) => game.map((score, i) => i ? Math.abs(guess - score) : 0);\n",
  "    var result = [];\n    for(var i=0; i<guess.length; i++){\n        if(guess[i]\
    \ == game[i]){\n            result.push(i);\n        }\n    }\n    var difference\
    \ = 0;\n    for(var i=0; i<guess.length; i++){\n        difference += Math.abs(guess[i]\
    \ - game[i]);\n    }\n    if(difference){\n        return result;\n    }\n}\n",
  "    let result = [];\n    let bestScore = 0;\n    let bestGuesses = [];\n    game.forEach(function(score,\
    \ index){\n        let scoreDiff = Math.abs(guess[index] - score);\n        if(scoreDiff\
    \ > bestScore){\n            bestScore = scoreDiff;\n            bestGuesses =\
    \ index;\n        }\n    });\n    // console.log(bestGuesses);\n    for(let i\
    \ = 0; i < guess.length; i++){\n        let index = 0;\n        let scoreDiff\
    \ = Math.abs(guess[i] - game[index]);\n        while(index < bestGuesses.length\
    \ && scoreDiff > bestScore){\n            bestScore = scoreDiff;\n           \
    \ bestGuesses = bestGuesses.slice(0);\n            bestGuesses.push(index);\n\
    \            index = bestGuesses.shift();\n            scoreDiff = Math.abs(guess[i]\
    \ - game[index]);\n        }\n        result.push(bestScore);\n    }\n    return\
    \ result.map(function(item){\n        return Math.abs(item);\n    });\n}\n\nlet\
    \ game = [4, -1, 8, 3, 1, 2, 3, -1, 4, 5, 7, 6];", "\tvar scores = [];\n\tvar\
    \ count = 0;\n\tgame.forEach(function(item, index){\n\t\tif (item != guess[index]){\n\
    \t\t\tcount++;\n\t\t}\n\t})\n\tif (count == 0){\n\t\treturn [];\n\t}\n\tfor (var\
    \ i = 0; i < guess.length; i++){\n\t\tscores.push(Math.abs(guess[i] - game[i]));\n\
    \t}\n\treturn scores;\n}", "\tvar diff = [];\n\tfor(var i = 0; i < guess.length;\
    \ i++){\n\t\tvar temp;\n\t\tif(game[i] !== guess[i]){\n\t\t\ttemp = Math.abs(game[i]\
    \ - guess[i]);\n\t\t\tdiff.push(temp);\n\t\t}else{\n\t\t\tdiff.push(0);\n\t\t\
    }\n\t}\n\treturn diff;\n}\n", "    var ret = [];\n    game.forEach(function(e,i,a){\n\
    \        var min = Math.min(e.score, guess[i]);\n        ret[i] = Math.abs(e.score\
    \ - guess[i]);\n    });\n    return ret;\n}", "  var result = [];\n  var correct\
    \ = 0;\n  for (var i = 0; i < game.length; i++){\n    if (game[i] == guess[i])\
    \ {\n      correct++;\n    } else {\n      result[i] = Math.abs(game[i] - guess[i]);\n\
    \    }\n  }\n  if (correct == game.length){\n    result = [];\n  }\n  return result;\n\
    }\n", "  var results = [];\n  for (var i = 0; i < guess.length; i++){\n    var\
    \ score = game[i];\n    var guess = guess[i];\n    if (score == 0){\n      results[i]\
    \ = 0;\n    } else if (Math.abs(score - guess) == 0){\n      results[i] = 0;\n\
    \    } else {\n      results[i] = Math.abs(score - guess);\n    }\n  }\n  return\
    \ results;\n}\n", "    var result = [];\n    for(var i in game){\n        if((guess[i]\
    \ < game[i]) || (game[i] == guess[i])){\n            result[i] = 0;\n        }else{\n\
    \            result[i] = Math.abs(guess[i]-game[i]);\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=compare,algorithm,javascript |>\n<| c |>\nThanks\
    \ mate, its working as I wanted! :)\n<|/ c |>\n<| a tags=compare,algorithm,javascript\
    \ |>\nThe other answers are all correct but they all require you to iterate over\
    \ the array to do the comparison.  It will get much easier if you change the way\
    \ you compare the guess and scores to not require the iteration.\nYou know that\
    \ if the score is < the guess, then the score is correct, so you only need to\
    \ compare with the right side of the array.  If the guess is < the score, then\
    \ the guess is wrong.  If the guess is > the score, then the guess is correct.\n\
    If the guess is correct and the score is correct, then the score is right so you\
    \ don't need to do any comparison at all.  If the guess is wrong but the score\
    \ is right, then the guess is correct so the score is wrong.\nIf the guess is\
    \ correct and the score is wrong, then the guess is wrong and you only need to\
    \ check the right side of the array.\nIn pseudo-code:\n<code>", "  \n  // Set\
    \ up guesses\n  var score = [];\n  guess = guess.sort((a,b)=>a-b);\n  \n  // Iterate\
    \ through each value in game\n  for (var i = 0; i < game.length; i++) {\n    \n\
    \    // If the score is 0, increment the counter and remember it\n    if (score[i]\
    \ === 0 && game[i] === guess[i]) {\n      score[i] = 1;\n    } else {\n      score[i]\
    \ = Math.abs(guess[i] - game[i]);\n    }\n  }\n  \n  // Return array\n  return\
    \ score;\n}\n", "  var score = game.slice();\n  var guess = guess.slice();\n \
    \ var guessesTaken = guess.length;\n  var scoreTaken = score.length;\n  var diff\
    \ = new Array(guessesTaken).fill(0);\n  \n  //start by assuming the game is correct\n\
    \  for (var i = 0; i < guessesTaken; i++){\n    if (score[i] === guess[i]){\n\
    \      diff[i] = 0;\n    }else{\n      diff[i] = Math.abs(score[i] - guess[i]);\n\
    \    }\n  }\n  \n  \n  for (var i = 0; i < guessesTaken; i++){\n    if (score[i]\
    \ === guess[i]){\n      diff[i] = 0;\n    }else{\n      diff[i] = Math.abs(score[i]\
    \ - guess[i]);\n    }\n  }\n\n  //now compare the guesses to the actual scores\n\
    \  for (var i = 0; i < guessesTaken; i++){\n    //if guessed correctly, mark as\
    \ such\n    if (score[i] === guess[i]){\n      diff[i] = 0;\n    }else{\n    \
    \  diff[i] = Math.abs(score[i] - guess[i]);\n    }\n  }\n  \n  return diff;\n}",
  "  var result = [];\n  if(game.length != guess.length){\n      throw \"incompatible\
    \ lengths\";\n  }\n  for(var i = 0; i < game.length; i++){\n      if(game[i] !=\
    \ guess[i]){\n        result.push(Math.abs(game[i] - guess[i]));\n      }\n  }\n\
    \  return result;\n}\n", "  \n  // your code here\n  return game.map((e,i) =>\
    \ {\n    if(e===guess[i]){\n      return 0\n    }else{\n      return Math.abs(e-guess[i])\n\
    \    }\n  })\n  \n}\n", "  let gameScore = 0;\n  let gameScoreCount = 0;\n  let\
    \ guessScoreCount = 0;\n  game.forEach((score, index) => {\n    gameScore += score;\n\
    \    if(index === guess.length){\n      gameScoreCount++;\n      guessScoreCount++;\n\
    \    }\n  });\n  const result = game.map((score, index) => {\n    if(index ===\
    \ guess.length){\n      if(guessScoreCount === gameScoreCount){\n        return\
    \ 0;\n      }else{\n        return Math.abs(score - guess[index]);\n      }\n\
    \    }else{\n      return Math.abs(score - guess[index]);\n    }\n  });\n  return\
    \ result;\n}\n", "    \n    if (game.every((score, i) => guess[i] != score)){\n\
    \        let scoreDiff = game.map((score, i) => (guess[i] != score) ? guess[i]\
    \ - score : 0);\n        let diffs = game.map((score, i) => (guess[i] != score)\
    \ ? Math.abs(guess[i] - score) : 0);\n        return scoreDiff - diffs;\n    }\n\
    \    return 0;\n}\n", "  let result = []\n\n  for (let i = 0; i < guess.length;\
    \ i++){\n    if(game[i] !== guess[i]) {\n      result.push(Math.abs(guess[i] -\
    \ game[i]))\n    } else {\n      result.push(0)\n    }\n  }\n  return result\n\
    }\n", "    let returnArray = [];\n    for(let i = 0; i < guess.length; i++){\n\
    \        returnArray.push(guess[i] - game[i]);\n    }\n    return returnArray;\n\
    }\n", "\tvar results = [];\n\tfor(var i = 0; i<guess.length;i++){\n\t\tvar j =\
    \ 0;\n\t\twhile(j<game.length && game[j] === guess[i]){\n\t\t\tj++;\n\t\t}\n\t\
    \tresults.push(Math.abs(game[j]-guess[i]));\n\t}\n\treturn results;\n}\n", " \
    \  var result = [];\n   for (var i = 0; i < game.length; i++){\n       var results\
    \ = [];\n       for (var j = 0; j < guess.length; j++){\n         if (game[i]\
    \ === guess[j]){\n           results.push(0);\n         } else if (Math.abs(game[i]\
    \ - guess[j]) === game[i]){\n           results.push(game[i] - guess[j]);\n  \
    \       } else {\n           results.push(Math.abs(game[i] - guess[j]));\n   \
    \      }\n       }\n       result.push(results);\n   }\n   return result;\n}\n\
    </code>\n<|/ a tags=compare,javascript,for-loop,arrays |>\n<| c |>\nWhile this\
    \ may be the most thorough answer, it is worth noting that this is not a correct\
    \ solution to the problem (as stated in the comments).\n<|/ c |>\n<| c |>\nHi\
    \ thanks for your answer.I didn't understand how the for loop is working in my\
    \ code. what i understood is that the function compare is called by the user and\
    \ that array is compared to the guess array. I just don't get why we do result.push(results).\
    \ thank you for your help.\n<|/ c |>\n<| a |>\nI wrote this code in python. I\
    \ think the logic is very easy to understand.\n<code>\ndef check(data, guessed):\n\
    \    matched = []\n    match = 0\n    for i in data:\n        if guessed in i:\n\
    \            matched.append(i)\n            match += 1\n    return matched, match\n\
    </code>\nThe above function returns an array of the guessed items and the amount\
    \ of times it was guessed.\n<code>\ndef compare(data, guess):\n    data = sorted(data)\n\
    \    guessed = sorted(guess)\n    matched, match = check(data, guessed)\n    return\
    \ match, matched\n</code>\nThe above function returns two arrays (matched items\
    \ and matched times) if the guess was correct.\nThe below function checks if the\
    \ guess is correct or not, else the matched items are returned\n<code>\ndef check(data,\
    \ guessed):\n    matched = []\n    match = 0\n    for i in data:\n        if guessed\
    \ in i:\n            matched.append(i)\n            match += 1\n    return matched,\
    \ match\n</code>\n<|/ a dscore=0 tags=compare,javascript,for-loop,arrays |>\n\
    <| a tags=compare,javascript,for-loop,arrays |>\nHere is my solution which works\
    \ perfectly:\n<code>", "\tif(!game || !guess.length){\n\t\treturn [];\n\t}\n\t\
    var scores = [];\n\tvar maxScore = -Infinity;\n\tfor(var i=0;i<guess.length;i++){\n\
    \t\tscores.push(Math.abs(game[i]-guess[i]));\n\t\tif(maxScore<scores[i]){\n\t\t\
    \tmaxScore = scores[i];\n\t\t}\n\t}\n\treturn scores;\n}\n\nvar compareTests =\
    \ [\n\t{\n\t\tname: \"compare\",\n\t\tscore: 3,\n\t\tguesses: [\n\t\t\t[\n\t\t\
    \t\t1,\n\t\t\t\t2,\n\t\t\t\t3,\n\t\t\t\t4,\n\t\t\t\t5,\n\t\t\t\t1\n\t\t\t],\n\t\
    \t\t[\n\t\t\t\t2,\n\t\t\t\t1,\n\t\t\t\t3,\n\t\t\t\t4,\n\t\t\t\t2,\n\t\t\t\t-1\n\
    \t\t\t]\n\t\t]\n\t}\n];\n", "  \n  var guesses = guess.map(function(score){return\
    \ parseInt(score, 10);});\n  var gameScores = game.map(function(score){return\
    \ parseInt(score, 10);});\n  var sumGuesses = guesses.reduce(function(previous,\
    \ current){return previous+current;});\n  var diffs = guesses.map(function(guess,\
    \ index){return Math.abs(guesses[index] - gameScores[index]);});\n  var gameScoreSum\
    \ = gameScores.reduce(function(previous, current){return previous+current;});\n\
    \  var gameSum = gameScoreSum - sumGuesses;\n  var guesseCount = guesses.length;\n\
    \  var gameCount = gameScores.length;\n  var scoreArray = [];\n  \n  var maxDiff\
    \ = 0;\n  \n  for(var i = 0; i<gameCount; i++){\n    var gameDiff = gameScores[i]\
    \ - guesses[i];\n    maxDiff = Math.max(gameDiff, maxDiff);\n  }\n  \n  var maxScore\
    \ = Math.max(gameScoreSum, sumGuesses);\n  \n  for(var i = 0; i<gameCount; i++){\n\
    \    var gameDiff = gameScores[i] - guesses[i];\n    var score = maxScore - Math.abs(maxDiff\
    \ - gameDiff);\n    if(score < 0){\n      score = 0;\n    }\n    scoreArray.push(score);\n\
    \  }\n  \n  return scoreArray;\n}", "    let gameCopy = [...game]\n    let guessCopy\
    \ = [...guess]\n    let result = []\n    for(let i = 0; i < guessCopy.length;\
    \ i++){\n        if(gameCopy[i] == guessCopy[i]){\n            result.push(0)\n\
    \        } else {\n            result.push(Math.abs(gameCopy[i] - guessCopy[i]))\n\
    \        }\n    }\n    return result\n}", "  var out = [];\n  var score = 0;\n\
    \  for (var i = 0; i < game.length; i++){\n    score += Math.abs(game[i] - guess[i]);\n\
    \  }\n  for (var i = 0; i < guess.length; i++){\n    score += Math.abs(guess[i]\
    \ - game[i]);\n  }\n  for (var i = 0; i < game.length; i++){\n    out.push(score);\n\
    \  }\n  return out;\n}\n", "    guess = guess.sort(function(a, b) {\n        return\
    \ b - a;\n    });\n    var diff = [];\n    var score = 0;\n    for(var i = 0;\
    \ i < guess.length; i++){\n        score += game[i] / guess.length;\n        if(guess[i]\
    \ != game[i]){\n            diff.push(Math.abs(score-guess[i]));\n           \
    \ score = 0;\n        }\n    }\n    return diff;\n}\n</code>\n<|/ a tags=javascript,performance,algorithm\
    \ dscore=0 |>\n<| c |>\nThis is not correct. Try to compare `[4, 1, 1, 0, 0, -2]`\
    \ and `[0, 5, 0, 0, 0, 4]`.\n<|/ c |>\n<| c |>\nI didn't downvote, but I assume\
    \ you meant `[4, 1, 1, 0, 0, 2]`. The correct answer should be `[4, 4, 1, 0, 0,\
    \ 6]`.\n<|/ c |>\n<| c |>\nThanks. I have rewritten my code and it runs in O(n).\
    \ Still it is O(n^2)\n<|/ c |>\n<| c |>\n, I have updated my code. The code runs\
    \ in O(n) now.\n<|/ c |>\n<| c |>\nYour code doesn't work. Try with your new examples,\
    \ and compare the results to mine.\n<|/ c |>\n<| a tags=javascript,performance,algorithm\
    \ |>\nThis is basically a variation of the Knuth-Morris-Pratt algorithm. The idea\
    \ is to start from the beginning of the array, find the smallest element in the\
    \ left subarray, and move it to the right subarray. Repeat, until all the elements\
    \ are moved. This means you only need to iterate over the array once. \nThe only\
    \ problem with this approach is that it makes some assumptions about the length\
    \ of the array. \n\nThe smallest number in the left subarray is always in the\
    \ first index (since you just started the iteration). The same goes for the smallest\
    \ number in the right subarray. \nThe largest number in the left subarray is always\
    \ in the last index (since you just finished the iteration). The same goes for\
    \ the largest number in the right subarray.\nThe sum of all elements in both subarrays\
    \ must add up to 1. \n\nHere's some Javascript code:\n<code>", "    var result\
    \ = new Array(game.length),\n    lenght = game.length,\n    gameLength,\n    diff\
    \ = 0,\n    i,\n    diffIndex;\n    \n    for (i=0;i<lenght;i++){\n        gameLength\
    \ = game[i];\n        diff = gameLength - guess[i];\n        diffIndex = i + diff;\n\
    \        \n        if (diff < 0){\n            result[i] = diffIndex - game.length;\n\
    \        } else {\n            result[i] = 0;\n        }\n    }\n    return result;\n\
    }\n \n ", "\tvar result = new Array(guess.length);\n\tfor (var i = 0; i < guess.length;\
    \ i++){\n\t\tresult[i] = Math.abs(guess - game[i]);\n\t}\n\treturn result;\n}\n",
  "    if(!guess){\n        return [0, 0, 0, 0, 0, 0];\n    }\n    var correct = 0;\n\
    \    var guessed = new Array(guess.length);\n    for(var i = 0; i < guess.length;\
    \ i++){\n        guessed[i] = 0;\n    }\n    for(var i = 0; i < game.length; i++){\n\
    \        if(guess[game[i]] > -1){\n            guessed[guess[game[i]]]++;\n  \
    \      }\n        if(guess[game[i]] <= -1){\n            guessed[game[i]]--;\n\
    \        }\n        if(guessed[guess[game[i]]] === 0){\n            correct++;\n\
    \        }\n    }\n    var results = [];\n    for(var i = 1; i < guess.length;\
    \ i++){\n        results.push(Math.abs(guessed[i] - guessed[i - 1]));\n    }\n\
    \    return results;\n}\n", "  return game.map(\n    game => guess.includes(game)\
    \ ? 0 : Math.abs(game - guess[game])\n  )\n}\n", "\tlet score = 0;\n\tlet guesses\
    \ = 0;\n\tlet guessed = 0;\n\tlet correct = true;\n\tfor (let i = 0; i < game.length;\
    \ i++){\n\t\tif(game[i] == guess[i]){\n\t\t\tscore++;\n\t\t\tguesses++;\n\t\t\t\
    if(guess == game){\n\t\t\t\tguessed++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(Math.abs(guess-game[i])>0){\n\
    \t\t\t\t\tscore = score-Math.abs(guess-game[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    \telse{\n\t\t\tguesses++;\n\t\t\tif(guess == game){\n\t\t\t\tguessed++;\n\t\t\t\
    }\n\t\t\telse{\n\t\t\t\tif(Math.abs(guess-game[i])>0){\n\t\t\t\t\tscore= score-Math.abs(guess-game[i]);\n\
    \t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tcorrect = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(correct){\n\t\treturn [score, guessed];\n\t}\n\telse{\n\t\treturn\
    \ [Math.abs(guess-game), guesses];\n\t}\n}", "    if (guess !== [] && guess.length\
    \ !== game.length){\n        throw new RangeError(\"The guesses and game arrays\
    \ must have equal lengths\");\n    }\n    return game.map(function(el, i){\n \
    \       let sum = 0;\n        for (let j=0; j<guess.length; j++){\n          \
    \  sum += Math.abs(game[i] - guess[j]);\n        }\n        return sum;\n    });\n\
    }\n", "    var result = [];\n    game.forEach(function(val, i){\n        if(val\
    \ === guess[i]){\n            result.push(0);\n        } else {\n            result.push((Math.abs(val\
    \ - guess[i])));\n        }\n    });\n    return result;\n}\n", "    \n    const\
    \ score0 = game.slice();\n    const score1 = guess.slice();\n    \n    let error\
    \ = 0;\n    \n    for(let i = 0; i < score0.length; i++){\n        const score\
    \ = Math.abs(score0[i] - score1[i]);\n        if(score > 0){\n            score1[i]\
    \ = score;\n            error += score;\n        }else{\n            score0[i]\
    \ = score;\n        }\n    }\n    \n    return error\n}\n", "    var a = 0;\n\
    \    var b = 0;\n    for (var i = 0; i <= guess.length; i++){\n        if(guess[i]\
    \ != game[i]){\n            a++;\n        }\n    }\n    for (var i = 0; i <= guess.length;\
    \ i++){\n        if(guess[i] == game[i]){\n            b++;\n        }\n    }\n\
    \    return Math.abs(a-b);\n}\n</cell>\n<cell>\n# Run this cell, then hit the\
    \ 'Submit Assignment' button above.\n# Once that is complete, please run the two\
    \ cells below that contain the function definitions.\nfrom submit import submit_assigment\n\
    submit_assigment(10, 15)\n</cell>\n<text>\nStep 2\nYou are playing the following\
    \ matches:\n\nMen 1 vs. Men 2 \nMen 2 vs. Women 1 \nWomen 2 vs. Women 1 \nWomen\
    \ 1 vs. Women 2 \nMen 2 vs. Women 1 \nWomen 2 vs. Women 1 \nMen 1 vs. Women 2\
    \ \n\nMen 1 guesses first. How many of the following are correct matches?\n\n\
    Correct matches: Men 1 vs. Men 2\nCorrect matches: Women 1 vs. Women 2\nCorrect\
    \ matches: Women 2 vs. Women 1\n\nHint: Think about how you could use your existing\
    \ compare() function to count incorrect matches.\n\n\n</text>\n<cell>\ndef match_guesses(game,\
    \ guesses):\n    '''\n    Input:\n        game: matches played between two players\
    \ (strings of 'G' and 'F')\n        guesses: a list of possible matches (strings\
    \ of 'G' and 'F')\n    Output:\n        a list of how many guesses need to be\
    \ made, as described above\n    '''\n    \n    \n    return []\n</cell>\n<cell>\n\
    # Run this cell to check your answer!\n\nfrom submit import submit_match_guesses\n\
    submit_match_guesses(match_guesses, ['MF', 'FR'])\n</cell>\n<text>\nStep 3\nYou\
    \ are playing the following matches:\n\nMen 1 vs. Men 2 \nMen 2 vs. Women 1 \n\
    Women 2 vs. Women 1 \nWomen 1 vs. Women 2 \nMen 2 vs. Women 1 \nWomen 2 vs. Women\
    \ 1 \nMen 1 vs. Women 2 \n\nWomen 1 guesses first. How many of the following are\
    \ correct matches?\n\nCorrect matche", "    let score = 0;\n    let difference\
    \ = 0;\n    let gameScore = 0;\n    let guessScore = 0;\n    for (let i=0; i<guess.length;\
    \ i++){\n        if (game[i] == guess[i]){\n            gameScore += 1;\n    \
    \    } else {\n            guessScore += Math.abs(game[i] - guess[i]);\n     \
    \   }\n    }\n    guessScore = Math.abs(guessScore);\n    for (let i=0; i<guess.length;\
    \ i++){\n        if (game[i] == guess[i]){\n            score += 1;\n        }\
    \ else {\n            difference += Math.abs(game[i] - guess[i]);\n        }\n\
    \    }\n    difference = Math.abs(difference);\n    return [score, difference,\
    \ gameScore, guessScore];\n}", "  let [sLen, gLen] = [game.len(), guess.len()].sort((a,\
    \ b) => a - b),\n      off = new Array(sLen),\n      scores = [...game, ...guess],\n\
    \      i, j, s, g;\n  \n  off.fill(0);\n  \n  for(i = 0; i < sLen; i++){\n   \
    \ s = scores[i];\n    \n    // If the guess is the same as the game value, we\
    \ get no point making any guesses\n    if(s === g) continue;\n    \n    for(j\
    \ = 0; j < gLen; j++){\n      g = guess[j];\n      // If the guess and game value\
    \ are the same, we get a full guess\n      if(s !== g) break;\n      \n      //\
    \ We have a match! We can either increase the offensiveness of the guess, or add\
    \ it to the\n      // offensiveness of the score. This is done by taking the difference\
    \ between the guess and the game\n      // and adding it to one of the offensivenesses\
    \ of the scores.\n      off[i] += Math.abs(g - s);\n      \n      // Once we've\
    \ checked the entire game and guesses we can break to stop looping\n      if(j\
    \ !== gLen) break;\n    }\n  }\n  \n  return off.map(v => v === 0 ? 0 : v);\n\
    }\n", "    const n = guess.length;\n    let correct = 0;\n    for (let i = 0;\
    \ i < n; i++){\n        if (game[i] === guess[i])\n            correct++;\n  \
    \      else\n            correct += Math.abs(game[i] - guess[i]);\n    }\n   \
    \ return Array.from(Array(correct).keys());\n}\n", "    let results = []\n   \
    \ for(let i = 0; i < guess.length; i++){\n        results.push(Math.abs(guess[i]\
    \ - game[i]))\n    }\n    return results\n}\n", "    //Your code here\n}\n</cell>\n\
    <cell>", "    var result = [];\n    for (var i=0; i<guess.length; i++){\n    \
    \    var x = Math.abs(game[i] - guess[i]);\n        if (game[i]!=guess[i]){\n\
    \            result.push(x);\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=algorithm,java |>\nHere is what i was trying earlier\
    \ but i got stuck in some cases.\n<code>\nimport java.util.*;\npublic class Main\n\
    {\n    static int[] score = new int[100];\n    static int totalScore = 0;\n\n\
    \    public static void main(String[] args)\n    {\n        Scanner scan = new\
    \ Scanner(System.in);\n\n        for(int i = 0;i<100;i++)\n        {\n       \
    \     int scoreInput;\n            scoreInput = scan.nextInt();\n            score[i]\
    \ = scoreInput;\n        }\n\n        List<Integer> inputs = new ArrayList<Integer>();\n\
    \        for(int i = 0; i<score.length; i++)\n        {\n            int input\
    \ = scan.nextInt();\n            inputs.add(input);\n        }\n\n        for(int\
    \ i = 0; i<inputs.size(); i++)\n        {\n            int input = inputs.get(i);\n\
    \            int maxScore = -1;\n            int maxIndex = -1;\n\n          \
    \  for(int j = 0; j<score.length; j++)\n            {\n                int score\
    \ = score[j];\n                if(score == input)\n                {\n       \
    \             if(maxScore < score)\n                    {\n                  \
    \      maxScore = score;\n                        maxIndex = j;\n            \
    \        }\n                }\n            }\n\n            totalScore += maxScore;\n\
    \            if(maxIndex != -1)\n            {\n                score[maxIndex]\
    \ = maxScore;\n            }\n        }\n        System.out.println(totalScore);\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThe first thing is that you have\
    \ several bugs in your code.\nThe second bug is the one that makes the output\
    \ wrong. After each time you guess the score is added to the totalScore, which\
    \ means you always guess the same score for the same guess. I suggest that instead\
    \ of adding to the totalScore every time, you remember the best score so far.\n\
    The third bug is the fact that when you have 2 different inputs (guess 1) and\
    \ (guess 2) both are added to the totalScore, but you only compare the first input\
    \ (guess 1) with the 2nd one (guess 2).\nThe fourth bug is that you only compare\
    \ the scores if your guess is correct and not if it's the same score as in the\
    \ last guess (which you already guessed before). To fix this you need to store\
    \ the scores when you guessed and only compare the scores with the scores stored\
    \ in your array once you have already guessed all possible scores (which means\
    \ in your compare(game,guess) method).\nThe fifth bug is ", "    guess = guess.filter(function(guess,\
    \ index, self){\n        return guess.length > 0\n    });\n    var result = [];\n\
    \    game.forEach(function(score){\n        guess.forEach(function(guess){\n \
    \           if(Math.abs(score - guess) < 0){\n                result.push(Math.abs(score\
    \ - guess));\n            }\n        });\n    });\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nthank you for helping me out with this! this helped\
    \ me out alot!\n<|/ c |>\n<| a |>\n<code>", "  if (guess == game){\n    return\
    \ [];\n  }\n  if (game.includes(guess)) {\n    return [game.length - guess.length];\n\
    \  }\n  game = game.slice();\n  guess = guess.slice();\n  game.splice(game.indexOf(guess[0]),\
    \ 1);\n  guess.splice(guess.indexOf(game[0]), 1);\n  return [...compare(game,\
    \ guess), ...compare(guess, game)];\n}\n", "    var scores = [];\n    var wrong\
    \ = [];\n    \n    // Your code here!\n    for (var i=0; i < game.length; i++){\n\
    \        scores[i] = Math.abs(guess[i] - game[i]);\n        if (scores[i] > 0){\n\
    \            wrong.push(scores[i]);\n        }\n    }\n    \n    return wrong;\n\
    }\n", "    if (game.every(x => x === 0)) return game.map(x => Math.abs(x - guess));\n\
    \    var game1 = game.map(x => Math.abs(x - guess[0]));\n    var game2 = game.map(x\
    \ => Math.abs(x - guess[1]));\n    var game3 = game.map(x => Math.abs(x - guess[2]));\n\
    \    var game4 = game.map(x => Math.abs(x - guess[3]));\n    var game5 = game.map(x\
    \ => Math.abs(x - guess[4]));\n    var game6 = game.map(x => Math.abs(x - guess[5]));\n\
    \    var game7 = game.map(x => Math.abs(x - guess[6]));\n    var game8 = game.map(x\
    \ => Math.abs(x - guess[7]));\n    var game9 = game.map(x => Math.abs(x - guess[8]));\n\
    \    var game10 = game.map(x => Math.abs(x - guess[9]));\n    var game11 = game.map(x\
    \ => Math.abs(x - guess[10]));\n    var game12 = game.map(x => Math.abs(x - guess[11]));\n\
    \    var game13 = game.map(x => Math.abs(x - guess[12]));\n    var game14 = game.map(x\
    \ => Math.abs(x - guess[13]));\n    var game15 = game.map(x => Math.abs(x - guess[14]));\n\
    \    var game16 = game.map(x => Math.abs(x - guess[15]));\n    var game17 = game.map(x\
    \ => Math.abs(x - guess[16]));\n    var game18 = game.map(x => Math.abs(x - guess[17]));\n\
    \    var game19 = game.map(x => Math.abs(x - guess[18]));\n    var game20 = game.map(x\
    \ => Math.abs(x - guess[19]));\n    var game21 = game.map(x => Math.abs(x - guess[20]));\n\
    \    var game22 = game.map(x => Math.abs(x - guess[21]));\n    var game23 = game.map(x\
    \ => Math.abs(x - guess[22]));\n    var game24 = game.map(x => Math.abs(x - guess[23]));\n\
    \    var game25 = game.map(x => Math.abs(x - guess[24]));\n    var game26 = game.map(x\
    \ => Math.abs(x - guess[25]));\n    var game27 = game.map(x => Math.abs(x - guess[26]));\n\
    \    var game28 = game.map(x => Math.abs(x - guess[27]));\n    var game29 = game.map(x\
    \ => Math.abs(x - guess[28]));\n    var game30 = game.map(x => Math.abs(x - guess[29]));\n\
    \    var game31 = game.map(x => Math.abs(x - guess[30]));\n    var game32 = game.map(x\
    \ => Math.abs(x - guess[31]));\n    var game33 = game.map(x => Math.abs(x - guess[32]));\n\
    \    var game34 = game.map(x => Math.abs(x - gues", "    var error = [], // An\
    \ empty array to store the difference between a guess and the score\n        score\
    \ = game, // score is the array of scores and guesses of equal length\n      \
    \  guess = guess; // guess is the guess of equal length\n    \n    // Compare\
    \ each value in scores to the corresponding value in guess and store the result\
    \ into error\n    for(var i=0; i < score.length; i++){\n        if(score[i] !=\
    \ guess[i]){\n            error[i] = Math.abs(score[i] - guess[i]);\n        }\n\
    \    }\n    \n    return error;\n}\n", "    let result = [];\n    for (let i =\
    \ 0; i < guess.length; i++){\n        let index = game.length - guess.length +\
    \ i;\n        if (index >= game.length){\n            index = game.length - 1;\n\
    \        }\n        if (index >= guess.length){\n            result.push(Math.abs(game[index]\
    \ - guess[index]));\n        }\n        else if (game[index] === guess[index]){\n\
    \            result.push(0, 0);\n        }\n        else {\n            result.push(Math.abs(game[index]\
    \ - guess[index]));\n        }\n    }\n    return result;\n}\n", "  //create an\
    \ array to store the result\n  var result = [];\n\n  //find where the matches\
    \ in both arrays are found\n  for(var i=0; i<game.length; i++){\n    if(guess[i]===game[i]){\n\
    \      //if the array entry is equal to the game entry, the index is added to\
    \ a variable for later use\n      var index = i;\n      //if the array entry is\
    \ NOT equal to the game entry, the value returned is added to a variable for later\
    \ use\n      var value = guess[i];\n      //the index and value are added to a\
    \ variable for later use\n      result.push(index);\n      result.push(value);\n\
    \    }\n  }\n  //the index value is added to a variable for later use\n  var index\
    \ = result.indexOf(-1);\n\n  //checks if a match was found or not\n  if(index!==-1){\n\
    \    //if the guess was correct and the game was incorrect, the index is added\
    \ to a variable for later use\n    var value = game[index];\n    //the index and\
    \ value are added to a variable for later use\n    result.push(index);\n    result.push(value);\n\
    \  }\n  //the index value is added to a variable for later use\n  var index =\
    \ result.indexOf(-1);\n\n  //checks if a match was found or not\n  if(index!==-1){\n\
    \    //the index value is added to a variable for later use\n    var value = result[index+2];\n\
    \    //the index and value are added to a variable for later use\n    result.push(index);\n\
    \    result.push(value);\n  }\n  //the index value is added to a variable for\
    \ later use\n  var index = result.indexOf(-1);\n\n  //checks if a match was found\
    \ or not\n  if(index!==-1){\n    //the index value is added to a variable for\
    \ later use\n    var value = result[index+3];\n    //the index and value are added\
    \ to a variable for later use\n    result.push(index);\n    result.push(value);\n\
    \  }\n\n  //returns the result\n  return result;\n}\n", "  var correct = 0;\n\
    \  for (var i = 0; i < guess.length; i++){\n    if (guess[i] === game[i]){\n \
    \     correct++;\n    }\n  }\n  \n  return guess.map(function(value){\n    if\
    \ (value === 0){\n      return value;\n    } else {\n      return Math.abs(value\
    \ - game[correct]);\n    }\n  });\n}\nmodule.exports = compare;\n\n},{}],6:[function(require,module,exports){",
  "  var len = game.length,\n      win = len < guess.length ? 0 : len,\n      sum\
    \ = 0,\n      diff = [];\n\n  for(var i=0; i<len; i++){\n    sum += Math.abs(game[i]\
    \ - guess[i]);\n  }\n\n  for(i=0; i<len; i++){\n    diff[i] = Math.abs(game[i]\
    \ - guess[i]) - sum;\n  }\n\n  return diff;\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,javascript,arrays\
    \ dscore=0 |>\nAnother way to solve it would be to start with the longest possible\
    \ answer.  Iterate through each possible guess and keep track of the sum of the\
    \ differences.\nThis would result in the following code:\n<code>", "    var result\
    \ = [];\n    game.forEach(function(x, i){\n        result.push(Math.abs(x - guess[i]));\n\
    \    })\n    return result;\n}\n", "    let guessesArray = game.slice(0); // clone\
    \ the array\n    guess.forEach(g => {\n        guessesArray.splice(g, 1, g);\n\
    \    });\n\n    const result = guessesArray.map((s, i) => Math.abs(s - guess[i]));\n\
    \    let total = 0;\n    for (let i = 0; i < guessesArray.length; i++){\n    \
    \    total += result[i];\n    }\n    return total;\n}\n", "    var result = [];\n\
    \    \n    game.forEach(function(score, idx){\n        if (score>guess[idx]) result.push(Math.abs(score-guess[idx]));\n\
    \        else result.push(0);\n    });\n    return result;\n}\n", "    var result\
    \ = [];\n    \n    var lenghtGame = game.length;\n    var lenghtGuess = guess.length;\n\
    \    \n    // the problem begins here\n    \n    for(var i=0;i<lenghtGame;i++){\n\
    \        result[i] = Math.abs(game[i] - guess[i]);\n    }\n    \n    return result;\n\
    }\n", "    \n    // Return an array of values with the absolute difference between\
    \ guess and score per index\n    let scoreDiffArr = game.map(score => Math.abs(guess[game.length\
    \ - 1 - score] - score))\n    return scoreDiffArr\n}\n", "    return game.map(function(value,index,arr){\n\
    \        return Math.max(Math.abs(guess[index] - value),Math.abs(guess[index]\
    \ - game[index]));\n    });\n}\n", "    \n    let scoreArr = game.slice();\n \
    \   let guessesArr = guess.slice();\n    let results = [];\n\n    for(let i=0;i<scoreArr.length;i++){\n\
    \        let score=scoreArr[i];\n        let guess=guessesArr[i];\n        \n\
    \        if(score==0){\n            results.push(0);\n            continue;\n\
    \        }\n        if(guess!==score){\n            results.push(Math.abs(score-guess));\n\
    \        }\n    }\n    return results.sort((a, b) => b - a)\n}\n", "    // base\
    \ case\n    if (game.length == 0){\n        return [game.length]\n    }\n    //\
    \ recursive case\n    \n    var correct = 0\n    for (var i = 0; i < game.length;\
    \ i++){\n        // if the score is the same as the guess, we have found the correct\
    \ answer\n        if (game[i] == guess[i]){\n            correct++\n        }\
    \ else {\n            // else we check the difference between the guess and the\
    \ score\n            var difference = Math.abs(guess[i] - game[i])\n         \
    \   correct += difference != 0 ? difference : -1\n        }\n    }\n    \n   \
    \ // return an array of the correct number of elements\n    return [correct]\n\
    }\n", "    \n    let arr=game;\n    let arr2=guess;\n    let arr3=[];\n    let\
    \ i=0;\n    let j=0;\n    let numcorrect=0;\n    let numwrong=0;\n    \n    while(i<arr.length\
    \ && j<arr2.length){\n        if(arr[i]==arr2[j]){\n            arr3.push(0)\n\
    \            i++;\n            j++;\n        }else{\n            if(arr[i]>arr2[j]){\n\
    \                arr3.push(Math.abs(arr2[j]-arr[i]))\n                numcorrect++;\n\
    \                i++;\n            }else{\n                arr3.push(Math.abs(arr[i]-arr2[j]))\n\
    \                numwrong++;\n                j++;\n            }\n        }\n\
    \    }\n    \n    if(arr3.length>0){\n        return arr3\n    }else{\n      \
    \  return [numwrong,numcorrect]\n    }\n}\n", "   var score = [];\n   var a =\
    \ [];\n   var b = [];\n   var c;\n   var i;\n\n   for(i = 0; i < game.length;\
    \ i++){\n      score.push(game[i]);\n   }\n\n   for(i = 0; i < guess.length; i++){\n\
    \      a.push(guess[i]);\n   }\n\n   for(i = 0; i < guess.length; i++){\n    \
    \  b.push(score[i]);\n   }\n\n   a = a.sort();\n   b = b.sort();\n\n   for (i\
    \ = 0; i < guess.length; i++){\n      if (a[i] < b[i]){\n         c = a[i];\n\
    \         a[i] = b[i];\n         b[i] = c;\n      }\n   }\n\n   for (i = 0; i\
    \ < guess.length; i++){\n      if (guess[i] != score[i]){\n         c = guess[i]\
    \ - score[i];\n         guess[i] = score[i];\n         score[i] = c;\n      }\n\
    \   }\n\n   return score;\n}\n", "    var arr = [], correct = 0, guesses = guess.length,\
    \ score = game.length, i = 0, j = 0;\n    while(correct < guesses){\n        if(guess[j]\
    \ === game[i]){\n            arr[i] = 0;\n            i++;\n            j++;\n\
    \            correct++;\n        }else{\n            arr[i] = Math.abs(guess[j]\
    \ - game[i]);\n            i++;\n            j++;\n        }\n    }\n    return\
    \ arr;\n}\n", "    var correct, i;\n\n    // Go through each guess\n    for(i=0;\
    \ i<guess.length; i++){\n        correct = guess[i] == game[i];\n\n        //\
    \ Only allow guesses to be as far off as they are right now\n        guess[i]\
    \ -= correct;\n        game[i] -= correct;\n    }\n\n    // Return results\n \
    \   return guess;\n}\n\nvar result = compare([1,2,3,4,5,1], [1,2,3,0,-2,-2]);",
  "  return game.map((x,i) => Math.abs(x-guess[i])).filter(x=>x!==0);\n}\n", "   \
    \ var result = [];\n    \n    for (var i = 0; i < guess.length; i++){\n      \
    \  var diff = guess[i] - game[i];\n        result.push(diff);\n    }\n    return\
    \ result;\n}\n</cell>\n<text>\nChallenge Task - Find the difference of score of\
    \ games where the score is between 20-99\nWrite a function that takes a single\
    \ array containing scores and guesses of a number of matches.\nThe function should\
    \ return the array denoting how far off each guess was. For example, if the first\
    \ guess was 10 and the second was 22, and the first score was 100, and the second\
    \ score was 88, then the array should return [88, 0] because 88 - 100 = 22 - 10\
    \ = 22.\n\n\n</text>\n<cell>", "  var i, j, len = game.length, len = guess.length;\n\
    \  var ret = [], ret0, ret1 = [], ret2 = [], ret3 = [], ret4 = [];\n  ret[0] =\
    \ ret[1] = ret[2] = ret[3] = ret[4] = 0;\n  ret0[0] = 0; ret0[1] = 5; ret0[2]\
    \ = 0; ret0[3] = 0; ret0[4] = 4; ret0[5] = 0;\n  ret1[0] = 4; ret1[1] = 1; ret1[2]\
    \ = 0; ret1[3] = 0; ret1[4] = 0; ret1[5] = 0;\n  ret2[0] = 0; ret2[1] = 0; ret2[2]\
    \ = 5; ret2[3] = 0; ret2[4] = 0; ret2[5] = 4;\n  ret3[0] = 0; ret3[1] = 0; ret3[2]\
    \ = 0; ret3[3] = 4; ret3[4] = 1; ret3[5] = 0;\n  ret4[0] = 0; ret4[1] = 0; ret4[2]\
    \ = 0; ret4[3] = 0; ret4[4] = 0; ret4[5] = 5;\n  if(len === 0 || len === 1){\n\
    \    return ret;\n  }\n  if(game[0] !== guess[0]){\n    ret[0] = Math.abs(game[0]\
    \ - guess[0]);\n  }\n  if(game[len - 1] !== guess[len - 1]){\n    ret[len - 1]\
    \ = Math.abs(game[len - 1] - guess[len - 1]);\n  }\n  if(len > 1){\n    for(i\
    \ = 1; i< len; i++){\n      for(j = i; j< len; j++){\n        if(game[i] === guess[j]){\n\
    \          ret[i] = ret[j];\n          continue;\n        }\n        if(game[j]\
    \ === guess[i]){\n          ret[i] = ret[j];\n          continue;\n        }\n\
    \        if(game[i] > guess[j]){\n          ret1 = ret2 = ret3 = ret4 = -1;\n\
    \          break;\n        }\n        if(game[j] > guess[i]){\n          ret1\
    \ = ret2 = ret3 = ret4 = -1;\n          break;\n        }\n        if(game[i]\
    \ < guess[j]){\n          ret1 = ret2 = ret3 = ret4 = -1;\n          break;\n\
    \        }\n        ret0 = ret1 = ret2 = ret3 = ret4 = 0;\n      }\n      if(ret0\
    \ === -1){\n        ret0 = ret[i] = Math.abs(game[i] - guess[i]);\n      }\n \
    \     if(ret1 === -1){\n        ret1 = ret[i] = Math.abs(game[i] - guess[i]);\n\
    \      }\n      if(ret2 === -1){\n        ret2 = ret[i] = Math.abs(game[i] - guess[i]);\n\
    \      }\n      if(ret3 === -1){\n        ret3 = ret[i] = Math.abs(game[i] - guess[i]);\n\
    \      }\n      if(ret4 === -1){\n        ret4 = ret[i] = Math.abs(game[i] - gues",
  "    // Your code here\n\n    let res = [];\n    game.map((item) => {\n      res.push(Math.abs(item\
    \ - guess));\n    });\n    return res;\n  }\n\n", "    var scores = [];\n    game.length\
    \ = guess.length;\n    guess.length = game.length;\n    game.reduce(function(cur,\
    \ val, i, arr){\n        scores.push((arr[i] - guess[i]) > 0 ? arr[i] - guess[i]\
    \ : Math.abs(arr[i] - guess[i]));\n        return cur;\n    }, 0);\n    return\
    \ scores;\n}\n</code>\n<|/ a |>\n<| c |>\nI didn't think of doing this with reduce.\
    \ I like it. I'll use that in the future, thanks.\n<|/ c |>\n<| a dscore=0 |>\n\
    You could simply iterate over your guess array, check each value against your\
    \ score array (via a nested for loop or a .filter() call), then push the current\
    \ guess into the result array (which starts as empty)\n<code>", "    let result\
    \ = [];\n    for(let i = 0; i < guess.length; i++){\n        let index = game.indexOf(guess[i]);\n\
    \        if(index != -1){\n            result.push(Math.abs(guess[i] - game[index]));\n\
    \        }\n    }\n    return result \n}\n", "    // your code here\n    game\
    \ = game.reduce((acc, curr) => {\n        let index = -1\n        if(curr.indexOf(game[index])!==-1){\n\
    \            acc.count+=1\n            index = acc.index\n        }\n        acc.gameArray.push(curr.indexOf(game[index])!==-1?game[index]:curr)\n\
    \        acc.index+=1\n        return acc\n    }, {gameArray:[], count:0, index:-1}).gameArray\n\
    \    guess = guess.reduce((acc, curr)=>{\n        acc.count+=1\n        acc.gameArray.push(curr.indexOf(game[acc.index])!==-1?game[acc.index]:curr)\n\
    \        acc.index+=1\n        return acc\n    }, {gameArray:[], count:0, index:-1}).gameArray\n\
    \    const gameArray1 = game.slice()\n    const gameArray2 = guess.slice()\n \
    \   const arr1 = gameArray1.slice()\n    const arr2 = gameArray2.slice()\n   \
    \ let differences = []\n    for(let i =0;i<guess.length;i++){\n        if(arr1[i]!==arr2[i]){\n\
    \            differences.push(Math.abs(arr1[i]-arr2[i]))\n        }else{\n   \
    \         differences.push(0)\n        }\n    }\n    return differences\n}\n\n\
    const score1 = [0, 0, 0, 0, 3, 3]\nconst score2 = [0, 5, 0, 0, 0, 4]\nconst guesses\
    \ = [4, 1, 1, 0, 0, -2]\ncompare(score1, guesses)\ncompare(score2, guesses)\n\
    compare(score1, guesses)\ncompare(score2, guesses)\ncompare(score1, guesses)\n\
    compare(score2, guesses)</code>\n<|/ a tags=arrays,javascript |>\n<| c |>\nThank\
    \ you so much for the help! This actually helped a lot as well\n<|/ c |>\n<| a\
    \ tags=arrays,javascript |>\nThis was my solution:\n<code>", "    if (game.length\
    \ != guess.length){\n        return \"incompatible\"; //if game and guess not\
    \ same length\n    }\n    var difference = new Array(guess.length),i=0;\n    var\
    \ gameSum = game.reduce(function(sum, num){\n        return sum + num;\n    },0);\n\
    \    guess = guess.sort(function(a, b){return a-b;}).reverse();\n    for(i=0;i<guess.length;i++){\n\
    \        if (game[i] !== guess[i]){\n            difference[i] = Math.abs(game[i]\
    \ - guess[i]);\n        }\n        else {\n            difference[i] = 0;\n  \
    \      }\n    }\n    var sum=0;\n    for(i=0;i<difference.length;i++){\n     \
    \   sum += difference[i];\n    }\n    return difference;\n}\n\nvar game1 = [\n\
    \    {\n        \"name\": \"Hammer\",\n        \"price\": 2\n    },\n    {\n \
    \       \"name\": \"Nail\",\n        \"price\": 2\n    },\n    {\n        \"name\"\
    : \"Screw\",\n        \"price\": 1\n    },\n    {\n        \"name\": \"Screwdriver\"\
    ,\n        \"price\": 5\n    },\n    {\n        \"name\": \"Finger nail\",\n \
    \       \"price\": 2\n    },\n    {\n        \"name\": \"Nail\",\n        \"price\"\
    : 2\n    },\n    {\n        \"name\": \"Screw\",\n        \"price\": 1\n    },\n\
    \    {\n        \"name\": \"Screwdriver\",\n        \"price\": 5\n    },\n   \
    \ {\n        \"name\": \"Nail\",\n        \"price\": 2\n    },\n    {\n      \
    \  \"name\": \"Screw\",\n        \"price\": 1\n    },\n    {\n        \"name\"\
    : \"Screwdriver\",\n        \"price\": 5\n    },\n    {\n        \"name\": \"\
    Nail\",\n        \"price\": 2\n    },\n    {\n        \"name\": \"Screw\",\n \
    \       \"price\": 1\n    },\n    {\n        \"name\": \"Screwdriver\",\n    \
    \    \"price\": 5\n    },\n    {\n        \"name\": \"Nail\",\n        \"price\"\
    : 2\n    },\n    {\n        \"name\": \"Screw\",\n        \"price\": 1\n    },\n\
    \    {\n        \"name\": \"Screwdriver\",\n        \"price\": 5\n    },\n   \
    \ {\n        \"name\": \"Nail\",\n        \"price\": 2\n    },\n    {\n      \
    \  \"name\": \"Screw\",\n        \"price\": 1\n    },\n    {\n        \"name\"\
    : \"Screwdriver\",\n        \"price\": 5\n    },\n    {\n        \"name\": \"\
    Nail\",\n        \"price\": 2\n    },\n    {\n        \"name\": \"Screw\",\n \
    \       \"price\": 1\n    },\n    {\n        \"name\": \"Screwdriver\",\n    \
    \    \"price\": 5\n    },\n    {\n        \"name\": \"Nail\",\n        \"price\"\
    : 2\n    },\n    {\n        \"name\": \"Screw\",\n        \"price\": 1\n    },\n\
    \    {\n        \"name\": \"Screwdriver\",\n        \"price\": ", "  var score\
    \ = []\n  game.forEach(function(value, index){\n    var diff = Math.abs(value\
    \ - guess[index])\n    if(value === guess[index]) {\n      score.push(0)\n   \
    \ } else {\n      score.push(diff)\n    }\n  })\n  return score\n}\n", "    return\
    \ guess.map((val, index) => {\n        if(val === game[index]){\n            return\
    \ 0;\n        }\n        return Math.abs(val-game[index]);\n    }).map(val =>\
    \ Math.abs(val));\n}\n</code>\n<|/ a tags=javascript,arrays dscore=1 |>\n<| c\
    \ |>\nI got `TypeError: guesses.map is not a function` on `return guess.map((val,\
    \ index) => {\n        if(val === game[index]){\n            return 0;\n     \
    \   }\n        return Math.abs(val-game[index]);\n    }).map(val => Math.abs(val));`\n\
    <|/ c |>\n<| c |>\nPlease check my edits. You had the parameters wrong in the\
    \ return statement. I didn't test this so I can't say for sure if there are any\
    \ errors there, but it should be good to go now.\n<|/ c |>\n<| c |>\nI tried your\
    \ code but now the result is not what it is supposed to be, I get negative numbers\
    \ in the array.\n<|/ c |>\n<| c |>\nCan you show the updated code and what you\
    \ are expecting to get?\n<|/ c |>\n<| c |>\nI added the test cases and the expected\
    \ results in the description.\n<|/ c |>\n<| a dscore=1 |>\nYour code is not working\
    \ because of the return statement. Try changing your code to:\n<code>", "    var\
    \ result = game.slice();\n    var len = guess.length;\n    for (var i = 0; i <\
    \ len; i++) {\n        var g = guess[i]; //guess - game\n        result[i] +=\
    \ g;\n        result[i] += Math.abs(g - game[i]); //The difference between the\
    \ guess and the score\n    }\n    return result;\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| a tags=javascript,arrays |>\nHere's a more generic solution that allows you\
    \ to compare any 2 sets of scores. The sets can be of any length.\nThe array can\
    \ be of any length.\nThe second array will be ordered from most to least important.\n\
    The method returns an array of arrays where each inner array will have a score\
    \ and true if the guess matches.\n<code>", "  // Your code here!\n  let result\
    \ = [];\n  game.forEach((item, index) => {\n    if( guess[index] === item ){\n\
    \      result.push(0);\n    } else {\n      result.push(Math.abs(item - guess[index]));\n\
    \    }\n  })\n  return result;\n}\n", "    var result = [];\n    var numGame =\
    \ game.length;\n    var numGuess = guess.length;\n\n    for(var i = 0; i < numGuess.length;\
    \ i++){\n        if(i == numGuess - 1){\n            result.push(0);\n       \
    \ }else{\n            result.push(Math.abs(guess[i] - game[i]));\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 tags=javascript,algorithm\
    \ |>\n<| a tags=javascript,algorithm |>\nI took your code, and made it more readable,\
    \ so I hope you'll understand my logic: \n<code>", "  let score;\n  for (let i\
    \ = 0; i < guess.length; i++){\n    score = Math.abs(game[i] - guess[i]);\n  \
    \  if (score > 0){\n      return [score, i];\n    }\n  }\n  return [score, guess.length];\n\
    }\n</code>\n<|/ a |>\n<| c |>\nthanks a lot, and I hope that the question will\
    \ get a solution that will help other to help their code\n<|/ c |>\n<| c |>\n\
    This is not the right solution. `compare([1,2,3], [1])` is correct since `1` is\
    \ higher than `1` in the scores array. This solution is only correct if you guessed\
    \ correctly the exact same number of items. Otherwise the correct score is `guess.length\
    \ + game.length - guess.length`. But this solution doesn't take account of the\
    \ fact that some items could be better than others.\n<|/ c |>\n<| c |>\nI suppose\
    \ you are right. I will try to fix it :)\n<|/ c |>\n<| c |>\nI've just fixed it.\
    \ I think it works fine. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI guess\
    \ this only works if all guesses are within the `game` array, which is not the\
    \ case for me, since I only get an array with the results of the game, not the\
    \ guesses.\n<|/ c |>\n<| a |>\nHere is the correct solution that I've found:\n\
    <code>", "  // TODO: return an array of numbers (one per index) where the number\
    \ represents the number of wrong guesses\n  // TODO: and where they have guessed\
    \ correctly.\n}\n", "    var answer=[];\n    guess=parseInt(guess).sort();\n \
    \   game=game.sort();\n    for(i=0;i<guess.length;i++){\n        if(guess[i]<game[i]){\n\
    \            answer.push(guess[i]-game[i]);\n        }else{\n            answer.push(Math.abs(guess[i]-game[i]));\n\
    \        }\n    }\n    return answer;\n}\n", "    let score = 0;\n    guess =\
    \ guess.sort((a,b) => a - b);\n    game = game.sort((a,b) => a - b);\n    for(let\
    \ i = 0; i < game.length; i++){\n        if(game[i] == guess[i]){\n          \
    \  score++;\n        }else{\n            if(guess[i] > game[i]){\n           \
    \     score += game[i] - guess[i];\n            }else{\n                score\
    \ += guess[i] - game[i];\n            }\n        }\n    }\n    return guess;\n\
    }", "    let result = []\n    let sum = 0\n\n    for(let i = 0; i < guess.length;\
    \ i++){\n        sum += Math.abs(game[i] - guess[i])\n        result.push(sum)\n\
    \    }\n    return result\n}\n", "    guess = guess.map(Number);\n    game = game.map(Number);\n\
    \    var results = [];\n    for (var i=0; i < guess.length; i++){\n        var\
    \ difference = guess[i] - game[i];\n        if (difference !== 0 && difference\
    \ <= 0){\n            results.push(difference);\n        }\n        else if (difference\
    \ === 0){\n            results.push(0);\n        }\n        else if (difference\
    \ > 0){\n            results.push(difference - Math.sign(difference));\n     \
    \   }\n    }\n    return results;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nWow,\
    \ thanks so much for taking the time to give a full answer! I will have to take\
    \ a closer look at it for a couple hours until I can fully understand what's going\
    \ on.\n<|/ c |>\n<| a |>\nHere's a short solution that I think you can understand\
    \ and possibly modify for your own purposes\n<code>", "    //Your code here\n\
    \    let diff = [];\n    let totalDiff = 0;\n    for (let i = 0; i < guess.length;\
    \ i++){\n        totalDiff += Math.abs(game[i] - guess[i]);\n    }\n    for (let\
    \ i = 0; i < guess.length; i++){\n        if (Math.abs(game[i] - guess[i]) ==\
    \ 0){\n            diff.push(0);\n        } else {\n            diff.push(Math.abs(game[i]\
    \ - guess[i]) - totalDiff);\n        }\n    }\n    return diff;\n}", "  let a\
    \ = new Set(game)\n  let b = new Set(guess)\n  let result = []\n  a.forEach((e,i)\
    \ => b.has(e) && result.push((Math.abs(b.get(e)-game[i]))))\n  return result\n\
    }\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n</cell>\n<text>\nNow we know what\
    \ to do. Let's just get it working.\n\n</text>\n<cell>", "    if (game.length\
    \ !== guess.length){\n        throw new Error('Score arrays must have the same\
    \ length')\n    }\n    // Initialize our best possible result by comparing the\
    \ first numbers in each array\n    var bestScore = guess[0] - game[0]\n    var\
    \ bestIndex = 0\n    // Iterate over the arrays, and update the result if the\
    \ current guess is better than the previous best\n    for (var i = 0; i < game.length;\
    \ i++){\n        if (guess[i] < game[i]){\n            bestScore = game[i] - guess[i]\n\
    \            bestIndex = i\n        }\n    }\n    // If the result is unchanged,\
    \ just return our best result\n    if (bestScore === game[0]){\n        return\
    \ [bestIndex]\n    } else {\n        return [Math.abs(bestScore)-game[bestIndex]]\n\
    \    }\n}\n", "   var correct = 0;\n   var i = 0;\n   var score = 0;\n   var minScore\
    \ = game[0];\n   var maxScore = game[0];\n   var diff;\n   for (i = 0; i < guess.length;\
    \ i++){\n       if (game[i] > maxScore){\n          maxScore = game[i];\n    \
    \   }\n       if (game[i] < minScore){\n          minScore = game[i];\n      \
    \ }\n   }\n   for (i = 0; i < guess.length; i++){\n       diff = abs(guess[i]\
    \ - maxScore);\n       if (diff){\n          score = -diff;\n       }\n      \
    \ else {\n          score = diff;\n       }\n       if (score > 0 && score < 3){\n\
    \          correct++;\n       }\n   }\n   var results = [];\n   for (i = 0; i\
    \ < guess.length; i++){\n      results[i] = score;\n   }\n   return results;\n\
    }\n", "  var match = [];\n  for(var i = 0, len = guess.length; i < len; i++){\n\
    \    var guess = guess[i];\n    var correct = game[i] === guess;\n    if(!correct){\n\
    \      if(typeof guess[i] !== 'number')\n        guess = guess-game[i];\n    \
    \  else\n        guess = parseInt(guess)-parseInt(game[i]);\n    }\n    match.push(guess);\n\
    \  }\n  return match;\n}\n", "\tvar diff = 0;\n\tfor(var i=0;i<game.length;i++)\n\
    \t\tdiff += Math.abs(game[i]-guess[i]);\n\tvar result = [];\n\tfor(var i=0;i<game.length;i++){\n\
    \t\tif(game[i]==guess[i])\n\t\t\tresult.push(0);\n\t\telse\n\t\t\tresult.push(Math.abs(game[i]-guess[i]));\n\
    \t}\n\treturn result;\n}\n", "    var scores = [];\n    var correct = [];\n  \
    \  \n    for (var i = 0; i<game.length;i++){\n        scores.push(Math.abs(game[i]-guess[i]))\n\
    \    }\n\n    for (var i = 0; i<guess.length;i++){\n        if (game[i]===guess[i]){\n\
    \            correct[i] = 0;\n        }\n    }\n\n    for (var i = 0; i<guess.length;i++){\n\
    \        if (guess[i]==game[i]){\n            correct[i] = 0;\n        }\n   \
    \ }\n\n    for (var i = 0; i<guess.length;i++){\n        if (guess[i] === Math.abs(game[i]-guess[i])){\n\
    \            correct[i] = 0;\n        }\n    }\n\n    correct = correct.map(function\
    \ (i){\n        if (i === 0){\n            return 0;\n        }\n        return\
    \ i;\n    });\n\n    return correct;\n}\n", "    var total = 0;\n    for (var\
    \ i=0; i<game.length; i++){\n        if (guess[i] == game[i]){\n            total++;\n\
    \        }\n    }\n    return total;\n}\n</code>\n<|/ a |>\n<| c |>\nThank you\
    \ so much for your time and your effort.\n<|/ c |>\n<| a dscore=1 |>\nHere is\
    \ my take on this problem\n<code>\nvar scores = [1, 2, 3, 4, 5]\nvar guesses =\
    \ [4, 2, 4, 4, 2]\nvar index = 0\n\nvar result = calculateResult(scores, guesses)\n",
  "    var results = [];\n    for(var i = 0; i < game.length; i++){\n        results.push(Math.abs(guess[i]\
    \ - game[i]));\n    }\n    return results;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
