name: HumanEval_157_right_angle_triangle
language: js
prompt: "//Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1,\
  \ 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
  \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
  \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
  \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
  \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
  \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
completions: ['    return (b==0 ? a*a : b==1 ? a*a*a : c==0 ? a*a*a*a - a*a : a >=
    3 && b >= 3 && c >= 3 ? a >= b && a >= c && b >= c ? a >= 3 && a >= b && b >=
    c ? false : a >= b && b >= c ? true : b >= c ? true : c >= b ? true : false :
    false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : false ? false : false ? false : false ? false
    : false ? false : false ? false : ', "    var ad = a*a;\n    var bc = b*c;\n \
    \   var bd = b*d;\n    var cd=c*d;\n    return (b*b+ad-bc-ad-cd-bd) >= 0 &&\n\
    \           (b**2+a*-a<=bc-bd)&&\n           (b**2+a*a*cd+a*-a<=ad-bc)&&\n   \
    \        (b**2+a*a*cd*cd+a*a*bc-a*b+bc-ad-bc*bc>=0); \n}\n", "\tvar ad = b*b -\
    \ 4*a*c;\n\t\n\tif(ad >= 0){\n\t\treturn true;\n\t}\n\treturn false;\n}\n", "\t\
    return ((Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)) <= Math.sqrt(Math.pow(c, 2)\
    \ + Math.pow(b, 2))));\n}\n", "  let a_p2 = Math.pow(a, 2);\n  let b_p2 = Math.pow(b,\
    \ 2);\n  let c_p2 = Math.pow(c, 2);\n  return (( (a_p2 + b_p2 === c_p2) && (b\
    \ === c) ) ||\n          ( (a_p2 + b_p2 > c_p2) && (b < c) ) ||\n          ( (a_p2\
    \ + b_p2 < c_p2) && (a < c) )\n          );\n}", "    return ( is_right_triangle(a,\
    \ b, c) && !is_right_triangle(b, c, a) );\n}\n", "\tif (a != b && b != c && c\
    \ != a) return true;\n\treturn a>b+c || a>c-b || b>c+a || b>a-c;\n}\n", "    \n\
    \    // Calculate sides' lengths.\n    var sa = Math.sqrt(Math.pow(a, 2) + Math.pow(b,\
    \ 2));\n    var sb = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2));\n    var sc =\
    \ Math.sqrt(Math.pow(c, 2) + Math.pow(a, 2));\n    \n    //Check if sides are\
    \ equal or they are 90 degrees.\n    if(Math.abs(sa - sb) == Math.abs(sc - sa)){\n\
    \        return true;\n    }else{\n        return false;\n    }\n}\n", "  var\
    \ n1, n2;\n  // n1 is the bigger number \n  if(a>b && a>c){\n    n1=a;\n    n2=b;\n\
    \  }\n  else if(b>a && b>c){\n    n1=b;\n    n2=a;\n  }\n  else{\n    n1=c;\n\
    \    n2=a;\n  }\n  var side1=(b*n2)-(a*n1);\n  var side2=(b*n1)-(a*n2);\n  var\
    \ deter=side1*side2;\n  if(deter>0){\n    return true;\n  }\n  else{\n    return\
    \ false;\n  }\n}", "\tvar a = Math.abs(a);\n\tvar b = Math.abs(b);\n\tvar c =\
    \ Math.abs(c);\n\n\treturn ((a + b > c) && (a + c > b) && (b + c > a));\n}\n",
  "\treturn (b - c) > Math.sqrt((b*b) - (4*a*c)) \n}\n", "    return (b - a) === (c\
    \ - b)\n}\n", "\tvar x1 = c; \n\tvar x2 = x1 + a;\n\tvar x3 = x2 + b;\n\tvar y1\
    \ = Math.sqrt(Math.pow(x1-x2,2)+Math.pow(x1-x3,2));\n\treturn (y1 >= Math.pow(a,2))\
    \ && (y1 >= Math.pow(b,2));\n}\n", "    if((Math.abs(b - a) * 2 === Math.abs(c\
    \ - b)) || Math.abs(a - b) === Math.abs(b - c)){\n        return true;\n    }\n\
    \    return false;\n}\n", "\tif (is_int(a) && is_int(b) && is_int(c)) {\n\t\t\
    return ((a + b + c) == 360 || Math.abs(a - b) == 90 || Math.abs(b - a) == 90);\
    \ \n\t}\n\t\n\treturn false;\n}\n<|/ file source=github dstars=0 |>", "\tvar t\
    \ = (a + b + c) / 2;\n\treturn ( ((b - a) * (c - b)) > 0 || ((c - a) * (b - a))\
    \ > 0 )\n}\n", "\t// Check that the sides are valid\n\tif (a < 0 || b < 0 || c\
    \ < 0) {\n\t\treturn false;\n\t}\n\tif (a + b >= c || b + c >= a || c + a >= b)\
    \ {\n\t\treturn false;\n\t}\n\t\n\t// Check if the triangle is right angle\n\t\
    var side1 = Math.sqrt(a * a + b * b);\n\tvar side2 = Math.sqrt(b * b + c * c);\n\
    \tvar side3 = Math.sqrt(c * c + a * a);\n\tif (side1 === side2 === side3 || side1\
    \ === side3 || side2 === side3) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}", "    var detleft = a - b;\n    var detright = c - a;\n    var det = detleft\
    \ * detright;\n    var dot = detleft * detleft;\n    return (det > 0 && (det <\
    \ (dot * detright)));\n}\n", "    let a = Math.sqrt(a * a + b * b)\n    let b\
    \ = Math.sqrt(a * a + c * c)\n    let c = Math.sqrt(b * b + c * c)\n    if (b\
    \ >= c)\n        return (b >= c) ? false : true\n    return (a = b) >= (c = a)\
    \ ? false : true\n}\n", "    var a = Math.abs(a);\n    var b = Math.abs(b);\n\
    \    var c = Math.abs(c);\n    if(a > b && a > c){\n        return true;\n   \
    \ }\n    if(a < b && a < c){\n        return false;\n    }\n    if(b > c && b\
    \ > a){\n        return false;\n    }\n    if(c > a && c > b){\n        return\
    \ true;\n    }\n}\n", "    return (b - c) * (Math.pow((Math.pow(a, 2) + Math.pow(b,\
    \ 2)) -\n    (Math.pow(c, 2)), 0.5)) < 0;\n}\n", "\tvar delta = Math.abs(b - c);\n\
    \tif(delta == 0 || delta > Math.max(Math.abs(a), Math.abs(b), Math.abs(c))) return\
    \ true\n\telse return false;\n}\n", "    var ab = a - b;\n    var ac = c - a;\n\
    \    var bc = (b - c); \n\n    if (Math.abs(ab) == Math.abs(ac) && Math.abs(ab)\
    \ == Math.abs(bc)){\n        if (a > b){\n            return (a > c);\n      \
    \  } else {\n            return (b > c);\n        }\n    } else {\n        return\
    \ false; \n    }\n}\n", "  var triangle_area = a*b*c; //Find the area of a right\
    \ angled triangle\n  if (triangle_area <= 0){\n    return false;\n  }\n  if (triangle_area\
    \ == 3){\n    return true;\n  }\n  return is_right_angle(a, b, c);\n}\n", "\t\
    var a1 = Math.abs(a);\n\tvar b1 = Math.abs(b);\n\tvar c1 = Math.abs(c);\n\tvar\
    \ a2 = Math.abs(a*a);\n\tvar b2 = Math.abs(b*b);\n\tvar c2 = Math.abs(c*c);\n\t\
    \n\tif (a1 > (a2 + b2 + c2)) return true;\n\tif (b1 > (a2 + b2 + c2)) return true;\n\
    \tif (c1 > (a2 + b2 + c2)) return true;\n\t\n\treturn false;\n}\n", "  return\
    \ (b + c) <= (Math.sqrt(a * a + b * b + c * c))\n}", "\treturn (a + b > c) &&\
    \ (b + c > a) && (a + c > b);\n}\n", "    var abs = Math.abs(a - b);\n    var\
    \ ac = Math.abs(c - a);\n    var bc = Math.abs(b - c);\n    if (abs < ac && abs\
    \ < bc) return true;\n    return false;\n}\n", "    if(b === 0) return false;\n\
    \    var side1 = Math.sqrt((b * b) - (4 * a * c))\n    var side2 = Math.sqrt((b\
    \ * b) - (4 * a * b))\n    if (side1 === 0 && side2 === 0)\n    {\n        return\
    \ true;\n    }\n    else return false;\n}\n", "  // Make sure the angles are in\
    \ range\n  // We don't care if they're in the right range, we just want to see\
    \ if \n  // they're in the right direction\n  if (a > 360) a -= 360;\n  if (b\
    \ > 360) b -= 360;\n  if (c > 360) c -= 360;\n  \n  // Check if they are within\
    \ the two angles of the triangle\n  // We don't care if it's right angle\n  //\
    \ We only care if it's right angle or it's 90 degree\n  if (Math.sqrt((b*b) +\
    \ (a*a) - (b*c)) > Math.sqrt((c*c) + (b*b) - (a*a))){\n    return false;\n  }\n\
    \  return true;\n}\n", "  return (b * c + a * c) / Math.sqrt(Math.pow(a, 2) +\
    \ Math.pow(b, 2));\n}\n", "\tvar signa = (a<0)?-1:1;\n\tvar signb = (b<0)?-1:1;\n\
    \tvar signc = (c<0)?-1:1;\n\tvar sides=signa*Math.sqrt(Math.pow(a,2)+Math.pow(b,2))+signb*Math.sqrt(Math.pow(b,2)+Math.pow(c,2))+signc*Math.sqrt(Math.pow(a,2)+Math.pow(c,2));\n\
    \treturn (Math.abs(sides)==Math.pow(3,2));\n}\n", "  var det = (b * b) - (4 *\
    \ a * c);\n  if (det < 0)\n    return false;\n  \n  var sq = Math.sqrt(det);\n\
    \  return ((sq > 0) && (Math.abs(Math.acos((a / Math.sqrt(sq)) - (c / sq))) <\
    \ Math.PI / 2));\n}\n", "\tvar ab = Math.abs(a - b),\n\t\tbc = Math.abs(b - c),\n\
    \t\tac = Math.abs(a - c);\n\tif (ab > bc && ab > ac){\n\t\treturn true;\n\t}\n\
    \treturn false;\n}\n", "    var xA = Math.cos(Math.PI/180.0*a) * Math.cos(Math.PI/180.0*c);\n\
    \    var xB = Math.sin(Math.PI/180.0*a) * Math.cos(Math.PI/180.0*c);\n    var\
    \ xC = Math.sin(Math.PI/180.0*a) * Math.sin(Math.PI/180.0*c);\n    var yA = Math.cos(Math.PI/180.0*a)\
    \ * Math.sin(Math.PI/180.0*c);\n    var yB = Math.sin(Math.PI/180.0*b) * Math.sin(Math.PI/180.0*c);\n\
    \    var yC = Math.sin(Math.PI/180.0*b) * Math.cos(Math.PI/180.0*c);\n    return\
    \ xA == xB &&  yA == yB;\n}\n", "    \n    var s = Math.sqrt(a*a + b*b + c*c);\n\
    \    return s == (a + b + c)/2;\n}\n", "    return (b * c) - (a * c) >= 0;\n}\n",
  "    if(a==0 && b==0 && c==0)\n    {\n        return true\n    }\n    // triangle\
    \ sides\n    var ab = Math.sqrt(a * b),\n        bc = Math.sqrt(b * c),\n    \
    \    ac = Math.sqrt(a * c);\n    if (ab === bc && ab === ac){\n        return\
    \ true\n    }\n    else{\n        return false\n    }\n}\n", "    return (Math.abs(a\
    \ - b) <= 1 && Math.abs(b - c) <= 1 && Math.abs(c - a) <= 1);\n}\n<|/ file ext=.js\
    \ source=github |>", "\tvar ab2 = a*b, b2 = b*c, a2c = a*c;\n\treturn (ab2 > b2+a2c\
    \ && ab2 > a2c-b2) || (ab2 < b2+a2c && ab2 < a2c-b2)\n}\n", "\treturn ( ( ( a\
    \ == b && (b == c || (a == c && b != c)) ) || ( b == c && (a == c || (b != c &&\
    \ a))) )\n}", "\tif(b >= c || a >= c){\n\t\treturn false;\n\t}\n\t\n\tif(a==b){\n\
    \t\treturn c>b||a>c||c>a;\n\t}\n\t\n\tif(a==c){\n\t\treturn b>c||a>c||b>a;\n\t\
    }\n\t\n\tif(b==c){\n\t\treturn a>c||b>c||a>b;\n\t}\n\t\n\tvar left_angle = Math.abs(a-c),\n\
    \t\tright_angle = Math.abs(b - c);\n\treturn (left_angle == right_angle) && (left_angle\
    \ > 0);\n}\n", "  return (((b - a) * (c - b)) < ((Math.pow(b,2)) + (Math.pow(c,\
    \ 2))))\n}\n", "  return (((b - c) - (a - b)) > 180)\n}\n", "    if (Math.abs(b\
    \ - c) >=  Math.abs(a - b)){\n        return false\n    }\n    return true\n}\n\
    \n", "    \n    var side1 = Math.pow(a+b, 2);\n    var side2 = Math.pow(b+c, 2);\n\
    \    var side3 = Math.pow(a+c, 2);\n    \n    return ((side1 === side2 && side2\
    \ === side3)\n            || (side1 === side2 && side3 > side2));\n}\n</cell>\n\
    <text>\nQ4\nUse the code cells below to complete the function find_factors.\n\n\
    Note\nThe code cells below should be executed without errors.\n\n\n</text>\n<cell>",
  "    return (b[0] - a[0])*(c[1] - a[1]) - (c[0] - a[0])*(b[1] - a[1]);\n}\n", " \
    \ var da = a - b;\n  var db = c - b;\n  var dc = a - c;\n  return da * db - db\
    \ * dc === 0;\n}", "\tif(a*a + b*b == c*c){\n\t\treturn Math.abs((Math.atan2(b,\
    \ a)/Math.PI*180)) < 90;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "\tif((b\
    \ - a) * (c - b) <= 0){\n\t\treturn false;\n\t}\n\tif(Math.abs(Math.acos((Math.pow(b,\
    \ 2) - Math.pow(a, 2) + Math.pow(c , 2) - Math.pow(a , 2)) / (Math.pow(b , 2)\
    \ * Math.pow(c , 2)))) >= 90) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n",
  "  var x = Math.abs(a-b),\n      y = Math.abs(b-c),\n      z = Math.abs(c-a);\n\
    \  return x*x + y*y + z*z >= 1;\n}\n", "\tif(b === 0){\n\t\treturn false;\n\t\
    }\n\tif(b === 0 && c === 0){\n\t\treturn true;\n\t}\n\tvar rb_length = Math.sqrt((b*b)+(c*c));\n\
    \tif(rb_length <= Math.abs(a-b)){\n\t\treturn true;\n\t}\n\tvar c_length = Math.sqrt((b*b)+(a*a));\n\
    \tif(rb_length <= c_length){\n\t\treturn true;\n\t}\n\tvar ab_length = Math.sqrt((b\
    \ * b) + (a * a));\n\tif(rb_length <= ab_length){\n\t\treturn true;\n\t}\n\treturn\
    \ false;\n}", "\tvar sum = a+b+c;\n\tvar is_right_angle_triangle = (Math.abs(Math.sqrt(Math.pow(a,2)\
    \ + Math.pow(b,2) + Math.pow(c,2))-sum) < Math.sqrt(Math.pow(2,2) + Math.pow(3,2)));\n\
    \treturn is_right_angle_triangle;\n}\n", "  a = Math.abs(a)\n  b = Math.abs(b)\n\
    \  c = Math.abs(c)\n  return ((a + b >= c) && (a >= b) && (c >= b))\n}\n", " \
    \   \n    // if the lengths of a and b are equal, then \n    // the length of\
    \ the side c is the same as a \n    if (Math.abs(a * b) == Math.abs(c * a))\n\
    \        return true;\n    \n    // if one of the sides is greater than the other\n\
    \    if (a >= b && a >= c)\n        return true;\n    \n    if (b >= c && b >=\
    \ a)\n        return true;\n    \n    return false;\n}\n</code>\n<|/ a tags=c++,algorithm,geometry,math\
    \ dscore=2 |>\n<| c |>\nYour code does not take into account that if triangles\
    \ would have different shapes, your function would return false, even though it\
    \ is a right angled triangle in that shape. Try with these inputs: left_angle_triangle(1,2,3);\
    \ right_angle_triangle(4,5,6);\n<|/ c |>\n<| c |>\nRight, that is a very good\
    \ point. I will edit the answer to include that.\n<|/ c |>\n<| c |>\nAlso note\
    \ that your algorithm will give false positive results if you give it a triangle\
    \ that's not a right angle triangle: left_angle_triangle(3, 3, 1), right_angle_triangle(4,\
    \ 4, 2). Your algorithm will return false, but the triangle is actually a right\
    \ angle.\n<|/ c |>\n<| c |>\nThanks for that catch, I've made the changes.\n<|/\
    \ c |>\n<| a dscore=2 |>\nYou can do it using just two variables:\n<code>\nbool\
    \ IsRightAngledTriangle(int x1,int y1,int x2,int y2,int x3,int y3)\n{\n    int\
    \ a = x1 - x2;\n    int b = y1 - y2;\n    int c = x3 - x2;\n    int d = y3 - y2;\n\
    \    if( (a+b+c+d) == 0)\n        return false;\n\n    a = x1 - x3;\n    b = y1\
    \ - y3;\n    c = x2 - x3;\n    d = y2 - y3;\n    if( (a+b+c+d) == 0)\n       \
    \ return false;\n\n    a = x1 - x2;\n    b = y1 - y2;\n    c = x3 - x2;\n    d\
    \ = y3 - y2;\n    if( (a+b+c+d) == 0)\n        return false;\n\n    return true;\n\
    }\n</code>\n<|/ a tags=c++,algorithm,geometry,math |>\n<| c |>\nThis doesn't take\
    \ into account the different shapes of the triangles.\n<|/ c |>\n<| c |>\nIt is\
    \ a good answer, but this should return true for triangles whose sides are equal,\
    \ even though the triangle is not actually a right angled triangle. Try left_angle_triangle(1,2,3);\
    \ right_angle_triangle(4,5,6);", "  var n1 = Math.abs(a - c);\n  var n2 = Math.abs(b\
    \ - c);\n  var n3 = Math.abs(a - b);\n  return n1 == n2 && n2 != n3;\n}\n", " \
    \   var ab = a - b;\n    var ac = c - a;\n    return ab > 0 && ac > 0;\n}", " \
    \ var d = Math.sqrt(a * a + b * b);\n  var e = Math.sqrt(c * c + d * d);\n  return\
    \ ((a / d >= b / d) && (a / d >= c / d) && (a / d >= e / d)) || ((a / d >= b /\
    \ d) && (a / d >= c / d) && (a / d <= e / d)) || ((a / d <= b / d) && (a / d <=\
    \ c / d) && (a / d <= e / d));\n}\n", "    return (a + b > c) && (b + c > a) &&\
    \ (c + a > b)\n}", "    if (Math.abs(b - c) <= (a < c) ? a : c){\n        return\
    \ false;\n    }\n    var ab = Math.abs(b - c),\n        angle = (a > c) ? b -\
    \ c : a - c;\n    if (ab < Math.PI / 2){\n        return true;\n    }\n    if\
    \ (ab === Math.PI / 2 && (angle <= Math.PI / 4 || angle >= Math.PI / 2)){\n  \
    \      return true;\n    }\n    if (ab === Math.PI / 2 && (angle < Math.PI * 3\
    \ / 4 || angle >= Math.PI)){\n        return true;\n    }\n    return false;\n\
    }\n", "    var xA = Math.abs(a);\n    var yA = Math.abs(b);\n    var zA = Math.abs(c);\n\
    \    var xB = Math.abs(Math.sqrt(Math.pow(a - b, 2)+Math.pow(b - c, 2)));\n  \
    \  var yB = Math.abs(Math.sqrt(Math.pow(b - a, 2)+Math.pow(c - a, 2)));\n    var\
    \ zB = Math.abs(Math.sqrt(Math.pow(c - b, 2)+Math.pow(a - c, 2)));\n    return\
    \ (((xB * yB) < zA) && ((xB * zB) < yA));\n}\n", "\tvar delta = Math.sqrt(Math.pow(b,2)\
    \ - 4*a*c);\n\treturn (Math.sqrt(a*a+b*b-delta)>=(3*Math.sqrt(a)))\n}\n", "  \
    \  var rad = Math.atan2(b, a);\n    return Math.abs(rad - Math.PI / 2) < 1;\n\
    }\n", "    if ( a === 0 && b === 0 && c === 0 ){\n        return true;\n    }\n\
    \    if ( a === 0){\n        if ( c > b  ){\n            return false;\n     \
    \   }\n        return true;\n    }\n    if ( b === 0){\n        if ( a > c  ){\n\
    \            return false;\n        }\n        return true;\n    }\n    if ( c\
    \ === 0){\n        if ( b > a  ){\n            return false;\n        }\n    \
    \    return true;\n    }\n    var angle1 = Math.acos( c / a );\n    var angle2\
    \ = Math.acos( b / a );\n    var angle3 = Math.acos( c / b );\n\n    if ( angle3\
    \ > angle2 ){\n        if ( angle3 > angle1 ){\n            return true;\n   \
    \     }\n        else {\n            return false;\n        }\n    }\n    else\
    \ {\n        return false;\n    }\n}\n\n", "\tif ( (Math.abs(a * b * c) < 0.0000001)\
    \ )\n\t\treturn true;\n\telse\n\t\treturn false;\n}", "\t\n\tif((Math.abs(a-b)\
    \ < 1) && (Math.abs(a-c) < 1) && (Math.abs(b-c) < 1))\n\t\treturn true;\n\telse\n\
    \t\treturn false;\n}\n\n", "    var abs = Math.sqrt((a * a) + (b * b) + (c * c));\n\
    \    var ac = Math.sqrt((a * a) + (c * c));\n    var bc = Math.sqrt((b * b) +\
    \ (c * c));\n    var det = abs * bc;\n    return Math.abs(ac - det) < 0.000001;\n\
    }\n", "\tvar side1 = Math.abs(a);\n\tvar side2 = Math.abs(b);\n\tvar side3 = Math.abs(c);\n\
    \tvar angle1 = (Math.PI / 180.0) * (side1);\n\tvar angle2 = (Math.PI / 180.0)\
    \ * (side2);\n\tvar angle3 = (Math.PI / 180.0) * (side3);\n\treturn (angle3 >=\
    \ angle1 && angle3 <= angle2);\n}\n", "  var a = Math.abs(a);\n  var b = Math.abs(b);\n\
    \  var c = Math.abs(c);\n  return (( (a > b && a > c) || (b > c && b > a)) &&\
    \ a !== 0 && b !== 0 && c !== 0);\n}\n", "    var t1 = b * b - a * c;\n    var\
    \ t2 = a * a + b * b - c * c;\n    return Math.abs(t1) < 0.00001 && Math.abs(t2)\
    \ < 0.00001;\n}\n", "  var rad = Math.acos((a*a + b*b - c*c)/Math.pow(Math.sqrt(a*a\
    \ + b*b), 2));\n  return rad < Math.PI && rad > -Math.PI;\n}\n</textarea>\n<textarea\
    \ id=\"code-result\" class=\"code-result\" cols=\"100\" rows=\"9\" readonly>",
  "\tvar side1 = Math.sqrt((b*b) - (4 * a * c))\n\tvar side2 = Math.sqrt((b*b) - (4\
    \ * a * b))\n\tvar side3 = Math.sqrt((b*b) - (4 * a * a))\n\n\t\n\tif((side1*side2)\
    \ === (side1*side3)){\n\t\treturn true\n\t}\n\telse{\n\t\treturn false\n\t}\n\
    }\n", "\tif (a*a + b*b == c*c) return true;\n\treturn (a*a + c*c == b*b)\n}\n\n",
  "\tvar ab = a + b;\n\tvar ac = a + c;\n\tvar bc = b + c;\n\tvar abc = ab + ac;\n\
    \treturn (abc == (bc * bc) - (ab * ac));\n}\n", "  var sides_length = Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2) + Math.pow(c, 2)) \n  if(sides_length != 0){\n    var right_angle\
    \ = Math.PI / 2 - Math.acos((a+b+c)/(2*sides_length)) * 180/Math.PI\n    if(right_angle\
    \ > 90) return false;\n  }\n  return true;\n}\n</script>\n<script type=\"text/ecmascript\"\
    >", "    var ad = a*a, bb= b*b, cc = c*c;\n    if(cc == 0 || b == 0 || a == 0)\
    \ return false;\n    return (b + cc*a - aa*bc - ad*cc) > 0;\n}\n", "  return (b[0]\
    \ - a[0]) * (c[1] - b[1]) - (c[0] - a[0]) * (b[1] - a[1]);\n}\n", "  if(Math.abs(a-b)\
    \ === Math.abs(b-c)){\n    return b > a || c > b\n  }\n  return false\n}\n", "\t\
    return ((b * b) - 4 * (a * c)) === 0;\n}\n", "  var ab = a * b;\n  var ac = a\
    \ * c;\n  var bc = b * c;\n  \n  if (Math.abs(ac - bc) < .00001){\n    return\
    \ Math.abs(ab / ac) < .00001;\n  }\n  return Math.acos(Math.abs(ac - bc) / Math.sqrt(ab*ab\
    \ + bc*bc)) < .0001;\n}\n", "  if(a===0 && b===0 || b===0 && a===0) return false\n\
    \  return ((Math.atan2(b,a)-Math.atan2(c,a))*(180/Math.PI)<0)\n}", "    \n   \
    \ if (a!=b){\n        var d = b - a;\n        if (Math.abs(d) == Math.sqrt(Math.pow(a,2)\
    \ + Math.pow(b,2))){\n            if (b < c){\n                return false;\n\
    \            }\n        }\n        else{\n            return true;\n        }\n\
    \    }\n    else{\n        var f = Math.sqrt((b - c) * Math.pow(b - c, 2) / Math.pow(a,\
    \ 2));\n        var g = (b + c) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n\
    \        var h = (b - a) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n     \
    \   if (f < g){\n            return false;\n        }\n        else if (f > h){\n\
    \            return true;\n        }\n        else{\n            return false;\n\
    \        }\n    }\n}\n\n", "\tvar a1 = Math.abs(a);\n\tvar b1 = Math.abs(b);\n\
    \tvar c1 = Math.abs(c);\n\tvar angle = b1 - a1;\n\treturn (angle <= 180 && angle\
    \ >= 90) ? (a1 + b1 - c1) : false;\n}\n", "\tvar deltaA = a*a-b*b\n\tvar deltaB=b*b-c*c\n\
    \tvar deltaC=c*c-a*a\n\treturn deltaA < 0 && deltaB < 0 && deltaC < 0\n}", "\t\
    var ab = a - b, ac = c - a, ad = a - c;\n\treturn (ab*ab + ac*ac == ad*ad);\n\
    }\n", "  var x1 = [a, b]\n  var x2 = [a, c]\n  var x3 = [b, c]\n  var a1 = x1[1]\n\
    \  var b1 = x2[1]\n  var c1 = x3[1]\n  var a2 = x1[0]\n  var b2 = x2[0]\n  var\
    \ c2 = x3[0]\n  var b3 = x1[0] * x2[0] * x3[0]\n  var a3 = x1[0] * x2[1] * x3[1]\n\
    \  var c3 = x1[1] * x2[0] * x3[0]\n  var a4 = x1[1] * x2[1] * x3[1]\n  var b4\
    \ = x1[0]\n  var c4 = x2[0] * x3[1]\n  return Math.abs((a1 * b3 - a3 * b4) - a2)\
    \ < 10 && Math.abs((b1 * a3 - b3 * a4) - b2) < 10\n    && Math.abs((a1 * c3 -\
    \ a3 * c4) - a2) < 10 && Math.abs((c1 * a3 - c3 * a4) - c2) < 10\n}\n", "\tlet\
    \ a = Math.abs(a)\n\tlet b = Math.abs(b)\n\tlet c = Math.abs(c)\n\t\n\tif((Math.sqrt(a\
    \ * b * c)) < (a + b + c)){\n\t\treturn true\n\t}\n\treturn false\n}\n", "   \
    \ if((is_right_angle(a, b, c)) || (is_right_angle(b, c, a))){\n        return\
    \ true;\n    }\n    return false;\n}\n", "\tlet angleA = get_angle(a, b, c);\n\
    \tif (Math.abs(angleA) > 90){\n\t\treturn false;\n\t}\n\treturn true;\n}\n", " \
    \   var a = a || 0;\n    var b = b || 0;\n    var c = c || 0;\n\n    // If one\
    \ angle is 90 degree\n    if(Math.abs(b * b - a * c) < 0.000001) return true;\n\
    \n    // If one angle is right angle\n    if(b * b - 4 * a * c > 0) return false;\n\
    \n    // If one angle is left angle\n    if(b * b - 4 * a * c < 0) return true;\n\
    \n    // If one angle is 180 degree\n    if(Math.abs(a * a - b * b - c * c) <\
    \ 0.000001) return true;\n\n    return false;\n}\n", "\treturn (b ** 2) + (4 *\
    \ a * c) == (Math.pow(b,2) + Math.pow(a,2) - Math.pow(c,2))\n}\n", "\tif(a<b &&\
    \ b<c){\n\t\treturn true;\n\t}\n\tif(a>b && b>c){\n\t\treturn false;\n\t}\n\t\
    var ab = Math.sqrt(Math.pow(a,2)+Math.pow(b,2));\n\tvar ac = Math.sqrt(Math.pow(a,2)+Math.pow(c,2));\n\
    \tvar bc = Math.sqrt(Math.pow(b,2)+Math.pow(c,2));\n\tif(ab == ac && ab == bc)\n\
    \t\treturn true;\n\treturn false;\n}\n", "  \n  return ( // returns true if all\
    \ sides are right\n    ( ( a < b && ( a > c ) ) || // if angle a is right angle\n\
    \      ( ( a > b && ( a > c ) ) || // if angle b is right angle\n        ( ( a\
    \ > c && ( a > b ) ) || // if angle c is right angle\n          ( ( a == b &&\
    \ b == c ) ) // if all angles are same\n        )\n      )\n    )\n  \n}\n", "\t\
    // if either of the three sides is zero return false\n\t// if (a + b + c) ===\
    \ 0 \n\t// {\n\t// \treturn false;\n\t// }\n\t// if two sides are zero, return\
    \ false\n\t// if (a + b) === 0\n\t// {\n\t// \treturn false;\n\t// }\n\t// if\
    \ three sides are zero, return false\n\t// if (b + c) === 0\n\t// {\n\t// \treturn\
    \ false;\n\t// }\n\t// calculate the hypotenuse of a right angle triangle \n\t\
    let hypotenuse = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))\n\
    \t// if a * b = hypotenuse return true\n\tif (a * b === hypotenuse)\n\t{\n\t\t\
    return true;\n\t}\n\t// if b * c = hypotenuse return true\n\telse if (b * c ===\
    \ hypotenuse)\n\t{\n\t\treturn true;\n\t}\n\t// if a * c = hypotenuse return true\n\
    \telse if (a * c === hypotenuse)\n\t{\n\t\treturn true;\n\t}\n\t// if hypotenuse\
    \ is zero return false\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n", "\tvar ab =\
    \ a - b;\n\tvar ac = a - c;\n\tvar bc = b - c;\n\treturn (ab === bc || Math.abs(ab\
    \ - bc) === 90)?true:false;\n}\n", "  return (Math.abs(a^2 + b^2 + c^2) - ((a^2)\
    \ + (b^2) + (c^2)) ) <=1 ;\n}\n", "\treturn Math.abs(Math.sqrt(Math.pow(a, 2)+Math.pow(b,\
    \ 2)-Math.pow(c, 2)) <= 1);\n}\n", "    return ( b + Math.sqrt((b*b)-(c*c)) )<(\
    \ a*a );\n}\n", "    if((a*a + b*b + c*c) - (b*b + a*a) - (c*c + a*a) == 0){\n\
    \        return true;\n    }\n    return false;\n}\n", "\tvar ad, bd, cd;\n\t\
    ad = a*d;\n\tbd = b*d;\n\tcd = c*d;\n\tif(Math.abs(ad - bd) <= Math.abs(ad - cd)\
    \ && Math.abs(bd - cd) <= Math.abs(ad - cd)){\n\t\treturn true;\n\t}else{\n\t\t\
    return false;\n\t}\n}", "  if(a+b>c || a+c>b || b+c>a){\n    return false;\n \
    \ }\n  return true;\n}", "    return (b > 0 && c > 0 && a < b + c) || (b > 0 &&\
    \ c > 0 && b < a + c) || (a > 0 && c > 0 && a < b + c) || (a > 0 && c > 0 && b\
    \ < a + c)\n}\n", "    var a = Math.abs(a);\n    var b = Math.abs(b);\n    var\
    \ c = Math.abs(c);\n    return ((b * b - a * c) >= 0) && ((c * c - b * b) >= 0);\n\
    }\n", "\tif (b===0) return false; \n\telse if (a===0) return true; \n\telse if\
    \ (b===c) return true; \n\telse if (a>b){\n\t\tb = b-a;\n\t\ta = c-a;\n\t\tc =\
    \ c-b;\n\t\tb = c-a;\n\t}\n\treturn (b*b>0)?(b*c>0)?((a>c)?(b>a):(b>c)): false;\n\
    }", "\tvar ab = a * b;\n\tvar ac = a * c;\n\tvar bc = b * c;\n\tvar acab = ac\
    \ + ab;\n\treturn (acab == bc || acab == -bc);\n}\n", "  if (a < b){\n    if (a\
    \ > c){\n      if (b < c){\n        return true;\n      }\n      else{\n     \
    \   return false;\n      }\n    }\n    else{\n      return false;\n    }\n  }\n\
    \  else{\n    if (b > c){\n      if (a < c){\n        return true;\n      }\n\
    \      else{\n        return false;\n      }\n    }\n    else{\n      return false;\n\
    \    }\n  }\n}", "    return (((b > c && b > a) || (b > a && c > a)) && \n   \
    \         (b > a && c > a));\n}\n", "\t\n\tvar side1 = Math.abs(a-b) \n\tvar side2\
    \ = Math.abs(b-c) \n\tvar side3 = Math.abs(c-a) \n\treturn (side1 == side2 &&\
    \ side2 == side3) \n}\n*/\n", "\treturn ((b*b + c*c - a*a)/(2*b*c));\n}\n", " \
    \ return ((Math.atan2(b,a)>=Math.atan2(c,b)) || Math.abs(Math.atan2(b,a)-Math.atan2(c,b))\
    \ > Math.PI / 2)\n}\n\n", "\tif (Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)) <\
    \ Math.pow(c, 2)) return true;\n\telse return false;\n}\n", "\t\n\treturn b >\
    \ a + c || b > c - a || c > a + b; // Return true if one angle is right angle.\n\
    \t\n}\n", "    var d = b*b - 4*a*c;\n    return d >= 0 ? d < 0 : false;\n}\n",
  "    return Math.abs(b - a) > Math.abs(c - a) && Math.abs(a - c) > Math.abs(b -\
    \ c);\n}\n", "  var a1 = Math.abs(a);\n  var b1 = Math.abs(b);\n  var c1 = Math.abs(c);\n\
    \  return (a1 + b1 + c1)%2 === (a1 + c1)%2 && a1 + c1 !== 0;\n}\n", "  var ab\
    \ = a - b;\n  var ac = a - c;\n  var bc = b - c;\n  return ab >= 0 && ab <= 90\
    \ &&\n         ac >= 0 && ac <= 90 &&\n         bc >= 0 && bc <= 90;\n}\n\n",
  "    var ab = Math.sqrt((a*a)+(b*b)); \n    var ac = Math.sqrt((a*a)+(c*c)); \n\
    \    var bc = Math.sqrt((b*b)+(c*c)); \n    if(ab==0){\n        return true;\n\
    \    }\n    if(ac==0){\n        return false;\n    }\n    if(bc==0){\n       \
    \ return false;\n    }\n    if((ab>bc) && (ab>ac)){\n        return true;\n  \
    \  }\n    return false;\n}", "    return Math.abs(b-a) <= Math.abs(c-b) && Math.abs(b-c)\
    \ <= Math.abs(a-c)\n}\n\n", "\tvar a2 = a*a;\n\tvar b2 = b*b;\n\tvar c2 = c*c;\n\
    \tif(a2 > b2 && a2 > c2){\n\t\treturn true\n\t} else if(b2 > a2 && b2 > c2){\n\
    \t\treturn true\n\t} else if(c2 > a2 && c2 > b2){\n\t\treturn true\n\t} else {\n\
    \t\treturn false\n\t}\n}\n", "  return (b - c) * (a + b) <= ((a * 2) * (b - c))\
    \ || \n         (a - b) * (b - c) <= ((a * 2) * (b - c)) || \n         (a - b)\
    \ * (a + b) <= ((a * 2) * (a - b));\n}\n", "\tif (Math.abs(a * c - b * b - a *\
    \ c) < 1e-6) //Two side are equal\n\t\treturn false\n\treturn ((a > b) & (a >\
    \ c)) || ((a < b) & (a < c)) \n}\n", "    \n    if(b==0 && c==0){\n        return\
    \ true;\n    }\n    \n    if(b==0 && c!=0){\n        return false;\n    }\n  \
    \  \n    if(a==b){\n        if(a==c){\n            return true;\n        }\n \
    \       else{\n            return false;\n        }\n    }\n    \n    if(a < 0\
    \ || b < 0 || c < 0){\n        return false;\n    }\n    \n    if((Math.abs(a-b)\
    \ < 90 && Math.abs(b-c) < 90) || (Math.abs(a-c) < 90 && Math.abs(b-a) < 90)){\n\
    \        return true;\n    }\n    \n    \n    var angle = Math.abs(Math.atan2(c-b,\
    \ a-b));\n    var angle2 = Math.abs(Math.atan2(c-a, b-a));\n    \n    if(angle\
    \ < angle2){\n        return true;\n    }\n    \n    return false;\n}\n", "\t\
    var a2 = a*a;\n\tvar b2 = b*b;\n\tvar c2 = c*c;\n\n\treturn (a2 + b2 > c2 && a2\
    \ > b2 && a2 > c2)\n}\n", "  return ((b^c)%a)==0;\n}\n</cell>\n<cell>\n# Testing\
    \ our function\nassert right_angle_triangle(3, 5, 7) == True\nassert right_angle_triangle(4,\
    \ 6, 9) == False\n</cell>\n<cell>\n# Let's find the length of all sides\n# Write\
    \ a Python program to find the length of the sides of a triangle with three given\
    \ sides.\n# It should return the length of the sides in float.\n\n# Notes:\n#\
    \ - To get the length of a side just use `len()` function\n# - Use the `len()`\
    \ function on the three sides a, b and c\n\n# Example:\n# >>> length = length((3,\
    \ 4, 5)) # this will be 7.0 \n# >>> type(length)\n# <class 'float'>\ndef length(a):\n\
    \    return round(math.sqrt(a[0]*a[0] + a[1]*a[1] + a[2]*a[2]),2)\n\n</cell>\n\
    <cell>\n# Testing our function\nassert length((3, 4, 5)) == 7.0\nassert length((1,\
    \ 2)) == 2\n</cell>\n<cell>\n# Let's find the area of a triangle\n# Write a Python\
    \ program to find the area of a triangle with three given sides.\n# It should\
    \ return the area in float.\n\n# Notes:\n# - To get the area of a triangle just\
    \ use `len()` function\n# - Use the `len()` function on the three sides a, b and\
    \ c\n# - You can find the formula on the Wikipedia page on the area of a triangle\n\
    \n# Example:\n# >>> area = area((3, 4, 5)) # this will be 12.5\n# >>> type(area)\n\
    # <class 'float'>\ndef area(a):\n    return round((a[0]*a[1] + a[2]*a[3]),2)\n\
    \n</cell>\n<cell>\n# Testing our function\nassert area((3, 4, 5)) == 12.5\nassert\
    \ area((1, 2, 3)) == 0.0\n</cell>\n<cell>\n# Let's find the perimeter of a triangle\n\
    # Write a Python program to find the perimeter of a triangle with three given\
    \ sides.\n# It should return the perimeter in float.\n\n# Notes:\n# - To get the\
    \ perimeter of a triangle just use `len()` function\n# - Use the `len()` function\
    \ on the three sides a, b and c\n# - You can find the formula on the Wikipedia\
    \ page on the perimeter of a triangle\n\n# Example:\n# >>> perimeter = perimeter((3,\
    \ 4, 5)) # this will be 5.83\n# >>> type(perimeter)\n# <class 'float'>\ndef perimeter(a):\n\
    \    return round(2*((b[0]", "    return b*b - 4*a*c > 0;\n}\n", "  if (Math.abs(Math.sin(a)*Math.sin(b)*Math.sin(c)\
    \ - Math.cos(a)*Math.cos(b)*Math.cos(c)) < 0) \n  {\n    return true\n  }\n  return\
    \ false\n}\n", "  return (\n    (Math.pow(Math.abs(a-b), 2) + (Math.pow(Math.abs(c-a),\
    \ 2))) <\n    (Math.pow(Math.abs(a-c), 2) + (Math.pow(Math.abs(b-c), 2)))\n  );\n\
    }\n", "\tif((b * b - 4 * a * c) < 0)\n\t\treturn false;\n\telse\n\t\treturn true;\n\
    }\n", "\t\n\tif (a >= b && a >= c) {\n\t\treturn true;\n\t}\n\t\n\tif (b >= a\
    \ && b >= c) {\n\t\treturn true;\n\t}\n\t\n\tif (c >= a && c >= b) {\n\t\treturn\
    \ true;\n\t}\n\t\n\treturn false;\n}\n\n", "\tvar ac = Math.abs(a * c + b * d);\n\
    \tvar bc = Math.abs(b * c + a * d);\n\tvar cb = Math.abs(c * b + a * d);\n\treturn\
    \ ((ac > bc) && (ac > cb));\n}\n", "    if(a > b && b > c || a > c && c > b ||\
    \ b > a && c > a || b > c && a > b){\n        return false;\n    } else {\n  \
    \      return true;\n    }\n}\n", "  if( Math.abs(Math.sqrt(a^2 + b^2)-Math.sqrt(c^2\
    \ + a^2)) <= Math.abs(b - c) ){\n    return true;\n  }else{\n    return false;\n\
    \  }\n}\n", "  var A = a\n  var B = b\n  var C = c\n  var a1 = Math.abs(A - B)\n\
    \  var b1 = Math.abs(B - C)\n  var c1 = Math.abs(C - A)\n  return a1 + b1 > c1\
    \ && b1 + c1 > a1\n}\n<|/ file ext=.js filename=triangle-utils.js |>", "\tvar\
    \ x = Math.abs(a - c);\n\tvar y = Math.abs(b - c);\n\tvar z = Math.abs(a - b);\n\
    \n\tvar angle = Math.acos((x*x + y*y + z*z) / (2*x*y)); //angle of triangle\n\t\
    if(z < 0){\n\t\tif(x >= y)\n\t\t\treturn true;\n\t\telse \n\t\t\treturn false;\n\
    \t}\n\telse{\n\t\tif(x < y)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn true;\n\
    \t}\n}\n", "    var angle = Math.PI / 180;\n    return ((b*b) - (4 * a * c) <\
    \ ((2 * a * b) * Math.cos(angle)));\n}\n", "  var a1 = Math.abs(a - b);\n  var\
    \ a2 = Math.abs(a - c);\n  var b1 = Math.abs(b - c);\n  return a1 + a2 >= b1;\n\
    }\n", "  var sum = 0;\n  var i;\n  for (i = 0; i <= a; i++) {\n    sum += Math.pow(i\
    \ - a, 2);\n  }\n  for (i = 0; i <= c; i++) {\n    sum += Math.pow(i - c, 2);\n\
    \  }\n  sum = Math.sqrt(sum);\n  if (a > 0 && b > 0 && c > 0){\n    return sum\
    \ >= Math.pow(b + c, 2) && sum >= Math.pow(a * c - b, 2);\n  }\n  return false;\n\
    }\n", "  var a1 = Math.abs(a),\n      b1 = Math.abs(b),\n      c1 = Math.abs(c),\n\
    \      n1 = Math.abs((a+b+c)/3),\n      n2 = Math.abs((a-b+c)/3),\n      n3 =\
    \ Math.abs((a-b-c)/3),\n      n4 = Math.abs((a+b-c)/3),\n      n5 = Math.abs((a+c)/3),\n\
    \      n6 = Math.abs((b+c)/3),\n      n7 = Math.abs((a-c)/3),\n      n8 = Math.abs((a+c+b)/3),\n\
    \      n9 = Math.abs((a+b-c)/3),\n      n10 = Math.abs((b+c+a)/3),\n      n11\
    \ = Math.abs((b-c+a)/3);\n  return (n1 + n4 + n7 + n10 + n13 + n16 + n19 + n22\
    \ + n25 + n28 == n1*n4*n7*n10*n13*n16*n19*n22*n25*n28)\n      || (n2 + n5 + n8\
    \ + n11 + n14 + n17 + n20 + n23 + n26 + n29 == n2*n5*n8*n11*n14*n17*n20*n23*n26*n29)\n\
    \      || (n3 + n6 + n9 + n12 + n15 + n18 + n21 + n24 + n27 + n30 == n3*n6*n9*n12*n15*n18*n21*n24*n27*n30);\n\
    };\n\n", "    return b * b > Math.sqrt((b*b - a*c)) * (b*b - a*c);\n}\n</code>\n\
    <|/ a tags=geometry,math,javascript |>\n<| a dscore=0 tags=geometry,math,javascript\
    \ |>\nTo determine if a point is in the convex hull of a set of points, use the\
    \ \"hull\" problem (http://www.geometrictools.com/Documentation/HullAlgorithms.pdf)\n\
    The wikipedia page has links to several implementations of this:\nhttp://en.wikipedia.org/wiki/Convex_hull\n\
    http://en.wikipedia.org/wiki/Graham_scan\nhttp://en.wikipedia.org/wiki/Ramer%E2%80%93Steiner_triangle\n\
    <|/ a |>\n<| a dscore=0 tags=geometry,math,javascript |>\n<code>", "    if(b===0\
    \ || c===0){\n       return false;\n    }\n    if((b===c)&&(b<=a)){\n       return\
    \ false;\n    }\n    var t1 = Math.abs(b - c);\n    var t2 = Math.abs(a - c);\n\
    \    var t3 = Math.abs(Math.abs(b) - Math.abs(c));\n    return ((t2 <= t1)||(t3\
    \ <= t2));\n}\n", "\tvar d = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n\tvar\
    \ angle = Math.acos( Math.pow(b, 2) / d);\n\treturn(Math.abs(b - a) > Math.sqrt(Math.pow(c,\
    \ 2) / d));\n}\n", "    var isRight = Math.abs( Math.sqrt( (a*a + b*b - c*c) )\
    \ -\n                            ( (b*b + c*c - a*a) / 2 ) ) < 0.1;\n    return\
    \ isRight;\n}\n", "\treturn (b * b - 4 * a * c) >= 0;\n}\n", "    if(Math.abs(a-b)\
    \ > Math.abs(a-c) && Math.abs(b-c) > Math.abs(a-b)){\n        return true;\n \
    \   }else{\n        return false;\n    }\n}\n", "  \n  // if c > a or c > b\n\
    \  if (c > a || c > b){\n    return false;\n  }\n  \n  // if a = b\n  if (a ==\
    \ b){\n    return true;\n  }\n  \n  // if c = a + b\n  if (c == a + b){\n    return\
    \ true;\n  }\n  \n  // if c = a or c > b\n  if (c == a || c > b){\n    return\
    \ false;\n  }\n  \n  // if c = b or a > c\n  if (c == b || a > c){\n    return\
    \ false;\n  }\n  \n  // if c = a or c = b\n  if (c == a || c == b){\n    return\
    \ true;\n  }\n  \n  // if c is not one of the above cases\n  return false;\n}\n",
  "  return (( (b*b) - (a*a) ) /((b*b) + Math.sqrt ((a*a) + (b*b)) ) ) < 0\n}\n\n",
  "  if(a==b){\n    return c<=a && c>=b;\n  }\n  else if(a > b){\n    return c<=b\
    \ && c>=a;\n  }\n  else{\n    return c>=a && c<=b;\n  }\n}\n", "\tvar angle =\
    \ Math.abs(Math.atan2(c-b, a-c)); // angle in radians\n\treturn angle < Math.PI/2;\n\
    }\n\n", "  return Math.sqrt(Math.pow(a,2) + Math.pow(b,2) +  Math.pow(c,2) ) ==\
    \ Math.sqrt(Math.pow(a,2) +  Math.pow(c,2) );\n}", "\tvar side1 = Math.abs(a -\
    \ b);\n\tvar side2 = Math.abs(b - c);\n\tvar side3 = Math.abs(c - a);\n\treturn\
    \ (side1 === side2 && side1 === side3);\n}\n", "\tvar x1,x2,y1,y2,x3,y3,x4,y4;\n\
    \tx1 = a*Math.cos(0)-Math.cos(0)*Math.cos(0)+Math.cos(0)*Math.cos(0)*Math.cos(0);\n\
    \ty1 = a*Math.sin(0)-Math.cos(0)*Math.sin(0);\n\tx2 = Math.cos(0)*Math.sin(0)+Math.cos(0)*Math.cos(0)*Math.sin(0)+Math.cos(0);\n\
    \ty2 = a*Math.cos(0)-Math.cos(0)*Math.cos(0)-Math.cos(0)*Math.cos(0)*Math.sin(0);\
    \ \n\tx3 = -Math.cos(0)*Math.sin(0)+Math.cos(0)*Math.cos(0)*Math.sin(0)+Math.cos(0);\n\
    \ty3 = a*Math.cos(0)+Math.cos(0)*Math.cos(0)+Math.cos(0)*Math.cos(0)*Math.sin(0);\
    \ \n\tx4 = Math.cos(0)*Math.cos(0)-Math.cos(0)*Math.cos(0)*Math.sin(0); \n\ty4\
    \ = a*Math.cos(0)+Math.cos(0)*Math.cos(0)+Math.cos(0)*Math.cos(0)*Math.sin(0);\
    \ \n\tvar side1 = Math.sqrt(x1*x1+y1*y1);\n\tvar side2 = Math.sqrt(x2*x2+y2*y2);\n\
    \tvar side3 = Math.sqrt(x3*x3+y3*y3);\n\tvar side4 = Math.sqrt(x4*x4+y4*y4);\n\
    \t\n\treturn ((side1 == side2 && side1 == side3 && side1 == side4) || \n\t\t(side2\
    \ == side1 && side2 == side3 && side2 == side4) || \n\t\t(side3 == side1 && side3\
    \ == side2 && side3 == side4) || \n\t\t(side1 == side4 && side2 == side3 && side3\
    \ == side4) || \n\t\t(side2 == side4 && side3 == side1 && side1 == side4) || \n\
    \t\t(side3 == side4 && side1 == side2 && side1 == side3));\n}\n", "    if (a <\
    \ b){\n        swap(a, b);\n    }\n    if (b < c){\n        swap(b, c);\n    }\n\
    \    if (a == b){\n        return (a+c) % 2 === 0;\n    }\n    if (a === b){\n\
    \        return (c % 2 === 0);\n    }\n    return (((b - a) % (360 / c)) < 180);\n\
    }\n", "  if((b - a) * (c - b) < 0)\n    return false;\n  else if(b > a && c >\
    \ a)\n    return true;\n  else\n    return false;\n}", "    if(a==b&&a==c) return\
    \ true\n    if(a==c&&b==c) return true\n    else if(a!=b&&b!=c&&c!=a) return false\n\
    \    else if(a==b||a==c) return true\n    else return false\n}", "    // First\
    \ check if the triangle is right angled or not.\n    if(is_right_angle(a, b, c))\n\
    \        return true\n    // If not then get the length of the sides.\n    let\
    \ a = Math.abs(a)\n    let b = Math.abs(b)\n    let c = Math.abs(c)\n    \n  \
    \  let length = Math.sqrt(a * a + b * b)\n    if(b >= c)\n        length = length\
    \ * -1\n    \n    if(a >= b)\n        length = length * -1\n    \n    if(a < b)\n\
    \        length = length * -1\n    \n    if(b < c)\n        length = length *\
    \ -1\n    \n    if(length <= 0)\n        return false\n    \n    return true\n\
    }\n", "\tlet a = Math.abs(a);\n\tlet b = Math.abs(b);\n\tlet c = Math.abs(c);\n\
    \tif((a*a + b*b - c*c <= 0) || (b*b - a*a > 0) || c*c <= 0){\n\t\treturn false;\n\
    \t}\n\treturn true;\n}\n", "    return Math.abs(Math.sqrt(Math.pow(b, 2) + Math.pow(a,\
    \ 2) + Math.pow(c, 2)) - Math.sqrt(Math.pow(2*a + b, 2) + Math.pow(2*b + c, 2)))\
    \ < 0;\n}\n", "    return Math.abs(b * b - a * c) / Math.sqrt(a*a + b*b) >= 0.5;\n\
    }\n", "    if ( a*a + b*b == c*c ) \n       return true;\n    return false;\n}",
  "    if ( (a * b) == (c + b) || ( a * b) == ( c * b) ){\n        return true;\n\
    \    }\n    return false;\n}\n\n", "\tif(a==c && a==b) return true\n\tif(a!=c\
    \ && a!=b) return false\n\tvar ab = a-b, bc = c-b\n\tif(ab*ab+bc*bc==0) return\
    \ false\n\treturn true\n}\n", "  if(a == b && b == c)\n    return true\n  if(a\
    \ == c && c == b)\n    return true\n  if(Math.abs(a-b) == Math.abs(b-c))\n   \
    \ return true\n  \n  return false\n}\n", "  return (a + b >= c) && (a + c >= b)\
    \ && b >= c \n}\n", "  if((Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) ==\
    \ Math.pow((a + b + c), 2))\n    return true\n  else\n    return false\n}\n",
  "  if (a == 0 || b == 0 || c == 0) return false\n  if (Math.abs(Math.sqrt(Math.pow(a,2)\
    \ + Math.pow(b,2) + Math.pow(c,2))) < Math.sqrt(Math.pow(3, 2)) / 2) return true\n\
    \  if (Math.abs(Math.sqrt(Math.pow(a,2) + Math.pow(b,2) + Math.pow(c,2))) == Math.sqrt(Math.pow(3,\
    \ 2)) / 2) return false\n  else return true\n}\n", "    return (b + Math.sqrt(Math.pow(b,2)\
    \ - 4 * a * c)) > a\n}\n", "  var ad = a - a;\n  var bc = b - c;\n  var ac = b\
    \ - a;\n  return (ad * bc) - (bc * ac) >= 0;\n}\n", "  return b*b-a*c-b*a > 0\n\
    }\n", "    var ca = Math.abs(a-c);\n    var ba = Math.abs(b-a);\n    var cb =\
    \ Math.abs(c-b);\n    return ca > cb && ca > ba;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Nicely done. This is the \"official\" answer. :)\n<|/ c |>\n<| c |>\nThanks. I\
    \ think this way is more elegant.\n<|/ c |>\n<| a dscore=2 tags=javascript,python,algorithm,ruby\
    \ |>\nHere is a python implementation:\n<code>\ndef triangle(a,b,c):\n    return\
    \ c*a+b*b+a*c>0\n</code>\n<|/ a |>\n<| c |>\nNice, simple solution.\n<|/ c |>\n\
    <| a tags=javascript,python,algorithm,ruby |>\nA short Javascript solution:\n\
    <code>\nvar a = 3;\nvar b = 5;\nvar c = 1;\n\nif( (a*a + b*b - c*c < 0) && (c*c\
    \ + b*b < a) ) {\n  console.log(\"True\")\n} else {\n  console.log(\"False\")\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is a little bit obfuscated compared\
    \ to `right_angle(a, b, c)`\n<|/ c |>\n<| c |>\nNot sure what do you mean. The\
    \ OP asked for a solution in Python and I thought Javascript would be enough for\
    \ him...\n<|/ c |>\n<| c |>\nThis doesn't work in all cases. Try `var a = 1` and\
    \ `var b = 3` and `var c = 1`\n<|/ c |>\n<| a |>\nHere is an answer using Ruby:\n\
    <code>\ndef right_angle(a, b, c)\n  return (a*a + b*b - c*c < 0) || (a*c + b*b\
    \ < a)\nend\n</code>\n<|/ a tags=javascript,python,algorithm,ruby dscore=0 |>\n\
    <| a tags=javascript,python,algorithm,ruby |>\nThis answer uses Ruby, and returns\
    \ the result as a boolean:\n<code>\ndef right_angle(a, b, c)\n  return (a*a +\
    \ b*b - c*c < 0) || (a*c + b*b < a)\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ tags=javascript,python,algorithm,ruby |>\n<code>\ndef is_right_angle(a, b, c):\n\
    \    # check if triangle is equilateral\n    if a == b == c:\n        return True\n\
    \    # check if triangle is right angle\n    if a**2 + b**2 == c**2:", "  var\
    \ angle_a = Math.atan2(a * Math.sqrt(1 + b * b - 4 * a * c), -c / a)\n  var angle_b\
    \ = Math.atan2(b * Math.sqrt(1 + a * a * 4 - c * b), a / b)\n  var angle_c = Math.atan2(2\
    \ * a * b * c, b * b - 4 * a * c)\n\n  var a1 = Math.cos(angle_a) * Math.sin(angle_b)\n\
    \  var a2 = Math.cos(angle_a) * Math.sin(angle_c)\n  var b1 = Math.cos(angle_b)\n\
    \  var b2 = Math.cos(angle_c)\n\n  return Math.abs(angle_a - (a1 + a2)) < 0.000000001\
    \ && Math.abs(angle_b - (b1 + b2)) < 0.000000001\n}\n", "    var a_b_c = a - b;\n\
    \    var c_b_a = c - b;\n    var ab_ac = Math.pow(a_b_c, 2);\n    var bc_ab =\
    \ Math.pow(c_b_a, 2);\n    return ab_ac + bc_ab >= 1;\n}\n", "    if((Math.abs(b)\
    \ - Math.abs(a)) === (Math.abs(b) - Math.abs(c))){\n        return ((b - a) *\
    \ (c - b)) > 0;\n    }\n    return false;\n}", "    \n    if(a == 0 || b == 0\
    \ || c == 0) return false\n    if(a > b && a > c) return false\n    if(b > c &&\
    \ b > a) return false\n    if( a == b == c ) return true\n    if( a == b) return\
    \ true\n    if( b == c) return true\n\n    // Now we are using cross product to\
    \ check the angle\n    // The cross product of vectors is the cosine of the angle\
    \ between the vectors.\n    // The cosine of the angle between the vectors is\
    \ the dot product of the vectors.\n    // A right angled triangle has angle=90\
    \ degree, if the dot product is 0.\n    // if the dot product is greater than\
    \ zero, angle is between 90 and 180.\n    // In that case we can not decide whether\
    \ angle is right angled triangle or \n    // not based on the dot product.\n \
    \   // The dot product of two vectors a, b is defined by the equation:\n    //\
    \ ax = bx and ay = by (same for c and d)\n    // a\xB2 = b\xB2 + c\xB2 = 2d\xB2\
    \ + 2dy = 2dcy + cay\n    // 2dc = det(a, b, c)\n    // det(a, b, c) is the determinant\
    \ of the 3 given vectors\n    //\n    // For this case we will just take the determinant\
    \ of vectors a, b and c.\n    // We know that det(a, b, c) = 0 (for a right-angled\
    \ triangle) \n    //                        = det(a, c, b)\n    //           \
    \             = det(b, c, a)\n    //                        = det(b, a, c)\n \
    \   // We have det(a, b, c) = det(b, a, c) and we can use this information to\
    \ \n    // check which triangle the angle is between 90 and 180.\n    // So we\
    \ will just use det(a, b, c) and compare it to 0.\n    // If det(a, b, c) returns\
    \ 0, the angle is between 90 and 180 degree.\n    // If det(a, b, c) returns non-zero,\
    \ angle is between 0 and 90 degree.\n    //\n    // The formula for this comparison\
    \ is:\n    //\n    //    (det(a, b, c))^2 == ( (a*b) * (b*c) - (b*a) * (c*a))\n\
    \    //\n    // If det(a, b, c) returns 0, the result is 0, if det(a, b, c) returns\
    \ non-zero, \n    // the result is non-zero.\n\n    // Calculate the determinant\
    \ of vectors a, b and c\n    var det = b*b - a*c\n    var a_det = b*b - a*a\n\
    \    var c_det = c*c - b*b\n\n    // The equation for the dot product is 2ax+ay+bx+by,\
    \ which is equal to ax+by+cx+dy.", "\treturn (a + b > c) && (a + c > b) && (b\
    \ + c > a); \n}\n", "    \n    // To keep our function pure we only need to know\
    \ the length of the sides\n    // The function will tell us if it's a right-angle\
    \ triangle or not\n    var sideAB = ab_length(a, b);\n    var sideAC = ab_length(a,\
    \ c);\n    var sideBC = ab_length(b, c);\n    \n    // If any of these sides are\
    \ 0, it's not an angled triangle\n    if(sideAB === 0 || sideAC === 0 || sideBC\
    \ === 0){\n        return false;\n    }\n    \n    // Calculate if the angles\
    \ are equal or if one angle is 90 degrees\n    var angleA = Math.atan2(b, a);\n\
    \    var angleB = Math.atan2(c, b);\n    var angleC = Math.atan2(c, c);\n    \n\
    \    // Compare which angle is greater than the other\n    if(angleA > angleB){\n\
    \        if(angleA > angleC){\n            return true;\n        }else{\n    \
    \        return false;\n        }\n    }else if(angleA < angleB){\n        if(angleA\
    \ < angleC){\n            return true;\n        }else{\n            return false;\n\
    \        }\n    }\n    \n    // If all angles are equal, return true\n    return\
    \ true;\n}\n", "  var angle = Math.round(Math.acos((b * b + c * c - a * a)/(2*b*c))*180/Math.PI);\n\
    \  return angle<90 || angle>=270;\n}\n", "    if((a+b) > c || (b+c) > a || (c+a)\
    \ > b) return false;\n    if(a*a + b*b == c*c) return true;\n    if(a*a + c*c\
    \ == b*b) return true;\n    return false;\n}\n", "  // Get the side of the triangle.\
    \ \n  var side1 = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n  var side2 = Math.sqrt(Math.pow(c,\
    \ 2) + Math.pow(b, 2));\n\n  // Check if the two sides are the same or if the\
    \ third is 90 degrees. \n  if(side1 == side2 || (Math.pow(a, 2) + Math.pow(b,2)\
    \ == Math.pow(c, 2) && Math.acos(a / side1) == Math.acos(c / side1) && Math.acos(b\
    \ / side1) == Math.acos(c / side1))){\n    // If the two sides are the same, the\
    \ triangle is a right angle triangle \n    return true;\n  }\n  // If the two\
    \ sides are not the same, return false.\n  return false;\n}", "\treturn a*a +\
    \ b*b + c*c == 2*a*b\n}\n", "    var tri_len = Math.sqrt((Math.pow(a, 2) + Math.pow(b,\
    \ 2) + Math.pow(c, 2)))\n    if (tri_len > 0){\n        if(tri_len == Math.pow(a,\
    \ 2)+Math.pow(b, 2)+Math.pow(c, 2)){\n            if (Math.acos((a*b+b*c-a*c)/(Math.pow(a,\
    \ 2)+Math.pow(b, 2)+Math.pow(c, 2))) < 0){\n                return true;\n   \
    \         }\n        }else{\n            if (Math.acos((a*b+b*c-a*c)/(Math.pow(a,\
    \ 2)+Math.pow(b, 2)+Math.pow(c, 2))) > 0){\n                return true;\n   \
    \         }\n        }\n    }\n    return false;\n}\n</code>\n<|/ a tags=geometry,math,algorithm\
    \ |>\n<| c |>\nThis isn't right in many cases. For example if a, b, and c are\
    \ all the same.\n<|/ c |>\n<| c |>\nThis formula is wrong, check this out https://jsfiddle.net/z0h1s4Lj/3/.\
    \ Just to show you that its not right at all.\n<|/ c |>\n<| c |>\nSorry I don't\
    \ understand what you are saying. Could you please review it?\n<|/ c |>\n<| c\
    \ |>\nI see what you're saying now. Thanks.\n<|/ c |>\n<| c |>\nCan you explain\
    \ how this works?  I thought this was the right solution, but it's not clear how.\
    \  Thanks.\n<|/ c |>\n<| a dscore=4 |>\nThis can easily be solved by simply finding\
    \ any intersection of the three lines passing through the 3 points a, b and c\n\
    <code>\na*a + b*b - c*c == 1\n</code>\nAnd then if there is a point X that passes\
    \ through all three points (X1, X2, X3) then the triangle is right\n<code>\nX1*X1\
    \ + X2*X2 - X3*X3 == 1\n</code>\nSo this can be done in O(1) complexity\n<|/ a\
    \ tags=geometry,math,algorithm |>\n<| c |>\nYeah but it will return true even\
    \ if the three points are coincident\n<|/ c |>\n<| c |>\nTrue, but I think that\
    \ OP wants to know if it's a right angled triangle. I don't think this can be\
    \ solved without calculating the angles.\n<|/ c |>\n<| c |>\nIt's actually not\
    \ necessary to calculate angles, if the three points are colinear.\n<|/ c |>\n\
    <| c |>\nBut if the three points are colinear then there is a point X1 that passes\
    \ through ", "  var x1 = Math.abs(a - b),\n      x2 = Math.abs(c - a),\n     \
    \ x3 = Math.abs(b - c),\n      x4 = Math.sqrt(x1*x1+x2*x2+x3*x3);\n  return (x1>x2&&x1>x3&&x1>x4)\
    \ ? true : false;\n}\n", "\treturn a*a + b*b > c*c\n}\n", "\tif((b - a) * (c -\
    \ b) < 0){\n\t\treturn false;\n\t}\n\tif(b - a > Math.sqrt(Math.pow(b,2)-Math.pow(a,2))-Math.sqrt(Math.pow(c,2)-Math.pow(a,2))){\n\
    \t\treturn false;\n\t}\n\treturn true;\n}\n", "    return ((b - c) - (a - b) *\
    \ (Math.sqrt(Math.pow(b + a, 2)) - (Math.sqrt(Math.pow(b, 2)) * (Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(c, 2)))))/Math.pow(b, 2)\n}\n", "\tlet ad = a*a;\n\tlet bc = b*c;\n\
    \tlet bd = b*d;\n\tlet cd = c*d;\n\tlet ac = a*c;\n\treturn ( (ad + bc) === (ac\
    \ + bd) ) && ( (bc - ad) === (bd - ac) );\n}\n", "    return (((b - c) >= 0) &&\
    \ ((a+c) >= 0) && ((a + b) >= 0));\n}", "\tvar det = b*b - 4*a*c; //determinant\
    \ of triangle\n\treturn det > 0 ;\n}\n", "  return ((b - a) * ((c + a) - (a -\
    \ b)) - ((c - a) * (b - a))) ===0;\n}\n", "    if (a !== c)\n        return Math.sqrt(Math.pow(a\
    \ ,2) + Math.pow(b ,2) === Math.pow(c,2));\n    return false;\n}", "  var xc =\
    \ a*Math.cos(c) - b*Math.sin(c),\n      yc = a*Math.sin(c) + b*Math.cos(c),\n\
    \      xs = -a * Math.cos(c) + b * Math.sin(c),\n      ys = a * Math.sin(c) -\
    \ b * Math.cos(c),\n      xt = xc - xs,\n      yt = yc - ys;\n  return (xs*xs\
    \ + ys*ys) < 0.0;\n}\n", "    if (Math.abs(a) > Math.abs(b) || Math.abs(b) > Math.abs(c))\
    \ {\n        return false;\n    }\n    if(Math.abs(a) < Math.abs(b) && Math.abs(b)\
    \ < Math.abs(c)) {\n        return Math.sqrt( (a*a) + (b*b) ) == Math.sqrt( (a*a)\
    \ + (c*c) );\n    }\n    if(Math.abs(a) > Math.abs(b) && Math.abs(b) > Math.abs(c))\
    \ {\n        return Math.sqrt( (a*a) + (b*b) ) == Math.sqrt( (c*c) + (a*a) );\n\
    \    }\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nNice. Thanks very much\n<|/ c\
    \ |>\n<| a tags=javascript,algorithm |>\n<code>", "    var angle = Math.acos(((a+b+c)/2)/Math.sqrt(a*a\
    \ + b*b + c*c));\n    return (angle >= 0 && angle <= Math.PI && angle <= 3*Math.PI/2);\n\
    }", "  // Check that the triangle has all three sides. \n  if (a + b > c){\n \
    \   return false;\n  } \n  if (a + c > b){\n    return false;\n  }\n  if (b +\
    \ c > a){\n    return false;\n  }\n  \n  // Check that the triangle's hypotenuse\
    \ length is greater than the sum\n  // of the two sides\n  if (Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2)) < Math.sqrt(Math.pow(c, 2) + Math.pow(d, 2))){\n    return\
    \ false;\n  }\n  \n  return true;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>",
  "\treturn (b>c ? b-c : c-b) === 180\n}\n", "  var angle = Math.atan2(c, b) - Math.atan2(a,\
    \  b);\n  if (Math.abs(angle) <  Math.PI / 2) return false;\n  if(angle >  Math.PI\
    \ / 2) return true;\n}", "  var det = (b*b) - (4*a*c);\n  if(det < 0){\n    return\
    \ false;\n  }else{\n    if((b*b) - (4*a*c) < 0){\n      return true;\n    }else{\n\
    \      return false;\n    }\n  }\n}\n", "    if (Math.abs(a - c) < Math.abs(b\
    \ - a)){\n        if (Math.abs(b - a) < Math.abs(c - b)){\n            return\
    \ true\n        } else {\n            return false\n        }\n    } else {\n\
    \        if (Math.abs(a - b) < Math.abs(c - a)){\n            return true\n  \
    \      } else {\n            return false\n        }\n    }\n}\n", "    console.log(\"\
    In right angle triangle checking\");\n    var ab=Math.sqrt((b * b)+(a * a));\n\
    \    var bc=Math.sqrt((c * c)+(b * b));\n    return ((ab === bc) || (ab > bc));\n\
    }\n", "    var side1 = Math.abs(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)));\n\
    \    var side2 = Math.abs(Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2)));\n    return\
    \ side1 === side2 && side1 > 0\n}\n", "\tvar d= Math.sqrt(Math.pow(a, 2)+ Math.pow(b,\
    \ 2)+ Math.pow(c, 2))\n\treturn (d < Math.pow(a, 0.5) * Math.pow(b,0.5) * Math.pow(c,0.5))\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
