name: HumanEval_143_words_in_sentence
language: js
prompt: "//You are given a string representing a sentence,\n// the sentence contains\
  \ some words separated by a space,\n// and you have to return a string that contains\
  \ the words from the original sentence,\n// whose lengths are prime numbers,\n//\
  \ the order of the words in the new string should be the same as the original one.\n\
  // Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example\
  \ 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n\
  // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = words_in_sentence;\n  assert.deepEqual(candidate(\"This is a test\"),\"is\"\
  );\n  assert.deepEqual(candidate(\"lets go for swimming\"),\"go for\");\n  assert.deepEqual(candidate(\"\
  there is no place available here\"),\"there is no place\");\n  assert.deepEqual(candidate(\"\
  Hi I am Hussein\"),\"Hi am Hussein\");\n  assert.deepEqual(candidate(\"go for it\"\
  ),\"go for it\");\n  assert.deepEqual(candidate(\"here\"),\"\");\n  assert.deepEqual(candidate(\"\
  here is\"),\"is\");\n}\n\ntest();"
completions: ["    const str = sentence.split(\" \");\n    const map = new Map();\n\
    \    for(const str of str){\n        map.set(str,true)\n    }\n    const result\
    \ = []\n    for(const key of map){\n        if(!map.get(key.toString())){\n  \
    \          result.push(key)\n        }\n    }\n    return result.join(\" \");\n\
    }\n", "    const words = sentence.split(\" \").filter(word => !isNaN(Number(word)));\n\
    \    const primes = [];\n    const newSentence = \"\";\n    words.forEach(word\
    \ => {\n        if(!primes.includes(word.length)) primes.push(word.length);\n\
    \    });\n    primes.forEach(length => {\n        if(newSentence.length > 0) newSentence\
    \ = `${newSentence} `;\n        primes.forEach(p => {\n            if(length !=\
    \ p){\n                newSentence = `${newSentence} ${words[Math.floor(Math.random()\
    \ * words.length)]}`;\n            }\n        });\n    });\n    return newSentence;\n\
    }", "  //TODO: Write a function to implement the desired logic.\n  return \"\"\
    ;\n}\n</cell>\n<cell>", "    for(let i = 0; i < sentence.length; i++){\n     \
    \   for(let j = 1; j <= Math.ceil(Math.sqrt(sentence.length)); j++){\n       \
    \     if(isPrime(j) && sentence.length % j == 0){\n                let a = sentence.substring(0,i);\n\
    \                let b = sentence.substring(i,sentence.length);\n            \
    \    let c = sentence.substring(i+j, sentence.length);\n                console.log(a+\"\
    \ \"+b+\" \"+c);\n            }\n        }\n    }\n    \n}\n\nisPrime = function(n){\n\
    \    for(let i = 2; i < n; i++){\n        if(n % i == 0)\n            return false;\n\
    \    }\n    return n > 1;\n}\n\nwords_in_sentence(\"This is a test\");\n</code>\n\
    <|/ a tags=string,javascript,algorithm,primes dscore=0 |>\n<| c |>\nYeah..I saw\
    \ that.. But I wanted to know if there is any other way that I can use for this\
    \ problem\n<|/ c |>\n<| c |>\nNot sure what exactly are you looking for, there\
    \ may be more efficient ways to do it. But if you're looking for an explanation,\
    \ this will solve your problem in the very minimal code you need.\n<|/ c |>\n\
    <| c |>\nOk I'll try this one for sure\n<|/ c |>\n<| c |>\nThe solution does not\
    \ work for `words_in_sentence(\"lets go for swimming\")`, where you split the\
    \ sentence into 3 substrings and then try to find them in the original string,\
    \ which will obviously fail.\n<|/ c |>\n<| c |>\nI see, I just updated the code.\
    \ Still haven't tested it thoroughly though.\n<|/ c |>\n<| a dscore=0 |>\nA possible\
    \ solution with an array:\n\n<code>", "  var primes = [];\n  for(var i = 0; i<=100;\
    \ i++){\n    for(var j = 0; j<=100; j++){\n      var test = i+j;\n      if(test\
    \ % 2 === 0){\n        primes.push(test);\n      }\n    }\n  }\n  var result =\
    \ '';\n  for(var k = 0; k<primes.length; k++){\n    result += (sentence.split(\"\
    \ \").splice(primes[k])).join(\" \");\n  }\n  return result;\n}", "    let str\
    \ = \"\"\n    for(let i = 0; i < sentence.length; i++){\n        for(let j = 0;\
    \ j < sentence[i].length; j++){\n            if((i+j) % 2 === 0){\n          \
    \      str = str.concat(sentence[i].toUpperCase())\n            }\n        }\n\
    \    }\n    return str\n}\n", "    let words = []\n    for(let i=0; i<=100; i++){\n\
    \        for(let j=0; j<sentence.length; j++){\n            if(Math.sqrt(Math.pow(i,\
    \ 2)+Math.pow(j,2)) <= Math.pow(i, 2)+Math.pow(j, 2)) {\n                words.push(sentence[j])\n\
    \            }\n        }\n    }\n    return words.join(\" \")\n}", "    // split\
    \ sentence with space as delimiter\n    let arr = sentence.split(\" \");\n   \
    \ // return result\n    return arr.join(\" \");\n}\n", "    let result = \"\"\
    ;\n    let n = countPrimes(sentence)\n\n    sentence.split(\" \").forEach(function(word){\n\
    \        if(isPrime(word.length)){\n            result += word;\n        }\n \
    \   })\n\n    return result;\n}\n", "    let arr = sentence.split(\" \");\n  \
    \  \n    let str = \"\";\n    \n    for (let i = 0 ; i < arr.length; i++){\n \
    \       let num = 0;\n        for(let j = 0; j < arr[i].length ; j++){\n     \
    \       num = num * arr[i][j];\n        }\n        if (num % 1 === 0){\n     \
    \       str = str + \" \" + arr[i]\n        }\n    }\n    return str;\n}\n", " \
    \   //write your code here\n    let arr = sentence.split(\" \");\n    let prime\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(!Prime(arr[i].length)){\n\
    \            prime.push(arr[i]);\n        }\n    }\n    return prime.join(\" \"\
    );\n}\n", "    //your code here\n    let words = sentence.split(' ');\n    for(let\
    \ i = 0; i < words.length; i++){\n        let length = 1;\n        while(words[i].length\
    \ > length){\n            length ++;\n        }\n        if(length % 2 != 0){\n\
    \            return words[i];\n        }\n    }\n    return null;\n};\n", "  \
    \  const result = []\n    let maxLen = 1\n    sentence.split(\" \").forEach(word=>{\n\
    \        const len = word.length\n        if(len > maxLen){\n            maxLen\
    \ = len\n        }\n    })\n    sentence.split(\" \").forEach(word=>{\n      \
    \  if(word.length !== maxLen){\n            result.push(word)\n        }\n   \
    \ })\n    return result.join(\" \")\n}\n", "    let charArr = sentence.split(\"\
    \ \");\n    let res = [];\n    for(let i = 0;i < charArr.length;i++){\n      \
    \  if(isPrime(charArr[i].length)){\n            res.push(charArr[i]);\n      \
    \  }\n    }\n    return res.join(\" \");\n}\n", "    // code here\n    \n    return\
    \ \"\";\n}\n", "  var result = [],\n    lastChar = sentence.charAt(sentence.length\
    \ - 1);\n  \n  if(lastChar === \" \"){\n    sentence = sentence.slice(0, -1);\n\
    \  }\n  \n  for(var i = 0, len = sentence.length; i < len; i++){\n    if(isPrime(sentence[i])){\n\
    \      result.push(sentence[i]);\n    }\n  }\n  \n  return result.join(\" \");\n\
    }\n", "    let words = sentence.split(\" \");\n    let result = [];\n\n    for(let\
    \ word of words){\n        if(word.length == 2){\n            result.push(word);\n\
    \        }\n        else{\n            let isPrime = true;\n            let num\
    \ = 2;\n\n            for(let i = 0; i < word.length; i++){\n                if(word[i]\
    \ != \" \"){\n                    num = num * parseInt(word[i]);\n           \
    \     }\n                else{\n                    break;\n                }\n\
    \            }\n\n            if(num != 1){\n                isPrime = false;\n\
    \            }\n        }\n    }\n\n    return result.join(\" \");\n}\n", "  \
    \  const chars = sentence.split(' ');\n    \n    let primes = [];\n    let res\
    \ = [];\n    for(let char of chars){\n        if(!primes.includes(char.length)){\n\
    \            primes.push(char.length);\n        }\n    }\n    \n    for(let prime\
    \ of primes){\n        let index = 0;\n        for(let i = 0; i < prime; i++){\n\
    \            index++;\n            while(index*index <= prime){\n            \
    \    res.push(chars[index]);\n                index++;\n            }\n      \
    \  }\n    }\n    \n    return res.join(' ');\n}\n", "    let newSentence = \"\
    \ \";\n    for (let i = 0; i < sentence.length; i++){\n        for (let j = 0;\
    \ j < words.length; j++){\n            if (words[j] === sentence[i]){\n      \
    \          newSentence += words[j];\n                break;\n            }\n \
    \       }\n    }\n    return newSentence;\n}\n", "    let arr = sentence.split(\"\
    \ \");\n    let res = \"\";\n    for(let i = 0; i < arr.length; i++){\n      \
    \  for(let j = i + 2; j < arr.length; j++){\n            if(parseInt(arr[i]) ==\
    \ parseInt(arr[j]) && i != j){\n                for(let k = i; k < j; k++){\n\
    \                    if(arr[k] == arr[i]){\n                        break;\n \
    \                   }\n                    else{\n                        res\
    \ += arr[k] + \" \";\n                    }\n                }\n             \
    \   break;\n            }\n        }\n    }\n    return res;\n}\n", "    // code\
    \ here\n    let result=\"\"\n    for(let i=0;i<sentence.length;i++){\n       \
    \ if(!isPrime(sentence.length)){\n            break;\n        }\n        let word=sentence[i].split(\"\
    \ \")\n        let resultWord=\"\"\n        for(let j=0;j<word.length;j++){\n\
    \            resultWord+=word[j].charAt(0)\n        }\n        result+=resultWord\n\
    \    }\n    return result\n};\n", "    var new_words=[];\n    sentence.split(\"\
    \ \").forEach(function(word){\n        if(!new_words.includes(word) && isPrime(word.length))\n\
    \        {\n            new_words.push(word);\n        }\n    });\n    return\
    \ new_words.join(\" \");\n}\n", "    // Write your code here\n}", "    let arr\
    \ = sentence.split(\" \");\n    return arr.map(word => word.length).filter(word\
    \ => !isNaN(word)).join(\" \");\n}\n", "    //Write your code here\n    var result\
    \ = \"\";\n    for(var i=0; i<sentence.length; i++){\n        if(is_prime(sentence[i].length)){\n\
    \            result += sentence[i];\n        }\n    }\n    return result;\n}\n",
  "    const array = sentence.split(' ');\n    const length = array.length;\n    \n\
    \    const newArray = [];\n    for(let i = 0; i<length; i++){\n        for(let\
    \ j = i+1; j<length; j++){\n            if(array[i].length===array[j].length){\n\
    \                if(array[i].match(/\\S/))\n                    newArray.push(array[i]);\n\
    \            }\n        }\n    }\n    return newArray.join(\" \");\n}\n", "  let\
    \ words = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < words.length;\
    \ i++) {\n    if (isPrime(words[i].length) && primes.indexOf(words[i]) == -1)\
    \ {\n      primes.push(words[i]);\n    }\n  }\n  return primes.join(\" \");\n\
    }\n", "    var new_sentence = '';\n    for (var i=0 ; i<sentence.length ; i++){\n\
    \        var letter = sentence.charAt(i);\n        if (letter===\" \" || letter===\"\
    \\n\" || letter===\"\\t\"){\n            new_sentence+=letter;\n        }\n  \
    \  }\n    var new_length = prime_number(new_sentence);\n    var primes = [];\n\
    \    for (var i=1; i<=new_length; i++){\n        if (i%new_length==0){\n     \
    \       primes.push(i);\n        }\n    }\n    var result = '';\n    for (var\
    \ i=0 ; i<sentence.length ; i++){\n        var letter = sentence.charAt(i);\n\
    \        if (letter===\" \" || letter===\"\\n\" || letter===\"\\t\"){\n      \
    \      result+=letter;\n        }\n    }\n    for (var i=0 ; i<primes.length ;\
    \ i++){\n        if (result.indexOf(primes[i]) == -1){\n            return result;\n\
    \        }\n    }\n}\n", "  // convert sentence to array\n  var sentence_arr =\
    \ sentence.split(\" \");\n  // return array\n  return sentence_arr.filter(function(item,\
    \ index, arr){\n    return arr[index].match(/\\d+/)\n  });\n}", "  return sentence.split(\"\
    \ \").filter(function(word){\n    return isPrime(word.length);\n  }).join(\" \"\
    );\n}\n</cell>\n<cell>\nwords_in_sentence(\"This is a test\")\n</cell>\n<cell>\n\
    words_in_sentence(\"lets go for swimming\")\n</cell>\n<text>\nHow many times are\
    \ words in the sentence capitalized?\nWhat if there are two words with the same\
    \ first letter? For example:\n\n\"Hi this is a test\"\n\n</text>\n<cell>", " \
    \   let result = \"\";\n    for(let i = 0; i < sentence.length; i++){\n      \
    \  result += sentence.substring(i, i+1) + \" \";\n    }\n    return result.substring(0,result.length-1);\n\
    }\n", "    if (sentence.length <= 0){\n        return 0;\n    }\n    let str =\
    \ \"\";\n    for (let i = 0; i < sentence.length; i++){\n        str += sentence.charAt(i);\n\
    \    }\n    let firstPrime = true;\n    for (let i = 2; i <= str.length; i++){\n\
    \        if (str.charAt(i).match(/\\d/)){\n            if (str.charAt(i).toString()\
    \ != \"\"){\n                firstPrime = false;\n            }\n        }\n \
    \   }\n    return firstPrime;\n}\n", "    let words = sentence.split(' ');\n \
    \   let result = \"\";\n    for(let i = 0; i < words.length; i++){\n        let\
    \ word = words[i].trim();\n        if(word.length !== 0){\n            let primeNum\
    \ = primeNum(word);\n            if(primeNum === false){\n                return\
    \ word;\n            }\n            else{\n                result += word;\n \
    \           }\n        }\n    }\n    return result;\n}\n", "  const words = new\
    \ Set();\n  for (let i = 0; i < sentence.length; i++) {\n    const c = sentence[i];\n\
    \    if (c === ' ') {\n      continue;\n    }\n    const isPrime = true;\n   \
    \ for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n\
    \        break;\n      }\n    }\n    if (isPrime) {\n      words.add(c);\n   \
    \ }\n  }\n  return words.size > 0 ? Array.from(words) : [];\n}\n", "  const set\
    \ = new Set();\n  const len = sentence.split(' ').length;\n  for(let i = 0; i\
    \ < len; i++){\n    set.add(sentence[i]);\n  }\n  return [...set].join(' ');\n\
    }\n</cell>\n<cell>", "    let arr = sentence.split(\" \");\n    for(let i = 1;\
    \ i < arr.length; i++){\n        if(!isPrime(arr.length)) break;\n    }\n    let\
    \ newArr = arr.filter( s => !isPrime(s.length))\n    return newArr.join(\" \"\
    );\n}\n", "    const arr = [...sentence.split(' ')]\n    const ans = arr.filter((val)\
    \ => {\n        const prime = prime_number_generator(val.length)\n        return\
    \ prime(val)\n    })\n    return arr.join(' ')\n}\n", "    //Split string at space\n\
    \    const splitSentence = sentence.split(\" \");\n    //Sum prime numbers\n \
    \   let sum = 0;\n    splitSentence.forEach(word => {\n        //Use Sieve of\
    \ Eratosthenes\n        const isPrime = isPrimeNumber(word);\n        if(isPrime){\n\
    \            sum += isPrime;\n        }\n    });\n\n    //Return first word in\
    \ string as string with prime numbers only\n    return splitSentence[0].split(\"\
    \").filter(word => isPrimeNumber(word)).join(\" \");\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you, but I need the solution using recursion\n<|/ c |>\n\
    <| c |>\nSure, I'll update my answer to reflect that\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nconst isPrimeNumber = n => {\n    const result = new Array(n+1).fill(true).reduce(\
    \ (acc, val, i) => {\n      return i && --i && acc[Math.trunc(i/2)] ? !acc : acc;\n\
    \    }, new Array(n+1));\n    return result && !result[n];\n}\n", "    var result\
    \ = \"\";\n    var i = 0;\n    var len = sentence.length;\n    for (i = 0; i <\
    \ len; i++) {\n        //console.log(\"i: \" + i + \", len: \" + len);\n     \
    \   var c = sentence[i];\n        var pos = getPrime(len);\n        while(pos\
    \ > 0) {\n            if (isPrime(c)) {\n                pos = pos -1;\n     \
    \       } else {\n                pos = 0;\n            }\n            \n    \
    \    }\n        \n        if (pos == 0) {\n            result += c;\n        }\n\
    \    }\n    return result;\n}\n", "    if(sentence.trim().length == 0) return\
    \ \"\";\n    let words = sentence.split(\" \");\n    let primes = [];\n    for(let\
    \ i = 0; i < words.length; i++){\n        let w = words[i];\n        for(let j\
    \ = 0; j < primes.length; j++){\n            if(primes[j] < w.length){\n     \
    \           primes[j] = w.length;\n                break;\n            }\n   \
    \     }\n    }\n    let primeStr = \"\";\n    for(let i = 0; i < primes.length;\
    \ i++){\n        primeStr = primeStr + \" \" + primes[i];\n    }\n    return primeStr.trim();\n\
    }\n", "  const split_sentence = sentence.split(\" \")\n  split_sentence.sort()\n\
    \  const prime = new Set()\n  for (let i = 2; i < split_sentence.length; i++)\
    \ {\n    if (split_sentence[i] in prime) {\n      return split_sentence[i]\n \
    \   }\n    prime.add(split_sentence[i])\n  }\n}\n", "    let res = []\n    sentence.split(\"\
    \ \").forEach(element => {\n        if (PrimeNum(element.length)) {\n        \
    \    res.push(element)\n        }\n    })\n    return res.join(\" \")\n}\n", " \
    \   let words = sentence.replace(/\\s/g, \"\").split(\" \");\n    let result =\
    \ [];\n    for (let i = 0; i < words.length; i++) {\n        if (prime(words[i].length)\
    \ === true) {\n            result.push(words[i]);\n        }\n    }\n    return\
    \ result.join(\" \");\n}\n", "\tvar result = \"\";\n\tfor(var i = 0;i < sentence.length;\
    \ i++){\n\t\tif(isPrime(sentence.length-i) && isPrime(i)){\n\t\t\tresult += sentence[i];\n\
    \t\t}\n\t}\n\treturn result;\n}", "    let newSentence = \"\";\n    let arr =\
    \ sentence.split(\" \");\n    for (let i = 0; i < arr.length; i++){\n        let\
    \ length = arr[i].length;\n        if (is_prime(length)){\n            newSentence\
    \ += arr[i];\n        }\n    }\n    return newSentence;\n}\n", "    return sentence.split(\"\
    \ \")\n                .map(x => x.length)\n                .filter(x => x > 1\
    \ && x % 1 === 0)\n                .sort()\n                .join(\" \");\n}\n",
  "    let newSentence = sentence.split(' ')\n    let primeArray = newSentence.map(word=>{\n\
    \        let count = 1\n        for(let i=0;i<word.length;i++){\n            for(let\
    \ j=0;j<newSentence.length;j++){\n                if(word[i]==newSentence[j]){\n\
    \                    count++\n                }\n            }\n        }\n  \
    \      return count\n    })\n    let newWord = primeArray.reduce((a,b)=>{\n  \
    \      for(let i=0;i<Math.sqrt(b);i++){\n            if(b%i==0){\n           \
    \     return false\n            }\n        }\n        return true\n    },true)\n\
    \    return newWord?newSentence.join(\" \"):''\n}\n", "    let res = [];\n   \
    \ let words = sentence.split(' ');\n    for (let i=0; i<words.length; i++){\n\
    \        for(let j=i+1; j<words.length; j++){\n            let len1 = words[i].length;\n\
    \            let len2 = words[j].length;\n            if (len1==len2 && checkPrimeNumber(len1))\
    \ res.push(words[i]);\n        }\n    }\n    return res.join(' ');\n}\n", "  \
    \  let arr = sentence.trim().replace(/\\s+/g,' ').split(' ');\n    let result\
    \ = '';\n    let primes = [];\n    for (let i=2;i<arr.length;i++){\n        if\
    \ (arr.filter(x=>x%i)[0]===0){\n            primes.push(i);\n            result\
    \ += arr[i] + ' ';\n        }\n    }\n    if(result.length === 0){\n        result\
    \ = 'No prime number found';\n    }\n    console.log(result);\n}\n\nwords_in_sentence(\"\
    This is a test\");\nwords_in_sentence(\"lets go for swimming\");\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=string,primes,javascript |>\nUsing only JavaScript,\
    \ you could get the length of the string, and check if it is prime (up to half\
    \ the length) or even with %. With a small change to the code posted above, this\
    \ would work for any odd length:\n<code>", "    // split your sentence to an array\
    \ of words\n    var arr = sentence.split(\" \");\n    var primeString = \"\";\n\
    \    for(var i = 0; i < arr.length; i++){\n        // if length of current word\
    \ is a prime number\n        if(isPrime(arr[i].length)){\n            // concatenate\
    \ current word to the primeString\n            primeString += arr[i];\n      \
    \  }\n    }\n    return primeString;\n}\n", "    let result = [];\n    let words\
    \ = new Set(sentence.split(\" \"));\n    for(let i = 0;i<words.length;i++){\n\
    \        for(let j=0;j<i;j++){\n            let isPrime = false;\n           \
    \ for(let k=1;k<=j;k++){\n                if(j%k==0){\n                    isPrime\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if(isPrime){\n                result.push(words[i]);\n              \
    \  break;\n            }\n        }\n    }\n    return result.join(\" \");\n}",
  "    console.log(\"start\");\n    let words = \"\";\n    for (let i=0; i<sentence.length;\
    \ i++){\n        let s = sentence[i];\n        if (s == \".\" || s == \" \"){\n\
    \            words = words.concat(s); \n        }\n        if (is_number(s)){\n\
    \            console.log(\"is number\");\n            console.log(s);\n      \
    \      return words;\n        }\n    }\n    for (let i=0; i<sentence.length; i++){\n\
    \        let s = sentence[i];\n        if (s == \" \"){\n            words = words.concat(s);\
    \ \n        }\n        if (is_number(s)){\n            console.log(\"is number\"\
    );\n            console.log(s);\n            return words;\n        }\n    }\n\
    }", "    let newString = \"\";\n    for (let i = 0; i < sentence.length; i++){\n\
    \        if (primeNumber(sentence.length - 1 - i)){\n            newString +=\
    \ sentence[i]\n        }\n    }\n    return newString;\n}", "    let words = sentence.split(\"\
    \ \");\n    return words.sort().join(\" \");\n}\n", "    if(!_.isString(sentence)){\n\
    \        return \"\";\n    }\n    let words = _.split(sentence, /\\s+/);\n   \
    \ let result = [];\n    for(let i = 0; i < words.length; i++){\n        let str\
    \ = words[i];\n        let nums = _.range(str.length);\n        nums = _.filter(nums,\
    \ (n) => str[n] === \"0\");\n        nums = _.map(nums, (n) => parseInt(n));\n\
    \        if(nums.length){\n            result = result.concat(nums);\n       \
    \ }\n    }\n    return result.toString();\n}\n", "    // Your code here\n}\n",
  "    // Write your code here\n}\n", "    let wordArray = sentence.split(\" \");\n\
    \    let string = \"\";\n    for(let i = 0; i < wordArray.length; i++){\n    \
    \    if(prime_number(wordArray[i].length) === true){\n            string += wordArray[i]\
    \ + \" \";\n        }\n    }\n    return string.trim();\n}\n", "  if(sentence.length\
    \ <= 100){\n    return false;\n  }\n  var prime = new Array();\n  var len = new\
    \ Array();\n  var letters = new Array();\n  for(let i of sentence){\n    prime[i]\
    \ = false;\n    len[i] = 0;\n    letters[i] = i;\n  }\n  for(let i = 0; i < prime.length;\
    \ i++){\n    for(let j = 0; j < sentence.length; j++){\n      if(letters[j] ===\
    \ sentence[j]){\n        prime[i] = true;\n        len[i] = len[i] + 1;\n    \
    \    break;\n      }\n    }\n  }\n  var result = \"\";\n  for(let i = 0; i < prime.length;\
    \ i++){\n    if(prime[i] == false){\n      break;\n    }\n  }\n  for(let i = prime.length\
    \ - 1; i >= 0; i--){\n    result = result + \" \" + sentence[i];\n  }\n  return\
    \ result;\n}", "    // Initialize a result array\n    let res = [];\n    // Initialize\
    \ the length of the new string to be prime\n    let new_str_len = 2*Math.ceil(Math.sqrt(sentence.length));\n\
    \    // Initialize the boolean that indicates if the new string is a valid prime\n\
    \    let new_str_prime = true;\n    // Initialize the flag variable that will\
    \ be used to check if the length is prime\n    let is_str_prime = true;\n    //\
    \ Get the index of the first letter of the sentence \n    let letter_index = sentence.indexOf(\"\
    \ \");\n    // Loop from letter_index to the end of the string\n    for(let i\
    \ = letter_index; i < sentence.length; i++){\n        // Get the word \n     \
    \   let word = sentence.slice(i, i+1);\n        // Check if the word is a valid\
    \ prime\n        // If the word is not a valid prime,\n        // then set the\
    \ boolean flag to false and break the loop\n        if(new_str_prime && !is_prime(word)){\n\
    \            is_str_prime = false;\n            break;\n        }\n        //\
    \ Get the length of the new string\n        new_str_len = Math.ceil(Math.sqrt(new_str_len));\n\
    \        // Check if the new string is valid\n        if(new_str_len > new_str_len/2){\n\
    \            new_str_prime = true;\n        }\n        // Check if the new string\
    \ is a valid prime\n        if(new_str_prime && !is_prime(new_str_len)){\n   \
    \         new_str_prime = false;\n        }\n        // Check if the new string\
    \ is a valid prime\n        if(new_str_prime && !is_prime(word)){\n          \
    \  new_str_prime = false;\n        }\n        // Add the word to the new string\n\
    \        res.push(word);\n    }\n    // Return an empty string if there is no\
    \ valid words in the string\n    return res.join(\" \");\n}", "    let newArr\
    \ = sentence.split(\" \");\n    let resultArr = [];\n    for(let i = 0; i < newArr.length;\
    \ i++){\n        let flag = false;\n        for(let j = 0; j < resultArr.length;\
    \ j++){\n            if((newArr[i].length === resultArr[j].length) &&\n      \
    \          (newArr[i].toLowerCase() === resultArr[j].toLowerCase())){\n      \
    \          flag = true;\n                break;\n            }\n        }\n  \
    \      if(flag){\n            continue;\n        }\n        resultArr.push(newArr[i]);\n\
    \    }\n    return resultArr.join(\" \");\n}", "  let result = \"\";\n  for(let\
    \ i of sentence.split(' ')){\n    let temp = i;\n    for(let j = 1; j <= i; j++){\n\
    \      temp = temp.toString().replace(/\\d/g, \"\"); // delete number from temp\n\
    \      if(temp.length != i){\n        temp = temp.split(\"\").reverse().join(\"\
    \"); // delete space\n        break;\n      }\n    }\n    result += temp;\n  }\n\
    \  return result;\n}\n", "    var splitString = sentence.split(\" \");\n    var\
    \ newString = \"\";\n    for(let i = 0; i<splitString.length; i++){\n        let\
    \ word = splitString[i];\n        if(isPrime(word.length)){\n            newString\
    \ += word;\n        }\n    }\n    return newString;\n}\n", "  const isPrime =\
    \ (num) => {\n    return num.toString().split('').reduce((acc, cur) => {\n   \
    \   return !parseInt(acc) && Math.sqrt(num.toString().split('').reduce((a, b)=>{\n\
    \        return parseInt(a) + parseInt(b) === parseInt(acc)\n      }, 0) % parseInt(acc))\
    \ == 1;\n    }, 0);\n  }\n  return sentence.split(\" \").filter(item => isPrime(item.length));\n\
    }\n", "    const re = new RegExp('\\\\b('+sentence.split(' ').join('|')+')\\\\\
    b', 'g');\n    return sentence.replace(re, function(match, group){\n        let\
    \ n = parseInt(group);\n        for(let i = 1; i<=n; i++){\n            if(i*(i-1)==n)\
    \ return group;\n        }\n    });\n}\n", "    return words_in_sentence_with_length_limit(sentence,\
    \ 1);\n}\n", "  // Your code here\n  for(let i = 0; i<sentence.length; i++){\n\
    \    let temp = sentence[i].split(\" \");\n    let length = temp.length\n    for\
    \ (let j = 2; j<=length; j++) {\n      if(temp[j-1].length==0){\n        temp=temp.filter(function(e){\
    \ return e.length!=0 });\n        temp=temp.join(\" \")\n      }\n    }\n    sentence[i]=temp\n\
    \  }\n  return sentence.join(\" \")\n}\n", "    // Your code here\n    let result\
    \ = ''\n    for (let i = 0; i <= sentence.length - 1; i++){\n        for (let\
    \ j = i; j > 0; j--){\n            if (is_prime(j)){\n                if (i ==\
    \ j){\n                    result += sentence[i]\n                }\n        \
    \        else {\n                    result += ' ' + sentence[i]\n           \
    \     }\n            }\n            else{\n                break\n           \
    \ }\n        }\n    }\n    return result\n}\n", "    var nums = new Array();\n\
    \    var result = \"\";\n    var start = 0;\n    for(var i=0; i<sentence.length;\
    \ i++){\n        if (nums.indexOf(sentence[i]) == -1) {\n            nums.push(sentence[i]);\n\
    \            start = i;\n        }\n    }\n    for(var i=start; i<sentence.length;\
    \ i++){\n        if (nums.indexOf(sentence[i]) > 0) {\n            result = result\
    \ + sentence[i];\n        }\n    }\n    return result;\n}\n", "    let wordsInSentence\
    \ = sentence.split(\" \").map(word => word.replace(/\\W/g, \"\"));\n    let result\
    \ = [];\n    for(let i=0;i<wordsInSentence.length;i++){\n        for(let j=0;j<result.length;j++){\n\
    \            if(wordsInSentence[i] === result[j]){\n                result.splice(j,1);\n\
    \                break;\n            }\n        }\n    }\n    let newResult =\
    \ wordsInSentence.filter(word => result.includes(word));\n    let sortedResult\
    \ = newResult.sort();\n    let finalResult = \"\";\n    for(let i=0;i<sortedResult.length;i++){\n\
    \        finalResult += sortedResult[i] + \" \";\n    }\n    return finalResult;\n\
    }\n", "    let result=\"\";\n    let words=sentence.split(\" \");\n    for(let\
    \ i=0; i<words.length; i++){\n        if(isPrimeNumber(words[i].length)){\n  \
    \          result+=words[i];\n        }\n    }\n    return result;\n}\n", "  let\
    \ arr=[];\n  sentence.split(\" \").forEach(function(word){\n    let arr=[];\n\
    \    for(let i=0;i<word.length;i++){\n      if(word[i]==word[i+1]&&word[i]==word[i+2]){\n\
    \        arr.push(word[i]);\n      }\n    }\n    if(arr.length>1){\n      arr.forEach(function(element){\n\
    \        if(arr.includes(element))\n          arr.splice(arr.indexOf(element),1);\n\
    \      });\n      arr.forEach(function(element){\n        if(arr.includes(element))\n\
    \          arr.splice(arr.indexOf(element),1);\n      });\n    }\n    if(arr.length>2){\n\
    \      arr.forEach(function(element){\n        if(arr.includes(element))\n   \
    \       arr.splice(arr.indexOf(element),1);\n      });\n      arr.forEach(function(element){\n\
    \        if(arr.includes(element))\n          arr.splice(arr.indexOf(element),1);\n\
    \      });\n    }\n    arr.forEach(function(element){\n      if(arr.includes(element))\n\
    \        arr.splice(arr.indexOf(element),1);\n    });\n    arr.forEach(function(element){\n\
    \      if(!arr.includes(element))\n        arr.push(element)\n    });\n  });\n\
    \  let result=\"\";\n  for(let i=0;i<arr.length;i++){\n    result+=arr[i];\n \
    \ }\n  return result;\n};", "    var arr = sentence.split(\" \");\n    var newArr\
    \ = [];\n    for (var i = 0; i < arr.length; i++) {\n        var prime = true;\n\
    \        var prime2 = true;\n        for (var j = 0; j < arr.length; j++) {\n\
    \            if (arr[i].length != arr[j].length) {\n                prime = false;\n\
    \                break;\n            }\n        }\n        if (prime) {\n    \
    \        newArr.push(arr[i]);\n        }\n    }\n    return newArr.join(\" \"\
    );\n}\n", "    // Your code here\n    var ret = new Array(sentence.length);\n\
    \    var len = sentence.length;\n    var primes = new Array(len);\n    for(var\
    \ i = 0; i<len;i++){\n        var flag = true;\n        for(var j = 0;j < len;\
    \ j++){\n            if(sentence[j] === \" \"){\n                flag = false;\n\
    \                break;\n            }\n        }\n        if(flag){\n       \
    \     primes[i] = true;\n        }else{\n            primes[i] = false;\n    \
    \    }\n    }\n    for(var k = 0; k < primes.length; k++){\n        if(primes[k]\
    \ === true){\n            for(var i = 0; i < len; i++){\n                var word\
    \ = \"\";\n                for(var j = 0; j < len; j++){\n                   \
    \ if(j === 0){\n                        word = word + sentence[k];\n         \
    \           }else{\n                        word = word + \" \" + sentence[k];\n\
    \                    }\n                }\n                ret[k] = word;\n  \
    \          }\n            break;\n        }\n    }\n    return ret.filter(Number).join(\"\
    \ \");\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nHere is a simple solution in javascript\
    \ using lodash library (https://lodash.com/docs/4.17.4#isPrime) using its isPrime\
    \ function. You can use it directly without lodash library.\n<code>\nlet isPrime\
    \ = (n) => {\n    if(n <= 1)\n        return false;\n    for(let i = 2; i < n;\
    \ i++)\n        if(n % i === 0)\n            return false;\n    return true;\n\
    }\n\nlet primeNumbers = (input) => {\n    let newArray = [];\n    for(let num\
    \ of input) {\n        if(isPrime(parseInt(num))) {\n            newArray.push(parseInt(num));\n\
    \        }\n    }\n    return newArray;\n}\n</code>\n<|/ a tags=javascript,algorithm\
    \ |>\n<| a |>\n<code>", "\tlet s = sentence.split(\" \");\n\tlet len = s.length;\n\
    \tlet temp = [];\n\t\n\tfor(let i =0; i<len; i++){\n\t\tlet count = 0;\n\t\tfor(let\
    \ j = 0 ; j < len; j++){\n\t\t\tif(s[i] == s[j]){\n\t\t\t\tcount++;\n\t\t\t\t\
    if(count == 2){\n\t\t\t\t\ttemp.push(s[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\
    return temp.join(\" \");\n}\n", "    let result = [];\n    let arr = sentence.split(\"\
    \ \");\n    let len = arr.length;\n    let prime = 1;\n    for(let i = 0; i <\
    \ len; i++){\n        prime = 1;\n        for(let j = 2; j < len; j++){\n    \
    \        if(arr[j] === arr[i]){\n                prime *= j;\n            }\n\
    \        }\n        result.push(arr[i]);\n        if(prime !== 1){\n         \
    \   break;\n        }\n    }\n    return result.join(\" \");\n}\n", "    //your\
    \ code here\n    \n    return new_sentence;\n    \n}\n", "    const words = new\
    \ Set();\n    const strs = sentence.split(\" \");\n    for(let i = 0; i < strs.length;\
    \ i++){\n        let temp = strs[i];\n        for(let j = i + 1; j < strs.length;\
    \ j++){\n            if(is_prime(temp.length) && is_prime(temp.length) && is_prime(temp.length)){\n\
    \                if(is_prime(strs[j].length) && is_prime(strs[j].length) && is_prime(strs[j].length)){\n\
    \                    words.add(temp);\n                }\n            }\n    \
    \    }\n    }\n    return words.size === strs.length ? (words.values().sort((a,\
    \ b) => a.localeCompare(b)).join(' ')) : (`${strs[0]} ${strs[strs.length - 1]}`);\n\
    }\n", "    let words_in_sentence = [];\n    let s = sentence.split(\" \");\n \
    \   for(i = 0; i < s.length; i++){\n        words_in_sentence.push(s[i]);\n  \
    \  }\n    for(let i = 0; i < words_in_sentence.length; i++){\n        for(let\
    \ j = 0; j < s.length; j++){\n            if(words_in_sentence[i] == s[j]){\n\
    \                break;\n            }\n        }\n    }\n    return words_in_sentence.join(\"\
    \ \");\n}\n", "    const words = sentence.split(' ')\n    const sortedWords =\
    \ words.sort((a,b) => a-b)\n    let str = ''\n    for(let i=0; i<sortedWords.length;\
    \ i++){\n        if(!str){\n            str = sortedWords[i]\n        }\n    \
    \    else{\n            if(sortedWords[i] == str){\n                continue\n\
    \            }\n            else if(sortedWords[i] != str){\n                str\
    \ = str + ' ' + sortedWords[i]\n            }\n        }\n    }\n    return str\n\
    }\n", "    if(sentence == null){\n        return null;\n    }\n    \n    let re\
    \ = new RegExp(\"\\\\s\",\"g\");\n    let sentenceArr = sentence.replace(re,\"\
    \ \").split(\" \");\n    \n    for(let i = 0;i < sentenceArr.length;i++){\n  \
    \      if(isPrime(sentenceArr.length)){\n            return sentenceArr;\n   \
    \     }\n    }\n    \n    return null;\n}\n", "  return sentence.split(\" \").map((word)=>word.length);\n\
    }\n", "  // split sentence on space\n  let words_in_sentence = sentence.split(\"\
    \ \");\n  // iterate over each word\n  for (let word of words_in_sentence){\n\
    \    // get length of word\n    let word_length = len(word);\n    // check for\
    \ prime number\n    if (word_length == 1 || word_length == 2 || word_length ==\
    \ 3 || word_length == 5 || word_length == 7 || word_length == 11 || word_length\
    \ == 13 || word_length == 17 || word_length == 23 || word_length == 29 || word_length\
    \ == 37 || word_length == 41 || word_length == 43  || word_length == 47 || word_length\
    \ == 53  || word_length == 59 || word_length == 67 || word_length == 73  || word_length\
    \ == 91  || word_length == 97 || word_length == 103){\n      // if length is prime\
    \ return word\n      return word;\n    }\n  }\n  // word does not exist\n  return\
    \ \"not word\";\n}\n", "    let result = [];\n    \n    for (let i = 0; i < sentence.length;\
    \ i++){\n        if (is_prime(sentence[i])){\n            result.push(sentence[i]);\n\
    \        }\n    }\n    \n    return result.join(\" \");\n}\n", "  var arr=sentence.split(\"\
    \ \");\n  return arr.map(function(item){\n    return item.length;\n  }).reduce(function(a,b){\n\
    \    return a*b;\n  });\n}\n", "  let arr = sentence.split(\" \");\n  let count\
    \ = 0;\n  for(let i = 0; i < arr.length; i++){\n    let temp = arr[i].trim();\n\
    \    for(let j = 1; j < i; j++){\n      if(arr[j - 1].length == temp.length){\n\
    \        count += 1;\n      }\n    }\n  }\n  return count;\n}", "  let arr = sentence.split(\"\
    \ \").map(word => word.toLowerCase());\n  let prime_words = [];\n  let prime_words_string\
    \ = \"\";\n  for(let i=0;i<arr.length;i++){\n    if(!prime_words.includes(arr[i])){\n\
    \      prime_words.push(arr[i]);\n    }\n  }\n  for(let i=0;i<prime_words.length;i++){\n\
    \    if(prime_words[i]>1){\n      prime_words_string += prime_words[i]+\" \";\n\
    \    }\n  }\n  return prime_words_string;\n};\n", "    if(sentence.length == 0){\n\
    \        return \"\";\n    }\n    let wordArray = sentence.split(\" \");\n   \
    \ let newSentenceArray = [];\n    for(let i=0; i<wordArray.length; i++){\n   \
    \     newSentenceArray.push(wordArray[i]);\n    }\n    let newWordArray = words_in_sentence2(newSentenceArray);\n\
    \    let newWords = \"\";\n    for(let i=0; i<newWordArray.length; i++){\n   \
    \     newWords += newWordArray[i] + \" \";\n    }\n    return newWords;\n}\n",
  "    let primes = [];\n    let new_sentence = \"\";\n    let n = 1;\n    for(let\
    \ i = 0; i<sentence.length; i++){\n        for(let j = 0; j<primes.length; j++){\n\
    \            if(i%primes[j] == 0){\n                n = 1;\n                break;\n\
    \            }else{\n                n++;\n            }\n        }\n        primes.push(n);\n\
    \        new_sentence+=sentence[i];\n    }\n    return new_sentence;\n}", "  \
    \  // Write your code here\n}\n</cell>\n<cell>\n# Run this cell to check your\
    \ output. If it takes too long, you may want to try your luck with fewer sentences.\n\
    words_in_sentence(\"this is a test sentence\")\n</cell>\n<text>\n6. Counting Substrings\n\
    A substring is a contiguous sequence of characters that includes a given word.\n\
    \nFor example, in the sentence \"The sky is blue\",\nthe substring \"blue\" is\
    \ a substring because it includes each of the letters blue and includes the\n\
    entire word blue.\n\nA substring may contain another substring.\n\nFor example,\
    \ in the sentence \"The sky is blue\",\n\"blue\" is a substring of the substring\
    \ \"sky\", but is not a substring of the string \"The sky is blue\",\nbecause\
    \ \"The sky is blue\" does not include all the letters blue (it has a space before\
    \ and after blue).\n\nGiven a string, you have to find the number of substring\
    \ occurrences of a given word, not including itself,\nincluding itself, case insensitively.\n\
    \nExample 1:\nInput:\nsentence = \"the sky is blue\"\nword = \"blue\"\nOutput:\n\
    3\nExplanation:\n\"the\" is a substring of the string \"the sky is blue\".\n\"\
    the\" is a substring of the string \"the sky is blue\".\n\"sky is\" is a substring\
    \ of the string \"the sky is blue\".\n\"sky is\" is a substring of the string\
    \ \"the sky is blue\".\n\"sky is\" is a substring of the string \"the sky is blue\"\
    .\n\"blue\" is a substring of the string \"the sky is blue\".\n\"blue\" is a substring\
    \ of the string \"the sky is blue\".\n\nExample 2:\nInput:\nsentence = \"The sky\
    \ is blue\"\nword = \"sky is\"\nOutput:\n2\nExplanation:\n\"sky is\" appears twice\
    \ in the sentence \"The sky is blue\".\n\"sky is\" is a substring of the string\
    \ \"The sky is blue\".\n\nConstraints:\n1 <= len(sentence) <= 100\n1 <= word <=\
    \ len(sentence)\n\n\n</text>\n<cell>\n# Write your code here\ndef count_substring(sentence,\
    \ word):\n    count=0\n    for char in sentence:\n        if char == word[0] or\
    \ char == word[-1]:\n            if char == word[-1] and len(word)>1:\n      \
    \          if char == word[0]:\n                    count+=2\n               \
    \ word=word[1:-1]\n            else:\n                count+=1\n        else:\n\
    \            if char in word:\n                word=word.replace(char,\"\")",
  "    let words = [];\n    let wordsWithLength = [];\n    for(let i = 0; i < sentence.length;\
    \ i++){\n        let char = sentence.charAt(i);\n        if(char === 'a' || char\
    \ === 'e' || char === 'i' || char === 'o' || char === 'u'){\n            words.push(char);\n\
    \        }\n    }\n    for(let i = 0; i < words.length; i++){\n        let currLength\
    \ = words[i].length;\n        let isPrime = true;\n        for(let j = i+1; j\
    \ < words.length; j++){\n            if(words[j].length != currLength){\n    \
    \            break;\n            }\n            if(!isPrime){\n              \
    \  break;\n            }\n            if(j === words.length - 1){\n          \
    \      isPrime = false;\n            }\n        }\n        if(!isPrime){\n   \
    \         wordsWithLength.push(words[i]);\n        }\n    }\n    return wordsWithLength.join('\
    \ ');\n}\n", "    let result=\"\"\n    for (let i=0; i<=sentence.length-1; i++){\n\
    \        if (i%2==0){\n            result += sentence.charAt(i);\n        }\n\
    \    }\n    return result\n}\n<|/ file dstars=1 source=github ext=.js |>\n<| c\
    \ |>\nThank you! It worked.\n<|/ c |>\n<| a dscore=0 |>\nI believe what you are\
    \ looking for is more of a \"filter\" than a \"reduce\". I recommend looking up\
    \ .filter(), and .includes(). Basically, you can tell it \"filter\", or \"keep\"\
    , any elements that meet a certain criteria. So, to get your desired result, you\
    \ could use something like:\n\n<code>\nconst sentence = \"This is a test\";\n\n\
    let result = sentence.split(\" \").filter(item => item.includes(\"test\"));\n",
  "  const words = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0;\
    \ i < words.length; i++) {\n    const prime = prime_number_checker(words[i]);\n\
    \    if (prime !== -1) {\n      primes.push(prime);\n    }\n  }\n  return primes.sort().join(\"\
    \ \");\n}\n", "\tlet newString = \"\"\n\tfor(let char of sentence){\n\t\tif(newString.includes(char)){\n\
    \t\t\tcontinue\n\t\t}\n\t\tif(getPrimeNumber(newString.length) + 1 == newString.length){\n\
    \t\t\tnewString += char\n\t\t}\n\t\telse{\n\t\t\tnewString += char + \" \" \n\t\
    \t}\n\t}\n\treturn newString\n}\n", "\tconst new_sentence = sentence.split(\"\
    \ \").filter(x => !isNaN(x));\n\tconst prime = checkPrimeNumber(new_sentence.length);\n\
    \tconst new_words = [];\n\tfor (let i = 0; i< new_sentence.length; i++){\n\t\t\
    if (new_sentence[i].length == prime){\n\t\t\tnew_words.push(new_sentence[i]);\n\
    \t\t}\n\t}\n\treturn new_words.join(\" \");\n}\n", "    // splits the sentence\
    \ in words\n    return sentence.split(' ').sort();\n}\n", "    if (sentence.length\
    \ == 0) return \"\";\n    let res = [];\n    let temp = \"\";\n    let index =\
    \ 0;\n    for(let c of sentence){\n        temp += c;\n        while(temp.length\
    \ != index){\n            temp += \" \";\n            index++;\n        }\n  \
    \      res.push(temp.slice(0,index));\n    }\n    return res.join(\" \");\n}\n",
  "    let str = sentence.toLowerCase().replace(/[^a-zA-Z ]/g,\" \");\n    let newArr\
    \ = str.split(\" \");\n    let resultArr = newArr.filter(function(val,i,arr){\n\
    \        return ((arr.indexOf(val) != i) && (arr.indexOf(val)<(arr.length-1)));\n\
    \    });\n    return resultArr.join(\" \");\n};\n", "    let newString = \"\"\
    ;\n    for (let index = 0; index < sentence.length; index++){\n        const currentChar\
    \ = sentence[index];\n        if (currentChar === ' ') break;\n        const previousChar\
    \ = sentence[index-1];\n        if (is_prime.check(previousChar) && is_prime.check(currentChar)){\n\
    \            newString += currentChar;\n        }\n    }\n    return newString;\n\
    }\n", "    let arr = sentence.split(\" \");\n    let result = [];\n    let prime\
    \ = new Set(arr);\n    for (let i = 0; i < arr.length; i++) {\n        let wordArr\
    \ = arr[i].split(\"\");\n        for(let j = 0; j < wordArr.length; j++){\n  \
    \          if(prime[wordArr.join(\"\")]){\n                result.push(wordArr.join(\"\
    \"));\n                prime[wordArr.join(\"\")] = false;\n                break;\n\
    \            }\n        }\n    }\n    return result.join(\" \");\n};\n", "   \
    \ return words_in_sentence(sentence.replace(/[^a-z ]/g,\"\"));\n};\n", "    var\
    \ result = \"\";\n    var arr = sentence.split(\" \");\n    for(var i = 0; i <\
    \ arr.length; i++){\n        var arr = arr[i].split(\"\");\n        for(var j\
    \ = 0; j < arr.length; j++){\n            if(isPrime(arr[j])){\n             \
    \   result = result + \" \" + arr[j];\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "  var result = [];\n  var num = 1;\n  var word = \"\";\n  for\
    \ (var i = 0; i < sentence.length; i++) {\n    word = sentence[i];\n    if (is_prime(num)\
    \ && num > 1) {\n      result.push(word);\n    }\n    num++;\n  }\n  return result.join(\"\
    \ \");\n}\n", "    var arr=[];\n    for(var i=0;i<=sentence.length;i++)\n    \
    \    arr.push(sentence.charAt(i));\n    for(var i=0;i<=arr.length-1;i++){\n  \
    \      for(var j=i+1;j<=arr.length;j++){\n            if((Math.pow(arr[i],arr[j]))==1)\n\
    \                arr.splice(j,1);\n        }\n    }\n    return arr.join(\" \"\
    );\n}\n", "    const letters = sentence.split(\" \");\n    const array = [];\n\
    \    for (let i=0;i<letters.length;i++){\n        if (is_prime(letters[i].length)){\n\
    \            array.push(letters[i])\n        }\n    }\n    return array.join(\"\
    \ \");\n}", "    const letters_array = sentence.split(\" \");\n    let length_of_sentence\
    \ = letters_array.length;\n    let new_sentence = \"\";\n    for(let i = 0;i<length_of_sentence;i++){\n\
    \        if(isPrimeNumber(length_of_sentence)){\n            if(new_sentence.length\
    \ === 0) new_sentence+=letters_array[i];\n            else{\n                let\
    \ temp_arr = new_sentence.split(\"\");\n                let temp_arr_length =\
    \ 0;\n                for(let j = 0;j<temp_arr.length;j++){\n                \
    \    if(temp_arr[j] === letters_array[i]){\n                        temp_arr_length++;\n\
    \                    }\n                }\n                if(temp_arr_length===0)\
    \ new_sentence+=letters_array[i];\n            }\n        }\n        length_of_sentence--;\n\
    \    }\n    return new_sentence;\n}\n", "    let new_str = \"\";\n    for(let\
    \ i=0; i<sentence.length; i++){\n        let char = sentence[i];\n        if(prime_number(char)\
    \ == 1){\n            let new_char = char;\n            let last_letter = sentence[i-1];\n\
    \            if(prime_number(last_letter) == 1){\n                let new_last_letter\
    \ = last_letter;\n                for(let j=i; j<sentence.length; j++){\n    \
    \                let next_letter = sentence[j];\n                    if(prime_number(next_letter)\
    \ == 1){\n                        new_str += new_char;\n                     \
    \   new_str += next_letter;\n                    }\n                    else{\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n            else{\n                for(let j=i; j<sentence.length;\
    \ j++){\n                    let next_letter = sentence[j];\n                \
    \    if(prime_number(next_letter) == 1){\n                        new_str += new_char;\n\
    \                        new_str += next_letter;\n                        new_str\
    \ += last_letter;\n                    }\n                    else{\n        \
    \                break;\n                    }\n                }\n          \
    \  }\n        }\n        else{\n            new_str += char;\n        }\n    }\n\
    \    return new_str;\n}\n", "  if(sentence.length<1) return \"\";\n  let firstWord=sentence.split(\"\
    \ \")[0];\n  let lastWord=sentence.split(\" \")[sentence.split(\" \").length-1];\n\
    \  let isPrime=true;\n  for(let i=2;i<=Math.sqrt(lastWord.length);i++){\n    if(lastWord.charCodeAt(i)%1!==0){\n\
    \      isPrime=false;\n      break;\n    }\n  }\n  return isPrime\n    ? firstWord+lastWord\n\
    \    : firstWord.split(\"\").sort().join(\" \")+lastWord.split(\"\").sort().join(\"\
    \ \")\n}\n", "    let res = \"\";\n    sentence.split(\" \").forEach((w)=>{\n\
    \        if(is_prime(w)){\n            res += w;\n        }\n    });\n    return\
    \ res;\n}\n", "    var result = [];\n    result.push(sentence.split(\" \")[0].toLowerCase());\n\
    \    for (var i = 1; i < sentence.length; i++){\n        var len = ~~Math.sqrt(i);\n\
    \        for (var k = 1; k <= len; k++){\n            result.push(sentence.split(\"\
    \ \").filter(function(word){\n                return word.length === k\n     \
    \       }).join(\" \").toLowerCase());\n        }\n    }\n    result.push(sentence.split(\"\
    \ \")[sentence.length-1].toLowerCase());\n    return result.join(\" \");\n}\n",
  "    var re = /^\\w+$/;\n    var words = re.exec(sentence);\n    var result = [];\n\
    \    for(var i = 0; i < words.length; i++) {\n        var n = words[i].length;\n\
    \        if(n == 1) {\n            result.push(words[i]);\n        }\n       \
    \ for(var j = i; j < words.length; j++) {\n            if(words[i].length != words[j].length)\
    \ {\n                continue;\n            }\n            if(n != 2) {\n    \
    \            continue;\n            }\n            var m = words[i].split('').sort().join('');\n\
    \            var z = words[j].split('').sort().join('');\n            if(m !=\
    \ z) {\n                continue;\n            }\n            result.push(words[i]);\n\
    \        }\n    }\n    return result.join(\" \");\n}\n", "    const regex = new\
    \ RegExp(/\\w+/g)\n    const match = sentence.match(regex)\n    return match.join('\
    \ ')\n}\n", "  var words = [];\n  for (var i = 0, len = sentence.length; i < len;\
    \ i++) {\n    var word = sentence[i];\n    if (word.match(/[a-z]/i)) {\n     \
    \ words.push(word);\n    }\n  }\n  return words.sort().join(' ');\n}\n", "   \
    \ let primes = [];\n    for(let i = 2; i < 100; i++){\n        let isPrime = true;\n\
    \        for(let j = 0; j < i; j++){\n            if(i%j == 0){\n            \
    \    isPrime = false;\n            }\n        }\n        if(isPrime){\n      \
    \      primes.push(i);\n        }\n    }\n    \n    let result = \"\";\n    for(let\
    \ i = 0; i < primes.length; i++){\n        if(sentence.split(\" \").length ==\
    \ primes.length){\n            result = result.concat(\" \" + sentence.split(\"\
    \ \").slice(0,primes[i]).join(\" \"));\n        }\n    }\n    \n    return result;\n\
    }\n", "    let sentenceArray = sentence.split(\" \");\n    for(let i = 0; i <\
    \ sentenceArray.length; i++){\n        let testResult = findPrime(sentenceArray[i].length);\n\
    \        if(testResult === true) {\n            console.log(sentenceArray[i]);\n\
    \        }\n    }\n}\n", "    str = sentence.split(\" \");\n    \n    for(i in\
    \ str){\n        if(str[i].includes(str[i])){\n            str.splice(i, 1);\n\
    \        }\n    }\n    \n    for(i in str){\n        var sum = 1;\n        \n\
    \        for(j in str){\n            if(str[j] !== str[i]){\n                sum++;\n\
    \            }\n        }\n        \n        if(!sum){\n            str.splice(i,\
    \ 1);\n        }\n    }\n    \n    return str.join(\" \");\n}\n</code></pre>\n\
    \        </article>\n    </section>\n\n\n\n\n</div>\n\n<nav>\n    <h2><a href=\"\
    index.html\">Home</a></h2><h3>Classes</h3><ul><li><a href=\"Matrix.html\">Matrix</a></li><li><a\
    \ href=\"Vector.html\">Vector</a></li><li><a href=\"String.html\">String</a></li></ul><h3>Global</h3><ul><li><a\
    \ href=\"global.html#validate\">validate</a></li></ul>\n</nav>\n\n<br class=\"\
    clear\">\n\n<footer>\n    Documentation generated by <a href=\"https://github.com/jsdoc3/jsdoc\"\
    >JSDoc 3.5.5</a> on Wed Dec 20 2017 10:50:05 GMT+0800 (CST)\n</footer>\n\n<script>\
    \ prettyPrint(); </script>\n<script src=\"scripts/linenumber.js\"> </script>\n\
    </body>\n</html>\n\n<|/ file dstars=1 filename=prime.html |>\n<| c |>\nI added\
    \ an example to the answer.\n<|/ c |>\n<| c |>\nThank you for the answer. I think\
    \ I understand it a lot more now. I was thinking of it incorrectly.\n<|/ c |>\n\
    <| c |>\nNo problem. If this answers your question, please [accept it](https://meta.stackexchange.com/a/5235/289255)\
    \ by clicking the check-mark to the left of the answer. :)\n<|/ c |>\n<| c |>\n\
    I accepted it. Just a quick question. Would there be a way to do this without\
    \ using javascript?\n<|/ c |>\n<| c |>\nYes, there certainly would be, but it'd\
    \ be a lot less efficient (O(n^2)). I'm assuming you meant \"without using JavaScript\
    \ as in not using pure `for` loops to iterate over every element\" (since it would\
    \ be much more efficient than JavaScript)? If that's the case, you'll have to\
    \ go with one of the other answers. Good luck!\n<|/ c |>\n<| a dscore=0 |>\nYou\
    \ can use two for loops:\n<code>\nvar str = sentence.split(\" \");\n\nvar prime\
    \ = \"\";\nvar res = \"\";\n\nfor(var i =0;i<str.length;i++){\n\n  for(var j=i+1;\
    \ j<str.length;j++){\n\n    if(str", "    return sentence\n        .split(' ')\n\
    \        .map((word) => word.length)\n        .filter(prime => prime > 1);\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\nA simple solution to return the longest substring\
    \ that is a prime number of the given input string and that does not exceed the\
    \ length of the input string:\n<code>", "    let words_list = [];\n    for (let\
    \ i = 0; i < sentence.length; i++) {\n        let word = sentence[i].charAt(0).toUpperCase()\
    \ + sentence[i].slice(1);\n        words_list.push(word);\n    }\n    let res\
    \ = [];\n    for(let i = 2; i < words_list.length; i++){\n        if(words_list[i].length\
    \ == i){\n            let prime = true;\n            for (let j = 1; j < i; j++){\n\
    \                if (words_list[i].indexOf(words_list[j]) == -1){\n          \
    \          prime = false;\n                }\n            }\n            if(prime){\n\
    \                res.push(words_list[i]);\n            }\n        }\n    }\n \
    \   return res;\n}\n", "    let arr = sentence.split(\" \");\n    let str = \"\
    \";\n    for (let i=0; i<arr.length; i++) {\n        let n = arr[i].length;\n\
    \        for (let j=0; j<Math.sqrt(n); j++) {\n            if (n%j == 0){\n  \
    \              break;\n            }\n        }\n        if (j == Math.sqrt(n))\
    \ {\n            str += arr[i] + \" \";\n        }\n    }\n    return str;\n}\n",
  "    if (sentence === null){\n        console.log(\"Null Input\");\n        return\
    \ null;\n    }\n    let words = [],\n        sentenceArray = sentence.split(\"\
    \ \");\n    for (let i=0,l=sentenceArray.length;i<l;i++){\n        let len = Math.sqrt(Math.pow(sentenceArray[i].length,2));\n\
    \        if(len%1==0){\n            words.push(sentenceArray[i]);\n        }\n\
    \    }\n    return words.join(\" \");\n}\n", "    let n = 2\n    let result =\
    \ \"\"\n    let primeNums = Array.from({ length: n}).fill(0)\n    let result =\
    \ sentence.split(' ').filter(function(word){\n        if (primeNums[word.length-1]\
    \ < n ){\n            primeNums[word.length-1] = n\n        }\n        primeNums[word.length-1]--\n\
    \        result += word\n        result += \"\\n\"\n        n += 1\n        return\
    \ true\n    })\n    return result.trim()\n}", "    let strArr = sentence.split(\"\
    \ \");\n    let sortedArr = strArr.sort();\n    let primes = [];\n    for(let\
    \ i=0; i<sortedArr.length; i++){\n        let prime = sortedArr[i]*sortedArr[i];\n\
    \        while(prime in primes){\n            prime++;\n        }\n        primes.push(prime);\n\
    \    }\n    let newStr = \"\";\n    for(let i=0; i<sortedArr.length; i++){\n \
    \       let s = sortedArr[i]*sortedArr[i];\n        if(s in primes){\n       \
    \     newStr += \" \" + sortedArr[i];\n        }\n    }\n    return newStr.trim();\n\
    }\n", "    let re = /\\S+/g;\n    let res = sentence.match(re);\n    return res;\n\
    }", "    // Write your code here\n    let arr = sentence.split(\" \");\n    let\
    \ newArr = [];\n    for (let i = 0; i < arr.length; i++){\n        let num = arr[i].length;\n\
    \        for (let j = num; j>0; j--){\n            if (arr[i].substring(0,j+1)\
    \ in newArr){\n                let found = newArr.indexOf(arr[i].substring(0,j+1));\n\
    \                newArr.splice(found,1);\n            }\n        }\n    }\n  \
    \  return newArr.join(\" \");\n}\n", "  // initialize an array for storing the\
    \ words\n  // split sentence on space and store it in an array\n  var wordArray\
    \ = sentence.split(\" \");\n  var answer=\"\";\n\n  for(var i=0;i<wordArray.length;i++){\n\
    \    // loop through all the words and check their lengths\n    for(var j=2;j<wordArray[i].length;j++){\n\
    \      // only loop through all the words with a length upto j\n      if(wordArray[i].substring(0,j)===wordArray[i].substring(0,j+1)){\n\
    \        // check if the current word is a prime number\n        if(j==2){\n \
    \         if(j%2==0){\n            // check if the current word is even\n    \
    \        if(parseInt(wordArray[i].substring(0,j))%2!=0){\n              // if\
    \ the current word is not even, push it to the answer array\n              answer+=wordArray[i].substring(0,j);\n\
    \            }\n          }\n          else{\n            // if the current word\
    \ is odd, push it to the answer array\n            answer+=wordArray[i].substring(0,j);\n\
    \          }\n        }\n        else{\n          // if the current word is a\
    \ prime number, push it to the answer array\n          answer+=wordArray[i].substring(0,j);\n\
    \        }\n      }\n    }\n  }\n  return answer;\n}\n", "    // split sentence\n\
    \    const sentenceArray = sentence.split(\" \");\n    // create an empty array\n\
    \    const newStringArray = [];\n    // iterate over sentenceArray\n    for(i\
    \ = 0; i < sentenceArray.length; i++){\n        // iterate over every word\n \
    \       for(j = 0; j < sentenceArray[i].length; j++){\n            // if current\
    \ word is \"odd\" number and not \"even\" number\n            if(sentenceArray[i][j]\
    \ % 2 === 0 && sentenceArray[i][j] !== parseInt(sentenceArray[i][j])){\n     \
    \           // push current word to new array\n                newStringArray.push(sentenceArray[i][j]);\n\
    \                // break the inner loop\n                break;\n           \
    \ }\n        }\n    }\n    // return the new string\n    return newStringArray.join(\"\
    \ \");\n}\n", "    var primes = [];\n    var counter = 1;\n    for(var i in sentence){\n\
    \        if(counter%2 != 0){\n            primes.push(counter);\n            counter\
    \ = 1;\n        }else{\n            counter++;\n        }\n    }\n    return primes.join(\"\
    \ \");\n}\n", "  const words = sentence.split(\" \");\n  words.sort();\n  const\
    \ newArr = new Array();\n  for(let i = 0; i < words.length; i++){\n    if(newArr.includes(words[i])){\n\
    \      continue;\n    }\n    let count = 0;\n    for(let j = i; j < words.length;\
    \ j++){\n      if(words[j] === words[i]){\n        count++;\n      }\n    }\n\
    \    if(count === 0){\n      newArr.push(words[i]);\n    }\n  }\n  return newArr.join(\"\
    \ \");\n}\n", "  return sentence.split(\" \")\n    .map(word => word.length).reduce((a,\
    \ b) => {\n      if(a % b === 0) return b\n      else return a\n    })\n}\n",
  "    const regex = /\\w+/g\n    return sentence.replace(regex,' ').split(' ')\n\
    }\n", "    let res = [];\n    sentence.split(' ').map(x => {\n        if ( /^\\\
    d+$/.test(x) ){\n            res.push(x);\n        }\n    });\n    return res.join('\
    \ ');\n};\n", "\tvar words = new Array();\n\tfor(i = 0; i < sentence.length; i++){\n\
    \t\tif(sentence.charCodeAt(i) > 65 && sentence.charCodeAt(i) < 90){\n\t\t\twords.push(sentence.slice(i,\
    \ i+1));\n\t\t}\n\t}\n\tconsole.log(words);\n\tfor(i = 1; i < words.length; i++){\n\
    \t\tfor(j = 1; j < words.length; j++){\n\t\t\tif((words[j].charCodeAt(i) > words[j].charCodeAt(j))\
    \ && (words[j].charCodeAt(i) < 97)){\n\t\t\t\twords.splice(j--, 1);\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn words.join(\" \");\n}\n", "    // Your code goes here\n}\n\
    </cell>\n<cell>", "    sentence = sentence.split(\" \").sort();\n    \n    let\
    \ answer = ''\n    for(let i=0;i<sentence.length;i++){\n        let check = true;\n\
    \        for(let j=0;j<i;j++){\n            if(parseInt(sentence[j])>parseInt(sentence[j+1])){\n\
    \                check = false \n                break\n            }\n      \
    \  }\n        if(check){\n            answer += sentence[i] + ' '\n        }\n\
    \    }\n    return answer.trim();\n}\n", "\tvar result = \"\";\n\tfor(var i =\
    \ 0;i < sentence.length;i++){\n\t\tif(isPrime(sentence.length) == true){\n\t\t\
    \tbreak;\n\t\t}\n\t\tif(isPrime(i) == true){\n\t\t\tresult += sentence[i];\n\t\
    \t}\n\t}\n\treturn result;\n}\n", "  if(sentence.length <= 0){\n    throw new\
    \ Error('The length of the given sentence should not be less than or equal to\
    \ 0');\n  }\n  if(sentence.length > 100){\n    throw new Error('The length of\
    \ the given sentence should be less than or equal to 100');\n  }\n  let arr=[];\n\
    \  for(let char of sentence){\n    if(/[a-zA-Z]/.test(char)){\n      arr.push(char)\n\
    \    }\n  }\n  let str=[];\n  let len=arr.length;\n  let flag=true;\n  for(let\
    \ i=0;i<len;i++){\n    let temp=arr[i];\n    let count=0\n    for(let j=0;j<len;j++){\n\
    \      if(arr[j]===temp){\n        count++;\n      }\n    }\n    if(count>=1){\n\
    \      flag=false;\n      break;\n    }\n  }\n  if(flag){\n    return arr.join(\"\
    \ \")\n  }else{\n    return \"\";\n  }\n}\n", "    if(typeof sentence === \"string\"\
    ){\n        let chars = sentence.split(' ').map(char => char.toLowerCase());\n\
    \        return chars.filter(char => isPrime(getLength(char)) == true).join(\"\
    \ \");\n    }\n    return false;\n};\n", "    // Fill this in.\n};\n", "\tconst\
    \ letters = sentence.split(\" \");\n\tconst primes = [];\n\tconst primeLetters\
    \ = [];\n\tletters.forEach(letter =>{\n\t\tlet prime = true;\n\t\tlet primeLetter\
    \ = letter;\n\t\tletters.forEach(l =>{\n\t\t\tif(l == letter){\n\t\t\t\tprime\
    \ = false;\n\t\t\t}\n\t\t});\n\t\tif(prime == true){\n\t\t\tprimes.push(prime);\n\
    \t\t\tprimeLetters.push(primeLetter);\n\t\t}\n\t});\n\tprimes.sort();\n\tprimeLetters.sort();\n\
    \treturn primeLetters.join(\" \");\n}\n", "  return words_in_sentence_helper(sentence,\"\
    \",0).join(\" \");\n}\n", "  let arr = sentence.split(\" \");\n  let new_arr =\
    \ new Array(arr.length);\n  new_arr.fill(\"\");\n  for(let i = 0; i < new_arr.length;\
    \ i++){\n    let rem = arr.filter(str => new_arr.indexOf(str) === -1);\n    let\
    \ prime_flag = true;\n    for(let j = 0; j < rem.length; j++){\n      if(Math.sqrt(rem.indexOf(j))\
    \ % 1 === 0){\n        prime_flag = false;\n      }\n    }\n    if(prime_flag){\n\
    \      new_arr[i] = arr[i];\n    }\n  }\n  return new_arr.join(\" \");\n}\n",
  "    let arr = sentence.split(' ');\n    let new_array = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        if(arr[i].length % 2 != 0 && arr[i].length !=\
    \ 1){\n            new_array.push(arr[i]);\n        }\n    }\n    return new_array.join('\
    \ ');\n}\n", "    let words = sentence.split(\" \");\n    let result = [];\n \
    \   for(let i=0;i<words.length;i++){\n        result.push(words[i]);\n    }\n\
    \    return result;\n}\n", "    let words = sentence.split(\" \");\n    let result\
    \ = [];\n    for(let i = 0; i < words.length; i++){\n        for(let j = 1; j\
    \ < words[i].length; j++){\n            for(let k = 1; k < j; k++){\n        \
    \        if(j % k === 0){\n                    result.push(words[i]);\n      \
    \              i = words.length;\n                }\n            }\n        }\n\
    \    }\n    return result.join(\" \");\n}\n", "    // Extract the words in the\
    \ sentence by splitting on spaces.\n    // The result is an array with a single\
    \ element consisting of the original sentence.\n    // Use map() to convert the\
    \ array into an actual array.\n    // map() maps a function over all elements\
    \ in the given array.\n    // In our case, map() will return the words in the\
    \ sentence as a string.\n    // The map() function will convert the string into\
    \ a list of words.\n    // We will then use the isPrime() function to check which\
    \ words are prime numbers,\n    // and finally join all the words into a single\
    \ string. The join() method will join the words,\n    // separated by a space,\n\
    \    // into a single string.\n    // Finally, the function will return the joined\
    \ string as our solution.\n    return sentence.split(\" \").map(word => word.length\
    \ && word.isPrime() ? word : \"\").join(\" \");\n}", "    // code here\n}\n",
  "  const words = sentence.split(' ')\n  let res = []\n  for(let i = 0; i < words.length;\
    \ i++){\n    if(isPrime(words[i].length)){\n      res.push(words[i])\n    }\n\
    \  }\n  return res.join(' ')\n}\n", "    \n    sentence = sentence.split(\" \"\
    );\n    \n    let primeNums = new Array();\n    let res = [];\n    let temp =\
    \ \"\";\n    let count = 1;\n    \n    for( i = 0; i < sentence.length; i++ ){\n\
    \        \n        if( isPrime( sentence[i].length ) ){\n            primeNums.push(\
    \ sentence[i].length );\n            \n            for(let j = 0; j < primeNums.length;\
    \ j++){\n                \n                if( primeNums[j] == sentence[i].length\
    \ ){\n                    \n                    temp += sentence[i];\n       \
    \             count++;\n                    break;\n                }\n      \
    \      }\n        }\n    }\n    \n    for( i = 0; i < primeNums.length; i++ ){\n\
    \        \n        res.push( temp.split( \" \" ).slice( 0, primeNums[i] ).join(\
    \ \" \" ) );\n        \n        temp = \"\";\n    }\n    \n    return res.join(\
    \ \" \" );\n    \n}\n", "    let arr = sentence.split(' ')\n    \n    let newArr\
    \ = arr.filter(x => is_prime(x.length))\n    return newArr.join(\" \")\n    \n\
    }\n", "\tvar result = [];\n\tvar words = sentence.split(\" \");\n\tfor (var i\
    \ = 0; i < words.length; i++){\n\t\tif(prime_number(words[i].length)){\n\t\t\t\
    result.push(words[i]);\n\t\t}\n\t}\n\treturn result.join(\" \");\n}\n", "    var\
    \ str = \"\";\n    var flag = true;\n    for(var i = 0; i < sentence.length; i++){\n\
    \        var letter = sentence[i];\n        if(letter != \" \"){\n           \
    \ flag = false;\n        }\n        if(flag){\n            str += letter;\n  \
    \      }\n    }\n    return str;\n}\n</code>\n<|/ a tags=string,algorithm,javascript\
    \ |>\n<| c |>\nThe only problem with this is that you can't find the primes before\
    \ you find the ones in the string because you can't know them before you try to\
    \ find them. Also, the problem states that you have to find them in the new order,\
    \ not the original order.\n<|/ c |>\n<| c |>\nI think you meant `var isPrime =\
    \ false;` instead of `var flag = true;`. Just a typo.\n<|/ c |>\n<| c |>\nI guess\
    \ I misunderstood the problem. Sorry about that. I just wanted to make sure that\
    \ the program does not output the numbers in the same order they were in the original\
    \ string, because that is unnecessary for me to check. I will revise my answer\
    \ accordingly.\n<|/ c |>\n<| c |>\nYou can't find the primes unless you try to\
    \ find them. There is no way to tell if they exist without trying them.\n<|/ c\
    \ |>\n<| c |>\nI see what you mean. Thanks for pointing that out.\n<|/ c |>\n\
    <| a tags=string,algorithm,javascript |>\n<code>\nconst isPrime = (n) => {\n \
    \ let result = true;\n  for( let i=2;i<=Math.sqrt(n);i++) {\n    if( n % i ===\
    \ 0 ) {\n      result = false;\n    }\n  }\n  return result;\n}\n\nconst primesInString\
    \ = (string) => {\n  let result = [];\n  \n  for(let i = 0; i <= string.length-1;\
    \ i++) {\n    if(isPrime(i)) {\n      result.push(i);\n    }\n  }\n  \n  return\
    \ result;\n}\n", "    let arr = sentence.split(\" \");\n    for(let i=0;i<arr.length;i++){\n\
    \        let tempArr = arr[i].split(\"\");\n        for(let j=0;j<tempArr.length;j++){\n\
    \            if(isPrime(tempArr.length) && isPrime(i)){\n                tempArr.join(\"\
    \");\n            }\n        }\n    }\n}\n", "    let newStr = [];\n    for(let\
    \ i=0;i<sentence.length;i++){\n        newStr.push(sentence[i])\n    }\n    let\
    \ newArr = newStr.split(\" \");\n    let newStr2 = \"\";\n    for(let i=0;i<newArr.length;i++){\n\
    \        newStr2 += newArr[i]+\" \";\n    }\n    let charNum = [];\n    for(let\
    \ i=0;i<newStr2.length;i++){\n        let char = newStr2[i];\n        let index\
    \ = newStr2.indexOf(char);\n        while(index>0){\n            charNum.push(index)\n\
    \            index = newStr2.indexOf(char,index+1)\n        }\n    }\n    for(let\
    \ i=0;i<charNum.length;i++){\n        if(!(newStr2.includes(i))){\n          \
    \  newStr2 += i\n        }\n    }\n    return newStr2.trim()\n};", "    return\
    \ words_in_sentence(sentence,1);\n};", "    // TODO: Write your code here\n}\n\
    </cell>\n<text>\nNext we write a function which returns a set of all words in\
    \ the sentence containing only letters.\n\n\n</text>\n<cell>", "  let arr = sentence.split(\"\
    \ \").map(x => x.trim());\n  let arr = new Set(arr);\n  let primeArr = [];\n \
    \ let prime = 0;\n  arr.forEach(function(x){\n    if(x%1 === 0) primeArr.push(x);\n\
    \    if(x%1 === 1) prime = x;\n  });\n  return primeArr.join(\" \");\n}\n", " \
    \   let arr = sentence.split(\" \");\n    return arr.filter((e)=>{\n        return\
    \ e.length % 2 === 0;\n    }).sort((a,b) => a.length - b.length);\n}", "    let\
    \ arr = [];\n    for(let i = 0; i < sentence.length; i++){\n        arr.push(sentence.charAt(i));\n\
    \    }\n    return arr.filter(function(e){\n        let prime = true;\n      \
    \  for(let i = 0; i < arr.length; i++){\n            if(e === arr[i]){\n     \
    \           prime = false;\n                break;\n            }\n        }\n\
    \        return prime;\n    });\n};", "    var res = [];\n    for(let word of\
    \ sentence.split(\" \")){\n        if(isPrime(word.length)){\n            res.push(word);\n\
    \        }\n    }\n    return res.join(\" \");\n}\n", "    return sentence.split('\
    \ ').filter(function(word){\n        if(!/^[a-z]+$/.test(word)){\n           \
    \ return false;\n        }\n        for(let i = 0; i < word.length; i++){\n  \
    \          if(word[i] !== 'a' && word[i] !== 'e' && word[i] !== 'i' && word[i]\
    \ !== 'o' && word[i] !== 'u'){\n                return false;\n            }\n\
    \        }\n        return true;\n    }).join(\" \");\n};\n", "    return words_in_sentence(sentence.split());\n\
    };\n\n", "    var result = '';\n    var re = /^[a-zA-Z]+$/;\n    if(re.test(sentence)){\n\
    \        sentence.trim().split(' ').forEach(function(item){\n            if(item.length\
    \ == 1){\n                result += item;\n            }\n            else if(\
    \ (prime(item) == true) && (item.length <= 2) ){\n                result += item;\n\
    \            }\n            else if( (prime(item) == true) && (item.length <=\
    \ 4) ){\n                result += item;\n            }\n            else if(\
    \ (prime(item) == true) && (item.length <= 7) ){\n                result += item;\n\
    \            }\n            else if( (prime(item) == true) && (item.length <=\
    \ 11) ){\n                result += item;\n            }\n            else if(\
    \ (prime(item) == true) && (item.length <= 13) ){\n                result += item;\n\
    \            }\n            else if( (prime(item) == true) && (item.length <=\
    \ 17) ){\n                result += item;\n            }\n            else if(\
    \ (prime(item) == true) && (item.length <= 19) ){\n                result += item;\n\
    \            }\n            else if( (prime(item) == true) && (item.length <=\
    \ 23) ){\n                result += item;\n            }\n            else if(\
    \ (prime(item) == true) && (item.length <= 29) ){\n                result += item;\n\
    \            }\n            else if( (prime(item) == true) && (item.length <=\
    \ 33) ){\n                result += item;\n            }\n            else if(\
    \ (prime(item) == true) && (item.length <= 39) ){\n                result += item;\n\
    \            }\n            else if( (prime(item) == true) && (item.length <=\
    \ 41) ){\n                result += item;\n            }\n            else if(\
    \ (prime(item) == true) && (item.length <= 43) ){\n                result += item;\n\
    \            }\n            else if( (prime(item) == true) && (item.length <=\
    \ 47) ){\n                result += item;\n            }\n            else if(\
    \ (prime(item) == true) && (item.length <= 53) ){\n                result += item;\n\
    \            }\n            else if( (prime(item) == true) && (item.length <=\
    \ 59) ){\n                result += item;\n            }\n            else if(\
    \ (prime(item) == true) && (item.length <= 61) ){\n                result += item;\n\
    \            }\n            else if( (prime(item) == true) && (item.length <=\
    \ 67) ){\n                result += item;\n            }\n            else if(\
    \ (prime(item) == true) && (item.length <= 71) ){\n                result += item;\n\
    \            }\n            else if( (prime(item) == true) && (item.length <=\
    \ 79) ){\n                result += item;\n            }\n            else if(\
    \ (prime(item) == true) && (item.length <= 83) ){\n                result += item;\n\
    \            }\n            else if( (prime(item) == true) && (item.length ",
  "    let word_arr = sentence.split(\" \");\n    let final_word_arr = new Array();\n\
    \    for(let i = 0; i < word_arr.length; i++){\n        let word = word_arr[i];\n\
    \        let first_letter_of_word = (word[0]).toLowerCase();\n        let is_prime\
    \ = true;\n        for(let j = 2; j < word.length; j++){\n            if((word[j].toLowerCase())\
    \ != first_letter_of_word){\n                is_prime = false;\n             \
    \   break;\n            }\n        }\n        if(is_prime == true){\n        \
    \    final_word_arr.push(word);\n        }\n    }\n    for(let i = 0; i < final_word_arr.length;\
    \ i++){\n        if(final_word_arr[i].length !== word_arr[i].length){\n      \
    \      final_word_arr.splice(i, 1);\n            i--;\n        }\n    }\n    return\
    \ final_word_arr.join(\" \");\n}\n", "    \n    let words = sentence.split(\"\
    \ \");\n    \n    let result = \"\";\n    \n    for(let i in words){\n       \
    \ let word = words[i];\n        for(let j = 2; j <= Math.sqrt(word.length); j++){\n\
    \            if(word.length % j === 0){\n                let temp = word.slice(0,\
    \ j);\n                if(!words.includes(temp)){\n                    result\
    \ += temp + \" \";\n                }\n            }\n        }\n    }\n    return\
    \ result.trim();\n}\n\nwords_in_sentence(\"Let's go for swimming\");", "  return\
    \ sentence.split(\" \").sort().join(\" \");\n}\n</cell>\n<text>\n\U0001F3BA Exercise\
    \ Solution: Bell Curve Problem\nWrite a function that takes in a number and returns\
    \ the closest number to it on the bell curve.\n\n\n</text>\n<cell>", "    let\
    \ results = [];\n    for (let i = 0; i < sentence.length; i++) {\n        let\
    \ str = sentence.charAt(i).toLowerCase();\n        if (str === 'a' || str ===\
    \ 'e' || str === 'i' || str === 'o' || str === 'u') {\n            results.push(str);\n\
    \        }\n    }\n    return results.join(' ');\n};\n", "    let strArr = sentence.split(\"\
    \ \");\n    let primes = [];\n    for(let i = 0; i < strArr.length; i++) {\n \
    \       if(strArr[i].length === 1) {\n            let prime = true;\n        \
    \    for (let j = 0; j < strArr.length; j++) {\n                if(strArr[j] ===\
    \ strArr[j+1]) {\n                    prime = false;\n                    break;\n\
    \                }\n            }\n            if(prime) {\n                primes.push(i);\n\
    \            }\n        }\n    }\n    return strArr.slice(0, primes[primes.length-1]).join(\"\
    \ \");\n}", "    return sentence.split(\" \").filter((word) => {\n        if(word.length\
    \ == 2) {\n            \n            return true;\n        }\n        let prime\
    \ = false;\n        for(let i=2;i<word.length;i++){\n            if(word.substring(0,i).split('').filter((char)\
    \ => {\n                return (char >= '0' && char <= '9');\n            }).length\
    \ == word.length){\n                prime = true;\n                break;\n  \
    \          }\n        }\n        if(!prime){\n            return true;\n     \
    \   }\n        \n        return false;\n    }).join(\" \");\n};", "  let words\
    \ = [''];\n  for (let i = 0; i < sentence.length; i++){\n    words.push(sentence.substr(i,\
    \ 1));\n  }\n  let result = \"\";\n  for (let i = 0; i <= words.length; i++){\n\
    \    for (let j = 0; j < words[i].length; j++){\n      if (isPrime(words[i].length)\
    \ && isPrime(words[j].length) && words[i].length > 0 && words[j].length > 0 &&\
    \ isPrime(words[i].length+words[j].length)){\n        if (words[i].length + words[j].length\
    \ == words.length){\n          result += words[i] + ' ' + words[j];\n        }\n\
    \      }\n    }\n  }\n  return result;\n}\n", "    //write your code here\n  \
    \  let array = sentence.split(\" \").map(w => w.toLowerCase());\n    let ans =\
    \ [];\n    for(let i=0;i<array.length;i++){\n        let temp = {};\n        let\
    \ word = array[i].toLowerCase();\n        let prime = true;\n        for(let j=2;j<Math.sqrt(word.length);j++){\n\
    \            if(!temp[j]){\n                if(!(j%word.length==0)){\n       \
    \             prime = false;\n                    break;\n                }\n\
    \                temp[j] = true;\n            }\n        }\n        if(prime)\
    \ ans.push(word);\n    }\n    return ans.join(\" \");\n}\n", "    let words =\
    \ \"\";\n    for(let i = 0; i < sentence.length; i++){\n        if(isPrime(sentence[i])){\n\
    \            if(words == \"\"){\n                words = sentence[i];\n      \
    \      }else{\n                words = `${words} ${sentence[i]}`;\n          \
    \  }\n        }\n    }\n    return words;\n}", "    let res = [];\n    let str\
    \ = \"\";\n    \n    for (let i = 0; i < sentence.length; i++){\n        let str\
    \ = sentence[i];\n        for (let j = 1; j <= Math.sqrt(str.length); j++){\n\
    \            str += sentence[i];\n        }\n        str = str.replace(/\\s+/g,\
    \ \" \");\n        str = str.toLowerCase();\n        \n        str = str.replace(/\
    \ /g, \"\");\n        \n        res = res.concat(getPrimes(str));\n        \n\
    \    }\n    \n    return res.join(\" \");\n    \n}\n", "    let new_sentence =\
    \ \"\"\n    for(let i = 0 ; i < sentence.length ; i++){\n        if(isPrime(sentence[i].length)){\n\
    \            new_sentence += sentence[i]\n        }\n    }\n    return new_sentence\n\
    }\n", "    // Handle edge cases first\n    if(sentence.length <= 1){\n       \
    \ return \"\";\n    }\n\n    let result = \"\";\n    const primes = new Set();\n\
    \    const letters = sentence.split(\" \");\n    letters.forEach(letter => {\n\
    \        primes.add(isPrime(letter));\n    });\n    primes.forEach(prime => {\n\
    \        letters.map(letter => {\n            if(isPrime(letter)){\n         \
    \       if(primes.has(prime)){\n                    result = result + \" \" +\
    \ letter;\n                }\n            }\n        })\n    })\n\n    return\
    \ result;\n};\n</code>\n<|/ a tags=data-structures,algorithm,javascript dscore=2\
    \ |>\n<| a dscore=2 |>\nThe solution would be this one:\n\n<code>\nconst wordsInSentence\
    \ = function(str) {\n    // The first letter of the sentence is always included\n\
    \    const result = str.split(' ').map(word => word[0]);\n\n    // Now the rest\
    \ of the sentence is divided into substrings of length 2 from the first letter\
    \ \n    const letters = str.slice(1).split(' ');\n\n    // For each letter we\
    \ check if it appears in the first position in the sentence, if not we move on\n\
    \    letters.forEach((letter, index) => {\n        if (!result.includes(letter))\
    \ {\n            letters.forEach((letter) => {\n                if (letter !==\
    \ letters[index]) {\n                    result.push(letter);\n              \
    \  }\n            })\n        }\n    })\n\n    // The result is the result of\
    \ the previous iteration\n    return result;\n};\n</code>\n<|/ a tags=data-structures,algorithm,javascript\
    \ |>\n<| c |>\nAren't you iterating the string twice? First time for splitting\
    \ the string by spaces and then again for iterating over the letters?\n<|/ c |>\n\
    <| c |>\nYes you're right, in this way it takes more time. I have edited the code\
    \ so that it now splits the string by spaces just once.\n<|/ c |>\n<| a tags=data-structures,algorithm,javascript\
    \ |>\nHere's my take on this problem. The main algorithm is to first find all\
    \ substrings of length 1 from index 0 and then for each of them we search for\
    \ a string where each character is at an even index (starting at 0). These are\
    \ the strings that would have appeared at the original string at every even index.\
    \ These strings have to be removed from the original string.\nHere's a JavaScript\
    \ code snippet for this:\n\n<code>", "    var list = new Array();\n    for(var\
    \ i = 0; i < sentence.length; i++){\n        if(isPrime(sentence.length - (i +\
    \ 1))) list.push(sentence.slice(i + 1).join(\" \"));\n    }\n    return list.join(\"\
    \ \");\n}\n", "    let words = sentence.split(\" \").filter((x, i)=> !(i%2))\n\
    \    let primes = []\n    let prime = \"\"\n    for(let i = 0; i < words.length;\
    \ i++){\n        let word = words[i]\n        if(word.length == 1 && (word.charCodeAt(0)\
    \ > 47 && word.charCodeAt(0) < 58)){\n            prime = word + \" \" + prime\n\
    \        } else if(word.length == 2 && word.charCodeAt(0) > 64 && word.charCodeAt(0)\
    \ < 91){\n            prime = word + \" \" + prime\n        } else {\n       \
    \     let wordPrime = true\n            for(let j = 0; j < primes.length; j++){\n\
    \                if(primes[j] == word.length){\n                    wordPrime\
    \ = false\n                }\n            }\n            if(wordPrime){\n    \
    \            primes.push(word.length)\n                prime = word + \" \" +\
    \ prime\n            }\n        }\n    }\n    console.log(prime)\n}", "  let res\
    \ = [];\n  sentence.split(\" \").map((item)=>{\n    let count = 0;\n    let str\
    \ = item;\n    while(str.length){\n      str = str.substr(0,str.length-2)\n  \
    \    if(str.length%2 == 0){\n        let nStr = str.substr(str.length/2, 2);\n\
    \        res.push(nStr);\n        str = str.substr(0,str.length/2-1);\n      \
    \  count++;\n      }else{\n        let nStr = str.substr(str.length/2+1, 1);\n\
    \        res.push(nStr);\n        str = str.substr(0,str.length/2);\n        count++;\n\
    \      }\n    }\n    if(count == str.length){\n      res.push(item);\n    }\n\
    \  });\n  return res.join(\" \");\n}\n", "    let words = [];\n    let sentenceList\
    \ = sentence.split(\" \");\n    for(let word of sentenceList){\n        let n\
    \ = prime(word.length);\n        while(n%sentence.length !== 0){\n           \
    \ n++;\n        }\n        words.push(word);\n    }\n    return words.join(\"\
    \ \");\n}\n", "    const new_sentence = sentence.replace(/^\\s+|\\s+$/g, \"\"\
    ).split(\" \");\n    for(let i = 0; i < new_sentence.length; i++){\n        if(isPrime(new_sentence[i].length)){\n\
    \            new_sentence[i] = new_sentence[i] + \" \";\n        }\n    }\n  \
    \  return new_sentence.join(\" \");\n}\n", "  let arr = sentence.split(\" \");\n\
    \  let newArr = [];\n  for(let i = 0; i < arr.length; i++){\n    let n = Math.ceil(Math.sqrt(arr.length));\n\
    \    for(let j = 0; j < n; j++){\n      if(j % 2 === 0){\n        newArr.push(arr[j]);\n\
    \      }\n    }\n  }\n  return newArr.join(\" \");\n}\n", "    let strArr = sentence.split(\"\
    \ \");\n    for(let i = 0; i < strArr.length; i++){\n        if(strArr[i].split(\"\
    \").length === 2 && strArr[i].split(\"\").every((num) => num%2 === 0)){\n    \
    \        return strArr[i]\n        }\n    }\n}\n", "    let res = \"\";\n    let\
    \ primes = [];\n    let primesDict = {};\n    for(let i = 0; i < sentence.length;\
    \ i++){\n        let char = sentence[i];\n        if(primesDict[char]){\n    \
    \        primes.push(primesDict[char]);\n        }\n        primesDict[char] =\
    \ i;\n    }\n    primes.sort((a,b) => {\n        return a - b;\n    });\n    for(let\
    \ i = 0; i < primes.length; i++){\n        let char = sentence.substr(primesDict[primes[i]]+1,\
    \ 1);\n        if(char == \" \"){\n            primes.splice(i,1);\n         \
    \   i--;\n        }\n        else if(primesDict[char] == 0){\n            primesDict[char]\
    \ = i;\n        }\n    }\n    for(let i = 0; i < primes.length; i++){\n      \
    \  if(primes[i] == 0){\n            res += \" \";\n        }\n        else{\n\
    \            let char = sentence.substr(primesDict[primes[i]]+1, 1);\n       \
    \     primesDict[char] = primes[i];\n            if(char == \" \"){\n        \
    \        primes.splice(i,1);\n                i--;\n            }\n          \
    \  else{\n                res += char;\n            }\n        }\n    }\n    return\
    \ res;\n}\n", "    let ans = \"\";\n    for(let word of sentence.split(\" \")){\n\
    \        let n = parseInt(word);\n        if(!isNaN(parseInt(word))){\n      \
    \      for(let i = 1; i < n; i++){\n                if(n % i === 0){\n       \
    \             ans += `${word} `;\n                    break;\n               \
    \ }\n            }\n        }\n    }\n    console.log(ans);\n    return ans;\n\
    }\n", "    return sentence.split(\" \").filter( function( item ){\n        return\
    \ prime_number( item.length );\n    });\n}\n", "    let arr = sentence.split(\"\
    \ \");\n    \n    let primes = new Array(Math.sqrt(arr.length));\n    for(let\
    \ i =0; i < primes.length; i++){\n        if(arr[i].length === 1){\n         \
    \   continue;\n        }\n        let flag = false;\n        for(let j = 0; j\
    \ <= Math.sqrt(arr.length); j++){\n            if(arr[i].includes(j)){\n     \
    \           flag = true;\n                break;\n            }\n        }\n \
    \       if(!flag){\n            primes[i] = false;\n        }\n    }\n    \n \
    \   let ans = \"\";\n    for(let i = 0; i < arr.length; i++){\n        if(primes[i]){\n\
    \            ans += arr[i];\n        }\n    }\n    return ans;\n}\n", "    return\
    \ sentence.split(' ').filter( n => is_prime(n) )\n}\n", "    var result=\"\";\n\
    \    var length=0;\n    var count=0;\n    for(i=0;i<sentence.length;i++){\n  \
    \      var flag=true;\n        for(j=0;j<count;j++){\n            if(sentence[i]==words[j]){\n\
    \                flag=false;\n                break;\n            }\n        }\n\
    \        if(flag){\n            count++;\n        }\n    }\n    for(i=0;i<count;i++){\n\
    \        if(length%count!=0 || length==1){\n            result+=sentence[i];\n\
    \            length++;\n        }\n    }\n    return result\n}\n", "    if(sentence.indexOf(\"\
    \ \") === -1){\n        return sentence;\n    }\n    var result = \"\";\n    for(var\
    \ i=0; i<sentence.length; i++){\n        var index = wordIndex(sentence, i);\n\
    \        if((index + 1) % 2 === 0){\n            result += sentence[i];\n    \
    \    }\n    }\n    return result;\n};", "    // TODO: Write your code\n\n    let\
    \ words = sentence.split(\" \");\n\n    let string = '';\n\n    for (let i = 0;i<words.length;i++){\n\
    \        let n = Math.ceil(words[i].length/2);\n        for(let j=1;j<n;j++){\n\
    \            string += words[i].substring(0,1);\n        }\n    }\n    return\
    \ string;\n}\n", "  let words = sentence.split(\" \")\n  let new_words = []\n\
    \  for(let i = 0;i<words.length;i++){\n    if(isPrime(words[i].length)){\n   \
    \   new_words.push(words[i])\n    }\n  }\n  return new_words.join(\" \")\n}",
  "    let words = sentence.split(' ');\n    let result = \"\";\n    for (let i =\
    \ 0; i < words.length; i++){\n        let curr = words[i];\n        let len =\
    \ Math.ceil(Math.sqrt(curr.length));\n        for (let j = 0; j < len; j++){\n\
    \            let found = false;\n            for (let k = 0; k < words.length;\
    \ k++){\n                if (words[k].startsWith(curr.slice(0,j) + curr.slice(j\
    \ + 1))) found = true;\n            }\n            if (!found) result += curr.slice(0,j)\
    \ + \" \" + curr.slice(j+1);\n        }\n    }\n    return result;\n}", "  if((sentence\
    \ == \"\") || (sentence.length <= 0)){\n    return \"\";\n  }\n  let arr = sentence.split(\"\
    \ \");\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(isPrime(arr[i].length)){\n\
    \      result.push(arr[i]);\n    }\n  }\n  return result.join(\" \");\n}", " \
    \   // Write your code here\n    const letters = [...sentence];\n    const len\
    \ = letters.length;\n    if (len === 0){\n        return \"\";\n    }\n    let\
    \ temp = [];\n    for (let i = 0; i<len-1; i++){\n        for (let j=i+1; j<len;\
    \ j++){\n            if (isPrime(letters[i]) && isPrime(letters[j])){\n      \
    \          temp.push(letters[i]);\n                temp.push(letters[j]);\n  \
    \          }\n        }\n    }\n    temp = temp.sort();\n    return temp.join(\"\
    \ \");\n}\n", "    let words = sentence.split(\" \");\n    let newWords = [];\n\
    \    let primes = [];\n    for(let i = 0; i < words.length; i++){\n        let\
    \ count = 0;\n        for(let j = 0; j < primes.length; j++){\n            if(words[i].length\
    \ == primes[j])\n                count++;\n        }\n        if(count == primes.length){\n\
    \            newWords.push(words[i]);\n            primes.push(words[i].length);\n\
    \        }\n    }\n    return newWords.join(\" \");\n}", "    let result = [];\n\
    \    for(let i = 0; i < sentence.length; i++){\n        if(checkPrime(sentence[i].length)){\n\
    \            result.push(sentence[i]);\n        }\n    }\n    return result.join('\
    \ ');\n}\n", "    return sentence.split(\" \").filter(word => is_prime(word.length)).join(\"\
    \ \");\n}\n", "    let newArr = [];\n    let arr = sentence.split(\" \");\n  \
    \  for(let i = 0; i < arr.length; i++){\n        for(let j = 0; j < arr[i].length;\
    \ j++){\n            for(let k = 0; k < arr[i].length; k++){\n               \
    \ if(arr[i].charAt(j) != \" \" && arr[i].charAt(j) != \"-\" && arr[i].charAt(j)\
    \ != \"&\"){\n                    let temp = arr[i].charAt(j);\n             \
    \       newArr.push(temp);\n                }\n            }\n        }\n    }\n\
    \    let newStr = \"\";\n    for(let i = 0; i < newArr.length; i++){\n       \
    \ let count = 0;\n        for(let j = 0; j < newArr.length; j++){\n          \
    \  if(newArr[i] == newArr[j]){\n                count++;\n            }\n    \
    \    }\n        if(count == 2){\n            newStr += \" \" + newArr[i];\n  \
    \      }\n    }\n    return newStr;\n}\n", "    sentence=sentence.trim();\n  \
    \  let arr=sentence.split(\" \");\n    let str=\"\";\n    for(let i=0;i<arr.length;i++){\n\
    \        let nums=arr[i].length;\n        if(nums==1){\n            str+=arr[i];\n\
    \        }else if(nums==2){\n            if(arr[i][0]==arr[i][1]){\n         \
    \       str+=arr[i];\n            }else{\n                let tmp=arr[i].substring(0,1);\n\
    \                let tmp2=arr[i].substring(1,2);\n                let tmp3=arr[i].substring(2,3);\n\
    \                let tmp4=arr[i].substring(3,4);\n                if(arr[i][0]==tmp&&arr[i][1]==tmp2){\n\
    \                    str+=tmp;\n                }else if(arr[i][0]==tmp&&arr[i][1]==tmp3){\n\
    \                    str+=tmp2;\n                }else if(arr[i][0]==tmp&&arr[i][1]==tmp4){\n\
    \                    str+=tmp3;\n                }else{\n                    str+=tmp4;\n\
    \                }\n            }\n        }else{\n            if(arr[i][0]==arr[i][1]&&arr[i][2]==arr[i][3]){\n\
    \                str+=arr[i];\n            }else if(arr[i][0]==arr[i][2]&&arr[i][1]==arr[i][3]){\n\
    \                str+=arr[i].substring(0,1);\n            }else if(arr[i][0]==arr[i][1]&&arr[i][2]==arr[i][4]){\n\
    \                str+=arr[i].substring(0,1);\n                let tmp2=arr[i].substring(1,2);\n\
    \                let tmp3=arr[i].substring(2,3);\n                let tmp4=arr[i].substring(3,4);\n\
    \                if(arr[i][0]==tmp2&&arr[i][1]==tmp3){\n                    str+=tmp;\n\
    \                }else if(arr[i][0]==tmp2&&arr[i][1]==tmp4){\n               \
    \     str+=tmp;\n                }else if(arr[i][0]==tmp3&&arr[i][1]==tmp4){\n\
    \                    str+=tmp2;\n                }else{\n                    str+=tmp2;\n\
    \                    str+=tmp3;\n                    str+=tmp4;\n            \
    \    }\n            }else if(arr[i][0]==arr[i][1]&&arr[i][2]==arr[i][3]){\n  \
    \              str+=arr[i].substring(0,2);\n            }else if(arr[i][0]==arr[i][2]&&arr[i][1]==arr[i][3]){\n\
    \                str+=arr[i].substring(0,2);\n                let tmp2=arr[i].substring(1,3);\n\
    \                let tmp3=arr[i].substring(2,4);\n                if(arr[i][0]==tmp2&&arr[i][1]==tmp3){\n\
    \                    str+=tmp;\n                }else if(arr[i][0]==tmp2&&arr[i][1]",
  "    \n    // Your code here\n    let array = sentence.split(\" \").sort();\n  \
    \  let words = [];\n    for (let item of array) {\n        if (is_prime(item))\
    \ {\n            words.push(item);\n        }\n    }\n    return words.join(\"\
    \ \");\n};\n", "    let arr = sentence.split(' ')\n    let arr = arr.map((val)\
    \ => {\n       return val.charCodeAt()\n    }) \n    let arr = arr.filter(val\
    \ => {\n       return val > 64 && val < 91 \n    }) \n    let arr = arr.sort((val1,val2)\
    \ => {\n        return val1 - val2\n    }) \n    return arr.join(' ')\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
