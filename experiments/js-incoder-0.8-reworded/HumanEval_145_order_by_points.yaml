name: HumanEval_145_order_by_points
language: js
prompt: "//Write a function which sorts the given array of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1,\
  \ -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11,\
  \ 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423,\
  \ 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
  \ 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
completions: ["    return nums.sort(function(a, b){\n        var s = a + b;\n    \
    \    if (a > b || s === 0){\n            return -1;\n        }\n        if (a\
    \ < b || s === 0){\n            return 1;\n        }\n        return 0;\n    });\n\
    }\n", "\tvar max = 0;\n\tfor(var i in nums) max = Math.max(nums[i], max);\n\t\
    nums.sort(function(a, b){\n\t\treturn (a > b) ? 1 : ((a < b) ? -1 : 0);\n\t});\n\
    \tnums.reverse();\n\tfor(var i = 0; i < nums.length; i++) nums[i] = nums[i] >\
    \ max ? nums[i] : nums[i] + max;\n\treturn nums;\n}\n", "  nums.sort((a,b) =>\
    \ {\n    if (a.toString().split('').reduce((prev, curr) => prev + curr, 0) > b.toString().split('').reduce((prev,\
    \ curr) => prev + curr, 0)){\n      return 1\n    }else if (a.toString().split('').reduce((prev,\
    \ curr) => prev + curr, 0) < b.toString().split('').reduce((prev, curr) => prev\
    \ + curr, 0)){\n      return -1\n    }else{\n      return 0\n    }\n  })\n}\n",
  "\tlet len = nums.length;\n\tif(len < 2){\n\t\treturn nums;\n\t}\n\tlet sum = 0,\
    \ curr = 0, index = 0;\n\twhile(index < len){\n\t\tcurr = sum;\n\t\tlet i = index+1;\n\
    \t\twhile(i < len){\n\t\t\tif(nums[i] > 0){\n\t\t\t\tcurr += nums[i] - nums[index];\n\
    \t\t\t\tnums[i] = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tsum += curr;\n\
    \t\tindex++;\n\t}\n\treturn nums;\n}", "    return nums.sort(function(a, b){\n\
    \        var sumA = nums.reduce((sum, num) => sum + num, 0);\n        var sumB\
    \ = nums.reduce((sum, num) => sum + num, 0);\n        if(sumA != sumB){\n    \
    \        return sumB - sumA;\n        }\n        return a - b;\n    });\n}\n",
  "  var arr = [];\n  var index = 0;\n  for (var i = nums.length - 1; i >= 0; i--){\n\
    \    var dig = nums[i].toString().split('')\n    .map(function(digit){\n     \
    \ return parseInt(digit)\n    })\n    .map(function(digit){\n      return digit*2\n\
    \    })\n    .reduce(function(acc, digit){\n      return acc + digit\n    });\n\
    \    arr[index] = dig;\n    index++;\n  }\n  return arr.map(function(digit){\n\
    \    return parseInt(digit)\n  })\n}\n", "  let result = []\n  for(let i=0;i<nums.length;i++){\n\
    \    let sum = 0;\n    for(let j=i;j<nums.length;j++){\n      sum += nums[j].charCodeAt()\
    \ - 48\n    }\n    if(sum < 0){\n      sum *= -1\n    }\n    result.push(nums[i])\n\
    \  }\n  return result\n}\n\n", "    const res = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        const sum = Math.floor(nums[i]/Math.pow(10,nums[i].toString().length));\n\
    \        res.push(sum);\n    }\n    return res;\n}\n", "\tnums = nums.sort(function(a,\
    \ b){\n\t\treturn point_sum(a, b);\n\t});\n\treturn nums;\n}", "    var sums=0;\n\
    \    var len=nums.length;\n    var idxs=[];\n    var i;\n\n    for(i=0;i<len;i++){\n\
    \        sums+=nums[i]*Math.pow(10,len-(i+1));\n    }\n\n    for(i=0;i<len;i++){\n\
    \        idxs.push(i);\n    }\n\n    idxs.sort(function(a,b){\n        var an=nums[a];\n\
    \        var bn=nums[b];\n        return (an>bn)?1:(an<bn)?-1:0;\n    });\n\n\
    \    for(i=0;i<len;i++){\n        nums[idxs[i]]=nums[idxs[i]];\n    }\n\n    return\
    \ nums;\n}\n</code>\n<|/ a dscore=0 tags=javascript |>\n<| c |>\nThis doesn't\
    \ answer the question, just adds an explanation.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "  var i, j, p, tmp, num;\n  var result = [];\n\n  if (nums.length <\
    \ 2) return nums;\n\n  tmp = [];\n  for (i = 0, j = nums.length; i < j; i++) {\n\
    \    p = nums[i];\n    if (p.length < p.length || p.length > 11) {\n      num\
    \ = nums[j];\n      if (!tmp[num]) {\n        tmp[num] = nums.slice(0, i);\n \
    \     }\n      nums.splice(j, 1);\n      result.push(tmp[num]);\n      j--;\n\
    \    } else {\n      result.push(p);\n    }\n  }\n  return result;\n}\n", "  let\
    \ sum = 0;\n  let len = nums.length;\n  for (let i = 0; i < len; i++) {\n    sum\
    \ += nums[i];\n  }\n  nums.sort((a, b) => {\n    return sum - a + b\n  });\n \
    \ return nums;\n}\n", "  var res=[];\n  nums.sort(function(a, b){\n    var sum=a.toString()\
    \ + b.toString();\n    res.push(a-sum);\n    return sum;\n  });\n  return res;\n\
    }\n", "    var arr = [],\n        arr2 = [],\n        arr3 = [],\n        arr4\
    \ = [],\n        arr5 = [],\n        arr6 = [],\n        arr7 = [],\n        arr8\
    \ = [],\n        arr9 = [],\n        arr10 = [];\n        \n    for(var i=0;i<nums.length;i++){\n\
    \        if(nums[i].length>0){\n            var sum = 0, temp = 0;\n         \
    \   for(var j=0;j<nums[i].length;j++){\n                temp += nums[i][j];\n\
    \                sum = sum + temp;\n            }\n            \n            if(i<7){\n\
    \                arr10[i] = sum;\n            }\n            else if(sum>8){\n\
    \                arr9[i] = sum;\n            }\n            else if(sum>6){\n\
    \                arr8[i] = sum;\n            }\n            else if(sum>4){\n\
    \                arr7[i] = sum;\n            }\n            else if(sum>2){\n\
    \                arr6[i] = sum;\n            }\n            else if(sum>0){\n\
    \                arr5[i] = sum;\n            }\n            else{\n          \
    \      arr4[i] = sum;\n            }\n        }\n    }\n    \n    for(var i=0;i<10;i++){\n\
    \        arr2.push(arr10[i]);\n    }\n    for(var i=10;i<20;i++){\n        arr3.push(arr9[i]);\n\
    \    }\n    for(var i=20;i<40;i++){\n        arr4.push(arr8[i]);\n    }\n    for(var\
    \ i=40;i<60;i++){\n        arr5.push(arr7[i]);\n    }\n    for(var i=60;i<80;i++){\n\
    \        arr6.push(arr6[i]);\n    }\n    for(var i=80;i<100;i++){\n        arr7.push(arr5[i]);\n\
    \    }\n    for(var i=100;i<200;i++){\n        arr8.push(arr4[i]);\n    }\n  \
    \  for(var i=200;i<300;i++){\n        arr9.push(arr3[i]);\n    }\n    for(var\
    \ i=300;i<400;i++){\n        arr10.push(arr2[i]);\n    }\n    \n    arr = arr3.concat(arr4,\
    \ arr5, arr6, arr7, arr8, arr9, arr10);\n    return arr;\n}\n", "    if(nums.length\
    \ == 0)\n        return nums;\n    \n    //Convert every digit to its position\
    \ in array\n    var digits = Array.apply(null, nums.map(function(num){\n     \
    \   return parseInt(num.toString().slice(0, -1), 10);\n    }));\n    \n    //Sort\
    \ digits into ascending order\n    return digits.sort(function(a, b){\n      \
    \  return b - a;\n    });\n}\n", "\tvar sum = 0;\n\tfor(var i=0; i<nums.length;\
    \ i++){\n\t\tsum += nums[i];\n\t}\n\treturn nums.sort(function(a, b){\n\t\treturn\
    \ sum - a + b;\n\t});\n}", "    var ret=[],\n        sum=0;\n    for(var i=0;i<nums.length;i++){\n\
    \        var num= nums[i];\n        sum+=num;\n        ret.push(num);\n    }\n\
    \    ret.sort(function(a,b){\n        return sum-b;\n    });\n    return ret;\n\
    }\n", "  var sortedNums = [], sum = 0, num;\n  for (var i = 0; i < nums.length;\
    \ i++){\n    num = nums[i];\n    sum += num;\n    sortedNums.push(num);\n  }\n\
    \  \n  while(sortedNums.length){\n    sortedNums.sort(function(a, b){\n      return\
    \ (a + b) - sum;\n    });\n  }\n  return sortedNums;\n}\n", "    \n}\n", "\tvar\
    \ sums = [];\n\tfor(var i = 0; i < nums.length; i++){\n\t\tvar n = nums[i];\n\t\
    \tsums[i] = Number(n);\n\t}\n\tfor(var i = 0; i < nums.length; i++){\n\t\tsums[i]\
    \ = (sums[i] + (sums[i]>0?1:-1));\n\t}\n\tsums.sort(function(a,b){return b-a});\n\
    \tfor(var j = 0; j < nums.length; j++){\n\t\tnums[j] = sums[j];\n\t}\n\treturn\
    \ nums;\n}", "  var result = [];\n  var max_sum = 0;\n  for (var i = 0; i < nums.length;\
    \ i++){\n    var num = nums[i];\n    var sum = 0;\n    while (num != 0){\n   \
    \   sum += num % 10;\n      num /= 10;\n    }\n    if (sum > max_sum){\n     \
    \ max_sum = sum;\n    }\n    result.push(num);\n  }\n  return result.sort(function\
    \ (a, b){\n    return sum - b;\n  });\n}", "    let sum = 0;\n    nums.sort((a,b)\
    \ => { return (sum = a+b) < 0 ? sum : -sum; });\n    return nums;\n}\n</cell>\n\
    <text>\nDay 11: Divisible triangular numbers\n\n</text>\n<cell>", "    let counter\
    \ = {};\n    let sorted = [];\n    let len = nums.length;\n    for(let i = 0;\
    \ i < len; i++){\n        if(nums[i] in counter){\n            counter[nums[i]]\
    \ += 1;\n        } else {\n            counter[nums[i]] = 1;\n        }\n    }\n\
    \    for(let key in counter){\n        if(counter[key] === 1){\n            sorted.push(key);\n\
    \        }\n    }\n    return sorted;\n}", "    var sum = nums.reduce((a,b) =>\
    \ a + b, 0);\n    nums.sort(function(a, b){\n        return sum - a - b;\n   \
    \ });\n    return nums;\n}", "  var sum = 0;\n  var len = nums.length;\n  var\
    \ num;\n  for(var i = 0; i < len; i++){\n    num = nums[i];\n    if(num){\n  \
    \    sum += num;\n    }\n  }\n  while(nums.length){\n    num = nums.shift();\n\
    \    if(num){\n      sum += num;\n    }\n  }\n  return sum;\n}\n", "    const\
    \ numArr = nums.map(num => num.toString());\n    let sumArr = []\n    numArr.forEach((sum,index)\
    \ => {\n        sumArr.push(sum)\n    });\n    sumArr = sumArr.sort((a, b) =>\
    \ a.toString().localeCompare(b))\n    return numArr.map(num => Number(num.toString()));\n\
    }\n", "    nums = nums.slice().sort(function(a, b){\n        var sumA = sum_digits(a),\
    \ sumB = sum_digits(b);\n        return sumA - sumB;\n    });\n    return nums;\n\
    }\n", "    nums.sort(function(a,b){\n        var sum=Math.abs(a-b)\n        if(sum==0)\
    \ return a>b?1:-1\n        return sum\n    })\n    return nums\n}\n</code>\n<|/\
    \ a |>\n<| a tags=sorting,algorithm |>\n<code>", "    nums = nums.slice().sort(function(a,\
    \ b){\n        return a+b; // use smaller numbers to avoid confusion\n    });\n\
    \n    return nums;\n}\n", "    nums = nums.slice().sort(function(a, b){\n    \
    \    return (a-b);\n    });\n    return nums;\n}\n", "    var arr = [];\n    var\
    \ sum = 0;\n    var sums = [];\n    var len = nums.length;\n    var num;\n   \
    \ for (var i = 0; i < len; i++) {\n        num = nums[i];\n        sum += num;\n\
    \        sums.push(sum);\n    }\n    nums.sort(function(a, b) {\n        return\
    \ sums[a] - sums[b];\n    });\n    return nums;\n}\n", "    const res = [];\n\
    \    const hash = {};\n    nums.forEach((n, i) => {\n        if (!hash[n]) {\n\
    \            hash[n] = 1;\n            res[i] = n;\n        } else {\n       \
    \     hash[n]++;\n        }\n    });\n    return res;\n}\n", "    nums.sort(function(a,\
    \ b) {\n        return a.sum - b.sum;\n    });\n    return nums;\n}", "  return\
    \ nums.sort((a, b) => a - b).sort((a, b) => b - a);\n}\n", "    // Write your\
    \ code here.\n    var sums = nums.map(function(x){return parseInt(x.toString())}).reduce(function(a,\
    \ b){return a + b;});\n    return nums.sort(function(a, b){return sums - parseInt(a.toString())\
    \ - parseInt(b.toString());});\n}\nassert(order_by_points([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11], \"Your function should return [-1, -11, 1, -12, 11].\"\
    );\nassert(order_by_points([]) == [], \"Your function should return [].\");\n\
    assert(order_by_points([1, 5, 11, -100, 4, 1]) == [1, -100, 4, 5, 11, 1], \"Your\
    \ function should return [1, -100, 4, 5, 11, 1] if there are no ties.\");\nassert(order_by_points([9,\
    \ 5, 11, -100, 4, 1]) == [9, 1, -100, 4, 5, 11], \"Your function should return\
    \ [9, 1, -100, 4, 5, 11] if there is one tie.\");\n", "    nums=nums.sort(function(a,b){return\
    \ b-a});\n    var ans=nums[0];\n    for(var i=1;i<nums.length;i++){\n        var\
    \ d=nums[i]-ans;\n        if(d!=0){\n            ans=nums[i];\n        }\n   \
    \ }\n    return ans;\n}\n\n", "  var res = [];\n  for(var i in nums){\n    var\
    \ num = nums[i];\n    var sum = 0;\n    var count = 0;\n    for(var j in num){\n\
    \      if(num[j] > 0){\n        sum += num[j];\n        count++;\n      }\n  \
    \  }\n    res.push(count === 1 ? num : num.splice(num, sum));\n  }\n  return res;\n\
    }", "  const num_arr = [];\n  nums.forEach(num => {\n    const n = num.toString().split('');\n\
    \    if(n.length === 1){\n      num_arr.push(+num);\n    }else{\n      num_arr.push(n[0]+n[1]);\n\
    \    }\n  });\n  num_arr.sort((a, b) => a - b);\n  return num_arr;\n}\n", "  \
    \  // Write your code here\n    let newArray = []\n    nums.forEach((n) => {\n\
    \        let currentSum = 0\n        while(n > 0){\n            currentSum+=n%10\n\
    \            n = Math.floor(n/10)\n        }\n        newArray.push(currentSum)\n\
    \    })\n    let sorted = newArray.sort()\n    return sorted\n}", "  return nums.sort(function(a,\
    \ b){\n    var a_digits = String(Math.abs(a)).split(''),\n      b_digits = String(Math.abs(b)).split('');\n\
    \    \n    var a_sum = 0, b_sum = 0, a_i, b_i, digit, sum;\n    \n    //Sum all\
    \ the digits in the first number up to the current position of a\n    for (digit\
    \ = 0; digit < a_digits.length; digit++) {\n      a_sum += a_digits[digit]*Math.pow(10,\
    \ digit);\n    }\n    \n    //Sum all the digits in the first number up to the\
    \ current position of b\n    for (digit = 0; digit < b_digits.length; digit++)\
    \ {\n      b_sum += b_digits[digit]*Math.pow(10, digit);\n    }\n    \n    //Compare\
    \ them\n    sum = (a_sum < b_sum) ? -1 : (a_sum == b_sum) ? 0 : 1;\n    \n   \
    \ if (sum == 0) return 0;\n    \n    if (sum > 0) return 1;\n    \n    return\
    \ -1;\n  });\n}\n", "    const arr = [];\n    let sum = 0;\n    let tmp = 0;\n\
    \    for(let i = 0; i < nums.length; i++){\n        tmp = nums[i]\n        sum\
    \ += tmp;\n        arr.push(tmp)\n    }\n\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] > sum){\n            while(arr[i] > sum){\n       \
    \         sum -= arr[i];\n                i++;\n            }\n            arr.splice(i,\
    \ 0, arr[i]-sum);\n            console.log(sum);\n            console.log(arr);\n\
    \            sum = 0;\n        }\n    }\n    return arr;\n}", "  nums = nums.filter(function(n){return\
    \ n>=0});\n  var soFar = nums.sort(function(a,b){\n    return a+b\n  });\n  nums\
    \ = nums.filter(function(n){return n<=0});\n  nums.forEach(function(n){\n    soFar.push(n)\n\
    \  });\n  return soFar\n}\n*/\n", "    let temp = new Array();\n    let arr =\
    \ new Array();\n    for(let i=0; i<nums.length; i++){\n        temp.push( nums[i]\
    \ );\n        for(let j=i+1; j<nums.length; j++){\n            if( nums[j].toString().length\
    \ < temp[i].toString().length ){\n                arr.push( nums[j] );\n     \
    \           temp[i] = temp[i].toString();\n                temp[j] = temp[j].toString();\n\
    \            }\n        }\n    }\n    return arr.concat(temp);\n}\n", "    var\
    \ sortedArray=[];\n    sortedArray.length=0;\n    var tempSum=Number.MAX_SAFE_INTEGER;\n\
    \    var i,j,sum,temp;\n    for (i=0;i<nums.length;i++){\n        sum=0;\n   \
    \     for (j=0;j<nums.length;j++){\n            if (nums[j]%10!==0){\n       \
    \         sum+=nums[j]%10;\n            }else{\n                sum+=nums[j];\n\
    \            }\n        }\n        temp=sum;\n        sum=sum/10;\n        tempSum=Math.max(tempSum,sum);\n\
    \        for (j=0;j<nums.length;j++){\n            sum-=nums[j]/10;\n        \
    \    sum*=10\n        }\n        tempSum=Math.max(tempSum,sum);\n        if (tempSum===temp){\n\
    \            sortedArray.push(nums[i]);\n        }\n    }\n    return sortedArray;\n\
    }\n", "    let n = nums.length;\n    if(n <= 1) return nums;\n    let max_sum\
    \ = 0, i = 0;\n    for(let j=0; j<n; j++){\n        let cur_sum = nums[j].digit;\n\
    \        while(cur_sum > 0){\n            if(cur_sum > max_sum) max_sum = cur_sum;\n\
    \            i++;\n            cur_sum = nums[i].digit;\n        }\n    }\n  \
    \  let min_index = 0, max_index = 0, sum = 0;\n    for(let j=0; j<n; j++){\n \
    \       let cur_sum = nums[j].digit;\n        while(cur_sum > 0){\n          \
    \  if(cur_sum == max_sum){\n                sum += nums[j].index - min_index;\n\
    \                max_index = j;\n            }\n            if(cur_sum < max_sum)\
    \ min_index = j;\n            i++;\n            cur_sum = nums[i].digit;\n   \
    \     }\n    }\n    nums.sort((a,b) => a.index - b.index);\n    return nums.slice(min_index,max_index+1);\n\
    }\n", "    let ans = [];\n    nums.forEach(n => {\n        let s = Number(n).toString(10);\n\
    \        let sum = s.split('').reduce((a, b) => a+b);\n        if (sum !== 0)\
    \ {\n            ans.push(n);\n        }\n    });\n    return ans.sort((a,b) =>\
    \ {\n        let s = Number(a).toString(10);\n        let t = Number(b).toString(10);\n\
    \        return s.localeCompare(t);\n    });\n}\n", "  var i, j, res, sum, tmp_arr\
    \ = [];\n  for(i = 0; i < nums.length; i++){\n    res = nums[i].toString();\n\
    \    sum = 0;\n    for(j = 0; j < res.length; j++){\n      sum += parseInt(res[j]);\n\
    \    }\n    tmp_arr.push(sum);\n  }\n  tmp_arr.sort(function(a, b){return a-b;});\n\
    \  var result = [];\n  for(i = 0; i < nums.length; i++){\n    result.push(tmp_arr[i]);\n\
    \  }\n  return result;\n}\n", "  const res = []\n  let sum = 0\n  for (let num\
    \ of nums) {\n    if (sum > 0) {\n      sum += num\n      res.push(num)\n    }\
    \ else {\n      sum -= num\n    }\n  }\n  return res\n}\n", "  var arr = [];\n\
    \  arr.length = nums.length;\n  for(var i=0;i<nums.length;i++){\n    arr[i] =\
    \ nums[i];\n  }\n  arr.sort(function(a,b){\n    if(a>b) return 1;\n    if(a<b)\
    \ return -1;\n    return 0;\n  });\n  return arr;\n}\n", "  let arr=[];\n  let\
    \ maxSum=0;\n  for (let i=0; i<nums.length; i++){\n    let num=nums[i];\n    let\
    \ sum=num.toString().split('').reduce((prev, cur)=>prev+parseInt(cur), 0);\n \
    \   let minSum=sum;\n    for (let j=i+1; j<nums.length; j++){\n      let num2=nums[j];\n\
    \      let sum2=num2.toString().split('').reduce((prev, cur)=>prev+parseInt(cur),\
    \ 0);\n      if (sum2 < minSum){\n        minSum=sum2;\n      }\n    }\n    if\
    \ (maxSum < sum){\n      maxSum=sum;\n    }\n    arr.push([num, sum, i, minSum]);\n\
    \  }\n  return arr.sort((a,b)=>b[2]-a[2]);\n}\n", "    var sorted_nums = [];\n\
    \    for(var i = 0; i < nums.length; i++){\n        if(nums[i] == -1) return sorted_nums;\n\
    \        sorted_nums.push(nums[i]);\n    }\n    var sum_of_digits = 0;\n    for(i\
    \ = 0; i < nums.length; i++){\n        sum_of_digits += nums[i];\n    }\n    for(i\
    \ = 0; i < nums.length; i++){\n        while(sum_of_digits >= 10){\n         \
    \   sum_of_digits -= 10;\n            sorted_nums.push(sum_of_digits);\n     \
    \   }\n    }\n    return sorted_nums;\n}\n\nvar point_count = 0;\nvar points =\
    \ create_points();\nvar points_to_sort = [points];\nvar sorted_points = order_by_points(points_to_sort);\n\
    for(var j = 0; j < points.length; j++){\n    point_count += points[j].length;\n\
    }\n\nvar all_point_counts = [];\nfor(var i = 1; i <= 10; i++){\n    var count\
    \ = 0;\n    for(var j = 0; j < points.length; j++){\n        if(points[j].length\
    \ == i){\n            count++;\n        }\n    }\n    all_point_counts.push(count);\n\
    }\n\nvar avg_points = count_all_points(points);\nvar avg_points_percent = (avg_points\
    \ * 100) / point_count;\nvar max_points = count_all_points(sorted_points);\nvar\
    \ max_points_percent = (max_points * 100) / point_count;\nvar avg_points_percents\
    \ = count_all_points_percent(points);\nvar avg_points_percents_percent = (avg_points_percents\
    \ * 100) / point_count;\nvar max_points_percents = count_all_points_percent(sorted_points);\n\
    var max_points_percents_percent = (max_points_percents * 100) / point_count;\n\
    var max_percent_percents = count_all_percent_percent(points);\nvar max_percent_percents_percent\
    \ = (max_percent_percents * 100) / point_count;\n\n$('#all_points_count').html(all_point_counts.join(',\
    \ '));\n$('#avg_points').html(avg_points);\n$('#avg_points_percent').html(avg_points_percent);\n\
    $('#max_points').html(max_points);\n$('#max_points_percent').html(max_points_percent);\n\
    $('#avg_points_percents').html(avg_points_percents);\n$('#avg_points_percents_percent').html(avg_points_percents_percent);\n\
    $('#max_points_percents').html(max_points_percents);\n$('#max_points_percents_percent').html(max_points_percents_percent);\n\
    $('#max_percent_percents').html(max_percent_percents);\n$('#max_percent_percents_percent').html(max_percent_percents_percent);\n\
    </code>\nhttps://jsfiddle.net/fLqxwjg7/\n<|/ a dscore=0 tags=javascript,jquery,arrays\
    \ |>\n<| a tags=javascript,jquery,arrays d", "  var map = {};\n  nums.forEach(function(num){\n\
    \    if (!(sum in map)){\n      map[sum] = [];\n    }\n    map[sum].push(num);\n\
    \  });\n  var ordered = [];\n  for (var key in map){\n    ordered.push.apply(ordered,\
    \ map[key]);\n  }\n  ordered.sort(function(a,b){\n    return a-b;\n  });\n  return\
    \ ordered;\n}\n\n", "    nums.sort(function(a,b){\n        return a-b;\n    });\n\
    \    return nums;\n}\n", "    var i, j, max_sum=0,a=[[],[],[]];\n    for (i=0;i<3;i++){\n\
    \        for (j=0;j<3;j++){\n            if(i==j || (nums[j]>nums[i])){\n    \
    \            a[i].push(nums[j]);\n            }else{\n                a[i].push(nums[i]);\n\
    \            }\n        }\n    }\n    for (i=0;i<3;i++){\n        for (j=i+1;j<3;j++){\n\
    \            if(a[i]<a[j]){\n                let temp=a[i];\n                a[i]=a[j];\n\
    \                a[j]=temp;\n            }\n        }\n    }\n    for (i=0;i<3;i++){\n\
    \        max_sum=Math.max(a[i]);\n    }\n    var res=[];\n    for (i=0;i<3;i++){\n\
    \        if(max_sum!=a[i]) res.push(a[i]);\n    }\n    return res;\n}", "    let\
    \ res = [];\n    for (let i = 0; i < nums.length; i++) {\n        res.push(nums[i]);\n\
    \    }\n    res.sort(function(a, b){\n        return a.point_sum - b.point_sum;\n\
    \    });\n    return res;\n}\n", "    nums = nums.sort(function(a, b){\n     \
    \   a = Math.abs(a);\n        b = Math.abs(b);\n        return ((a > b) ? 1 :\
    \ ((b > a) ? -1 : 0));\n    });\n    return nums;\n}\n", "  var i, sum = 0, new_nums\
    \ = [], sums = [], len = nums.length;\n  for(i = 0; i < len; i++){\n    sum =\
    \ 0;\n    for(j = i; j >= 0; j--){\n      sum = sum + nums[j];\n    }\n    new_nums.push(sum);\n\
    \    sums.push(sum);\n  }\n  for(i = 0; i < len; i++){\n    if(sums[i] !== sum){\n\
    \      for(j = i; j >= 0; j--){\n        sums[j] = sums[j] - nums[i];\n      }\n\
    \    }\n  }\n  return new_nums;\n}\n", "    nums = nums.sort(function(a, b){\n\
    \        return Math.abs(a) - Math.abs(b);\n    });\n    var new_nums = [];\n\
    \    for (var i = 0; i < nums.length; i++){\n        var num_sum = 0;\n      \
    \  var nums_length = nums.length;\n        var index = -1;\n        while (++index\
    \ < nums_length) {\n            num_sum += nums[index];\n        }\n        if\
    \ (num_sum <= 0){\n            continue;\n        }\n        var index = -1;\n\
    \        while (++index < nums_length) {\n            if (nums[index] < 0){\n\
    \                nums.splice(index, 1);\n            }\n        }\n        new_nums.push(num_sum);\n\
    \    }\n    return new_nums;\n}\n", "\tlet order = [];\n\tfor(let i = 0; i < nums.length;\
    \ i++){\n\t\tlet s = nums[i];\n\t\tlet digits = [];\n\t\twhile (s.length){\n\t\
    \t\tdigits.push(s.n % 10);\n\t\t\ts = s.n / 10;\n\t\t}\n\t\t\n\t\tif(digits.length)\n\
    \t\t\torder.push(digits[digits.length - 1] + '');\n\t\t\n\t\telse\n\t\t\torder.push(s);\n\
    \t}\n\t\n\treturn order;\n}\n", "    const sums = nums.map(n => n.toString().split('').reduce((a,\
    \ b) => a + +b, 0))\n    return sums.sort((a, b) => b - a).map(i => nums[i]);\n\
    }\n</code>\nTests:\n<code>", "\tnums.sort(function(a, b){\n\t\treturn (a+b) %\
    \ 10 ? b - a: a;\n\t});\n\treturn nums;\n}\n", "    var sorted;\n    sorted =\
    \ nums.slice(0);\n    sorted.sort((a, b) => {\n        var sumA = sumDigits(a);\n\
    \        var sumB = sumDigits(b);\n        \n        // This assumes sumA + sumB\
    \ = 10 so no need to check if sumA < sumB\n        return sumA - sumB;\n    });\n\
    \    return sorted;\n}\n", "  var sortedArr = [],\n      curSum = 0,\n      currIdx\
    \ = 0;\n  nums.forEach(function(el){\n    curSum += el;\n    while(curSum > 0){\n\
    \      sortedArr[currIdx++] = nums[Math.floor(curSum / 10)];\n      curSum %=\
    \ 10;\n    }\n  });\n  sortedArr.sort(function(a, b){\n    return a < b ? -1 :\
    \ b > a ? 1 : 0;\n  });\n  return sortedArr;\n}\n", "    nums.sort((a,b) => parseInt(b)\
    \ - parseInt(a))\n    return nums\n}\n", "    var i,\n        j,\n        sum\
    \ = 0,\n        arr = [];\n    for(i=0;i<nums.length;i++){\n        sum = 0;\n\
    \        for(j=0;j<nums[i].length;j++){\n            sum += parseInt(nums[i][j]);\n\
    \        }\n        arr.push(sum);\n    }\n    return arr;\n}\n", "  var result\
    \ = [];\n  var len = nums.length;\n  var num = nums[0];\n  for (var i = 0; i <\
    \ len; i += 1) {\n    num = nums[i];\n    if (num > 0) {\n      result.push(num);\n\
    \    }\n  }\n  result.sort(function(a, b){\n    if (a > b) { return 1; }\n   \
    \ if (a < b) { return -1; }\n    return 0;\n  });\n  return result;\n}\n\n", " \
    \ var sum = 0;\n  for(var i=0;i<nums.length;i++){\n    sum += nums[i];\n  }\n\
    \  nums.sort((a,b)=>{\n    return sum-a;\n  });\n  return nums;\n}", "    // Sort\
    \ the numbers based on their sum of digits in descending order\n    // The numbers\
    \ in the array are in the form of [index, value]\n    // The original array is\
    \ not changed.\n    let ordered = nums.sort((a,b) =>\n        b[0] - a[0] ||\n\
    \        a[1] - b[1]\n    );\n\n    // Now sort the elements based on the indices\
    \ of the numbers\n    // [\n    //     [0,1],\n    //     [1,3],\n    //     [-1,-1],\n\
    \    //     [3,11]\n    // ]\n    return ordered.map(e=>e[0]);\n}\n", "  var arr\
    \ = [];\n  for(var i = 0; i<nums.length; i++){\n    arr.push(nums.sort((a, b)\
    \ => a+b));\n  }\n  return arr;\n}\n", "  nums.sort((a,b)=>{\n    sum = 0;\n \
    \   for (let i = 0; i < a.length; i++){\n      sum += parseInt(a[i]);\n    }\n\
    \    return sum - parseInt(b);\n  });\n  return nums;\n}\n", "  var digits = nums.map(function(num){\
    \ return parseInt(num, 10) }),\n      sums = digits.reduce(function(a, b) { return\
    \ a + b }),\n      sorted_nums = nums.sort(function(a, b) {\n            return\
    \ sums - digits;\n      });\n  return sorted_nums;\n}\n", "  nums = nums.sort((a,b)\
    \ => b - a);\n  return nums;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks. I guess you\
    \ forgot to add an arrow function after `(a, b) => b - a` :)\n<|/ c |>\n<| c |>\n\
    The `(a, b) => b - a` part is just the arrow function syntax for \"curry function\"\
    , but thank you for your comment!\n<|/ c |>\n<| c |>\nWas just about to ask the\
    \ same question. Thanks!\n<|/ c |>\n<| a tags=sorting,javascript,arrays,functional-programming\
    \ dscore=0 |>\n<code>", "    var sum = 0;\n    for (var i=0; i<nums.length; i++){\n\
    \        sum += nums[i].digits;\n    }\n    \n    nums.sort(function(a, b){\n\
    \        return (sum - a.digits - b.digits);\n    });\n}\n", "    nums.sort(function(a,\
    \ b) {\n        var aa = sumDigits(a), bb = sumDigits(b);\n        return aa -\
    \ bb;\n    });\n    return nums;\n}\n", "\tvar sums = [], sum = 0, i;\n\tfor(i\
    \ = 0; i < nums.length; i++){\n\t\tsum += nums[i];\n\t\tsums.push(sum);\n\t}\n\
    \tsums.sort(function(a, b){return a - b;});\n\treturn sums;\n}\n", "  var sum\
    \ = 0, cur;\n  for(var i = 0, len = nums.length; i < len; i++){\n    cur = +nums[i];\n\
    \    if(cur){\n      sum += cur;\n    }\n  }\n  nums.sort((a,b)=>sum-a -b);\n\
    \  return nums;\n}\n", "    nums=nums.sort(function(a,b){\n        return a+b-a*b;\n\
    \    });\n    nums=nums.map(function(num){\n        return num.toFixed(1);\n \
    \   });\n    return nums;\n}", "\tlet maxSum = nums.reduce((sum,n)=>sum+=n,0);\n\
    \tlet order = [];\n\tfor(let i = 0; i < nums.length; i++){\n\t\tlet current =\
    \ nums[i];\n\t\tlet currentSum = sum;\n\t\tlet j = 0;\n\t\twhile(j < current.length){\n\
    \t\t\tcurrentSum -= current[j];\n\t\t\tcurrent[j] = 0;\n\t\t\tj++;\n\t\t\tif(currentSum\
    \ < 0){\n\t\t\t\tcurrentSum = currentSum + 10;\n\t\t\t}\n\t\t}\n\t\tlet j = i-1;\n\
    \t\twhile(j >= 0){\n\t\t\tcurrentSum -= nums[j];\n\t\t\tnums[j] = 0;\n\t\t\tj--;\n\
    \t\t\tif(currentSum < 0){\n\t\t\t\tcurrentSum = currentSum + 10;\n\t\t\t}\n\t\t\
    }\n\t\torder.push(current);\n\t\tsum = currentSum;\n\t}\n\treturn order;\n}\n",
  "  return nums.sort((a,b) => {\n    const a_val = parseInt(a.toString(), 10);\n\
    \    const b_val = parseInt(b.toString(), 10);\n    return a_val + b_val - Math.round(a_val\
    \ + b_val)\n  });\n}", "    var digits=nums.map(function(num){\n        return\
    \ Math.pow(10,num);\n    }).sort();\n    var len=digits.length;\n    var result=[];\n\
    \    var i=0;\n    while(i<len){\n        result[i]=digits[i];\n        i=i+1;\n\
    \    }\n    digits.reverse();\n    for(var i=0;i<len;i++){\n        result[i]=digits[i];\n\
    \    }\n    return result;\n}\n", "    nums.sort(function(x, y) {\n        return\
    \ x - y;\n    });\n}\n", "  let result = []\n  nums.forEach((num, index) => {\n\
    \    const sum = num.toString(10).reduce((acc, c) => acc + Number(c), 0);\n  \
    \  const idx = nums.findIndex((n) => n.toFixed(2).replace(/\\.?0+$/, '') == sum);\n\
    \    if (idx != -1) {\n      nums.splice(idx, 0, num)\n    }\n  })\n  nums.sort((a,\
    \ b) => a.toFixed(2).replace(/\\.?0+$/, '') == b.toFixed(2).replace(/\\.?0+$/,\
    \ ''))\n  nums.forEach((num, index) => {\n    const sum = num.toString(10).reduce((acc,\
    \ c) => acc + Number(c), 0);\n    const idx = nums.findIndex((n) => n.toFixed(2).replace(/\\\
    .?0+$/, '') == sum);\n    if (idx != -1) {\n      nums.splice(idx, 0, num)\n \
    \   }\n  })\n  return result;\n}\n", "    // Write your code here.\n}\n</cell>\n\
    <text>\nQuestion 7\nDefine a function which returns a list of the integers in\
    \ the range [a, b] inclusive.\nIf the range is too small, it is returned with\
    \ zeros included.\nIf the range is too large, it is truncated to the upper bound\
    \ (up to the integer part of the range).\n\nFor example, if the range is [8, 12],\
    \ the result is [8, 9].\nIf [a, b] is equal to [8, 12], the result is [8, 12].\n\
    \n\n</text>\n<code language=.net-csharp>", "  if (nums.length==0) return nums;\n\
    \  var digits = nums.map(to_digits);\n  var sum_digits = digits.reduce((a,b)=>a+b);\n\
    \  var sorted_nums = digits.sort((a,b)=>a-b);\n  return sorted_nums.map(from_digits);\n\
    }\n", "    nums.sort((a,b) => {\n        const sumA = addDigits(a);\n        const\
    \ sumB = addDigits(b);\n        \n        return sumA - sumB;\n    });\n    return\
    \ nums;\n}\n", "    if (nums.length == 0) return [];\n    let result = []\n  \
    \  const sums = new Array(10)\n    for (i = 0; i < 10; i++)\n        sums[i] =\
    \ 0\n    for (i = 0; i < nums.length; i++) {\n        const val = nums[i]\n  \
    \      sums[val % 10] += 1\n    }\n    for (i = 0; i < 10; i++) {\n        result[sums[i]\
    \ % 10] = nums[(i + sums[i]) / 10]\n    }\n    return result;\n}", "  return nums.sort((a,\
    \ b) => a - b).filter((x, i, a) =>\n    a.findIndex((y) => x + y === a[y]) ===\
    \ i);\n}\n</code>\n<|/ a tags=sorting,javascript |>\n<| a dscore=2 tags=sorting,javascript\
    \ |>\nThis is a fun solution, but it is pretty expensive:\n<code>\nvar sorted\
    \ = nums.sort((a, b) =>\n  a.toString().split('').sort((x,y) => parseInt(x + y)\
    \ - parseInt(x + y))\n  .join('') > b.toString().split('').sort((x,y) => parseInt(x\
    \ + y) - parseInt(x + y))\n  .join('')\n);\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ this solution, although I think it's possible to write it more concisely as:\
    \ `nums.sort(a => a.toString().split('').sort((x, y) => parseInt(x + y) - parseInt(x\
    \ + y)).join(''));`\n<|/ c |>\n<| c |>\nThis solution doesn't work for the following\
    \ case:\n\n`nums = [-2, -3, -10, -1, -2, -4];`\n\nIt should return `[-2, -4, -1,\
    \ -3, -10]`, but the code returns `[-2, -3, -10, -1, -2, -4]`.\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>\nconst input = [8, 1, 5, 12, 4, 3, 6, 10];\n\nconst output\
    \ = input\n  .sort((a, b) => {\n    const aArray = a.toString();\n    const bArray\
    \ = b.toString();\n\n    return aArray.localeCompare(bArray)\n  })\n", "  // Sort\
    \ nums in ascending order by their sum.\n  let sums = nums.map(n => getSum(n));\n\
    \  sums = sums.sort();\n\n  // Get an index for each number in nums whose sum\
    \ is in sums.\n  let indexs = nums.map(n => getIndex(n, sums));\n  indexs = indexs.sort();\n\
    \n  return indexs;\n}\n", "\tnums = nums.slice();\n\tnums.sort(function(a, b){\n\
    \t\tif(a*10 + b !== 0) return a*10 + b - b*100;\n\t\treturn a < b ? 1 : -1;\n\t\
    });\n\treturn nums;\n}\n", "    var sorted = [];\n    nums.forEach(function(num){\n\
    \        var sum = 0;\n        for(var i=0;i<num.length;i++){\n            var\
    \ digit = num[i]%10;\n            sum += digit;\n        }\n        sorted.push(sum);\n\
    \    });\n    sorted.sort(function(a,b){return b-a});\n    return sorted;\n}\n",
  "  var i, sum, digit, len = nums.length;\n  var result = [];\n  var num;\n\n  for(i\
    \ = 0; i < len; i += 1) {\n    sum = 0;\n    for(j = 0; j < len; j += 1) {\n \
    \     digit = nums[j].charCodeAt() - '0'.charCodeAt(0);\n      sum = (sum * 10)\
    \ + digit;\n    }\n    num = sum;\n    result.push(num);\n  }\n\n  return result;\n\
    }\n\n", "  var i, j, sum, digits = nums.map(x => parseInt(x.toString(), 10));\n\
    \  return nums.map(x => parseInt(x.toString(), 10)).sort((a, b) => (sum = a+b)\
    \ - sum);\n}\n", "\tvar output = [];\n\tvar sum = 0;\n\tnums.forEach(function(num){\n\
    \t\tsum += num;\n\t});\n\tnums.forEach(function(num){\n\t\tvar index = sum - num;\n\
    \t\toutput.push(nums[index]);\n\t});\n\treturn output;\n}\n", "   nums.sort(function\
    \ (a, b) {\n       var sum = a + b;\n       return sum > 0 ? sum : sum <0 ? -sum\
    \ : 0;\n   });\n   return nums;\n}", "  var i, j, points = [];\n  for(i = 0; i\
    \ <= 9; i++){\n    points[i] = nums.filter(function(num){\n      return num %\
    \ 10 == i;\n    });\n  }\n  for(j = 0; j < points.length; j++){\n    var sum =\
    \ points[j].reduce(function(a, b){\n      return a + b;\n    });\n    points[j].sort(function(a,\
    \ b){\n      return sum - a - b;\n    });\n  }\n  for(i = 0; i < nums.length;\
    \ i++){\n    if(points[i].length == nums.length){\n      nums[i] = points[i][0];\n\
    \    }\n  }\n  return nums;\n}\n", "    // Write your code here\n    var sums\
    \ = nums.map(function(n) {\n        return n.toString().split('').map(function(c)\
    \ {\n            return parseInt(c)\n        }).reduce(function(a, b) {\n    \
    \        return a + b\n        })\n    })\n    sums.forEach(function(s, i) {\n\
    \        sums[i] = sums[i].toFixed(2)\n    })\n    sums = sums.map(function(s)\
    \ {\n        return parseFloat(s)\n    })\n    sums.sort().reverse()\n    return\
    \ sums\n}\n", "    var len= nums.length,\n        sum= nums.reduce(function(sum,\
    \ num){\n            return sum + num;\n        }, 0),\n        indices= [],\n\
    \        res= [];\n    for(var i = 0; i < len; i++){\n        if(sum === 0){\n\
    \            indices.push(0);\n            res.push(nums[i]);\n            continue;\n\
    \        }\n        var digit= sum % 10;\n        sum= sum / 10;\n        indices.push(i);\n\
    \        res.push(nums[indices[i]]);\n    }\n    return res;\n}\n", "\tvar sum=0;\n\
    \tfor(var i in nums) sum+=nums[i];\n\tvar sorted=nums.sort(function(a,b){return\
    \ sum-a;});\n\treturn sorted;\n}\n", "    nums = nums.sort(function(a, b){\n \
    \       var rem = b%10;\n        return rem * rem + a - b + b%10\n    })\n   \
    \ return nums\n}\n\n", "    nums.sort(function(a, b){\n        return b - a;\n\
    \    });\n    return nums;\n}", "    nums.sort(function(a, b){\n        let re\
    \ = 0;\n        let s = a + b;\n        let e = Math.max(s, -s);\n        for(let\
    \ i = a; i < e; i++){\n            re += Math.pow(10, i);\n        }\n       \
    \ for(let i = b; i < e; i++){\n            re += Math.pow(10, i);\n        }\n\
    \        return re - s;\n    });\n    return nums;\n}\n</code>\n<|/ a tags=javascript,arrays\
    \ |>\n<| a |>\nIf someone is still looking for this, the following code works\
    \ perfectly fine for me - \n<code>", "\tvar sorted_nums = nums.slice().sort(function(a,\
    \ b){\n\t\tvar sum_of_digits = a + b;\n\t\treturn sum_of_digits == 0 ? 0 :\n\t\
    \t\tsum_of_digits < 0 ? -1 : 1;\n\t});\n\treturn sorted_nums.filter(function(elem,\
    \ pos, self){\n\t\treturn self.indexOf(elem) == pos;\n\t});\n}\n", "\tvar sorted\
    \ = nums.sort(function(a, b){\n\t\treturn Math.abs(a-b); \n\t});\n\treturn nums.indexOf(sorted[0])\
    \ === -1 ? sorted.reverse() : sorted;\n}\n</script>\n<style>\n\t#test { position:\
    \ fixed; top: 0px; left: 0px; }\n\t#test { width: 200px; height: 200px; padding:\
    \ 5px; }\n\t#test { font: 14px Arial, sans-serif; background: #000; color: #fff;\
    \ }\n</style>\n</head>\n<body>\n\t<div id=\"test\"></div>\n</body>\n</html>\n\
    </textarea></div>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t\t<div id=\"discussion\"\
    >\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div id=\"comments_thread\"></div>\n\t\t\t\n\t\t\t\
    \t\t\t<div id=\"comments\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div id=\"disqus_thread\"\
    ></div>\n\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<h3>Discussion\
    \ Forum Comments</h3>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div id=\"respond\">\n\t\t\t\t\
    \t\t\n\t\t\t\t\t\t\t<table>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>Name</th>\n\
    \t\t\t\t\t\t\t\t\t<th>Email</th>\n\t\t\t\t\t\t\t\t\t<th>URL</th>\n\t\t\t\t\t\t\
    \t\t\t<th>Comment</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\
    \t\t<tr>\n\t\t\t\t\t\t\t\t\t<td class=\"name\"><a href=\"http://disqus.com/?ref_noscript\"\
    >Patrick Van Houtven</a></td>\n\t\t\t\t\t\t\t\t\t<td class=\"email\"><a href=\"\
    http://phpacademy.org/\">removed@example.com</a></td>\n\t\t\t\t\t\t\t\t\t<td class=\"\
    url\"><a href=\"http://phpacademy.org/\">http://phpacademy.org/</a></td>\n\t\t\
    \t\t\t\t\t\t\t<td class=\"comment\">\n\t\t\t\t\t\n\t\t\t\t\t\t<p>I took the freedom\
    \ to make a presentation for <a href=\"http://phpacademy.org/\">The Academy of\
    \ PHP</a>, an academic programming community, at <a href=\"http://phpacademy.org\"\
    >phpacademy.org</a>.</p>\n\n\t\t\t\t\t\n\t\t\t\t\t\t<p><a href=\"http://phpacademy.org/\"\
    >phpacademy.org</a> is a non-profit educational website which provides programming\
    \ related discussion and training. <a href=\"http://phpacademy.org/\">phpacademy.org</a>\
    \ is currently hosting several PHP programming communities in multiple languages.\
    \ Most of these communities are supportive for PHP users and are listed on the\
    \ website, though some are only supportive for PHP programmers. <a href=\"http://phpacademy.org/\"\
    >phpacademy.org</a> is currently in support of the development of <a href=\"http://phpacademy.org/\"\
    >The Academy of PHP</a> and <a href=\"http://phpacademy.org/\">The Academy of\
    \ JavaScript and jQuery</a>.</p>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t</td>\n\t\t\
    \t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\
    \t\t\t\t\t\t\n\t\t\t\t\t\t<h3>Tag Cloud</h3>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div id=\"\
    tagcloud\"></div>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t</div>\n\
    \t\t\t</div>\n\t\t\t\n\t\t\t", "    let sum = 0\n    nums.map(n => sum += Math.pow(10,\
    \ n))\n    return nums.sort((a, b) => {\n        let aa = sum - Math.pow(10, a)\n\
    \        let bb = sum - Math.pow(10, b)\n        return aa < bb ? -1 : aa > bb\
    \ ? 1 : a < b ? -1 : 1\n    })\n}\n", "  var ret=nums.slice();\n  nums.sort(function(a,b){\n\
    \    var sum=Math.round(a*10)+Math.round(b*10);\n    if(b==0){\n      sum*=-1;\n\
    \    }\n    return sum;\n  })\n  return ret;\n}\n", "    var arr=[];\n    nums.sort(function(a,b){\n\
    \        return parseInt(a.slice(1),10)-parseInt(b.slice(1),10);\n    })\n   \
    \ return arr.map(function(e){\n        return nums[e];\n    })\n}\n\n", "    const\
    \ points = [];\n    let point = 0;\n    let previous = 0;\n    let sum = 0;\n\
    \    for(let num of nums){\n        point = num % 10;\n        if(previous ==\
    \ point){\n            sum += point;\n        }\n        else{\n            points.push(sum);\n\
    \            sum += point;\n            point = 0;\n            previous = point;\n\
    \        }\n    }\n    if(!point){\n        points.push(sum);\n    }\n    return\
    \ points;\n}\n", "  nums.sort(function(a, b){\n    return sum(a) - sum(b);\n \
    \ })\n  return nums;\n}\n", "    var result = [];\n    for (var i = 0; i < nums.length;\
    \ i++){\n        var item = nums[i];\n        var digits = item.split(\"\");\n\
    \        var sum = 0;\n        for (var j = 0; j < digits.length; j++){\n    \
    \        sum += parseInt(digits[j]);\n        }\n        result.push(item);\n\
    \        result.push(sum);\n    }\n    return result.sort(function(a, b){\n  \
    \      return b[1] - a[1];\n    });\n}\n", "  nums = nums.sort((a,b)=>a+b).reverse();\n\
    \  for(let i = 0;i < nums.length;i++){\n    let j = nums[i];\n    let count =\
    \ 0;\n    for(let x = i;x < nums.length;x++){\n      if(nums[x]>j){\n        j\
    \ = nums[x];\n      }\n      if(nums[x]>j+count){\n        count++;\n      }\n\
    \    }\n    nums[i] = j+count;\n  }\n  return nums;\n}\n", "    var sorted = nums.slice();\n\
    \    sorted.sort(function(a,b){\n        return Number(sumDigits(a) - sumDigits(b));\n\
    \    });\n    return sorted;\n}\n", "    return nums.sort((a,b) => {\n       \
    \ return nums.reduce((a, n) => (n % 10 + a + 10 * n) % 10, 0) - \n           \
    \    nums.reduce((a, n) => (n % 10 + a + 10 * n) % 10, 0);\n    });\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like your solution, it is similar to mine. But the\
    \ answer by Felix Kling is more readable. Thank you for helping.\n<|/ c |>\n<|\
    \ a tags=algorithm,sorting |>\nHere is my solution that utilizes Array.slice()\
    \ and Array.prototype.reduce(). \n<code>\nconst orderByPoints = (points) => {\n\
    \    const arr = points.slice();\n\n    // slice and reduce to calculate the sum\
    \ of the digits and sort by sum descending\n    const arrSortedBySum = arr\n \
    \       .map(e => e.toString())\n        .sort((a, b) => b - a)\n        .reduce((acc,\
    \ curr) => {\n            // split current number in digits, sum the digits and\
    \ add it to accumulator\n            const [, sum] = curr.split('').map(e => +e);\n\
    \            acc[sum] = acc[sum] + 1 || 1;\n            return acc;\n        },\
    \ {})\n\n    return arrSortedBySum\n        .map(e => arr.map(e => e).indexOf(parseInt(e)))\n\
    \        .sort((a, b) => b - a)\n        .map(e => arr[e]);\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\nThe other answers are very clever, and are probably\
    \ the fastest way to do it, but I wanted to see how fast a brute-force approach\
    \ would work.\nHere is a JavaScript snippet to generate a list of random numbers,\
    \ sort them by their digits, and then print the indexes of the sorted array.\n\
    \n<code>", "\tvar result = [],\n\t\tnumSum = 0,\n\t\tnumIndex = 0;\n\tnums.forEach(function(item,\
    \ i){\n\t\tnumSum += item;\n\t\tif(numSum != num){\n\t\t\tnumIndex = i;\n\t\t\
    }\n\t});\n\tnums.forEach(function(item, i){\n\t\tresult.push(nums[i]);\n\t});\n\
    \tresult.splice(numIndex, 0, nums.splice(numIndex, nums.length)[0]);\n\treturn\
    \ result;\n}\n", "  nums.sort(function(a, b) {\n    return Math.abs(a) - Math.abs(b);\n\
    \  });\n  return nums;\n}\n", "   nums.sort(function(a, b){\n    var x = a%10;\n\
    \    var y = b%10;\n    return x>y ? 1 : x<y ? -1 : 0;\n   })\n   return nums;\n\
    }\n", "\tnums = nums.slice();\n\tnums.sort(function(x,y){\n\t\treturn Math.abs(x-y)\n\
    \t});\n\tnums.reverse();\n\treturn nums;\n}\n", "    var store = [];\n    var\
    \ temp = 0;\n    var tempIndex = 0;\n    var sumOfNumbers = 0;\n\n    for(var\
    \ i=0;i<nums.length;i++){\n        sumOfNumbers = sumOfNumbers + nums[i];\n  \
    \      store.push(sumOfNumbers);\n\n        if(sumOfNumbers === 0){\n        \
    \    store.push(nums[i]);\n        }\n    }\n\n    for(var i=0;i<store.length;i++){\n\
    \        for(j=0;j<store.length-i-1;j++){\n            if(store[j] > store[j+1]){\n\
    \                temp = store[j];\n                store[j] = store[j+1];\n  \
    \              store[j+1] = temp;\n            }\n        }\n    }\n\n    return\
    \ store;\n}\n", "    nums = nums.sort(function(a, b){\n        var p = a.split('').reduce(function(a){return\
    \ parseInt(a, 10)})\n        var q = b.split('').reduce(function(a){return parseInt(a,\
    \ 10)})\n        return p - q\n    })\n    return nums\n}\n</code>\n<|/ a dscore=4\
    \ tags=sorting,javascript |>\n<| a tags=sorting,javascript |>\n<code>\nvar nums\
    \ = [4, 6, 2, 9, 1, 6];\nnums.sort((a,b)=>{\n let firstNum = parseInt(a.toString().charAt(0));\n\
    \ let secondNum = parseInt(b.toString().charAt(0));\n return secondNum - firstNum\n\
    });", "  var len = nums.length\n  if (len <= 1) return nums\n  nums.sort(function\
    \ (a, b) {\n    return ((a < b) ? -1 : ((a > b) ? 1 : 0))\n  })\n  return nums\n\
    }\n", "  nums.sort(function(a, b){\n    var x = parseFloat(a),\n      y = parseFloat(b);\n\
    \    return x < y ? -1 : x > y ? 1 : a.index - b.index;\n  });\n  return nums;\n\
    }", "    nums.sort(function(a, b){\n        var ia = nums.indexOf(a);\n      \
    \  var ib = nums.indexOf(b);\n        if(ia > ib){\n            return 1;\n  \
    \      }else if(ia < ib){\n            return -1;\n        }else{\n          \
    \  return 0;\n        }\n    });\n    return nums;\n}\n", "  var result = [];\n\
    \  var digits = nums.map(num=>num.toString().split(''));\n  var length = digits.length;\n\
    \  for(var i = 0; i < length; i++){\n    var max_digit = digits[i].reduce((p,\
    \ c, i, arr) => {\n      if(i == arr.length - 1) return p + c;\n      else return\
    \ p + c + arr[i+1];\n    }, '');\n    var index = digits.indexOf(i=> sum(c) ===\
    \ max_digit);\n    if(index != i){\n      result.push(nums[index]);\n      digits.splice(index,\
    \ 1);\n    }\n  }\n  return result;\n}\n", "  nums = nums.sort(function(a, b){\n\
    \    return a + b\n  })\n  var result = []\n  nums.forEach(function(n, i){\n \
    \   result.push(n)\n  })\n  return result\n}\n", "    const len = nums.length;\n\
    \    const points = [];\n\n    for(let i = 0; i < len; i++){\n        let nsum\
    \ = nums.map(n => +n).reduce((sum, n) => sum + n, 0);\n        if(!points.includes(nsum)){\n\
    \            points[nsum] = [i];\n        }else{\n            points[nsum].push(i);\n\
    \        }\n    }\n\n    const result = points.reduce((res, cur) => {\n      \
    \  let last = res[res.length - 1];\n        if(!last || last[0] !== cur[0]){\n\
    \            res.push(cur);\n        }else{\n            last[1].push(cur[1]);\n\
    \        }\n        return res;\n    }, [[], []]);\n\n    for(let i = 0; i < result[0].length;\
    \ i++){\n        result[0][i] = nums[result[0][i]];\n    }\n    return result.map(x\
    \ => x.filter(n => n));\n}\n", "\tnums = nums.slice();\n\tnums.sort(function(a,\
    \ b){\n\t\t//Sort the sum of the digits descending\n\t\treturn nums.reduce((a,b)=>a+b,\
    \ 0)-nums.reduce((a,b)=>a+b, 1);\n\t});\n\treturn nums;\n}\n", "    var ret=[],\n\
    \        max=-0,\n        i;\n    for(i=0;i<nums.length;i++){\n        num = nums[i];\n\
    \        if(num > max){\n            max=num;\n        }\n    }\n    for(i=0;i<nums.length;i++){\n\
    \        num = nums[i];\n        if(num<0){\n            ret.push(num);\n    \
    \    }else if(num===max){\n            ret.push(num);\n            ret.push(-1);\n\
    \        }else{\n            ret.push(-1);\n        }\n    }\n    return ret;\n\
    }\n", "    if(nums.length == 0)\n        return nums;\n    let point = {};\n \
    \   nums.forEach(item => {\n        if(item.toString().length == 1){\n       \
    \     item.toString();\n        }\n    });\n    let sums = nums.map(item => item.toString().split('').reduce((acc,\
    \ num)=>acc+num, 0))\n    \n    let result = nums.sort((a, b) => sums.indexOf(a.toString())-sums.indexOf(b.toString()));\n\
    \    return result;\n}", "    var results = [];\n    nums = nums.sort();\n   \
    \ var index = 0;\n    var sum = 0;\n    var temp;\n    while (index < nums.length)\
    \ {\n        temp = nums[index];\n        sum += temp;\n        while (sum > 0)\
    \ {\n            if (sum > 1) {\n                sum += nums[index++]\n      \
    \      } else {\n                results.push(nums[index++]);\n              \
    \  sum -= nums[index++];\n            }\n        }\n    }\n    return results;\n\
    }\n", "  // O(2n)\n  let maxSum = -Infinity;\n  let maxIndex = 0;\n  for (let\
    \ i=0; i<nums.length; i++){\n    let currentSum = 0;\n    for (let j=0; j<nums[i].length;\
    \ j++){\n      currentSum += nums[i][j];\n    }\n    // console.log(currentSum,\
    \ i)\n    if (currentSum > maxSum){\n      // console.log(currentSum, i)\n   \
    \   maxSum = currentSum;\n      maxIndex = i;\n    }\n  }\n  // console.log(maxIndex,\
    \ maxSum, nums)\n  return nums[maxIndex];\n}", "    let counterMap = {};\n   \
    \ nums.forEach(item => {\n        counterMap[item] = counterMap[item] || [];\n\
    \        counterMap[item].push(item);\n    })\n\n    let sortedNums = Object.keys(counterMap)\n\
    \        .map(item => counterMap[item])\n        .sort((a, b) => {\n         \
    \   const a = parseInt(a.reduce((acc, num) => acc + num, 0), 10);\n          \
    \  const b = parseInt(b.reduce((acc, num) => acc + num, 0), 10);\n           \
    \ return a - b;\n        });\n\n    sortedNums = sortedNums.map(item => item.reduce((acc,\
    \ num) => acc + num, 0));\n\n    return sortedNums;\n}\n</code>\n<|/ a tags=arrays,algorithm,sorting\
    \ |>\n<| c |>\nThis is not guaranteed to give the sorted array.\n<|/ c |>\n<|\
    \ c |>\nit gives [111, -1, -12, -1, 1, -11] when I try it\n<|/ c |>\n<| c |>\n\
    I believe `1111` should come before `-1` according to OP's comment above.\n<|/\
    \ c |>\n<| c |>\nAh, I see what you mean. Yes I agree, thanks for pointing it\
    \ out.\n<|/ c |>\n<| c |>\nI added a version with a counterMap to handle duplicate\
    \ sums. I think that is what you meant?\n<|/ c |>\n<| a dscore=0 |>\nI think it\
    \ may be useful to have a look at how an implementation of quicksort could be:\n\
    \n<code>", "    let sum = 0\n    const res = []\n    nums.forEach((num) => {\n\
    \        const s = parseInt(num.toString().split('').reduce((s, c) => s + c, 0))\n\
    \        if(!res.length){\n            res.push(s)\n        } else {\n       \
    \     sum+=s\n            if(sum>0){\n                res.sort()\n           \
    \     res.pop()\n            }\n        }\n    })\n    return res.concat(nums)\n\
    }\n", "  const res = [];\n  let i = 0;\n  while (i < nums.length) {\n    const\
    \ sum = Math.round(nums[i]);\n    if (sum < 0) sum += 10;\n    while (i < nums.length\
    \ && sum > Math.round( nums[i+1])) {\n      sum += nums[i++];\n    }\n    res.push(sum);\n\
    \  }\n  nums = res; //Reorder from smallest to largest\n  return nums;\n}\n\n",
  "    // Sort the given array in ascending order according to its sum:\n    nums.sort(function(a,\
    \ b){\n        return (a+b)/2 - (a+b) % 2;\n    });\n    // Return the array sorted\
    \ by its sum:\n    return nums.slice();\n}\n", "    let result = [];\n    nums.sort((a,b)=>{\n\
    \        return a%10+b%10 - parseInt(a%10) - parseInt(b%10);\n    });\n    for(let\
    \ i = nums.length-1; i >= 0; i--){\n        result.unshift(nums[i]);\n    }\n\
    \    return result;\n}\n", "  var len = nums.length;\n  if(len === 0)\n    return\
    \ nums;\n  if(len > 1){\n    var sum = 0;\n    var last;\n    for(var i = 0; i\
    \ < len; i++){\n      var point = nums[i];\n      var digit = point % 10;\n  \
    \    sum += digit;\n      last = point;\n    }\n    for(;i < len; i++)\n     \
    \ nums[i] = nums[i] - sum;\n    return nums;\n  }\n  if(nums[0] === 0)\n    return\
    \ nums.slice();\n  if(nums[0] < 0)\n    nums[0] *= -1;\n  nums.sort(function(a,\
    \ b){\n    var sumA = a + nums[a];\n    var sumB = b + nums[b];\n    return sumA\
    \ - sumB;\n  });\n  return nums;\n}", "  const map = new Map();\n  let minSum\
    \ = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  nums.forEach((n, i)=>{\n\
    \    const sum = Math.abs(n%10);\n    if (map.has(sum)){\n      map.set(sum, [...map.get(sum),\
    \ i])\n    } else {\n      map.set(sum, [i]);\n    }\n    \n    const val = sum\
    \ - minSum;\n    if (val < minSum){\n      minSum = val;\n      minIndex = i;\n\
    \    }\n  })\n  nums.forEach((n, i)=>{\n    const sum = Math.abs(n%10);\n    const\
    \ index = map.get(sum)[0];\n    map.set(sum, [index]);\n  })\n  return [...map.values()];\n\
    }\n", "\tvar result = [];\n\tfor (var i = 0, len = nums.length; i < len; i++){\n\
    \t\tvar num = nums[i];\n\t\tvar sum = 0;\n\t\tfor (var j = 0, len2 = num.length;\
    \ j < len2; j++){\n\t\t\tvar d = num[j];\n\t\t\tsum += d * d;\n\t\t}\n\t\tresult.push(num);\n\
    \t\tif (sum > 0){\n\t\t\tresult.sort(function(n1, n2){\n\t\t\t\treturn sum - order_by_points(n1).length\
    \ - order_by_points(n2).length;\n\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n", "    console.log(nums);\n    let sum = 0;\n    for (let i = 0;\
    \ i < nums.length; i++){\n        sum += nums[i];\n    }\n    let result = [];\n\
    \    for (let i = 0; i < nums.length; i++){\n        if (nums[i] === -1){\n  \
    \          result.push(-nums[i]);\n        } else if (nums[i] === 1){\n      \
    \      result.push(1)\n        } else {\n            result.push(nums[i]);\n \
    \       }\n    }\n    console.log(result);\n    console.log(sum);\n    for (let\
    \ i = 0; i < result.length; i++){\n        if (result[i] < 0){\n            result[i]\
    \ = -result[i];\n        } else if (result[i] > 0){\n            result[i] = result[i];\n\
    \        }\n    }\n    console.log(result);\n    console.log(result);\n    return\
    \ result;\n}\n", "\tvar a = nums.slice();\n\ta.sort(function(a, b){\n\t\treturn\
    \ sum_digits(a) - sum_digits(b);\n\t});\n\treturn a;\n}\n", "  var result = [];\n\
    \  nums.forEach(function(val){\n    var sum = 0;\n    for (var i = val.length\
    \ - 1; i >= 0; i--){\n      sum += parseInt(val[i]);\n    }\n    result.push(sum);\n\
    \  });\n  result.sort(function(a, b){\n    return a - b;\n  });\n  return result;\n\
    }\n", "    var result = [];\n    var len = nums.length;\n    var i;\n    //Sort\
    \ the array by summing its digits (not the digits themselves)\n    for(i = len\
    \ - 1; i >= 0; --i){\n        result.push(nums[i] + nums[i + 1]);\n    }\n   \
    \ //Sort the array by index\n    for(i = 0; i < len - 1; ++i){\n        result.push(nums[i]);\n\
    \    }\n    return result;\n}\n", "  var copy = nums.slice();\n  var result =\
    \ [];\n  var temp, sum;\n  var index = 0;\n  while(copy.length > 0){\n    sum\
    \ = 0;\n    temp = 0;\n    for(var i=0; i<copy.length; i++){\n      temp += parseInt(copy[i]);\n\
    \    }\n    sum += temp;\n    result.push(copy[index++]);\n    for(var i=0; i<copy.length;\
    \ i++){\n      if(copy[i] < 0){\n        copy[i] = -copy[i];\n      }\n    }\n\
    \    copy.splice(0, copy.length);\n  }\n  return result.sort(function(a, b){\n\
    \    a = parseInt(a);\n    b = parseInt(b);\n    return sum - a - b;\n  });\n\
    }\n\n", "    var sum = 0, i;\n    for(i = 0; i < nums.length; i++){\n        sum\
    \ += nums[i];\n    }\n    for(i = 0; i < nums.length; i++){\n        if(nums[i]\
    \ > sum){\n            return nums[i];\n        }\n    }\n}\n", "  var order =\
    \ [];\n  nums.forEach(function(num){\n    var sum = 0;\n    var point = 0;\n \
    \   while (num){\n      point = num % 10;\n      sum += point;\n      num = parseInt(num/10);\n\
    \    }\n    order.push(sum);\n  });\n  return order;\n}\n", "  var len = nums.length,\n\
    \      reversed = new Array(len),\n      sum = 0,\n      index = -1,\n      point,\n\
    \      tmp;\n  while (++index < len){\n    point = nums[index];\n    tmp = sum\
    \ + point;\n    while (tmp > 0){\n      sum -= point;\n      point = nums[++index];\n\
    \      tmp = sum + point;\n    }\n    reversed[index] = sum;\n    sum = 0;\n \
    \ }\n  return reversed;\n}\n", "    var sorted = nums.slice(0).sort(function(a,\
    \ b){\n        var x = parseInt(b.toString().replace(/[^\\d]/g, \"\"), 10);\n\
    \        var y = parseInt(a.toString().replace(/[^\\d]/g, \"\"), 10);\n      \
    \  return x - y;\n    });\n    var result = [];\n    for(var i = 0; i < nums.length;\
    \ i++){\n        var index = sorted.indexOf(i + 1);\n        if(index < 0){\n\
    \            result.push(nums[i]);\n        } else {\n            var item = nums[index];\n\
    \            if(item.toString().replace(/[^\\d]/g, \"\") !== (sorted[index]).toString().replace(/[^\\\
    d]/g, \"\")){\n                result.push(item);\n            }\n        }\n\
    \    }\n    return result;\n}\n", "  nums=nums.sort(function(a, b){return a-b})\n\
    \  nums=nums.sort(function(a, b){return a>b?1:a<b?-1:0})\n  nums=nums.sort(function(a,\
    \ b){return a>b?1:a<b?-1:0})\n  return nums\n}", "    var result = [];\n    var\
    \ sum = 0;\n    for(var i=0; i<nums.length; i++){\n        var item = nums[i];\n\
    \        var digits = item;\n        for(var j=0; j<digits.length; j++){\n   \
    \         sum += digits[j];\n        }\n        result.push(item);\n    }\n  \
    \  result.sort(function(a,b){\n        return sum - a + b\n    });\n    return\
    \ result;\n}\n\nvar points = document.getElementById('points');\nvar points =\
    \ order_by_points([1, 11, -1, -11, -12]);\nfor(var i=0; i<points.length; i++){\n\
    \    points.innerHTML += points[i] + '<br>';\n}\n</script>\n</body>\n</html>\n\
    </code>\nThe output was:\n<code>\n-1\n-1\n1\n-11\n-11\n-12\n-11\n-1\n1\n-1\n-11\n\
    -11\n-1\n1\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n\
    -11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n\
    -11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n\
    -11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n\
    -11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n\
    -11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n\
    -11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n\
    -11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n\
    -11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n\
    -11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n\
    -11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n-11\n\
    -11\n-11\n-11\n-11\n-11", "  var sum, maxSum, minSum;\n  nums.sort((a,b) => (a.num\
    \ > b.num) ? 1 : ((b.num > a.num) ? -1 : 0));\n  minSum = sum = 0;\n  maxSum =\
    \ nums.reduce((maxSum,num) => (sum + num) > maxSum ? sum + num : maxSum, 0);\n\
    \  while (maxSum > 0){\n    sum = 0;\n    nums.forEach((num) => {\n      sum +=\
    \ num;\n    });\n    maxSum -= sum;\n  }\n  minSum = sum = 0;\n  nums.forEach((num)\
    \ => {\n    sum += num;\n    if (sum >= minSum){\n      minSum = sum;\n    }\n\
    \  });\n  return nums.map(num => num);\n}\n", "  let res = [];\n  for(let num\
    \ of nums){\n    let digits = [];\n    for(let i = 2; i <= Math.log10(num); ++i){\n\
    \      digits.push(num / Math.pow(10, i) % 10);\n    }\n    res.push(digits[digits.length\
    \ - 1] * -1);\n  }\n  return res.sort((a, b) => a - b);\n}\n", "    let sorted\
    \ = [];\n    nums.map(n => {\n        let sum = n.toString().split('').reduce((a,b)=>\
    \ a + parseInt(b, 10), 0);\n        sorted.push(n);\n        sorted.push(sum);\n\
    \    });\n    sorted.sort((a,b) => {\n        if (a[1] < b[1]) return -1;\n  \
    \      if (a[1] > b[1]) return 1;\n        return 0;\n    });\n    return sorted;\n\
    }", "  // Write your code here\n  let index = 0; \n  let temp = 0;\n  let result\
    \ = [];\n  while (index < nums.length){\n    temp = nums[index]+nums[index+1];\n\
    \    if (index+2 === nums.length){\n      result.push(temp);\n      index++;\n\
    \      continue;\n    }\n    if (temp < nums[index+2]){\n      result.push(nums[index+2]);\n\
    \      index++;\n      continue;\n    }\n    if (temp > nums[index+2]){\n    \
    \  result.push(nums[index]);\n      index++;\n      continue;\n    }\n    result.push(temp);\n\
    \    index++;\n  }\n  return result;\n}", "    let sums = 0;\n    nums.forEach(function(item){\n\
    \        sums += item;\n    });\n    return nums.sort(function(a, b){\n      \
    \  return sums - sum(a) - sum(b);\n    });\n}\n", "    nums.sort(function(a, b){\n\
    \        return (a[0]-b[0]) * (a[1]-b[1]);\n    });\n    return nums;\n}\n", " \
    \   nums = nums.sort((a,b)=>{\n        let sum = (+a) + (+b);\n        if(sum<0){\n\
    \            return -1;\n        }\n        if(sum>0){\n            return 1;\n\
    \        }\n        return 0;\n    });\n    let count = 0;\n    for(let i = 0;\
    \ i < nums.length; i++){\n        while(nums[count]++ != i){\n            count++;\n\
    \        }\n    }\n    return nums.slice();\n}\n", "    nums.sort(function(a,\
    \ b){\n        var sumA = sumDigits(a), sumB = sumDigits(b);\n        return sumA\
    \ - sumB;\n    });\n    return nums;\n}\n", "  var arr = [];\n  var max = -Infinity;\n\
    \  nums.forEach(function(num){\n    var sum = 0, place = 0;\n    while(num !=\
    \ 0){\n      sum += num % 10;\n      num = (num / 10) | 0;\n      place++;\n \
    \   }\n    if (sum > max) max = sum;\n    if (sum < 0) sum = 0;\n    arr.push(sum);\n\
    \  });\n  return arr.sort(function(a, b){\n    return a - b;\n  });\n}\n", " \
    \ nums.sort((a,b) => { return a.toString().localeCompare(b).toString() });\n \
    \ return nums;\n}\n", "    nums = nums.slice();\n    var i, sum, sumOfDigit;\n\
    \    var order = nums.slice();\n    for(i = 0; i < nums.length; i++){\n      \
    \  sumOfDigit = nums[i];\n        sum = 0;\n        for(j = 0; j < nums.length;\
    \ j++){\n            sum += parseInt(nums[j], 10);\n            sumOfDigit +=\
    \ parseInt(nums[j], 10);\n        }\n        if(sumOfDigit === sum){\n       \
    \     order[i] = nums[i];\n        }\n    }\n    return order;\n}\n", "\tnums\
    \ = nums.sort(function(a, b){\n\t\tlet retVal = 0;\n\t\tfor(var i = 0; i < a.length;\
    \ i++){\n\t\t\tretVal += Math.pow(10, a.length - i - 1);\n\t\t}\n\t\tlet x = Math.pow(10,\
    \ b.length - 1);\n\t\tretVal += Math.pow(x, b.length - 1) - Math.pow(x, b.length);\n\
    \t\treturn retVal;\n\t});\n\treturn nums;\n}\n", "  //sort the given array based\
    \ on the sum of their digits\n  nums.sort((a, b) => Math.sign(b - a) || a - b)\n\
    \  \n  //return a new array with sorted array\n  return nums\n}\n", "  var ret\
    \ = [];\n  var len = nums.length;\n  var maxSum = 0;\n  for(var i=0; i<len; i++){\n\
    \    var curSum = 0;\n    for(var j=0; j<len; j++){\n      if(nums[j] >= 0){\n\
    \        curSum += Math.abs(nums[j]);\n      } else {\n        curSum -= Math.abs(nums[j]);\n\
    \      }\n      if(curSum > maxSum){\n        maxSum = curSum;\n      }\n    }\n\
    \    ret.push(nums[nums.length-i-1]);\n  }\n  return ret;\n}\n", "  const arr\
    \ = [];\n  for(let i = 0; i < nums.length; i++){\n    const digits = nums[i].toString().split('');\n\
    \    let sum = 0;\n    for(let j = 0; j < digits.length; j++){\n      sum += Number(digits[j]);\n\
    \    }\n    arr.push(sum);\n  }\n  return arr.sort((a,b) => a - b);\n}\n", "\t\
    var arr = [];\n\tnums.forEach(function(num){\n\t\tvar sum = 0;\n\t\tvar i = 1;\n\
    \t\twhile(num>0){\n\t\t\tsum += num % 10;\n\t\t\tnum = Math.floor(num / 10);\n\
    \t\t\ti++;\n\t\t}\n\t\tarr.push(sum);\n\t});\n\treturn arr.sort();\n}", "    var\
    \ res = [];\n    var total = 0;\n    for(var i = 0, len = nums.length; i < len;\
    \ i++){\n        total += nums[i];\n        res.push(total);\n    }\n    res.sort((a,\
    \ b) => a - b);\n    return res;\n}\n", "  if (nums.length === 0) {\n    return\
    \ []\n  }\n  let counter = new Array(10).fill(0)\n  nums.forEach((num) => {\n\
    \    counter[num%10] += 1\n  })\n  return counter.map((c,i) => i).filter((num)\
    \ => {\n    return nums.indexOf(num) === nums.lastIndexOf(num)\n  }).sort((a,\
    \ b) => a - b).map((num) => {\n    return nums[num]\n  })\n}\n", "\tnums = nums.slice();\n\
    \tnums.sort(function(num1, num2){\n\t\tnum1 = Number(num1);\n\t\tnum2 = Number(num2);\n\
    \t\treturn num1 - num2;\n\t});\n\treturn nums;\n}", "    nums.sort();\n    for\
    \ (var i =0; i < nums.length; i++){\n        nums[i].sort();\n    }\n    return\
    \ nums;\n}\nvar user_input = [];\nvar user_input_length = 0;\nvar num_user_input_points;\n\
    var total_user_input_points;\nvar num_user_input_points;\nvar num_user_input_digits;\n\
    var user_input_sum;\nvar user_input_max_sum;\nvar user_input_sums;\nvar user_input_total_digits;\n\
    var user_input_min_sum;\nvar user_input_min_digits;\nvar user_input_points;\n\
    var user_input_point_index;\nvar user_input_point_digit;\nvar user_input_point_index;\n\
    var user_input_point_digit;\nvar user_input_point_index;\nvar user_input_point_digit;\n\
    var user_input_point_index;\nvar user_input_point_digit;\nvar user_input_point_index;\n\
    var user_input_point_digit;\nvar user_input_point_index;\nvar user_input_point_digit;\n\
    var user_input_point_index;\nvar user_input_point_digit;\nvar user_input_point_index;\n\
    var user_input_point_digit;\nvar user_input_point_index;\nvar user_input_point_digit;\n\
    var user_input_point_index;\nvar user_input_point_digit;\nvar user_input_point_index;\n\
    var user_input_point_digit;\nvar user_input_point_index;\nvar user_input_point_digit;\n\
    var user_input_point_index;\nvar user_input_point_digit;\nvar user_input_point_index;\n\
    var user_input_point_digit;\nvar user_input_point_index;\nvar user_input_point_digit;\n\
    var user_input_point_index;\nvar user_input_point_digit;\nvar user_input_point_index;\n\
    var user_input_point_digit;\nvar user_input_point_index;\nvar user_input_point_digit;\n\
    var user_input_point_index;\nvar user_input_point_digit;\nvar user_input_point_index;\n\
    var user_input_point_digit;\nvar user_input_point_index;\nvar user_input_point_digit;\n\
    var user_input_point_index;\nvar user_input_point_digit;\nvar user_input_point_index;\n\
    var user_input_point_digit;\nvar user_input_point_index;\nvar user_input_point_digit;\n\
    var user_input_point_index;\nvar user_input_point_digit;\nvar user_input_point_index;\n\
    var user_input_point_digit;\nvar user_input_point_index;\nvar user_input_point_digit;\n\
    var user_input_point_index;\nvar user_input_point_digit;\nvar user_input_point_index;\n\
    var user_input_point_digit;\nvar user_input_point_index;\nvar user_input_point_digit;\n\
    var user_input_point_index;\nvar user_input_point_", "    nums.sort(function(a,\
    \ b){\n        return pointSum(a, b);\n    });\n    return nums;\n}\n", "    var\
    \ sum = 0;\n    nums.forEach(function(i){\n        sum += i;\n    })\n    nums.forEach(function(i){\n\
    \        nums[i] = nums[i] - sum;\n    });\n    return nums;\n}\n", "    return\
    \ nums.sort(function(a, b){\n        return Number(a) - Number(b);\n    });\n\
    }\n", "    nums = nums.sort(function(a, b){\n        return b - a;\n    });\n\
    \    return nums;\n}", "  if (nums.length === 0)\n    return []\n  nums.sort((a,\
    \ b) => a.num > b.num ? 1 : b.num > a.num ? -1 : 0); \n  return nums\n}\n", " \
    \   return nums.sort((a, b) => { \n        return b - a;\n    });\n}\n", "   \
    \ var points = [];\n    var sortedNums = nums.slice(0);\n    \n    // Sort in\
    \ descending order - largest first\n    sortedNums.sort(function(a,b){\n     \
    \   return (b-a) * -1;\n    });\n\n    //Create an array of all points and calculate\
    \ their sum\n    for(var i in nums){\n        var val = parseFloat(nums[i]);\n\
    \        points.push([val, i]);\n    }\n\n    \n    //Sort all points\n    for(var\
    \ i in points)\n    {\n        var p = points[i];\n        var index = sortedNums.indexOf(p[0]);\n\
    \        \n        //If the point doesn't already have an index,\n        //assign\
    \ it a position in the sorted array\n        if(typeof index === 'undefined'){\n\
    \            index = sortedNums.length;\n        }\n        \n        //Add the\
    \ point to the sorted array\n        sortedNums.splice(index, 0, p[1]);\n    }\n\
    \    \n    //Return sorted array\n    return sortedNums;\n}\n", "    var sum =\
    \ 0;\n    nums.forEach(function(point){\n        sum += point;\n    });\n    nums.sort((a,b)\
    \ => sum-a);\n    return nums;\n}\n", "  nums.sort(function(a, b){\n    var sum\
    \ = 0, digits = a.toString().split(''), n = b.toString().split('');\n    for(var\
    \ i = 0; i < digits.length; i++){\n      sum += parseInt(digits[i]);\n    }\n\
    \    return sum - parseInt(n[0]) - parseInt(n[1]);\n  });\n  return nums;\n}\n",
  "    //Write your code here\n    if(nums.length==0)\n        return nums;\n    let\
    \ sums = [];\n    for (let i=0; i<nums.length; i++){\n        sums.push(nums[i]%10);\n\
    \    }\n    let sorted = [];\n    for (let i=0; i<sums.length; i++)\n        sorted.push(nums.filter(num=>sums.includes(num[i])).sort(function(a,b)=>a-b))\n\
    \    return sorted[0]\n}\n", "  return nums.map(function(num){\n    var digits\
    \ = num.toString().split('');\n    return digits.length < 2 ? digits[0] : parseInt(digits.reduce(function(prev,cur){\n\
    \      return prev + cur;\n    }),10);\n  }).sort(function(a,b){\n    return a+b\n\
    \  }).filter(function(digit, idx, arr){\n    return arr.indexOf(digit, idx) >\
    \ -1;\n  });\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution will fail in edge cases\
    \ such as `[1, -1, 1]`. I suggest adding `||` between the two `||`s in the `reduce`\
    \ function.\n<|/ c |>\n<| c |>\nI added a `|| 0` to account for these edge cases.\
    \ Thanks!\n<|/ c |>\n<| c |>\nThis fails for the case `[2, 3, 2]`\n<|/ c |>\n\
    <| c |>\nI added a comment to the code above to explain why this solution is flawed.\n\
    <|/ c |>\n<| c |>\nThe function `sort_by_digits()` is great. Thank you.\n<|/ c\
    \ |>\n<| a tags=arrays,javascript,sorting dscore=5 |>\nThis is my solution to\
    \ sort:\n<code>", "  return nums.sort((a,b)=>a.localeCompare(b,{numeric: true}));\n\
    }\n", "\tvar sum = 0,\n\tarr = [],\n\ti;\n\tfor(i=0;i<nums.length;i++){\n\t\t\
    sum += nums[i];\n\t\tarr.push(sum);\n\t}\n\tarr.sort(function(a,b){return b-a;});\n\
    \tfor(i=0;i<nums.length;i++){\n\t\tnums[i] = arr[i];\n\t}\n\treturn nums;\n}\n",
  "  return nums.sort((a,b)=>{\n    let sum = Math.abs(+a) + Math.abs(+b)\n    return\
    \ sum/Math.pow(10, Math.max(+a, +b)+2)\n  })\n}\n", "    nums = nums.sort(function(a,\
    \ b){\n        var x = a.slice();\n        var y = b.slice();\n        var i =\
    \ x.length;\n        var j = y.length;\n        while (--i >= 0){\n          \
    \  var k = x[i] + y[j];\n            if (k != 0){\n                var l = x[i]*y[j];\n\
    \                if (k != l){\n                    return k ? l - k : 0;\n   \
    \             }\n            }\n        }\n        return 0;\n    });\n    return\
    \ nums;\n}\n\n", "    var results = [];\n    nums.forEach(function(num){\n   \
    \     var sum = num.toString().split('').map(Number).reduce(function(prev, curr){\n\
    \            return prev + curr;\n        });\n        if(results.indexOf(sum)\
    \ === -1){\n            results.push(sum);\n        }\n    });\n    return results.sort(function(a,\
    \ b){\n        return a - b;\n    });\n}\n", "  let numsLen = nums.length\n  if(numsLen\
    \ === 0) return []\n  const points = []\n  let point = {}\n  let psum = 0\n  for(let\
    \ i = 0; i < numsLen; i++){\n    const curVal = nums[i]\n    if(curVal === 0)\
    \ continue\n    psum += curVal\n    psum = psum % 10\n    point = {\n      index:\
    \ i,\n      point: curVal,\n      psum: psum,\n      digit: psum >= 5 ? 1 : 0\n\
    \    }\n    points.push(point)\n  }\n  points.sort( (a, b) => {\n    return a.psum\
    \ - b.psum\n  })\n  return points.map( (point) => {\n    return nums[point.index]\n\
    \  })\n}\n", "    var result = [];\n    nums.sort(function(a,b){return a+b;});\n\
    \    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n     \
    \   for(var j = i; j > 0; j--){\n            if(nums[j] > num){\n            \
    \    var num1 = nums[j];\n                var num2 = nums[j - 1];\n          \
    \      nums[j] = num;\n                nums[j - 1] = num1;\n                break;\n\
    \            }\n        }\n        result.push(num);\n    }\n    return result;\n\
    }\n", "  nums.sort(function(a, b){\n    return a.length + b.length + Math.abs(a-b);\
    \ \n  });\n  return nums;\n}\n", "  var new_nums = [];\n  for(var i = 0; i<nums.length;\
    \ i++){\n    new_nums.push(nums[i]);\n  }\n  new_nums.sort(function(a, b){\n \
    \   return parseInt(a.toString().replace(/,/g, '') - b.toString().replace(/,/g,\
    \ ''));\n  });\n  for(var i = 0; i<nums.length; i++){\n    new_nums[i] = nums[i];\n\
    \  }\n  return new_nums;\n}\n", "  const hashMap = new Map();\n  for (let num\
    \ of nums) hashMap.set(get_sum_of_digits(num), num);\n  return Array.from(hashMap.values());\n\
    }\n", "    return nums.reduce(function(order,num){\n        var sum = getSum(num);\n\
    \        if(sum !== 0){\n            order.push(num);\n            nums.splice(nums.indexOf(num),1);\n\
    \        }\n        return order;\n    }, []);\n}\n", "    var res = [];\n   \
    \ nums.sort(function(a, b){\n        var a = Math.abs(a);\n        var b = Math.abs(b);\n\
    \        if(b > a) return 1;\n        if(b < a) return -1;\n        return 0;\n\
    \    });\n    for(var i = 0; i < nums.length; i++){\n        var nums_item = nums[i];\n\
    \        var index = nums.indexOf(nums_item);\n        while(index != i){\n  \
    \          res.push(nums[index]);\n            index = nums.indexOf(nums_item,\
    \ index + 1);\n        }\n        res.push(nums_item);\n    }\n    return res;\n\
    }", "\tvar nums_len=nums.length;\n\tvar digits=new Array(nums_len);\n\tvar sum=0;\n\
    \tfor(var i=0;i<nums_len;i++){\n\t\tsum+=parseInt(nums[i]);\n\t\tdigits[i]=sum;\n\
    \t}\n\tdigits.sort(function(n1,n2){\n\t\tvar sum1=0;\n\t\tvar sum2=0;\n\t\tfor(var\
    \ i=0;i<nums_len;i++){\n\t\t\tsum1+=parseInt(nums[i])%10;\n\t\t\tsum2+=sum1;\n\
    \t\t}\n\t\tsum1-=parseInt(nums[nums_len-1])%10;\n\t\treturn sum2-sum1;\n\t});\n\
    \treturn digits;\n}\n", "  if (nums.length === 0) return nums;\n  let digits =\
    \ nums.map(x => parseInt(x));\n  let digit_sum = digits.reduce((acc, x) => acc\
    \ + x, 0);\n  let res = [];\n  for (let i = 0; i < digits.length; i++){\n    let\
    \ index = nums.indexOf(digits[i]);\n    if (index > -1) nums.splice(index, 1);\n\
    \    res.push(nums.indexOf(digits[i]));\n  }\n  return res.concat(nums);\n}\n",
  "    var ret = [];\n    var hash = {};\n    for (var i = nums.length - 1; i >= 0;\
    \ i--) {\n        var num = nums[i];\n        var digit = num.toString().length;\n\
    \        if (!hash[digit]){\n            hash[digit] = [];\n        }\n      \
    \  hash[digit].push(num);\n    }\n    var digits = Object.keys(hash);\n    digits\
    \ = digits.sort(function(a, b){\n        return hash[a][a] - hash[b][b];\n   \
    \ });\n    digits.forEach(function(d){\n        nums = nums.filter(function(num){\n\
    \            var digit = num.toString().length;\n            return digit ===\
    \ d;\n        });\n        ret.push(nums.shift());\n    });\n    return ret;\n\
    }\n", "    nums.sort(function(a, b){\n        var a_point = sum_digits(a), b_point\
    \ = sum_digits(b);\n        return a_point - b_point;\n    });\n    return nums;\n\
    }\n", "  var sorted = nums.slice().sort(function(a,b){\n    return a-b; //Sort\
    \ first on descending order\n  });\n  var result = [];\n  for(var i=0; i<sorted.length;\
    \ i++){\n    for(var j=0; j<sorted.length; j++){\n      if(sorted[j] - sorted[i]===0)\
    \ continue;\n      result.push([sorted[i],sorted[j]]);\n    }\n  }\n  return result;\n\
    }", "\tnums.sort(function(a, b){\n\t\tif(a==b){\n\t\t\treturn 0;\n\t\t}\n\t\t\
    var sum_a=0, sum_b=0;\n\t\tfor (var i=0; i<a.length; i++){\n\t\t\tsum_a += parseInt(a[i]);\n\
    \t\t\tsum_b += parseInt(b[i]);\n\t\t}\n\t\treturn parseInt(sum_a) - parseInt(sum_b);\n\
    \t});\n\treturn nums;\n}", "    var len = nums.length;\n    console.log(nums)\n\
    \    var ret = [];\n    \n    for(var i = 0; i < len; i++){\n        var sum =\
    \ 0;\n        for(var j = 0; j < len; j++){\n            sum += parseInt(nums[j].slice(0,\
    \ 1));\n        }\n        \n        if(ret.indexOf(sum) === -1) ret.push(sum);\n\
    \    }\n    console.log(ret)\n    return ret;\n}\n", "    var len = nums.length;\n\
    \    var tempNum = new Array(len);\n    var i;\n    for(i=0;i<len;i++){\n    \
    \    tempNum.push(nums[i]);\n    }\n    var sortedNum = new Array(len);\n    var\
    \ j = 0;\n    for(i=0;i<len;i++){\n        while(j<len){\n            if(tempNum[i]+tempNum[j]\
    \ > 0){\n                sortedNum.push(tempNum[i]);\n                j++;\n \
    \           }else if(tempNum[i]+tempNum[j] == 0){\n                sortedNum.push(tempNum[i]);\n\
    \                tempNum.splice(i,1);\n                len = tempNum.length;\n\
    \            }else{\n                j++;\n            }\n        }\n    }\n \
    \   return sortedNum;\n}\n", "    nums = nums.sort(function(a, b){\n        //Compare\
    \ sum based on value of b\n        return b - a;\n    });\n    return nums;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
