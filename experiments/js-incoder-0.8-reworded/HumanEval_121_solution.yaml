name: HumanEval_121_solution
language: js
prompt: "//Given a non-empty array of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n\
  // >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\n\
  function solution(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
  \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
  \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
  \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
completions: ["  for(let i =0;i<lst.lenght;i++){\n      if(lst[i] % 2 ==0)\n     \
    \ {\n          return lst[i] + solution(lst)\n      }\n  }\nreturn -1\n}", " \
    \   // Write your code here.\n    \n    // Your Code Here\n    if(lst.length <=\
    \ 1) return 0;\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n \
    \       if(i % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "  return lst.filter(item => item % 2 === 1).reduce((a,b) => a +\
    \ b);\n}\n", "    \n    for(let i=0; i< lst.length; i++){\n        if(lst[i] %\
    \ 2 === 0){\n            return lst[i] + solution(lst[i+1]);\n        }\n    }\n\
    }\n<|/ file |>\n<| c |>\nThe array you provided as example doesn't seem to be\
    \ a valid list of numbers.  Are you sure you entered it correctly and not just\
    \ typed it into the editor?\n<|/ c |>\n<| c |>\nYeah. I'm sure I entered it correctly.\
    \ \nSorry, I typed it wrong. I edited the question and changed it from ```[3,\
    \ 3, 3, 3, 3]``` to ```[3, 5, 7, 1]```.\n<|/ c |>\n<| c |>\nNo worries. I edited\
    \ the answer to reflect your latest edits.\n<|/ c |>\n<| a tags=javascript,arrays\
    \ dscore=1 |>\nA possible approach would be to iterate over the array and then\
    \ filter out only the odd numbers in each loop:\n\n<code>", "  let evenSum = 0;\n\
    \  lst.forEach(function(n){\n    if (n % 2 === 0){\n      evenSum = evenSum +\
    \ n;\n    }\n  });\n  return evenSum;\n}\n", "    return lst.filter(function(elem,\
    \ index, self){\n        return index % 2 != 0;\n    }).reduce(function(prev,cur){\n\
    \        return prev + cur;\n    });\n}\n", "    \n    var sum = 0;\n    var evenCount\
    \ = 0;\n    \n    for(var i = 0; i< lst.length; i++){\n        if(lst[i]%2 ===\
    \ 0){\n            sum += lst[i];\n            evenCount ++;\n        }\n    }\n\
    \    return sum - (sum%2 == 0 ? evenCount*2 : evenCount);\n}\n</code>\n<|/ a tags=arrays,javascript,node.js\
    \ |>\n<| c |>\nThank you, very interesting solution\n<|/ c |>\n<| a dscore=0 |>\n\
    I hope this helps.\n<code>\nvar arr = [5,8,7,1];\nvar sumOfOdds = [];\nfor(var\
    \ i = 0; i < arr.length; i++) {\n  if(arr[i] % 2 === 0) {\n    sumOfOdds.push(arr[i]);\n\
    \  }\n}\nvar sum = 0;\nfor(var i = 0; i < sumOfOdds.length; i++) {\n  sum += sumOfOdds[i];\n\
    }", "  // Write your code in JavaScript (Node.js 8.9.4)\n  return lst.filter((el,\
    \ i) => i % 2 === 0).reduce((prev, val) => prev + val, 0);\n}\n", "  return lst.filter((e,i,a)\
    \ => i%2 == 0).reduce((acc,el)=>acc+el,0);\n}", "    let sum = 0;\n    for (let\
    \ i = 0; i < lst.length; i++){\n        if (i % 2 === 0){\n            sum +=\
    \ lst[i];\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a tags=javascript,arrays,algorithm\
    \ dscore=0 |>\n<| a |>\n<code>", "    if(lst.length === 0)\n        return 0;\n\
    \    \n    var result = lst.reduce(function(total, value, index){\n        if(index\
    \ % 2 === 0)\n            total += value;\n        return total;\n    });\n  \
    \  return result;\n};\n", "    return lst.filter((e, i, a)=> i % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n</code>\n<|/ a |>\n<| c |>\nThat is not the best answer.\
    \ As I mentioned in my answer, `reduce()` can be more effective in this case than\
    \ `filter()`. You don't need a `reduce()` here at all. `reduce()` is for summing\
    \ the values of an array. `filter()` can do the same thing here.\n<|/ c |>\n<|\
    \ c |>\nThanks for your answer. Can you give me an example of when reduce is more\
    \ effective than filter?\n<|/ c |>\n<| c |>\nI gave a use case in my answer and\
    \ you can refer to it. I also included the performance of both `reduce()` and\
    \ `filter()` in the answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    return\
    \ lst.filter((v, i) => {\n        return i % 2 == 0\n    }).reduce((acc, cur)\
    \ => (acc + cur), 0);\n}\n</code>\n<code>", "    return lst.reduce((acc, val)\
    \ => acc + (val % 2 == 1 ? val : 0), 0);\n}\n", "    let odd = lst.filter(ele\
    \ => ele % 2 === 1);\n    return odd.reduce((total, next) => total + next, 0);\n\
    }", "  var evenSum = 0;\n  lst.forEach(function(v){\n    if(v%2==0){\n      evenSum+=v;\n\
    \    }\n  });\n  return evenSum;\n}\n", "  \n  for(i=0;i<lst.length;i++){\n  \
    \  if (lst[i]%2==0){\n      return (lst[i]+lst[i+1]);\n    }\n  }\n}", "  let\
    \ sum = 0;\n  for(let i = 0;i<lst.length; i++){\n    let element = lst[i]%2 ?\
    \ lst[i] : lst[i]-1;\n    if(element == 0) sum += lst[i];\n  }\n  return sum;\n\
    }\n", "  \n  var sum = 0; \n\n  lst.forEach(function(val, index, arr){\n    if\
    \ (index % 2 === 0)\n      sum += val;\n  });\n\n  return sum;\n}\n</code>\n<|/\
    \ a tags=javascript,arrays dscore=0 |>\n<| a |>\n<code>", "\t\n\tlet sumOdd =\
    \ 0;\n\tfor(let i = 0; i < lst.length; i++){\n\t\tif(i%2 == 1){\n\t\t\tsumOdd\
    \ += lst[i];\n\t\t}\n\t}\n\treturn sumOdd;\n}\n", "    var sum = 0\n    lst.forEach(function(i){\n\
    \        if(i%2 === 1) sum += i\n    })\n    return sum\n}\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\nThis code will work if you only have positive numbers.\n<code>\n\
    var array = [5, 8, 7, 1];\nvar sum = 0;\nvar index;\n\nfor (var i = 0; i < array.length;\
    \ i++) {\n    index = i;\n    while (index > 0) {\n        if (array[index] ==\
    \ 0) {\n            index--;\n        } else {\n            sum = sum + array[index];\n\
    \            index--;\n        }\n    }\n}\n\nalert(sum);\n</code>\n<|/ a tags=javascript\
    \ |>\n<| a tags=javascript |>\nJust wanted to give another solution that's based\
    \ on your code. Just for the fun of it. I added some comments so that you understand\
    \ what's going on.\n\n<code>\nvar array = [5, 8, 7, 1];\nvar sum = 0;\nvar index;\n\
    var oddSum = 0;\n", "    \n    let evenSum = 0;\n    let oddSum = 0;\n    let\
    \ oddSumArray = [];\n    let evenSumArray = [];\n    \n    for(let i = 0; i<lst.length;\
    \ i++){\n        if(lst[i]%2===0){\n            evenSum = evenSum + lst[i];\n\
    \            evenSumArray.push(lst[i]);\n        }\n        else{\n          \
    \  oddSum = oddSum + lst[i];\n            oddSumArray.push(lst[i]);\n        }\n\
    \    }\n    \n    let evenIndex = 0;\n    while(evenSum<evenSumArray[evenIndex]){\n\
    \        evenSum = evenSum + evenSumArray[evenIndex];\n        evenIndex++;\n\
    \    }\n    \n    let oddIndex = 0;\n    while(oddSum<oddSumArray[oddIndex]){\n\
    \        oddSum = oddSum + oddSumArray[oddIndex];\n        oddIndex++;\n    }\n\
    \    \n    if(evenIndex<evenSumArray.length){\n        return evenSumArray.length-evenIndex;\n\
    \    }\n    else{\n        return oddSumArray.length-oddIndex;\n    }\n}\n", "\t\
    let even = 0;\n\tlet odd = 0;\n\tfor (let i = 0; i < lst.length; i++){\n\t\tif\
    \ (lst[i] % 2 == 0){\n\t\t\teven += lst[i];\n\t\t} else{\n\t\t\todd += lst[i];\n\
    \t\t}\n\t}\n\treturn (even + odd);\n}\n", "  return lst.filter(function(item){\n\
    \    return item%2 == 0;\n  }).reduce(function(total, item, index, arr){\n   \
    \ return total + (arr[index-1] || 0) + item;\n  }, 0);\n}\n</code>\n<|/ a tags=javascript,functional-programming\
    \ dscore=0 |>\n<| a dscore=0 tags=javascript,functional-programming |>\nHere is\
    \ an example of a functional programming solution using ramda:\n<code>\nvar solution\
    \ = function(arr) {\n    return R.map(R.ifElse(R.prop(0), R.add(R.__, R.prop(1)),\
    \ R.always(0)))(arr);\n};\n</code>\n<|/ a |>\n<| a tags=javascript,functional-programming\
    \ |>\nA more functional solution\n<code>", "  return lst.filter((x,i,a)=>i%2!=0).reduce((a,b)=>a+b)\n\
    }\n", "\tlet total = 0;\n\tfor(let i=1; i<lst.length; i++){\n\t\tif(lst[i] % 2\
    \ != 0 && lst[i] % 2 != 1 && lst[i]%2 != 3){\n\t\t\ttotal += lst[i];\n\t\t}\n\t\
    }\n\treturn total;\n}", "    var sum = 0;\n    for(var i of lst){\n        if(i\
    \ % 2 === 0){\n            sum += i;\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=javascript,arrays,list |>\n<| c |>\nNice answer. But I believe that\
    \ if you're using the `Array#find` method, you don't need to return the index.\
    \ Just return the element itself.\n<|/ c |>\n<| c |>\nNo, it is not required.\
    \ `find` will return the element itself if the predicate function returns true.\n\
    <|/ c |>\n<| c |>\nJust a little bit more optimized. `arr.filter(i => i % 2 ===\
    \ 0)` does the same thing as `arr.filter(i => i % 2 === 0)[0]`\n<|/ c |>\n<| a\
    \ tags=javascript,arrays,list |>\nThe first answer was very good, but i needed\
    \ a more compact solution. Here it is. Hope it helps!\n<code>\nconst solution\
    \ = (arr) => {\n  return arr.filter(function(x) { return x % 2 }).reduce(function(acc,\
    \ curr, index) {\n    return acc + curr;\n  }, 0);\n};\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=javascript,arrays,list |>\n<code>\nconst sumOdds = (arr) => {\n\
    \  let sum = 0;\n  let firstOdd = arr.find(i => i % 2 === 1);\n\n  for(let i =\
    \ 1; i <= arr.length; i++){\n    if(arr[i] % 2 !== 1){\n      sum+=firstOdd;\n\
    \    }\n  }\n  return sum;\n};\n</code>\n<|/ a dscore=4 |>\n<| a |>\n<code>\n\
    var sum = 0;\nfor (var i = 0; i < array.length; i++) {\n    if (array[i] % 2 ===\
    \ 0) {\n        sum += array[i];\n    }\n}\n</code>\n<|/ a dscore=4 tags=javascript,arrays,list\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding *why* and/or *how* this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a |>\nIf you don't want to use arrow function, then you\
    \ can use the following snippet:\n<code>", "    var sum = 0;\n    for(var i =\
    \ 0, len = lst.length; i < len; i++){\n        if(lst[len - 1] % 2 === 0 && lst[len]\
    \ / 2 % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n</cell>\n<cell>\nsolution([5, 8, 7, 1])\n</cell>\n<cell>\nsolution([3, 3, 3,\
    \ 3, 3])\n</cell>\n<cell>\nsolution([30, 13, 24, 321])\n</cell>\n<text>\nQuestion\
    \ 3\nWrite a function called solution to sum the numbers from 0 to n-1 inclusive,\
    \ and return a list of all even numbers excluding number n.\n\nExamples\n>>> solution(0)\n\
    []\n>>> solution(1)\n[0]\n>>> solution(2)\n[0, 1, 2]\n>>> solution(3)\n[0, 1,\
    \ 2]\n>>> solution(4)\n[0, 2, 4]\n>>> solution(5)\n[0, 2, 4]\n>>> solution(6)\n\
    [0, 2, 4, 6]\n>>> solution(7)\n[0, 2, 4, 6]\n>>> solution(8)\n[0, 2, 4, 6, 8]\n\
    >>> solution(9)\n[0, 2, 4, 6, 8, 9]\n>>> solution(10)\n[0, 2, 4, 6, 8, 9]\n>>>\
    \ solution(11)\n[0, 2, 4, 6, 8, 9]\n>>> solution(12)\n[0, 2, 4, 6, 8, 9]\n>>>\
    \ solution(13)\n[0, 2, 4, 6, 8, 9]\n>>> solution(14)\n[0, 2, 4, 6, 8, 9]\n>>>\
    \ solution(15)\n[0, 2, 4, 6, 8, 9]\n>>> solution(16)\n[0, 2, 4, 6, 8, 9]\n>>>\
    \ solution(17)\n[0, 2, 4, 6, 8, 9]\n>>> solution(18)\n[0, 2, 4, 6, 8, 9]\n>>>\
    \ solution(19)\n[0, 2, 4, 6, 8, 9]\n>>> solution(20)\n[0, 2, 4, 6, 8, 9]\n>>>\
    \ solution(21)\n[0, 2, 4, 6, 8, 9]\n>>> solution(22)\n[0, 2, 4, 6, 8, 9]\n>>>\
    \ solution(23)\n[0, 2, 4, 6, 8, 9]\n>>> solution(24)\n[0, 2, 4, 6, 8, 9]\n>>>\
    \ solution(25)\n[0, 2, 4, 6, 8, 9]\n>>> solution(26)\n[0, 2, 4, 6, 8, 9]\n>>>\
    \ solution(27)\n[0, 2, 4, 6, 8, 9]\n>>> solution(28)\n[0, 2, 4, 6, 8, 9]\n>>>\
    \ solution(29)\n[0, 2, 4, 6, 8, 9]\n>>> solution(30)\n[0, 2, 4, 6, 8, 9]\n>>>\
    \ solution(31)\n[0, 2, 4, 6, 8, 9]\n>>> solution(32)\n[0, 2, 4, 6, 8, 9]\n>>>\
    \ solution(33)\n[0, 2, 4, 6, 8, 9]\n>>> solution(34)\n[0, 2, 4, 6, 8, 9]\n>>>\
    \ solution(35)\n[0, 2, 4, 6, 8, 9]\n>>> solution(36)\n", "    return lst.filter(x\
    \ => x % 2 !== 0).reduce((a,b) => a + b)\n}\n</code>\n<|/ a tags=functional-programming,javascript,arrays\
    \ dscore=2 |>\n<| a tags=functional-programming,javascript,arrays dscore=1 |>\n\
    You can use this simple approach with filter method and Array.prototype.reduce\
    \ method.\n\n<code>\nvar arr = [5, 8, 7, 1];\n\nlet sumOfOddElements = arr.filter((num)\
    \ => {\n  return num % 2 !== 0;\n}).reduce((a, b) => a + b);\n", "  if(lst.length<2)\
    \ return 0;\n  let sum=0;\n  for(let i=0;i<lst.length-1;i++){\n    if(lst[i]%2==1)\
    \ sum+=lst[i+1];\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    `if(lst[i]%2==0) sum+=lst[i+1];` this line is useless\n<|/ c |>\n<| a |>\n<code>",
  "  var sum = 0;\n  for(var i=0;i<lst.length;i++){\n    if(lst[i]%2==0){\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\n", "    return lst.filter(function(element,\
    \ index, arr){\n        return index % 2 === 0;\n    }).reduce((a, b) => a + b,\
    \ 0);\n}", "  var sum = 0;\n  lst.forEach(function(value, index, arr){\n    if\
    \ (index % 2 == 1 && value % 2 != 0){\n      sum += value;\n    }\n  })\n  return\
    \ sum;\n}\n", "    let oddSum = 0\n    for (let i = 0; i < lst.length; i++){\n\
    \        if (lst[i] % 2 != 0){\n            oddSum += lst[i]\n        }\n    }\n\
    \    return oddSum\n}\n</code>\n<|/ a tags=arrays,javascript dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>", "    for( let i = 0; i < lst.length; i++ ){\n        if(\
    \ i % 2 !== 0 ){\n            if( lst[i] % 2 === 0 ){\n                return\
    \ lst[i] + lst[i+1];\n            }\n        }\n    }\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis solution worked for me, I tested on all possible inputs except\
    \ for [5, 8, 7, 1] which gives a wrong answer of `12`.\n<|/ c |>\n<| a tags=arrays,javascript,arraylist,array-formulas,algorithm\
    \ |>\nI used the filter function to remove the odd numbers from the list and then\
    \ summed them up with reduce.\nThis was the simplest solution to my opinion, I\
    \ hope it helps.\n\n<code>", "    var sum = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] % 2 === 1) sum += lst[i];\n    }\n    return sum;\n\
    }\n</cell>\n<cell>\ndef sum_even_items(lst):\n    sum = 0\n    for i in lst:\n\
    \        if (i % 2 == 1):\n            sum += i\n    return sum\n\nprint(sum_even_items([5,\
    \ 8, 7, 1]))\nprint(sum_even_items([3, 3, 3, 3, 3]))\nprint(sum_even_items([30,\
    \ 13, 24, 321]))\n</cell>\n<cell>\n# Write a Python program to convert a list\
    \ of words into lower case at word boundary or after a punctuation mark.\n# Example\n\
    # >>> to_lower_case([\"hey\", \"you\", \"!\"])\n# ['hey', 'you', '!']\n# >>> to_lower_case([\"\
    hey\", \"you\", \"!\", \".\"])\n# ['Hey', 'you', '!']\n# >>> to_lower_case([\"\
    hey\", \"you\", \"!\", \".\"], punctuation=\"!\")\n# ['Hey', 'you', '!']\n# >>>\
    \ to_lower_case([\"hey\", \"you\", \"!\", \".\"], case_sensitive=False)\n# ['hey',\
    \ 'you', '!']\n\ndef to_lower_case(lst, punctuation=\"\", case_sensitive=True):\n\
    \    lst = list(lst)\n    for i in lst:\n        if (case_sensitive):\n      \
    \      lst[i] = i.lower()\n        else:\n            lst[i] = i.lower()\n   \
    \     if (punctuation):\n            if (lst[i][0] == punctuation):\n        \
    \        lst[i] = lst[i][1:]\n    return lst\n\nprint(to_lower_case([\"hey\",\
    \ \"you\", \"!\"]))\nprint(to_lower_case([\"hey\", \"you\", \"!\", \".\"]))\n\
    print(to_lower_case([\"hey\", \"you\", \"!\", \".\"], punctuation=\"!\"))\nprint(to_lower_case([\"\
    hey\", \"you\", \"!\", \".\"], case_sensitive=False))\nprint(to_lower_case([\"\
    Hey\", \"you\", \"!\"], case_sensitive=False))\nprint(to_lower_case([\"hey\",\
    \ \"you\", \"!\", \".\"], case_sensitive=False))\nprint(to_lower_case([\"hey\"\
    , \"you\", \"!\"], punctuation=\".\"))\nprint(to_lower_case([\"hey\", \"you\"\
    , \"!\"], case_sensitive=False))\nprint(to_lower_case([\"hey\", \"you\", \"!\"\
    ], punctuation=\".\", case_sensitive=False))\nprint(to_lower_case([\"hey\", \"\
    you\", \"!\"], case_sensitive=True, punctuation=\".\"))\n</cell>\n<cell>\n# Write\
    \ a Python program to convert a list of words into upper case at word boundary\
    \ or after a punctuation mark.\n# Example\n# >>> to_upper_case([\"HEY\", \"YOU\"\
    , \"!\"])\n# ['HEY', 'YOU', '!']\n# >>> to_upper_case([\"HEY\", \"", "    let\
    \ oddsSum = 0;\n    for(let i=0; i<lst.length; i++){\n        if(lst[i]%2==1)\
    \ oddsSum+=lst[i];\n    }\n    return oddsSum;\n}\n</code>\n<|/ a dscore=0 tags=javascript\
    \ |>\n<| a tags=javascript dscore=0 |>\nYou can do this, too:\n<code>\nvar sumOdds\
    \ = function(list) {\n    var sum = 0;\n    var i = 0;\n    while (i < list.length)\
    \ {\n        if (list[i] % 2 != 0) {\n            sum += list[i];\n          \
    \  i += 1;\n        } else {\n            while (list[i] % 2 !== 0) {\n      \
    \          i += 1;\n            }\n            i += 1;\n        }\n    }\n   \
    \ return sum;\n};\n</code>\n<|/ a |>\n<| c |>\nI didn't even think of this, but\
    \ how come `[5, 8, 7, 1]` returns `12` instead of `12`? You do have a `i++` in\
    \ the wrong place.\n<|/ c |>\n<| a |>\n<code>\nconst sumOdds = (arr) => \n  arr.reduce((acc,\
    \ num) => \n    acc + (num % 2 === 1 ? num : 0), 0)\n    ", "    var evenSum =\
    \ 0;\n    lst.forEach(function(val, i){\n        if(i % 2 == 0 && val != lst[i\
    \ - 1])\n            evenSum += val;\n    });\n    return evenSum;\n}\n", "  \
    \  return lst.reduce((acc, val)=> val%2 === 1 ? acc : acc + val, 0)\n}\n\nmodule.exports\
    \ = {\n    solution\n}\n</code>\nThe code below is written specifically to answer\
    \ your question regarding O(n), but in terms of efficiency, the above solution\
    \ runs about 5 times faster than the solution above.\n<code>", "    var sum =\
    \ 0;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] % 2 === 0){\n  \
    \          sum += lst[i];\n        }\n    }\n    return sum;\n}\n</cell>\n<cell>\n\
    # Write a function to find a contiguous subarray of size k that when added together\
    \ equal the given number n.\n# If the k is too large or too small, return an empty\
    \ array.\n# Examples:\n# k = 3, n = 7\n# Return [3, 7]\n# k = 2, n = 9\n# Return\
    \ []\n# k = 3, n = 2\n# Return []\n# k = 0, n = 10\n# Return []\n# k = 0, n =\
    \ 0\n# Return []\n# k = 5, n = 5\n# Return [5, 5]\n# k = 100, n = 45\n# Return\
    \ []\n# k = 100, n = 50\n# Return [100]\n# k = 1, n = 100\n# Return []\n# k =\
    \ 1, n = 99\n# Return []\n# k = 1, n = 10\n# Return []\ndef contiguous_subarray(k,\
    \ n, lst):\n    if lst:\n        sum = 0\n        for i in range(len(lst) - k\
    \ + 1):\n            sum += lst[i]\n            if sum == n:\n               \
    \ return lst[i:i + k]\n        return []\n    else:\n        return []\n</cell>\n\
    <cell>\n# Given a list of numbers, find the maximum sum of any contiguous subarray\
    \ of size k.\n# Note: Your function should return a new list\n# Input: [10, 15,\
    \ 3, 8, 5, 2, 7, 6, 12, 2], k = 3\n# Output: [10,15] (13 > 15 > 10)\n# Input:\
    \ [1, 2, 3, -20, 5, 20, -15, 10, 4], k = 2\n# Output: [5, 20] (20 > 15)\n# Input:\
    \ [-20, -10, -5, -1, 0, 1, 5, 20, -15, 10, 4], k = 3\n# Output: [-20, -10, -5,\
    \ -1, 0, 1, 5, 20, -15] (20 > 15)\ndef max_contiguous_subarray(k, lst):\n    if\
    \ lst:\n        sum = 0\n        for i in range(len(lst) - k + 1):\n         \
    \   sum += lst[i]\n            if sum > k:\n                sum -= k\n       \
    \     elif sum < k:\n                sum += k\n        return [sum]\n    else:\n\
    \        return []\n</cell>\n<cell>\n# Given a list of numbers, find the sum of\
    \ the elements greater than x.\n# Note: Your function should return a new list.\n\
    # Input: [10, 15, 3, 8, 5, 2, 7, 6, 12, 2], x = 15\n# Output: [16] (15 > 10)\n\
    # Input: [1, 2, 3, -20, 5, 20, -15, 10, 4], x = 5\n# Output: [5] (5 > -20)\n#\
    \ Input: [-20, -", "\tvar result = 0;\n\tfor(var i=0;i<lst.length;i++){\n\t\t\
    if(lst[i]%2===0){\n\t\t\tresult +=lst[i];\n\t\t}\n\t}\n\treturn result;\n}", " \
    \   \n    if (lst.length <= 1) {\n        return 0;\n    }\n    \n    var evenSum\
    \ = 0;\n    var odd = 1;\n    \n    for (var i=0; i<lst.length; i++) {\n     \
    \   if (i%2===0) {\n            evenSum += lst[i];\n        } else {\n       \
    \     odd *= lst[i];\n        }\n    }\n    \n    return odd*evenSum;\n    \n\
    }\n", "  var sum = 0;\n  lst.forEach(function(el, index){\n    if(index % 2 ==\
    \ 1)\n      sum += el;\n  });\n  return sum;\n}\n", "    var sum = 0;\n    var\
    \ evenPos = 0;\n    var oddPos = 0;\n\n    for(var i = 0, len = lst.length; i\
    \ < len; i++){\n        if(lst[i] % 2 == 0){\n            evenPos++;\n       \
    \ } else {\n            oddPos++;\n        }\n    }\n\n    for(var i = 0; i <=\
    \ evenPos; i++){\n        sum += lst[i];\n    }\n\n    return sum;\n}\n</code>\n\
    <|/ a tags=javascript,arrays,algorithm |>\n<| a |>\nI think this might not be\
    \ the most efficient answer but I think it works.\n<code>\nvar sum = 0;\nvar count\
    \ = 0;\nfor(var i = 0; i < arr.length; i++)\n{\n    if(i%2 == 0)\n    {\n    \
    \    sum += arr[i];\n        count++;\n    }\n}\n</code>\n<|/ a tags=javascript,arrays,algorithm\
    \ dscore=1 |>\n<| a dscore=0 |>\n<code>\nvar array = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10];\n", "    return lst.filter(function(x){\n        return x % 2 === 1;\n\
    \    }).reduce(function(acc, x){\n        return acc + x;\n    }, 0);\n}\n", " \
    \   let sum = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i]\
    \ % 2 === 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }", "  let even = lst.filter(function(x, index, arr){\n    return index % 2 ===\
    \ 0\n  })\n  return even.reduce((acc, el) => acc + el, 0);\n}\n", "    if (lst.length===0){\n\
    \        return 0\n    }\n    \n    //Create an array with all the odd elements\n\
    \    let odds=lst.filter(function(x){return x%2==1})\n    //Get the first index\
    \ of any evens element in the odd array\n    let evens=lst.findIndex(y=>y%2==0)\n\
    \    \n    //If no evens element, return the sum of the rest of the array\n  \
    \  if (evens==-1){\n        return lst.reduce((acc, val) => {return acc+val})\n\
    \    }\n    \n    //Add the even element to the sum \n    return evens===0 ? sum(lst.slice(evens+1))\n\
    \                            : sum(lst.slice(evens,evens+1)) + odds[evens]\n}\n",
  "    let evenSum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let curr\
    \ = lst[i];\n        if(i % 2 === 1){\n            evenSum += curr;\n        }\n\
    \    }\n    return evenSum;\n}", "  let sum = 0;\n  for (let i=0; i<lst.length;\
    \ i++){\n    if (lst[i] % 2 === 1){\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}", "  return lst.filter(function(x, i, self){\n    return x%2 && !self.findIndex(function(y){\n\
    \      return y % 2 == 0 && y == x\n    })\n  }).reduce(function(acc, x){\n  \
    \  return acc + x\n  }, 0)\n}", "  return lst.filter(x => x%2 != 0).reduce((a,\
    \ b) => a + b, 0)\n}\n", "  return lst.filter(function(val){\n    return val %\
    \ 2 === 1;\n  }).reduce(function(acc, val){\n    return acc += val\n  }, 0)\n\
    }\n", "    return lst.filter(function(num){\n        return num % 2 != 0;\n  \
    \  }).reduce(function(a, b){\n        return a + b;\n    });\n}\n", "    var sum\
    \ = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 1){\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n</code>\n<|/\
    \ a tags=javascript |>\n<| a dscore=0 tags=javascript |>\nA simple way to solve\
    \ this problem using Array.prototype.slice(), Array.prototype.reduce() and Array.prototype.indexOf().\n\
    <code>", "  if(lst.length % 2 === 0){\n    let sum = 0;\n    for (let i = 0; i\
    \ < lst.length; i++){\n      if (i % 2 === 0){\n        sum += lst[i];\n     \
    \ }\n    }\n    return sum;\n  }\n  return -1;\n}\n\nmodule.exports = {\n  solution,\n\
    }\n\n},{}],3:[function(require,module,exports){\n'use strict'\n\nconst isEven\
    \ = (n) => {\n  return n % 2 === 0\n}\n\nconst test = (n) => {\n  const result\
    \ = isEven(n)\n  console.log(`n is even: ${result}`)\n}\n\ntest(2)\ntest(3)\n\
    test(5)\ntest(6)\ntest(7)\n\n},{}],4:[function(require,module,exports){\n'use\
    \ strict'\n\nconst { solution, getLength } = require('./input')\nconst { printSolution,\
    \ testPrintSolution } = require('./print')\n\nconst test = (n) => {\n  const solutionLength\
    \ = getLength(solution)\n  testPrintSolution(solution, solutionLength)\n  solution(solutionLength)\n\
    }\n\ntest(2)\ntest(3)\ntest(5)\ntest(6)\ntest(7)\ntest(8)\ntest(9)\ntest(10)\n\
    \n},{\"./input\":5,\"./print\":6}]},{},[3,4,5])\n;", "  return lst.filter(function(x){\
    \ return x%2 === 1}).reduce(function(a,b){\n    return a + b;\n  }, 0)\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nNice. Even though I prefer using native `filter` function\
    \ here. I don't like the `reduce` approach. `reduce` is for arrays, not for numbers.\
    \ `filter` is much more efficient. Ok, I got it now... `filter` does exactly what\
    \ I need! I'm just not good at thinking functional programming.\n<|/ c |>\n<|\
    \ c |>\n`reduce` is much better when you need to sum the values of two or more\
    \ arrays. And it does it without mutating any variables. It's really handy for\
    \ that kind of problem. That's why I used it here because I couldn't think of\
    \ any other way to add up only certain elements from two arrays.\n<|/ c |>\n<|\
    \ c |>\n\"reduce is for arrays, not for numbers\" --- this is actually wrong.\
    \ Reduce is for arrays, not for numbers. It works the same with numbers, strings\
    \ and other primitives. \"It's really handy for that kind of problem\" - well,\
    \ no, it isn't. Sure, it may work faster in some cases, but it also doesn't always\
    \ work and it's really not something that you should be doing when you're just\
    \ beginning with functional programming.\n<|/ c |>\n<| c |>\nAs for your \"much\
    \ better\" comment, it is not true. `reduce` works on arrays, too. It works exactly\
    \ the same with numbers, strings, other primitives as well.\n<|/ c |>\n<| c |>\n\
    `reduce` is indeed for arrays, but it does it in a more declarative way. It also\
    \ works exactly the same with numbers, strings, other primitives as well, just\
    \ not as efficiently as `filter`.\n<|/ c |>\n<| a |>\nUsing filter\n<code>", "\t\
    return lst.filter(function(num){\n\t\treturn num%2 === 1;\n\t}).reduce((prev,cur)=>prev+cur,0);\n\
    }\n", "  if (lst.length == 0) return 0;\n  let result = lst.reduce((a,b)=>a+b%2,0);\n\
    \  for (let i = 2; i < lst.length; i++){\n    if(lst[i] % 2 != 0) {\n      result\
    \ += lst[i];\n    }\n  }\n  return result;\n}\n", "    return lst.reduce(function(total,\
    \ current){\n        return total += ((current % 2 == 0) ? current : 0);\n   \
    \ }, 0)\n}\n</code>\n<|/ a dscore=1 tags=algorithm,arrays,javascript |>\n<| a\
    \ dscore=0 |>\nThe other solutions don't account for the cases where there are\
    \ more than two even elements. This is quite easy to solve by adding a test to\
    \ the reduce function. See the following code:\n<code>", "  return lst.filter((item,\
    \ index) => index % 2 === 1).reduce((acc, val) => acc + val, 0);\n}\n", "  var\
    \ evenSum = 0;\n  for(var i=0; i<lst.length; i++){\n    if(lst[i]%2==0){\n   \
    \   evenSum+=lst[i];\n    }\n  }\n  return evenSum;\n}", "    if(lst.indexOf(0)\
    \ === -1){\n        return 0;\n    }\n    return lst.reduce((acc, val) => {\n\
    \        if(val % 2 === 0){\n            return acc + val\n        }\n       \
    \ return acc;\n    });\n}\n", "  return lst.filter(function(val){\n    return\
    \ val%2 === 0;\n  }).reduce(function(prev, next, i){\n    return (prev+next)%10;\n\
    \  }, 0);\n}\n</code>\n<|/ a tags=arrays,javascript |>\n<| c |>\nYou don't need\
    \ to go through the array twice. Just find the odd numbers and sum them. Also,\
    \ you don't need `parseInt`.\n<|/ c |>\n<| c |>\nYou don't need to go through\
    \ the array twice. Just find the odd numbers and sum them. Also, you don't need\
    \ `parseInt`.\n<|/ c |>\n<| c |>\nThanks for the corrections! It's much appreciated.\n\
    <|/ c |>\n<| a dscore=1 tags=arrays,javascript |>\nHere's a solution that I tested\
    \ with a smaller list and it passed.\n<code>", "\t\n\tvar evenSum = 0;\n\t\n\t\
    for(var i =0; i<lst.length; i++){\n\t\tif(lst[i] % 2 === 0){\n\t\t\tevenSum+=\
    \ lst[i]\n\t\t}\n\t}\n\treturn evenSum;\n}\n\n", "  return lst.filter(function(val,\
    \ ind){\n    return (ind % 2 == 0) ? val : 0;\n  }).reduce((a,b)=>a+b);\n}\n",
  "    var evenSum = 0;\n    var oddSum = 0;\n    for (var i = 0; i< lst.length; i++){\n\
    \        if(lst[i] % 2 != 0){\n            evenSum += lst[i];\n        }\n   \
    \     else{\n            oddSum += lst[i];\n        }\n    }\n    return evenSum\
    \ + oddSum;\n}\n</cell>\n<cell>", "  let sum = 0\n  for(let i = 0; i < lst.length;\
    \ i++){\n    if(lst[i] % 2 === 0){\n      sum += lst[i]\n    }\n  }\n  return\
    \ sum\n}\n", "    let total = 0;\n    for (let i = 0; i < lst.length; i++){\n\
    \        if (lst[i] % 2 === 0){\n            total += lst[i];\n        }\n   \
    \ }\n    return total;\n}\n", "    var sum = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if((i & 1) == 1){\n            sum += lst[i];\n        }\n  \
    \  }\n    return sum;\n}\n</code>\n<|/ a tags=arrays,javascript |>\n<| c |>\n\
    A simple and concise solution. This should be the selected answer\n<|/ c |>\n\
    <| a |>\nYou can do something like this:\n<code>\nvar array = [1, 2, 3, 4, 5];\n\
    var sum = 0;\n\nfor (var i = 0; i < array.length; i++) {\n    if(i % 2 == 1)\n\
    \        sum += array[i];\n}\n", "  return lst.filter((_, i) => i % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n", "  var sum=0;\n  for(var i=0; i<lst.length; i++){\n\
    \    if(lst[i]%2==0){\n      sum+=lst[i];\n    }\n  }\n  return sum;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=arrays,loops,javascript,for-loop |>\n<code>\nvar\
    \ arr = [5,8,7,1]\n\nvar result = []\n\nfor(var i in arr){ \n  if(arr[i]%2 ==1){\n\
    \     result.push(arr[i])\n  }\n}\nalert(result)</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nPlease don't post only code as an answer, but also include an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes\n<|/ c |>\n<| a dscore=0 |>\n<code>\nvar sum=0;\n\
    for(var i=0;i<arr.length;i++)\n{\nif(arr[i]%2 ==0)\n{\n sum+=arr[i];\n}\n}\nalert(sum);\n\
    </code>\n<|/ a tags=arrays,loops,javascript,for-loop |>\n<| a tags=arrays,loops,javascript,for-loop\
    \ |>\nTry this code:\n<code>\nvar arr = [5, 8, 7, 1];\n\nvar sum=0;\nfor(var i\
    \ = 0; i < arr.length; i++) {\n    if(arr[i] % 2 === 0){\n        sum+=arr[i];\n\
    \    }\n}\n", "    \n    console.log(lst);\n    const oddEvenMap = new Map();\n\
    \    \n    for(let i = 0; i < lst.length; i++){\n        oddEvenMap.set(lst[i],\
    \ i);\n    }\n    \n    let evenSum = 0;\n    \n    for(let i = 0; i < lst.length;\
    \ i++){\n        const idx = oddEvenMap.get(lst[i]);\n        if(idx === undefined){\n\
    \            continue;\n        }\n        const idx = lst[idx];\n        if(idx\
    \ % 2 === 1){\n            evenSum += idx;\n            oddEvenMap.set(lst[i],\
    \ undefined);\n        }\n    }\n    return evenSum;\n}\n", "    let odd_sum=0;\n\
    \    for(let i=0;i<lst.length;i++)\n    {\n        if(lst[i]%2==0)\n        {\n\
    \            odd_sum+=lst[i];\n        }\n    }\n    return odd_sum;\n}\n</code>\n\
    <|/ a |>\n<| a |>\nThis is for anyone who is wondering how this would work. \n\
    <code>", "    return lst.filter((x,index)=>index % 2 === 1).reduce((a,b)=>a+b);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI added a solution with an explanation\n\
    <|/ c |>\n<| c |>\nThe only thing I would add is a return statement in the .filter\
    \ function as you don't want to return undefined.\n<|/ c |>\n<| c |>\nGood point,\
    \ I thought that but wanted to leave the original code as close as possible to\
    \ the OP\n<|/ c |>\n<| a |>\n<code>\nvar a=[5, 8, 7, 1];", "  if(lst.length==0)\n\
    \    return 0;\n\n  let evenSum=0;\n  for(let i=0;i<lst.length;i++){\n    evenSum+=lst[i];\n\
    \    if(lst[i]%2==0){\n      evenSum+=lst[i];\n    }\n  }\n  return evenSum;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=javascript |>\nA simple and\
    \ efficient solution (O(n)), which considers the time complexity as O(n), is to\
    \ count the occurrence of odd numbers then do modulo 2\n<code>", "    return lst.filter(function(v){\n\
    \        return ((v%2)!==0)\n    }).reduce(function(acc,v){\n        return acc\
    \ + v\n    },0)\n}\n", "  var sum = 0;\n  for(var i=0;i<lst.length;i++){\n   \
    \ if(lst[i]%2==1) sum += lst[i];\n  }\n  return sum;\n}\n</code>\n<|/ a tags=javascript,node.js\
    \ dscore=2 |>\n<| a dscore=2 |>\nIn case anyone is looking for a solution in typescript:\n\
    <code>\nlet list: number[] = [5, 8, 7, 1];\nlet evenSum = (lst: number[]): number\
    \ => {\n  let evenSum: number = 0;\n  for (let item of lst) {\n    if (item %\
    \ 2 === 1) {\n      evenSum += item;\n    }\n  }\n  return evenSum;\n};\n</code>\n\
    <|/ a tags=javascript,node.js |>\n<| a dscore=2 |>\nHere's a solution using reduce:\n\
    <code>\nlet arr = [5,8,7,1];\n\nlet sum = (arr) => arr.reduce((prev, curr) =>\
    \ {\n  if (prev + prev % 2 === curr + curr % 2) {\n    prev += curr;\n  }\n  return\
    \ prev;\n}, 0);\n</code>\n<|/ a tags=javascript,node.js |>\n<| a dscore=2 tags=javascript,node.js\
    \ |>\nSolution using reduce:\n<code>\nlet arr = [5,8,7,1];\n\nlet sum = (arr)\
    \ => arr.reduce((prev, curr) => {\n  if (prev + prev % 2 === curr + curr % 2)\
    \ {\n    prev += curr;\n  }\n  return prev;\n}, 0);\n</code>\n<|/ a |>\n<| a dscore=2\
    \ tags=javascript,node.js |>\n<code>\nlet evenSum = (array) => {\n  let sum =\
    \ 0;\n\n  for (let i = 0; i < array.length; i += 2) {\n    sum += array[i];\n\
    \  }\n\n  return sum;\n}\n</code>\n<|/ a |>\n<| a dscore=2 |>\nI came up with\
    \ this solution.\n\n<code>\nlet evenSum = (array) => {\n  let sum = 0;\n  array.forEach((element)\
    \ => {\n    if (element % 2 === 0) {\n      sum += element;\n    }\n  });\n  return\
    \ sum;\n};\n", "    return lst.reduce((accu, curr)=>{\n        return accu + curr\
    \ % 2 === 0 ? accu : 0;\n    }, 0);\n}\n\nvar solution2 = //Given a non-empty\
    \ array of integers, return an array of all \"distinct\" integers in the array.",
  "    var sum = 0;\n    for (var i = 0; i < lst.length; i++){\n        if (i % 2\
    \ !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\
    </code>\n<|/ a tags=arrays,javascript |>\n<| c |>\nThat will add up the odd numbers\
    \ in the array. OP wants to add up the odd numbers that are in even positions.\n\
    <|/ c |>\n<| c |>\nyes, this is what I said in my answer.\n<|/ c |>\n<| c |>\n\
    You're wrong, OP wants to add up all of the odd numbers *that are in even positions*\
    \ of the array.\n<|/ c |>\n<| c |>\nThe OP asks for \"odd\" numbers in even positions.\
    \ This is what my answer does.\n<|/ c |>\n<| c |>\nNo no, the OP asks for an odd\
    \ number in even positions, in your solution you check if it's odd, and add it\
    \ to an even position sum which is not what OP asked for.\n<|/ c |>\n<| a dscore=2\
    \ |>\nUse this simple code:\n<code>\nvar odd_in_even_positions = function(arr){\n\
    \  var sum = 0;\n  for (var i = 0; i < arr.length; i++){\n    if(i % 2 === 0){\n\
    \      sum += arr[i];\n    }\n  }\n  return sum;\n}\n</code>\nI hope it helps!\n\
    <|/ a tags=arrays,javascript |>\n<| c |>\nThe OP asks for \"odd\" numbers in even\
    \ positions. This is what my answer does.\n<|/ c |>\n<| c |>\nI didn't see it\
    \ that way. Thank you for correcting me. I added a comment to the OP's answer.\n\
    <|/ c |>\n<| a dscore=2 tags=arrays,javascript |>\nYou can use reduce for this.\n\
    \n<code>\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst sumOfOdds = arr.reduce((acc,\
    \ val) => val % 2 === 1 ? acc + val : acc, 0);\n", "  return lst.filter((num,i)\
    \ => num%2 === 1 ? lst.indexOf(i)+1 : -1).reduce((a,b) => a+b)\n}\n", "    var\
    \ odd_sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] %\
    \ 2 === 0){\n            odd_sum += lst[i];\n        }\n    }\n    return odd_sum;\n\
    }\n", "  return lst.filter(function(e,i){ return i%2 }).reduce(function(acc, val){\
    \ return acc + val }, 0)\n}\n", "    console.log(lst);\n    return lst.filter((item)=>{\n\
    \        return item%2 !== 0;\n    }).reduce((a,b)=>{\n        return a+b;\n \
    \   },0);\n}\n", "    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n", "    var sum = 0;\n    var len = lst.length;\n    for(var\
    \ i = 0; i<len; i++){\n        var num = lst[i];\n        if(num%2 === 0 && i\
    \ !== len-1){\n            sum += num;\n        }\n    }\n    return sum;\n}\n",
  "  if (lst.length < 1) {\n    return 0;\n  }\n  let evenSum = 0;\n  for (let i =\
    \ 0; i < lst.length; i++){\n    if (i % 2 == 1) {\n      evenSum += lst[i];\n\
    \    }\n  }\n  return evenSum;\n}\n", "\tvar evenSum = 0;\n\tfor(var i=0; i<lst.length;\
    \ i++){\n\t\tif(lst[i] % 2 === 0){\n\t\t\tevenSum += lst[i];\n\t\t}\n\t}\n\treturn\
    \ evenSum;\n}\n", "  return lst.filter(function(el, i){\n    return i % 2 !==\
    \ 0\n  }).reduce(function(acc, el){\n    return acc + el\n  }, 0)\n}", "    return\
    \ lst.filter(function(el){\n        return el%2 === 1;\n    }).reduce(function(a,\
    \ b){\n        return a + b;\n    }, 0)\n}", "\treturn lst.filter(function(el,i){\n\
    \t\treturn ((i % 2)===0)?el:false;\n\t}).reduce(function(prev,cur,i){\n\t\treturn\
    \ (prev+(cur+(i+1))%2);\n\t},0);\n}\n", "  var oddSum = 0;\n  lst.forEach((item,\
    \ index, array) => {\n    if (index % 2 !== 0) {\n      oddSum += item;\n    }\n\
    \  })\n  return oddSum;\n}\n", "    for(var i=0; i< lst.length; i++){\n      \
    \  if(lst[i] % 2 === 0 && lst[i+1] % 2 === 1){\n            return lst[i] + lst[i+1]\n\
    \        }\n    }\n}\n", "    let sum = lst.reduce((a,b)=>a+b,0);\n    for(let\
    \ i=0;i<lst.length;i++){\n        if (lst[i]%2 ==0 && lst[i+1]%2 == 0){\n    \
    \        sum += lst[i];\n        }\n    }\n    return sum;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nWhile this may answer the question, it is better to explain\
    \ the code you have written\n<|/ c |>\n<| c |>\ni thought it would help to explain\
    \ what i did. i appreciate the feedback!\n<|/ c |>\n<| c |>\nI believe the idea\
    \ of using the reduce method is to get the sum of all the odd numbers. But this\
    \ approach does not use it.\n<|/ c |>\n<| a dscore=0 |>\nHere is another solution\
    \ that uses only array methods that will work for any input array size, not just\
    \ the size of 3.\n<code>\nvar evenSum = arr => {\n    const sum = arr.reduce((acc,\
    \ curr) => {\n        if (curr % 2 === 0) {\n            acc += curr\n       \
    \ }\n        return acc\n    }, 0);\n\n    return sum % 2 === 0 ? sum : 0\n}\n\
    </code>\n<|/ a tags=sum,sum-of-digits,arrays,javascript |>\n<| c |>\nYou might\
    \ want to explain the use of `%`.\n<|/ c |>\n<| c |>\nI explained in the comment\
    \ above that `%` is the modulo operator in JavaScript. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder\n\
    <|/ c |>\n<| c |>\nWhat is `%` used for in the above code?\n<|/ c |>\n<| c |>\n\
    % is the modulo operator. In our case it calculates the remainder of the division\
    \ of the number on the left by the number on the right. So, if arr = [1,3,5] (a\
    \ non zero array), the answer would be 3 because of the `5` in `3%2`, so the sum\
    \ would be 1+3+5 = 3.\n<|/ c |>\n<| a tags=sum,sum-of-digits,arrays,javascript\
    \ |>\n<code>", "    var sum = 0;\n    for (var i = 0; i < lst.length; i++){\n\
    \        if (lst[i] % 2 != 0 && lst[i] % 2 == lst[lst.length-1]){\n          \
    \  sum += lst[i];\n        }\n    }\n    return sum;\n}", "    let evenSum = 0;\n\
    \    for (let index = 0; index < lst.length; index++) {\n        if (index % 2\
    \ === 0) {\n            evenSum = evenSum + lst[index];\n        }\n    }\n  \
    \  return evenSum;\n}\n", "   let evenSum = evenSumLst(lst);\n   if(evenSum ===\
    \ undefined){\n     return undefined;\n   }\n   return evenSum;\n}\n", "  let\
    \ sum = 0\n  lst.forEach(num => {\n    if(num%2==1){\n      sum+=num\n    }\n\
    \  })\n  return sum\n}\n", "    var sum = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n</code>\nThe first for loop loops through the array.\
    \ Every element in the array is checked against the if statement. If the element\
    \ is even, it gets added to the sum variable in the second for loop. Once the\
    \ entire array has been looped through, that sum variable will be returned. The\
    \ second for loop loops through the array again, and checks if the element in\
    \ the array is even or not. If the element is even, it gets added to the sum variable.\
    \ If it is odd, the sum variable is decremented. The final return statement sums\
    \ the entire array's elements that were even (i.e. odd) elements.\n<|/ a dscore=0\
    \ tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\nUse filter method\
    \ of array\n<code>\n function oddSum(arr) {\n   let evenSum = arr\n    .filter((element)\
    \ => element % 2 === 0)\n    .reduce((acc, cur) => acc += cur, 0);\n   let oddSum\
    \ = arr\n    .filter((element) => element % 2 !== 0)\n    .reduce((acc, cur) =>\
    \ acc += cur, 0);\n   console.log(evenSum);\n   console.log(oddSum);\n }\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\nThis answer is for those who are new to javascript\
    \ and want to understand the concepts rather than just using someone else's answer.\n\
    One thing to note is that javascript arrays are zero-based so the first element\
    \ of an array is at position 0. \nIn your example if you pass an array containing\
    \ [5, 8, 7, 1] to the function then the array will first be [5, 8, 7, 1] so if\
    \ you were to log the array you would get [5, 8, 7, 1]. \nNext, the array is then\
    \ passed to a method called filter. The filter method takes a function as a parameter.\
    \ Filter takes the array and loops through each of the elements. \nEach time the\
    \ element passes the function it gets added to the result. \nTo break this down:\n\
    <code>", "  let sum = 0;\n  for(let i of lst){\n    if(i%2 === 1){\n      sum\
    \ += i;\n    }\n  }\n  return sum;\n}\n", "    return lst.reduce((x,y) => x+(y%2==0?y:0),\
    \ 0);\n}\n</code>\n<|/ a dscore=0 tags=javascript |>\n<| a |>\n<code>", "  var\
    \ total = 0;\n  var evenArray = [];\n  for(var i in lst){\n    if(lst[i] % 2 !=\
    \ 0){\n      evenArray.push(lst[i]);\n    }\n  }\n  for(var i in evenArray){\n\
    \    total += evenArray[i];\n  }\n  return total;\n}\n</code>\n<|/ a dscore=1\
    \ tags=arrays,javascript |>\n<| a |>\n<code>", "  let res = 0\n\n  lst.map((v,i)=>{\n\
    \    res+=(i%2===0)? v : 0\n  })\n  return res\n}\n", "  let sum = 0;\n  for(let\
    \ i = 0;i<lst.length;i++){\n    if(lst[i]%2 == 1)\n      sum += lst[i];\n  }\n\
    \  return sum;\n}\n</code>\n<|/ a tags=javascript,arrays,algorithm,math dscore=0\
    \ |>\n<| c |>\nWelcome to Stack Overflow! Please don't answer just with source\
    \ code. Try to provide a nice description about how your solution works. See:\
    \ [How do I write a good answer?](https://stackoverflow.com/help/how-to-answer).\
    \ Thanks\n<|/ c |>\n<| c |>\nWhile this link may answer the question, it is better\
    \ to include the essential parts of the answer here and provide the link for reference.\
    \ Link-only answers can become invalid if the linked page changes.\n<|/ c |>\n\
    <| c |>\nI edited my answer, but I'm still not sure that it's \"link only\" enough.\n\
    <|/ c |>\n<| c |>\nthank you for the feedback, I've tried to edit my answer to\
    \ make it more detailed but I'm not sure if that's good enough, let me know what\
    \ you think about it.\n<|/ c |>\n<| a dscore=0 tags=javascript,arrays,algorithm,math\
    \ |>\n<code>\nconst solution = (arr) => {\n  let odd = arr.reduce((acc, e) =>\
    \ {\n    if (e % 2 === 1) acc += e\n    return acc\n  }, 0)\n  let even = arr.reduce((acc,\
    \ e) => {\n    if (e % 2 !== 1) acc += e\n    return acc\n  }, 0)\n  return odd\
    \ + (even - odd)\n}\n", "  var odds = 0;\n  for (var i = 0; i < lst.length; i++){\n\
    \    if (lst[i] % 2 == 0){\n      odds += lst[i];\n    } else {\n      odds +=\
    \ (lst[i] - 1)/2;\n    }\n  }\n  return odds;\n}\n", "  lst.sort((a,b)=>b-a)\n\
    \  let sum = 0;\n  for(let i=0;i<lst.length;i++){\n    if(lst[i]%2==0){\n    \
    \  sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if(lst.length <= 0) return\
    \ 0;\n  if(lst.length % 2 === 0) return lst.reduce((a,b) => a + b, 0);\n  return\
    \ lst.reduce((a,b) => a + b[lst.length-1]);\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThank you for this code snippet, which may provide some immediate help.\
    \  A proper explanation [would greatly improve](//meta.stackexchange.com/q/114762)\
    \ its educational value by showing *why* this is a good solution to the problem,\
    \ and would make it more useful to future readers with similar, but not identical,\
    \ questions.  Please [edit] your answer to add explanation, and give an indication\
    \ of what limitations and assumptions apply.\n<|/ c |>\n<| a dscore=0 |>\nTry\
    \ This solution\n<code>", "    if (lst.length === 0) return 0;\n    return lst.filter(\
    \ x => x % 2 === 0 ).reduce((acc, x) => acc + x, 0);\n}\n", "    return lst.filter((a,i)\
    \ => i % 2 == 0).reduce((a,b) => a + b);\n}\n", "    let even = 0\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(i % 2 === 0){\n            even +=\
    \ lst[i]\n        }\n    }\n    return even\n}\n</cell>\n<text>\nQuestion: Which\
    \ of the following is true about the code you submitted for the question above?\n\
    \nThe sum of all of the odd elements in the input list is an even number?\nThe\
    \ sum of all of the odd elements in the input list is a decimal number?\nThe sum\
    \ of all of the odd elements in the input list is a string?\nThe sum of all of\
    \ the odd elements in the input list is an integer?\nThe sum of all of the odd\
    \ elements in the input list is a number?\n\nIf you selected the third option,\
    \ that means you'll need to convert your answers to an integer.\n\n\n</text>\n\
    <cell>", "\tlet sum = 0;\n\tfor(let i = 0; i < lst.length; i++){\n\t\tif(i % 2\
    \ === 0){\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\n", "  var sum =\
    \ 0,\n      oddElementsAtEvenPositions = [];\n  for(var i = 0; i< lst.length;i++){\n\
    \    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n    else{\n      oddElementsAtEvenPositions.push(lst[i]);\n\
    \    }\n  }\n  return sum + oddElementsAtEvenPositions.length;\n}\n", "  let odd\
    \ = lst.filter(v=> v%2)\n  let even = lst.filter(v=> v%2)\n  return odd.reduce(\
    \ (p,c) => p + c, 0)\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI think you mean\
    \ `lst` should be `array`.\n<|/ c |>\n<| c |>\nThanks for the hint. I updated\
    \ the answer.\n<|/ c |>\n<| a |>\nYou can do it by using the reduce method on\
    \ the array.\n\n<code>\nconst data = [1, 3, 10, 15, 20]\n\nconst result = data.reduce((result,\
    \ value, index) => {\n  if (index%2 === 0) {\n    return result + value\n  } else\
    \ {\n    return 0\n  }\n}, 0)\n", "    // write your code in JavaScript (Node.js\
    \ 8.9.4)\n    var sum = 0;\n    for(var i = lst.length-1; i>=0; i--){\n      \
    \  if(lst[i]%2 ==0 && lst[i+1]%2==0){\n            sum = sum + lst[i];\n     \
    \   }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,algorithm\
    \ |>\nThis question can be solved in O(N) time using hash-tables \n<code>\nint\
    \ oddSum(vector<int> arr) {\n    // hash table\n    map<int, int> m; \n    for(int\
    \ i=0; i<arr.size(); i++) {\n        m[arr[i]]++;\n    }\n\n    // result\n  \
    \  int sum = 0;\n    for(int i=0; i<arr.size(); i++) {\n        if(m[arr[i]] %\
    \ 2 != 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=arrays,algorithm |>\n<code>\ndef odd_sum(nums):\n\
    \    odd = [0 for _ in range(len(nums))]\n    for i,x in enumerate(nums):\n  \
    \      if x % 2 != 0:\n            odd[i] = 1\n    total = 0\n    totals = [0\
    \ for _ in range(len(nums))]\n    for i,x in enumerate(nums):\n        if x %\
    \ 2 != 0:\n            total += x\n            totals[i] = total\n    return total\n\
    \nprint(odd_sum([1,4,4,5,6,2,8,2,9]))\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    def odd_sum(nums):\n    total = 0\n    for i,num in enumerate(nums):\n       \
    \ if num % 2 != 0:\n            total += num\n    return total\n</code>\n<|/ a\
    \ dscore=0 tags=arrays,algorithm |>\n<| c |>\nWhile this code may provide a solution\
    \ to the question, it's better to add context as to why/how it works. This can\
    \ help future users learn, and apply that knowledge to their own code. You are\
    \ also likely to have positive feedback from users in the form of upvotes, when\
    \ the code is explained.\n<|/ c |>\n<| c |>\nThanks for your advice, I am new\
    \ in Stackoverflow, next time I will use your advice.\n<|/ c |>\n<| c |>\nThat's\
    \ good. You're new here, so welcome to StackOverflow and enjoy learning :) It's\
    \ pretty much a \"best of breed\" question, so you should be able to get quick\
    \ answers here.\n<|/ c |>\n<| a tags=arrays,algorithm |>\n<code>", "  if(lst.length\
    \ <= 0){\n    return 0;\n  }\n  var i = 0;\n  var sum = 0;\n  while(i < lst.length){\n\
    \    var even_pos = lst[i] % 2 === 0;\n    if(even_pos){\n      sum += lst[i];\n\
    \    }\n    i++;\n  }\n  return sum;\n}\n</code>\n<|/ a tags=javascript,arrays\
    \ dscore=0 |>\n<| c |>\nWhat happens if the array is empty?\n<|/ c |>\n<| c |>\n\
    Empty array returns 0\n<|/ c |>\n<| c |>\nYour solution doesn't work for an empty\
    \ array. It returns `0`.\n<|/ c |>\n<| c |>\nI assumed it was empty because it\
    \ wasn't specified in the OP's question, but I added a more generic solution.\n\
    <|/ c |>\n<| c |>\nYour solution doesn't work for an array with an empty first\
    \ element. You would need two loops to make it work.\n<|/ c |>\n<| a dscore=0\
    \ |>\nYou might take a look at this one:\n\n<code>", "    \n    let sum = 0;\n\
    \    let evenCount = 0;\n    \n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] % 2 === 0){\n            sum += lst[i];\n            evenCount++;\n\
    \        }\n    }\n    \n    return sum - evenCount;\n}\n\nsolution([5, 8, 7,\
    \ 1]);\n</cell>\n<text>\n8. Create a function that accepts a string and returns\
    \ the number of occurences of that character in that string.\n\nExamples\n\n</text>\n\
    <cell>", "  let sum = 0;\n  for(let i=0;i<lst.length;i++){\n    if(lst[i]%2 ===\
    \ 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "    let oddSum\
    \ = 0;\n    for(let i of lst){\n        if(i%2 === 0){\n            oddSum +=\
    \ i;\n        }\n    }\n    return oddSum;\n}\n</code>\n<|/ a tags=javascript\
    \ |>\n<| a tags=javascript dscore=1 |>\nTry this,\n<code>\nvar sumOdd = function(arr)\
    \ {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\nThis problem can be solved by using two for loop.\
    \ One for iterating over the array and another for iterating over the odd indexed\
    \ array (arr[i]%2==0)\n<code>\nvar sumOdd = function(arr) {\n  result = 0;\n \
    \ for(var i=0;i<arr.length;i++) {\n    for(var j=i;j<arr.length;j++) {\n     \
    \ if(arr[j] % 2 === 0) {\n        result += arr[j];\n        break;\n      }\n\
    \    }\n  }\n  return result;\n};\n</code>\n<|/ a tags=javascript |>\n<| a dscore=0\
    \ |>\nHere's an example of how you can do it using ES6:\n<code>\nvar sumOdd =\
    \ arr => {\n    let sum = 0;\n    arr.forEach((num, i) => {\n        if (i % 2\
    \ === 1) sum += num;\n    });\n    return sum;\n};\n", "  if(lst.length === 0){\n\
    \    return 0;\n  }\n  \n  let result = 0, i = 0;\n  for(let value of lst){\n\
    \    if(value % 2 === 1){\n      result += value;\n    }else{\n      i++;\n  \
    \  }\n  }\n  return result;\n}\n", "   var sum = 0;\n   for(var i=0;i<lst.length;i++){\n\
    \      if(lst[i]%2 == 0){\n         sum += lst[i];\n      }\n   }\n   return sum;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks for this answer, I had seen it and was looking\
    \ for some help with my own solution. My solution was different than this and\
    \ was way more complicated. Cheers!\n<|/ c |>\n<| a dscore=0 |>\nUsing Javascript,\
    \ here is the easiest way:\n<code>\nlet sum = 0;\nfor (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] % 2 !== 0) {\n        sum += numbers[i];\n    }\n\
    }\n</code>\n<|/ a tags=javascript |>\n<| a tags=javascript |>\nUsing vanilla JavaScript:\n\
    <code>\nconst numbers = [5, 8, 7, 1, 3, 3, 3, 3, 3];\n\nconst sumOfOddNumbersThatAreInEvenPositions\
    \ = numbers.reduce((sum, number) => {\n  if (number % 2 === 0) {\n    sum += number;\n\
    \  }\n  return sum;\n}, 0);\n", "    return lst.reduce((prev, curr)=>prev+((curr%2!==0)?curr:0)+(prev%2!==0)?prev:0,0)\n\
    }\n\nconst arr = [5, 8, 7, 1]", "  return lst.filter( el => el%2==0 ).reduce((acc,\
    \ el) => {\n    return acc+el;\n  }, 0);\n}\n", "  var sum = 0;\n  for(var i =\
    \ 0; i < lst.length; i++){\n    if(i%2===0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n</code>\n<|/ a tags=javascript |>\n<| a tags=javascript |>\n\
    Using Array.prototype.reduce:\n\n<code>\nconst sumOddEven = arr => arr.reduce((r,\
    \ c) => r + c % 2 ? r + c : r, 0);\n\nconst test = [5, 8, 7, 1];", "  return lst.reduce((a,b)=>a+b%2===0?b:0,\
    \ 0);\n}\n", "  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i]%2==0){\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  return lst.filter(function(x,\
    \ i){\n    return i % 2 === 0;\n  }).reduce(function(s, num){\n    return s +\
    \ num;\n  }, 0)\n}\n", "\tlet res = 0;\n\tfor (let i = 0; i < lst.length; i +=\
    \ 2) {\n\t\tres += lst[i];\n\t}\n\treturn res;\n}\n", "    if(!lst.length) return\
    \ 0;\n    let result = arrSum(lst,1);\n    console.log(lst,result);\n    return\
    \ result;\n}\n", "  if(lst.includes(NaN)) return NaN;\n  let sum = 0;\n  for(let\
    \ i=0; i<lst.length; i++){\n    if(lst[i]%2 !== 0){\n      sum += lst[i];\n  \
    \  }\n  }\n  return sum;\n}\n</cell>\n<cell>", "    let sum = 0;\n    for(let\
    \ i=0; i<lst.length-1; i++){\n        if(lst[i]%2 === 0 && lst[i+1]%2 === 1){\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0){\n            return\
    \ lst[i];\n        }\n    }\n}\n", "  let evenSum = 0;\n  let oddSum = 0;\n  for\
    \ (let i = 0; i <lst.length; i++){\n    if (lst[i] % 2 !== 0){\n      evenSum\
    \ += lst[i];\n    }else {\n      oddSum += lst[i];\n    }\n  }\n  return evenSum\
    \ + oddSum;\n}\n<|/ file source=gitlab |>\n<| c |>\nOkay, I get it now! Thank\
    \ you so much for clarifying. I was so confused because I thought I was checking\
    \ for odd elements when there was no condition to check odd and even elements\
    \ at once. Very clever way of doing it! Thank you!\n<|/ c |>\n<| c |>\nNo problem!\
    \ Also, I'm glad you found my answer helpful. :) You can still mark it as the\
    \ accepted answer by clicking the check mark.\n<|/ c |>\n<| c |>\nAh yeah I didn't\
    \ know that! Sorry! And thank you again!\n<|/ c |>\n<| a tags=sum,arrays,javascript\
    \ |>\n<code>\nvar sum = function(arr){\n  var odd = [];\n  var even = [];\n\n\
    \  for (var i = 0; i < arr.length; i++){\n    if (arr[i] % 2 === 0){\n      even.push(arr[i]);\n\
    \    } else {\n      odd.push(arr[i]);\n    }\n  }\n  return even.filter(x =>\
    \ x).reduce((acc, cur) => acc + cur);\n}\n", "  var evenSum = 0;\n  var oddSum\
    \ = 0;\n  var evenCount = 0, oddCount = 1;\n  for (var i = 0; i < lst.length;\
    \ i++){\n    if (lst[i] % 2 === 0){\n      evenSum += lst[i];\n      evenCount++;\n\
    \    }\n    else{\n      oddSum += lst[i];\n      oddCount++;\n    }\n  }\n  return\
    \ evenSum + oddSum + (evenCount - oddCount);\n}\n", "    let sum = 0;\n    for\
    \ (let i = 0; i < lst.length; i++){\n        if (lst[i] % 2 === 0 && lst[i - 1]\
    \ !== lst[i]){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "    for(let i=0;i<lst.length;i++){\n        for(let j=i+1;j<lst.length;j++){\n\
    \            if(lst[i]%2!=lst[j]%2){\n                if(j==lst.length-1)\n  \
    \                  return lst[i]+lst[j];\n                else\n             \
    \       return lst[i]+lst[j]+lst[j+1];\n            }\n        }\n    }\n    return\
    \ 0;\n}", "\tvar sum = 0;\n\tfor(var i=1; i<lst.length; i++){\n\t\tif(lst[i] %\
    \ 2 === 0 && lst[i-1] % 2 === 1)\n\t\t\tsum += lst[i];\n\t}\n\treturn sum;\n}\n",
  "  lst.sort((a, b) => a - b);\n  return lst.reduce((a, b) => {\n    return (a +=\
    \ b, a%2 ? b : 0);\n  }, 0)\n}\n", "  if(lst.length%2 != 0){\n    return 0;\n\
    \  }\n  var sum = 0;\n  for(var i=0; i<lst.length; i++){\n    if(lst[i]%2 != 0){\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "    let sum = 0;\n  \
    \  for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 1){\n     \
    \       sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "  var sum =\
    \ 0;\n  for(var i =0;i<lst.length;i++){\n    if(lst[i]%2==0){\n      sum+=lst[i];\n\
    \    }\n  }\n  return sum;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c\
    \ |>\nI didn't know you could use modulo in such a way, thank you\n<|/ c |>\n\
    <| a |>\n<code>", "    return lst.filter(function (el){\n        return el % 2\
    \ === 1;\n    }).reduce(function (a, c){\n        return a + c;\n    }, 0);\n\
    }\n</code>\n<|/ a tags=arrays,javascript,functional-programming |>\n<| c |>\n\
    This doesn't seem to work if an odd number is at first or last position.\n<|/\
    \ c |>\n<| c |>\nYes, it does. That's what I thought your question was asking.\n\
    <|/ c |>\n<| c |>\nNo its not working. Your solution works with an even number\
    \ in first or last position.\n<|/ c |>\n<| c |>\nYou're right, I didn't think\
    \ about that possibility, now the solution has been updated.\n<|/ c |>\n<| a tags=arrays,javascript,functional-programming\
    \ dscore=1 |>\nYou could take a helper function which takes the wanted indices\
    \ and returns the sum of all odd positions until a wanted index is found or the\
    \ array is looped.\nThis approach uses a closure over wanted indices to get all\
    \ wanted indices till the wanted index is found. The wanted index is returned\
    \ with the last value.\n\n<code>", "\treturn lst.reduce((a, b) => a + b, 0)\n\
    }\n", "  var result = sum(lst);\n  return result - lst.reduce(function(sum, num){\n\
    \    return (sum + num) % 2 == 0 ? sum + num : sum;\n  }, 0);\n}\n", "  if(lst.length\
    \ < 2) return 0;\n  var evenSum = 0;\n  lst.forEach(function(el){\n    if(el %\
    \ 2 === 1) evenSum += el;\n  });\n  return evenSum;\n}\n", "  let evenArray =\
    \ [];\n  let oddArray = [];\n  for (let i = 0; i<lst.length; i++){\n    if (lst[i]\
    \ % 2 === 0){\n      evenArray.push(lst[i]);\n    }else{\n      oddArray.push(lst[i]);\n\
    \    }\n  }\n  return evenArray.reduce(function(acc, curr){\n    return acc +\
    \ curr;\n  }, 0) - oddArray.reduce(function(acc, curr){\n    return acc + curr;\n\
    \  }, 0);\n}", "    let sum = 0;\n    let evenIndex = lst.filter(x => x % 2 ===\
    \ 0).length;\n    for(let i = 0; i < evenIndex; i++){\n        sum += lst[evenIndex\
    \ - i];\n    }\n    return sum;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n\
    <| a tags=javascript,algorithm dscore=1 |>\nYou could use a closure and reduce\
    \ for taking a single iteration for summing up an array.\n\n<code>", "  return\
    \ lst.filter((value, index, array) => index%2 === 1).reduce((a, b) => a + b)\n\
    }\n", "  var evensum = 0;\n  for (var i=0; i<lst.length; i++){\n    if (lst[i]%2\
    \ === 1)\n      evensum += lst[i];\n  }\n  return evensum;\n}\n", "    var sum\
    \ = 0;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i]%2==1){\n     \
    \       sum += lst[i];\n        }\n    }\n    return sum;\n}\n</cell>\n<cell>",
  "  for(let i = 0; i< lst.length;i++){\n    if (lst[i]%2==0){\n      return lst[i]+solution(lst[++i]);\n\
    \    }\n  }\n  return 0;\n}\n", "  let evenSum = 0;\n  let oddSum = 0;\n  lst.forEach(e\
    \ => {\n    if(e%2 == 0)\n      evenSum += e;\n    else \n      oddSum += e;\n\
    \  });\n  return oddSum - evenSum;\n}", "  var sum = 0;\n  for(var i=0; i<lst.length-1;\
    \ i++)\n    if(lst[i]%2==0 && lst[i+1]%2!=0) \n      sum += lst[i];\n  return\
    \ sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nYour solution fails the test case\
    \ `solution([30, 13, 24, 321])`\n<|/ c |>\n<| c |>\nThe first answer was posted\
    \ before I realized that `solution([30, 13, 24, 321])` should return 0. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    let odds = 0;\n\
    \    for (let i = 0; i < lst.length; i++){\n        if (i % 2 == 1){\n       \
    \     odds += lst[i];\n        }\n    }\n    return odds;\n}\n", "    var sum=0;\n\
    \    lst.forEach(function(val,index){\n       if(val%2==0 && index%2!=0){\n  \
    \         sum+=val;\n       }\n   })\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\nIf your list has duplicates then use below code\n<code>", "  return\
    \ lst.filter(x => x % 2 === 1).reduce((acc, x) => acc + x, 0);\n}\n</code>\n<|/\
    \ a tags=javascript,sum,arrays |>\n<| a tags=javascript,sum,arrays |>\nHere's\
    \ another solution (which might be easier to understand) using the filter method.\n\
    <code>\nconst sum = arr => {\n  return arr.filter(item => item % 2 !== 0)\n  \
    \  .reduce((sum, item) => sum + item, 0);\n};\n</code>\nThis first filters out\
    \ the odd numbers, then sums the remaining items using reduce.\n<|/ a dscore=1\
    \ |>\n<| a tags=javascript,sum,arrays |>\nThe easiest solution is using reduce\n\
    <code>\nconst sumOddElements = (arr) => arr.reduce((a,b) => a + b, 0);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=javascript,sum,arrays |>\n<code>", "    let sum =\
    \ 0;\n    let evenSum = 0;\n    let evenCount = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] % 2 != 0){\n            sum += lst[i];\n          \
    \  evenCount += 1;\n        }else{\n            sum += lst[i];\n            evenSum\
    \ += lst[i];\n        }\n    }\n    return sum % 2 == 0 ? sum : sum + evenSum;\n\
    }", "  return arr.reduce((acc, cur) => {\n    if(cur % 2 === 0) return acc + cur;\n\
    \    return acc;\n  }, 0);\n}\n", "  return getEvenSum(lst);\n}\n", "    return\
    \ odd_even_sum.call(this, lst, 0, lst.length);\n}", "  \n}\n\nmodule.exports =\
    \ {\n  solution: solution,\n  tests: {\n    Solution: solution,\n  }\n};\n\n},{}],24:[function(require,module,exports){\n\
    (function (Buffer){\nvar isEqual = require('lodash.isequal');\nvar isObject =\
    \ require('lodash.isobject');\nvar isString = require('lodash.isstring');\nvar\
    \ isNumber = require('lodash.isnumber');\nvar isArray = require('lodash.isarray');\n\
    var isPlainObject = require('lodash.isplainobject');\nvar isInteger = require('lodash.isinteger');\n\
    \nvar MAX_INT = 0xffffffff;\nvar NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;\n\
    var MAX_UINT = 0xffffffff;\nvar MAX_INT_LENGTH = MAX_INT.toString().length;\n\n\
    var MIN_INT = -MAX_INT;\nvar MIN_INT_LENGTH = MIN_INT.toString().length;\n\nvar\
    \ isNonNegativeFiniteNumber = function(n) {\n  return typeof n === 'number' &&\n\
    \    !isNaN(n) &&\n    !Number.isNaN(n) &&\n    n !== NEGATIVE_INFINITY;\n};\n",
  "    let result = 0;\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i]\
    \ % 2 === 0){\n            result += lst[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| a tags=javascript,algorithm,arrays\
    \ dscore=1 |>\nTry this\n<code>", "    var sum = 0;\n    lst.map(function(val,\
    \ index) {\n        if(index % 2 === 1){\n            sum += val;\n        }\n\
    \    });\n    return sum;\n}\n</code>\n<|/ a tags=javascript,arrays,sum dscore=1\
    \ |>\n<| a |>\n<code>\nvar input = [5, 8, 7, 1];\nvar result = input.reduce((prev,\
    \ curr, i) => {\n  if (i % 2 === 1)\n    return prev + curr;\n  return prev;\n\
    });", "\tlet evenSum = lst.reduce((total, curr) => {\n\t\tif(curr % 2 === 0){\n\
    \t\t\treturn total + curr;\n\t\t}\n\t\treturn total;\n\t}, 0);\n\treturn evenSum;\n\
    }\n", "    var result = lst.reduce((a,b)=>(b%2?a+b:a),0);\n    return result;\n\
    }", "    return lst.filter((num, index, arr)=>num%2 === 0).reduce((acc, val)=>acc\
    \ + val);\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n \
    \       if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nYou might want to explain\
    \ the algorithm in a wordy manner, and also provide a `js` implementation. Also,\
    \ `solution([3, 3, 3, 3, 3])` returns `9`, but OP asked for `0`.\n<|/ c |>\n<|\
    \ a tags=javascript dscore=1 |>\n<code>\nvar sumOddEven = (arr) => {\n  let evenSum\
    \ = 0, oddSum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] %\
    \ 2 === 0) {\n      evenSum += arr[i];\n    } else {\n      oddSum += arr[i];\n\
    \    }\n  }\n  return [evenSum, oddSum]\n}\n", "    let evensum = 0;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] % 2 !== 0){\n            evensum\
    \ += lst[i];\n        }\n    }\n    return evensum;\n}\n", "    let evens = 0;\n\
    \    let odds = 0;\n    lst.forEach(element => {\n      if (element % 2 === 1){\n\
    \        odds += element;\n      }\n      else{\n        evens += element;\n \
    \     }\n    });\n    return odds - evens;\n}", "  let sum = 0;\n  for(let i =\
    \ 0, len = lst.length; i < len; i++){\n    if(i % 2 === 0){\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  var sum=0;\n  lst.forEach(function(v,i){\n\
    \    sum+=v%2;\n    console.log(sum)\n  })\n  return sum;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nI appreciate all the answers, but  i was wondering if u can think of\
    \ an algorithm without using a loop ..\n<|/ c |>\n<| c |>\nI added my solution\
    \ without using any loops, please check if it's ok\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "    // Your code here\n    sum = 0;\n    for(i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n\
    \    }\n    console.log(sum);\n}\n", "    console.log(lst);\n    let evenSum =\
    \ 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 == 0){\n\
    \            evenSum = evenSum + lst[i];\n        }\n    }\n    return evenSum;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nvar input = [5,8,7,1];\n\
    var result = 0;\nfor(var i=0; i < input.length; i++) {\n    if(input[i] % 2 !=\
    \ 0){\n        result += input[i];\n    }\n}\n</code>\n<|/ a tags=javascript,arrays\
    \ |>\n<| a tags=javascript,arrays |>\nyou can try this too\n<code>\nvar input\
    \ = [5,8,7,1];\nvar result = 0;\ninput.map((x)=>{\n   if(x%2 != 0){\n      result\
    \ += x\n   }\n})\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst\
    \ input = [5,8,7,1];\nlet result = 0;\n\ninput.forEach((element) => {\n  result\
    \ += element % 2 ? element : -1; // +1 will remove -1\n});", "    const arr =\
    \ []\n    for(let i = 0; i < lst.length; i++){\n        arr.push(lst[i])\n   \
    \ }\n    let sum = 0\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 !== 0){\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n",
  "  if(lst.length == 0){\n    return 0;\n  }\n\n  for(var i = 1; i < lst.length;\
    \ i++){\n    if(lst[i] % 2 == 0 && lst[i - 1] % 2 == 1){\n      return lst[i]\
    \ + lst[i - 1];\n    }\n  }\n\n  return 0;\n}\n", "\tlet evens = lst.filter(x\
    \ => x % 2 === 0)\n\treturn evens.reduce((total, cur) => total + cur, 0);\n}\n",
  "  return lst.filter((item,index)=>index%2==1).reduce((a,b)=>a+b)\n}\n</cell>\n\
    <cell>\n#Check to see that your function returns the correct value.\nassert solution([5,\
    \ 8, 7, 1]) == 12\nassert solution([3, 3, 3, 3, 3]) == 9\nassert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nnth\nGiven a sorted array and a number,\
    \ your function should return the nth smallest number.\n\nIf there are less than\
    \ n numbers in the array, the function should return null.\n\nYou should define\
    \ the function inside your solution function.\n\n\n</text>\n<cell>\n# Write your\
    \ function below:", "    var even = []\n    var odd = []\n    var sum = 0\n  \
    \  for(var i=0;i<lst.length;i++){\n        if((i % 2) == 0){\n            even.push(lst[i])\n\
    \        } else {\n            odd.push(lst[i])\n        }\n    }\n    for(var\
    \ j=0;j<even.length;j++){\n        sum+=even[j]\n    }\n    for(var k=0;k<odd.length;k++){\n\
    \        sum-=odd[k]\n    }\n    return sum\n}", "    return lst.filter(x => x\
    \ % 2 === 1).reduce((a, b) => a + b, 0);\n}\n", "    let sum = 0\n    for(const\
    \ val of lst){\n        if(val % 2 != 0 && val > 0){\n            sum = sum +\
    \ val\n        }\n    }\n    return sum\n}\n</code>\n<|/ a tags=arrays,algorithm,javascript\
    \ dscore=1 |>\n<| c |>\nI don't think this is quite what OP wants. `solution([3,3,3,3,3])`\
    \ returns `9` but OP wants `0`. The question seems to be asking for the sum of\
    \ any odd numbers that are in even positions (i.e. `[3,3,3,3]` returns `7`)\n\
    <|/ c |>\n<| c |>\nYes, this does work. I was trying to implement the solution\
    \ that I did up to the last return statement, and I thought that my solution was\
    \ incorrect. I'll edit my question to remove the \"last return statement\" and\
    \ just leave the question of how to calculate the sum of all odd integers that\
    \ are in even positions in an array.\n<|/ c |>\n<| c |>\n, I edited the solution\
    \ to be more explicit about what I'm looking for. I don't think the question is\
    \ a duplicate, but I'm also not finding any answer in the duplicate that I was\
    \ looking for. Thank you for your comment!\n<|/ c |>\n<| c |>\nI see, well at\
    \ least you edited the question to make it clear what you were looking for\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>", "    var sum = 0; \n    for(var i = 0; i <\
    \ lst.length; i++){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\
    \ \n        }\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0 tags=arrays,javascript,math\
    \ |>\n<| c |>\nWhile this may provide a solution to the question, please make\
    \ sure your code sample is properly formatted and contains all the relevant code\
    \ within the body of the question itself. See https://stackoverflow.com/help/how-to-answer\n\
    <|/ c |>\n<| a |>\n<code>", "    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++){\n      if (lst[i] % 2 !== 0)\n        sum += lst[i];\n    }\n    return\
    \ sum;\n}\n", "    if(!lst.length) return 0;\n\n    let evenCount = 0;\n    for(let\
    \ i = 0; i < lst.length; ++i){\n        if(lst[i] % 2 === 0){\n            evenCount\
    \ += lst[i];\n        }\n    }\n\n    return evenCount;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=javascript,arrays,loops,algorithm,language-agnostic |>\nSince\
    \ it is tagged javascript we can use reduce for this problem\n\n<code>\nconst\
    \ nums = [30, 13, 24, 321];\n\nconst result = nums.reduce((acc, curr) => {\n \
    \ if (curr % 2 === 0) {\n    acc += curr;\n  }\n  return acc;\n}, 0);\n", "\t\
    var sum = 0;\n\tfor(var i=0;i<lst.length;i++)\n\t{\n\t\tif(lst[i] % 2 != 0)\n\t\
    \t{\n\t\t\tsum = sum + lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\n", "  if(lst.length\
    \ < 2){\n    return 0\n  }\n  else{\n    var oddSum = 0\n    var evenSum = 0\n\
    \    var even = lst.filter(function(element){\n      return element % 2 !== 0\n\
    \    })\n    even.forEach(function(element, index){\n      if(index % 2 !== 0){\n\
    \        oddSum += element\n      }\n    })\n    even.forEach(function(element,\
    \ index){\n      if(index % 2 === 0){\n        evenSum += element\n      }\n \
    \   })\n    return oddSum + evenSum\n  }\n}\n", "  if(lst.length<=0){\n    return\
    \ 0;\n  }\n  else if(lst.length===1){\n    return lst[0];\n  }\n  var evenPosition=findEvenPosition(lst);\n\
    \  var oddSum=lst[evenPosition-1]+lst[evenPosition];\n  return oddSum;\n}\n",
  "  // Your code here\n  \n  let sum = 0\n  for (let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0){\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n", " \
    \   return lst.reduce((acc, cur, idx, arr) => {\n        if (idx % 2 === 1) acc\
    \ += cur\n        return acc\n    }, 0)\n}\n", "  return lst.filter(function(val,\
    \ i) { return val%2 === 1; }).reduce((a, b) => a + b);\n}\n", "    \n    var odd\
    \ = lst[lst.length-1]\n    \n    var sum = 0;\n    \n    for (var i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 == 1){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum + odd;\n    \n}\n</cell>\n<cell>", "    if(lst.length < 1){\n\
    \        return 0\n    }\n    \n    var sum = 0\n    \n    for(var i = 0; i< lst.length;\
    \ i++){\n        if(lst[i]%2 === 0){\n            sum += lst[i];\n        }\n\
    \    }\n    \n    return sum;\n}\n", "  return lst.filter((v, i, a) => i % 2 ===\
    \ 0).reduce((a, v) => a + v, 0);\n}\n", "  return lst.filter((item,index) => index%2\
    \ === 1).reduce((a,b)=>a+b,0)\n}\n", "    let evenSum = 0;\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(lst[i] % 2 === 0) evenSum += lst[i];\n   \
    \ }\n    return evenSum;\n}\n</code>\n<|/ a tags=javascript,for-loop,arrays |>\n\
    <| c |>\n`[3, 3, 3, 3, 3]` returns `9` when `3` is `even` so it should be `0`.\n\
    <|/ c |>\n<| c |>\n, yes, you are right, thanks for pointing it out.\n<|/ c |>\n\
    <| a tags=javascript,for-loop,arrays |>\n<code>\nlet myArr = [1, 5, 2, 8, 3, 7,\
    \ 4, 9, 6];\n", "    let sum=0;\n    let odds=[];\n    lst.forEach((x)=>{\n  \
    \      if (x%2==0){\n            sum+=x;\n        }\n        else {\n        \
    \    odds.push(x);\n        }\n    })\n    sum+=odds;\n    return sum;\n}", " \
    \   return lst.filter(function(item, index, arr){\n        return (index % 2)\
    \ === 1;\n    }).reduce((acc, item, index) => acc + item, 0);\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nvar list = [10, 20, 30, 40, 50, 60,\
    \ 70, 80, 90, 100];\nvar result = 0;\n", "    var sum = 0;\n    var sumOfEven\
    \ = 0;\n    for (var i=0;i<lst.length;i++){\n        sum+=lst[i];\n        if\
    \ (lst[i]%2===0){\n            sumOfEven+=lst[i];\n        }\n    }\n    return\
    \ sumOfEven;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nAs mentioned in\
    \ other answers, there are some ways to do this in JS but in ES6 we have an easier\
    \ way. \nUse filter method of array methods. This method returns a new array only\
    \ with the elements where the function returns true.\n<code>\nvar arr=[1,3,5,7,2,4];\n\
    var filtered = arr.filter((val)=>{\n    return val%2===1\n});\n</code>\n<|/ a\
    \ tags=javascript,arrays,algorithm |>\n<| c |>\n`filter` is deprecated, `filter`\
    \ is meant for use with Arrays, not for use with arbitrary objects.\n<|/ c |>\n\
    <| a |>\nES6 solution\n<code>", "    let sum=0;\n    lst.forEach(e => {\n    \
    \    if(e%2===0){\n            sum+=e;\n        }\n    })\n    return sum;\n}\n",
  "    let evenSum = 0\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ === 0){\n            evenSum += lst[i]\n        }\n    }\n    return evenSum\n\
    }\n", "    var sum = lst.reduce(function(prev, curr, index, array) {\n       \
    \ return prev + curr % 2 === 0 && curr !== 0 ? prev + curr : prev\n    });\n \
    \   return sum;\n}\n", "    let sum = 0;\n    for(let i=0; i<lst.length; i++){\n\
    \        if(lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a tags=javascript |>\n<| c |>\nI do not get\
    \ your solution, can you please explain the lines of code?\n<|/ c |>\n<| c |>\n\
    I added an explanation of what I did.\n<|/ c |>\n<| c |>\nI got your solution,\
    \ could you please explain why are you adding two elements in the condition?\n\
    <|/ c |>\n<| c |>\nI added an explanation of what the code is doing.\n<|/ c |>\n\
    <| c |>\nI got your solution but can you please explain why are you adding two\
    \ elements in the condition? because if we add the two elements in the condition,\
    \ the code will return the sum of all even numbers in the array. Thanks\n<|/ c\
    \ |>\n<| a tags=javascript |>\nI tried to answer your question. Here it goes:\n\
    \n<code>"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
