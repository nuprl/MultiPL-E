name: HumanEval_78_hex_key
language: js
prompt: "//You have been tasked to write a function that receives \n// a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n// digits that are primes\
  \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
  \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n// So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is\
  \ always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n\
  // Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n//\
  \ >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n\
  // >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
  1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
  2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
  112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
completions: ["    return num.match(/[A-Fa-f0-9]+/).length;\n}\n", "    //Your solution\
    \ here\n}\n</cell>\n<text>\nExercise 3\nWrite a function that counts the number\
    \ of primes less than or equal to n.\n\n\n</text>\n<cell>", "\tlet count = 1;\n\
    \tfor (let i = 0; i < num.length; i++) {\n\t\tlet c = num[i];\n\t\tif (c !== \"\
    A\" && c !== \"B\" && c !== \"C\" && c !== \"D\" && c !== \"E\" && c !== \"F\"\
    ){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\n", "    // \"1077E\" ->\
    \ \"13\"\n    return ((num.length*8)-hex_key(num.substr(1,num.length-1))).toString();\n\
    }\n", "    let sum = 0\n    if(num !== \"\"){\n        if(num.length % 2 !== 0){\n\
    \            throw new SyntaxError(\"hex_key function expects a even number of\
    \ characters\")\n        }\n        for(let i = 0; i < num.length/2; i++){\n \
    \           let hex_digit = num.charAt(i*2)\n            if((hex_digit >= '0')\
    \ && (hex_digit <= '9')){\n                sum = sum + parseInt(hex_digit)\n \
    \           }else{\n                throw new SyntaxError(\"hex_key function expects\
    \ hex number\")\n            }\n        }\n    }\n    return sum\n}\n", "    if\
    \ (num.length <= 0){\n        return -1;\n    }\n\n    let result = 0;\n    for\
    \ (let i = 0; i < num.length; i++){\n        result += Math.pow(16,num.length\
    \ - 1 - i);\n        if (num.charCodeAt(i) >= 'A'.charCodeAt(0) && num.charCodeAt(i)\
    \ <= 'F'.charCodeAt(0)){\n            result += Math.pow(16,num.length - 1 - i\
    \ - 1);\n        }\n    }\n    return result;\n}\n", "  var rem = num;\n  if(num\
    \ == \"\" || num == undefined || num == null){\n    return null;\n  }\n  while(rem.length\
    \ > 0){\n    num = toHex(rem) % 10;\n    rem = rem.substr(num.length);\n  }\n\
    \  return num;\n}\n", "    var sum = 0;\n    var len = num.length;\n    for(var\
    \ i=0; i < len; i++){\n        var d = parseInt(num[i], 10);\n        var b =\
    \ d % 16;\n        var a = Math.floor(d/16);\n        var hexa = Math.pow(16,\
    \ a);\n        if(hexa != 1){\n            sum += hexa*Math.pow(b, hexa-1)\n \
    \       }\n        else{\n            sum += Math.pow(b, hexa)\n        }\n  \
    \  }\n    return sum;\n}", "  let num_str = num.toString();\n  let count = 0;\n\
    \  for(let i = 0; i < num_str.length; i++){\n    let chr = num_str.charCodeAt(i);\n\
    \    if(chr >= 48 && chr <= 57){\n      count += 1;\n    }\n    else if(chr >=\
    \ 65 && chr <= 72){\n      count += 2;\n    }\n    else if(chr >= 97 && chr <=\
    \ 102){\n      count += 3;\n    }\n  }\n  return count;\n}\n", "\tnum = num.toUpperCase();\n\
    \tif(num.length%2!==0){\n\t\treturn false;\n\t}\n\tlet count = 1;\n\tfor(let i=0;i<num.length;i++){\n\
    \t\tlet num = num.slice(0,i+1);\n\t\tif(!nums.includes(num)){\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n", "  let prime_count = 0;\n  \n  // convert string\
    \ to number\n  num = num.toString().split('');\n\n  // count prime numbers\n \
    \ for(i=num.length-1; i>=0; i--){\n    // skip the first 2 characters\n    if(num[i]>2){\n\
    \      // get the first 2 characters\n      let first_two = num[i].slice(0, 2);\n\
    \      let num = parseInt(first_two);\n      \n      // test if num is a prime\n\
    \      if(isPrime(num)){\n        prime_count++;\n      }\n    }\n  }\n  \n  return\
    \ prime_count;\n}\n", "  if(num.length === 0)\n    return 0;\n  if(num.length\
    \ === 1)\n    return parseInt(num.toUpperCase(), 16);\n  var digit = hex_key(num.substr(0,\
    \ 2));\n  var base = hex_key(num.substr(2, 2));\n  var result = 0;\n  for(var\
    \ i = 3; i <= Math.sqrt(base / Math.pow(16, i)); i++){\n    if(base % Math.pow(16,\
    \ i) === 0)\n      result++;\n  }\n  return result;\n}\n", "  let result = 0;\n\
    \  if (num.length === 0)\n    return 0; // empty string -> zero\n  else if (num.length\
    \ == 1){\n    num = num.toUpperCase();\n    if (num.length == 1){\n      num =\
    \ \"0\" + num;\n    }\n  }\n  else if (num.length == 2){\n    num = num.toUpperCase();\n\
    \  }\n  for (let i = 2; i <= 9; ++i){\n    for (let j = 0; j < num.length; ++j){\n\
    \      if (num[j] == i){\n        ++result; // found a digit\n      }\n    }\n\
    \  }\n  return result;\n}\n", "    var key = '';\n    num.replace(/^0x/, '').split('').forEach(function(c){\n\
    \        key += String.fromCharCode(parseInt(c,16));\n    });\n    console.log(key);\n\
    \    console.log(hex_key1(key));\n}\n", "    if(num.length === 0){\n        return\
    \ 0;\n    }\n    let count = 0;\n    for (let i = 0; i < num.length; i++){\n \
    \       let digit = parseInt(num[i], 16);\n        if(digit % 2 === 0){\n    \
    \        count += 2;\n        }else if(digit % 3 === 0 && digit % 5 === 0){\n\
    \            count += 3;\n        }else if(digit % 7 ===0){\n            count\
    \ += 5;\n        }else if(digit % 11 === 0){\n            count += 7;\n      \
    \  }else if(digit % 13 === 0){\n            count += 11;\n        }\n    }\n \
    \   return count;\n}\n", "  let digits = num;\n  let count = 1;\n  while(digits!=\"\
    \" && digits.length>2){\n    count += parseInt(digits.substr(0,1),16);\n    digits\
    \ = digits.substr(1);\n  }\n  return count;\n}\n</code>\n<|/ q tags=algorithm,primes,javascript,number-theory,math\
    \ dscore=0 |>\n<| c |>\nThis question appears to be off-topic because it is about\
    \ [math.se] instead of programming or software development.\n<|/ c |>\n<| a dscore=2\
    \ |>\nA few notes:\n\nYou should be aware that there are only about 6 billion\
    \ primes under 1000, so your program will be slow for large numbers. This may\
    \ or may not be a concern, but it's a good thing to think about.\nThere are several\
    \ different methods for counting primes. You're trying to count the ones that\
    \ start with 2. If you only want to count 2s, you shouldn't add them to the count\
    \ when they get to the second digit.\nYour algorithm is probably too slow.\nIf\
    \ your inputs are guaranteed to be valid, you should do some input checking to\
    \ make sure the number is in fact valid (e.g. if it's an empty string you return\
    \ 0).\n\nHere's the code I came up with:\n<code>", "    // Your code here\n}\n\
    </cell>\n<text>\nQ5\nWrite a JavaScript function to test if a hexadecimal number\
    \ is even or odd.\n\nExamples:\n>>> is_even(42)\ntrue\n>>> is_even(51)\nfalse\n\
    >>> is_even(53)\ntrue\n>>> is_even(0)\nfalse\n>>> is_even(-1)\nfalse\n>>> is_even(-5)\n\
    false\n>>> is_even(123456789)\nfalse\n\n</text>\n<cell>", "  var hex=num.toString(16);\n\
    \  hex=hex.toLowerCase();\n  for(var i=0;i<hex.length;i++){\n    if(hex.charAt(i)=='a'){\n\
    \      hex=hex.slice(i+1);\n      hex=hex.toUpperCase();\n      break;\n    }\n\
    \  }\n  return hex.length;\n}\n</script>\n</div>\n</div>\n</div>\n<div class=\"\
    cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"\
    prompt input_prompt\">In&nbsp;[44]:</div>\n<div class=\"inner_cell\">\n    <div\
    \ class=\"input_area\">\n<div class=\" highlight hl-julia\"><pre><span></span><span\
    \ class=\"n\">hex_key</span><span class=\"p\">(</span><span class=\"s\">&quot;1077e&quot;</span><span\
    \ class=\"p\">)</span>\n</pre></div>\n\n    </div>\n</div>\n</div>\n\n<div class=\"\
    output_wrapper\">\n<div class=\"output\">\n\n\n<div class=\"output_area\">\n\n\
    \    <div class=\"prompt output_prompt\">Out[44]:</div>\n\n\n\n\n<div class=\"\
    output_text output_subarea output_execute_result\">\n<pre>(5)</pre>\n</div>\n\n\
    </div>\n\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing code_cell\
    \ rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[45]:</div>\n\
    <div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight\
    \ hl-julia\"><pre><span></span><span class=\"n\">hex_key</span><span class=\"\
    p\">(</span><span class=\"s\">&quot;e&quot;</span><span class=\"p\">)</span>\n\
    </pre></div>\n\n    </div>\n</div>\n</div>\n\n<div class=\"output_wrapper\">\n\
    <div class=\"output\">\n\n\n<div class=\"output_area\">\n\n    <div class=\"prompt\
    \ output_prompt\">Out[45]:</div>\n\n\n\n\n<div class=\"output_text output_subarea\
    \ output_execute_result\">\n<pre>(2)</pre>\n</div>\n\n</div>\n\n</div>\n</div>\n\
    \n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"\
    input\">\n<div class=\"prompt input_prompt\">In&nbsp;[46]:</div>\n<div class=\"\
    inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-julia\"\
    ><pre><span></span><span class=\"n\">hex_key</span><span class=\"p\">(</span><span\
    \ class=\"s\">&quot;ABED1A33&quot;</span><span class=\"p\">)</span>\n</pre></div>\n\
    \n    </div>\n</div>\n</div>\n\n<div class=\"output_wrapper\">\n<div class=\"\
    output\">\n\n\n<div class=\"output_area\">\n\n    <div class=\"prompt output_prompt\"\
    >Out[46]:</div>\n\n\n\n\n<div class=\"output_text output_subarea output_execute_result\"\
    >\n<pre>(9)</pre>\n</div>\n\n</div>\n\n</div>\n</div>\n\n</div>\n<div class=\"\
    cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"\
    prompt input_prompt\">In&nbsp;[47]:</div>\n<div class=\"inner_cell\">\n    <div\
    \ class=\"input_area\">\n<div class=\" highlight hl-julia\"><pre><span></span><span\
    \ class=\"n\">hex_key</span><span class=\"p\">(</span><span class=\"s\">&quot;A33&quot;</span><span\
    \ class=\"p\">)</span>\n</pre></div>\n\n    </div>\n</div>\n</div>\n\n<div class=\"\
    output_wrapper\">\n<div class=\"output\">\n\n\n<div class=\"output_area\">\n\n\
    \    <div class=\"prompt output_prompt\">Out[47]:</div>\n\n\n\n\n<div class=\"",
  "    let sum = 0;\n    for(let i=0;i<num.length;i++){\n        sum+=parseInt(num[i])+i;\n\
    \    }\n    sum*=6;\n    for(let i=0;i<sum;i++){\n        if(is_prime(sum-i)){\n\
    \            return i;\n        }\n    }\n    return null;\n}\n", "  var hex =\
    \ num.toString(16).toUpperCase();\n  if(hex.length % 2 === 1) hex = \"0\" + hex;\n\
    \  var primes = [];\n  for(var i = hex.length - 1; i >= 0; i--){\n    var digit\
    \ = hex.substring(i, i + 1);\n    if(digit.match(/[FGI]/)){\n      primes.push(parseInt(digit));\n\
    \    }\n  }\n  return primes[primes.length - 1];\n}\n", "    // convert string\
    \ to array\n    let n = num.split(\"\");\n    let sum = 0;\n    // count number\
    \ of characters that are not A...F\n    for(let i in n){\n        if(n[i] !==\
    \ \"A\" && n[i] !== \"B\" && n[i] !== \"C\" && n[i] !== \"D\" && n[i] !== \"E\"\
    \ && n[i] !== \"F\")\n            sum += n[i];\n    }\n    // if sum of digits\
    \ is odd then it is a prime number\n    if(sum & 0x1){\n        return 1;\n  \
    \  }\n    // if sum of digits is even then it is a non-prime number\n    return\
    \ 0;\n}\n", "    var num = num.toUpperCase();\n    var hexArr = [];\n    var hexSum\
    \ = [];\n    var hexSumLen = 0;\n    var hexSumLenCount = 0;\n    var i;\n   \
    \ for(i = 0; i <= 6; i++){\n        hexSum.push(0);\n        hexSumLen += 9;\n\
    \    }\n    for(i = 0; i < num.length; i++){\n        var currentChar = num.charAt(i);\n\
    \        if(currentChar >= 'A' && currentChar <= 'F'){\n            hexSum[hexSumLen\
    \ - hexSumLenCount] += parseInt(currentChar, 10);\n            hexSumLenCount++;\n\
    \        }\n    }\n    var primeHexSum = 0;\n    var foundPrime = false;\n   \
    \ for(i = 0; i < hexSumLen; i++){\n        var prime = true;\n        for(j =\
    \ 0; j < hexSum.length; j++){\n            if(hexSum[j] > hexSum[i]) continue;\n\
    \            prime = false;\n            break;\n        }\n        if(prime){\n\
    \            primeHexSum += hexSum[i];\n            foundPrime = true;\n     \
    \   }\n    }\n    if(foundPrime){\n        return parseInt(primeHexSum, 10);\n\
    \    }else{\n        console.log(\"No prime number exists for \" + num);\n   \
    \     return -1;\n    }\n}", "    num = num.toUpperCase();\n    num = num.split(\"\
    \");\n    num = num.filter(function(x){return x.match(/[0-9A-F]/) !== null;});\n\
    \    return num.length;\n}\n", "    // TODO: Write your answer here!\n    return\
    \ 4;\n}\n</cell>\n<cell>", "    const [a,b]=num.split(\"x\")\n    const s=(a+b).split(\"\
    \")\n    \n    const primes=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    const keys={A:1,B:2,C:3,D:4,E:5,F:6}\n    \n    for(let i=0;i<s.length;i++){\n\
    \        if(keys[s[i]]){\n            for(let j=0;j<primes.length;j++){\n    \
    \            if(primes[j]%keys[s[i]]){\n                    break\n          \
    \      }\n            }\n            \n            if(j==primes.length){\n   \
    \             return keys[s[i]]\n            }\n        }\n    }\n    return -1\n\
    }\n", "    let hexNum = \"\"; //the hexadecimal number string\n    for(let i=0;\
    \ i<num.length; i++){\n        hexNum += num.charCodeAt(i).toString(16); //convert\
    \ to hex string\n    }\n    return hexNum.match(/..../).length; //count the number\
    \ of \"..\"\n}", "  var len = num.length;\n  var hex_num = \"\";\n  var primes\
    \ = 0;\n  var count = 0;\n  for (var i=0; i<len; i++){\n    hex_num = num[i] +\
    \ hex_num;\n    if (hex_num.length % 2 == 1){\n      primes++;\n    }\n    for\
    \ (var j=0; j<primes; j++){\n      if (hex_num.charAt(j) == hex_num.charAt(j+1)){\n\
    \        primes++;\n      }\n    }\n  }\n  return count;\n}", "  // Write your\
    \ code here\n}\n", "    var result = 0;\n    num = num.toUpperCase();\n    var\
    \ hex = num;\n    var numLength = hex.length;\n    var hexSum = 0;\n    // Convert\
    \ string to number\n    // 10 is decimal 10 \n    // 16 is hexadecimal 16\n  \
    \  for (var i = 1; i < numLength+1; i++) {\n        var hexVal = hex.charCodeAt(i)\
    \ - 64;\n        hexSum += hexVal*hexVal*16*16;\n    }\n    // Check prime numbers\n\
    \    if(hexSum > 1) {\n        result = 3\n    } else {\n        // Check 2\n\
    \        if(hexSum%2 == 0) {\n            result = 2;\n        } else {\n    \
    \        // Check 3\n            if(hexSum%3 == 0) {\n                result =\
    \ 3;\n            } else {\n                // Check 5\n                if(hexSum%5\
    \ == 0) {\n                    result = 5;\n                } else {\n       \
    \             // Check 7\n                    if(hexSum%7 == 0) {\n          \
    \              result = 7;\n                    } else {\n                   \
    \     // Check 11\n                        if(hexSum == 11) {\n              \
    \              result = 11;\n                        } else {\n              \
    \              // Check 13\n                            if(hexSum == 13) {\n \
    \                               result = 13;\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,algorithm\
    \ |>\n<| a tags=javascript,algorithm |>\nThe solution is pretty simple:\n<code>",
  "    let nums = num.toString().split(\"\");\n    let count = 0;\n    for (let i\
    \ = 0; i < nums.length; i++) {\n        count += parseInt(nums[i]) * Math.pow(16,i);\n\
    \    }\n    return count;\n}\n", "    var hex = num.toUpperCase();\n    var digits\
    \ = [];\n    var count = 0;\n    var digit;\n    for(var i=0;i<hex.length;i++){\n\
    \        digit = parseInt(hex.substr(i,1),16);\n        if(digit == 11 || digit\
    \ == 13){\n            digits.push(digit);\n        }\n    }\n    return digits.length\
    \ ? digits.length : 2;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks. I haven't really\
    \ done much javascript before. Your comment about what a \"prime number\" is confused\
    \ me. Do you mean to say that \"1077E\" isn't a prime number but that \"ABCDE\"\
    \ is?\n<|/ c |>\n<| c |>\nyes I do. But a prime number is a number that doesn't\
    \ have two of the same digits in a row like 10, 100, 1000, 10000, etc. You probably\
    \ just want to be looking for two of the same digits in the row.\n<|/ c |>\n<|\
    \ c |>\nI see. So to count the number of digits in a row I should check if the\
    \ previous digits match?\n<|/ c |>\n<| c |>\nExactly, but what do you do when\
    \ there are three of the same digits in the row? You can't add them. So you need\
    \ to decide whether two of the same digits mean one or the other and implement\
    \ that.\n<|/ c |>\n<| c |>\nI see. So basically if I had a prime number that could\
    \ be represented as \"AABBCC\" I would want to count the number of A's in that\
    \ string and add one. Right?\n<|/ c |>\n<| a tags=math,javascript |>\nHere is\
    \ my attempt:\n\n<code>\nvar hex = \"a\";\nvar count = 0;", "  var sum=1;\n  \n\
    \  // count the number of digits that aren't 0, 5, 6, 7, 8 or 9\n  for(var i=0;i<num.length;i++){\n\
    \    var c=num.charAt(i);\n    if(c>=\"0\" && c<=\"9\"){\n      sum*=10;\n   \
    \   sum+=parseInt(c,10)-1;\n    }else if(c==\"A\" || c==\"B\" || c==\"C\" || c==\"\
    D\" || c==\"E\" || c==\"F\"){\n      sum++;\n    }\n  }\n  return sum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=javascript |>\nThis is the same function without\
    \ recursion and with the use of bitwise operators, I believe it is easier to understand\n\
    <code>", "    let hexStr = num.toString();\n    let hexArr = hexStr.split(\"\"\
    );\n    let hexArr1 = hexArr.slice(0,8); // array of hex digits to count\n   \
    \ let hexArr2 = hexArr.slice(8,16); // array of hex digits to count\n    let hexArr3\
    \ = hexArr.slice(16,32); // array of hex digits to count\n    let hexArr4 = hexArr.slice(32,64);\
    \ // array of hex digits to count\n    let hexArr5 = hexArr.slice(64,128); //\
    \ array of hex digits to count\n    let hexArr6 = hexArr.slice(128,192); // array\
    \ of hex digits to count\n    let hexArr7 = hexArr.slice(192,256); // array of\
    \ hex digits to count\n    let hexArr8 = hexArr.slice(256,512); // array of hex\
    \ digits to count\n    let hexArr9 = hexArr.slice(512,1024); // array of hex digits\
    \ to count\n\n    let count = 0;\n    // Prime numbers\n    if (hexArr1.includes('A'))\
    \ count+=2;\n    if (hexArr1.includes('B')) count+=2;\n    if (hexArr1.includes('C'))\
    \ count+=2;\n    if (hexArr1.includes('D')) count+=2;\n    if (hexArr1.includes('E'))\
    \ count+=2;\n    if (hexArr1.includes('F')) count+=2;\n    if (hexArr2.includes('A'))\
    \ count+=2;\n    if (hexArr2.includes('B')) count+=2;\n    if (hexArr2.includes('C'))\
    \ count+=2;\n    if (hexArr2.includes('D')) count+=2;\n    if (hexArr2.includes('E'))\
    \ count+=2;\n    if (hexArr2.includes('F')) count+=2;\n    if (hexArr3.includes('A'))\
    \ count+=2;\n    if (hexArr3.includes('B')) count+=2;\n    if (hexArr3.includes('C'))\
    \ count+=2;\n    if (hexArr3.includes('D')) count+=2;\n    if (hexArr3.includes('E'))\
    \ count+=2;\n    if (hexArr3.includes('F')) count+=2;\n    if (hexArr4.includes('A'))\
    \ count+=2;\n    if (hexArr4.includes('B')) count+=2;\n    if (hexArr4.includes('C'))\
    \ count+=2;\n    if (hexArr4.includes('D')) count+=2;\n    if (hexArr4.includes('E'))\
    \ count+=2;\n    if (hexArr4.includes('F')) count+=2;\n    if (hexArr5.includes('A'))\
    \ count+=2;\n    if (hexArr5.includes('B')", "  let count = 0;\n  let remainder;\n\
    \  let remainder2;\n  num = num.toUpperCase();\n  num = num.split(\"\");\n  for(let\
    \ i = 0; i < num.length; i++){\n    remainder = parseInt(num[i]);\n    for(let\
    \ j = 2; j <= remainder; j++){\n      if(remainder % j == 0){\n        remainder2\
    \ = remainder / j;\n        if(!(remainder2%2 == 1)){\n          count += 2;\n\
    \        }\n        break;\n      }\n    }\n  }\n  return count;\n}\n", "\tvar\
    \ hex_digits = num.toUpperCase().split(\"\");\n\tvar is_prime = false;\n\tvar\
    \ is_hex_digit = true;\n\tvar hex_digit_count = 0;\n\t\n\tfor(var i = hex_digits.length\
    \ - 1; i >= 0; i--){\n\t\thex_digit_count++;\n\t\t\n\t\tif(hex_digits[i] !== \"\
    A\" && hex_digits[i] !== \"B\" && hex_digits[i] !== \"C\" && hex_digits[i] !==\
    \ \"D\" && hex_digits[i] !== \"E\" && hex_digits[i] !== \"F\"){\n\t\t\tis_hex_digit\
    \ = false;\n\t\t}\n\t}\n\t\n\tif(is_hex_digit){\n\t\tfor(var i = hex_digits.length\
    \ - 1; i >= 0; i--){\n\t\t\thex_digit_count++;\n\t\t\tif(hex_digits[i] === \"\
    A\" || hex_digits[i] === \"B\" || hex_digits[i] === \"C\" || hex_digits[i] ===\
    \ \"D\" || hex_digits[i] === \"E\" || hex_digits[i] === \"F\"){\n\t\t\t\tis_prime\
    \ = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\twhile(hex_digit_count > 1 && !is_prime){\n\
    \t\tfor(var i = hex_digits.length - 1; i >= 0; i--){\n\t\t\thex_digit_count--;\n\
    \t\t\t\n\t\t\tif(hex_digits[i] === \"A\" || hex_digits[i] === \"B\" || hex_digits[i]\
    \ === \"C\" || hex_digits[i] === \"D\" || hex_digits[i] === \"E\" || hex_digits[i]\
    \ === \"F\"){\n\t\t\t\tis_prime = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn hex_digit_count;\n\
    }\n", "    let digits_count_map = {};\n    let digits_count_map_init = {2:0, 3:0,\
    \ 5:0, 7:0, 11:0, 13:0, 17:0};\n    let count_digits_map = {};\n    let count_digits_map_init\
    \ = {2:0, 3:0, 5:0, 7:0, 11:0, 13:0, 17:0};\n    let num2 = '0'+num;\n    let\
    \ num = num2.split('');\n    for(let i = 0; i < num.length; i++){\n        let\
    \ digit = parseInt(num[i], 10);\n        let key = num[i][0];\n        digits_count_map[key]\
    \ = digits_count_map[key] || 0;\n        digits_count_map[key] += digit;\n   \
    \     count_digits_map[key] = count_digits_map[key] || 0;\n        count_digits_map[key]\
    \ += 1;\n    }\n    for(let key in count_digits_map){\n        if(count_digits_map[key]\
    \ > 1){\n            let power = Math.pow(2, count_digits_map[key]);\n       \
    \     for(let i = 2; i <= power; i++){\n                let is_prime = true;\n\
    \                for(let j = i*i; j < power; j += i){\n                    is_prime\
    \ = false;\n                    break;\n                }\n                if(is_prime\
    \ == true){\n                    digits_count_map[key] = digits_count_map[key]\
    \ || 0;\n                    digits_count_map[key] += i;\n                   \
    \ count_digits_map[key] = count_digits_map[key] || 0;\n                    count_digits_map[key]\
    \ += 1;\n                    break;\n                }\n            }\n      \
    \  }\n    }\n    let sum_digits_count_map = {};\n    for(let key in digits_count_map){\n\
    \        let digits_count_val = digits_count_map[key];\n        sum_digits_count_map[key]\
    \ = digits_count_val + sum_digits_count_map[key] || 0;\n        sum_digits_count_map[key]\
    \ += digits_count_val;\n    }\n    let hex_key = 0;\n    for(let key in sum_digits_count_map){\n\
    \        let digits_count_val = sum_digits_count_map[key];\n        let count_digits_val\
    \ = count_digits_map[key];\n        hex_key += digits_count_val * (count_digits_val\
    \ - 1);\n    }\n    return hex_key;\n}\n", "  var hex_num = \"\";\n  for(var i\
    \ = 0; i < num.length; i++){\n    var hex = parseInt(num[i]).toString(16);\n \
    \   var index = hex.length;\n    var count = 0;\n    while(index > 0){\n     \
    \ hex = hex.substr(index / 2, 2);\n      index -= index / 2;\n      count++;\n\
    \    }\n    if(count == 2){\n      hex_num += hex.charAt(0).toUpperCase();\n \
    \     hex_num += hex.charAt(1).toUpperCase();\n    } else {\n      hex_num +=\
    \ hex;\n    }\n  }\n  if(hex_num.indexOf(\"0\") > -1){\n    return hex_num.length\
    \ / 2 - 1;\n  } else {\n    return hex_num.length / 2;\n  }\n}\n", "   var hex_num\
    \ = '';\n   var index = 0;\n   while(index < num.length){\n      if(hex_num.length\
    \ != 0){\n         hex_num += (hex_num.length == 1) ? num.charCodeAt(index) :\
    \ hex_num.charCodeAt(index).toString(16);\n      }\n      if(num.charCodeAt(index)\
    \ < 10){\n         hex_num += '0';\n      }\n      hex_num += num.charCodeAt(index);\n\
    \      index++;\n   }\n   return hex_num;\n}", "  // Your code here...\n}\n</code></pre>\n\
    <p>\n<strong>Note:</strong>\nYou do not have to write an efficient code for this\
    \ problem, \nbut you have to complete the code in the provided cell first. \n\
    Please do not use loops to do this.\n</p>\n\n</div>\n</div>\n</div>\n<div class=\"\
    cell border-box-sizing text_cell rendered\"><div class=\"prompt input_prompt\"\
    >\n</div><div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing\
    \ rendered_html\">\n<p>\n<strong> Question 3 </strong>\nHow many hexadecimal numbers\
    \ are prime? \nWrite a function with the name <code>hex_key</code> that receives\
    \ a single string \nand returns the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number \ngreater than 1 that is not\
    \ a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13,\
    \ 17,...\nSo you have to determine a number of the following digits: 2, 3, 5,\
    \ 7, \nB (=decimal 11), D (=decimal 13).\n</p>\n\n</div>\n</div>\n</div>\n<div\
    \ class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n\
    <div class=\"prompt input_prompt\">In&nbsp;[20]:</div>\n<div class=\"inner_cell\"\
    >\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span></span><span\
    \ class=\"c1\"># Question 3</span>\n<span class=\"k\">def</span> <span class=\"\
    nf\">hex_key</span><span class=\"p\">(</span><span class=\"n\">num</span><span\
    \ class=\"p\">):</span>\n    <span class=\"c1\"># Your code here...</span>\n</pre></div>\n\
    \n    </div>\n</div>\n</div>\n\n</div>\n<div class=\"cell border-box-sizing text_cell\
    \ rendered\"><div class=\"prompt input_prompt\">\n</div><div class=\"inner_cell\"\
    >\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<p>\n<strong>\
    \ Question 4 </strong>\nWrite a function named <code>count</code> that receives\
    \ a sequence of numbers and returns \na dictionary with the count of each number.\
    \ For example:\n</p>\n\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing\
    \ code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\"\
    >In&nbsp;[21]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\"\
    >\n<div class=\" highlight hl-ipython3\"><pre><span></span><span class=\"c1\"\
    ># Question 4</span>\n<span class=\"k\">def</span> <span class=\"nf\">count</span><span\
    \ class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n\
    \    <span class=\"n\">counts</span> <span class=\"o\">=</span> <span class=\"\
    nb\">dict</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span>\
    \ <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\"\
    >nums</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span\
    \ class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">num</span><span\
    \ class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">counts</span><span\
    \ class=\"p\">:</span>\n            <span class=\"n\">counts</span><span class=\"\
    p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"\
    n\">num</span><span class=\"p\">)</span><span class=\"p\">]</span> <span class=\"\
    o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span\
    \ class=\"p\">:</span>\n            <span class=\"n\">counts</span><span class=\"\
    p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"\
    n\">num</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"\
    mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">counts</span>\n",
  "    //Return count of digits from the begining of the string that are primes \n\
    \    //(2 or 3 numbers)\n    let key = 0;\n    //Loop through string until you\
    \ reach the first char that is not hexadecimal digit\n    for(let i = 0; i < num.length;\
    \ i++){\n        //If char is hexadecimal digit add to key count\n        if(isNaN(num[i])\
    \ == false && num[i] >= \"A\" && num[i] <= \"F\"){\n            key += parseInt(num[i])\n\
    \        }\n        //If char is non hexadecimal digit, skip it\n        else{\n\
    \            continue\n        }\n    }\n    //Return count of digits from beginning\
    \ of the string that are primes\n    return key\n}", "  var count = 0;\n  var\
    \ hex = num;\n  for (var i = 0; i < hex.length; i++){\n    if (hex.charAt(i) ===\
    \ 'A' || hex.charAt(i) === 'B' || hex.charAt(i) === 'C' || hex.charAt(i) === 'D'\
    \ || hex.charAt(i) === 'E' || hex.charAt(i) === 'F'){\n      hex = hex.charAt(i);\n\
    \      if (hex.match(/[A-E]/)){\n        hex = '0' + hex;\n      }\n    }\n  \
    \  else if (hex.match(/[1-8]/)){\n      hex = '0' + hex;\n    }\n    if (hex.match(/[0-9]/)){\n\
    \      count += parseInt(hex, 16);\n    }\n  }\n  return count;\n}\n", "  let\
    \ total = 0;\n  let numArr = num.split('');\n  for (let i=0; i<numArr.length;\
    \ i++){\n    let n = parseInt(numArr[i]);\n    if (isNaN(n)){\n      break;\n\
    \    }\n    total += n;\n  }\n  console.log(total);\n}\n", "  var numArr = num.split('');\n\
    \  var nDigits = numArr.length;\n  var sum = 0;\n  for(var i =0; i<nDigits; i++){\n\
    \    var nHex = numArr.charCodeAt(i) - \"A\".charCodeAt(0);\n    if(isPrime(nHex))\
    \ sum += nHex;\n  }\n  return sum;\n}\n", "\treturn hex_num(num);\n}", "    num\
    \ = \"\" + num;\n    var hex_num = \"\";\n    var prime_found = false;\n    for(var\
    \ i = 0; i < num.length; i++){\n        hex_num = num.charAt(i) + hex_num;\n \
    \       for(var i = 0; i < hex_num.length; i++){\n            if(!prime_found\
    \ && hex_num.charAt(i) >= \"0\" && hex_num.charAt(i) <= \"9\"){\n            \
    \    if(hex_num.charAt(i) == num.charAt(i)){\n                    prime_found\
    \ = true;\n                }\n            }\n            if(!prime_found && hex_num.charAt(i)\
    \ >= \"A\" && hex_num.charAt(i) <= \"F\"){\n                if(hex_num.charAt(i)\
    \ == num.charAt(i)){\n                    prime_found = true;\n              \
    \  }\n            }\n        }\n        if(prime_found){\n            prime_count++;\n\
    \            prime_found = false;\n        }\n    }\n    return prime_count;\n\
    }\n", "    var num_as_string = num.toString().toLowerCase();\n    var digit_count\
    \ = num_as_string.split('').length - 1;\n    \n    if(num_as_string === ''){\n\
    \        return 0;\n    }\n\n    var hex_count = 0;\n    for(var i = 0; i < digit_count;\
    \ i++){\n        var digit = num_as_string.substring(i,i+1);\n        if(parseInt(digit,\
    \ 16) === parseInt(digit, 16)){\n            hex_count += 1;\n        }\n    }\n\
    \    return hex_count;\n}\n", "  // YOUR CODE HERE\n}\n</cell>\n<text>\nExercise\
    \ 10 (5 points)\nWrite a function that accepts a string of hexadecimal digits\
    \ and returns an integer. Example:\n>>> hex_to_int(\"0102\")\n10\n>>> hex_to_int(\"\
    0008\")\n16\n>>> hex_to_int(\"FFFE\")\n255\n\n\n</text>\n<cell>", "    if(!num){\n\
    \        return null;\n    }\n    return num.replace(/^0+/,'').replace(/[^0-9A-F\
    \ ]+/g, function(i){\n        var digit = i.charCodeAt(0).toString(16);\n    \
    \    return digit.length % 2 ? digit : '0' + digit;\n    }).replace(/[\\s]/g,'');\n\
    }\n", "    num += \"\";\n    let hex = num.replace(/[^0-9A-F]/ig,\"\");\n    let\
    \ digits = hex.replace(/(?<=^|\\s)[^0-9]/g,\"\").split(\"\");\n    let prime_digits\
    \ = [];\n    let i = 1;\n    while(digits.length){\n        let val = parseInt(digits.splice(0,\
    \ 2),16);\n        if(val){\n            prime_digits.push(val);\n        }\n\
    \        i++;\n    }\n    let prime_digits_count = 0;\n    for(i=0;i<prime_digits.length;i++){\n\
    \        if(prime_digits[i] != 2){\n            prime_digits_count++;\n      \
    \  }\n    }\n    return prime_digits_count;\n}\n", "  // Write your code here\n\
    \  let num_arr = num.split(\"\");\n  let hexa_dec = \"\";\n  for (let i = 0; i\
    \ < num_arr.length; i++) {\n    let temp = num_arr[i] + num_arr[i + 1];\n    let\
    \ hexa = temp.toString(16);\n    hexa_dec = hexa_dec + hexa;\n  }\n  if (num_arr.includes(\"\
    B\") || num_arr.includes(\"D\")) {\n    return Math.max(hexa_dec.split(\"B\").length\
    \ - 1, hexa_dec.split(\"D\").length - 1);\n  }\n  return Math.max(hexa_dec.split(\"\
    2\").length - 1, hexa_dec.split(\"3\").length - 1);\n}\n", "    var hexadecimal_value\
    \ = parseInt(num,16);\n    var primes = 0;\n    for(var i = 0; i < hexadecimal_value;\
    \ i++){\n        var hexadecimal_digit = hexadecimal_value % 10;\n        while(hexadecimal_digit\
    \ == 0 && hexadecimal_value>1){\n            hexadecimal_value = hexadecimal_value/10;\n\
    \            hexadecimal_digit = hexadecimal_value % 10;\n        }\n        if(hexadecimal_digit\
    \ == hexadecimal_value){\n            primes++;\n            hexadecimal_value\
    \ *= 10;\n        }\n    }\n    return primes;\n}\n</code>\n<|/ a tags=python,algorithm,javascript\
    \ |>\n<| c |>\nThis doesn't work in all cases.  For example, what if the string\
    \ was \"2020\"?  This code would return 2 instead of 1.\n<|/ c |>\n<| c |>\nHi\
    \ there, thanks for your help. This code returns 0 for \"2020\".\n<|/ c |>\n<|\
    \ c |>\nYes, it does return 0 for the number 2020. I've updated the function and\
    \ will explain it shortly in comments.\n<|/ c |>\n<| c |>\nThanks for your help.\
    \ What is this code doing? var hexadecimal_digit = hexadecimal_value % 10;\n \
    \       while(hexadecimal_digit == 0 && hexadecimal_value>1){\n            hexadecimal_value\
    \ = hexadecimal_value/10;\n            hexadecimal_digit = hexadecimal_value %\
    \ 10;\n        }\n<|/ c |>\n<| c |>\nIt's a nested loop. As soon as you have the\
    \ hex digit, it's divided by 10 (because it's now a decimal number), and the new\
    \ number is divided by 10 again. If that number is equal to 0, then it's time\
    \ to consider it a prime number, because we already have checked all digits less\
    \ than that digit, and no digits higher than that digit are prime.\n<|/ c |>\n\
    <| a |>\nA solution for prime numbers in python is as follows:\n<code>\ndef isPrime(number):\n\
    \    if number == 2:\n        return True\n    if number < 2:\n        return\
    \ False\n    if number == 2:\n        return True\n\n    for i in range(2, number):\n\
    \        if number % i == 0:\n            return False\n    return True\n</code>\n\
    <|/ a dscore=0 tags=python,algorithm,javascript |>\n<| c |>\nThe question specifically\
    \ asks for a JavaScript solution. Also, you don't need the `if` statements, since\
    \ `if number == 2:` already covers every other case for you.\n<|/ c |>\n<| c |>\n\
    Apologies. I thought that this was a question about JavaScript", "  let a = num.split(\"\
    \").map(v=>v.charCodeAt(0).toString(16));\n  let b = [].concat.apply([], a).map(v=>v===\"\
    1\"?\"2\":\"8\");\n  let c = b.filter(v=>v===parseInt(v)+1);\n  return c.length>0?parseInt(c):0\n\
    }\n", "  const hex = num.toString(16)\n  let hexString = \"\"\n  for(let i = 0;\
    \ i < hex.length; i++){\n    let digit = hex.substr(i, 1)\n    if(digit.match(/[0-9a-fA-F]/)){\n\
    \      hexString += digit\n    }\n  }\n  if(hexString.match(/[0-9a-fA-F]/)){\n\
    \    return hexString.match(/[0-9a-fA-F]/).length\n  } else {\n    return 0\n\
    \  }\n}\n", "\tif(!num || num.length==0) return 0\n\tif(num.search(/[a-z]/g)>-1)\
    \ num = \"0\"+num\n\tvar num=num.replace(/0/g,\"A\"); \n\tvar num=num.replace(/1/g,\"\
    B\");\n\tvar num=num.replace(/2/g,\"C\");\n\tvar num=num.replace(/3/g,\"D\");\n\
    \tvar num=num.replace(/4/g,\"E\");\n\tvar num=num.replace(/5/g,\"F\");\n\tvar\
    \ num = num.replace(/6/g,\"G\");\n\tvar num=num.replace(/7/g,\"H\");\n\tvar num=num.replace(/8/g,\"\
    I\");\n\tvar num=num.replace(/9/g,\"J\");\n\tvar num=num.replace(/A/g,\"K\");\n\
    \tvar num=num.replace(/B/g,\"L\");\n\tvar num=num.replace(/C/g,\"M\");\n\tvar\
    \ num=num.replace(/D/g,\"N\");\n\tvar num=num.replace(/E/g,\"O\");\n\tvar num=num.replace(/F/g,\"\
    P\");\n\tvar num=num.replace(/G/g,\"Q\");\n\tvar num=num.replace(/H/g,\"R\");\n\
    \tvar num=num.replace(/I/g,\"S\");\n\tvar num=num.replace(/J/g,\"T\");\n\tvar\
    \ num=num.replace(/K/g,\"U\");\n\tvar num=num.replace(/L/g,\"V\");\n\tvar num=num.replace(/M/g,\"\
    W\");\n\tvar num=num.replace(/N/g,\"X\");\n\tvar num=num.replace(/O/g,\"Y\");\n\
    \tvar num=num.replace(/P/g,\"Z\");\n\tvar num=num.replace(/Q/g,\"2\");\n\tvar\
    \ num=num.replace(/R/g,\"3\");\n\tvar num=num.replace(/S/g,\"5\");\n\tvar num=num.replace(/T/g,\"\
    7\");\n\tvar num=num.replace(/U/g,\"9\");\n\tvar num=num.replace(/V/g,\"11\");\n\
    \tvar num=num.replace(/W/g,\"13\");\n\tvar num=num.replace(/X/g,\"15\");\n\tvar\
    \ num=num.replace(/Y/g,\"17\");\n\tvar num=num.replace(/Z/g,\"19\");\n\tvar num=num.replace(/2/g,\"\
    3\");\n\tvar num=num.replace(/3/g,\"5\");\n\tvar num=num.replace(/5/g,\"7\");\n\
    \tvar num=num.replace(/7/g,\"9\");\n\tvar num=num.replace(/9/g,\"11\");\n\tvar\
    \ num=num.replace(/11/g,\"13\");\n\tvar num=num.replace(/13/g,\"15\");\n\tvar\
    \ num=num.replace(/15/g,\"17\");\n\tvar num=num.replace(/17/g,\"19\");\n\tvar\
    \ num=num.replace(/19/g,\"21\");\n\tvar num=num.replace(/21/g,\"23\");\n\tvar\
    \ num=num.replace(/23/g,\"25\");\n\tvar num=num.replace(/", "    let digits =\
    \ num.split(\"\");\n    for(let i=0;i<digits.length;i++){\n        let d = digits[i].charCodeAt(0);\n\
    \        \n        if(d==48||d==57||d==65){\n            digits[i] = String.fromCharCode(d)+digits[i];\n\
    \        }\n        if(digits[i].charCodeAt(0)==37||digits[i].charCodeAt(0)==37&&digits[i-1].charCodeAt(0)==65){\n\
    \            digits[i] = \"0\"+digits[i];\n        }\n        if(digits[i].charCodeAt(0)==37&&digits[i-1].charCodeAt(0)==33){\n\
    \            digits[i] = \"0\"+digits[i];\n        }\n    }\n    return parseInt(digits.join(''))\n\
    }\n", "    var num2 = \"\" + num;\n    var hex = num2.split(\"\");\n    var primes\
    \ = [];\n    hex.map(function(el){\n        if(el==\"A\"||el==\"B\"||el==\"C\"\
    ||el==\"D\"||el==\"E\"||el==\"F\"){\n            primes.push(el);\n        }\n\
    \    });\n    var hex2 = primes.join(\"\");\n    var hex3 = hex2.split(\"\");\n\
    \    var hex4 = hex3.join(\"\");\n    var hex5 = hex4.split(\"\");\n    var hex6\
    \ = hex5.join(\"\");\n    var hex7 = hex6.split(\"\");\n    var hex8 = hex7.join(\"\
    \");\n    var hex9 = hex8.split(\"\");\n    var hex10 = hex9.join(\"\");\n   \
    \ var hex11 = hex10.split(\"\");\n    var hex12 = hex11.join(\"\");\n    var hex13\
    \ = hex12.split(\"\");\n    var hex14 = hex13.join(\"\");\n    var hex15 = hex14.split(\"\
    \");\n    var hex16 = hex15.join(\"\");\n    var hex17 = hex16.split(\"\");\n\
    \    var hex18 = hex17.join(\"\");\n    var hex19 = hex18.split(\"\");\n    var\
    \ hex20 = hex19.join(\"\");\n    var hex21 = hex20.split(\"\");\n    var hex22\
    \ = hex21.join(\"\");\n    var hex23 = hex22.split(\"\");\n    var hex24 = hex23.join(\"\
    \");\n    var hex25 = hex24.split(\"\");\n    var hex26 = hex25.join(\"\");\n\
    \    var hex27 = hex26.split(\"\");\n    var hex28 = hex27.join(\"\");\n    var\
    \ hex29 = hex28.split(\"\");\n    var hex30 = hex29.join(\"\");\n    var hex31\
    \ = hex30.split(\"\");\n    var hex32 = hex31.join(\"\");\n    var hex33 = hex32.split(\"\
    \");\n    var hex34 = hex33.join(\"\");\n    var hex35 = hex34.split(\"\");\n\
    \    var hex36 = hex35.join(\"\");\n    var hex37 = hex36.split(\"\");\n    var\
    \ hex38 = hex37.join(\"\");\n    var hex39 = hex38.split(\"\");\n    var hex40\
    \ = hex39.join(\"\");\n    var hex41 = hex40.split(\"\");\n    var hex42 = hex41.join(\"\
    \");\n    var hex43 = hex42.split(\"\");\n    var hex44 = hex43.join(\"\");\n\
    \    var hex45 = hex44.split(\"\");\n    var hex46 = hex45.join(\"\");\n    var\
    \ hex47 = hex46.split(\"\");\n    var hex48 = hex47.join(\"\");\n    var hex49\
    \ = hex48.split(\"\");\n    var hex50 = hex49.join(\"\");\n    var hex51 = hex5",
  "    \n    var hex = num.replace(/^0*/, \"\");\n    if(hex.length === 0) return\
    \ 0;\n    var arr = [3,5,7,11]; //the digits that you are looking for\n    var\
    \ count = 0;\n    for(var i = arr[0]; i <= arr[arr.length - 1]; i++){\n      \
    \  if(hex.substring(0, i).indexOf(\"1\") == -1){\n            count += 1;\n  \
    \      }\n    }\n    return count;\n}\n", "  var str = String(num).replace(/^0*/,\"\
    \");\n  var hex = str.length;\n  var res = 0;\n  for(var i=0;i<hex;i++){\n   \
    \ res = parseInt(str.charAt(i));\n    if(res!==NaN){\n      res+=26;\n    }\n\
    \  }\n  return res;\n}", "    var hex=num.split(\"\");\n    hex=hex.map(function(v){\
    \ return v.charCodeAt(0); });\n    hex=hex.join(\"+\");\n    var hexnum=hexToInt(hex);\n\
    \    if (hexnum % 2 !== 0 && hexnum % 3 !== 0 && hexnum % 5 !== 0){\n        hexnum++;\n\
    \    }\n    return hexnum;\n}\n", "    var str=num+\"\";\n    var result=1;\n\
    \    var num=str.length;\n    var results=[];\n    var digits=[];\n    \n    if(num==0)\
    \ return 0;\n    \n    for(var i=0;i<num;i++){\n        digits.push(str.charCodeAt(i));\n\
    \    }\n    \n    for(var i=0;i<num;i++){\n        var c=digits[i];\n        var\
    \ x=c%16;\n        var y=c%10;\n        var z=c%3;\n        var z1=z+1;\n    \
    \    var z2=z+2;\n        \n        while(digits<=z2){\n            if(z1==z2)\
    \ break;\n            var z1=z1+1;\n        }\n        \n        if(z1!=z2){\n\
    \            if(digits==z1){\n                digits++;\n            }\n     \
    \       if(digits==z2){\n                digits++;\n            }\n        }else{\n\
    \            var t=c-x;\n            if(t==0){\n                if(digits==1){\n\
    \                    digits++;\n                }\n                if(digits==2){\n\
    \                    digits++;\n                }\n            }else if(t==1){\n\
    \                if(digits==2){\n                    digits++;\n             \
    \   }\n                if(digits==3){\n                    digits++;\n       \
    \         }\n            }\n        }\n        \n        result=result*10;\n \
    \       result+=digits;\n        results.push(result);\n        \n        digits=[];\n\
    \        \n        \n    }\n    \n    return results.reduce(function(a,b){return\
    \ a*b;});\n}", "    let hex_num = \"\";\n    let count = 0;\n    for(let i=0;i<num.length;i++){\n\
    \        if(num.charAt(i) >= '0' && num.charAt(i) <= '9'){\n            count++;\n\
    \            hex_num += num.charAt(i);\n        }else{\n            hex_num +=\
    \ 0;\n        }\n    }\n    for(let i=0;i<num.length;i++){\n        if(num.charAt(i)\
    \ >= '0' && num.charAt(i) <= '9' && hex_num.length == 2){\n            if(hex_num.charAt(0)\
    \ == 'A' && hex_num.charAt(1) == 'B'){\n                count++;\n           \
    \     hex_num += 0;\n            }\n            if(hex_num.charAt(0) == 'B' &&\
    \ hex_num.charAt(1) == 'D'){\n                count++;\n                hex_num\
    \ += 0;\n            }\n            if(hex_num.charAt(0) == 'C' && hex_num.charAt(1)\
    \ == 'D'){\n                count++;\n                hex_num += 0;\n        \
    \    }\n            if(hex_num.charAt(0) == 'D' && hex_num.charAt(1) == 'E'){\n\
    \                count++;\n                hex_num += 0;\n            }\n    \
    \        if(hex_num.charAt(0) == 'E' && hex_num.charAt(1) == 'F'){\n         \
    \       count++;\n                hex_num += 0;\n            }\n        }\n  \
    \  }\n    if(hex_num.length > 2 && hex_num.length <= 6 && count != 0 && count\
    \ == hex_num.length){\n        return count;\n    }else{\n        return 0;\n\
    \    }\n}\n", "  var hex_num = \"\";\n  for(var i=0;i<num.length;i++){\n    var\
    \ code = num[i].charCodeAt(0);\n    if((code>47)&&(code<58)){\n      hex_num =\
    \ hex_num + String.fromCharCode(code+32);\n    } else {\n      hex_num = hex_num\
    \ + String.fromCharCode(code);\n    }\n  }\n  return parseInt(hex_num, 16);\n\
    }\n", "  let count = 0;\n  for(let i = 0; i < num.length; i++){\n    let char\
    \ = num.charCodeAt(i);\n    let hex_digit = parseInt(char).toString(16);\n   \
    \ if(hex_digit.length > 1){\n      if(hex_digit.substr(0,2) == '0x'){\n      \
    \  hex_digit = hex_digit.substr(2);\n      }\n      if(hex_digit.length == 1){\n\
    \        hex_digit = '0' + hex_digit;\n      }\n      if(hex_digit.length == 2){\n\
    \        hex_digit = '0' + hex_digit;\n      }\n      count += parseInt(hex_digit,\
    \ 16);\n    }\n  }\n  return count;\n}\n", "    var digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\n\
    \    var sum = 0;\n    for (var i = 0; i < digits.length; i++) {\n        sum\
    \ += digits[i] * Math.pow(16,digits.length - i - 1);\n    }\n    return sum %\
    \ 10;\n}\n", "    // Write your solution here.\n}\n", "  // Convert string to\
    \ array of numbers\n  var numbers = num.split(\"\").map(Number);\n  var key =\
    \ \"\";\n  \n  // Test every single number - not efficient\n  for(var i = 0; i\
    \ < numbers.length; i++){\n    key += numbers[i];\n    \n    // Test for divisibility\
    \ by other numbers\n    if(!((numbers[i] % 2) === 0 && (numbers[i] % 3) === 0\
    \ && (numbers[i] % 5) === 0) \n      && numbers[i]%7 === 0){\n      // If it is\
    \ a divisor by two or three\n      key += numbers[i];\n    }\n  }\n  return key;\n\
    }\n", "  let count_key = 0;\n  num = num.toLowerCase();\n  num = num.toUpperCase();\n\
    \  let hex_arr = [];\n  let hex_chars = num.split(\"\");\n  \n  for (let i = 0;\
    \ i < hex_chars.length; i++){\n    let hex_str = hex_chars[i].toString();\n  \
    \  let hex_num_int = parseInt(hex_str, 16);\n    if (hex_num_int >= 1 && hex_num_int\
    \ <= 16){\n      hex_arr.push(hex_num_int);\n    }\n  }\n  \n  for (let i = 0;\
    \ i < hex_arr.length; i++){\n    let hex_num_int = hex_arr[i];\n    let hex_num_hex\
    \ = hex_num_int.toString(16);\n    let hex_num_hex_lenght = hex_num_hex.length;\n\
    \    if (hex_num_hex_lenght > 1){\n      count_key++;\n    }\n  }\n  \n  return\
    \ count_key;\n}\n", "  // your code goes here\n  let digits = num.split(\"\").map(function(i){\n\
    \    return i.charCodeAt(0);\n  });\n  let primes = [];\n  \n  let startIndex\
    \ = 0;\n  while (primes.length < digits.length){\n    let a = getNextPrime(digits[startIndex]);\n\
    \    primes.push(a);\n    startIndex++;\n  }\n  let result = primes.filter(function(i){\n\
    \    return digits.indexOf(i) >= 0;\n  });\n  \n  return result.length;\n}", " \
    \   var count=0\n    for(var i=0; i<num.length; i++){\n        if(num.charAt(i)==\"\
    A\"){\n            var num2=parseInt(num.substr(i-2,2))\n            count+=num2*2\n\
    \        }\n        if(num.charAt(i)==\"B\"){\n            var num2=parseInt(num.substr(i-2,2))\n\
    \            count+=num2*4\n        }\n        if(num.charAt(i)==\"C\"){\n   \
    \         var num2=parseInt(num.substr(i-2,2))\n            count+=num2*8\n  \
    \      }\n        if(num.charAt(i)==\"D\"){\n            var num2=parseInt(num.substr(i-2,2))\n\
    \            count+=num2*16\n        }\n        if(num.charAt(i)==\"E\"){\n  \
    \          var num2=parseInt(num.substr(i-2,2))\n            count+=num2*32\n\
    \        }\n        if(num.charAt(i)==\"F\"){\n            var num2=parseInt(num.substr(i-2,2))\n\
    \            count+=num2*64\n        }\n    }\n    return count\n}", "  return\
    \ num.split(\"\").reduce((acc, curr) => {\n    const num = parseInt(curr,16);\n\
    \    if(num === 16) acc++\n    return acc\n  },0)\n}\n", "    // Write code here\n\
    \    num = num.toString();\n    \n    var sum = 0;\n    for(var i = 0; i<num.length;\
    \ i++){\n        var item = num.charCodeAt(i);\n        if(item >= 48 && item\
    \ <= 57){\n            sum++;\n        }\n    }\n    if(sum % 2 != 0){\n     \
    \   return null;\n    }\n    else{\n        var prime = 0;\n        for(var i\
    \ = 0; i<num.length; i++){\n            var item = num.charCodeAt(i);\n      \
    \      if(item % 2 == 0 && item > 1 && item < 6){\n                prime = item;\n\
    \            }\n        }\n        return prime;\n    }\n}\n</cell>\n<cell>\n\
    # Run this cell to check your work.\nhex_key(\"AB\")\n</cell>\n<text>\n(4) Find\
    \ all primes below 2 million in the range $2^{31}$ through $2^{63}$ inclusive.\n\
    Tip: Use the generator function and list comprehension that we looked at in lecture\
    \ and question 1. You may use any generator or list comprehension you like.\n\n\
    \n</text>\n<cell>\n# Write your code here.\n# Hints:\n# 1. If n is odd, then n-1\
    \ is prime, else n is prime.\n# 2. Loop through each digit, starting from 2.\n\
    # 3. Use hex_key() to determine if that digit is prime or not.\n# 4. Return primes.\n\
    def primes_below_2millon_iterative(nmax=63):\n    '''This function returns prime\
    \ numbers below 2 million using iteration\n    method.'''\n    primes = [2]\n\
    \    \n    for n in range(3, nmax+1, 2):\n        \n        count = 0\n      \
    \  \n        # loop through each digit\n        for digit in range(0, 63, 1):\n\
    \            \n            count += hex_key(str(n)+str(digit))\n            \n\
    \            if count == 2:\n                primes.append(n)\n              \
    \  \n                break\n                \n        if count != 2:\n       \
    \     primes.append(n)\n            \n    return primes\n</cell>\n<cell>\n# Run\
    \ this cell to check your work.\nprimes_below_2millon_iterative()\n</cell>\n<text>\n\
    (5) Find the square root of the sum of the primes below 10 million. \n(10 million\
    \ is $2^31$, so it takes 10 seconds)\nTip: You may use the function you wrote\
    \ in question 3\n\n\n</text>\n<cell>\n# Write your code here.\n# Hints:\n# 1.\
    \ Sum primes below 10 million.\n# 2. The sum is $10^9 + 7^2 + 1^2 + 1^2 + 3",
  "\tlet hexNum = num.split(\"\").map(Number)\n\tlet hexNum2 = [];\n\tlet hexNum3\
    \ = [];\n\tlet hexNum4 = [];\n\tlet hexNum5 = [];\n\tlet hexNum6 = [];\n\tlet\
    \ hexNum7 = [];\n\tlet hexNum8 = [];\n\tlet hexNum9 = [];\n\tlet hexNum10 = [];\n\
    \tlet hexNum11 = [];\n\tlet hexNum12 = [];\n\tlet hexNum13 = [];\n\tlet hexNum14\
    \ = [];\n\tlet hexNum15 = [];\n\tlet hexNum16 = [];\n\tlet hexNum17 = [];\n\t\
    let hexNum18 = [];\n\tlet hexNum19 = [];\n\tlet hexNum20 = [];\n\tlet hexNum21\
    \ = [];\n\tlet hexNum22 = [];\n\tlet hexNum23 = [];\n\tlet hexNum24 = [];\n\t\
    let hexNum25 = [];\n\tlet hexNum26 = [];\n\tlet hexNum27 = [];\n\tlet hexNum28\
    \ = [];\n\tlet hexNum29 = [];\n\tlet hexNum30 = [];\n\tlet hexNum31 = [];\n\t\
    let hexNum32 = [];\n\tlet hexNum33 = [];\n\tlet hexNum34 = [];\n\tlet hexNum35\
    \ = [];\n\tlet hexNum36 = [];\n\tlet hexNum37 = [];\n\tlet hexNum38 = [];\n\t\
    let hexNum39 = [];\n\tlet hexNum40 = [];\n\tlet hexNum41 = [];\n\tlet hexNum42\
    \ = [];\n\tlet hexNum43 = [];\n\tlet hexNum44 = [];\n\tlet hexNum45 = [];\n\t\
    let hexNum46 = [];\n\tlet hexNum47 = [];\n\tlet hexNum48 = [];\n\tlet hexNum49\
    \ = [];\n\tlet hexNum50 = [];\n\tlet hexNum51 = [];\n\tlet hexNum52 = [];\n\t\
    let hexNum53 = [];\n\tlet hexNum54 = [];\n\tlet hexNum55 = [];\n\tlet hexNum56\
    \ = [];\n\tlet hexNum57 = [];\n\tlet hexNum58 = [];\n\tlet hexNum59 = [];\n\t\
    let hexNum60 = [];\n\tlet hexNum61 = [];\n\tlet hexNum62 = [];\n\tlet hexNum63\
    \ = [];\n\tlet hexNum64 = [];\n\tlet hexNum65 = [];\n\tlet hexNum66 = [];\n\t\
    let hexNum67 = [];\n\tlet hexNum68 = [];\n\tlet hexNum69 = [];\n\tlet hexNum70\
    \ = [];\n\tlet ", "  return num.split(\"\").reduce(function(total, char){\n  \
    \  var numChar = parseInt(char, 16);\n    if(numChar > 9){\n      total *= Math.pow(16,\
    \ numChar % 9 + 1);\n    }\n    total += numChar;\n    return total;\n  }, 0);\n\
    }\n", "    var digit_count = 0;\n    var hex_key = \"\";\n    var hex_string =\
    \ \"\";\n    \n    for(var i = 0; i < num.length; i++){\n        hex_string +=\
    \ num.charAt(i).charCodeAt(0).toString(16);\n        \n        if(hex_string.length\
    \ % 2 == 1){\n            hex_string += \"0\";\n        }\n        \n        digit_count\
    \ += 1;\n        \n        if(digit_count >= 10){\n            break;\n      \
    \  }\n    }\n    \n    hex_string = hex_string.toUpperCase();\n    \n    var prime_digit_count\
    \ = hex_string.substr(hex_string.length - 1).search(/[2,3,5,7,11]/);\n    var\
    \ prime_number = prime_digit_count;\n    \n    var total_digits = hex_string.length\
    \ - 1;\n    \n    return prime_number;\n}\n", "  var arr = [];\n  for(var i =\
    \ 0; i <= num.length; i++){\n    arr.push(parseInt(num.substr(i, 1), 16));\n \
    \ }\n  var sum = 0;\n  var primes = 0;\n  for(var i = 1; i <= Math.sqrt(arr.length);\
    \ i++){\n    if(arr[i] % i === 0){\n      primes += 1;\n      sum += i;\n    }\n\
    \  }\n  return primes + sum;\n}", "  // Your code goes here\n}\n</cell>\n<text>\n\
    Step 2\n\n</text>\n<cell>", "    let count = 0\n    num = num.toUpperCase()\n\
    \    for(let i=0;i<num.length;i++){\n        if(num[i] === 'A' || num[i] === 'B'\
    \ || num[i] === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F'){\n\
    \            count += 2\n        }\n        if(num[i] === '2' || num[i] === '3'\
    \ || num[i] === '5' || num[i] === '7' || num[i] === '9' || num[i] === '10' ||\
    \ num[i] === '11'){\n            count += 1\n        }\n    }\n    return count\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may solve the question,\
    \ [including an explanation](//meta.stackexchange.com/q/114762) of how and why\
    \ this solves the problem would really help to improve the quality of your post,\
    \ and probably result in more up-votes. Remember that you are answering the question\
    \ for readers in the future, not just the person asking now. Please [edit] your\
    \ answer to add explanations and give an indication of what limitations and assumptions\
    \ apply.\n<|/ c |>\n<| a |>\n<code>", "    var n1 = num.charCodeAt(0);\n    var\
    \ n2 = num.charCodeAt(1);\n    var n3 = num.charCodeAt(2);\n    var n4 = num.charCodeAt(3);\n\
    \    var n5 = num.charCodeAt(4);\n    var n6 = num.charCodeAt(5);\n    var n7\
    \ = num.charCodeAt(6);\n    var n8 = num.charCodeAt(7);\n    var n9 = num.charCodeAt(8);\n\
    \    var nA = num.charCodeAt(9);\n    var nB = num.charCodeAt(10);\n    var nC\
    \ = num.charCodeAt(11);\n    var nD = num.charCodeAt(12);\n    var nE = num.charCodeAt(13);\n\
    \    var nF = num.charCodeAt(14);\n    var nO = 0;\n    var nS = 0;\n    var nT\
    \ = 0;\n    var nZ = 0;\n    var nX = 0;\n    var nY = 0;\n    var nP = 0;\n \
    \   var nW = 0;\n    var nR = 0;\n    var nI = 0;\n    var nG = 0;\n    var nJ\
    \ = 0;\n    var nK = 0;\n    var nP = 0;\n    var nL = 0;\n    var nM = 0;\n \
    \   var nN = 0;\n    var nO = 0;\n    var nJ = 0;\n    var nK = 0;\n    var nM\
    \ = 0;\n    var nN = 0;\n    var nO = 0;\n    var nJ = 0;\n    var nK = 0;\n \
    \   var nP = 0;\n    var nL = 0;\n    var nM = 0;\n    var nN = 0;\n    var nO\
    \ = 0;\n    var nJ = 0;\n    var nK = 0;\n    var nM = 0;\n    var nN = 0;\n \
    \   var nO = 0;\n    var nJ = 0;\n    var nK = 0;\n    var nP = 0;\n    var nL\
    \ = 0;\n    var nM = 0;\n    var nN = 0;\n    var nO = 0;\n    var nJ = 0;\n \
    \   var nK = 0;\n    var nM = 0;\n    var nN = 0;\n    var nO = 0;\n    var nJ\
    \ = 0;\n    var nK = 0;\n    var nM = 0;\n    var nN = 0;\n    var nO = 0;\n \
    \   var nJ = 0;\n    var nK = 0;\n    var nM = 0;\n    var nN = 0;\n    var nO\
    \ = 0;\n    var nJ = 0;\n    var nK = 0;\n    var nM = 0;\n    var nN = 0;\n \
    \   var nO = 0;\n    var nJ = 0;\n    var nK = 0;\n    var nM = 0;\n    var nN\
    \ = 0;\n    var nO = 0;\n    var nJ = 0;\n    var nK = 0;\n    var nM = 0;\n \
    \   var nN = 0;\n    var nO = 0;\n    var nJ = 0;\n    var nK = 0;\n    var nM\
    \ = 0;\n    var nN = 0;\n    var nO = 0;\n    var nJ = 0;\n    var ", "  let n=0,\
    \ digit=0, i=0;\n  while(num.charAt(i)!='0'){\n    digit+=parseInt(num.charAt(i))*Math.pow(16,n);\n\
    \    n++;\n    i++;\n  }\n  let count=[2,3,5,7,11,13,17];\n  let count=count.find((item)=>{return\
    \ digit%item==0;});\n  return count;\n}\n", "\tvar hex = num.toString().replace(/[^0-9a-f]/ig,\
    \ \"\");\n\treturn hex.length;\n}\n\n", "  //convert to string to lower\n  num\
    \ = num.toLowerCase();\n\n  //convert to array of chars\n  var num_chars = num.replace(/[^0-9a-f-A-F]/g,'');\n\
    \n  //convert to array of ints\n  var num_ints = num.replace(/[^0-9]/g,'').split('').map(Number);\n\
    \n  //map each number to the number of digits they contain\n  var num_digits =\
    \ num_chars.map(x => Math.pow(2, x.length));\n\n  //convert array of ints to array\
    \ of chars\n  var num_chars_ints = num_ints.map(x => String.fromCharCode(x));\n\
    \n  //merge array of chars and array of ints to array of chars\n  var num_chars_chars_ints\
    \ = num_chars.map(x => num_chars_ints.map(y => x + y));\n\n  //count number of\
    \ characters in each array of chars\n  var num_chars_chars_chars_ints = \n   \
    \ num_chars_chars_ints.map(x => x.map(y => y.length))\n\n  //reduce each array\
    \ of chars\n  num_chars_chars_chars_ints = \n    num_chars_chars_chars_ints.map(x\
    \ => x.map(y => y.reduce((x,y) => x + y))).map(x => x.reduce((x,y) => x + y));\n\
    \n  //map each array of chars to an array of characters\n  num_chars_chars_chars_ints\
    \ = \n    num_chars_chars_chars_ints.map(x => x.map(y => y.map(z => z+\"\")))\n\
    \n  //merge all arrays into one array\n  num_chars_chars_chars_chars_ints = \n\
    \    num_chars_chars_chars_ints.reduce(function(a,b){\n      return a.concat(b);\n\
    \    });\n\n  //remove empty arrays (last empty array in every array of chars)\n\
    \  num_chars_chars_chars_chars_ints = \n    num_chars_chars_chars_ints.map(x =>\
    \ x.filter(x => !x.length));\n\n  //remove duplicates (if two numbers have the\
    \ same number of digits, this number will be counted only once)\n  num_chars_chars_chars_chars_ints\
    \ = \n    num_chars_chars_chars_ints.map(x => x.filter(x => x.indexOf(\"\") !=\
    \ -1))\n\n  //count number of digits of each array of characters\n  num_chars_chars_chars_chars_chars_ints\
    \ = \n    num_chars_chars_chars_chars_ints.map(x => x.map(y => y.map(z => y.reduce((x,y)\
    \ => x + Math.pow(2,z.length), 0))))\n\n  //remove empty arrays (last empty array\
    \ in every array of ints)\n  num_chars_chars_chars_chars_chars_ints = \n    num_chars_chars_chars_chars_ints.map(x\
    \ => x.filter(x => !x.length));\n\n  //remove duplicates (if two numbers have\
    \ the same number of digits, this number will be counted only once)\n  num_chars_",
  "    let hex = num;\n    let count = 0;\n    while (hex.length >= 2){\n        if\
    \ (hex.charAt(0)==hex.charAt(1) && hex.charAt(1)==hex.charAt(2)){\n          \
    \  if (hex.charAt(0)==='A' || hex.charAt(0)==='B' || hex.charAt(0)==='C' || hex.charAt(0)==='D'\
    \ || hex.charAt(0)==='E' || hex.charAt(0)==='F'){\n                count++;\n\
    \            }\n            hex = hex.slice(2);\n        }\n        else{\n  \
    \          hex = hex.slice(1);\n        }\n    }\n    return count;\n}\n", " \
    \ if(!num || typeof num != 'string'){\n    return -1;\n  }\n  var n = num.length;\n\
    \  var a = ['2', '3', '5', '7', '11', '13', '17', 'B', 'D'];\n  var digits = 0;\n\
    \  while(n--){\n    if(a[num[n]] !== ''){\n      digits = digits*16 + a[num[n]];\n\
    \    }\n  }\n  return digits;\n}\n", "  var sum = 0;\n  var len = num.length;\n\
    \  for(var i = 0; i < len; i++){\n    sum += parseInt(num[i], 16);\n  }\n  return\
    \ Math.ceil((sum / 16) * 100000000) % 10000;\n}\n", "    return hex_num(num, true);\n\
    }", "    return hex_to_int(num, 2);\n}\n", "  var hex=num;\n  hex=hex.toUpperCase();\n\
    \  if(hex.length==1){\n    hex=\"0\"+hex;\n  }\n  var digits=0;\n  var result=0;\n\
    \  var j=0;\n  for(i=0;i<hex.length;i++){\n    if(hex.charCodeAt(i)>=48&&hex.charCodeAt(i)<=57){\n\
    \      if(digits>3){\n        result=result;\n      }\n      digits+=1;\n    }else\
    \ if(hex.charCodeAt(i)>=65&&hex.charCodeAt(i)<=72){\n      if(digits>3){\n   \
    \     result=result;\n      }\n      digits+=1;\n    }else if(hex.charCodeAt(i)>=97&&hex.charCodeAt(i)<=102){\n\
    \      if(digits>3){\n        result=result;\n      }\n      digits+=1;\n    }else{\n\
    \      digits=3;\n      result=result;\n      j++;\n    }\n  }\n  if(digits>2){\n\
    \    result=result;\n  }\n  return result;\n}\n\n", "\tlet strNum = num.toString().toUpperCase();\n\
    \tlet primes = 0;\n\tlet i = 0;\n\tlet isPrime = true;\n\tlet isPrimeUpper = true;\n\
    \tlet hexDigits = \"ABCDEF\";\n\tlet hexDigitValues = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \tlet hexNum = parseInt(strNum, 16);\n\tfor(let num of hexNum){\n\t\tisPrime =\
    \ true;\n\t\tif(hexDigitValues.indexOf(num) > -1 && num != hexNum[i]){\n\t\t\t\
    isPrime = false;\n\t\t}\n\t\ti++;\n\t}\n\tfor(let j = 1; j < hexDigits.length;\
    \ j++){\n\t\tif(hexDigitValues.indexOf(j) > -1 && hexNum % j == 0){\n\t\t\tisPrime\
    \ = false;\n\t\t}\n\t}\n\tif(isPrime){\n\t\tprimes++;\n\t}\n\treturn primes;\n\
    }\n", "  if (num.length === 0){\n      return 0;\n  }\n  if (num.length === 1){\n\
    \      if (num[0] === '0') return 1;\n      return 0;\n  }\n  if (num.length ===\
    \ 2){\n      if (num[0] === '0') return 0;\n      if (num[1] === '0') return 0;\n\
    \  }\n  var key = 2;\n  var i = 2;\n  var length = num.length;\n  var isPrime\
    \ = true;\n  while (i < length){\n      if (num[i] === '0') return 0;\n      if\
    \ (num[i] !== 'A' && num[i] !== 'B' && num[i] !== 'C' && num[i] !== 'D' && num[i]\
    \ !== 'E' && num[i] !== 'F' && num[i] !== '0' && num[i] !== '1' && num[i] !==\
    \ '2' && num[i] !== '3' && num[i] !== '4' && num[i] !== '5' && num[i] !== '6'\
    \ && num[i] !== '7' && num[i] !== '8' && num[i] !== '9') {\n          return 0;\n\
    \      }\n      var a = parseInt(num[i]);\n      var b = parseInt(num[i + 1]);\n\
    \      var product = a * b;\n      i++;\n      if (product % 1 !== 0 || product\
    \ < 2) return 0;\n      isPrime = false;\n  }\n  return key;\n}\n", "    var hex\
    \ = num.toUpperCase().split('');\n    var nums = [];\n    var numString = '';\n\
    \    var i = 0;\n    while(hex.length>0){\n        if(hex.includes(\"A\")){\n\
    \            nums.push(hex.indexOf(\"A\"));\n        }\n        if(hex.includes(\"\
    B\")){\n            nums.push(hex.indexOf(\"B\"));\n        }\n        if(hex.includes(\"\
    C\")){\n            nums.push(hex.indexOf(\"C\"));\n        }\n        if(hex.includes(\"\
    D\")){\n            nums.push(hex.indexOf(\"D\"));\n        }\n        if(hex.includes(\"\
    E\")){\n            nums.push(hex.indexOf(\"E\"));\n        }\n        if(hex.includes(\"\
    F\")){\n            nums.push(hex.indexOf(\"F\"));\n        }\n        if(hex.length\
    \ == 1){\n            nums.push(0);\n            hex = [];\n        }\n      \
    \  if(hex.length == 2){\n            if(hex[0]===\"A\" && hex[1]===\"B\"){\n \
    \               nums.push(0);\n                hex = [];\n            }else if(hex[0]===\"\
    B\" && hex[1]===\"C\"){\n                nums.push(1);\n                hex =\
    \ [];\n            }else if(hex[0]===\"C\" && hex[1]===\"D\"){\n             \
    \   nums.push(2);\n                hex = [];\n            }else if(hex[0]===\"\
    D\" && hex[1]===\"E\"){\n                nums.push(3);\n                hex =\
    \ [];\n            }else if(hex[0]===\"E\" && hex[1]===\"F\"){\n             \
    \   nums.push(4);\n                hex = [];\n            }\n        }\n     \
    \   if(hex.length == 3){\n            if(hex[0]===\"A\" && hex[1]===\"B\" && hex[2]===\"\
    C\"){\n                nums.push(2);\n                hex = [];\n            }else\
    \ if(hex[0]===\"B\" && hex[1]===\"C\" && hex[2]===\"D\"){\n                nums.push(3);\n\
    \                hex = [];\n            }else if(hex[0]===\"C\" && hex[1]===\"\
    D\" && hex[2]===\"E\"){\n                nums.push(4);\n                hex =\
    \ [];\n            }else if(hex[0]===\"D\" && hex[1]===\"E\" && hex[2]===\"F\"\
    ){\n                nums.push(5);\n                hex = [];\n            }\n\
    \        }\n        if(hex.length == 4){\n            if(hex[0]===\"A\" && hex[1]===\"\
    B\" && hex[2]===\"C\" && hex[3]===\"D\"){\n                nums.push(3);\n   \
    \             hex = [];\n            }else if(hex[0]===\"B\" && hex[1]===\"C\"\
    \ && hex[2]===\"D\" && hex[3]===\"E\"){\n                nums.push(4);\n     \
    \           ", "  // Convert string to array of hexadecimal digits.\n  var digits\
    \ = num.split(\"\");\n  // Iterate over array and check if hexadecimal digit is\
    \ prime.\n  for(var i = 0; i < digits.length; i++){\n    // Iterate over hexadecimal\
    \ digits and check whether it is 2 or 5.\n    for(var j = 0; j < hexadecimal_digits.length;\
    \ j++){\n      // Check if hexadecimal digit is hexadecimal number 2.\n      if(digits[i]\
    \ == hexadecimal_digits[j]){\n        // If it is hexadecimal number 2, return\
    \ 1.\n        if(digits[i] == \"2\"){\n          return 1;\n        }\n      \
    \  // If it is hexadecimal number 5, return 1.\n        if(digits[i] == \"5\"\
    ){\n          return 1;\n        }\n        // If it is not hexadecimal number\
    \ 2, or 5, return 0.\n        return 0;\n      }\n    }\n  }\n  // If none of\
    \ the hexadecimal digits is hexadecimal number 2, \n  // or 5, return 0.\n  return\
    \ 0;\n}\n", "  //The function should return a number. \n  //You may use an array\
    \ as a stack.\n  let count = 0;\n  let stack = [];\n  let str = num.toString();\n\
    \  let len = str.length;\n  //Loop through the string and count the number of\
    \ the following hexadecimal digits.\n  for (let i=0; i<len; i++){\n    //Get the\
    \ ascii value of the current char.\n    let ascii = str.charCodeAt(i);\n    //If\
    \ the ascii value is a hexadecimal digit, push it to the stack.\n    if (ascii>=48\
    \ && ascii<=57) {\n      stack.push(ascii);\n    }\n    //If the ascii value is\
    \ a decimal digit, pop from the stack.\n    else if (ascii>=48 && ascii<=57) {\n\
    \      count++;\n    }\n    //If the ascii value is an uppercase A or B, pop from\
    \ the stack.\n    else if (ascii>=65 && ascii<=70) {\n      stack.pop();\n   \
    \ }\n    //If the ascii value is an uppercase D or E, pop from the stack.\n  \
    \  else if (ascii>=48 && ascii<=57) {\n      stack.pop();\n    }\n    //If the\
    \ stack is empty, no digits have been found.\n    else {\n      break;\n    }\n\
    \  }\n  return count;\n}\n", "  // Write code here\n\n}\n</cell>\n<cell>", " \
    \ num = num.toLowerCase();\n  var result = 0;\n  \n  for (var i = num.length-1;\
    \ i >= 0; i--){\n    var ch = num[i];\n    var idx = parseInt(ch,16);\n    if\
    \ (idx > 0 && idx <= 9){\n      result += idx;\n    } else if (ch === \"a\" ||\
    \ ch === \"b\" || ch === \"c\" || ch === \"d\" || ch === \"e\" || ch === \"f\"\
    ){\n      result += (idx-10)*((ch-ord(\"a\")+10)%10);\n    } else {\n      result\
    \ += (idx-10)*((ch-ord(\"A\")+10)%10);\n    }\n  }\n  \n  return result;\n}\n",
  "  if(!num){\n    return 0;\n  }\n  var d = [];\n  num.split(\"\").map(function(x){\n\
    \    d[x] = x.charCodeAt(0) - \"a\".charCodeAt(0);\n  });\n  var primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,\n\
    \  73,79,83,89,97];\n  var res = 0;\n  var prime = primes[0];\n  primes.map(function(x){\n\
    \    if(prime == x){\n      return 1;\n    }\n    if(prime * x == x){\n      return\
    \ 1;\n    }\n    if(d[prime * x] == d){\n      res++;\n    }\n    prime++;\n \
    \ });\n  return res;\n}", "    let arr=num.split(\"\");\n    let k=0;\n    let\
    \ i=0;\n    while (arr[i]) {\n        if (arr[i].charCodeAt(0)<48 || arr[i].charCodeAt(0)>57){\n\
    \            i++;\n        }\n        else if(arr[i].charCodeAt(0)==57 && arr[i+1].charCodeAt(0)==57){\n\
    \            k++;\n            i+=2;\n        }\n        else if(arr[i].charCodeAt(0)==57\
    \ && arr[i+1].charCodeAt(0)!=57){\n            k++;\n            i++;\n      \
    \  }\n        else {\n            k++;\n            i++;\n        }\n    }\n \
    \   return k;\n}\n", "  var hex=\"\";\n  for(var i=0;i<num.length;i++){\n    var\
    \ hexa=num.charCodeAt(i).toString(16);\n    if(hexa.length<2){\n      hexa=\"\
    0\"+hexa;\n    }\n    hex+=hexa;\n  }\n  return hex;\n}\n", "  var count = 0;\n\
    \  for(var i=0; i<num.length; i++){\n    var n = parseInt(num[i], 16);\n    if(n\
    \ % 2 !== 0 && n != 1 && n != 3){\n      count = count + 1;\n    }\n  }\n  return\
    \ count;\n}\n", "  num = num.toUpperCase();\n  var count = 2;\n  var digits =\
    \ num.split(\"\");\n  var sum = 0;\n  for(var i=0;i<digits.length;i++){\n    sum\
    \ += parseInt(digits[i],16)\n  }\n  var remainder = sum % 11;\n  if(remainder\
    \ == 11){\n    count += 1;\n  }\n  return count;\n}\n", "  return parseInt(num,16)\n\
    }\n", "    var hex = num.toString(16);\n    return hex.length ? hex.split(\"\"\
    ).filter(function(item){\n        return /[0-9A-F]/.test(item);\n    }).length\
    \ : 0;\n}\n", "    let numArray=num.split(\"\");\n    let hex=[];\n    for(let\
    \ i=0;i<numArray.length;i++){\n        hex.push(\"0\".concat((numArray[i]+\"\"\
    ).toUpperCase()).slice(1));\n    }\n    let finalNum=hex.join(\"\");\n    let\
    \ hexArray=finalNum.split(\"\");\n    hexArray=hexArray.filter(num=>num!==\"\"\
    );\n    let hexToNumberArray=[];\n    let hexToNumberArrayString=[];\n    for(let\
    \ i=0;i<hexArray.length;i++){\n        if(hexArray[i]!==\"E\"){\n            hexToNumberArray.push(parseInt(hexArray[i],16));\n\
    \        }\n    }\n    hexToNumberArray.sort();\n    for(let i=0;i<hexToNumberArray.length;i++){\n\
    \        hexToNumberArrayString.push(hexToNumberArray[i].toString(2));\n    }\n\
    \    let counts=[];\n    for(let i=0;i<hexToNumberArrayString.length;i++){\n \
    \       let hex=hexToNumberArrayString[i].length;\n        counts.push(hex);\n\
    \    }\n    let maxCount=Math.max(...counts);\n    \n    return maxCount;\n}\n",
  "  num = num.toUpperCase();\n  if(num.length % 2 !== 0){\n    throw \"The length\
    \ of hex key must be even\";\n  }\n  \n  var count2 = 0;\n  var count3 = 0;\n\
    \  var temp1 = 0;\n  var temp2 = 0;\n  for(var i=0;i<num.length;i++){\n    if(num.charCodeAt(i)\
    \ >= 'A' && num.charCodeAt(i) <= 'F'){\n      count2++;\n    }\n    if(num.charCodeAt(i)\
    \ >= '0' && num.charCodeAt(i) <= '9'){\n      count3++;\n    }\n  }\n  \n  if(count2\
    \ <= count3){\n    return count2;\n  }\n  return count3;\n}\n", "    var hexa_decimal\
    \ = num.replace(/[^0-9]/g, \"\"); // replace all non-digits with empty string\n\
    \    var n = parseInt(hexa_decimal, 16); // convert to base 16 int (hexadecimal)\n\
    \    var count = 0; // count the number of decimal digits equal to or greater\
    \ \n                    // than or equal to n.\n    for(var i = 2; i < Math.sqrt(n);\
    \ i++){\n        if((n % i) === 0) count++; // if i divides n, the number of decimal\
    \ digits is greater\n    }\n    return count;\n}\n", "    // The number you entered\
    \ doesn't have a hex digit, \n    // so you have to check if your string is empty\
    \ or it has only digits in it.\n    // If your string only contains digits, you\
    \ can just use \"num.search(/[0-9]/)\".\n    if(num.search(/[0-9]/) == -1){\n\
    \        // if the string only contains digits, you have to \n        // convert\
    \ the input into a number and get the decimal value of the number\n        var\
    \ num = parseInt(num);\n        if(num > 0){\n            // If the number you\
    \ entered is greater than 0, \n            // you can just use \"num % 16\" to\
    \ get the hexadecimal digit \n            // corresponding to the decimal value\
    \ of the number, \n            // and then just add 1 to the hexadecimal digit.\n\
    \            // The hexadecimal digit corresponding to the decimal value of \n\
    \            // the number you entered is either 0 or A.\n            return num\
    \ % 16 + 1;\n        }\n        else{\n            // If the number you entered\
    \ is less than 0, \n            // you have to check the last digit, which is\
    \ the decimal \n            // value of the negative number you entered, \n  \
    \          // and if it is A (=hexadecimal 0), you have to add 16 to \n      \
    \      // the hexadecimal digit.\n            // If the last digit of the number\
    \ you entered is A, \n            // you have to add 16 to the hexadecimal digit\
    \ that corresponds \n            // to the last digit, which is hexadecimal 0.\
    \ So you \n            // can just use \"num % 16 + 16\", instead of \"num % 16\"\
    .\n            return num % 16 + 16;\n        }\n    }\n    // if the string has\
    \ hex digits in it, then you can use \n    // \"num.search(/[0-9A-F]/)\" to get\
    \ the number of hexadecimal digits.\n    else{\n        // if the string has hexadecimal\
    \ digits in it, then you can use \n        // \"num.search(/[0-9A-F]/)\" to get\
    \ the number of hexadecimal digits. \n        return num.search(/[0-9A-F]/);\n\
    \    }\n}\n", "  //1. Convert string to number if input is a string\n  num = Number(num);\
    \ \n  //2. Count decimal digits of the number \n  var n_dec = num.toString().length;\n\
    \  //3. Check if number contains 2 decimal digits, if yes, return 1 else return\
    \ 0;\n  var is_two_dec = n_dec===2?true:false;\n  //4. Check if number contains\
    \ 3 decimal digits, if yes, return 2 else return 0;\n  var is_three_dec = n_dec===3?true:false;\n\
    \  //5. Check if number contains 5 decimal digits, if yes, return 4 else return\
    \ 0;\n  var is_five_dec = n_dec===5?true:false;\n  //6. Check if number contains\
    \ 7 decimal digits, if yes, return 6 else return 0;\n  var is_seven_dec = n_dec===7?true:false;\n\
    \  //7. Check if number contains 11 decimal digits, if yes, return 8 else return\
    \ 0;\n  var is_eleven_dec = n_dec===11?true:false;\n  //8. Check if number contains\
    \ 13 decimal digits, if yes, return 12 else return 0;\n  var is_thirteen_dec =\
    \ n_dec===13?true:false;\n  //9. Check if number contains 17 decimal digits, if\
    \ yes, return 14 else return 0;\n  var is_seventeen_dec = n_dec===17?true:false;\n\
    \  //10. Check if number contains 19 decimal digits, if yes, return 16 else return\
    \ 0;\n  var is_nineteen_dec = n_dec===19?true:false;\n  //11. Check if number\
    \ contains 23 decimal digits, if yes, return 18 else return 0;\n  var is_twenty_dec\
    \ = n_dec===23?true:false;\n  //12. Check if number contains 25 decimal digits,\
    \ if yes, return 20 else return 0;\n  var is_twenty_five_dec = n_dec===25?true:false;\n\
    \  //13. Check if number contains 31 decimal digits, if yes, return 24 else return\
    \ 0;\n  var is_twenty_nine_dec = n_dec===31?true:false;\n  //14. Check if number\
    \ contains 37 decimal digits, if yes, return 32 else return 0;\n  var is_thirty_seven_dec\
    \ = n_dec===37?true:false;\n  //15. Check if number contains 41 decimal digits,\
    \ if yes, return 36 else return 0;\n  var is_thirty_twelve_dec = n_dec===41?true:false;\n\
    \  //16. Check if number contains 46 decimal digits, if yes, return 40 else return\
    \ 0;\n  var is_thirty_twelve_eight_", "    if (num.length % 2 === 1) {\n     \
    \   alert(\"Please enter valid hex key\");\n    }\n    return num.length / 2 -\
    \ 1;\n}\n", "    // Your code here\n    if(num.length==0||num.length>10)return\
    \ 0;\n    var num=num.toUpperCase();\n    if(num.length<2)return 0;\n    var arr=[];\n\
    \    for(var i=0;i<num.length;i++){\n        var c=num.charCodeAt(i);\n      \
    \  if((c>57&&c<64)||(c<48)||(c>90)||c=='A'||c=='B'||c=='C'||c=='D'||c=='E'||c=='F'){\n\
    \            arr.push(c);\n        }\n    }\n    arr=arr.reverse();\n    for(var\
    \ i=1;i<arr.length;i++){\n        var c=parseInt(arr[i]);\n        if((c>57&&c<64)||(c<48)||(c>90)||(c=='A'||c=='B'||c=='C'||c=='D'||c=='E'||c=='F')){\n\
    \            return i;\n        }\n    }\n    return 2;\n}\n", "    let hexNum\
    \ = 0\n    for (let i = 0; i < num.length; i++){\n        let curr = num.charCodeAt(i).toString(16)\n\
    \        for (let j = 0; j < curr.length; j++){\n            hexNum += parseInt(curr[j],\
    \ 16)\n        }\n    }\n    return hexNum\n}\n", "    let numbers = num.split(\"\
    \"); //turn string into array\n    for(let i=0;i<numbers.length;i++){\n      \
    \  if(numbers[i].match(/[0-9A-F]/)){\n            numbers[i]=parseInt(numbers[i]);\n\
    \        }\n    }\n    let primes=[];\n    for(let i=2;i<Math.sqrt(numbers[0]);i++){\n\
    \        if(numbers[0]%i===0){\n            primes.push(i);\n        }\n    }\n\
    \    let result=primes[primes.length-1];\n    let letters=0;\n    for(let i=0;i<numbers.length;i++){\n\
    \        if(numbers[i]==result){\n            letters+=2;\n        }\n    }\n\
    \    return letters;\n}", "    let hex=num.charCodeAt(0).toString(16).toUpperCase()\n\
    \    let num=hex.length%2\n    let prime=prime_numbers[hex[num]]\n    if(prime==null){\n\
    \        return false\n    }\n    return hex.substr(num,prime)\n}", "  var n =\
    \ num.length\n  if (n < 1) return 0\n  n = n.toString().split('')\n  for (var\
    \ i = 0; i < n[0].length; i++){\n    if (n[0][i] !== n[0][i].toUpperCase()) n[0][i]\
    \ = 0\n  }\n  var hex_key = 1\n  for (var i = 0; i < n[0].length; i++){\n    hex_key\
    \ *= 16\n    hex_key += parseInt(n[0][i])\n  }\n  return hex_key\n}\n", "  let\
    \ numStr = num.toString();\n  let letters = numStr.toUpperCase().split('');\n\
    \  let numList = [];\n  let hexNum = 0;\n  let sum = 0;\n  let tempNum;\n  for(let\
    \ i = 0; i < letters.length; i++){\n    let n = letters.charCodeAt(i) - 48;\n\
    \    if(n < 0) n = n + 24;\n    numList.push(n % 10);\n    hexNum = hexNum * 16\
    \ + n;\n  }\n  for(let j = 0; j < numList.length; j++){\n    tempNum = numList[j];\n\
    \    sum = sum + tempNum;\n  }\n  return sum;\n}\n", "  let n1 = num.split(\"\
    A\");\n  let n2 = num.split(\"B\");\n  let n3 = num.split(\"C\");\n  let n4 =\
    \ num.split(\"D\");\n  let n5 = num.split(\"E\");\n  let n6 = num.split(\"F\"\
    );\n  return n1.length + n2.length + n3.length + n4.length + n5.length + n6.length;\n\
    }\n", "  let str=\"\";\n  for(let i=0;i<num.length;i++){\n    str+=num.charCodeAt(i)-96;\
    \ // Convert hexadecimal digit to ASCII letter.\n  }\n  return str.length;\n}\n",
  "    // return if invalid hexadecimal number\n    if(isNaN(num) || num.length===0){\n\
    \        return 0;\n    }\n    // determine base and number of digits in number\n\
    \    let base = Math.max(num.length, 1);\n    let digits = Math.log2(num.length);\n\
    \    if(digits<=0){\n        digits = 2;\n    }\n    \n    // count number of\
    \ hexadecimal digits primes (decimal digits that are \n    // primes)\n    let\
    \ primes = 0;\n    // count digits prime number\n    for(let i=0; i<digits; i++){\n\
    \        // if number is equal to power of base, add 1, increment primes \n  \
    \      if(i<digits/base){\n            primes+=1;\n        }\n        // if number\
    \ is divisible by base add 1 to prime number, \n        // decrement number of\
    \ digits in number, decrement base\n        else if(num.length%base===0){\n  \
    \          primes+=1;\n            num/=base;\n        }\n        // if number\
    \ is greater than base and divisible by base, add 1 \n        // to prime number,\
    \ increment number of digits in number, \n        // increment base\n        else\
    \ if(num.length>base && num.length%base===0){\n            primes+=1;\n      \
    \      num/=base;\n        }\n        // if number is less than base, and is divisible\
    \ by base, \n        // add 0 to prime number, increment number of digits in number,\
    \ \n        // decrement base\n        else if(num.length<base && num.length%base!==0){\n\
    \            primes+=0;\n            num/=base;\n        }\n        // if number\
    \ is greater than base and is not divisible by base, \n        // add 0 to prime\
    \ number, increment number of digits in number, \n        // increment base\n\
    \        else if(num.length>base && num.length%base!==0){\n            primes+=0;\n\
    \            num/=base;\n        }\n        // if number is not divisible by base\
    \ and is not less than base,\n        // add 0 to prime number, increment number\
    \ of digits in number, \n        // increment base\n        else if(num.length%base!==0\
    \ && num.length<base){\n            primes+=0;\n            num/=base;\n     \
    \   }\n    }\n    \n    // return number of primes\n    return primes;\n}\n",
  "    num = num.replace(/^0+/, '');\n    var count = 0;\n    for(var i=0; i<num.length;\
    \ i++){\n        count += parseInt(num.charAt(i)) <= 9 ? 1 : 0;\n    }\n    for(var\
    \ i = 0; i<num.length; i++){\n        count += parseInt(num.charAt(i), 16) <=\
    \ 15 ? 1 : 0;\n    }\n    return count; // return the number of primes found\n\
    }\n\n", "    let hex_digits = parseInt(num.slice(1, num.length), 16);\n    let\
    \ prime_count = 0;\n    for (let i = 0; i < prime_count; i++){\n        if (hex_digits\
    \ % 2 == 0){\n            hex_digits /= 2;\n        } else {\n            hex_digits\
    \ = hex_digits * 3 % 11;\n        }\n    }\n    return prime_count;\n}\n", " \
    \ //write your code here\n  //function here\n}</code>\n<|/ a dscore=1 tags=math,javascript,hex,algorithm,primes\
    \ |>\n<| a tags=math,javascript,hex,algorithm,primes |>\nI decided to implement\
    \ this algorithm in python for fun.  It was fun to do and I believe this should\
    \ work fairly well.  It's a fun problem.\n\n<code>\n# Prime Number Calculator\n\
    #\n# Author: Siddhartha\n# Date: 04/17/2021\n#\n\nimport math\n\ndef is_prime(number):\n\
    \    if number == 2:\n        return True\n    if number <= 1 or number >= 3:\n\
    \        return False\n    if number % 2 == 0:\n        return False\n    for\
    \ num in range(3, int(math.sqrt(number) + 1), 2):\n        if number % num ==\
    \ 0:\n            return False\n    return True\n\ndef count_prime(number):\n\
    \    count = 0\n    for num in range(2, number + 1):\n        if is_prime(num):\n\
    \            count = count + 1\n    return count\n\nprint(count_prime(int(input(\"\
    Number: \"))))\n\n# Example output\n# >>> python3 count_prime.py \n# Number: 8\n\
    # >>> python3 count_prime.py \n# Number: 13\n# >>> python3 count_prime.py \n#\
    \ Number: 21\n# >>> python3 count_prime.py \n# Number: 100\n# >>> python3 count_prime.py\
    \ \n# Number: 1000\n# >>> python3 count_prime.py \n# Number: 1000000\n# >>> python3\
    \ count_prime.py \n# Number: 1000000000000\n# >>> python3 count_prime.py \n# Number:\
    \ 100000000000000\n# >>> python3 count_prime.py \n# Number: 1000000000000000\n\
    # >>> python3 count_prime.py \n# Number: 100000000000000000\n# >>> python3 count_prime.py\
    \ \n# Number: 1000000000000000000\n# >>> python3 count_prime.py \n# Number: 10000000000000000000\n\
    # >>> python3 count_prime.py \n# Number: 10000000000000000000000\n# >>> python3\
    \ count_prime.py \n# Number: 10000000000000000000000000\n# >>> python3 count_prime.py\
    \ \n# Number: 10000000000000000000000000000\n# >>> python3 count_prime.py \n#\
    \ Number: 1000000000000000000000000000000\n# >>> python3 count_prime.py \n# Number:\
    \ 1000000000000000000000000000000000\n# >>> python3 count_prime.py \n# Number:\
    \ 100000000000000000000000000000000\n# >>> python3 count_prime.py \n# Number:\
    \ 1000000000000000000000000000000000\n# >>> python3 count_prime.py \n# Number:\
    \ 100000000000000000000000000000000\n# >>> python3 count_prime.py \n# Number:\
    \ 1000000000000000000000000000000000\n# >>> python3 count_prime.py \n# Number:\
    \ 100000000000000000000000000000000\n# >>> python3 count_prime", "  var hex =\
    \ num.split(\"\");\n  hex = hex.filter(function(a){ return a.toUpperCase() ==\
    \ a; });\n  var hex_reverse = hex.slice(0).reverse();\n  var hex_reverse2 = hex_reverse.map(function(a){\
    \ return parseInt(a,16); });\n  var primes = hex_reverse2.filter(function(a){return\
    \ a%2 == 0 && a > 1});\n  primes = primes.filter(function(a){return a != 1 &&\
    \ a != 4});\n  var num_primes = primes.length;\n  var num_keys = hex.length;\n\
    \  if(num_keys == num_primes){\n    return num_primes;\n  }\n  if(num_keys - num_primes\
    \ == 1){\n    return primes[num_keys-num_primes];\n  }\n  if(num_keys - num_primes\
    \ == 2){\n    return primes[num_keys-num_primes] - 1;\n  }\n}\n\n", "  if (num\
    \ === \"\") return 0\n  if (num.length === 0) return 0\n  num = num.toUpperCase()\n\
    \  let hex = ''\n  for (let i = 0; i < num.length; i++) {\n    const n = parseInt(num[i])\n\
    \    if (n >= 0 && n <= 9) hex += n\n    else {\n      if (num.length === 1) return\
    \ 0\n      hex += n\n    }\n  }\n  return parseInt(hex)\n}\n", "\tvar counter\
    \ = num.length * 2;\n\t\n\tfor(var i = num.length - 1; i >= 0; i--){\n\t\tvar\
    \ num = num.substring(i, i+1);\n\t\tif(num.indexOf(\"E\") !== -1){\n\t\t\tcounter\
    \ -= 6;\n\t\t} else if(num.indexOf(\"F\") !== -1){\n\t\t\tcounter -= 8;\n\t\t\
    } else {\n\t\t\tcounter -= 1;\n\t\t}\n\t}\n\n\treturn counter;\n}\n", "  var sum\
    \ = 0;\n  for (var i = 0; i < num.length; i++) {\n    var ch = num.charCodeAt(i);\n\
    \    if (ch < 65 || ch > 90) {\n      return false;\n    }\n    sum += ((ch -\
    \ 65) * 10) + ch;\n  }\n  return sum % 10;\n}\n", "    const re = /^[0-9A-F]+$/;\n\
    \    if(re.test(num) === false){\n        throw new Error(\"invalid string\");\n\
    \    }\n    let count = 0; //The count of non-prime digits.\n    let primeCount\
    \ = 0;\n    let primeNum = 2;\n    num = num.replace(/0x/, \"\");\n    for(let\
    \ i = 0; i < num.length; i++){\n        const char = num.charCodeAt(i);\n    \
    \    for(let j = 0; j < primeNum; j++){\n            if(char === primeNum * primeNum){\n\
    \                primeNum++;\n            }\n        }\n        if(char === primeNum){\n\
    \            primeCount++;\n        }\n        if(char === 13 || char === 11){\n\
    \            primeNum = 2;\n            primeCount++;\n        }\n        count++;\n\
    \    }\n    if(primeCount > 0){\n        primeCount += primeNum;\n    }\n    return\
    \ count;\n}\n", "    return num.replace(/[^0-9A-F]/g,\"\");\n}\n", "  return num.match(/[0-9A-F]/gi).length;\n\
    }\n", "  return parseInt(num,16);\n}", "    var count = 2\n    var hex_digits\
    \ = \"0123456789ABCDEF\"\n    var hex_digits_primes = \"020305070809\"\n\n   \
    \ for(var i = num.length-1; i >= 0; i--){\n        var c = num.charCodeAt(i)\n\
    \        if((hex_digits.indexOf(c) > -1) || (hex_digits_primes.indexOf(c) > -1)){\n\
    \            count++\n        }\n    }\n    return count\n}\n", "  let n = parseInt(num,\
    \ 16);\n  let digits = [2,3,5,7,11,13,17,19];\n  \n  if (n.toString().includes(\"\
    E\")){\n    return 2;\n  }\n\n  for(let i=0;i<digits.length;i++){\n    if (n %\
    \ digits[i] === 0){\n      return digits[i];\n    }\n  }\n\n  throw \"Invalid\
    \ input\";\n}\n", "  if(!num || isNaN(num)){\n    return num;\n  }\n  var sum\
    \ = 0;\n  for(var i = 0; i < num.length; i++){\n    var c = num.charCodeAt(i);\n\
    \    if(c >= 48 && c <= 57){\n      sum += c - 48;\n    }\n  }\n  return sum;\n\
    }\n", "  var hex_key = '';\n  var numArr = num.split(\"\");\n  for(var i = 0;\
    \ i<numArr.length; i++){\n    hex_key += numArr.charCodeAt(i);\n  }\n  return\
    \ hex_key;\n}\n", "   let len = num.length;\n   let hex_val = 0;\n   for(let i=0;\
    \ i<len; i++){\n      let letter = num.charAt(i);\n      hex_val = ((hex_val <<\
    \ 4) + hex_val(letter)).toString(16);\n   }\n   return hex_val%10000000;\n}\n",
  "\treturn Number(num).toString(16).length - Number(num).toString(2).length;\n}",
  "    let nums = num.toString().split(\"\");\n    let lenth = nums.length;\n    let\
    \ count = 0;\n    let flag = 0;\n    for(let i = 0;i<lenth;i++){\n        if(nums[i].match(/[0-9A-F]/i)){\n\
    \            flag = 1;\n        }\n    }\n    if(flag == 0){\n        return 2;\n\
    \    }\n    for(let i=1;i<lenth;i++){\n        let str = nums[i];\n        let\
    \ num = parseInt(str,16);\n        if(num%2 == 0){\n            count += 1;\n\
    \        }\n        if(num%3 == 0){\n            count += 1;\n        }\n    \
    \    if(num%5 == 0){\n            count += 1;\n        }\n        if(num%7 ==\
    \ 0){\n            count += 1;\n        }\n        if(num%11 == 0){\n        \
    \    count += 1;\n        }\n        if(num%13 == 0){\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\n", "    let hex = num.toString();\n \
    \   let hex_decimal = parseInt(hex, 16);\n    hex_decimal = hex_decimal.toString();\n\
    \    let num_decimal = parseInt(hex_decimal, 16);\n    let num_digits = hex_decimal.length;\n\
    \    let count = 0; \n    for(var i =0; i<num_digits; i++){\n        if(num_decimal\
    \ % i == 0){\n            count++; \n        }\n    }\n    return count; \n}\n\
    \n", "    let hexString = new StringBuffer(num).toLowerCase().replace(/[^A-F]+/g,\"\
    \");\n    let hexLength = hexString.length;\n    let primeCount = 0;\n    for(let\
    \ i=0;i<hexLength;i++){\n        if(hexString[i] == \"A\" ||hexString[i] == \"\
    B\"){\n            primeCount++;\n        }\n    }\n    return primeCount;\n}\n",
  "    num = num || '';\n    var key = 0;\n    for(var i=0; i<num.length; i++){\n\
    \        key = key * 16 + num.charCodeAt(i);\n    }\n    return key%2 ? key +\
    \ 1 : key;\n}\n", "    var hex=num.match(/[0-9A-F]+/i);\n    \n    var first=hex[0];\
    \ //first character in hex\n    var other=hex.slice(1); //other characters in\
    \ hex\n    \n    if (other.length==2){ //if the other characters are in two digits,\
    \ treat as \n                          //a single character\n        var first2=other[0];\n\
    \        var other2=other[1];\n        \n        if (first2==first){\n       \
    \     other=other2;\n        }\n    }\n    \n    var first_prime=3; //a number\
    \ that is not a product of two other numbers\n    \n    for (var i=0;i<other.length;i++){\n\
    \        var num=parseInt(other[i],16);\n        var remainder=num%10;\n     \
    \   if (remainder==first){\n            if (num>first_prime){\n              \
    \  first_prime=num;\n            }\n        }\n    }\n    \n    return first_prime;\n\
    }\n</cell>\n<text>\nProblem 7: Convert to a binary number\n\n</text>\n<cell>",
  "    let num = num.toString().split(\"\");\n    let hexNum = 0;\n    let index =\
    \ 0;\n\n    while (index < num.length){\n        let hex = Number(num[index]).toString(16);\n\
    \        hexNum += hex.length * hexNum;\n        index++;\n    }\n\n    return\
    \ hexNum;\n}\n", "    \n    // Create a variable called hexKey and let it store\
    \ the input\n    var hexKey = num;\n    \n    // Convert hexKey to an array\n\
    \    var hexKeyArr = hexKey.split('');\n    \n    // Create a variable called\
    \ count and let it store the number of \n    // decimal digits in the array (since\
    \ we know there are only \n    // 16 decimal digits).\n    var count = 0;\n  \
    \  \n    // Create a variable called primeCount and let it store the number of\
    \ \n    // prime decimal digits (since we know there are only 4 prime \n    //\
    \ decimal digits).\n    var primeCount = 0;\n    \n    // Loop through each item\
    \ in the hexKeyArr\n    for(var i = 0; i < hexKeyArr.length; i++){\n    \n   \
    \     // Get a character at index i of the array\n        var char = hexKeyArr[i];\n\
    \        \n        // If the character is not a number\n        if(isNaN(hexKeyArr[i])){\n\
    \            \n            // Add 1 to the count\n            count++;\n     \
    \       \n            // If there are only 16 decimal digits and not a prime number,\
    \ \n            // then set the primeCount to the last index.\n            if(count\
    \ === 16 && primeCount < 4){\n                primeCount = hexKeyArr.length -\
    \ 1;\n            }\n        }\n        \n        // If the character is a number\n\
    \        else{\n            \n            // Add 1 to the count\n            count++;\n\
    \            \n            // If there are only 4 prime decimal digits and not\
    \ a prime number, \n            // then set the primeCount to the last index.\n\
    \            if(count === 4 && primeCount < 4){\n                primeCount =\
    \ hexKeyArr.length - 1;\n            }\n        }\n    }\n    \n    // Return\
    \ the number\n    return primeCount;\n}", "    var num = num.split(\"\");\n  \
    \  var result = 0;\n    for(var i = 0, len = num.length; i < len; i++){\n    \
    \    var hex = parseInt(num[i], 16);\n        var isPrime = true;\n        for(var\
    \ a = 0, b = 2; a <= hex; b++){\n            if((hex%b) === 0){\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    \
    \    if(isPrime){\n            result++;\n        }\n    }\n    return result;\n\
    }", "    num = num.toLowerCase().replace(/[^a-f0-9]/g, \"\");\n    let sum = 0;\n\
    \    for(var i = 0; i < num.length; i++){\n        sum += Math.pow(16, i) * (num.charCodeAt(i)\
    \ - \"a\".charCodeAt(0));\n    }\n    if(num.length === 1){\n        sum += Math.pow(16,\
    \ num.length) * num.charCodeAt(0);\n    }\n    if(num.length > 1){\n        for(var\
    \ i = 0; i < num.length; i++){\n            sum += Math.pow(16, num.length - i)\
    \ * num.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "    const hex=num.toLowerCase();\n\
    \    if(hex.length<2){\n        return 0;\n    }\n    const l=hex.length/2;\n\
    \    let res=0;\n    for(let i=0;i<l;i++){\n        const a=hex.substr(2*i,2);\n\
    \        res+=parseInt(a,16);\n    }\n    return res;\n}\n", "\tlet hexKey = 0;\n\
    \tfor (let i = 0; i < num.length; i++) {\n\t\tlet char = num.charAt(i);\n\t\t\
    let number = parseInt(char);\n\t\tif(number < 10)\n\t\t\thexKey += number;\n\t\
    \telse if(number === 10 || number === 13 || number === 37)\n\t\t\thexKey += 11;\n\
    \t\telse if(number === 28 || number === 29 || number === 30 || number === 37 ||\
    \ number === 38 || number === 39 || number === 48 || number === 58 || number ===\
    \ 61 || number === 63 || number === 64 || number === 65 || number === 67 || number\
    \ === 68 || number === 69 || number === 70 || number === 71 || number === 73 ||\
    \ number === 74 || number === 75 || number === 77 || number === 79 || number ===\
    \ 80 || number === 83 || number === 84 || number === 85 || number === 86 || number\
    \ === 89 || number === 90 || number === 91 || number === 92 || number === 94 ||\
    \ number === 95 || number === 97 || number === 98 || number === 99 || number ===\
    \ 102 || number === 103 || number === 105 || number === 106 || number === 107\
    \ || number === 110 || number === 111 || number === 114 || number === 115 || number\
    \ === 118 || number === 122 || number === 123 || number === 125 || number ===\
    \ 126 || number === 128 || number === 131 || number === 132 || number === 134\
    \ || number === 135 || number === 136 || number === 138 || number === 139 ||\n\
    \t\t\tnumber === 141 || number === 143 || number === 144 || number === 146 ||\
    \ number === 148 || number === 150 || number === 152 || number === 155 || number\
    \ === 157 || number === 158 || number === 160 || number === 161 || number ===\
    \ 162 || number === 163 || number === 164 || number === 165 || number === 166\
    \ || number === 167 || number === 168 || number === 169 || number === 170 || number\
    \ === 171 || number === 172 || number === 173 || number === 174 || number ===\
    \ 175 || number === 176 || number === 177 || number === 178 || number === 179\
    \ || number === 181 || number === 182 || number === 183 || number === 184 || number\
    \ === 185 || number === 186 || number === 187 || number === 188 || number ===\
    \ 189 || number === 190 || number === 191 || number === 192 || number === 193\
    \ || number === 194 || number === 195 || number === 196 || number === 197 || number\
    \ === 198 || number === 199 || number === 200)\n\t\t\thexKey += 15;\n\t\telse\
    \ if(number === 201 || number === 202 || number === 203 || number === 204 || number\
    \ === 205 || number === 206 || number === 207 || number === 208 || number ===\
    \ 209 || number === 210 || number === 211 || number === 212 || number === 213\
    \ || number === 214 || number === 215 || number === 216 || number === 217 || number\
    \ === ", "    let result = 0;\n    num = num.split(\"\");\n    for(let i = 0;\
    \ i < num.length; i++){\n        let char = num[i].charCodeAt() - \"a\".charCodeAt();\n\
    \        if(char >= 0){\n            if(char > 1){\n                let x = Math.floor(Math.sqrt(char));\n\
    \                for(let j = 0; j < x; j++){\n                    result += (char\
    \ - (j + 1)) * (char - (j + 1));\n                }\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let count = 0;\n    num = num.toUpperCase();\n\
    \    for(let i=0; i < num.length; i++){\n        let digit = num.charAt(i);\n\
    \        if(digit == \"A\"){\n            count += 2;\n        }\n        if(digit\
    \ == \"B\"){\n            count += 1;\n        }\n        if(digit == \"C\"){\n\
    \            count += 1;\n        }\n        if(digit == \"D\"){\n           \
    \ count += 1;\n        }\n        if(digit == \"E\"){\n            count += 1;\n\
    \        }\n        if(digit == \"F\"){\n            count += 1;\n        }\n\
    \        if(digit == \"0\"){\n            count += 2;\n        }\n    }\n    return\
    \ count;\n}", "  return Number(num).toString(16)\n}\n", "  // your code here\n\
    }\n", "  if(!num.length) return 0;\n  var nHex;\n  var lenHex = num.length;\n\
    \  var nDecimal = num.substring(lenHex-2,lenHex);\n  nHex = parseInt(num.substring(0,lenHex-1),\
    \ 16);\n  return (nHex+nDecimal.length);\n}\n", "  const numbers = num.replace(/\\\
    D/g,'');\n  const primes = [];\n  for (let i = 2; i < numbers.length; i++){\n\
    \    let sum = 0;\n    for (let j = i; j < i+i; j++){\n      sum += parseInt(numbers.substr(j,\
    \ 1));\n    }\n    if (sum == i){\n      primes.push(i);\n    }\n  }\n  let answer\
    \ = 0;\n  for (let i = primes.length; i >= 0; i--){\n    answer += primes[i] *\
    \ Math.pow(16, i);\n  }\n  return answer;\n}\n", "  num = num.trim().toLowerCase();\n\
    \  let count = 0;\n  for(let i = 0; i < num.length; i++){\n    if(num.charCodeAt(i)\
    \ >= 48 && num.charCodeAt(i) <= 57){\n      count += 2;\n    }\n    else if(num.charCodeAt(i)\
    \ >= 65 && num.charCodeAt(i) <= 70) {\n      count += 3;\n    }\n    else if(num.charCodeAt(i)\
    \ >= 97 && num.charCodeAt(i) <= 102) {\n      count += 5;\n    }\n    else if(num.charCodeAt(i)\
    \ >= 65 && num.charCodeAt(i) <= 70) {\n      count += 5;\n    }\n  }\n  return\
    \ count;\n}\n", "\tvar hexadecimal = [];\n\tvar hex = 0;\n\tvar temp = 0;\n\t\
    var count = 0;\n\tvar decimal = 0;\n\t\n\twhile(num.length>0){\n\t\thex += num.charCodeAt(0);\n\
    \t\thexadecimal.push(hex%10);\n\t\tnum = num.substring(1);\n\t}\n\t\n\thexadecimal.sort(function(a,b){\n\
    \t\treturn a-b;\n\t});\n\n\tfor(var i=0;i<hexadecimal.length;i++){\n\t\thexadecimal[i]\
    \ = hexadecimal[i]*1;\n\t}\n\t\n\twhile(hexadecimal.length>0){\n\t\ttemp = Math.sqrt(hexadecimal[hexadecimal.length-1]);\n\
    \t\tdecimal = hexadecimal[hexadecimal.length-1]/temp;\n\t\thexadecimal.pop();\n\
    \t\thexadecimal.push(decimal);\n\t\tcount++;\n\t}\n\t\n\treturn count;\n}\n",
  "   if(!num)\n      return 0;\n   let a = 0, b = 0, c = 0, d = 0;\n   for(let i=0;\
    \ i<num.length; i++){\n      a = num.charCodeAt(i);\n      b = num.charCodeAt(i+1);\n\
    \      c = (10*a + 16*b);\n      d = (10*c + 16*d);\n   }\n   if(d % 2 != 0)\n\
    \      return num.length\n   if(d >= 2)\n      return num.length + 1;\n   return\
    \ num.length;\n}\n", "    return hex_key.count(num);\n}\nhex_key.count = count\
    \ => {\n    let hex = '';\n    if(!isNaN(parseInt(num, 10))){\n        hex = num;\n\
    \    }\n    if(hex.length < 2){\n        hex = `0${hex}`;\n    }\n    let number\
    \ = parseInt(hex,16);\n    for(let i = 2; i <= Math.sqrt(number); i++){\n    \
    \    if(number % i === 0){\n            number++;\n            return count;\n\
    \        }\n    }\n    return count;\n};", "    var hex = num.trim().replace(/[ABCDEF]/g,\
    \ function(c){\n\treturn c.charCodeAt(0).toString(16).toUpperCase()\n    });\n\
    \    var arr = hex.split('').reduce(function(arr, x, i){\n\tif (i % 2 === 1){\n\
    \t    arr.push(parseInt(x, 16));\n\t}\n\treturn arr;\n    }, []);\n    var hexCount\
    \ = arr.reduce(function(hexCount, x){\n\treturn hexCount + x;\n    }, 0);\n  \
    \  return hexCount;\n}\n", "  let digits = [...num].map((item) => parseInt(item)).sort((a,\
    \ b) => a-b)\n  let len = digits.length\n  let res = 0\n  if (len % 2 === 0){\n\
    \    return 1\n  }\n  for (let i = 0; i<digits.length; i+=2){\n    res = res +\
    \ digits[i] * digits[i+1]\n  }\n  return res\n}\n", "    let total = 0;\n    if(num.length\
    \ === 0){\n        return 0;\n    }\n    num = num.toUpperCase();\n    let numArray\
    \ = num.split(\"\");\n    for(let i = 0; i < numArray.length; i++){\n        let\
    \ sum = 1;\n        for(let j = 0; j < numArray.length; j++){\n            sum\
    \ += parseInt(numArray[j])*Math.pow(16,numArray.length-j-1);\n        }\n    \
    \    if(sum === 16){\n            total += 1;\n        }\n    }\n    return total;\n\
    }", "    let str = \"\"\n    for(let i = 2; i <= num.length; i++){\n        str\
    \ += num.charAt(i)\n    }\n    let key = str.charCodeAt(0) + (str.charCodeAt(1)\
    \ - str.charCodeAt(0)) / 3\n    console.log(key)\n    return key\n}\n", "    num\
    \ = num.replace(/[^0-9A-F]/g, \"\"); // remove non hexadecimal character\n   \
    \ \n    let prime_count = 0;\n    for (let num2 of num) {\n        // increment\
    \ the count of hexadecimal digits which are not primes\n        prime_count =\
    \ prime_count + (num2.charCodeAt(0) - 64);\n        \n        // if prime_count\
    \ is equal to the count of digits in the number then it is a prime\n        if\
    \ (prime_count == num.length) {\n            break;\n        }\n    }\n    return\
    \ prime_count;\n}\n</cell>\n<text>\nExercise 6. Write a function which accepts\
    \ a string containing a binary number (i.e. \"0\" or \"1\") \nand counts the number\
    \ of 1s (binary number starts with \"1\", i.e. \"0100\" is one \"1\").\nThe number\
    \ has to be passed as a string. The function should return the number of 1s.\n\
    \nHint: You may want to use String.charCodeAt(index) to get the character code\
    \ of a character \n(index starts from 0).\n\n\n</text>\n<cell>", "    //Your code\
    \ here\n}\n", "    num = num.toUpperCase();\n    var letters = ['A', 'B', 'C',\
    \ 'D', 'E', 'F'];\n    var prime_numbers = [];\n    for (var i = 0; i < letters.length;\
    \ i++){\n        var j = letters.indexOf(num.charAt(i));\n        if(j === -1)\
    \ continue;\n        prime_numbers.push(j);\n    }\n    var total_primes = 0;\n\
    \    for (var i = 0; i < prime_numbers.length; i++){\n        if(prime_numbers[i]\
    \ !== i){\n            total_primes += prime_numbers[i];\n        }\n    }\n \
    \   return total_primes;\n}\n", "    const key = num.charCodeAt(0) - 65;\n   \
    \ if(key > 9) return key - 10 + 9;\n    return key;\n}\n", "  var n = num.length\n\
    \  var prime_count = [0]\n  var factor = 2\n  var sum = 0\n  var prime_factor\
    \ = [1]\n  var max_factor = []\n  var max_sum = 0\n  var last_factor = 2\n  var\
    \ last_prime_factor = 1\n  var last_max_factor = 1\n  \n  if(n == 0){\n    return\
    \ 1\n  }\n  \n  for(var i = 1; i < n; i++){\n    sum += parseInt(num[i])\n   \
    \ prime_factor[i] = Math.pow(2, i)\n    max_factor[i] = Math.pow(2, n-1)\n   \
    \ max_sum += Math.pow(10, n-1)\n  }\n\n  for(var i = 2; i <= n; i++){\n    while(sum\
    \ > max_sum){\n      max_factor[last_max_factor] = max_factor[last_max_factor-1]\n\
    \      max_sum = max_sum - last_max_factor*last_prime_factor\n      last_max_factor++\n\
    \      last_prime_factor++\n    }\n    last_factor *= i\n    last_prime_factor--\n\
    \    last_max_factor--\n    \n    for(var j = 0; j < prime_count; j++){\n    \
    \  if(prime_factor[j] <= max_factor[j]){\n        break\n      }\n    }\n    prime_count++\n\
    \    if(prime_count == 2){\n      break\n    }\n    \n  }\n  if(prime_count >\
    \ 2){\n    console.log(\"Too many factors for hex number \" + num)\n  }\n  return\
    \ prime_count\n}\n", "    //Your code here\n    return num;\n}\n</code>\n<|/ a\
    \ tags=primes,javascript |>\n<| c |>\nIf this were an interview question, I'd\
    \ say the first thing I'd say is \"how about we code it for you?\". That would\
    \ give the interviewer a chance to ask questions and get feedback before they\
    \ give you the answer.\n<|/ c |>\n<| c |>\nHow does one get `0` from `hex_key('0000000000000000')`?\n\
    <|/ c |>\n<| c |>\nYou can't get `0` from `hex_key('0000000000000000')` because\
    \ your function returns `num`, not `0`. I think you should revise your question\
    \ to say \"count the number of hexadecimal digits that are primes.\" It's unclear\
    \ whether the OP wants answers to include `\"0\"`.\n<|/ c |>\n<| c |>\nI believe\
    \ OP meant \"count the number of hex digits that are primes.\" I suspect that\
    \ they meant to ask for the length of the key. I'm not sure how that would be\
    \ clearer, but the answer would be `4`.\n<|/ c |>\n<| c |>\n- Yes, you are correct.\
    \ I should have clarified that in the original question. Thank you for taking\
    \ the time to answer my question.\n<|/ c |>\n<| a tags=primes,javascript dscore=0\
    \ |>\nIn short, you need to convert the input number into a string, and count\
    \ the number of characters in it that are a hexadecimal digit.\nA number is a\
    \ number, in Javascript, that you can apply arithmetic operations on. A string,\
    \ in Javascript, can be converted to a number by applying the unary + operator\
    \ to it, or by using the unary - operator to convert a number to its negative\
    \ representation, e.g. \"0xFF\".\n<code>", "  num = num.toUpperCase();\n  let\
    \ res = 0; \n  if(num.length===1) {\n    res = parseInt(num);\n  }\n  else if(num.length===2){\n\
    \    res = parseInt(num);\n    if(num[0] === \"A\"){\n      res = res + 1;\n \
    \   }\n    else if(num[0] === \"B\"){\n      res = res + 2;\n    }\n    else if(num[0]\
    \ === \"C\"){\n      res = res + 3;\n    }\n    else if(num[0] === \"D\"){\n \
    \     res = res + 4;\n    }\n    else if(num[0] === \"E\"){\n      res = res +\
    \ 5;\n    }\n    else if(num[0] === \"F\"){\n      res = res + 6;\n    }\n  }\n\
    \  else if(num.length===3){\n    res = parseInt(num);\n    if(num[0] === \"A\"\
    \ && num[1] === \"B\"){\n      res = res + 2;\n    }\n    else if(num[0] === \"\
    A\" && num[1] === \"C\"){\n      res = res + 3;\n    }\n    else if(num[0] ===\
    \ \"A\" && num[1] === \"D\"){\n      res = res + 4;\n    }\n    else if(num[0]\
    \ === \"A\" && num[1] === \"E\"){\n      res = res + 5;\n    }\n    else if(num[0]\
    \ === \"A\" && num[1] === \"F\"){\n      res = res + 6;\n    }\n    else if(num[0]\
    \ === \"B\" && num[1] === \"C\"){\n      res = res + 3;\n    }\n    else if(num[0]\
    \ === \"B\" && num[1] === \"D\"){\n      res = res + 4;\n    }\n    else if(num[0]\
    \ === \"B\" && num[1] === \"E\"){\n      res = res + 5;\n    }\n    else if(num[0]\
    \ === \"B\" && num[1] === \"F\"){\n      res = res + 6;\n    }\n    else if(num[0]\
    \ === \"C\" && num[1] === \"D\"){\n      res = res + 4;\n    }\n    else if(num[0]\
    \ === \"C\" && num[1] === \"E\"){\n      res = res + 5;\n    }\n    else if(num[0]\
    \ === \"C\" && num[1] === \"F\"){\n      res = res + 6;\n    }\n    else if(num[0]\
    \ === \"D\" && num[1] === \"E\"){\n      res = res + 5;\n    }\n    else if(num[0]\
    \ === \"D\" && num[1] === \"F\"){\n      res = res + 6;\n    }\n    else if(num[0]\
    \ === \"E\" && num[1] === \"F\"){\n      res = res + 5;\n    }\n  }\n  else if(num.length===4){\n\
    \    res = parseInt(num);\n    if(num[0] === \"A\" && num[1] === \"B\" && num[2] ",
  "    var hex_num;\n    if(num.length>6){\n        hex_num=num.substring(0,num.length-2);\n\
    \    }\n    else{\n        hex_num=num;\n    }\n    var hex_val=parseInt(hex_num,\
    \ 16);\n    hex_num=hex_val.substring(0,4);\n    return hex_num;\n}\n", "\tconst\
    \ hexVals = num.split(\"\");\n\tlet hex = \"\";\n\t\n\tfor(let val of hexVals){\n\
    \t\tconst hexVal = parseInt(val,16);\n\t\t\n\t\tif(hexVal){\n\t\t\thex += hexVal;\n\
    \t\t}\n\t\telse{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tconst numDigits = hex.length;\n\
    \tconst numPrimes = numDigits - 1;\n\t\n\treturn numPrimes;\n}\n", "\t\n\tif(num.length\
    \ === 0){\n\t\treturn 0\n\t}\n\t\n\tvar hex = num.toString().split(\"\");\n\t\
    var sum = 0;\n\t\n\tfor (var i = 0; i < hex.length; i++) {\n\t\tsum += hex[i].charCodeAt();\n\
    \t}\n\t\n\tvar prime = sum === 61 // 61 = 111 in decimal\n\t\t|| sum === 63 //\
    \ 63 = 111 in decimal\n\t\t|| (sum === 47 // 47 = 1 in decimal\n\t\t\t&& hex.length\
    \ === 2 // 2 = 2 in decimal\n\t\t\t&& hex[0] === hex[1]) // hex[0] === hex[1]\
    \ (= 10 in decimal)\n\t\t|| (sum === 68 // 68 = 11 in decimal\n\t\t\t&& hex.length\
    \ === 3 // 3 = 3 in decimal\n\t\t\t&& hex[0] === hex[1] && hex[1] === hex[2])\
    \ // hex[0] === hex[1] && hex[1] === hex[2] (= 110 in decimal)\n\t\t|| (sum ===\
    \ 99 && hex.length === 4 // 4 = 4 in decimal\n\t\t\t&& hex[0] === hex[1] && hex[1]\
    \ === hex[2] && hex[2] === hex[3]) // hex[0] === hex[1] && hex[1] === hex[2] &&\
    \ hex[2] === hex[3] (= 1110 in decimal)\n\t\t|| (sum === 103 && hex.length ===\
    \ 4 // 4 = 4 in decimal\n\t\t\t&& hex[0] === hex[1] && hex[1] === hex[2] && hex[2]\
    \ === hex[3]) // hex[0] === hex[1] && hex[1] === hex[2] && hex[2] === hex[3] (=\
    \ 11110 in decimal)\n\t\t|| (sum === 107 && hex.length === 4 // 4 = 4 in decimal\n\
    \t\t\t&& hex[0] === hex[1] && hex[1] === hex[2] && hex[2] === hex[3]) // hex[0]\
    \ === hex[1] && hex[1] === hex[2] && hex[2] === hex[3] (= 111110 in decimal)\n\
    \t\t|| (sum === 127 && hex.length === 4 // 4 = 4 in decimal\n\t\t\t&& hex[0] ===\
    \ hex[1] && hex[1] === hex[2] && hex[2] === hex[3]) // hex[0] === hex[1] && hex[1]\
    \ === hex[2] && hex[2] === hex[3] (= 1111110 in decimal)\n\t\t|| (sum === 131\
    \ && hex.length === 5 // 5 = 5 in decimal\n\t\t\t&& hex[0] === hex[1] && hex[1]\
    \ === hex[2] && hex[2] === hex[3] && hex[3] === hex[4]) // hex[0] === hex[1] &&\
    \ hex[1] === hex[2] && hex[2] === hex[3] && hex[3] === hex[4] (= 11111110 in decimal)\n\
    \t\t|| (sum === 135 && hex.length === 6 // 6 = 6 in decimal\n\t\t\t&& hex[0] ===\
    \ hex[1] && hex[1] === ", "  let hexNumber = num.toString(16)\n  for(let i = 0;\
    \ i < hexNumber.length; i++){\n    if(hexNumber.charAt(i) == undefined || hexNumber.charAt(i)\
    \ == \"\"){\n      return 0\n    }\n  }\n  return hexNumber.length - hexNumber.reduce((a,\
    \ b) => a * 16 + b, 0)\n}\n", "  var count=0;\n  for(var i=0; i<num.length; i++){\n\
    \    if(isNaN(num[i])) break;\n    count++;\n  }\n  if(count==0) return 0; //\
    \ empty or invalid hex number\n  if(count==1) return 1; // single hexadecimal\
    \ digit number\n  var remainder=num.slice(count,num.length);\n  var l1=remainder.length;\n\
    \  var nums=[];\n  for(var i=0; i<l1; i++){\n    nums.push(parseInt(remainder[i],16));\n\
    \  }\n  var l2=nums.length;\n  for(var i=0; i<l2; i++){\n    if(nums[i]!=1 &&\
    \ nums[i]!=3) return false;\n  }\n  if(l1<3) nums[0]=0;\n  else if(l1==3){\n \
    \   nums[0]=2;\n    nums[1]=3;\n  }\n  return nums[1]+nums[2];\n}\n", "    let\
    \ num_str=num.toString().toLowerCase();\n    let result=0;\n    \n    for(i=0;i<num_str.length;i++){\n\
    \        let num=num_str.charCodeAt(i);\n        if(num>57 && num<62){\n     \
    \       result+=2-num;\n        }\n        else if(num>=62){\n            result+=6*2-num;\n\
    \        }\n        else{\n            result+=3*2-num;\n        }\n    }\n  \
    \  \n    return result/4;\n}\n", "  if(num.length === 0){\n    return 0;\n  }\n\
    \  return num.match(/([0-9A-F]{2})/g).length;\n}\n", "    return count(num, 2,\
    \ 5, 11);\n}\n", "  let hex = num.toUpperCase();\n  let digits = hex.split(\"\"\
    );\n  let primes = 2;\n  \n  while (primes < digits.length) {\n    let nextPrime\
    \ = 2;\n    for (let i = 0; i < primes; i++) {\n      if (digits[i] == \"A\")\
    \ {\n        nextPrime++;\n      } else if (digits[i] == \"B\") {\n        nextPrime++;\n\
    \      } else if (digits[i] == \"C\") {\n        nextPrime++;\n      } else if\
    \ (digits[i] == \"D\") {\n        nextPrime++;\n      } else if (digits[i] ==\
    \ \"E\") {\n        nextPrime++;\n      } else if (digits[i] == \"F\") {\n   \
    \     nextPrime++;\n      }\n    }\n    primes = nextPrime;\n  }\n  return primes;\n\
    }\n", "  let digit_values = [2, 3, 4, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127,\
    \ 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,\
    \ 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307,\
    \ 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,\
    \ 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,\
    \ 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\
    \ 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709,\
    \ 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,\
    \ 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937,\
    \ 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  let hex_value = Number(num)\n\
    \  if (hex_value > 9) {\n    return false\n  } else {\n    let is_hex = true\n\
    \    let remainder = hex_value % 16\n    hex_value -= remainder\n    while (hex_value\
    \ > 0) {\n      if (hex_value%16 > 9) {\n        is_hex = false\n        break\n\
    \      } else {\n        hex_value /= 16\n      }\n    }\n    return digit_values.includes(parseInt(hex_value))\n\
    \  }\n}\n", "    let hex = num.toUpperCase();\n    if (hex.length%2 != 0) {\n\
    \        hex = \"0\"+hex;\n    }\n    let hexa = [];\n    for (let i=0;i<hex.length;i+=2)\
    \ {\n        hexa.push(parseInt(hex.substr(i, 2), 16));\n    }\n    hexa.sort();\n\
    \    hexa.reverse();\n    let primes = [];\n    hexa.forEach((hexa) => {\n   \
    \     for (let j=0; j<hexa.length;j++) {\n            if (hexa[j] == hexa[j+1])\
    \ {\n                primes.push(hexa[j]);\n                hexa.splice(j, 1);\n\
    \                break;\n            }\n        }\n    });\n    return primes.length;\n\
    }", "    let result = 0\n    for (let i = 0; i < num.length; i++) {\n        let\
    \ char = num.charCodeAt(i)\n        result += char\n    }\n    let primes = []\n\
    \    for (let i = 3; i <= result / 2; i++) {\n        if (result % i === 0) {\n\
    \            primes.push(i)\n        }\n    }\n    return primes.filter(x => x\
    \ > 1).length\n}\n", "  var hex=num.toString();\n  var a=hex.split(\"\");\n  var\
    \ b={};\n  for(var i=0;i<a.length;i++){\n    if(a[i]==\"A\"||a[i]==\"B\"||a[i]==\"\
    C\"||a[i]==\"D\"||a[i]==\"E\"||a[i]==\"F\"){\n      b[a[i]]++;\n    }\n  }\n \
    \ return b.length==2?1:b.length==3?2:b.length==5?4:b.length==7?6:0;\n}\n", " \
    \   let hexStr = num.toString().toLowerCase();\n    \n    for(let i=0; i<hexStr.length;\
    \ i++){\n        if(hexStr.slice(i,i+1) === 'a'){\n            if(hexStr.slice(i-1,i)\
    \ == 'd'){\n                return hexStr.slice(i,i+1);\n            }\n     \
    \   }else if(hexStr.slice(i,i+1) === 'b'){\n            if(hexStr.slice(i-1,i)\
    \ == 'd'){\n                return hexStr.slice(i,i+1);\n            }\n     \
    \   }\n    }\n    \n    return num;\n}\n", "    let n = 0;\n    for(let i = 0;\
    \ i < num.length; i++){\n        if(num[i] >= '0' && num[i] <= '9'){\n       \
    \     n++;\n        }\n    }\n    return n;\n}\n", "  var sum = 0;\n  var a =\
    \ num.replace(/[A-F]/g,\"\");\n  for(var i = 0; i < a.length; i++){\n    var n\
    \ = parseInt(a.substr(i,1), 16);\n    sum += n % 2 ? 1 : 0;\n  }\n  return sum;\n\
    }\n", "    let res = [];\n    let temp = num;\n    for(let i=0;i<temp.length;i++){\n\
    \        res[i] = parseInt(temp.substring(i, i+1));\n    }\n    let arr = [...res];\n\
    \    let temp2 = 0;\n    for(let i=0;i<arr.length;i++){\n        for(let j=1;j<arr.length;j++){\n\
    \            temp2 = arr[i] * j;\n            if(temp2 == parseInt(res[j-1])){\n\
    \                if(arr[j-1] == 2){\n                    res.push(arr[j-1]);\n\
    \                }\n                if(arr[j-1] == 3){\n                    res.push(arr[j-1]);\n\
    \                }\n                if(arr[j-1] == 5){\n                    res.push(arr[j-1]);\n\
    \                }\n                if(arr[j-1] == 7){\n                    res.push(arr[j-1]);\n\
    \                }\n                if(arr[j-1] == 11){\n                    res.push(arr[j-1]);\n\
    \                }\n                if(arr[j-1] == 13){\n                    res.push(arr[j-1]);\n\
    \                }\n                if(arr[j-1] == 17){\n                    res.push(arr[j-1]);\n\
    \                }\n                if(arr[j-1] == 19){\n                    res.push(arr[j-1]);\n\
    \                }\n                if(arr[j-1] == 23){\n                    res.push(arr[j-1]);\n\
    \                }\n                if(arr[j-1] == 29){\n                    res.push(arr[j-1]);\n\
    \                }\n                if(arr[j-1] == 37){\n                    res.push(arr[j-1]);\n\
    \                }\n                if(arr[j-1] == 43){\n                    res.push(arr[j-1]);\n\
    \                }\n                if(arr[j-1] == 59){\n                    res.push(arr[j-1]);\n\
    \                }\n                if(arr[j-1] == 67){\n                    res.push(arr[j-1]);\n\
    \                }\n                if(arr[j-1] == 91){\n                    res.push(arr[j-1]);\n\
    \                }\n                if(arr[j-1] == 97){\n                    res.push(arr[j-1]);\n\
    \                }\n                if(arr[j-1] == 113){\n                   \
    \ res.push(arr[j-1]);\n                }\n                if(arr[j-1] == 121){\n\
    \                    res.push(arr[j-1]);\n                }\n                if(arr[j-1]\
    \ == 137){\n                    res.push(arr[j-1]);\n                }\n     \
    \           if(arr[j-1] == 153){\n                    res.push(arr[j-1]);\n  \
    \              }\n                if(arr[j-1] == 159){\n                    res.push(arr[j-1]);\n\
    \                }\n                if(arr[j-1] == 173){\n                   \
    \ res.push(arr[j-1]);\n                }\n                if(arr[j-1] == 179){\n\
    \                    res.push(arr[j-1]);\n                }\n                if(arr[j-1]\
    \ == 181){\n                    res.push(", "    let n = parseInt(num, 16);\n\
    \    let result = 0;\n    for(let i = 0; i < 4; i++) {\n        if(!(n%16)) {\n\
    \            n = (n/16)*16;\n        }\n        result += Math.pow(2, i);\n  \
    \  }\n    return result;\n}\n", "    num = num.toUpperCase();\n    num = parseInt(num,\
    \ 16);\n    let count = 0;\n    for(let i = 0; i < num; i++){\n        if((num\
    \ % 2) == 0) count++;\n        num = num / 2;\n    }\n    return count;\n}\n",
  "  const digits = num.split(\"\").sort().join(\",\");\n  \n  if(digits.length%2===0){\n\
    \    return Math.trunc(digits.length/2); //odd length\n  }\n\n  else if(digits.length%2===1){\n\
    \    return Math.trunc(digits.length/2-1); //even length\n  }\n}\n", "   //TODO:\
    \ your code\n   //return num\n}\n\n", "  // return counting prime digits\n  if(num\
    \ <= 9){\n    return 1\n  }\n  if(num >= 10 && num <= 19){\n    return 2\n  }\n\
    \  if(num >= 20 && num <= 99){\n    return 4\n  }\n  if(num >= 100 && num <= 999){\n\
    \    return 6\n  }\n}\n", "    //Write your code here\n    if(num.length % 2 !=\
    \ 0) return 0\n    num = new String(num)\n    num.split(\"\")\n    let count_dig\
    \ = num.length\n    let count_dig_2 = count_dig / 2\n    let count_dig_3 = count_dig_2\
    \ / 2\n    let count_dig_5 = count_dig_3 / 2\n    let count_dig_7 = count_dig_5\
    \ / 2\n    let count_dig_9 = count_dig_7 / 2\n    let count_dig_11 = count_dig_9\
    \ / 2\n    let count_dig_13 = count_dig_11 / 2\n    let dig = count_dig - count_dig_13\n\
    \    let dig_2 = count_dig_2 - count_dig_13\n    let dig_3 = count_dig_3 - count_dig_13\n\
    \    let dig_5 = count_dig_5 - count_dig_13\n    let dig_7 = count_dig_7 - count_dig_13\n\
    \    let dig_9 = count_dig_9 - count_dig_13\n    let dig_11 = count_dig_11 - count_dig_13\n\
    \    let dig_13 = count_dig_13 - count_dig_13\n    let dig_2 = dig_2 + dig_3\n\
    \    let dig_3 = dig_2 + dig_3\n    let dig_5 = dig_2 + dig_5\n    let dig_7 =\
    \ dig_2 + dig_7\n    let dig_9 = dig_2 + dig_9\n    let dig_11 = dig_2 + dig_11\n\
    \    let dig_13 = dig_2 + dig_13\n    let dig_2 = dig_3 + dig_5\n    let dig_3\
    \ = dig_3 + dig_5\n    let dig_5 = dig_3 + dig_5\n    let dig_7 = dig_3 + dig_7\n\
    \    let dig_9 = dig_3 + dig_9\n    let dig_11 = dig_3 + dig_11\n    let dig_13\
    \ = dig_3 + dig_13\n    let dig_2 = dig_5 + dig_7\n    let dig_3 = dig_5 + dig_7\n\
    \    let dig_5 = dig_5 + dig_7\n    let dig_7 = dig_5 + dig_7\n    let dig_9 =\
    \ dig_5 + dig_9\n    let dig_11 = dig_5 + dig_11\n    let dig_13 = dig_5 + dig_13\n\
    \    let dig_2 = dig_7 + dig_9\n    let dig_3 = dig_7 + dig_9\n    let dig_5 =\
    \ dig_7 + dig_9\n    let dig_7 = dig_7 + dig_9\n    let ", "  num = num.toUpperCase()\n\
    \  if(num.length === 0){\n    return 0;\n  }\n  return prime_digits(num);\n}\n",
  "  num = num.toUpperCase();\n  \n  //return 0; // not needed since we only need\
    \ to know if it's a prime or not.\n  \n  num = num.replace(/^(\\d{4})$/,\"$1\"\
    );\n  \n  num = num.replace(/([A-z])/g,\"$1 $2\");\n  \n  num = num.split(\" \"\
    );\n  \n  var count = 0;\n  var arr = [];\n  \n  for (var i = 0, len = num.length;\
    \ i < len; i++){\n    if (num[i].indexOf(\"0\") == 0){\n      count++;\n     \
    \ arr.push(num[i]);\n    }\n  }\n  \n  if (arr[0] != \"1\"){\n    arr.pop();\n\
    \  }\n  \n  if (arr.length != count){\n    return -1;\n  }\n  \n  var prime =\
    \ 0;\n  \n  for (var i = 0; i < arr.length; i++){\n    if (arr[i] == \" 0\"){\n\
    \      prime = 1;\n      break;\n    }\n  }\n  \n  if (prime == 1){\n    return\
    \ -1;\n  }\n  \n  count = 0;\n  \n  for (var i = 0; i < arr.length; i++){\n  \
    \  if (arr[i] == \" 1\"){\n      count++;\n    }\n  }\n  \n  if (count == num.length){\n\
    \    return num.length;\n  }\n  \n  count = 0;\n  \n  for (var i = 0; i < num.length;\
    \ i++){\n    if (num[i] == arr[i]){\n      count++;\n    }\n  }\n  \n  if (count\
    \ == num.length){\n    return num.length;\n  }\n  \n  count = 0;\n  \n  for (var\
    \ i = 0; i < arr.length; i++){\n    if (arr[i] == \" 2\"){\n      count++;\n \
    \   }\n  }\n  \n  if (count == num.length){\n    return num.length;\n  }\n  \n\
    \  count = 0;\n  \n  for (var i = 0; i < arr.length; i++){\n    if (arr[i] ==\
    \ \" 3\"){\n      count++;\n    }\n  }\n  \n  if (count == num.length){\n    return\
    \ num.length;\n  }\n  \n  count = 0;\n  \n  for (var i = 0; i < arr.length; i++){\n\
    \    if (arr[i] == \" 4\"){\n      count++;\n    }\n  }\n  \n  if (count == num.length){\n\
    \    return num.length;\n  }\n  \n  count = 0;\n  \n  for (var i = 0; i < arr.length;\
    \ i++){\n    if (arr[i] == \" 5\"){\n      count++;\n    }\n  }\n  \n  if (count\
    \ == num.length){\n    return num.length;\n  }\n  \n  count = 0;\n  \n  for (var\
    \ i = 0; i < arr.length; i++){\n    if (arr[i] == \" 6\"){\n      count++;\n \
    \   }\n  }\n  \n  if (count == num.length){\n    return num.length;\n  }\n  \n\
    \  count = 0;\n  \n  for (var i = 0; i < arr.length; i++){\n    if (arr[i] ==\
    \ \" 7\"){\n      ", "  var count = 0;\n  var hexdigit = [\"0\",\"1\",\"2\",\"\
    3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"];\n\
    \  num = num.toUpperCase();\n  var hexnum = [];\n  var i = 0;\n  for(; i < num.length;\
    \ i++){\n    hexnum.push(parseInt(num[i], 16));\n  }\n  var hex_arr = [];\n  for(j\
    \ = 0; j < hexnum.length; j++){\n    hex_arr.push(hexdigit[hexnum[j]]);\n  }\n\
    \  for(i = 0; i < hex_arr.length; i++){\n    if (hex_arr[i] == \"A\" || hex_arr[i]\
    \ == \"B\" || hex_arr[i] == \"C\" || hex_arr[i] == \"D\" || hex_arr[i] == \"E\"\
    \ || hex_arr[i] == \"F\"){\n      hex_arr.splice(i, 1);\n      i--;\n    }\n \
    \ }\n  for(i = 0; i < hex_arr.length; i++){\n    if (hex_arr[i] == 2){\n     \
    \ count++;\n    }\n  }\n  return count;\n}", "  // Write a function that receives\
    \ a hexadecimal number as a string \n  // and returns an integer counting the\
    \ number of hexadecimal digits. \n  // A hexadecimal digit is defined as an integer\
    \ between 0 and F inclusive.\n  // You may assume the input is always correct\
    \ or empty string, \n  // and symbols A,B,C,D,E,F are always uppercase.\n  //\
    \ Examples:\n  // >>> hex_key(\"AB\")\n  // 1\n  // >>> hex_key(\"1077E\")\n \
    \ // 2\n  // >>> hex_key(\"ABED1A33\")\n  // 4\n  // >>> hex_key(\"123456789ABCDEF0\"\
    )\n  // 6\n  // >>> hex_key(\"2020\")\n  // 2\n\n  var arr = [];\n  var len =\
    \ num.length\n  for (var i = 0; i <= len; i++) {\n    arr.push(num.charCodeAt(i)\
    \ - 96);\n  }\n  arr = [...new Set(arr)];\n  var count_prime = 0;\n  \n  for (var\
    \ i = 2; i <= arr.length; i++) {\n    if(arr[i] == 1){\n      count_prime += 1;\n\
    \    }\n  }\n  return count_prime;\n}", "  var count = 0;\n  for (var i = 0; i\
    \ < num.length; i++){\n     var a = num.charCodeAt(i);\n     if (a >= 48 && a\
    \ <= 57){\n         count++;\n         a = num.charCodeAt(i + 1);\n         if\
    \ (a >= 48 && a <= 57){\n             count += 2;\n             a = num.charCodeAt(i\
    \ + 2);\n             if (a >= 48 && a <= 57){\n                count += 3;\n\
    \                a = num.charCodeAt(i + 3);\n                if (a >= 48 && a\
    \ <= 57){\n                    count += 5;\n                    a = num.charCodeAt(i\
    \ + 4);\n                    if (a >= 48 && a <= 57){\n                      \
    \ count += 7;\n                       a = num.charCodeAt(i + 5);\n           \
    \            if (a >= 48 && a <= 57){\n                         count += 11;\n\
    \                         a = num.charCodeAt(i + 6);\n                       \
    \  if (a >= 48 && a <= 57){\n                            count += 13;\n      \
    \                      a = num.charCodeAt(i + 7);\n                          \
    \  if (a >= 48 && a <= 57){\n                              count += 17;\n    \
    \                          a = num.charCodeAt(i + 8);\n                      \
    \        if (a >= 48 && a <= 57){\n                                 count += 19;\n\
    \                                 a = num.charCodeAt(i + 9);\n               \
    \                  if (a >= 48 && a <= 57){\n                                \
    \    count += 21;\n                                    a = num.charCodeAt(i +\
    \ 10);\n                                    if (a >= 48 && a <= 57){\n       \
    \                                count += 23;\n                              \
    \         a = num.charCodeAt(i + 11);\n                                      \
    \ if (a >= 48 && a <= 57){\n                                          count +=\
    \ 29;\n                                          a = num.charCodeAt(i + 12);\n\
    \                                          if (a >= 48 && a <= 57){\n        \
    \                                     count += 31;\n                         \
    \                    a = num.charCodeAt(i + 13);\n                           \
    \                  if (a >= 48 && a <= 57){\n                                \
    \                count += 37;\n                                              \
    \  a = num.charCodeAt(i + 14);\n                                             \
    \   if (a >= 48 && a <= 57){\n                                               \
    \   count += 41;\n                                                  a = num.charCodeAt(i\
    \ + 15);\n                                                  if (a >= 48 && a <=\
    \ 57){\n                                                     count += 43;\n  \
    \                                                   a = num.charCodeAt(i + 16);\n\
    \                                                     if (a >= 48 && a <= 57){\n\
    \                                                        count += 47;\n      \
    \                                                  a = num.charCodeAt(i + 17);\n\
    \                                                        if (a >= 48 && a <= 57){\n\
    \                                                         count += 51;\n     \
    \                                                    a = num.charCodeAt(i + 18);\n\
    \                                                         if (a >= 48 && a <=\
    \ 57){\n                                                          count += 53;\n\
    \                                                          a = num.charCodeAt(i\
    \ + 19);\n                                                          count += 56;\n\
    \                                                         }\n                \
    \                                     }\n                                    \
    \            }\n                                             }\n             \
    \                             }\n                                       }\n  \
    \                                  }\n                                 ", "  num\
    \ = num.toLowerCase();\n  let hexArray = [];\n  let counter = 0;\n  for(let i\
    \ = 0; i < num.length; i++){\n    hexArray.push(parseInt(num.charAt(i),16));\n\
    \  }\n  for(let i = 1; i < hexArray.length; i++){\n    if(hexArray[i] % 2 == 0\
    \ && hexArray[i] != hexArray[i-1]){\n      counter++;\n    }\n  }\n  return counter;\n\
    }\n", "\tnum.toString();\n\tvar sum = 0;\n\tfor(var i = 0; i < num.length; i++){\n\
    \t\tvar index = num.charCodeAt(i) - 96;\n\t\tsum += ((index % 3) + 1);\n\t}\n\t\
    return sum;\n}", "  let hex = \"\";\n  for (let i = 0; i < num.length; i++){\n\
    \    let num = num.charCodeAt(i).toString(16);\n    hex += num;\n  }\n  return\
    \ hex.split(\"\").filter(v => v == '1').length;\n}\n", "    let count = 0\n  \
    \  let nums = num.split('')\n    for(let i = 0; i < nums.length; i++){\n     \
    \   let c = nums[i]\n        if(c >= 'A' && c <= 'F'){\n            c -= 'A' -\
    \ 'A'\n        }\n        else if(c >= '0' && c <= '9'){\n            c -= '0'\
    \ - 'A'\n        }\n        else if(c >= 'a' && c <= 'f'){\n            c -= 'a'\
    \ - 'A'\n        }\n        else if(c >= 'A' && c <= 'F'){\n            c -= 'A'\
    \ - 'A'\n        }\n        else if(c >= '0' && c <= '9'){\n            c -= '0'\
    \ - 'A'\n        }\n        else if(c >= 'a' && c <= 'f'){\n            c -= 'a'\
    \ - 'A'\n        }\n        else if(c >= 'A' && c <= 'F'){\n            c -= 'A'\
    \ - 'A'\n        }\n        else if(c >= '0' && c <= '9'){\n            c -= '0'\
    \ - 'A'\n        }\n        else if(c >= 'a' && c <= 'f'){\n            c -= 'a'\
    \ - 'A'\n        }\n        else if(c >= 'A' && c <= 'F'){\n            c -= 'A'\
    \ - 'A'\n        }\n        else if(c >= '0' && c <= '9'){\n            c -= '0'\
    \ - 'A'\n        }\n        else if(c >= 'a' && c <= 'f'){\n            c -= 'a'\
    \ - 'A'\n        }\n        else if(c >= 'A' && c <= 'F'){\n            c -= 'A'\
    \ - 'A'\n        }\n        else if(c >= '0' && c <= '9'){\n            c -= '0'\
    \ - 'A'\n        }\n        else if(c >= 'a' && c <= 'f'){\n            c -= 'a'\
    \ - 'A'\n        }\n        else if(c >= 'A' && c <= 'F'){\n            c -= 'A'\
    \ - 'A'\n        }\n        else if(c >= '0' && c <= '9'){\n            c -= '0'\
    \ - 'A'\n        }\n        else if(c >= 'a' && c <= 'f'){\n            c -= 'a'\
    \ - 'A'\n        }\n        else if(c >= 'A' && c <= 'F'){\n            c -= 'A'\
    \ - 'A'\n        }\n        ", "  var hex_number = num.toUpperCase();\n  hex_number\
    \ = hex_number.replace(/[^A-F0-9]/g,\"\");\n  if(hex_number == \"\"){\n    return\
    \ 0;\n  }\n  hex_number = hex_number.split(\"\");\n  var sum = 0;\n  for(var i\
    \ = 0; i < hex_number.length; i++){\n    var temp_hex = parseInt(hex_number[i],\
    \ 16);\n    sum = sum + (temp_hex%2 == 0 ? 1 : 0);\n  }\n  return sum;\n}", "\t\
    let hexString = num.toString();\n\tlet length = 0;\n\tlet result = 0;\n\tfor(let\
    \ i = 0; i < hexString.length; i++){\n\t\tlet a = hexString[i];\n\t\tif(a == \"\
    0\"){\n\t\t\tlength++;\n\t\t}else if(a == \"1\"){\n\t\t\tlength += 2;\n\t\t}else\
    \ if(a == \"2\"){\n\t\t\tlength += 4;\n\t\t}else if(a == \"3\"){\n\t\t\tlength\
    \ += 6;\n\t\t}else if(a == \"4\"){\n\t\t\tlength += 8;\n\t\t}else if(a == \"5\"\
    ){\n\t\t\tlength += 10;\n\t\t}else if(a == \"6\"){\n\t\t\tlength += 12;\n\t\t\
    }else if(a == \"7\"){\n\t\t\tlength += 14;\n\t\t}else if(a == \"8\"){\n\t\t\t\
    length += 16;\n\t\t}else if(a == \"9\"){\n\t\t\tlength += 18;\n\t\t}else if(a\
    \ == \"A\"){\n\t\t\tlength += 20;\n\t\t}else if(a == \"B\"){\n\t\t\tlength +=\
    \ 22;\n\t\t}else if(a == \"C\"){\n\t\t\tlength += 24;\n\t\t}else if(a == \"D\"\
    ){\n\t\t\tlength += 26;\n\t\t}else if(a == \"E\"){\n\t\t\tlength += 28;\n\t\t\
    }else if(a == \"F\"){\n\t\t\tlength += 30;\n\t\t}else{\n\t\t\tconsole.log(\"Invalid\
    \ hexadecimal number\");\n\t\t}\n\t\tif(length >= 4){\n\t\t\tresult++;\n\t\t\t\
    length = 0;\n\t\t}\n\t}\n\treturn result;\n}\n", "    let hex_count = 0;\n   \
    \ for(let i of num){\n        let digit = parseInt(i);\n        if(digit < 10\
    \ || digit > 16){\n            return -1;\n        }\n        if(digit == 10 ||\
    \ digit == 16){\n            return 1;\n        }\n        else if(digit == 9){\n\
    \            if(hex_count==2){\n                hex_count ++;\n            }\n\
    \        }\n        else if(digit == 8){\n            hex_count ++;\n        }\n\
    \        else if(digit == 7){\n            hex_count ++;\n        }\n        else\
    \ if(digit == 6){\n            hex_count ++;\n        }\n        else if(digit\
    \ == 5){\n            hex_count ++;\n        }\n        else if(digit == 4){\n\
    \            hex_count ++;\n        }\n        else if(digit == 3){\n        \
    \    hex_count ++;\n        }\n        else if(digit == 2){\n            hex_count\
    \ ++;\n        }\n        else if(digit == 1){\n            hex_count ++;\n  \
    \      }\n        else if(digit == 0){\n            hex_count ++;\n        }\n\
    \    }\n    return hex_count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
