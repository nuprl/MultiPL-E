name: HumanEval_87_get_row
language: js
prompt: "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar\
  \ to matrix, however, unlike matrices,\n// each row may contain a different number\
  \ of columns.\n// Given lst, and integer x, find integers x in the array,\n// and\
  \ return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a\
  \ coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by\
  \ rows in ascending order.\n// Also, sort coordinates of the row by columns in descending\
  \ order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
  \ [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([],\
  \ 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst,\
  \ x){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
  \ 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
  \ [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
  \ [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6],\
  \ [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3],\
  \ [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n\
  \  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
  \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
completions: ["    lst = lst.slice();\n    var out = [];\n    var row = 0;\n    var\
    \ i = 0;\n    var j, k, rows=lst.length;\n    var cols=0;\n    while(row<rows){\n\
    \        cols = lst[row].length;\n        while(cols--){\n            for(j=row+k;\
    \ j<rows; j++){\n                for(k=col; j<cols; k++){\n                  \
    \  if(lst[j][i] == x){\n                        out.push([row, k]);\n        \
    \            }\n                }\n            }\n            i++;\n        }\n\
    \        row++;\n    }\n    out.sort(function (a,b){\n        return a[0]-b[0];\n\
    \    });\n    out.sort(function (a,b){\n        return a[1]-b[1];\n    });\n \
    \   return out;\n}", "    l = lst.length;\n    if( l === 0 ) return [];\n\n  \
    \  // sort coordinates initially by rows in ascending order\n    for(var i = 0;\
    \ i < l; i++){\n        for(var j = 0; j < l; j++){\n            if( i !== j ){\n\
    \                lst_temp = lst[i];\n                lst_temp.push(lst[j]);\n\
    \                lst[i] = lst_temp;\n            }\n        }\n    }\n    \n \
    \   var row_result = [];\n    \n    // sort coordinates of the row by columns\
    \ in descending order\n    for(var i = l-1; i >= 0; i--){\n        for(var j =\
    \ l-1; j >= 0; j--){\n            if( i !== j ){\n                lst_temp = lst[i];\n\
    \                lst_temp.push(lst[j]);\n                lst[i] = lst_temp;\n\
    \            }\n        }\n    }\n\n    // find integers x in the array\n    for(var\
    \ x = 0; x < l; x++){\n        if( x === l-1 || lst[x] === x ) row_result.push([x,\
    \ lst[x]]);\n    }\n    \n    return row_result;\n}\n", "    var results = [];\n\
    \    for(var i=0;i<lst.length;i++){\n        if(!Array.isArray(lst[i])){\n   \
    \         continue;\n        }\n        for(var j=0;j<lst[i].length;j++){\n  \
    \          if(lst[i][j] == x){\n                results.push(new Array(Math.max(0,i-Math.floor((lst[i].length-1)/2))+1,\n\
    \                                        Math.max(0,j-Math.floor((lst[i].length-1)/2))));\n\
    \            }\n        }\n    }\n    return results.sort(function(a,b){return\
    \ b[0]-a[0]});\n}", "    if(lst.length < 1) return [];\n    let ret = [];\n  \
    \  for(let i = 0; i < lst.length; i++){\n        if(lst[i] == x) ret.push([i,\
    \ lst.length]);\n    }\n    ret.sort((a,b) => {\n        if(a[0] == b[0]) return\
    \ a[1] - b[1];\n        return a[0] - b[0];\n    });\n    let retRow = [];\n \
    \   ret.forEach(([x, y]) => {\n        retRow.push([x-1, y]);\n    });\n    return\
    \ retRow;\n}\n", "  var arr = [];\n  var arr_index = 0;\n  for(var i = 0, len\
    \ = lst.length; i < len; i++){\n    if(lst[i].indexOf(x) !== -1){\n      arr.push([arr_index\
    \ + 0, arr_index + 1]);\n      arr_index++;\n    }\n  }\n  arr.sort(function(a,\
    \ b){\n    a = a[0];\n    b = b[0];\n    if(b > a) return 1;\n    if(b < a) return\
    \ -1;\n    return 0;\n  });\n  arr.sort(function(a, b){\n    a = a[1];\n    b\
    \ = b[1];\n    if(b > a) return 1;\n    if(b < a) return -1;\n    return 0;\n\
    \  });\n  return arr;\n}\n", "\tlet rows = lst.length, cols, row = [], coord =\
    \ [];\n\tfor(let i = 0; i < rows; i++){\n\t\tlet c = lst[i].indexOf(x);\n\t\t\
    if(c) coord.push([i, c]);\n\t\telse{\n\t\t\trow.push([]);\n\t\t\tcols = [];\n\t\
    \t\tcols.push([]);\n\t\t\tcoord = [];\n\t\t}\n\t}\n\tcoord.sort((a, b) => a[1]\
    \ - b[1]);\n\tcoords.sort((a, b) => b[0] - a[0]);\n\tfor(let i = 0; i < rows;\
    \ i++){\n\t\tfor(let j = 0; j < cols; j++){\n\t\t\trow[i].push(coord[j][1]);\n\
    \t\t}\n\t}\n\treturn row;\n}\n", "    // check if array is empty\n    if (lst.length\
    \ == 0){\n        return [];\n    }\n\n    // sort by row\n    lst.sort(function\
    \ (a, b) {\n      return a[0] - b[0];\n    });\n\n    var row_ls = [];\n    var\
    \ row_i = -1;\n    var column_ls = [];\n    var column_i = -1;\n    var current_row\
    \ = [];\n    // for each row of the array, store row coordinate\n    lst.map(function\
    \ (e) {\n      if (e[0] == x) {\n        column_ls.push(column_i);\n        column_i\
    \ = 0;\n      }\n      else {\n        if (column_i == -1) {\n          column_ls.push(0);\n\
    \          column_i = 1;\n        }\n        current_row.push(e[column_ls[column_i]]);\n\
    \        column_i++;\n      }\n      row_ls.push(row_i);\n      row_i++;\n   \
    \ });\n\n    // sort by column\n    row_ls.map(function (e) {\n      if (e < column_ls[column_ls.length\
    \ - 1]) {\n        column_ls.push(column_ls[column_ls.length - 1]);\n      }\n\
    \    });\n\n    // sort by row coordinate\n    column_ls.map(function (e, i) {\n\
    \      if (e < current_row.length) {\n        current_row.splice(e, 1);\n    \
    \  }\n    });\n\n    return current_row.map(function (e, i) {\n      return [e,\
    \ row_ls[i]];\n    });\n}\n", "    var i, j, x, y, arr = [], r, c, cx, cy, count\
    \ = 1;\n    for (i = 0; i < lst.length; i++) {\n        r = lst[i][i];\n     \
    \   if (!r) { continue; }\n        c = lst[i][i + 1];\n        if (!c) { continue;\
    \ }\n        if (!count) {\n            for (x = 0, cx = 0, cy = 1; y < c; y++)\
    \ {\n                arr[x] = [x, y];\n                x++;\n                cx++;\n\
    \            }\n            continue;\n        }\n        x = 0, cx = 0, cy =\
    \ 0;\n        for (y = 1; y <= c; y++) {\n            arr[x] = [x, y];\n     \
    \       x++;\n            cy++;\n        }\n        count -= 1;\n    }\n    arr.sort(function(a,\
    \ b) {\n        if (a[0] > b[0]) { return 1; }\n        if (a[0] < b[0]) { return\
    \ -1; }\n        if (a[1] < b[1]) { return 1; }\n        if (a[1] > b[1]) { return\
    \ -1; }\n        return 0;\n    });\n    arr.sort(function(a, b) {\n        if\
    \ (a[0] > b[0]) { return 1; }\n        if (a[0] < b[0]) { return -1; }\n     \
    \   if (a[1] > b[1]) { return 1; }\n        if (a[1] < b[1]) { return -1; }\n\
    \        return 0;\n    });\n    arr.forEach(function(el) {\n        if (el[0]\
    \ < x || el[0] > x) { return; }\n        el[1]--;\n    });\n    return arr;\n\
    }\n", "  var result = [], coord = [];\n  var i, j, k, l, row, col;\n  lst.forEach(function(row,\
    \ i){\n    if(row.length < x){\n      result.push([]);\n    }\n    else{\n   \
    \   for(j=0, k = row.length-1; j<=x; j++){\n        if((row[j] === 0) && (k <\
    \ row.length)){\n          result.push([]);\n          k++;\n        }\n     \
    \   else{\n          result.push(row.slice(j, k+1));\n        }\n      }\n   \
    \ }\n  });\n  for(i=0, row = lst.sort(); i<row.length; i++){\n    col = row.slice();\n\
    \    for(j=i, k=0; j<row.length; j++){\n      if(row[j] === i){\n        col.push(j);\n\
    \        k++;\n      }\n    }\n    result.push(col.reverse());\n  }\n  return\
    \ result;\n}\n", "  if(lst.length === 0) return [];\n  if(lst.length === 1) return\
    \ [[lst[0]]];\n  var i, j, coords = [];\n  for(i = 0; i < lst.length; i++){\n\
    \    coords = [];\n    for(j = 0; j < lst[i].length; j++){\n      coords.push(lst[i][j]);\n\
    \    }\n    coords.sort((a,b) => b-a);\n    coords.sort((a,b) => a-b);\n    coords\
    \ = coords.reverse();\n    coords.push(0);\n    coords = coords.slice(0,x);\n\
    \    coords = coords.sort(function (a, b){return b-a});\n    coords = coords.reverse();\n\
    \    coords.unshift(i);\n    coords = coords.slice(-x);\n    coords = coords.map(x\
    \ => [x, i]);\n    coords = coords.filter(function(p){return p !== undefined });\n\
    \    coords = coords.map(p => {\n      for(var i = 0; i < coords.length; i++){\n\
    \        if(coords[i][0] === p[1]) return coords[i];\n      }\n    });\n    if(coords.length\
    \ === 0) return [];\n    coords = coords.filter(function(p){return p !== undefined\
    \ });\n    coords = coords.map(p => {\n      for(var i = 0; i < coords.length;\
    \ i++){\n        if(coords[i][0] === p[1]) return coords[i];\n      }\n    });\n\
    \    coords = coords.filter(function(p){return p !== undefined });\n    if(coords.length\
    \ == 0) return [];\n    coords = coords.map(p => {\n      for(var i = 0; i < coords.length;\
    \ i++){\n        if(coords[i][0] === p[1]) return coords[i];\n      }\n    });\n\
    \    if(coords.length === 0) return [];\n    coords = coords.map(p => {\n    \
    \  for(var i = 0; i < coords.length; i++){\n        if(coords[i][0] === p[1])\
    \ return coords[i];\n      }\n    });\n    coords = coords.filter(function(p){return\
    \ p !== undefined });\n    if(coords.length == 0) return [];\n    coords = coords.map(p\
    \ => {\n      for(var i = 0; i < coords.length; i++){\n        if(coords[i][0]\
    \ === p[1]) return coords[i];\n      }\n    });\n    coords = coords.filter(function(p){return\
    \ p !== undefined });\n    if(coords.length == 0) return [];\n    coords = coords.map(p\
    \ => {\n      for(var i = 0; i < coords.length; i++){\n        if(coords[i][0]\
    \ === p[1]) return coords[i];\n      }\n    });\n    coords = coords.filter(function(p){return\
    \ p !== undefined });\n    coords = coords.map(p => {\n      for(var i = 0; i\
    \ < coords.length; i++){\n        if(coords[i][0] === p[1]) return coords[i];\n\
    \      }\n    });\n    coords = coords.filter(function(p){return p !== undefined\
    \ });\n    coords = coords.map(p => {\n      for(var i = 0; i < coords.length;\
    \ i++){\n        if(coords[i][0] === p[1]) return coord", "    return lst.map(row\
    \ => {\n        if(row.length <= x){\n            return row;\n        }\n   \
    \     return row.slice(0, x).map(val => [val, row[x]]);\n    }).reduce((a, b)\
    \ => a.concat(b), []);\n}\n", "  const result = [];\n  const row = [];\n  for(let\
    \ i = 0; i < lst.length; i++){\n    if (lst[i][0] === x){\n      row.push([lst[i][0]]);\n\
    \    }\n    row.push(...lst[i][1]);\n    result.push(row);\n    row = [];\n  }\n\
    \  return result;\n}\n", "  let res = [];\n  if(lst.length === 0) return res;\n\
    \n  lst.sort((a, b) => {\n    const r1 = a[0] > b[0];\n    const r2 = a[1] < b[1];\n\
    \    return r1 ? -1 : r2 ? 1 : 0;\n  });\n\n  for(const [i, row] of lst.entries()){\n\
    \    if(row[0] === x) res.push([i, row[1]]);\n  }\n\n  return res;\n}\n", "  if(!lst.length)\
    \ return [];\n  var res = new Array();\n  for(var i=0; i<lst.length; i++){\n \
    \   res[i] = [];\n    for(var j=0; j<lst[i].length; j++){\n      res[i][j] = [i,\
    \ j];\n    }\n  }\n  res.sort(function(a, b){\n    return a[0] < b[0] ? -1 : (a[0]\
    \ > b[0] ? 1 : 0);\n  });\n  var xIndex = -1;\n  for(var i=0; i<res.length; i++){\n\
    \    if(res[i][0] == x){\n      xIndex = i;\n      break;\n    }\n  }\n  var yIndex\
    \ = -1;\n  for(var i=0; i<res.length; i++){\n    if(res[i][0] > x){\n      yIndex\
    \ = i;\n      break;\n    }\n  }\n  var xLen = x[x.length-1];\n  var yLen = x[x.length-1];\n\
    \  if(xIndex > yIndex){\n    xIndex -= (yIndex * yLen);\n    for(var i=yIndex+1;\
    \ i<res.length; i++){\n      var temp = [res[i][0], 0];\n      for(var j=1; j<res.length;\
    \ j++){\n        temp[1] += res[j][1];\n      }\n      res[i] = temp;\n    }\n\
    \  } else {\n    yIndex -= (xIndex * xLen);\n    for(var i=xIndex+1; i<res.length;\
    \ i++){\n      var temp = [0, res[i][1]];\n      for(var j=1; j<res.length; j++){\n\
    \        temp[0] += res[j][0];\n      }\n      res[i] = temp;\n    }\n  }\n  res.sort(function(a,\
    \ b){\n    return a[1] < b[1] ? -1 : (a[1] > b[1] ? 1 : 0);\n  });\n  return res;\n\
    }\n", "    let rows = [];\n    lst.forEach(row => {\n        let tempRow = []\n\
    \        for(let i = 0; i < row.length; i++){\n            if(i == x){\n     \
    \           tempRow.push(i + ',' + row.length)\n            }\n            else{\n\
    \                tempRow.push(row[i])\n            }\n        }\n        rows.push(tempRow)\n\
    \    });\n    rows.sort((a,b) => { return b[1] - a[1] });\n    rows.sort((a,b)\
    \ => { return b[0] - a[0] });\n    return rows;\n}\n", "    let row = [], temp\
    \ = [], i, j, c;\n    // sort rows\n    for(i = 0; i < lst.length; i++){\n   \
    \     for(j = 0; j < lst[i].length; j++){\n            lst[i][j].forEach(x =>\
    \ temp[x] = i);\n        }\n        row.push(temp);\n        temp = []\n    }\n\
    \    rowArr = rowArr.concat(row);\n    rowArr = rowArr.sort((a, b) => b[1] - a[1]);\n\
    \    // sort column by decreasing number\n    for(i = 0; i < rowArr.length; i++){\n\
    \        c = rowArr[i][1];\n        rowArr[i][c] = rowArr[i][c].sort((a, b) =>\
    \ b - a).reverse();\n    }\n    for(i = 0; i < rowArr.length; i++){\n        if(rowArr[i][0]\
    \ == x){\n            return rowArr[i].map(x => [i[0], x[0]]);\n        }\n  \
    \  }\n}\n", "    var ret = [];\n    for(let i = 0; i < lst.length; i++){\n   \
    \     for(let j = 0; j < lst[i].length; j++){\n            if(j == x){\n     \
    \           ret.push([i, j]); \n            }\n        }\n    }\n    ret.sort(function(a,\
    \ b){\n        return a[0] - b[0] || a[1] - b[1];\n    })\n    ret.sort(function(a,\
    \ b){\n        return a[0] - b[0] || a[1] - b[1];\n    })\n    return ret;\n}",
  "\tif(!lst.length){\n\t\treturn [];\n\t}\n\treturn get_column(lst, x).map(function(c){\n\
    \t\treturn [c[0], c[1] - c[0]];\n\t});\n}\n", "    // Write your code here\n \
    \   if (lst.length == 0)\n        return [];\n    if (x !== lst[0].length)\n \
    \       throw new Error(\"Invalid length\");\n\n    var y = [];\n    for (var\
    \ i in lst[0]){\n        if (lst[0][i] == x)\n            y.push([i, 0]);\n  \
    \      else if (x === lst[0].length - 1)\n            y.push([i, lst[0].length\
    \ - 1]);\n        else\n            y.push([i, x+1]);\n    }\n    return y;\n\
    }\n", "    var a = [];\n    var row = [];\n    var rows = [];\n    for(var i in\
    \ lst){\n        row = [];\n        for(var j in lst[i]){\n            row.push([i,\
    \ lst[i][j]]);\n        }\n        row.sort(function(a, b){\n            return\
    \ a[1] - b[1];\n        });\n        row.sort(function(a, b){\n            return\
    \ b[0] - a[0];\n        });\n        row.forEach(function(val){\n            var\
    \ x = val[0];\n            var y = val[1];\n            if(x == x){\n        \
    \        a.push(y);\n            }\n        });\n        row.forEach(function(val){\n\
    \            var x = val[0];\n            var y = val[1];\n            if(y ==\
    \ y){\n                a.push(y);\n            }\n        });\n        rows.push(row);\n\
    \    }\n    a.sort(function(a, b){\n        return a - b;\n    });\n    a.forEach(function(val){\n\
    \        var row = [];\n        rows.push(row);\n        row.push(val);\n    });\n\
    \    return rows;\n}\n", "    if(!lst) return [];\n    var i = -1, result = [];\n\
    \    while(++i < lst.length){\n        result.push(get_row(lst[i], x));\n    }\n\
    \    return result.sort(function(a, b){\n        return b[0] - a[0] || b[1] -\
    \ a[1];\n    }).map(function(row){\n        return row.slice().sort(function(a,\
    \ b){\n            return b[0] - a[0] || b[1] - a[1];\n        });\n    });\n\
    }\n", "\t\n\tvar out = [];\n\tvar len = get_len(lst);\n\tvar row = [];\n\tvar\
    \ col = [];\n\t\n\tfor(var i=0; i<len; i++){\n\t\trow.push(0);\n\t\tcol.push(0);\n\
    \t}\n\t\n\tfor(var i=0; i<len; i++){\n\t\tout[i] = row;\n\t\tfor(var j=0; j<len;\
    \ j++){\n\t\t\tif(lst[i][j] == x)\n\t\t\t\tout[i].push(j)\n\t\t}\n\t}\n\t\n\t\
    out = sort(out);\n\tvar i = 0;\n\twhile(!isRowDone(out[i]))\n\t\ti++;\n\t\n\t\
    for(var i=0; i<len; i++)\n\t\tout[i] = sort_columns(out[i], col);\n\t\n\treturn\
    \ out;\n}\n", "\tvar coords = []\n\tfor(var i = 0; i < lst.length; i++){\n\t\t\
    var r = []\n\t\tfor(var j = 0; j < lst[i].length; j++){\n\t\t\tif(lst[i][j] ==\
    \ x)\n\t\t\t\tr.push([i, j])\n\t\t}\n\t\tif(r.length){\n\t\t\tcoords.push(r)\n\
    \t\t}\n\t}\n\tcoords.sort(function(a, b){\n\t\treturn a[0] - b[0]\n\t})\n\tcoords.sort(function(a,\
    \ b){\n\t\treturn b[1] - a[1]\n\t})\n\treturn coords\n}\n", "  if (lst.length\
    \ == 0) return [];\n  lst.sort(function(a, b){return a[0] - b[0]});\n  var i =\
    \ lst.findIndex(function(elem){return elem[0] == x});\n  if (i == -1) return [];\n\
    \  var res = [];\n  var j = lst.length - 1;\n  while (j > i){\n    res.push(lst[j]);\n\
    \    j--;\n  }\n  res.push(lst[i]);\n  return res;\n}\n", "    \n    let n = lst.length\n\
    \    let row = []\n    \n    // row is sorted in ascending order initially\n \
    \   for(let i = 0; i < n; i++){\n        let temp = []\n        for(let j = 0;\
    \ j < n; j++){\n            temp.push(lst[i][j])\n        }\n        row.push(temp)\n\
    \    }\n\n    // row is sorted in descending order initially\n    for(let i =\
    \ n-1; i >= 0; i--){\n        let temp = []\n        for(let j = 0; j < n; j++){\n\
    \            temp.push(lst[i][j])\n        }\n        row.push(temp)\n    }\n\n\
    \    for(let i = 0; i < n; i++){\n        if(row.indexOf(x) >= 0){\n         \
    \   return [[x]]\n        }\n    }\n    return []\n}\n", "    // get row by index\n\
    \    if(x < 0) return [];\n    if(x >= lst.length) return [];\n    let lsts =\
    \ Array.from(lst);\n    let r = lsts.filter(lst => lst.includes(x))\n    let coord\
    \ = [];\n    if(!r) return [];\n    r.forEach((row, ri) => {\n        row = row.sort((a,\
    \ b) => {\n            return b-a;\n        })\n        row.forEach((_, ci) =>\
    \ {\n            if(ci === 0){\n                coord.push([ri, 0])\n        \
    \    }else{\n                coord.push([ri, ci-1])\n            }\n        })\n\
    \    })\n    return coord;\n}\n", "  return lst.filter(function(elem){\n    return\
    \ (elem > x);\n  }).sort(function(a, b){\n    return a-b;\n  }).map(function(elem){\n\
    \    return [elem, elem];\n  });\n}\n", "  let arr = [];\n  for(let i=0; i<list.length;\
    \ i++){\n    let sub = []\n    for(let j=0; j<list[i].length; j++){\n      sub.push([i,j]);\n\
    \    }\n    arr.push(sub);\n  }\n  arr.sort((a,b) => {\n    return a[0]-b[0]\n\
    \  })\n  let res = []\n  for(let i=0; i<list.length; i++){\n    let sub = []\n\
    \    for(let j=0; j<list[i].length; j++){\n      sub.push(arr[i][j])\n    }\n\
    \    res.push(sub)\n  }\n  return res.filter(a=>a[0]==x).sort((a,b) => b[0]-a[0])\n\
    }\n", "  var res = [], row = lst[0];\n  var maxRowLen = Math.max.apply(Math, row.map(function(e){return\
    \ e.length}));\n\n  for(var rowIndex = 0; rowIndex < lst.length; ++rowIndex){\n\
    \    var rowNum = rowIndex + 1;\n    var rowNumStr = rowNum.toString();\n    var\
    \ newRow = [];\n\n    // copy row to new row\n    row.forEach(function(e, i){\n\
    \      if(i === x){\n        newRow.push(e);\n      }else if(e.length >= maxRowLen){\n\
    \        newRow.push(e.slice(0, maxRowLen));\n      }else{\n        newRow.push([]);\n\
    \      }\n    });\n\n    // sort rowNum array\n    newRow.forEach(function(e,\
    \ i){\n      e.forEach(function(e, n){\n        if(n > rowNumStr.length){\n  \
    \        rowNumStr = rowNumStr.slice(0, n);\n        }\n      });\n    });\n\n\
    \    res[rowIndex] = rowNumStr.split(\"\");\n  }\n\n  // sort by columns\n  var\
    \ sortedRows = res;\n  sortedRows.forEach(function(e, i){\n    e.sort(function(a,\
    \ b){\n      return b[0] - a[0];\n    });\n  });\n\n  // sort by rows\n  res.forEach(function(e,\
    \ i){\n    e.sort(function(a, b){\n      return b[1] - a[1];\n    });\n  });\n\
    \n  return res;\n}\n", "\tlet output = [];\n\tif(lst == undefined || lst.length\
    \ == 0)\n\t\treturn output;\n\tlet row = [];\n\tfor(let i=0;i<lst.length;i++)\n\
    \t{\n\t\tif(row.length == 0)\n\t\t{\n\t\t\trow = lst[i];\n\t\t}\n\t\telse\n\t\t\
    {\n\t\t\trow.push(lst[i]);\n\t\t\tif(row.length == x)\n\t\t\t\toutput.push(row);\n\
    \t\t\trow = [];\n\t\t}\n\t}\n\tif(row.length != 0)\n\t\toutput.push(row);\n\t\
    return output.sort(function(x, y){\n\t\treturn x[0] - y[0];\n\t});\n}\n", "  \
    \  if(lst.length == 0) return [];\n    var y = [];\n    var yy = [];\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x) != -1) y[i] = i;\n\
    \        else{\n            yy[i] = -1;\n        }\n    }\n    var yx = y.map(function(x,\
    \ i){ return [i, y[i]]; });\n    var xx = [];\n    var ww = [];\n    for(var i\
    \ in yx){\n        ww[yx[i][1]].push(xx[yx[i][0]]);\n    }\n    var xx = ww.sort(function(a,\
    \ b){return a[0] - b[0]})\n        .map(function(x, i){return x[1].map(function(y,\
    \ j){return [x, yy[j]];})});\n    return xx.map(function(x){return x[0];});\n\
    }\n", "    var row = [];\n    var coords = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] == x){\n            row.push(i);\n            coords.push(row);\n\
    \        }\n    }\n    return coords;\n}\n", "    \n    // Check if list has any\
    \ row.\n    if(lst == [] || lst[0].length == 0){\n        return [];\n    }\n\
    \    \n    // Get first row and columns.\n    var row = lst[0];\n    var col =\
    \ [];\n    \n    // For each row, create a copy of the current row,\n    // and\
    \ append x into each column in the row.\n    for(var i=0, len=row.length; i<len;\
    \ i++){\n        col.push(row.slice(0));\n        col[i].push(x);\n    }\n   \
    \ \n    // Append current row and columns to return.\n    col.push(row);\n   \
    \ return col;\n}\n", "\tvar i, j, arr = [];\n\tfor(i = 0; i < lst.length; i++){\n\
    \t\tfor(j = 0; j < lst[i].length; j++){\n\t\t\tif(lst[i][j] === x){\n\t\t\t\t\
    arr.push([j, i]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tarr.sort(function(a,\
    \ b){\n\t\tvar aRow = a[1], bRow = b[1];\n\t\tif(aRow < bRow) return -1;\n\t\t\
    if(aRow > bRow) return 1;\n\t\treturn 0;\n\t});\n\treturn arr.reverse();\n}\n",
  "    if(!lst) return [];\n    lst = lst.slice();\n    if(x < 0 || x >= lst.length\
    \ || !lst[x] || lst[x].length === 0) return [];\n    return lst[x].map((_, i)\
    \ => [i, x]).sort((a,b) => b[0] - a[0]).sort((a,b) => b[1] - a[1])\n}", "  if\
    \ (lst.length == 0){\n    return []\n  }\n  let lst_row = lst[0]\n  let row =\
    \ []\n  for (let i = 0; i < lst_row.length; i++){\n    if (lst_row[i] == x){\n\
    \      row.push([i, lst_row.indexOf(x)])\n    }\n  }\n  return sort_by_row(row).reverse()\n\
    }\n", "  var output = []\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i].indexOf(x)\
    \ !== -1){\n      output.push([i, lst[i].indexOf(x)])\n    }\n  }\n  output.sort(function(a,\
    \ b){\n    return b[1] - a[1]\n  })\n  for(var i = 0; i < output.length; i++){\n\
    \    output.sort(function(a, b){\n      return b[0] - a[0]\n    })\n  }\n  return\
    \ output\n}\n", "    if (lst.length < 1) return [];\n    return sort_by_row_and_col(lst,\
    \ false).filter(function(row){\n        return row[x] == x;\n    });\n}\n", " \
    \   if(lst.length == 0){\n        return [];\n    }\n\n    var result = [];\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(lst[i][0] == x){\n     \
    \       result.push([x, lst[i][1]]);\n        }\n    }\n\n    result.sort(function(a,\
    \ b){\n        if(a[0] > b[0]){\n            return 1;\n        }\n        else\
    \ if(a[0] < b[0]){\n            return -1;\n        }\n        return 0;\n   \
    \ });\n\n    result.sort(function(a, b){\n        if(a[1] > b[1]){\n         \
    \   return 1;\n        }\n        else if(a[1] < b[1]){\n            return -1;\n\
    \        }\n        return 0;\n    });\n\n    return result;\n}\n", "  // TODO\n\
    }\n", "  return lst.map((row) => \n    row.slice(0).sort((a, b) => b - a).slice().reverse().filter(i\
    \ => i == x)\n  )\n}\n", "  if(!lst.length) return [];\n  var row = [];\n  var\
    \ coords = [];\n  for(var i = 0, len = lst.length; i < len; i++){\n    var row_len\
    \ = row.length;\n    for(var j = 0, jlen = lst[i].length; j < jlen; j++){\n  \
    \    var coord = lst[i][j];\n      if(!contains(coord, coords) && coord === x){\n\
    \        coords.push(coord);\n        row.push([i, j]);\n      }\n    }\n  }\n\
    \  row = row.sort(sortByRow).reverse();\n  coords = coords.sort(sortByCol);\n\
    \  return row.map(function(r){\n    return [r[0], r[1] - row_len];\n  });\n}",
  "    if(lst == null || lst.length == 0){\n        return null;\n    }\n    var res\
    \ = [];\n    var len = lst.length;\n    for(var i = 0; i < len; i++){\n      \
    \  var row = lst[i];\n        var rowLen = row.length;\n        if(rowLen <= x){\n\
    \            res.push([]);\n            continue;\n        }\n        var col\
    \ = x - 1;\n        for(var j = rowLen - 1; j >= 0; j--){\n            if(row[j]\
    \ == col){\n                res.push([i + 1, j + 1]);\n                break;\n\
    \            }\n        }\n    }\n    res.sort(function(a, b){\n        if(a[0]\
    \ < b[0]){\n            return -1;\n        }\n        if(a[0] > b[0]){\n    \
    \        return 1;\n        }\n        return 0;\n    });\n    res.sort(function(a,\
    \ b){\n        if(a[1] < b[1]){\n            return -1;\n        }\n        if(a[1]\
    \ > b[1]){\n            return 1;\n        }\n        return 0;\n    });\n   \
    \ return res;\n}\n", "    var out = [];\n    lst.forEach(function(row){\n    \
    \    row.forEach(function(col){\n            if (col == x){\n                out.push([row,\
    \ col]);\n            }\n        });\n    });\n    out.sort(function(a, b){\n\
    \        return a[0] - b[0];\n    });\n    out.sort(function(a, b){\n        return\
    \ a[1] - b[1];\n    });\n    return out;\n}\n", "  if(lst.length == 0) return\
    \ []\n  if(lst.length == 1) return [[lst[0][0]]]\n  \n  var nr = lst.length\n\
    \  var ncol = lst[0].length\n  \n  var res = []\n  var rowIdx = nr -1\n  while(rowIdx\
    \ >= 0){\n    var row = [];\n    var colIdx = 0\n    var row = res[rowIdx] = []\n\
    \    for(var i = rowIdx; i >= 0; i--){\n      if(colIdx >= ncol){\n        colIdx\
    \ = colIdx = 0\n      }\n      row.push([lst[i][colIdx], lst[rowIdx][colIdx]])\n\
    \      colIdx++\n    }\n    rowIdx--\n  }\n  \n  var result = res[rowIdx]\n  if(result\
    \ && rowIdx < nrow){\n    result.sort(function(a, b){\n      return b[0] - a[0]\n\
    \    })\n    result.sort(function(a, b){\n      return b[1] - a[1]\n    })\n \
    \ }\n  return result\n}\n", "    // Write your code here\n    if(x==0||lst.length===0){\n\
    \        return [[]];\n    }\n    let ans = [];\n    let row = [];\n    for(let\
    \ i=0; i<lst.length; i++){\n        if(lst[i]===x){\n            row.push(i);\n\
    \        }\n        else if(lst[i]>x){\n            ans.push(row);\n         \
    \   row = [];\n            row.push(i);\n        }\n    }\n    ans.push(row);\n\
    \    return ans;\n}", "    if(!lst){return []}\n    const [m, n] = lst.length\n\
    \    let row = []\n    for(let i = 0; i < m; i++){\n        let cur = lst[i]\n\
    \        for(let j = 0; j < n; j++){\n            if(cur[j] === x){row.push([i,\
    \ j])}\n        }\n    }\n    row.sort((a,b)=>a.slice().reverse().join() < b.slice().reverse().join()?\
    \ 1 : -1)\n    return row\n}\n", "  if(lst.length == 0){\n    return [];\n  }\n\
    \  var result = [];\n  var sort_by = function(arr) {\n    return arr.map(function\
    \ (el) {\n      return [el.sort(function (a, b) {\n        return b - a;\n   \
    \   }), el.length];\n    });\n  };\n  var res = lst.sort(function(first, second){\n\
    \    return sort_by(first)[0][0] - sort_by(second)[0][0]\n  });\n  for(var i=0;\
    \ i<res.length; i++){\n    if(res[i][1] >= x){\n      result.push([res[i][0],\
    \ x]);\n      break;\n    }\n  }\n  return result;\n}\n", "  var result = [],\n\
    \      lastRow,\n      lastCol,\n      lastRowRow,\n      lastRowCol,\n      lastColRow;\n\
    \n  for(var i = 0, len = lst.length; i < len; i++){\n    if(typeof lst[i] == \"\
    undefined\")\n      continue;\n    for(var j = 0; j < lst[i].length; j++){\n \
    \     if(lst[i][j] == x){\n        result.push([i, j, lst[i][j]]);\n      }\n\
    \    }\n  }\n\n  result.sort(function(a, b){\n    if(a > b)\n      return 1;\n\
    \    if(a < b)\n      return -1;\n    return 0;\n  });\n\n  lastRow = result[result.length\
    \ - 1];\n  lastRowRow = lastRow[0];\n  lastRowCol = lastRow[1];\n  lastCol = lastRowCol;\n\
    \n  result.sort(function(a, b){\n    if(a > b)\n      return -1;\n    if(a < b)\n\
    \      return 1;\n    return 0;\n  });\n\n  lastCol = result[result.length - 1];\n\
    \  lastColRow = lastCol[0];\n  lastColCol = lastCol[1];\n\n  if(lastRowRow ==\
    \ lastColRow && lastColCol == lastRowCol){\n    return result.slice(0, result.length\
    \ - 1);\n  }\n\n  return result;\n}\n", "    console.log(lst)\n    console.log(lst.length)\n\
    \    if(!lst.length) return []\n    if(!lst[0].length) return []\n\n    let result\
    \ = []\n    for(let i = 0; i < lst.length; i++){\n        const y = []\n     \
    \   for(let j = 0; j < lst[i].length; j++){\n            y.push([i, lst[i][j]])\n\
    \        }\n        result.push(y)\n    }\n    result.sort((a, b) => b[0] - a[0])\n\
    \    result.sort((a, b) => b[1]-b[1])\n    console.log(result)\n\n    for(let\
    \ i = 0; i < result.length; i++){\n        if(result[i][0] == x){\n          \
    \  return result[i]\n        }\n    }\n}\n", "    let m = []\n    for(let i =\
    \ 0, j = 0; i < lst.length; i++){\n        for(let k = 0, l = 0; k < lst[i].length;\
    \ k++){\n            if(lst[i][j] === x){\n                m.push([i, k])\n  \
    \          }\n        }\n        if(i === lst.length - 1){\n            m.push([i,\
    \ j])\n        }\n    }\n    return m\n}\n", "    let coords = [];\n    lst.forEach((row)\
    \ => {\n        if(row.indexOf(x) !== -1){\n            coords = coords.concat((row).map((col)\
    \ => [col, row.indexOf(x)]));\n        }\n    });\n    coords = coords.sort((a,\
    \ b) => a[1] - b[1]).sort((a, b) => b[0] - a[0]);\n    return coords.map((row)\
    \ => [row[0], row.slice().reverse()]);\n}\n", "  const _y = [];\n  const _d =\
    \ [];\n  lst.forEach((row, i) => {\n    if(i === 0){\n      _y.push([]);\n   \
    \   row.forEach((d, j) => {\n        _y[i].push(j);\n      });\n      _d.push([]);\n\
    \      row.forEach((d, j) => {\n        _d[i].push(j);\n      });\n    }else{\n\
    \      _y[i] = _y[i].filter(item => d !== x);\n      _d[i] = _d[i].filter(item\
    \ => d !== x);\n    }\n  });\n  _d.sort((a,b) => b[0] - a[0]);\n  _y.sort((a,b)\
    \ => b[0] - a[0]);\n  return _d.map(d => _y.map(y => [y, d]));\n}\n", "    var\
    \ rows = [],\n        i,\n        j = 0;\n    for(i = 0; i < lst.length; i++){\n\
    \        rows[j] = [];\n        for(; j < lst[i].length; j++){\n            if(lst[i][j]\
    \ === x){\n                rows[j].push([j, i]);\n            }\n        }\n \
    \       j++;\n    }\n    rows.sort(function(a,b){\n        return a[0] - b[0];\n\
    \    });\n    rows.sort(function(a,b){\n        return b[1] - a[1];\n    });\n\
    \    return rows;\n}\n", "\tif(lst.length == 0) return [];\n\tif(x == 0) return\
    \ [lst[0]];\n\tvar arr = [];\n\tvar n = lst.length;\n\tfor(var r = 0; r < n; r++){\n\
    \t\tvar c = 0;\n\t\tvar row_arr = [];\n\t\tfor(var ci = 0; ci < l[r].length; ci++){\n\
    \t\t\tif(l[r][ci] == x) c++;\n\t\t\telse break;\n\t\t}\n\t\tvar row = Array.apply(null,\
    \ Array(x + 1)).map(function(){return 0;});\n\t\twhile(c > 0){\n\t\t\trow_arr.push(row);\n\
    \t\t\tc--;\n\t\t}\n\t\tarr.push(row_arr);\n\t}\n\tarr.sort(function(a, b){return\
    \ b[1] - a[1];});\n\tarr.sort(function(a, b){return -(a[1] - b[1]);});\n\treturn\
    \ arr;\n}\n", "    if(!lst.length || !x){\n        return [];\n    }\n\n    var\
    \ result = [];\n    var i, j, x, y, len;\n\n    len = lst.length;\n\n    for (i\
    \ = 0; i < len; i++) {\n        x = lst[i];\n        if (!x || x[0] < x){\n  \
    \          continue;\n        }\n        j = i;\n        while (j > 0 && (x =\
    \ lst[j-1]).column > x){\n            lst[j-1] = lst[j];\n            j--;\n \
    \       }\n        lst[j] = x;\n        result.push([j, x.column]);\n    }\n\n\
    \    //Sort coordinates initially by rows in ascending order.\n    result.sort(function\
    \ (a, b){\n        return a[1] - b[1];\n    });\n    //Also, sort coordinates\
    \ of the row by columns in descending order.\n    result.sort(function (a, b){\n\
    \        return b[0] - a[0];\n    });\n\n    return result;\n}\n", "    var ret\
    \ = [], row = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j\
    \ = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n          \
    \      ret.push([i, j]); row.push(lst[i][j]);\n            }\n        }\n    }\n\
    \    ret.sort(function(a, b){\n        return a - b;\n    });\n    ret.sort(function(a,\
    \ b){\n        return b - a;\n    });\n    ret = ret.concat(row.sort(function(a,\
    \ b){\n        return b - a;\n    }));\n    return ret;\n}\n", "  var res = [],\
    \ row = lst;\n  for(var i=0; i< row.length; i++){\n    if(row[i] === x){\n   \
    \   res.push([i, row.indexOf(x)])\n      break\n    }\n  }\n  return res\n}\n",
  "\tlet res = [];\n\tfor(let i = 0; i < lst.length; i++){\n\t\tif(lst[i].indexOf(x)\
    \ !== -1){\n\t\t\tres.push([i, lst[i].indexOf(x)])\n\t\t}\n\t}\n\tres.sort((a,b)\
    \ => b[1] - a[1]);\n\tfor(let i = 0; i < res.length; i++){\n\t\tres[i].reverse();\n\
    \t}\n\treturn res;\n}\n", "\tvar coords = [];\n\tfor (var row = 0; row < lst.length;\
    \ row++){\n\t\tvar numRow = lst[row];\n\t\tfor (var col = 0; col < numRow.length;\
    \ col++){\n\t\t\tif (numRow[col] == x) coords.push([row, col]);\n\t\t}\n\t}\n\t\
    return coords.sort(function(a,b){\n\t\treturn a[0] - b[0];\n\t});\n}\n", "   \
    \ var result = [];\n    for (var row in lst){\n        for (var column in row){\n\
    \            if(row[x] == column){\n                var coord = row.concat(column);\n\
    \                result.push(coord);\n            }\n        }\n    }\n    result.sort();\n\
    \    var new_result = [];\n    for (var coord of result){\n        if(coord[x]\
    \ == 0){\n            new_result.push([coord[0], coord[1]]);\n        }\n    }\n\
    \    return new_result;\n}", "    if (lst.length <= 0) return [];\n    var r =\
    \ [];\n    var max = null;\n    var min = null;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if (lst[i].length != x) break;\n        for (var j = 0; j < x;\
    \ j++){\n            if (max === null || max < lst[i][j]) { max = lst[i][j]; };\n\
    \            if (min === null || min > lst[i][j]) { min = lst[i][j]; };\n    \
    \    }\n    }\n    for (var i = lst.length - 1; i >= 0; i--){\n        var row\
    \ = [];\n        for (var j = 0; j < x; j++){\n            row.push([i, j]);\n\
    \        }\n        r.push(row);\n    }\n    r = sort_coordinates(r);\n    var\
    \ new_r = [];\n    for(var i = 0; i < r.length; i++){\n        var arr = [];\n\
    \        for(var j = 0; j < r[i].length; j++){\n            arr.push([r[i][j][0],\
    \ r[i][j][1]]);\n        }\n        new_r.push(arr);\n    }\n    return new_r;\n\
    }\n", "  if (lst.length < 1 || lst[0].length < 1) return [];\n  var i, j, row\
    \ = [], col = [], temp = [], ret = [];\n  for (i = 0; i < lst.length; i++){\n\
    \    row = lst[i];\n    for (j = 0; j < row.length; j++){\n      if (row[j] ==\
    \ x){\n        temp.push([i, row.length - j]);\n        break;\n      }\n    }\n\
    \  }\n  temp.sort(function(a, b){\n    return a[0] - b[0];\n  });\n  for (i =\
    \ 0; i < temp.length; i++){\n    row = lst[temp[i][0]];\n    col = temp[i][1];\n\
    \    ret.push([row, col]);\n  }\n  return ret;\n}\n", "    if (lst === null ||\
    \ lst === undefined || lst.length < 1 || x < 0 || x > lst[0].length){\n      \
    \  return [];\n    }\n    var row = [[0, 0]];\n    for(var i = 1; i <= lst[0].length;\
    \ i++){\n        if (lst[0][i - 1] >= x){\n            row.push([i, lst[0][i -\
    \ 1]]);\n        } else {\n            break;\n        }\n    }\n    for(var j\
    \ = 1; j <= lst.length; j++){\n        for(var k = 1; k <= lst[j].length; k++){\n\
    \            row[0][1] = Math.max(row[0][1], lst[j][k - 1]);\n        }\n    \
    \    row.sort(function(a, b){\n            return b[1] - a[1];\n        });\n\
    \        row.sort(function(a, b){\n            return b[0] - a[0];\n        });\n\
    \    }\n    return row;\n}\n", "\tif(lst.length == 0){\n\t\treturn [];\n\t}\n\t\
    let rows = [];\n\tlet row = [];\n\tfor(let i = 0; i < lst.length; i++){\n\t\t\
    row.push(lst[i][x]);\n\t\tif(lst[i][x] < x){\n\t\t\trows.push(row);\n\t\t\trow\
    \ = [];\n\t\t}\n\t}\n\tif(row.length > 0){\n\t\trows.push(row);\n\t}\n\trows.sort((a,b)\
    \ => a[0] - b[0]);\n\trows.sort((a,b) => b[1] - a[1]);\n\treturn rows.map(row\
    \ => row.map(x => x + 1));\n}\n", "    if(lst.length <= 1)\n        return [];\n\
    \    var lsts = sort_2d_coordinates(lst);\n    var row = lsts[lsts.length - 1\
    \ - x];\n    return row;\n}\n", "    var arr = [];\n    if(lst.length < 1){\n\
    \        return arr;\n    }\n    for(var i=0; i<lst.length; i++){\n        if(lst[i][x]\
    \ === x){\n            var r = [];\n            r.push(i);\n            for(var\
    \ j=1; j<lst[i].length; j++){\n                if((lst[i][x] === lst[i][j-1])\
    \ && (lst[i][x] === lst[i][j+1])){\n                    continue;\n          \
    \      }\n                r.push((lst[i][j]) + (lst[i][j-1]));\n             \
    \   r.push((lst[i][j]) + (lst[i][j+1]));\n            }\n            r.sort();\n\
    \            arr = arr.concat(r);\n        }\n    }\n    arr.sort();\n    return\
    \ arr;\n}\n", "    if (lst.length === 0) {\n        return [];\n    }\n    if\
    \ (lst.length === 1) {\n        return [lst[0]];\n    }\n    var row = get_row(lst[lst.length\
    \ - 1], lst[0]);\n    if (lst.length > 2) {\n        var first_row = get_row(lst[0],\
    \ lst[1]);\n        row = row.concat(first_row);\n    }\n    var coords = [];\n\
    \    var row_index = 0;\n    row_index++;\n    row.forEach(function(col, column_index){\n\
    \        col = col.map((function(current_col){\n            return current_col\
    \ === x ? row_index : current_col;\n        }));\n        var coord = {};\n  \
    \      coord.row = row_index;\n        coord.column = column_index;\n        coords.push(coord);\n\
    \    });\n    coords.sort(function(a, b){\n        if (a.row > b.row) {\n    \
    \        return 1;\n        }\n        if (a.row < b.row) {\n            return\
    \ -1;\n        }\n        if (a.column > b.column) {\n            return 1;\n\
    \        }\n        if (a.column < b.column) {\n            return -1;\n     \
    \   }\n        return 0;\n    });\n    return coords.map(function(coord){\n  \
    \      return [coord.row, coord.column];\n    });\n}\n", "  const rows = lst.length\n\
    \  const results = []\n\n  for(let i = 0; i < rows; i++){\n    const row = lst[i]\n\
    \    const columns = get_column(row, x)\n    if(!columns) continue\n\n    columns.forEach((column,\
    \ j) => {\n      results.push([i, column])\n    })\n  }\n\n  return results.sort(comparator)[0]\n\
    }\n", "    if (lst.length == 0){\n        return [];\n    }\n\n    var res = [];\n\
    \n    // Find row\n    var row = lst.map(function(val, index){\n        return\
    \ [index, val];\n    });\n\n    // Sort by column in descending order\n    row.sort(function(a,\
    \ b){\n        return b[0] - a[0];\n    });\n\n    // Sort by row in ascending\
    \ order\n    row = row.sort(function(a, b){\n        return a[1] - b[1];\n   \
    \ });\n\n    // Search for x\n    for (var i=0, len=row.length; i<len; i++){\n\
    \        if (row[i][1] == x){\n            res.push(row[i]);\n        }\n    }\n\
    \n    return res;\n}\n", "  var row = [];\n  var xRow = lst.reduce(function(acc,\
    \ cur){\n    cur.forEach(function(item, i, arr){\n      if(item===x){\n      \
    \  acc.push([i,item]);\n      }\n    });\n    return acc;\n  }, []);\n  xRow.sort(function(a,b){\n\
    \    return a[0] - b[0];\n  });\n  xRow.reverse().forEach(function(item, i, arr){\n\
    \    row.push([i, item]);\n  });\n  return row;\n}\n", "    if (lst.length ==\
    \ 0){\n        return [];\n    }\n    else if (x == lst[0].length){\n        var\
    \ ret = [];\n        ret.push([0, x]);\n        for(var i = 1; i < lst.length;\
    \ i++){\n            var col = get_col(lst, i);\n            for (var j = 0; j\
    \ < col.length; j++){\n                ret[j].push((lst[i-1][col[j]] - lst[i][j]));\n\
    \            }\n        }\n        return ret;\n    }\n    var i;\n    for (i\
    \ = 0; i < lst.length; i++){\n        var row = get_col(lst, i);\n        var\
    \ cmp = compare_lst.call(null, row, [x]);\n        if (cmp < 0){\n           \
    \ ret = ret.concat(get_row.call(null, lst, x));\n            return ret;\n   \
    \     }\n        else if (cmp > 0){\n            if (i > 0){\n               \
    \ ret = ret.concat(get_row.call(null, lst, x));\n            }\n            return\
    \ ret;\n        }\n    }\n}\n", "    let ret = [];\n    if(!lst) return ret;\n\
    \    \n    let row = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i][0]\
    \ === x){\n            row++;\n            if(row === lst.length){\n         \
    \       ret.push([0, lst[i].length - 1]);\n                row = 0;\n        \
    \    }\n        }\n    }\n    \n    for(let i = 0; i < lst.length; i++){\n   \
    \     if(lst[i][0] === x){\n            ret.push([i, lst[i].length - 1]);\n  \
    \      }\n    }\n    \n    ret.sort((a,b)=>b[0] - a[0]);\n    ret.sort((a,b)=>b[1]\
    \ - a[1]);\n    \n    return ret;\n}\n", "    if(!lst.length || !lst[0].length){\n\
    \        return [];\n    }\n    if(lst.length === 1 || lst[0].length === 1){\n\
    \        return [[lst[0][0], lst[0][1]], [lst[1][0], lst[1][1]]];\n    }\n   \
    \ let row = [[0, 0], [0, 0], [0, 0]];\n    let last_row = [[0, 0], [0, 0]];\n\
    \    let last_row_index = 0;\n    let current_row_index = 0;\n    let last_row_row_col\
    \ = [0, 0], [0, 0];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x)\
    \ < 0){\n            continue;\n        }\n        current_row_index += lst[i].indexOf(x);\n\
    \        if(current_row_index === row[1][0] && current_row_index === row[1][1]){\n\
    \            row[0][0] = last_row_index;\n            row[1][0] = current_row_index;\n\
    \            row[1][1] = lst[i][0];\n            continue;\n        }\n      \
    \  last_row_index = row[0][0];\n        row[0][0] = current_row_index;\n     \
    \   row[1][0] = current_row_index;\n        row[1][1] = lst[i][0];\n        last_row_row_col[0]\
    \ = row[1][0];\n        last_row_row_col[1] = row[1][1];\n    }\n    row[0][1]\
    \ = last_row_index;\n    row[1][1] = last_row_index;\n    row[1][0] = last_row_row_col[0];\n\
    \    row[1][1] = last_row_row_col[1];\n    return row;\n}\n", "    let arr = [];\n\
    \    let sorted = [];\n    for(let r of lst){\n        if(r[x-1] > 0){\n     \
    \       sorted.push([r[x-1], r]);\n        }\n    }\n    sorted.sort((a,b) =>\
    \ b[0] - a[0]);\n    for(let s of sorted){\n        arr.push([s[0]-1, s[1]]);\n\
    \    }\n    return arr;\n}\n", "    lst = lst.sort(function(a, b){\n        a\
    \ = a[0].length; //sort rows by length\n        b = b.length\n        if(a ===\
    \ b) return 0; //rows have equal length\n        return a < b ? -1 : 1;\n    });\
    \ //ascending sort\n    var row = [];\n    for(var i=0; i<lst.length; i++){\n\
    \        if(!row[i]){\n            for(var j=0; j<lst[i].length; j++){\n     \
    \           if(lst[i][j] == x) row.push([i, j]); //new row\n            }\n  \
    \      }\n    }\n    if(!row.length){//no rows with x\n        row = [];\n   \
    \ }\n    row = row.sort(function(a, b){\n        a = a[0].length; //sort rows\
    \ by length\n        b = b.length\n        if(a === b) return 0; //rows have equal\
    \ length\n        return a < b ? -1 : 1;\n    }); //descending sort\n    return\
    \ row;\n}\n", "  if(!lst){ return []; }\n  if(lst.length < 2){ return []; }\n\n\
    \  // Sort the rows initially by row numbers in ascending order.\n  var sortedRows\
    \ = lst.sort(function(r1, r2){\n    return r1[0] - r2[0];\n  });\n  // Sort the\
    \ columns by column numbers in descending order.\n  var sortedCols = sortedRows.map(function(r){\n\
    \    return r.sort(function(a, b){ return a - b; });\n  });\n  \n  var row = [];\n\
    \  for(var i=0; i<sortedRows.length; i++){\n    row.push(sortedCols[i].filter(function(c){\n\
    \      return c === x;\n    }).map(function(c){\n      return [sortedRows[i][0],\
    \ c];\n    }));\n  }\n  return row;\n}\n", "    const row = new Array(lst.length).fill(0);\n\
    \    let i = 0;\n    for (let row of lst) {\n        let j = 0;\n        while\
    \ (j < x && row[j] !== 0) j++;\n        row[i] = j;\n        i++;\n    }\n   \
    \ row.sort((a, b) => b - a);\n    return row.map((row) => row.map((column) =>\
    \ column + i));\n}\n", "  if(lst.length < x){\n    return [];\n  }\n  let row\
    \ = [1];\n  let rowIndex = 0;\n  let rowCount = 1;\n  for(let i = 0; i < lst.length;\
    \ i++){\n    if(lst[i][0] == x){\n      row.push(i);\n      if(rowIndex == x){\n\
    \        rowCount = 1;\n      }else{\n        rowCount++;\n      }\n      rowIndex++;\n\
    \    }\n  }\n  return row.map(e =>{\n    return [i, e];\n  }).sort((a, b) =>{\n\
    \    if(a[1] < b[1]){\n      return -1;\n    }\n    if(a[1] > b[1]){\n      return\
    \ 1;\n    }\n    return 0;\n  }).reverse();\n}\n", "  var i, j, coordinates, row;\n\
    \  coordinates = [];\n  row = [0];\n  for(i = 0; i < lst.length; i++){\n    for(j\
    \ = 0; j < lst[i].length; j++){\n      if(lst[i][j] === x){\n        coordinates.push(row);\n\
    \        break;\n      }\n    }\n    row.push(lst[i].length + 1);\n  }\n  coordinates\
    \ = coordinates.sort(function(a, b){\n    return b[1] - a[1];\n  });\n  return\
    \ coordinates.map(function (item){\n    return item.map(function (item){\n   \
    \   return [item, item];\n    });\n  });\n}\n", "  var results = [];\n  var row\
    \ = [];\n  for(var i = 0; i < lst.length; i++){\n    if(!row.length || row[0]\
    \ > x){\n      row = row.concat(lst[i]);\n      results.push(row);\n      row\
    \ = [];\n    }else{\n      row = row.concat(lst[i]);\n    }\n  }\n  if(row.length){\n\
    \    results.push(row);\n  }\n  return results.sort(function(a, b){\n    return\
    \ b[0] - a[0];\n  }).reverse();\n}", "  var i, j, m, n, m, n, i, j, m, n, m, n,\
    \ m, n, m;\n\n  var coords = [];\n  var row = [];\n  for(i=0; i<lst.length; i++){\n\
    \    if(lst[i][0] != x){\n      coords.push(row);\n      row = [];\n    }\n  \
    \  for(j=0; j<lst[i].length; j++){\n      if(lst[i][j] != x){\n        row.push(lst[i][j]);\n\
    \      }\n    }\n  }\n  coords.push(row);\n  coords.sort(function(a, b){\n   \
    \ i = a.length;\n    j = b.length;\n    while(i--){\n      if(a[i] != b[j]){\n\
    \        return a[i] - b[j];\n      }\n    }\n  });\n  coords.sort(function(a,\
    \ b){\n    i = a.length;\n    j = b.length;\n    while(i--){\n      if(a[i] !=\
    \ b[j]){\n        return b[j] - a[i];\n      }\n    }\n  });\n  return coords;\n\
    }\n", "    var row, result = [], n = lst.length;\n    var i = -1, j = 0;\n   \
    \ for(; i < n; i++){\n        row = lst[i];\n        for(; j < row.length; j++){\n\
    \            if(row[j] == x) result.push([i, j]); // add new coordinate\n    \
    \    }\n    }\n    // sort coordinates initially by rows in ascending order\n\
    \    result.sort(function(i, j){\n        return i[0] < j[0] ? -1 : (i[0] > j[0]\
    \ ? 1 : 0); // sort by rows in ascending order\n    });\n    // sort coordinates\
    \ of the row by columns in descending order\n    result.sort(function(i, j){\n\
    \        return j[1] > i[1] ? -1 : j[1] < i[1] ? 1 : 0; // sort by columns in\
    \ descending order\n    });\n    return result;\n}", "\tvar n = lst.length;\n\t\
    var result = [];\n\tvar sorted_row = [];\n\tvar sorted_col = [];\n\t\n\t// Get\
    \ coordinates by the row and by column in descending order\n\tfor (var i=0;i<n;i++){\n\
    \t\tsorted_row.push(lst[i][i]);\n\t\tsorted_col.push(lst[i][n-1]);\n\t}\n\t\n\t\
    // Get coordinates initially sorted in ascending order\n\tfor (var i=0;i<n-1;i++){\n\
    \t\tresult.push([]);\n\t\tresult[n-1].push(i);\n\t}\n\t\n\t// Get coordinates\
    \ initially sorted in descending order\n\tfor (var i=0;i<n;i++){\n\t\tresult.push([]);\n\
    \t\tresult.push(i);\n\t}\n\t\n\t// Get coordinates according to the order of the\
    \ matrix\n\tfor (var i=0;i<n-1;i++){\n\t\tfor (var j=0;j<sorted_col.length;j++){\n\
    \t\t\tif (sorted_row[j] < sorted_row[i]){\n\t\t\t\tresult.push([]);\n\t\t\t\t\
    result[n-1].push(i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Check if coordinate\
    \ x exists in matrix\n\tvar exists = false;\n\tfor (var i=0;i<result.length;i++){\n\
    \t\tfor (var j=0;j<result[i].length;j++){\n\t\t\tif (result[i][j] === x){\n\t\t\
    \t\texists = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (!exists){\n\
    \t\tresult.push([]);\n\t\tresult.push([x]);\n\t}\n\t\n\treturn result;\n}\n",
  "  return get_col(lst, x)\n}\n", "    if (!lst) return [];\n    var m = lst.length;\n\
    \    var n = (m * (m+1)) / 2;\n    if (m <= 0 || n < 1 || n >= m) return [];\n\
    \    var arr = [];\n    for (var i = 1; i <= n; i++){\n        arr[i] = [];\n\
    \        for (var j = 0; j < m; j++){\n            arr[i][j] = lst[j - i];\n \
    \       }\n    }\n    arr.sort(function(a, b){\n        return a[a.length-1] >\
    \ b[b.length-1];\n    });\n    var r = [];\n    for (var i = 0; i < m; i++){\n\
    \        var row = [];\n        for (var j = 0; j < n; j++){\n            row.push(arr[i][j]);\n\
    \        }\n        row.unshift(i);\n        r.push(row);\n    }\n    r.sort(function(a,\
    \ b){\n        return a[a.length-1] > b[b.length-1];\n    });\n    return r;\n\
    }\n", "\tif(lst.length <= 0){\n\t\treturn [];\n\t}\n\tif(x < 0 || x >= lst[0].length){\n\
    \t\treturn [];\n\t}\n\tif(x < 0){\n\t\tx = lst[0].length - Math.abs(x);\n\t}\n\
    \tvar coord = [];\n\tfor(var i = 0, len = lst.length; i < len; i++){\n\t\tcoord.push([i,\
    \ x]);\n\t}\n\tcoord.sort(function(a, b){\n\t\treturn a[0] - b[0];\n\t});\n\t\
    coord.sort(function(a, b){\n\t\treturn a[1] - b[1];\n\t});\n\treturn coord;\n\
    }\n", "  if(lst.length == 0){\n    return [];\n  }\n  var result = [];\n  for(var\
    \ i = 0, length = lst.length; i < length; i++){\n    result.push([i, lst.indexOf(lst.splice(i,\
    \ 1)[0], x)]);\n  }\n  return result.sort(function(x,y){\n    if(x[0] == y[0]){\n\
    \      return -1;\n    }\n    if(x[0] < y[0]){\n      return 1;\n    }\n    return\
    \ 0;\n  }).map(function(it){\n    return lst[it[1]];\n  });\n}\n", "    var coordinates\
    \ = [];\n    lst.forEach(function(row){\n        row.forEach(function(value, column){\n\
    \            if(value == x){\n                coordinates.push(new Array(row +\
    \ 1).fill(0));\n            }\n        });\n    });\n    coordinates.sort(function(array1,\
    \ array2){\n        return array1[0] - array2[0];\n    });\n    coordinates.forEach(function(row){\n\
    \        row.sort(function(array1, array2){\n            return array1[1] - array2[1];\n\
    \        });\n    });\n    return coordinates;\n}\n</code>\n<|/ a tags=python,algorithm,arrays,data-structures,sorting\
    \ |>\n<| a tags=python,algorithm,arrays,data-structures,sorting |>\n<code>\ndef\
    \ search2DArray(arr2D,array2D):\n    array2D = sorted(array2D, key=lambda x: (x[0],\
    \ x[1]))\n    array2D = list(map(list, zip(*array2D)))\n    for row in array2D:\n\
    \        for col in row:\n            arr2D.insert(row.index(col)+1, [col[0],\
    \ col[1]])\n    return arr2D\n</code>\n<|/ a dscore=1 |>\n<| a |>\nA recursive\
    \ solution\n<code>\ndef search2DArray(arr2D,array2D):\n    array2D = sorted(array2D,\
    \ key=lambda x: (x[0], x[1]))\n    array2D = list(map(list, zip(*array2D)))\n\
    \    arr2D = []\n    if not array2D:\n        return []\n    lastRow = array2D[0]\n\
    \    for row in array2D[1:]:\n        col1 = row[0]\n        col2 = row[1]\n \
    \       if col1 < lastRow[1]:\n            arr2D.append([lastRow[0],lastRow[1]])\n\
    \            lastRow = [col1, col2]\n        else:\n            lastRow = [col1,\
    \ col2]\n    return arr2D\n\ndef search2DArray(arr2D,array2D):\n    array2D =\
    \ sorted(array2D, key=lambda x: (x[0], x[1]))\n    array2D = list(map(list, zip(*array2D)))\n\
    \    arr2D = []\n    if not array2D:\n        return []\n    lastRow = array2D[0]\n\
    \    for row in array2D[1:]:\n        col1 = row[0]\n        col2 = row[1]\n \
    \       if col1 < lastRow[1]:\n            arr2D.append([lastRow[0],lastRow[1]])\n\
    \            lastRow = [col1, col2]\n        else:\n            lastRow = [col1,\
    \ col2]\n    return arr2D\n\nprint(search2DArray([[5, 2, 3], [2, 4, 6], [8, 7,\
    \ 9]], [4]))\n</code>\n<|/ a dscore=0 tags=python,algorithm,arrays,data-structures,sorting\
    \ |>\n<| c |>\nwhat does this do? What do you think it does?\n<|/ c |>\n", "\t\
    var rows = [],\n\t\tcoord,\n\t\trow,\n\t\trowLen,\n\t\tcol,\n\t\tcolLen;\n\n\t\
    for(var i = 0; i < lst.length; i++){\n\t\trow = lst[i];\n\t\trowLen = row.length;\n\
    \t\tfor(j = 0; j < rowLen; j++){\n\t\t\tcoord = [i, row[j]];\n\t\t\tcolLen = row[j].length;\n\
    \t\t\tfor(var k = 0; k < colLen; k++){\n\t\t\t\tif(k === x) coord.push(k);\n\t\
    \t\t\telse coord.push(-1);\n\t\t\t}\n\t\t\tcoord.sort(function(a, b){\n\t\t\t\t\
    return b - a;\n\t\t\t});\n\t\t\trows.push(coord);\n\t\t}\n\t}\n\n\treturn rows;\n\
    }\n", "\tif(lst.length <= 0)\n\t\treturn [];\n\tif(lst.length == 1)\n\t\treturn\
    \ [[0, 0]];\n\tif(lst.length > 1 && lst.every(function(e){return e.length <= 1}))\
    \ // check if lst is 2D array\n\t\treturn [];\n\tlet row = [];\n\tlst.forEach(function(e){\n\
    \t\tlet i = e.indexOf(x);\n\t\tif(i < 0){\n\t\t\trow.push(e.filter(function(e,\
    \ i){ return i === x;}));\n\t\t}\n\t\telse {\n\t\t\trow.push(e.filter(function(e,\
    \ i){ return i != x;}));\n\t\t\trow.push([i]);\n\t\t}\n\t});\n\trow.forEach(function(e){e.sort((a,\
    \ b) => b[0] - a[0])});\n\trow.forEach(function(e){e.sort((a, b) => a[0] - b[0])});\n\
    \treturn row;\n}\n", "  if (lst.length == 0 || lst[0].length == 0) return [];\n\
    \n  var ret = [];\n  var n = lst[0].length;\n  for (var i = 0; i < lst.length;\
    \ i++){\n    if (lst[i].indexOf(x) >= 0) ret.push([i, lst[i].indexOf(x)])\n  }\n\
    \  ret = ret.sort(function(a, b){\n    if (b[1] > a[1]) return -1;\n    else if\
    \ (b[1] < a[1]) return 1;\n    return 0;\n  });\n\n  for (var i = 0; i < n; i++){\n\
    \    for (var j = 0; j < n; j++){\n      if (ret[i][1] > j) ret[i][1] = j;\n \
    \   }\n  }\n  return ret;\n}\n", "    var row = []\n    var columns = []\n   \
    \ if (lst.length == 0){\n        row = []\n        return row\n    }\n    for\
    \ (let i = 0; i < lst.length; i++){\n        columns.push(lst[i][lst[i].length\
    \ - 1 - x])\n        if (columns.length == x){\n            row.push(columns)\n\
    \            columns = []\n        }\n    }\n    if (columns.length > 0){\n  \
    \      row.push(columns)\n    }\n    return row\n}", "  let row_array = lst\n\
    \  let col_array = []\n  for (let i = 0, len = row_array.length; i < len; i++){\n\
    \    if (row_array[i][0] == x){\n      let tmp = {}\n      tmp['row'] = i\n  \
    \    for (let j = 0, len2 = row_array[i].length; j < len2; j++){\n        tmp['col']\
    \ = j\n        col_array.push(tmp)\n      }\n    }\n  }\n  col_array.sort((a,b)\
    \ => b['row'] - a['row'])\n  col_array.sort((a,b) => b['col'] - a['col'])\n  return\
    \ col_array\n}", "    let coordinates = []\n    for(let i=0; i < lst.length; i++){\n\
    \        for(let j=0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n\
    \                let coords = [i, j]\n                coordinates.push(coords)\n\
    \            }\n        }\n    }\n    coordinates.sort((a, b) => a[0] - b[0])\n\
    \    coordinates.sort((a, b) => b[1] - a[1])\n    return coordinates\n}\n", " \
    \ var i, row, temp, temp2, rows, cols;\n  if(!lst.length || !x){\n    return [];\n\
    \  }\n  rows = lst.length, cols = (lst[0] instanceof Array ? lst[0].length : 1);\n\
    \  if(rows < cols){\n    temp = [];\n    for(i = 0; i < rows; i++){\n      temp.push([0,\
    \ 0]);\n    }\n    rows = cols;\n  }\n  for(i = 0; i < rows; i++){\n    row =\
    \ lst[i];\n    temp2 = [];\n    for(j = 0; j < cols; j++){\n      temp2.push((x\
    \ > row[j] ? row[j] : row[j] + 1)); //+1 because of 0-based array\n    }\n   \
    \ if(x < temp2[0]){\n      temp2[0] = x;\n    }\n    temp.push(temp2);\n  }\n\
    \  temp.sort(function(a,b){\n    return a[0] - b[0];\n  });\n  for(i = 0; i <\
    \ rows; i++){\n    row = temp[i];\n    row.sort(function(a,b){\n      return a[1]\
    \ - b[1];\n    });\n  }\n  return temp;\n}\n", "    for(var y = 0; y < lst.length;\
    \ y++){\n        if(lst[y].length == x){\n            return [y, 0];\n       \
    \ }\n    }\n\n    return [];\n}\n", "\tif(lst.length===0)\n\t\treturn [];\n\t\
    var out = [], row_num = 0, column_num = 0;\n\tlst = lst.slice(0);\n\tif(lst.every(function(el){\
    \ return el.length===row_num; })===true)\n\t\tfor(var i=0; i<lst.length; i++){\n\
    \t\t\tif(i===0){\n\t\t\t\tvar row_el = lst[i];\n\t\t\t\tfor(var j=0; j<row_el.length;\
    \ j++)\n\t\t\t\t\tif(row_el[j]===x)\n\t\t\t\t\t\tout.push([row_num*i+j+1, column_num*row_el.length+j+1]);\n\
    \t\t\t}else{\n\t\t\t\tfor(var j=0; j<row_el.length; j++)\n\t\t\t\t\tif(row_el[j]===x)\n\
    \t\t\t\t\t\tout.push([row_num*i+j+1, column_num*row_el.length+j+1]);\n\t\t\t}\n\
    \t\t\tcolumn_num++;\n\t\t}\n\tout.sort(function(a, b){return b[1]-a[1]});\n\t\
    out.sort(function(a, b){return a[1]-b[1]});\n\treturn out;\n}\n", "  if (!lst)\
    \ return [];\n  if (x === 0 || x === lst.length) return lst;\n  if (lst.length\
    \ === 1) return [];\n\n  var row = [];\n  var col_max = 0;\n  var row_max = 0;\n\
    \  var col;\n  for(var i = 0; i < lst.length; i++){\n    row = row.concat(get_row(lst[i]).filter(function(e){\n\
    \      if(e.length > col_max) col_max = e.length;\n      if(e.length > row_max)\
    \ row_max = e.length;\n      if(e.length < col_max || e.length < row_max) return(false);\n\
    \      return true;\n    }));\n    col = lst[i].indexOf(x);\n    if(col === -1)\
    \ continue;\n    row.push([i, col]);\n  }\n  row.sort(function(a, b){\n    return\
    \ b[1] - a[1];\n  });\n  row.sort(function(a, b){\n    return a[0] - b[0];\n \
    \ });\n  row = row.map(function(e){\n    return e.map(function(i){\n      return\
    \ (lst[i][i] - col + lst[i][0]) * col_max;\n    })\n  });\n\n  return row;\n}\n",
  "  if(!lst) return [];\n\n  var ret = [];\n  var len = lst.length;\n\n  if(x >=\
    \ len) return ret;\n\n  var row = 0;\n  while(row < len){\n    if(lst[row].indexOf(x)\
    \ === 0){\n      var r = [];\n      while(row < len && lst[row].indexOf(x) ===\
    \ 0){\n        r.push(row++);\n      }\n      r.sort(function(a, b){return a -\
    \ b});\n      ret = ret.concat(r.reverse());\n      break;\n    }\n    row++;\n\
    \  }\n  return ret;\n}\n", "  var result = null;\n  var rows = lst.length;\n \
    \ var cols = lst[0].length;\n  var sorted_rows = sort(lst);\n  for(var i=0; i<rows;\
    \ i++){\n    for(var j=0; j<cols; j++){\n      if(sorted_rows[i][j] == x){\n \
    \       result = [];\n        result.push(i);\n        result.push(j);\n     \
    \   break;\n      }\n    }\n    if(result){\n      break;\n    }\n  }\n  return\
    \ result;\n}\n", "  if (lst == null){\n    return [];\n  }\n  let row = [];\n\
    \  let lastRow = lst[lst.length - 1];\n  row.unshift(0);\n  row.push(0);\n  for\
    \ (let i = 0; i < lastRow.length; i++){\n    if (lst[i] != null && lst[i].indexOf(x)\
    \ >= 0){\n      row.unshift(i);\n      row.push(i);\n    }\n  }\n  let sortedRow\
    \ = row.sort((a, b) => b - a);\n  let sortedLst = sortedRow.map((r) => lst[r]);\n\
    \  return sortedLst.sort((a, b) => b - a);\n}\n", "    var res = [];\n    if(!lst)\
    \ return [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i][0] ==\
    \ x) res.push([i, lst[i][1]]);\n    }\n    res = res.sort(function(a, b){\n  \
    \      if(a[1] < b[1]) return 1;\n        if(a[1] > b[1]) return -1;\n       \
    \ return 0;\n    });\n    var sorted = res.sort(function(a, b){\n        if(a[0]\
    \ < b[0]) return 1;\n        if(a[0] > b[0]) return -1;\n        return 0;\n \
    \   });\n    var out = [];\n    for(var i = 0; i < sorted.length; i++){\n    \
    \    for(var j = 0; j < res[i].length; j++){\n            out.push(sorted[i][0]\
    \ + res[i][j][0]);\n        }\n    }\n    return out;\n}\n", "    for(let i =\
    \ 0; i < lst.length; i++){\n        let row = []\n        for(let j = 0; j < lst[i].length;\
    \ j++){\n            if(j == x){\n                row.push(j)\n            }\n\
    \        }\n        row.sort()\n        row.sort()\n        if(row[0] == row.length){\n\
    \            row.reverse()\n        }\n        row.push(i)\n        lst[row] =\
    \ row\n    }\n    return lst\n}\n", "    if(!lst) return [];\n    var out = [];\n\
    \    var r = [];\n    var r_ind = [];\n    for(var i = 0; i < lst.length; i++){\n\
    \        for(var j = 0; j < lst[i].length; j++){\n            if(j === x) r_ind[i]\
    \ = -1;\n            else r_ind[i] = j;\n        }\n        r.push(r_ind);\n \
    \       r_ind = [];\n    }\n    r = r.filter(function(val){\n        if(!val.length)\
    \ return false;\n        return true;\n    });\n    for(var i = 0; i < r.length;\
    \ i++){\n        for(var j = 0; j < r[i].length; j++){\n            var x = r[i][j];\n\
    \            if(!out[x]) out[x] = [];\n            out[x].push([i, j, lst[i][j]]);\n\
    \        }\n    }\n    return out;\n}\n", "\tvar i, arr = [];\n\tfor(i = 0; i\
    \ < lst.length; i++){\n\t\tvar row = lst[i];\n\t\tfor (var j = 0; j < row.length;\
    \ j++){\n\t\t\tif(row[j] === x){\n\t\t\t\tarr.push([i, j]);\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn arr;\n}\n", "    let ret = [];\n    let tmp = [];\n\
    \    let row = 0;\n    let col = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(!tmp.length){\n            tmp.push([lst[i][0], lst[i][1]]);\n   \
    \     }else{\n            let tmp = tmp.sort(function(x, y){\n               \
    \ return y[1] - x[1];\n            });\n            if(tmp[0][0] == x) return\
    \ tmp.map(function(xx){return xx[0]});\n            tmp.map(function(x){\n   \
    \             if(!ret[row]) ret[row] = [];\n                ret[row].push(x);\n\
    \            });\n            if(!tmp.length){\n                ret.map(function(x){\n\
    \                    if(!ret[row]) ret[row] = [];\n                    ret[row].push([x[0],\
    \ x[1]]); \n                });\n                row++;\n                tmp =\
    \ [];\n            }\n        }\n    }\n    return ret;\n}\n", "  if (!lst) return\
    \ [];\n  let rows = [];\n  for (let row of lst){\n    let y = 0;\n    for (let\
    \ value of row){\n      if (value === x) return [rows[y++], rows[y++]];\n    }\n\
    \  }\n  return [];\n}\n", "\tif(!lst.length)\n\t\treturn [];\n\tvar row = [];\n\
    \tvar index = []; //Store the index of each row that we are looking for.\n\tvar\
    \ n = lst[0].length;\n\tfor(var i=0; i<n; i++){\n\t\tif(lst[0].indexOf(x) ===\
    \ i){\n\t\t\trow.push(i);\n\t\t\tindex.push(i);\n\t\t}\n\t}\n\trow = row.sort(function(a,\
    \ b){\n\t\treturn parseInt(a) - parseInt(b);\n\t});\n\trow = row.sort(function(a,\
    \ b){\n\t\treturn parseInt(b) - parseInt(a);\n\t});\n\trow = row.sort(function(a,\
    \ b){\n\t\treturn a[0] - b[0];\n\t});\n\trow = row.sort(function(a, b){\n\t\t\
    return b[0] - a[0];\n\t});\n\tvar new_row = [];\n\tfor(i=0; i<row.length; i++){\n\
    \t\tvar temp_row = row[i];\n\t\tfor(j=0; j<n; j++){\n\t\t\tnew_row.push(temp_row.concat(index[j]));\n\
    \t\t}\n\t}\n\treturn new_row;\n}\n", "    if (lst.length == 0){\n        return\
    \ [];\n    }\n\n    const n = lst[0].length;\n    const arr = [];\n\n    for(let\
    \ row = 0; row < n; row++){\n        const col = [];\n        for(let col = 0;\
    \ col < n; col++){\n            if (lst[row].includes(x)){\n                col.push({\
    \ row: row, col: col });\n            }\n        }\n        arr.push(col);\n \
    \   }\n    arr.sort((a, b) => (a[0].row > b[0].row) ? 1 : ((b[0].row > a[0].row)\
    \ ? -1 : 0));\n    for(let row = 0; row < n; row++){\n        for(let col = 0;\
    \ col < n; col++){\n            if (arr[row].length > 0 && arr[row][0].col > col){\n\
    \                arr[row][0].col = col;\n            }\n        }\n    }\n   \
    \ return arr;\n}\n", "    if(!lst) return [];\n    let res = [];\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i].includes(x)){\n            res.push([i,\
    \ lst[i].indexOf(x)])\n        }\n    }\n    res.sort((a, b) => {\n        if(!a[1])\
    \ return -1;\n        if(!b[1]) return 1;\n        return a[1] - b[1]\n    })\n\
    \    return res.map(c => [c.map(d => d + 1), c[0]]);\n}\n", "    \n    var i,\
    \ j, temp = [],\n        row, col;\n    \n    for(i = 0; i < lst.length; i++){\n\
    \        row = [];\n        for(j = 0; j < lst[i].length; j++){\n            row.push((lst[i][j]\
    \ === x ? 0 : j));\n        }\n        temp = temp.concat(row);\n    }\n    temp.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    \n    for(j = 0; j < temp.length; j++){\n\
    \        col = temp[j];\n        temp = temp.map(function(i){\n            return\
    \ i === col ? i : 0;\n        });\n        temp.sort(function(a, b){\n       \
    \     return b - a;\n        });\n    }\n    \n    return temp;\n}\n", "  const\
    \ arr = [...lst];\n  arr = arr.sort((a,b) => {\n    if(a.indexOf(x) >= 0){\n \
    \     return -1;\n    }else{\n      return 1;\n    }\n  });\n  let coord = [];\n\
    \  for(const row of arr){\n    coord = [...coord, ...row.sort((a,b) => {\n   \
    \   if(a > b){\n        return 1;\n      }else{\n        return -1;\n      }\n\
    \    })];\n  }\n  return coord;\n}\n", "  if (lst.length == 0) return [];\n  let\
    \ row = [lst[0].length, lst.length - 1];\n  let result = [];\n  for(let row_index\
    \ = 0; row_index < row[1]; ++row_index){\n    let column = -1;\n    for(let i\
    \ = 0; i < lst.length; ++i){\n      let item = lst[i];\n      if (column == x\
    \ && item > row[0]) break;\n      if (item == column) continue;\n      if (column\
    \ != -1) column = -1\n      result.push([i, column])\n    }\n  }\n  result.sort((a,b)\
    \ => a[0] - b[0]);\n  return result.map((x) => [x[1], x[0]])\n}\n", "    \n  \
    \  var rows = lst.length;\n    var columns;\n    if (rows === 0) {\n        return\
    \ [];\n    }\n    var result = [];\n    for (var row=0; row<rows; row++) {\n \
    \       var lst2 = lst[row].slice(0);\n        var lst3 = lst2.reverse();\n  \
    \      lst3.sort(function(a,b){return b-a});\n        lst3.sort(function(a,b){return\
    \ b-a});\n        var index = lst3.indexOf(x);\n        lst3.splice(index, 1);\n\
    \        result.push(lst3);\n    }\n    result.sort(function(a,b){return b-a});\n\
    \    result.sort(function(a,b){return b-a});\n    return result;\n}\n\n", "  const\
    \ result = [];\n  for(let i = 0; i < lst.length; i++){\n    const row = get_coord(lst,\
    \ i);\n    for(let j = 0; j < row.length; j++){\n      if(row[j][0] >= x){\n \
    \       result.push([i, row[j][0]]);\n      }\n    }\n  }\n  result.sort((a, b)\
    \ => a[1] - b[1]);\n  result.sort((a, b) => b[0] - a[0]);\n  return result;\n\
    }\n", "  let result = [];\n  for(let i = 0; i < lst.length; i++){\n    if(i ==\
    \ lst.length - 1){\n      result.push([i, x])\n    }\n    else if(i == 0){\n \
    \     result.push([0, lst[i]])\n    }\n    else if(lst[i][0] == lst[i-1][0]){\n\
    \      result.push([i, lst[i][1]])\n    }\n    else{\n      result.push([i, lst[i-1][1]])\n\
    \    }\n  }\n  \n  result = result.sort((a,b) => b[0] - a[0])\n  result = result.sort((a,b)\
    \ => b[1] - a[1])\n  return result;\n}\n", "    const res = [];\n    let row =\
    \ [];\n    let i = -1;\n    while(++i < lst.length){\n        const row = lst[i];\n\
    \        let j = -1;\n        const xx = row[x];\n        while(++j < xx.length){\n\
    \            res.push(row.concat(xx[j]));\n        }\n    }\n    res.sort(function(a,\
    \ b){\n        if(a[0] < b[0]) return -1;\n        if(a[0] > b[0]) return 1;\n\
    \        return 0;\n    });\n    res.sort((a, b) => b[1] - a[1]);\n    return\
    \ res;\n}\n", "  var row = [], row_sorted = [];\n  lst.forEach(function(val, index){\n\
    \    if(val != undefined && val != null){\n      row.push([index, val]);\n   \
    \ }\n  });\n  row_sorted = sort_row(row);\n  row_sorted.forEach(function(val,\
    \ index){\n    if(val != undefined && val != null){\n      if(val[1] != x){\n\
    \        row_sorted.splice(index, 1);\n      }\n    }\n  });\n  return row_sorted;\n\
    }\n", "  if (lst.length <= 0) return [];\n\n  var res = [],\n      rows = lst.length,\n\
    \      cols = lst[0].length;\n\n  for(var i = 0; i < rows; i++){\n    var row\
    \ = lst[i]\n      , cols = row.length;\n\n    var minx = Infinity;\n    var maxx\
    \ = 0;\n\n    for (var j = 0; j < cols; j++){\n      var val = row[j];\n     \
    \ if (val < x) minx = val;\n      if (val > x) maxx = val;\n    }\n\n    res.push([i,\
    \ (minx + maxx) / 2]);\n  }\n\n  res = sort_by_col_order(res, rows, cols);\n\n\
    \  return res;\n}\n", "    var tmp = [];\n    for(var i =0; i < lst.length; i++){\n\
    \        if (lst[i].indexOf(x) > -1){\n            tmp.push([i, lst[i].indexOf(x)]);\n\
    \        }\n    }\n    return tmp.sort(function(a, b){return b[1] - a[1]}).reverse();\n\
    }\n</cell>\n<cell>\n# Write your Code Here\n# You will use these functions above\
    \ to solve the exercise\n</cell>\n<cell>\n# Write your Code Here\n# You will use\
    \ these functions above to solve the exercise\n</cell>\n<text>\nQuestion 2 - Find\
    \ a point on a line segment\nIn a 2D line segment, there are two points A and\
    \ B such that line segment AB has a horizontal length h. Find a point c which\
    \ lies on the line segment AB, such that the distance c from the line segment\
    \ AB is h. Assume that a and b are two points defined on the line segment. Your\
    \ function should return both c and d.\n\nInput: Line segment (as a list of two\
    \ points) p = [a, b]. Integer h.\nOutput: Return point c as a tuple and integer\
    \ d.\n\nExample: Let a and b be two points defined in a line segment such that\
    \ AB is horizontally length: h. Let p and c be two points where a line segment\
    \ AB crosses the horizontally length-h. Let d be the point c on the line segment\
    \ AB.\n\nInput : p = [(0,0), (2,0)], h = 1\n\nOutput: p = [(1,0),(1,0)], d = 1\n\
    \n</text>\n<cell>\n# Write your Code Here\n# You will use these functions above\
    \ to solve the exercise\n</cell>\n<cell>\n# Write your Code Here\n# You will use\
    \ these functions above to solve the exercise\n</cell>\n<text>\nQuestion 3 - Find\
    \ a point on an arbitrary polygon or triangle\nIn a 2D polygon, there are n vertices\
    \ v0, v1, ... vn such that vertices v0 to vn are collinear. Find a point p on\
    \ the polygon where vertices v0 to vn are collinear. Assume that v0 is the vertex\
    \ nearest to the origin, i.e. the vertex at one of the end points. Your function\
    \ should return both p and q.\n\nInput: Polygon vertices v0, v1, ..., vn as described\
    \ above.\nOutput: Return point p as a tuple and point q as a tuple. The coordinates\
    \ of p and q are in the same coordinate system as the vertices v0, v1, ..., vn.\n\
    \nExample: Let v0, v1, ... vn be a list of n vertices in a 2D polygon such that\
    \ their coordinate systems are parallel and v0 and v1 are collinear. Let p and\
    \ q be ", "  if (lst.length === 0){\n    return [];\n  }\n  let row = [],\n  \
    \  arr = [];\n  for (let i = 0; i < lst[0].length; i++){\n    let coord = [i,\
    \ 0];\n    for (let j = 0; j < lst.length; j++){\n      coord[0] = j;\n      if\
    \ (x > lst[j][i]){\n        break;\n      }\n      coord[1] = i;\n      arr.push(coord);\n\
    \    }\n  }\n  arr.sort(function(a, b){\n    if (a[0] > b[0]) return 1;\n    if\
    \ (a[0] < b[0]) return -1;\n    return a[1] - b[1];\n  });\n  for (let i = 0;\
    \ i < arr.length; i++){\n    row.push([arr[i][0], arr[i][1]]);\n  }\n  return\
    \ row;\n}\n", "    var coords = [];\n    var xs = [x];\n    for(var i=0;i<lst.length;i++){\n\
    \        var cur = lst[i];\n        for(var j=0;j<cur.length;j++){\n         \
    \   if(cur[j] == x){\n                xs.push(j);\n                break;\n  \
    \          }\n        }\n    }\n    coords.sort(function(a, b){\n        if(a\
    \ > b) return 1;\n        if(a < b) return -1;\n        return 0;\n    });\n \
    \   coords.reverse();\n    var row = [];\n    coords.forEach(function(i){\n  \
    \      var a = coords.slice();\n        var b = [a.pop()];\n        coords.push(b);\n\
    \    });\n    return coords;\n}", "    // base case\n    if(lst.length == 0){\n\
    \        return [];\n    }\n    \n    // sort coordinates\n    lst = lst.sort(function(e1,\
    \ e2){\n        // sort columns in descending order\n        if(e1[0] != e2[0]){\n\
    \            return e1[0] - e2[0];\n        }\n        \n        // sort rows\
    \ in ascending order\n        if(e1[0] != x) return -1;\n        if(e1[0] != x)\
    \ return 1;\n        return 0;\n    });\n    \n    // find coordinate\n    var\
    \ row = lst.map(function(e){\n        return e[0] == x ? 1 : 0;\n    });\n   \
    \ \n    // sort coordinates\n    row = row.sort(function(a, b){\n        // sort\
    \ columns in descending order\n        if(a < b) return -1;\n        if(b < a)\
    \ return 1;\n        return 0;\n    });\n    \n    return row;\n}\n", "    if\
    \ (!lst) return [];\n    var coordinates = [], i, j, row = [], len = lst.length;\n\
    \    for (i = 0; i < len; i++){\n        row[i] = [];\n    }\n    for (i = 0;\
    \ i < len; i++){\n        row[i] = lst[i][i];\n        coordinates[i] = [lst[i][i],\
    \ lst[i][i]];\n    }\n    coordinates = coordinates.sort(function(a, b){\n   \
    \     return b[0] - a[0];\n    });\n    coordinates = coordinates.sort(function(a,\
    \ b){\n        return a[1] - b[1];\n    });\n    coordinates = coordinates.map(function(coor){\n\
    \        var i = coor[0];\n        var j = coor[1];\n        var tmp;\n      \
    \  while (i > 0 && j > 0){\n            tmp = row[i-1][j-1];\n            row[i-1][j-1]\
    \ = row[i][j-1];\n            row[i][j-1] = tmp;\n            i--;\n         \
    \   j--;\n        }\n        return [i, j];\n    });\n    return coordinates.filter(function(row){\n\
    \        return row[0] == x;\n    }).map(function(row){\n        return row.slice();\n\
    \    });\n}\n", "  if(!lst) return [];\n  if(lst.indexOf(x) !== -1) return [lst[0]];\n\
    \  var row = [];\n  lst.forEach(function(el){\n    if(el.indexOf(x) !== -1) {\
    \ row.push(el); }\n  });\n  if(row.length > 0)\n  {\n    var sorted = row.sort(function(x,\
    \ y){\n      var x_idx = x.indexOf(x);\n      var y_idx = y.indexOf(y);\n    \
    \  if(x_idx === -1 || y_idx === -1) return -1;\n      if(x_idx === y_idx) return\
    \ 0;\n      if(x_idx < y_idx) return -1;\n      return 1;\n    });\n    var new_row\
    \ = [];\n    var prev_row = [];\n    for(var i in sorted)\n    {\n      var x_idx\
    \ = sorted.indexOf(x);\n      var y_idx = sorted.indexOf(y);\n      if(x_idx !==\
    \ -1 && y_idx !== -1) new_row.push(prev_row.slice(0));\n      new_row.push([x_idx,\
    \ y_idx]);\n      prev_row = sorted[i];\n    }\n    return new_row;\n  }\n  return\
    \ [];\n}\n", "  let y = 0\n  if(lst.length <= 0) return []\n  const r = []\n \
    \ for(let i = 0; i < lst.length; i++){\n    if(lst[i].includes(x)){\n      if(y\
    \ === 0) r.unshift([0, y])\n      r.push([i, y])\n      y += lst[i]\n    }\n \
    \ }\n  return r.sort(function(a, b){\n    return a[1] - b[1]\n  }).reverse()\n\
    }\n", "  var results = [];\n  var rows = lst.length;\n  for(var i=0; i<rows; i++){\n\
    \    var cols = lst[i].length;\n    var row = [];\n    for(var j=0; j<cols; j++){\n\
    \      if(j==0){\n        row.push(x); \n      }else{\n        row.push(-1);\n\
    \      }\n    }\n    results.push([row, lst[i]]);\n  }\n  results.sort(function(a,b){\n\
    \    if(a[0]>b[0]){\n      return 1;\n    }else if(a[0]<b[0]){\n      return -1;\n\
    \    }else{\n      return 0;\n    }\n  });\n  results[0].sort(function(a,b){\n\
    \    if(a[1]>b[1]){\n      return 1;\n    }else if(a[1]<b[1]){\n      return -1;\n\
    \    }else{\n      return 0;\n    }\n  });\n  return results;\n}", "    var row\
    \ = [];\n    for(var i = 0, len = lst.length; i < len; i++){\n        var item\
    \ = lst[i];\n        if(item === x){\n            row[i] = item;\n        }\n\
    \    }\n    return row;\n}\n", "  let rows = lst.reduce((acc, val, index) => {\n\
    \    let row = val[index];\n    let row_coord = row.map((col) => ({col, row: index}));\n\
    \    row_coord.sort((a, b) => (a.row < b.row ? -1 : a.row > b.row ? 1 : 0));\n\
    \    row_coord.sort((a, b) => (a.col > b.col ? -1 : a.col < b.col ? 1 : 0));\n\
    \    acc.push(row_coord);\n    return acc;\n  }, []);\n  rows.sort((a, b) => (a[0]\
    \ > b[0] ? 1 : a[0] < b[0] ? -1 : 0));\n  rows = rows.map(a => (a.map(b => b[x])));\n\
    \  return rows;\n}\n", "    if (lst.length == 0) return [];\n    if (lst.length\
    \ == 1) return [[ x ]];\n    if (x < 0) return [];\n    if (lst.length == 1 &&\
    \ lst[0].length != 0) return [];\n\n    var ys = [];\n    var rows = lst.length,\
    \ cols = lst[0].length;\n    for (var i = 0, j = rows - 1; i < rows; i++, j--){\n\
    \        var row = [];\n        if (i == 0){\n            var col = 0;\n     \
    \       while (col < cols && lst[j][i] < x) col++;\n            row[0] = col;\n\
    \            while (col < cols && lst[j][i] >= x) col++;\n        }\n        else\
    \ {\n            while (col < cols && lst[j][i] < x) col++;\n        }\n     \
    \   while (col < cols && lst[j][i] >= x) col++;\n        for (var k = 0, z = rows\
    \ - 1; k < rows; k++, z--){\n            if (lst[k][i] < x) break;\n        }\n\
    \        if (k == rows - 1) row.push(k);\n        for (var k = rows - 1; k > 0;\
    \ k--){\n            if (lst[k][i] > x) break;\n        }\n        if (k == 0)\
    \ row.push(k);\n        for (var k = rows - 1; k > 0; k--){\n            if (lst[k][i]\
    \ >= x) break;\n        }\n        if (k == 0) row.push(k);\n        ys.push(row);\n\
    \    }\n    return ys;\n}\n", "    if(!lst) return [];\n    if(x < 0 || x > lst[0].length)\
    \ return [];\n\n    var result = [];\n    var rows = lst.map(function(row){\n\
    \        var sorted = row.slice().sort(function(x, y){\n            return y -\
    \ x;\n        });\n        return sorted.reverse().map(function(val, i){\n   \
    \         return [i, val];\n        });\n    });\n    \n    rows = rows.filter(function(row){\n\
    \        return row.length == x;\n    });\n    \n    rows = rows.map(function(row){\n\
    \        row = row.map(function(val){\n            return val[1];\n        });\n\
    \        row.sort(function(x, y){\n            return x - y;\n        });\n  \
    \      return row;\n    });\n\n    var coords = rows.map(function(row, i){\n \
    \       var coord = [];\n        for(var j = 0; j < row.length; j++){\n      \
    \      coord.push([i, j]);\n        }\n        return coord;\n    });\n    \n\
    \    coords.sort(function(x, y){\n        return x[0] - y[0];\n    });\n    \n\
    \    return coords;\n}\n", "    if(!lst.length) return [];\n    const lstSorted\
    \ = sort2d(lst);\n    return lst.map(lst => lst.map(x => lstSorted.indexOf(x)\
    \ == x));\n}\n", "    if(lst.length <= 0)\n        return []\n    var row = []\n\
    \    var row_index = {}\n    var row_order = []\n    var y_index = x\n    for(var\
    \ i = 0, len = lst.length; i < len; i++){\n        row_index[lst[i][0]] = i\n\
    \    }\n    for(var i = 0, len = lst.length; i < len; i++){\n        row_order.push(lst[i][1])\n\
    \    }\n    row_order.sort()\n    row_order.reverse()\n    for(var i = 0, len\
    \ = row_order.length; i < len; i++){\n        row.push([])\n        for(var j\
    \ = 0, len2 = row_order[i].length; j < len2; j++){\n            row[i].push(row_index[row_order[i][j]])\n\
    \        }\n    }\n    return row\n}\n", "  // O(n) time and O(1) space\n  if(!lst.length)\
    \ return [];\n\n  // O(1) time but O(n) space\n  let result = [];\n\n  // We go\
    \ through each row and find that x\n  // if found, put in result and return it.\n\
    \  for(let i = 0; i < lst.length; i++){\n    if(lst[i][0] >= x){\n      // We\
    \ found it. Now sort it in descending order\n      result = result.concat(\n \
    \       lst[i].slice(0).sort((a,b) => b - a).reverse()\n      );\n      return\
    \ result;\n    }\n  }\n}\n", "\tvar ret = [], row = [];\n\tfor (var i = 0, len\
    \ = lst.length; i < len; i++){\n\t\trow.push([i, lst[i]]);\n\t\tif (i == x) return\
    \ row.sort(function(a, b){return b[0] - a[0]});\n\t\telse row.sort(function(a,\
    \ b){return b[1] - a[1]});\n\t\tret.push(row);\n\t\trow = [];\n\t}\n\t\n\t// This\
    \ code returns array of arrays like [[2, 3], [2, 4], [1, 4], [1, 3]], \n\t// where\
    \ all elements except for the last array are in ascending order.\n\tret = ret.sort(function(a,\
    \ b){return b[0]-a[0]});\n\treturn ret.reverse();\n}", "  var arr = [];\n  var\
    \ y = arr.length;\n  for (var i = 0;i < y; i++){\n    var row = [];\n    var r\
    \ = i;\n    var c = y;\n    while (r > 0){\n      while (r > 0 && lst[r][c] <=\
    \ x){\n        r--;\n      }\n      row.push(r);\n      if (r > 0 && lst[r][c]\
    \ == x){\n        c++;\n      }\n      r--;\n    }\n    arr.push(row);\n  }\n\
    \  return arr;\n}\n", "  if(!lst.length) return [];\n  if(!x) x = 1;\n  var r\
    \ = [];\n  var row = lst[0];\n  var col = 1;\n  var i = 0;\n  for(; i < row.length;\
    \ i++){\n    if(row[i] === x) return r;\n  }\n  for(; col >= 0; col--){\n    r.push([i,\
    \ col]);\n    var next = 0;\n    for(; i < row.length; i++){\n      if(row[i]\
    \ === x){\n        r.push([i, col]);\n        break;\n      }\n      if(row[i]\
    \ > x){\n        if(col < row.length - 1) next = i + 1;\n        break;\n    \
    \  }\n    }\n    if(next === 0){\n      i++;\n      break;\n    }\n  }\n  return\
    \ r;\n}\n", "    if(lst.length == 0){\n        return []\n    }\n    var i, j;\n\
    \    var new_lst = []\n    for(i = 0; i< lst.length; i++){\n        for(j = 0;\
    \ j<lst[i].length; j++){\n            if(lst[i][j] == x){\n                new_lst.push([i,\
    \ lst[i].length-1])\n            }\n        }\n    }\n    return new_lst;\n}\n",
  "    let coord = [];\n    for(let i = 0; i < lst.length; i++){\n        let l =\
    \ [];\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j]\
    \ === x){\n                l.push(j);\n            }\n        }\n        coord.push(l);\n\
    \    }\n    coord.sort((a, b) => {\n        if(a[0] > b[0]) return 1;\n      \
    \  if(a[0] < b[0]) return -1;\n        return 0;\n    });\n    coord.sort((a,\
    \ b) => {\n        if(a[1] > b[1]) return 1;\n        if(a[1] < b[1]) return -1;\n\
    \        return 0;\n    });\n    return coord;\n}\n", "    var i, j, rows = [];\n\
    \    for(i = 0; i < lst.length; i++){\n        for(j = 0; j < lst[i].length; j++){\n\
    \            if(lst[i][j] === x){\n                rows.push([i,j]);\n       \
    \     }\n        }\n    }\n    rows.sort(function(a, b){\n        return a[a[0]]\
    \ - b[b[0]];\n    });\n    rows = rows.reverse();\n    for(i = 0; i < rows.length;\
    \ i++){\n        rows[i].sort(function(a, b){\n            return b[b[0]] - a[a[0]];\n\
    \        });\n    }\n    return rows;\n}\n", "    if(!lst) return [];\n    const\
    \ rows = lst[0].map((_, idx) => idx);\n    return rows.reduce((result, row) =>\
    \ {\n        const columns = [...lst[row].map((_, idx) => idx)];\n        columns.sort((a,b)\
    \ => b - a);\n        result.push([...columns, lst[row].length]);\n        return\
    \ result;\n    }, []);\n}\n", "  var result = [];\n  for(var i = 0, len = lst.length;\
    \ i < len; i++){\n    var row = lst[i];\n    if(row.indexOf(x) > -1){\n      result.push([i,\
    \ row.indexOf(x)])\n    }\n  }\n  result = result.sort(function(x, y){\n    return\
    \ y[1]-x[1]\n  });\n  result = result.sort(function(x, y){\n    return x[1]-y[1]\n\
    \  });\n  for(var i = 0, len = result.length; i < len; i++){\n    result[i].push((i\
    \ + 1) * x[0]);\n  }\n  return result;\n}\n", "  var result = [];\n  var row =\
    \ 0;\n  var col = 0;\n  var index = 0;\n  var length = lst.length;\n  while(row\
    \ < length){\n    while(col < length && lst[row][col] === x){\n      result.push([row,\
    \ col]);\n      col++;\n    }\n    col = 0;\n    row++;\n  }\n  result = result.sort();\n\
    \  result.reverse();\n  result.forEach(function(val){\n    index = row.indexOf(val[0]);\n\
    \    row[index] = col;\n    col--;\n  });\n  return result;\n}\n", "    let res\
    \ = [];\n    let row = 0;\n    let col = 0;\n    \n    while(col < lst[0].length){\n\
    \        if(row < lst.length){\n            if(!is_in_row(res, lst[row], col)){\n\
    \                res[col].push([row, col]);\n                col++;\n        \
    \        let newcol = col;\n                while(newcol < lst[0].length && is_in_row(res,\
    \ lst[row], newcol)){\n                    res[col].push([row, newcol]);\n   \
    \                 newcol++;\n                }\n            }\n            \n\
    \            row++;\n            \n            if(row < lst.length){\n       \
    \         col = 0;\n                while(col < lst[0].length && !is_in_row(res,\
    \ lst[row], col)){\n                    col++;\n                }\n          \
    \      col--;\n            }\n        }\n        else {\n            break;\n\
    \        }\n    }\n    \n    return res;\n}\n", "    let ans = [];\n    let row\
    \ = 0;\n    let column = 0;\n    for(let i = 0; i < lst.length; i++){\n      \
    \  if(lst[i][row] == x){\n            ans.push([row, column]);\n            break;\n\
    \        }\n        else if(lst[i][row] > x){\n            column++;\n       \
    \ }\n        else{\n            column = 0;\n            row++;\n        }\n \
    \   }\n    ans.sort((a,b)=>a[0]-b[0]);\n    ans.sort((a,b)=>b[1]-a[1]);\n    return\
    \ ans;\n}", "  let xs = [];\n  for (let row of lst){\n    xs.push(row.map((x)\
    \ => x + x));\n  }\n  xs = xs.sort((a, b) => a[0] - b[0]);\n  xs = xs.sort((a,\
    \ b) => a[1] - b[1]);\n  return xs.filter(x => x[0] == x);\n}\n", "  if(lst.length\
    \ === 0){\n    return [];\n  }\n\n  var row = [];\n\n  //Find first element in\
    \ lst that matches x\n  for (var i = 0; i < lst.length; i++){\n    if(lst[i] ===\
    \ x){\n      //Check if row is already sorted\n      if(row.length === 0){\n \
    \       //If row is not sorted, sort it by rows in ascending order\n        var\
    \ sorted_row = sort(lst[i]);\n        row = row.concat(sorted_row);\n      }\n\
    \n      //If row is sorted, sort it by columns in descending order\n      else{\n\
    \        var sorted_row = sort(lst[i]);\n        sorted_row.sort(function(a, b){\n\
    \          return b - a\n        });\n        row = row.concat(sorted_row);\n\
    \      }\n\n      break;\n    }\n  }\n\n  return row;\n}\n", "\tif(lst.length\
    \ < 1) return [];\n\tvar row = [];\n\tfor(var i=0, _len_i = lst.length; i < _len_i;\
    \ i++){\n\t\tif(x === lst[i][0]){\n\t\t\trow.push(lst[i][1]);\n\t\t\tfor(var j=1,\
    \ _len_j = lst[i].length; j < _len_j; j++){\n\t\t\t\trow.push(lst[i][j]);\n\t\t\
    \t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn row;\n}\n", "    let rows = lst.map(arr\
    \ => arr.length).sort((a, b) => a - b).reverse();\n    return rows.map(row =>\
    \ row.filter((_, idx) => idx === x));\n}\n", "  var result = []\n  if(!lst) return\
    \ []\n  for(var i = 0, len = lst.length; i < len; i++){\n    if(lst[i].indexOf(x)\
    \ != -1){\n      result.push([i, lst[i].indexOf(x)])\n    }\n  }\n  if(result.length\
    \ == 0) return []\n  result = _.sortBy(result, \"row\").reverse()\n  var res =\
    \ [], l = []\n  for(var i = 0, len = result.length; i < len; i++){\n    var row\
    \ = result[i].row, col = result[i].col\n    l.push([row, col])\n    for(var j\
    \ = 0; j < len; j++){\n      if(result[j].row == row){\n        res.push([result[j].col,\
    \ result[j].val])\n        break\n      }\n    }\n  }\n  l = _.sortBy(l, \"col\"\
    ).reverse()\n  for(var i = 0, len = l.length; i < len; i++){\n    res.push([l[i][1],\
    \ l[i][0]])\n  }\n  return res\n}\n", "  if(lst.length < 1) return [];\n  const\
    \ rows = lst[0].map(row => row.slice());\n  rows.sort((a,b) => b.length - a.length);\n\
    \  rows.sort( (a,b) => b.indexOf(x) - a.indexOf(x) );\n  return rows.map(row =>\
    \ row.map((_, i) => i));\n}\n", "    let res = [], row = [];\n    lst.forEach(row\
    \ => {\n        if(row.indexOf(x) == -1){\n            res.push(row);\n      \
    \  } else {\n            for(let i = 0; i < row.length; i++){\n              \
    \  if(row[i] == x){\n                    res.push([i, row.indexOf(row[i])]);\n\
    \                }\n            }\n        }\n    });\n    res.sort((a,b) => {\n\
    \        return a[1] - b[1];\n    });\n    res.sort((a,b) => {\n        return\
    \ b[0] - a[0];\n    });\n    return res;\n}\n", "    if(lst.length == 0)\n   \
    \     return [];\n    var row = [];\n    var row_length = 0;\n    var max_row_length\
    \ = Math.max.apply(null, lst.map(function(a){return a.length;}));\n    for(var\
    \ i = 0; i < lst.length; i++){\n        var row_data = [];\n        for(var j\
    \ = 0; j < lst[i].length; j++)\n            row_data.push([j, lst[i][j]]);\n \
    \       row_data.sort(function(a,b){return b[1] - a[1]});\n        row_data.sort(function(a,b){return\
    \ b[0] - a[0]});\n        if(row_length != 0)\n            if(row_length != max_row_length){\n\
    \                row.push(row_data.slice(row_length));\n                row_length\
    \ = 0;\n            }\n        row.push(row_data);\n        row_length += row_data.length;\n\
    \    }\n    if(row.length == 0)\n        return [];\n    if(row_length != 0)\n\
    \        row.push(row.slice(row_length));\n    row.sort(function(a,b){return b[0][0]\
    \ - a[0][0]});\n    row.sort(function(a,b){return b[0][1] - a[0][1]});\n    return\
    \ row.reduce(function(a,b){\n        return a.concat(b);\n    }, []);\n}\n", " \
    \   var result = null;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i][0]\
    \ == x){\n            result = [x, lst[i][1]];\n            break;\n        }\n\
    \    }\n    if(!result){\n        result = get_row([], x);\n    }\n    return\
    \ result;\n}\n", "    if (lst.length <= 0){\n        return [];\n    }\n\n   \
    \ // Find the first row that matches x\n    var row = lst.map(function(item){\n\
    \        return item.indexOf(x);\n    });\n    var firstRow = row[0];\n    row\
    \ = row.map(function(item){\n        // Get the number of columns in the current\
    \ row\n        return item.length - firstRow;\n    });\n    // Sort coordinates\
    \ initially by rows in ascending order\n    row.sort();\n    // Also, sort coordinates\
    \ of the row by columns in descending order\n    row = row.map(function(item){\n\
    \        return item.reverse();\n    });\n    // Add the first row to the result\n\
    \    row.unshift([0, lst[0].length]);\n\n    return row;\n}\n", "\tvar result\
    \ = [];\n\tvar index = 0;\n\tfor(var i = lst.length - 1; i >= 0; i--){\n\t\tvar\
    \ numOfElements = lst[i].length;\n\t\tvar maxNumOfElements = index;\n\t\tvar tmp\
    \ = [];\n\t\tfor(var j = 0; j < numOfElements; j++){\n\t\t\tif(tmp.length < maxNumOfElements){\n\
    \t\t\t\ttmp.push(0);\n\t\t\t}\n\t\t\ttmp.push(lst[i][j]);\n\t\t}\n\t\ttmp.sort(function(a,b){return\
    \ b-a});\n\t\ttmp.reverse();\n\t\tresult.push(tmp);\n\t\tindex++;\n\t}\n\tresult[0].reverse();\n\
    \treturn result;\n}\n", "  if(!lst || !lst.length)\n    return [];\n  var coords\
    \ = [];\n  for(var i = 0; i < lst.length; ++i){\n    var r = [];\n    var c =\
    \ coords.slice(0);\n    var r = coords;\n    var r = get_column(r,i);\n    var\
    \ c = get_column(c, lst[i].length-1);\n    for(var j = 0; j < lst[i].length; ++j){\n\
    \      if(lst[i][j] == x)\n        coords.push([i+1, j+1]);\n      if(coords.length)\n\
    \        c.splice(-1, 1);\n    }\n    if(c.length){\n      var l = get_column(r,\
    \ c[0].length-1);\n      r.splice(-2, 2);\n      for(var j = 0; j < c[0].length;\
    \ ++j){\n        l.splice(-1, 1);\n      }\n    }\n  }\n  coords = coords.sort(function(a,\
    \ b){\n    var r = a[0]-b[0];\n    var c = a[1]-b[1];\n    if(r == 0)\n      return\
    \ c == 0? 0 : (a==b)?0:-1;\n    else if(c == 0)\n      return 1;\n    else\n \
    \     return r;\n  });\n  coords = coords.map(function(x){return [x[1], x[0]];});\n\
    \  coords.sort(function(a, b){\n    var r = a[0]-b[0];\n    var c = a[1]-b[1];\n\
    \    return (r==0||c==0)? r * c : r > c? -1 : 0;\n  });\n  return coords.map(function(x){return\
    \ [x[0], x[1]];});\n}\n", "    // init variables\n    var arr = [];\n    var row\
    \ = [];\n    var rowIndex = 0;\n\n    // sort the coordinates by rows in ascending\
    \ order\n    arr.sort(function(a, b){\n        return a[0] - b[0];\n    });\n\n\
    \    // sort the coordinates of a row by columns in descending order\n    arr.forEach(function(item,\
    \ index, array){\n        if(index !== 0){\n            var tempRow = [];\n  \
    \          item.forEach(element => {\n                tempRow.push([element, item[index\
    \ - 1][1]]);\n            });\n            arr.splice(index, 0, tempRow);\n  \
    \      }\n    });\n\n    // initialize rowIndex\n    for(var i=0; i<arr.length;\
    \ i++){\n        if(arr[i][0] === x){\n            rowIndex = i;\n           \
    \ break;\n        }\n    }\n\n    // get the coordinates\n    arr.forEach(function(item,\
    \ index, array){\n        if(index !== 0){\n            item.forEach(function(item,\
    \ index){\n                if(index === 0){\n                    arr.splice(index,\
    \ 0, [x, item]);\n                }\n            });\n        }\n    });\n\n \
    \   // return row\n    return arr.slice(rowIndex+1);\n}\n", "  if(lst.length ==\
    \ 0){\n    return [];\n  }\n  var results = [];\n  for(var i = 0, len = lst.length;\
    \ i < len; i++){\n    var item = lst[i];\n    for(var j = 0, xlen = item.length;\
    \ j < xlen; j++){\n      if(item[j] == x){\n        results.push([j, i]);\n  \
    \    }\n    }\n  }\n  return results.sort(function(a, b){\n    var result = a[1]\
    \ - b[1];\n    return result;\n  });\n}\n", "\tlet result = [];\n\tlet temp =\
    \ [];\n\tfor (let i = 0; i < lst.length; i++){\n\t\tlet row = lst[i];\n\t\tlet\
    \ found = false;\n\t\tfor (let j = 0; j < row.length; j++){\n\t\t\tif (row[j]\
    \ === x) {\n\t\t\t\tfound = true;\n\t\t\t\ttemp.push([i, j]); // Push coordinates\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!found){\n\t\t\tresult.push(temp);\n\t\
    \t\ttemp = [];\n\t\t}\n\t}\n\tresult.push(temp);\n\tresult = result.map(x => x.sort(function(a,\
    \ b){\n\t\treturn b[0] - a[0];\n\t})).map(x => x.sort(function(a, b){\n\t\treturn\
    \ b[1] - a[1];\n\t}));\n\treturn result;\n}\n", "    if(lst.length == 0) return\
    \ [];\n    var temp = [];\n    for(var i = 0; i <= lst[0].length; i++){\n    \
    \    temp.push([i, lst[0][i]]);\n    }\n    temp.sort(function(a, b){\n      \
    \  var a1 = a[1] - lst[0][0];\n        var a2 = b[1] - lst[0][0];\n        return\
    \ a1 - a2;\n    });\n    temp.sort(function(a, b){\n        var b1 = b[1] - lst[0][0];\n\
    \        var b2 = a[1] - lst[0][0];\n        return b1 - b2;\n    });\n    var\
    \ res = [];\n    for(var i = lst[0].length - 1; i >= 0; i--){\n        if(temp[i][0]\
    \ == x){\n            res.push(temp[i]);\n        }\n    }\n    return res;\n}",
  "  if(lst.length == 0)\n    return [];\n  if(x < 0 || x > lst.length)\n    throw\
    \ \"Invalid input\";\n  var result = [];\n  for(var i = 0; i<lst.length; i++){\n\
    \    if(lst[i] == x)\n      result.push([i, lst[i]]);\n  }\n  result.sort(function(a,\
    \ b){\n    return b[1] - a[1];\n  }).reverse();\n  for(var i = 0; i<result.length;\
    \ i++){\n    result[i].sort(function(a, b){\n      return b[0] - a[0];\n    });\n\
    \  }\n  return result;\n}\n", "  if(lst.length == 0){\n    return [];\n  }\n \
    \ let row = [];\n  for(let y = 0; y < lst[0].length; y++){\n    let flag = true;\n\
    \    for(let i = 0; i < lst.length; i++){\n      if(lst[i][y] === x){\n      \
    \  flag = false;\n        break;\n      }\n    }\n    if(flag){\n      row.push(y);\n\
    \    }\n  }\n  row.sort((a,b) => b - a);\n  for(let i = row.length - 1; i >= 0;\
    \ i--){\n    row.sort((a, b) => b - a);\n  }\n  return row;\n}\n", "    let result\
    \ = [];\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x)\
    \ > -1){\n            result.push([i, lst.indexOf(lst[i])]);\n        }\n    }\n\
    \n    result.sort((a,b) => b[0] - a[0]);\n\n    for(let i = 0; i < result.length;\
    \ i++){\n        result[i].reverse();\n    }\n\n    return result.slice(0);\n\
    }\n", "    if (lst.length === 0) {\n        return [];\n    } else if (x < 0 ||\
    \ x > lst[0].length) {\n        return [];\n    } else {\n        var result =\
    \ [];\n        var row, row_len = lst.length;\n        var row_pos = 0;\n    \
    \    var row_start = 0;\n        var i, col, col_len = lst[0].length;\n      \
    \  var col_pos = 0;\n        var col_start = 0;\n        while (row_pos < row_len\
    \ && col_pos < col_len) {\n            col = col_pos;\n            while (col_pos\
    \ < col_len && col_pos < col_len) {\n                if (col_pos === col_len)\
    \ {\n                    if (col_pos === col_len - 1) {\n                    \
    \    col_pos = col_len;\n                        col_start++;\n              \
    \      }\n                } else {\n                    if (lst[row_pos][col_pos]\
    \ < lst[row_pos][col_pos + 1]) {\n                        col++;\n           \
    \             col_pos++;\n                    }\n                    else {\n\
    \                        col--;\n                        col_pos++;\n        \
    \            }\n                }\n            }\n            if (col === col_pos)\
    \ {\n                if (col_pos === col_len - 1) {\n                    col_pos\
    \ = col_len;\n                    col_start++;\n                }\n          \
    \  } else {\n                result.push([row_start, col_start]);\n          \
    \      row_pos++;\n                col_start++;\n            }\n        }\n  \
    \      return result;\n    }\n}\n", "  if (lst.length == 0) return [];\n  let\
    \ res = [], row = [];\n  for (let i = 0, n = lst.length; i < n; i++){\n    for\
    \ (let j = 0; j < lst[i].length; j++){\n      if (i == 0 || j == 0) row.push(i);\n\
    \      if (lst[i][j] === x) res.push(row.concat([j]));\n    }\n    row.splice(0,\
    \ row.length);\n  }\n  res.sort((a,b) => b[0] - a[0]);\n  res.sort((a,b) => a[1]\
    \ - b[1]);\n  return res;\n}", "    var res = [];\n    for(var i=0; i<lst.length;\
    \ i++){\n        if(lst[i] && lst[i].length){\n            var y = lst[i][x];\n\
    \            if(!res.every(function(r){ return r[0] < r[1] }) || !res.some(function(r){\
    \ return r[1] > y})){\n                res.push([i, y]);\n            }\n    \
    \    }\n    }\n    res.sort((a, b) => a[0] - b[0]);\n    res.sort((a, b) => b[1]\
    \ - a[1]);\n    return res;\n}\n", "  // sort the list by the first element in\
    \ each row\n  lst.sort(function(a, b){\n    if(a.length == 0) return -1;\n   \
    \ if(a[0] == b[0]) return 0;\n    return a[0] < b[0] ? -1 : 1;\n  });\n  var ret\
    \ = [];\n  var res = [];\n  var i = 0;\n  var j = 0;\n  for(; i < lst.length;\
    \ i++){\n    for(; j < lst[i].length; j++){\n      if(lst[i][j] == x){\n     \
    \   res[i] = [res[i] || [], lst[i]];\n        ret.push(res[i]);\n        i++;\n\
    \        break;\n      }\n    }\n    if(j == lst[i].length){\n      res[i] = [res[i]\
    \ || [], lst[i]];\n      ret.push(res[i]);\n    }\n  }\n  return ret;\n}\n", " \
    \   if(!lst) return [];\n    let result = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(!lst[i]) continue;\n        let row = [];\n        for(let\
    \ j = 0; j < lst[i].length; j++){\n            if(j === x) row.push([i, j]);\n\
    \        }\n        result.push(row);\n    }\n    result.sort(function(a, b){\n\
    \        if(rowNumber(a) > rowNumber(b)) return 1;\n        if(rowNumber(a) <\
    \ rowNumber(b)) return -1;\n        return 0;\n    });\n    result.sort(function(a,\
    \ b){\n        if(rowNumber(a) > rowNumber(b)) return -1;\n        if(rowNumber(a)\
    \ < rowNumber(b)) return 1;\n        return 0;\n    });\n    return result.map(row\
    \ => row.map(item => item[0]));\n}\n", "    if(lst.length===0){return [];}\n \
    \   else if(lst.length===1){return [[0,x]];}\n    else{\n        let rows=[];\n\
    \        let row=lst[0];\n        let row_len=row.length;\n        for(let i=0;i<row_len;i++){\n\
    \            for(let j=0;j<row_len;j++){\n                if(row[j]==x){\n   \
    \                 let new_row=[];\n                    new_row.push(row[0]+i,\
    \ row[1]-j);\n                    rows.push(new_row);\n                }\n   \
    \         }\n        }\n        rows.sort((a,b)=>b[1]-a[1]);\n        rows.sort((a,b)=>a[0]-b[0]);\n\
    \        return rows;\n    }\n}\n", "    if(!lst.length) return [];\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(i == 0){\n            for(var j = 0;\
    \ j < lst[i].length; j++){\n                if(lst[i][j] == x){\n            \
    \        return [[i, j]];\n                }\n            }\n        }else{\n\
    \            for(var j = 0; j < lst[i].length; j++){\n                if(lst[i][j]\
    \ > x){\n                    if(i == lst[i-1].length - 1){\n                 \
    \       return [];\n                    }else{\n                        break;\n\
    \                    }\n                }\n            }\n        }\n    }\n}",
  "\tif(lst == null){\n\t\treturn [];\n\t}\n\tvar result = [];\n\tvar row = [];\n\t\
    for(var i=0; i< lst.length; i++){\n\t\tif(lst[i].indexOf(x) == 0){\n\t\t\trow.push(i);\n\
    \t\t}\n\t}\n\tvar index = 1;\n\twhile(row.length > 0){\n\t\tvar found = false;\n\
    \t\tfor(var j=0; j<row.length; j++){\n\t\t\tif((lst[row[j]].indexOf(x) != -1)\
    \ && row[j] < index){\n\t\t\t\tresult.push([index, index]);\n\t\t\t\tlst[row[j]].splice(lst[row[j]].indexOf(x),\
    \ 1);\n\t\t\t\trow[j] += 1;\n\t\t\t\tindex = index+1;\n\t\t\t\tfound = true;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!found){\n\t\t\tresult.push([index, index]);\n\
    \t\t\trow = [];\n\t\t}\n\t}\n\tresult.sort(function(a, b){\n\t\treturn b[1] -\
    \ a[1];\n\t});\n\treturn result;\n}\n", "  const row = [];\n  let rowInd = 0;\n\
    \  let colInd = 0;\n  while(lst.length > 0){\n    if(lst[0][x] === rowInd){\n\
    \      row.push([rowInd, colInd]);\n      lst.shift();\n      rowInd++;\n    \
    \  colInd = 0;\n    }\n    else{\n      colInd++;\n    }\n  }\n  return row;\n\
    }\n", "  if(lst.length < 1 || x < 0){\n    return [];\n  }\n  var i, arr = [];\n\
    \  var xarr = x % lst[0].length;\n  var i = lst.length - 1;\n  while(true){\n\
    \    if(i >= 0 && xarr >= lst[i].length){\n      xarr -= lst[i].length;\n    \
    \  i--;\n      continue;\n    }\n    if(xarr >= 0){\n      break;\n    }\n   \
    \ i--;\n  }\n  while(lst[i].length > 0){\n    arr.push([i, lst[i].length]);\n\
    \    i--;\n  }\n  return arr;\n}\n", "    if(lst.length === 0 || lst.length ===\
    \ 1){\n        return [];\n    }\n    if(x > lst[0][0]){\n        lst = get_row(sortList(lst),\
    \ x);\n    }\n    let rows = lst[0].map(x => [x, x + 1]);\n    if(x < lst[lst.length\
    \ - 1][0]){\n        let row = get_row(sortList(lst), x);\n        rows = rows.concat(row.map((y,\
    \ i) => [y, rows[i + 1][0]]));\n    }\n    return rows;\n}\n", "\tvar result =\
    \ [];\n\tfor(var i = 0, len = lst.length; i < len; i++){\n\t\tvar row = lst[i];\n\
    \t\tvar xInRow = row[0];\n\t\tvar yInRow = row[xInRow];\n\t\tif(!result[xInRow]){\n\
    \t\t\tresult[xInRow] = [];\n\t\t}\n\t\tresult[xInRow].push([i, yInRow]);\n\t}\n\
    \t\n\tresult.sort(function(a, b){\n\t\tvar a1 = a[0];\n\t\tvar b1 = b[0];\n\t\t\
    return a1 > b1 ? 1 : a1 < b1 ? -1 : 0;\n\t});\n\t\n\tfor(var i = 0, len = result.length;\
    \ i < len; i++){\n\t\tvar row = result[i];\n\t\tvar sortedRow = row.sort(function(a,\
    \ b){\n\t\t\tvar a2 = a[1];\n\t\t\tvar b2 = b[1];\n\t\t\treturn a2 > b2 ? 1 :\
    \ a2 < b2 ? -1 : 0;\n\t\t});\n\t\tfor(var j = 0, len2 = sortedRow.length; j <\
    \ len2; j++){\n\t\t\tvar item = sortedRow[j];\n\t\t\tresult[i].push(item[1]);\n\
    \t\t}\n\t}\n\t\n\treturn result;\n}\n", "    for(let i=0; i<lst.length; i++){\n\
    \        if(lst[i][x-1] != undefined){\n            return [i, lst[i][x-1]];\n\
    \        }\n    }\n    return [];\n}\n", "  var arr = [];\n  var len = lst.length;\n\
    \  for(var i = 0; i < len; i++){\n    if(lst[i][0] === x){\n      arr[i] = [lst[i][0],\
    \ lst[i][1]];\n    }\n  }\n  arr.sort(function(a, b){\n    return b[0] - a[0];\n\
    \  });\n  arr.sort(function(a, b){\n    return b[1] - a[1];\n  });\n  return arr;\n\
    }\n", "  var i, j;\n  var res = [];\n  for(i = 0, j = lst.length - 1; i < lst.length;\
    \ i++){\n    if(lst[i] === x)\n      res.push([i, lst[j]]);\n    else\n      res.push([lst[i],\
    \ j]);\n  }\n  res.sort(function(a, b){return a[0] - b[0];});\n  res.sort(function(a,\
    \ b){return b[1] - a[1];});\n  return res;\n}", "  if (lst.length <= 0) return\
    \ [];\n  if (lst.length === 1) return [x];\n\n  let rows = [];\n  let row_index\
    \ = 0;\n  lst.forEach((row, row_index) => {\n    let columns = [];\n    let col_index\
    \ = 0;\n    let col_flag = false;\n    for (let el of row) {\n      if (col_flag\
    \ === true) {\n        if (el !== x) {\n          columns.push(0);\n         \
    \ col_index = 0;\n          col_flag = false;\n        } else {\n          columns.push(col_index);\n\
    \          col_index++;\n        }\n      } else {\n        if (el === x) {\n\
    \          columns.push(col_index);\n          col_index++;\n          col_flag\
    \ = true;\n        } else {\n          columns.push(0);\n          col_index =\
    \ 0;\n        }\n      }\n    }\n    rows.push([row_index, columns]);\n  });\n\
    \n  rows.sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0])\
    \ return 1;\n    if (a[1][0] > b[1][0]) return -1;\n    if (a[1][0] < b[1][0])\
    \ return 1;\n    return 0;\n  });\n\n  let row_index = 0;\n  rows.forEach((row,\
    \ index) => {\n    row_index++;\n    row.sort((a, b) => {\n      if (a[1][0] <\
    \ b[1][0]) return -1;\n      if (a[1][0] > b[1][0]) return 1;\n      if (a[0]\
    \ < b[0]) return -1;\n      if (a[0] > b[0]) return 1;\n      return 0;\n    });\n\
    \  });\n\n  return rows;\n}\n\n", "  return lst.map(function(el){\n    return\
    \ el.slice(0, x); //get the row\n  })\n  .sort(function(a, b){\n    return b[1]\
    \ - a[1]; //sort by cols\n  }).reverse(); //sort by rows in descending order\n\
    }\n", "  var result = [];\n  var temp = [];\n  for(let i = 0; i < lst.length;\
    \ i++){\n    let tempArr = [];\n    let currentRow = lst[i];\n    for(let j =\
    \ 0; j < currentRow.length; j++){\n      if(currentRow[j] === x){\n        tempArr.push([i,\
    \ j]);\n      }\n    }\n    temp.push(tempArr);\n  }\n  \n  for(let i = 0; i <\
    \ temp.length; i++){\n    result.push([]);\n    let tempRow = temp[i];\n    for(let\
    \ j = 0; j < tempRow.length; j++){\n      result[j].push(tempRow[j][0]);\n   \
    \ }\n  }\n\n  result.sort(function(a, b){\n    return a[0] - b[0];\n  });\n  result.sort(function(a,\
    \ b){\n    return a[1] - b[1];\n  });\n  \n  return result;\n}\n", "    // check\
    \ if there are any rows\n    if(!lst.length) return [];\n    // sort rows by columns\
    \ in descending order\n    lst.sort(function(a, b){\n        return b[1] - a[1];\n\
    \    });\n    // sort columns by rows in ascending order\n    var res = [];\n\
    \    var index = 1;\n    while(lst.length){\n        if(index > lst[0][0])\n \
    \           res.push(lst[0]);\n        lst = lst.slice(1);\n        index++;\n\
    \    }\n    return res;\n}\n", "  var row = [];\n  for(var row = 0; row < lst.length;\
    \ row++){\n    var coords = lst[row].slice();\n    if(coords.indexOf(x) > -1){\n\
    \      coords = coords.sort();\n      for(var col = 0; col < coords.length; col++){\n\
    \        coords[col] = coords[col] - row;\n      }\n      row.push(coords);\n\
    \    }\n  }\n  row = row.sort();\n  var coords = [];\n  var prevRow;\n  for(var\
    \ row = 0; row < row.length; row++){\n    coords = row.slice();\n    if(row ===\
    \ 0){\n      prevRow = row.slice();\n    }\n    if(coords[0] !== prevRow[0]){\n\
    \      coords.unshift(0);\n    }\n    var tmpRow = [];\n    for(var col = 0; col\
    \ < coords.length; col++){\n      tmpRow.push([coords[col], coords[col]])\n  \
    \  }\n    coords.push(tmpRow);\n    prevRow = tmpRow;\n  }\n  return coords;\n\
    }\n", "\tvar row = [],\n\t\tlen = lst.length,\n\t\tcounter = 0,\n\t\tcurrentRowLen\
    \ = 0,\n\t\tcurrentColumnLen = 0,\n\t\ti, j;\n\tfor(i=0; i<len; i++){\n\t\tcurrentRowLen\
    \ = lst[i].length;\n\t\tfor(j=0; j<currentRowLen; j++){\n\t\t\tif(counter == x){\n\
    \t\t\t\trow.push([i, j]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcurrentColumnLen\
    \ = lst[i][j].length;\n\t\t\t\tif(currentColumnLen < currentRowLen){\n\t\t\t\t\
    \trow.push([i, currentColumnLen]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\
    \ if(currentColumnLen > currentRowLen){\n\t\t\t\t\trow.push([i, currentRowLen]);\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tcounter++;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn row;\n}", "\tvar coords = [];\n\tfor(var i=0; i<lst.length;\
    \ i++){\n\t\tcoords = coords.concat(get_row(lst[i], x))\n\t}\n\treturn coords.sort(function(a,\
    \ b){return b-a});\n}\n", "    if(!lst.length) return [];\n\n    let rows = [],\n\
    \        rows = rows.concat(\n            lst.sort((a, b) => {\n             \
    \   return a[1] - b[1]\n            })\n        ).sort((a, b) => {\n         \
    \   return a[0] - b[0]\n        })\n        .map(coords => coords.map(n => n ==\
    \ x ? x : 0))\n\n    return rows;\n}\n\n", "  if(x < 0 || x >= lst.length) return\
    \ [];\n  var result = [];\n  var y = 0;\n  for(var i=0; i<lst.length; i++){\n\
    \    if(lst[i][0] === x){\n      result.push([lst[i][0], y]);\n      y += 1;\n\
    \    }\n  }\n  result.sort(function(a, b){\n    var aRow = a.length;\n    var\
    \ bRow = b.length;\n    if(aRow < bRow) return -1;\n    if(aRow > bRow) return\
    \ 1;\n    var r = 0;\n    for(var i=0; i<bRow; i++){\n      if(parseInt(b[i])\
    \ > parseInt(a[i])){\n        r += 1;\n      }\n    }\n    return r;\n  });\n\
    \  result.sort(function(a, b){\n    var aCol = a.length;\n    var bCol = b.length;\n\
    \    if(aCol < bCol) return -1;\n    if(aCol > bCol) return 1;\n    var r = 0;\n\
    \    for(var i=0; i<aCol; i++){\n      if(parseInt(a[i]) > parseInt(b[i])){\n\
    \        r += 1;\n      }\n    }\n    return r;\n  });\n  return result;\n}\n",
  "    // your code here\n    if(!lst) return [];\n    var ret=[];\n    var col=0;\n\
    \    for(var i=0;i<lst.length;i++){\n        var row=lst[i];\n        if(row[x-1]>col)\
    \ ret.unshift([]);\n        if(row[x-1]==col){\n            ret[ret.length-1].push([i,row[x-1]-1]);\n\
    \        }\n        else{\n            ret.push([[i,col-1]]);\n            ret.push([[i,row[x-1]]]);\n\
    \        }\n        col=row[x-1];\n    }\n    return ret;\n}\n", "  var res =\
    \ [];\n  var row = [];\n  for (var i = 0, len = lst.length; i < len; i++) {\n\
    \    if (lst[i].indexOf(x) !== -1) {\n      row.push([i, lst[i].indexOf(x)]);\n\
    \      if (row.length > 1) res.push(row);\n      row = [];\n    }\n  }\n  if (row.length\
    \ > 0) res.push(row);\n  res = res.sort(function (a,b){\n    return a[1] - b[1];\n\
    \  });\n  return res[res.length - 1] || [];\n}\n", "\tvar r = [];\n\tfor(var i\
    \ = 0; i < lst.length; i++){\n\t\tif(lst[i].indexOf(x) != -1){\n\t\t\tr.push([i,\
    \ lst[i].indexOf(x)]);\n\t\t}\n\t}\n\tr.sort(function(a, b){\n\t\treturn b[1]\
    \ - a[1];\n\t});\n\tr.sort(function(a, b){\n\t\treturn a[0] - b[0];\n\t});\n\t\
    return r;\n}\n", "  if(lst == null || lst.length <= 0) return [];\n  var coordinates\
    \ = [];\n  var tmp = [];\n  var nrows = lst.length;\n  var ncols = 0;\n  for(var\
    \ i=0; i<nrows; i++){\n    if(lst[i] != null && lst[i].length > ncols) ncols =\
    \ lst[i].length;\n    tmp.push(lst[i]);\n  }\n  var sortedTmp = tmp.sort(function(a,\
    \ b){\n    var ra = a.length-1;\n    var rb = b.length-1;\n    if(ra == rb) return\
    \ a[ra] - b[ra];\n    return a[ra] < b[ra] ? -1 : 1;\n  });\n  for(var i=0; i<nrows;\
    \ i++){\n    coordinates.push([]);\n  }\n  for(var i=0; i<sortedTmp.length; i++){\n\
    \    var c = 0;\n    for(var j=0; j<ncols; j++){\n      if(i == sortedTmp[i][j])\
    \ c = j;\n    }\n    coordinates[i].push(c);\n  }\n  coordinates.sort(function(a,\
    \ b){\n    var ra = a[0].length-1;\n    var rb = b[0].length-1;\n    if(ra ==\
    \ rb) return a[0][0] - b[0][0];\n    return a[0][0] < b[0][0] ? -1 : 1;\n  });\n\
    \  return coordinates.map(function(c){\n    var n = [];\n    for(var i=0; i<c.length;\
    \ i++){\n      n.push(c[i]);\n    }\n    return n;\n  });\n}\n", "  var row =\
    \ [];\n  for(var i=0;i<lst.length;i++){\n    if(i==0){\n      var row1 = [];\n\
    \      for(var j=0;j<lst[i].length;j++){\n        if(j==0){\n          row1.push(0);\n\
    \        }else{\n          row1.push(lst[i][j]);\n        }\n      }\n      row.push(row1);\n\
    \    }else{\n      row.push(get_row(lst[i-1],lst[i][j]));\n    }\n  }\n  \n  if(row.length\
    \ == 0){\n    return [];\n  }\n  var maxRows = row[0].length;\n  var minRows =\
    \ row.length-1;\n  \n  if(row.length < 2){\n    return [];\n  }\n  if(maxRows\
    \ != lst[row[0].length-1].length){\n    //If number of columns is not same on\
    \ all rows, return empty row\n    return [];\n  }\n  \n  if(x < 0 || x > maxRows\
    \ || row.length < 2){\n    //Invalid input\n    return [];\n  }\n  var output\
    \ = [];\n  var counter = 0;\n  for(var i=0;i<row.length;i++){\n    for(var j=0;j<row[i].length;j++){\n\
    \      if(row[i][j] == x){\n        output.push([counter,j]);\n      }\n    }\n\
    \    counter++;\n  }\n  \n  output.sort(function(a,b){\n    return a[0] - b[0]\n\
    \  });\n  \n  output.sort(function(a,b){\n    return a[1] - b[1]\n  });\n  return\
    \ output;\n}\n", "    if(!lst.length) return [];\n    if(!x || x >= lst[0].length)\
    \ return [];\n    var result = [];\n    var minRow = lst.length - 1;\n    var\
    \ maxRow = 0;\n    var minCol = lst[0].length - 1;\n    var maxCol = 0;\n    var\
    \ row;\n    for(var row = 0; row < lst.length; ++row){\n        if(lst[row].length\
    \ < x) continue;\n        if(!result[row]) result[row] = [];\n        for(var\
    \ col = 0; col < lst[row].length; ++col){\n            if(lst[row][col] < x) continue;\n\
    \            if(col < minCol){\n                minCol = col;\n              \
    \  minRow = row;\n            }\n            if(col > maxCol){\n             \
    \   maxCol = col;\n                maxRow = row;\n            }\n            result[row].push(row\
    \ * x + col);\n        }\n    }\n    result.sort(function(rowA, rowB){\n     \
    \   var colA = rowA.slice(0);\n        var colB = rowB.slice(0);\n        return\
    \ colA[0] > colB[0] ? 1 : colA[0] < colB[0] ? -1 : 0;\n    });\n    result.sort(function(rowA,\
    \ rowB){\n        var colA = rowA.slice(0);\n        var colB = rowB.slice(0);\n\
    \        return colA[1] > colB[1] ? 1 : colA[1] < colB[1] ? -1 : 0;\n    });\n\
    \    return result;\n}", "  let coords = [];\n  for(let row of lst){\n    for(let\
    \ i of row){\n      if(i == x) coords.push([i, row.indexOf(i)]);\n    }\n  }\n\
    \  coords = coords.sort((a,b)=>{\n    return b[1] - a[1];\n  }).sort((a,b)=>{\n\
    \    return b[0] - a[0];\n  });\n  return coords;\n}\n", "\tvar row = new Array(lst.length);\n\
    \tvar i = row.length;\n\tfor(; i<lst.length; i++){\n\t\tvar row = lst[i];\n\t\t\
    var j = row.length;\n\t\tfor(; j<lst[i].length; j++){\n\t\t\tif(row[j] === x){\n\
    \t\t\t\trow.splice(0, row.indexOf(row[j]), row[j]);\n\t\t\t\treturn row;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn [];\n}", "  var res = []\n  var temp = []\n  for(var\
    \ i=0; i<lst.length; i++){\n    temp.push(lst[i][0])\n    temp.push(lst[i][1])\n\
    \  }\n  temp.sort(function(a,b){\n    return a-b\n  })\n  temp.sort(function(a,b){\n\
    \    return b-a\n  })\n  var row = []\n  var index = 0\n  for(i=temp.length-1;\
    \ i>=0; i--){\n    if(temp[i] === x){\n      row.push([index++, temp[i]])\n  \
    \    row.push([index++, temp[i-1]])\n      row.push([index++, temp[i+1]])\n  \
    \    row.push([index++, temp[i-2]])\n      row.push([index++, temp[i-1]+temp[i]])\n\
    \      row.push([index++, temp[i-1]+temp[i+1]])\n      row.push([index++, temp[i-1]+temp[i+2]])\n\
    \    }\n  }\n  res.push(row)\n  return res\n}\n", "\tif(lst.length === 0) return\
    \ [];\n\tif(lst.length === 1) return [[0, lst.shift()]];\n\n\tvar row = [[0, 0]];\n\
    \trow[0] = row[0].concat(get_row(lst.shift(), x));\n\tif(lst.length) row = row.concat(get_row(lst,\
    \ x));\n\treturn row;\n}\n", "\tif(lst == null || lst.length == 0){\n\t\treturn\
    \ [];\n\t}\n\tlet n = lst.length;\n\tif(n < 1){\n\t\treturn [];\n\t}\n\tlet ans\
    \ = [];\n\tlet row = [];\n\tfor(let i = 0; i < n; i++){\n\t\trow.push([i, lst[i]]);\n\
    \t}\n\tfor(let i = 0; i < n; i++){\n\t\tfor(let j = 0; j < row.length; j++){\n\
    \t\t\tif(row[j][1] === x){\n\t\t\t\tans.push([i, row[j][0]]);\n\t\t\t}\n\t\t}\n\
    \t}\n\tans = ans.sort(function(a, b){\n\t\treturn b[0] - a[0];\n\t});\n\tans =\
    \ ans.sort(function(a, b){\n\t\treturn b[1] - a[1];\n\t});\n\tlet i = 0;\n\twhile(i\
    \ < ans.length){\n\t\tans[i].unshift(i);\n\t\ti++;\n\t}\n\treturn ans;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
