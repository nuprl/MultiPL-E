name: HumanEval_12_longest
language: js
prompt: "//Out of array of strings, return the longest one. Return the first one in\
  \ case of multiple\n// strings of the same length. Return undefined in case the\
  \ input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\"\
  , \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\
  \nfunction longest(strings){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = longest;\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([\"\
  x\", \"y\", \"z\"]),\"x\");\n  assert.deepEqual(candidate([\"x\", \"yyy\", \"zzzz\"\
  , \"www\", \"kkkk\", \"abc\"]),\"zzzz\");\n}\n\ntest();"
completions: ["\tvar string = strings[0];\n\tfor(var i = 0; i < strings.length; i++){\n\
    \t\tif(strings[i].length >= string.length){\n\t\t\tstring = strings[i];\n\t\t\
    }\n\t}\n\treturn string;\n}\n", "    var longest = \"\";\n    var last = \"\"\
    ;\n    for(var i=0;i<strings.length;i++){\n        if(strings[i].length > longest.length){\n\
    \            longest = strings[i];\n        }\n    }\n    return longest;\n}\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nIf your strings are in a list, try `longest(map(str,\
    \ lst))`\n<|/ c |>\n<| a dscore=2 |>\nA solution using reduce:\n<code>", "\tif(!strings\
    \ || !strings.length) return undefined;\n\tvar maxLength = 0;\n\tfor(var i=0;\
    \ i<strings.length; i++){\n\t\tvar s = strings[i];\n\t\tif(s.length === maxLength){\n\
    \t\t\tcontinue;\n\t\t}\n\t\tmaxLength = s.length;\n\t}\n\treturn strings[maxLength];\n\
    }\n", "  if (!strings.length) return\n  var longestStr = strings[0]\n  var longestStrLen\
    \ = longestStr.length\n  for (var i = 1; i < strings.length; i++) {\n    var currentStr\
    \ = strings[i]\n    var currentStrLen = currentStr.length\n    if (currentStrLen\
    \ > longestStrLen) {\n      longestStr = currentStr\n      longestStrLen = currentStrLen\n\
    \    }\n  }\n  return longestStr\n}\n", "  if (!strings.length) return undefined;\n\
    \  var len = strings[0].length;\n  for (var i = 1; i < strings.length; i++){\n\
    \    len = Math.max(len, strings[i].length);\n  }\n  return strings[0].length\
    \ < len ? strings[0] : strings.reduce(function(a, b){return a.length < b.length\
    \ ? a : b}).slice(0, -1);\n}\n", "    if (!strings.length){\n        return;\n\
    \    }\n    var max = 0;\n    var longest = strings[0];\n    for(var i = 0; i\
    \ < strings.length; i++){\n        var length = strings[i].length;\n        if\
    \ (length > max){\n            max = length;\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}", "  return strings.length > 0 ? strings.reduce(function(p,\
    \ c){\n    return p.length < c.length ? p : c;\n  }, \"\") : undefined;\n}\n",
  "  let longestString = \"\";\n  let longestLength = 0;\n  let currentLongestLength\
    \ = 0;\n  for (let i = 0; i < strings.length; i++){\n    let string = strings[i];\n\
    \    let length = string.length;\n    if (length > longestLength){\n      longestString\
    \ = string;\n      longestLength = length;\n    }\n    else if (length == currentLongestLength){\n\
    \      longestString = string.toLowerCase();\n    }\n    currentLongestLength\
    \ = length;\n  }\n  return longestString;\n}\n", "    if(!isArray(strings)) return\
    \ undefined;\n    if(strings.length == 0) return undefined;\n    for(var i = 0;\
    \ i < strings.length; i++){\n        if(typeof strings[i] === 'string'){\n   \
    \         var currentLength = strings[i].length;\n            for(var j = 0; j\
    \ < i; j++){\n                if(strings[i].length > strings[j].length){\n   \
    \                 currentLength = strings[j].length;\n                }\n    \
    \        }\n            if(currentLength > strings[i].length){\n             \
    \   return strings[i];\n            }\n        }\n    }\n    return undefined;\n\
    }\n", "    if (strings.length === 0) return undefined;\n    let longest = 0;\n\
    \    let longestLength = 0;\n    strings.forEach(str => {\n        let length\
    \ = str.length;\n        if (length > longestLength){\n            longest = str;\n\
    \            longestLength = length;\n        }\n    });\n    return longest;\n\
    }\n", "    var maxLen = undefined;\n    var maxStr = \"\";\n    strings.forEach(function(str){\n\
    \        if(str.length > maxLen){\n            maxLen = str.length;\n        \
    \    maxStr = str;\n        }\n    })\n    return maxStr;\n}", "    if(!_.isArray(strings))\
    \ throw new Error(\"Please provide an array of strings\");\n    if(strings.length\
    \ == 0) return undefined;\n    if(strings.length == 1) return strings[0];\n  \
    \  var longestString = \"\";\n    for(var i = 0; i < strings.length; i++){\n \
    \       if(longestString.length < strings[i].length){\n            longestString\
    \ = strings[i];\n        }\n    }\n    return longestString;\n}\n", "  let result\
    \ = undefined;\n  if(strings.length > 0){\n    result = strings.reduce((long,\
    \ string) => {\n      if(string.length > long.length){\n        long = string;\n\
    \      }\n      return long;\n    }, '');\n  }\n  return result;\n}\n", "  var\
    \ longest = 0;\n  var longestString = \"\";\n  for(var i = 0, l = strings.length;\
    \ i < l; i++){\n    var len = strings[i].length;\n    if(len > longest){\n   \
    \   longest = len;\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n\
    }\n", "    if(!strings.length){\n        return undefined;\n    }\n    var stringIndex\
    \ = {};\n    var maxLength = 0;\n    for(var i = 0; i < strings.length; i++){\n\
    \        var string = strings[i];\n        if(stringIndex[string] === undefined){\n\
    \            stringIndex[string] = true;\n            stringLength++;\n      \
    \  } else {\n            if(stringLength > maxLength){\n                maxLength\
    \ = stringLength;\n            }\n        }\n    }\n    return strings[maxLength];\n\
    }\n", "\tvar maxLength = 0,\n\t\tmaxString = \"\",\n\t\ti, s;\n\n\tfor (i = 0;\
    \ i < strings.length; i++){\n\t\ts = strings[i];\n\n\t\t// if this is a string,\
    \ get the string length\n\t\tif (typeof s == \"string\"){\n\t\t\ts = s.length;\n\
    \t\t}\n\n\t\t// if it's longer than the current max length\n\t\tif(s > maxLength){\n\
    \t\t\tmaxLength = s;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\n\t// return the longest\
    \ string out of the array of strings\n\treturn maxString;\n}\n\n", "\tif (strings.length\
    \ == 0) return undefined;\n\tvar max = 0;\n\tfor (var i = 0; i < strings.length;\
    \ i++) {\n\t\tvar str = strings[i];\n\t\tif (str.length > max) {\n\t\t\tmax =\
    \ str.length;\n\t\t}\n\t}\n\treturn strings[max];\n}\n", "  if(strings.length\
    \ == 0) return undefined;\n  var maxLength = strings[0];\n  var maxIndex = 0;\n\
    \  for(var i=1; i<strings.length; i++){\n    if(strings[i].length > maxLength){\n\
    \      maxLength = strings[i].length;\n      maxIndex = i;\n    }\n  }\n  return\
    \ maxIndex;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThis doesn't\
    \ do what you want.  It will return `-1` if the first item in the array is longer\
    \ than all the other items in the array, and `i` otherwise.\n<|/ c |>\n<| c |>\n\
    Ah, I see what you mean.\n<|/ c |>\n<| c |>\n: Thanks, that was a leftover from\
    \ when this answer was written.  I've corrected it.\n<|/ c |>\n<| a |>\nYou could\
    \ use Array#reduce and take the first index if the string is longer or falsy and\
    \ an index for other strings.\n\n<code>", "    strings.sort(function(a, b){\n\
    \        return b.length - a.length;\n    });\n    return strings[0] || undefined;\n\
    }\n", "    if(!Array.isArray(strings)) return undefined;\n    let longest = strings[0];\n\
    \    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length >\
    \ longest.length){\n            longest = strings[i];\n        }\n    }\n    return\
    \ longest;\n}\n", "  var longest,\n      shortest,\n      i;\n\n  for(i = 0; i\
    \ < strings.length; i++){\n    if(strings[i].length > strings[i + 1].length){\n\
    \      shortest = strings[i];\n      longest = strings[i + 1];\n    }else{\n \
    \     shortest = strings[i + 1];\n      longest = strings[i];\n    }\n  }\n  return\
    \ longest;\n}\n", "    var longest = 0;\n    var maxLength = 0;\n    var maxString\
    \ = \"\";\n    var maxStringIndex;\n\n    // If strings is empty, return undefined\n\
    \    if(!strings || !strings.length) return undefined;\n\n    // Go through each\
    \ string and find the longest one\n    for(var i = 0; i < strings.length; i++){\n\
    \        var string = strings[i];\n        var length = string.length;\n     \
    \   // Update longest and maxLength\n        if(length > maxLength){\n       \
    \     maxLength = length;\n            maxString = string;\n            maxStringIndex\
    \ = i;\n        }\n        // If current string is equal to the previously longest\
    \ one, decrease the length of the previously longest one by one\n        else\
    \ if(length == maxLength){\n            maxLength--;\n        }\n    }\n\n   \
    \ // Return the longest string in the array of strings\n    return strings[maxStringIndex];\n\
    }\n", "    if (!Array.isArray(strings)) return undefined;\n    var result = strings[0];\n\
    \    for (var i = 1; i < strings.length; i++){\n        if (strings[i].length\
    \ > result.length){\n            result = strings[i];\n        }\n    }\n    return\
    \ result;\n}\n", "  if (strings.length === 0) return undefined; //Nothing to do\n\
    \  var longest = strings[0],\n      strLength = longest.length;\n  for (var i\
    \ = 1; i < strings.length; i++){\n    if (strings[i].length > strLength) strLength\
    \ = strings[i].length;\n  }\n  return longest;\n}\n", "    var maxLength = 0;\n\
    \    var result = undefined;\n\n    strings.forEach(function(string){\n      \
    \  var length = string.length;\n        if(length >= maxLength){\n           \
    \ maxLength = length;\n            result = string;\n        }\n    });\n\n  \
    \  return result;\n}\n", "  var longest = strings[0];\n  var len = longest.length;\n\
    \  for(var i = 1; i < strings.length; i++){\n    if(strings[i].length > len){\n\
    \      longest = strings[i];\n      len = longest.length;\n    }\n  }\n  return\
    \ longest;\n}\n", "\treturn strings.reduce(function(a, b){\n\t\treturn b.length\
    \ > a.length ? b : a;\n\t});\n}\nmodule.exports = longest;\n\n},{}],181:[function(require,module,exports){",
  "  var max = -Infinity;\n  for (var i = 0; i < strings.length; ++i) {\n    if (strings[i].length\
    \ > max) {\n      max = strings[i].length;\n    }\n  }\n  return max > 0 ? strings[0]\
    \ : undefined;\n}\n", "  if (strings.length < 1) return;\n  var maxLen = strings[0].length;\n\
    \  for (var i = 1; i < strings.length; i++) {\n    if (strings[i].length > maxLen)\
    \ {\n      maxLen = strings[i].length;\n    }\n  }\n  return maxLen;\n}\n", " \
    \   var longest = 0;\n    var result = undefined;\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].length > longest){\n            longest = strings[i].length;\n\
    \            result = strings[i];\n        }\n    }\n    return result !== undefined\
    \ ? result : undefined;\n}", "\tif (strings.length === 0) return undefined;\n\n\
    \tvar longest = 0;\n\tfor (var i = 0; i < strings.length; i++){\n\t\tvar length\
    \ = strings[i].length;\n\t\tif (length > longest){\n\t\t\tlongest = length;\n\t\
    \t}\n\t}\n\n\treturn strings[longest];\n}\n", "  let longest = strings[0];\n \
    \ for (let i = 1; i < strings.length; i++){\n    if (strings[i].length > longest.length){\n\
    \      longest = strings[i];\n    }\n  }\n  return longest;\n}\n", "\tif (!strings.length)\
    \ return undefined; //out of array of strings, return undefined\n\treturn strings.reduce(function\
    \ (prev, curr, i, arr){\n\t\treturn prev.length > curr.length ? prev : curr;\n\
    \t});\n}\n", "    var maxLength = 0;\n    var result;\n    for (var i = 0; i <\
    \ strings.length; i++){\n        length = strings[i].length;\n        if(length\
    \ > maxLength){\n            maxLength = length;\n            result = strings[i];\n\
    \        }\n    }\n    return result;\n}\n", "  if(!Array.isArray(strings))\n\
    \    return undefined\n\n  if(strings.length === 0)\n    return undefined\n\n\
    \  return strings.reduce((current, item) =>{\n    return current.length > item.length\
    \ ? current : item\n  })[0]\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nHere's a\
    \ functional approach:\n\n<code>\nconst longestWords = (strings) => {\n  const\
    \ longestWord = strings.reduce((longest, string) => {\n    const splitString =\
    \ string.split(' ');\n    if (splitString.length > longest.length) { \n      longest\
    \ = splitString.join(' ');\n    }\n    return longest;\n  }, '');\n  return longestWord;\n\
    }\n", "  var longest = 0;\n  var i = 0;\n  var len = strings.length;\n  while\
    \ (i < len){\n    if (strings[i].length > longest) {\n      longest = strings[i].length;\n\
    \    }\n    i += 1;\n  }\n  return longest > 0 ? strings[0] : undefined;\n}\n",
  "  strings = filter(strings);\n  if (strings.length == 0) return undefined;\n  var\
    \ longest = 0;\n  var longestStr;\n  for(var i = 0; i < strings.length; i++){\n\
    \    longestStr =  strings[i].length > longest ? strings[i].length : longest;\n\
    \    longest = longestStr;\n  }\n  return longestStr;\n}\n", "\tvar stringLength\
    \ = longestString(strings),\n\t\tstringCount,\n\t\tmaxString,\n\t\tmaxStringLength;\n\
    \t\n\tif (stringLength === undefined){\n\t\treturn undefined;\n\t}\n\t\n\tstringCount\
    \ = 0;\n\t\n\tstrings.forEach(function(string){\n\t\tstringCount++;\n\t\tif (stringLength\
    \ > stringCount){\n\t\t\tmaxString = string;\n\t\t\tmaxStringLength = stringLength;\n\
    \t\t}\n\t});\n\t\n\treturn maxString;\n}\n", "\tvar first = strings[0];\n\tvar\
    \ len = strings.length;\n\tvar longest;\n\tfor (var i = 1; i < len; i++){\n\t\t\
    var str = strings[i];\n\t\tif (str.length < first.length){\n\t\t\tfirst\t= str;\n\
    \t\t\tlongest = str;\n\t\t}\n\t\telse if (str.length > first.length){\n\t\t\t\
    longest = str;\n\t\t}\n\t}\n\treturn longest;\n}\n", "  var len = strings.length;\n\
    \  if(len == 0){\n    return undefined;\n  }\n\n  if(len > 0 && strings[0].length\
    \ > 0){\n    return strings[0];\n  }\n\n  var maxLength = 0;\n  var bestString\
    \ = undefined;\n  strings.forEach(function(str){\n    str = str.trim();\n    var\
    \ newLength = str.length;\n    if(newLength > maxLength){\n      maxLength = newLength;\n\
    \      bestString = str;\n    }\n  });\n  return bestString;\n}\n", "\tlet longest\
    \ = undefined;\n\tfor (let i = 0; i < strings.length; i++) {\n\t\tlet str = strings[i];\n\
    \t\tconst length = str.length;\n\t\tif (length > longest.length)\n\t\t\tlongest\
    \ = str;\n\t}\n\treturn longest === undefined ? undefined : longest;\n}", "  return\
    \ strings.reduce(function (prev, cur){\n    return prev.length < cur.length ?\
    \ prev : cur;\n  }, undefined);\n}\n", "\tif(strings.length == 0)\n\t\treturn;\n\
    \telse if(strings.length == 1)\n\t\treturn strings[0];\n\tvar currentLongest =\
    \ strings[0];\n\tvar stringCounter = 0;\n\tfor(var i=1; i<strings.length; i++){\n\
    \t\tif(strings[i] > currentLongest){\n\t\t\tcurrentLongest = strings[i];\n\t\t\
    }\n\t\tif(strings[i] == currentLongest && stringCounter == 0)\n\t\t\tstringCounter++;\n\
    \t\telse if(strings[i] == currentLongest && stringCounter > 1)\n\t\t\tstringCounter\
    \ = 1;\n\t}\n\treturn currentLongest;\n}\n", "    if(!strings.length){\n     \
    \   return;\n    }\n    if(strings.length === 1){\n        return strings[0];\n\
    \    }\n    var longestString = strings[0];\n    for(var i = 1; i < strings.length;\
    \ i++){\n        var s = strings[i];\n        if(s.length >  longestString.length){\n\
    \            longestString = s;\n        }\n    }\n    return longestString;\n\
    }\n", "  var length = strings.length,\n      result,\n      i, str;\n  if(length\
    \ === 0){\n    return undefined;\n  }\n  result = strings[0];\n  for(i = 1; i\
    \ < length; i++){\n    str = strings[i];\n    if(str.length > result.length){\n\
    \      result = str;\n    }\n  }\n  return result;\n}\n", "    let longest = \"\
    \";\n    let longestLength = 0;\n    strings.forEach(s => {\n        if(longestLength\
    \ < s.length){\n            longest = s;\n            longestLength = s.length;\n\
    \        }\n    });\n    return longest;\n}\n", "\tif (strings.length === 0) {\n\
    \t\treturn undefined;\n\t}\n\tvar max = strings[0];\n\tvar len = strings.length;\n\
    \tfor (var i = 1; i < len; ++i) {\n\t\tif (strings[i].length > max.length) {\n\
    \t\t\tmax = strings[i];\n\t\t}\n\t}\n\treturn max;\n}\n", "\tif (!strings.length)\
    \ return undefined; //empty array is invalid\n\tvar strArray = strings;\n\tif\
    \ (strArray.length > 1){\n\t\tvar longestStr = \"\";\n\t\tfor (var i=0,j=strArray.length;\
    \ i<j; i++){\n\t\t\t//check strArray[i] length against the longest one so far\n\
    \t\t\tif (strArray[i].length > longestStr.length){\n\t\t\t\t//set longest to current\
    \ strArray[i]\n\t\t\t\tlongestStr = strArray[i];\n\t\t\t}\n\t\t}\n\t\treturn longestStr;\n\
    \t} else {\n\t\treturn strings[0];\n\t}\n}\n", "  var maxLength = 1;\n  var string;\n\
    \  for (var i = 0; i < strings.length; i++) {\n    string = strings[i];\n    if\
    \ (string.length > maxLength) {\n      maxLength = string.length;\n    }\n  }\n\
    \  return maxLength > 1 ? strings[0] : undefined;\n}\n", "\tif (strings.length===0)\
    \ return undefined;\n\tif (strings.length === 1) return strings[0];\n\tstrings\
    \ = strings.map(String);\n\t\n\tvar longest = strings[0];\n\tfor (var i = 1; i\
    \ < strings.length; i++){\n\t\tvar str = strings[i];\n\t\tif (str.length > longest.length){\n\
    \t\t\tlongest = str;\n\t\t}\n\t}\n\treturn longest;\n}\n", "  var longestSoFar\
    \ = strings[0];\n  for (var i = 0; i < strings.length; i++){\n    if (strings[i].length\
    \ > longestSoFar.length){\n      longestSoFar = strings[i];\n    }\n  }\n  return\
    \ longestSoFar;\n}\n", "  return strings\n    .filter(string => !!string)\n  \
    \  .reduce((long, str) => (long.length <= str.length ? long : str), strings[0]);\n\
    }\n", "    if(strings.length === 0) return undefined; //empty case\n    \n   \
    \ var longestString = strings[0];\n    var longestStringLength = longestString.length;\n\
    \    \n    for(var i=1; i<strings.length; i++){\n        var string = strings[i];\n\
    \        \n        if(string.length > longestStringLength){\n            longestString\
    \ = string;\n            longestStringLength = string.length;\n        }\n   \
    \ }\n    \n    return longestString;\n}\n", "    if(!strings.length)\n       \
    \ return undefined\n    else\n        return strings.reduce(function(a, b){\n\
    \            return a.length > b.length ? a : b\n        })\n}\n", "    if(!strings\
    \ || strings.length === 0){\n        return undefined;\n    }\n    else if(strings.length\
    \ === 1){\n        return strings[0];\n    }\n    else{\n        return strings[0].length\
    \ > strings[1].length ? strings[0] : strings[1];\n    }\n}\n</code>\nThe function\
    \ longest takes in an array of strings and returns the longest one in that array.\
    \ \nThe algorithm is quite simple:\nIf there are more than one strings in the\
    \ array, compare them by their length, if they are equal return the first one\
    \ that has the greater length. Otherwise compare the second one and so on...\n\
    This algorithm is very similar to the longest common substring problem and can\
    \ be used to find the longest substring in a given string array (as opposed to\
    \ just the longest string in a given array). \nI hope this helps future developers\
    \ looking for a way to find the longest string in a given array of strings. \n\
    If you have other ways of doing this algorithm, I'm open to suggestions.\n<|/\
    \ a dscore=3 |>\n<| a |>\nThis would also work: \n<code>\nvar strings = [...];\n\
    var longest = strings.reduce((acc,s) => s.length>acc.length ? s : acc);\n</code>\n\
    <|/ a tags=string,javascript,algorithm dscore=2 |>\n<| c |>\nThis answer doesn't\
    \ provide an explanation of the solution, other than to say \"this works\" without\
    \ explaining what it does.\n<|/ c |>\n<| c |>\nThis is a very short and easy solution.\
    \ I've added an explanation to the answer.\n<|/ c |>\n<| c |>\nAs the others mentioned\
    \ this is short and easy, but it's also not scalable. `reduce` will execute the\
    \ callback every time the accumulator is recalculated, which means the callback\
    \ will be called `strings.length * strings.length` times. A better approach would\
    \ be to iterate through `strings` once, and keep track of how many of the longest\
    \ strings you've found so far, and return those after you've iterated through\
    \ them all once. This would only require you to iterate through `strings` once.\n\
    <|/ c |>\n<| a dscore=2 |>\nThe simplest way would be to sort them and then return\
    \ the last element.\n<code>\nvar longest = strings.sort((a,b) => a.length > b.length\
    \ ? -1 : 1)[0];\n</code>\n<|/ a tags=string,javascript,algorithm |>\n<| c |>\n\
    What about the case when all strings are of the same length?\n<|/ c |>\n<| c |>\n\
    Yeah, I forgot about the edge case. Edited my answer.\n<|/ c |>\n<| c |>\nBut\
    \ this doesn't ", "  if (!strings.length) return undefined;\n  return strings[strings.length-1].length\
    \ >\n         strings.reduce(function(a, b){return a.length < b.length ? a : b}).length\
    \ ? strings[strings.length-1] : undefined;\n}\n</code>\nAs a bonus note, your\
    \ current longest() function can be made a bit more efficient by first finding\
    \ the longest string in an array of strings, and then returning the string at\
    \ that index in the array. Also, it's more readable to first find the longest\
    \ string, then find the index at which that string would be, as opposed to first\
    \ finding the index at which you would need to access the string at that index,\
    \ then finding the string at that index.\n<|/ a dscore=0 tags=javascript |>\n\
    <| a |>\nYou can use reduce to get the longest string in the array and return\
    \ it.\n\n<code>\nconst arr = [\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\"\
    ,\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"\
    foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\"\
    ,\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"\
    bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\"\
    ,\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"\
    foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\"\
    ,\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"\
    bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\"\
    ,\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"\
    foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\"\
    ,\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"\
    bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\"\
    ,\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"foo\",\n  \"bar\",\n  \"",
  "    strings = strings.map(function(string){return String(string)});\n    return\
    \ strings.length>0 ? strings.sort(function(a, b){return b.length - a.length}).pop()\
    \ : undefined;\n}\n", "    for(var i = 0; i < strings.length; i++){\n        if(strings[i].length\
    \ > strings[i+1].length){\n            return strings[i]\n        }\n    }\n \
    \   return undefined\n}\n", "  var longest = 0;\n  var strlens = strings.map(function(str){\n\
    \    return str.length;\n  });\n  for(var i = 0, len = strlens.length; i < len;\
    \ i++){\n    longest = Math.max(longest, strlens[i]);\n  }\n  return longest;\n\
    }\n", "    if (strings.length === 0) return undefined;\n    var length = strings[0].length;\n\
    \    for(var i = 1; i < strings.length; i++){\n        if (strings[i].length >\
    \ length){\n            length = strings[i].length;\n        }\n    }\n    return\
    \ strings[0].length > length ? strings[0] : undefined;\n}\n", "\tlet biggest =\
    \ \"\";\n\tfor(let i = strings.length-1; i >= 0; i--){\n\t\tif(biggest.length\
    \ === strings[i].length || biggest.length === 0){\n\t\t\tbiggest = strings[i];\n\
    \t\t}\n\t}\n\treturn biggest;\n}\n", "\tif(!strings.length){\n\t\treturn undefined;\n\
    \t}\n\tvar maxLength = 0;\n\tvar longestString = strings[0]; // Default return\
    \ value\n\tfor(var i=0;i<strings.length;i++){\n\t\tif(maxLength<strings[i].length){\n\
    \t\t\tmaxLength = strings[i].length;\n\t\t\tlongestString = strings[i];\n\t\t\
    }\n\t}\n\treturn longestString;\n}\nexports.longest = longest;\n", "  let result\
    \ = strings[0];\n  for (let i = 1; i < strings.length; i++){\n    if (strings[i].length\
    \ > result.length){\n      result = strings[i];\n    }\n  }\n  return result;\n\
    }\n", "\tlet longestString = strings[0];\n\tfor (let i = 1; i < strings.length;\
    \ i++){\n\t\tif(strings[i].length > longestString.length){\n\t\t\tlongestString\
    \ = strings[i];\n\t\t}\n\t}\n\treturn longestString;\n}\n", "  var longString\
    \ = \"\";\n  var maxLength = 0;\n  for (var i = 0; i < strings.length; i++){\n\
    \    if (strings[i].length > maxLength){\n      maxLength = strings[i].length;\n\
    \      longString = strings[i];\n    }\n  }\n  if (longString.length == 0){\n\
    \    return undefined;\n  }\n  return longString;\n}\n</code>\n<|/ a tags=string,arrays,javascript\
    \ |>\n<| c |>\nThis will not work as you expect with empty array or only 1 element\
    \ string. Try with empty array\n<|/ c |>\n<| a dscore=2 |>\nAnother possible solution,\
    \ using Array.sort\n<code>\nvar test1 = \"abc\", test2 = \"abcd\", test3 = \"\
    abcdefg\";\nvar tests = [test1, test2, test3];\n", "    if (strings.length ===\
    \ 0) {\n        return undefined;\n    }\n\n    var maxLength = 0;\n\n    for\
    \ (var i = 0; i < strings.length; i++) {\n        maxLength = Math.max(maxLength,\
    \ strings[i].length);\n    }\n\n    return strings[strings.length - 1].length\
    \ > maxLength ? strings[strings.length - 1] : undefined;\n}\n", "    if(strings.length\
    \ == 0) return undefined;\n    if(strings.length === 1) return strings[0];\n\n\
    \    var bestString = strings[0]; // start with the first string, which should\
    \ be the longest\n    var bestStringLength = bestString.length;\n    var currentStringLength\
    \ = strings[0].length;\n    var i;\n\n    for(i = 1; i < strings.length; i++){\n\
    \        currentStringLength = strings[i].length;\n        if(currentStringLength\
    \ > bestStringLength){\n            bestString = strings[i];\n            bestStringLength\
    \ = currentStringLength;\n        }\n    }\n\n    return bestString;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nCan you explain how this works?\n<|/ c |>\n<| c |>\n\
    I updated the answer and added comments to explain it better. Let me know if this\
    \ answers your question.\n<|/ c |>\n<| c |>\nThank you, but I figured it out!\n\
    <|/ c |>\n<| c |>\nAwesome! I'll add it to my answer so other people can see it.\n\
    <|/ c |>\n<| a tags=arrays,javascript,sorting dscore=0 |>\nI think I figured it\
    \ out. Thanks for all the help everyone!\n<code>\nvar longest = function(strings){\n\
    \    return strings.sort(function(a, b){\n        var aLength = a[0].length, \n\
    \            bLength = b.length;\n        return aLength - bLength;\n    }).pop();\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\nI got this one from another post and tried\
    \ it out, here is the code (works 100% for me) :\n<code>", "  if (!Array.isArray(strings))\
    \ return undefined;\n  return strings.length ? strings.reduce((result, str) =>\
    \ (result.length < str.length ? result : str), strings[0]) : undefined;\n}\n",
  "    if(!array.isArray(strings)){\n        return undefined;\n    }\n\n    strings\
    \ = strings || [];\n\n    // Iterate in reverse to find the longest string\n \
    \   var max = -1;\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].length\
    \ > max){\n            max = strings[i].length;\n        }\n    }\n\n    if(max\
    \ === -1){\n        return undefined;\n    }\n\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].length !== max){\n            return undefined;\n\
    \        }\n    }\n\n    return max;\n}\n", "  return arrayMax(strings, function(string){\n\
    \    return string.length;\n  });\n}\n", "  var longest = undefined;\n  for(var\
    \ i = 0; i < strings.length; i++){\n    if(strings[i].length > longest.length){\n\
    \      longest = strings[i];\n    }\n  }\n  return longest;\n}\n", "    for(var\
    \ i = strings.length - 1; i >= 0; i--){\n        var length = strings[i].length;\n\
    \        if(length > 0){\n            return strings[i];\n        }\n    }\n}\n",
  "\tif(!strings.length)\n\t\treturn;\n\tvar longest = strings[0];\n\tfor(var i =\
    \ 1; i < strings.length; ++i){\n\t\tvar str = strings[i];\n\t\tif(str.length >\
    \ longest.length){\n\t\t\tlongest = str;\n\t\t}\n\t}\n\treturn longest;\n}\n",
  "    if(!strings || strings.length === 0) return undefined;\n    \n    var longestString\
    \ = strings[0],\n        longestLength = strings[0].length,\n        i;\n\n  \
    \  for(i=1;i<strings.length;i++){\n        if(strings[i].length > longestLength){\n\
    \            longestString = strings[i];\n            longestLength = strings[i].length;\n\
    \        }\n    }\n    return longestString;\n}\n", "  var longest = 0;\n  for\
    \ (var i = 0; i < strings.length; i++){\n    if (strings[i].length > longest){\n\
    \      longest = strings[i].length;\n    }\n  }\n  return strings[longest] ||\
    \ undefined;\n}\n", "  if(strings.length <= 0) return;\n  if(strings.length ===\
    \ 1) return strings[0];\n  var maxLength = 1;\n  var maxString = strings[0];\n\
    \  for(var i = 1; i < strings.length; i++){\n    if(strings[i].length > maxLength){\n\
    \      maxLength = strings[i].length;\n      maxString = strings[i];\n    }\n\
    \  }\n  return maxString;\n}", "  if(strings.length == 0) return undefined;\n\
    \  var longestLength = strings[0].length;\n  for(var i = 1; i < strings.length;\
    \ i++){\n    if(strings[i].length > longestLength){\n      longestLength = strings[i].length;\n\
    \    }\n  }\n  return longestLength == 0 ? undefined : longestLength;\n}\n", " \
    \ if (!strings || !strings.length) return undefined;\n  return Math.max(...strings.map(s=>\
    \ s.length));\n}\n", "    var len = strings.length;\n    return len ? strings[len-1]\
    \ : undefined;\n}\n", "  var maxLength = 0;\n  for (var i = 0; i < strings.length;\
    \ i++){\n    var s = strings[i];\n    var length = s.length;\n    if (length >\
    \ maxLength){\n      maxLength = length;\n    }\n  }\n  return maxLength;\n}",
  "  if(strings.length === 0) {\n    return undefined\n  }\n  if(strings.length ===\
    \ 1) {\n    return strings[0]\n  }\n  \n  let minString = strings[0];\n  let maxLength\
    \ = strings[0].length;\n  for(let i = 1; i < strings.length; i++){\n    let s\
    \ = strings[i];\n    \n    if(s.length < minLength) {\n      minString = s;\n\
    \      minLength = s.length;\n    }\n    else if(s.length > maxLength){\n    \
    \  maxLength = s.length;\n    }\n  }\n  return maxLength;\n}\n", "\tif (strings.length\
    \ == 0)\n\t\treturn undefined;\n\telse if (strings.length === 1)\n\t\treturn strings[0];\n\
    \telse{\n\t\tlet longestString = strings[0];\n\t\tlet currentLongest = longestString;\n\
    \t\tfor (let i = 1; i < strings.length; i++){\n\t\t\tif (strings[i].length > longestString.length){\n\
    \t\t\t\tcurrentLongest = strings[i];\n\t\t\t}\n\t\t}\n\t\treturn currentLongest;\n\
    \t}\n}", "\tif (!strings.length) return undefined;\n\telse if (strings.length\
    \ === 1) return strings[0];\n\tvar maxLength = 1;\n\tfor (var i = 0; i < strings.length;\
    \ i++){\n\t\tvar currentLength = strings[i].length;\n\t\tif (currentLength > maxLength)\
    \ maxLength = currentLength;\n\t}\n\treturn strings[strings.length - 1];\n}\n",
  "    var longest = 0;\n    var longestString;\n    for (var i = 0; i <= strings.length;\
    \ i++){\n        var string = strings[i];\n        if (string.length > longest){\n\
    \            longestString = string;\n            longest = string.length;\n \
    \       }\n    }\n    return longestString;\n}\n", "  if (!strings.length) return\
    \ undefined; // empty array\n  var currentLongestLength = 0;\n  for (var i = 0;\
    \ i < strings.length; ++i) {\n    var length = strings[i].length;\n    if (length\
    \ > currentLongestLength) {\n      currentLongestLength = length;\n    }\n  }\n\
    \  return strings[strings.length - currentLongestLength];\n}", "    var stringLength\
    \ = strings.length;\n    if(stringLength === 0) return undefined;\n    else if(stringLength\
    \ === 1) return strings[0];\n    else return strings.sort(function (a, b) {\n\
    \        // Sort longest first, then shortest if equal\n        return stringLength\
    \ - b.length - a.length;\n    })[0];\n}\n", "  if (!strings || !strings.length){\n\
    \    return undefined;\n  }\n  var max = strings[0];\n  var count = 0;\n  for\
    \ (var i = 0; i < strings.length; i++){\n    if (strings[i].length > count){\n\
    \      max = strings[i];\n      count = strings[i].length;\n    }\n  }\n  return\
    \ max;\n}\n", "  if(strings.length === 0) {\n    return undefined;\n  }\n  return\
    \ strings[strings.length-1].length;\n}\n", "  var longest = 0;\n\n  for (var i\
    \ = 0; i < strings.length; i++){\n    if (strings[i].length > longest){\n    \
    \  longest = strings[i].length;\n    }\n  }\n\n  return (longest > 1) ? strings[0]\
    \ : undefined;\n}\n", "\tif (strings.length === 0) return undefined;\n\tlet longest\
    \ = \"\";\n\tfor (let s of strings)\n\t\tif (s.length>longest.length) longest\
    \ = s;\n\treturn longest;\n}\n", "  var max = (typeof strings === \"string\")\
    \ ? (strings.length ? strings : undefined) : undefined; // no strings? return\
    \ the array\n\n  if (max === undefined){\n    for (var i = 0, len = strings.length;\
    \ i < len; i++){\n      if (typeof strings[i] === \"string\"){\n        max =\
    \ strings[i];\n      }\n    }\n  }\n  return max;\n}\n", "  if (!strings.length)\
    \ return undefined;\n  return strings[strings.length-1].length>strings[0].length\
    \ ? strings[strings.length-1] : strings[0];\n}\n", "  if (!strings || strings.length\
    \ == 0)\n    return undefined\n  else\n    return strings[strings.length - 1].length\n\
    }\n\n", "\tvar longestString = \"\";\n\tvar longestStringLength = -1;\n\tvar i;\n\
    \tif(strings.length === 0){\n\t\treturn undefined;\n\t}\n\tfor(i = 0; i < strings.length;\
    \ i++){\n\t\tif(strings[i].length > longestStringLength){\n\t\t\tlongestString\
    \ = strings[i];\n\t\t\tlongestStringLength = strings[i].length;\n\t\t}\n\t}\n\t\
    return longestString;\n}\n", "\tvar longest = 0;\n\tvar length = strings.length;\n\
    \tvar stringToCompare;\n\tfor (var i=0; i<length; i++) {\n\t\tstringToCompare\
    \ = strings[i];\n\t\tif (longest<stringToCompare.length) {\n\t\t\tlongest = stringToCompare.length;\n\
    \t\t}\n\t}\n\tif (length==0) return;\n\tstringToCompare = strings[length-1];\n\
    \tif (longest<stringToCompare.length) {\n\t\tlongest = stringToCompare.length;\n\
    \t}\n\treturn strings[0];\n}\n", "  if (strings.length === 0){\n    return undefined\n\
    \  }\n  return strings[strings.length-1].length > strings[0].length ? strings[strings.length-1]\
    \ : strings[0]\n}\n", "  if ( !isArrayLike(strings) ) return strings;\n  var maxLen\
    \ = 0;\n  for (var i = 0; i < strings.length; i++){\n    if (strings[i].length\
    \ > maxLen){\n      maxLen = strings[i].length;\n    }\n  }\n  return strings[maxLen\
    \ > 1 ? 'max' : 'min'](strings);\n}\n", "    if(strings.length == 0) return undefined;\n\
    \    return strings[0];\n}\n", "\tvar i, len = strings.length;\n\tif(len === 0)\
    \ return undefined;\n\tfor(i = 0; i < len; i += 1) {\n\t\tif(strings[i].length\
    \ <= longest.length){\n\t\t\tlongest = strings[i];\n\t\t}\n\t}\n\treturn longest;\n\
    }\n", "    var maxLen = 0;\n    for(var i = 0; i < strings.length; i++){\n   \
    \     var len = strings[i].length;\n        if(len > maxLen){\n            maxLen\
    \ = len;\n        }\n    }\n    if(maxLen === 0){\n        return undefined;\n\
    \    }\n    return strings[maxLen - 1];\n}\n", "    if(!strings || !strings.length)\n\
    \        return undefined;\n    var l = 0, h = strings.length, m;\n    while(h\
    \ > l){\n        m = h;\n        h = l/2;\n        if(strings[m].length < strings[h].length)\n\
    \            m = h;\n    }\n    return strings[m];\n}\n", "    var string = strings[0];\n\
    \    var max = 0;\n\n    for (var i = 1; i < strings.length; i++){\n        max\
    \ = Math.max(max, strings[i].length);\n    }\n    return string ? string.substr(0,\
    \ max) : undefined;\n}\n", "  if (strings.length === 0) return undefined;\n  var\
    \ longestString = strings[0];\n  for (var i = 1; i < strings.length; i++){\n \
    \   if (strings[i].length > longestString.length){\n      longestString = strings[i];\n\
    \    }\n  }\n  return longestString;\n}\n", "  if (strings.length === 0) return;\n\
    \  var stringLens = strings.map(function(s){return s.length});\n  return strings.filter(function(s,\
    \ i){\n    return stringLens[i] > stringLens[i - 1];\n  }).pop();\n}\n", "\tvar\
    \ str = longestStr(strings);\n\treturn str? str.length : undefined;\n}\n", " \
    \   if (strings.length <= 1) return undefined;\n    var max = strings[0];\n  \
    \  for (var i = 1; i < strings.length; i++){\n        if (strings[i].length >=\
    \ max.length) max = strings[i];\n    }\n    return max;\n}\n", "    if(!strings.length)\
    \ return undefined;\n    var longest =strings[0].length;\n    for(var i = 0; i\
    \ < strings.length; i++){\n        if(strings[i].length > longest){\n        \
    \    longest = strings[i].length;\n        }\n    }\n    return longest;\n}\n",
  "    if(!strings || !strings.length) return undefined;\n    if(strings.length ===\
    \ 1) return strings[0];\n    if(strings.length === 2) return strings[1];\n   \
    \ var longest = 0;\n    for(var i = 0; i < strings.length; i++){\n        var\
    \ length = strings[i].length;\n        if(length > longest) longest = length;\n\
    \    }\n    return strings[longest];\n}", "  let max = strings[0].length;\n  for\
    \ (let i = 1; i < strings.length; i++)\n    if (strings[i].length > max)\n   \
    \   max = strings[i].length;\n  return max <= 1 ? undefined : max;\n}\n", "  \
    \  var longer = \"\";\n    var longestString = \"\";\n    for(var i=0; i<strings.length;\
    \ i++){\n        if (strings[i].length > longestString.length){\n            longestString\
    \ = strings[i];\n        }\n    }\n    return longestString;\n}\n", "\tlet result\
    \ = strings[0];\n\tfor (let i = 1; i < strings.length; i++){\n\t\tconst length\
    \ = strings[i].length;\n\t\tif (length > result.length){\n\t\t\tresult = strings[i];\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "  if (!Array.isArray(strings)) throw new\
    \ Error('longest: Expected an array of strings. Got ' + strings);\n  if (strings.length\
    \ === 0) return undefined;\n  if (strings.length === 1) return strings[0];\n \
    \ var shortest = strings[0];\n  var longest = strings[0];\n  for (var i = 0; i\
    \ < strings.length; i++){\n    if (strings[i].length <= longest.length){\n   \
    \   shortest = strings[i];\n      longest = strings[i];\n    }\n  }\n  return\
    \ longest;\n}", "  var length = strings.length;\n  if(length == 0) return undefined;\n\
    \  if(length == 1) return strings[0];\n  if(strings.every(function(str, idx){\n\
    \    return strings[idx + 1].length !== str.length;\n  })){\n    return strings[strings.length\
    \ - 1];\n  }\n  var maxLen = 0;\n  strings.forEach(function(string){\n    maxLen\
    \ = Math.max(maxLen, string.length);\n  });\n  return strings.reduce(function(max,\
    \ string){\n    return string.length !== max ? string.length : max;\n  }, maxLen);\n\
    }\n", "  var longer = undefined;\n  var longestString = undefined;\n  var shortest\
    \ = undefined;\n\n  if (strings !== null){\n    for (var i = 0, ii = strings.length;\
    \ i < ii; i++){\n      if (strings[i].length > longer){\n        longer = strings[i].length;\n\
    \        longestString = strings[i];\n      }\n      if (strings[i].length < shortest\
    \ || strings[i].length == shortest && strings[i] !== longestString){\n       \
    \ shortest = strings[i].length;\n      }\n    }\n  }\n\n  return longestString;\n\
    }\n", "\tif (!strings.length)\n\t\treturn undefined;\n\tvar max = strings[0].length;\n\
    \tfor (var i=1; i<strings.length; i++){\n\t\tif (strings[i].length > max)\n\t\t\
    \tmax = strings[i].length;\n\t}\n\treturn max;\n}\n", "    var i = strings.length;\n\
    \    var longest = strings[0];\n    while(i){\n        var current = strings[i];\n\
    \        if(current.length >= longest.length){\n            longest = current;\n\
    \        }\n        i--;\n    }\n    return longest;\n}\n", "  var maxLen = 0;\n\
    \  var longestString;\n\n  for(var i = 0; i < strings.length; i++){\n    var currentString\
    \ = strings[i];\n\n    if(currentString.length > maxLen){\n      maxLen = currentString.length;\n\
    \      longestString = currentString;\n    }\n  }\n\n  return longestString;\n\
    }\n", "    var max = strings[0];\n    for (var i = 1; i < strings.length; i++){\n\
    \        var str = strings[i];\n        if (str.length > max){\n            max\
    \ = str.length;\n        }\n    }\n    return max;\n}\n", "\tlet max = strings[0].length;\n\
    \tfor(let i = 1; i < strings.length; i++){\n\t\tconst length = strings[i].length;\n\
    \t\tif(length < max){\n\t\t\tmax = length;\n\t\t}\n\t}\n\treturn strings[0];\n\
    }\n", "    var longest = \"\";\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].length > longest.length){\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\n", "    if(strings.length == 0){\n\
    \        return undefined;\n    }\n    else if(strings.length == 1){\n       \
    \ return strings[0];\n    }\n    var maxLength = 0;\n    for(var i = 0; i < strings.length;\
    \ i++){\n        var length = strings[i].length;\n        if(length > maxLength){\n\
    \            maxLength = length;\n        }\n    }\n    return strings[strings.length\
    \ - 1];\n}\n", "    for(var i = 0; i < strings.length; i++)\n        if(strings[i].length\
    \ > strings[strings.length-1].length)\n            return strings[i];\n    return\
    \ undefined;\n}\n", "    var stringLength = strings.length,\n        length =\
    \ stringLength,\n        max = 0,\n        longestString = strings[0];\n    while(length\
    \ > 0){\n        max = length == stringLength ? max : length; // Update the max\
    \ length\n        longestString = strings[length] == strings[0] ? strings[0] :\
    \ strings[length]; // Update the longest string\n        length--;\n    }\n  \
    \  return longestString;\n}", "  let max = 0;\n  for (let string of strings) {\n\
    \    if (string.length > max) max = string.length;\n  }\n  if (max === 0) return\
    \ undefined;\n  return strings[strings.length - 1];\n}\n", "  var long,\n    \
    \  short,\n      length = strings.length,\n      i,\n      string = strings[0],\n\
    \      iMax = string.length - 1;\n  if(iMax > length) return string;\n  for(i=1;i<length;i++){\n\
    \    string = strings[i] + string;\n    short = string.length - strings.length;\n\
    \    long = string.length - i;\n    if(short > long) return string;\n  }\n}\n\n\
    },{}],19:[function(require,module,exports){", "    if(!strings.length){\n    \
    \    return undefined;\n    }\n    var max = 0;\n    strings.forEach(function(str){\n\
    \        max = Math.max(str.length, max);\n    });\n    return strings[max];\n\
    }\n", "  if (isEmpty(strings)) return undefined;\n  else {\n    var maxSize =\
    \ 0;\n    var maxLength = 0;\n    for(var i = 0; i < strings.length; i++){\n \
    \     var str = strings[i];\n      var length = str.length;\n      if (length\
    \ > maxLength) {\n        maxLength = length;\n        maxSize = str;\n      }\n\
    \    }\n    return maxSize;\n  }\n}\n\n", "  if(strings.length == 0) return undefined;\n\
    \  var length = strings[0].length,\n      i;\n  for(i = 1; i < strings.length;\
    \ i++){\n    if(strings[i].length > length){\n      length = strings[i].length;\n\
    \    }\n  }\n  return strings[0].length > length ? strings[0] : undefined;\n}\n",
  "  if (strings.length===0) return undefined;\n  else{\n    var longest = strings[0].length,\
    \ \n      found = false;\n    for (var i = 1; i < strings.length; i++) {\n   \
    \   if (strings[i].length >  longest){\n        longest = strings[i].length;\n\
    \        found = true;\n      }\n    }\n    if (!found) return undefined;\n  }\n\
    \  return strings[longest];\n}\n", "    var longest = 0;\n    var index = 0;\n\
    \    for(var i = 0; i< strings.length; i++){\n        if(strings[i].length > longest){\n\
    \            longest = strings[i].length;\n            index = i;\n        }\n\
    \    }\n    if(index === 0){\n        return undefined;\n    }\n    return strings[index];\n\
    }\n", "    var max;\n    var longestLength;\n    if(strings.length === 0){\n \
    \       return undefined;\n    }\n    else if(strings.length === 1){\n       \
    \ return strings[0];\n    }\n    else {\n        longestLength = strings.length;\n\
    \        max = strings[0];\n        for(var i = 0; i < strings.length; i++){\n\
    \            for(var j = 0; j < longestLength; j++){\n                if(strings[i].length\
    \ > max && strings[i] === strings[j]){\n                    max = strings[i];\n\
    \                    longestLength = j;\n                }\n            }\n  \
    \      }\n        return max;\n    }\n}", "\tvar len = strings.length,\n\t\tmax\
    \ = strings[0];\n\n\tfor(var i = 1; i < len; i++){\n\t\tif(strings[i].length >\
    \ max[0].length){\n\t\t\tmax = strings[i];\n\t\t}\n\t}\n\treturn max;\n}\n", " \
    \   if(strings.length <= 0) return undefined;\n    var len = strings[0].length;\n\
    \    for(var i = 1; i < strings.length; i++){\n        if(strings[i].length <\
    \ len) len = strings[i].length;\n    }\n    return strings[strings.length - 1];\n\
    }\n", "  let longest = strings[0];\n  let counter = 0;\n  for (let string of strings){\n\
    \    if (string.length > longest.length){\n      longest = string;\n    }\n  \
    \  counter++;\n  }\n  return longest;\n}\n", "    var str = \"\";\n    for(var\
    \ i = 0; i < strings.length; i++){\n        var len = strings[i].length;\n   \
    \     if(len > str.length){\n            str = strings[i];\n        }\n    }\n\
    \    return str;\n}\n", "\treturn strings[strings.length - 1].length ? strings.pop().length\
    \ : undefined;\n}\n", "\treturn strings.reduce(function(a, c){\n\t\treturn a.length\
    \ > c.length ? a : c;\n\t});\n}\n", "    if(strings.length <= 0) return undefined;\n\
    \    for(var i = 1; i < strings.length; i++){\n        if(strings[i].length >\
    \ strings[i - 1].length){\n            var swap = strings[i];\n            strings[i]\
    \ = strings[i - 1];\n            strings[i - 1] = swap;\n        }\n    }\n  \
    \  return strings[0];\n}\nexports.longest = longest;\n", "  var max = (strings.filter(function(i){\n\
    \    return i.length > 0;\n  }).length) ? strings[strings.length-1] : undefined;\n\
    \  return max && max.length > strings.length ? max : undefined;\n}\n", "    var\
    \ stringArray = strings;\n    if (!stringArray.length) return undefined;\n   \
    \ if (stringArray.length > 1) {\n        return stringArray.reduce(function(prev,\
    \ curr){\n            return prev.length < curr.length ? prev : curr;\n      \
    \  });\n    } else {\n        return stringArray[0];\n    }\n}", "  var longest\
    \ = \"\";\n  var length = 0;\n  for(var i = 0; i < strings.length; i++){\n   \
    \ if(strings[i].length > length){\n      length = strings[i].length;\n      longest\
    \ = strings[i];\n    }\n  }\n  if(strings.length > 0){\n    return longest;\n\
    \  } else {\n    return undefined;\n  }\n}\n", "    let longest = 0;\n    if(strings.length\
    \ < 1){\n        return undefined;\n    }\n    strings.forEach(function(string){\n\
    \        if(longest<string.length){\n            longest = string.length;\n  \
    \      }\n    });\n    return strings[longest-1];\n}\n", "    var longest_str\
    \ = strings[0];\n    var num_strings = strings.length;\n    for (var i=1; i<num_strings;\
    \ i++)\n        if (strings[i].length >= longest_str.length)\n            longest_str\
    \ = strings[i];\n    return longest_str;\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ works great, but I'm getting a syntax error, and I can't figure out how to get\
    \ rid of it.  Perhaps you could comment it out?  Thanks again!\n<|/ c |>\n<| c\
    \ |>\nYou can't use this within a function and expect it to work. I don't know\
    \ what you were trying to do, so I just kept it simple.\n<|/ c |>\n<| a tags=javascript,sorting,jquery,arrays\
    \ |>\nI would use an Array like so:\n<code>\nvar arr = ['a', 'b', 'c', 'd'];\n\
    arr.sort(function(a,b){\n    var aNumber = a.match(/\\d+/)[0];\n    var bNumber\
    \ = b.match(/\\d+/)[0];\n    return bNumber - aNumber;\n});\n</code>\nThe first\
    \ part of it returns an array of the numbers in the strings:\n<code>\n'abc'.match(/\\\
    d+/); // [\"1\", \"2\", \"3\", \"4\"]\n</code>\nThe second part uses this array\
    \ to sort the array by the numbers in the string:\n<code>\n'abc'.match(/\\d+/)[0]\
    \ - '123'; // -1\n'abc'.match(/\\d+/)[0] - '1'; // 0\n'abc'.match(/\\d+/)[0] -\
    \ '12'; // 1\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThanks for posting this!  It\
    \ works great for my use, except that I wanted it to output the whole string if\
    \ two strings are the same.  I modified it slightly by removing `b.match`.  Thanks\
    \ again!\n<|/ c |>\n<| c |>\nAwesome! Glad I could help.\n<|/ c |>\n<| a dscore=1\
    \ |>\nHere is a simple solution using underscore.js and it's _.sortBy function.\
    \ This function accepts comparison function which could be used for custom sorting:\n\
    <code>\nvar strings = [\"1\", \"20\", \"30\", \"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\
    \ \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\"\
    , \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\"\
    , \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"", "    if(strings.length\
    \ === 0){\n        return undefined;\n    }\n    return strings.sort((a,b) =>\
    \ (b.length - a.length)).slice(-1)[0];\n}\n", "\tif (strings.length === 0) {\n\
    \t\treturn undefined;\n\t}\n\n\tconst max = strings[0];\n\tfor (let i = 1; i <\
    \ strings.length; i++) {\n\t\tif (strings[i].length > max.length) {\n\t\t\tmax\
    \ = strings[i];\n\t\t}\n\t}\n\n\treturn max;\n}\n", "\tif(!strings || strings.length\
    \ === 0) return undefined;\n\tvar longest_string = \"\";\n\tvar longest_length\
    \ = 0;\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].length >\
    \ longest_length){\n\t\t\tlongest_length = strings[i].length;\n\t\t\tlongest_string\
    \ = strings[i];\n\t\t}\n\t}\n\treturn longest_string;\n}\n", "    if(strings.length\
    \ == 0) return undefined;\n    var max = strings[0];\n    for(var i = 1; i < strings.length;\
    \ i++){\n        if(strings[i].length >= max.length){\n            max = strings[i];\n\
    \        }\n    }\n    return max;\n}\n", "    let longestString = 0;\n\n    for(let\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].length > longestString){\n\
    \            longestString = strings[i].length;\n        }\n    }\n\n    for(let\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].length < longestString){\n\
    \            return strings[i];\n        }\n    }\n\n    return undefined;\n}\n",
  "    return strings.reduce(function(a, b){\n        if(a.length > b.length) return\
    \ a;\n        return b;\n    }).length\n}\n", "    var max = 0;\n\n    for(var\
    \ i = 0; i < strings.length; i++){\n        max = strings[i].length > max ? strings[i].length\
    \ : max;\n    }\n\n    return max ? strings[0] : undefined;\n}\n", "\tvar string\
    \ = strings[0],\n\t\tlength = strings.length,\n\t\tresult = string;\n\n\tfor (var\
    \ i = 0; i < length; i++){\n\t\tstrings[i] = strings[i].length > string.length\
    \ ? string : strings[i];\n\t}\n\n\treturn result === undefined ? string : strings[Math.max(strings.length-1,\
    \ 0)];\n}\n", "\tlet strlen = strings.length;\n\tif(strlen === 0){\n\t\treturn\
    \ undefined;\n\t}\n\tfor(let i = 0, l = strlen; i < l; i++){\n\t\tif(strings[i].length\
    \ !== strlen){\n\t\t\tstrlen = strings[i].length;\n\t\t}\n\t}\n\treturn strings[strlen\
    \ - 1];\n}\n", "  if(strings.length == 0){\n    return undefined;\n  }\n  var\
    \ longest = \"\";\n  for(var i = 0; i < strings.length; i++){\n    var s = strings[i];\n\
    \    if(longest.length < s.length){\n      longest = s;\n    }\n  }\n  return\
    \ longest;\n}\n", "  if (!strings.length) return undefined;\n  return strings.reduce(function(a,\
    \ b) {\n    return b.length > a.length ? b : a\n  }, strings[0])\n}\n", "\tlet\
    \ length = strings.length;\n\tif (length === 0) {\n\t\treturn undefined;\n\t}\n\
    \tlet largest = 0;\n\tfor (let i = 0; i < length; i++) {\n\t\tlet l = strings[i].length;\n\
    \t\tif (l > largest) {\n\t\t\tlargest = l;\n\t\t}\n\t}\n\treturn strings[largest];\n\
    }\n", "    var string = (strings && strings.length) ? strings[0] : \"\";\n   \
    \ for(var i = 1; i < strings.length; i++){\n        var curr = strings[i];\n \
    \       if(curr === string) continue;\n        var length = string.length;\n \
    \       if(curr.length < length){\n            string = curr;\n            continue;\n\
    \        }\n        if(curr[length - 1] === string[length - 1]){\n           \
    \ if(curr[length - 1].length < length){\n                string = curr;\n    \
    \        }else{\n                continue;\n            }\n        }\n       \
    \ if(curr[0] === string[0]){\n            continue;\n        }\n        if(curr\
    \ === strings[0]){\n            string = curr[0];\n        }else{\n          \
    \  string = curr[0];\n            for(var j = 0; j < strings.length; j++){\n \
    \               if(strings[j] === string){\n                    string = curr[0];\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return string;\n}\n", "    if (strings.length === 0) return undefined\n\
    \    else return strings[0].length > strings[1].length ? strings[0] : strings[1]\n\
    }\n", "  var longString,\n      max,\n      len,\n      i,\n      result;\n  for(i\
    \ = 0, len = strings.length; i < len; i++){\n    longString = strings[i];\n  \
    \  max = longString.length;\n    for(len = 0; len < max && strings[i].length <\
    \ longString.length; len++){\n      longString += strings[i].substring(0, len);\n\
    \    }\n    if(!result || result.length > longString.length){\n      result =\
    \ longString;\n    }\n  }\n  return result || undefined;\n}\nlongest.reduceRight\
    \ = function(array){\n  return longest(array).split(\" \").pop();\n};\n", "  var\
    \ retVal, maxLen;\n  for (var i = 0; i < strings.length; i++){\n    var len =\
    \ strings[i].length;\n    if (retVal == undefined || len > maxLen){\n      retVal\
    \ = strings[i];\n      maxLen = len;\n    } else if (len == maxLen){\n      retVal\
    \ = retVal + strings[i];\n    }\n  }\n  return retVal;\n}\n", "    if (!Array.isArray(strings))\
    \ return\n    var len = strings.length,\n        l = strings[0].length,\n    \
    \    l = Math.max(l, strings.length);\n    for (var i=0; i<len; i++){\n      \
    \  if (strings[i].length > l){\n            l = strings[i].length\n        }\n\
    \    }\n    if (l === strings[0].length) return strings[0]\n    else return\n\
    }\n", "    let max = \"\";\n    for(let i = 0; i < strings.length; i++){\n   \
    \     let temp = strings[i];\n        let j = 0;\n        let count = 0;\n   \
    \     while(temp.indexOf(max) < 0 && j<strings.length){\n            temp = temp.substr(0,j);\n\
    \            j++;\n        }\n        for(; temp.indexOf(max) >= 0; j++){\n  \
    \          temp = temp.substr(0,j);\n            count++;\n        }\n       \
    \ if(count>1){\n            max = temp;\n        }\n    }\n    return max;\n}\n",
  "  let longestString;\n  let shortestString;\n  strings.map(function(str) {\n  \
    \  if (str.length > longestString.length){\n      longestString = str;\n    }\n\
    \    if (str.length > shortestString.length){\n      shortestString = str;\n \
    \   }\n  });\n  return longestString\n}\n", "  strings = _.toArray(strings);\n\
    \  return _.max(strings, _.length);\n}\n", "\tif(!strings.length){\n\t\treturn\
    \ undefined;\n\t}\n\tstrings.sort(function(a, b){return b.length - a.length});\n\
    \treturn strings[0];\n}\n", "\tif(typeof strings === 'string'){\n\t\tstrings =\
    \ [strings];\n\t}\n\n\tvar max = strings[0];\n\tfor(var i = 0; i < strings.length;\
    \ i++){\n\t\tif(strings[i].length > max.length){\n\t\t\tmax = strings[i];\n\t\t\
    }\n\t}\n\treturn max;\n}\n", "    if (strings.length === 0) {\n        return\
    \ undefined;\n    }\n    var longString = strings[0];\n    for (var i = 1; i <\
    \ strings.length; i++) {\n        var stringLength = strings[i].length;\n    \
    \    if (stringLength > longString.length) {\n            longString = strings[i];\n\
    \        }\n    }\n    return longString;\n}\n", "    var maxLength = -1;\n  \
    \  var bestString = \"\";\n    strings.forEach(function(str){\n        if (str.length\
    \ > maxLength){\n            bestString = str;\n            maxLength = str.length;\n\
    \        }\n    });\n    return bestString;\n}", "\tif (strings.length === 0)\
    \ {\n\t\treturn undefined;\n\t}\n\tvar maxLength = 1;\n\tvar maxString = strings[0];\n\
    \tfor (var i = 1; i < strings.length; i++){\n\t\tvar s = strings[i];\n\t\tif (s.length\
    \ > maxLength){\n\t\t\tmaxString = s;\n\t\t\tmaxLength = s.length;\n\t\t}\n\t\
    }\n\treturn maxString;\n}\n", "    let longest = strings[0];\n    for(const string\
    \ of strings){\n        if(string.length > longest.length){\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\n", "    var longest = 0;\n\
    \    var len = strings.length;\n    if(len == 0) return undefined;\n    for(var\
    \ i = 0; i < len; i++){\n        var str = strings[i].toLowerCase();\n       \
    \ if(str.length >= longest){\n            longest = str.length;\n        }\n \
    \   }\n    return strings[longest];\n}", "  var longer = undefined;\n  var shortest\
    \ = strings.reduce(function(a,b){\n    return b.length >= a?b.length:a;\n  },\
    \ 0);\n\n  strings.forEach(function(t){\n    if (t.length > shortest && t.length\
    \ >= longer){\n      longer = t.length;\n    }\n  });\n\n  return longer !== undefined\
    \ ? longer : strings[0];\n}\n\nmodule.exports = longest;\n\n},{}],13:[function(_dereq_,module,exports){\n\
    var isArray = _dereq_('isarray');\n", "  return strings.reduce(function(a, b){\n\
    \    return a.length > b.length ? a : b;\n  });\n}\n", "    return strings.reduce((max,s)\
    \ => s.length >= max.length ? s : max, undefined);\n}\n", "    var longstring;\n\
    \    \n    // Check if the array is empty or undefined\n    if(!strings.length)\n\
    \        return undefined;\n    \n    // Check if all strings are the same length\n\
    \    for(var i=0; i<strings.length; i++){\n        longstring = \"\";\n      \
    \  for(var j=0; j<strings[i].length; j++)\n            longstring = longstring\
    \ + strings[i].charAt(j);\n        \n        // Check if the string is longer\
    \ than the previous one\n        if(longstring.length>strings[i].length){\n  \
    \          longstring = strings[i];\n        }\n    }\n    return longstring;\n\
    }\n", "    if (!strings || !strings.length) return undefined; //Nothing in input\
    \ array, return undefined\n    var longest_string = strings[0]; //The longest\
    \ string we have\n    var last_index = 0; //Keeps track of the longest index in\
    \ the strings array\n    for (var i = 1; i < strings.length; i++){\n        //If\
    \ the strings aren't equal, return the next longest string\n        if (strings[i].length\
    \ < strings[last_index].length){\n            longest_string = strings[i];\n \
    \           last_index = i;\n        } else if (strings[i].length == strings[last_index].length){\n\
    \            //If they are equal, check if the new character is bigger or equal\
    \ to the last character\n            if (strings[i].charAt(strings[i].length -\
    \ 1) >= strings[last_index].charAt(strings[last_index].length - 1)){\n       \
    \         longest_string = strings[i];\n                last_index = i;\n    \
    \        }\n        }\n    }\n    return longest_string;\n}\n", "\tvar string\
    \ = \"\",\n\t\tmax = 0,\n\t\tiMax,\n\t\ti,\n\t\tlen;\n\n\tif (strings.length ===\
    \ 0) {\n\t\treturn undefined;\n\t}\n\n\t// Loop through the array\n\tfor (i =\
    \ 0, len = strings.length; i < len; i += 1) {\n\t\tiMax = strings[i].length >\
    \ max ? strings[i].length : max;\n\t\tstring = strings[i];\n\t\tmax = iMax;\n\t\
    }\n\n\treturn string;\n}\n", "\tlet longest = strings[0];\n\tlet length = 0;\n\
    \tfor (let index = 0; index < strings.length; index++) {\n\t\tlength = strings[index].length;\n\
    \t\tif (length > longest.length) {\n\t\t\tlongest = strings[index];\n\t\t}\n\t\
    }\n\treturn longest;\n}\n", "\tvar longest = strings[0].length;\n\tfor (var i\
    \ = 1; i < strings.length; i++){\n\t\tvar currentLength = strings[i].length;\n\
    \t\tif (currentLength > longest) longest = currentLength;\n\t}\n\treturn longest;\n\
    }", "  return strings.length > 0\n    ? strings.reduce(function(a, b){\n     \
    \ return a.length > b.length ? a : b\n    })\n    : undefined;\n}\n", "  return\
    \ !strings.length ? undefined : strings.reduce(function(a, b){\n    return a.length\
    \ > b.length ? a : b;\n  });\n}\n", "    if(!Array.isArray(strings)) return undefined;\n\
    \    var longest_str = strings[0],\n        longest_len = strings[0].length;\n\
    \    for(var i = 1; i < strings.length; i++){\n        var s = strings[i],\n \
    \           l = s.length;\n        if(l > longest_len){\n            longest_str\
    \ = s;\n            longest_len = l;\n        }\n    }\n    return longest_str;\n\
    }\n", "    if(strings.length === 0){\n        return undefined;\n    }\n    if(strings.length\
    \ === 1){\n        return strings[0];\n    }\n\n    var longestLength = 1;\n \
    \   var longestString = strings[0];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(strings[i].length > longestLength){\n            longestLength = strings[i].length;\n\
    \            longestString = strings[i];\n        }\n    }\n    return longestString;\n\
    }\n", "  if(strings.length == 0) return undefined;\n  if(strings.length > 1) return\
    \ strings.sort(function(a, b){\n    return b.length - a.length;\n  })[0];\n  return\
    \ strings[0];\n}\n", "\tif(strings.length){\n\t\tvar longestString = \"\";\n\t\
    \tvar longestStringLength = 0;\n\n\t\tfor(var i = 0; i < strings.length; i++){\n\
    \t\t\tif(strings[i].length > longestStringLength){\n\t\t\t\tlongestString = strings[i];\n\
    \t\t\t\tlongestStringLength = strings[i].length;\n\t\t\t}\n\t\t}\n\t\treturn longestString;\n\
    \t}\n\telse{\n\t\treturn undefined;\n\t}\n}\n", "  if (strings.length === 0) {\n\
    \    return undefined;\n  }\n  return strings[0];\n}", "\tif(!strings || strings.length\
    \ === 0) return undefined;\n\tif(strings.length === 1) return strings[0];\n\t\
    var longer = strings[0];\n\tvar shorter = strings[0];\n\tfor(var i = 1; i < strings.length;\
    \ i++){\n\t\tif(strings[i].length > longer.length){\n\t\t\tlonger = strings[i];\n\
    \t\t} else if(strings[i].length < shorter.length){\n\t\t\tshorter = strings[i];\n\
    \t\t}\n\t}\n\treturn longer;\n}\n", "    if(!strings.length || strings[0].length\
    \ == 0)\n        return undefined;\n\n    var longest = 0;\n    for(var i = 0;\
    \ i < strings.length; i++)\n        if(strings[i].length > longest)\n        \
    \    longest = strings[i].length;\n\n    return strings[strings.length - 1].length\
    \ == longest ? strings[strings.length - 1] : longest;\n}\n\n", "    if (!strings.length)\
    \ return undefined; // Empty array\n    \n    // Store the longest string length\
    \ and the index at which it occurs\n    var max = strings[0].length, idx = 1;\n\
    \    \n    // Go through each string and keep track of the longest length\n  \
    \  strings.forEach(function(str){\n        max = Math.max(max, str.length);\n\
    \    });\n    \n    // Return the first element of the array\n    return strings[idx-1];\n\
    }\n", "    var longest = \"\";\n    var maxLength = 0;\n\n    if(strings.length\
    \ === 0){\n        return undefined;\n    }\n\n    strings.forEach(function(string){\n\
    \        var stringLength = string.length;\n\n        if(stringLength > maxLength){\n\
    \            maxLength = stringLength;\n            longest = string;\n      \
    \  }\n    });\n\n    return longest;\n}\n", "    if (!Array.isArray(strings) ||\
    \ strings.length <= 0)\n        return undefined;\n\n    strings = _.uniq(strings);\n\
    \n    return strings.reduce(function(a, b){\n        return a.length > b.length\
    \ ? a : b;\n    });\n}\n", "\tvar length = strings.length,\n\t\tmax;\n\tif (length\
    \ === 0) {\n\t\treturn undefined;\n\t}\n\tmax = strings[0];\n\tfor(var i = 1;\
    \ i < length; i++){\n\t\tvar length = strings[i].length,\n\t\t\tletter = strings[i];\n\
    \t\tif (letter > max) {\n\t\t\tmax = letter;\n\t\t}\n\t}\n\treturn max;\n}", " \
    \   var lengths = strings.map(function(el){\n        return el.length;\n    });\n\
    \n    var longest = lengths.reduce(function(a, b){\n        return Math.max(a,\
    \ b);\n    });\n\n    var result = strings[0];\n    for (var i = 1; i < strings.length;\
    \ i++){\n        if(lengths[i] > longest){\n            longest = lengths[i];\n\
    \            result = strings[i];\n        }\n    }\n\n    return result;\n}\n",
  "    return _.max(_.map(strings, function(s){return s.length;}), function(m){return\
    \ m;});\n}\n", "\tvar longest = 0,\n\t\tlength,\n\t\ti;\n\n\tfor (i = 0, length\
    \ = strings.length; i < length; i++){\n\t\tif (strings[i].length > longest){\n\
    \t\t\tlongest = strings[i].length;\n\t\t}\n\t}\n\treturn strings[longest];\n}\n",
  "\treturn strings.length ? strings.sort(function(a, b){\n\t\treturn b.length - a.length;\n\
    \t}).pop() || undefined; \n}\n\n", "\tif(!strings || !strings.length) return undefined;\n\
    \tvar stringLength = strings.length;\n\tif(!stringLength) return undefined;\n\t\
    var longestString = strings[0];\n\tvar longestStringLength = longestString.length;\n\
    \tfor(var i = 1; i < stringLength; i++){\n\t\tvar currentString = strings[i];\n\
    \t\tif(currentString.length < longestStringLength){\n\t\t\tlongestString = currentString;\n\
    \t\t\tlongestStringLength = currentString.length;\n\t\t}\n\t}\n\treturn longestString;\n\
    }\n", "  if(strings.length == 0)\n    return undefined;\n  var max_string = \"\
    \";\n  var max_len = strings[0].length;\n  for(var i = 1; i < strings.length;\
    \ i++){\n    var len = strings[i].length;\n    if(len > max_len){\n      max_len\
    \ = len;\n      max_string = strings[i];\n    }\n  }\n  return max_string;\n}\n",
  "\tif (strings.length === 0) return undefined;\n\tlet max = strings[0].length;\n\
    \tfor (let i = 1; i < strings.length; i++){\n\t\tmax = Math.max(strings[i].length,\
    \ max);\n\t}\n\treturn strings[0].length > max ? strings[0] : longest(strings.slice(1));\n\
    }\n", "\tif(!Array.isArray(strings)) return false;\n\treturn strings.reduce((p,c)\
    \ => Math.max(p.length, c.length), 0);\n}\n", "    var ret = \"\";\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].length > ret.length){\n\
    \            ret = strings[i];\n        }\n    }\n    return ret;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
