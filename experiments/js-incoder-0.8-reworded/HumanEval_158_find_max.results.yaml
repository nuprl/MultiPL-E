language: js
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // Your code here\n    // return -1;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpubpn_6bh.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpubpn_6bh.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return words.sort(function(a,b){\n    return b.length\
    \ - a.length;\n  }).pop();\n}\n</code></pre>\n</div>\n</div>\n</div>\n<div class=\"\
    cell border-box-sizing text_cell rendered\"><div class=\"prompt input_prompt\"\
    >\n</div><div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing\
    \ rendered_html\">\n<h2 id=\"2.-Exploring-the-Data\">2. Exploring the Data<a class=\"\
    anchor-link\" href=\"#2.-Exploring-the-Data\">&#182;</a></h2><p>To get a better\
    \ understanding of the dataset we are going to explore it with Pandas library.</p>\n\
    <p>We will use the <code>head</code> method to display the first rows of the dataset\
    \ and the <code>tail</code> method to display the last rows of the dataset.</p>\n\
    \n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\"\
    >\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[27]:</div>\n\
    <div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight\
    \ hl-ipython3\"><pre><span></span><span class=\"c1\"># Load the Pandas library</span>\n\
    <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"\
    k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"c1\"># Load the Iris\
    \ dataset as a Pandas DataFrame</span>\n<span class=\"n\">iris_data</span> <span\
    \ class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span\
    \ class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">&#39;iris.csv&#39;</span><span\
    \ class=\"p\">)</span>\n\n<span class=\"c1\"># Print the first five rows</span>\n\
    <span class=\"n\">iris_data</span><span class=\"o\">.</span><span class=\"n\"\
    >head</span><span class=\"p\">()</span>\n</pre></div>\n\n</div>\n</div>\n</div>\n\
    \n<div class=\"output_wrapper\">\n<div class=\"output\">\n\n\n<div class=\"output_area\"\
    >\n\n<div class=\"prompt\"></div>\n\n\n<div class=\"output_subarea output_stream\
    \ output_stdout output_text\">\n<pre>sepal_length      5.1\nsepal_width      \
    \ 3.5\npetal_length      1.4\npetal_width       0.2\nclass    Iris-versicolor\n\
    Name: 0, dtype: object\nsepal_length      5.1\nsepal_width       3.5\npetal_length\
    \      1.4\npetal_width       0.2\nclass    Iris-versicolor\nName: 1, dtype: object\n\
    sepal_length      5.1\nsepal_width       3.5\npetal_length      1.4\npetal_width\
    \       0.2\nclass    Iris-versicolor\nName: 2, dtype: object\nsepal_length  \
    \    5.1\nsepal_width       3.5\npetal_length      1.4\npetal_width       0.2\n\
    class    Iris-versicolor\nName: 3, dtype: object\nsepal_length      5.1\nsepal_width\
    \       3.5\npetal_length      1.4\npetal_width       0.2\nclass    Iris-versicolor\n\
    Name: 4, dtype: object\nsepal_length      5.1\nsepal_width       3.5\npetal_length\
    \      1.4\npetal_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: SyntaxError
  stderr: "/tmp/tmpxh2f_ol6.js:16\n</code></pre>\n^\n\nSyntaxError: Unexpected token\
    \ '<'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word;\n    for(var i =0;\
    \ i < words.length; i++){\n        words[words.length -1] = words[i];\n      \
    \  word = words[0];\n        for(var j= 0; j < word.length; j++){\n          \
    \  for(var k = 0; k < word.length ; k++){\n                words[words.length\
    \ -1] = word;\n                word = words[j];\n            }\n        }\n  \
    \      console.log(word);\n        max = words.length;\n    }\n    return max;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp9pm1zamu.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9pm1zamu.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'of

    of

    of

    '
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  words.sort();\n  let counter = 0;\n  let maxChar\
    \ = 0;\n  for(let i = 0; i < words.length; i++){\n    let char = words[i].length;\n\
    \    if (char > maxChar){\n      maxChar = char;\n      counter = i;\n    }\n\
    \  }\n  return words[counter];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'prrk'\n\nshould\
    \ loosely deep-equal\n\n'this'\n    at test (/tmp/tmpsv0r0v31.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsv0r0v31.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'prrk',\n\
    \  expected: 'this',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return words.reduce((a, b) => b.length - a.length\
    \ || a.indexOf(b), words[0]);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1u2bmh35.js:12\n  return words.reduce((a, b) => b.length - a.length\
    \ || a.indexOf(b), words[0]);\n                                              \
    \           ^\n\nTypeError: a.indexOf is not a function\n    at /tmp/tmp1u2bmh35.js:12:58\n\
    \    at Array.reduce (<anonymous>)\n    at find_max (/tmp/tmp1u2bmh35.js:12:16)\n\
    \    at test (/tmp/tmp1u2bmh35.js:20:20)\n    at Object.<anonymous> (/tmp/tmp1u2bmh35.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    \n    var unique_counts = {};\n    \n    words.forEach(function(word){\n\
    \        var word_count = word.split('').length;\n        if (unique_counts[word_count]){\n\
    \            unique_counts[word_count] += 1;\n        } else {\n            unique_counts[word_count]\
    \ = 1;\n        }\n    });\n    \n    return words[\n        Object.keys(unique_counts)\n\
    \        .sort(function(a, b){return b - a})[0]\n    ];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmplqmm2b2l.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmplqmm2b2l.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let maxCount = 0;\n    let wordWithMaxCount =\
    \ \"\";\n    words.forEach(str => {\n        if (str.length >maxCount){\n    \
    \        maxCount = str.length;\n            wordWithMaxCount = str;\n       \
    \ }\n    });\n    return wordWithMaxCount;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpvz3gzviw.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvz3gzviw.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  // Convert each word to an array of characters.\n\
    \  var chars = [];\n  words.forEach(function(word){\n    chars = chars.concat(word.split(\"\
    \"));\n  });\n  \n  var maxCount = 0;\n  var maxWord = \"\";\n  \n  chars.forEach(function(char){\n\
    \    if (chars.indexOf(char) == -1) chars.push(char);\n    \n    if (chars.filter(function(char2){return\
    \ chars.indexOf(char2) == -1}).length == chars.length){\n      maxCount = 1;\n\
    \    } else {\n      maxCount = chars.filter(function(char2){return chars.indexOf(char2)\
    \ == -1}).length;\n    }\n    \n    if (maxCount > maxWord.length){\n      maxWord\
    \ = chars.filter(function(char2){return chars.indexOf(char2) == -1}).join(\"\"\
    );\n    }\n  });\n  \n  return maxWord;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp95oe5kga.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp95oe5kga.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  if(words.length < 2){\n    return words[0];\n \
    \ }\n  let maxCount = 0;\n  let maxWord = words[0];\n  for(let i = 1; i < words.length;\
    \ i++){\n    let count = 0;\n    for(let j = 0; j < maxWord.length; j++){\n  \
    \    count += words[i].charAt(j) === maxWord.charAt(j);\n    }\n    if(count >\
    \ maxCount){\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n\
    \  return maxWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp7_hycgwc.js:35:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp7_hycgwc.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var maxCount = 0;\n  var wordWithMaxCount;\n  for\
    \ (var i=0; i<words.length; i++){\n    var wordCount = words[i].length;\n    if\
    \ (wordCount > maxCount){\n      maxCount = wordCount;\n      wordWithMaxCount\
    \ = words[i];\n    }\n  }\n  return wordWithMaxCount;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpqggxqjf6.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqggxqjf6.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  //Write your code here\n  var max_count=0;\n  var\
    \ max_word=\"\";\n  \n  for(var i=0;i<words.length;i++){\n    var temp=words[i];\n\
    \    for(var j=0;j<words.length;j++){\n      if(temp==words[j]){\n        words.splice(j,1);\n\
    \        break;\n      }\n    }\n    \n    var count=words.length;\n    if(count>max_count){\n\
    \      max_count=count;\n      max_word=temp;\n    }\n  }\n  \n  return max_word;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp4js59v3l.js:39:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp4js59v3l.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tlet max_unique = words[0].length;\n\tlet best_string\
    \ = words[0];\n\n\tfor(let i=0;i<words.length;i++){\n\t\tlet unique_char_count\
    \ = 0;\n\t\tfor(let j=0;j<words[i].length;j++){\n\t\t\tlet char = words[i][j];\n\
    \t\t\tunique_char_count+=chars.indexOf(char);\n\t\t}\n\t\tif(unique_char_count\
    \ > max_unique){\n\t\t\tmax_unique = unique_char_count;\n\t\t\tbest_string = words[i];\n\
    \t\t}\n\t}\n\treturn best_string;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4gqhrv6l.js:19\n\t\t\tunique_char_count+=chars.indexOf(char);\n\
    \t\t\t                   ^\n\nReferenceError: chars is not defined\n    at find_max\
    \ (/tmp/tmp4gqhrv6l.js:19:23)\n    at test (/tmp/tmp4gqhrv6l.js:33:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp4gqhrv6l.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let words_with_count = words.map(word => [word,\
    \ word.length])\n  words_with_count = words_with_count.sort((a,b) => {\n    if\
    \ (a[1] < b[1]) return 1\n    if (a[1] > b[1]) return -1\n    return 0\n  })\n\
    \  return words_with_count[0][0] // Return the word which comes first in lexicographical\
    \ order.\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpm89bbjl7.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpm89bbjl7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\treturn find_max_aux(words, 0, \"\", [])\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0gwkdt1h.js:12\n\treturn find_max_aux(words, 0, \"\", [])\n\t^\n\
    \nReferenceError: find_max_aux is not defined\n    at find_max (/tmp/tmp0gwkdt1h.js:12:2)\n\
    \    at test (/tmp/tmp0gwkdt1h.js:20:20)\n    at Object.<anonymous> (/tmp/tmp0gwkdt1h.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // Only change code below this line\n    let\
    \ max = \"\";\n    let highestCount = 0;\n    for(let word of words){\n      \
    \  let count = count_unique_chars(word);\n        if(count > highestCount){\n\
    \            highestCount = count;\n            max = word;\n        }\n    }\n\
    \    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: ReferenceError
  stderr: "/tmp/tmpjt22hff3.js:16\n        let count = count_unique_chars(word);\n\
    \                    ^\n\nReferenceError: count_unique_chars is not defined\n\
    \    at find_max (/tmp/tmpjt22hff3.js:16:21)\n    at test (/tmp/tmpjt22hff3.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpjt22hff3.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    //write your code here\n    let maxIndex = 0;\n\
    \    let maxVal = 0;\n    for (let i = 0; i < words.length; i++){\n        for(let\
    \ j = 1; j < words[i].length; j++){\n            if(words[i].charAt(j - 1) ===\
    \ words[i].charAt(j)){\n                maxIndex++;\n            }else{\n    \
    \            break;\n            }\n        }\n        if(maxVal < maxIndex){\n\
    \            maxVal = maxIndex;\n        }\n        maxIndex = 0;\n    }\n   \
    \ return words[maxIndex];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpm55oxb04.js:35:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpm55oxb04.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let numUniqueChars=0;\n    let maxUniqueChars=0;\n\
    \    let maxStr=\"\";\n    for(let i=0; i<words.length; i++){\n        let uniqueCharCount=[];\n\
    \        for(let j=0; j<words[i].length; j++){\n            uniqueCharCount.push(words[i].substr(j,1).split('').length)\n\
    \        }\n        let maxCount=uniqueCharCount.reduce((a,b) => Math.max(a,b),\
    \ 0);\n        if(maxCount > maxUniqueChars){\n            maxUniqueChars=maxCount;\n\
    \            maxStr=words[i];\n        }\n        numUniqueChars += uniqueCharCount.length;\n\
    \    }\n    return maxStr;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpbtkbhs_u.js:34:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpbtkbhs_u.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    return words.sort(function(a, b){return a.length\
    \ - b.length}).slice(0,1).pop();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'of'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpptjw14el.js:20:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpptjw14el.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'of',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var chars = {};\n  for(var i = 0; i < words.length;\
    \ i++){\n    var word = words[i];\n    var count = chars[word] ? chars[word]+1\
    \ : 1;\n    chars[word] = count;\n  }\n  return chars[Object.keys(chars)[0]];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpk784vd_f.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpk784vd_f.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var maxCount = 0;\n  var maxWord = \"\";\n  for(var\
    \ i=0;i<words.length;i++){\n    var count = 1;\n    var word = words[i];\n   \
    \ for(var j=0;j<word.length;j++){\n      if(word.indexOf(words[j])===0){\n   \
    \     count++;\n      }\n    }\n    if(count>maxCount){\n      maxCount = count;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpwz4prsfk.js:35:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpwz4prsfk.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar uniques = {};\n\twords.forEach(function(word){\n\
    \t\tvar l = word.length;\n\t\tuniques[word] = uniques[word] || 0;\n\t\tif(uniques[word]\
    \ < l) uniques[word] = l;\n\t});\n\treturn _.keys(uniques).reduce(function(a,\
    \ b){\n\t\treturn a.length > uniques[b] ? a : b;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvvytun2p.js:18\n\treturn _.keys(uniques).reduce(function(a, b){\n\
    \t^\n\nReferenceError: _ is not defined\n    at find_max (/tmp/tmpvvytun2p.js:18:2)\n\
    \    at test (/tmp/tmpvvytun2p.js:28:20)\n    at Object.<anonymous> (/tmp/tmpvvytun2p.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let maxWord = words[0];\n  let maxChars = words[0].split('').length;\n\
    \  let maxCount = 0;\n  let maxIndex = 0;\n  for(let i = 1; i < words.length;\
    \ i++){\n    let curChars = words[i].split('').length;\n    if(curChars > maxChars){\n\
    \      maxChars = curChars;\n      maxWord = words[i];\n      maxCount = 1;\n\
    \      maxIndex = i;\n    }else if(curChars == maxChars){\n      maxCount++;\n\
    \    }\n  }\n  return maxWord;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmptgr7vwy3.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptgr7vwy3.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    //Write your code here\n    words.sort((a,b)=>a.length-b.length)\n\
    \    let maxCount = 0\n    let maxIndex\n    for (let i=0; i< words.length; i++){\n\
    \        let count = 0\n        let index = words[i].indexOf(0)\n        while\
    \ (index != -1){\n            count++\n            index = words[i].indexOf(index+1,\
    \ index+1);\n        }\n        if(count > maxCount){\n            maxCount =\
    \ count\n            maxIndex = i\n        }\n    }\n    return words[maxIndex]\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmps1_wzjbp.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmps1_wzjbp.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var result = \"\";\n    var max = 0;\n    for(var\
    \ i = 0; i < words.length; i++){\n        var tmpCount = 0;\n        for(var j\
    \ = 0; j < words.length; j++){\n            if(words[j].indexOf(words[i]) !==\
    \ -1 && tmpCount < max){\n                tmpCount++;\n                result\
    \ = words[j];\n                max = tmpCount;\n            }\n        }\n   \
    \ }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp6m5xefsg.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6m5xefsg.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  // Complete the function here\n};\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpsq8ocy4r.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsq8ocy4r.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var chars = words[0].split('').sort();\n  var wordLength\
    \ = words[0].length;\n  var count = 0;\n  for(var i = 1; i < words.length; i++){\n\
    \    var word = words[i];\n    var charsAfter = word.substr(0, wordLength);\n\
    \    var charsBefore = word.substr(0, wordLength);\n    var uniqueCharsAfter =\
    \ chars.filter(function(char){return charsAfter.indexOf(char) === -1;}).sort().length;\n\
    \    var uniqueCharsBefore = chars.filter(function(char){return charsBefore.indexOf(char)\
    \ === -1;}).sort().length;\n    if (uniqueCharsAfter === uniqueCharsBefore){\n\
    \      chars = chars.filter(function(char){return charsAfter.indexOf(char) ===\
    \ -1;});\n      chars.push(char);\n      count++;\n    } else if (uniqueCharsAfter\
    \ < uniqueCharsBefore){\n      chars = chars.filter(function(char){return charsBefore.indexOf(char)\
    \ === -1;});\n      chars.splice(chars.indexOf(char), 1);\n      count--;\n  \
    \  } else {\n      chars = chars.filter(function(char){return charsAfter.indexOf(char)\
    \ === -1;});\n      chars.splice(chars.indexOf(char), 1);\n      count++;\n  \
    \  }\n    wordLength = word.length;\n  }\n  var maxWord = words[words.length -\
    \ 1];\n  var charsAfterMaxWord = maxWord.substr(0, wordLength);\n  var uniqueCharsAfterMaxWord\
    \ = chars.filter(function(char){return charsAfterMaxWord.indexOf(char) === -1;}).sort().length;\n\
    \  var uniqueCharsBeforeMaxWord = chars.filter(function(char){return charsAfterMaxWord.indexOf(char)\
    \ === -1;}).sort().length;\n  if (uniqueCharsAfterMaxWord === uniqueCharsBeforeMaxWord){\n\
    \    chars = chars.filter(function(char){return charsAfterMaxWord.indexOf(char)\
    \ === -1;});\n    chars.push(char);\n  }\n  return chars.sort().join('');\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp07plu0ea.js:23\n      chars.push(char);\n                 ^\n\n\
    ReferenceError: char is not defined\n    at find_max (/tmp/tmp07plu0ea.js:23:18)\n\
    \    at test (/tmp/tmp07plu0ea.js:51:20)\n    at Object.<anonymous> (/tmp/tmp07plu0ea.js:63:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    if (words == null || words.length < 1) {\n  \
    \      return null;\n    }\n    \n    words = words.sort();\n    let max = null;\n\
    \    let maxCount = 0;\n    words.forEach(function(word){\n        word = word.toLowerCase();\n\
    \        if (word.length >= maxCount) {\n            // console.log(\"word\",\
    \ word, \"has more characters\", word.length);\n            max = word;\n    \
    \        maxCount = word.length;\n        } else {\n            // console.log(\"\
    word\", word, \"has less characters\", word.length);\n        }\n    });\n   \
    \ return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpee8nsa_a.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpee8nsa_a.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\treturn words[words.length-1];\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpioe66q7a.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpioe66q7a.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var i, j, k, l, n;\n\n    for(i = 0; i < words.length;\
    \ i++){\n        n = words[i].split(\"\");\n        for(j = 0; j < n.length; j++){\n\
    \            for(k = j; k < n.length; k++){\n                for(l = k; l < n.length;\
    \ l++){\n                    if(n[k] === n[l]){\n                        n.splice(k,\
    \ 1);\n                    }\n                    else if(n[k] > n[l]){\n    \
    \                    n.splice(k, 1);\n                        n.splice(l, 1);\n\
    \                    }\n                }\n            }\n        }\n    }\n\n\
    \    return words[n.length];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'of'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpvtnnxu38.js:39:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpvtnnxu38.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'of',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let largest = words[0];\n    let numOfUniqueChar\
    \ = 0;\n    for(let i=1; i<words.length; i++){\n        let charCounter = 0;\n\
    \        for(let j = 0; j < words[i].length; j++){\n            charCounter +=\
    \ words[i][j].length;\n        }\n        if(charCounter > numOfUniqueChar){\n\
    \            numOfUniqueChar = charCounter;\n            largest = words[i];\n\
    \        }\n    }\n    return largest;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'bb'\n\nshould\
    \ loosely deep-equal\n\n'aaaaaaa'\n    at test (/tmp/tmp8aivkejd.js:33:10)\n \
    \   at Object.<anonymous> (/tmp/tmp8aivkejd.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'bb',\n  expected:\
    \ 'aaaaaaa',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return find_max_impl(words, 0, []);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6rgy2623.js:12\n  return find_max_impl(words, 0, []);\n  ^\n\n\
    ReferenceError: find_max_impl is not defined\n    at find_max (/tmp/tmp6rgy2623.js:12:3)\n\
    \    at test (/tmp/tmp6rgy2623.js:20:20)\n    at Object.<anonymous> (/tmp/tmp6rgy2623.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  //write your code here\n  let maxCount = words.reduce((acc,\
    \ curr) => acc + curr.length, 0);\n  let result = {};\n  words.forEach((word)\
    \ => {\n    word.split('').forEach((char) => {\n      if (!result[char]) {\n \
    \       result[char] = 0;\n      }\n      result[char]++;\n    });\n  });\n  let\
    \ found = false;\n  Object.keys(result).forEach((key) => {\n    if (result[key]\
    \ === maxCount) {\n      found = true;\n    }\n  });\n  if (found) {\n    return\
    \ words.filter((word) => word.split('').filter((char) => result[char]).length\
    \ === maxCount)[0];\n  } else {\n    return words[0];\n  }\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp9cry1nrk.js:40:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp9cry1nrk.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // Write your answer here\n    // Solve it with\
    \ map and reduce (use map and reduce)\n\n    // Your code here\n    // console.log(words.reduce((max,str)\
    \ => {\n    //     var tmp = {}\n    //     for(var i of str){\n    //       \
    \  tmp[i] = (tmp[i] || 0) + 1;\n    //     }\n    //     return words.map(word\
    \ => word[0] === max[0] ? word[1] : 0)\n    // }, words[0]))\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nI agree that your solution is very elegant. But, it's not the\
    \ correct answer. OP wants the word which comes first in the lexicographical order.\
    \ Your solution returns word with maximum number of unique characters. Please\
    \ note that OP wrote _\"Return the word with maximum number of unique characters.\
    \ If multiple strings have maximum number of unique characters, return the one\
    \ which comes first in lexicographical order.\"_ So, for example, `find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])` returns `'aaaaaaa'`\n<|/ c |>\n<| c |>\nYou are right,\
    \ I updated the answer. Thank you!\n<|/ c |>\n<| a dscore=0 tags=javascript |>\n\
    <code>\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7fckeknj.js:24\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    return Math.max.apply(Math, words.map(function(word){\n\
    \        return word.length;\n    }));\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpkoh5yr5f.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkoh5yr5f.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return words[words.length-1];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp49ussrzi.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp49ussrzi.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n   let result = words[0];\n   for(let i = 1; i <\
    \ words.length; i++){\n       let temp = words[i];\n       let j;\n       for(j\
    \ = 0; j < words.length; j++){\n           if(words[j].length > words[i].length){\n\
    \               if(words[j] < temp){\n                   temp = words[j];\n  \
    \             }\n           }\n       }\n       if(temp.length > result.length){\n\
    \           result = temp;\n       }\n   }\n   return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpwc8w1hzz.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpwc8w1hzz.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let maxChars = words.length;\n  let maxWord = \"\
    \";\n  let maxCount = 0;\n  let maxPosition = 0;\n\n  for (let i = 0; i < words.length;\
    \ i++){\n    let charCount = words[i].length;\n    if (charCount > maxCount){\n\
    \      maxChars = charCount;\n      maxWord = words[i];\n      maxCount = charCount;\n\
    \      maxPosition = i;\n    }\n  }\n  return maxWord;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpo0ihr8cy.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpo0ihr8cy.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for(var i = 0; i<words.length;\
    \ i++){\n    word = words[i];\n    for(var j = i+1; j<words.length; j++){\n  \
    \    if(word.indexOf(words[j]) > 0){\n        max++;\n        words[j] = word;\n\
    \        break;\n      }\n    }\n  }\n  return words[Math.ceil(words.length/2)*2]\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpzun202f_.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzun202f_.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var result = \"\";\n  var max = 0;\n  for(var i=0;\
    \ i<words.length; i++){\n    for(var j=0; j<words[i].length; j++){\n      if(words[i].charCodeAt(j)===32){\n\
    \        for(var k=0; k<words[i].length; k++){\n          if(words[i].charCodeAt(k)\
    \ > max){\n            max = words[i].charCodeAt(k);\n            result = words[i];\n\
    \          }\n        }\n      }\n    }\n  }\n  return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpsah1j0mr.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsah1j0mr.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    return words.sort(function(first, second){\n\
    \        var firstCount = 0;\n        var secondCount = 0;\n        for (var i\
    \ = 0; i < first.length; i++){\n            var c = first[i];\n            if\
    \ (c.charCodeAt(0) === c.charCodeAt(0)){\n                firstCount += 1;\n \
    \           } else {\n                break;\n            }\n        }\n     \
    \   for (var j = 0; j < second.length; j++){\n            var c = second[j];\n\
    \            if (c.charCodeAt(0) === c.charCodeAt(0)){\n                secondCount\
    \ += 1;\n            } else {\n                break;\n            }\n       \
    \ }\n        if (firstCount > secondCount) {\n            return second;\n   \
    \     }\n        return first;\n    }).pop();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpjm53fsir.js:44:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpjm53fsir.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var maxWord = words[0];\n  var maxCount = 0;\n\
    \  for (var i = 1; i < words.length; i++){\n    var word = words[i];\n    var\
    \ count = count(word);\n    if (count > maxCount){\n      maxCount = count;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmsxr766t.js:16\n    var count = count(word);\n                ^\n\
    \nTypeError: count is not a function\n    at find_max (/tmp/tmpmsxr766t.js:16:17)\n\
    \    at test (/tmp/tmpmsxr766t.js:30:20)\n    at Object.<anonymous> (/tmp/tmpmsxr766t.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // Write your code here\n    var max = words[0];\n\
    \    var counts = {};\n\n    words.forEach(function(word){\n        counts[word]\
    \ = counts[word] || 0;\n        counts[word]++;\n    });\n\n    counts = Object.values(counts);\n\
    \    counts = counts.filter(function(n){\n        return n > 1;\n    });\n   \
    \ counts = counts.sort();\n\n    if (counts.length > 0) {\n        var first =\
    \ counts[0];\n        return words.find(function(word){\n            return word.toLowerCase()\
    \ === first.toLowerCase();\n        });\n    } else {\n        return max;\n \
    \   }\n\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"\
    ]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"\
    enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    );\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp3myad1g0.js:42:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp3myad1g0.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let maxCount = 0;\n    let maxWord = \"\";\n\
    \    for (let i = 0; i < words.length; i++){\n        let numLetters = countUniqueLetters(words[i]);\n\
    \        if (numLetters > maxCount){\n            maxCount = numLetters;\n   \
    \         maxWord = words[i];\n        }\n    }\n    return maxWord;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3x_aqjf1.js:15\n        let numLetters = countUniqueLetters(words[i]);\n\
    \                         ^\n\nReferenceError: countUniqueLetters is not defined\n\
    \    at find_max (/tmp/tmp3x_aqjf1.js:15:26)\n    at test (/tmp/tmp3x_aqjf1.js:29:20)\n\
    \    at Object.<anonymous> (/tmp/tmp3x_aqjf1.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var chars = {}, maxChars = 0, maxIndex = words.length\
    \ - 1;\n    for(var i = 0; i < words.length; i++){\n        if(chars[words[i]]\
    \ === undefined){\n            chars[words[i]] = 1;\n        }else{\n        \
    \    chars[words[i]] += 1;\n        }\n    }\n    for(var i = 0; i <= maxIndex;\
    \ i++){\n        if(chars[words[i]] > maxChars){\n            maxChars = chars[words[i]];\n\
    \            maxIndex = i;\n        }\n    }\n    return words[maxIndex];\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpy0hncm5m.js:33:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpy0hncm5m.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  if (words.length < 2)\n    return words[0];\n \
    \ var max_count = 1, min_count = words[0].length;\n  var max_word = words[0],\
    \ min_word = words[0];\n  for (var i = 1; i < words.length; i++) {\n    var curr_count\
    \ = words[i].length;\n    if (curr_count > max_count)\n      max_count = curr_count;\n\
    \    else if (curr_count < min_count)\n      min_count = curr_count;\n    if (curr_count\
    \ > max_count && curr_count > min_count)\n      max_word = words[i];\n    else\
    \ if (curr_count < min_count && curr_count > max_count)\n      min_word = words[i];\n\
    \  }\n  return min_word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp5gjc4ein.js:35:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp5gjc4ein.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let counter = {}\n    let max = 0\n    let maxWord\
    \ = \"\"\n    for (let i=0; i<words.length; i++){\n        let word = words[i]\n\
    \        if (!counter[word]){\n            counter[word] = 1\n        }else{\n\
    \            counter[word]++\n        }\n        if (counter[word] > max){\n \
    \           max = counter[word]\n            maxWord = word\n        }\n    }\n\
    \    return maxWord\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp9kupnd1w.js:35:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp9kupnd1w.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let words_dict = {}\n    for (let word of words){\n\
    \        if (!words_dict[word]){\n            words_dict[word] = 1\n        }else{\n\
    \            words_dict[word] += 1\n        }\n    }\n    let keys = Object.keys(words_dict)\n\
    \    let word = keys[0]\n    for (let i = 1 ; i < keys.length ; i++){\n      \
    \  if (words_dict[keys[i]] > words_dict[key]){\n            word = keys[i]\n \
    \       }\n    }\n    return word\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpjok4tk45.js:23\n        if (words_dict[keys[i]] > words_dict[key]){\n\
    \                                             ^\n\nReferenceError: key is not\
    \ defined\n    at find_max (/tmp/tmpjok4tk45.js:23:46)\n    at test (/tmp/tmpjok4tk45.js:35:20)\n\
    \    at Object.<anonymous> (/tmp/tmpjok4tk45.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let sortedWords = words.sort((a,b) => a.length\
    \ - b.length);\n  if(sortedWords.length > 1){\n    let maxNum = sortedWords.reduce((prev,\
    \ curr) => prev + (curr.length), 0);\n    return sortedWords.find(word => word.length\
    \ == maxNum);\n  }\n  return sortedWords[0];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpknh9x23z.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpknh9x23z.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var sorted = words.sort(function(a, b){\n    return\
    \ b.length - a.length\n  });\n  return sorted[0].substr(0, words[0].length)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0rqn02k8.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0rqn02k8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return words.reduce((a,b) => (a.chars.filter((x)\
    \ => b.chars.indexOf(x) < 0).length >= b.chars.length ? b : a).chars, {chars:\
    \ []})\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"\
    string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"\
    game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n\
    \  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpshvvqpu0.js:12\n  return words.reduce((a,b) => (a.chars.filter((x)\
    \ => b.chars.indexOf(x) < 0).length >= b.chars.length ? b : a).chars, {chars:\
    \ []})\n                                                                     \
    \                           ^\n\nTypeError: Cannot read properties of undefined\
    \ (reading 'length')\n    at words.reduce.chars (/tmp/tmpshvvqpu0.js:12:97)\n\
    \    at Array.reduce (<anonymous>)\n    at find_max (/tmp/tmpshvvqpu0.js:12:16)\n\
    \    at test (/tmp/tmpshvvqpu0.js:20:20)\n    at Object.<anonymous> (/tmp/tmpshvvqpu0.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    return words.sort((a,b) => b.length - a.length)[0]\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp2q5fhkvs.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp2q5fhkvs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return words.reduce(function(current, next){\n\
    \    return current.length > next.length ? current : next;\n  });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpxr0xtxo8.js:23:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxr0xtxo8.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var maxVal = 0;\n    var maxIndex;\n    var curIndex;\n\
    \    var numUniqueChars = 0;\n    for(var i = 0; i < words.length; i++){\n   \
    \     curIndex = 0;\n        for(var j = 0; j < words[i].length; j++){\n     \
    \       if(curIndex < words[i].length){\n                if(words[i].charAt(j)\
    \ == words[curIndex].charAt(j)){\n                    numUniqueChars++;\n    \
    \            }else{\n                    if(numUniqueChars > maxVal){\n      \
    \                  maxVal = numUniqueChars;\n                        maxIndex\
    \ = curIndex;\n                    }\n                    numUniqueChars = 1;\n\
    \                }\n            }\n            curIndex++;\n        }\n    }\n\
    \    if(numUniqueChars > maxVal){\n        maxVal = numUniqueChars;\n        maxIndex\
    \ = curIndex;\n    }\n    return words[maxIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpw4nbayqq.js:20\n                if(words[i].charAt(j) == words[curIndex].charAt(j)){\n\
    \                                                         ^\n\nTypeError: Cannot\
    \ read properties of undefined (reading 'charAt')\n    at find_max (/tmp/tmpw4nbayqq.js:20:58)\n\
    \    at test (/tmp/tmpw4nbayqq.js:45:20)\n    at Object.<anonymous> (/tmp/tmpw4nbayqq.js:57:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar wordCount = new Object();\n\tfor(var i in words)\
    \ {\n\t\tvar word = words[i];\n\t\tif (wordCount.hasOwnProperty(word)){\n\t\t\t\
    wordCount[word] += 1;\n\t\t} else {\n\t\t\twordCount[word] = 1;\n\t\t}\n\t}\n\t\
    var max = 0;\n\tvar maxWord = \"\";\n\tfor (var i in wordCount) {\n\t\tif (wordCount.hasOwnProperty(i)\
    \ && wordCount[i] > max) {\n\t\t\tmax = wordCount[i];\n\t\t\tmaxWord = i;\n\t\t\
    }\n\t}\n\treturn maxWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpqhzr5zm6.js:37:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpqhzr5zm6.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max_word = \"\";\n    var max_char_count\
    \ = 0;\n    for(var i = 0; i < words.length; i++){\n        var word = words[i];\n\
    \        var char_count = 0;\n        for(var j = 0; j < word.length; j++){\n\
    \            if(words[j].indexOf(word[j]) == -1){\n                char_count++;\n\
    \            }\n        }\n        if(char_count > max_char_count){\n        \
    \    max_char_count = char_count;\n            max_word = word;\n        }\n \
    \   }\n    return max_word;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwgriywql.js:18\n            if(words[j].indexOf(word[j]) == -1){\n\
    \                        ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'indexOf')\n    at find_max (/tmp/tmpwgriywql.js:18:25)\n    at test (/tmp/tmpwgriywql.js:34:20)\n\
    \    at Object.<anonymous> (/tmp/tmpwgriywql.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // TODO: Fill this in\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmphqq4fvk8.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmphqq4fvk8.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let maxCount = 0;\n  let maxWord = words[0];\n\
    \  for (let word of words){\n    for (let ch of word){\n      maxCount = (maxCount\
    \ > ch) ? maxCount : word.length;\n    }\n    if (maxCount > word.length){\n \
    \     maxCount = word.length;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpzchz71iq.js:31:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpzchz71iq.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var strs = words.map(function(word){ return word.toLowerCase()\
    \ })\n  strs.forEach(function(str, i){ counts[str] = 0 })\n  var max = -Infinity\n\
    \  var maxstr = null\n  strs.forEach(function(str, i){ counts[str] += 1 })\n \
    \ for(var k in counts){\n    if(counts[k] > max){\n      max = counts[k]\n   \
    \   maxstr = k\n    }\n  }\n  return maxstr\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpf6xeyvk1.js:13\n  strs.forEach(function(str, i){ counts[str] =\
    \ 0 })\n                                 ^\n\nReferenceError: counts is not defined\n\
    \    at /tmp/tmpf6xeyvk1.js:13:34\n    at Array.forEach (<anonymous>)\n    at\
    \ find_max (/tmp/tmpf6xeyvk1.js:13:8)\n    at test (/tmp/tmpf6xeyvk1.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpf6xeyvk1.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let arr=words.map((el)=>{\n        let set =\
    \ new Set(el.toLowerCase().split(\"\"))\n        return Array.from(set).length\n\
    \    }).sort((a,b)=>{\n        return b-a\n    }).reverse()\n    return arr[arr.length-1]\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpcyxtsbd0.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcyxtsbd0.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let words_with_count = words.map(word => word.length);\n\
    \    let unique_words_with_count = words.filter(word => word.length).map(word\
    \ => word.length);\n    words_with_count.sort((a, b) => b - a);\n    let word\
    \ = words_with_count.pop();\n    let next_word = words_with_count.pop();\n   \
    \ for (let i = 0; i < unique_words_with_count.length; i++) {\n        let count\
    \ = unique_words_with_count[i];\n        if (count > words_with_count[0]) {\n\
    \            word = next_word;\n            break;\n        }\n    }\n    return\
    \ word;\n}\n</code>\n<|/ a tags=javascript,algorithm,sorting |>\n<| a dscore=2\
    \ |>\nThe answer is \"yes\" if the first word has as many unique characters as\
    \ any other word. \nTo solve this I first create a dictionary (hash) where the\
    \ key is the length and the value is the array of words, then I sort the keys\
    \ and find out the length of the longest word with that length. If this length\
    \ is smaller than the length of the first word I return the value of the first\
    \ word (which is the longest word). \n<code>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpef2zeqt3.js:26\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max;\n  var maxWord;\n  \n  words.forEach(function(word){\n\
    \    // Get counts for each unique characters\n    var charCount = _.countBy(word);\n\
    \    \n    // If current word has max number of unique characters\n    if(max\
    \ === undefined || charCount[max] > charCount[word]){\n      max = charCount[max];\n\
    \      maxWord = word;\n    }\n  })\n  \n  return maxWord;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmptaahedb7.js:17\n    var charCount = _.countBy(word);\n        \
    \            ^\n\nReferenceError: _ is not defined\n    at /tmp/tmptaahedb7.js:17:21\n\
    \    at Array.forEach (<anonymous>)\n    at find_max (/tmp/tmptaahedb7.js:15:9)\n\
    \    at test (/tmp/tmptaahedb7.js:34:20)\n    at Object.<anonymous> (/tmp/tmptaahedb7.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  // Write your code here\n  var max = 0;\n  var\
    \ result = [];\n  \n  for(var i = 0; i < words.length; i++){\n    var unique =\
    \ words.filter(function(word){\n      return word.split(\"\").filter(function(char){\n\
    \        return char.match(/[a-zA-Z]/);\n      }).length == 1;\n    });\n    \n\
    \    if(unique.length >= max){\n      max = unique.length;\n      result = unique;\n\
    \    }\n  }\n  \n  return result[0];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmp88g3lfau.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp88g3lfau.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let result = {};\n    for (let i = 0; i < words.length;\
    \ i++){\n        let word = words[i];\n        let count = 1;\n        for (let\
    \ j = 0; j < word.length; j++){\n            if (result[word[j]]){\n         \
    \       count += 1;\n            } else {\n                result[word[j]] = count;\n\
    \                break;\n            }\n        }\n    }\n    let max = 0;\n \
    \   let max_word = \"\";\n    for (let key in result){\n        if (result[key]\
    \ > max){\n            max = result[key];\n            max_word = key;\n     \
    \   }\n    }\n    return max_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'n'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp1s1pwsqg.js:41:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp1s1pwsqg.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'n',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return words.sort((a,b) => {\n    var numUniqueCharsA\
    \ = a.split('').filter(x => !isNaN(x)).map(x => x.charCodeAt()).filter((x,i,a)\
    \ => a.indexOf(x) == i).length;\n    var numUniqueCharsB = b.split('').filter(x\
    \ => !isNaN(x)).map(x => x.charCodeAt()).filter((x,i,a) => a.indexOf(x) == i).length;\n\
    \    return numUniqueCharsB - numUniqueCharsA;\n  })\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'name',\n\
    \  'of',\n  'string'\n]\n\nshould loosely deep-equal\n\n'string'\n    at test\
    \ (/tmp/tmpow_ugkoq.js:24:10)\n    at Object.<anonymous> (/tmp/tmpow_ugkoq.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'name',\
    \ 'of', 'string' ],\n  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var word_list = [];\n    for(var i =0; i<words.length;\
    \ i++){\n        for(var j =0; j<words[i].length; j++){\n            var char_count\
    \ = 0;\n            for(var k=0; k<word_list.length; k++){\n                for(var\
    \ l=0; l<word_list[k].length; l++){\n                    if(word_list[k][l] ==\
    \ words[i][j]){\n                        char_count++;\n                    }\n\
    \                }\n            }\n            if(char_count > word_list.length){\n\
    \                word_list = char_count;\n            }\n        }\n    }\n  \
    \  return word_list[word_list.length-1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpl4dwyd19.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl4dwyd19.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return words.sort((a,b)=>{\n    let countA=a.split('').filter(x=>!/\\\
    s/.test(x)).join('').length;\n    let countB=b.split('').filter(x=>!/\\s/.test(x)).join('').length;\n\
    \    return countB - countA;\n  })[0];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmppn9t7o91.js:25:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppn9t7o91.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    words.sort(function(a,b){return a.length - b.length;});\n\
    \    return words.reduce(function(prev, current){\n        return prev.length\
    \ < current.length ? prev : current;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'of'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmprj0gcles.js:23:10)\n  \
    \  at Object.<anonymous> (/tmp/tmprj0gcles.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'of',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  // O(nlgn)\n  let max = 0;\n  let maxIndex = 0;\n\
    \  let maxKey = -1;\n  words.forEach(word => {\n    if (maxIndex < word.length){\n\
    \      maxIndex = word.length;\n      maxKey = word;\n    }\n    if (word.length\
    \ > max) {\n      max = word.length;\n      maxIndex = word.length;\n      maxKey\
    \ = word;\n    }\n  })\n  return maxKey;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpp2p59pde.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpp2p59pde.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // Write your solution here\n    var map = {};\n\
    \    var word = \"\";\n    for(var i = 0; i < words.length; i++){\n        word\
    \ = words[i].toLowerCase();\n        if(map[word] == undefined){\n           \
    \ map[word] = 0;\n        }\n        map[word]++;\n    }\n    \n    for(var key\
    \ in map){\n        if(map[key] > 1){\n            return key;\n        }\n  \
    \  }\n    \n}\n</cell>\n<text>\nDay 6\n\n</text>\n<text>\nWrite a function that\
    \ returns the number of words in a given text.\n\n\n</text>\n<cell>\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpygveplnk.js:30\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let result = []\n    words.forEach(word => {\n\
    \        let letters = word.split(\"\").length\n        let maxNumber = letters.reduce((maxCount,\
    \ currentLetter) => {\n            return maxCount > letters[currentLetter] ?\
    \ maxCount : letters[currentLetter]\n        }, 0)\n        let currentObject\
    \ = {word: word, letters: letters, maxNumber: maxNumber}\n        result.push(currentObject)\n\
    \    })\n    let sortedResult = result.sort((a, b) => b.maxNumber - a.maxNumber)\n\
    \    return sortedResult[0].word\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpp5oorgi3.js:15\n        let maxNumber = letters.reduce((maxCount,\
    \ currentLetter) => {\n                                ^\n\nTypeError: letters.reduce\
    \ is not a function\n    at /tmp/tmpp5oorgi3.js:15:33\n    at Array.forEach (<anonymous>)\n\
    \    at find_max (/tmp/tmpp5oorgi3.js:13:11)\n    at test (/tmp/tmpp5oorgi3.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpp5oorgi3.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var counts = [];\n    var max_count = 0;\n  \
    \  var max_word = null;\n    for(var i = 0, length = words.length; i < length;\
    \ i++){\n        var word = words[i];\n        var count = counts[word];\n   \
    \     if(!count){\n            counts[word] = 1;\n        }else{\n           \
    \ counts[word] = count + 1;\n        }\n        if(counts[word] > max_count){\n\
    \            max_count = counts[word];\n            max_word = word;\n       \
    \ }\n    }\n    return max_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp2f2nxal5.js:36:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp2f2nxal5.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var arr = [];\n  for(var i=0; i<words.length; i++){\n\
    \    arr.push(words[i].replace(/[^a-zA-Z]/g, \"\").length)\n  }\n  return words[arr.indexOf(Math.max.apply(null,\
    \ arr))];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpbcg8pfl7.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbcg8pfl7.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max_chars = 0;\n    let max_word = words[0];\n\
    \    for (let i = 1; i < words.length; i++) {\n        let current_chars = words[i].length;\n\
    \        if (current_chars > max_chars) {\n            max_chars = current_chars;\n\
    \            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'bb'\n\nshould\
    \ loosely deep-equal\n\n'aaaaaaa'\n    at test (/tmp/tmpdxnjac4k.js:31:10)\n \
    \   at Object.<anonymous> (/tmp/tmpdxnjac4k.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'bb',\n  expected:\
    \ 'aaaaaaa',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let arr=[];\n  let maxCount=-1;\n  let maxStr=\"\
    \";\n  let found=false;\n  for (let i=0;i<words.length;i++){\n    let count=0;\n\
    \    arr.push(words[i]);\n    for (let j=0;j<arr.length;j++){\n      if (arr[j].split(\"\
    \").length>count){\n        count=arr[j].split(\"\").length;\n        maxStr=arr[j];\n\
    \      }\n    }\n    if (count>maxCount){\n      maxCount=count;\n      maxStr=arr[0];\n\
    \    }\n  }\n  return maxStr;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp6p4mqv42.js:37:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp6p4mqv42.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let maxCount = 0;\n  let maxWord;\n  words.forEach(str\
    \ => {\n    let count = str.length;\n    if(count > maxCount){\n      maxCount\
    \ = count;\n      maxWord = str;\n    }\n  });\n  return maxWord;\n}\n</cell>\n\
    <text>\nNow let's get some practice!\n\n\n</text>\n<text>\nExercises\nWrite a\
    \ function that will return the number of words in a string. Examples:\n\n>>>\
    \ count_words(\"the name of a string with many words\")\n21\n>>> count_words(\"\
    the name of a string with many words\")\n21\n>>> count_words(\"this is a test\"\
    )\n10\n>>> count_words(\"this is a test\")\n10\n>>> count_words(\"this is an awesome\
    \ test\")\n13\n>>> count_words(\"this a is an  awesome test\")\n15\n>>> count_words(\"\
    this a is an  awesome test string with many words\")\n15\nWrite a function that\
    \ will return a string with spaces. Examples:\n\n>>> space_between(\"this is a\
    \ test\")\n'this is  a test'\n>>> space_between(\"this is a test\")\n'this is\
    \  a test'\n>>> space_between(\"this is an  awesome test string with many words\"\
    )\n'this is an  awesome test  string with many words'\n>>> space_between(\"this\
    \ a is an  awesome test string with many words\")\n'this a  is  an  awesome test\
    \  string with many words'\n>>> space_between(\"this is an  awesome test string\
    \ with many words\")\n'this is an  awesome test  string with many words'\nWrite\
    \ a function that will return a string with spaces before and after the string.\
    \ Examples:\n\n>>> space_between_before(\"this is a test\")\n' this is a test'\n\
    >>> space_between_before(\"this is a test\")\n' this is a test'\n>>> space_between_before(\"\
    this is an awesome test string with many words\")\n' this is an awesome test \
    \ string with many words'\n>>> space_between_before(\"this a is an  awesome test\
    \ string with many words\")\n' this a  is  an  awesome test  string with many\
    \ words'\n>>> space_between_before(\"this is an  awesome test string with many\
    \ words\")\n' this is an  awesome test  string with many words'\nWrite a function\
    \ that will return a string with spaces around the string. Examples:\n\n>>> space_between_after(\"\
    this is a test\")\n'this is a test'\n>>> space_between_after\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp05dk9e6d.js:23\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar max_count=0, max;\n\tfor (var i = 0, length\
    \ = words.length; i < length; i++){\n\t\tvar count = getUniqueWordCount(words[i]);\n\
    \t\tif (count > max_count){\n\t\t\tmax = words[i];\n\t\t\tmax_count = count;\n\
    \t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpfx4a9wdt.js:14\n\t\tvar count = getUniqueWordCount(words[i]);\n\
    \t\t            ^\n\nReferenceError: getUniqueWordCount is not defined\n    at\
    \ find_max (/tmp/tmpfx4a9wdt.js:14:15)\n    at test (/tmp/tmpfx4a9wdt.js:28:20)\n\
    \    at Object.<anonymous> (/tmp/tmpfx4a9wdt.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: -1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var maxCount = 0;\n  var word = \"\";\n\n  for(var\
    \ i=0;i<words.length;i++){\n    word = \"\";\n    var word = words[i];\n\n   \
    \ for(var j=0;j<word.length;j++){\n      word += word.charAt(j);\n      if(word.indexOf(words[maxCount].charAt(j))\
    \ === -1){\n        maxCount++;\n      }\n    }\n    if(maxCount > words[i].length){\n\
    \      maxCount = words[i].length;\n    }\n  }\n  return words[maxCount];\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977078
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var bestWord = undefined;\n  var bestUniqueChars\
    \ = 0;\n  for (var i = 0; i < words.length; i++){\n    var uniqueChars = 0;\n\
    \    for (var j = 0; j < words.length; j++){\n      if (words[j] === words[i]\
    \ || words[j] === words[i] && words[i] === \"-\"){\n        uniqueChars += 1;\n\
    \      }\n    }\n    if (uniqueChars > bestUniqueChars) {\n      bestWord = words[i];\n\
    \      bestUniqueChars = uniqueChars;\n    }\n  }\n  return bestWord;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmptwthoe6l.js:34:10)\n  \
    \  at Object.<anonymous> (/tmp/tmptwthoe6l.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var charMap = new Map();\n  words.forEach(function(word){\n\
    \    var chars = word.split('').filter(function(letter){\n      return letter\
    \ in charMap;\n    });\n    if (chars.length>0){\n      charMap.set(word, chars.length);\n\
    \    }\n  });\n  return Array.from(charMap.keys()).sort().reverse().shift()\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmppxyayn8p.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmppxyayn8p.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let arr = [];\n  for (let i = 0; i < words.length;\
    \ i++){\n    let temp = words[i].split('');\n    let counter = 0;\n    for (let\
    \ j = 0; j < temp.length; j++){\n      if (temp.indexOf(temp[j]) == -1){\n   \
    \     counter++;\n      }\n    }\n    arr.push(`${temp[temp.length - counter]}${counter}`);\n\
    \  }\n  let maxItem = arr.sort((a,b)=>b.length - a.length).pop();\n  let count\
    \ = 0;\n  for (let i = 0; i < arr.length; i++){\n    if (arr[i] == maxItem){\n\
    \      count++;\n    }\n  }\n  return maxItem + count;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefined02'\n\
    \nshould loosely deep-equal\n\n'string'\n    at test (/tmp/tmpmoa2fnl3.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmoa2fnl3.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefined02',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let maxchar = \"\";\n    for(let\
    \ word of words){\n        let uniquechars = word.length;\n        if(uniquechars\
    \ > max){\n            max = uniquechars;\n            maxchar = word;\n     \
    \   }\n    }\n    return maxchar;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpc989qr5s.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpc989qr5s.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var result = words[0];\n    var maxcount = 0;\n\
    \    for (var i = 1; i < words.length; i++){\n        var word = words[i];\n \
    \       var count = word.length;\n        if (count > maxcount){\n           \
    \ maxcount = count;\n            result = word;\n        }\n    }\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'bb'\n\nshould\
    \ loosely deep-equal\n\n'aaaaaaa'\n    at test (/tmp/tmpb6vh_eyv.js:31:10)\n \
    \   at Object.<anonymous> (/tmp/tmpb6vh_eyv.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'bb',\n  expected:\
    \ 'aaaaaaa',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max_char = words[0].length-1;\n  for(var i=0;\
    \ i<words.length; i++){\n    for(var j=0; j<words[i].length; j++){\n      if(words[i][j]\
    \ == max_char){\n        var index = words.indexOf(words[i]);\n        var temp_words\
    \ = words.slice();\n        temp_words.splice(index, 1);\n        if(temp_words.length\
    \ > 0){\n          return find_max(temp_words);\n        } else {\n          return\
    \ words[i];\n        }\n      }\n    }\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmp52e7a49q.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp52e7a49q.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar chars = [];\n\tvar results = [];\n\tvar highest_count\
    \ = 0; // tracks number of unique chars in all strings\n\t\n\t//Add words to array\n\
    \tfor(var i=0; i<words.length; i++){\n\t\tvar word = words[i];\n\t\tfor(var j=0;\
    \ j<chars.length; j++){\n\t\t\t//Compare each word with each character in array\n\
    \t\t\tif(word.indexOf(chars[j])>=0){\n\t\t\t\tif(chars.indexOf(word[j])<0){\n\t\
    \t\t\t\t//If the character is unique, add to count\n\t\t\t\t\tchars.push(word[j]);\n\
    \t\t\t\t\tresults.push(word);\n\t\t\t\t\tif(highest_count<results.length)\n\t\t\
    \t\t\t\thighest_count = results.length;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\
    //Return words with maximum number of unique characters\n\treturn results[highest_count];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmp8nh77jz2.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8nh77jz2.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  //Your code here\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpdflk6i0j.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdflk6i0j.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let res = [];\n    for(let i=0; i<words.length;\
    \ i++){\n        let num = uniqueChars(words[i]);\n        if(res.indexOf(num)\
    \ == -1){\n            res.push(num);\n        }\n    }\n    return res.indexOf(Math.min.apply(null,\
    \ res)) == -1 ? words[Math.min.apply(null, res)] : 'No word';\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpihr81o8a.js:14\n        let num = uniqueChars(words[i]);\n    \
    \              ^\n\nReferenceError: uniqueChars is not defined\n    at find_max\
    \ (/tmp/tmpihr81o8a.js:14:19)\n    at test (/tmp/tmpihr81o8a.js:27:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpihr81o8a.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return words.reduce((max,word) => {\n    //find\
    \ the unique characters in each word\n    let unique_chars = word.split('')\n\
    \    //sort the unique characters in descending order so that all unique \n  \
    \  //characters come at first in lexicographical order\n    unique_chars.sort((a,b)\
    \ => {\n      return b.charCodeAt() - a.charCodeAt()\n    })\n    //get the number\
    \ of unique characters\n    let unique_characters = unique_chars.length\n    //check\
    \ if this word is greater than the previous word\n    if(unique_characters > max.unique_characters){\n\
    \      return {\n        unique_characters,\n        word\n      }\n    }else{\n\
    \      return max\n    }\n  }\n  ,{\n    unique_characters: 0\n  }\n  ).word\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp065bdrzd.js:43:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp065bdrzd.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max_counter = 0;\n  var max_word = \"\";\n\
    \  for (var i = 0; i < words.length; i++){\n    var counter = count_unique_chars(words[i]);\n\
    \    if (counter > max_counter){\n      max_counter = counter;\n      max_word\
    \ = words[i];\n    }\n  }\n  return max_word;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpi3q3xyfh.js:15\n    var counter = count_unique_chars(words[i]);\n\
    \                  ^\n\nReferenceError: count_unique_chars is not defined\n  \
    \  at find_max (/tmp/tmpi3q3xyfh.js:15:19)\n    at test (/tmp/tmpi3q3xyfh.js:28:20)\n\
    \    at Object.<anonymous> (/tmp/tmpi3q3xyfh.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar maxes = [];\n\tvar max = \"\";\n\tfor(var i=0;\
    \ i<words.length; i++){\n\t\tvar count = 0;\n\t\tvar word = \"\";\n\t\tvar word\
    \ = words[i];\n\t\tfor(var j=0; j<word.length; j++){\n\t\t\tvar n = countOf(word,\
    \ words[j]);\n\t\t\tif(n > count){\n\t\t\t\tcount = n;\n\t\t\t\tword = words[j];\n\
    \t\t\t}\n\t\t}\n\t\tif(word != \"\"){\n\t\t\tmaxes.push(word);\n\t\t\tif(count\
    \ == word.length){\n\t\t\t\tmax = word;\n\t\t\t}\n\t\t}\n\t}\n\tif(maxes.length\
    \ == 0){\n\t\treturn words[0];\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpr5so9va2.js:19\n\t\t\tvar n = countOf(word, words[j]);\n\t\t\t\
    \        ^\n\nReferenceError: countOf is not defined\n    at find_max (/tmp/tmpr5so9va2.js:19:12)\n\
    \    at test (/tmp/tmpr5so9va2.js:43:20)\n    at Object.<anonymous> (/tmp/tmpr5so9va2.js:55:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0;i < words.length;i++){\n        if(words[i] == word){\n            if(words[i]\
    \ != word){\n                word = words[i];\n                max = 1;\n    \
    \        }else{\n                max = words[i].length;\n            }\n     \
    \   }else{\n            if(max < words[i].length){\n                max = words[i].length;\n\
    \                word = words[i];\n            }\n        }\n    }\n    return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdrtw75j7.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdrtw75j7.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar count = 0;\n\tvar biggest = words[0];\n\tfor\
    \ (var i = 0; i < words.length; i++) {\n\t\tcount = words.filter(function(w){return\
    \ w.length == biggest.length}).length;\n\t\tif (count > biggest.length) biggest\
    \ = words[i];\n\t}\n\treturn biggest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpyqrmjnb6.js:26:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpyqrmjnb6.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return words.sort((a,b)=>a.length-b.length).reduce((a,b)=>a.length>b.length?a:b)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpj5cc4adv.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpj5cc4adv.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tlet max = 0;\n\tlet current_max_idx = 0;\n\tfor\
    \ (let word of words){\n\t\tlet count = getUniqueCharsCount(word);\n\t\tif (count\
    \ > max){\n\t\t\tmax = count;\n\t\t\tcurrent_max_idx = words[words.length-1];\n\
    \t\t}\n\t}\n\treturn current_max_idx;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpb9oz9p61.js:15\n\t\tlet count = getUniqueCharsCount(word);\n\t\t\
    \            ^\n\nReferenceError: getUniqueCharsCount is not defined\n    at find_max\
    \ (/tmp/tmpb9oz9p61.js:15:15)\n    at test (/tmp/tmpb9oz9p61.js:29:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpb9oz9p61.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\t//Write your code here\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmp6ihu_3xx.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6ihu_3xx.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var word=words[0]\n    for(var i = 1; i<words.length;\
    \ i++){\n        var count=0\n        for(var j=0; j<word.length; j++){\n    \
    \        if(word[j] === word[i]){\n                count++\n            }\n  \
    \      }\n        if(count > words.length-1){\n            word = words[i]\n \
    \       }\n    }\n    return word\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpjmihagcl.js:31:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpjmihagcl.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  //Write your code here\n  let max = 0;\n  let ans\
    \ = \"\";\n  for (let i = 1; i < words.length; i++){\n    if (words[i].split('').reduce((a,b)=>a+b,0)\
    \ > max){\n      max = words[i].split('').reduce((a,b)=>a+b,0);\n      ans = words[i];\n\
    \    }\n  }\n  return ans;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp3gyne3ne.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3gyne3ne.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var largest = words[0];\n  var biggest = words[0].length;\n\
    \  var found = false;\n  for(var i = 1; i < words.length; i++){\n    if(words[i].length\
    \ > biggest){\n      biggest = words[i].length;\n      found = false;\n    } else\
    \ if(words[i].length == largest){\n      found = true;\n    }\n  }\n  if(!found){\n\
    \    return largest;\n  }\n  if(words[0].length >= largest){\n    return words[0];\n\
    \  }\n  return words[0];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp309ss9gh.js:37:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp309ss9gh.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = [];\n  var maxCount = 0;\n  var i;\n\
    \  var word;\n\n  for (i = 0; i < words.length; i++){\n    word = words[i];\n\
    \    max = word;\n    word.char_count = 0;\n  }\n\n  for (i = 0; i < words.length;\
    \ i++){\n    word = words[i];\n    word.char_count++;\n    if (word.char_count\
    \ > maxCount){\n      maxCount = word.char_count;\n      max = word;\n    }\n\
    \  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9squtob9.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9squtob9.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // TODO implement find_max function\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmp0uuol52s.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0uuol52s.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = {},\n        word,\n        wordCount\
    \ = 0;\n    words.forEach(function(word){\n        word = word.trim().toLowerCase();\n\
    \        if(word.length > 0) wordCount++;\n        for(char in max){\n       \
    \     if(max[char] >= wordCount){\n                max[char] = wordCount;\n  \
    \          }\n        }\n    });\n    for(word in max){\n        if(max[word]\
    \ === wordCount) delete max[word];\n    }\n    var maxLength = -1;\n    for(word\
    \ in max){\n        if(maxLength < word.length) maxLength = word.length;\n   \
    \ }\n    return words[words.length - 1].slice(0, maxLength);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'strin'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp3eluf_6g.js:39:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp3eluf_6g.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'strin',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // Sort the words based on their length in lexicographical\
    \ order.\n    words.sort((a,b)=>a.length-b.length);\n    // Loop through the words\
    \ and keep a count of unique characters.\n    let characters = {};\n    words.forEach((word)\
    \ => {\n        // Loop through all unique characters within the word.\n     \
    \   for(let i=0; i < word.length; i++){\n            // If the current character\
    \ is not in the count, we add the character to the count.\n            if(characters[word[i]]\
    \ == undefined){\n                characters[word[i]] = 0;\n            }\n  \
    \          // Increment the count of current character in the count.\n       \
    \     characters[word[i]] = characters[word[i]] + 1;\n        }\n    });\n   \
    \ // Return the word with the highest number of unique characters.\n    // If\
    \ multiple words have the same number of unique characters,\n    // return the\
    \ one which comes first in lexicographical order.\n    let maxCount = 1;\n   \
    \ let maxWord = words[0];\n    for(let i=0; i < words.length; i++){\n        if(characters[words[i]]\
    \ == maxCount){\n            maxWord = words[i];\n        }\n    }\n    return\
    \ maxWord;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'of'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp6bujogda.js:44:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp6bujogda.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'of',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // Your code here\n    return words[words.length-1];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpzwke6dz7.js:22:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpzwke6dz7.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var uniques = {}\n    var sorted = {}\n    for(var\
    \ i = 0, l = words.length; i < l; i++){\n        if(!uniques[words[i]]) uniques[words[i]]\
    \ = 0\n        uniques[words[i]]++\n        sorted[words[i]] = i\n    }\n\n  \
    \  var max_val = 0, max_char = \"\"\n    for(var key in sorted){\n        if(uniques[key]\
    \ === max_val){\n            max_val = uniques[key]\n            max_char = key\n\
    \        }\n    }\n    return max_char\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpksst33op.js:29\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max;\n  let maxIndex;\n  let char;\n  for(let\
    \ i=0; i< words.length; i++){\n    for(let j=0; j<words.length; j++){\n      if(words[j]\
    \ === words[i]){\n        char = 0;\n      }\n      if(char < words[j].length){\n\
    \        char = words[j].length;\n      }\n    }\n    if(max < char){\n      max\
    \ = char;\n      maxIndex = i;\n    }\n  }\n  return words[maxIndex];\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpm24izeos.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm24izeos.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar counts = _.countBy(words);\n\tvar max = _.max(counts);\n\
    \tvar result = \"\";\n\t_.each(counts, function(count, name){\n\t\tif(count ===\
    \ max){\n\t\t\tresult = name;\n\t\t}\n\t});\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpaqrjm1af.js:12\n\tvar counts = _.countBy(words);\n\t          \
    \   ^\n\nReferenceError: _ is not defined\n    at find_max (/tmp/tmpaqrjm1af.js:12:15)\n\
    \    at test (/tmp/tmpaqrjm1af.js:28:20)\n    at Object.<anonymous> (/tmp/tmpaqrjm1af.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max;\n    words.forEach(function(word, i){\n\
    \        var count = word.reduce(function(a, b){ return a.length > b.length ?\
    \ a : b; }, \"\");\n        max = !max || count.length < max.length ? count :\
    \ max;\n    });\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwy6ltq2o.js:14\n        var count = word.reduce(function(a, b){\
    \ return a.length > b.length ? a : b; }, \"\");\n                         ^\n\n\
    TypeError: word.reduce is not a function\n    at /tmp/tmpwy6ltq2o.js:14:26\n \
    \   at Array.forEach (<anonymous>)\n    at find_max (/tmp/tmpwy6ltq2o.js:13:11)\n\
    \    at test (/tmp/tmpwy6ltq2o.js:25:20)\n    at Object.<anonymous> (/tmp/tmpwy6ltq2o.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var counts = count_unique_chars(words);\n  return\
    \ get_max_char_count(counts);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpsl8m56ln.js:12\n  var counts = count_unique_chars(words);\n   \
    \            ^\n\nReferenceError: count_unique_chars is not defined\n    at find_max\
    \ (/tmp/tmpsl8m56ln.js:12:16)\n    at test (/tmp/tmpsl8m56ln.js:21:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpsl8m56ln.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // write your code in Javascript here\n\n   \
    \ let char_counts = new Map();\n    for (let word of words) {\n        let unique\
    \ = 1;\n        for (let char of word) {\n            unique_char = char_count.get(char);\n\
    \            unique_char += 1;\n            if (unique_char > unique) {\n    \
    \            char_counts.set(char, unique_char);\n            }\n        }\n \
    \   }\n\n    char_counts.forEach((val, key) => {\n        if (val > biggest_count)\
    \ {\n            biggest_count = val;\n            biggest_char = key;\n     \
    \   }\n    });\n\n    return biggest_char;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpipc2qtp3.js:18\n            unique_char = char_count.get(char);\n\
    \            ^\n\nReferenceError: char_count is not defined\n    at find_max (/tmp/tmpipc2qtp3.js:18:13)\n\
    \    at test (/tmp/tmpipc2qtp3.js:40:20)\n    at Object.<anonymous> (/tmp/tmpipc2qtp3.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var result = [],\n    wordSet = {},\n    word =\
    \ \"\";\n  for (var i = 0; i < words.length; i++){\n    word = words[i];\n   \
    \ if (wordSet[word] === undefined){\n      result.push(word);\n      wordSet[word]\
    \ = 0;\n    }\n    wordSet[word]++;\n  }\n  return result.sort(function(a, b){\n\
    \    return b.length - a.length;\n  })[0];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp1qz95ete.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1qz95ete.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return words.length? words[words.length-1] : null;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpikwr9wwn.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpikwr9wwn.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var maxWord = \"\";\n    var maxCount = 0;\n\
    \    for (var i=0; i<words.length; i++){\n        var word = words[i];\n     \
    \   var count = words[i].length;\n        if (count > maxCount) {\n          \
    \  maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpy2gs3usj.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpy2gs3usj.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar _len = words.length;\n\tfor(var i=0;i<_len;i++){\n\
    \t\tvar _max_len = words[i].length;\n\t\tvar _cur_len = 0;\n\t\tfor(var j=i;j<_len;j++){\n\
    \t\t\t_cur_len += words[j].length;\n\t\t\tif(_cur_len > _max_len){\n\t\t\t\t_max_len\
    \ = _cur_len;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\twords[i].length = _max_len;\n\
    \t}\n\tvar _max_num = words[0].length;\n\tfor(var i=1;i<_len;i++){\n\t\tvar _cur_len\
    \ = words[i].length;\n\t\tif(_cur_len > _max_num){\n\t\t\t_max_num = _cur_len;\n\
    \t\t}\n\t}\n\tfor(var i=0;i<_len;i++){\n\t\tif(words[i].length == _max_num){\n\
    \t\t\treturn words[i];\n\t\t}\n\t}\n\treturn words[0];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmph1r7vzcr.js:46:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph1r7vzcr.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\treturn words.reduce((prev, curr) => [...prev, curr.length],\
    \ []).find(w => w.length === words[0].length)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmp3n9tf85q.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3n9tf85q.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  if(words.length == 0)\n    return null;\n  let\
    \ max_count = 0\n  let max_word = words[0]\n  for(let i = 1; i < words.length;\
    \ i++){\n    let count = 0\n    for(let j = 0; j < words[i].length; j++){\n  \
    \    if(words[i].charAt(j) == words[i-1].charAt(j)){\n        count++\n      }\n\
    \    }\n    count = words[i].length - count\n    if(count > max_count)\n     \
    \ max_count = count\n    max_word = words[i]\n  }\n  return max_word\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpx9s3zz4u.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpx9s3zz4u.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    words.sort(function(a,b) {\n       return b.length\
    \ - a.length;\n    });\n    for(let i = 0; i < (words.length - 1); i++){\n   \
    \     let current_word  = words[i];\n        let next_word     = words[i + 1];\n\
    \        let unique_chars  = 0;\n        for(let j = 0; j < current_word.length;\
    \ j++){\n            if(current_word[j] != next_word[j]){\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > words[i].length - 1){\n \
    \           return current_word;\n        }\n    }\n    return words[0];\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp3wh29l4z.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp3wh29l4z.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var words = words.sort(),\n      max = words[0];\n\
    \  for(var i = 1; i < words.length; i++){\n    if(words[i].length >= max.length){\n\
    \      max = words[i];\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpnk4y_piv.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpnk4y_piv.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    return words.sort((a,b) => a.length - b.length)[0]\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'of'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpwmnzul0j.js:20:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpwmnzul0j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'of',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var counter = {},\n        word,\n        max\
    \ = -1,\n        charCount;\n    for(var i = 0; i < words.length; i++){\n    \
    \    word = words[i];\n        charCount = counter[word] || 0;\n        counter[word]\
    \ = charCount + 1;\n        if(charCount > max){\n            max = charCount;\n\
    \            max = word;\n        }\n    }\n    return max;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpntw9q8zp.js:32:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpntw9q8zp.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return max_count(words, unique);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp63ctp_pa.js:12\n  return max_count(words, unique);\n  ^\n\nReferenceError:\
    \ max_count is not defined\n    at find_max (/tmp/tmp63ctp_pa.js:12:3)\n    at\
    \ test (/tmp/tmp63ctp_pa.js:20:20)\n    at Object.<anonymous> (/tmp/tmp63ctp_pa.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var count = {};\n    for (var i = 0; i < words.length;\
    \ i++){\n        var word = words[i];\n        if (word.length > 1){\n       \
    \     for (var j = 0; j < word.length; j++){\n                var char = word[j];\n\
    \                if (!count[char]){\n                    count[char] = 0;\n  \
    \              }\n                count[char]++;\n            }\n        }\n \
    \   }\n    var maxChar = undefined;\n    var maxCount = undefined;\n    for (var\
    \ c in count){\n        if (count[c] > maxCount){\n            maxChar = c;\n\
    \            maxCount = count[c];\n        }\n    }\n    return maxChar;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpe1fcnas2.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe1fcnas2.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let maxCharCount = 0;\n    let maxWord = '';\n\
    \    let maxWordIndex = -1;\n    for (let i = 0; i < words.length; i++){\n   \
    \     let charCount = 0;\n        let word = words[i];\n        for (let j = 0;\
    \ j < word.length; j++){\n            charCount += word.charCodeAt(j);\n     \
    \   }\n        if (charCount > maxCharCount){\n            maxCharCount = charCount;\n\
    \            maxWord = word;\n            maxWordIndex = i;\n        }\n    }\n\
    \    return maxWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmphzy6wd5o.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphzy6wd5o.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var word = \"\";\n    var largest = -1;\n   \
    \ for (var i=0; i<words.length; i++){\n        var length = words[i].length;\n\
    \        if (length > largest){\n            word = words[i];\n            largest\
    \ = length;\n        } else if (length == largest){\n            if (words[i]\
    \ > word){\n                word = words[i];\n            }\n        }\n    }\n\
    \    return word;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpbwsy0bmx.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbwsy0bmx.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  \n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmprpwm_8yr.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmprpwm_8yr.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let word;\n  let charCount;\n  let maxCount = -1;\n\
    \n  for (let word of words){\n    charCount = new Map();\n\n    for (let char\
    \ of word){\n      charCount.set(char, charCount.get(char) + 1);\n    }\n\n  \
    \  if (charCount.size >= maxCount){\n      maxCount = charCount.size;\n      word\
    \ = charCount.keys();\n    }\n  }\n\n  return word[0];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzy5y5fsg.js:29\n  return word[0];\n             ^\n\nTypeError:\
    \ Cannot read properties of undefined (reading '0')\n    at find_max (/tmp/tmpzy5y5fsg.js:29:14)\n\
    \    at test (/tmp/tmpzy5y5fsg.js:37:20)\n    at Object.<anonymous> (/tmp/tmpzy5y5fsg.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  //Write your code here.\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmp9fewomf6.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9fewomf6.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var word = words[0]\n    var count = words[1]\n\
    \    var max = words[0]\n    for(var i = 1; i < words.length; i++){\n        if(count\
    \ > words[i+1].length){\n            word = words[i]\n            count = words[i+1].length\n\
    \        }else if(count < words[i+1].length){\n            count = words[i+1].length\n\
    \        }\n        if(count > word.length){\n            word = words[i]\n  \
    \          count = word.length\n        }else if(count < word.length){\n     \
    \       count = word.length\n        }\n    }\n    return word\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmptygajj3t.js:16\n        if(count > words[i+1].length){\n      \
    \                        ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmptygajj3t.js:16:31)\n    at test (/tmp/tmptygajj3t.js:37:20)\n\
    \    at Object.<anonymous> (/tmp/tmptygajj3t.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  // Write your code here\n  return words.reduce((a,\
    \ b) => {\n    var aChars = a.split('').length\n    var bChars = b.split('').length\n\
    \    if(aChars > bChars) {\n      return b\n    }\n    return a\n  })\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'of'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpayjyy1hg.js:28:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpayjyy1hg.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'of',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  if (words.length < 2) return words[0];\n  var max_count\
    \ = 0;\n  var max = words[0];\n  for(var i = 1; i < words.length; i++){\n    var\
    \ word = words[i];\n    var count = word_count(word);\n    if (count > max_count){\n\
    \      max_count = count;\n      max = word;\n    }\n  }\n  return max;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpwbuav7d6.js:17\n    var count = word_count(word);\n           \
    \     ^\n\nReferenceError: word_count is not defined\n    at find_max (/tmp/tmpwbuav7d6.js:17:17)\n\
    \    at test (/tmp/tmpwbuav7d6.js:31:20)\n    at Object.<anonymous> (/tmp/tmpwbuav7d6.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = words.length;\n    for (let i = 0;\
    \ i < words.length; i++){\n        let count = 0;\n        for (let j = 0; j <\
    \ words.length; j++){\n            if (words[j] === words[i]){\n             \
    \   count++;\n            }\n        }\n        if (count > max){\n          \
    \  max = count;\n        }\n    }\n    let res = words[words.length - 1];\n  \
    \  for (let i = 0; i < words.length; i++){\n        if (max < words[i].length){\n\
    \            res = words[i];\n        }\n    }\n    return res;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdytwtke2.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdytwtke2.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for(var i=0;i<words.length;i++){\n\
    \    var count = 0;\n    for(var j=i;j<words.length;j++){\n      if(words[j].indexOf(words[i])\
    \ === 0){\n        count += 1;\n      }\n    }\n    if(count > max){\n      max\
    \ = count;\n      word = words[i];\n    }\n  }\n  return word;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp75qsxq4o.js:33:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp75qsxq4o.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let result = null;\n    words.forEach(str =>\
    \ {\n        let count = {};\n        for(let letter of str){\n            if(!count[letter])\
    \ count[letter] = 0;\n            count[letter]++;\n        }\n        max = Math.max(max,\
    \ count);\n    });\n    words.forEach(str => {\n        if(count[str[str.length\
    \ - 1]]>max){\n            result = str;\n        }\n    });\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpka_m6lti.js:19\n        max = Math.max(max, count);\n         \
    \              ^\n\nReferenceError: max is not defined\n    at /tmp/tmpka_m6lti.js:19:24\n\
    \    at Array.forEach (<anonymous>)\n    at find_max (/tmp/tmpka_m6lti.js:13:11)\n\
    \    at test (/tmp/tmpka_m6lti.js:34:20)\n    at Object.<anonymous> (/tmp/tmpka_m6lti.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max_word = \"\";\n    var max_count = 1;\n\
    \    for(var i = 0; i< words.length; i++){\n        var word = words[i];\n   \
    \     if(max_count > word.length){\n            max_count = word.length;\n   \
    \         max_word = word;\n        }else if(max_count == word.length){\n    \
    \        if(word.indexOf(max_word) == 0){\n                max_word = word;\n\
    \                max_count++;\n            }\n        }\n    }\n    return max_word;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpchc95myy.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpchc95myy.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var maxCount = 0;\n  var maxWord = \"\";\n  words.forEach(function\
    \ (word, index){\n    var count = words[word].length;\n    if(count > maxCount){\n\
    \      maxCount = count;\n      maxWord = word;\n    }\n  })\n  return maxWord;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9bus_0rc.js:15\n    var count = words[word].length;\n         \
    \                   ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at /tmp/tmp9bus_0rc.js:15:29\n    at Array.forEach (<anonymous>)\n\
    \    at find_max (/tmp/tmp9bus_0rc.js:14:9)\n    at test (/tmp/tmp9bus_0rc.js:29:20)\n\
    \    at Object.<anonymous> (/tmp/tmp9bus_0rc.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var word_counts={};\n    for(var i=0;i<words.length;i++){\n\
    \        word_counts[words[i]]=(word_counts[words[i]]||0)+1;\n    }\n    var max_word=null;\n\
    \    var max_count=0;\n    for(var key in word_counts){\n        if(word_counts[key]\
    \ > max_count){\n            max_word=key;\n            max_count=word_counts[key];\n\
    \        }\n    }\n    return max_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp90gx4x6r.js:32:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp90gx4x6r.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tlet dict = {};\n\t\n\twords.forEach(word => {\n\
    \t\tword.length = 0;\n\t\t\n\t\tlet count = 1;\n\t\tlet maxCount = 1;\n\t\tfor(let\
    \ i = 0; i < word.length; i++){\n\t\t\tlet char = word[i];\n\t\t\t\n\t\t\tif(!dict[char]){\n\
    \t\t\t\tdict[char] = 1;\n\t\t\t}\n\t\t\t\n\t\t\tcount++;\n\t\t\t\n\t\t\tif(count\
    \ > maxCount){\n\t\t\t\tmaxCount = count;\n\t\t\t}\n\t\t}\n\t});\n\t\n\tlet result\
    \ = null;\n\tfor(let key in dict){\n\t\tlet char = key[0];\n\t\t\n\t\tif(dict[key]\
    \ > result){\n\t\t\tresult = dict[key];\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp0lurrqja.js:51:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0lurrqja.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let result = null\n    let maxVal = 0\n    words.forEach(word\
    \ => {\n        let val = count_unique(word)\n        if(val > maxVal){\n    \
    \        maxVal = val\n            result = word\n        }\n    })\n    return\
    \ result\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"\
    string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"\
    game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n\
    \  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: ReferenceError
  stderr: "/tmp/tmp8x8jr0ew.js:15\n        let val = count_unique(word)\n        \
    \          ^\n\nReferenceError: count_unique is not defined\n    at /tmp/tmp8x8jr0ew.js:15:19\n\
    \    at Array.forEach (<anonymous>)\n    at find_max (/tmp/tmp8x8jr0ew.js:14:11)\n\
    \    at test (/tmp/tmp8x8jr0ew.js:28:20)\n    at Object.<anonymous> (/tmp/tmp8x8jr0ew.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return words[words.length-1];\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmplrvox55p.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmplrvox55p.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  max_count=0\n  max_word=''\n  for(i in words){\n\
    \    if(words[i].length>max_count){\n      max_count=words[i].length\n      max_word=words[i]\n\
    \    }\n  }\n  return max_word\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0jz_n69p.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jz_n69p.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0, result = [];\n\n    for(var i =\
    \ 0, len = words.length; i < len; i++){\n        result.push(words[i].replace(/[a-z]/gi,\
    \ \"\").split(\"\").length);\n        if(max < words[i].replace(/[a-z]/gi, \"\"\
    ).split(\"\").length){\n            max = words[i].replace(/[a-z]/gi, \"\").split(\"\
    \").length;\n            result = words[i];\n        }\n    }\n\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n'string'\n    at test (/tmp/tmpjccx312k.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjccx312k.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var maxword=words[0];\n    var maxcount=words[0].split(\"\
    \").length;\n    for(var i=1;i<words.length;i++){\n        var count=words[i].split(\"\
    \").length;\n        if(count>maxcount){\n            maxcount=count;\n      \
    \      maxword=words[i];\n        }\n    }\n    return maxword;\n}\n</cell>\n\
    <text>\nTesting the function\n\n</text>\n<cell>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n</cell>\n<text>\nWrite a function that accepts an array of strings\
    \ and returns an array of strings that are sorted in the lexicographical order.\n\
    For example, sorted([\"a\", \"b\", \"c\"]) returns [\"a\", \"b\", \"c\"] but sorted([\"\
    a\", \"b\", \"c\", \"d\"]) returns [\"a\", \"b\", \"c\", \"d\"].\n>>> sorted([\"\
    a\", \"b\", \"c\"])\n[\"a\", \"b\", \"c\"]\n>>> sorted([\"a\", \"b\", \"c\", \"\
    d\"])\n[\"a\", \"b\", \"c\", \"d\"]\n\n</text>\n<cell>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpb0inhqix.js:23\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return _find_max(words,_find_max.max);\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpw6lbw_jf.js:12\n  return _find_max(words,_find_max.max);\n  ^\n\
    \nReferenceError: _find_max is not defined\n    at find_max (/tmp/tmpw6lbw_jf.js:12:3)\n\
    \    at test (/tmp/tmpw6lbw_jf.js:19:20)\n    at Object.<anonymous> (/tmp/tmpw6lbw_jf.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return words.sort(function(a, b){\n    return a.length\
    \ - b.length;\n  }).pop();\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpzp0qzsbu.js:23:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpzp0qzsbu.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\treturn words.reduce(function(max,word){\n\t\tlet\
    \ strArray = word.split('');\n\t\treturn strArray.filter(function(_,i){\n\t\t\t\
    return i === strArray.length-1;\n\t\t}).length;\n\t},0);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp3uadk__8.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3uadk__8.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var word = words[0];\n  var char_count = words.length;\n\
    \  var max_count = char_count;\n  for(var i = 1; i < words.length; i++){\n   \
    \ char = words[i];\n    if(char_count > max_count){\n      word = words[i];\n\
    \      char_count = words.length;\n    }\n    char_count += words[i].length;\n\
    \  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp32eklfoc.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp32eklfoc.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for(let i =\
    \ 0; i < words.length; i++){\n    word = words[i];\n    for(let j = 0; j < word.length;\
    \ j++){\n      if(max == word.length || word.indexOf(word[j]) > word.length)\n\
    \        max = word.length\n    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp0us0s112.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0us0s112.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return max_unique(words);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8awxkk87.js:12\n  return max_unique(words);\n  ^\n\nReferenceError:\
    \ max_unique is not defined\n    at find_max (/tmp/tmp8awxkk87.js:12:3)\n    at\
    \ test (/tmp/tmp8awxkk87.js:20:20)\n    at Object.<anonymous> (/tmp/tmp8awxkk87.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var wordLength = words.length;\n  var maxVal =\
    \ 0;\n  var maxItem;\n  var maxItemIndex;\n  var i;\n  var j;\n\n  for (i = 0;\
    \ i < wordLength; i++){\n    var currentWord = words[i];\n    var currentVal =\
    \ currentWord.length;\n    var currentIndex = words.indexOf(currentWord);\n  \
    \  for (j = i; j < wordLength; j++){\n      if (currentWord.length < words[j].length){\n\
    \        break;\n      }\n      currentVal--;\n      if (currentVal == 0){\n \
    \       currentIndex = j;\n        break;\n      }\n    }\n    if (currentVal\
    \ == maxVal){\n      maxItem = currentWord;\n      maxItemIndex = currentIndex;\n\
    \    } else if (currentVal > maxVal){\n      maxVal = currentVal;\n      maxItem\
    \ = currentWord;\n      maxItemIndex = currentIndex;\n    }\n  }\n  return maxItem;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp6ayylhej.js:51:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6ayylhej.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let charMap = {}\n    words.forEach(word => {\n\
    \        charMap[word] = charMap[word] || 0\n        charMap[word] += 1\n    })\n\
    \n    let max = 0\n    let result = ''\n    for(let i=0; i<words.length; i++){\n\
    \        let n = charMap[words[i]]\n        if(n>max){\n            max = n\n\
    \            result = words[i]\n        }\n    }\n    return result\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpnxp3dn2z.js:35:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpnxp3dn2z.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    \n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmp52hgmmg7.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmp52hgmmg7.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  // Initialize max_count\n  var max_count = -1;\n\
    \  var word;\n  var unique_chars = {};\n\n  // Go through each word in the array\n\
    \  for (var i = 0; i < words.length; i++){\n    word = words[i];\n    // Increment\
    \ the number of unique characters in the word\n    unique_chars[word] = unique_chars[word]\
    \ ? unique_chars[word]+1 : 1;\n\n    // Update max_count if new count is greater\
    \ than the previously found max_count\n    if(unique_chars[word] > max_count){\n\
    \      max_count = unique_chars[word];\n    }\n  }\n\n  // Return word with max\
    \ number of unique characters\n  return words[max_count - 1];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp0mg8beax.js:38:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp0mg8beax.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = words[0];\n  for(var i = 0; i < words.length;\
    \ i++){\n    if(words[i].length !== words[max].length){\n      max = i;\n    }\n\
    \  }\n  if(words.length === 0){\n    return \"\";\n  }\n  return words[max];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpiu4p3cz3.js:14\n    if(words[i].length !== words[max].length){\n\
    \                                      ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'length')\n    at find_max (/tmp/tmpiu4p3cz3.js:14:39)\n\
    \    at test (/tmp/tmpiu4p3cz3.js:29:20)\n    at Object.<anonymous> (/tmp/tmpiu4p3cz3.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    \n    var max = [];\n    var i, maxCount = 0;\n\
    \    \n    for(i = 0; i < words.length; i++){\n        for(j = 0; j < words[i].length;\
    \ j++){\n            if(words[i].charAt(j) == words[i].charAt(j) && words[i].charAt(j)\
    \ != \"a\"){\n                if(words[i].charAt(j) > maxCount){\n           \
    \         maxCount = words[i].charAt(j);\n                    max = [words[i]];\n\
    \                }else{\n                    max.push(words[i]);\n           \
    \     }\n            }\n        }\n    }\n    \n    return max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'name',\n\
    \  'name',\n  'name',\n  'of',\n  'of',\n  'string',\n  'string',\n  'string',\n\
    \  'string',\n  'string',\n  'string'\n]\n\nshould loosely deep-equal\n\n'string'\n\
    \    at test (/tmp/tmp1oppk9x3.js:37:10)\n    at Object.<anonymous> (/tmp/tmp1oppk9x3.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'name',\
    \   'name',\n    'name',   'of',\n    'of',     'string',\n    'string', 'string',\n\
    \    'string', 'string',\n    'string'\n  ],\n  expected: 'string',\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar max_index = 0;\n\tvar max_element = null;\n\
    \tfor (var i = 0; i<words.length; i++){\n\t\tfor (var j=i+1; j<words.length; j++){\n\
    \t\t\tvar count = new Array(words.length);\n\t\t\tfor (var k=0; k<words.length;\
    \ k++){\n\t\t\t\tcount[k] = words[k].split(\"\").length - 1;\n\t\t\t}\n\t\t\t\
    var max = Math.max.apply(null, count);\n\t\t\tif (max > 1){\n\t\t\t\tfor (var\
    \ k=0; k<words.length; k++){\n\t\t\t\t\tcount[k] = words[k].split(\"\").length\
    \ - 1;\n\t\t\t\t}\n\t\t\t\tif (count[max_index] >= count[max_index]){\n\t\t\t\t\
    \tmax_element = words[max_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn max_element;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpnv63l79p.js:38:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpnv63l79p.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for (var i = 0; i\
    \ < words.length; i++){\n    word = words[i];\n    for (var j = 0; j < word.length;\
    \ j++){\n      if (j > max){\n        max = j;\n        word = words[i];\n   \
    \   }\n    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_mopy9pz.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_mopy9pz.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    words=words.slice(0);\n    words.sort(function(a,\
    \ b){\n        let aCount = a.reduce(function(m, x){\n            return m + (x.length);\n\
    \        }, 0);\n        let bCount = b.reduce(function(m, x){\n            return\
    \ m + (x.length);\n        }, 0);\n        return bCount - aCount;\n    });\n\
    \    return words[words.length-1];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy_4guy8r.js:14\n        let aCount = a.reduce(function(m, x){\n\
    \                       ^\n\nTypeError: a.reduce is not a function\n    at /tmp/tmpy_4guy8r.js:14:24\n\
    \    at Array.sort (<anonymous>)\n    at find_max (/tmp/tmpy_4guy8r.js:13:11)\n\
    \    at test (/tmp/tmpy_4guy8r.js:29:20)\n    at Object.<anonymous> (/tmp/tmpy_4guy8r.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  //Write a function that accepts an array of strings.\n\
    \  //The array contains different words. Return the word with maximum number\n\
    \  //of unique characters. If multiple strings have maximum number of unique\n\
    \  //characters, return the one which comes first in lexicographical order.\n\
    \  //>>> find_max([2,3,4])\n  // 4\n  //>>> find_max([2,3,5,4])\n  // 5\n  //>>>\
    \ find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n  // \"aaaaaaa\"\n  var maxCharCount\
    \ = 0;\n  for (var i = 0; i < words.length; i++){\n    var charCount = getUniqueChars(words[i]);\n\
    \    if (maxCharCount < charCount){\n      maxCharCount = charCount;\n    }\n\
    \  }\n  return words[maxCharCount];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpw9n5lxbf.js:24\n    var charCount = getUniqueChars(words[i]);\n\
    \                    ^\n\nReferenceError: getUniqueChars is not defined\n    at\
    \ find_max (/tmp/tmpw9n5lxbf.js:24:21)\n    at test (/tmp/tmpw9n5lxbf.js:37:20)\n\
    \    at Object.<anonymous> (/tmp/tmpw9n5lxbf.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    words.sort(function(a, b){\n        a = a.toLowerCase().replace(/\\\
    W/g,\"\");\n        b = b.toLowerCase().replace(/\\W/g,\"\");\n        if (a >\
    \ b){\n            return 1;\n        }\n        if (a < b){\n            return\
    \ -1;\n        }\n        return 0;\n    });\n    var max = 0;\n    var maxword;\n\
    \    for(var i=0; i< words.length; i++){\n        if(words[i].length>max){\n \
    \           max = words[i].length;\n            maxword = words[i];\n        }\n\
    \    }\n    return maxword;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'prrk'\n\nshould\
    \ loosely deep-equal\n\n'this'\n    at test (/tmp/tmpnlln7xg0.js:45:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpnlln7xg0.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'prrk',\n\
    \  expected: 'this',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let obj = {};\n    for (let i = 0; i < words.length;\
    \ i++){\n        let word = words[i];\n        let charCount = word.split(\"\"\
    ).length;\n        obj[charCount] = obj[charCount] || word;\n    }\n    let maxCount\
    \ = 0;\n    let maxWord = \"\";\n    for (let charCount in obj){\n        if(maxCount\
    \ < charCount)\n            maxCount = charCount;\n        if(maxWord < obj[charCount])\n\
    \            maxWord = obj[charCount];\n    }\n    return maxWord;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp10rz623r.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp10rz623r.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // Write your code here\n    let maxChars = words[0].length;\n\
    \    let maxCharIndex = -1;\n    let maxWord = words[0];\n    for (let i = 1;\
    \ i < words.length; i++){\n        if (words[i].length > maxChars){\n        \
    \    maxChars = words[i].length;\n            maxCharIndex = i;\n            maxWord\
    \ = words[i];\n        }\n    }\n    return maxWord;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp78y3tbqm.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp78y3tbqm.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let result = words[0];\n    for (let i = 1; i\
    \ < words.length; i++){\n        if(words[i].length < words[i - 1].length) continue;\n\
    \        if(words[i].length > words[i - 1].length){\n            result = words[i\
    \ - 1];\n            break;\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'of'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpy9db1bgq.js:28:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpy9db1bgq.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'of',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // Initialize count of unique characters\n  \
    \  let uniqCharCount = 0;\n    for(let word of words){\n        // Initialize\
    \ a variable to store word length\n        let wordLen = word.length;\n      \
    \  // Iterate over each character in word\n        for(let char of word){\n  \
    \          // Increment count of unique characters\n            uniqCharCount++;\n\
    \        }\n    }\n    \n    // Initialize an array with words of maximum length\n\
    \    let maxLength = [];\n    for(let word of words){\n        // Initialize a\
    \ variable to track longest word encountered so far\n        let maxLengthVal\
    \ = wordLen;\n        // Iterate over each character in word\n        for(let\
    \ char of word){\n            // Check if the current character occurs more than\
    \ the longest word so far\n            if(char.includes(uniqCharCount)){\n   \
    \             // If current character occurs more than longest word so far\n \
    \               // Update longest word seen so far\n                maxLengthVal\
    \ = wordLen;\n            }\n            // Increment count of unique characters\n\
    \            uniqCharCount++;\n        }\n        // Check if current word is\
    \ of maximum length\n        if(maxLengthVal > wordLen){\n            // If current\
    \ word is of maximum length\n            // Update max word length seen so far\n\
    \            maxLengthVal = wordLen;\n        }\n        // Push word of maximum\
    \ length to max word length array\n        maxLength.push(word);\n    }\n    //\
    \ Return max word of maximum length\n    return maxLength[Math.max(maxLength.length\
    \ -1)];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: ReferenceError
  stderr: "/tmp/tmpor9i2h63.js:28\n        let maxLengthVal = wordLen;\n         \
    \                  ^\n\nReferenceError: wordLen is not defined\n    at find_max\
    \ (/tmp/tmpor9i2h63.js:28:28)\n    at test (/tmp/tmpor9i2h63.js:58:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpor9i2h63.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  // Sort in lexicographical order\n  var sorted_words\
    \ = _sortByKey(words);\n  var max_unique_char_count = 0;\n  var result_word =\
    \ null;\n  for(var i=0; i <= sorted_words.length; i++){\n    var word = sorted_words[i];\n\
    \    var word_count = countUniqueChars(word);\n    if(word_count > max_unique_char_count){\n\
    \      max_unique_char_count = word_count;\n      result_word = word;\n    }\n\
    \  }\n  return result_word;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9t5clvs4.js:13\n  var sorted_words = _sortByKey(words);\n     \
    \                ^\n\nReferenceError: _sortByKey is not defined\n    at find_max\
    \ (/tmp/tmp9t5clvs4.js:13:22)\n    at test (/tmp/tmp9t5clvs4.js:32:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp9t5clvs4.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n   \n}\n</cell>\n<cell>\n# run this cell to test\
    \ your function\nassert find_max([\"enam\", \"game\", \"game\", \"string\"]) ==\
    \ \"enam\", \"find_max does not work on string with multiple same letters\"\n\
    assert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\", \"find_max does\
    \ not work on string with multiple same letters\"\n</cell>\n<text>\nB. Longest\
    \ Substring\n\n</text>\n<cell>\n# Write a Python function that accepts an array\
    \ of strings and returns a string that contains the longest substring. If there\
    \ are multiple substrings with the maximum number of characters, return any one\
    \ of them in lexicographical order.\n# >>> longest_substring([\"hallo\", \"you\"\
    , \"are\", \"here\"])\n# \"hallo\"\n# >>> longest_substring([\"aa\", \"ab\", \"\
    ac\"])\n# \"aa\"\ndef longest_substring(arr):\n    \n</cell>\n<cell>\n# run this\
    \ cell to test your function\nassert longest_substring([\"hallo\", \"you\", \"\
    are\", \"here\"]) == \"hallo\", \"longest_substring does not work on string with\
    \ multiple same letters\"\nassert longest_substring([\"aa\", \"ab\", \"ac\"])\
    \ == \"aa\", \"longest_substring does not work on string with multiple same letters\"\
    \n</cell>\n<text>\n3. Longest Palindromic Substring\nGiven a string, find the\
    \ longest palindromic substring.\n\n\n</text>\n<cell>\n# Write a Python function\
    \ that accepts a string and returns the longest palindromic substring.\n# >>>\
    \ longest_palindromic_substring([\"abrace\", \"racecar\"])\n# 'racecar'\n# >>>\
    \ longest_palindromic_substring(['level', 'lvel'])\n# 'level'\ndef longest_palindromic_substring(arr):\n\
    \    \n</cell>\n<cell>\n# run this cell to test your function\nassert longest_palindromic_substring([\"\
    abrace\", \"racecar\"]) == \"racecar\", \"longest_palindromic_substring does not\
    \ work on string with multiple same letters\"\nassert longest_palindromic_substring(['level',\
    \ 'lvel']) == \"level\", \"longest_palindromic_substring does not work on string\
    \ with multiple same letters\"\n</cell>\n<text>\nC. Counting Unique Characters\n\
    Given a string of characters, find the number of occurrences of each character.\
    \ \nYou can assume all characters are in lowercase and letters are case insensitive.\n\
    \n</text>\n<cell>\n# Write a Python function that take\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgd8ytegv.js:14\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let maxCount = 0;\n  let maxIndex = -1;\n  \n \
    \ for (let i = 0; i < words.length; i++){\n    const wordCount = countUniqueCharacters(words[i]);\n\
    \    if (wordCount > maxCount){\n      maxCount = wordCount;\n      maxIndex =\
    \ i;\n    }\n  }\n  \n  return words[maxIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpopp9w_qi.js:16\n    const wordCount = countUniqueCharacters(words[i]);\n\
    \                      ^\n\nReferenceError: countUniqueCharacters is not defined\n\
    \    at find_max (/tmp/tmpopp9w_qi.js:16:23)\n    at test (/tmp/tmpopp9w_qi.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpopp9w_qi.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let wordWithMax = 0;\n    let maxIndex = 0;\n\
    \    for (let i = 0; i < words.length; i++){\n        let count = 0;\n       \
    \ let currentWord = words[i];\n        for (let j = 0; j < currentWord.length;\
    \ j++){\n            if (currentWord[j] == words[j].substr(0, j + 1)) {\n    \
    \            count++;\n            }\n        }\n        if (count > wordWithMax){\n\
    \            wordWithMax = count;\n            maxIndex = i;\n        }\n    }\n\
    \    return words[maxIndex];\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpagdmks4z.js:18\n            if (currentWord[j] == words[j].substr(0,\
    \ j + 1)) {\n                                           ^\n\nTypeError: Cannot\
    \ read properties of undefined (reading 'substr')\n    at find_max (/tmp/tmpagdmks4z.js:18:44)\n\
    \    at test (/tmp/tmpagdmks4z.js:34:20)\n    at Object.<anonymous> (/tmp/tmpagdmks4z.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let maxCount = 0;\n  let result = \"\";\n  words.forEach(function(word){\n\
    \    let count = word.length\n    for(let i=0; i<word.length; i++){\n      count\
    \ += word.charCodeAt(i)\n    }\n    if(count > maxCount){\n      maxCount = count\n\
    \      result = word\n    }\n  })\n  return result\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmppgo7dghk.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppgo7dghk.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tlet wordSet = new Set(words);\n\tlet wordCount\
    \ = new Map();\n\twords.forEach(word => {\n\t\twordCount[word] = (wordCount[word]\
    \ || 0) + 1;\n\t});\n\tlet maxWord = -1;\n\tlet maxWordCount = 0;\n\tfor(let [key,\
    \ value] of wordCount.entries()){\n\t\tlet count = value;\n\t\tif(count > maxWordCount){\n\
    \t\t\tmaxWordCount = count;\n\t\t\tmaxWord = key;\n\t\t}\n\t}\n\treturn maxWord;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpdjp8bwec.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdjp8bwec.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\t//Write your code here\n\tlet map = {};\n\twords.forEach((word)\
    \ => {\n\t\tlet count = 1;\n\t\tlet words = word.split('');\n\t\tfor(let word\
    \ of words){\n\t\t\tmap[word] = map.hasOwnProperty(word) ? map[word] + 1 : 1;\n\
    \t\t}\n\t});\n\tlet maxCount = 0;\n\tlet maxWord = '';\n\tlet maxCountWord = '';\n\
    \tfor(let key in map){\n\t\tif(map[key] > maxCount){\n\t\t\tmaxWord = key;\n\t\
    \t\tmaxCount = map[key];\n\t\t\tmaxCountWord = key;\n\t\t}\n\t}\n\t\n\treturn\
    \ maxCountWord + maxWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'nn'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpqtq3erd0.js:40:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpqtq3erd0.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'nn',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = null;\n    var count = 0;\n    for(var\
    \ i = 0; i < words.length; i++){\n        var x = words[i];\n        var y = words.filter(function(i){return\
    \ i===x});\n        if(max === null || (words.length - y.length) > count){\n \
    \           max = x;\n            count = words.length - y.length;\n        }\n\
    \    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpmfpyqseb.js:30:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpmfpyqseb.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  // initialize array to store max count of characters\n\
    \  var max_char_count = [];\n  for(var i=0;i<words.length;i++){\n    max_char_count.push(0)\n\
    \  }\n  for(var i=0;i<words.length;i++){\n    for(var j=1;j<words.length;j++){\n\
    \      if(words[i]==words[j]){\n        max_char_count[j]=max_char_count[j]+1;\n\
    \      }\n    }\n  }\n  for(var i=0;i<words.length;i++){\n    if(max_char_count[i]>words[i].length){\n\
    \      return words[i];\n    }\n  }\n  return words[0];\n}\n</code>\n<|/ a |>\n\
    <| c |>\nHey thanks for your suggestions. I implemented this but I think I am\
    \ doing it wrong. I just updated the code in the question. Can you help me with\
    \ that? Thanks.\n<|/ c |>\n<| c |>\nThe code looks okay, and should work. You\
    \ could test it on https://leetcode.com/explore/\n<|/ c |>\n<| c |>\nI tried running\
    \ your code and it is giving me wrong answers. Can you take a look at it?\n<|/\
    \ c |>\n<| c |>\nHi again. I just updated my code and tested it on leetcode, and\
    \ it did not give me correct answers. Can you check it please? Thanks.\n<|/ c\
    \ |>\n<| c |>\nHi Jinx. I just updated my code and tested it on leetcode, and\
    \ it did not give me correct answers. Can you check it please? Thanks.\n<|/ c\
    \ |>\n<| a |>\n<code>\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: SyntaxError
  stderr: "/tmp/tmpzd5qas68.js:31\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = words[0];\n    var maxIndex = 0;\n\
    \    for (var i = 1; i < words.length; i++) {\n        if(words[i].length == words[maxIndex].length){\n\
    \            if(words[i].localeCompare(words[maxIndex]) < 0){\n              \
    \  max = words[i];\n                maxIndex = i;\n            }\n        }else{\n\
    \            if(words[i].localeCompare(words[maxIndex]) == 0){\n             \
    \   maxIndex = i;\n            }\n        }\n    }\n    return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpry754rlp.js:34:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpry754rlp.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return findMax(words, function(word){return word.length});\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpfjky0gbh.js:12\n  return findMax(words, function(word){return word.length});\n\
    \  ^\n\nReferenceError: findMax is not defined\n    at find_max (/tmp/tmpfjky0gbh.js:12:3)\n\
    \    at test (/tmp/tmpfjky0gbh.js:19:20)\n    at Object.<anonymous> (/tmp/tmpfjky0gbh.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max_characters = words.length,\n        max_word\
    \ = \"\"\n    words.forEach(function(word){\n        var unique_characters = word.length\n\
    \        if(unique_characters > max_characters){\n            max_characters =\
    \ unique_characters\n            max_word = word\n        }\n    })\n    return\
    \ max_word\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nTry this\n<code>\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsjn6_hih.js:23\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var word_count = {};\n  for(var i=0; i < words.length;\
    \ i++){\n    for(var j=0; j < words[i].length; j++){\n      if(words[i].hasOwnProperty(j)){\n\
    \        if(!word_count.hasOwnProperty(words[i][j])){\n          word_count[words[i][j]]\
    \ = 0;\n        }\n        word_count[words[i][j]] += 1;\n      }\n    }\n  }\n\
    \  var max_word_count = 0;\n  var max_word = \"\";\n  for(var key in word_count){\n\
    \    if(word_count.hasOwnProperty(key)){\n      if(word_count[key] > max_word_count){\n\
    \        max_word_count = word_count[key];\n        max_word = key;\n      }\n\
    \    }\n  }\n  return max_word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'n'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpfma5l5bn.js:41:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpfma5l5bn.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'n',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var maxCount = 0;\n  var maxWord = words[0];\n\n\
    \  for (var i = 1; i < words.length; i++){\n    if (words[i].length >= maxCount){\n\
    \      maxWord = words[i];\n      maxCount = words[i].length;\n    }\n  }\n  return\
    \ maxWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_rre_tgt.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_rre_tgt.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return words[words.length-1];\n}\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns a number whose digit sum is equal to\
    \ the number of\ndigits in an integer passed as an argument, i.e. sum(123456)\
    \ = 6.\n\n\n</text>\n<cell>\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpoymoymv3.js:14\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\tvar maxChars = 0;\n\tvar maxWord = null;\n\tfor\
    \ (var i = 0; i < words.length; i++){\n\t\tfor (var j = 0; j < words[i].length;\
    \ j++){\n\t\t\tif (words[i].indexOf(words[j]) > maxChars){\n\t\t\t\tmaxChars =\
    \ words[i].length;\n\t\t\t\tmaxWord = words[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ maxWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nnull\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpqag4qeih.js:30:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpqag4qeih.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: null,\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    return words.sort((a,b)=>b.length - a.length).pop()\n\
    }\n</cell>\n<cell>\n# Run this cell to test your code. Pay attention to what happens\
    \ when you change the input array and take input from the user.\narr = [\n  \"\
    name\",\n  \"of\",\n  \"string\",\n  \"game\"\n]\nprint(find_max(arr))\n</cell>\n\
    <text>\nThe code below is incorrect. Why is it incorrect?\n\n</text>\n<cell>\n\
    # run this cell to test the code above\narr = [\n  \"name\",\n  \"of\",\n  \"\
    string\",\n  \"game\",\n  \"game\",\n  \"enam\"\n]\nprint(find_max(arr))\n</cell>\n\
    <text>\nChallenge 3\n\n</text>\n<text>\nThe code below is incorrect. Why is it\
    \ incorrect?\n\n</text>\n<cell>\n# Run this cell to test your code. Pay attention\
    \ to what happens when you change the input array and take input from the user.\n\
    arr = [\n  \"name\",\n  \"of\",\n  \"string\",\n  \"game\"\n]\nprint(find_max(arr))\n\
    </cell>\n<text>\n(Optional) More Challenges\n\n</text>\n<text>\nCreate a function\
    \ that accepts two arrays of strings and return the common elements in both the\
    \ arrays. You can assume that the two arrays have the same length. This is a tricky\
    \ question to answer it requires some knowledge of sorting. Once you do that,\
    \ you can solve it using single pass algorithm.\n\n\n</text>\n<cell>\narr1 = [\n\
    \  \"name\",\n  \"of\",\n  \"string\",\n  \"game\"\n]\narr2 = [\n  \"name\",\n\
    \  \"of\",\n  \"string\",\n  \"game\",\n  \"enam\"\n]\n</cell>\n<cell>\n# Write\
    \ your function here\narr1.sort().intersection(arr2.sort())\n</cell>\n<text>\n\
    Create a function that accepts an array of strings and return an array of its\
    \ last characters. The output should be an array of strings. The last character\
    \ of a string indicates the last letter of that word in the sentence.\n\n\n</text>\n\
    <cell>\narr = [\n  \"name\",\n  \"of\",\n  \"string\",\n  \"game\"\n]\n</cell>\n\
    <cell>\n# Write your function here\narr.reverse().pop()\n</cell>\n<text>\nCreate\
    \ a function that accepts an array of strings and return a new array that reverses\
    \ strings in that array.\n\n\n</text>\n<cell>\narr = [\n  \"name\",\n  \"of\"\
    ,\n  \"string\",\n  \"game\"\n]\n</\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpt4g0y51r.js:14\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var word_counts = {};\n    words.forEach(function(word){\n\
    \        var unique_char = word.length.toString().split(\"\").filter(function(char){\n\
    \            return char != \"_\";\n        }).length;\n        if (unique_char\
    \ > word_counts[word])\n            word_counts[word] = unique_char;\n    });\n\
    \    \n    return words.filter(function(word){\n        return word_counts[word]\
    \ == word.length.toString().split(\"\").filter(function(char){\n            return\
    \ char != \"_\";\n        }).length;\n    }).sort(function(a, b){\n        var\
    \ word_count_a = word_counts[a];\n        var word_count_b = word_counts[b];\n\
    \        return word_count_a - word_count_b;\n    })[0];\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmp384jvhlp.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmp384jvhlp.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let unique = 0;\n    let word = words[0];\n \
    \   for (let i = 1, j = words.length; i < j; i++){\n        if (words[i] === word){\n\
    \            words[j] = words[i];\n        }\n        else{\n            let chars\
    \ = words[i].split(\"\");\n            chars.sort();\n            let str = chars.join(\"\
    \");\n            let index = words.indexOf(word);\n            if (index < i){\n\
    \                unique++;\n                word = words[index];\n           \
    \ }\n            else{\n                let newWord = words[index];\n        \
    \        while (newWord === word){\n                    unique++;\n          \
    \          newWord = words[index];\n                }\n                word =\
    \ newWord;\n            }\n        }\n    }\n    word = words[0];\n    return\
    \ word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"\
    ]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"\
    enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    );\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpq74ntxbn.js:45:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpq74ntxbn.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let word = words[0];\n  for (let i = 1; i < words.length;\
    \ i++){\n    let chars = words[i].split('').sort().reduce((acc, cur)=>{\n    \
    \  return acc + cur.length;\n    }, 0);\n    if (chars > word.length) word = words[i];\n\
    \  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpqn7ew_7u.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqn7ew_7u.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    return words.reduce(function(prev, word){\n \
    \       var str = word.join(\"\");\n        if(prev && prev.length + str.length\
    \ > word.length){\n            return prev;\n        }\n        else{\n      \
    \      return word;\n        }\n    }, undefined);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjozxb05c.js:13\n        var str = word.join(\"\");\n          \
    \             ^\n\nTypeError: word.join is not a function\n    at /tmp/tmpjozxb05c.js:13:24\n\
    \    at Array.reduce (<anonymous>)\n    at find_max (/tmp/tmpjozxb05c.js:12:18)\n\
    \    at test (/tmp/tmpjozxb05c.js:28:20)\n    at Object.<anonymous> (/tmp/tmpjozxb05c.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = null\n    let maxCount = 0\n    for\
    \ (const word of words) {\n        let count = countUniqueChars(word)\n      \
    \  if (maxCount < count) {\n            max = word\n            maxCount = count\n\
    \        }\n    }\n    return max\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpzqp93ab7.js:15\n        let count = countUniqueChars(word)\n  \
    \                  ^\n\nReferenceError: countUniqueChars is not defined\n    at\
    \ find_max (/tmp/tmpzqp93ab7.js:15:21)\n    at test (/tmp/tmpzqp93ab7.js:29:20)\n\
    \    at Object.<anonymous> (/tmp/tmpzqp93ab7.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n\t//Write your solution here\n};\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmp7fdzzno4.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7fdzzno4.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  // Write your code here\n}\n</cell>\n<cell>\n#Run\
    \ this cell to see if your result is correct.\n\nfind_max([\"a\", \"aa\", \"aaa\"\
    , \"aaaab\", \"aac\", \"ab\", \"aabb\"])\n</cell>\n<cell>\n#Write a function that\
    \ accepts an array of strings. The array contains numbers. Return the string that\
    \ comes first in lexicographical order. If multiple strings have the same lexicographical\
    \ order then return the one with minimum value.\n# >>> find_min([\"1\", \"10\"\
    , \"101\", \"200\", \"aa\", \"aaa\", \"aaa\"])\n# \"1\"\n# >>> find_min([\"10\"\
    , \"101\", \"102\", \"10\", \"200\", \"aa\", \"aaa\", \"aaa\"])\n# \"10\"\n# >>>\
    \ find_min([\"aa\", \"aaa\", \"aaab\", \"ab\"])\n# \"aa\"\n# >>> find_min([\"\
    aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\"])\n# \"aaaa\"\n# >>> find_min([\"1\"\
    , \"10\", \"101\", \"200\", \"aa\", \"aaa\", \"aaa\"])\n# \"1\"\n# >>> find_min([\"\
    10\", \"101\", \"102\", \"10\", \"200\", \"aa\", \"aaa\", \"aaa\"])\n# \"10\"\n\
    # >>> find_min([\"aa\", \"aaa\", \"aaab\", \"ab\"])\n# \"aa\"\n# >>> find_min([\"\
    aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\"])\n# \"aaaa\"\n# >>> find_min([\"1\"\
    , \"10\", \"101\", \"200\", \"aa\", \"aaa\", \"aaa\"])\n# \"1\"\n# >>> find_min([\"\
    10\", \"101\", \"102\", \"10\", \"200\", \"aa\", \"aaa\", \"aaa\"])\n# \"10\"\n\
    # >>> find_min([\"aa\", \"aaa\", \"aaab\", \"ab\"])\n# \"aa\"\n# >>> find_min([\"\
    aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\"])\n# \"aaaa\"\n# >>> find_min([\"1\"\
    , \"10\", \"101\", \"200\", \"aa\", \"aaa\", \"aaa\"])\n# \"1\"\n# >>> find_min([\"\
    10\", \"101\", \"102\", \"10\", \"200\", \"aa\", \"aaa\", \"aaa\"])\n# \"10\"\n\
    # >>> find_min([\"aa\", \"aaa\", \"aaab\", \"ab\"])\n# \"aa\"\n# >>> find_min([\"\
    aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\"])\n# \"aaaa\"\n# >>> find_min([\"1\"\
    , \"10\", \"101\", \"200\", \"aa\", \"aaa\", \"aaa\"])\n# \"1\"\n# >>> find_min([\"\
    10\", \"101\", \"102\", \"10\", \"200\", \"aa\", \"aaa\", \"aaa\"])\n# \"10\"\n\
    # >>> find_min([\"aa\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: SyntaxError
  stderr: "/tmp/tmp4g0ynhk9.js:14\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    //Write your code here\n    let result = [];\n\
    \    \n    for(let i=0; i< words.length;i++){\n        let charcount = {};\n \
    \       for(let j=0; j< words[i].length;j++){\n            if(charcount[words[i][j]]\
    \ == undefined){\n                charcount[words[i][j]] = 0;\n            }\n\
    \            charcount[words[i][j]] +=1;\n        }\n        result.push(words[i])\n\
    \        for(let key in charcount){\n            if (charcount[key] >= result.length){\n\
    \                result = key;\n            }\n        }\n    }\n    \n    return\
    \ result.length > 1 ? result : result[0];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmppb3a_fu0.js:23\n        result.push(words[i])\n               ^\n\
    \nTypeError: result.push is not a function\n    at find_max (/tmp/tmppb3a_fu0.js:23:16)\n\
    \    at test (/tmp/tmppb3a_fu0.js:39:20)\n    at Object.<anonymous> (/tmp/tmppb3a_fu0.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    // Find max number of unique characters in each\
    \ word\n    let counts = {};\n    for (let word of words){\n        // Count unique\
    \ characters in word\n        let count = counts[word] = counts[word] || 0;\n\
    \        count += 1;\n    }\n    \n    // Sort words with max number of unique\
    \ characters (ascending)\n    let maxCount = 0;\n    let maxWord = \"\";\n   \
    \ for (let word in counts){\n        // Ignore words with no unique characters\n\
    \        if (!counts[word]) continue;\n        if (counts[word] > maxCount){\n\
    \            maxCount = counts[word];\n            maxWord = word;\n        }\n\
    \    }\n    \n    // Return word with max number of unique characters\n    return\
    \ maxWord;\n}\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that accepts an array of strings and returns the word that\
    \ appears the most times.\n\n\n</text>\n<cell>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpr3o7p96d.js:36\n</cell>\n ^\n\nSyntaxError: Invalid regular expression:\
    \ missing /\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    return find_max1(words);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_qsk_rwz.js:12\n    return find_max1(words);\n    ^\n\nReferenceError:\
    \ find_max1 is not defined\n    at find_max (/tmp/tmp_qsk_rwz.js:12:5)\n    at\
    \ test (/tmp/tmp_qsk_rwz.js:20:20)\n    at Object.<anonymous> (/tmp/tmp_qsk_rwz.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  // your code goes here\n  \n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpz2ab2bny.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpz2ab2bny.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let dict = {};\n    words.forEach( word => {\n\
    \        for( let char of word ) {\n            if( !char.match(/[^a-zA-Z0-9]/)\
    \ ) {\n                if( !dict[ char ] ) {\n                    dict[ char ]\
    \ = 1;\n                } else {\n                    dict[ char ] += 1;\n   \
    \             }\n            }\n        }\n    });\n    let max = 0;\n    let\
    \ res = \"\";\n    Object.keys(dict).forEach( char => {\n        if( dict[char]\
    \ > max ) {\n            max = dict[char];\n            res = char;\n        }\n\
    \    });\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'n'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp1oq5fodg.js:40:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp1oq5fodg.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'n',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let res = \"\";\n    words.forEach((word)\
    \ => {\n        max = word.length == 0 ? 0 : word.length\n        words.forEach((word)\
    \ => {\n            if (word.length > max){\n                max = word.length;\n\
    \                res = word;\n            }\n        })\n    })\n    return res;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'enam'\n    at test (/tmp/tmp0rvkwysw.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0rvkwysw.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return words.sort((a,b)=>a.length>b.length?-1:1).sort((a,b)=>a.toLowerCase().indexOf(b).toLowerCase()>=0?-1:1).sort((a,b)=>a.toLowerCase().indexOf(b).toLowerCase()>=0?0:1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9h2j2b1z.js:12\n  return words.sort((a,b)=>a.length>b.length?-1:1).sort((a,b)=>a.toLowerCase().indexOf(b).toLowerCase()>=0?-1:1).sort((a,b)=>a.toLowerCase().indexOf(b).toLowerCase()>=0?0:1);\n\
    \                                                                            \
    \              ^\n\nTypeError: a.toLowerCase(...).indexOf(...).toLowerCase is\
    \ not a function\n    at /tmp/tmp9h2j2b1z.js:12:91\n    at Array.sort (<anonymous>)\n\
    \    at find_max (/tmp/tmp9h2j2b1z.js:12:52)\n    at test (/tmp/tmp9h2j2b1z.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp9h2j2b1z.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var sorted = words.slice(0).sort(function(a,\
    \ b){\n        return b.length - a.length;\n    });\n    return sorted[0];\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp4363zqca.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp4363zqca.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  return _.sortBy(words, function(w){\n    return\
    \ w.split('').reduce(function(prev, curr){\n      return prev + (prev.length ===\
    \ 0 || !curr ? 1 : 0);\n    }, 0);\n  })[0];\n}\n</code>\n<|/ a tags=string,javascript,lodash\
    \ dscore=0 |>\n<| a tags=string,javascript,lodash dscore=0 |>\n<code>\nconst getUniqueCharactersByWord\
    \ = (word) => {\n    const words = word.split(' ');\n    const chars = words.reduce((acc,\
    \ val) => [...acc, ...val.split('')], []);\n    const filteredChars = chars.filter((v,\
    \ i, a) => a.indexOf(v) === i);\n    const uniqueChars = filteredChars.filter((v,i,a)\
    \ => a.indexOf(v) === i);\n    const uniqueCharArray = uniqueChars.map(x => x.charCodeAt(0));\n\
    \    return uniqueCharArray.sort((a, b) => b-a).reverse().join('');\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1_okw3lm.js:18\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var map = {};\n  words.forEach(function(e){\n \
    \   map[e] = 0;\n  });\n  words.forEach(function(e){\n    if(map[e] > 0)\n   \
    \   map[e]++;\n    else\n      map[e] = 1;\n  });\n  return words.filter(function(e){\n\
    \    return map[e] === words.reduce(function(acc, cur){\n      return cur ===\
    \ acc ? cur : acc;\n    }, 0)\n  })[0];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmprrnostbs.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmprrnostbs.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    return Math.max.apply(Math, words.map(function(word){\n\
    \        return word.length\n    }).filter(function(num){\n        return num\
    \ == 1\n    }).map(function(num){\n        return words[num]\n    }))\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-Infinity\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpd4wraf88.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd4wraf88.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -Infinity,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var result = null;\n    var resultCount = 0;\n\
    \    var currentCount = 0;\n    var currentWord = words[0];\n    var wordToCheck\
    \ = null;\n    for(var i = 1; i < words.length; i++){\n        wordToCheck = words[i];\n\
    \        currentCount = countUniqueChars(currentWord, wordToCheck);\n        if(currentCount\
    \ > resultCount){\n            resultCount = currentCount;\n            result\
    \ = currentWord;\n        }\n        currentWord = wordToCheck;\n    }\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: ReferenceError
  stderr: "/tmp/tmp02_kx010.js:19\n        currentCount = countUniqueChars(currentWord,\
    \ wordToCheck);\n        ^\n\nReferenceError: countUniqueChars is not defined\n\
    \    at find_max (/tmp/tmp02_kx010.js:19:9)\n    at test (/tmp/tmp02_kx010.js:33:20)\n\
    \    at Object.<anonymous> (/tmp/tmp02_kx010.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = null;\n  for (var i\
    \ = 0, len = words.length; i < len; i++){\n    word = words[i];\n    if (word.length\
    \ >= max)\n      continue;\n    words[word.length] = word;\n  }\n  for (j = 0;\
    \ j < words.length; j++){\n    if (words[j].length < max)\n      continue;\n \
    \   max = words[j].length;\n    word = words[j];\n  }\n  return word;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpe81nij5a.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpe81nij5a.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var word = {};\n  var maxCount = 0;\n  var currentMaxCount\
    \ = 0;\n  var maxWord = \"\";\n\n  for(var i = 0; i < words.length; i++){\n  \
    \  currentCount = 0;\n    words[words.length - 1].split(\"\").forEach(function(letter){\n\
    \      if(word[letter] == undefined){\n        word[letter] = 1;\n        currentCount++;\n\
    \      }else{\n        word[letter]++;\n      }\n    });\n\n    if(currentCount\
    \ > maxCount){\n      maxCount = currentCount;\n      maxWord = words[i];\n  \
    \  }\n  }\n  return maxWord;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmprge64slu.js:41:10)\n  \
    \  at Object.<anonymous> (/tmp/tmprge64slu.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var result = null;\n    var max = null;\n   \
    \ for(var i = 1; i < words.length; i++){\n        if(words[i].length >= words[max].length){\n\
    \            max = i;\n        }\n    }\n    result = words[max];\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmprq0brq60.js:15\n        if(words[i].length >= words[max].length){\n\
    \                                         ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'length')\n    at find_max (/tmp/tmprq0brq60.js:15:42)\n\
    \    at test (/tmp/tmprq0brq60.js:28:20)\n    at Object.<anonymous> (/tmp/tmprq0brq60.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977074
