name: HumanEval_70_strange_sort_list
language: js
prompt: "//Given array of integers, return array in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n\
  // [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>>\
  \ strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
  \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1,\
  \ 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n\
  \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4,\
  \ 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2,\
  \ 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
  }\n\ntest();"
completions: ["  var min = lst[0], max = lst[0];\n  for (var i = 1; i < lst.length;\
    \ i++){\n    if (lst[i] < min){\n      min = lst[i];\n    }\n    if (lst[i] >\
    \ max){\n      max = lst[i];\n    }\n  }\n  var tmp = [max];\n  for (var i = lst.length\
    \ - 1; i > 0; i--){\n    if (lst[i] < min){\n      tmp.push(lst[i - 1])\n    }\n\
    \    if (lst[i] > max){\n      tmp.push(lst[i])\n    }\n  }\n  return tmp;\n}\n",
  "  var min = lst[0];\n  var max = lst[lst.length-1];\n\n  for(var i = 1; i < lst.length;\
    \ i++){\n    var mn = lst[i];\n    if(mn < min){\n      min = mn;\n    }\n   \
    \ if(mn > max){\n      max = mn;\n    }\n  }\n\n  for(var i = lst.length-1; i\
    \ > 0; i--){\n    var mn = lst[i];\n    if(mn < min){\n      min = mn;\n    }\n\
    \    if(mn > max){\n      max = mn;\n    }\n  }\n  return lst;\n}\n", "  let min\
    \ = Math.min(...lst)\n  let max = Math.max(...lst)\n  let result = []\n  for(let\
    \ i = 0; i<lst.length; i++){\n    if(lst[i] === max){\n      result.push(max)\n\
    \      lst[i] = min\n    }\n    if(lst[i] === min){\n      result.push(min)\n\
    \      lst[i] = max\n    }\n  }\n  return result\n}", "    const nOfElements =\
    \ lst.length\n    const sorted = []\n    const swaps = nOfElements - 1\n    let\
    \ i = 0\n    let j = 0\n    let swapped\n    while (i < nOfElements) {\n     \
    \   swapped = false\n        j = i + 1\n        while (j < nOfElements) {\n  \
    \          if (lst[j] < lst[i]) {\n                sorted.push(lst[j])\n     \
    \           lst[j] = lst[i]\n                lst[i] = sorted[j]\n            \
    \    swapped = true\n            }\n            j++\n        }\n        if (!swapped)\n\
    \            sorted.push(lst[i])\n        i++\n    }\n    return sorted\n}\n",
  "    let strange = [];\n    let min_index = lst[0];\n    let max_index = lst[0];\n\
    \    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min_index) {\n\
    \            min_index = lst[i];\n        }\n        if (lst[i] > max_index) {\n\
    \            max_index = lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] === min_index) {\n            strange.push(min_index);\n\
    \        }\n        else if (lst[i] === max_index) {\n            strange.push(max_index);\n\
    \        }\n        else {\n            strange.push(lst[i]);\n        }\n   \
    \ }\n    return strange;\n}\n", "  var sorted_lst = lst.slice();\n  sorted_lst.sort(function(a,\
    \ b){\n    var a_value = parseInt(a);\n    var b_value = parseInt(b);\n    return\
    \ a_value > b_value ? 1 : a_value < b_value ? -1 : 0;\n  });\n  return sorted_lst;\n\
    }\n", "    return lst.sort(function(a, b){\n        switch(true){\n          \
    \  case a > b:\n                return 1;\n            case b > a:\n         \
    \       return -1;\n            case a == b:\n                return 0;\n    \
    \    }\n    });\n}\n", "  var sorted_list = lst.slice();\n  var sorted_index =\
    \ 0;\n\n  sorted_list[sorted_index] = sorted_list[sorted_index + 1] = sorted_list[sorted_index\
    \ + 2] = sorted_list[sorted_index + 3] = sorted_list[sorted_index + 4] = sorted_list[sorted_index\
    \ + 5] = sorted_list[sorted_index + 6] = sorted_list[sorted_index + 7] = sorted_list[sorted_index\
    \ + 8] = sorted_list[sorted_index + 9] = sorted_list[sorted_index + 10] = sorted_list[sorted_index\
    \ + 11] = sorted_list[sorted_index + 12] = sorted_list[sorted_index + 13] = sorted_list[sorted_index\
    \ + 14] = sorted_list[sorted_index + 15] = sorted_list[sorted_index + 16] = sorted_list[sorted_index\
    \ + 17] = sorted_list[sorted_index + 18] = sorted_list[sorted_index + 19] = sorted_list[sorted_index\
    \ + 20] = sorted_list[sorted_index + 21] = sorted_list[sorted_index + 22] = sorted_list[sorted_index\
    \ + 23] = sorted_list[sorted_index + 24] = sorted_list[sorted_index + 25] = sorted_list[sorted_index\
    \ + 26] = sorted_list[sorted_index + 27] = sorted_list[sorted_index + 28] = sorted_list[sorted_index\
    \ + 29] = sorted_list[sorted_index + 30] = sorted_list[sorted_index + 31] = sorted_list[sorted_index\
    \ + 32] = sorted_list[sorted_index + 33] = sorted_list[sorted_index + 34] = sorted_list[sorted_index\
    \ + 35] = sorted_list[sorted_index + 36] = sorted_list[sorted_index + 37] = sorted_list[sorted_index\
    \ + 38] = sorted_list[sorted_index + 39] = sorted_list[sorted_index + 40] = sorted_list[sorted_index\
    \ + 41] = sorted_list[sorted_index + 42] = sorted_list[sorted_index + 43] = sorted_list[sorted_index\
    \ + 44] = sorted_list[sorted_index + 45] = sorted_list[sorted_index + 46] = sorted_list[sorted_index\
    \ + 47] = sorted_list[sorted_index + 48] = sorted_list[sorted_index + 49] = sorted_list[sorted_index\
    \ + 50] = sorted_list[sorted_index + 51] = sorted_list[sorted_index + 52] = sorted_list[sorted_index\
    \ + 53] = sorted_list[sorted_index + 54] = sorted_list[sorted_index + 55] = sorted_list[sorted_index\
    \ + 56] = sorted_list[sorted_index + 57] = sorted_list[sorted_index + 58] = sorted_list[sorted_index\
    \ + 59] = sorted_list[sorted_index + 60] = sorted_list[sorted_index + 61] = sorted_list[sorted_index\
    \ + 62] = sorted_list[sorted_index + 63] = sorted_list[sorted_index + 64] = sorted_list[sorted_index\
    \ + 65] = sorted_list[sorted_index + 66] = sorted_list[sorted_index + 67] = sorted_list[sorted_index\
    \ + 68] = sorted_list[sorted_index + 69] = sorted_list[sorted_index + 70] = sorted_list[sorted_index\
    \ + 71] = sorted_list[sorted_index + 72] = sorted_list[sorted_index + 73] = sorted_list[sorted_index\
    \ + 74] = sorted_list[sorted_index + 75] = sorted_list[sorted_index + 76] = sorted_list[sorted_index\
    \ + 77] = sorted_list[sorted_index + 78] = sorted_list[sorted_index + 79] = sorted_list[sorted_index\
    \ + 80] = sorted_list[sorted_index + 81] = sorted_list[sorted_index + 82] = sorted_list[sorted_",
  "  if(lst.length == 0) return [];\n  if(lst.length == 1) return lst;\n  if(lst.length\
    \ == 2) return [lst[1], lst[0]];\n\n  var sorted_array = [lst[0], lst[1]];\n \
    \ var middle_index = lst.length / 2;\n\n  var min_value = lst[middle_index];\n\
    \  for(var i = middle_index; i < lst.length; i++){\n    if(lst[i] < min_value){\n\
    \      min_value = lst[i];\n      sorted_array[1] = lst[i];\n    }\n  }\n  sorted_array[0]\
    \ = min_value;\n\n  return sorted_array.concat(\n    sorted_array.slice(1).reverse()\n\
    \  );\n}\n", "    var sorted_lst = lst.slice();\n    sorted_lst.sort(function(a,\
    \ b){return a-b;});\n    return sorted_lst;\n}", "  if (lst.length < 2) {\n  \
    \  return lst;\n  }\n  var min = lst[0];\n  var max = lst[0];\n  var rest = [];\n\
    \  for (var i = 1; i < lst.length; i++){\n    var val = lst[i];\n    if (val <\
    \ min) {\n      min = val;\n      rest = lst.slice(i);\n    } else if (val > max)\
    \ {\n      max = val;\n    } else {\n      rest.push(val);\n    }\n  }\n  return\
    \ rest\n    .concat(\n      lst.slice(min),\n      lst.reduce(function(a, b){\n\
    \        if (b.length === min) {\n          return a.concat(b);\n        }\n \
    \       return a.concat([b[b.length - 1]]);\n      }, [min]))\n    .concat(\n\
    \      lst.reduce(function(a, b){\n        if (b.length === max) {\n         \
    \ return a.concat(b);\n        }\n        return a.concat([b[0]]);\n      }, [max]));\n\
    }\n", "  var len = lst.length\n  if(len === 0) return []\n  var min = lst[0]\n\
    \  var max = lst[len-1]\n  for(var i = 1, len = lst.length; i < len; ++i){\n \
    \   if(lst[i] < min){\n      min = lst[i]\n    }\n    if(lst[i] > max){\n    \
    \  max = lst[i]\n    }\n  }\n  return[min, max].sort().concat(lst).sort().slice(0,\
    \ len)\n}\n\n", "    return lst.sort(function (a, b){\n        return Math.min(a,\
    \ b);\n    }).sort(function (a, b){\n        return Math.max(a, b);\n    }).sort(function\
    \ (a, b){\n        return Math.min(a, b);\n    }).sort(function (a, b){\n    \
    \    return Math.max(a, b);\n    });\n}\n", "    if (lst.length == 0){\n     \
    \   return [];\n    }\n    var minimum = Math.min(...lst);\n    var maximum =\
    \ Math.max(...lst);\n    var min = minimum;\n    var max = maximum;\n    while\
    \ (min != max){\n        if (min < max){\n            var mid = Math.floor((min\
    \ + max) / 2);\n            lst[mid] = max;\n            lst[max + 1] = mid;\n\
    \            max = mid;\n        } else {\n            var mid = Math.floor((min\
    \ + max) / 2);\n            lst[mid] = min;\n            lst[min + 1] = mid;\n\
    \            min = mid;\n        }\n    }\n    return lst;\n}", "\tfor (var i\
    \ = 0; i < lst.length - 1; i++){\n\t\tfor (var j = 0; j < lst.length - 1 - i;\
    \ j++){\n\t\t\tif (lst[j] > lst[j + 1]){\n\t\t\t\tvar tmp = lst[j];\n\t\t\t\t\
    lst[j] = lst[j + 1];\n\t\t\t\tlst[j + 1] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ lst;\n}\n", "    var min = lst[0];\n    var max = lst[lst.length - 1];\n   \
    \ var minMax = min;\n    var minValue = min;\n    var maxValue = max;\n\n    for(var\
    \ i = 1;i < lst.length;i++){\n        var val = lst[i];\n        if(val > maxValue){\n\
    \            minMax = max;\n            maxValue = max;\n            max = val;\n\
    \        }else if(val < minValue){\n            minMax = min;\n            minValue\
    \ = min;\n            min = val;\n        }else if(val > maxValue && val < minValue){\n\
    \            minMax = min;\n            minValue = val;\n        }else{\n    \
    \        minMax = max;\n            maxValue = val;\n        }\n    }\n    return\
    \ [minMax,max,min];\n}\n", "    lst = lst.slice();\n    lst.sort((a,b)=>{\n  \
    \      if(a > b) return -1;\n        if(b > a) return 1;\n        return 0;\n\
    \    });\n    return lst;\n}", "  return lst.sort((a,b) => {\n    const sort =\
    \ a - b;\n    const sortAsc = a < b;\n    const sortDes = a > b;\n\n    return\
    \ sort\n      ? (sortAsc ? sort : -sort)\n      : (sortDes ? sort : -sort);\n\
    \  });\n}\n", "    if (lst.length <= 0) {\n        return lst;\n    }\n    \n\
    \    lst = lst.slice();\n    \n    var index = lst.indexOf(Math.max.apply(null,\
    \ lst));\n    \n    while (index > -1) {\n        \n        var val = lst[index];\n\
    \        \n        lst.splice(index, 1);\n        lst.push(val);\n        \n \
    \       index = lst.indexOf(Math.max.apply(null, lst));\n    }\n    \n    return\
    \ lst;\n}\n", "  if(lst.length == 0) return lst;\n\n  // create 2 stacks -- one\
    \ for min and one for max\n  var min_stack = [];\n  var max_stack = [];\n\n  //\
    \ while there is still an element\n  while(lst.length > 0){\n    // push min to\
    \ the minstack\n    min_stack.push(lst[0]);\n\n    // take off the minimum\n \
    \   lst = lst.slice(1);\n\n    // push max to the maxstack\n    max_stack.push(lst[0]);\n\
    \n    // take off the maximum\n    lst = lst.slice(1);\n  }\n\n  // push all remaining\
    \ elements to the min stack\n  min_stack.push(...lst);\n\n  // pop one element\
    \ from the min stack\n  var min = min_stack.pop();\n\n  // push all remaining\
    \ elements to the max stack\n  max_stack.push(...lst);\n\n  // pop one element\
    \ from the max stack\n  var max = max_stack.pop();\n\n  // reverse the order\n\
    \  max_stack = max_stack.reverse();\n\n  // push all the elements to the min stack\n\
    \  min_stack = min_stack.reverse();\n\n  // push all the elements to the max stack\n\
    \  max_stack = max_stack.reverse();\n\n  // push all the elements to the min stack\n\
    \  min_stack = min_stack.reverse();\n\n  // push all the elements to the max stack\n\
    \  max_stack = max_stack.reverse();\n\n  // push all the elements to the min stack\n\
    \  min_stack = min_stack.reverse();\n\n  // push all the elements to the max stack\n\
    \  max_stack = max_stack.reverse();\n\n  // push all the elements to the min stack\n\
    \  min_stack = min_stack.reverse();\n\n  // push all the elements to the max stack\n\
    \  max_stack = max_stack.reverse();\n\n  // push all the elements to the min stack\n\
    \  min_stack = min_stack.reverse();\n\n  // push all the elements to the max stack\n\
    \  max_stack = max_stack.reverse();\n\n  // push all the elements to the min stack\n\
    \  min_stack = min_stack.reverse();\n\n  // push all the elements to the max stack\n\
    \  max_stack = max_stack.reverse();\n\n  // push all the elements to the min stack\n\
    \  min_stack = min_stack.reverse();\n\n  // push all the elements to the max stack\n\
    \  max_stack = max_stack.reverse();\n\n  // push all the elements to the min stack\n\
    \  min_stack = min_stack.reverse();\n\n  // push all the elements to the max stack\n\
    \  max_stack = max_stack.reverse();\n\n  // push all the elements to the min stack\n\
    \  min_stack = min_stack.reverse();\n\n  // push all the elements to the max stack\n\
    \  max_stack = max_stack.reverse();\n\n  // push all the elements to the min stack\n\
    \  min_stack = min_stack.reverse();\n\n  // push all the elements to the max stack\n\
    \  max_stack", "\tlet minimum = lst[0]\n\tlet maximum = lst[0]\n\tfor(let i =\
    \ 1; i < lst.length; i++){\n\t\tif(minimum > lst[i]){\n\t\t\tminimum = lst[i]\n\
    \t\t}\n\t\tif(lst[i] > maximum){\n\t\t\tmaximum = lst[i]\n\t\t}\n\t}\n\tlet result\
    \ = []\n\tfor(let i = 0; i < lst.length; i++){\n\t\tif(minimum > lst[i]){\n\t\t\
    \tresult.push(minimum)\n\t\t}\n\t\telse if(lst[i] > maximum){\n\t\t\tresult.push(lst[i])\n\
    \t\t}\n\t\telse{\n\t\t\tresult.push(maximum)\n\t\t}\n\t}\n\treturn result\n}\n",
  "  if(lst.length < 2) return lst;\n  var sorted = [];\n  var min = Math.min(...lst);\n\
    \  var max = Math.max(...lst);\n  sorted.push(min);\n  sorted.push(max);\n  for(let\
    \ i = 2; i < lst.length; i++){\n    sorted.push(lst[i - 1]);\n    sorted.push(lst[i]);\n\
    \  }\n  return sorted;\n}\n", "    if (!lst.length) return lst;\n    var min =\
    \ Math.min(lst[0], lst[lst.length-1]);\n    var max = Math.max(lst[0], lst[lst.length-1]);\n\
    \    var tmp = [];\n    for (var i=0, j=0; i<lst.length; i++){\n        j = (i\
    \ + j)%2;\n        if (j==0) { tmp.push(lst[i]); continue; }\n        tmp.push(lst[j]);\n\
    \    }\n    return tmp;\n}", "  var l = lst.length\n  if(l < 2){\n    return lst\n\
    \  }\n  for(var i = 1; i < l; i++){\n    var min = i\n    for(var j = i + 1; j\
    \ < l; j++){\n      if(lst[j] < lst[min]){\n        min = j\n      }\n    }\n\
    \    if(min !== i){\n      var temp = lst[i]\n      lst[i] = lst[min]\n      lst[min]\
    \ = temp\n    }\n  }\n  return lst\n}\n", "  lst.sort();\n  return lst;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\nYou can write your own sorter function that sorts\
    \ your array in the way you want, and then apply that function to the array.\n\
    <code>", "  if (lst.length <= 1) return lst;\n  let min_val = Math.min(...lst);\n\
    \  let max_val = Math.max(...lst);\n  let res = [];\n  let i = 0;\n  while (i\
    \ < lst.length){\n    let val = lst[i];\n    if (val == min_val){\n      i = i\
    \ + 1;\n      res.push(min_val);\n      continue;\n    }\n    if (val == max_val){\n\
    \      i = i + 1;\n      res.push(max_val);\n      continue;\n    }\n    i = i\
    \ + 1;\n    res.push(val);\n  }\n  return res;\n}\n\n", "  if(lst == null || lst.length\
    \ == 0){\n    return [];\n  }\n  var min = 0;\n  var max = lst.length - 1;\n \
    \ var mid;\n  while(min < max){\n    mid = Math.floor((min+max)/2);\n    if(lst[mid]\
    \ > lst[max]){\n      max = mid - 1;\n    }else{\n      min = mid + 1;\n    }\n\
    \  }\n  return lst.slice(min, max+1);\n}\n</code>\n<|/ a dscore=5 tags=sorting,arrays,algorithm,javascript\
    \ |>\n<| c |>\nHow did you come up with the solution? Is there some logic behind\
    \ it?\n<|/ c |>\n<| c |>\nIt's not sorting in descending order. He is sorting\
    \ in ascending order and returning the array in descending order.\n<|/ c |>\n\
    <| c |>\nThe logic is pretty simple, just use two pointers, one that goes along\
    \ the whole array and one that goes just one index. Whenever the smaller value\
    \ is found move the index that moves along the whole array to the index that moves\
    \ along the index and vice versa. When the smaller value is found move both pointers\
    \ one step forward.\n<|/ c |>\n<| c |>\nThanks, this works in Java. But it only\
    \ works on sorted lists. To make it work on unsorted lists I added an additional\
    \ check: `if (lst[mid] < lst[min])`.\n<|/ c |>\n<| c |>\nYou don't need to check\
    \ if the list is sorted. When you move the pointers, you can just compare if the\
    \ current index is less than the value at the next index. If so, then move the\
    \ pointer one step forward. If not, move the pointer two steps forward.\n<|/ c\
    \ |>\n<| a dscore=5 |>\nA simple iterative approach is to:\n\nCreate a new array\
    \ holding the same content as the original\nIterate through the original array\
    \ and replace items in the new array accordingly\n\nThe code would be similar\
    \ to this:\n<code>", "\tif (lst.length <= 1) return lst;\n\t\n\tvar min_index\
    \ = 0, max_index = lst.length - 1;\n\twhile(true){\n\t\twhile (lst[min_index]\
    \ > lst[max_index]) {\n\t\t\tvar temp = min_index;\n\t\t\tmin_index = max_index;\n\
    \t\t\tmax_index = temp;\n\t\t}\n\t\tif (min_index == max_index) return lst; //\
    \ already sorted\n\t\tvar temp = lst[min_index];\n\t\tlst[min_index] = lst[max_index];\n\
    \t\tlst[max_index] = temp;\n\t\tmin_index++;\n\t\tmax_index--;\n\t}\n};\n<|/ file\
    \ filename=util.js |>", "  if (lst.length == 0){\n    return lst;\n  }\n  var\
    \ first = lst[0];\n  var rest = lst.slice(1);\n  rest.sort(function(a, b){\n \
    \   return a - b;\n  });\n  first = strange_sort_list(first);\n  return first.concat(rest);\n\
    }\n\n", "  return lst.sort(function(a, b){\n    if(a < b){\n      return 1;\n\
    \    }\n    if(a > b){\n      return -1;\n    }\n    return 0;\n  });\n}\n", " \
    \   if(!lst) return [];\n\n    var min_value = lst[0];\n    var max_value = lst[0];\n\
    \n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] > max_value){\n\
    \            max_value = lst[i];\n        }\n        if(lst[i] < min_value){\n\
    \            min_value = lst[i];\n        }\n    }\n\n    return [min_value, max_value,\
    \ min_value, max_value, min_value];\n}\n", "    for(var i = 0; i < lst.length;\
    \ i++){\n        for(var j = 0; j < lst.length - i - 1; j++){\n            if(lst[j]\
    \ > lst[j + 1]){\n                var temp = lst[j];\n                lst[j] =\
    \ lst[j + 1];\n                lst[j + 1] = temp;\n            }\n        }\n\
    \    }\n    return lst;\n}\n", "    return lst.sort((a, b) => a - b).reverse();\n\
    }\n", "  if (lst.length <= 1) {\n    return lst\n  }\n  \n  var minimum = lst[0],\n\
    \      maximum = lst[lst.length-1],\n      tmp\n  \n  // Swap first and last if\
    \ they are equal\n  if (minimum === maximum) {\n    tmp = minimum\n    minimum\
    \ = maximum\n    maximum = tmp\n  }\n  \n  for (var i = 1; i < lst.length; ++i)\
    \ {\n    // Swap current and next\n    if (lst[i] < minimum) {\n      tmp = minimum\n\
    \      minimum = lst[i]\n    }\n    \n    if (lst[i] > maximum) {\n      tmp =\
    \ maximum\n      maximum = lst[i]\n    }\n    \n    if (tmp < lst[i]) {\n    \
    \  tmp = lst[i]\n      lst[i] = minimum\n      minimum = tmp\n    }\n  }\n  \n\
    \  tmp = minimum\n  minimum = maximum\n  maximum = tmp\n  \n  return strange_sort_list([minimum,\
    \ ...lst, maximum])\n}\n", "    if (lst.length == 0) return [];\n    var minIndex\
    \ = 0, maxIndex = lst.length - 1;\n    var temp;\n    while (maxIndex > minIndex)\
    \ {\n        // Find the minimum element in the array.\n        temp = lst[minIndex];\n\
    \        while (minIndex < maxIndex && lst[minIndex] >= temp) {\n            minIndex++;\n\
    \        }\n        // Find the maximum element in the array.\n        temp =\
    \ lst[maxIndex];\n        while (maxIndex > minIndex && lst[maxIndex] <= temp)\
    \ {\n            maxIndex--;\n        }\n        // Swap them.\n        var temp\
    \ = lst[minIndex];\n        lst[minIndex] = lst[maxIndex];\n        lst[maxIndex]\
    \ = temp;\n    }\n    return lst;\n}\n", "    return lst.sort(function(a, b){\n\
    \        return b - a;\n    });\n}\n", "    if (lst.length < 2)\n        return\
    \ lst;\n\n    let minValue = lst[0];\n    let maxValue = lst[0];\n    for (let\
    \ i = 1; i < lst.length; i++)\n    {\n        if (lst[i] < minValue) minValue\
    \ = lst[i];\n        if (lst[i] > maxValue) maxValue = lst[i];\n    }\n\n    let\
    \ result = [];\n    for (let i = minValue; i < maxValue; i++)\n    {\n       \
    \ for (let j = i; j > minValue; j--)\n        {\n            let temp = lst[i];\n\
    \            lst[i] = lst[j];\n            lst[j] = temp;\n        }\n       \
    \ result.push(lst[i]);\n    }\n\n    return result;\n}\n\n", "\tfor(var i=0; i<lst.length;\
    \ i++){\n\t\tvar min = lst[i];\n\t\tvar max = lst[i+1];\n\t\t\n\t\tif(lst[i] ==\
    \ max){\n\t\t\tlst[i+1] = min;\n\t\t}\n\t\t\n\t\tif(lst[i] == min){\n\t\t\tlst[i]\
    \ = max;\n\t\t}\n\t}\n\treturn lst;\n}", "  var _min = lst[0];\n  var _max = lst[0];\n\
    \  for (var i = 1; i < lst.length; i++){\n    if (lst[i] < _min){\n      _min\
    \ = lst[i];\n    }\n    if (lst[i] > _max){\n      _max = lst[i];\n    }\n  }\n\
    \  var arr = [];\n  var i = 0;\n  while (i < lst.length){\n    arr.push(lst[i]);\n\
    \    i++;\n  }\n  arr.reverse();\n  var newArr = [];\n  var i = 0;\n  while (i\
    \ < arr.length){\n    newArr.push(arr[i++]);\n  }\n  return newArr;\n}\n\n", " \
    \ let n = lst.length\n  \n  for(let i=0; i<n; i++){\n    let minimum = lst[i]\n\
    \    let j=0\n    for(let j=1; j<n; j++){\n      if(lst[j]<minimum){\n       \
    \ minimum = lst[j]\n      }\n    }\n    for(let j=1; j<n; j++){\n      if(lst[j]>minimum){\n\
    \        lst[j-1] = lst[j]\n        lst[j] = minimum\n      }\n    }\n  }\n  \n\
    \  return lst\n}\n ", "  let l = lst.length;\n  for(let i = 1; i < l; i++){\n\
    \    let temp = lst[i];\n    for(let j = i - 1; j > 0; j--){\n      if(lst[j]\
    \ >= temp){\n        lst[j + 1] = lst[j];\n        lst[j] = temp;\n      }\n \
    \   }\n  }\n  return lst;\n}\n", "    // Create array from given list\n    var\
    \ arr = [];\n    for(var i = 0, len = lst.length; i < len; i++){\n        arr.push(lst[i]);\n\
    \    }\n\n    // Sort array\n    arr.sort(function(a, b){\n        // If a is\
    \ not less than b, a is before b.\n        if(a>b) return -1;\n        // If b\
    \ is not less than a, a is after b\n        if(b>a) return 1;\n        // a and\
    \ b are equal, sort is easy\n        return 0;\n    });\n\n    return arr;\n}\n",
  "  if (lst.length < 2) return lst;\n  var min = lst[0], max = lst[lst.length - 1];\n\
    \  for (var i = 0, len = lst.length - 1; i < len; i++) {\n    if (lst[i] < min)\
    \ {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n\
    \    }\n  }\n  var tmp = min;\n  min = max;\n  max = tmp;\n  for (var i = 0, len\
    \ = lst.length; i < len; i++) {\n    if (lst[i] < min) {\n      lst[i] = min +\
    \ 1;\n      lst[min] = lst[i];\n    } else if (lst[i] > max) {\n      lst[i] =\
    \ max - 1;\n      lst[max] = lst[i];\n    }\n  }\n  return lst;\n}\n\n", "  let\
    \ min;\n  let max;\n  const newList = [];\n\n  for(let i = 0; i < lst.length;\
    \ i++){\n    min = i;\n    max = i;\n\n    for(let j = i+1; j < lst.length; j++){\n\
    \      if(lst[j] < lst[min]){\n        min = j;\n      }\n\n      if(lst[j] >\
    \ lst[max]){\n        max = j;\n      }\n    }\n\n    newList.push(lst[min]);\n\
    \    newList.push(lst[max]);\n    newList.push(lst[i]);\n  }\n\n  return newList;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,sorting,javascript dscore=0 |>\n\
    <code>\nconst arr = [5,4,3,2,1,6,3,7,7,5,7,8];\n", "    if(lst.length <= 0) return\
    \ [];\n    return lst.sort((a, b) => {\n        return a > b ? 1 : -1\n    });\n\
    }\n", "  lst.sort(function(a, b){\n    return a - b;\n  });\n}\n", "    var tmp,\
    \ i, j, k, min, max, swap, tmp2;\n    tmp = lst[0];\n    min = lst[0];\n    max\
    \ = lst[0];\n    for (i = 1; i < lst.length; i++){\n        min = Math.min(lst[i],\
    \ min);\n        max = Math.max(lst[i], max);\n    }\n    swap = false;\n    while(min\
    \ != max){\n        swap = true;\n        for (j = 0; j < lst.length; j++){\n\
    \            if(lst[j] < min || lst[j] > max){\n                tmp2 = lst[j];\n\
    \                lst[j] = min;\n                lst[min] = tmp2;\n           \
    \     swap = true;\n            }\n        }\n        if(!swap) break;\n    }\n\
    \    return lst;\n}", "    let arr = [];\n    for(let i = lst.length - 1; i >=\
    \ 0; i--){\n        arr.push(lst[i]);\n    }\n    return arr;\n}\n", "    var\
    \ i, j, temp;\n    for(i = 0; i< lst.length; i++){\n        for(j = i + 1; j <\
    \ lst.length; j++){\n            if(lst[i] > lst[j]){\n                temp =\
    \ lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n\
    \            }\n        }\n    }\n    return lst;\n}\n</code>\n<|/ a dscore=0\
    \ tags=algorithm,javascript,sorting |>\n<| c |>\nWhat about a case like [1,2,3,4,5,6,7]?\
    \ Your algorithm would return [1, 3, 5, 7, 2, 6, 4] while it should be [1, 3,\
    \ 7, 5, 2, 6, 4].\n<|/ c |>\n<| c |>\nIt's been a long time since I posted this\
    \ answer and I remember the same mistake I did when coding this. Thanks for pointing\
    \ that out though. I'll fix it now.\n<|/ c |>\n<| c |>\nIt's still not working.\
    \ I think I misunderstood the question and I'm going to delete my answer.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nvar a = [1, 3, 5, 2, 6, 4];\nvar temp = 0;\n\
    var b = [];\na.map(function(item) {\n  while(temp < a[item]) temp++;\n  while(temp\
    \ > a[item]) temp--;\n  b.push(item);\n});", "    return lst\n        .reduceRight(function(next,\
    \ current){\n            return next + current\n        }, 0)\n        .reverse()\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,arrays,javascript |>\nThe simplest\
    \ way is just to concatenate the arrays and sort them:\n<code>\nvar myArray =\
    \ myArray.join(',').split(',');\nmyArray.sort();\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nYou probably mean `.join()`, `.split()` doesn't do what you think it\
    \ does.\n<|/ c |>\n<| c |>\n- Yes, I missed the join when I answered it. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| c |>\nWhat if I have a string with commas\
    \ already in it, like `var myArray = '1,2,3,4,5,6';`\n<|/ c |>\n<| c |>\n- You\
    \ would have to add `.split(',')` before `.sort()` if you want the commas to be\
    \ removed from the array.\n<|/ c |>\n<| a tags=sorting,arrays,javascript |>\n\
    If you don't know the length beforehand, this is a simple one-line solution\n\
    <code>\nvar myArray = [1,2,3];\nmyArray.join().split(',').sort().join(',');",
  "\tconst len = lst.length;\n\tlet minIndex = 0;\n\tlet maxIndex = len-1;\n\twhile(maxIndex\
    \ - minIndex > 1){\n\t\twhile(lst[maxIndex] > lst[maxIndex - 1] && maxIndex >\
    \ 0){\n\t\t\tmaxIndex--;\n\t\t}\n\t\twhile(lst[minIndex] < lst[minIndex + 1] &&\
    \ minIndex < len){\n\t\t\tminIndex++;\n\t\t}\n\t\tif(maxIndex > minIndex){\n\t\
    \t\tconst temp = lst[minIndex];\n\t\t\tlst[minIndex] = lst[maxIndex];\n\t\t\t\
    lst[maxIndex] = temp;\n\t\t}\n\t}\n\treturn lst;\n}\n", "  let arr = []\n  for(let\
    \ i = 0; i < lst.length; i++){\n    let tmp = Math.ceil(lst.length * Math.random())\n\
    \    while(arr.includes(tmp)) tmp = Math.ceil(lst.length * Math.random())\n  \
    \  arr.push(tmp)\n  }\n  return arr.sort((a,b) => {\n    if(a>b) return 1\n  \
    \  if(a<b) return -1\n    return 0\n  })\n}\n", "\tlet min_index = lst.findIndex(a\
    \ => a < lst[0]);\n\tlet max_index = lst.findIndex(a => a > lst[lst.length - 1]);\n\
    \t\n\tlet min_val = lst[min_index];\n\tlet max_val = lst[max_index];\n\t\n\tlst.sort((a,b)\
    \ => (a-b)+(a-b)*(min_val-b-max_val-min_val));\n\treturn lst;\n}\n", "    lst\
    \ = lst.slice();\n    lst.sort(function(a, b){\n        return a > b ? 1 : -1;\n\
    \    });\n    return lst;\n}", "  if(lst.length===0) return [];\n  lst.sort(function(a,b){\n\
    \    return a>b ? 1 : a<b ? -1 : 0;\n  });\n  return lst;\n}\n", "  return lst.sort(function(a,\
    \ b){\n    return (b - a) || (a > b ? 1 : -1);\n  });\n}\n", "    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let i = 0;\n    let tempArr = [];\n\n  \
    \  while(i < lst.length){\n        if(lst[i] == min){\n            tempArr.push(min);\n\
    \        }else if(lst[i] == max){\n            tempArr.push(max);\n        }else{\n\
    \            tempArr.push(lst[i]);\n        }\n        i++;\n    }\n    return\
    \ tempArr;\n}\n", "    let res = [];\n    let min = Math.min(...lst);\n    let\
    \ max = Math.max(...lst);\n    for(let i=0; i<lst.length; i++){\n        if(lst[i]\
    \ === min){\n            res.unshift(min);\n            min = Math.min(lst[i],\
    \ max);\n        }else if(lst[i] === max){\n            res.push(max);\n     \
    \       max = Math.max(lst[i], min);\n        }else{\n            res.push(lst[i]);\n\
    \        }\n    }\n    return res;\n}\n", "    for(var i = 1; i < lst.length;\
    \ i++){\n        var key = lst[i];\n        var j = i - 1;\n        while(j >=\
    \ 0 && lst[j] > key){\n            lst[j + 1] = lst[j];\n            j = j - 1;\n\
    \        }\n        lst[j + 1] = key;\n    }\n    return lst;\n}\n", "  if (lst.length===0){\n\
    \    return [];\n  }\n  var smallest = Math.min(lst);\n  var biggest = Math.max(lst);\n\
    \  var min_length = smallest.length; //smallest array length is 1\n  var max_length\
    \ = biggest.length; //biggest array length is 1\n  var temp_lst = lst.slice();\n\
    \  while(temp_lst.length > 0){\n    var min_position = temp_lst.indexOf(smallest);\n\
    \    var max_length_position = temp_lst.indexOf(biggest);\n    var temp;\n   \
    \ if(min_position>max_length_position){\n      temp = temp_lst.pop();\n      temp_lst.splice(max_length_position,\
    \ 1);\n      temp_lst.unshift(temp);\n    }\n    else if(min_position<max_length_position){\n\
    \      temp = temp_lst.pop();\n      temp_lst.splice(min_position, 1);\n     \
    \ temp_lst.push(temp);\n    }\n  }\n  return temp_lst;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\nvar a = [1, 2, 4, 7];\nvar b = a.sort((a,b) =>\
    \ a - b);", "    for(let i=0; i<lst.length-1; i++){\n        let min = i;\n  \
    \      for(let j=i+1; j<lst.length; j++){\n            if(lst[j]<lst[min]){\n\
    \                min = j;\n            }\n        }\n        let temp = lst[i];\n\
    \        lst[i] = lst[min];\n        lst[min] = temp;\n    }\n    return lst;\n\
    }\n", "    if (!lst.length) {\n        return lst;\n    }\n    return lst.sort((a,\
    \ b) => {\n        return Math.sign(a) - Math.sign(b);\n    });\n}\n", "  var\
    \ sorted_list = []\n  for(var i=0; i<lst.length-1; i++){\n    sorted_list.push(lst[i])\n\
    \    sorted_list.push(lst[i+1])\n    sorted_list.push(lst[i])\n  }\n  return sorted_list\n\
    }\n", "  let minimum = Math.min(...lst);\n  let maximum = Math.max(...lst);\n\
    \  let strange_list = lst.reduce((a, b) => {\n    if(a+1 === maximum)\n      return\
    \ [...a, a+1];\n    else\n      return [...a, a+1];\n  }, []);\n  return strange_list;\n\
    }\n", "  return lst.sort(function(a, b){\n    return a-b;\n  });\n}\n", "  if(lst.length\
    \ <= 1){ return lst; }\n  var first = lst[0];\n  var rest = lst.slice(1); //slice\
    \ rest from list with index (1), not (0)\n  var minIndex = 0;\n  var maxIndex\
    \ = rest.length - 1;\n  var min = rest[minIndex];\n  var max = rest[maxIndex];\n\
    \n  while(maxIndex >= minIndex){\n    var currentIndex = minIndex;\n    while(currentIndex\
    \ <= maxIndex){\n      if(rest[currentIndex] < min){\n        min = rest[currentIndex];\n\
    \        minIndex = currentIndex;\n      }\n      currentIndex++;\n    }\n   \
    \ var temp = rest[maxIndex];\n    rest[maxIndex] = min;\n    rest[minIndex] =\
    \ temp;\n    maxIndex--;\n    temp = rest[maxIndex];\n    rest[maxIndex] = max;\n\
    \    rest[minIndex] = temp;\n    maxIndex--;\n  }\n  return rest;\n}\n</code>\n\
    <|/ a tags=javascript,sorting,arrays dscore=0 |>\n<| a dscore=0 |>\nHere is my\
    \ version of it\n<code>", "  if (lst.length === 0) return lst;\n  const min =\
    \ Math.min(...lst);\n  const max = Math.max(...lst);\n  const new_list = [min];\n\
    \  for (let i = min + 1; i < max; i++) {\n    new_list.push(lst[i]);\n  }\n  return\
    \ new_list.concat(\n    ...strange_sort_list(\n      lst.filter(i => i !== min),\n\
    \    ),\n    Array.from(\n      [max],\n      (_, i) => min++,\n    ),\n  );\n\
    }\n", "    // Sort the list\n    lst.sort(function(a, b){\n        return b-a;\n\
    \    });\n\n    // Return original list if it was unsorted\n    if(!lst.sort()){\n\
    \        return lst;\n    }\n    // Return sorted list\n    return lst.sort(function(a,\
    \ b){\n        return b-a;\n    });\n}", "  const min_value = Math.min(...lst);\n\
    \  const max_value = Math.max(...lst);\n  const arr = [];\n  arr.push(min_value);\n\
    \  arr.push(max_value);\n  for(let i = min_value; i < max_value; i++) {\n    arr.push(i);\n\
    \  }\n  return arr;\n}\n", "    for(var i = lst.length - 1; i > 0; i--){\n   \
    \     var min = i;\n        for(var j = i; j > 0; j--){\n            if(lst[j]\
    \ < lst[min]){\n                min = j;\n            }\n        }\n        var\
    \ temp = lst[i];\n        lst[i] = lst[min];\n        lst[min] = temp;\n    }\n\
    \    return lst;\n}\n", "    // We start with the minimum value in the array.\n\
    \    var min = Math.min(...lst);\n    // Then we find the max of the remaining\
    \ numbers.\n    var max = Math.max(...lst);\n    // After that we find the minimum\
    \ value of the remaining numbers.\n    var min = Math.min(min, max);\n    // Finally,\
    \ we get the remaining mins first from the remaining numbers.\n    var mins =\
    \ lst.reduce((a, b) => a - b);\n    // We then put the minimum value at the start\
    \ of the array and\n    // we get the remaining numbers after.\n    return [min,\
    \ ...mins, max];\n}\n", "  var tmp = [];\n  for (var i = 0; i < lst.length; i++){\n\
    \    if (i === 0){\n      tmp = lst[i];\n    }\n    else {\n      tmp = lst[i]\
    \ + tmp;\n    }\n  }\n  return tmp;\n}\n", "  var len = lst.length;\n  var sorted\
    \ = [];\n  for(var i = 0; i < len; i++){\n    sorted.push(lst[i]);\n  }\n  \n\
    \  for(var i = 0; i < len; i++){\n    sorted.push(lst[len - 1 - i]);\n  }\n  \n\
    \  return sorted;\n}\n", "  return lst.sort(function(a, b){\n    var res = a -\
    \ b;\n    return res === 0\n      ? a < b\n        ? -1\n        : 1\n      :\
    \ res < 0\n      ? -1\n      : 1\n  });\n}\n", "    for(var i = lst.length - 1;\
    \ i > 0; i--){\n        for(var j = 0; j < i; j++){\n            var tmp = (lst[j]\
    \ < lst[j+1])?lst[j]:lst[j+1];\n            lst[j] = tmp;\n        }\n    }\n\
    \    return lst;\n}", "    var lst2 = [];\n    lst2.push(lst[0]);\n    var minval\
    \ = lst[0], maxval = lst[lst.length-1];\n    for (var i = 1; i < lst.length; i++){\n\
    \        if (lst[i] > maxval){\n            lst2.push(lst[i]);\n            maxval\
    \ = lst[i];\n        } else if (lst[i] < minval){\n            lst2.push(lst[i]);\n\
    \            minval = lst[i];\n        }\n    }\n    return lst2;\n}\n\n", "\t\
    var min = lst[0];\n\tvar max = lst[0];\n\tvar i;\n\n\tfor(i = 0; i < lst.length;\
    \ i++){\n\t\tif(lst[i] < min) min = lst[i];\n\t\tif(lst[i] > max) max = lst[i];\n\
    \t}\n\n\tvar arr = [];\n\tfor(i = 0; i < lst.length; i++){\n\t\tif(lst[i] < min){\n\
    \t\t\tarr.push(min);\n\t\t\tmin = lst[i];\n\t\t}\n\t\telse if(lst[i] > max){\n\
    \t\t\tarr.push(max);\n\t\t\tmax = lst[i];\n\t\t}\n\t\telse{\n\t\t\tarr.push(lst[i]);\n\
    \t\t}\n\t}\n\tarr.push(min);\n\tarr.push(max);\n\treturn arr;\n}\n", "  if (lst.length\
    \ == 0) return lst;\n  var min_idx = 0;\n  var max_idx = lst ? lst.length - 1\
    \ : 0;\n  while (max_idx > min_idx) {\n    var tmp = lst[min_idx];\n    lst[min_idx]\
    \ = lst[max_idx];\n    lst[max_idx] = tmp;\n    min_idx++;\n    max_idx--;\n \
    \ }\n  return lst;\n}\n", "  if(lst.length < 2) return lst;\n  var sorted = [lst[0]];\n\
    \  for(var i = 0; i < lst.length; i++){\n    if(sorted[0] > lst[i]){\n      sorted[0]\
    \ = lst[i];\n    }\n  }\n  for(var i = lst.length - 1; i >= 0; i--){\n    if(sorted[0]\
    \ < lst[i]){\n      sorted[0] = lst[i];\n    }\n  }\n  return sorted;\n}\n", " \
    \ \n  if(lst.length == 0){\n    return [];\n  }\n  var sortedList = [];\n  var\
    \ min = Math.min(lst[0]);\n  var max = Math.max(lst[0]);\n  sortedList.push(min);\n\
    \  for(var i = 1; i < lst.length; i++){\n    if(lst[i] > max){\n      min = Math.min(lst[i]);\n\
    \      max = Math.max(lst[i]);\n      sortedList.push(min);\n      sortedList.push(max);\n\
    \    }\n    else{\n      if(max > lst[i]){\n        sortedList.push(max);\n  \
    \      max = Math.max(lst[i]);\n      }\n      else{\n        sortedList.push(min);\n\
    \        min = Math.min(lst[i]);\n      }\n    }\n  }\n  sortedList.push(max);\n\
    \  return sortedList;\n}\n", "    var sorted_lst = lst;\n    for(var i = 0; i\
    \ <sorted_lst.length; i++){\n        var item = sorted_lst[i];\n        var minimum\
    \ = i;\n        for(var j = i + 1; j < sorted_lst.length; j++){\n            var\
    \ item_2 = sorted_lst[j];\n            if(item_2 < item && minimum !== item_2){\n\
    \                item = item_2;\n                minimum = j;\n            }\n\
    \        }\n        sorted_lst[i] = minimum;\n        sorted_lst[minimum] = item;\n\
    \    }\n    return sorted_lst;\n}", "    var min = lst[0],\n        max = lst[0],\n\
    \        rest;\n    for (var i = 1, len = lst.length; i < len; i++) {\n      \
    \  if (lst[i] < min) {\n            min = lst[i];\n        } else if (lst[i] >\
    \ max) {\n            max = lst[i];\n        }\n    }\n    rest = lst.slice();\n\
    \    rest.unshift(min);\n    rest.push(max);\n    return rest;\n}\n", "    var\
    \ sorted_list = [],\n        minimum = lst[0];\n\n    for(var i = 0; i < lst.length;\
    \ i++){\n        var num = lst[i];\n        if(num > minimum){\n            sorted_list.push(minimum);\n\
    \        }\n        minimum = num;\n        sorted_list.push(num);\n    }\n  \
    \  return sorted_list;\n}\n</code>\n<|/ a dscore=0 tags=javascript,sorting |>\n\
    <| c |>\nThis code has O(n^2) complexity. Worse case it could be O(n^3) due to\
    \ sorting algorithm's complexity.\n<|/ c |>\n<| c |>\nPlease note that this is\
    \ not necessarily the fastest or most efficient.  The other answers have a much\
    \ better worst-case scenario. Still, +1 for a good solution.\n<|/ c |>\n<| a |>\n\
    You can sort by sorting the array and then swapping values into their proper place.\
    \ Like so: \n<code>", "    if (lst.length === 0) return lst;\n    var min = lst[0],\
    \ max = lst[0];\n    for (var i = 1; i < lst.length; i++) {\n        if (lst[i]\
    \ < min) min = lst[i];\n        if (lst[i] > max) max = lst[i];\n    }\n    return\
    \ [min, max, ...strange_sort_list(lst.slice(1))];\n}\n", "    var ret = [];\n\
    \    lst = lst.sort(function(a, b){return a - b;});\n    while(lst.length > 0){\n\
    \        ret.unshift(lst[0]);\n        lst = lst.slice(1);\n    }\n    return\
    \ ret;\n}", "    var arr = [];\n\n    for(var i=0;i<lst.length;i++){\n       \
    \ arr.push(lst[i]);\n    }\n\n    arr.sort(function(a, b){\n        a = a%1000;\n\
    \        b = b%1000;\n        if(b<a){\n            return 1;\n        }else{\n\
    \            return -1;\n        }\n    });\n    return arr;\n}", "    var i =\
    \ lst.length-1, j;\n    while(i>0){\n        // swap with the next minimum\n \
    \       j = i - 1;\n        while(j>=0 && lst[j]<lst[j-1]){\n            lst[j+1]\
    \ = lst[j];\n            j--;\n        }\n        lst[j+1] = lst[i];\n       \
    \ i--;\n    }\n    return lst;\n}\n\n", "    var new_list = [];\n    for(var i\
    \ = 0; i < lst.length; i++){\n        var min = Math.min(lst[i], lst[i+1]);\n\
    \        var max = Math.max(lst[i], lst[i+1]);\n        var temp = [min, max];\n\
    \        new_list.push(temp);\n    }\n    return new_list;\n}\n</code>\n<|/ a\
    \ tags=javascript,sorting |>\n<| a tags=javascript,sorting |>\nFor those of you\
    \ who come here looking for a way to sort an ordered list using the sort method,\
    \ the following approach will work:\n<code>\nvar myList = [9, 1, 5, 2, 8];\nmyList.sort(function(a,\
    \ b){\n    if(a < b) return -1;\n    if(a > b) return 1;\n    return 0;\n});\n\
    </code>\nThis will sort by ascending order, thus giving the desired result of\
    \ 1, 2, 5, 8, 9\n<|/ a dscore=2 |>\n<| c |>\nThe first part should read: `if(a\
    \ > b) return 1;` since we're sorting by ascending order. Also, to sort descendingly\
    \ the function should read: `var myList = [9, 1, 5, 2, 8];\nmyList.sort(function(a,\
    \ b){\n    if(a < b) return 1;\n    if(a > b) return -1;\n    return 0;\n});`\n\
    <|/ c |>\n<| a tags=javascript,sorting |>\nI needed to sort a list of objects\
    \ by the second property descending. Here is a simple solution for that:\n<code>\n\
    const myList = [\n    { name: 'B', title: 'C' },\n    { name: 'A', title: 'B'\
    \ },\n    { name: 'D', title: 'B' },\n    { name: 'C', title: 'A' },\n    { name:\
    \ 'E', title: 'B' },\n    { name: 'F', title: 'B' },\n    { name: 'G', title:\
    \ 'B' },\n]\n", "    let min_max = null\n    let min_value = Number.MAX_VALUE\n\
    \    let max_value = -Number.MAX_VALUE\n    for(let i = 0; i < lst.length; i++){\n\
    \        min_value = Math.min(lst[i], min_value)\n        max_value = Math.max(lst[i],\
    \ max_value)\n    }\n    let result = []\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < min_value){\n            result.push(lst[i])\n        }\n\
    \        else if(lst[i] > max_value){\n            result.push(lst[i])\n     \
    \   }\n        else{\n            result.push(min_value)\n            result.push(max_value)\n\
    \        }\n    }\n    return result\n}\n", "  \n  var minVal = lst[0];\n  var\
    \ maxVal = lst[0];\n  for (var i = 1; i < lst.length; i++){\n    if (lst[i] <\
    \ minVal){\n      minVal = lst[i];\n    }\n    if (lst[i] > maxVal){\n      maxVal\
    \ = lst[i];\n    }\n  }\n  var swap = false;\n  while ( !swap ){\n    swap = true;\n\
    \    \n    for (var i = 1; i < lst.length; i++){\n      if (lst[i] > maxVal){\n\
    \        swap = false;\n        var tmpVal = lst[i];\n        lst[i] = maxVal;\n\
    \        maxVal = tmpVal;\n      }\n      if (lst[i] < minVal){\n        swap\
    \ = false;\n        var tmpVal = lst[i];\n        lst[i] = minVal;\n        minVal\
    \ = tmpVal;\n      }\n    }\n  }\n  return lst;\n}\n\n", "  lst.sort((a,b)=>{\n\
    \    if(a<b) return -1;\n    if(a>b) return 1;\n    return 0;\n  })\n  return\
    \ lst;\n}\n", "    \n    for(let i = 0; i < lst.length-1; i++) {\n        for(let\
    \ j = 1; j <= (lst.length - i); j++) {\n            if(lst[j-1] > lst[j]) {\n\
    \                const temp = lst[j-1];\n                lst[j-1] = lst[j];\n\
    \                lst[j] = temp;\n            }\n        }\n    }\n    return lst;\n\
    }\n", "    let max = lst[0];\n    let min = lst[0];\n    let max = lst[0];\n \
    \   for (let i = 0; i < lst.length; i++){\n        if (lst[i] < min){\n      \
    \      min = lst[i];\n        }\n        if (lst[i] > max){\n            max =\
    \ lst[i];\n        }\n    }\n    let res = [max];\n    for (let i = 1; i < lst.length;\
    \ i++){\n        if (lst[i] < min){\n            min = lst[i];\n        }\n  \
    \      if (lst[i] > max){\n            max = lst[i];\n        }\n        res.push(min)\n\
    \    }\n    for (let i = 0; i < res.length; i++){\n        res.push(res[i])\n\
    \    }\n    return res;\n}\n", "    var len = lst.length;\n    var swap = 0;\n\
    \    for(var i=0; i<len; i++){\n        for(var j=i+1; j<len; j++){\n        \
    \    if(lst[j] < lst[i]){\n                swap = lst[j];\n                lst[j]\
    \ = lst[i];\n                lst[i] = swap;\n            }\n        }\n    }\n\
    \    return lst;\n}\n", "  var sortedList = lst;\n  for(var i=1; i < lst.length;\
    \ i++){\n    sortedList.push(sortedList[sortedList.length-1]);\n  }\n  return\
    \ sortedList;\n}\n", "  let min_value = Math.min.apply(null, lst);\n  let max_value\
    \ = Math.max.apply(null, lst);\n  let new_lst = [];\n  for( let item of lst ){\n\
    \    if( item > min_value && item < max_value ){\n      new_lst.push(item);\n\
    \    }\n  }\n  return new_lst;\n}\n</code>\n<|/ a tags=sorting,javascript,algorithm,arrays\
    \ |>\n<| c |>\nWhat if all values are the same? Like `[3, 3, 3, 3]`? This returns\
    \ an empty array in this case.\n<|/ c |>\n<| c |>\nThen you'd have to choose a\
    \ value for which you want the minimum value to be `3` and make that the smallest\
    \ value in the array. If you want to use the first value, you can check `if(arr.length\
    \ === 0){ if(arr[0] === min_value){ min_value = arr[0]; } else { min_value = arr[1];\
    \ } }`.\n<|/ c |>\n<| c |>\nThank you for this, great job!\n<|/ c |>\n<| a |>\n\
    <code>", "    var new_lst = lst\n    var tmp_lst = lst\n    new_lst = []\n   \
    \ for(var i = 0; i < lst.length; i++){\n        for(var j=0; j < tmp_lst.length;\
    \ j++){\n            if(tmp_lst[j] > tmp_lst[j+1]){\n                var tmp =\
    \ tmp_lst[j]\n                tmp_lst[j] = tmp_lst[j+1]\n                tmp_lst[j+1]\
    \ = tmp\n            }\n        }\n        new_lst = tmp_lst\n        tmp_lst\
    \ = lst\n    }\n    return new_lst\n}\n", "  var len = lst.length;\n  if(len ==\
    \ 0)\n    return lst;\n  if(len == 1)\n    return [lst[0]];\n  var min = 0;\n\
    \  var max = len - 1;\n  while(min <= max){\n    var middle = Math.floor((min\
    \ + max) / 2);\n    var current = lst[middle];\n    if(current < lst[min])\n \
    \     min = middle + 1;\n    else if(current > lst[max])\n      max = middle -\
    \ 1;\n    else\n      lst[middle] = lst[min];\n    lst[min] = current;\n  }\n\
    \  return lst;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks Kevin! You helped\
    \ me a lot.\n<|/ c |>\n<| a dscore=1 tags=javascript,algorithm |>\nThis is my\
    \ solution. Hope it helps.\n<code>", "\tif (lst.length <= 1) return lst;\n\tvar\
    \ minimum = lst[0], maximum = lst[0], min_element = true, max_element = false,\
    \ current_min = 0, current_max = 1, current_element = lst[0];\n\tfor (var i =\
    \ 0; i < lst.length; i++){\n\t\tif (lst[i] < minimum){\n\t\t\tminimum = lst[i];\n\
    \t\t\tmin_element = true;\n\t\t}\n\t\t\n\t\tif (lst[i] > maximum){\n\t\t\tmaximum\
    \ = lst[i];\n\t\t\tmax_element = true;\n\t\t}\n\t\t\n\t\tif (min_element && current_min\
    \ === maximum){\n\t\t\tcurrent_min = lst[i];\n\t\t}\n\t\telse if (max_element\
    \ && current_max === minimum){\n\t\t\tcurrent_max = lst[i];\n\t\t}\n\t\t\n\t\t\
    if (lst[i] < current_min){\n\t\t\tcurrent_min = lst[i];\n\t\t}\n\t\telse if (lst[i]\
    \ > current_max){\n\t\t\tcurrent_max = lst[i];\n\t\t}\n\t\t\n\t\tcurrent_element\
    \ = lst[i];\n\t}\n\t\n\tif (current_max < maximum) return strange_sort_list(current_max);\n\
    \tif (current_min > minimum) return strange_sort_list(current_min);\n\t\n\treturn\
    \ [current_min, current_max, current_element];\n}\n", "  if (lst.length === 0)\
    \ {\n    return lst;\n  }\n\n  var min_elem = lst[0];\n  var min_idx = lst.indexOf(min_elem);\n\
    \  var max_elem = lst[lst.length - 1];\n  var max_idx = lst.lastIndexOf(max_elem);\n\
    \  var mid_elem = Math.floor((max_idx + min_idx) / 2);\n  \n  var mid_elem = strange_sort_list(lst.slice(mid_elem,\
    \ mid_elem + 2));\n\n  return mid_elem.concat(min_elem, max_elem, mid_elem);\n\
    }\n</code>\n<|/ a tags=javascript,sorting |>\n<| a tags=javascript,sorting dscore=1\
    \ |>\nHere is an example using Array.sort and an inner function (using ES5 syntax\
    \ for shortness)\n<code>", "  if (!lst.length) return [];\n  let min = Math.min(...lst);\n\
    \  let max = Math.max(...lst);\n  return lst.reduce((acc, val) => {\n    acc.push(val\
    \ == min ? min : val == max ? max : val);\n    return acc;\n  }, []);\n}\n", " \
    \ const new_lst = [];\n  for (let i=0; i<lst.length; i++){\n    const min = Math.min(lst[i],\
    \ lst[i-1]);\n    const max = Math.max(lst[i], lst[i-1]);\n    new_lst.push([min,\
    \ max]);\n  }\n  return new_lst;\n}", "    lst = lst.slice();\n    lst.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    return lst;\n}\n</code>\n<|/ a |>\n\
    <| a tags=sorting,algorithm,javascript dscore=0 |>\n<code>", "    lst = lst.sort();\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(lst[i] === lst[i+1]){\n\
    \            continue;\n        }\n        if(!(i == 0 && lst[i] === lst[lst.length-1])){\n\
    \            lst = lst.sort();\n        }\n    }\n    return lst;\n}\n", "  var\
    \ len = lst.length;\n  if (len < 2) return lst;\n  var min = lst[0];\n  var max\
    \ = lst[0];\n  for (var i = 0; i < len - 1; i++) {\n    if (lst[i] < min) {\n\
    \      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n  \
    \  }\n  }\n  var temp = [min, max];\n  for (var i = 0; i < len - 1; i++) {\n \
    \   var k = lst[i];\n    if (lst[i] < min) {\n      lst[i] = temp[0];\n      temp[0]\
    \ = k;\n    }\n    else if (lst[i] > max) {\n      lst[i] = temp[1];\n      temp[1]\
    \ = k;\n    }\n  }\n  return lst;\n}\n", "  var minEle = lst[0];\n  var maxEle\
    \ = lst[0];\n  for (var i = 1; i < lst.length; i++){\n    if (lst[i] < minEle){\n\
    \      minEle = lst[i];\n    }\n    if (lst[i] > maxEle){\n      maxEle = lst[i];\n\
    \    }\n  }\n\n  var minInd = 0;\n  var maxInd = lst.length - 1;\n  while (minInd\
    \ < maxInd){\n    var swap = lst[minInd];\n    lst[minInd] = lst[maxInd];\n  \
    \  lst[maxInd] = swap;\n    minInd++;\n    maxInd--;\n  }\n  return lst;\n}\n\n",
  "  var minElem = lst.shift();\n  lst.forEach(function(element){\n    if(element\
    \ < minElem){\n      lst.push(minElem);\n    }\n  });\n  return lst;\n}\n", " \
    \ const sorted = lst.slice();\n  while (sorted.length > 1) {\n    sorted.sort((a,b)\
    \ => {\n      if(a>b) return 1;\n      if(a<b) return -1;\n      return 0;\n \
    \   });\n  }\n  return sorted;\n}\n*/\n</code>\n<|/ a tags=javascript,sorting\
    \ dscore=5 |>\n<| c |>\nWhat about negative numbers? Will it sort them like positive\
    \ numbers?\n<|/ c |>\n<| c |>\nyes, negative numbers would be sorted as positive\
    \ ones, that is the trick\n<|/ c |>\n<| c |>\nwhat about `[5,4,3,2,1]` will this\
    \ sort to `[1,2,3,4,5]`\n<|/ c |>\n<| c |>\nyes, it will sort to `[1,2,3,4,5]`\n\
    <|/ c |>\n<| c |>\nWhy do we need to clone `lst`?\n<|/ c |>\n<| a |>\n<code>",
  "    var lst2=[];\n    var min=lst[0];\n    var max=lst[0];\n    for(var i=1;i<lst.length;i++){\n\
    \        if(lst[i]<min){\n            min=lst[i];\n        }\n        if(lst[i]>max){\n\
    \            max=lst[i];\n        }\n    }\n    for(var i=0;i<lst.length;i++){\n\
    \        lst2.push(min+((max-min)/2)*(lst[i]-min));\n    }\n    return lst2;\n\
    }\n", "  if(lst.length <= 1){ return lst; }\n  var res = [],\n  m = Math.min(lst[0],\
    \ lst[lst.length - 1]);\n  for(var i = 0; i <= lst.length; i++){\n    if(i ===\
    \ lst.length - 1){ res.push(lst[i]); }\n    else if(lst[i] > m){ res.push(lst[i]);\
    \ }\n    else{ res.push(lst[i + 1]); }\n  }\n  return res;\n}\n</code>\n<|/ a\
    \ tags=sorting,javascript |>\n<| a tags=sorting,javascript |>\n<code>\nvar strangeSort\
    \ = function (str) {\n  return str.split('').sort().join('');\n};\n", "\tconst\
    \ sorted_list = lst.sort((a,b) => b - a);\n\tconst strange_list = [];\n\tfor (let\
    \ i = 0; i < lst.length; i++) {\n\t\tconst index = sorted_list.indexOf(lst[i]);\n\
    \t\tif (index > -1) {\n\t\t\tstrange_list.push(index);\n\t\t}\n\t}\n\treturn strange_list;\n\
    }\n", "  let sortedlist = lst\n  let min_index = sortedlist.length\n  for (let\
    \ i = 0; i < sortedlist.length; i++){\n    if (sortedlist[i] < sortedlist[min_index]){\n\
    \      min_index = i\n    }\n  }\n  sortedlist.splice(min_index, 1)\n  sortedlist.sort()\n\
    \  return sortedlist\n}\n", "  var _lst = lst.slice();\n  for(var i=0; i<_lst.length;\
    \ i++){\n    if(_lst[i]<lst[0])\n      lst[0] = lst[0];\n    if(_lst[i]>_lst[_lst.length-1])\n\
    \      _lst[_lst.length-1] = lst[_lst.length-1];\n  }\n  return _lst;\n}\n", " \
    \   let lst_len = lst.length;\n    let min = 0;\n    let max = lst_len-1;\n  \
    \  while (min < max){\n        while (min < max && lst[min] < lst[max]){\n   \
    \         min++;\n        }\n        while (min < max && lst[min] > lst[max]){\n\
    \            max--;\n        }\n        if (min > max){\n            break;\n\
    \        }\n        let temp = lst[max];\n        lst[max] = lst[min];\n     \
    \   lst[min] = temp;\n    }\n    return lst;\n}\n", "    if(!lst.length){\n  \
    \      return lst\n    }\n\n    let minIndex = lst[0]\n    for(let i=1;i<lst.length;i++){\n\
    \        if(lst[i] < minIndex){\n            minIndex = lst[i]\n        }\n  \
    \  }\n\n    let maxIndex = lst[0]\n    for(let i=1;i<lst.length;i++){\n      \
    \  if(lst[i] > maxIndex){\n            maxIndex = lst[i]\n        }\n    }\n\n\
    \    for(let i=0;i<lst.length;i++){\n        if(lst[i] < minIndex){\n        \
    \    lst[i]=minIndex\n        }else if(lst[i] > maxIndex){\n            lst[i]=maxIndex\n\
    \        }\n    }\n\n    return lst\n}\n</code>\n<|/ a tags=javascript,sorting\
    \ dscore=1 |>\n<| a dscore=1 |>\nThe accepted answer is actually correct, although\
    \ in practice you never need to sort an array in ascending order. Most programming\
    \ languages automatically sort arrays in descending order when they are created.\
    \ However, if you need to sort an array in ascending order in JavaScript, here\
    \ is a function that can do that for you. \n<code>\nvar ascendingSort = function(arr){\n\
    \    arr.sort(function(a, b){\n        return a > b;\n    });\n}\n</code>\nThis\
    \ function uses JavaScript's sort method to sort the array in ascending order.\
    \ This function can also be used to sort arrays in descending order.\n<code>\n\
    var descendingSort = function(arr){\n    arr.sort(function(a, b){\n        return\
    \ a < b;\n    });\n}\n</code>\nThis function uses JavaScript's sort method to\
    \ sort the array in descending order. This function can also be used to sort arrays\
    \ in ascending order.\n<|/ a tags=javascript,sorting |>\n<| a tags=javascript,sorting\
    \ |>\n<code>\nconst sort = (arr) => {\n  let isDescending = false\n  arr.sort((a,\
    \ b) => {\n    const ascOrDes = isDescending ? 'asc' : 'desc'\n    console.log(isDescending)\n\
    \    return a > b ? 1 : -1 * ascOrDes\n  })\n}\n\nconst arr1 = [4, 6, 8, 5, 3,\
    \ 7, 2, 9, 1]\nconst arr2 = [9, 8, 7, 6, 5, 4, 3, 2, 1]\nconst arr3 = [9, 8, 7,\
    \ 6, 5, 6, 5, 4, 3]\nconst arr4 = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n\nsort(arr1)\n\
    sort(arr2)\nsort(arr3)\nsort(arr4)</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=javascript,sorting\
    \ |>\nYou can use .sort() to sort arrays in JavaScript:\n\n<code>\nvar arr = [4,\
    \ 6, 8, 5, 3, 7, 2, 9, 1]\n", "  let min_idx = lst.findIndex( i => i > lst[0])\n\
    \  let max_idx = lst.findIndex( i => i < lst[lst.length - 1])\n  let mid = min_idx\
    \ + ((max_idx - min_idx) >>> 1);\n  return lst.sort((a,b)=>{\n    return a > b\
    \ ? 1 : a < b ? -1 : 0\n  })\n}", "    let reversed_lst = lst.reverse();\n   \
    \ let sorted_lst = reversed_lst.sort();\n    return sorted_lst.reverse();\n}\n",
  "    for(let i = 0; i< lst.length; i++){\n        let min = i;\n        for(let\
    \ j = i; j < lst.length; j++){\n            if(lst[j] < lst[min]){\n         \
    \       min = j;\n            }\n        }\n        let temp = lst[i];\n     \
    \   lst[i] = lst[min];\n        lst[min] = temp;\n    }\n    return lst;\n}\n",
  "    if(lst.length == 0){\n        return []\n    }\n    let min_value = lst[0]\n\
    \    let max_value = lst[0]\n    lst.forEach((item) => {\n        if(item < min_value){\n\
    \            min_value = item\n        }\n        if(item > max_value){\n    \
    \        max_value = item\n        }\n    })\n    let arr = [min_value, max_value]\n\
    \    return arr.concat(lst.slice(2)).concat(arr.slice(0,1))\n}\n", "    var min\
    \ = Math.min(...lst);\n    var max = Math.max(...lst);\n    var res = [];\n  \
    \  for(var i=min; i<=max; i++){\n        res.push(lst[i]);\n    }\n    return\
    \ res;\n}\n", "  if (lst.length < 1) return lst;\n  let min_element = lst[0];\n\
    \  let max_element = lst[0];\n  for(let i = 1; i < lst.length; i++){\n    min_element\
    \ = Math.min(lst[i], min_element);\n    max_element = Math.max(lst[i], max_element);\n\
    \  }\n  let mid_element = min_element + (max_element - min_element)/2;\n  for(let\
    \ i = 1; i < lst.length; i++){\n    if (lst[i] < mid_element) lst[i] = mid_element;\n\
    \    else if (lst[i] > mid_element) lst[i] = max_element;\n    else lst[i] = min_element;\n\
    \    mid_element += max_element - min_element;\n  }\n  return lst;\n}\n", "\t\
    lst.sort((a, b) => b - a);\n\treturn lst;\n}\n", "\tlet sort = [];\n\tlet min\
    \ = (lst.length ? lst[0] : Infinity);\n\tlet max = -Infinity;\n\tfor(let i = 0;\
    \ i < lst.length; i++){\n\t\tsort.push(lst[i]);\n\t\tif( lst[i] < min){\n\t\t\t\
    min = lst[i];\n\t\t}\n\t\tif( lst[i] > max){\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\
    \tfor( let i = sort.length - 1; i >= 0; i--){\n\t\tsort[i] = (sort[i] - min) /\
    \ (max - min);\n\t}\n\treturn sort;\n}\n", "  // create an array with all the\
    \ integers\n  var array = [];\n  // copy the elements from the array into the\
    \ new one\n  for(var i=0; i<lst.length; i++){\n    array.push(lst[i]);\n  }\n\
    \  // sort it\n  array.sort(function(a, b){\n    // sort from smallest to largest\n\
    \    return a-b;\n  });\n  // return result array\n  return array;\n}\n", "  lst.sort();\n\
    \  var sorted_lst = [];\n  sorted_lst.push(lst[0]);\n  for(var i = 1; i < lst.length;\
    \ i++){\n    if(lst[i] > lst[i-1]){\n      sorted_lst.push(lst[i]);\n    }\n \
    \ }\n  return sorted_lst;\n}\n", "    if (lst.length <= 1) return lst;\n    var\
    \ pivot = lst[0];\n    var tmp = [pivot];\n    for (var i=0, len=lst.length; i\
    \ < len; i++){\n        if (lst[i] < pivot) {\n            tmp.push(lst[i]);\n\
    \        }\n    }\n    return strange_sort_list(tmp).concat(pivot);\n}\n", " \
    \ lst.sort(function(a, b){\n    return b - a;\n  });\n}", "    var min = Math.min.apply(Math,\
    \ lst);\n    var max = Math.max.apply(Math, lst);\n    var res = [];\n    for\
    \ (var i = 0; i<lst.length; i++){\n        res.push(lst[max-1-i]); //max and min\
    \ positions swapped\n        res.push(lst[i]);\n        res.push(lst[min+i]);\n\
    \    }\n    return res;\n}\n", "  // Sort the array until it contains the minimum\
    \ value.\n  // Then sort the array from that value onwards.\n  // Then repeat\
    \ until array is sorted correctly.\n  var sorted_array = [];\n  for(var i=0; i<lst.length-1;\
    \ i++){\n    sorted_array[i] = lst[i];\n  }\n  sorted_array.sort();\n  for(var\
    \ i=0; i<sorted_array.length; i++){\n    for(var j=0; j<lst.length-1; j++){\n\
    \      if(sorted_array[i] > sorted_array[j]){\n        sorted_array[j] = sorted_array[i];\n\
    \      }\n    }\n  }\n  return sorted_array;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=sorting,javascript,arrays |>\nSort a javascript array by multiple conditions\n\
    Use Array.sort for sorting an array by multiple conditions. This is quite flexible\
    \ and you can define several sort directions, to keep sorting in descending or\
    \ ascending order.\n\n<code>", "    var sorted = [];\n    sorted.push(lst[0]);\n\
    \    for(var i=1;i<lst.length;i++){\n        if(sorted[i-1]>lst[i]){\n       \
    \     sorted.push(lst[i]);\n        }\n    }\n    return sorted;\n}\n", "    \n\
    \    if(lst.length == 0)\n        return [];\n\n    var min = lst[0],\n      \
    \  max = lst[0],\n        len = lst.length,\n        i;\n\n    for (i = 1; i <\
    \ len; i++)\n    {\n        if (lst[i] < min)\n            min = lst[i];\n\n \
    \       if (lst[i] > max)\n            max = lst[i];\n    }\n\n    var res = [];\n\
    \    for (i = 0; i < len; i++)\n    {\n        if (lst[i] < min)\n        {\n\
    \            res.push(min);\n            min = lst[i];\n        }\n\n        else\
    \ if (lst[i] > max)\n        {\n            res.push(max);\n            max =\
    \ lst[i];\n        }\n        else\n        {\n            res.push(lst[i]);\n\
    \        }\n    }\n\n    return res;\n}\n", "    // We always want to start with\
    \ the minimum number,\n    // then maximum number, then minimum and so on.\n \
    \   // We always need to keep track of the current minimum and maximum,\n    //\
    \ but we will only swap them if they should swap positions.\n    // We can never\
    \ swap minimum with maximum, since minimum can never be greater than maximum.\n\
    \    let min_idx = lst.length - 1;\n    let max_idx = 0;\n\n    // We want to\
    \ swap items in the list once until we reach the end of the list,\n    // so each\
    \ time we swap we will increment the index of the minimum we swap to.\n    let\
    \ swap_index;\n\n    // Do while loop until we either swap all the items or we\
    \ reach the end of the list\n    do {\n        // Swap the minimum with the maximum\
    \ index\n        swap_index = min_idx;\n        [lst[min_idx], lst[max_idx]] =\
    \ [lst[max_idx], lst[min_idx]];\n\n        // Swap minimum index to next index\n\
    \        min_idx += 1;\n        max_idx += 1;\n\n        // If we swap all items,\
    \ then we reached the end of the list\n        if (min_idx == max_idx) {\n   \
    \         break;\n        }\n    } while (min_idx < max_idx);\n\n    return lst;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI used the answer above, however\
    \ my code does not seem to work if you have an empty array or an array with only\
    \ 1 item (ex: a = [1,2]). \nWhat I did was just check to make sure it had more\
    \ than 1 item before I entered the for loop. \n<code>", "  lst.sort(function(a,\
    \ b){\n    // Sort first by minimum number\n    if( a < b ) return -1;\n    //\
    \ Sort first by maximum number\n    if( a > b ) return 1;\n    // Sort by number\n\
    \    return a - b;\n  });\n  return lst;\n}\n</code>\n<|/ a tags=javascript |>\n\
    <| a dscore=2 |>\nTry this:\n<code>\nvar numbers = [20, 21, 5, 6, 30];\n\nnumbers.sort(function(a,\
    \ b) {\n    return a - b;\n});\n", "    for(var i = 0; i < lst.length; i++){\n\
    \        var min = i;\n        var max = lst.length - 1;\n        while(max >=\
    \ min){\n            var temp = lst[max];\n            lst[max] = lst[min];\n\
    \            lst[min] = temp;\n            max -= 1;\n            min += 1;\n\
    \        }\n    }\n    return lst;\n}\n", "  var sorted = [];\n  for (var i =\
    \ 0; i < lst.length; i++) {\n    sorted.push(lst[i]);\n  }\n  sorted.sort(function(a,b){\n\
    \    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n\
    \    } else {\n      return 0;\n    }\n  });\n  return sorted;\n}\n\n", "  let\
    \ min_index = lst.indexOf(lst.min());\n  let max_index = lst.indexOf(lst.max());\n\
    \  if(min_index > max_index){\n    let temp = min_index;\n    min_index = max_index;\n\
    \    max_index = temp;\n  }\n\n  let temp = max_index;\n  max_index = min_index;\n\
    \  min_index = temp;\n\n  while(true){\n    for(let i = min_index; i < max_index;\
    \ i++){\n      let temp = lst[i];\n      lst[i] = lst[i+1];\n      lst[i+1] =\
    \ temp;\n    }\n    if(min_index === max_index){\n      break;\n    }\n    min_index++;\n\
    \    max_index--;\n  }\n  return lst;\n}\n", "  let arr = [];\n  for(let i = 0;\
    \ i < lst.length; i++){\n    arr.push(lst[i]);\n  }\n  arr.sort();\n  return arr;\n\
    }\n", "  var sorted = lst,\n      len = lst.length,\n      min = sorted[0],\n\
    \      max = sorted[0],\n      index;\n  for(var i = 1; i < len; i++){\n    if(min\
    \ > sorted[i]){\n      min = sorted[i];\n      index = i;\n    }\n    if(max <\
    \ sorted[i]){\n      max = sorted[i];\n      index = i;\n    }\n  }\n  while(index\
    \ !== (len = lst.length)){\n    sorted[index] = sorted[len];\n    sorted[len]\
    \ = index;\n    index++;\n    len--;\n  }\n  return sorted;\n}\n", "    var lstCopy\
    \ = lst;\n    for(var i = 0; i <= lstCopy.length - 1; i++){\n        var min =\
    \ i;\n        for(var j = i + 1; j < lstCopy.length; j++){\n            if(lstCopy[j]\
    \ < lstCopy[min]){\n                min = j;\n            }\n        }\n     \
    \   var temp = lstCopy[i];\n        lstCopy[i] = lstCopy[min];\n        lstCopy[min]\
    \ = temp;\n    }\n    return lstCopy;\n}", "    for(var i=0; i<lst.length; i++){\n\
    \        var min = i;\n        for(var j=i; j<lst.length; j++){\n            if(lst[j]\
    \ < lst[min]){\n                min = j;\n            }\n        }\n        if(min\
    \ != i){\n            var tmp = lst[i];\n            lst[i] = lst[min];\n    \
    \        lst[min] = tmp;\n        }\n    }\n    return lst;\n}\n</code>\n<|/ a\
    \ tags=javascript,sorting |>\n<| c |>\nThis is definitely the cleanest solution.\
    \  It's unfortunate that you need to do so many loops, but it does work.  I like\
    \ it.\n<|/ c |>\n<| c |>\nThis has the advantage of being very fast for small\
    \ lists.  For larger lists it's about the same as [sort algorithms](https://en.wikipedia.org/wiki/Sorting_algorithm#Comparison_of_algorithms)\
    \ on average.\n<|/ c |>\n<| a dscore=5 |>\nThis might not be the best way, but\
    \ it worked for me:\n<code>", "    while(lst.length){\n        for(let i=lst.length-1;i>=0;i--){\n\
    \            let min=Math.min.apply(Math,lst);\n            if(min!==lst[i]){\n\
    \                let tmp=lst[i];\n                lst[i]=min;\n              \
    \  lst[min]=tmp;\n            }\n        }\n    }\n    return lst;\n}\nvar test=strange_sort_list([2,3,5,6,7,9]);",
  "    let min = lst[0];\n    let max = lst[0];\n    for(let i=1; i<lst.length; i++){\n\
    \        if(lst[i] < min){\n            min = lst[i];\n        }\n        if(lst[i]\
    \ > max){\n            max = lst[i];\n        }\n    }\n    let res = [];\n  \
    \  for(let i=min; i<=max; i++){\n        res.push(i);\n    }\n    console.log(res);\n\
    }\n\nstrange_sort_list([1, 2, 3, 4]);\nstrange_sort_list([5, 5, 5, 5]);\nstrange_sort_list([]);",
  "    for(var i=lst.length-1, j=0; i>j;){\n        var swap = lst[i]\n        lst[i]\
    \ = lst[j]\n        lst[j] = swap\n        i--; j++\n    }\n    return lst\n}",
  "    if (lst.length === 0) {\n        return lst;\n    }\n    let min = lst[0];\n\
    \    let max = lst[0];\n    for (let i = 0; i < lst.length; i++){\n        if\
    \ (lst[i] < min){\n            min = lst[i];\n        }\n        if (lst[i] >\
    \ max){\n            max = lst[i];\n        }\n    }\n    return [min, ...strange_sort_list(lst.slice(1).sort((a,\
    \ b) => a < b ? 1 : a > b ? -1 : 0))];\n}\n\n", "  const sorted_list = lst\n \
    \   .sort((a,b)=>{\n      return a - b;\n    });\n  for(let i=0;i<sorted_list.length;i++){\n\
    \    for(let j=0;j<sorted_list.length;j++){\n      if(j>i){\n        if(sorted_list[i]>sorted_list[j]){\n\
    \          const temp = sorted_list[i];\n          sorted_list[i] = sorted_list[j];\n\
    \          sorted_list[j] = temp;\n        }\n      }\n    }\n  }\n  return sorted_list;\n\
    }\n</code></pre>\n        </article>\n    </section>\n\n\n\n\n</div>\n\n<nav>\n\
    \    <h2><a href=\"index.html\">Home</a></h2><h3>Classes</h3><ul><li><a href=\"\
    HTTP.html\">HTTP</a></li><li><a href=\"Magister.html\">Magister</a></li><li><a\
    \ href=\"Session.html\">Session</a></li></ul><h3>Global</h3><ul><li><a href=\"\
    global.html#AlexaRequest\">AlexaRequest</a></li><li><a href=\"global.html#CallRecHandler\"\
    >CallRecHandler</a></li><li><a href=\"global.html#Chrome\">Chrome</a></li><li><a\
    \ href=\"global.html#createAlexaRequest\">createAlexaRequest</a></li><li><a href=\"\
    global.html#createMagisterHandler\">createMagisterHandler</a></li><li><a href=\"\
    global.html#createSession\">createSession</a></li><li><a href=\"global.html#deleteSession\"\
    >deleteSession</a></li><li><a href=\"global.html#enumerateSessions\">enumerateSessions</a></li><li><a\
    \ href=\"global.html#executeLambda\">executeLambda</a></li><li><a href=\"global.html#getAccountInfo\"\
    >getAccountInfo</a></li><li><a href=\"global.html#getConfig\">getConfig</a></li><li><a\
    \ href=\"global.html#getInstallationId\">getInstallationId</a></li><li><a href=\"\
    global.html#getSession\">getSession</a></li><li><a href=\"global.html#launch\"\
    >launch</a></li><li><a href=\"global.html#listSkillsOfUser\">listSkillsOfUser</a></li><li><a\
    \ href=\"global.html#loadAlexaSkill\">loadAlexaSkill</a></li><li><a href=\"global.html#mergeSessionAttributes\"\
    >mergeSessionAttributes</a></li><li><a href=\"global.html#omitUnusedSessionAttributes\"\
    >omitUnusedSessionAttributes</a></li><li><a href=\"global.html#setAccountInfo\"\
    >setAccountInfo</a></li><li><a href=\"global.html#setInstallationId\">setInstallationId</a></li><li><a\
    \ href=\"global.html#setSession\">setSession</a></li><li><a href=\"global.html#setUser\"\
    >setUser</a></li><li><a href=\"global.html#updateAttributes\">updateAttributes</a></li><li><a\
    \ href=\"global.html#updateUserAttributes\">updateUserAttributes</a></li><li><a\
    \ href=\"global.html#updateUserInfo\">updateUserInfo</a></li></ul>\n</nav>\n\n\
    <br class=\"clear\">\n\n<footer>\n    Documentation generated by <a href=\"https://github.com/jsdoc3/jsdoc\"\
    >JSDoc 3.5.5</a> on Thu Aug 11 2018 14:19:47 GMT+0100 (BST)\n</footer>\n\n<script>\
    \ prettyPrint(); </script>\n<script src=\"scripts/linenumber.js\"> </script>\n\
    </body>\n</html>\n\n<|/ file ext=", "  if(lst.length == 0){\n    return lst\n\
    \  }\n\n  var first_index = lst.findIndex((elem)=>elem < lst[0])\n  var last_index\
    \ = lst.findIndex((elem)=>elem > lst[lst.length-1])\n\n  var temp = lst[0]\n\n\
    \  for(var i = first_index + 1; i <= last_index; i++){\n    temp = lst[i]\n  \
    \  lst[i] = lst[i-1]\n    lst[i-1] = temp\n  }\n\n  return lst\n}\n", "    let\
    \ sorted = [];\n    let counter = 1;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(counter === 1){\n            sorted.push(lst[i]);\n            counter++;\n\
    \        } else {\n            if(lst[i] > sorted[sorted.length-1]){\n       \
    \         sorted.push(lst[i]);\n                counter++;\n            }\n  \
    \      }\n    }\n    return sorted;\n}\n", "    if (lst.length <= 1){\n      \
    \  return lst\n    }\n    let min1 = Number.MAX_SAFE_INTEGER\n    let max1 = Number.MIN_SAFE_INTEGER\n\
    \    let min2 = Number.MAX_SAFE_INTEGER\n    let max2 = Number.MIN_SAFE_INTEGER\n\
    \    for (let i = 0; i < lst.length; i++){\n        if (lst[i] < min1){\n    \
    \        min1 = lst[i]\n        } else if (lst[i] > max1){\n            max1 =\
    \ lst[i]\n        } else if (lst[i] < min2){\n            min2 = lst[i]\n    \
    \    } else if (lst[i] > max2){\n            max2 = lst[i]\n        }\n    }\n\
    \    let l = [max1, min2, max1, min2, max1]\n    let sorted = []\n    while (l.length){\n\
    \        sorted.push(l.pop())\n    }\n    return sorted\n}\n</code>\n<|/ a dscore=2\
    \ tags=javascript,arrays |>\n<| c |>\nThanks, i will test it. But can you please\
    \ explain me the algorithm of strange sorting in detail?\n<|/ c |>\n<| c |>\n\
    I've added comments to the code. Also added link to explanation on the algorithm.\n\
    <|/ c |>\n<| c |>\nSorry, but i think that is not what i asked. In the example\
    \ you gave, how can the array be ordered as you describe in 'Sorting' section?\
    \ i need it to understand better the algorithm and how to implement it in my code.\n\
    <|/ c |>\n<| c |>\nThe point of the code is to sort it using the strange sorting\
    \ algorithm. I'll add comments to the code too.\n<|/ c |>\n<| c |>\nOk, i have\
    \ added comments to the code as you described it.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>", "  if (lst.length <= 0){\n    return lst;\n  }\n  if (lst.length == 1){\n\
    \    return lst;\n  }\n  var minIndex = 0, maxIndex = lst.length - 1, midIndex\
    \ = Math.floor(lst.length / 2);\n  while (minIndex < maxIndex){\n    // console.log('minIndex:'\
    \ + minIndex + ' maxIndex:' + maxIndex + ' midIndex:' + midIndex);\n    // Move\
    \ minIndex and maxIndex to the middle of the list\n    while (lst[minIndex] >\
    \ lst[maxIndex]){\n      minIndex++;\n    }\n    while (lst[minIndex] < lst[maxIndex]){\n\
    \      maxIndex--;\n    }\n    // Move minIndex and maxIndex back one position\n\
    \    minIndex--;\n    maxIndex++;\n    // console.log('minIndex:' + minIndex +\
    \ ' maxIndex:' + maxIndex + ' midIndex:' + midIndex);\n    // Move the middle\
    \ element back to the start\n    lst[minIndex] = lst[maxIndex];\n    // console.log('minIndex:'\
    \ + minIndex + ' maxIndex:' + maxIndex + ' midIndex:' + midIndex);\n    // Move\
    \ minIndex and maxIndex to the middle of the list\n    while (lst[minIndex] >\
    \ lst[maxIndex]){\n      minIndex++;\n    }\n    while (lst[minIndex] < lst[maxIndex]){\n\
    \      maxIndex--;\n    }\n  }\n  return lst;\n}\n", "  if(lst.length < 2){\n\
    \    return lst;\n  }\n  var minValue = lst[0];\n  var maxValue = lst[0];\n  for(var\
    \ i=1;i<lst.length;i++){\n    if(lst[i] < minValue){\n      minValue = lst[i];\n\
    \    }\n    if(lst[i] > maxValue){\n      maxValue = lst[i];\n    }\n  }\n  if(maxValue\
    \ < minValue){\n    return lst;\n  }\n  var temp = minValue;\n  minValue = maxValue;\n\
    \  maxValue = temp;\n  var swappedValue = [];\n  for(var i=0;i<lst.length;i++){\n\
    \    if(lst[i] < minValue){\n      swappedValue.push(lst[i]);\n      lst[i] =\
    \ lst[i] + minValue;\n    }\n    if(lst[i] > maxValue){\n      swappedValue.push(lst[i]);\n\
    \      lst[i] = lst[i] - maxValue;\n    }\n  }\n  temp = maxValue;\n  minValue\
    \ = maxValue;\n  maxValue = temp;\n  var sortedList = [];\n  for(var i=0;i<swappedValue.length;i++){\n\
    \    sortedList.push(swappedValue[i]);\n  }\n  return sortedList;\n}\nvar numberArray\
    \ = [1,2,3,4,5,6,7,8,9];", "  let min_index = lst.map((x,ind)=>ind).indexOf(0);\n\
    \  let max_index = lst.map((x,ind)=>ind).indexOf(lst.length-1);\n  let min = lst[min_index];\n\
    \  let max = lst[max_index];\n  let new_list = [min];\n  let rest = lst.filter((x,\
    \ ind)=>ind!=min_index && ind!=max_index);\n  new_list.push(max);\n  new_list\
    \ = new_list.concat(strange_sort_list(rest));\n  return new_list;\n}\n", "  var\
    \ new_lst = lst;\n  new_lst.sort((a,b) => {\n    if (a === b){\n      return 0;\n\
    \    }\n    return a > b ? 1 : -1;\n  });\n  return new_lst;\n}", "  var length\
    \ = lst.length\n    , i = length\n    , j = 0\n    , new_lst = lst\n    ;\n  while(i\
    \ < length){\n    j = i\n    while(j > 0 && (new_lst[j - 1] > new_lst[j])){\n\
    \      new_lst[j] = new_lst[j - 1]\n      j--\n    }\n    new_lst[j++] = new_lst[i]\n\
    \    i++\n  }\n  return new_lst\n}\n", "    if(lst.length <= 1){\n        return\
    \ lst\n    }\n    var min = lst[0],\n        max = lst[0]\n    for(var i = 1;\
    \ i < lst.length; i++){\n        if(lst[i] < min){\n            min = lst[i]\n\
    \        }\n        if(lst[i] > max){\n            max = lst[i]\n        }\n \
    \   }\n    var ret = []\n    for(var i = min; i <= max; i++){\n        ret.push(i)\n\
    \    }\n    for(var i = 1; i < lst.length; i++){\n        ret.push(lst[i])\n \
    \   }\n    return ret\n}", "    var sorted = [];\n    for(var i=0;i<lst.length;i++){\n\
    \        sorted.push(i);\n    }\n    sorted.sort(function(a, b){\n        var\
    \ min = a;\n        var max = b;\n        var maxIndex = null;\n        for(var\
    \ i=0;i<lst.length;i++){\n            if(min > lst[i]){\n                min =\
    \ lst[i];\n                maxIndex = i;\n            }else if(max < lst[i]){\n\
    \                max = lst[i];\n            }\n        }\n        return maxIndex;\n\
    \    });\n    return sorted;\n}\n", "    if (!lst.length) return [];\n    var\
    \ a = lst.shift(),\n        min = lst.length ? lst[0] : null,\n        max = lst.length\
    \ ? lst[0] : null,\n        c, d, t;\n    for (var i = 1; i < lst.length; i++){\n\
    \        c = lst[i];\n        d = lst[i-1];\n        if (min > c) {\n        \
    \    min = c;\n        } else if (min > d) {\n            min = d;\n        }\
    \ else if (max < c) {\n            max = c;\n        } else if (max < d) {\n \
    \           max = d;\n        }\n    }\n    return [min, max, strange_sort_list(lst)];\n\
    }\n", "  if(lst.length <= 1){\n    return lst;\n  }\n  var sorted_lst = [lst[0]];\n\
    \  for(var i = 1; i < lst.length; i++){\n    var val = lst[i];\n    var index\
    \ = sorted_lst.indexOf(val);\n    if(index === -1){\n      sorted_lst.push(val);\n\
    \    }else{\n      if(index > 0 && sorted_lst[index-1] > val){\n        sorted_lst[index]\
    \ = val;\n      }\n    }\n  }\n  return sorted_lst;\n}\n", "  \n  return lst.sort(function(a,\
    \ b){\n    var minA = Math.min(a, b), minB = Math.min(b, minA);\n    return Math.max(minA,\
    \ minB);\n  });\n}\n\n", "    var sorted = lst;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        for(var j = 0; j < sorted.length; j++){\n            if(sorted[j]\
    \ > sorted[j+1]){\n                var tmp = sorted[j];\n                sorted[j]\
    \ = sorted[j+1];\n                sorted[j+1] = tmp;\n            }\n        }\n\
    \    }\n    return sorted;\n}\n", "\tfor(var i = 0; i < lst.length; i++){\n\t\t\
    for(var j = i+1; j < lst.length; j++){\n\t\t\tvar a = lst[i];\n\t\t\tvar b = lst[j];\n\
    \t\t\tif(a>b){\n\t\t\t\tvar t = a;\n\t\t\t\ta = b;\n\t\t\t\tb = t;\n\t\t\t}\n\t\
    \t\tif(a>b){\n\t\t\t\tvar t = a;\n\t\t\t\ta = b;\n\t\t\t\tb = t;\n\t\t\t}\n\t\t\
    \tif(a>b){\n\t\t\t\tvar t = a;\n\t\t\t\ta = b;\n\t\t\t\tb = t;\n\t\t\t}\n\t\t\t\
    if(a>b){\n\t\t\t\tvar t = a;\n\t\t\t\ta = b;\n\t\t\t\tb = t;\n\t\t\t}\n\t\t\t\
    if(a>b){\n\t\t\t\tvar t = a;\n\t\t\t\ta = b;\n\t\t\t\tb = t;\n\t\t\t}\n\t\t\t\
    if(a>b){\n\t\t\t\tvar t = a;\n\t\t\t\ta = b;\n\t\t\t\tb = t;\n\t\t\t}\n\t\t\t\
    if(a>b){\n\t\t\t\tvar t = a;\n\t\t\t\ta = b;\n\t\t\t\tb = t;\n\t\t\t}\n\t\t\t\
    if(a>b){\n\t\t\t\tvar t = a;\n\t\t\t\ta = b;\n\t\t\t\tb = t;\n\t\t\t}\n\t\t\t\
    if(a>b){\n\t\t\t\tvar t = a;\n\t\t\t\ta = b;\n\t\t\t\tb = t;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn lst;\n}", "\tlst.sort(function(a, b){\n\t\tif(a<b){return -1};\n\
    \t\tif(a>b){return 1};\n\t\tif(a==b){return 0};\n\t});\n\treturn lst;\n};\n\n",
  "    if(lst.length <= 0){\n        return lst;\n    }\n\n    var minimum = lst[0];\n\
    \    var maximum = lst[0];\n\n    for(var i = 1; i < lst.length; i++){\n     \
    \   minimum = Math.min(minimum, lst[i]);\n        maximum = Math.max(maximum,\
    \ lst[i]);\n    }\n\n    minimum = minimum + maximum;\n    maximum = minimum -\
    \ maximum;\n\n    var new_lst = [];\n    new_lst.push(minimum);\n    new_lst.push(maximum);\n\
    \    new_lst.push(minimum);\n\n    while(new_lst.length < lst.length){\n     \
    \   new_lst.push(lst[0]);\n    }\n\n    for(var i = lst.length - 1; i > 0; i--){\n\
    \        lst[i] = new_lst[i - 1];\n    }\n\n    return lst;\n}\n", "  var result\
    \ = [];\n  lst = lst.slice();\n  var minValue = lst[0];\n  var maxValue = lst[0];\n\
    \  lst.map(function(value){\n    if (value > maxValue) maxValue = value;\n   \
    \ if (value < minValue) minValue = value;\n  });\n  lst.map(function(value){\n\
    \    if (value > maxValue) maxValue = value;\n    if (value < minValue) minValue\
    \ = value;\n  });\n  lst.map(function(value){\n    if (value < minValue) minValue\
    \ = value;\n  });\n  lst.map(function(value){\n    if (value < minValue) minValue\
    \ = value;\n  });\n  lst.map(function(value){\n    if (value > maxValue) maxValue\
    \ = value;\n  });\n  lst.map(function(value){\n    if (value < minValue) minValue\
    \ = value;\n  });\n  lst.map(function(value){\n    if (value > maxValue) maxValue\
    \ = value;\n    if (value < minValue) minValue = value;\n  });\n  lst.map(function(value){\n\
    \    if (value < minValue) minValue = value;\n  });\n  lst.map(function(value){\n\
    \    if (value < minValue) minValue = value;\n  });\n  lst.map(function(value){\n\
    \    if (value > maxValue) maxValue = value;\n  });\n  lst.map(function(value){\n\
    \    if (value < minValue) minValue = value;\n  });\n  lst.map(function(value){\n\
    \    if (value > maxValue) maxValue = value;\n    if (value < minValue) minValue\
    \ = value;\n  });\n  lst.map(function(value){\n    if (value < minValue) minValue\
    \ = value;\n  });\n  lst.map(function(value){\n    if (value > maxValue) maxValue\
    \ = value;\n  });\n  lst.map(function(value){\n    if (value < minValue) minValue\
    \ = value;\n  });\n  lst.map(function(value){\n    if (value < minValue) minValue\
    \ = value;\n  });\n  lst.map(function(value){\n    if (value > maxValue) maxValue\
    \ = value;\n  });\n  lst.map(function(value){\n    if (value < minValue) minValue\
    \ = value;\n  });\n  lst.map(function(value){\n    if (value > maxValue) maxValue\
    \ = value;\n    if (value < minValue) minValue = value;\n  });\n  lst.map(function(value){\n\
    \    if (value < minValue) minValue = value;\n  });\n  lst.map(function(value){\n\
    \    if (value > maxValue) maxValue = value;\n  });\n  lst.map(function(value){\n\
    \    if (value < minValue) minValue = value;\n  });\n  lst.map(function(value){\n\
    \    if (value > maxValue) maxValue = value;\n    if (value < minValue) minValue\
    \ = value;", "    let smallest = Math.min(...lst);\n    let largest = Math.max(...lst);\n\
    \    let temp;\n    for(let i=0;i<lst.length;i++){\n        if(lst[i]<smallest){\n\
    \            temp = smallest;\n            smallest = lst[i];\n            lst[i]\
    \ = temp;\n        }\n        if(lst[i]>largest){\n            temp = largest;\n\
    \            largest = lst[i];\n            lst[i] = temp;\n        }\n    }\n\
    \    return [smallest,largest,...strange_sort_list(lst)].sort();\n}\n", "  if(lst.length\
    \ < 2) return lst;\n  lst.sort(function(a, b){\n    var diff = Math.abs(b - a);\n\
    \    if(diff > 0) return 1;\n    if(diff < 0) return -1;\n    return 0;\n  });\n\
    \  return lst;\n}\n", "\tif (lst.length <= 0){\n\t\treturn lst;\n\t}\n\tvar min\
    \ = lst[0],\n\t\tmax = lst[0];\n\tfor (var i = 1; i < lst.length; i++){\n\t\t\
    if (lst[i] < min){\n\t\t\tmin = lst[i];\n\t\t}\n\t\tif (lst[i] > max){\n\t\t\t\
    max = lst[i];\n\t\t}\n\t}\n\treturn [min, max, min];\n}\n", "  var max = Math.max.apply(null,\
    \ lst);\n  var min = Math.min.apply(null, lst);\n  var sorted = [max];\n  for(var\
    \ i=0;i<lst.length;i++){\n    if(lst[i] < min){\n      sorted.unshift(lst[i]);\n\
    \    }else if(lst[i] > max){\n      sorted.push(lst[i]);\n    }else{\n      sorted.push(min);\n\
    \    }\n  }\n  return sorted;\n}\n", "\tlet sorted = [];\n\tif(lst.length > 0){\n\
    \t\tlet min = lst[0];\n\t\tlet max = lst[0];\n\t\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\t\tif(lst[i] < min){\n\t\t\t\tmin = lst[i];\n\t\t\t}\n\t\t\telse if(lst[i]\
    \ > max){\n\t\t\t\tmax = lst[i];\n\t\t\t}\n\t\t}\n\t\tsorted.push(min);\n\t\t\
    sorted.push(max);\n\t\tfor(let i = 0; i < lst.length; i++){\n\t\t\tif(lst[i] !==\
    \ min && lst[i] !== max){\n\t\t\t\tsorted.push(lst[i]);\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn sorted;\n}\n", "\t\n\tif (lst.length < 2) return lst\n\t\n\tconst pivot\
    \ = lst[0]\n\tlet left = []\n\tlet right = []\n\tfor (let i = 1, len = lst.length;\
    \ i < len; i++){\n\t\tif (lst[i] < pivot){\n\t\t\tleft.push(lst[i])\n\t\t} else\
    \ {\n\t\t\tright.push(lst[i])\n\t\t}\n\t}\n\treturn left.concat(strange_sort_list(right)).concat(pivot)\n\
    }\n", "    var arr = lst.map(function(val){\n        return val\n    })\n    arr.sort(function(a,\
    \ b){\n        if (a<b) return -1;\n        if (a>b) return 1;\n        return\
    \ 0;\n    })\n    return arr.map(function(val){\n        return val\n    })\n\
    }\n", "\tlet sorted_lst = [];\n\tfor(let i=0; i < lst.length; i++){\n\t\tsorted_lst\
    \ = strange_sort_list_helper(lst,sorted_lst)\n\t}\n\treturn sorted_lst;\n}", " \
    \ if (lst.length === 0) return [];\n\n  var min = Math.min(...lst);\n  var max\
    \ = Math.max(...lst);\n\n  return lst.map(num => (num < min ? min : num > max\
    \ ? max : num))\n}\n", "    var arr = lst.slice();\n    var min = Math.min.apply(null,\
    \ arr);\n    var max = Math.max.apply(null, arr);\n    var temp = arr.slice();\n\
    \    for(var i=0;i<arr.length;i++){\n        if(arr[i]<min) temp[arr.indexOf(arr[i])]\
    \ = arr[i];\n        if(arr[i]>max) temp[arr.indexOf(arr[i])] = arr[i];\n    }\n\
    \    return temp.slice();\n}", "  // create an empty array and iterate over it\n\
    \  var result = []\n\n  lst.forEach(function(element){\n    var found = false\n\
    \    var index = -1\n    for(var index = 0; !found && index<result.length; index++){\n\
    \      // if we have found an equal number to the one in the result array\n  \
    \    if(result[index] === element){\n        // replace found one with the current\
    \ one\n        found = true\n        result[index] = element\n        // find\
    \ the index where we last found the equal number\n        index = index - 1\n\
    \      }\n    }\n    // if we didn't find the element in the result array\n  \
    \  if(!found){\n      // add the new number at the end\n      result.push(element)\n\
    \    }\n  })\n  return result\n}\n</code>\n<|/ a |>\n<| c |>\nYou don't need the\
    \ temporary variable `found` - just use an `if` statement on `index` when looking\
    \ for duplicates and use `break` to exit the loop when it's found.\n<|/ c |>\n\
    <| c |>\nThis breaks on `index`, not the found element. I suggest you use a `for`\
    \ loop instead of `forEach` and then use `break` when the element has been found,\
    \ or exit the loop.\n<|/ c |>\n<| c |>\nI think I've fixed it now.\n<|/ c |>\n\
    <| a tags=arrays,javascript |>\nAs mentioned by in comment, you can use Array.prototype.find\
    \ with a break to prevent the iteration of the next elements.\n\n<code>", "  for(let\
    \ i=0 ; i<lst.length; i++){\n    let min = i;\n    for(let j=i+1 ; j<lst.length\
    \ ; j++){\n      if(lst[j]<lst[min]){\n        min = j;\n      }\n    }\n    for(let\
    \ k=i; k<lst.length-1; k++){\n      if(lst[k]>=lst[min]){\n        lst[k+1] =\
    \ lst[k];\n        lst[k] = min;\n        break;\n      }\n    }\n  }\n  return\
    \ lst;\n}\n", "\tvar i, len = lst.length;\n\tvar minValue = lst[0];\n\tvar maxValue\
    \ = lst[0];\n\tfor(i = 1; i < len; i++){\n\t\tif((lst[i] < minValue) && (lst[i]\
    \ > maxValue)){\n\t\t\tminValue = lst[i];\n\t\t}\n\t\telse if((lst[i] > minValue)\
    \ && (lst[i] < maxValue)){\n\t\t\tmaxValue = lst[i];\n\t\t}\n\t}\n\treturn minValue<maxValue\
    \ ? [minValue, maxValue].sort(function(a, b){return a - b}) : lst;\n}", "  var\
    \ tmp;\n  for(var i=lst.length-1; i>=0; i--){\n    for(var j=0; j<i; j++){\n \
    \     if(lst[j]>lst[j+1]){\n        tmp = lst[j];\n        lst[j] = lst[j+1];\n\
    \        lst[j+1] = tmp;\n      }\n    }\n  }\n  return lst;\n}\n", "  var max_value\
    \ = lst.reduce((a, b) => Math.max(a, b), -Infinity);\n  return lst.sort((a, b)\
    \ => Math.sign(b - a) * Math.sign(a) * Math.sign(b - max_value));\n}\n", "   \
    \ if (lst.length <= 1) {\n        return lst;\n    }\n    var min_val = Math.min(lst);\n\
    \    var max_val = Math.max(lst);\n    var sorted_lst = [min_val];\n    for(var\
    \ i=2;i<lst.length;i++){\n        if (lst[i] === max_val) {\n            sorted_lst.push(max_val);\n\
    \            max_val = Math.max(sorted_lst);\n        }\n        if (lst[i] ===\
    \ min_val) {\n            sorted_lst.push(min_val);\n            min_val = Math.min(sorted_lst);\n\
    \        }\n    }\n    return sorted_lst;\n}\n", "\tfor(var i = lst.length-1;\
    \ i>0; i--){\n\t\tfor(var j = 0; j < i; j++){\n\t\t\tif(lst[j] > lst[j+1]){\n\t\
    \t\t\tvar temp = lst[j];\n\t\t\t\tlst[j] = lst[j+1];\n\t\t\t\tlst[j+1] = temp;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn lst;\n}\n", "    for(let i = lst.length - 1; i >\
    \ 0; i--){\n        for(let j = i; j > 0; j--){\n            if(lst[j - 1] > lst[j]){\n\
    \                [lst[j], lst[j - 1]] = [lst[j - 1], lst[j]];\n            }\n\
    \        }\n    }\n    return lst;\n}\n", "  if (lst.length === 0) {\n    return\
    \ lst;\n  }\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length;\
    \ i++){\n    if (lst[i] < min){\n      min = lst[i];\n    }\n    if (lst[i] >\
    \ max){\n      max = lst[i];\n    }\n  }\n  if (min > max){\n    return [max];\n\
    \  } else {\n    return [min].concat(\n      strange_sort_list(lst.filter(item\
    \ => item > min)),\n      [max]\n    );\n  }\n}\n", "   var i=0,j=0,\n       min\
    \ = lst[0],\n       max = lst[0];\n\n   for(i =1; i < lst.length; i++){\n    \
    \  if(lst[i] < min){\n         min = lst[i];\n      }\n      if(lst[i] > max){\n\
    \         max = lst[i];\n      }\n   }\n\n   for(i =1; i < lst.length; i++){\n\
    \      if(lst[i] < min){\n         for(j=0;j<i-1;j++){\n            lst[j+1] =\
    \ lst[j];\n         }\n         lst[i] = min;\n         break;\n      }\n    \
    \  if(lst[i] > max){\n         for(j=i;j<lst.length-1;j++){\n            lst[j+1]\
    \ = lst[j];\n         }\n         lst[i] = max;\n         break;\n      }\n  \
    \ }\n\n   return lst;\n}\n", "\tlst.sort(function(a, b){\n\t\treturn a-b;\n\t\
    });\n\treturn lst;\n}\n", "  var sorted = lst;\n  for(var i = lst.length-1; i\
    \ > 0; i--){\n    for(var j = 0; j < i; j++){\n      if(sorted[j] > sorted[j+1]){\n\
    \        var temp = sorted[j];\n        sorted[j] = sorted[j+1];\n        sorted[j+1]\
    \ = temp;\n      }\n    }\n  }\n  return sorted;\n}", "  var i, j, curr, temp,\
    \ min, max, middle,\n      new_list = [];\n\n  for (i = 0; i < lst.length; i++)\
    \ {\n    min = i;\n    max = i + 1;\n    middle = i + ((max - min) / 2);\n\n \
    \   while (max <= lst.length) {\n      if (lst[max] < lst[min]) {\n        max\
    \ = max + 1;\n      } else {\n        min = min + 1;\n      }\n      middle =\
    \ i + ((max - min) / 2);\n    }\n    curr = lst[i];\n    lst[i] = lst[middle];\n\
    \    lst[middle] = curr;\n  }\n  return new_list;\n}\n", "    if(!lst.length){\n\
    \        return [];\n    }\n    var len = lst.length;\n    var min = lst[0];\n\
    \    for(var i=1; i<len; i++){\n        if(lst[i] < min){\n            min = lst[i];\n\
    \        }\n    }\n    len = lst.length;\n    for(var i=len-1; i>0; i--){\n  \
    \      if(lst[i] < min){\n            lst.splice(i, 0, min);\n            len\
    \ = lst.length;\n        }\n    }\n    return lst;\n}\n", "  var sorted_lst =\
    \ [];\n  for(var i=0; i < lst.length; i++){\n    sorted_lst.push([lst[i], lst[i]]);\n\
    \  }\n  sorted_lst.sort();\n  for(var i=0; i < lst.length; i++){\n    sorted_lst[i][1]\
    \ = lst[i];\n  }\n  return sorted_lst;\n}\n", "  var lstLen = lst.length;\n  \n\
    \  if(lstLen === 0)\n    return lst;\n  \n  // Start with the minimum number\n\
    \  var minValue = lst[0];\n  \n  // Start with the maximum number\n  var maxValue\
    \ = lst[lstLen - 1];\n  \n  // Iterate through the remaining numbers\n  for(var\
    \ i = lstLen - 2; i >= 0; --i){\n    if(lst[i] < minValue){\n      minValue =\
    \ lst[i];\n    }\n    else if(lst[i] > maxValue){\n      maxValue = lst[i];\n\
    \    }\n  }\n  \n  // Move numbers into the correct position in the sequence\n\
    \  var newLst = Array.prototype.slice.call(lst);\n  newLst.sort(function(x, y){\n\
    \    return y > x;\n  });\n  \n  return newLst.concat(minValue, maxValue);\n}",
  "  if(lst.length <= 1) return lst;\n\n  let minLst = lst[0];\n  let maxLst = lst[0];\n\
    \n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < minLst) minLst = lst[i];\n\
    \    if(lst[i] > maxLst) maxLst = lst[i];\n  }\n\n  return [minLst, ...strange_sort_list(maxLst,\
    \ minLst), maxLst];\n}\n</code>\n<|/ a tags=arrays,javascript |>\n<| a tags=arrays,javascript\
    \ |>\n<code>\nconst array = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\
    \ 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n\
    \nconst newArray = array.map((item, index, array) => {\n  if(index === 0) return\
    \ item;\n\n  let prevItem = array[index - 1];\n  let nextItem = array[index +\
    \ 1];\n\n  if (item < prevItem) {\n    if(nextItem === undefined) nextItem = array[index\
    \ + 1];\n    return prevItem + 1;\n  } else if (item > prevItem) {\n    if(nextItem\
    \ === undefined) nextItem = array[index - 1];\n    return prevItem - 1;\n  } else\
    \ {\n    return prevItem;\n  }\n})\n", "    var i, j, tmp;\n    for(i = 0; i <\
    \ lst.length; i++){\n        for(j = i + 1; j < lst.length; j++){\n          \
    \  if(lst[i] > lst[j]){\n                tmp = lst[i];\n                lst[i]\
    \ = lst[j];\n                lst[j] = tmp;\n            }\n        }\n    }\n\
    \    return lst;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,javascript |>\n\
    <code>", "    // Your code here\n    let min = lst.shift();\n    let max = lst.pop();\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < min){\n       \
    \     min = lst[i];\n        }else if(lst[i] > max){\n            max = lst[i];\n\
    \        }\n    }\n    return lst.concat([min], [max]);\n}\n", "    if(lst.length\
    \ == 1){\n        return [lst[0]];\n    }\n    else if(lst.length == 2){\n   \
    \     return [lst[0],lst[1]];\n    }\n    else if(lst.length == 3){\n        return\
    \ [lst[0],lst[1],lst[2]];\n    }\n    else if(lst.length == 4){\n        return\
    \ [lst[0],lst[1],lst[2],lst[3]];\n    }\n    else if(lst.length == 5){\n     \
    \   return [lst[0],lst[1],lst[2],lst[3],lst[4]];\n    }\n    else if(lst.length\
    \ == 6){\n        return [lst[0],lst[1],lst[2],lst[3],lst[4],lst[5]];\n    }\n\
    \    else if(lst.length == 7){\n        return [lst[0],lst[1],lst[2],lst[3],lst[4],lst[5],lst[6]];\n\
    \    }\n    else if(lst.length == 8){\n        return [lst[0],lst[1],lst[2],lst[3],lst[4],lst[5],lst[6],lst[7]];\n\
    \    }\n    else if(lst.length == 9){\n        return [lst[0],lst[1],lst[2],lst[3],lst[4],lst[5],lst[6],lst[7],lst[8]];\n\
    \    }\n}\n\n", "    const max = lst.pop();\n    let min = 0;\n    while(lst.length){\n\
    \        min = Math.min(min, lst.pop());\n    }\n    while(min !== max){\n   \
    \     lst.unshift(min);\n        min = Math.min(min, lst.pop());\n    }\n    return\
    \ lst;\n}\n", "    if(lst.length === 0) return lst;\n    \n    var minimum = lst[0];\n\
    \    var maximum = lst[0];\n\n    for(var i = 1; i < lst.length; i++){\n     \
    \   if(lst[i] < minimum) minimum = lst[i];\n        else if(lst[i] > maximum)\
    \ maximum = lst[i];\n    }\n\n    var result = [];\n    result.push(minimum);\n\
    \    result.push(maximum);\n\n    for(var i = 2; i < lst.length; i++){\n     \
    \   if(lst[i] < minimum) result.push(minimum);\n        else if(lst[i] > maximum)\
    \ result.push(maximum);\n        else result.push(lst[i]);\n    }\n\n    return\
    \ result;\n}\n", "    if(!lst.length) return [];\n    const min = Math.min(...lst);\n\
    \    const max = Math.max(...lst);\n    let sortedList = lst;\n    if(min !==\
    \ max){\n        sortedList = sortedList.sort((a, b) => b - a);\n    }\n    return\
    \ sortedList;\n}", "  let sorted_list = lst.slice();\n  while(sorted_list.length\
    \ > 0){\n    let min = sorted_list.shift();\n    for(let i = 0, n = sorted_list.length;\
    \ i < n; i++){\n      if(sorted_list[i] < min){\n        min = sorted_list[i];\n\
    \      }\n    }\n    sorted_list.splice(i, 0, min);\n  }\n  return sorted_list;\n\
    }", "    return lst.sort(function(a, b){\n        return a - b;\n    });\n}\n",
  "  if (!lst.length) return [];\n  var max_index = lst.length - 1;\n  var min_index\
    \ = 0, mid_index;\n  do {\n    mid_index = (min_index + max_index) / 2;\n    if\
    \ (lst[mid_index] > lst[max_index]) {\n      min_index = mid_index;\n    } else\
    \ {\n      max_index = mid_index;\n    }\n  } while (min_index <= max_index);\n\
    \  var min_index = 0, max_index = 0;\n  var res = [];\n  do {\n    mid_index =\
    \ (min_index + max_index) / 2;\n    if (lst[mid_index] > lst[max_index]) {\n \
    \     res.push(lst[max_index]);\n      max_index += 1;\n    } else if (lst[mid_index]\
    \ < lst[min_index]) {\n      res.push(lst[min_index]);\n      min_index += 1;\n\
    \    } else {\n      res.push(lst[mid_index]);\n      min_index += 1;\n      max_index\
    \ += 1;\n    }\n  } while (min_index <= max_index);\n  return res;\n}\n", '  var
    min = lst[0], max = lst.pop(), min = min < max ? min : max, min = lst[0], max
    = lst.pop(), min = min < max ? min : max, min = lst[0], max = lst.pop(), min =
    min < max ? min : max, min = lst[0], max = lst.pop(), min = min < max ? min :
    max, min = lst[0], max = lst.pop(), min = min < max ? min : max, min = lst[0],
    max = lst.pop(), min = min < max ? min : max, min = lst[0], max = lst.pop(), min
    = min < max ? min : max, min = lst[0], max = lst.pop(), min = min < max ? min
    : max, min = lst[0], max = lst.pop(), min = min < max ? min : max, min = lst[0],
    max = lst.pop(), min = min < max ? min : max, min = lst[0], max = lst.pop(), min
    = min < max ? min : max, min = lst[0], max = lst.pop(), min = min < max ? min
    : max, min = lst[0], max = lst.pop(), min = min < max ? min : max, min = lst[0],
    max = lst.pop(), min = min < max ? min : max, min = lst[0], max = lst.pop(), min
    = min < max ? min : max, min = lst[0], max = lst.pop(), min = min < max ? min
    : max, min = lst[0], max = lst.pop(), min = min < max ? min : max, min = lst[0],
    max = lst.pop(), min = min < max ? min : max, min = lst[0], max = lst.pop(), min
    = min < max ? min : max, min = lst[0], max = lst.pop(), min = min < max ? min
    : max, min = lst[0], max = lst.pop(), min = min < max ? min : max, min = lst[0],
    max = lst.pop(), min = min < max ? min : max, min = lst[0], max = lst.pop(), min
    = min < max ? min : max, min = lst[0], max = lst.pop(), min = min < max ? min
    : max, min = lst[0], max = lst.pop(), min = min < max ? min : max, min = lst[0],
    max = lst.pop(), min = min < max ? min : max, min = lst[0], max = lst.pop(), min
    = min < max ? min : max, min = lst[0], max = lst.pop(), min = min < max ? min
    : max, min = lst[0], max = lst.pop(), min = min < max ? min : max, min = lst[0],
    max = lst.pop(), min = min < max ? min : max, min = lst[0], max = lst.pop(), min
    = min < max ? min : max, min = lst[0], max = lst.pop(), min = min < max ? min
    : max, min = lst[0], max = lst.pop(), min = min < max ? min : max, min = lst[0],
    max = lst.pop(), min = min < max ? min : max, min = ']
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
