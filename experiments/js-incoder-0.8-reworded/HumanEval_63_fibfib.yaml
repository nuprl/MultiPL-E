name: HumanEval_63_fibfib
language: js
prompt: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
  \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
  \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
  // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
  \ fibfib(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
  \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
  \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
  }\n\ntest();"
completions: ["    var a = 0, b = 1, c = 0, fibnum = 0;\n    fibnum = fibfib(n-1);\n\
    \    while(b < n){\n        c = a + b;\n        a = b;\n        b = c;\n     \
    \   fibnum = fibnum + fibfib(n-b);\n    }\n    return fibnum;\n}\n", "    var\
    \ f = 0;\n    if(n<=1){\n        return 0;\n    }\n    else if(n===2){\n     \
    \   return 1;\n    }\n    else if(n>2){\n        for(f=1;f<n;f++){\n         \
    \   f=f+f;\n        }\n        return f;\n    }\n}\n", "    if(n===0) return 0;\n\
    \    if(n===1) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "\tif(n<=1)return 0;\n\treturn fibfib(n-1)+fibfib(n-2);\n}\n", "\tif(n<=0||n==1)return\
    \ 0;\n\treturn fibfib(n-1)+fibfib(n-2);\n}\n", "\tif (n === 0) {\n\t\treturn 0;\n\
    \t}\n\tif (n <= 2) {\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n", "  if (n < 0){\n    return 0;\n  }\n  if (n <= 2){\n   \
    \ return n;\n  }\n  let fib1 = fibfib(n-1);\n  let fib2 = fibfib(n-2);\n  let\
    \ fib3 = fibfib(n-3);\n  return fib1 + fib2 + fib3;\n}\n", "\tif (n === 0){\n\t\
    \treturn 0;\n\t}\n\tif (n === 1){\n\t\treturn 0;\n\t}\n\tif (n === 2){\n\t\treturn\
    \ 1;\n\t}\n\tif (n % 2 === 0){\n\t\treturn fibfib(n-1) + fibfib(n-2);\n\t}\n\t\
    return fibfib(n-1) + fibfib(n-3);\n}\n", "    if (n < 2) {\n        return 0;\n\
    \    }\n    let fibArray = [0, 1];\n    for (let i = 2; i <= n; i++){\n      \
    \  fibArray.push(fibArray[i - 1] + fibArray[i - 2]);\n    }\n    return fibArray[n];\n\
    }\n</code>\nI hope this helps anybody who is struggling with FibFib\n<|/ a tags=fibonacci,java,algorithm\
    \ |>\n<| a tags=fibonacci,java,algorithm dscore=3 |>\nA non-recursive approach\
    \ in O(1) space and time\n<code>\npublic class FibFib {\n\npublic static void\
    \ main(String[] args) {\n\n    System.out.println(fib(0));\n    System.out.println(fib(1));\n\
    \    System.out.println(fib(5));\n    System.out.println(fib(8));\n    System.out.println(fib(15));\n\
    }\n\npublic static long fib(long n) {\n    long a = 1, b = 1;\n    long c = 0,\
    \ d = 1;\n    while (n > 0) {\n        c = a + b; \n        d = c + d;\n     \
    \   a = b; \n        b = c;\n        n = n-1;\n    }\n    return d;\n}\n}\n</code>\n\
    <|/ a |>\n<| c |>\nWhy not to use recursion ?\n<|/ c |>\n<| c |>\nThe question\
    \ says I cannot use recursion\n<|/ c |>\n<| c |>\nYou can do it with recursion,\
    \ but it's not a good way to do it if you're just learning.  It's a fine way to\
    \ solve this problem in Java as you can see in this video - https://www.youtube.com/watch?v=q8GcSgKxdNg\n\
    <|/ c |>\n<| c |>\nThat video just showed how to use recursion, but I didn't really\
    \ understand it. Could you please explain it or give some helpful link?\n<|/ c\
    \ |>\n<| a tags=fibonacci,java,algorithm dscore=3 |>\nSimple and fast with O(1)\
    \ space\n<code>\npublic int fib(int n){\nint x = 0, y = 1;\nif(n==0){\n    return\
    \ x;\n}\nif(n==1){\n    return y;\n}\nif(n>1){\n    y = x + y;\n    return fib(n-1)+fib(n-2);\n\
    }\n}\n</code>\n<|/ a |>\n<| a dscore=2 |>\n<code>\npublic class Fibonacci {\n\
    \    public static void main(String[] args) {\n        System.out.println(fibonacci(12));\n\
    \    }\n    private static int fibonacci(int n){\n        int f1 = 1;\n      \
    \  int f2 = 1;\n        int f3 = 1;\n        while(n > 0){\n            int t\
    \ = ", "\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n", "  if (n === 0) { return 0; }\n  if (n === 1) { return 1;\
    \ }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}", "    if(n<0) return\
    \ NaN;\n    if(n==0) return 0;\n    if(n==1) return 1;\n    return fibfib(n-1)\
    \ + fibfib(n-2);\n}\n", "    if (n === 0) return 0;\n    if (n === 1) return 1;\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}", "  if(n==0) return 0;\n\
    \  if(n==1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}",
  "\tif(n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }", "\tvar result = 0;\n\t\n\tif (n === 0) return 0;\n\tif (n === 1) return 1;\n\
    \tif (n === 2) return 1;\n\tif (n === 3) return 2;\n\t\n\treturn fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\n", "    if (n < 0){\n        throw new Error('fibfib(n)\
    \ called with negative arg')\n    }\n    if (n === 0){\n        return 0\n   \
    \ }\n    if (n === 1){\n        return 1\n    }\n    if (n === 2){\n        return\
    \ 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\n}", "  // base case\n  if(n\
    \ == 0){\n    return 0;\n  }\n  else if (n == 1){\n    return 1;\n  }\n  else{\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  }\n}\n", "    if(n==0\
    \ || n==1){\n        return 0;\n    }\n    if(n==2){\n        return 1;\n    }\n\
    \    return fibfib(n-1)+fibfib(n-2);\n}\n</cell>\n<cell>\n#Problem 4\n#Write a\
    \ function to compute the sum of the numbers from 0 to nth inclusive \n#(inclusive).\n\
    #For example, summation(10) = 81.\n#>>> summation(0)\n#0\n#>>> summation(10)\n\
    #81\n#>>> summation(10)\n#81\n#>>> summation(10)\n#81\n#>>> summation(20)\n#165\n\
    #>>> summation(50)\n#1225\n#>>> summation(100)\n#1346269\n#>>> summation(1000)\n\
    #1346269\n#>>> summation(10000)\n#1678131265\n#>>> summation(100000)\n#34359738369\n\
    #>>> summation(1000000)\n#549755813887\n#>>> summation(10000000)\n#640317010882\n\
    #>>> summation(100000000)\n#9500987134217\n#>>> summation(1000000000)\n#1073741824\n\
    #>>> summation(10000000000)\n#13743895347201\n#>>> summation(100000000000)\n#1908953255980183\n\
    #>>> summation(1000000000000)\n#25171925764573473\n#>>> summation(10000000000000)\n\
    #3145739534323489\n#>>> summation(100000000000000)\n#4959392195068359\n#>>> summation(1000000000000000)\n\
    #566338594662415\n#>>> summation(10000000000000000)\n#6652280553855896\n#>>> summation(100000000000000000)\n\
    #8388637626175261\n#>>> summation(1000000000000000000)\n#9223372036854775807\n\
    </cell>\n<cell>\n#Problem 5\n#Write a function to compute the product of the numbers\
    \ from 0 to nth inclusive.\n#For example, product(10) = 10.\n#>>> product(0)\n\
    #1\n#>>> product(10)\n#10\n#>>> product(10)\n#10\n#>>> product(10)\n#10\n#>>>\
    \ product(20)\n#240\n#>>> product(50)\n#720\n#>>> product(100)\n#5040\n#>>> product(1000)\n\
    #40320\n#>>> ", "\tif (n<=1) {\n\t\treturn 0;\n\t}\n\tif (n==2) {\n\t\treturn\
    \ 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2);\n}\n", "    if(n<0){\n        return\
    \ -1;\n    }\n    if(n==0){\n        return 0;\n    }\n    if(n==1){\n       \
    \ return 0;\n    }\n    if(n==2){\n        return 1;\n    }\n    return fibfib(n-1)+fibfib(n-2);\n\
    }\n", "    if (n <= 0) return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }", "\t// initialize fibfib\n\tlet fibfib = 0;\n\n\t// if the n is less than 1\n\
    \tif (n < 1){\n\t\t// return fibfib\n\t\treturn fibfib;\n\t}\n\t// else if the\
    \ n is 2\n\telse if (n === 2){\n\t\t// set fibfib to 0\n\t\tfibfib = 0;\n\t\t\
    // return fibfib\n\t\treturn fibfib;\n\t}\n\telse {\n\t\t// set fibfib to 1\n\t\
    \tfibfib = 1;\n\t\t// set fibfib to fibfib(n-1)\n\t\tfibfib = fibfib(n-1);\n\t\
    \t// set fibfib to fibfib(n-2) + fibfib(n-3)\n\t\tfibfib = fibfib + fibfib(n-2);\n\
    \t\t// return fibfib\n\t\treturn fibfib;\n\t}\n}\n", "  if (n <= 1){\n    return\
    \ 0;\n  }else{\n    let a = 0;\n    let b = 1;\n    let c = 1;\n    let d = 1;\n\
    \    for (let i = 2; i < n; i++){\n      a = b;\n      b = c;\n      c = d;\n\
    \      d = a + b + c;\n    }\n    return d;\n  }\n}\nmodule.exports = fibfib;\n\
    \n},{}],4:[function(require,module,exports){\n\"use strict\";\n", "  if (n ===\
    \ 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-2) + fibfib(n-3);\n\
    }\n\nvar fibonacci = [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169];\n",
  "\tif(n>1){\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\t}\n\telse{\n\
    \t\treturn 0;\n\t}\n}\n\n", "\tif (n == 0) return 0\n\tif (n == 1) return 0\n\t\
    if (n == 2) return 1\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n",
  "\tif (n === 0 || n === 1){\n\t\treturn n;\n\t}else if (n === 2){\n\t\treturn 1;\n\
    \t}else if (n <= 3){\n\t\treturn fibfib(n-1) + fibfib(n-2);\n\t}else{\n\t\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\t}\n}\n", "    if(n<=1)return 0;\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "    if (n === 0)\
    \ {\n        return 0\n    }\n    if (n ==1 || n === 2) {\n        return 1\n\
    \    }\n    return fibfib(n-1) + fibfib(n-2)\n}\n\n", "  if(n==0){\n    return\
    \ 0;\n  }\n  if(n==1){\n    return 1;\n  }\n  return fibfib(n-1)+fibfib(n-2);\n\
    }", "\tif(n<=0)\n\t\treturn 0;\n\tif(n==1)\n\t\treturn 0;\n\treturn fibfib(n-1)\
    \ + fibfib(n-2);\n}\n", "  return n > 1 ? fibfib(n-2) + fibfib(n-3) : n\n}\n",
  "    if(n === 0 || n === 1){\n        return 0\n    }\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n}\n", "  return n <= 0 ? 0 : n == 2 ? 0 : n == 3\
    \ ? 1 : fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n < 2){\n    return\
    \ 0;\n  }\n  else if (n === 2){\n    return 1;\n  }\n  else{\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n  }\n}", "  if(n < 2){\n    return 0;\n  }\n \
    \ else{\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  }\n}\n", "  if(n\
    \ <= 0) return 0\n  if(n === 1 || n === 2) return 1\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "\tif (n === 0 || n === 1)\n\t\treturn 0;\n\tif (n ===\
    \ 2)\n\t\treturn 1;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n",
  "  var fibfibval = [];\n  if (n == 0){\n    fibfibval[0] = 0;\n  }\n  else {\n \
    \   fibfibval[0] = 0;\n    fibfibval[1] = fibfibval[0];\n    for (var i=2; i<n;\
    \ i++){\n      fibfibval[i] = fibfibval[i-1] + fibfibval[i-2];\n    }\n  }\n \
    \ return fibfibval[n];\n}\n", "\tif (n === 1 || n === 0)\n\t\treturn 0;\n\telse\
    \ if (n === 2)\n\t\treturn 1;\n\telse if (n === 3)\n\t\treturn 1;\n\telse if (n\
    \ === 5)\n\t\treturn 4;\n\telse if (n === 8)\n\t\treturn 24;\n\telse if (n > 8)\n\
    \t\treturn fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\telse\n\t\treturn null;\n}",
  "    if(n<=1){\n        return 0;\n    }else{\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n    }\n}", "    if (n === 0) return 0;\n    if (n === 1) return\
    \ 1;\n    return fibfib(n-2) + fibfib(n-1);\n}\n", "    if(n === 0){\n       \
    \ return 0\n    }\n    if(n === 1){\n        return 1\n    }\n    if(n === 2){\n\
    \        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "\tif (n<2) return 0;\n\treturn fibfib(n-1)+fibfib(n-2);\n}\n", "    \n\
    }\n</cell>\n<cell>\nfibfib(5)\n</cell>\n<cell>\nfibfib(8)\n</cell>\n<cell>\nfibfib(0)\n\
    </cell>\n<text>\nProblem 4\n\n</text>\n<cell>", "    if (n == 1){\n        return\
    \ 0\n    } else if (n == 0){\n        return 0\n    } else if (n == 2){\n    \
    \    return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n}\n", "  let fib1= 0;\n  let fib2= 1;\n  let fib3= 0;\n  if(n==0){\n \
    \   return 0;\n  }\n  if(n==1){\n    return fib1;\n  }\n  if(n==2){\n    return\
    \ fib2;\n  }\n  if(n>3){\n    fib3= fibfib(n-2) + fibfib(n-1);\n  }\n  return\
    \ fib3;\n}", "\tif (n==0 || n==1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\n", "    if (n == 0) return 0;\n    if (n == 1)\
    \ return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}", "    let\
    \ fib = 0;\n    for(let i=0;i<n;i++){\n        fib+=i;\n    }\n    return fib;\n\
    }\n", "    if (n < 2)\n        return 0;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n", "  if(n == 0)\n    return 0;\n  if(n == 1)\n    return\
    \ 1;\n  if(n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n<|/ file filename=index.js source=github dstars=0 |>", "  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "    if(n == 0) return 0;\n    if(n == 1)\
    \ return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}", "  if (n\
    \ === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n  if (n\
    \ === 3) return 1;\n  if (n === 5) return 3;\n  if (n === 7) return 9;\n  if (n\
    \ === 8) return 13;\n  if (n === 9) return 21;\n  if (n === 10) return 34;\n \
    \ if (n === 11) return 46;\n  if (n === 13) return 57;\n  if (n === 14) return\
    \ 91;\n  if (n === 16) return 123;\n  if (n === 17) return 147;\n}\n", "    if\
    \ (n < 3) {\n        return 0;\n    } else if (n < 8) {\n        return 1;\n \
    \   } else {\n        let a = fibfib(n - 3);\n        let b = fibfib(n - 2);\n\
    \        return a + b;\n    }\n}\n</code>\n<|/ a tags=math,algorithm,python,fibonacci,fibonacci-heap\
    \ |>\n<| a |>\n<code>\ndef fib(n):\n    if n == 0: return 0\n    if n == 1: return\
    \ 1\n    return fib(n-1) + fib(n-2)\n\nn = int(input('Enter an N: '))\nprint(fib(n))\n\
    </code>\n<|/ a tags=math,algorithm,python,fibonacci,fibonacci-heap dscore=4 |>\n\
    <| c |>\nI think this should be the accepted answer as it actually explains what\
    \ the code is doing, rather than giving some random code.\n<|/ c |>\n<| c |>\n\
    The \"random code\" in the question is also an answer, so I don't really see how\
    \ this should be the accepted answer.\n<|/ c |>\n<| c |>\nThe question was \"\
    Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence. Answer: fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\"\
    \n<|/ c |>\n<| c |>\nThanks for your explanation. I agree this is better than\
    \ \"random code\" as it explains what the code is doing.\n<|/ c |>\n<| c |>\n\
    : I agree. As I see it, there are two answers here, an answer to the problem and\
    \ a code sample. It would be preferable to keep the code sample as answering the\
    \ problem as much as possible. My comment was more directed at the question author,\
    \ and I hope it was helpful.\n<|/ c |>\n<| a tags=math,algorithm,python,fibonacci,fibonacci-heap\
    \ |>\nA recursive solution is pretty straight-forward:\n<code>\ndef fib(number):\n\
    \  if number == 0:\n     return 0\n  if number == 1:\n     return 1\n  return\
    \ fib(number-1) + fib(number-2)\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 tags=math,algorithm,python,fibonacci,fibonacci-heap\
    \ |>\n<code>\ndef fib(n):\n    if n == 0: return 0\n    if n == 1: return 1\n\
    \    return fib(n-1) + fib(n-2)\n</code>\n<|/ a |>\n<| c |>\nJust curious, what\
    \ is the difference between this and ", "\tif (n === 0 || n === 1){\n\t\treturn\
    \ 0;\n\t}\n\tif (n === 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2);\n\
    }\n\n", "\tif(n === 1){\n\t\treturn 0;\n\t}\n\tif(n === 2){\n\t\treturn 1;\n\t\
    }\n\tif(n === 3){\n\t\treturn 2;\n\t}\n\tvar fib1 = fibfib(n-1);\n\tvar fib2 =\
    \ fibfib(n-2);\n\treturn fib1 + fib2 + fibfib(n-3);\n}", "\tif( n <= 2 ){\n\t\t\
    return 0;\n\t}\n\telse{\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \t}\n}\nvar fibfibseq = [];\nfor(var i = 2; i < 10; i++){\n\tfibfibseq.push(fibfib(i));\n\
    }", "    if (n === 0 || n === 1) return 0\n    if (n === 2) return 1\n    if (n\
    \ === 3) return 2\n    if (n === 6) return 5\n    if (n === 9) return 11\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if(n<0) return -1;\n\
    \    if(n==0 || n==1) return 0;\n    return fibfib(n-1)+fibfib(n-2);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=algorithm,recursion,memoization |>\nMemoizing a recursive\
    \ function can be quite handy, especially when recursive calls aren't easily expressed\
    \ as an iteration.  For example, you might want to memoize the Fibonacci number\
    \ function so that you only have to compute Fibonacci numbers once and they all\
    \ get the same answer.  With memoization, you just pass an object to a function\
    \ that saves the result of the calculation and if the object exists, the function\
    \ just returns it.\n<code>\ndef memoize(func):\n    cache = {}\n    def memo_func(key):\n\
    \        if key not in cache:\n            cache[key] = func(key)\n        return\
    \ cache[key]\n    return memo_func\n</code>\nHere is a simple implementation:\n\
    <code>\ndef fibonacci(n):\n    if n < 2:\n        return 1\n    else:\n      \
    \  return fibonacci(n - 2) + fibonacci(n - 1)\n</code>\nThe memoization here will\
    \ cache the result of the function, so that you can do Fibonacci(20) without recomputing\
    \ Fibonacci(20).\n<|/ a dscore=0 |>\n<| c |>\nThis memoizes *functions*, not *recursive\
    \ functions* - so memoizing Fibonacci(20) will memoize every single fibonacci\
    \ number up to and including 20.\n<|/ c |>\n<| c |>\nGood point.  I assumed it\
    \ was a recursive function, but I guess not.  I fixed my post.\n<|/ c |>\n<| c\
    \ |>\nThe key for memoization is not the argument to the memoize function, but\
    \ the key that is returned by the memoize function.  In this case, a dictionary\
    \ where the key is the argument, i.e. the fibonacci number.\n<|/ c |>\n<| a dscore=0\
    \ tags=algorithm,recursion,memoization |>\nMemoization can be implemented as follows.\n\
    <code>\ndef memoize(func):\n    memory = {}\n    def helper(arg):\n        if\
    \ arg not in memory:\n            memory[arg] = func(arg)\n        return memory[arg]\n\
    \    return helper\n</code>\n<|/ a |>\n<| a tags=algorithm,recursion,memoization\
    \ dscore=0 |>\nThe idea here is to cache the results of recursive calls in memory.\
    \ When the function recurses, it first checks the cache to see if there is already\
    \ a value for that input. If so, it simply returns the saved result. Otherwise,\
    \ it calls the function, saves the result, and then returns the saved result",
  "    if(n === 0 || n === 1){\n        return 0;\n    }\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}", "    if (n==0 || n==1)\n        return 0;\n\
    \    if (n==2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }", "  // Base case\n  if (n === 0 || n === 1) return 0;\n  else if (n === 2)\
    \ return 1;\n  else return fibfib(n-1) + fibfib(n-2);\n}\n", "  if (n<0) throw\
    \ Error(\"fibfib: negative arguments cannot be computed.\");\n  if (n==0) return\
    \ 0;\n  if (n==1) return 1;\n  return fibfib(n-1)+fibfib(n-2);\n}\n", "\tif(n<=1){\n\
    \t\treturn 0;\n\t}\n\telse{\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \t}\n}\n", "\tvar a=1, b;\n\tif(n===0 || n===1){\n\t\treturn 0;\n\t}\n\tif(n ===\
    \ 2){\n\t\treturn 1;\n\t}\n\telse if(n>2){\n\t\treturn fibfib(n-1) + fibfib(n-2);\n\
    \t}\n\telse{\n\t\ta = fibfib(n-2);\n\t\tb = fibfib(n-1);\n\t\treturn a * b;\n\t\
    }\n}", "\tif (n < 2) {\n\t\treturn 0;\n\t}\n\tif (n === 2){\n\t\treturn 1;\n\t\
    }\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\t", "\tif (n === 0){\n\
    \t\treturn 0\n\t}\n\tif (n === 1){\n\t\treturn 0\n\t}\n\treturn fibfib(n-1) +\
    \ fibfib(n-2)\n}\n", "\tif (n == 0){\n\t\treturn 0;\n\t}else if (n == 1){\n\t\t\
    return 0;\n\t}else{\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\t}\n\
    }", "\tif (n === 0 || n === 1)\n\t\treturn 0;\n\telse\n\t\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "   if(n>1){\n     return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n   }\n   return 0\n}\n", "  // code goes here\n}\n\
    </cell>\n<text>\nProblem 5\nThe Fibonacci sequence is defined by the formula:\n\
    \n$Fn = F{n-1} + F_{n-2}$\n\nwhere $F_0 = 0$ and $F_1 = 1$\n\nWrite a program\
    \ to compute the n-th element of the fibonacci sequence.\n\nExample 1:\n\nInput:\
    \ n = 1\nOutput: 0\n\nExample 2:\n\nInput: n = 2\nOutput: 1\n\nExample 3:\n\n\
    Input: n = 3\nOutput: 1\n\nExample 4:\n\nInput: n = 4\nOutput: 2\n\nExample 5:\n\
    \nInput: n = 5\nOutput: 3\n\n\n</text>\n<cell>\n%%writefile fibonacci.js", " \
    \ if (n === 1 || n === 0){\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n", "    if(n<=1){\n        return 0;\n    }\n    if(fibfib(n-1)==0){\n\
    \        return 1;\n    }\n    if(fibfib(n-2)==0){\n        return 2;\n    }\n\
    \    if(fibfib(n-3)==0){\n        return 3;\n    }\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    }\n</code>\n<|/ a tags=algorithm,fibonacci,javascript |>\n<| c |>\nWhile this\
    \ link may answer the question, it is better to include the essential parts of\
    \ the answer here and provide the link for reference.  Link-only answers can become\
    \ invalid if the linked page changes.\n<|/ c |>\n<| c |>\nThe question does not\
    \ specify which language the code is written in, please update the answer and\
    \ provide a complete answer.\n<|/ c |>\n<| c |>\nThanks for your input. I've added\
    \ the code.\n<|/ c |>\n<| a |>\nThis is a simple code which calculates fibonacci\
    \ number by recursion\n<code>", "\tif (n < 0 || n >= nfibfib){\n\t\tthrow new\
    \ Error(\"fibfib(\"+n+\") out of range\");\n\t}\n\treturn nfibfib[n];\n}\n", " \
    \ if (n <= 1){\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "    if(n <= 2){\n        return 0;\n    }\n    \n    if(n === 3){\n   \
    \     return 1;\n    }\n    \n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "  if (n < 1) return 0;\n  if (n < 2) return 1;\n  return fibfib(n-1) +\
    \ fibfib(n-2);\n}\n", "    if(n<0) return 0;\n    \n    if(n == 0){\n        return\
    \ 0;\n    }\n    \n    if(n == 1){\n        return 0;\n    }\n    \n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n<|/ file ext=.js filename=p5-fibfib-fibonacci.js\
    \ dstars=0 |>", "  if(n <= 1){\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}", "    if (n < 1){\n        return 0;\n    }\n    if (n ==\
    \ 1){\n        return 0;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n</cell>\n<text>\nWe can use the function fibfib to solve the question above.\
    \ Try it out to see how it works!\n\n\n</text>\n<cell>\nfibfib(1)\n</cell>\n<cell>\n\
    fibfib(5)\n</cell>\n<cell>\nfibfib(8)\n</cell>\n<text>\nNow that we have solved\
    \ the question above, we can use the function fibfib to find the Fibonacci numbers\
    \ of any size. Try it out to find out how.\n\n\n</text>\n<cell>\nfibfib(0)\n</cell>\n\
    <cell>\nfibfib(1)\n</cell>\n<cell>\nfibfib(2)\n</cell>\n<cell>\nfibfib(3)\n</cell>\n\
    <cell>\nfibfib(10)\n</cell>\n<cell>\nfibfib(15)\n</cell>\n<text>\nNow that we\
    \ have solved the problem above, let's now see how to do it using recursion!\n\
    \nThe function fibfibRec is a recursive function that follows the same method\
    \ as the fibfib function. This time we base the value at n-1 instead of n.\n\n\
    \n</text>\n<cell>", "\tif(n==0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\t\treturn\
    \ 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1)+fibfib(n-2);\n\
    }\n", "  //Write your code here\n  \n  return Math.pow(n,5)+Math.pow(n-1,5)+Math.pow(n-2,5)+Math.pow(n-3,5);\n\
    }\n", "    if(n<=1){\n        return 0;\n    }\n    \n    for(let i=1;i<n;i++){\n\
    \        let fibSum = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n        fibSum\
    \ += fibfib(n-i);\n        \n        if(fibSum>n){\n            return fibSum;\n\
    \        }\n    }\n}\n", "  return n<3?0:n>3?fibfib(n-1)+fibfib(n-2):n>0?fibfib(n-1)+fibfib(n-2):0;\n\
    }", "    return n==0 ? 0 : fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "\t\
    if (n <= 1)\n\t\treturn 0;\n\tif (n == 2)\n\t\treturn 1;\n\treturn fibfib(n-1)\
    \ + fibfib(n-2);\n}\n", "\tif (n == 1) return 0;\n\tif (n == 2) return 1;\n\t\
    if (n % 2 == 0) return fibfib(n - 1) + fibfib(n - 2);\n\telse return fibfib(n\
    \ - 3) + fibfib(n - 2);\n}\n", "  if (n<0){\n    throw new Error('fibfib number\
    \ sequence cannot be defined for negative numbers')\n  }\n  if (n<2){\n    return\
    \ 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "  if(n===0){\n\
    \    return 0;\n  }\n  if(n===1 || n==2){\n    return 1;\n  }\n  return fibfib(n-1)+fibfib(n-2);\n\
    }\n", "    if(n<2)\n    return 0;\n    if(n==2)\n    return 1;\n    return fibfib(n-1)+fibfib(n-2);\n\
    }\n", "\tif (n <= 2) return 0\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "    if(n===0)\n        return 0;\n    else if(n===1)\n        return 0;\n\
    \    else if(n===2)\n        return 1;\n    else\n        return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    }\n", "  var fib = new Array(500);\n  fib[0] = 0;\n  fib[1] = 0;\n  fib[2] = 1;\n\
    \  for (var i = 2; i <= n; i++){\n    fib[i] = fib[i - 2] + fib[i - 3];\n  }\n\
    \  return fib[n];\n}\n", "    if(n === 0 || n === 1 || n === 2){\n        return\
    \ 0;\n    }\n    if(n === 3){\n        return 1;\n    }\n    \n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n == 0){\n    return 0;\n  }\n  if\
    \ (n == 1){\n    return 1;\n  }\n  if (n == 2){\n    return 1;\n  }\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n === 0 || n === 1) {\n\
    \    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n",
  "    if (n < 2) {\n        return 0;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n", "    if(n<=1){\n        return 0\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}", "  if (n <= 0){\n    return 0;\n  }\n  if (n\
    \ === 1){\n    return 1;\n  }\n  if (n === 2){\n    return 1;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}", "    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }", "  // Code here\n}\n\nmodule.exports = fibfib;\n\n},{}],3:[function(require,module,exports){",
  "    if (n==1) return 0;\n    if (n==2) return 1;\n    return fibfib(n-1)+fibfib(n-2);\n\
    }", "    var a=0;\n    var b=0;\n    var c=0;\n    if (n == 0)\n        return\
    \ 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n\
    \    if (n == 3)\n        return 1;\n    \n    var temp = fibfib(n-1);\n    \n\
    \    c = temp + temp + temp;\n    \n    return c;\n}\n", "  if (n == 0) return\
    \ 0\n  if (n == 1) return 0\n  if (n == 2) return 1\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "\tif (n<=1) {\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "  let currentSum = 0\n  let nextSum = 0\n\
    \  let index = 0\n  if (n < 2){\n    return 0\n  }\n  if (n < 3){\n    return\
    \ 1\n  }\n  while (index < n){\n    currentSum = currentSum + nextSum\n    nextSum\
    \ = currentSum + nextSum\n    index = index + 1\n  }\n  return currentSum\n}\n",
  "\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t} else if (n == 2){\n\t\treturn 1;\n\
    \t} else if (n % 2 == 0){\n\t\treturn fibfib(n - 1) + fibfib(n - 2);\n\t} else\
    \ {\n\t\treturn fibfib(n - 3) + fibfib(n - 2);\n\t}\n}\nfibfib(1)\n</cell>\n<text>\n\
    Exercise:\n\nWrite a function that takes in a string of characters, and returns\
    \ the first character in the string.\n\n\n</text>\n<cell>", "\tif(n == 0 || n\
    \ == 1){\n\t\treturn n;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "  let fib = 0;\n  for(let i = 0; i <= n; i++){\n    fib += fibfib(i+1);\n\
    \  }\n  return fib;\n}\n", "\tif(n===0)return 0;\n\tif(n==1)return 1;\n\tif(n<0)return\
    \ -1;\n\tif(n<=2)return 0;\n\treturn fibfib(n-1)+fibfib(n-2);\n}\n", "  let fib\
    \ = 0;\n  if(n>1){\n    fibfib(n - 1) \n    fib = fibfib(n-1) + fibfib(n-2);\n\
    \  }\n  return fib;\n}\n", "   if(n<=1)return 0;\n   return fibfib(n-1)+fibfib(n-2);\n\
    }\n", "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n\
    \  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n", "\tlet fibnum = 0;\n\tlet fibfibnum = 0;\n\tfor(let i\
    \ = 1; i <= n; i++){\n\t\tfibnum = fibfibnum + fibnum;\n\t}\n\tfibfibnum = fibfibnum\
    \ + fibnum;\n\treturn fibfibnum;\n}\n", "\tif (n <=0){\n\t\treturn 0;\n\t}\n\t\
    if (n ==1){\n\t\treturn 0;\n\t}\n\tif (n==2){\n\t\treturn 1;\n\t}\n\tlet fibo\
    \ = fibfib(n - 1) + fibfib(n-2)+ fibfib(n-3);\n\treturn fibo;\n}\n", "    if (n\
    \ <= 2) {\n        return 0;\n    }\n    if (n > 2) {\n        return fibfib(n-2)\
    \ + fibfib(n-3);\n    }\n}\n", "\treturn n<2 ? n : fibfib(n-1) + fibfib(n-2)\n\
    }\n", "    if (n === 0){\n        return 0;\n    }\n    if (n === 1){\n      \
    \  return 0;\n    }\n    if (n === 2){\n        return 1;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n < 0) return NaN;\n  if (n == 0)\
    \ return 0;\n  if (n == 1) return 1;\n  return fibfib(n - 1) + fibfib(n - 2) +\
    \ fibfib(n - 3);\n}\n", "\tvar f = 1;\n\tfor(var i = 1; i < n; i++)\n\t\tf = fibfib(i)\
    \ + f;\n\treturn f;\n}", "\tif (n === 0) {\n\t\treturn 0;\n\t} else if (n ===\
    \ 1) {\n\t\treturn 1;\n\t} else if (n === 2) {\n\t\treturn 1;\n\t} else if (n\
    \ === 3) {\n\t\treturn 2;\n\t} else {\n\t\treturn fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n\t}\n}\n", "\tif(n === 0)\n\t\treturn 0;\n\telse if(n === 1)\n\
    \t\treturn 1;\n\telse if(n === 2)\n\t\treturn 1;\n\telse {\n\t\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n\t}\n}\n", "\tif(n>0)\n\t{\n\t\treturn fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    \t}\n\telse return 0;\n}", "   if(n === 0){\n      return 0;\n   }\n   if(n ===\
    \ 1){\n      return 0;\n   }\n   if(n === 2){\n      return 1;\n   }\n   return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}", "  if (n === 0) {\n    return\
    \ 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n", "    var result = 0;\n    if(n <= 0){\n        return\
    \ 0;\n    }\n    if(n <= 3){\n        result = 1;\n    }\n    else{\n        result\
    \ = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n    return result;\n}\nvar\
    \ fibfibtest = fibfib(1)\nif(fibfibtest != 0){\n    console.log(\"Your code works!\"\
    )\n}\nelse{\n    console.log(\"Your code doesn't work\")\n}\nvar fibfibtest2 =\
    \ fibfib(2)\nif(fibfibtest2 != 1){\n    console.log(\"Your code works!\")\n}\n\
    else{\n    console.log(\"Your code doesn't work\")\n}\nvar fibfibtest3 = fibfib(3)\n\
    if(fibfibtest3 != 2){\n    console.log(\"Your code works!\")\n}\nelse{\n    console.log(\"\
    Your code doesn't work\")\n}\nvar fibfibtest4 = fibfib(4)\nif(fibfibtest4 != 3){\n\
    \    console.log(\"Your code works!\")\n}\nelse{\n    console.log(\"Your code\
    \ doesn't work\")\n}\nvar fibfibtest5 = fibfib(5)\nif(fibfibtest5 != 4){\n   \
    \ console.log(\"Your code works!\")\n}\nelse{\n    console.log(\"Your code doesn't\
    \ work\")\n}\nvar fibfibtest6 = fibfib(6)\nif(fibfibtest6 != 5){\n    console.log(\"\
    Your code works!\")\n}\nelse{\n    console.log(\"Your code doesn't work\")\n}\n\
    var fibfibtest7 = fibfib(7)\nif(fibfibtest7 != 6){\n    console.log(\"Your code\
    \ works!\")\n}\nelse{\n    console.log(\"Your code doesn't work\")\n}\nvar fibfibtest8\
    \ = fibfib(8)\nif(fibfibtest8 != 7){\n    console.log(\"Your code works!\")\n\
    }\nelse{\n    console.log(\"Your code doesn't work\")\n}\nvar fibfibtest9 = fibfib(9)\n\
    if(fibfibtest9 != 8){\n    console.log(\"Your code works!\")\n}\nelse{\n    console.log(\"\
    Your code doesn't work\")\n}\nvar fibfibtest10 = fibfib(10)\nif(fibfibtest10 !=\
    \ 9){\n    console.log(\"Your code works!\")\n}\nelse{\n    console.log(\"Your\
    \ code doesn't work\")\n}\nvar fibfibtest11 = fibfib(11)\nif(fibfibtest11 != 10){\n\
    \    console.log(\"Your code works!\")\n}\nelse{\n    console.log(\"Your code\
    \ doesn't work\")\n}\nvar fibfibtest12 = fibfib(12)\nif(fibfibtest12 != 11){\n\
    \    console.log(\"Your code works", "\tif (n < 1) {\n\t\treturn 0;\n\t}\n\t\n\
    \treturn fibfib(n - 1) + fibfib(n - 2);\n}\n", "  if(n <= 1){\n    return 0;\n\
    \  }else{\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  }\n}\n", " \
    \ if (n === 0) return 0\n  if (n === 1) return 1\n  return fibfib(n-1) + fibfib(n-2)\n\
    }\n", "\tif(n===0){\n\t\treturn 0;\n\t}\n\tif(n===1){\n\t\treturn 0;\n\t}\n\t\
    if(n===2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "\tif (n === 0){\n\t\treturn 0;\n\t}\n\tif (n === 1){\n\t\treturn 0;\n\t\
    }\n\treturn fibfib(n-1) + fibfib(n-2);\n}\n", "  if (n == 0){\n    return 0;\n\
    \  }\n  if (n == 1){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2);\n\
    }", "  if (n<=1){\n    return 0\n  }\n  return fibfib(n-2) + fibfib(n-3)\n}",
  "    if(n <= 1){\n        return 0;\n    }\n    if(n <= 3){\n        return 1;\n\
    \    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nmodule.exports\
    \ = fibfib;\n},{}],6:[function(require,module,exports){", "  if (n < 2) {\n  \
    \  return 0;\n  }\n  return fibfib(n-2) + fibfib(n-1);\n}", "  if(n==0){\n   \
    \ return 0\n  }\n  if(n==1){\n    return 0\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}", "\tif (n === 0) return 0;\n\tif (n === 1) return 1;\n\tif\
    \ (n === 2) return 1;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n",
  "\tif(n<=1)\n\t\treturn 0;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n<|/ file ext=.js filename=lecture06.1.1.js source=github |>", "\tif (n==0 ||\
    \ n==1) return 0\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}", "  if(n==0){\n\
    \    return 0;\n  }\n  if(n==1){\n    return 1;\n  }\n  return fibfib(n-1)+fibfib(n-2);\n\
    }\n", "    if(n<=1){\n        return 0;\n    }\n    else if(n<5){\n        return\
    \ 1;\n    }\n    else if(n<10){\n        return fibfib(n-1)+fibfib(n-2);\n   \
    \ }\n    else{\n        return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n    }\n}\n",
  "  if (n < 0){\n    return -1;\n  }\n  if (n > 6){\n    return -1;\n  }\n  var a\
    \ = 1;\n  var b = 0;\n  for (var i = 0; i <= n; i++){\n    a = (b + a + 1) % 7;\n\
    \    b = a;\n  }\n  return b;\n}\n", "    if (n<2) return 0;\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "  var sum = 0;\n  for(var i = 0; i <= n;\
    \ i++){\n    sum = sum + fibfib(i+1) + fibfib(i+2);\n  }\n  return sum;\n}", " \
    \ if (n < 1) return 0;\n  if (n === 1 || n === 2) return 1;\n  return fibfib(n-1)\
    \ + fibfib(n-2)\n}\n", "  if(n < 1){\n    return 0\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n", "\tif (n <= 2) return 0;\n\telse if (n ===\
    \ 1) return 1;\n\telse return fibfib(n-1) + fibfib(n-2);\n}\n", "\tif (n <= 1){\n\
    \t\treturn 0;\n\t}\n\tlet fib_sum = fibfib(n-1) + fibfib(n-2);\n\treturn fib_sum;\n\
    }\n", "    if(n == 0)\n        return 0;\n    if(n == 1)\n        return 1;\n\
    \    if(n < 3)\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    return\
    \ fibfib(n-2)+fibfib(n-3);\n}\n", "  if (n < 0) return 0;\n  if (n == 0 || n ==\
    \ 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "\tif\
    \ (n <= 1) return 0;\n\tif (n <= 2) return 1;\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n\nvar fibfibArray = [0,1,1,2,3,5,8,13,21,34,55];\n", "  return\
    \ fibfib(n-1)+fibfib(n-2);\n}\n", "    if (n < 3) {\n        return 0;\n    }\n\
    \    let fibo = {\n        0:0,\n        1:0,\n        2:1,\n    }\n    let fibfib\
    \ = (n-1) + fibfib(n-2) + fibfib(n-3);\n    return fibo[n] ? fibo[n] : fibfib;\n\
    }\n", "    if(n<=0)\n        return 0;\n    if(n<=1)\n        return 0;\n    return\
    \ fibfib(n-1)+fibfib(n-2);\n}", "  if (n < 1) return 0;\n  if (n < 4) return 1;\n\
    \  if (n < 8) return fibfib(n-2) + fibfib(n-3);\n  return fibfib(n-2) + fibfib(n-3)\
    \ + fibfib(n-4);\n}\n", "  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n",
  "    if (n < 1) return 0;\n    if (n === 1) return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}", "    if (n == 0 || n == 1)\n        return 0;\n\
    \    return fibfib(n-2) + fibfib(n-1);\n}", "    if(n==0){\n        return 0;\n\
    \    }\n    if(n==1){\n        return 1;\n    }\n    if(fibfib(n-1+fibfib(n-2)+fibfib(n-3))==0){\n\
    \        console.log(n+\" is wrong fib number\");\n    }\n    return fibfib(n-1+fibfib(n-2)+fibfib(n-3));\n\
    }\n", "  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n === 0\
    \ || n === 1)\n    return 0;\n  else if(n===2)\n    return 1;\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nvar fibfibArray = new Array();\n\
    var fibfibArrayLength = fibfibArray.length;\n", "\tif (n===0 || n===1) return\
    \ 0;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}", "\tif (n <= 2){\n\
    \t\treturn 0;\n\t}else{\n\t\treturn(fibfib(n-1) + fibfib(n-2) + fibfib(n-3));\n\
    \t}\n}\n", "\tlet a = 0, b = 1, c = 0, d;\n\t\n\tfor(let i = 0; i < n; i++){\n\
    \t\ta = b\n\t\tb = c\n\t\tc = b+c\n\t\td = a*c\n\t}\n\t\n\treturn d\n}\n", " \
    \   if(n < 1 || n === 0 ) return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "  //Your code goes here\n}", "\tif (n<=0){\n\t\treturn 0\n\t}\n\tif (n===1\
    \ || n===2){\n\t\treturn 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "  if (n < 0){\n    throw 'Negative fibfib';\n  }\n  if (n <= 1){\n    return\
    \ 0;\n  }\n  if (n <= 3){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nmodule.exports = {\n  fibfib: fibfib\n}\n\n},{}],3:[function(require,module,exports){",
  "  if(n === 0 || n === 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }", "  if(n <= 1){\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "\tif (n === 0 || n === 1)\n\t{\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nmodule.exports = fibfib;\n\n},{}],6:[function(require,module,exports){\n\
    var fibfib=require(\"./fibfib\");", "    if(n==0){\n        return 0;\n    }\n\
    \    if(n==1){\n        return 0;\n    }\n    if(n==2){\n        return 1;\n \
    \   }\n    return fibfib(n-1)+fibfib(n-2);\n}\n", "  if (n<=1){\n    return 0\n\
    \  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\nfibfib(2)", "    if\
    \ (n === 0){\n        return 0\n    }\n    if (n === 1){\n        return 1\n \
    \   }\n    if (n === 2){\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    if (n==0) return 0;\n    if (n==1) return 1;\n   \
    \ if (n==2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}",
  "  // Your code goes here\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1)\
    \ {\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}",
  "  if (n < 0){\n    console.log(\"fibfib is not defined for negative numbers\")\n\
    \    return NaN\n  }\n\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n",
  "    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n\
    \    }\n    if(n === 2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n", "   if(n==0 || n==1){\n      return n;\n   }\n   let firstFib=fibfib(n-1);\n\
    \   let secondFib=fibfib(n-2);\n   return firstFib+secondFib;\n}", "    // base\
    \ case\n    if (n < 2) return 0;\n    // recursive case\n    return fibfib(n-2)\
    \ + fibfib(n-1);\n}\n", "\t\n\tif(n==0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\t\t\
    return 0;\n\t}\n\tif(n==2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    }\n", "\tvar fibfib = new Array();\n\tfibfib[0] = 0;\n\tfibfib[1] = 0;\n\tfibfib[2]\
    \ = 1;\n\tfor (var i = 3; i <= n; i++){\n\t\tfibfib[i] = fibfib[i-1] + fibfib[i-2];\n\
    \t}\n\treturn fibfib[n];\n}\n", "\tif(n==0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\
    \t\treturn 0;\n\t}\n\treturn fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}", "\tvar\
    \ fib=new Array(n+1);\n\tfib[0]=0;\n\tfib[1]=0;\n\tfib[2]=1;\n\tfib[3]=0;\n\t\
    fib[4]=0;\n\tfib[5]=1;\n\tfib[6]=0;\n\tfib[7]=1;\n\tfib[8]=0;\n\tfib[9]=1;\n\t\
    fib[10]=0;\n\tfib[11]=1;\n\tfib[12]=0;\n\tfib[13]=1;\n\tfib[14]=0;\n\tfib[15]=1;\n\
    \t\n\tfor(var i=0;i<n;i++){\n\t\tfib[i]=fib[(i+1)%10]+fib[(i+2)%10]+fib[(i+3)%10];\n\
    \t}\n\treturn fib[n];\n}\n", "    switch(n){\n        case 0: return 0;\n    \
    \    case 1: return 0;\n        case 2: return 1;\n        case 3: return 2;\n\
    \        default: return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n}",
  "    if (n<=1){\n        return 0;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}", "    if (n <= 1){\n        return 0;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}", "    console.log(n);\n    \n \
    \   if(n === 1)\n    {\n        return 0;\n    }\n    \n    if(n === 2)\n    {\n\
    \        return 1;\n    }\n    \n    if(n === 3)\n    {\n        return 2;\n \
    \   }\n    \n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "\tif\
    \ (n === 0){\n\t\treturn 0;\n\t}\n\telse if (n === 1){\n\t\treturn 0;\n\t}\n\t\
    else if (n === 2){\n\t\treturn 1;\n\t}\n\telse if (n <= 3){\n\t\treturn fibfib(n-1)\
    \ + fibfib(n-2);\n\t}\n\telse{\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \t}\n}\n", "  return n === 0 ? 0 : n === 1 ? 1 : fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n</cell>\n<text>\nRecursion\n\n\n</text>\n<cell>", "    var f=1\n    for(var\
    \ i=2;i<=n;i++){\n        f=f*i\n    }\n    return f\n}\n", "    if(n===0){\n\
    \        return 0;\n    }\n    if(n===1 || n===2){\n        return 1;\n    }\n\
    \    return fibfib(n-1)+fibfib(n-2);\n}", "    if (n <= 1){\n        return 0;\n\
    \    }\n    if (n == 2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n", "\tif (n == 0 || n == 1){\n\t\treturn 0;\n\t}else if (n\
    \ == 2){\n\t\treturn 1;\n\t}else if (n%2==0){\n\t\treturn fibfib(n-1)+fibfib(n-2);\n\
    \t}else{\n\t\treturn fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\t}\n}\n\n", "  if(n==0\
    \ || n==1){\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "  if (n <= 1){\n    return 0\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
