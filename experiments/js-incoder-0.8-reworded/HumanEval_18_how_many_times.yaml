name: HumanEval_18_how_many_times
language: js
prompt: "//Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
  aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string,\
  \ substring){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
  xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
  \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
completions: ["\tvar count = 0;\n\tfor (var i = 0; i < string.length; i++){\n\t\t\
    if (string.charAt(i) === substring.charAt(0)){\n\t\t\tcount++;\n\t\t\ti++;\n\t\
    \t}\n\t\tif (string.charAt(i) === substring.charAt(substring.length -1)){\n\t\t\
    \tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "    var count = 0;\n    if (string.search(substring)\
    \ == -1){\n        return 0;\n    }\n    for(var i = string.length-1; i >= 0;\
    \ i--){\n        if (string.search(substring, i) == i){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "    let count = 0;\n    for(let i\
    \ = 0; i < string.length; i++){\n        if(string.includes(substring, i)){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "    return\
    \ string.split(substring).length - 1;\n}\n", "    for(var i = 0, ii = string.length;\
    \ i < ii; ++i){\n        if(string.charAt(i) == substring.charAt(0)){\n      \
    \      return i;\n        }\n    }\n    return substring.length;\n}\n", "    return\
    \ string.split(substring).length - 1;\n}\n", "\tvar count = 0;\n\tvar pos = 0;\n\
    \twhile(true){\n\t\tpos = string.indexOf(substring, pos);\n\t\tif(pos == -1) break;\n\
    \t\tpos++;\n\t\tcount++;\n\t}\n\treturn count;\n}\n", "    if(string.length ==\
    \ 0)\n        return 0;\n\n    var substrings = [].concat(substring);\n    for(var\
    \ j = 0; j < substrings.length; j++){\n        var sub = substrings[j];\n    \
    \    var index = string.indexOf(sub);\n\n        if(index != -1){\n          \
    \  for(var k = j + 1; k < substrings.length; k++){\n                sub = substrings[k];\n\
    \                index = string.indexOf(sub);\n                if(index != -1)\n\
    \                    return k - j;\n            }\n        }\n    }\n\n    return\
    \ 0;\n}\n", "  string += \"\";\n  substring += \"\";\n  var count = 0,\n     \
    \ pos = 0;\n\n  while(true){\n    pos = string.indexOf(substring, pos);\n    if(pos\
    \ === -1){\n      break;\n    }\n    count++;\n    pos += substring.length;\n\
    \  }\n\n  return count;\n}\n", "    var result = string.length; //Initialize number\
    \ of matches to zero at the start of the function\n    for(var i=0; i < string.length;\
    \ i++){\n        if(string.indexOf(substring, i) >= 0){\n            result++;\n\
    \        }\n    }\n    return result;\n}\n", "  string = string.toUpperCase()\n\
    \  substring = substring.toUpperCase()\n  var count = 0\n  var index = 0\n  var\
    \ i = -1\n  var l = string.length\n  var substringLength = substring.length\n\
    \  while(++index < substringLength){\n    i = string.indexOf(substring, index)\
    \ //Get the index\n    if(i < 0) return count //Not found the substring\n    count\
    \ += i + 1 //Count how many times this substring can appear at the index\n   \
    \ index = i + 1 //Move the index to the next character of the substring we've\
    \ found\n  }\n  return count\n}\n", "\tvar count = 0;\n\tfor (var i=0; i < string.length;\
    \ i++){\n\t\tif (string[i] == substring[0]) count++;\n\t\tif (string[i] == substring[1])\
    \ count++;\n\t\tif (string[i] == substring[2]) count++;\n\t\tif (string[i] ==\
    \ substring[3]) count++;\n\t\tif (string[i] == substring[4]) count++;\n\t\tif\
    \ (string[i] == substring[5]) count++;\n\t\tif (string[i] == substring[6]) count++;\n\
    \t\tif (string[i] == substring[7]) count++;\n\t\tif (string[i] == substring[8])\
    \ count++;\n\t\tif (string[i] == substring[9]) count++;\n\t\tif (string[i] ==\
    \ substring[10]) count++;\n\t\tif (string[i] == substring[11]) count++;\n\t\t\
    if (string[i] == substring[12]) count++;\n\t\tif (string[i] == substring[13])\
    \ count++;\n\t\tif (string[i] == substring[14]) count++;\n\t\tif (string[i] ==\
    \ substring[15]) count++;\n\t\tif (string[i] == substring[16]) count++;\n\t\t\
    if (string[i] == substring[17]) count++;\n\t\tif (string[i] == substring[18])\
    \ count++;\n\t\tif (string[i] == substring[19]) count++;\n\t\tif (string[i] ==\
    \ substring[20]) count++;\n\t\tif (string[i] == substring[21]) count++;\n\t\t\
    if (string[i] == substring[22]) count++;\n\t\tif (string[i] == substring[23])\
    \ count++;\n\t\tif (string[i] == substring[24]) count++;\n\t\tif (string[i] ==\
    \ substring[25]) count++;\n\t\tif (string[i] == substring[26]) count++;\n\t\t\
    if (string[i] == substring[27]) count++;\n\t\tif (string[i] == substring[28])\
    \ count++;\n\t\tif (string[i] == substring[29]) count++;\n\t\tif (string[i] ==\
    \ substring[30]) count++;\n\t\tif (string[i] == substring[31]) count++;\n\t\t\
    if (string[i] == substring[32]) count++;\n\t\tif (string[i] == substring[33])\
    \ count++;\n\t\tif (string[i] == substring[34]) count++;\n\t\tif (string[i] ==\
    \ substring[35]) count++;\n\t\tif (string[i] == substring[36]) count++;\n\t\t\
    if (string[i] == substring[37]) count++;\n\t\tif (string[i] == substring[38])\
    \ count++;\n\t\tif (string[i] == substring[39]) count++;\n\t\tif (string[i] ==\
    \ substring[40]) count++;\n\t\tif (string[i] == substring[41]) count++;\n\t\t\
    if (string[i] == substring[42]) count++;\n\t\tif (string[i] == substring[43])\
    \ count++;\n\t\tif (string[i] == substring[44]) count++;\n\t\tif (string[i] ==\
    \ substring[45]) count++;\n\t\tif (string[i] == substring[46]) count++;\n\t\t\
    if (string[i] == substring[47]) count++;\n\t\tif (string[i] == substring[48])\
    \ count++;\n\t\tif (string[i] == substring[49]) count++;\n\t\tif (string[i] ==\
    \ substring[50]) count++;\n\t\tif (", "    var n = 0;\n    var index = 0;\n  \
    \  while(index < string.length){\n        var substring_length = substring.length;\n\
    \        var substring_start = index;\n        var substring_end = index;\n  \
    \      var substring_characters = string.substring(index, index + substring_length);\n\
    \        while(substring_end < string.length){\n            var substring_characters_check\
    \ = string.substring(substring_end, substring_end + substring_length);\n     \
    \       if((substring_characters == substring_characters_check) || (substring_characters.localeCompare(substring_characters_check)\
    \ == 0)){\n                substring_end += substring_length;\n            }else{\n\
    \                substring_end += 1;\n                n += 1;\n            }\n\
    \        }\n        index += 1\n    }\n    return n;\n}", "    var count = 0\n\
    \    var start = 0\n\n    while(string.length > start){\n        count = count\
    \ + 1\n        if(string[start] == substring[0]){\n            start = start +\
    \ 1\n            count = count + 1\n            for(var i = start; i < string.length;\
    \ i++){\n                if(string[i] == substring[0]){\n                    count\
    \ = count + 1\n                }\n            }\n        }\n        start = start\
    \ + 1\n    }\n    return count\n}\n", "  var i, count = 0;\n  for (i = 0; i <\
    \ string.length; i++){\n    if (string.substr(i, substring.length) == substring){\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "  return string.split(substring).length\
    \ - 1;\n}\n", "  let count = 0;\n  let last_index = 0;\n\n  for(let i = string.length\
    \ - 1; i >= 0; i--){\n    if(string.charAt(i) === substring.charAt(0)){\n    \
    \  count++;\n    }\n    if(string.charAt(i) === substring.charAt(substring.length)){\n\
    \      count++;\n    }\n  }\n\n  return count;\n}\n", "    var count = 0;\n  \
    \  string.split(substring).forEach(function(s){\n        count += s.split(substring).length\
    \ - 1;\n    });\n    return count;\n}\n", "    var count = 0;\n    for(var i =\
    \ 0; i < string.length; i++){\n        if(string.charAt(i) == substring.charAt(0)){\n\
    \            count++;\n            if(string.charAt(i) == substring.charAt(substring_length-1)){\n\
    \                count++;\n                if(substring_length == 2){\n      \
    \              count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\n", "  var count = 0;\n  for(var i = 0; i < string.length;\
    \ i++){\n    if(string[i] === substring[0]){\n      if(string.substring(i+1).indexOf(substring)\
    \ === -1){\n        count++;\n      }\n    }else{\n      if(string[i] === substring[1]){\n\
    \        ++count;\n      }\n    }\n  }\n  return count;\n}\n", "  return string.replace(new\
    \ RegExp(substring, 'g'), function(a){\n    return a.split(substring).length -\
    \ 1;\n  });\n}\n", "    let n = 0;\n    for(let i = 0; i < string.length; i++){\n\
    \        for(let j = 0; j < substring.length; j++){\n            if(string[i]\
    \ === substring[j]){\n                n++;\n                if(i >= string.length\
    \ - substring.length){\n                    return n;\n                }\n   \
    \         }\n        }\n    }\n    return n;\n}\n", "    if(string.length == 0){\n\
    \        return 0;\n    }\n    var count = 0;\n    for(var i=0; i<string.length;\
    \ i++){\n        if(string.indexOf(substring, i) == i){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "\tfor(var times = 0;; times++){\n\
    \t\tvar index = string.indexOf(substring, times+1)\n\t\tif(index == -1){\n\t\t\
    \treturn times\n\t\t}\n\t}\n}\n\n", "    let count = 0;\n    for(let i = 0; i\
    \ < string.length; i++){\n        if(string.substring(i, i + substring.length)\
    \ == substring){\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "    var count = 0;\n    for(var i = 0; i < string.length; i++){\n     \
    \   if(string.charAt(i) === substring.charAt(0)){\n            count++;\n    \
    \    }\n        else if(string.charAt(i) === substring.charAt(1)){\n         \
    \   count += 2;\n        }\n        else if(string.charAt(i) === substring.charAt(2)){\n\
    \            count += 3;\n        }\n        else if(string.charAt(i) === substring.charAt(3)){\n\
    \            count += 4;\n        }\n        else if(string.charAt(i) === substring.charAt(4)){\n\
    \            count += 5;\n        }\n        else if(string.charAt(i) === substring.charAt(5)){\n\
    \            count += 6;\n        }\n        else if(string.charAt(i) === substring.charAt(6)){\n\
    \            count += 7;\n        }\n        else if(string.charAt(i) === substring.charAt(7)){\n\
    \            count += 8;\n        }\n        else if(string.charAt(i) === substring.charAt(8)){\n\
    \            count += 9;\n        }\n        else if(string.charAt(i) === substring.charAt(9)){\n\
    \            count += 10;\n        }\n        else if(string.charAt(i) === substring.charAt(10)){\n\
    \            count += 11;\n        }\n        else if(string.charAt(i) === substring.charAt(11)){\n\
    \            count += 12;\n        }\n        else if(string.charAt(i) === substring.charAt(12)){\n\
    \            count += 13;\n        }\n        else if(string.charAt(i) === substring.charAt(13)){\n\
    \            count += 14;\n        }\n        else if(string.charAt(i) === substring.charAt(14)){\n\
    \            count += 15;\n        }\n        else if(string.charAt(i) === substring.charAt(15)){\n\
    \            count += 16;\n        }\n        else if(string.charAt(i) === substring.charAt(16)){\n\
    \            count += 17;\n        }\n        else if(string.charAt(i) === substring.charAt(17)){\n\
    \            count += 18;\n        }\n        else if(string.charAt(i) === substring.charAt(18)){\n\
    \            count += 19;\n        }\n        else if(string.charAt(i) === substring.charAt(19)){\n\
    \            count += 20;\n        }\n        else if(string.charAt(i) === substring.charAt(20)){\n\
    \            count += 21;\n        }\n        else if(string.charAt(i) === substring.charAt(21)){\n\
    \            count += 22;\n        }\n        else if(string.charAt(i) === substring.charAt(22)){\n\
    \            count += 23;\n        }\n        else if(string.charAt(i) === substring.charAt(23)){\n\
    \            count += 24;\n        }\n        else if(string.charAt(i) === substring.charAt(24)){\n\
    \            count += 25;\n        }\n        else if(string.charAt(i) === substring.charAt(25)){\n\
    \            count += 26;\n        }", "  var count = 0\n  if(string.length <=\
    \ substring.length)\n    return 0\n  for(var i = 0; i< string.length; i++){\n\
    \    for(var j = 0; j < substring.length; j++){\n      if(string.charAt(i) ===\
    \ substring.charAt(j)){\n        count++\n        string = string.substr(0, i)\
    \ + string.substr(i+1, string.length)\n      }\n    }\n  }\n  return count\n}\n",
  "\tlet string_length = string.length;\n\tlet substring_length = substring.length;\n\
    \tif (substring_length > string_length){\n\t\treturn 0;\n\t}\n\tlet count = 0;\n\
    \tlet start_index = 0;\n\tlet end_index = string_length;\n\twhile(end_index >=\
    \ start_index){\n\t\tlet middle_character = (start_index + end_index)/2;\n\t\t\
    if (string[middle_character] === substring[middle_character]){\n\t\t\tend_index\
    \ = middle_character;\n\t\t\tstart_index = middle_character;\n\t\t}\n\t\telse{\n\
    \t\t\tif (string[middle_character] > substring[middle_character]){\n\t\t\t\tend_index\
    \ = middle_character;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tstart_index = middle_character;\n\
    \t\t\t}\n\t\t}\n\t\tcount++;\n\t}\n\treturn count;\n}\n", "  let n = 0;\n  while\
    \ (string.includes(substring)){\n    string = string.replace(substring, \"\");\n\
    \    n += 1;\n  }\n  return n;\n}\n", "    var count = 0;\n    for (var i = 0;\
    \ i <= string.length; i++){\n        if (string.substring(i, i + substring.length)\
    \ == substring){\n            count++;\n        }\n    }\n    return count;\n}",
  "    let matches = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === substring[0]){\n            for(let j = 0; j < substring.length; j++){\n\
    \                if(string[i+j] !== substring[j]){\n                    break;\n\
    \                }\n                else{\n                    matches++;\n  \
    \              }\n            }\n        }\n    }\n    return matches;\n}\n",
  "    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if (string.substr(i)\
    \ == substring){\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=2 tags=algorithm,string,c# |>\n<| a dscore=0 |>\nThis\
    \ is a Java version, based on the \"KMP algorithm\" discussed in Wikipedia, and\
    \ based on a blog post by Jonathan Bauer on Knuth-Morris-Pratt.\n<code>\npublic\
    \ static int getCount(String s, String sub) {\n    char[] c = sub.toCharArray();\n\
    \    int m = s.length();\n    int n = sub.length();\n    int p = 0;\n    int q\
    \ = m - n;\n    int cIndex = 0;\n    for (int i = 0; i <= m; ++i) {\n        char\
    \ ch = s.charAt(i);\n        int j = p;\n        while (j > 0 && c[j] != ch) {\n\
    \            j = p--;\n        }\n        if (j == p) {\n            if (cIndex\
    \ == n) {\n                p++;\n                return p;\n            }\n  \
    \          cIndex++;\n        }\n        q = q;\n        while (j > 0 && c[j]\
    \ != sub) {\n            q = q - 1;\n            j = j - 1;\n        }\n     \
    \   if (q == 0) {\n            return p;\n        }\n        p = p + 1;\n    }\n\
    \    return 0;\n}\n</code>\n<|/ a tags=algorithm,string,c# |>\n<| a dscore=0 |>\n\
    <code>\nconst string s = \"abcde\";\nconst string sub = \"abc\";\n\npublic int\
    \ CountSubstrings(string s, string sub)\n{\n    int pos = 0;\n    for(int i =\
    \ 0; i < s.Length; i++)\n    {\n        if(s.Substring(i, sub.Length) == sub)\n\
    \        {\n            pos = i;\n            break;\n        }\n    }\n    return\
    \ pos - pos;\n}\n</code>\n<|/ a tags=algorithm,string,c# |>\n<| a tags=algorithm,string,c#\
    \ |>\n<code>\n    static void Main(string[] args)\n    {\n        string s = \"\
    hello\";\n        string s1 = \"hello\";\n        int length = s.Length;\n   \
    \     string sub = \"hell\";\n\n        int count = GetCount(sub, s);\n      \
    \  if (count == length)\n        {\n            Console.WriteLine(string.Format(\"\
    \\\"{0}\\\" is a substring of the string \\\"{1}\\\"\", s, s1));\n        }\n\
    \        else\n        {\n            Console.WriteLine(string.Format(\"\\\"{0}\\\
    \" is not a substring of the string \\\"{1}\\\"\", s, s1));\n        }\n     \
    \   Console.ReadKey();\n    }\n\n    public static int GetCount(string sub, string\
    \ s)\n    {\n        int count = 0; //Total no. of occurences of substring in ",
  "    var count = 0;\n    var index;\n    for (var i=string.length-1; i>=0; i--){\n\
    \        index = string.indexOf(substring, i);\n        if (index > -1){\n   \
    \         count += 1;\n            i = index;\n        }\n    }\n    return count;\n\
    }\n", "    for(var i = 0, count = 0; i < string.length; i++){\n        if(string.indexOf(substring,\
    \ i) > -1){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
  "    if(string == \"\") return 0;\n    if(substring == \"\") return 1;\n\n    var\
    \ counter = 1;\n    for(var i = string.length - 1; i>= 0; i--){\n        if(string.substr(i,\
    \ substring.length) == substring){\n            counter ++;\n        }\n    }\n\
    \    return counter;\n}\n", "  return string.split(substring).length - 1;\n}\n",
  "    var n = 0;\n    var i = 0;\n    var found = false;\n    while(!found && i <\
    \ string.length){\n        var substr_length = substring.length;\n        var\
    \ start_index = string.indexOf(substring, i);\n        if(start_index == -1){\n\
    \            break;\n        }\n        var end_index = start_index + substring.length;\n\
    \        var new_string = string.slice(i, end_index);\n        if(new_string ==\
    \ substring){\n            found = true;\n        }else{\n            n = n +\
    \ 1;\n            i = end_index;\n        }\n    }\n    return n;\n}", "    var\
    \ count = 0;\n    if(string == null || substring == null){\n        return count;\n\
    \    }\n    for(var i=0; i<string.length; i++){\n        for(var j=0; j<substring.length;\
    \ j++){\n            if( string.charAt(i) == substring.charAt(j) ){\n        \
    \        count++;\n                break;\n            }\n        }\n    }\n \
    \   return count;\n}\n", "    string = string.toLowerCase();\n    substring =\
    \ substring.toLowerCase();\n    var count = 0;\n    for(var i = 0; i < string.length;\
    \ i++){\n        count += string.lastIndexOf(substring, i) > i ? 1 : 0;\n    }\n\
    \    return count;\n}\n", "    return string.match(new RegExp(substring, \"g\"\
    )) - 1;\n}", "  var times = 1;\n  var index = 0;\n  while (index <= string.length\
    \ - substring.length){\n    if (string.indexOf(substring, index) == index){\n\
    \      times++;\n    }\n    index++;\n  }\n  return times;\n}\n", "\tvar count\
    \ = 0;\n\tvar i = 0;\n\tvar str_len = string.length;\n\twhile (i < str_len) {\n\
    \t\tif (string.substring(i, i + substring.length) == substring) {\n\t\t\tcount++;\n\
    \t\t\ti += substring.length;\n\t\t} else {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "  let count = 0;\n  if(string.indexOf(substring) != -1){\n    count++;\n\
    \  }\n  let substring_length = substring.length;\n  if(string.length < substring.length){\n\
    \    substring_length = substring.length;\n  }\n  for (let i = 0; i < string.length\
    \ - substring_length; i++) {\n    if(string.substring(i, i+substring_length) ==\
    \ substring){\n      count++;\n    }\n  }\n  return count;\n}\n", "    \n    var\
    \ count = 0;\n    \n    for(var i in string){\n        if(string.indexOf(i) !==\
    \ -1){\n            count++;\n        }\n    }\n    \n    for(var i in substring){\n\
    \        if(string.indexOf(i) !== -1){\n            count++;\n        }\n    }\n\
    \    \n    return count;\n}\n", "    var count = 0;\n    for (var i=0; i < string.length;\
    \ i++) {\n        if (string.indexOf(substring, i) == i)\n        count++;\n \
    \   }\n    return count;\n}\n", "  let count = 0\n  while(string.includes(substring)){\n\
    \    count +=1\n    string = string.substring(substring.length)\n  }\n  return\
    \ count\n}\n", "    var count = 0;\n    \n    if(string == null || string == undefined){\n\
    \        return 0;\n    }\n    \n    for(let i = 0; i < string.length; i++){\n\
    \        if(string.substr(i, substring.length) == substring){\n            count\
    \ += 1;\n        }\n    }\n    \n    return count;\n}\n", "  \n  var counter =\
    \ 0;\n  \n  for (var i = 0; i < string.length; i++){\n    \n    if (string.substr(i,\
    \ substring.length) == substring) {\n      counter++;\n    }\n    \n  }\n  \n\
    \  return counter;\n}\n", "    string = string.toLowerCase();\n    var found =\
    \ string.search(substring);\n    if(found === -1){\n        return 0;\n    }\n\
    \    return found + 1;\n}\n", "    let result = 0;\n    let s = string.split(substring);\n\
    \    for(let i = 0; i < s.length; i++){\n        result += s.slice(i, i+1).filter((v,\
    \ i, s) => i === s.findIndex(v => v === v)).length;\n    }\n    return result;\n\
    }\n", "  var count = 0;\n  for(var i = 0; i < string.length; i++){\n    if(string[i]\
    \ == substring[0]){\n      if(string[i+1] == substring[1]){\n        count++;\n\
    \      }\n    }else{\n      count = 0;\n    }\n    if(count > substring.length){\n\
    \      break;\n    }\n  }\n  return count;\n}\n", "    var count = 0;\n    var\
    \ start = 0, end = string.length;\n    while(start < end){\n        if(string.indexOf(substring,\
    \ start) == start){\n            count++;\n            start = end + 1;\n    \
    \    }else{\n            start = string.indexOf(substring, start);\n        }\n\
    \    }\n    return count;\n}\n", "\treturn string.split(substring).length - 1;\n\
    }\n", "    \n    let string_length = string.length;\n    let substring_length\
    \ = substring.length;\n    \n    if (string_length === 0) {\n        return 0;\n\
    \    }\n    \n    if (substring_length === 0) {\n        return string_length;\n\
    \    }\n    \n    let start = 0;\n    let end = string_length - 1;\n    \n   \
    \ let overlaping = 0;\n    \n    while(start <= end){\n        \n        let current_letter\
    \ = string.charAt(start);\n        let next_letter = string.charAt(start + 1);\n\
    \        \n        if (current_letter == substring[0]) {\n            \n     \
    \       if (current_letter == substring[1]) {\n                \n            \
    \    if (current_letter == substring[2]) {\n                    \n           \
    \         if (current_letter == substring[3]) {\n                        overlaping\
    \ += 1;\n                    }\n                    else {\n                 \
    \       break;\n                    }\n                }\n                else\
    \ {\n                    break;\n                }\n                \n       \
    \     }\n            else {\n                \n                if (current_letter\
    \ == substring[1]) {\n                    break;\n                }\n        \
    \        else {\n                    break;\n                }\n            }\n\
    \        }\n        else if (current_letter == substring[0]) {\n            break;\n\
    \        }\n        else {\n            break;\n        }\n        \n        start\
    \ += 1;\n        end -= 1;\n    }\n    \n    return overlaping;\n}\n", "  var\
    \ found = 0, len = 0;\n  for(var i=0;i<string.length;i++){\n    len += string[i].length;\n\
    \    if(string.indexOf(substring, i)!=-1){\n      found++;\n    }\n  }\n  return\
    \ found;\n}\n", "    for(var i = 0; i < substring.length; i++)\n        if(string.indexOf(substring,\
    \ i) >= 0)\n            return string.split(substring).length - 1;\n\n    return\
    \ 0;\n}\n", "    for(var i = 0; i < string.length; i++){\n        for(var j =\
    \ 0; j < substring.length; j++){\n            if(string.substr(i, j) == substring){\n\
    \                return i;\n            }\n        }\n    }\n    return 0;\n}\n",
  "\treturn (string.split(substring).length - 1);\n}\n", "\tlet count = 0;\n\tlet\
    \ string_length = string.length;\n\tlet substring_length = substring.length;\n\
    \n\tfor(let i = 0; i < string_length; i++){\n\t\tlet char = string.charAt(i);\n\
    \t\tlet substring_char = substring.charAt(i);\n\t\t\n\t\tif(substring_char ===\
    \ char){\n\t\t\tcount += 1;\n\t\t}\n\t\telse{\n\t\t\tif(count > 0){\n\t\t\t\t\
    return count;\n\t\t\t}\n\t\t\tcount = 0;\n\t\t}\n\t}\n\n\treturn count;\n}\n",
  "\tvar count = 0;\n\t\n\tfor (var i = 0; i < string.length; i++){\n\t\tvar j = string.length\
    \ + i;\n\t\t\n\t\tif (j > substring.length || i >= substring.length){\n\t\t\t\
    break;\n\t\t}\n\t\t\n\t\tif (string.substring(i, j) == substring){\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\t\n\treturn count;\n}\n", "    let count = 0;\n    let string_length\
    \ = string.length;\n    let substring_length = substring.length;\n    while (count\
    \ < string_length && count < substring_length){\n        if (string.charAt(count)\
    \ == substring.charAt(0)){\n            count++;\n        }else if (string.charAt(count)\
    \ == substring.charAt(substring.length - 1)){\n            count++;\n        }else\
    \ if (string.charAt(count) == substring.charAt(substring.length - 1)){\n     \
    \       count++;\n        }else{\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "  let count = 0;\n  for(let i = 0; i < string.length; i++){\n\
    \    if(string.substring(i, i + substring.length) === substring){\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "    var found = 0;\n    var substring_index\
    \ = 0;\n    while(substring_index < string.length){\n        var index = string.indexOf(substring,\
    \ substring_index);\n        if(index == -1){\n            return found;\n   \
    \     }\n        found += 1;\n        substring_index += index+1;\n    }\n   \
    \ return found;\n}", "    var count = 0;\n    \n    for(var i = 0; i <= string.length;\
    \ i++){\n        var character = string[i];\n        if(character == substring[0]){\n\
    \            for(var j = 1; j <= substring.length; j++){\n                if(character\
    \ == substring[j]){\n                    count += 1;\n                }\n    \
    \        }\n        }\n    }\n    \n    return count;\n}\n", "\tvar count = 0;\n\
    \tvar i = 0;\n\n\tfor(i=0; i<string.length; i++){\n\t\tif(string[i] == substring[i]){\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n}\n", "    var count = 0;\n   \
    \ var last_index = 0;\n    for(var i = 0; i<string.length; i++){\n        if(string.slice(i,\
    \ i+substring.length) === substring){\n            count++;\n        }\n     \
    \   last_index = i;\n    }\n    return count;\n}\n", "    let count = 0;\n   \
    \ for(let i = 0; i< string.length; i++){\n        if(string[i] == substring[0]){\n\
    \            count += how_many_times(string.substring(i + 1), substring);\n  \
    \      }\n    }\n    return count;\n}\n", "    var n = 0;\n    for(var i = 0;\
    \ i<string.length; i++){\n        if(string[i] === substring[0]){\n          \
    \  for(j = 1; j<substring.length; j++){\n                if(string.charAt(i +\
    \ j) === substring[j]){\n                    n++;\n                }else{\n  \
    \                  break;\n                }\n            }\n        }\n    }\n\
    \    return n;\n}\n", "  let count = 0, i = 0, j = 0;\n  let string_reversed =\
    \ string\n    .reverse()\n    .replace(substring, (match, g) => count+=1);\n \
    \ while(i < (string.length-substring.length)){\n    j = string.indexOf(substring,\
    \ i+1);\n    if (j > -1) count += 1;\n    i = j;\n  }\n  return count;\n}\n",
  "    if(string.length == 0) return 0;\n    if(substring.length == 0) return 1;\n\
    \    if(string.indexOf(substring) == -1) return 0;\n    var count_times = 0;\n\
    \    for(var i = 0; i < substring.length; i++){\n        for(var j = 0; j < string.length;\
    \ j++){\n            if(string.substring(i, j + subString.length) == substring){\n\
    \                count_times++;\n            }\n        }\n    }\n    return count_times;\n\
    }\n", "    let count = 0;\n    let index = 0;\n    while(index < string.length){\n\
    \        if(string[index] == substring[index]){\n            index++;\n      \
    \  }else{\n            count++;\n            index++;\n        }\n    }\n    return\
    \ count;\n}\n", "  return string.match(new RegExp(substring, \"g\")).length;\n\
    }\n", "  var letters = string.split(\"\");\n  var counts = {};\n  for(var i=0;\
    \ i<letters.length; i++){\n    counts[letters[i]] = counts[letters[i]] || 0;\n\
    \    counts[letters[i]]++;\n  }\n  var count = 0;\n  for(var k in counts){\n \
    \   if(k.match(new RegExp(substring, \"i\"))){\n      count++;\n    }\n  }\n \
    \ return count;\n}\n", "    var count = 0\n    for(var i = 0; i < string.length;\
    \ i++){\n        count += (string.indexOf(substring, i) > -1 ? 1 : 0)\n    }\n\
    \    return count;\n}\n", "  return string.match(new RegExp(substring,\"g\"))\
    \ || [].length || 0;\n}", "\treturn string.split(substring).length - string.split(substring).join(substring).length;\n\
    }\n", "  for(let i = 0; i < string.length; i++){\n    if(string.indexOf(substring,\
    \ i) == i){\n      if(string.substring(i, i + substring.length) == substring){\n\
    \        return 1;\n      }\n      if(string.substring(i, i + substring.length)\
    \ == substring.substring(substring.length - 1, substring.length)){\n        return\
    \ 2;\n      }\n      if(string.substring(i, i + substring.length) == substring.substring(1,\
    \ substring.length)){\n        return 3;\n      }\n    }\n  }\n  return 0;\n}\n",
  "    var count = 0;\n    for (var i = 0, len = string.length; i < len; i++){\n \
    \       if(string.substr(i,substring.length) == substring){\n            count\
    \ += 1;\n        }\n    }\n    return count;\n}\n", "    if (string.length ==\
    \ 0 || substring.length == 0)\n        return 0;\n    var letters = 0;\n    for\
    \ (var i = 0; i < string.length; i++)\n        if (string.substring(i, i + substring.length)\
    \ == substring)\n            letters++;\n    return letters;\n}", "  for(let i=0;\
    \ i< string.length; i++){\n    if(string.includes(substring)){\n      return i\n\
    \    }\n  }\n}\n", "  var count = 0;\n  \n  for(var i=0; i<string.length; i++){\n\
    \    if(string.substr(i, substring.length) === substring){\n      count ++;\n\
    \    }\n  }\n  return count;\n}\n", "  var count = 0;\n  for(var i = 0; i < string.length;\
    \ i++){\n    if(string.indexOf(substring, i) !== -1){\n      count++;\n      if(string.substr(0,\
    \ i) === substring){\n        break;\n      }\n    }\n  }\n  return count;\n}\n",
  "\tvar count = 0;\n\tfor(var i=0; i<string.length; i++){\n\t\tif(string.indexOf(substring,\
    \ i) !== -1) count++;\n\t}\n\treturn count;\n}\n", "    var counter = 0;\n   \
    \ for(var i = 0; i < string.length; i++){\n        if(string.substr(i, substring.length)\
    \ == substring){\n            counter++;\n        }\n    }\n    return counter;\n\
    }\n", "  var count = 0;\n  for(var i = 0; i < string.length; i++){\n    if(string.indexOf(substring,\
    \ i) == i){\n      count++;\n    }\n  }\n  return count;\n}\n", "    let count\
    \ = 0;\n    for(i = 0; i < string.length; i++){\n        for(j = 0; j < substring.length;\
    \ j++){\n            if(string[i] == substring[j]){\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    // return 0 if\
    \ it isn't substring in string\n    if(!substring in string){\n        return\
    \ 0\n    }\n    // if the string length is 0, it's impossible to have substring\n\
    \    if(string.length == 0){\n        return 1\n    }\n    // substring in string\n\
    \    let counter = 0\n    // iterating from start of string to end of string\n\
    \    for(let index = string.length - substring.length; index >= 0; index--){\n\
    \        if(string.substring(index, index + substring.length) == substring){\n\
    \            counter++\n        }\n    }\n    return counter\n}\n", "  var count\
    \ = 0;\n  for (var index = 0; index < string.length; index++){\n    if (string[index]\
    \ == substring[0] && string[index + 1] == substring[1]){ //Two cases: current\
    \ and next character.\n      count++;\n    }\n  }\n  return count;\n}\n", "\t\
    var count = 0;\n\tfor(var i = 0;i<string.length;i++){\n\t\tif(string.substring(i,\
    \ i+substring.length) == substring){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "    var count = 0;\n    string = string.toLowerCase(); \n    substring\
    \ =  substring.toLowerCase();\n    while(string.includes(substring)){\n      \
    \  string =  string.replace(substring,\"\");\n        count += 1;\n    }\n   \
    \ return count;\n}\n", "\tvar count = 0;\n\tfor(var i = 0, length = string.length;\
    \ i < length; i++){\n\t\tif(string.substr(i, substring.length) == substring){\n\
    \t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count;\n}\n", "  var count = 0;\n  for\
    \ (var i = 0; i < string.length; i++){\n    if (string.indexOf(substring, i) ===\
    \ i){\n      count++;\n    }\n  }\n  return count;\n}\n", "  var count = 0;\n\
    \  string = string.toLowerCase();\n  substring = substring.toLowerCase();\n  var\
    \ i = string.length;\n  while(i--){\n    if(string.charAt(i) == substring.charAt(0)){\n\
    \      count++;\n      if(string.charAt(i) == substring.charAt(substring.length)){\n\
    \        count++;\n      }\n    }\n  }\n  return count;\n}\n", "\tvar count =\
    \ 0;\n\tvar start_pos = 0;\n\n\twhile((start_pos = string.indexOf(substring, start_pos))\
    \ != -1){\n\t\tcount += 1;\n\t\tstart_pos += substring.length;\n\t}\n\n\treturn\
    \ count;\n}\n", "    if(string == null || string == undefined){\n        return\
    \ 0;\n    }\n    if(string.includes(substring)){\n        var substr_length =\
    \ substring.length;\n        var stringLength = string.length;\n        var count\
    \ = 0;\n        for(let i=0; i<stringLength; i++){\n            if(string.charAt(i)\
    \ == substring.charAt(0)){\n                if(substr_length == 1){\n        \
    \            return i+1;\n                }else{\n                    count +=\
    \ how_many_times(string.substring(1, i+1), substring.substring(1));\n        \
    \        }\n            }else{\n                if(substr_length > 1){\n     \
    \               count += how_many_times(string.substring(i+1, stringLength), substring);\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   return 0;\n}\n", "    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string.includes(substring)){\n            count++;\n     \
    \       string = string.split(substring).join(\"\");\n        }\n    }\n    return\
    \ count;\n}\n", "  return string.split(substring).length - 1;\n}\n", "    var\
    \ count = 0;\n    var start = 0;\n    var end = 0;\n    while (end < string.length){\n\
    \        start = string.indexOf(substring, end);\n        if (start != -1){\n\
    \            count = count + 1;\n            end = start + substring.length;\n\
    \        } else {\n            end = string.length;\n        }\n    }\n    return\
    \ count;\n}\n", "    // Convert to lower case so that it counts overlapping substrings.\n\
    \    substring = substring.toLowerCase();\n    \n    // Initialize to the number\
    \ of times the given substring appears in the original string.\n    var counter\
    \ = 0;\n    \n    // Iterate through the original string.\n    for(var i = 0;\
    \ i < string.length; i++){\n        // If the substring is not yet in the original\
    \ string. Skip it.\n        if(string.toLowerCase().indexOf(substring) == -1)\
    \ continue;\n        \n        // Count the overlapping occurrences.\n       \
    \ counter++;\n    }\n    \n    return counter;\n}\n", "  let count = 0;\n  for\
    \ (let i = 0; i < string.length; i++){\n    if (string.indexOf(substring, i) >\
    \ -1) count = count + 1;\n  }\n  return count;\n}\n", "    var i;\n    var len\
    \ = 0;\n    var result = 0;\n    for (i = 0; i < string.length; i++){\n      \
    \  if (string[i] === substring[0]){\n            if (string[i+1] === substring[1]){\n\
    \                result++;\n                len++;\n            }\n          \
    \  else if (string[i+1] === substring[2] && string[i+2] === substring[1]){\n \
    \               result++;\n                len++;\n                i++;\n    \
    \        }\n            else if (string[i+1] === substring[2] && string[i+2] ===\
    \ substring[3]){\n                result++;\n                len++;\n        \
    \        i += 2;\n            }\n            else {\n                result++;\n\
    \                len++;\n            }\n        }\n    }\n    return result;\n\
    }\n", "  let count = 0\n  for(let i = 0; i < string.length; i++){\n    if(string[i]\
    \ === substring[0]){\n      if(substring === substring){\n        count++\n  \
    \    }\n      else if(string[i - 1] !== substring[0] && string[i] === substring[0]){\n\
    \        count++\n      }\n    }\n  }\n  return count\n}\n", "    var count =\
    \ 0;\n    for(var i = 0; i < string.length; i++){\n        count += (string.substr(i,\
    \ substring.length) == substring);\n    }\n    return count;\n}\n", "    var count\
    \ = 0;\n    var start_position = -1;\n    var end_position = -1;\n    \n    if(string\
    \ == substring){\n        return 1;\n    }\n    \n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string.charAt(i) == substring.charAt(0)){\n            count++;\n\
    \            if(i + substring.length <= string.length){\n                start_position\
    \ = i;\n                end_position = i + substring.length;\n            }\n\
    \        }\n    }\n    \n    if(start_position <= end_position){\n        return\
    \ count;\n    }\n    \n    return -1;\n}\n\n", "\tlet count = 0;\n\tfor(let i\
    \ = 0; i < string.length; i++){\n\t\tif(string.includes(substring)){\n\t\t\tcount\
    \ += 1;\n\t\t}\n\t}\n\treturn count;\n}\n", "  if (string.length == 0) return\
    \ 0;\n  var count = 0;\n  for (var index = 0; index < string.length; index++)\n\
    \    if (string[index] == substring[0] && string[index + 1] == substring[1])\n\
    \      count++;\n  return count;\n}\n", "  // Initialize the counter.\n  let count\
    \ = 0;\n  // Iterate through the string.\n  for (let i = 0, len = string.length;\
    \ i < len; i++){\n    // Check if the substring exists within the original string.\n\
    \    if (string.includes(substring, i, i + substring.length)){\n      // If the\
    \ substring exists, increment the counter.\n      count++;\n      // Stop iterating.\n\
    \      break;\n    }\n  }\n  // Return the count.\n  return count;\n}\n", "  var\
    \ count = 0;\n  var index = 0;\n  var substring_index;\n  while (index <= string.length\
    \ - substring.length){\n    if (string.slice(index, index + substring.length)\
    \ == substring){\n      count++;\n    }\n    index++;\n  }\n  return count;\n\
    }\n", "  var count = 0;\n  for (var i = 0, len = string.length; i < len; i++){\n\
    \    if (string.indexOf(substring, i) == i){\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "    if(string.length == substring.length){\n        var count\
    \ = 0;\n        var i = 0;\n        for(; i < string.length; i++){\n         \
    \   if(string.charAt(i) == substring.charAt(i)){\n                count++;\n \
    \           }\n        }\n        return count;\n    }\n    return 0;\n}\n", " \
    \   var counter = 0;\n    while(string.indexOf(substring, 0) !== -1){\n      \
    \  counter++;\n        string = string.replace(substring, '');\n    }\n    return\
    \ counter;\n}\n", "    if (string.length < substring.length) {\n        return\
    \ 0;\n    }\n    var times = 0;\n    var i = 0;\n    while (i < string.length){\n\
    \        if (string.charAt(i) == substring.charAt(i)) {\n            times++;\n\
    \        }\n        i++;\n    }\n    return times;\n}\n", "  return string.split(substring).length\
    \ - 1;\n}\n", "    return string.split(substring).length - 1;\n}\n", "    var\
    \ cnt = 0;\n    var i = -1;\n    while(++i < string.length){\n        cnt = string.indexOf(substring,\
    \ i) + 1; // the + 1 makes it find overlapping cases\n        if (cnt > 1) break;\n\
    \    }\n    return cnt;\n}\n", "\tvar count_times = 0;\n\tfor (var i = 0; i <=\
    \ string.length - substring.length; i++){\n\t\tif (string.indexOf(substring, i)\
    \ == i)\n\t\t\tcount_times++;\n\t}\n\treturn count_times;\n}\n", "\tvar count\
    \ = 0;\n\tfor (var i = 0; i < string.length; i++){\n\t\tvar substring = string.substr(i,\
    \ substring.length);\n\t\tif (substring == substring.toUpperCase() || substring\
    \ == substring.toLowerCase()){\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count;\n\
    }\n<|/ file ext=.js source=github filename=common.js |>", "  let count = 0;\n\
    \  for(let i=0; i < string.length; i++){\n    for(let j=0; j < substring.length;\
    \ j++){\n      if(string[i] == substring[j]){\n        count++;\n      }\n   \
    \ }\n  }\n  return count;\n}\n", "    var i, count=0;\n    for(i=0; i<string.length;i++){\n\
    \        count += string.search(substring,i) != -1;\n    }\n    return count;\n\
    }\n", "  var count = 0;\n  var inStr = false;\n  for (var i = 0; i < string.length;\
    \ i++){\n    if (inStr){\n      if (string[i] === substring[0]){\n        inStr\
    \ = false;\n        count++;\n      }\n    }else{\n      if (string[i] === substring[0]){\n\
    \        inStr = true;\n      }\n    }\n  }\n  return count;\n}\n", "    let count\
    \ = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.substr(i,\
    \ substring.length) === substring){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n", "  var count = 0;\n  var j = 0;\n  for(var i = 0; i\
    \ < string.length; i++){\n    if(j == string.length && substring == string){\n\
    \      break;\n    }\n    if(string.charAt(i) == substring.charAt(j)){\n     \
    \ count++;\n      j++;\n    }\n    else if( string.charAt(i) > substring.charAt(j)\
    \ ){\n      j++;\n    }\n    else{\n      j = 0;\n      count++;\n    }\n  }\n\
    \  return count;\n}\n", "    // If the given string is empty, return 0 times.\n\
    \    if (string == \"\") return 0;\n\n    // Initialize a counter variable.\n\
    \    var counter = 0;\n\n    // Iterate through the string and count the amount\
    \ of times the given substring can be found in the string.\n    for (var i = 0;\
    \ i < string.length; i++){\n        if (string.indexOf(substring, i) == i){\n\
    \            counter++;\n        }\n    }\n    return counter;\n}\n\n", "    var\
    \ count = 0;\n    var index_start = -1;\n    var index_end = -1;\n    for(var\
    \ i=0; i < string.length; i++){\n        index_start = i;\n        index_end =\
    \ i;\n        if(string.indexOf(substring, i) == -1){\n            count += 1;\n\
    \        } else {\n            index_end = string.indexOf(substring, i+1);\n \
    \       }\n        if(index_end > index_start){\n            count = count + index_end\
    \ - index_start;\n        }\n    }\n    return count;\n}\n", "\treturn string.match(new\
    \ RegExp(substring, \"g\")).length || 0;\n}\n", "    \n    for(var i = 0; i <\
    \ string.length; i++){\n        var count = 0;\n        for(var j = 0; j < substring.length;\
    \ j++){\n            if(string[i + j] != substring[j]){\n                count++;\n\
    \            }\n        }\n        if(count > 1){\n            return count;\n\
    \        }\n    }\n    return 0;\n}\n", "    return string.split(substring).length\
    \ - 1;\n}\n", "    var times = 0;\n    var found_index = 0;\n    while(found_index\
    \ < string.length){\n        if(string.charAt(found_index) == substring.charAt(0)){\n\
    \            times++;\n            found_index++;\n            if(string.charAt(found_index)\
    \ == substring.charAt(1)){\n                times++;\n                found_index++;\n\
    \                if(string.charAt(found_index) == substring.charAt(2)){\n    \
    \                times++;\n                    found_index++;\n              \
    \      if(string.charAt(found_index) == substring.charAt(3)){\n              \
    \          times++;\n                        found_index++;\n                \
    \        if(string.charAt(found_index) == substring.charAt(4)){\n            \
    \                times++;\n                            found_index++;\n      \
    \                  }\n                    }\n                }\n            }\n\
    \        }\n    }\n    return times;\n}\n", "    var count = 0;\n    var i = string.length\
    \ - substring.length;\n    while(i != 0){\n        if(string.charAt(i) == substring.charAt(0)){\n\
    \            count++;\n        }\n        i += substring.charAt(0) == string.charAt(i)\
    \ && string.charAt(i) != \"a\" \n        ? 1\n        : -1;\n    }\n    return\
    \ count;\n}\n", "    var count = 0;\n    for(var i = 0; i< string.length; i++){\n\
    \        if(string.charAt(i) == substring){\n            count++;\n        }\n\
    \    }\n    return count;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this.\
    \ But I think it would take me a little more time to understand how to use it.\
    \ It would also be very slow, since I would have to iterate over all the substrings\
    \ for each string.\n<|/ c |>\n<| a tags=substring,python,javascript,algorithm\
    \ |>\nHere's a working JSFiddle (http://jsfiddle.net/8KZjy/) using your idea.\n\
    It's a little slower than Joseph's solution but at least it's pretty fast.\nIt\
    \ takes about a millisecond on a string of length 10.\n<code>", "    let counter\
    \ = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.substring(i,\
    \ i + substring.length) == substring){\n            counter++;\n        }\n  \
    \  }\n    return counter;\n}\n", "    var cnt = 0;\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string.indexOf(substring, i) != -1) cnt++;\n    }\n    return\
    \ cnt;\n}\n", "\tvar count = 0;\n\t\n\tfor(var i = 0; i < string.length; i++){\n\
    \t\tif(string.charAt(i) == substring.charAt(0)){\n\t\t\tcount++;\n\t\t}\n\t}\n\
    \n\treturn count;\n}\n", "  var letters = string.toLowerCase().split(\"\");\n\
    \  var count = 0, current_letter;\n  for(var i=0; i<letters.length; i++){\n  \
    \  current_letter = letters[i];\n    if(current_letter == substring){\n      count++;\n\
    \    } else {\n      if(current_letter != substring){\n        count--;\n    \
    \  }\n    }\n  }\n  return count;\n}\n</code>\n<|/ a dscore=4 tags=string,python,count,search,algorithm\
    \ |>\n<| c |>\nThat is awesome! I never thought of doing it this way. Thank you\
    \ very much :)\n<|/ c |>\n<| c |>\nI tried to run this in PyPy (it didn't like\
    \ `return count` when `count` was a parameter and complained about `count` not\
    \ being defined). Maybe I made a mistake somewhere?\n<|/ c |>\n<| c |>\nWhat if\
    \ you need to find the number of substring in the original string?\n<|/ c |>\n\
    <| c |>\nI assume you mean how many times each string appears in the original\
    \ string? Then you can use the same method, but change `return count` to `return\
    \ [strings[i], count]` and then `return reduce(lambda x, y: x + y, map(how_many_times,\
    \ strings))`\n<|/ c |>\n<| a tags=string,python,count,search,algorithm |>\n<code>\n\
    def howMany(s,t):\n   ls = t.lower()\n   return sum(1 for x in ls if x in s)\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\nThis is probably not the fastest solution,\
    \ but it is very simple and straightforward:\n<code>\ndef how_many(string, substring):\n\
    \    count = 0\n    for c in string:\n        if c == substring:\n           \
    \ count += 1\n    return count\n</code>\n<|/ a tags=string,python,count,search,algorithm\
    \ dscore=2 |>\n<| c |>\nThis doesn't account for overlaps.\n<|/ c |>\n<| c |>\n\
    It does, but it does not account for overlaps.\n<|/ c |>\n<| c |>\nit does account\
    \ for overlaps, unless you get rid of the `count` variable and only return when\
    \ the substring has been found.\n<|/ c |>\n<| a tags=string,python,count,search,algorithm\
    \ |>\nThe most efficient way in python that I'm aware of is using sets, which\
    \ is also a dictionary-like data structure.  To get a count of how many times\
    \ your substring appears in the original string:\n<code>\n>>> original = 'the\
    \ quick brown fox jumped over the lazy dog'\n>>> substring = 'fox'\n>>> ", " \
    \ var count = 0;\n  for (var i=0; i < string.length;i++){\n    if (string.indexOf(substring,\
    \ i) == i){\n      count +=1;\n      if (count > 1){\n        break;\n      }\n\
    \    }\n  }\n  return count;\n}\n", "    var matches = 0;\n\n    for(var i = 0;\
    \ i < string.length; i++){\n        if(string.indexOf(substring, i) != -1){\n\
    \            matches++;\n        }\n    }\n\n    return matches;\n}\n", "    var\
    \ matches_length = 0;\n    for (var i=0; i<string.length; i++){\n        if (string.charAt(i)\
    \ == substring.charAt(0)){\n            if (string.charAt(i) == substring.charAt(1)){\n\
    \                if (string.charAt(i) == substring.charAt(2)){\n             \
    \       if (string.charAt(i) == substring.charAt(3)){\n                      \
    \  if (string.charAt(i) == substring.charAt(4)){\n                           \
    \ matches_length++;\n                        }\n                    }\n      \
    \          }\n            }\n        }\n    }\n    return matches_length;\n}\n",
  "  var times = 0;\n  for (var i = 0; i < string.length; i++){\n    if (string.substr(i,\
    \ substring.length) === substring){\n      times += 1;\n    }\n  }\n  return times;\n\
    }\n", "  var n = 0;\n  var pos = 0;\n  \n  while((pos = string.indexOf(substring,\
    \ pos)) != -1){\n    n++;\n    pos += substring.length;\n  }\n  \n  return n;\n\
    }\n", "  if((string == \"\" || substring == \"\")) return 0;\n  if(string.substr(0,\
    \ substring.length) == substring) return string.split(substring).length - 1;\n\
    \  if(string.substr(0, substring.length).split(substring).length > 1) return string.split(substring).length\
    \ - 1;\n  return -1;\n}\n", "  var count = 0;\n  for(var i = 0; i < string.length;\
    \ i++){\n    if (string.substr(i, substring.length) === substring){\n      count++;\n\
    \      i = i + substring.length;\n    }\n  }\n  return count;\n}\n", "    var\
    \ count = 0;\n    var index;\n    for(index = 0; index < string.length; index++){\n\
    \        if(string[index] === substring[0]){\n            if(string[index+1] ===\
    \ substring[1]){\n                count++;\n                if(string[index+2]\
    \ === substring[2]){\n                    count++;\n                    if(string[index+3]\
    \ === substring[3]){\n                        count++;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n",
  "\tlet result = 0;\n\tlet i = 0;\n\tfor(; i < string.length; i++){\n\t\tif(string.indexOf(substring,\
    \ i) !== -1) result++;\n\t}\n\treturn result;\n}", "    return string.match(new\
    \ RegExp(substring, \"g\")) ? string.match(new RegExp(substring, \"g\")).length\
    \ : 0;\n}\n\n", "\tvar letters = substring.toLowerCase().split('');\n\tvar count\
    \ = 0; //Start with a count of 0.\n\tvar stringLength = string.length; //Get the\
    \ length of string.\n\tvar substringLength = substring.length; //Get the length\
    \ of substring.\n\tfor (var i = 0, j = stringLength - 1; i <= stringLength - substringLength;\
    \ i++, j--){ //Go through each character.\n\t\tif (string[i] == substring[j] &&\
    \ string[i] != letters[j]){ //Check if the letters match up.\n\t\t\tcount++; //If\
    \ they do, count the occurrence.\n\t\t}\n\t}\n\treturn count;\n}\n", "  var count\
    \ = 0;\n  var index = 0;\n  \n  while(index != -1){\n    index = string.indexOf(substring,\
    \ index);\n    count++;\n    index++;\n  }\n  \n  return count;\n}\n", "    let\
    \ count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string.includes(substring,\
    \ i)){\n            count += 1;\n        }\n    }\n    return count;\n}\n", "\t\
    var count = 0;\n\tfor(var i = 0; i < string.length; i++){\n\t\tif(string.charAt(i)\
    \ == substring.charAt(0)) count++;\n\t}\n\treturn count;\n}\n", "    var count\
    \ = 0;\n    \n    // Loop through the substring's characters\n    for(var i=0;\
    \ i<string.length; i++){\n        \n        // If the current character is equal\
    \ to the first character\n        if(string[i]==substring[0]){\n            \n\
    \            // Increment the count by 1\n            count++;\n        }\n  \
    \      \n        // If the current character is not equal to the first character\n\
    \        else {\n            \n            // If the current character is equal\
    \ to the second character\n            if(string[i]==substring[1]){\n        \
    \        \n                // Increment the count by 1\n                count++;\n\
    \                \n                // If the current character is equal to the\
    \ last character\n                if(string[i]==substring[substring.length-1]){\n\
    \                    \n                    // Increment the count by 1\n     \
    \               count++;\n                    \n                }\n          \
    \  }\n            \n            // If the current character is not equal to the\
    \ second character\n            else {\n                \n                // If\
    \ the current character is equal to the last character\n                if(string[i]==substring[substring.length-1]){\n\
    \                    \n                    // Increment the count by 1\n     \
    \               count++;\n                    \n                    // If the\
    \ current character is equal to the last character\n                    if(string[i]==substring[substring.length-1]){\n\
    \                        \n                        // Increment the count by 1\n\
    \                        count++;\n                    }\n                }\n\
    \            }\n        }\n    }\n    \n    // Return the count variable\n   \
    \ return count;\n}\n</cell>\n<text>\nWrite a Python program to find longest substring\
    \ with K distinct characters in it.\n\nNote: The number of distinct characters\
    \ in a substring is K+1.\n\n\n</text>\n<cell>\n# Example 1:\n\n# Input:\n# str\
    \ = \"abcaabcccaab\"\n# K = 3\n# Output:\n# ans = 3\n# Explanation: The longest\
    \ substring with 3 distinct characters is \"abccaa\".\n# Example 2:\n\n# Input:\n\
    # str = \"abcaabcccaab\"\n# K = 19\n# Output:\n# ans = 4\n# Explanation: The longest\
    \ substring with 19 distinct characters is \"abcaa\".\n# Note: Length of string\
    \ will be between 2 and 20000\n# Note: You may assume that the string consists\
    \ of lowercase English letters only.\n</cell>\n<cell>\ndef longest_substring(str,\
    \ K):\n    \n    # Get the length of the string using len() built-in function\n\
    \    str_length = len(str)\n    \n    # Initialize a variable to store the longest\
    \ substring\n    max_str_len = 0\n    \n    # Loop through the string\n    for\
    \ i in range(str_length):\n        \n        # If the current character is equal\
    \ to the Kth character\n        if str[i] == str[K]:\n            \n         \
    \   # Increment the length of the longest substring\n            max_str_len = ",
  "    string = string.split(\"\");\n    for(var i = 0, len = string.length; i < len;\
    \ ++i){\n        if(string[i] === substring[0]){\n            for(var j = i; j\
    \ < len; ++j){\n                if(string[j] === substring[1]){\n            \
    \        ++i;\n                    break;\n                }\n            }\n\
    \            if(i < len){\n                ++i;\n            }\n        }\n  \
    \  }\n    return i;\n}\n", "  var count = 0; //Counts the number of times the\
    \ substring can be found in the string.\n  for (var x=0; x<string.length; x++)\
    \ {\n    if(string.charAt(x)==substring.charAt(0)) count++;\n    else if(string.charAt(x)==substring.charAt(1))\
    \ count++;\n    else if(string.charAt(x)==substring.charAt(2)) count++;\n  }\n\
    \  return count;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks man. Just out of curiosity\
    \ what is the most efficient way to do this?\n<|/ c |>\n<| c |>\nThis algorithm\
    \ is the most efficient, as it is the fastest in most cases. In contrast to other\
    \ answers, it is not the most flexible.\n<|/ c |>\n<| c |>\nThe algorithm above\
    \ is definitely the most efficient. Even though it involves looping through all\
    \ possible combinations, this can be significantly improved if we use more memory\
    \ and avoid unnecessary string operations.\n<|/ c |>\n<| c |>\nYes, the string\
    \ comparison is not necessarily the most efficient in this case, as you are making\
    \ unnecessary string comparisons. But in general, it is the most efficient method\
    \ (it is the fastest in most cases).\n<|/ c |>\n<| c |>\nThanks for clearing that\
    \ up. I'll have to take a look at some more algorithms to better understand how\
    \ they work. Although I do think this answer is one of the best answers, I like\
    \ that the other answers explain the problem a little better.\n<|/ c |>\n<| a\
    \ |>\nYou can try this.\n<code>\nvar string1 = \"aaa\";\nvar string2 = \"aaaa\"\
    ;\nvar string3 = \"aaab\";\nvar string4 = \"aaaaa\";\nvar string5 = \"aaaaaa\"\
    ;\nvar string6 = \"aaaaaab\";\nvar string7 = \"aaaaaaba\";\nvar string8 = \"aaaaaabb\"\
    ;\nvar string9 = \"aaaaaabbb\";\nvar string10 = \"aaaaaabbbb\";\n\nvar result\
    \ = string1.match(string2);\nif(result != null && result.length==string1.length)\n\
    {\n  console.log(\"YES\");\n}\nelse\n{\n  console.log(\"NO\");\n}\n\nresult =\
    \ string2.match(string3);\nif(result != null && result.length==string2.length)\n\
    {\n  console.log(\"YES\");\n}\nelse\n{\n  console.log(\"NO\");\n}\n\nresult =\
    \ string3.match(string4);\nif(result != null && result.length==string3.length)\n\
    {\n  console.log(\"YES\");\n}\nelse\n{\n  console.log(\"NO\");\n}\n\n", "  var\
    \ count = 0;\n  for(var i = 0; i < string.length; i++){\n    if(string.indexOf(substring,\
    \ i) == i){\n      count++;\n    }\n  }\n  return count;\n}\n", "    string=string.toLowerCase()\n\
    \    substring=substring.toLowerCase()\n    var count = 0\n    for(var i=0 ; i<string.length\
    \ ; i++){\n        if(string.charAt(i)==substring.charAt(0)){\n            count++\n\
    \            if(i<substring.length-1){\n                var j = substring.indexOf(string[i],\
    \ i+1)\n                while(j>=0 && (substring.charAt(j)==string.charAt(i))){\n\
    \                    count++\n                    j=substring.indexOf(string[i],\
    \ j+1)\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\n", "    var count = 0;\n    for (var i=0; i<string.length; i++){\n      \
    \  if (string.charAt(i) == substring.charAt(0)){\n            for (var j=1; j<substring.length;\
    \ j++){\n                if (string.charAt(i+j-1) == substring.charAt(j))\n  \
    \                  count++;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    var count = 0;\n    var i = string.length - substring.length;\n   \
    \ while(i>=0){\n        count += string.charAt(i) == substring ? 1 : 0;\n    \
    \    i--;\n    }\n    return count;\n}\n", "  var i, count = 0;\n\n  for (i =\
    \ 0; i < string.length; i++){\n    if (string.substr(i, substring.length) ===\
    \ substring){\n      count += 1;\n    }\n  }\n\n  return count;\n}", "    var\
    \ count = 0;\n    for(var i = 0, len = string.length; i < len; i++){\n       \
    \ for(var j = 0, len2 = substring.length; j < len2; j++){\n            if(string[i]\
    \ == substring[j]){\n                count++;\n                break;\n      \
    \      }\n        }\n    }\n    return count;\n}\n", "  return string.match(new\
    \ RegExp(substring, 'g')).length\n}\n\n", "    return string.split(substring).length\
    \ - 1;\n}\n", "  // Initialize variables\n  var count = 0;\n  var index;\n  \n\
    \  // Iterate over the original string\n  for(var i=0; i<string.length; i++){\n\
    \    // Check if the character is equal to the substring\n    if(string.charAt(i)\
    \ === substring){\n      // Increase count\n      count++;\n    }\n    // Check\
    \ if the character is equal to the substring but is at the end of the string\n\
    \    else if(string.charAt(i) === substring && i === string.length-1){\n     \
    \ // Increase count\n      count++;\n    }\n  }\n  \n  // Return the count (can\
    \ be 0 if there are no occurrences)\n  return count;\n}\n\n", "  var count = 0;\n\
    \  for (var i = 0; i < string.length; i++){\n    if (string[i] == substring[0]){\n\
    \      count++;\n      for (var j = substring.length - 1; j >= 0; j--){\n    \
    \    var substring2 = string.substring(i, i + substring.length);\n        if (string.substring(i,\
    \ i + substring.length) == substring2){\n          count += substring.length;\n\
    \        }\n      }\n    }\n  }\n  return count;\n}\n", "  if (string.length <\
    \ substring.length) return 0;\n  let count = 0;\n  for (let i=0; i<substring.length;\
    \ i++){\n    count += string.includes(substring.charAt(i));\n  }\n  return count;\n\
    }\n", "    let count = 0;\n    for(let i = 0; i < string.length; i++){\n     \
    \   let substring_pos = string.indexOf(substring, i);\n        if(substring_pos\
    \ != -1){\n            count++;\n            i = substring_pos;\n        }\n \
    \       else{\n            break;\n        }\n    }\n    return count;\n}\n",
  "    if(string === substring) return 0;\n    return string.split(substring).length\
    \ - 1;\n}\n\n", "    if(string == null || substring == null || string == \"\"\
    )\n        return 0\n    else{\n        let count = 0\n        for(let i = 0,\
    \ len = string.length; i < len; i++){\n            if(string[i] === substring[0]){\n\
    \                for(let j = 1; j < substring.length; j++){\n                \
    \    if(string.indexOf(string[i], i + 1) !== -1 || string.indexOf(string[i], i\
    \ - j) !== -1)\n                        count++\n                }\n         \
    \   }\n        }\n        return count\n    }\n}", "    var count = 0;\n    var\
    \ length = string.length;\n    var substring_length = substring.length;\n    for(var\
    \ i = 0; i < length; i++){\n        if(string.indexOf(substring, i) !== -1){\n\
    \            count += 1;\n            i += substring_length;\n        }\n    }\n\
    \    return count;\n}\n", "    var count = 0;\n    var start = 0;\n    var i =\
    \ 0;\n    while(i < string.length){\n        while(start < string.length && string.charAt(start)\
    \ == substring[i]){\n            start++;\n            i++;\n        }\n     \
    \   count++;\n        if(i < string.length && string.charAt(i) == substring[i]){\n\
    \            i++;\n        }else{\n            i = start;\n        }\n    }\n\
    \    return count;\n}", "    let result = 0;\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string.indexOf(substring, i) == i){\n            result +=\
    \ 1;\n        }\n    }\n    return result;\n}\n", "  if (substring === \"\"){\n\
    \    return 0\n  }\n  var count = 0\n  for (var i = 0; i < string.length; i++){\n\
    \    if (string.substring(i, i + substring.length) === substring){\n      count++\n\
    \    }\n  }\n  return count\n}\n", "    if(string.length == 0){\n        return\
    \ 0;\n    }\n    if(string.length == 1){\n        if(string.indexOf(string) ==\
    \ 0){\n            return 1;\n        }\n    }\n    if(string.indexOf(substring)\
    \ == 0){\n        return string.split(substring).length - 1;\n    }\n    return\
    \ 0;\n}\n", "    string = string.toLowerCase();\n    substring = substring.toLowerCase();\n\
    \n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.charAt(i).toLowerCase()\
    \ === substring.charAt(i).toLowerCase()){\n            count++;\n        }\n \
    \   }\n    return count;\n}\n", "  if (string.length == 0) return 0;\n  var count\
    \ = string.toUpperCase().split(substring).length - 1;\n  return string.toUpperCase().split(substring).length\
    \ - 1;\n}\n", "\tlet count = 0;\n\tfor (let i = 0; i < string.length; i++){\n\t\
    \tif (string.substring(i, i + substring.length) === substring){\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n", "    let total_count = 0;\n    let start_index;\n\
    \    \n    for(let i = 0; i < string.length; i++){\n        start_index = i;\n\
    \        let last_index = i + substring.length;\n        if(string[last_index]\
    \ === substring){\n            total_count++;\n            i = last_index;\n \
    \       }\n    }\n    return total_count;\n}\n", "    var counter = 0;\n    for(var\
    \ i = 0; i < string.length; i++){\n        if (string.indexOf(substring, i) !=\
    \ -1){\n            counter++;\n        }\n    }\n    return counter;\n}\n", "\t\
    let count = 0;\n\tlet substring_length = substring.length;\n\tfor(let i = 0; i\
    \ <= string.length-substring_length; i++){\n\t\tif(string.substr(i, substring_length)\
    \ === substring){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "  if(string\
    \ === substring) return 0;\n  if(string.indexOf(substring) === -1) return 0;\n\
    \  return string.split(substring).length - 1;\n}", "  var counter = 0;\n  for\
    \ (var i = string.length - substring.length; i <= string.length; i++){\n    if\
    \ (string.substring(i,i+substring.length) === substring){\n      counter++;\n\
    \    }\n  }\n  return counter;\n}\n", "  if(string == \"\") return 0;\n  if(substring\
    \ == \"\") return string.length;\n  \n  let count = 0;\n  \n  for(let i = 0; i\
    \ < string.length; i++){\n    if(string[i] == substring[0]){\n      count++;\n\
    \    }\n    \n    if(string[i] == substring[1]){\n      count++;\n    }\n    \n\
    \    if(string[i] == substring[2]){\n      count++;\n    }\n    \n    if(string[i]\
    \ == substring[3]){\n      count++;\n    }\n    \n    if(string[i] == substring[4]){\n\
    \      count++;\n    }\n    \n    if(string[i] == substring[5]){\n      count++;\n\
    \    }\n    \n    if(string[i] == substring[6]){\n      count++;\n    }\n    \n\
    \    if(string[i] == substring[7]){\n      count++;\n    }\n    \n    if(string[i]\
    \ == substring[8]){\n      count++;\n    }\n    \n    if(string[i] == substring[9]){\n\
    \      count++;\n    }\n    \n    if(string[i] == substring[10]){\n      count++;\n\
    \    }\n    \n    if(string[i] == substring[11]){\n      count++;\n    }\n   \
    \ \n    if(string[i] == substring[12]){\n      count++;\n    }\n    \n    if(string[i]\
    \ == substring[13]){\n      count++;\n    }\n    \n    if(string[i] == substring[14]){\n\
    \      count++;\n    }\n    \n    if(string[i] == substring[15]){\n      count++;\n\
    \    }\n    \n    if(string[i] == substring[16]){\n      count++;\n    }\n   \
    \ \n    if(string[i] == substring[17]){\n      count++;\n    }\n    \n    if(string[i]\
    \ == substring[18]){\n      count++;\n    }\n    \n    if(string[i] == substring[19]){\n\
    \      count++;\n    }\n    \n    if(string[i] == substring[20]){\n      count++;\n\
    \    }\n    \n    if(string[i] == substring[21]){\n      count++;\n    }\n   \
    \ \n    if(string[i] == substring[22]){\n      count++;\n    }\n    \n    if(string[i]\
    \ == substring[23]){\n      count++;\n    }\n    \n    if(string[i] == substring[24]){\n\
    \      count++;\n    }\n    \n    if(string[i] == substring[25]){\n      count++;\n\
    \    }\n    \n    if(string[i] == substring[26]){\n      count++;\n    }\n   \
    \ \n    if(string[i] == substring[27]){\n      count++;\n    }\n    \n    if(string[i]\
    \ == substring[28]){\n      count++;\n    }\n    \n    if(string[i] == ", "  let\
    \ count = 0;\n  for(var i = 0; i < string.length; i++){\n    if(string.includes(substring)){\n\
    \      count += 1;\n      if(string.includes(substring.substring(0,i))){\n   \
    \     count += 1;\n        if(string.includes(substring.substring(i,string.length))){\n\
    \          count += 1;\n        }\n      }\n    }\n  }\n  return count;\n}\n",
  "  var count = 0;\n  for (var i = 0; i < string.length; i++){\n    if (string.charAt(i)\
    \ == substring.charAt(0)){\n      count++;\n      if (string.charAt(i) == substring.charAt(1)){\n\
    \        count++;\n      }\n    }\n  }\n  return count;\n}\n", "    var count\
    \ = 0, i = 0, j = 0;\n    for(i = 0; i < string.length; i++){\n        j = string.indexOf(substring,\
    \ i);\n        if(j > -1 && j <= (i + substring.length)){\n            count++;\n\
    \            i = j;\n        }\n    }\n    return count;\n}\n", "    var substring_length\
    \ = substring.substring(0,1).length;\n    var max_substring_length = string.length\
    \ - substring.length;\n    var count = Math.ceil( max_substring_length/substring_length\
    \ );\n    return count;\n}\n", "    var count = 0;\n    var substring_index =\
    \ string.indexOf(substring);\n    while(substring_index != -1){\n        count++;\n\
    \        substring_index = string.indexOf(substring, substring_index + 1);\n \
    \   }\n    return count;\n}\n", "    return string.split(substring).length - 1;\n\
    }\n</cell>\n<text>\nBONUS: Write a function to remove the duplicates from a list.\
    \ Hint: There are many ways to do this, but you can do this with a list comprehension.\
    \ You'll have to read up on list comprehension syntax if you choose to use this\
    \ function, but there are plenty of other methods to do this.\n\n\n</text>\n<code\
    \ language=julia-0.6>", "  let count = 0;\n  let index;\n  let string_index;\n\
    \  for (index = string.length; index > 0; index--) {\n    string_index = string.indexOf(substring,\
    \ index - 1);\n    if (string_index > -1) {\n      count++;\n      index = string_index;\n\
    \    }\n  }\n  return count;\n}\n", "  var count = 0;\n  for(var i=0; i<string.length;\
    \ i++){\n    if(string.charAt(i) === substring.charAt(0)){\n      count++;\n \
    \   }\n  }\n  return count;\n}\n\n", "    var count = 0;\n    var pos = string.indexOf(substring);\n\
    \    while (pos != -1) {\n        count++;\n        pos = string.indexOf(substring,\
    \ pos+1);\n    }\n    return count;\n}\n", "  var count_found = 0;\n  for (var\
    \ i=0; i < string.length; i++){\n    if (string.indexOf(substring, i) > -1){\n\
    \      count_found += 1;\n    }\n  }\n  return count_found;\n}\n", "    var count\
    \ = 0;\n    for (var pos = string.toLowerCase().indexOf(substring.toLowerCase());\
    \ pos > -1; pos = string.toLowerCase().indexOf(substring.toLowerCase(), pos+1)){\n\
    \        count++;\n    }\n    return count;\n}\n", "  var count = 0;\n  for(var\
    \ i = 0; i < string.length; i++){\n    if(string[i] == substring[0]){\n      if(string.substr(i)\
    \ == substring){\n        count++;\n      }\n    }else{\n      if(string.substr(i)\
    \ != substring){\n        count += 2;\n      }\n    }\n  }\n  return count;\n\
    }\n", "  var count = 0;\n  \n  for (var i = 0; i < string.length; i++) {\n   \
    \ var current_char = string[i];\n    \n    for (var j = 0; j < substring.length;\
    \ j++) {\n      var sub = substring[j];\n      \n      if (current_char == sub)\
    \ {\n        count++;\n      }\n    }\n  }\n  \n  return count;\n}\n", "  var\
    \ found = 0;\n  for (var i=0; i<string.length; i++){\n    if (string.substr(0,\
    \ i+substring.length) == substring){\n      found++;\n    }\n  }\n  return found;\n\
    }\n", "    var count = 0;\n    for(var i = 0; i < string.length; i++){\n     \
    \   if(string.charAt(i) == substring.charAt(0)){\n            count += 1;\n  \
    \          if(string.charAt(i) == substring.charAt(substring.length-1)){\n   \
    \             count += 1;\n            }\n        }else{\n            count =\
    \ 0;\n        }\n        if(count > substring.length){\n            return count;\n\
    \        }\n    }\n    return count;\n}", "    let count = 0;\n    for(let i =\
    \ 0; i < string.length; i++){\n        let temp = string.slice(i, i + substring.length);\n\
    \        if(temp === substring) count++;\n    }\n    return count;\n}\n", "  \
    \  return string.split(substring).length - 1;\n}\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n3. Functional programming \n\
    A functional programming is a programming paradigm that treats functions as objects\
    \ with methods that perform operations on their arguments. Functional programming\
    \ is closely related to functional languages and has many similarities. There\
    \ are many implementations of functional programming languages. \nIn Julia language,\
    \ there is a syntax sugar for writing functions with functional programming style:\n\
    \n\n</text>\n<code language=julia-1.5>\n# function with one parameter ", "   \
    \ \n    // Initialize counter to 0\n    var count = 0;\n    \n    // Initialize\
    \ start index to 0\n    var startIndex = 0;\n    \n    // Find the start and end\
    \ index of the substring\n    while (startIndex < string.length){\n    \n    \
    \    // Find the next occurrence of the substring\n        var index = string.indexOf(substring,\
    \ startIndex);\n        \n        // If the substring occurs at the end of the\
    \ string, it cannot be found. Increase the counter by 1 to avoid infinite loop\n\
    \        if (index == -1){\n            count += 1;\n            \n          \
    \  // If the substring occurs at the end of the string, start index will be at\
    \ the end of the string. Increase the start index to start searching from the\
    \ beginning of the string\n        } else if (index == string.length - substring.length){\n\
    \            startIndex += 1;\n            \n        // If the substring occurs\
    \ before the first occurrence of the string, increase the start index by 1 to\
    \ search again starting at the next character after the first occurrence of the\
    \ string\n        } else if (index == startIndex){\n            startIndex +=\
    \ 1;\n            \n        // If the substring occurs after the last occurrence\
    \ of the string, increase the start index to search for the substring starting\
    \ from the beginning of the string\n        } else if (index == string.length\
    \ - substring.length + startIndex){\n            startIndex = 0;\n           \
    \ \n        // If the substring occurs multiple times in the string, increase\
    \ the counter by the number of times the substring occurs\n        } else { \n\
    \            count += 1;\n            \n            // If there are multiple times\
    \ the substring occurs, start index will be after the last occurrence of the string.\
    \ Increase the start index to start searching from the beginning of the string\n\
    \        }\n    }\n    \n    // Return the counter variable\n    return count;\n\
    }\n", "    var count = 0;\n    string = string.toLowerCase();\n    substring =\
    \ substring.toLowerCase();\n    for(var i = 0; i < string.length; i++){\n    \
    \    var start_index = string.indexOf(substring, i);\n        var end_index =\
    \ start_index + substring.length;\n        if(start_index >= 0){\n           \
    \ count += end_index - start_index;\n            i = end_index;\n        }\n \
    \   }\n    return count;\n}\n</code>\n<|/ a tags=javascript,algorithm dscore=1\
    \ |>\n<| c |>\nWhile this link may answer the question, it is better to include\
    \ the essential parts of the answer here and provide the link for reference. Link-only\
    \ answers can become invalid if the linked page changes.\n<|/ c |>\n<| c |>\n\
    Thanks for your suggestion. Updated my answer to include some extra information.\n\
    <|/ c |>\n<| a dscore=1 |>\nI haven't tested it exhaustively, but I'm pretty sure\
    \ this is optimal.\nIt works by converting the string into a tree where each node\
    \ is another string that starts with the same characters as the original string.\
    \ Then it counts how many different ways this tree can be created. For example\
    \ \"abcd\" would be a tree like \"ab\" \"abc\" \"ac\" \"b\" \"bc\" \"c\" \"d\"\
    . Count the number of different trees and you will find that there are 4 different\
    \ trees that start with the original string.\n<code>", "  var counter = 0;\n \
    \ var pos = 0;\n  while(pos < string.length){\n    if(string.charAt(pos) == substring.charAt(0)){\n\
    \      counter++;\n      pos += 1;\n      if(string.charAt(pos) == substring.charAt(1)){\n\
    \        pos += 1;\n        counter++;\n      }\n    }\n    else{\n      pos =\
    \ 0;\n    }\n  }\n  return counter;\n}\n", "  // If there is no substring, return\
    \ 0\n  if(typeof substring === \"undefined\")\n    return 0;\n\n  // Get the substring\
    \ length\n  var length = substring.length;\n\n  // If the given string length\
    \ is shorter than substring, return 0\n  if(string.length < length)\n    return\
    \ 0;\n\n  // Initialize the count as 1\n  var count = 1;\n\n  // If the given\
    \ string length is longer than substring, return 0\n  if(string.length > length)\n\
    \    return 0;\n\n  // Loop through all characters of the given string\n  for(var\
    \ i = 0, end = string.length; i < end; ++i){\n    // If the character at the given\
    \ index is the same as the current character in the substring,\n    // add one\
    \ to the count and continue\n    if(string[i] === substring[i])\n      count++;\n\
    \    else\n      break;\n  }\n\n  // Return the calculated count\n  return count;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
