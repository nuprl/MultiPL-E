name: HumanEval_56_correct_bracketing
language: js
prompt: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
  )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
  <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
  <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
  ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
  <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
  >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n\
  }\n\ntest();"
completions: ["\tbrackets = brackets.split(\"\");\n\tvar opening_brackets = new Array();\n\
    \tvar closing_brackets = new Array();\n\tvar open_brackets = 0;\n\tvar close_brackets\
    \ = 0;\n\tvar i;\n\tfor(i = 0; i< brackets.length; i++){\n\t\tif (brackets[i]\
    \ == \"<\"){\n\t\t\tif (open_brackets == 0){\n\t\t\t\topening_brackets.push(brackets[i]);\n\
    \t\t\t} else {\n\t\t\t\tclosing_brackets.push(brackets[i]);\n\t\t\t}\n\t\t\topen_brackets++;\n\
    \t\t} else if (brackets[i] == \">\"){\n\t\t\topen_brackets--;\n\t\t\tif (open_brackets\
    \ == 0){\n\t\t\t\tclosing_brackets.push(brackets[i]);\n\t\t\t} else {\n\t\t\t\t\
    opening_brackets.push(brackets[i]);\n\t\t\t}\n\t\t} else if (brackets[i] == \"\
    <>\"){\n\t\t\tif (open_brackets != 0 || closing_brackets.length != 0){\n\t\t\t\
    \treturn false;\n\t\t\t}\n\t\t} else if (brackets[i] == \"</\"){\n\t\t\tif (close_brackets\
    \ == 0){\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\topen_brackets--;\n\t\t\
    \t}\n\t\t} else {\n\t\t\tif (open_brackets != 0){\n\t\t\t\treturn false;\n\t\t\
    \t} else if (close_brackets != 0){\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\
    \t\topen_brackets++;\n\t\t\t\tclose_brackets++;\n\t\t\t}\n\t\t}\n\t}\n\tif (opening_brackets.length\
    \ != closing_brackets.length){\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\
    \t}\n}\n", "\tvar opening = brackets.match(/></g),\n\t\tclosing = brackets.match(/<</g);\n\
    \t\n\treturn (opening.length == (closing.length) && opening.length != 0);\n}\n",
  "  var openings = brackets.match(/<[A-z]*>/);\n  var closings = brackets.match(/<\\\
    /*[A-z]*>/);\n  var count = 0;\n  var numOpenings = openings.length;\n  var numClosings\
    \ = closings.length;\n  var openingBracket;\n  var closingBracket;\n  var openingChar;\n\
    \  var closingChar;\n  var closingBracketCount = 0;\n  var openingCharCount =\
    \ 0;\n  \n  if(numOpenings === numClosings){\n    return false;\n  }\n  \n  for(var\
    \ i=0; i<numOpenings; i++){\n    openingBracket = openings[i];\n    openingChar\
    \ = openingBracket.charAt(0);\n    openingBracketCount = openingBracket.length;\n\
    \    \n    for(var j=i+1; j<numOpenings; j++){\n      closingBracket = closings[j];\n\
    \      closingChar = closingBracket.charAt(0);\n      closingBracketCount = closingBracket.length;\n\
    \      \n      if(openingChar === closingChar){\n        openingCharCount++;\n\
    \      }\n      \n      if(openingBracketCount !== closingBracketCount){\n   \
    \     return false;\n      }\n    }\n    \n    count++;\n  }\n  \n  return count\
    \ === numOpenings;\n}\n</code>\nIt works by looping through all characters in\
    \ your brackets string and seeing if there is a match in the other string. If\
    \ there is a match it increments both of these count variables by 1. Then it checks\
    \ to see if they have the same length. \nThis function is fairly easy to understand\
    \ and use. Hope that helps!\n<|/ a |>\n<| c |>\nthank you very much for the quick\
    \ response.  I tested the program and it works well, only thing is that it can\
    \ only handle brackets up to 3 characters long.  Any idea how to change it to\
    \ handle more brackets?\n<|/ c |>\n<| c |>\nDo you mean that you want to be able\
    \ to have more than 3 closing brackets? Or that the brackets are allowed to have\
    \ more than 3 characters?\n<|/ c |>\n<| c |>\nThe code works for any number of\
    \ brackets that you choose. The only restriction is that the brackets are placed\
    \ in an order that is correct before you pass them into the function. I edited\
    \ my post to show an example where it works. If you change the brackets string\
    \ in the second line to \"<>><<<<<><><><><>\" it will return true because the\
    \ correct order is \"<><><><><><><><><<<>>\"\n<|/ c |>\n<| c |>\nI ", "\tif (brackets.length\
    \ <= 0)\n\t\treturn false;\n\tfor (var i = 0; i < brackets.length; ++i)\n\t\t\
    if (!is_bracket(brackets[i]))\n\t\t\treturn false;\n\treturn true;\n}\n", "  \
    \  var open_tags = brackets.match(/\\</g);\n    var close_tags = brackets.match(/\\\
    >/g);\n    var count = open_tags.length * close_tags.length;\n    return count\
    \ === 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < brackets.length;\
    \ i++){\n        let current = brackets[i];\n        if(current === \"<\"){\n\
    \            stack.push(brackets[i+1]);\n        }\n        else if(current ===\
    \ \">\"){\n            while(stack.length){\n                if(stack.pop() ===\
    \ \"<\"){\n                    break;\n                }\n            }\n    \
    \    }\n    }\n    while(stack.length){\n        if(stack.pop() === \"<\"){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    for\
    \ (var i=1, j=brackets.length; i<j; ++i){\n        var opening = brackets[i-1];\n\
    \        var closing = brackets[i];\n        if (opening !== closing){\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n</textarea></div>\n\
    \n    <script>\n      var editor = CodeMirror.fromTextArea(document.getElementById(\"\
    code\"), {\n        lineNumbers: true,\n        matchBrackets: true,\n       \
    \ mode: \"python\"\n      });\n    </script>\n    \n    <p><strong>MIME types\
    \ defined:</strong> <code>text/x-python</code>.</p>\n\n    <p>Development of the\
    \ CodeMirror Python mode was kindly sponsored\n    by <a href=\"https://bitbucket.org/marijnh/CodeMirror\"\
    >Brian Marijn Haverbeke</a>\n    (<a href=\"https://bitbucket.org/marijnh/CodeMirror/graphs/contributors\"\
    >contributors</a>)\n    and <a href=\"https://bitbucket.org/marijnh/CodeMirror/wiki/CodeMirror-addons\"\
    >addons</a>.</p>\n\n  </article>\n\n<|/ file filename=index.html ext=.html |>\n\
    <| c |>\nThanks! I was looking for something like this.\n<|/ c |>\n<| a |>\nIf\
    \ you want your editor to be indented (ie. code blocks aligned), you should be\
    \ using CodeMirror.indentLine(). CodeMirror doesn't provide any means to change\
    \ its indentation settings by default, though. So, I guess, your best bet is to\
    \ set indentWithTabs = true and indentUnit = 4 when initializing CodeMirror.\n\
    <|/ a tags=codemirror dscore=2 |>\n<| c |>\nYes, I've got it working now, thanks\
    \ anyway! :)\n\nI still have a question though, if you don't mind.\n<|/ c |>\n\
    <| c |>\nYou can create a [new question](http://stackoverflow.com/questions/ask)\
    \ for that.\n<|/ c |>\n<| c |>\nHmmm, I suppose I should ask that one separately.\
    \ Thanks for the tips, though :)\n<|/ c |>\n<| a tags=codemirror dscore=0 |>\n\
    You can control the indentation with CodeMirror.indentLine().\n<|/ a |>\n<| a\
    \ dscore=0 |>\nIf you're using an editor like Sublime, just use Ctrl+Shift+Alt+K\
    \ to unindent a line. \nIt works pretty well, unless you want to use something\
    \ like a code block, which will insert a new line after the indentation level.\n\
    <|/ a tags=codemirror |>\n<| a |>\nIf you are using Visual Studio Code and trying\
    \ to indent code from above or below your code block then you can press Alt+Shift+<\
    \ or Alt+Shift+> to indent your code or ", "    if (brackets.length < 2) {\n \
    \       return false;\n    }\n    let brackets_string = brackets.substring(0,1);\n\
    \    let open_brackets_string = brackets.substring(1,brackets.length);\n    let\
    \ close_brackets_string = brackets.substring(brackets.length-1,brackets.length);\n\
    \    let open_brackets = open_brackets_string.split(\"\");\n    let close_brackets\
    \ = close_brackets_string.split(\"\");\n    open_brackets.sort();\n    close_brackets.sort();\n\
    \    for (i=0; i<open_brackets.length; i++){\n        if (open_brackets[i] ==\
    \ close_brackets[i]){\n            return true;\n        }\n    }\n    return\
    \ false;\n}", "  // the string should be trimmed first.\n  var brackets_trimmed\
    \ = brackets.trim();\n  // var brackets_trimmed = brackets.trimLeft();\n  var\
    \ first_bracket = brackets_trimmed.substr(0, 1);\n  var all_open_brackets_end\
    \ = brackets_trimmed.substr(1, brackets_trimmed.length);\n  return first_bracket\
    \ == \"<\" && all_open_brackets_end == \">\";\n}\n", "\tbrackets = brackets.split(\"\
    \");\n\tbrackets.reverse();\n\tfor(i=0;i<brackets.length;i++){\n\t\tif(brackets[i]==\"\
    <\"){\n\t\t\tif(!brackets[i+1] || brackets[i+1]==\">\"){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn true;\n}", "  let openingbrackets=0;\n  let closingbrackets=0;\n\
    \  for(let i=0;i<brackets.length;i++){\n    if(brackets[i]==\"<\"){\n      openingbrackets++;\n\
    \    }\n    else if(brackets[i]==\">\"){\n      closingbrackets++;\n    }\n  }\n\
    \  if(openingbrackets!==closingbrackets)return false;\n  else return true;\n}\n",
  "\treturn brackets.indexOf('<') != -1 && brackets.indexOf('>') != -1 && brackets.indexOf('<<')\
    \ != -1 && brackets.indexOf('>>') != -1;\n}\n", "  for(var i = 0; i < brackets.length;\
    \ i++){\n    if(brackets[i] !== \"<\" && brackets[i] !== \">\") return false;\n\
    \  }\n  return true;\n}\n", "  var correct = true;\n  brackets.split('').forEach(function(char){\n\
    \    if(char == '<'){\n      if(correct == false){\n        correct = true;\n\
    \      } else {\n        correct = false;\n      }\n    } else {\n      if(correct\
    \ == true){\n        correct = false;\n      } else {\n        correct = true;\n\
    \      }\n    }\n  });\n  return correct;\n}\n", "  var bracket_type = brackets[0];\
    \ // assumes there is no nesting\n  var num_open_brackets = brackets.split(\"\
    <\").length - 1;\n  var num_closed_brackets = brackets.split(\">\").length - 1;\n\
    \  var is_closed = (num_closed_brackets == num_open_brackets);\n  return num_open_brackets\
    \ == num_closed_brackets && is_closed;\n}\n", "  return brackets.split('>').length\
    \ == brackets.split('<').length;\n}", "  brackets_regex = new RegExp(brackets,\
    \ 'g');\n  var match = brackets_regex.exec(to_be_bracketed);\n  var correct =\
    \ match && match[0].length === brackets.length;\n  brackets_regex.lastIndex =\
    \ 0;\n  return correct;\n}\n\n", "    brackets = brackets.split(\"\");\n    for\
    \ (i = 0; i < brackets.length; i++) {\n        if ( brackets[i] === \">\" ){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n</code>\nThis\
    \ code checks if a word is valid or not without using brackets.  It will always\
    \ return true or false and will work regardless of what brackets are used.\n<|/\
    \ a |>\n<| c |>\nThat's a great solution, but it doesn't solve the problem of\
    \ the brackets. Sure, it checks if the string is a valid word, but if the word\
    \ has any brackets, it will return false. Like `word(\"<<><>>\")` returns true,\
    \ but `word(\"<><<\")` returns false.\n<|/ c |>\n<| c |>\nYes that works.  I edited\
    \ my answer to account for that and explained why you shouldn't use it.  I did\
    \ it anyway to help other people who may read this in the future.\n<|/ c |>\n\
    <| c |>\nHaha, nice solution! I made a similar one myself, though I used a stack\
    \ (which is more efficient) to keep track of all the open and close brackets,\
    \ as I couldn't think of a better way to check a word with parenthesis.\n<|/ c\
    \ |>\n<| a tags=string,javascript,regex,brackets,validation |>\nI made this simple\
    \ algorithm using stacks, hope it will help you:\n\n<code>", "    var opening\
    \ = true,\n        closing = true;\n    for (var i =0; i< brackets.length ; i++){\n\
    \        if (brackets[i] === \">\" || brackets[i] === \"<\"){\n            opening\
    \ = !opening;\n        } else if (brackets[i] === \"<\" && closing){\n       \
    \     closing = false;\n        } else if (brackets[i] === \">\" && opening){\n\
    \            opening = false;\n        }\n    }\n    return opening;\n}\n", " \
    \ brackets = brackets.split(\"\");\n  brackets = brackets.map(function(str){\n\
    \    return str.replace(/^<+/,\"\").replace(/>+$/,\"\");\n  });\n  for(var i in\
    \ brackets){\n    var opening = brackets[i];\n    var closing = brackets[(i+1)%brackets.length];\n\
    \    if (opening != closing){\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "    let opening_brackets = []\n    let closing_brackets = []\n    for (let\
    \ i = 0; i < brackets.length; i++){\n        let char = brackets[i]\n        if\
    \ (char === \"<\"){\n            opening_brackets.push(char)\n        }\n    \
    \    if (char === \">\"){\n            closing_brackets.push(char)\n        }\n\
    \    }\n    // if there are more than two opening brackets\n    if (opening_brackets.length\
    \ !== 2){\n        return false\n    }\n    // if there are more than two closing\
    \ brackets\n    if (closing_brackets.length !== 2){\n        return false\n  \
    \  }\n    // if there are opening brackets followed by closing brackets, that\
    \ does not match\n    if ((opening_brackets[0] === closing_brackets[0]) && (opening_brackets[1]\
    \ === closing_brackets[1])){\n        return false\n    }\n    // if the two pairs\
    \ match and there are three opening brackets and two closing brackets, that match\n\
    \    if ( (opening_brackets[0] === closing_brackets[0]) && (opening_brackets[1]\
    \ === closing_brackets[1]) && (opening_brackets[2] === closing_brackets[2]) ){\n\
    \        return true\n    }\n    return false\n}\n", "  var brackets = brackets.split(\"\
    \");\n  var l = brackets.length,\n      result = true,\n      i;\n\n  for( i=0;\
    \ i < l; i++ ){\n    if( !brackets[i] || brackets[i] === \">\" || brackets[i]\
    \ === \">>\" || brackets[i] === \"<\" || brackets[i] === \"<=\" ){\n      result\
    \ = false;\n      break;\n    }\n  }\n\n  return result;\n}\n</code>\n<|/ a dscore=2\
    \ tags=regex,string,javascript |>\n<| a tags=regex,string,javascript dscore=1\
    \ |>\n<code>\nvar pattern = \"<<|>>\";\nvar str = \"<<>>\";\n\nvar arr = str.split(pattern);\n\
    \nvar result = arr.length == 2 && arr[0] === arr[1];\n</code>\n<|/ a |>\n<| a\
    \ tags=regex,string,javascript |>\nYou should be able to do this using a lookahead.\
    \ Something like this should work:\n<code>\nvar str = \"<<>>\";\nvar result =\
    \ str.match(/(^(?!\\<|>>|>>|<))/g);\n</code>\n<|/ a dscore=0 |>\n<| a tags=regex,string,javascript\
    \ |>\nTry this regexp:\n<code>\n^(?!<<|>>|>>|<)(?!\\<|>>|>>|<)\n</code>\nIt works\
    \ with\n<code>\n<<>>\n<><>\n<<>><><>>\n</code>\nAnd returns false\nand with\n\
    <code>\n<<><>>\n</code>\nIt returns true\n<|/ a dscore=0 |>\n<| a tags=regex,string,javascript\
    \ dscore=0 |>\n<code>\n^(?!<<|>>|>>|<)\n</code>\nTry this.See demo.\nhttp://regex101.com/r/hQ1rP0/14\n\
    <code>\nvar re = /^(?!<<|>>|>>|<)/gm;\nvar str = '<<>>';\nvar m;\n\nwhile ((m\
    \ = re.exec(str)) != null) {\n    if (m.index === re.lastIndex) {\n        re.lastIndex++;\n\
    \    }\n    // View your result using the m-variable.\n    // eg m[0] etc.\n}\n\
    </code>\n<|/ a |>\n<| a |>\nI believe that you want to find out if there are any\
    \ duplicates. You can simply use a regex like this to find out if there are any\
    \ duplicates\n<code>\n^(([^<><]+)[^<><]+)+$\n</code>\nExplanation:\n\n(^(([^<><]+)[^<><]+)+$)\
    \ will match any string that starts with one or more characters that are not <\
    \ or > and end with one or more characters that are not < or >\n<|/ a dscore=0\
    \ tag", "  brackets = brackets.split(\"\");\n  // create stack of opening brackets\n\
    \  var stack = [];\n  for(var i in brackets){\n    if(brackets[i] == \"<\"){\n\
    \      stack.push(brackets[i]);\n    } else if(brackets[i] == \">\" && stack.length){\n\
    \      stack.pop();\n    } else {\n      return false;\n    }\n  }\n  return stack.length\
    \ == 0;\n}\n", "    var correct_bracket = true;\n    var opening_brackets = new\
    \ Array();\n    var closing_brackets = new Array();\n    brackets = brackets.split(\"\
    \");\n    // Check every bracket in brackets to see if it's closed properly\n\
    \    for (var i = 0; i < brackets.length; i++){\n        var bracket = brackets[i];\n\
    \        if (brackets[i] == \"<\"){\n            if (opening_brackets.length ==\
    \ 0){\n                correct_bracket = false;\n            }\n            else{\n\
    \                opening_brackets.push(bracket);\n            }\n        }\n \
    \       else{\n            if (opening_brackets.length != 0){\n              \
    \  var last_opening_bracket = opening_brackets[opening_brackets.length-1];\n \
    \               if (last_opening_bracket == \"<\"){\n                    closing_brackets.push(bracket);\n\
    \                    opening_brackets.pop();\n                }\n            \
    \    else{\n                    correct_bracket = false;\n                }\n\
    \            }\n            else{\n                if (closing_brackets.length\
    \ == 0){\n                    correct_bracket = false;\n                }\n  \
    \              else{\n                    closing_brackets.push(bracket);\n  \
    \              }\n            }\n        }\n    }\n    return correct_bracket;\n\
    }\n", "    var opening_chars = \"<\";\n    var opening_chars_length = opening_chars.length;\n\
    \    var char_count = 0;\n    for(var i = 0; i < brackets.length; i++){\n    \
    \    if(opening_chars.indexOf(brackets[i]) >= 0){\n            char_count++;\n\
    \        }\n    }\n    return char_count == opening_chars_length;\n}\n\n", "\t\
    brackets = brackets.replace(/(>+)(<<+)/g,'$1');\n\tbrackets = brackets.replace(/(<<+)(>+)/g,'$1');\n\
    \tbrackets = brackets.replace(/(<+)(>>+)/g,'$1');\n\tbrackets = brackets.replace(/(>>+)(<+)/g,'$1');\n\
    \tbrackets = brackets.replace(/(<+)(<+)(>>+)/g,'$1');\n\tbrackets = brackets.replace(/(<+)(<<+)(>+)/g,'$1');\n\
    \tbrackets = brackets.replace(/(<<+)(<+)(<+)(>>+)/g,'$1');\n\treturn (brackets[0]\
    \ == '<' && brackets[1] == '>')\n}\n", "    var opening = [],\n        closing\
    \ = [];\n    brackets.split('><').forEach(function(bracket){\n        if (bracket.indexOf('<<')\
    \ !== -1) { opening.push('<<'); }\n        if (bracket.indexOf('>>') !== -1) {\
    \ opening.push('>>'); }\n        if (bracket.indexOf('>') !== -1) { closing.push('>');\
    \ }\n        if (bracket.indexOf('<') !== -1) { closing.push('<'); }\n    });\n\
    \    if (opening.length === 0 && closing.length === 0) { return false; }\n   \
    \ if (opening.length === 0) { return true; }\n    if (closing.length === 0) {\
    \ return false; }\n    if (opening.length > closing.length) {\n        return\
    \ false;\n    }\n    for (var i = 0, len = opening.length; i < len; i++){\n  \
    \      if (opening[i] !== closing[i]){\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "  // brackets = brackets.split(\"\");\n  var\
    \ stack = [];\n  var i;\n  \n  // for (i=0; i < brackets.length; i++) {\n  for\
    \ (i = 0; i < brackets.length; i++){ \n    // if brackets[i] == \"<\" \n    if\
    \ (brackets[i] == '<') {\n      // push <\n      stack.push(brackets[i]);\n  \
    \  }\n    \n    // if brackets[i] == \">\"\n    else if (brackets[i] == '>') {\n\
    \      // pop <\n      stack.pop();\n    }\n    \n    // if brackets[i] == \"\
    <>\"\n    else if (brackets[i] == '<') {\n      // pop <\n      stack.pop();\n\
    \      // push <\n      stack.push(brackets[i]);\n    }\n  }\n  // }\n  \n  //\
    \ returns true if every opening bracket has a corresponding closing bracket.\n\
    \  return (stack.length % 2) == 0;\n}\n", "\t// TODO: Add error checking\n\tvar\
    \ count = 0;\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i]\
    \ == '>'){\n\t\t\tcount++;\n\t\t}\n\t\telse if(brackets[i] == '<'){\n\t\t\tcount--;\n\
    \t\t}\n\t\tif(count < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n",
  "\tvar brackets = brackets.split(\"\");\n\tvar opening_brackets = [];\n\tvar closing_brackets\
    \ = [];\n\tfor (var i = 0; i < brackets.length; i++){\n\t\tif (brackets[i] ==\
    \ \"<\"){\n\t\t\topening_brackets.push(i);\n\t\t} else if (brackets[i] == \">\"\
    ){\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\treturn (opening_brackets.length\
    \ == closing_brackets.length && opening_brackets.length == brackets.length);\n\
    }\n", "    let openBrackets = 0;\n    for (let i=0; i < brackets.length; i++){\n\
    \        if (brackets[i] == '<'){\n            if (openBrackets <= 0) return false;\n\
    \            openBrackets--;\n        }\n        else if (brackets[i] == '>'){\n\
    \            openBrackets++;\n        }\n    }\n    return openBrackets == 0;\n\
    }\n\n", "    if(brackets.indexOf('<') < 0){\n        return false\n    }\n   \
    \ if(brackets.indexOf('>') < 0){\n        return false\n    }\n    if(brackets.indexOf('>')\
    \ > brackets.indexOf('<')){\n        return false\n    }\n    if(brackets.split('>').length\
    \ < 2){\n        return false\n    }\n    return true\n}\n", "  brackets = brackets.split('\
    \ ');\n  var new_brackets = [];\n  for (var i = 0, len = brackets.length; i <\
    \ len; i++) {\n    if (brackets[i][0] === '>') {\n      new_brackets.push(brackets.slice(i,\
    \ i + 1).join(''));\n      i += 1;\n    }\n  }\n  new_brackets.push(brackets.join(''));\n\
    \  brackets = new_brackets;\n  return new_brackets.every(function(bracket, i){\n\
    \    return bracket[0] === '<';\n  });\n}\n", "\tfor(var i=0; i < brackets.length;\
    \ i++){\n\t\tif(brackets[i]!=\"<\" && brackets[i]!=\">\"){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n", "    var i;\n    var bracketCount = 0;\n   \
    \ var openBrackets = 0;\n    var closingBrackets = 0;\n    for (i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == '<') {\n            bracketCount++;\n   \
    \         openBrackets++;\n        }\n        if (brackets[i] == '>') {\n    \
    \        bracketCount++;\n            closingBrackets++;\n        }\n    }\n \
    \   return (openBrackets === closingBrackets);\n}\n", "    return brackets.split('><').every(function(x){\n\
    \        return x[0] === x[1];\n    });\n}\n", "\tvar opening_brackets = brackets.split('<');\n\
    \tvar closing_brackets = brackets.split('>');\n\t\n\tvar correct = true;\n\tfor\
    \ (var i=0; i<opening_brackets.length; i++){\n\t\tif (closing_brackets[i+1] ==\
    \ null || closing_brackets[i+1] == undefined){\n\t\t\tcorrect = false;\n\t\t}\n\
    \t}\n\treturn correct;\n}\n", "  var opening_brackets = new RegExp(\"^\" + brackets);\n\
    \  var closing_brackets = new RegExp(brackets + \"$\");\n  return opening_brackets.test(closing_brackets);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=javascript,regex |>\nThis regex\
    \ will validate your provided string with any number of any kind of character:\n\
    <code>\n/^([^<>]*)$/\n</code>\nExplanation:\n<code>\n^ start of the string\n[^<>]*\
    \ match anything except <>\n$  end of the string\n</code>\n<|/ a |>\n<| a |>\n\
    You can use this regex to get all the text between \"\n<code>\n/^\\/(.*?)\\//\n\
    </code>\nand get this in javascript like this\n<code>\nvar regEx=/^\\/(.*?)\\\
    //;\nvar match = regEx.exec(str);\nvar text = match[1];\n</code>\n<|/ a tags=javascript,regex\
    \ dscore=0 |>\n<| c |>\nPlease provide some explanation.\n<|/ c |>\n<| a |>\n\
    Here's what worked for me. I used a for loop and some array and string manipulation.\
    \ \n<code>\nvar re = /([^<]+$)|([^<]+(<[^>]*>)[^<]+)/g;\nvar str = 'test<test><test>';\n\
    var m;\nvar matches = [];\nwhile (m = re.exec(str)) {\n    if (m.index === re.lastIndex)\n\
    \        matches.push(m[0]);\n    else\n        break;\n}", "\tif(brackets ==\
    \ \"<\" || brackets == \"<>\"){\n\t\treturn true;\n\t}\n\treturn false;\n}\n",
  "  brackets = brackets.trim().replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n\
    \  var chars = brackets.split(\"\");\n  var stack = [];\n  for(var i=0; i<chars.length;\
    \ i++){\n    if(chars[i] === \"<\"){\n      stack.push(i);\n    } else if(chars[i]\
    \ === \">\"){\n      var last = stack.pop();\n      if(!stack.length || chars[last]\
    \ !== \">\"){\n        return false;\n      }\n    } else {\n      return false;\n\
    \    }\n  }\n  return !stack.length;\n}\n", "  // Check each opening bracket to\
    \ see if it has a corresponding closing bracket.\n  var open_count = { '<':0,\
    \ '>':0 };\n  var close_count = { '<':0, '>':0 };\n  var brackets_array = brackets.split('');\n\
    \  for (var b = 0; b < brackets_array.length; b++){\n    var char = brackets_array[b];\n\
    \    if (open_count.hasOwnProperty(char)){\n      open_count[char]++;\n    } else\
    \ {\n      open_count[char] = 1;\n    }\n    if (close_count.hasOwnProperty(char)){\n\
    \      close_count[char]++;\n    } else {\n      close_count[char] = 1;\n    }\n\
    \  }\n  for (var b = 0; b < open_count.length; b++){\n    var char = open_count[b];\n\
    \    if (close_count.hasOwnProperty(char)){\n      if (open_count[char] !== close_count[char]){\n\
    \        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n", "  return brackets.split('>').reduce(function(acc, cur){\n\
    \    acc = acc || cur.split('<').length === 0;\n    return acc;\n  }, true);\n\
    }\n", "  var openbrackets = brackets.split(\"<\");\n  var closebrackets = brackets.split(\"\
    >\");\n  for(var i = 0; i < openbrackets.length; i++){\n    if(openbrackets[i]\
    \ !== closebrackets[i]){\n      return false;\n    }\n  }\n  return true;\n}\n",
  "  var result = [];\n  var open_bracket = brackets.charAt(0);\n  var close_bracket\
    \ = brackets.charAt(brackets.length-1);\n  var current_bracket = 0;\n  var current_pos\
    \ = 0;\n  var in_bracket = false;\n  var prev_pos = 0;\n  var prev_char = prev_open_bracket\
    \ = 0;\n\n  if(close_bracket >= open_bracket)\n    return false;\n\n  for(var\
    \ i = 0; i <brackets.length; i++){\n    if(brackets.charAt(i) === open_bracket){\n\
    \      in_bracket = true;\n      current_bracket = i;\n      current_pos = i;\n\
    \      prev_pos = current_pos - 1;\n    }\n    if(brackets.charAt(i) === close_bracket){\n\
    \      in_bracket = false;\n      result[current_bracket] = current_pos;\n   \
    \ }\n    if(in_bracket === false)\n      result[current_bracket] = current_pos;\n\
    \    prev_char = brackets.charAt(i);\n  }\n\n  for(var i = 0; i <brackets.length;\
    \ i++){\n    if(brackets.charAt(i) !== open_bracket){\n      if(i>0){\n      \
    \  if(brackets.charAt(i-1) === close_bracket && brackets.charAt(i) !== prev_char){\n\
    \          result[current_bracket] = i+1;\n        }\n      }\n      if(current_bracket\
    \ > 0)\n        return false;\n    }\n  }\n\n  var opening_brackets = result.filter(function(n){return\
    \ n===0});\n  var closing_brackets = result.filter(function(n){return n===1});\n\
    \  if(opening_brackets.length !== closing_brackets.length)\n    return false;\n\
    \  for(var i = 0; i <opening_brackets.length; i++)\n    if(opening_brackets[i+1]\
    \ !== closing_brackets[i])\n      return false;\n  return true;\n}\n", "    var\
    \ openingBracketRegex = /^<+/,\n        closingBracketRegex = /^>+/,\n       \
    \ matchingBracketRegex = /(<+.*>+)/g,\n        totalBrackets = brackets.match(matchingBracketRegex).length,\n\
    \        totalOpeningBrackets = brackets.match(openingBracketRegex).length,\n\
    \        totalClosingBrackets = brackets.match(closingBracketRegex).length,\n\
    \        hasMatchingBrackets = totalBrackets == totalOpeningBrackets + totalClosingBrackets;\n\
    \n    return !hasMatchingBrackets;\n}\n</code>\n<|/ a tags=algorithm,regex dscore=2\
    \ |>\n<| c |>\nI added an example to show what should happen with the brackets.\n\
    <|/ c |>\n<| c |>\nI like this approach, but the only problem is the case where\
    \ an opening bracket is part of a word. In that case it would be a false positive.\n\
    <|/ c |>\n<| c |>\nYes, that's why I added the comment on the first line: \"//brackets\
    \ is a string of \"<\" and \">\".\" I assumed a specific set of rules, such as\
    \ \"<word>\" or \"<<<>>\", where the \"word\" must be non-empty. Feel free to\
    \ change it to your needs.\n<|/ c |>\n<| c |>\nYeah, I saw that, too. I just didn't\
    \ want to overcomplicate things by trying to come up with a general approach.\
    \ If OP can decide on specific rules he can easily adapt this solution.\n<|/ c\
    \ |>\n<| c |>\nThis is interesting. Let me take this a little further. Let's say\
    \ we want to allow any number of nested brackets. How would this work?\n<|/ c\
    \ |>\n<| a |>\nYou can try this:\n<code>\npublic static boolean check(String s)\
    \ {\n    if (s == null || s.isEmpty()) {\n        return false;\n    }\n\n   \
    \ if (s.length() < 3) {\n        return false;\n    }\n\n    boolean result= s.indexOf(\"\
    <\") >= 0\n            && s.indexOf(\">\") > -1\n            && s.indexOf(\"<>\"\
    ) > -1\n            && s.indexOf(\"<<>\") > -1\n            && s.indexOf(\"<<<\"\
    ) < 0;\n\n    return result;\n}\n</code>\n<|/ a dscore=2 tags=algorithm,regex\
    \ |>\n<| c |>\nI like the fact that you are only trying to match one type of opening\
    \ and closing bracket. Is there a way to make it work for any number of nested\
    \ opening/closing brackets?\n<|/ c |>\n<| c |>\n: Yes, simply remove the `s.indexOf(\"\
    <>\") < 0` from the last line of ", "    let openingBracketCount = 0;\n    let\
    \ closingBracketCount = 0;\n    brackets.split('').forEach(function(char){\n \
    \       if(char === '<'){\n            openingBracketCount++;\n        }\n   \
    \     if(char === '>'){\n            closingBracketCount++;\n        }\n    });\n\
    \n    return openingBracketCount === closingBracketCount;\n}\n", "\tvar openBrackets\
    \ = brackets.split(\">\");\n\tvar closeBrackets = brackets.split(\">\");\n\tvar\
    \ hasCorrectBrackets = false;\n\tfor(var i in openBrackets){\n\t\tif(openBrackets[i].substring(0,\
    \ 1) != closeBrackets[i].substring(0, 1)){\n\t\t\thasCorrectBrackets = false;\n\
    \t\t}else{\n\t\t\thasCorrectBrackets = true;\n\t\t}\n\t}\n\treturn hasCorrectBrackets;\n\
    }\n", "  var opening_set = brackets.split(\"\").reverse();\n  var closed_set =\
    \ [];\n  for(var i = 0, len = opening_set.length; i < len; i++){\n    if(i ==\
    \ len - 1) break;\n    var current_open = opening_set[i];\n    var current_close\
    \ = opening_set[i + 1];\n    if(current_open === current_close){\n      closed_set.push(i);\n\
    \    } else {\n      closed_set.push(i);\n      closed_set.push(-1);\n    }\n\
    \  }\n  return closed_set.every(function(val){\n    return val != -1;\n  });\n\
    }\n", "\t// create array to store all brackets.\n\tvar all_brackets = new Array();\n\
    \tvar bracket_array = brackets.split(\"\");\n\n\t// loop to go through all brackets.\n\
    \tfor(var i = 0; i < bracket_array.length; i++){\n\t\t// create array to store\
    \ all brackets.\n\t\tvar current_brackets = new Array();\n\t\t// add all brackets\
    \ in current_brackets to all_brackets.\n\t\tcurrent_brackets = bracket_array[i].split(\"\
    \");\n\n\t\t// loop to go through all brackets in current_brackets.\n\t\tfor(var\
    \ j = 0; j < current_brackets.length; j++){\n\t\t\t// if the current bracket in\
    \ current_brackets is equal to \"<\", add it to the all_brackets array (this is\
    \ \"<\").\n\t\t\tif(brackets[i] === \"<\" && current_brackets[j] === \"<\"){\n\
    \t\t\t\tall_brackets.push(\"<\");\n\t\t\t}\n\t\t\t// if the current bracket in\
    \ current_brackets is equal to \">\", add it to the all_brackets array (this is\
    \ \">\").\n\t\t\telse if(brackets[i] === \">\" && current_brackets[j] === \">\"\
    ){\n\t\t\t\tall_brackets.push(\">\");\n\t\t\t}\n\t\t\t// if the current bracket\
    \ in current_brackets is equal to \"(\", add it to the all_brackets array (this\
    \ is \"(\").\n\t\t\telse if(brackets[i] === \"(\" && current_brackets[j] === \"\
    (\"){\n\t\t\t\tall_brackets.push(\"(\");\n\t\t\t}\n\t\t\t// if the current bracket\
    \ in current_brackets is equal to \")\", add it to the all_brackets array (this\
    \ is \").\").\n\t\t\telse if(brackets[i] === \")\" && current_brackets[j] ===\
    \ \")\"){\n\t\t\t\tall_brackets.push(\">\");\n\t\t\t}\n\t\t\t// if the current\
    \ bracket in current_brackets is equal to \"{\", add it to the all_brackets array\
    \ (this is \"{\").\n\t\t\telse if(brackets[i] === \"{\" && current_brackets[j]\
    \ === \"{\"){\n\t\t\t\tall_brackets.push(\"{\");\n\t\t\t}\n\t\t\t// if the current\
    \ bracket in current_brackets is equal to \"}\", add it to the all_brackets array\
    \ (this is \"}\"\n\t\t\telse if(brackets[i] === \"}\" && current_brackets[j] ===\
    \ \"}\"){\n\t\t\t\tall_brackets.push(\"}\");\n\t\t\t}\n\t\t\t// if the current\
    \ bracket in current_brackets is equal to \":\", add it to the all_brackets array\
    \ (this is \":\").\n\t\t\telse if(brackets[i] === \":\" && current_brackets[j]\
    \ === \":\"){\n\t\t\t\tall_brackets.push(\":\");\n\t\t\t}\n\t\t}\n\t}\n\n\t//\
    \ returns true if every opening bracket has a corresponding closing bracket.\n",
  "    let openings = brackets.split(\"\").map(e=>e.charCodeAt(0));\n    let closings\
    \ = brackets.split(\"\").map(e=>e.charCodeAt(0));\n    let correct = true;\n \
    \   for (let opening of openings) {\n        if (closings.indexOf(opening) ==\
    \ -1) {\n            correct = false;\n            break;\n        }\n    }\n\
    \    return correct;\n}\n", "\tvar open_count = 1;\n\tvar close_count = 1;\n\t\
    var brackets = brackets.split(' ');\n\n\tfor (var i = 0; i < brackets.length;\
    \ i++){\n\t\tif (brackets[i] == \"<\"){\n\t\t\topen_count ++;\n\t\t}\n\t\telse\
    \ if (brackets[i] == \">\"){\n\t\t\tclose_count ++;\n\t\t}\n\t}\n\n\treturn open_count\
    \ == close_count;\n}\n", "  var bstack = [];\n  brackets.split('<').forEach(function(element){\n\
    \    if(element.slice(-1) == \">\"){\n      bstack.push(element);\n    }\n  });\n\
    \  return bstack.length == brackets.split('>').length;\n}\n", "\treturn ((brackets=brackets.toLowerCase()).match(/<</g)\
    \ && brackets.search(/>>/g)!=-1) || (brackets=brackets.toLowerCase()).match(/<>/g)\
    \ && brackets.search(/<>/g)!=-1) || (brackets=brackets.toLowerCase()).match(/>/g)\
    \ && brackets.search(/>/g)!=-1) || (brackets=brackets.toLowerCase()).match(/></g)\
    \ && brackets.search(/>></g)!=-1) || (brackets=brackets.toLowerCase()).match(/<></g)\
    \ && brackets.search(/<></g)!=-1) || (brackets=brackets.toLowerCase()).match(/>/>/g)\
    \ && brackets.search(/>>/>/g)!=-1) || (brackets=brackets.toLowerCase()).match(/<>>/g)\
    \ && brackets.search(/<>>/g)!=-1) || (brackets=brackets.toLowerCase()).match(/></g)\
    \ && brackets.search(/>></g)!=-1) || (brackets=brackets.toLowerCase()).match(/<></g)\
    \ && brackets.search(/<></g)!=-1);\n}\n", "\treturn brackets.split(/[\\<\\>]/).every(function(x)\
    \ { return x.match(/^\\s*$/) == null; });\n}\n", "\tvar len = brackets.length\
    \ - 1;\n\tvar ok = true;\n\tfor (var i = 0; i < len; i ++){\n\t\tvar open = brackets[i];\n\
    \t\tvar close = brackets[i + 1];\n\t\tif (!(open === \">\" && close === \"<\"\
    )){\n\t\t\tok = false;\n\t\t}\n\t}\n\treturn ok;\n}\n", "    var found = false;\n\
    \    for (var i in brackets){\n        if (brackets.hasOwnProperty(i)){\n    \
    \        var opening = brackets[i];\n            var closing = \"\";\n       \
    \     var count = 0;\n            for (var j in brackets){\n                if\
    \ (brackets.hasOwnProperty(j)){\n                    if (brackets[j] == opening){\n\
    \                        count++;\n                    } else if (brackets[j]\
    \ == closing){\n                        count--;\n                    } \n   \
    \             }\n            }\n            if (count < 0){\n                found\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ found;\n}\n", "    var brackets_array = brackets.split(\"\");\n    var result\
    \ = false;\n\n    for(var i=0; i < brackets_array.length; i++){\n        if(brackets_array[i]\
    \ == '<') {\n            brackets_array[i] = '>';\n        }\n\n        if(brackets_array[i]\
    \ == '>') {\n            brackets_array[i] = '<';\n        }\n    }\n\n    var\
    \ new_brackets = brackets_array.join(\"\");\n    result = new_brackets == brackets;\n\
    \    return result;\n}\n", "   var open_brackets = brackets.match(/(<)+/g);\n\
    \   var open_brackets_length = open_brackets.length;\n   for(var i=0; i<open_brackets_length;\
    \ i++){\n      var open_tag = open_brackets[i];\n      var open_tag_length = open_tag.length;\n\
    \      var close_tag = open_brackets[(i+1)%open_brackets_length];\n      var close_tag_length\
    \ = close_tag.length;\n      if(open_tag_length != close_tag_length){\n      \
    \   return false;\n      }\n   }\n   return true;\n}\n\n", "\treturn brackets.match(/\\\
    <(\\/|\\>)\\>/g);\n}\n", "\tvar open_brackets = brackets.split(\"\");\n\tvar correct_bracketing\
    \ = true;\n\tfor (var i = 0; i < open_brackets.length; i++) {\n\t\tif (open_brackets[i]\
    \ != \"<\") correct_bracketing = false;\n\t\tif (open_brackets[i] != \">\") correct_bracketing\
    \ = false;\n\t}\n\treturn correct_bracketing;\n}\n", "\tvar count = 0;\n\tvar\
    \ stack = [];\n\tbrackets.split(\"<\").forEach(function(opening){\n\t\tif(count%2\
    \ == 0){\n\t\t\tstack.push(opening);\n\t\t}else{\n\t\t\tif(is_opening_bracket(opening,\
    \ stack) == false){\n\t\t\t\treturn false;\n\t\t\t}else{\n\t\t\t\tstack.pop();\n\
    \t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t});\n\treturn true\n}\n", "  var count = 0;\n\
    \  brackets = brackets.split(\"\");\n  var lastChar = brackets.pop();\n  for (var\
    \ i = 0; i < brackets.length; i++){\n    if (brackets[i] === \">\" && brackets[i+1]\
    \ === lastChar){\n      count += 1;\n    }\n    if (brackets[i] === \"<\" && brackets[i+1]\
    \ === lastChar){\n      count += 1;\n    }\n  }\n  return count === brackets.length;\n\
    }\n", "  let stack = [];\n  let opening_stack = [];\n  let closed_stack = [];\n\
    \n  for (let i=0; i < brackets.length; i++){\n    if (brackets[i] === \"<\"){\n\
    \      opening_stack.push(brackets[i]);\n    } else if (brackets[i] === \">\"\
    ){\n      closed_stack.push(brackets[i]);\n      opening_stack.pop();\n    } else\
    \ if (brackets[i] === \"<\" && opening_stack.length){\n      opening_stack.pop();\n\
    \    } else if (brackets[i] === \">\" && closed_stack.length){\n      closed_stack.pop();\n\
    \    }\n  }\n  if (opening_stack.length || closed_stack.length){\n    return false;\n\
    \  }\n  return true;\n}\n", "  brackets = brackets.toLowerCase();\n  brackets\
    \ = brackets.split(\"\");\n  var brackets_str = \"\";\n  for (var i = 0; i < brackets.length;\
    \ i++){\n    if (brackets[i] == \"<\")\n      brackets_str += \"(\" + brackets[i]\
    \ + \")\";\n    else if (brackets[i] == \">\")\n      brackets_str += brackets[i]\
    \ + \")\";\n    else\n      brackets_str += brackets[i];\n  }\n  var pattern =\
    \ new RegExp(\"(^|\" + brackets_str + \")*\", \"g\");\n  return brackets.match(pattern);\n\
    }\n", "  // TODO: return an array\n  brackets = brackets.split(\"\");\n  let bracketCount\
    \ = brackets.length;\n  for( let i=0; i < bracketCount; i++ ){\n    let openingBracket\
    \ = brackets[i];\n    if( bracketCount > 1 ){\n      let lastBracket = brackets[bracketCount\
    \ -1];\n      if( openingBracket === lastBracket ){\n        brackets.splice(i--,\
    \ 1);\n      }\n    }\n  }\n  console.log(brackets);\n  let bracketingError =\
    \ false;\n  bracketCount = brackets.length;\n  for( let i=0; i < bracketCount;\
    \ i++ ){\n    let openingBracket = brackets[i];\n    if( bracketCount > 1 ){\n\
    \      let lastBracket = brackets[bracketCount -1];\n      if( openingBracket\
    \ === lastBracket ){\n        bracketingError = true;\n        break;\n      }\n\
    \    }\n  }\n  console.log(bracketingError);\n  return bracketingError;\n}\n",
  "\treturn brackets.match(/><(<)+>|<+>|(<)+>|<(<)+>/);\n}\n", "    for(let i=0;i<brackets.length;i++){\n\
    \        let firstBracket = brackets[i];\n        let lastBracket = brackets[brackets.length-1];\n\
    \        //if i or brackets.length is out of bounds, just return true\n      \
    \  if(i === brackets.length || brackets[i] === lastBracket){\n            continue;\n\
    \        }\n        //otherwise check if the next character is a \">\"\n     \
    \   if(brackets[i+1] !== \"<\"){\n            return false;\n        }\n     \
    \   //otherwise check if the previous character is a \"<\"\n        if(brackets[i-1]\
    \ !== \">\"){\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "  var brackets = brackets.split(\"\");\n  brackets.forEach(function(element,\
    \ index, array){\n    if(element === \"<\"){\n      if(array[index+1] === \">\"\
    ){\n        array.splice(index, 2, \">\")\n      }\n    }\n  });\n  return (brackets.toString()\
    \ === brackets.join(\"\"));\n}\n", "   var opens = brackets.match(/\\<+/g);\n\
    \   var closes = brackets.match(/\\>+/g);\n   var matches = 0;\n   for(var i in\
    \ opens){\n      if(opens[i] === closes[i]){\n         matches++;\n      }\n \
    \  }\n   return matches % 2 === 0;\n}\n", "    if (brackets === null){\n     \
    \   return false;\n    }\n    for (var i=0; i < brackets.length; i++){\n     \
    \   if ((brackets[i] !== \"<\") || (brackets[i] !== \">\")){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "\tbrackets = brackets.split(\"\
    \");\n\tvar valid = true;\n\tvar n = 0;\n\tfor (var i = 0; i < brackets.length;\
    \ i++){\n\t\tvar open = brackets[i];\n\t\tif (brackets[i + 1] == null || brackets[i\
    \ + 1] == open){\n\t\t\tn++;\n\t\t}\n\t\tif (brackets[i] == null || brackets[i\
    \ + 1] == open){\n\t\t\tn--;\n\t\t}\n\t\tif (n == 0){\n\t\t\tvalid = false;\n\t\
    \t}\n\t}\n\treturn valid;\n}\n", "\tvar open_count = brackets.split(\"\").map(function(elem){\n\
    \t\treturn elem.match(/[<>]/);\n\t}).reduce(function(a,b){\n\t\treturn a||b;\n\
    \t});\n\treturn open_count === brackets.length;\n}\n", "\tvar brackets = brackets.toLowerCase();\n\
    \tfor (var i = 0; i < brackets.length; i++){\n\t\tvar left = brackets.substring(0,\
    \ i);\n\t\tvar right = brackets.substring(i+1, brackets.length);\n\t\t\n\t\tif\
    \ (left == '<' && right == '>'){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn\
    \ true;\n}\n\t", "\tbrackets = brackets.split(\"\");\n\tfor(let i=0; i<brackets.length;\
    \ i++){\n\t\tif(brackets[i] == \"<\")\n\t\t\treturn false\n\t\tif(brackets[i]\
    \ == \">\")\n\t\t\treturn true\n\t}\n\treturn false\n}\n", "    brackets = brackets.split(\"\
    \");\n    for(var i=0; i < brackets.length; i++)\n        if(brackets[i] === \"\
    <\")\n            if(brackets[i+1] === \"<\" && brackets[i+2] === \"<\")\n   \
    \             return false;\n            else\n                return true;\n\
    \    return true;\n}\n", "   \n    for(var i = 0; i < brackets.length; i++){\n\
    \        if(brackets[i] !== \"<\") return false;\n        if(brackets[i + 1] ===\
    \ \"=\"){\n            brackets[i + 1] = \"\";\n            i = i + 1;\n     \
    \   }\n    }\n    return brackets.indexOf(\"<\") > brackets.indexOf(\">\");\n\
    }\n", "    var brackets_array = brackets.split(\"\");\n    for(var i in brackets_array){\n\
    \        var bracket = brackets_array[i];\n        var last_bracket = brackets_array[i-1];\n\
    \        if(last_bracket.toLowerCase() == \"<\"){\n            if(bracket != \"\
    >\"){\n                return false;\n            }\n        }\n        if(last_bracket.toLowerCase()\
    \ == \">\"){\n            if(bracket != \"<\"){\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n", "  if(brackets.includes(\"\
    <\") || brackets.includes(\">\")){\n    var last = 0;\n    var stack = [];\n \
    \   for(var i = 0; i <= brackets.length - 1; i++){\n      if(brackets.charAt(i)\
    \ == \"<\"){\n        stack.push(i);\n      }\n      else if(brackets.charAt(i)\
    \ == \">\"){\n        while(stack.length > 0 && brackets.charAt(stack[stack.length-1])\
    \ != \">\"){\n          stack.pop();\n        }\n        if(stack.length > 0 &&\
    \ brackets.charAt(stack[stack.length-1]) == \"<\"){\n          stack.pop();\n\
    \        }\n      }\n      else if(brackets.charAt(i) == \"{\"){\n        while(stack.length\
    \ > 0 && brackets.charAt(stack[stack.length-1]) != \"}\"){\n          stack.pop();\n\
    \        }\n        if(stack.length > 0 && brackets.charAt(stack[stack.length-1])\
    \ == \"{\"){\n          stack.pop();\n        }\n      }\n      else if(brackets.charAt(i)\
    \ == \"}\"){\n        while(stack.length > 0 && brackets.charAt(stack[stack.length-1])\
    \ != \"}\"){\n          stack.pop();\n        }\n        if(stack.length > 0 &&\
    \ brackets.charAt(stack[stack.length-1]) == \"}\"){\n          stack.pop();\n\
    \        }\n      }\n      else if(brackets.charAt(i) == \"[\"){\n        stack.push(i);\n\
    \      }\n      else if(brackets.charAt(i) == \"]\"){\n        while(stack.length\
    \ > 0 && brackets.charAt(stack[stack.length-1]) != \"]\"){\n          stack.pop();\n\
    \        }\n        if(stack.length > 0 && brackets.charAt(stack[stack.length-1])\
    \ == \"[\"){\n          stack.pop();\n        }\n      }\n    }\n    if(stack.length\
    \ > 0){\n      return false;\n    }\n    return true;\n  }\n  return false;\n\
    }\n", "  var correct = false;\n  for (var i in brackets){\n    var c = brackets[i];\n\
    \    if (i === 0 || i === brackets.length-1 || (brackets[i-1] === '<' && brackets[i]\
    \ === '>')){\n      if (brackets[i+1] !== '>'){\n        correct = false;\n  \
    \      break;\n      }\n    }\n    else{\n      if (brackets[i-1] === '<' && brackets[i+1]\
    \ === '>'){\n        correct = false;\n        break;\n      }\n    }\n  }\n \
    \ return correct;\n}\n", "  var opening_brackets = brackets.match(/[<]+/g)\n \
    \ var closing_brackets = brackets.match(/[>]+/g)\n  if(opening_brackets && closing_brackets)\
    \ return true\n  return false\n}\n", "    for(let i = 0; i < brackets.length;\
    \ i++){\n        if(brackets[i+1] == \"<\"){\n            let next_bracket = brackets[i+2];\n\
    \            if(!((next_bracket == \"<\" && brackets[i+3] != \">\") || (next_bracket\
    \ == \">\" && brackets[i+3] != \"<\"))){\n                return false;\n    \
    \        }\n        }\n    }\n    return true;\n}\n", "    brackets_set = brackets_set.split(\"\
    \");\n    brackets_set = brackets_set.filter(function (b) { return b.charCodeAt(0)\
    \ >= 48 && b.charCodeAt(0) <= 57; });\n    brackets_set = brackets_set.filter(function\
    \ (b) { return b.charCodeAt(0) >= 97 && b.charCodeAt(0) <= 102; });\n    brackets_set\
    \ = brackets_set.filter(function (b) { return b.charCodeAt(0) >= 65 && b.charCodeAt(0)\
    \ <= 90; });\n    brackets_set = brackets_set.filter(function (b) { return b.charCodeAt(0)\
    \ >= 48 && b.charCodeAt(0) <= 57; });\n    brackets_set = brackets_set.filter(function\
    \ (b) { return b.charCodeAt(0) >= 65 && b.charCodeAt(0) <= 90; });\n    brackets_set\
    \ = brackets_set.filter(function (b) { return b.charCodeAt(0) >= 97 && b.charCodeAt(0)\
    \ <= 102; });\n    brackets_set = brackets_set.filter(function (b) { return b.charCodeAt(0)\
    \ >= 48 && b.charCodeAt(0) <= 57; });\n    brackets_set = brackets_set.filter(function\
    \ (b) { return b.charCodeAt(0) >= 65 && b.charCodeAt(0) <= 90; });\n    brackets_set\
    \ = brackets_set.filter(function (b) { return b.charCodeAt(0) >= 97 && b.charCodeAt(0)\
    \ <= 102; });\n    brackets_set = brackets_set.filter(function (b) { return b.charCodeAt(0)\
    \ >= 48 && b.charCodeAt(0) <= 57; });\n    brackets_set = brackets_set.filter(function\
    \ (b) { return b.charCodeAt(0) >= 65 && b.charCodeAt(0) <= 90; });\n    brackets_set\
    \ = brackets_set.filter(function (b) { return b.charCodeAt(0) >= 97 && b.charCodeAt(0)\
    \ <= 102; });\n    var brackets_set2 = brackets_set.filter(function (b) { return\
    \ b == \">\"; });\n    return brackets_set2.length == 0;\n}\n", "    for(var b=0,len=brackets.length-1;b<len;b++){\n\
    \        for(var a=b+1;a<len;a++){\n            if(brackets[b]!=brackets[a]){\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a |>\nI think you would be interested in this\
    \ question: Determine if JavaScript string contains a substring ignoring case\n\
    It answers the question of how to determine if a string contains a substring while\
    \ ignoring case.\n<|/ a dscore=3 tags=javascript |>\n<| a tags=javascript dscore=3\
    \ |>\nAs of ES5, there is String.prototype.includes(). \n<code>\nvar str = \"\
    Hello world\";\n", "\treturn brackets.match(/<<>(.*)<(.*?)>>/)\n\t\t.map(function\
    \ (x) { return x[1] +\"<\"+x[2]+\">\"})\n\t\t.every(function (x, i, a) { return\
    \ a[i] === x; })\n}\n\n", "    return brackets.split(\"\").every(function(b){\n\
    \        return brackets.indexOf(b) === brackets.lastIndexOf(b)+1;\n    });\n\
    }\n", "\tvar opening = false, closing = false;\n\tfor(var i = 0; i < brackets.length;\
    \ i++){\n\t\tif(opening && closing) return false; // must be in wrong order\n\t\
    \tif(brackets[i] == \"<\") opening = true; else closing = true;\n\t}\n\tif(!opening\
    \ && !closing) return true; // must be in correct order\n\treturn true;\n}\n",
  "  brackets = brackets.trim();\n  var count = 0;\n  var inBracket = false;\n  for(var\
    \ x=0; x<brackets.length; x++){\n    if(brackets[x] == \"<\"){\n      inBracket\
    \ = true;\n      count++;\n    }\n    else if(brackets[x] == \">\"){\n      if(inBracket){\n\
    \        inBracket = false;\n      }\n      else{\n        count++;\n      }\n\
    \    }\n  }\n  if(count % 2 == 0){\n    return true;\n  }\n  else{\n    return\
    \ false;\n  }\n}\n", "\treturn brackets.split(\">\").length <= brackets.split(\"\
    >>\").length;\n}\n", "\tvar brackets_set = {};\n\tbrackets.split('>').forEach(function\
    \ (v){\n\t\tvar bracket = v.split('<');\n\t\tvar count = bracket.length-1;\n\t\
    \tbracket.forEach(function (v2){\n\t\t\tbrackets_set[v2] = brackets_set[v2] ||\
    \ 0;\n\t\t\tbrackets_set[v2] += count;\n\t\t});\n\t});\n\t\n\tfor (var key in\
    \ brackets_set){\n\t\tif (brackets_set[key] === 0){\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\n", "\treturn brackets.split(\"<\").length == brackets.split(\"\
    >\").length\n}\n", "\t// brackets is a string of \"<\" and \">\".\n\t// return\
    \ true if every opening bracket has a corresponding closing bracket.\n\t// >>>\
    \ correct_bracketing(\"<\")\n\t// false\n\t// >>> correct_bracketing(\"<>\")\n\
    \t// true\n\t// >>> correct_bracketing(\"<<><>>\")\n\t// true\n\t// >>> correct_bracketing(\"\
    ><<>\")\n\t// false\n\t\n\t// First, find the first opening bracket\n\tlet opening\
    \ = brackets.indexOf(\"<\");\n\t// Now, find the last closing bracket\n\tlet closing\
    \ = brackets.indexOf(\">\");\n\t// Make sure they're not equal\n\t\n\tif (opening\
    \ < 0 || closing < 0) return false;\n\t\n\t// If they're equal, they don't have\
    \ matching brackets.\n\t// If brackets.length is 1, they don't have matching brackets.\n\
    \tif (opening == closing){\n\t\tif (brackets.length == 1) return true;\n\t\treturn\
    \ false;\n\t}\n\t\n\t// Otherwise, find the length of the opening bracket\n\t\
    let opening_length = brackets.indexOf(\"<\", opening + 1);\n\t// If they're equal,\
    \ they don't have matching brackets.\n\t// If brackets.length is 1, they don't\
    \ have matching brackets.\n\tif (opening != opening_length){\n\t\tif (brackets.length\
    \ == 1) return true;\n\t\treturn false;\n\t}\n\t\n\t// Find the length of the\
    \ closing bracket\n\tlet closing_length = brackets.indexOf(\">\", opening + 1);\n\
    \t// If they're equal, they don't have matching brackets.\n\t// If brackets.length\
    \ is 1, they don't have matching brackets.\n\tif (closing != closing_length){\n\
    \t\tif (brackets.length == 1) return true;\n\t\treturn false;\n\t}\n\t\n\t// If\
    \ they're equal, they have matching brackets.\n\treturn true;\n}\n\n", "  //get\
    \ the indexes of the open brackets\n  var opening_brackets_index = get_open_closing_brackets_index(brackets);\n\
    \  \n  //return the correct answer by checking that opening brackets have a matching\
    \ closing bracket\n  return opening_brackets_index == -1\n}\n", "   if(brackets.length==0)\
    \ return false;\n   brackets = brackets.toLowerCase();\n   brackets = brackets.replace(/^>+\\\
    s*/,\"\").replace(/\\s*<+$/,\"<\");\n   brackets = brackets.replace(/\\s*>+\\\
    s*/,\"\").replace(/\\s*<+\\s*/,\">\");\n   brackets = brackets.split(\"<\");\n\
    \   brackets.sort();\n   for(var i=0;i<brackets.length;i++){\n      if(brackets[i]==brackets[i-1]){\n\
    \         brackets.splice(i-1,1);\n         i--;\n      }\n   }\n   brackets =\
    \ brackets.join(\"\");\n   if(brackets==\"\") return true;\n   return brackets.indexOf(brackets)===0;\n\
    }\n</code>\n<|/ a tags=string,algorithm,brackets |>\n<| c |>\nThis fails for input\
    \ `<<>>` or `<<>`\n<|/ c |>\n<| c |>\nThis fails for input `<<><>>`\n<|/ c |>\n\
    <| c |>\nThis fails for input `<><>` or `<><>`\n<|/ c |>\n<| c |>\nThis fails\
    \ for input `<><><>`\n<|/ c |>\n<| c |>\nThe question says \"brackets is a string\
    \ of \"<\" and \">\".\n<|/ c |>\n<| a tags=string,algorithm,brackets |>\nIf brackets\
    \ is an integer, then you can simply do this:\n<code>\n function bracketsPresent(brackets,\
    \ string) {\n    var brackets = parseInt(brackets);\n    var string = parseInt(string);\n\
    \n    // check whether brackets is valid or not\n    if(brackets < 0 || brackets\
    \ > string.length) \n        return false;\n\n    // check whether string's closing\
    \ bracket is present in brackets or not\n    // if yes, then return true\n   \
    \ if(brackets > 0 && string[brackets-1] == '>') {\n        return true;\n    }\n\
    \    // if no, return false\n    return false;\n }\n</code>\n<|/ a dscore=4 |>\n\
    <| c |>\nNice. Just be aware that if the string contains multiple brackets, this\
    \ method will return true if it finds any of them. Also, if you're looking for\
    \ something that returns true if the string has brackets at all, then you should\
    \ return false instead of true.\n<|/ c |>\n<| c |>\nAlso fails for `<<>>` or `<<>`\n\
    <|/ c |>\n<| a dscore=4 |>\nHere is another one:\n<code>", "    var open_brackets\
    \ = brackets.split(\"\");\n    var close_brackets = [];\n    var opening_brackets_index\
    \ = 0;\n    var opening_brackets_counter = 0;\n\n    // This loop runs through\
    \ all the opening brackets and adds them to the closing brackets array.\n    while(open_brackets.length\
    \ > 0){\n        var current_open_bracket = open_brackets[opening_brackets_index];\n\
    \        open_brackets_index++;\n        if(open_brackets_index == open_brackets.length){\n\
    \            open_brackets_index = 0;\n        }\n        close_brackets.push(current_open_bracket);\n\
    \    }\n\n    // If the last two characters in the brackets array are \">>\",\
    \ then they are both part of the same pair.\n    if(close_brackets[close_brackets.length-2]\
    \ == \">>\" && close_brackets[close_brackets.length-1] == \">>\"){\n        return\
    \ true;\n    }\n\n    // If the last two characters in the brackets array are\
    \ \">\", then they are both part of the same pair.\n    if(close_brackets[close_brackets.length-2]\
    \ == \">\" && close_brackets[close_brackets.length-1] == \">\"){\n        return\
    \ true;\n    }\n\n    // If the last two characters in the brackets array are\
    \ \"<\", then they are not part of the same pair.\n    if(close_brackets[close_brackets.length-2]\
    \ == \"<\" && close_brackets[close_brackets.length-1] == \"<\"){\n        return\
    \ false;\n    }\n\n    // If the last two characters in the brackets array are\
    \ \"<\", then they are not part of the same pair.\n    if(close_brackets[close_brackets.length-2]\
    \ == \"<\" && close_brackets[close_brackets.length-1] == \"<\"){\n        return\
    \ false;\n    }\n\n    // If the last two characters in the brackets array are\
    \ \">\", then they are not part of the same pair.\n    if(close_brackets[close_brackets.length-2]\
    \ == \">\" && close_brackets[close_brackets.length-1] == \">\"){\n        return\
    \ false;\n    }\n\n    // If the last two characters in the brackets array are\
    \ \">\", then they are not part of the same pair.\n    if(close_brackets[close_brackets.length-2]\
    \ == \">\" && close_brackets[close_brackets.length-1] == \">\"){\n        return\
    \ false;\n    }\n\n    // If the last two characters in the brackets array are\
    \ \">\", then they are not part of the same pair.\n    if(close_brackets[close_brackets.length-2]\
    \ == \">\" && close_brackets[close_brackets.length-1] == \">\"){\n        return\
    \ false;\n    }\n\n    // ", "\tvar opening_brackets = new Array();\n\tvar closing_brackets\
    \ = new Array();\n\tfor (var i=0; i<brackets.length; i++){\n\t\tif(brackets[i]==\"\
    <\"){\n\t\t\topening_brackets.push(brackets[i]);\n\t\t}\n\t\tif(brackets[i]==\"\
    >\"){\n\t\t\tclosing_brackets.push(brackets[i]);\n\t\t}\n\t}\n\tif(opening_brackets.length!=closing_brackets.length){\n\
    \t\treturn false;\n\t}\n\tfor(i=0;i<opening_brackets.length;i++){\n\t\tif(opening_brackets[i]!=closing_brackets[i]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    var num_brackets =\
    \ brackets.length;\n    for(var i = 0; i < num_brackets; i++){\n        var opening\
    \ = brackets.substring(i,i+1);\n        var closing = brackets.substring(i+1,i+2);\n\
    \        if(opening.length != 1){\n            continue;\n        }\n        else\
    \ if(closing.length != 1){\n            return false;\n        }\n        else\
    \ if(opening != closing){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "  var stack = [];\n  var chars = [];\n  brackets.split('').forEach(function(char){\n\
    \    if(char === '<') stack.push(char);\n    else if(char === '>') char = stack.pop();\n\
    \    else chars.push(char);\n  });\n  return chars.length === 0;\n}\n</code>\n\
    <|/ a tags=javascript |>\n<| a |>\nThe answer is simple: no, there is no simple\
    \ way to do it.\n<|/ a tags=javascript dscore=1 |>\n<| a dscore=1 tags=javascript\
    \ |>\nI wrote this function that will return false if the first argument is not\
    \ an array, and if any of the elements of the array is not an array, then it will\
    \ return false\n<code>", "  return brackets.match(/\\<\\>/g) !== null\n}\n\n",
  "\tvar opening_count = brackets.match(/\\</g).length;\n\tvar closing_count = brackets.match(/\\\
    >/g).length;\n\treturn ((opening_count == closing_count) && (opening_count ==\
    \ brackets.length/2));\n}\n", "  brackets = brackets.split(\"\"); // split on\
    \ \"\"\n  var opening_brackets = [];\n  var closing_brackets = [];\n  brackets.forEach(function(bracket){\n\
    \    if(bracket === \"<\"){ // if opening bracket is \"<\"\n      opening_brackets.push(bracket);\
    \ // add to array\n    } else if(bracket === \">\"){ // if opening bracket is\
    \ \">\"\n      closing_brackets.push(bracket); // add to array\n    }\n  });\n\
    \  return opening_brackets.concat(closing_brackets).length == brackets.length;\n\
    }\n", "    var opening_brackets = brackets.match(/[^<]+/g);\n    var closing_brackets\
    \ = brackets.match(/[^>]+/g);\n    var len = opening_brackets.length;\n    return\
    \ len == closing_brackets.length && opening_brackets.every(function(bracket){\n\
    \        return closing_brackets.indexOf(bracket) > -1;\n    });\n}\n", "    var\
    \ opening_brackets = [];\n    var closing_brackets = [];\n    for (var i = 0;\
    \ i < brackets.length; i++){\n        if (brackets[i] === \"<\"){\n          \
    \  opening_brackets.push(i);\n        }\n        if (brackets[i] === \">\"){\n\
    \            closing_brackets.push(i);\n        }\n    }\n    return opening_brackets.every(function(bracket)\
    \ {\n        return closing_brackets.include(bracket);\n    });\n}\n", "    var\
    \ stack = [];\n    for (var i = 0; i < brackets.length; i++){\n        var bracket\
    \ = brackets[i];\n        if (bracket === \"<\"){\n            stack.push(\"&lt;\"\
    );\n        } else if (bracket === \">\"){\n            if (stack.length){\n \
    \               stack.pop();\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "   brackets_open\
    \ = brackets.split(\"<\").map(function(x){return \"<\"+x+\"<\"}).join(\"\");\n\
    \   brackets_close = brackets.split(\">\").map(function(x){return \">\"+x+\"<\"\
    }).join(\"\");\n   return brackets_open === brackets_close;\n}", "\tif (brackets.length\
    \ == 0)\n\t\treturn true;\n\tfor (var i = 0; i < brackets.length; i++){\n\t\t\
    if (brackets[i] !== \"<\" && brackets[i] !== \">\")\n\t\t\treturn false;\n\t}\n\
    \treturn true;\n}\n", "    var opening = brackets.match(/(<)(.*)(>)/);\n    if(!opening)\
    \ return false;\n    var closing = brackets.match(/(<)(.*)(>)/);\n    if(!closing)\
    \ return true;\n    var open_count = opening[2].length;\n    var close_count =\
    \ closing[2].length;\n    if(open_count < close_count) return false;\n    if(open_count\
    \ > close_count) return true;\n    var index = opening[1].length;\n    if(opening[1][index-1]\
    \ != closing[1][index-1]) return false;\n    return true;\n}", "  var opening_brackets\
    \ = [\"<\", \"(\"]\n  var closing_brackets = [\">\", \")\"]\n\n  for(var i = 0;\
    \ i < brackets.length; i++){\n    for(var j = 0; j < opening_brackets.length;\
    \ j++){\n      if(brackets[i] === opening_brackets[j]){\n        if(opening_brackets[j\
    \ + 1] === undefined){\n          return false\n        }\n        else{\n   \
    \       return true\n        }\n      }\n    }\n  }\n}\n", "\t\n\tvar opening_brackets\
    \ = new Array();\n\tvar closing_brackets = new Array();\n\tvar opening_counter\
    \ = 0;\n\tvar closing_counter = 0;\n\t\n\tfor (var i = 0; i < brackets.length;\
    \ i++){\n\t\t\n\t\tif(brackets[i] == \"<\"){\n\t\t\t\n\t\t\topening_brackets[opening_counter]\
    \ = brackets[i];\n\t\t\topening_counter++;\n\t\t\t\n\t\t}else if(brackets[i] ==\
    \ \">\"){\n\t\t\t\n\t\t\tclosing_brackets[closing_counter] = brackets[i];\n\t\t\
    \tclosing_counter++;\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tif (opening_counter == 0\
    \ || closing_counter == 0){\n\t\treturn false;\n\t}\n\t\n\tfor (var i = 0; i <\
    \ opening_counter; i++){\n\t\tif (opening_brackets[i] != closing_brackets[i]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\t\n}\n", "    let stack\
    \ = [];\n    for (let i = 0; i < brackets.length; i++){\n        if (brackets[i]==\"\
    <\"){\n            if (stack.length < 1){\n                return false;\n   \
    \         } else {\n                while (stack[stack.length - 1] != \">\"){\n\
    \                    stack.pop();\n                }\n                stack.push(\"\
    >\");\n            }\n        } else if (brackets[i]==\">\"){\n            if\
    \ (stack.length < 1){\n                return false;\n            } else {\n \
    \               stack.push(brackets[i]);\n            }\n        } else {\n  \
    \          stack.push(brackets[i]);\n        }\n    }\n    return (stack.length\
    \ == brackets.length);\n}\n", "    if(brackets.length <= 0){\n        return false;\n\
    \    }\n    var char_index = 0;\n    var brackets_length = 0;\n    var current_char\
    \ = \"\";\n    var correct_bracketing = false;\n    var open_brackets_brackets\
    \ = {};\n    var open_brackets_brackets_length = {};\n    var closing_brackets_brackets\
    \ = {};\n    var closing_brackets_brackets_length = {};\n    var open_brackets_stack\
    \ = {};\n    var closing_brackets_stack = {};\n    var open_brackets_stack_index\
    \ = 0;\n    var closing_brackets_stack_index = 0;\n    while(open_brackets_stack.length\
    \ > 0){\n        var open_bracket = open_brackets_stack[open_brackets_stack_index];\n\
    \        open_brackets_stack_index += 1;\n        closing_brackets_stack_index\
    \ += 1;\n        open_brackets_brackets[open_bracket] = open_brackets_brackets_length[open_bracket]\
    \ = 0;\n        closing_brackets_brackets[closing_brackets_stack[closing_brackets_stack_index]\
    \ = closing_brackets_brackets_length[closing_brackets_stack[closing_brackets_stack_index]]\
    \ = 0;\n        open_brackets_brackets_length[open_bracket] += 1;\n        closing_brackets_brackets_length[closing_brackets_stack[closing_brackets_stack_index]]\
    \ += 1;\n        open_brackets_stack_index += 1;\n        closing_brackets_stack_index\
    \ += 1;\n    }\n    while(closing_brackets_stack.length > 0){\n        var open_bracket\
    \ = closing_brackets_stack[closing_brackets_stack_index];\n        open_brackets_brackets[open_bracket]\
    \ = open_brackets_brackets_length[open_bracket] = 0;\n        closing_brackets_brackets[open_bracket]\
    \ = closing_brackets_brackets_length[open_bracket] = 0;\n        open_brackets_brackets_length[open_bracket]\
    \ += 1;\n        closing_brackets_brackets_length[open_bracket] += 1;\n      \
    \  open_brackets_stack_index += 1;\n        closing_brackets_stack_index += 1;\n\
    \    }\n    while(char_index < brackets.length){\n        current_char = brackets[char_index];\n\
    \        if(current_char == \"<\"){\n            open_brackets_stack_index = 0;\n\
    \            open_brackets_brackets[current_char] = open_brackets_", "\tvar opening\
    \ = brackets.split(\">\");\n\tfor (var i = 0; i < opening.length; i++){\n\t\t\
    var closing = opening[i].split(\"<\");\n\t\tvar openingIndex = 0;\n\t\tfor (var\
    \ j = 0; j < closing.length; j++){\n\t\t\tif(j == 0){\n\t\t\t\topeningIndex =\
    \ opening.indexOf(closing[j]);\n\t\t\t}\n\t\t\tif(openingIndex > i){\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t\topeningIndex = opening.indexOf(closing[j], openingIndex\
    \ + 1);\n\t\t}\n\t}\n\treturn true;\n}\n\n", "\tvar counter = 0;\n\tbrackets.split('').forEach(function(c){\n\
    \t\tif (c === \"<\"){\n\t\t\tif (counter === 0){\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t\tcounter++;\n\t\t} else if (c === \">\"){\n\t\t\tcounter--;\n\t\t}\n\t\
    });\n\treturn counter === 0;\n}\n", "  brackets = brackets.split(\"\");\n  for(var\
    \ i = 0; i < brackets.length; i++){\n    if(!brackets[i])\n      return false;\n\
    \  }\n  return brackets[brackets.length-1] == \">\";\n}\n", "\tbrackets = brackets.toLowerCase();\n\
    \tbrackets = brackets.replace(\"<\",\"\");\n\tbrackets = brackets.replace(\">\"\
    ,\"\");\n\tbrackets = brackets.replace(\"<<\",\"\");\n\tbrackets = brackets.replace(\"\
    >>\",\"\");\n\tbrackets = brackets.replace(\"<>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(\">>>\",\"\");\n\tbrackets = brackets.replace(\"\
    <<<\",\"\");\n\tbrackets = brackets.replace(", "\tvar len = brackets.length;\n\
    \tfor (var i = 0; i < len; i++){\n\t\tvar opening_bracket = brackets[i];\n\t\t\
    var closing_bracket = brackets[i + 1];\n\t\tif (opening_bracket != closing_bracket){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n", "    // Don't run if\
    \ there aren't any brackets\n    if(brackets.length == 0)\n        return false;\n\
    \    // Don't run if there are any duplicates\n    var bracketsArray = brackets.split(\"\
    \");\n    var duplicated = false;\n    for(var i in bracketsArray){\n        if(bracketsArray.indexOf(bracketsArray[i])\
    \ != i){\n            duplicated = true;\n            break;\n        }\n    }\n\
    \    return duplicated;\n}\n\n", "    brackets = brackets.split(\"\");\n    var\
    \ last_bracket = brackets.pop();\n    var closed = brackets.map(function(bracket){\n\
    \        if(bracket === last_bracket){\n            return \"\";\n        }\n\
    \        if(bracket === \"<\"){\n            return bracket;\n        }\n    \
    \    return \"\";\n    });\n    return closed.every(function(bracket){\n     \
    \   return bracket.length == 0;\n    });\n}\n", "\tif(brackets == \"\") return\
    \ false;\n\treturn brackets.indexOf(\"<\") > -1 && brackets.indexOf(\">\") > -1;\n\
    }\n", "    var brackets = brackets.split(\">\");\n    var new_bracket = [];\n\
    \    for(var i = 0; i < brackets.length; i++){\n        new_bracket.push(brackets[i].split(\"\
    <\"));\n    }\n    for(var i = 0; i < new_bracket.length; i++){\n        for(var\
    \ j = 0; j < new_bracket[i].length; j++){\n            if(new_bracket[i][j] ===\
    \ \"<>\"){\n                new_bracket[i][j] = \"<>\";\n            }\n     \
    \   }\n    }\n    return new_bracket[0] === new_bracket[1] ? true : false;\n}\n",
  "  return brackets.split(\"\").every(function(char){\n    return (\">\".indexOf(char)\
    \ != -1) && (\">>>\".indexOf(char) == -1);\n  });\n}\n", "    for(var i=0; i <\
    \ brackets.length; i++){\n        var open_bracket = brackets[i];\n        var\
    \ close_bracket = brackets[i+1];\n        if(open_bracket != close_bracket){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "\tbrackets\
    \ = brackets.split(\"\").reverse().join(\"\");\n\tfor(var i = 0; i < brackets.length;\
    \ i++){\n\t\tvar c = brackets.charAt(i);\n\t\tif(c === \"<\"){\n\t\t\tvar prev\
    \ = brackets.charAt(i - 1);\n\t\t\tif(prev !== \">\"){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n", "\t// Loop through each string in brackets\
    \ and check whether it has a corresponding closing bracket.\n\tbrackets = brackets.split(\"\
    <\");\n\tfor(var i = 0;i < brackets.length;i++){\n\t\tvar opening = brackets[i].split(\"\
    <\")[0];\n\t\tvar closing = brackets[i].split(\">\")[0];\n\t\tif(opening != closing){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n", "    var result = true;\n\
    \    var bracketStack = [];\n    for (var i = 0; i < brackets.length; i++){\n\
    \        var bracket = brackets[i];\n        if (bracket == \"<\")\n         \
    \   bracketStack.push(bracket);\n        else if (bracket == \">\"){\n       \
    \     if (bracketStack[bracketStack.length - 1] != \"<\"){\n                result\
    \ = false;\n                break;\n            }\n            bracketStack.pop();\n\
    \        }\n    }\n    return result;\n}\n\n", "\tbrackets = brackets.split(\"\
    \");\n\tfor (var i = 0; i < brackets.length; i++){\n\t\tvar bracket = brackets[i];\n\
    \t\tif(bracket === \"<\"){\n\t\t\tif(brackets[i+1] === \"<\"){\n\t\t\t\tbracket\
    \ = \">\";\n\t\t\t}\n\t\t}\n\t\tif(bracket === \">\"){\n\t\t\tif(brackets[i-1]\
    \ === \">\"){\n\t\t\t\tbracket = \"<\";\n\t\t\t}\n\t\t}\n\t\tif(bracket === \"\
    >\" && brackets[i-1] !== \"<\"){\n\t\t\tbrackets[i] = \"<\";\n\t\t}\n\t\tif(bracket\
    \ === \"<\" && brackets[i+1] !== \">\"){\n\t\t\tbrackets[i] = \">\";\n\t\t}\n\t\
    }\n\treturn brackets.join(\"\") === \"\";\n}\n\n", "    var open = brackets.match(/\\\
    <.*?\\>/g);\n    var close = brackets.match(/\\<.*?\\>/g);\n    var open_close\
    \ = open.length + close.length;\n    var same = 0;\n    for (var x = 0; x < open.length;\
    \ x++) {\n        if (open[x] !== close[x]) {\n            same += 1;\n      \
    \  }\n    }\n    if (open_close === same) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n", "\tbrackets = brackets.replace(/\\s/g,\"\
    \");\n\tvar bracket = brackets.match(/\\{|}|<|>/g);\n\tvar count = 0;\n\tfor(var\
    \ i in bracket){\n\t\tvar opening_bracket = bracket[i];\n\t\tvar closing_bracket\
    \ = bracket[i+1];\n\t\tvar length = opening_bracket.length;\n\t\tif(opening_bracket\
    \ == closing_bracket){\n\t\t\tcount++;\n\t\t}\n\t\telse if(opening_bracket ==\
    \ '<' && closing_bracket == '>'){\n\t\t\tcount--;\n\t\t}\n\t\telse if(opening_bracket\
    \ == '>' && closing_bracket == '<'){\n\t\t\tcount++;\n\t\t}\n\t\telse if(opening_bracket\
    \ == '<' && closing_bracket == '>'){\n\t\t\tcount--;\n\t\t}\n\t\telse if(opening_bracket\
    \ == '>' && closing_bracket == '<'){\n\t\t\tcount++;\n\t\t}\n\t\telse if(opening_bracket\
    \ == '<' && closing_bracket == '>'){\n\t\t\tcount++;\n\t\t}\n\t\telse if(opening_bracket\
    \ == '>' && closing_bracket == '<'){\n\t\t\tcount--;\n\t\t}\n\t}\n\treturn (count\
    \ >= 0);\n}", "\tvar open_stack = [];\n\tvar open_stack_count = {};\n\n\tfor(var\
    \ i=0; i<brackets.length; i++){\n\t\topen_stack.push(brackets[i]);\n\t\topen_stack_count[brackets[i]]\
    \ = 1;\n\t}\n\n\tfor(var i=0; i<open_stack.length; i++){\n\t\tif(open_stack_count[open_stack[i]]\
    \ == 0) return false;\n\t\topen_stack_count[open_stack[i]]--;\n\t}\n\n\treturn\
    \ true;\n}\n", "    brackets = brackets.split(\"\");\n    var correct = true;\n\
    \    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] != \"<\"\
    \ && brackets[i] != \">\" && brackets[i] != \" \"){\n            correct = false;\n\
    \        }\n    }\n    return correct;\n}\n", "  var bracket_stack=[];\n  for(var\
    \ i=0;i<brackets.length;i++){\n    switch(brackets[i]){\n    case \"<\": //opening\
    \ bracket\n      if(bracket_stack.length===0){\n        return true;\n      }else{\n\
    \        if(typeof(stack[stack.length-1].content)==\"undefined\"){\n         \
    \ return true;\n        }else{\n          bracket_stack.pop();\n        }\n  \
    \    }\n      break;\n    case \">\": //closing bracket\n      if(bracket_stack.length!==0){\n\
    \        return true;\n      }else{\n        if(typeof(stack[stack.length-1].content)==\"\
    undefined\"){\n          return true;\n        }else{\n          bracket_stack.push(bracket_stack.length);\n\
    \        }\n      }\n      break;\n    default: //not opening nor closing\n  \
    \    return false;\n    }\n  }\n}\n", "\tvar brackets = brackets.replace(/\\|/g,\
    \ \"\");\n\tbrackets = brackets.replace(/\\[\\]/g, \"\");\n\tbrackets = brackets.replace(/\\\
    (|\\)/g, \"\");\n\tbrackets = brackets.replace(/\\[\\(\\)\\]/g, \"\");\n\tbrackets\
    \ = brackets.replace(/\\[|\\]/g, \"\");\n\tbrackets = brackets.replace(/^<.*>$/mg,\
    \ \"\");\n\tbrackets = brackets.replace(/^<.*>$/g, \"\");\n\tbrackets = brackets.replace(/<.*>/g,\
    \ \"\");\n\tbrackets = brackets.replace(/<.*>$/g, \"\");\n\tbrackets = brackets.replace(/^<.*>/g,\
    \ \"\");\n\tbrackets = brackets.replace(/^<.*>$/g, \"\");\n\treturn brackets ==\
    \ \"<>\";\n}\n", "\tvar stack = [];\n\tfor(var i=0; i < brackets.length; i++){\n\
    \t\tvar open = brackets[i];\n\t\tvar close = brackets[(i+1)];\n\t\tstack.push(open);\n\
    \t\twhile(open != close && open != \"<\" && close != \">\" && open != \"^\" &&\
    \ close != \"^\"){\n\t\t\tclose = brackets[(i+1)];\n\t\t\tif(open == close)\n\t\
    \t\t\treturn false;\n\t\t\tstack.push(close);\n\t\t\topen = brackets[(i+1)];\n\
    \t\t}\n\t}\n\treturn true;\n}\n", "  let bracketCount = 0;\n  for (let i = 0;\
    \ i < brackets.length; i++){\n    if (brackets[i] == \"<\"){\n      bracketCount++;\n\
    \    } else if (brackets[i] == \">\"){\n      bracketCount--;\n    }\n  }\n  return\
    \ bracketCount == 0;\n}\n", "    var brackets = brackets.split(' ');\n    for\
    \ (var i = 0; i < brackets.length; i++)\n        if (brackets[i] === '<')\n  \
    \          for (var j = i + 1; j < brackets.length; j++)\n                if (brackets[j]\
    \ === '>')\n                    return true;\n    return false;\n}\n", "    var\
    \ opening = brackets.split('<');\n    var closing = brackets.split('>');\n   \
    \ var count = 0;\n    for(var x=0; x<opening.length; x++){\n      if(closing[x]\
    \ == opening[x]){\n          count++;\n      }\n    }\n    if(count == 0){\n \
    \     return false;\n    }\n    return true;\n}\nvar correct_bracketing = correct_bracketing;\n",
  "\tvar re = new RegExp(\"(<|>)(\" + brackets + \")\", \"g\");\n\tbrackets_regex\
    \ = brackets;\n\treturn brackets_regex.replace(re, \"($2)\");\n}\n", "  let opening_brackets\
    \ = [];\n  for (let i = 0; i < brackets.length; i++){\n    if (brackets[i] ===\
    \ \"<\"){\n      opening_brackets.push(i);\n    }\n  }\n  for (let i = 0; i <\
    \ brackets.length; i++){\n    if (brackets[i] === \">\"){\n      if (opening_brackets.includes(i)\
    \ === false){\n        return false;\n      }\n      opening_brackets.pop();\n\
    \    }\n  }\n  return true;\n}\n", "\treturn brackets.match(/\\{|<[>=]>\\}|\\\
    <[<=]>\\>/) == null;\n}", "\tbrackets = brackets.toString();\n\tvar brackets_length\
    \ = brackets.length;\n\tvar i;\n\tvar result;\n\t\n\tif (brackets_length == 0){\n\
    \t\treturn true;\n\t}\n\t\n\tfor (i=0; i<brackets_length; i++){\n\t\tresult =\
    \ brackets.charAt(i) == \">\";\n\t\tif (result){\n\t\t\treturn i==0;\n\t\t}\n\t\
    }\n\treturn false;\n}\n", "\tif(!brackets) return false;\n\tvar bracket_counter\
    \ = 0;\n\tvar last_index = 0;\n\tvar opening_brackets = [];\n\tfor(var i = 0;\
    \ i<brackets.length; i++){\n\t\tvar current_char = brackets[i];\n\t\tif(current_char\
    \ == \"<\"){\n\t\t\tif(opening_brackets[last_index]){\n\t\t\t\topening_brackets[last_index]\
    \ += 1;\n\t\t\t}else{\n\t\t\t\topening_brackets[last_index] = 1;\n\t\t\t}\n\t\t\
    }else if(current_char == \">\"){\n\t\t\tif(opening_brackets[last_index] == 0){\n\
    \t\t\t\treturn false;\n\t\t\t}else{\n\t\t\t\topening_brackets[last_index] -= 1;\n\
    \t\t\t}\n\t\t}\n\t\tlast_index = i;\n\t}\n\tfor(var i = 0; i < opening_brackets.length;\
    \ i++){\n\t\tif(brackets[i + opening_brackets.length] == \">\"){\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n", "\tbrackets = brackets.toLowerCase();\n\
    \tvar openings = brackets.match(/[<]/g);\n\tvar closings = brackets.match(/[>]/g);\n\
    \n\tif (openings && closings){\n\t\tfor (var i = 0; i < openings.length; i++){\n\
    \t\t\t//if (openings[i] != closings[i]){\n\t\t\t\tconsole.log(\"OOB \" + openings[i]\
    \ + \" \" + closings[i]);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tconsole.log(\"\
    All correct brackets!\");\n\t\treturn true;\n\t}\n\tconsole.log(\"Not all brackets\
    \ are correct \" + brackets);\n\treturn false;\n}", "\tbrackets_arr = brackets.split(\"\
    \");\n\tfor(var i = 0; i < brackets_arr.length; i++){\n\t\tif(open_count < brackets_arr.length){\n\
    \t\t\tif(brackets_arr[i] == open_parenthesis_arr[open_count]){\n\t\t\t\topen_count\
    \ += 1;\n\t\t\t}\n\t\t\telse if(brackets_arr[i] == close_parenthesis_arr[open_count]){\n\
    \t\t\t\tif(open_count < close_parenthesis_arr.length-1){\n\t\t\t\t\topen_count\
    \ += 1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", " \
    \   var stack = [];\n    var opening = 0;\n    var closing = 0;\n\n    brackets\
    \ = brackets.replace(/</g,\"&lt;\");\n    brackets = brackets.replace(/>/g,\"\
    &gt;\");\n\n    brackets.split(\"\").forEach(function(char){\n        if(char\
    \ === \"<\"){\n            opening++;\n        }\n        else if(char === \"\
    >\"){\n            closing++;\n        }\n        else if(opening > 0 && closing\
    \ > 0){\n            stack.push([opening, closing]);\n            opening = closing\
    \ = 0;\n        }\n        else if(opening > 0){\n            opening--;\n   \
    \     }\n        else if(closing > 0){\n            closing--;\n        }\n  \
    \  });\n\n    return stack.length > 0;\n}\n\nvar html = document.querySelector(\"\
    html\");\nvar current_div = document.createElement(\"div\");\nvar last_div = null;\n\
    var current_ul = null;\nvar current_li = null;\nvar opening_ul = false;\nvar closing_li\
    \ = false;\nvar opening_li = false;\nvar opening_span = false;\n", "\tvar opening_brackets\
    \ = brackets.split('<');\n\tvar closing_brackets = brackets.split('>');\n\tvar\
    \ resultant_brackets = opening_brackets.filter(function(opening_bracket, i){\n\
    \t\tif(closing_brackets[i] !== opening_bracket)\n\t\t{\n\t\t\treturn false;\n\t\
    \t}\n\t\telse\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t});\n\treturn resultant_brackets.length\
    \ === 0;\n}", "  var openings = []\n  var closings = []\n  var count = 0\n  var\
    \ check = false\n  for (var i=0; i<brackets.length; i++){\n    var current = brackets[i]\n\
    \    if (current==\"<\"){\n      openings.push(count)\n    }\n    else if (current==\"\
    >\"){\n      closings.push(count)\n    }\n    else if (current==\"<=\"){\n   \
    \   openings.push(count)\n      closings.push(count)\n    }\n    else if (current==\"\
    >=\"){\n      openings.push(count)\n      closings.push(count)\n    }\n    else\
    \ if (current==\"==\"){\n      openings.push(count)\n      closings.push(count)\n\
    \      openings.push(count)\n    }\n    else if (current==\"!=\"){\n      openings.push(count)\n\
    \      closings.push(count)\n      openings.push(count)\n    }\n    else if (current==\"\
    ==\"){\n      openings.push(count)\n      closings.push(count)\n      openings.push(count)\n\
    \    }\n    else if (current==\"!=\"){\n      openings.push(count)\n      closings.push(count)\n\
    \      openings.push(count)\n    }\n    else if (current==\"==\"){\n      openings.push(count)\n\
    \      closings.push(count)\n      openings.push(count)\n    }\n    else if (current==\"\
    !=\"){\n      openings.push(count)\n      closings.push(count)\n      openings.push(count)\n\
    \    }\n    else if (current==\"==\"){\n      openings.push(count)\n      closings.push(count)\n\
    \      openings.push(count)\n    }\n    else if (current==\"!=\"){\n      openings.push(count)\n\
    \      closings.push(count)\n      openings.push(count)\n    }\n    else if (current==\"\
    ==\"){\n      openings.push(count)\n      closings.push(count)\n      openings.push(count)\n\
    \    }\n    else if (current==\"!=\"){\n      openings.push(count)\n      closings.push(count)\n\
    \      openings.push(count)\n    }\n    else if (current==\"==\"){\n      openings.push(count)\n\
    \      closings.push(count)\n      openings.push(count)\n    }\n    else if (current==\"\
    !=\"){\n      openings.push(count)\n      closings.push(count)\n      openings.push(count)\n\
    \    }\n    else if (current==\"==\"){\n      openings.push(count)\n      closings.push(count)\n\
    \      openings.push(count)\n    }\n    else if (current==\"!=\"){\n      openings.push(count)\n\
    \      closings.push(count)\n      openings.push(count)\n    }\n    else if (current==\"\
    ==\"){\n      openings.push(count)\n      closings.push(count)\n      openings.push(count)\n\
    \    }\n    else if (current==\"!=\"){\n      openings.push(count)\n      closings.push(count)\n\
    \      openings.push(count)\n    }\n    else if (current==\"==\"){\n      ", "\t\
    var open_brackets = 0;\n\tbrackets.split(\"\").forEach(function(char){\n\t\tif\
    \ (char == \"<\") ++open_brackets;\n\t\telse if (char == \">\") --open_brackets;\n\
    \t});\n\n\treturn open_brackets == 0;\n}\n", "  var stack = [];\n  var openings\
    \ = 0;\n  var closings = 0;\n  var len = brackets.length;\n  for (var i = 0; i\
    \ < len; i++) {\n    var letter = brackets[i];\n    var pos = brackets.indexOf(letter,\
    \ 1);\n    if (pos == -1){\n      // Not found\n      continue;\n    }\n    var\
    \ nextpos = brackets.indexOf(letter, pos+1);\n    if (nextpos != -1) {\n     \
    \ // Found but it's not the next opening bracket\n      stack.push(letter);\n\
    \      openings++;\n      closings = 0;\n    } else {\n      // Found but it's\
    \ the next opening bracket\n      openings++;\n      closings = 0;\n      if (openings\
    \ > 0 && stack[stack.length-1] != letter){\n        stack.push(letter);\n    \
    \  }\n    }\n  }\n  return openings + closings == 0;\n}\n", "\tvar count = 0;\n\
    \tvar open_bracket = \"\";\n\t\n\t// Loop through brackets.\n\tfor(var i = 0;\
    \ i < brackets.length; i++){\n\t\t\n\t\t// If current character is an opening\
    \ bracket.\n\t\tif(brackets[i] == '<'){\n\t\t\t\n\t\t\t// If last character of\
    \ open_bracket is a closing bracket.\n\t\t\tif(open_bracket.slice(-1) == '>'){\n\
    \t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\
    } else {\n\t\t\t\n\t\t\t// If current character is a closing bracket.\n\t\t\t\
    if(brackets[i] == '>'){\n\t\t\t\t\n\t\t\t\t// If open_bracket has already ended.\n\
    \t\t\t\tif(count == 0){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\
    \t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Add current character to open_bracket.\n\
    \t\topen_bracket = open_bracket + brackets[i];\n\t}\n\t\n\t// If open_brackets\
    \ has ended, return true because brackets are correct.\n\treturn (count == brackets.length);\n\
    }\n\n", "\tvar re = /^((<\\?php|<\\?=|\\?>\\?>|<\\?python|<\\?pythonscript\\?>|<\\\
    ?pythonscript\\?=|\\?>\\?>|\\?>|\\?>\\?>|\\?>\\?>|\\?>\\?>|\\?>\\?>\\?>)$)|\\\
    (.*\\))$/;\n\tbrackets = brackets.replace(re, \"$1\");\n\tvar open_count = 0;\n\
    \tvar close_count = 0;\n\tvar char;\n\tfor (var i = 0; i < brackets.length; i++){\n\
    \t\tchar = brackets[i];\n\t\tif (char == \"<\"){\n\t\t\topen_count ++;\n\t\t}else\
    \ if (char == \">\"){\n\t\t\tclose_count ++;\n\t\t}\n\t}\n\tif (open_count !=\
    \ close_count){\n\t\treturn false;\n\t}\n\treturn true;\n}\n", "  return brackets.split(\"\
    \").every(function(char, i){\n    return i === brackets.length - 1 && char ===\
    \ \">\";\n  });\n}\n", "    brackets = brackets.split(\"\");\n    for(var i =\
    \ 0; i < brackets.length; i++){\n        if(brackets[i] != \"<\" && brackets[i]\
    \ != \">\")\n            return false;\n    }\n    return true;\n}\n", "  var\
    \ openings = []; //the list of opening brackets we saw.\n  var closings = [];\
    \ //the list of closing brackets we saw.\n  var brackets_seen = []; //the list\
    \ we keep track of whether a bracket was seen or not.\n  brackets.split('>').forEach(function(char){\n\
    \    openings.push(char);\n  });\n  brackets.split('<').forEach(function(char){\n\
    \    closings.push(char);\n  });\n  brackets.split('>>').forEach(function(char){\n\
    \    openings.push(char);\n    closings.push(char);\n  });\n  brackets.split('<<').forEach(function(char){\n\
    \    openings.push(char);\n    closings.push(char);\n  });\n  brackets.split('<>').forEach(function(char){\n\
    \    openings.push(char);\n    closings.push(char);\n  });\n  brackets.split('<<><>>').forEach(function(char){\n\
    \    openings.push(char);\n    closings.push(char);\n  });\n  //go through all\
    \ of the opening brackets and see if they are all in the closing brackets list.\n\
    \  openings.forEach(function(opening_bracket){\n    brackets_seen.forEach(function(bracket,\
    \ index){\n      //if the brackets in the opening brackets list are in our closing\
    \ brackets list,\n      //and all the brackets in our closing brackets list are\
    \ in the opening brackets list,\n      //then we know that we have the right bracketing\n\
    \      if(bracket === opening_bracket && closings.indexOf(bracket) >= 0 && openings.indexOf(bracket)\
    \ >= 0){\n        brackets_seen.splice(index, 1); //remove the bracket from the\
    \ list we are looking at.\n        //return true, since we have found the right\
    \ bracketing.\n        return true;\n      }\n    });\n    //if we didn't find\
    \ the right bracketing in the opening brackets list,\n    //then we know that\
    \ we have a false bracketing.\n    return false;\n  });\n  //if we didn't return\
    \ true, then we know that we have a false bracketing.\n  return false;\n}\n",
  "  var brackets_arr = brackets.match(/\\>|\\<|\\</g);\n  if(brackets_arr==null)\
    \ return false;\n  for(var i=0;i<brackets_arr.length;i++){\n    var open_bracket\
    \ = brackets_arr[i];\n    var next_open_bracket = brackets_arr[i+1];\n    if(open_bracket=='<')\
    \ if(next_open_bracket=='>') return false;\n    if(open_bracket=='>') if(next_open_bracket=='>')\
    \ return false;\n  }\n  return true;\n}\n</code>\n<|/ a tags=python,algorithm\
    \ |>\n<| c |>\n\"the complexity of the algorithm depends on the size of the input\"\
    \ is a misconception.  Complexity is a measure of asymptotic complexity, which\
    \ doesn't depend on input size.  However, asymptotic time complexity is a measure\
    \ of how quickly the algorithm scales as input size grows.  If you have a data\
    \ structure that's O(n^2) in size, then the algorithm scales linearly at large\
    \ values of n.\n<|/ c |>\n<| c |>\n\"The complexity is independent of the size\
    \ of the input\" is a misconception as well. The complexity of an algorithm depends\
    \ on how well the algorithm performs as a function of the input size. An algorithm\
    \ with a linear time complexity and an algorithm with a quadratic time complexity\
    \ are the same algorithm. If you're talking about the difference between asymptotic\
    \ and actual time complexity, then you're completely correct, and my apologies.\n\
    <|/ c |>\n<| c |>\nI think the issue is you misunderstand what asymptotic complexity\
    \ is.  The algorithm does not grow linearly at large values of n -- it is linear\
    \ in the size of n.  If you have a data structure that's O(n^2) in size, then\
    \ it's still O(n^2) in time complexity; it's just that if you have input size\
    \ n then your algorithm is O(n^2) in time complexity.\n<|/ c |>\n<| c |>\nAsymptotic\
    \ complexity is only concerned with how quickly the algorithm scales.  If you\
    \ have input size n, and you have a data structure that's O(n^2) in size then\
    \ the algorithm is still O(n^2) in complexity (regardless of input size).\n<|/\
    \ c |>\n<| c |>\nI realize that my statement about the algorithm being linear\
    \ is probably a little unclear, but I'll try and clarify.  To be O(n^2) in complexity\
    \ means it will take longer to do what it's supposed to do than it does at smaller\
    \ values of n.  An O(n^2) algorithm could do O", "\tfor(var i in brackets){\n\t\
    \tvar left = brackets[i];\n\t\tvar right = brackets[brackets.length - (i + 1)];\n\
    \t\tif(left < right || left > right){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n", "  var bracketsAr = brackets.split(\"\");\n  for (var i = 0; i\
    \ < bracketsAr.length; i++) {\n    if (bracketsAr[i] === \"<\") {\n      if (bracketsAr[i\
    \ - 1] === \">\") {\n        if (bracketsAr[i + 1] === \">\") {\n          return\
    \ true;\n        }\n      }\n    }\n  }\n  return false;\n}\n", "  if (brackets.length\
    \ === 0) {\n    return false\n  }\n  if (brackets.length === 1) {\n    return\
    \ true\n  }\n  var opening_brackets = brackets.split('>')\n  var closing_brackets\
    \ = brackets.split('<')\n  var length = opening_brackets.length\n  if (length\
    \ !== closing_brackets.length) {\n    return false\n  }\n  for (var i = 0; i <\
    \ length; i++) {\n    var opening = opening_brackets[i]\n    var closing = closing_brackets[i]\n\
    \    if (opening !== closing) {\n      return false\n    }\n  }\n  return true\n\
    }\n", "    var opened = 0,\n        closed = 0;\n    brackets = brackets.split(\"\
    <\");\n    brackets.forEach(function(bracket){\n        if(bracket.indexOf(\"\
    <\") > -1){\n            opened++;\n        }\n        if(bracket.indexOf(\">\"\
    ) > -1){\n            closed++;\n        }\n    });\n    return (opened - closed)\
    \ == 0;\n}\n", "    var bracket_counter = 0;\n    for (var i=0; i<brackets.length;\
    \ i++){\n        var bracket = brackets[i];\n        if (bracket == \"<\"){\n\
    \            if (bracket_counter != 0) return false;\n            bracket_counter++;\n\
    \        } else if (bracket == \">\"){\n            bracket_counter--;\n     \
    \       if (bracket_counter != 0) return false;\n        } else if (bracket ==\
    \ \"<=\"){\n            if (bracket_counter != 1) return false;\n            bracket_counter++;\n\
    \        } else if (bracket == \"=>\"){\n            if (bracket_counter != 2)\
    \ return false;\n            bracket_counter++;\n        } else if (bracket ==\
    \ \"<=>\"){\n            if (bracket_counter != 3) return false;\n           \
    \ bracket_counter++;\n        } else if (bracket == \"=\"){ // allow equal brackets\n\
    \            if (bracket_counter != 0) return false;\n            bracket_counter++;\n\
    \        } else if (bracket == \"(\"){\n            if (bracket_counter != 0)\
    \ return false;\n            bracket_counter++;\n        } else if (bracket ==\
    \ \")\"){\n            if (bracket_counter != 0) return false;\n            bracket_counter++;\n\
    \        } else if (bracket == \"[\"){\n            if (bracket_counter != 0)\
    \ return false;\n            bracket_counter++;\n        } else if (bracket ==\
    \ \"]\"){\n            if (bracket_counter != 0) return false;\n            bracket_counter++;\n\
    \        } else {\n            console.log(bracket);\n            console.log(\"\
    Unknown bracket. Try using '(', '[', '=', '>', '<', '<=>', '=>', or '<='.\");\n\
    \            return false;\n        }\n    }\n    if (bracket_counter == 0) return\
    \ true;\n    return false;\n}\n", "\tbrackets = brackets.split('>')\n\tvar count\
    \ = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] ==\
    \ \"<\") {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count == brackets.length\n}\n",
  "\tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] == '<'){\n\t\t\tvar last_index = i;\n\t\t\tfor(i; i < brackets.length;\
    \ i++){\n\t\t\t\tif(brackets[i] == '>'){\n\t\t\t\t\tbrackets[last_index + 1] =\
    \ brackets[i];\n\t\t\t\t\tbrackets.splice(last_index, 1);\n\t\t\t\t\tlast_index\
    \ = i - 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn brackets.join('')\
    \ == '';\n}\n", "  brackets = brackets.replace(/\\[/g,\"(<\").replace(/\\]/g,\"\
    >)\");\n  var openings = brackets.match(/\\(</g);\n  var closings = brackets.match(/\\\
    >(>/g);\n  if (openings && !closings) return false;\n  openings = openings &&\
    \ openings.length ? openings.length : 0;\n  closings = closings && closings.length\
    \ ? closings.length : 0;\n  return openings + closings === brackets.length - 1;\n\
    }\n", "\tvar open_brackets = brackets.split('>');\n\tvar open_brackets_size =\
    \ open_brackets.length; //2\n\tvar closed_brackets = brackets.split('<');\n\t\
    var closed_brackets_size = closed_brackets.length; //2\n\t\n\tif (open_brackets_size\
    \ > closed_brackets_size){\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t\
    }\n}\n\n", "\tvar bracket = brackets.split(\"\").reverse();\n\tfor(var i = 0;\
    \ i < bracket.length; i++){\n\t\tif(brackets[i] === bracket[bracket.length - i]){\n\
    \t\t\tbracket = bracket.slice(i + 1, bracket.length - i)\n\t\t}\n\t}\n\treturn\
    \ bracket.length === 0;\n}\n", "  var brackets = brackets.split(\"<\").join(\"\
    \");\n  var openings = brackets.split(\">\").join(\"\");\n  for(var i = 0; i <\
    \ openings.length; i = i + 2){\n    if(openings[i] != openings[i + 1]){\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n", "    var open_brackets = brackets.match(/[<>]/g);\n\
    \    var close_brackets = brackets.match(/[^<>]/g);\n    for(var i = 0; i < open_brackets.length;\
    \ i++){\n        if(open_brackets[i] !== close_brackets[i])\n            return\
    \ false;\n    }\n    return true;\n}\n", "   var opening_brackets = brackets.split(\"\
    <\");\n   var closing_brackets = brackets.split(\">\");\n   var check_opening_brackets\
    \ = opening_brackets.map(function(elem){\n      return elem.split(\"-\")[0];\n\
    \   });\n   var check_closing_brackets = closing_brackets.map(function(elem){\n\
    \      return elem.split(\"-\")[0];\n   });\n   return check_opening_brackets.every(function(elem,\
    \ index, array){\n      return check_closing_brackets.indexOf(elem) === index;\n\
    \   });\n}\n", "  return brackets.split('<').length-1 === brackets.split('>').length-1\n\
    }\n", "  // make sure brackets is a string of \"<\" and \">\".\n  if (!brackets){\
    \ return false; }\n  brackets = brackets.replace(/[ ]+/g,\"\");\n  brackets =\
    \ brackets.split(/[\\<\\>]+/g);\n  brackets.forEach(function(bracket){\n    var\
    \ found = false;\n    var lastBracket;\n    if (brackets.indexOf(bracket,0) ===\
    \ 0){\n      brackets.forEach(function(b,i){\n        if (b === bracket){\n  \
    \        brackets.splice(i, 1);\n          found = true;\n          lastBracket\
    \ = bracket;\n        }\n      });\n      if (!found){ return false; }\n    }\
    \ else {\n      var openingBrackets = brackets.filter(function(b){\n        return\
    \ b === bracket;\n      });\n      var closingBrackets = brackets.filter(function(b){\n\
    \        return b === lastBracket;\n      });\n      if (openingBrackets.length\
    \ !== closingBrackets.length){ return false; }\n      if (openingBrackets.length\
    \ !== 0){ return false; }\n    }\n  });\n  return true;\n}", "  var openings =\
    \ []\n  var closings = []\n  brackets.split(\"<\").forEach(function(str){\n  \
    \  openings.push(str.split(\"<\")[0])\n    closings.push(str.split(\">\")[1])\n\
    \  })\n  return openings.every(function(opening, idx){\n    return closings[idx]\
    \ == opening\n  })\n}\n", "  var stack = []; // stack of booleans\n  for(var i=0;\
    \ i<brackets.length; i++){\n    if(brackets[i] === \"<\"){\n      stack.push(true);\n\
    \    }else{\n      if(stack.length === 0){\n        return false;\n      }else{\n\
    \        if(stack[stack.length-1]){\n          stack.pop();\n        }else{\n\
    \          return false;\n        }\n      }\n    }\n  }\n  return stack.length\
    \ === 0;\n}\n", "\treturn brackets.split(\"\").every(function(char){\n\t\tswitch(char){\n\
    \t\t\tcase \"<\":\n\t\t\t\treturn \"<\".length == brackets.length;\n\t\t\tcase\
    \ \">\":\n\t\t\t\treturn \">\".length == brackets.length;\n\t\t\tdefault:\n\t\t\
    \t\treturn char == brackets[0];\n\t\t}\n\t});\n}\n", "  var opening_brackets =\
    \ brackets.match(/(<+)/).length;\n  var closing_brackets = brackets.match(/(>+)/).length;\n\
    \  return opening_brackets == closing_brackets;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    It works, although the code seems unnecessary. `var brackets = '>'; if (s.indexOf(brackets)\
    \ != -1 && s.indexOf(brackets)<s.length-2){ //brackets is a string of \"<\" and\
    \ \">\".\n  // return true if every opening bracket has a corresponding closing\
    \ bracket.\n  // >>> correct_bracketing(\"<\")\n  // false\n  // >>> correct_bracketing(\"\
    <>\")\n  // true\n  // >>> correct_bracketing(\"<<><>>\")\n  // true\n  // >>>\
    \ correct_bracketing(\"><<>\")\n  // false\n} return false;`\n<|/ c |>\n<| c |>\n\
    - Good point. The code in the question was incorrectly checking that the closing\
    \ bracket was immediately followed by the opening bracket, which would allow a\
    \ false positive.\n<|/ c |>\n<| c |>\n- You're right, that code was incorrect\
    \ - I've fixed it, and I've also added a comment to explain why the code in the\
    \ question is incorrect.\n<|/ c |>\n<| c |>\nThanks for the clarification. I've\
    \ updated my answer to reflect the correction.\n<|/ c |>\n<| a dscore=3 tags=javascript,string\
    \ |>\nHere's a non-regex solution that works for any pair of characters. I doubt\
    \ this is much faster, but it's easier to follow:\n<code>", "\tif (brackets.length==0)\n\
    \t\treturn false;\n\tbrackets.toUpperCase();\n\tvar opening_brackets=0;\n\tvar\
    \ closing_brackets=0;\n\tvar last_char=null;\n\tvar open_count=0,close_count=0;\n\
    \tfor (var i=0;i<brackets.length-1;i++){\n\t\tif (brackets[i]==\"<\" && brackets[i+1]==\"\
    <\"){\n\t\t\topening_brackets++;\n\t\t}\n\t\tif (brackets[i]==\">\" && brackets[i+1]==\"\
    >\"){\n\t\t\tclosing_brackets++;\n\t\t}\n\t\tlast_char=brackets[i];\n\t}\n\tvar\
    \ result = opening_brackets==closing_brackets;\n\tresult = (last_char!=null &&\
    \ brackets[brackets.length-1]==last_char) ? result : false;\n\treturn result;\n\
    }", "    // return true if brackets is a string of \"<\" and \">\".\n    // return\
    \ true if every opening bracket has a corresponding closing bracket.\n    if(brackets\
    \ != null && brackets.indexOf('<') == 0 && brackets.indexOf('>') == brackets.length\
    \ - 1){\n        return true;\n    }\n    return false;\n}\n\n", "    var bracket_open\
    \ = brackets.substring(0,1);\n    var bracket_close = brackets.substring(1,2);\n\
    \    var found_open_bracket = false;\n    var found_close_bracket = false;\n \
    \   var brackets_positions = [];\n    for(var i=0;i<brackets.length;i++){\n  \
    \      if(brackets[i] == '<'){\n            brackets_positions.push(i);\n    \
    \        if(found_close_bracket){\n                return false;\n           \
    \ }\n        }\n        else if(brackets[i] == '>'){\n            found_close_bracket\
    \ = true;\n        }\n        else{\n            found_open_bracket = true;\n\
    \        }\n    }\n    if(found_close_bracket){\n        return false;\n    }\n\
    \    for(var i=0;i<brackets_positions.length-1;i++){\n        if(bracket_open\
    \ != brackets[brackets_positions[i]]){\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "  var brackets_arr = brackets.split('');\n  var\
    \ open_count = 0;\n  var close_count = 0;\n  var incorrect_opening = false;\n\
    \  var incorrect_closing = false;\n  for (var i = 0, len = brackets_arr.length;\
    \ i < len; i++) {\n    var opening = brackets_arr[i];\n    var closing = brackets_arr[i+1];\n\
    \    if (opening === '<') {\n      open_count++;\n    } else if (closing === '<')\
    \ {\n      close_count++;\n    }\n    if (open_count >= close_count && open_count\
    \ > 0 && close_count > 0) {\n      incorrect_opening = true;\n      break;\n \
    \   }\n  }\n\n  return (incorrect_opening && incorrect_closing);\n}\n", "  var\
    \ opening_brackets = brackets.split(\"\")\n  var closing_brackets = brackets.split(\"\
    \").reverse()\n  for(var i=0; i<opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ == \"<\" && closing_brackets[i-1] == \">\"){\n      return false\n    }\n  }\n\
    \  return true\n}\n", "\tif(!brackets)return false;\n\tvar bs = brackets.split(\"\
    \");\n\tvar found = false;\n\tfor(var i=0; i<bs.length; i++){\n\t\tif(bs[i] ===\
    \ \"<\"){\n\t\t\tif(!found)found = true;\n\t\t}else if(bs[i] === \">\"){\n\t\t\
    \tif(found)found = false;\n\t\t}\n\t}\n\treturn found;\n}\n", "\tif(brackets.length\
    \ != 1){\n\t\treturn false;\n\t}\n\tif(brackets[0] == \"<\"){\n\t\tif(brackets.slice(-2)\
    \ == \"<<\"){\n\t\t\treturn true;\n\t\t}\n\t}\n\tif(brackets[0] == \">\"){\n\t\
    \tif(brackets.slice(-2) == \">>\" || brackets.slice(-3) == \">>>\"){\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;\n}", "    var brackets_stack = []\n    var\
    \ bracket_count = 0\n    brackets_stack.push(brackets)\n    while (brackets_stack.length\
    \ > 0){\n        var current_bracket = brackets_stack.pop()\n        var open_count\
    \ = 0\n        while (open_count < current_bracket.length){\n            if (current_bracket[open_count]\
    \ == '<'){\n                brackets_stack.push(current_bracket.substring(0, open_count)\
    \ + current_bracket.substring(open_count+1))\n                brackets_stack.push(\"\
    <\" + current_bracket.substring(open_count+2, current_bracket.length))\n     \
    \           open_count += 1\n            } else {\n                open_count\
    \ += 1\n            }\n        }\n        bracket_count += open_count\n    }\n\
    \    if (bracket_count != brackets.length){\n        return false\n    }\n   \
    \ return true\n}\n", "    var open = brackets.split('<');\n    var close = brackets.split('>');\n\
    \    for(var i = 0; i < open.length; i++){\n        if(open[i] === close[i]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/\
    \ a tags=javascript dscore=4 |>\n<| a dscore=2 |>\nHere is another solution.\n\
    <code>\nlet input = '<<>';\nlet count = 0;\nfor (let i = 0; i < input.length;\
    \ i++) {\n  if (input[i] === '<' && input[i + 1] === '>') {\n    count++;\n  }\n\
    }\nreturn count === 3;\n</code>\n<|/ a tags=javascript |>\n<| a |>\nHere is a\
    \ solution without regular expressions:\n<code>", "    var bracket = brackets.slice(1,\
    \ -1);\n    for (var i = 0; i < bracket.length; i++){\n        if(openingBrackets.indexOf(bracket[i])\
    \ == -1){\n            return false;\n        }\n    }\n    return true;\n}\n",
  "\tvar found = false;\n\tvar temp = \"\";\n\tvar bracketsLength = brackets.length;\n\
    \tfor (var i = 0; i < bracketsLength; i++) {\n\t\ttemp = brackets[i];\n\t\tif\
    \ (temp == '<') {\n\t\t\tif (found == true) {\n\t\t\t\treturn false;\n\t\t\t}\
    \ else {\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t} else if (temp == '>') {\n\t\t\t\
    if (found == false) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tfound =\
    \ false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\n", "\t// Iterate over the string and check each opening bracket.\n\t// Each\
    \ opening bracket will be an index into the string. We have\n\t// found the first\
    \ correct one, so return true.\n\tvar correct_bracket = true;\n\tfor(var i = 0;\
    \ i < brackets.length; i++){\n\t\tvar bracket = brackets.charAt(i);\n\t\tvar index\
    \ = brackets.indexOf(bracket);\n\t\tif (index == -1) correct_bracket = false;\n\
    \t}\n\treturn correct_bracket;\n}\n\n", "\tfor(let i = brackets.length - 1; i\
    \ >= 0; i--){\n\t\tif(brackets[i] == \">\" && brackets[i+1] == \"<\")\n\t\t\t\
    return true;\n\t}\n\treturn false;\n}\n", "  //get the length of the brackets\n\
    \  let bracketsLength = bbrackets.length;\n  let newBrackets = brackets.split(\"\
    \");\n  let resultingString = newBrackets.join(\"\");\n  let result = false;\n\
    \  for(let i = 0; i < newBrackets.length; i++){\n    if(brackets.includes(newBrackets[i])){\n\
    \      result = true;\n    }\n  }\n  return result;\n}\n", "\tvar found = 0;\n\
    \tvar open_count = 0;\n\tvar open_char;\n\tfor(var i=0; i<brackets.length; i++){\n\
    \t\tif(open_count > 0){\n\t\t\topen_char = '>';\n\t\t}else{\n\t\t\topen_char =\
    \ '<';\n\t\t}\n\t\tif(open_char != brackets[i]){\n\t\t\tfound++;\n\t\t}\n\t\t\
    open_count += (brackets[i] == open_char) ? 1 : 0;\n\t}\n\treturn found == brackets.length\
    \ ? true : false;\n}\n", "    var bracket_stack = []\n    for(var i=0; i<brackets.length;\
    \ i++){\n        var bracket = brackets[i]\n        if(bracket == \"<\"){\n  \
    \          if(!bracket_stack.length) return false\n            if(!bracket_stack[bracket_stack.length-1]\
    \ == \"<\") return false\n            bracket_stack.pop()\n        }\n       \
    \ else if(bracket == \">\"){\n            if(bracket_stack.length) return false\n\
    \            bracket_stack.push(bracket)\n        }\n        else if(!bracket_stack.length){\n\
    \            if(bracket != bracket) return false\n        }\n        else{\n \
    \           if(bracket != bracket_stack[bracket_stack.length-1]) return false\n\
    \            bracket_stack.pop()\n        }\n    }\n    return !bracket_stack.length\n\
    }\n\n", "    var brackets_index = brackets.indexOf(\"<\");\n    if(brackets_index\
    \ === -1 || brackets_index === brackets.length - 1){\n        return false;\n\
    \    }\n    if(brackets.charAt(brackets_index + 1) !== \"<\"){\n        return\
    \ false;\n    }\n    if(brackets.charAt(brackets_index - 1) !== \"<\"){\n    \
    \    return true;\n    }\n    return false;\n}\n", "    var result = true;\n \
    \   var opening = brackets.split(\"\");\n    var closing = brackets.split(\"\"\
    );\n    var length = opening.length;\n    for(var i = 0; i < length; i++){\n \
    \       if(opening[i] != closing[i]){\n            result = false;\n         \
    \   break;\n        }\n    }\n    return result;\n}\n", "    var brackets_open\
    \ = brackets.split(\"<\");\n    var brackets_close = brackets.split(\">\");\n\
    \    var open_brackets = _.map(brackets_open, function (bracket) {\n        return\
    \ bracket.charAt(0);\n    });\n    var close_brackets = _.map(brackets_close,\
    \ function (bracket) {\n        return bracket.charAt(0);\n    });\n    if (open_brackets.length\
    \ == close_brackets.length){\n        for (var i = 0; i <= open_brackets.length\
    \ - 1; i++){\n            if (open_brackets[i] != close_brackets[i]){\n      \
    \          return false;\n            }\n        }\n        return true;\n   \
    \ } else {\n        return false;\n    }\n}\n", "    return brackets.match(/[<>]/g).every(function(char){\n\
    \        return brackets.indexOf(char) !== brackets.lastIndexOf(char);\n    });\n\
    }\n", "    for(var i=0; i<brackets.length-1; i++){\n        if(brackets[i] ==\
    \ \"<\" && brackets[i+1] == \"<\"){\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n", "  var opening_brackets = brackets.match(/<[|]/g);\n\
    \  var closing_brackets = brackets.match(/<\\[\\|]/g);\n\n  if(opening_brackets\
    \ == null || closing_brackets == null){\n    return false;\n  }\n  \n  var length\
    \ = opening_brackets.length;\n\n  for(var i = 0; i<length; i++){\n    var open_bracket\
    \ = opening_brackets[i];\n    var close_bracket = closing_brackets[i];\n    var\
    \ close_match = opening_brackets.indexOf(close_bracket);\n    var open_match =\
    \ closing_brackets.indexOf(open_bracket);\n    \n    if(open_match == -1 && close_match\
    \ != -1){\n      return false;\n    }\n    if(open_match != -1 && close_match\
    \ != -1){\n      return false;\n    }\n    if(open_match != -1 && close_match\
    \ == -1){\n      return false;\n    }\n    if(open_match != -1 && close_match\
    \ != -1){\n      return false;\n    }\n  }\n\n  return true;\n}\n", "  for(var\
    \ i = 1; i < brackets.length - 1; i++){\n    var left = brackets.substr(0,i);\n\
    \    var right = brackets.substr(i, 1);\n    if(right != \">\"){\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  brackets.split('<').map(function(bracket){\n\
    \    if (bracket.match(/[\\>\\<]/g)) {\n      return true\n    } else {\n    \
    \  return false\n    }\n  }).filter(function(bracket){\n    return bracket\n \
    \ }).length == brackets.length\n}\n", "\tvar brackets = brackets.toLowerCase();\n\
    \tvar count = 0;\n\tbrackets.split(\"<\").forEach(function(element){\n\t\tcount++;\n\
    \t\tif(element.length > 0){\n\t\t\tif(brackets.indexOf(element) < 0){\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t}\n\t});\n\treturn (count > 0);\n}\n", "    for(var\
    \ i = 0; i < brackets.length; ++i){\n        var open = brackets[i];\n       \
    \ var close = brackets[brackets.length - 1 - i];\n        if(open === close){\n\
    \            return true;\n        }\n        if(open !== \">\" && open !== \"\
    <\" && close !== \"<\" && close !== \">\"){\n            return false;\n     \
    \   }\n    }\n    return true;\n}\n", "    var opening_brackets = brackets.match(/<|>/g);\n\
    \    var closing_brackets = brackets.match(/<\\/?([^>]*)>/g);\n    return opening_brackets.every((open_bracket)\
    \ => {\n        return closing_brackets.every((close_bracket) => {\n         \
    \   return (open_bracket === close_bracket);\n        });\n    });\n}\n</code>\n\
    <|/ a tags=javascript,algorithm dscore=4 |>\n<| c |>\nI like this. This looks\
    \ very clear, simple and efficient. I just want to add that I think it would make\
    \ sense to put this function in a separate file that both the main and the test\
    \ file can use. Otherwise I would have to have this function written in every\
    \ file that needs it.\n<|/ c |>\n<| c |>\nThanks. I agree. I put it in a file\
    \ called `helpers.js`. So I import the file like `import helpers from \"./helpers\"\
    ;`. And then I can use `helpers.correct_bracketing` from any file.\n<|/ c |>\n\
    <| c |>\nI like this solution.  However I do not think you should use == to compare\
    \ strings. You should use === instead, which will avoid type coercion.  See this\
    \ question: https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons\n\
    <|/ c |>\n<| c |>\n: Good catch. My answer was from 2016. I updated it to fix\
    \ the issues with `==`. It looks like OP is comparing string literals, so that's\
    \ fine. But I would use === in the actual implementation. I think it's better\
    \ because it expresses what you're actually trying to check. `==` checks if two\
    \ things are the same thing. `===` checks if they are the same thing AND have\
    \ the same type.\n<|/ c |>\n<| c |>\nI see.  Yeah I should probably update my\
    \ answer as well.\n<|/ c |>\n<| a |>\nHere's a fairly simple solution. \nLet's\
    \ say you have this string: \n<code>\nvar s = \"<<><>>\"\n</code>\nHere's a function\
    \ that will split this string into an array and return the number of opening brackets,\
    \ closing brackets, and total brackets:\n<code>", "\tbrackets_set = brackets.split(\"\
    \");\n\tfor(i=0;i<brackets_set.length;i++){\n\t\tif(brackets_set[i] == \"<\" ||\
    \ brackets_set[i] == \"<=\" || brackets_set[i] == \">\" || brackets_set[i] ==\
    \ \">=\"){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
