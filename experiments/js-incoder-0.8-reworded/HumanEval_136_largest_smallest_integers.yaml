name: HumanEval_136_largest_smallest_integers
language: js
prompt: "//Create a function that returns an array (a, b), where 'a' is\n// the largest\
  \ of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n\
  // If there is no negative or positive integers, return them as undefined.\n// Examples:\n\
  // >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>>\
  \ largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n\
  // [undefined, undefined]\nfunction largest_smallest_integers(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
  \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n \
  \ assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
  \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2,\
  \ 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
  \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
  \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
  \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
  \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\n\
  test();"
completions: ["  var lst2=[];\n  for (var i=0;i<lst.length;i++){\n    var l=Math.max(lst[i],0);\n\
    \    var s=Math.min(lst[i],0);\n    lst2.push([l,s]);\n  }\n  return lst2;\n}\n",
  "  if(lst.every(function(v){return v===null || typeof v === \"undefined\"})){\n\
    \    return [undefined, undefined];\n  }\n  var smallest_negative;\n  var smallest_positive;\n\
    \  var largest;\n  for(var i=0; i<lst.length; i++){\n    if(!smallest_negative\
    \ && lst[i] < 0){\n      smallest_negative = lst[i];\n    }\n    if(!smallest_positive\
    \ && lst[i] > 0){\n      smallest_positive = lst[i];\n    }\n    if(!largest ||\
    \ lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  if(smallest_negative){\n\
    \    return [smallest_negative, largest];\n  }\n  if(smallest_positive){\n   \
    \ return [largest, smallest_positive];\n  }\n  return [undefined, undefined];\n\
    }\n", "  let max;\n  let min;\n  let min_idx = 0;\n  let max_idx = 0;\n  if (lst.length\
    \ > 0){\n    max = lst[0];\n    min = lst[0];\n    for (let i = 0; i < lst.length;\
    \ i++){\n      if (lst[i] > max){\n        max = lst[i];\n      }\n      if (lst[i]\
    \ < min){\n        min = lst[i];\n      }\n    }\n    if (max < 0){\n      max_idx\
    \ = 0;\n    } else {\n      max_idx = lst.length - 1;\n    }\n    if (min > 0){\n\
    \      min_idx = lst.length - 1;\n    } else {\n      min_idx = 0;\n    }\n  }\n\
    \  return [max, min];\n}\n", "  var smallest_negative = lst.reduce(function(prev,\
    \ cur) {\n    return Math.max(prev, cur);\n  }, -Infinity);\n\n  var smallest_positive\
    \ = lst.reduce(function(prev, cur) {\n    return Math.min(prev, cur);\n  }, Infinity);\n\
    \n  if (smallest_negative === -Infinity)\n    return smallest_positive;\n  else\n\
    \    return [smallest_negative, smallest_positive];\n}\n", "    if(lst.length\
    \ < 2)\n        return [undefined, undefined];\n    \n    var small = lst[0];\n\
    \    var large = lst[0];\n    \n    for(var i = 0; i < lst.length; i++){\n   \
    \     if(lst[i] < small){\n            small = lst[i];\n        } else if(lst[i]\
    \ > large){\n            large = lst[i];\n        }\n    }\n    return [large,\
    \ small];\n}\n", "  var largest = Infinity;\n  var smallest = +Infinity;\n  var\
    \ i;\n\n  for (i = 0; i < lst.length; i++){\n    if (lst[i] > largest){\n    \
    \  largest = lst[i];\n    }\n    if (lst[i] < smallest){\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  // Handle empty list\n  if(lst\
    \ == []){\n    return [undefined, undefined];\n  }\n  // Handle single number\n\
    \  if(lst.length == 1){\n    return [lst[0], lst[0]];\n  }\n\n  // Get the first\
    \ number\n  var a = Math.min.apply(null, lst);\n  var b = Math.max.apply(null,\
    \ lst);\n\n  // Get an array of all the negative numbers, and their count\n  var\
    \ neg_arr = lst.filter(function(el){\n    return el < 0;\n  }).map(function(el){\n\
    \    return {\n      val: el,\n      count: lst.filter(function(el){\n       \
    \ return el < el;\n      }).length\n    };\n  });\n\n  // Get the largest negative\
    \ number\n  var most_negative = neg_arr.reduce(function(a, b){\n    return a.val\
    \ < b.val ? a : b;\n  });\n\n  // Get the smallest positive number\n  var most_positive\
    \ = neg_arr.reduce(function(a, b){\n    return a.val > b.val ? a : b;\n  });\n\
    \n  // Get an array of all positive numbers, and their count\n  var pos_arr =\
    \ lst.filter(function(el){\n    return el > 0;\n  }).map(function(el){\n    return\
    \ {\n      val: el,\n      count: lst.filter(function(el){\n        return el\
    \ > el;\n      }).length\n    };\n  });\n\n  // Get the largest positive number\n\
    \  var most_positive = pos_arr.reduce(function(a, b){\n    return a.val > b.val\
    \ ? a : b;\n  });\n\n  // Get the most negative and positive numbers\n  var most_negative\
    \ = neg_arr.reduce(function(a, b){\n    return a.val < b.val ? a : b;\n  });\n\
    \n  var most_positive = pos_arr.reduce(function(a, b){\n    return a.val > b.val\
    \ ? a : b;\n  });\n\n  // If the most negative is smaller than the most positive,\
    \ return the\n  // smallest positive number as the largest\n  if(most_negative.val\
    \ < most_positive.val){\n    return most_positive;\n  }\n\n  return most_negative;\n\
    }\n", "\tlet out = [];\n\tlet max = -Infinity;\n\tlet min = Infinity;\n\tfor(let\
    \ i = 0; i < lst.length; i++){\n\t\tif(lst[i] > max){\n\t\t\tmax = lst[i];\n\t\
    \t}\n\t\tif(lst[i] < min){\n\t\t\tmin = lst[i];\n\t\t}\n\t}\n\tif(max < 0){\n\t\
    \tout[0] = min;\n\t} else {\n\t\tout[0] = max;\n\t}\n\treturn out;\n}\n", "  let\
    \ max_int = -Infinity;\n  let min_int = Infinity;\n  for (let num of lst) {\n\
    \    if (num < min_int) min_int = num;\n    if (num > max_int) max_int = num;\n\
    \  }\n  return [max_int, min_int];\n}\n\n", "    for(var i = lst.length - 1; i\
    \ >= 0; i--){\n        if(lst[i] > 0){\n            var b = lst[i];\n        \
    \    lst.splice(i,1);\n            return [b];\n        }\n    }\n    return [undefined,\
    \ undefined];\n}\n", "    // Create an empty array of negative numbers\n    var\
    \ negatives = new Array(lst.length);\n    var negative;\n    for(var i=0; i<lst.length;\
    \ i++){\n        // If there's a negative number, set that number, and set i to\
    \ that number's index\n        // If there isn't a negative number, set i to -1\n\
    \        negative = lst[i] < 0 ? lst[i] : -1;\n        negatives[i] = negative;\n\
    \    }\n    \n    // Find the maximum negative number in the list\n    var max_negative\
    \ = negatives.reduce(function(a, b){\n        return a < b ? a : b;\n    }, 0);\n\
    \    \n    // Iterate through the list, setting each element in the list to its\
    \ negative counterpart \n    for(var i=0; i<lst.length; i++){\n        // If lst[i]\
    \ has a negative counterpart, add its negative counterpart to the list\n     \
    \   lst[i] += max_negative;\n    }\n    \n    return lst;\n}\n", "\t\n\tvar largest_int\
    \ = 0;\n\tvar smallest_int = undefined;\n\n\tfor(var i in lst){\n\t\t\n\t\tvar\
    \ num = lst[i];\n\t\t\n\t\tif(smallest_int == undefined || num < smallest_int){\n\
    \t\t\tsmallest_int = num;\n\t\t}\n\t\t\n\t\tif(largest_int == undefined || num\
    \ > largest_int){\n\t\t\tlargest_int = num;\n\t\t}\n\t\t\n\t}\n\t\n\treturn [largest_int,\
    \ smallest_int];\n}\n\n", "\tvar n = lst.filter(function(x){return !isNaN(x) &&\
    \ !(x === Infinity)});\n\tif(!n.length){\n\t\treturn [undefined, undefined];\n\
    \t}\n\tif(n.length===1){\n\t\treturn [Math.max(...n), Math.min(...n)];\n\t}\n\t\
    var max = Math.max(...n);\n\tvar min = Math.min(...n);\n\treturn [max, min];\n\
    }\n", "  var max = lst[0];\n  var min = lst[0];\n  var i;\n  for (i = 1; i < lst.length;\
    \ i++){\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] <\
    \ min) {\n      min = lst[i];\n    }\n  }\n  if (min > max){\n    return undefined;\n\
    \  }\n  return [min, max];\n}\n", "    let positives = [];\n    let negatives\
    \ = [];\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i] > 0) positives.push(lst[i]);\n\
    \        else if (lst[i] < 0) negatives.push(lst[i]);\n    }\n    if (positives.length\
    \ > 0 || negatives.length > 0){\n        if (positives.length > negatives.length){\n\
    \            return [positives[positives.length - 1]];\n        } else {\n   \
    \         return [negatives[negatives.length - 1]];\n        }\n    } else {\n\
    \        return [undefined, undefined];\n    }\n}\n", "  var maxima = new Set();\n\
    \  var minima = new Set();\n  for(var i = 0, len = lst.length; i < len; i++){\n\
    \    if(lst[i] < 0){\n      maxima.add(lst[i]);\n    } else {\n      minima.add(lst[i]);\n\
    \    }\n  }\n  if(!maxima.size && !minima.size) {\n    return undefined;\n  }\n\
    \  if(!maxima.size) {\n    return maxima.values().next().value;\n  }\n  if(!minima.size)\
    \ {\n    return minima.values().next().value;\n  }\n  return Math.max(...maxima.values())\
    \ - Math.min(...minima.values());\n}\n", "  var max = -Infinity;\n  var min =\
    \ Infinity;\n  var l = lst.length;\n  for(var i=0;i<l;i++){\n    var num = lst[i];\n\
    \    if(num > max){\n      max = num;\n    }\n    if(num < min){\n      min =\
    \ num;\n    }\n  }\n  return [max, min];\n}\n", "  var min= Infinity;\n  var max=\
    \ -Infinity;\n  \n  lst.forEach(function(item){\n    if(item < min)\n      min=\
    \ item;\n    \n    if(item > max)\n      max= item;\n  });\n  \n  return [min,\
    \ max];\n}\n", "  var smallest, largest;\n  if(lst.length == 0){\n    return [undefined,\
    \ undefined];\n  }\n  smallest = largest = lst[0];\n  for(var i=1; i<lst.length;\
    \ i++){\n    if(lst[i] < smallest){\n      smallest = lst[i];\n    }\n    else\
    \ if(lst[i] > largest){\n      largest = lst[i];\n    }\n  }\n  return [smallest,\
    \ largest];\n}\n", "\tif(lst.length==0){return [undefined, undefined];}\n\tvar\
    \ max_int=0;\n\tvar min_int=lst[0];\n\tvar current_int=lst[0];\n\tfor(var i=1;i<lst.length;i++){\n\
    \t\tif(current_int<lst[i]){\n\t\t\tcurrent_int=lst[i];\n\t\t}\n\t\telse if(current_int>lst[i]){\n\
    \t\t\tmax_int=current_int;\n\t\t\tmin_int=lst[i];\n\t\t}\n\t}\n\treturn [min_int,\
    \ max_int];\n}\n", "\tvar ret = [];\n\tvar largest = Number.NEGATIVE_INFINITY;\n\
    \tvar smallest = Number.POSITIVE_INFINITY;\n\tfor(var i=0; i<lst.length; i++){\n\
    \t\tif(lst[i] < smallest){\n\t\t\tsmallest = lst[i];\n\t\t}\n\t\tif(lst[i] > largest){\n\
    \t\t\tlargest = lst[i];\n\t\t}\n\t}\n\tif(smallest !== Number.NEGATIVE_INFINITY){\n\
    \t\tret.push(smallest);\n\t}\n\tif(largest !== Number.POSITIVE_INFINITY){\n\t\t\
    ret.push(largest);\n\t}\n\treturn ret;\n}\n", "  if(lst.length < 2) return lst\n\
    \  var smallest = Number.MAX_VALUE\n  var largest = Number.MIN_VALUE\n  for(var\
    \ i=0; i<lst.length; i++){\n    var num = lst[i]\n    if(num < smallest || num\
    \ > largest){\n      smallest = num\n    }else{\n      largest = num\n    }\n\
    \  }\n  return [smallest, largest]\n}\n", "  var result = [];\n  for (var i =\
    \ 0; i < lst.length; i++){\n    var a = lst[i], b = lst[i+1], c = lst[i+2], d\
    \ = lst[i+3];\n    var l = Math.min(a,b,c,d);\n    var r = Math.max(a,b,c,d);\n\
    \    if (l === r){\n      if (l > 0){\n        a.push(l);\n      }\n      if (r\
    \ < 0){\n        b.push(r);\n      }\n    }\n    else if (l < r){\n      a.push(l);\n\
    \    }\n    else{\n      b.push(r);\n    }\n  }\n  return result.length ? result\
    \ : null;\n}\n", "    return largest(lst).map(smallest)\n}\n<|/ file filename=function.js\
    \ ext=.js |>", "    if (lst.length < 2) {\n        return [undefined, undefined];\n\
    \    }\n    var smallest = -Infinity;\n    var largest = Infinity;\n    for (var\
    \ i = 0; i < lst.length; ++i) {\n        var num = lst[i];\n        if (num >\
    \ largest) {\n            largest = num;\n        }\n        if (num < smallest)\
    \ {\n            smallest = num;\n        }\n    }\n    return [smallest, largest];\n\
    }\n", "\tvar arr = [];\n\tvar largest;\n\tvar smallest;\n\tfor(var i = 0; i <\
    \ lst.length; i++){\n\t\tif(arr[i] === undefined){\n\t\t\tarr[i] = lst[i];\n\t\
    \t}\n\t\telse {\n\t\t\tif(lst[i] > largest){\n\t\t\t\tlargest = lst[i];\n\t\t\t\
    }\n\t\t\tif(lst[i] < smallest){\n\t\t\t\tsmallest = lst[i];\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn [largest, smallest];\n}\n", "    var lst2 = [];\n    for(var i = 0;\
    \ i < lst.length; i++){\n        if(lst[i] > 0 && lst[i] <= 100){\n          \
    \  lst2.push(lst[i]);\n        }\n    }\n    for(var i = 0; i < lst2.length; i++){\n\
    \        if(lst2[i] > 0 && lst2[i] < 100){\n            lst2[i] = undefined;\n\
    \        }\n    }\n    return lst2;\n}\n", "  var smallest = undefined;\n  var\
    \ largest = undefined;\n  var smaller = 0;\n  var larger = 0;\n  for(var i = 0;\
    \ i < lst.length; i++){\n    if(lst[i] < 0 && lst[i] > largest){\n      largest\
    \ = lst[i];\n    }else if(lst[i] > 0 && lst[i] < smallest){\n      smallest =\
    \ lst[i];\n    }\n  }\n  if (smallest === undefined && largest === undefined){\n\
    \    return [undefined, undefined];\n  }\n  if(smallest === undefined || smallest\
    \ > largest){\n    smallest = largest;\n  }\n  if(smallest > 0){\n    smaller\
    \ = smallest;\n  }\n  larger = largest - smallest;\n  return [smaller, larger];\n\
    }\n", "   var max=-Infinity, min=Infinity;\n   for (var i=0; i<lst.length; i++){\n\
    \      if (lst[i] > max) max=lst[i];\n      if (lst[i] < min) min=lst[i];\n  \
    \ }\n   return [max, min];\n}\n\n", "  \n  if(lst instanceof Array){\n    var\
    \ max_num= lst[0];\n    var min_num= lst[0];\n    for(var i= 1; i<lst.length;\
    \ i++){\n      if(lst[i]>max_num){\n        max_num=lst[i];\n      }\n      if(lst[i]<min_num){\n\
    \        min_num=lst[i];\n      }\n    }\n    return ([max_num, min_num]);\n \
    \ }\n  else{\n    return [lst];\n  }\n}\n\n", "    var largest = Number.POSITIVE_INFINITY;\n\
    \    var smallest = Number.NEGATIVE_INFINITY;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] > largest){\n            largest = lst[i];\n      \
    \  }else if(lst[i] < smallest){\n            smallest = lst[i];\n        }\n \
    \   }\n    if(largest === Number.POSITIVE_INFINITY || smallest === Number.NEGATIVE_INFINITY){\n\
    \        return [undefined, undefined];\n    }\n    return [largest, smallest];\n\
    }\n", "  var max = 0,\n      min = Number.MAX_VALUE,\n      i, n;\n\n  for (i\
    \ = 0, n = lst.length; i < n; ++i) {\n    if (lst[i] > max) max = lst[i];\n  \
    \  if (lst[i] < min) min = lst[i];\n  }\n\n  return [max, min];\n}\n", "  var\
    \ out = [];\n  var max = Math.max.apply(null, lst);\n  var min = Math.min.apply(null,\
    \ lst);\n  \n  if (max > min){\n    if (max > 0)\n      out.push(max);\n    if\
    \ (min < 0)\n      out.push(min);\n  }\n  return out;\n}\n", "    let maxVal =\
    \ -Infinity, minVal = Infinity, vals = [];\n    for(let i = 0, len = lst.length;\
    \ i < len; i++){\n        if(lst[i] < minVal){\n            minVal = lst[i];\n\
    \        }\n        if(lst[i] > maxVal){\n            maxVal = lst[i];\n     \
    \   }\n        vals.push(lst[i]);\n    }\n    return [minVal, maxVal, vals];\n\
    }\n", "  var n = lst.length\n  if (n < 2) {\n    return\n  }\n  var biggest =\
    \ -Infinity\n  var smallest = Infinity\n  for (var i = 0; i < n; i++){\n    if\
    \ (lst[i] > biggest) {\n      biggest = lst[i]\n    } else if (lst[i] < smallest)\
    \ {\n      smallest = lst[i]\n    }\n  }\n  return [biggest, smallest]\n}\n\n",
  "  // if there's only 1 number in lst, return it\n  if(lst.length === 1){\n    return\
    \ lst[0];\n  }\n  // initialize variables\n  var largest = lst[0], smallest =\
    \ lst[0], is_negative = false, pos_count = 0;\n  // loop through numbers\n  for(var\
    \ i=0; i<lst.length; i++){\n    // if we hit a negative number, start over again\n\
    \    if(lst[i] < smallest){\n      smallest = lst[i];\n    }\n    // if we hit\
    \ a positive number, see if we need to keep track of largest\n    // or reset\
    \ smallest\n    if(lst[i] > largest){\n      if(lst[i] > smallest){\n        smallest\
    \ = lst[i];\n      }else{\n        largest = lst[i];\n      }\n      // if it's\
    \ the first number, make sure it's a negative number\n      is_negative = false;\n\
    \    }else{\n      // otherwise we need to keep track of biggest or reset largest\n\
    \      if(lst[i] < smallest){\n        smallest = lst[i];\n      }else{\n    \
    \    largest = lst[i];\n      }\n    }\n    // if we ever get to positive numbers,\
    \ update how many are positive\n    // and increment pos_count\n    if(lst[i]\
    \ > 0){\n      pos_count++;\n    }\n  }\n  // return undefined if there are 0\
    \ positive numbers\n  if(pos_count === 0){\n    return undefined;\n  }\n  // otherwise\
    \ return largest\n  if(is_negative){\n    return -largest;\n  }else{\n    return\
    \ largest;\n  }\n}\n", "\tvar largest = -Infinity;\n\tvar smallest = Infinity;\n\
    \tfor(var i = 0; i < lst.length; i++){\n\t\tif(largest < lst[i]){\n\t\t\tlargest\
    \ = lst[i];\n\t\t}\n\t\tif(smallest > lst[i]){\n\t\t\tsmallest = lst[i];\n\t\t\
    }\n\t}\n\tif(largest == -Infinity){\n\t\treturn [undefined, undefined];\n\t}\n\
    \tif(smallest == Infinity){\n\t\treturn [largest, undefined];\n\t}\n\treturn [largest,\
    \ smallest];\n}\n", "  let max_int = 0;\n  let min_int = Number.MAX_SAFE_INTEGER;\n\
    \  lst.forEach(element => {\n    if(element < 0){\n      min_int = element;\n\
    \    }\n    if(element > max_int){\n      max_int = element;\n    }\n  });\n \
    \ if(min_int > max_int){\n    return [undefined, undefined];\n  } else {\n   \
    \ return [min_int, max_int];\n  }\n}\n", "    let max = -Infinity;\n    let min\
    \ = +Infinity;\n    for(const v of lst){\n        if(v < min) min = v;\n     \
    \   if(v > max) max = v;\n    }\n    return [max, min];\n}\n", "    for(var i\
    \ = 1, len = lst.length; i < len; i++){\n        var n = lst[i];\n        if(n\
    \ < 0){\n            if(i == 1){\n                return [undefined, undefined];\n\
    \            }else{\n                return [lst[i - 1], n - 1];\n           \
    \ }\n        }else if(n > 0){\n            return [lst[i - 1], n - 1];\n     \
    \   }\n    }\n    return [lst[len - 1], 0];\n}\n", "  var min = Number.MAX_VALUE,\n\
    \      max = Number.MIN_VALUE;\n  for(var i=0;i<lst.length;i++){\n    if(lst[i]<min){\n\
    \      min=lst[i];\n    }\n    if(lst[i]>max){\n      max=lst[i];\n    }\n  }\n\
    \  return [max,min];\n}\n\n", "    var a = lst[0];\n    var b = lst[0];\n\n  \
    \  for(var i = 0; i < lst.length; i++){\n        if(a < lst[i]){\n           \
    \ a = lst[i];\n        }\n        if(b > lst[i]){\n            b = lst[i];\n \
    \       }\n    }\n\n    return [a, b];\n}\n", "  let max_num = Number.MIN_VALUE;\n\
    \  let min_num = Number.MAX_VALUE;\n\n  for(let i in lst){\n    let num = lst[i];\n\
    \    if(num < min_num){\n      min_num = num;\n    }\n    if(num > max_num){\n\
    \      max_num = num;\n    }\n  }\n  return [max_num, min_num];\n}\n", "  var\
    \ result = [];\n  lst.forEach(function(v){\n    if(v<0){\n      result.push(undefined);\n\
    \    }else{\n      result.push(v);\n    }\n  });\n  return result;\n}\n", "\t\
    let min_idx = lst.findIndex(a => a < 0);\n\tif (min_idx === -1) min_idx = 0;\n\
    \tlet max_idx = lst.findIndex(a => a > 0);\n\tif (max_idx === -1) max_idx = lst.length\
    \ - 1;\n\treturn [lst[max_idx], lst[min_idx]];\n}\n", "  let max_int = -1\n  let\
    \ min_int = Number.POSITIVE_INFINITY\n  for (let num of lst){\n    if (num < min_int){\n\
    \      min_int = num\n    } else if (num > max_int){\n      max_int = num\n  \
    \  }\n  }\n  if (max_int === Number.POSITIVE_INFINITY){\n    return [undefined,\
    \ undefined]\n  } else if (min_int === Number.POSITIVE_INFINITY){\n    return\
    \ [max_int, max_int]\n  } else {\n    return [max_int, min_int]\n  }\n}\n", " \
    \ var a = [],\n      i;\n  for(i = 0; i < lst.length; i++){\n    a = Math.max.apply(a,\
    \ [lst[i], lst[i]]);\n  }\n  return a || [undefined, undefined];\n}\n", "\t//\
    \ Use default value for undefined if list is empty\n\tif(lst === null || lst ===\
    \ undefined || lst.length < 1){\n\t\treturn [undefined, undefined];\n\t}\n\t\n\
    \tvar max;\n\tvar min;\n\t\n\tfor(var i = 0, j = lst.length - 1; i <= j; i++,\
    \ j--){\n\t\tif(lst[i] > lst[j]){\n\t\t\tmax = lst[i];\n\t\t\tmin = lst[j];\n\t\
    \t}\n\t\telse{\n\t\t\tmax = lst[j];\n\t\t\tmin = lst[i];\n\t\t}\n\t}\n\treturn\
    \ [max, min];\n}\n\n", "    var result = new Array(2);\n    var max = -Infinity;\n\
    \    var min = Infinity;\n\n    // Iterate through each number in the array.\n\
    \    for (var i = 0; i < lst.length; i++){\n        // If the number is positive,\
    \ update the max and min variables accordingly.\n        // If the number is negative,\
    \ set the max and min variables to undefined.\n        // If the number is 0,\
    \ update the max and min variables to undefined.\n        if (lst[i] > 0){\n \
    \           max = lst[i] > max ? lst[i] : max;\n            min = lst[i] < min\
    \ ? lst[i] : min;\n        } else {\n            max = undefined;\n          \
    \  min = undefined;\n        }\n    }\n    result[0] = max;\n    result[1] = min;\n\
    \    return result;\n}\n", "  // Handle corner cases first.\n  if (!lst.length)\
    \ return [undefined, undefined];\n  if (lst.length == 1) {\n    return [lst[0],\
    \ lst[0]];\n  }\n\n  // Find the highest and lowest values in the array, and find\
    \ their\n  // corresponding indices in lst.\n  var high = Math.max.apply(null,\
    \ lst);\n  var low = Math.min.apply(null, lst);\n  var idx = lst.indexOf(high);\n\
    \  if (idx == -1) idx = lst.indexOf(low);\n\n  // If the high value is still larger\
    \ than the lowest value, then we\n  // return the corresponding values from the\
    \ lst array, otherwise return\n  // undefined.\n  if (high > low) {\n    return\
    \ [lst[idx], idx];\n  } else {\n    return [undefined, undefined];\n  }\n}\n",
  "  var max_negative = undefined;\n  var min_positive = undefined;\n  var max_positive\
    \ = undefined;\n  for(var i = 0; i < lst.length; i++){\n    var num = lst[i];\n\
    \    if(num <= 0){\n      if(max_negative === undefined){\n        max_negative\
    \ = num;\n      }else if(num < max_negative){\n        max_negative = num;\n \
    \     }\n    }else if(num >= 0){\n      if(min_positive === undefined){\n    \
    \    min_positive = num;\n      }else if(num > min_positive){\n        min_positive\
    \ = num;\n      }\n    }\n  }\n  if(max_negative === undefined){\n    return [undefined,\
    \ undefined];\n  }else if(max_negative < min_positive){\n    return [max_negative,\
    \ min_positive];\n  }else{\n    return [max_negative, undefined];\n  }\n}\n",
  "  var largest = lst[0];\n  var smallest = lst[0];\n  for (var i = 1; i < lst.length;\
    \ i++){\n    if (lst[i] > largest){\n      largest = lst[i];\n    }\n    if (lst[i]\
    \ < smallest){\n      smallest = lst[i];\n    }\n  }\n  if (smallest === undefined){\n\
    \    smallest = undefined;\n  }\n  if (largest === undefined){\n    largest =\
    \ undefined;\n  }\n  return [largest, smallest];\n}\n", "  const sortedLst = lst.sort((a,b)=>b-a)\n\
    \  let maxNum = undefined\n  let minNum = undefined\n  for(let i = 0; i < sortedLst.length;\
    \ i++){\n    const num = sortedLst[i]\n    if(num < 0){\n      if(maxNum === undefined){\n\
    \        maxNum = num\n      } else if(num > maxNum){\n        maxNum = num\n\
    \      }\n    } else {\n      if(minNum === undefined){\n        minNum = num\n\
    \      } else if(num < minNum){\n        minNum = num\n      }\n    }\n  }\n \
    \ return [maxNum, minNum]\n}\n", "    var max_arr = [];\n    var min_arr = [];\n\
    \    if(lst.length < 2){\n        return undefined;\n    }\n    for (var i = 0;\
    \ i < lst.length; i++){\n        if(lst[i] < 0 && max_arr.length < 1){\n     \
    \       max_arr.push(lst[i]);\n        }else if(lst[i] > 0 && min_arr.length <\
    \ 1){\n            min_arr.push(lst[i]);\n        }else if(max_arr.length >= 1\
    \ && min_arr.length >= 1){\n            if(max_arr[0] > min_arr[0]){\n       \
    \         max_arr.shift();\n            }else{\n                min_arr.shift();\n\
    \            }\n        }\n    }\n    return [max_arr, min_arr];\n}\n", "  let\
    \ neg = [],\n      pos = [],\n      n = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      neg.push(lst[i]);\n    } else {\n     \
    \ pos.push(lst[i]);\n    }\n  }\n  while (pos.length && neg.length) {\n    n =\
    \ pos[0] < neg[0]?pos[0]:neg[0];\n    pos[0] = neg[0];\n    neg[0] = n;\n  }\n\
    \  if (neg.length) {\n    return [neg[0], neg.slice(1)]\n  }\n  if (pos.length)\
    \ {\n    return [pos[0], pos.slice(1)]\n  }\n  return [undefined, undefined];\n\
    }\n", "  var min_idx = lst.indexOf(Math.min.apply(Math, lst));\n  var max_idx\
    \ = lst.indexOf(Math.max.apply(Math, lst));\n  if(min_idx === -1 || max_idx ===\
    \ -1){\n    return [undefined, undefined];\n  }\n  return [min_idx, max_idx];\n\
    }\n", "  var ret = [];\n  var l = lst.length;\n  for(var i=0; i<l; i++){\n   \
    \ if(lst[i] < 0){\n      ret.unshift(undefined);\n    }\n    else if(lst[i] >\
    \ 0){\n      ret.push(lst[i]);\n    }\n  }\n  return ret;\n}\n", "  if(lst.length\
    \ == 0) return [undefined, undefined];\n  var large = arrMax(lst);\n  var small\
    \ = arrMin(lst);\n  return [large, small];\n}\n", "\tif(lst.length <= 1) return\
    \ lst;\n\tvar largest = lst[0], smallest = lst[0];\n\tfor(var i=1; i<lst.length;\
    \ i++){\n\t\tif(lst[i] > largest){\n\t\t\tlargest = lst[i];\n\t\t} else if(lst[i]\
    \ < smallest){\n\t\t\tsmallest = lst[i];\n\t\t}\n\t}\n\treturn [largest, smallest];\n\
    }\n", "  if(lst.length <= 0){\n    return undefined;\n  }\n  lst.sort((a, b) =>\
    \ a - b);\n  const first = (lst[0] >= 0);\n  const last = (lst[lst.length-1] >=\
    \ 0);\n  if(first && last){\n    return lst;\n  }\n  return [undefined, undefined];\n\
    }\n", "  var largest = -Infinity;\n  var smallest = Infinity;\n  var i = lst.length;\n\
    \  while (i--) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\
    \ else if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return\
    \ [smallest, largest];\n}\n", "  var max_negative = Number.MIN_VALUE;\n  var max_positive\
    \ = Number.MAX_VALUE;\n  for(var i=0; i<lst.length; i++){\n    var num = lst[i];\n\
    \    if(num < max_negative){\n      max_negative = num;\n    }\n    if(num > max_positive){\n\
    \      max_positive = num;\n    }\n  }\n  if(max_negative == Number.MIN_VALUE\
    \ && max_positive == Number.MAX_VALUE){\n    return [undefined, undefined];\n\
    \  }\n  return [max_negative, max_positive];\n}", "  if(lst.length == 0)\n   \
    \ return [undefined, undefined];\n  var a = Math.max(...lst.map(n => n < 0 ? undefined\
    \ : n));\n  var b = Math.min(...lst.map(n => n < 0 ? undefined : n));\n  return\
    \ [a, b];\n}\n", "\tvar ret = [undefined, undefined];\n\tfor(var i = 0; i < lst.length;\
    \ ++i){\n\t\tif(lst[i] < 0){\n\t\t\tret[0] = -Infinity;\n\t\t\tbreak;\n\t\t}else\
    \ if(lst[i] > 0){\n\t\t\tret[1] = Infinity;\n\t\t\tbreak;\n\t\t}else{\n\t\t\t\
    ret[0] = -Infinity;\n\t\t\tret[1] = Infinity;\n\t\t}\n\t}\n\treturn ret;\n}\n",
  "    var lst = lst.map(function(item){\n        if(item){\n            if(item.num\
    \ < 0){\n                return -item.num;\n            }\n            return\
    \ item.num;\n        }\n    });\n    return lst.reduce(function(a, b){\n     \
    \   if(b > a){\n            return b;\n        }\n        return a;\n    });\n\
    }\n", "  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i\
    \ < lst.length; i++){\n    if (lst[i] > largest){\n      largest = lst[i];\n \
    \   } else if (lst[i] < smallest){\n      smallest = lst[i];\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "    var largest = Number.MAX_VALUE;\n    var smallest\
    \ = Number.MAX_VALUE;\n\n    for(var i = 0, l = lst.length; i < l; i++){\n   \
    \     var num = lst[i];\n\n        // If this number is greater than the largest\
    \ number, set it to the largest.\n        if(num > largest){\n            largest\
    \ = num;\n        }\n\n        // If this number is less than the smallest number,\
    \ set it to the smallest.\n        if(num < smallest){\n            smallest =\
    \ num;\n        }\n    }\n\n    return [largest, smallest];\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=0 |>\nThe simplest approach would be to use Array.prototype.sort:\n\
    <code>\nvar arr = [1,0,5,2,4,3,7,8];\narr.sort(function(a,b){return a-b});\n</code>\n\
    This would result in an ascending order (low to high), but if you wanted to descend\
    \ the order, it would just be:\n<code>\narr.sort(function(a,b){return b-a});\n\
    </code>\nThe reason for doing this is because sorting algorithm is quite complex\
    \ and takes a lot of time to process. This is why there are so many algorithms\
    \ and methods to sort an array, a lot of them are much faster.\n<|/ a tags=sorting,arrays,javascript\
    \ |>\n<| c |>\nThis isn't a good solution as it doesn't take into account the\
    \ case where two or more values are equally \"close\", like 1 & 3.\n<|/ c |>\n\
    <| c |>\nThat's why I added the second sort function, to descend the order.\n\
    <|/ c |>\n<| c |>\nIf you're looking for a solution that works with any input\
    \ (as long as it's in the right order), you could use `Math.sign` to determine\
    \ if one number is greater than or less than the other.\n<|/ c |>\n<| c |>\nYour\
    \ second sort function has a bug in the case of comparing a positive value to\
    \ itself. It should simply be `return b - a` since negative numbers sort lower\
    \ than positive.\n<|/ c |>\n<| c |>\n: Thanks for pointing it out. I had a typo.\
    \ I've edited the answer and added the fixed version. Thanks!\n<|/ c |>\n<| a\
    \ |>\n<code>", "\tvar max_num = lst[0];\n\tvar min_num = lst[0];\n\tfor(var i=0;i<lst.length;i++){\n\
    \t\tvar num = lst[i];\n\t\tif(num<min_num) min_num = num;\n\t\telse if(num>max_num)\
    \ max_num = num;\n\t}\n\tif(!max_num) return [undefined, undefined];\n\tif(!min_num)\
    \ return [max_num, max_num];\n\treturn [max_num, min_num];\n}\n\n", "  let max\
    \ = 0\n  let min = 0\n  for(let num of lst){\n    if (num > max){\n      max =\
    \ num\n    } else if (num < min) {\n      min = num\n    }\n  }\n  return [max,\
    \ min]\n}\n", "  const positiveIntegers = lst.filter(n => !isNaN(n));\n  const\
    \ negativeIntegers = lst.filter(n => !isNaN(n) && n <= 0);\n\n  if (negativeIntegers.length\
    \ === 0) {\n    return positiveIntegers.map(n => [n, n]);\n  }\n  else if (positiveIntegers.length\
    \ === 0) {\n    return negativeIntegers.map(n => [n, 0]);\n  }\n  else {\n   \
    \ const [maxNegativeIntegers, minPositiveIntegers] = positiveIntegers.map(n =>\
    \ [Math.abs(n), n]);\n    const [maxPositiveIntegers, minNegativeIntegers] = negativeIntegers.map(n\
    \ => [Math.abs(n), -Math.abs(n)])\n    \n    return [maxNegativeIntegers, maxPositiveIntegers,\
    \ minNegativeIntegers, minPositiveIntegers];\n  }\n}\n", "  let nMin = 0;\n  let\
    \ nMax = 0;\n  for (let i = 0; i < lst.length; i++){\n    nMin = Math.min(nMin,\
    \ lst[i]);\n    nMax = Math.max(nMax, lst[i]);\n  }\n  if (nMin === 0){\n    return\
    \ [undefined, undefined];\n  } else if (nMax === 0){\n    return [undefined, 1];\n\
    \  } else {\n    return [nMin, nMax];\n  }\n}\n", "    let maxNum = Number.MIN_VALUE;\n\
    \    let minNum = Number.MAX_VALUE;\n    let smallestIndex = undefined;\n    let\
    \ largestIndex = undefined;\n\n    for (let i = 0; i< lst.length; i++){\n    \
    \    if(lst[i] > maxNum){\n            maxNum = lst[i];\n            smallestIndex\
    \ = i;\n        }\n        else if(lst[i] < minNum){\n            minNum = lst[i];\n\
    \            largestIndex = i;\n        }\n    }\n\n    if(smallestIndex === undefined){\n\
    \        smallestIndex = undefined;\n    }\n    if(largestIndex === undefined){\n\
    \        largestIndex = undefined;\n    }\n\n    return [largestIndex, smallestIndex];\n\
    }\n", "    var arr = [];\n    for (var i in lst){\n        arr.push(lst[i]);\n\
    \    }\n    arr.sort();\n    if (arr[0] < 0 || arr[0] > 0 && arr[1] > 0 || arr[1]\
    \ < 0){\n        return undefined\n    }else{\n        return arr\n    }\n}\n",
  "  var max_num = Number.MIN_VALUE;\n  var min_num = Number.MAX_VALUE;\n  for (var\
    \ i = 0, len = lst.length; i < len; i++) {\n    var num = lst[i];\n    if (num\
    \ < min_num) {\n      min_num = num;\n    }\n    if (num > max_num) {\n      max_num\
    \ = num;\n    }\n  }\n  return [min_num, max_num];\n}\n", "\tvar smallest = Infinity,\
    \ largest = -Infinity;\n\tvar len = lst.length;\n\tvar smallest_i = undefined;\n\
    \tvar smallest_j = undefined;\n\tvar largest_i = undefined;\n\tvar largest_j =\
    \ undefined;\n\tfor(var i=0; i<len; i++){\n\t\tvar n = lst[i];\n\t\tif(n < smallest){\n\
    \t\t\tsmallest = n;\n\t\t\tsmallest_i = i;\n\t\t}\n\t\tif(n > largest){\n\t\t\t\
    largest = n;\n\t\t\tlargest_i = i;\n\t\t}\n\t}\n\tif(smallest_i && largest_i){\n\
    \t\tsmallest = lst[smallest_i];\n\t\tlargest_i = lst[largest_i];\n\t}\n\treturn\
    \ [smallest, largest_i];\n}\n\n", "  var out = [];\n  var max = 0;\n  var min\
    \ = Infinity;\n  for(var i = 0; i < lst.length; i++){\n    var num = +lst[i];\n\
    \    if(num < 0){\n      num = -num;\n      if(num < min){\n        min = num;\n\
    \      }\n    }else{\n      if(num > max){\n        max = num;\n      }\n    }\n\
    \  }\n  out.push(min);\n  out.push(max);\n  return out;\n}\n", "  for(var i=0;i<lst.length;i++){\n\
    \    if(lst[i]<0){\n      return undefined;\n    }\n  }\n  return lst.sort((a,b)=>a-b);\n\
    }\n", "  var min = Math.min.apply(null, lst);\n  var max = Math.max.apply(null,\
    \ lst);\n  return lst.map(function(x){return x < min ? x : x > max ? x : undefined;});\n\
    }\n\n", "\tvar lst = lst || [];\n\n\tif(lst.indexOf(0)!==-1) \n\t\treturn [undefined,\
    \ 0];\n\tif(lst.indexOf(Infinity)!==-1) \n\t\treturn [Infinity, Infinity];\n\n\
    \tlst.sort(function(a, b){\n\t\treturn b-a;\n\t});\n\n\tvar smallest = lst[0];\n\
    \tvar largest = lst[lst.length-1];\n\n\tif(smallest===largest) \n\t\treturn [smallest,\
    \ largest];\n\n\tfor(var i=1;i<lst.length;i++){\n\t\tif(lst[i]<smallest){\n\t\t\
    \tsmallest = lst[i];\n\t\t}\n\t\telse if(smallest>lst[i]){\n\t\t\tlargest = lst[i];\n\
    \t\t}\n\t}\n\t\n\treturn [smallest, largest];\n}\n", "  if(lst.length < 2) return\
    \ [lst[0], undefined];\n  let a = -Infinity, l = -1, b = 0;\n  for(const item\
    \ of lst){\n    if(item < a){\n      l = -2;\n      a = item;\n    }else if(item\
    \ > b){\n      b = item;\n    }\n  }\n  return [a, b];\n}", "  var max_neg = -1;\
    \ // Initialize largest to smallest integers.\n  var min_pos = 1;\n  \n  for(var\
    \ i = lst.length - 1; i >= 0; --i){\n    if(lst[i] < 0){\n      if(max_neg < 0){\n\
    \        max_neg = lst[i];\n      }\n    }\n    else if(lst[i] > 0){\n      if(min_pos\
    \ > lst[i]){\n        min_pos = lst[i];\n      }\n    }\n  }\n  \n  return [max_neg,\
    \ min_pos];\n}\n\nvar test_largest_smallest_integers = function(){\n  assertEquals(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]), [undefined, 1]);\n  assertEquals(largest_smallest_integers([]),\
    \ [undefined, undefined]);\n  assertEquals(largest_smallest_integers([0]), [undefined,\
    \ undefined]);\n};", "    var max = -Infinity;\n    var min = Infinity;\n\n  \
    \  for(var i = 0; i < lst.length; i++){\n        if(lst[i] > max)\n          \
    \  max = lst[i];\n        if(lst[i] < min)\n            min = lst[i];\n    }\n\
    \    return [min, max];\n}\n", "  let negatives = [];\n  let positives = [];\n\
    \  let max = Number.MIN_SAFE_INTEGER;\n  let min = Number.MAX_SAFE_INTEGER;\n\
    \  for (let i = 0; i < lst.length; i++){\n    if (lst[i] < 0){\n      negatives.push(lst[i]);\n\
    \    }else{\n      positives.push(lst[i]);\n    }\n  }\n  for (let i = 0; i <\
    \ negatives.length; i++){\n    max = Math.max(max, negatives[i]);\n  }\n  for\
    \ (let i = 0; i < positives.length; i++){\n    min = Math.min(min, positives[i]);\n\
    \  }\n  return [max, min];\n}\n", "    var largest = Number.NEGATIVE_INFINITY;\n\
    \    var smallest = Number.POSITIVE_INFINITY;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] > largest) largest = lst[i];\n        if(lst[i] < smallest)\
    \ smallest = lst[i];\n    }\n    return [largest, smallest];\n}\n</code>\nAnd\
    \ here is the output I get:\n\nEDIT:\nI added a solution that uses reduce(), which\
    \ gives you a very simple and flexible solution that does exactly what you want.\n\
    <|/ a |>\n<| c |>\nIt's interesting that your solution doesn't seem to work for\
    \ negative numbers. For example: `largest_smallest_integers([-2])` returns `[undefined,\
    \ -2]`.\n<|/ c |>\n<| c |>\nThat is true, I forgot about negative numbers. I fixed\
    \ it now. Check out my updated answer.\n<|/ c |>\n<| c |>\nGreat solution! The\
    \ one thing I changed was `largest_smallest_integers([1, 2, 3, 4, 5])` to `largest_smallest_integers([1,\
    \ 2, 3, 4, 5], 'desc')` to get `[5, 2, 1]`. Otherwise it seems to work just fine.\n\
    <|/ c |>\n<| c |>\nI changed it so it works with any collection. Check it out\
    \ here: https://gist.github.com/jonathanpcarri/f5030566f59ed949cf00\n<|/ c |>\n\
    <| c |>\n: You might want to fix your code.  Your `smallest` is calculated from\
    \ the `largest` rather than from the `min`.\n<|/ c |>\n<| a dscore=4 |>\nHere's\
    \ a solution using JavaScript's Array.prototype.filter():\n<code>", "  var largest\
    \ = Infinity;\n  var smallest = -1;\n  for (var i = 0; i < lst.length; i++){\n\
    \    var num = lst[i];\n    if(num < smallest || (smallest === -1 && num < largest)){\n\
    \      smallest = num;\n    }\n    if(num > largest || (largest === Infinity &&\
    \ num < largest)){\n      largest = num;\n    }\n  }\n  return [smallest, largest];\n\
    }\n", "  if(lst === null || lst === undefined) return [undefined, undefined];\n\
    \  if(lst.length < 2) return [lst[0], lst[1]];\n  if(lst.length % 2 === 0) return\
    \ [lst[0], lst[lst.length - 1]];\n  var max = lst[0],\n      min = lst[1];\n \
    \ for(var i = 2; i < lst.length; i += 2){\n    if(lst[i] > max){\n      max =\
    \ lst[i];\n    }else if(lst[i] < min){\n      min = lst[i];\n    }\n  }\n  return\
    \ [max, min];\n}\n", "    var max_value = lst[0], min_value = lst[1];\n    for(var\
    \ i = 2; i < lst.length; i++){\n        if(lst[i] < max_value){\n            max_value\
    \ = lst[i];\n        }\n        if(lst[i] > min_value){\n            min_value\
    \ = lst[i];\n        }\n    }\n    return [max_value, min_value];\n}\n", "  let\
    \ n = lst.length\n  if(n < 1 || n == 0){\n    return [undefined, undefined]\n\
    \  }\n  let max = 0\n  let min = 0\n  let max_index = 0\n  let min_index = 0\n\
    \  let minV = 0\n  let maxV = 0\n  let minI = 0\n  let maxI = 0\n  let i = 1\n\
    \  while(i < n){\n    if(lst[i] < minV){\n      minV = lst[i]\n      minI = i\n\
    \    }\n    else if(lst[i] > maxV){\n      maxV = lst[i]\n      maxI = i\n   \
    \ }\n    else if(lst[i] == minV && i < n){\n      if(lst[i] < maxV){\n       \
    \ minV = lst[i]\n        minI = i\n      }\n      else{\n        maxV = lst[i]\n\
    \        maxI = i\n      }\n    }\n    i++\n  }\n  return [minV, maxV]\n}\n",
  "    if (lst.includes(-Infinity)) {\n        return [-Infinity, Infinity];\n   \
    \ }\n\n    if (lst.includes(Infinity)) {\n        return [Infinity, -Infinity];\n\
    \    }\n\n    return lst.reduce(function(a, b){\n        if (a > b || a === -Infinity){\n\
    \            return a;\n        }\n\n        if (b > a || b === Infinity){\n \
    \           return b;\n        }\n\n        return (a<b)?a:b;\n    });\n}\n",
  "  var a = Math.max.apply(null, lst);\n  var b = Math.min.apply(null, lst);\n  return\
    \ [a, b];\n}\n", "  var smallest = 0;\n  var largest = 0;\n  for (var i = 0; i\
    \ < lst.length; i++){\n    if (lst[i] > largest || largest == 0){\n      largest\
    \ = lst[i];\n    }\n    if (lst[i] < smallest || smallest == 0){\n      smallest\
    \ = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n\n", "  var min = Number.POSITIVE_INFINITY,\n\
    \      max = Number.NEGATIVE_INFINITY,\n      l = lst.length,\n      smallest,\
    \ i;\n\n  if (l === 0) { return [undefined, undefined]; }\n  for (i = 0; i < l;\
    \ ++i) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i]\
    \ > max) {\n      max = lst[i];\n    }\n  }\n\n  return [max, min];\n}\n", " \
    \   let max = 0;\n    let min = 0;\n\n    for(let i = 0; i < lst.length; i++){\n\
    \        max = Math.max(max, lst[i]);\n        min = Math.min(min, lst[i]);\n\
    \    }\n\n    return [max < 0 ? max : undefined, min > 0 ? min : undefined];\n\
    }\n", "  if (lst.length<1) return [];\n  var lst_array = [], min = -Infinity;\n\
    \  for (var i = 0; i < lst.length; i++){\n      if (lst[i] > min){\n         \
    \ min = lst[i];\n          lst_array.push(min);\n      }\n  }\n  return lst_array;\n\
    }\n", "  if(lst.length == 0) return [undefined, undefined];\n  if(lst.length ==\
    \ 1) return [lst[0], lst[0]];\n  var smallest = lst[0];\n  var largest = lst[0];\n\
    \  for(var i = 1; i < lst.length; i++){\n    if(lst[i] < smallest) smallest =\
    \ lst[i];\n    if(lst[i] > largest) largest = lst[i];\n  }\n  return [smallest,\
    \ largest];\n}", "\tconst smallest_integer = Math.min(...lst);\n\tconst largest_integer\
    \ = Math.max(...lst);\n\tif (smallest_integer === undefined) {\n\t\treturn [undefined,\
    \ undefined];\n\t}\n\treturn [smallest_integer, largest_integer];\n}\n", "  var\
    \ positive_count = lst.length;\n  var negative_count = 0;\n  for(var i = 0; i\
    \ < lst.length; i++){\n    if(lst[i] > 0){\n      positive_count++;\n    } else\
    \ if(lst[i] < 0){\n      negative_count++;\n    } else {\n      break;\n    }\n\
    \  }\n  return [\n    positive_count,\n    negative_count,\n    undefined,\n \
    \   lst[positive_count - negative_count]\n  ];\n}\n", "  var largest = Number.POSITIVE_INFINITY;\n\
    \  var smallest = Number.NEGATIVE_INFINITY;\n  for(var i=0; i<lst.length; i++){\n\
    \    if(lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if(lst[i] >\
    \ largest){\n      largest = lst[i];\n    }\n  }\n  if(!smallest){\n    smallest\
    \ = 0;\n  }\n  if(!largest){\n    largest = 0;\n  }\n  return [largest, smallest];\n\
    }", "\tvar biggest = -Infinity, smallest = Infinity;\n\tfor(var i=0; i < lst.length;\
    \ i++){\n\t\tif(lst[i] < smallest){\n\t\t\tsmallest = lst[i];\n\t\t}\n\t\tif(lst[i]\
    \ > biggest){\n\t\t\tbiggest = lst[i];\n\t\t}\n\t}\n\treturn [biggest, smallest];\n\
    }", "  if(lst.length < 2)\n    return [undefined, undefined];\n  var i, largest\
    \ = 0, smallest = lst[0], temp;\n  for(i = 0; i < lst.length; i++){\n    temp\
    \ = smallest > lst[i] ? smallest : lst[i];\n    smallest = temp > largest ? temp\
    \ : largest;\n    largest = temp;\n  }\n  return [largest, smallest];\n}\n", " \
    \   var i, smallest, largest_number;\n    for(i=0; i<lst.length; i++){\n     \
    \   smallest = lst[i];\n        largest_number = undefined;\n        for(j=0;\
    \ j<lst.length; j++){\n            if(j!=i){\n                if(smallest > lst[j]){\n\
    \                    smallest = lst[j];\n                    largest_number =\
    \ undefined;\n                }else if(smallest == lst[j]){\n                \
    \    largest_number = smallest;\n                }\n            }\n        }\n\
    \        if(largest_number){\n            return [i, largest_number];\n      \
    \  }\n    }\n    return [undefined, undefined];\n}\n", "    if(!lst.length) return\
    \ [undefined, undefined];\n    const min = Math.min(...lst);\n    const max =\
    \ Math.max(...lst);\n    const avg = lst.reduce((a,b) => a + b, 0) / lst.length;\n\
    \    const p0 = Math.max(min, avg);\n    const p1 = Math.min(max, avg);\n    return\
    \ [p0, p1];\n}\n", "\tlet max_int = -Infinity;\n\tlet min_int = Infinity;\n\t\
    for(let i = 0; i < lst.length; i++){\n\t\tconst num = lst[i];\n\t\tif(num < min_int){\n\
    \t\t\tmin_int = num;\n\t\t}\n\t\tif(num > max_int){\n\t\t\tmax_int = num;\n\t\t\
    }\n\t}\n\treturn [max_int, min_int];\n}\n", "  if(lst.length == 0)\n    return\
    \ [undefined, undefined];\n  var min_ = lst[0];\n  var max_ = lst[0];\n  for(var\
    \ i = 1; i < lst.length; i++){\n    if(lst[i] < min_)\n      min_ = lst[i];\n\
    \    if(lst[i] > max_)\n      max_ = lst[i];\n  }\n  return [min_, max_];\n}\n",
  "  var largest = Number.MAX_VALUE;\n  var smallest = Number.MAX_VALUE;\n  for(var\
    \ i = 0; i < lst.length; i++){\n    if(lst[i] > largest){\n      largest = lst[i];\n\
    \    }\n    if(lst[i] < smallest){\n      smallest = lst[i];\n    }\n  }\n  return\
    \ [smallest, largest];\n}\n", "  var min = lst[0], max = lst[0];\n  for (var i\
    \ = 0; i < lst.length; i++){\n    if (lst[i] < min) min = lst[i];\n    if (lst[i]\
    \ > max) max = lst[i];\n  }\n  return [max, min];\n}\n", "  var result = []\n\
    \  var min = -Infinity\n  var max = Infinity\n  var maxi = -1\n  var mini = -1\n\
    \n  var i = 0\n  var len = lst.length\n\n  while (i < len) {\n    var j = i\n\
    \    var v = lst[i]\n\n    while (j < len) {\n      if (v > max) {\n        max\
    \ = v\n        maxi = j\n      } else if (v < min) {\n        min = v\n      \
    \  mini = j\n      }\n      j++\n    }\n    if (maxi == -1) {\n      result.push(undefined)\n\
    \    } else {\n      result.push([lst[maxi], lst[mini]])\n    }\n    ++i\n  }\n\
    \n  return result\n}\n", "\tvar largest;\n\tvar smallest;\n\t\n\tfor(var i = 0;\
    \ i < lst.length; i++){\n\t\tif((largest === undefined) || (lst[i] > largest)){\n\
    \t\t\tlargest = lst[i];\n\t\t}\n\t\tif((smallest === undefined) || (lst[i] < smallest)){\n\
    \t\t\tsmallest = lst[i];\n\t\t}\n\t}\n\t\n\treturn [smallest, largest];\n}\n",
  "  var largest = Number.NEGATIVE_INFINITY\n    , smallest = Number.POSITIVE_INFINITY;\n\
    \n  for (var i = 0; i < lst.length; i++){\n    var n = lst[i]\n    if (n < smallest){\n\
    \      smallest = n\n    } else if (n > largest){\n      largest = n\n    }\n\
    \  }\n  return [largest, smallest]\n}\n", "    var sorted_arr = lst.sort(function(a,\
    \ b){return a-b});\n    var smallest = sorted_arr[0];\n    var largest = sorted_arr[0];\n\
    \    for(var i = 1; i < sorted_arr.length; i++){\n        if(sorted_arr[i] < smallest){\n\
    \            smallest = sorted_arr[i];\n        }\n        if(sorted_arr[i] >\
    \ largest){\n            largest = sorted_arr[i];\n        }\n    }\n    return\
    \ [largest, smallest];\n}\nexports.largest_smallest_integers = largest_smallest_integers;\n\
    \n},{}],24:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports,\
    \ \"__esModule\", {\n    value: true\n});\nexports.reviver = undefined;\n\nvar\
    \ _xpath = _dereq_('xquery/xpath.js');\n\nvar _xpath2 = _interopRequireDefault(_xpath);\n\
    \nvar _jsxWrapper = _dereq_('xquery/jsx-wrapper.js');\n\nvar _jsxWrapper2 = _interopRequireDefault(_jsxWrapper);\n\
    \nvar _underscoreFunctions = _dereq_('./underscore-functions.js');\n", "  var\
    \ negative = [],\n      positive = [],\n      i,\n      max = -Infinity,\n   \
    \   min = -Infinity;\n  for (i = 0; i < lst.length; i++){\n    if (lst[i] < 0){\n\
    \      negative.push(lst[i]);\n    } else {\n      positive.push(lst[i]);\n  \
    \  }\n    if (max < lst[i]){\n      max = lst[i];\n    }\n    if (min > lst[i]){\n\
    \      min = lst[i];\n    }\n  }\n  return [max, min];\n}", "  var largest = undefined;\n\
    \  var smallest = undefined;\n  for(var x = 0; x < lst.length; ++x){\n    var\
    \ val = lst[x];\n    if(val > largest){\n      largest = val;\n    }\n    if(val\
    \ < smallest){\n      smallest = val;\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  var min = lst[0], max = lst[0];\n  for(var i = 1; i < lst.length; i++){\n\
    \    if(lst[i] < min){\n      min = lst[i];\n    }\n    if(lst[i] > max){\n  \
    \    max = lst[i];\n    }\n  }\n  return [max,min];\n}\n", "    var min_number\
    \ = Math.pow(10, Math.floor(Math.log10(lst.length)));\n    var max_number = -min_number;\n\
    \    var result = [];\n    var i;\n    for(i = 0; i< lst.length; i++){\n     \
    \   if((lst[i] >= min_number) && (lst[i] <= max_number)){\n            result.push(lst[i]);\n\
    \        }\n    }\n    if(result[0]===undefined){\n        result[0] = undefined;\n\
    \    }\n    if(result[1]===undefined){\n        result[1] = undefined;\n    }\n\
    \    return result;\n}\n", "\tvar res = [];\n\tvar largest = -Infinity;\n\tvar\
    \ smallest = Infinity;\n\tvar i;\n\n\tfor (i=0; i<lst.length; i++){\n\t\tif (lst[i]\
    \ >= smallest){\n\t\t\tif (lst[i] >= largest){\n\t\t\t\tlargest = lst[i];\n\t\t\
    \t} else {\n\t\t\t\tres.push(largest);\n\t\t\t\tlargest = lst[i];\n\t\t\t}\n\t\
    \t} else {\n\t\t\tif (lst[i] > largest){\n\t\t\t\tres.push(smallest);\n\t\t\t\t\
    smallest = lst[i];\n\t\t\t}\n\t\t}\n\t}\n\tif (largest > smallest){\n\t\tres.push(largest);\n\
    \t}\n\treturn res;\n}\n", "  var lst = lst.map(Number);\n  if(lst.length == 0){\n\
    \    return [undefined, undefined];\n  }\n  var min = lst[0];\n  var max = lst[0];\n\
    \  for(var i = 1; i < lst.length; i++){\n    if(lst[i] > max){\n      max = lst[i];\n\
    \    }\n    if(lst[i] < min){\n      min = lst[i];\n    }\n  }\n  return [max,\
    \ min];\n}\n", "    if (lst.length < 2) {\n        return undefined;\n    }\n\
    \    var max_val = lst[0];\n    var min_val = lst[1];\n    for (var i = 2; i <\
    \ lst.length; ++i) {\n        var val = lst[i];\n        if (val > max_val) {\n\
    \            max_val = val;\n        }\n        else if (val < min_val) {\n  \
    \          min_val = val;\n        }\n    }\n    return [max_val, min_val];\n\
    }\n", "  if(lst.some(isNaN)) return [undefined, undefined];\n  var positive =\
    \ [];\n  var negative = [];\n  var nums = [];\n  for(let i = 0; i < lst.length;\
    \ i++){\n    nums.push(lst[i]);\n    if(lst[i] < 0) negative.push(nums[nums.length\
    \ - 1])\n    else positive.push(nums[nums.length - 1])\n  }\n  if(negative.length\
    \ > 0 && positive.length > 0) return [negative[negative.length - 1], positive[positive.length\
    \ - 1]];\n  if(negative.length > 0) return [negative[negative.length - 1]];\n\
    \  if(positive.length > 0) return [positive[positive.length - 1]];\n  if(negative.length\
    \ > 0 && positive.length > 0) return [negative[negative.length - 1], positive[positive.length\
    \ - 1]];\n  return [undefined, undefined];\n}\n", "  var largest = Number.MIN_VALUE,\n\
    \      smallest = Number.MAX_VALUE,\n      i;\n\n  for(i = 0; i < lst.length;\
    \ i++){\n    if(lst[i] > largest){\n      largest = lst[i];\n    }\n    if(lst[i]\
    \ < smallest){\n      smallest = lst[i];\n    }\n  }\n\n  return [largest, smallest];\n\
    }\n", "    var largest = undefined;\n    var smallest = undefined;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if (largest === undefined){\n        \
    \    largest = lst[i];\n            smallest = lst[i];\n        }\n        if\
    \ (largest < lst[i]){\n            largest = lst[i];\n        }\n        if (smallest\
    \ > lst[i]){\n            smallest = lst[i];\n        }\n    }\n    return [largest,\
    \ smallest];\n}\n", "  var max = 0;\n  var min = 0;\n  \n  // Iterate over the\
    \ array\n  lst.forEach(function(num){\n    // Check if current number is positive\
    \ or negative (positive number\n    // is greater than negative number)\n    if\
    \ (num < 0){\n      min = num;\n    }\n    else if (num > 0){\n      max = num;\n\
    \    }\n  });\n  \n  // Return array with both min and max\n  return [min, max];\n\
    }\n", "    if(lst.length === 0) return [undefined, undefined];\n    else if(lst.length\
    \ === 1) return [lst[0], undefined];\n    else{\n        let max_num = lst[0];\n\
    \        let min_num = lst[0];\n        for(let i = 1; i < lst.length; i++){\n\
    \            if(lst[i] < min_num){\n                min_num = lst[i];\n      \
    \      }\n            else if(lst[i] > max_num){\n                max_num = lst[i];\n\
    \            }\n        }\n        return [max_num, min_num];\n    }\n}\n", " \
    \   var result = undefined;\n    var largest = undefined;\n    var smallest =\
    \ undefined;\n\n    if(lst.length == 0){\n        return [undefined, undefined];\n\
    \    }\n\n    for(var i = 0; i < lst.length; i++){\n        if(!isFinite(lst[i])){\n\
    \            continue;\n        }\n\n        if(largest === undefined){\n    \
    \        largest = lst[i];\n            smallest = lst[i];\n            continue;\n\
    \        }\n\n        if(lst[i] > largest){\n            largest = lst[i];\n \
    \       }\n        else if(lst[i] < smallest){\n            smallest = lst[i];\n\
    \        }\n    }\n\n    return [largest, smallest];\n}\n", "\tvar i, max = -Infinity,\
    \ min = Infinity;\n\tfor (i = 0; i < lst.length; i++){\n\t\tif( lst[i] < max ){\n\
    \t\t\tmax = lst[i];\n\t\t}\n\t\tif( lst[i] > min ){\n\t\t\tmin = lst[i];\n\t\t\
    }\n\t}\n\treturn [max, min];\n}\n", "  if(lst.length === 0) return [undefined,\
    \ undefined];\n  var min_val = lst[0];\n  var max_val = lst[0];\n  var min_pos\
    \ = 0;\n  var max_pos = 0;\n  var min_neg = 0;\n  var max_neg = 0;\n  for(var\
    \ i=0 ; i < lst.length; i++){\n    if(lst[i] > max_val){\n      max_val = lst[i];\n\
    \      max_pos = i;\n    }\n    else if(lst[i] < min_val){\n      min_val = lst[i];\n\
    \      min_neg = i;\n    }\n    if(lst[i] > max_val){\n      max_val = lst[i];\n\
    \      max_neg = i;\n    }\n  }\n  return [max_neg ? lst[max_neg] : undefined,\
    \ min_pos ? lst[min_pos] : undefined, max_pos ? lst[max_pos] : undefined];\n}\n",
  "  // var negatives = []\n  // var positives = []\n  // for(var i = 0; i < lst.length;\
    \ i++){\n  //   if (lst[i] < 0){\n  //     negatives.push(lst[i])\n  //   } else\
    \ {\n  //     positives.push(lst[i])\n  //   }\n  // }\n  // console.log(negatives,\
    \ positives)\n  // return negatives.indexOf(Math.max.apply(Math, negatives)) >=\
    \ 0 ? negatives : positives\n}\n", "    var a = [], b = [], n = lst.length;\n\
    \    for(var i = 0; i < n; i++){\n        var x = lst[i];\n        if(x < 0){\n\
    \            a.push(x);\n        }\n        else{\n            b.push(x);\n  \
    \      }\n    }\n    if(a.length === 0){\n        return [undefined, undefined];\n\
    \    }\n    if(a.length > b.length){\n        return a;\n    }\n    else if(a.length\
    \ > 0){\n        return b;\n    }\n    return [a, b];\n}\n\n", "  var max_neg\
    \ = -1*Infinity;\n  var min_pos = Infinity;\n  for(var i in lst){\n    var pos\
    \ = lst[i];\n    if(pos <= min_pos){\n      min_pos = pos;\n    }\n    if(pos\
    \ > max_neg){\n      max_neg = pos;\n    }\n  }\n  if(min_pos > max_neg){\n  \
    \  return [min_pos, max_neg];\n  } else {\n    return [undefined, undefined];\n\
    \  }\n}\n</code>\n<|/ a dscore=4 tags=sorting,arrays,javascript |>\n<| c |>\n\
    Nice one.  Very concise, and does a whole lot better than my answer.  I was just\
    \ typing one up myself!  :)\n<|/ c |>\n<| c |>\nThanks for your answer! I modified\
    \ it a bit, so that if a function returns an empty array ([]), it returns \"undefined\"\
    \ instead. Like so: \n", "  var max = Number.MIN_VALUE;\n  var min = Number.MAX_VALUE;\n\
    \  var i;\n\n  for(i = 0; i < lst.length; i++){\n    if(lst[i] > max){\n     \
    \ max = lst[i];\n    }\n\n    if(lst[i] < min){\n      min = lst[i];\n    }\n\
    \  }\n\n  return [max, min];\n}\n", "    var smallest = Number.POSITIVE_INFINITY;\n\
    \    var largest = Number.NEGATIVE_INFINITY;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < smallest){\n            smallest = lst[i];\n    \
    \    }\n        if(lst[i] > largest){\n            largest = lst[i];\n       \
    \ }\n    }\n    return [smallest, largest];\n}\n", "    if (lst.length === 0)\
    \ {\n        return [undefined, undefined];\n    }\n    if (lst.length === 1)\
    \ {\n        return [lst[0], undefined];\n    }\n    if (lst.length > 1 && is_sorted(lst))\
    \ {\n        var smallest;\n        var largest;\n        var smallest_found =\
    \ false;\n        var largest_found = false;\n        var middle = lst.length\
    \ / 2;\n        var left = [];\n        var right = [];\n        var left_found\
    \ = right_found = false;\n\n        while (true) {\n            if (!smallest_found){\n\
    \                smallest = lst[middle];\n                smallest_found = true;\n\
    \            } else {\n                if (smallest > lst[middle]){\n        \
    \            smallest = lst[middle];\n                    smallest_found = true;\n\
    \                }\n            }\n            if (!largest_found){\n        \
    \        largest = smallest;\n                largest_found = true;\n        \
    \    } else {\n                if (largest < smallest){\n                    largest\
    \ = smallest;\n                    largest_found = true;\n                }\n\
    \            }\n            if (left === lst){\n                return [smallest,\
    \ largest];\n            } else if (right === lst){\n                return [largest,\
    \ smallest];\n            }\n            middle = Math.floor(middle);\n      \
    \      left_found = right_found = false;\n            if (middle === 0){\n   \
    \             if (left === lst) {\n                    return [smallest, largest];\n\
    \                }\n                else if (right === lst) {\n              \
    \      return [largest, smallest];\n                }\n                else {\n\
    \                    left = [];\n                    right = [];\n           \
    \         left_found = right_found = false;\n                }\n            }\
    \ else if (middle === lst.length -1) {\n                if (left === lst) {\n\
    \                    return [smallest, largest];\n                }\n        \
    \        else if (right === lst) {\n                    return [largest, smallest];\n\
    \                }\n                else {\n                    left = [];\n \
    \                   right = [];\n                    left_found = right_found\
    \ = false;\n                }\n            } else {\n                if (left\
    \ === lst) {\n                    left.push(lst[middle - 1]);\n              \
    \      left_found = true;\n                } else if (right === lst) {\n     \
    \               right.push(lst[middle - 1]);\n                    right_found\
    \ = true;\n                }\n            }\n        }\n    }\n    return [undefined,\
    \ undefined];\n}\n", "  if(!lst.length) return [undefined, undefined];\n  var\
    \ max = lst[0];\n  var min = lst[0];\n  var l = lst.length;\n  for(var i = 1;\
    \ i < l; i++){\n    if(max < lst[i]) max = lst[i];\n    if(min > lst[i]) min =\
    \ lst[i];\n  }\n  return [max, min];\n}\n", "  var positive = [];\n  var negative\
    \ = [];\n  for(var i = 0; i < lst.length; i++){\n    var num = lst[i];\n    if\
    \ (num < 0){\n      negative.push(num);\n    }\n    else {\n      positive.push(num);\n\
    \    }\n  }\n  if (positive.length > 0 && negative.length > 0){\n    return [Math.max.apply(null,\
    \ negative), Math.min.apply(null, positive)];\n  }\n  else if (positive.length\
    \ > 0){\n    return Math.min.apply(null, positive);\n  }\n  else if (negative.length\
    \ > 0){\n    return Math.max.apply(null, negative);\n  }\n  else {\n    return\
    \ [undefined, undefined];\n  }\n}\n", "    var max = lst[0], min = lst[0];\n \
    \   for(var i = 1; i < lst.length; i++){\n        if(lst[i] < min) min = lst[i];\n\
    \        if(lst[i] > max) max = lst[i];\n    }\n    return [max, min];\n}\n",
  "    var max_num = -Infinity;\n    var min_num = Infinity;\n    var num;\n    for(var\
    \ i=0;i<lst.length;i++){\n        num = lst[i];\n        if(max_num < num){\n\
    \            max_num = num;\n        }\n        if(min_num > num){\n         \
    \   min_num = num;\n        }\n    }\n    return [max_num, min_num];\n}\n", " \
    \ let largest_values = [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]\n  let\
    \ smallest_values = [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]\n\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest_values[0]){\n \
    \     largest_values = [lst[i], lst[i]]\n    } else if (lst[i] < smallest_values[1]){\n\
    \      smallest_values = [lst[i], lst[i]]\n    } else {\n      smallest_values\
    \ = [lst[i], lst[i]]\n    }\n  }\n  return [largest_values[0], smallest_values[1]]\n\
    }\n", "  var largest_negative = Number.MIN_VALUE,\n      smallest_positive = Number.MAX_VALUE;\n\
    \  \n  if (lst.length === 0) {\n    return [undefined, undefined];\n  }\n  \n\
    \  for (var i = 0; i < lst.length; i++) {\n    var val = Math.abs(lst[i]);\n \
    \   if (val > largest_negative) {\n      largest_negative = val;\n    }\n    if\
    \ (val < smallest_positive) {\n      smallest_positive = val;\n    }\n  }\n  \n\
    \  return [largest_negative, smallest_positive];\n}\n", "  var arr = [];\n  var\
    \ largest = undefined;\n  var smallest = undefined;\n\n  for(var i = 0; i < lst.length;\
    \ i++){\n    if(!isIntegerType(lst[i]) && (largest === undefined)){\n      largest\
    \ = lst[i];\n    }\n    else if(!isIntegerType(lst[i]) && (smallest === undefined)){\n\
    \      smallest = lst[i];\n    }\n    else{\n      if(largest < lst[i]){\n   \
    \     largest = lst[i];\n      }\n      else if(smallest > lst[i]){\n        smallest\
    \ = lst[i];\n      }\n    }\n  }\n\n  return [smallest, largest];\n}\n", "   \
    \ if(!lst.length) return [undefined, undefined];\n    let min = -Infinity;\n \
    \   let max = Infinity;\n    lst.forEach((x) => {\n        if(x < min) min = x;\n\
    \        if(x > max) max = x;\n    });\n    return [max, min];\n}\n", "  var max_int;\n\
    \  var min_int;\n  var max_values = [];\n  var min_values = [];\n  for(var i=0;i<lst.length;i++){\n\
    \    if(is_negative_integer(lst[i])){\n      if(max_int<lst[i]) max_int = lst[i];\n\
    \      if(min_int>lst[i]) min_int = lst[i];\n      if(max_values.length>0) max_values.push(lst[i]);\n\
    \      if(min_values.length>0) min_values.push(lst[i]);\n    }else{\n      if(max_int>lst[i])\
    \ max_int = lst[i];\n      if(min_int<lst[i]) min_int = lst[i];\n      if(max_values.length>0)\
    \ max_values.push(lst[i]);\n      if(min_values.length>0) min_values.push(lst[i]);\n\
    \    }\n  }\n  if(max_int<min_int){\n    return [max_int, min_int];\n  }else{\n\
    \    if(max_values.length>0){\n      return [max_int, min_int, max_values];\n\
    \    }else{\n      return [max_int, min_int];\n    }\n  }\n}\n", "\tvar smallest;\n\
    \tvar largest;\n\n\tvar array = [];\n\t\n\tfor(var i in lst){\n\t\tarray.push(lst[i]);\n\
    \t}\n\t\n\t// Find max and min\n\tsmallest = Math.min.apply(Math, array);\n\t\
    largest = Math.max.apply(Math, array);\n\n\tif(smallest == largest){\n\t\treturn\
    \ [undefined, undefined];\n\t}\n\telse if(smallest > largest){\n\t\treturn [smallest,\
    \ largest];\n\t}\n\telse{\n\t\treturn [largest, smallest];\n\t}\n}\n", "  let\
    \ largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n\
    \  let results = [];\n  for (let value of lst) {\n    let i = Number(value);\n\
    \    if (i < smallest && i > largest) {\n      smallest = i;\n      results =\
    \ [value];\n    } else if (i > largest) {\n      largest = i;\n      results =\
    \ [value];\n    } else {\n      results.push(value);\n    }\n  }\n  return results;\n\
    }\n", "  if(lst.length == 0) return [undefined, undefined]\n  var max = -Infinity\n\
    \  var min = Infinity\n  for(var i = 0; i < lst.length; i++){\n    var num = lst[i]\n\
    \    if(num < min){ min = num }\n    if(num > max){ max = num }\n  }\n  return\
    \ [min, max]\n}\n", "  if (lst.length < 1) return [undefined, undefined];\n  let\
    \ [min, max] = lst.reduce(([min, max], [_, i]) => {\n    return [\n      i > max\
    \ ? i : max,\n      i < min ? i : min\n    ]\n  }, [Infinity, -Infinity]);\n \
    \ return [min, max];\n}\n", "  var ret = [];\n  var max = -Infinity;\n  var min\
    \ = [Infinity, max];\n  var num;\n  for(var i = 0; i < lst.length; i++){\n   \
    \ num = lst[i];\n    if (num < min[0]){\n      min[0] = num;\n    }\n    if (num\
    \ > max){\n      max  = num;\n    }\n  }\n  if (min[0] === min[1]){\n    ret =\
    \ [undefined, undefined];\n  }\n  else{\n    ret = [min[0], min[1]];\n  }\n  return\
    \ ret;\n}\n\n", "    var arr = [];\n    for(var i = 0; i < lst.length; i++){\n\
    \        var val = lst[i];\n        if (val >= 0){\n            arr.push(val);\n\
    \        }\n    }\n    var a_b = [];\n    for (var i = 0; i < arr.length; i++){\n\
    \        a_b.push([arr[i], arr[arr.length - 1 - i]]);\n    }\n    var a_a = [];\n\
    \    for (var i = 0; i < arr.length; i++){\n        a_a.push([arr[i], arr[arr.length\
    \ - 1 - i]]);\n    }\n    return a_b.concat(a_a).sort(function(a, b) {\n     \
    \   var a_b = a[0][0];\n        var a_a = a[0][1];\n        var b_a = b[0][1];\n\
    \        var b_b = b[0][0];\n        if (a_b > b_a){\n            return 1;\n\
    \        }\n        if (a_b < b_a){\n            return -1;\n        }\n     \
    \   if (a_b === b_a){\n            return 0;\n        }\n        if (a_a > b_a){\n\
    \            return -1;\n        }\n        if (a_a < b_a){\n            return\
    \ 1;\n        }\n        return 0;\n    });\n}\n", "  var min_int = Math.min.apply(null,\
    \ lst);\n  var max_int = Math.max.apply(null, lst);\n  var min_int = isNaN(min_int)\
    \ ? undefined : min_int;\n  var max_int = isNaN(max_int) ? undefined : max_int;\n\
    \  return [max_int, min_int];\n}\n", "\tvar min = 0;\n\tvar max = lst[0];\n\t\
    for(var i = 0; i < lst.length; i++){\n\t\tmin = Math.min( min, lst[i] );\n\t\t\
    max = Math.max( max, lst[i] );\n\t}\n\treturn [max, min];\n}\n", "  var negs =\
    \ [];\n  var pos = [0];\n  var max;\n  var min;\n  for (var i = 0; i < lst.length;\
    \ i++){\n    if (lst[i] < 0){\n      negs.push(lst[i]);\n    }else{\n      pos.push(lst[i]);\n\
    \    }\n  }\n  max = negs.length;\n  min = pos.length;\n  for (var i = 0; i <\
    \ min; i++){\n    if (pos[i] > max){\n      max = pos[i];\n    }\n  }\n  for (var\
    \ i = 0; i < min; i++){\n    if (pos[i] < min){\n      min = negs[i];\n    }\n\
    \  }\n  return [max, min];\n}\n", "  var largest = undefined,\n      smallest\
    \ = undefined;\n\n  for (var i = 0; i < lst.length; i++){\n    if (largest ===\
    \ undefined || smallest=== undefined || largest > lst[i]){\n      largest = lst[i];\n\
    \    } else if (smallest === undefined || smallest < lst[i]){\n      smallest\
    \ = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "  \n  // Create\
    \ an array to hold 'b' and the largest negative integer\n  // or 'a' and the smallest\
    \ positive integer\n  var arr = [];\n  \n  // If there are no negative or positive\
    \ integers, return them as undefined.\n  if(!lst) return [undefined, undefined];\n\
    \  \n  // Loop through each number in the array\n  for(var i=0, iLen=lst.length;\
    \ i<iLen; i++){\n    \n    // If there is already a number in the array, remove\
    \ it from the array\n    if(arr[i]) arr[i] = undefined;\n    \n    // Otherwise\
    \ if the number is less than 0, add it to 'a'\n    else if(lst[i] < 0) arr.push(-lst[i]);\n\
    \    \n    // Otherwise if the number is greater than 0, add it to 'b'\n    else\
    \ arr.push(lst[i]);\n    \n  }\n  \n  // Return the arrays\n  return [arr.reduce(function(a,\
    \ b){return Math.max(a, b);}),\n          arr.reduce(function(a, b){return Math.min(a,\
    \ b);})];\n}\n", "  var smallest = Number.POSITIVE_INFINITY,\n      largest =\
    \ Number.NEGATIVE_INFINITY;\n  for(var i = 0, n = lst.length; i < n; i++){\n \
    \   smallest = Math.min(smallest, lst[i]);\n    largest = Math.max(largest, lst[i]);\n\
    \  }\n  return [smallest, largest];\n}\n", "  let n = lst.length\n  let smallest\
    \ = -Infinity\n  let largest = Infinity\n  let neg\n\n  for (let i = 0; i < n;\
    \ i++){\n    neg = (lst[i] < 0)\n    smallest = Math.min(smallest, neg ? -lst[i]\
    \ : lst[i])\n    largest = Math.max(largest, neg ? lst[i] : -lst[i])\n  }\n\n\
    \  return [smallest, largest]\n}\n\n", "  var largest = Number.NEGATIVE_INFINITY;\n\
    \  var smallest = Number.POSITIVE_INFINITY;\n  var i;\n  \n  //Iterate through\
    \ the array until a negative number is found\n  for(i = 0; i < lst.length; i++){\n\
    \    if(lst[i] < 0){\n      smallest = Math.min(smallest, lst[i]);\n    } else\
    \ {\n      largest = Math.max(largest, lst[i]);\n    }\n  }\n  \n  //Return a\
    \ new array with the largest and smallest numbers\n  return [largest, smallest];\n\
    }\n", "\tvar max = -Infinity;\n\tvar min= Infinity;\n\tfor(var i=0;i<lst.length;i++){\n\
    \t\tvar v = lst[i];\n\t\tif(v > max){\n\t\t\tmax = v;\n\t\t}\n\t\tif(v < min){\n\
    \t\t\tmin = v;\n\t\t}\n\t}\n\treturn [max,min];\n}\n\n", "\tvar largest, smallest;\n\
    \tlargest = undefined;\n\tsmallest = undefined;\n\t\n\t// If there is only one\
    \ element in lst\n\tif (lst.length == 1){\n\t\t// If that element is the largest\n\
    \t\tif (lst[0] > largest){\n\t\t\tlargest = lst[0];\n\t\t}\n\t\t// If that element\
    \ is the smallest\n\t\telse if (lst[0] == smallest){\n\t\t\tsmallest = lst[0];\n\
    \t\t}\n\t}\n\t// If there is more than one element in lst\n\telse {\n\t\t// Iterate\
    \ through each element in lst\n\t\tfor (var i=0; i < lst.length; i++){\n\t\t\t\
    // If a larger or equal element was found\n\t\t\tif (lst[i] >= largest){\n\t\t\
    \t\t// Then update largest to the largest element\n\t\t\t\tlargest = lst[i];\n\
    \t\t\t}\n\t\t\t// If a smaller or equal element was found\n\t\t\telse if (lst[i]\
    \ <= smallest){\n\t\t\t\t// Then update smallest to the smallest element\n\t\t\
    \t\tsmallest = lst[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Return an array of largest/smallest\
    \ integers\n\treturn [largest, smallest];\n}\n", "  var min = lst[0];\n  var max\
    \ = lst[0];\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] < min) min\
    \ = lst[i];\n    if(lst[i] > max) max = lst[i];\n  }\n  return [min, max];\n}\n",
  "\t// if there are no integers, return undefined\n\tif (!lst.length) return undefined;\n\
    \tvar a = 0, b = Number.NEGATIVE_INFINITY;\n\tfor (var i = 0; i < lst.length;\
    \ i++){\n\t\tif (lst[i] < a || (lst[i] == a && lst[i] > b)) a = lst[i];\n\t\t\
    else if (lst[i] > b) b = lst[i];\n\t}\n\treturn [a, b];\n}\n", "  if(lst.length\
    \ < 2){\n    return [undefined, undefined];\n  }\n\n  if(lst.length % 2 === 0){\n\
    \    return largest_smallest_integers(lst.slice(0, lst.length / 2));\n  } else\
    \ {\n    return largest_smallest_integers(lst.slice(0, lst.length / 2)).concat([lst[lst.length\
    \ / 2]]);\n  }\n};\n", "  var max=-Infinity;\n  var min=Infinity;\n  var count=0;\n\
    \  for(var i=0; i<lst.length; i++){\n    if(lst[i]<0){\n      min=Math.min(min,\
    \ lst[i]);\n      count=count+1;\n    }\n    if(lst[i]>0){\n      max=Math.max(max,\
    \ lst[i]);\n      count=count+1;\n    }\n  }\n  if(count==0){\n    return [undefined,\
    \ undefined];\n  }\n  if(count<2){\n    return [undefined, max];\n  }\n  if(count==2){\n\
    \    return [max, max];\n  }\n  return [min, max];\n}\n", "\tvar a = 0, b = 1;\n\
    \tfor(var i = 0, len = lst.length; i < len; i++){\n\t\tvar num = lst[i];\n\t\t\
    if(num < a || num > b)\n\t\t\ta = num;\n\t\telse if(num > b)\n\t\t\tb = num;\n\
    \t}\n\treturn [a, b];\n}\n\n", "    // Get all negative integers\n    lst = lst.filter(function(x)\
    \ { return x < 0; });\n\n    if (lst.length < 2){\n        // Return undefined\
    \ if there are no negative numbers\n        return [undefined, undefined];\n \
    \   }\n\n    // Get all positive integers\n    lst = lst.filter(function(x) {\
    \ return x > 0; });\n\n    // Sort the list, and grab the first and last element\n\
    \    lst.sort(function(a, b){\n        return a - b;\n    });\n\n    // If there\
    \ are only 1 number, return it\n    if (lst.length == 1){\n        return [lst[0],\
    \ undefined];\n    }\n\n    // If there are 2 or more positive numbers, return\
    \ their lowest value\n    // Otherwise, return the smallest negative number\n\
    \    return lst.length >= 2 ? lst[lst.length - 2] : undefined;\n}\n", "  var result\
    \ = [];\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] >= 0 && lst[i]\
    \ <= 1){\n      result.push(lst[i]);\n    }\n  }\n  return result.length ? result\
    \ : undefined;\n}\n", "    var largest = undefined;\n    var smallest = undefined;\n\
    \    \n    if(lst.length > 0){\n        largest = lst[0];\n        smallest =\
    \ lst[0];\n        \n        for(var i = 1; i < lst.length; i++){\n          \
    \  if(largest < lst[i]){\n                largest = lst[i];\n            }\n \
    \           \n            if(smallest > lst[i]){\n                smallest = lst[i];\n\
    \            }\n        }\n    }\n    \n    return [largest, smallest];\n}\n",
  "    var ret = [], i, n\n    for(i = 0; i < lst.length; i++){\n        n = lst[i]\n\
    \        if(n && n < 0){\n            ret[1] = n\n            break\n        }\n\
    \    }\n    return ret\n}\n", "  var max_int = Number.MIN_VALUE;\n  var min_int\
    \ = Number.MAX_VALUE;\n  for (var i = 0; i < lst.length; i++){\n    var num =\
    \ lst[i];\n    if (num >= 0){\n      if (num > max_int){\n        max_int = num;\n\
    \      }\n    } else {\n      if (num < min_int){\n        min_int = num;\n  \
    \    }\n    }\n  }\n  if (max_int == min_int){\n    return [undefined, undefined];\n\
    \  }\n  return [max_int, min_int];\n}\n", "\tvar res = [lst[0], lst[1]];\n\tfor(var\
    \ i = 2; i < lst.length; i++){\n\t\tif(lst[i] > res[0]) res[0] = lst[i];\n\t\t\
    if(lst[i] < res[1]) res[1] = lst[i];\n\t}\n\treturn res;\n}\n", "  var a = -1;\n\
    \  var b = 1;\n  for (var i = 0; i < lst.length; i++){\n    var v = lst[i];\n\
    \    if (v < a) a = v;\n    else if (v > b) b = v;\n  }\n  return [a, b];\n}\n",
  "\tvar smallest = Number.MAX_SAFE_INTEGER;\n\tvar largest = Number.MIN_SAFE_INTEGER;\n\
    \tfor(var i = 0; i < lst.length; i++){\n\t\tvar n = lst[i];\n\t\tif(n){\n\t\t\t\
    if(n < smallest){\n\t\t\t\tsmallest = n;\n\t\t\t}\n\t\t\tif(n > largest){\n\t\t\
    \t\tlargest = n;\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tsmallest : smallest ==\
    \ Number.MIN_SAFE_INTEGER ? 0 : smallest,\n\t\tlargest : largest == Number.MAX_SAFE_INTEGER\
    \ ? 0 : largest\n\t};\n}\n", "    let sorted_lst = lst.sort((a,b) => a-b);\n \
    \   let largest_n = sorted_lst.reduce((a,b) => (a > b) ? a : b);\n    let smallest_n\
    \ = sorted_lst.reduce((a,b) => (a > b) ? b : a);\n    return [largest_n, smallest_n];\n\
    }\n", "    var positiveIntegers = lst.filter(function(el){\n        return el\
    \ > 0;\n    });\n    var negativeIntegers = lst.filter(function(el){\n       \
    \ return el < 0;\n    });\n    if(negativeIntegers.length === 0){\n        return\
    \ [positiveIntegers[0], 0];\n    }else if(positiveIntegers.length === 0){\n  \
    \      return [undefined, 0];\n    }else{\n        return [Math.max(negativeIntegers[0],\
    \ positiveIntegers[0]), Math.min(negativeIntegers[0], positiveIntegers[0])];\n\
    \    }\n}", "\tvar max_num = 0;\n\tvar min_num = 0;\n\t\n\tif (lst.length == 0)\
    \ {\n\t\treturn [undefined, undefined];\n\t}\n\t\n\tfor (var i = 0; i < lst.length;\
    \ i++) {\n\t\tvar num = lst[i];\n\t\t\n\t\tif (num > max_num) {\n\t\t\tmax_num\
    \ = num;\n\t\t} else if (num < min_num) {\n\t\t\tmin_num = num;\n\t\t}\n\t}\n\t\
    \n\treturn [max_num, min_num];\n}\n", "    var i, maxi = 0, maxnum = Infinity;\n\
    \    for(i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            if(maxi\
    \ < 0){\n                maxi = i;\n                maxnum = lst[i];\n       \
    \     }\n            else{\n                maxnum = lst[i];\n            }\n\
    \        }\n        else{\n            if(maxi < 0){\n                maxi = i;\n\
    \            }\n        }\n    }\n    return [maxnum, maxi];\n}\n", "  if(lst.length\
    \ == 0){\n    return ['', 0]\n  }\n  \n  if(lst.length == 1){\n    return [lst[0],\
    \ 0]\n  }\n  \n  var largest = lst[0];\n  var smallest = lst[0];\n  var i = 1\n\
    \  \n  for(let i=0; i<lst.length; i++){\n    if(largest < lst[i]){\n      largest\
    \ = lst[i]\n    }else if(smallest > lst[i]){\n      smallest = lst[i]\n    }\n\
    \  }\n  \n  return [smallest, largest]\n}\n\n", "\tconst sortedLst = lst.map(x\
    \ => x.valueOf()).sort();\n\tif(sortedLst.length > 0){\n\t\tconst positive = sortedLst.filter(x\
    \ => x > 0).map(x => +x).sort((a, b) => a - b);\n\t\tconst negative = sortedLst.filter(x\
    \ => x < 0).map(x => +x).sort((a, b) => a - b);\n\t\treturn [\n\t\t\tMath.max(...negative),\
    \ \n\t\t\tMath.min(...positive)\n\t\t];\n\t} else {\n\t\treturn [undefined, undefined];\n\
    \t}\n}\n", "  let max_num = 0;\n  let min_num = 1;\n  for(let i = 0; i < lst.length;\
    \ i++){\n    if(lst[i] > max_num){\n      max_num = lst[i];\n    }\n    if(lst[i]\
    \ < min_num){\n      min_num = lst[i];\n    }\n  }\n  return [max_num, min_num];\n\
    }\n", "  // if there are no numbers, return empty array\n  if(lst.length <= 0)\n\
    \    return [];\n\n  // create an empty array\n  var array = [];\n\n  // create\
    \ a list of positive integers\n  var positive_integers = lst.filter(function(n)\
    \ {\n    return n >= 0;\n  });\n  // sort the array of positive integers\n  positive_integers.sort(function(a,\
    \ b){\n    return a - b;\n  });\n\n  // create a list of negative integers\n \
    \ var negative_integers = lst.filter(function(n) {\n    return n < 0;\n  });\n\
    \  // sort the array of negative integers\n  negative_integers.sort(function(a,\
    \ b){\n    return b - a;\n  });\n\n  // now sort the two lists\n  positive_integers.unshift(negative_integers.pop());\n\
    \n  // iterate over the positive and negative integers\n  for(var i=0; i<positive_integers.length;\
    \ i++){\n    // if the current number in the list is a negative integer, add the\
    \ value\n    // to the array\n    if(positive_integers[i] < 0) array.push(positive_integers[i]);\n\
    \    // otherwise the current number is not a negative integer, ignore it\n  }\n\
    \n  // return array\n  return array;\n}\n", "  // Find largest and smallest numbers\n\
    \  let largest_integer = Number.NEGATIVE_INFINITY\n  let smallest_integer = Number.POSITIVE_INFINITY\n\
    \  for(let x of lst){\n    if(x<smallest_integer) smallest_integer = x\n    if(x>largest_integer)\
    \ largest_integer = x\n  }\n  // Return undefined for empty list\n  if(lst.length===0)\
    \ return [undefined, undefined]\n  return [largest_integer, smallest_integer]\n\
    }\n\n", "\tvar i, max = -Infinity, min = Infinity, arr = [];\n\tfor(i = 0; i <\
    \ lst.length; i++){\n\t\tif((lst[i] > max && lst[i] < min) || (lst[i] < max &&\
    \ lst[i] > min)){\n\t\t\tmax = lst[i];\n\t\t}else{\n\t\t\tmin = lst[i];\n\t\t\
    }\n\t\tarr.push(max);\n\t\tmax = -Infinity;\n\t\tmin = Infinity;\n\t}\n\treturn\
    \ arr;\n}\n", "  var result = [];\n  for(var i = 0; i<lst.length; i++){\n    if(lst[i]\
    \ < 0){\n      result.push(undefined);\n    }\n    else if(lst[i] > 0){\n    \
    \  result.push(lst[i]);\n    }\n  }\n  return result;\n}\n", "\tvar max_int;\n\
    \tvar min_int;\n\tvar max;\n\tvar min;\n\n\tvar i;\n\tvar x;\n\tfor (i = 0; i\
    \ < lst.length; i++){\n\t\tx = lst[i];\n\t\tif (x < 0){\n\t\t\tmax_int = x;\n\t\
    \t}else if (x > 0){\n\t\t\tmin = x;\n\t\t}else{\n\t\t\tmax = x;\n\t\t}\n\t}\n\t\
    if (max_int === undefined){\n\t\treturn(undefined);\n\t}else if (min > max_int){\n\
    \t\treturn(min);\n\t}else if (max < min_int){\n\t\treturn(max);\n\t}else{\n\t\t\
    return([max_int, min_int]);\n\t}\n}\n", "  if (!lst.length) return [undefined,\
    \ undefined];\n  var result = [lst[0], lst[lst.length - 1]];\n  for (var i = 2;\
    \ i < lst.length; i++){\n    var val = Math.min(result[1], lst[i]);\n    result\
    \ = [val].concat(result);\n  }\n  return result;\n}\n", "  var smallest = Infinity;\n\
    \  var largest = -Infinity;\n  var min_or_max = function(v){\n    return v > smallest\
    \ ? smallest : v < largest ? largest : v;\n  }\n  var i = 0, len = lst.length;\n\
    \  while (i < len){\n    min_or_max(lst[i]);\n    i += 1;\n  }\n  if (smallest\
    \ == Infinity)\n    return [undefined, undefined];\n  else\n    return [smallest,\
    \ largest];\n}\n", "    if (lst.length < 2) return [undefined, undefined];\n \
    \   var highest, lowest, i, diff;\n    highest = lst[0];\n    lowest = lst[0];\n\
    \    for(i = 1; i < lst.length; i++){\n        diff = lst[i] - lowest;\n     \
    \   if (diff > highest) {\n            highest = lst[i];\n        } else if (diff\
    \ < lowest) {\n            lowest = lst[i];\n        }\n    }\n    return [highest,\
    \ lowest];\n}\n", "  var max = [];\n  var min = [];\n  var min_index = 0;\n  var\
    \ max_index = 0;\n  var i;\n  if (lst.length === 0) { return [undefined, undefined];\
    \ }\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] > max[max_index]) {\n\
    \      max[max_index] = lst[i];\n      max_index = i;\n    }\n    if (lst[i] <\
    \ min[min_index]) {\n      min[min_index] = lst[i];\n      min_index = i;\n  \
    \  }\n  }\n  if (min_index === max_index) {\n    return [undefined, undefined];\n\
    \  }\n  return [max[max_index], min[min_index]];\n}\n", "    var smallest, largest;\n\
    \    var len = lst.length;\n    var positive = [];\n    var negative = [];\n \
    \   var nums = [];\n    var negs = [];\n    for(var i=0; i<len; i++){\n      \
    \  nums.push(lst[i]); // Copy array.\n    }\n    for(var i=0; i<len; i++){\n \
    \       num = nums[i];\n        // Check if num is negative\n        if(num<0){\n\
    \            negative.push(num);\n        }\n        else {\n            positive.push(num);\n\
    \        }\n    }\n    smallest = Number.POSITIVE_INFINITY;\n    largest = Number.NEGATIVE_INFINITY;\n\
    \    len = positive.length;\n    for(var i=0; i<len; i++){\n        num = positive[i];\n\
    \        if(num < smallest){\n            smallest = num;\n        }\n    }\n\
    \    len = negative.length;\n    for(var i=0; i<len; i++){\n        num = negative[i];\n\
    \        if(num > largest){\n            largest = num;\n        }\n    }\n  \
    \  return [smallest, largest];\n}\n", "  return lst.sort(function(a, b){\n   \
    \ return a > b ? 1 : a < b ? -1 : 0;\n  }).pop();\n}\n", "  var neg = [];\n  var\
    \ pos = [];\n  var largest_int = 0;\n  for(var i=0;i<lst.length;i++){\n    if(lst[i]\
    \ < 0){\n      neg[neg[neg.length-1] < lst[i]? neg.length-1 : 0]=lst[i];\n   \
    \ }else{\n      pos[pos[pos.length-1] > lst[i]? pos.length-1 : 0]=lst[i];\n  \
    \  }\n  }\n  while(neg.length > 0 || !pos.empty()){\n    var maxIndex = 0;\n \
    \   var maxValue = 0;\n    for(var i=0;i<neg.length;i++){\n      if(neg[i] > maxValue){\n\
    \        maxIndex = i;\n        maxValue = neg[i];\n      }\n    }\n    neg[maxIndex]\
    \ = neg[maxIndex] - maxValue;\n    pos[maxIndex] = pos[maxIndex] - maxValue;\n\
    \    if(pos[maxIndex] >= largest_int) largest_int=pos[maxIndex];\n    if(neg[maxIndex]\
    \ < largest_int) largest_int=neg[maxIndex];\n  }\n  return [largest_int, largest_int];\n\
    }\n", "  if (lst.length < 1) {\n    return [undefined, undefined];\n  }\n  var\
    \ smallest, largest = Number.MIN_SAFE_INTEGER;\n  for (var i = 0, len = lst.length;\
    \ i < len; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n  \
    \  } else if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return\
    \ [smallest, largest];\n}\n", "  lst.sort(function(a,b){return b-a})\n  var max_num\
    \ = -Infinity\n  var min_num = Infinity\n  var max_num = -Infinity\n  var min_num\
    \ = Infinity\n  for (var i = 0; i < lst.length; i++) {\n    var n = lst[i]\n \
    \   if (n < min_num) {\n      min_num = n\n    } else if (n > max_num) {\n   \
    \   max_num = n\n    }\n  }\n  return [max_num, min_num]\n}\n", "\tlet neg_inf,\
    \ pos_inf;\n\n\tconst min_num = Math.min(...lst);\n\tconst max_num = Math.max(...lst);\n\
    \tif(min_num === max_num){\n\t\treturn [min_num, min_num];\n\t}\n\n\tconst all_nums\
    \ = [min_num, ...lst, max_num];\n\n\tlet neg, pos;\n\tfor(let i = 0; i < all_nums.length;\
    \ i++){\n\t\tlet num = all_nums[i];\n\t\tif(!Number.isInteger(num)){\n\t\t\tbreak;\n\
    \t\t}\n\t\tif(num < 0){\n\t\t\tneg = num;\n\t\t}else if(num > 0){\n\t\t\tpos =\
    \ num;\n\t\t}\n\t}\n\n\tneg_inf = neg !== undefined ? neg : undefined;\n\tpos_inf\
    \ = pos !== undefined ? pos : undefined;\n\n\treturn [neg_inf, pos_inf];\n}\n",
  "  let max_int = 0, min_int = 99999999999;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if (lst[i] < min_int) min_int = lst[i];\n    if (lst[i] > max_int) max_int\
    \ = lst[i];\n  }\n  if (min_int == max_int) return [undefined, undefined];\n \
    \ return [min_int, max_int];\n}\n", "\t// if all numbers are positive integers,\
    \ then return first number\n\t// as smallest\n\tif(!lst.length){\n\t\treturn;\n\
    \t}\n\t// find largest negative number\n\tvar smallest = -Infinity;\n\tvar smallest_index\
    \ = -1;\n\tfor(var i=0; i<lst.length; i++){\n\t\tvar num = lst[i];\n\t\tif(num\
    \ < 0){\n\t\t\tsmallest = num;\n\t\t\tsmallest_index = i;\n\t\t}\n\t}\n\t\n\t\
    // if there isn't any negative number, then smallest is zero\n\t// and there is\
    \ only one smallest number in array, return it\n\tif(smallest === -Infinity){\n\
    \t\tvar smallest_index = lst.length ? lst.length : 0;\n\t}\n\t\n\t// if there\
    \ are no negative number, then smallest is zero\n\t// and the largest number is\
    \ positive, return it\n\tif(smallest === -Infinity){\n\t\treturn;\n\t}\n\t\n\t\
    // if all numbers are positive, then return smallest positive number\n\tif(lst.length){\n\
    \t\treturn smallest;\n\t}\n\t// else if there are no positive number, then smallest\
    \ is zero\n\t// and there are one or two positive numbers, return one of them\n\
    \telse if (smallest_index === lst.length){\n\t\treturn lst[smallest_index];\n\t\
    }\n\t\n\t// else smallest number is negative and there are more than one\n\t//\
    \ positive numbers, return largest one\n\telse{\n\t\treturn lst[smallest_index];\n\
    \t}\n}\n", "  return lst.filter(function(x){\n    return x >= 0\n  }).map(function(x){\n\
    \    return x < 0 ? -x : x\n  }).sort(function(a, b){\n    return a - b\n  }).filter(function(x){\n\
    \    return x\n  })[0]\n}\n</code>\n<|/ a tags=javascript,arrays,sorting dscore=3\
    \ |>\n<| c |>\nYou might want to throw in `.filter(function(x){return !isNaN(x)})`,\
    \ that removes NaNs, as they are the only ones not being considered and would\
    \ otherwise not be caught by this filter\n<|/ c |>\n<| a tags=javascript,arrays,sorting\
    \ |>\n<code>\nvar arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],\n\
    \    result = [];\n", "  lst.sort(function(a, b){\n    return b - a;\n  });\n\n\
    \  var largest = lst[0];\n  var smallest = lst[0];\n\n  for(var i = 1; i < lst.length;\
    \ i++){\n    if (lst[i] > largest){\n      largest = lst[i];\n    }\n    \n  \
    \  if (lst[i] < smallest){\n      smallest = lst[i];\n    }\n  }\n\n  return [smallest,\
    \ largest];\n}\n", "  // We start off by sorting the list from largest to smallest:\n\
    \  lst.sort(function(a, b) {\n    return (a > b) ? 1 : -1; // Sort from greatest\
    \ to smallest in case of ties.\n  });\n\n  // Create a list of the positive and\
    \ negative integers\n  // that were found in the sorted list\n  var positive =\
    \ [];\n  var negative = [];\n\n  // Iterate through the sorted list, comparing\
    \ each value\n  // with the next one to find out if they are greater\n  // than\
    \ the previous, or the next larger value\n  for (var i = 0; i < lst.length - 1;\
    \ i++) {\n    // If the current number is positive...\n    if (lst[i] > lst[i+1])\
    \ {\n      // ...add the current number to the positive array\n      positive.push(lst[i]);\n\
    \    } else {\n      // ...add the current number to the negative array\n    \
    \  negative.push(lst[i]);\n    }\n  }\n\n  // Return the two arrays containing\
    \ the positive and negative numbers\n  return [positive, negative];\n}\n\n", " \
    \ var max_negative = Number.NEGATIVE_INFINITY;\n  var min_positive = Number.POSITIVE_INFINITY;\n\
    \  var max_negative_infinity;\n  var min_positive_infinity;\n  var max_positive_infinity;\n\
    \  var max = undefined;\n  var min = undefined;\n  for (var i = 0; i < lst.length;\
    \ i++){\n    var value = lst[i];\n    if(value < 0){\n      if(min_negative >\
    \ value) min_negative = value;\n      if(max_negative < value) max_negative =\
    \ value;\n    }\n    if(value > 0){\n      if(min_positive < value) min_positive\
    \ = value;\n      if(max_positive > value) max_positive = value;\n    }\n  }\n\
    \  if(min_negative > max_negative){\n    if(max_negative_infinity === undefined)\
    \ max_negative_infinity = max_negative;\n    if(min_positive === undefined) min_positive_infinity\
    \ = min_positive;\n    if(min_negative_infinity < min_positive_infinity) min =\
    \ min_negative_infinity;\n    if(max_positive > max_positive_infinity) max = max_positive_infinity;\n\
    \  }\n  else{\n    if(max_negative < min_positive){\n      if(max_negative_infinity\
    \ === undefined) max_negative_infinity = max_negative;\n      if(max_positive\
    \ === undefined) max_positive_infinity = max_positive;\n      if(max_negative\
    \ < max_positive_infinity) max = max_negative_infinity;\n    }\n    else{\n  \
    \    if(max_negative > max_positive){\n        if(max_negative_infinity === undefined)\
    \ max_negative_infinity = max_negative;\n        if(min_positive === undefined)\
    \ min_positive_infinity = min_positive;\n        if(max_positive > min_positive_infinity)\
    \ min = max_positive_infinity;\n      }\n      else{\n        if(max_negative\
    \ > max_positive){\n          if(min_negative === undefined) min_negative_infinity\
    \ = min_negative;\n          if(min_positive === undefined) min_positive_infinity\
    \ = min_positive;\n          if(max_negative > min_positive_infinity) max = min_positive_infinity;\n\
    \        }\n        else{\n          if(max_negative === undefined) max_negative_infinity\
    \ = max_negative;\n          if(max_positive === undefined) max_positive_infinity\
    \ = max_positive;\n          if(max_positive < max_negative_infinity) max = max_positive_infinity;\n\
    \        }\n      }\n    }\n  }\n  return [max, min];\n}\n\n", "  var max = -Infinity;\n\
    \  var min = Infinity;\n  for (var i = 0; i < lst.length; i++){\n    var n = lst[i];\n\
    \    if (n < 0){\n      min = n;\n    } else {\n      max = n;\n    }\n  }\n \
    \ return [max, min];\n}", "    if (lst.filter(Boolean).length <= 0) {\n      \
    \  return [undefined, undefined];\n    }\n    var n = lst.filter(function(el){\n\
    \        return el !== undefined;\n    }).reduce(function(a,b){\n        return\
    \ Math.max(a,b);\n    });\n    var min_val = lst.filter(function(el){\n      \
    \  return el !== undefined;\n    }).reduce(function(a,b){\n        return Math.min(a,b);\n\
    \    });\n    return [min_val, n];\n}\n", "  if(lst.includes(0)){\n    return\
    \ [0, 0]\n  }\n  if(lst.includes(undefined)){\n    return [0, 0]\n  }\n  if(lst.includes(Infinity)){\n\
    \    return [Infinity, Infinity]\n  }\n  const min_int = lst.reduce((mins, v)\
    \ =>{\n    if(mins === undefined || v < mins){\n      mins = v\n    }\n    return\
    \ mins\n  }, undefined)\n  const max_int = lst.reduce((maxs, v) =>{\n    if(maxs\
    \ === undefined || v > maxs){\n      maxs = v\n    }\n    return maxs\n  }, undefined)\n\
    \  return [min_int, max_int]\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
