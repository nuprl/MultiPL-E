name: HumanEval_108_count_nums
language: js
prompt: "//Write a function count_nums which takes an array of integers and returns\n\
  // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
  \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
  \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
  // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
  \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
  \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
  \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
  \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
completions: ["  var n = 0;\n  for (var i=0; i<arr.length; i++){\n    n = n + count_digits(arr[i])\n\
    \  }\n  return n;\n}", "    \n    // Count the number of positive numbers whose\
    \ first digits sum to greater than 0\n    let count = 0;\n    for(let i = 0; i\
    \ < arr.length; i++){\n        if(arr[i] + arr[i+1] > 0) count++;\n    }\n\n \
    \   // If no positive numbers have the sum > 0, return 0\n    if(count <= 0) return\
    \ 0;\n\n    // Otherwise, the number counts as positive, thus we need to remove\
    \ it\n    return count - 1;\n}\n", "  var sum = 0;\n  for(var i = 0, len = arr.length;\
    \ i < len; i++){\n    if(arr[i] < 0) sum += -arr[i];\n    else sum += arr[i];\n\
    \  }\n  return sum;\n}\n", "    if(arr.length == 0) return 0;\n    let result\
    \ = 0;\n    for(let num of arr) {\n        if(num < 0) result += Math.abs(num);\n\
    \        else result += num;\n    }\n    return Math.abs(result);\n}\n</code>\n\
    This code has a few advantages: It's shorter to write, and it's more readable.\
    \ And it avoids unnecessary array copies, because you're not mutating them.\n\
    The above code can be further simplified to:\n<code>", "  if(arr == null || arr.length\
    \ == 0)\n    return 0;\n  var count = 1;\n  for(var i = 0; i < arr.length; i++){\n\
    \    if(arr[i] == 0)\n      continue;\n    var digit = arr[i] >= 0 ? arr[i]%10\
    \ : -arr[i]%10;\n    var prev = arr[i];\n    for(var j = arr.length-1; j >= i;\
    \ j--){\n      var curr = arr[j];\n      if(!(i == j)){\n        var next = arr[j-1]\
    \ >= 0 ? arr[j-1]%10 : -arr[j-1]%10;\n        if(curr + digit + next > 0)\n  \
    \        count++;\n      }\n      prev = curr;\n    }\n  }\n  return count;\n\
    }\n", "  var i, count = 0;\n  for(i = 0; i < arr.length; i++){\n    count += count_digits(arr[i]);\
    \ //Count the number of digits of each element in the array\n    if(arr[i] < 0)\
    \ count++;\n  }\n  return count;\n}\n", "    let sum = 0;\n    let len = arr.length;\n\
    \    for(let i = 0; i < len; i++){\n        sum += arr[i]; \n    }\n    return\
    \ sum;\n}\n", "  let n = 0;\n  for(let i = 0;i<arr.length;i++){\n    n = n % 10\
    \ + count_nums(arr[i--]);\n  }\n  return n;\n}\n", "\tif (arr.length === 0) return\
    \ 0;\n\tif (arr[0] < 0) arr[0] *= -1;\n\tvar count = 0;\n\tfor (var i = 0; i <\
    \ arr.length; i++) {\n\t\twhile (arr[i] >= 10) {\n\t\t\tarr[i] /= 10;\n\t\t\t\
    count ++;\n\t\t}\n\t}\n\treturn count;\n}\n", "\tvar sum = 0;\n\tfor(var i = 0;\
    \ i < arr.length; i++){\n\t\tsum += Math.abs(arr[i]);\n\t}\n\treturn sum;\n}\n",
  "    let len = arr.length\n    if (len < 2) return 0\n    let res = 0\n    for(let\
    \ i = 0; i < len; i++){\n        for(let j = 0; j < len; j++){\n            if\
    \ (arr[i] + arr[j] > 9){\n                let tmp = arr[i] + arr[j]\n        \
    \        arr[i] = tmp - 10\n                arr[j] = tmp\n                res++\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n</cell>\n\
    <cell>", "  var sum = 0;\n  var len = arr.length;\n  var firstInt = arr[0];\n\
    \  var lastInt = arr[len-1];\n  var firstSign = firstInt < 0 ? -1 : 1;\n\n  if(firstInt\
    \ === lastInt){\n    return len+1;\n  }\n\n  for(var i = 0; i < len; i++){\n \
    \   var curInt = arr[i];\n    var curSign = curInt < 0 ? -1 : 1;\n    sum += curSign*curInt;\n\
    \  }\n  if(sum > 0){\n    return len+1;\n  }else{\n    return 0;\n  }\n}\n\n",
  "    var sum = 0;\n    for(var i = 0, len = arr.length; i < len; i++){\n       \
    \ var num = arr[i];\n        if(num < 0) num = num * -1;\n        if(num > 9)\
    \ num -= 10;\n        if(num < 10) sum += num;\n        else{\n            sum\
    \ += num > 9 ? num - 10 : 9;\n        }\n    }\n    return sum;\n}", "    arr\
    \ = arr.slice();\n    return arr.filter(function(n){return n > 0;}).length;\n\
    }\n", "   let count=0\n   for(let i=0;i<arr.length;i++){\n      if (arr[i] > 0){\n\
    \          count++\n      }\n   }\n   return count\n}\n", "    let nums = arr.filter(function(num)\
    \ {\n        return num > 0;\n    })\n    return nums.length;\n}", "  var sum\
    \ = 0;\n  for(var i = 0; i < arr.length; i++){\n    sum += arr[i];\n    if(sum\
    \ > 0) break;\n  }\n  if(sum === 0) return 0;\n  return arr.length - 1;\n}\n",
  "  var n = arr.length;\n  for(var i=0;i<n;i++)\n    arr[i] = arr[i]*10;\n  arr.sort(function(a,b){return\
    \ b-a});\n  for(var i=0;i<n;i++)\n    if(-1 !== arr[i])\n      for(var j=i+1;j<n;j++)\n\
    \        if(arr[j] > arr[i] - arr[j])\n          return n-i;\n  return n;\n}\n",
  "\tvar ret = 0;\n\tfor(var i = 0, len = arr.length; i < len; i++) {\n\t\tif(arr[i]\
    \ <= 0) continue;\n\t\tfor(var j = 0, len2 = arr[i].length; j < len2; j++){\n\t\
    \t\tif(arr[i][j] <= 0) continue;\n\t\t\tret += arr[i][j];\n\t\t}\n\t}\n\treturn\
    \ ret;\n}\n\nvar p = [\n\t[\"1110100111110010010101010111110101111010101110110010101111010101110100111001100\"\
    ,\n\t \"111001001010101010101010101001110110010101010101001011001111001010101010001\"\
    ,\n\t \"1100100111010100111101010111110101110110101110011101001111101001000110\"\
    ,\n\t \"1110010100101010111010111101010111010101001011111001010100101001010001\"\
    ,\n\t \"11101001010100101111010010101010101110101110101001011111010011101010001\"\
    ,\n\t \"1100100111010100111101010111110101110110101110011101001111101001000110\"\
    ,\n\t \"11011011011011010011110101011101011110101011101100101011110101011101001100\"\
    ,\n\t \"111001001010101010101010101001110110010101010101001011001111001010101010001\"\
    ,\n\t \"1100100111010100111101010111110101110110101110011101001111101001000110\"\
    ,\n\t \"1110010100101010111010111101010111010101001011111001010100101001010001\"\
    ,\n\t \"11101001010100101111010010101010101110101110101001011111010011101010001\"\
    ,\n\t \"1100100111010100111101010111110101110110101110011101001111101001000110\"\
    ,\n\t \"11011011011011010011110101011101011110101011101100101011110101011101001100\"\
    ,\n\t \"111001001010101010101010101001110110010101010101001011001111001010101010001\"\
    ,\n\t \"1100100111010100111101010111110101110110101110011101001111101001000110\"\
    ,\n\t \"1110010100101010111010111101010111010101001011111001010", "\tlet sum =\
    \ 0;\n\tfor(const num of arr){\n\t\tsum += num < 0 ? -num : num;\n\t}\n\treturn\
    \ sum;\n}\n", "  var count = 0;\n  for(var i=0;i<arr.length;i++){\n    if(isNum(arr[i])){\n\
    \      count += count_digits(arr[i]);\n    }\n  }\n  return count;\n}\n", "  var\
    \ sum = 0;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n\
    \      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for(let\
    \ i=0;i<arr.length;i++){\n    if(!isPositiveNumber(arr[i])){\n      sum += arr[i].toString(10).slice(1,-1);\n\
    \    }\n  }\n  return sum;\n}\n", "\tvar len = arr.length;\n\tvar count = 0;\n\
    \tfor(var i = 0; i< len; i++){\n\t\tcount += arr[i]%10 || 0;\n\t}\n\treturn count;\n\
    }", "    var cnt = 0;\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]>0){\n\
    \            cnt++;\n        }\n    }\n    return cnt;\n}\n</code>\n<|/ a |>\n\
    <| a tags=algorithm |>\nA recursive way can do the job. \n<code>\npublic int CountDigits(int\
    \ n)\n{\n    return (n>0) ? n : CountDigits(n / 10);\n}\n\npublic int CountSumDigitsGreaterThanZero(int\
    \ n)\n{\n    return Math.Max(Math.Abs(n), CountDigits(n));\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis does not answer the question.\n<|/ c |>\n<| c |>\n\
    I didnt test it. I think it answers the question.\n<|/ c |>\n<| a |>\n<code>\n\
    public int count_digit(int num)\n    {\n        int cnt=0;\n        if (num>0)\n\
    \        {\n            int temp = num;\n            while (temp > 0)\n      \
    \      {\n                cnt++;\n                temp /= 10;\n            }\n\
    \        }\n        return cnt;\n    }\n\n    public int count_digits(int num)\n\
    \    {\n        int cnt = 0;\n        if (num > 0)\n        {\n            cnt\
    \ += count_digit(num / 10);\n        }\n        return cnt;\n    }\n\n    public\
    \ int count_digits_greather_than_zero(int num)\n    {\n        int cnt = count_digits(num);\n\
    \        int temp = num;\n        while (cnt > 0)\n        {\n            if (temp\
    \ > 0)\n            {\n                cnt -= count_digit(temp / 10);\n      \
    \          temp -= count_digit(temp / 10);\n            }\n            else\n\
    \            {\n                cnt--;\n                temp--;\n            }\n\
    \        }\n        return cnt;\n    }\n</code>\n<|/ a dscore=0 tags=algorithm\
    \ |>\n<| a dscore=0 |>\n<code>\npublic int count_digit(int num)\n{\n    int cnt=0;\n\
    \    if(num>0){\n        cnt=10;\n        while(num>0){\n            cnt+=num%10;\n\
    \            num=num/10;\n        }\n    }\n    return cnt;\n}\n\npublic int count_digits(int\
    \ num)\n{\n    int cnt=0;\n    if(num>0){\n        cnt=10;\n        int temp=num;\n\
    \        while(temp>0){\n            cnt+=temp%10;\n            temp=temp/10;\n\
    \        }\n    }\n    return cnt;\n}\n\npublic int count_digits_greather_than_zero(int\
    \ num)\n{\n    int cnt=count_digits(", "  return arr.filter(function(i){\n   \
    \ return i>0;\n  }).length;\n}\n", "    if(arr.length === 0){\n        return\
    \ 0\n    }\n    return count_nums(arr.slice(1))+count_digits(arr[0])\n}\n", " \
    \   var ret = 0;\n    for(var i = 0; i < arr.length; i++) {\n        if(arr[i]\
    \ >= 0) {\n            ret = ret + arr[i];\n        } else {\n            ret\
    \ += (Math.abs(arr[i]) - Math.abs(Math.abs(arr[i]) - arr[i]));\n        }\n  \
    \  }\n    return ret;\n}\ncount_nums([-2, 1, -3, 4, -1, -5, -7, -3, -2, -4])\n",
  "  // base case\n  if (arr.length === 0) return 0;\n  if (arr.length === 1) return\
    \ arr[0] < 0 ? -arr[0] : arr[0];\n\n  // use map to calculate digits of sum of\
    \ digits\n  const arr = arr.map(num => num < 0 ? -num : num);\n  return arr.reduce((count,\
    \ digitSum) => count + (digitSum >= 10 ? digitSum - 10 : 0), 0);\n}\n", "  var\
    \ n = 0, c = 0, digit, i;\n  for(i = 0; i < arr.length; i++){\n    digit = arr[i];\n\
    \    if(digit < 0 || digit > 9)\n      return 0;\n    c = (c % 10) + digit;\n\
    \    if(++n % 10 == 0){\n      if((c > 0) && (c <= 10))\n        n++;\n    }\n\
    \  }\n  return n;\n}\n", "    var n = 0, sum = 0;\n    for (var i = 0; i < arr.length;\
    \ i++){\n        var x = arr[i];\n        if (x === undefined){\n            continue;\n\
    \        }\n        if (x > 0){\n            sum += x;\n        } else {\n   \
    \         sum += x * x;\n        }\n        if (sum > 9){\n            n++;\n\
    \            sum = 0;\n        } else {\n            sum += x / 10;\n        }\n\
    \    }\n    return n;\n}\n", "    var arr2 = [];\n    arr.forEach(function(d){\n\
    \        arr2.push(Math.round(d*10)/10);\n    });\n    var l = arr2.length\n \
    \   while(l > 1){\n        l--;\n        arr2[l] = arr2[l]*10 + arr2[l+1];\n \
    \   }\n    return arr2.filter(function(v){\n        return v > 0;\n    }).length;\n\
    }\n", "  var ret = 0;\n  for(var i=0; i<arr.length; i++){\n    if(arr[i] >= 0){\n\
    \      ret = ret*10 + (arr[i] % 10);\n      if(arr[i] > 0){\n        if(ret==9){\n\
    \          ret = -1;\n        }\n        break;\n      }\n    }\n  }\n  return\
    \ ret;\n}\n", "    var sum = 0;\n    for(var i=0; i<arr.length; i++){\n      \
    \  var n = arr[i];\n        if(n < 0){\n            n = -n;\n        }\n     \
    \   var sumOfDigits = n % 10;\n        sum += sumOfDigits > 0 ? sumOfDigits :\
    \ 0;\n    }\n    return sum;\n}\n", "  var n = 0;\n  for(var i=0;i<arr.length;i++){\n\
    \    n = count_digits(arr[i]);\n    if(n>0){\n      break;\n    }\n  }\n  return\
    \ n;\n}\n", "    return arr.filter(function(val){\n        return val > 0 && count_digits(val)\
    \ > 0;\n    }).length;\n}\n", "\tvar sum = 0;\n\tfor(var i in arr){\n\t\tsum +=\
    \ arr[i];\n\t}\n\treturn sum;\n}", "  var n = arr[0],\n      sum = 0;\n\n  for\
    \ (var i = 1; i < arr.length; i++){\n    sum += arr[i];\n    if (sum > n) n =\
    \ sum;\n  }\n  return n;\n}\n", "  // If the input array is empty, return the\
    \ count of 0\n  if(arr.length == 0){\n    return 0;\n  }\n\n  // If the input\
    \ array contains at least one positive number,\n  // then count the number\n \
    \ if(arr[0] >= 0){\n    return arr.reduce(function(p,c){\n      return p + count_digits(c);\n\
    \    },0);\n  }\n\n  // Otherwise, count the negative number\n  return arr.reduce(function(p,c){\n\
    \    return p + (c < 0);\n  },0);\n}\n", "  let result = 0;\n  for (let num of\
    \ arr){\n    result += count_digits(num);\n  }\n  return result;\n}\n", "\tvar\
    \ count = 0;\n\tfor (var i = 0; i < arr.length; i++){\n\t\tcount += arr[i] > 0\
    \ ? arr[i] : 0;\n\t}\n\treturn count;\n}\n", "\tlet result = 0;\n\tfor(let i =\
    \ arr.length - 1; i >= 0; i--){\n\t\tresult += count_digits(arr[i]);\n\t}\n\t\
    return result;\n}\n", "  var len = arr.length\n  if(len === 0){\n    return 0\n\
    \  }\n  var max_sign = -Infinity\n  for(var i=0;i<len;i++){\n    var n = Math.abs(arr[i])\n\
    \    if(n > max_sign){\n      max_sign = n\n    }\n  }\n  var sign = max_sign\n\
    \  var count_up = 0\n  for(var i=0;i<len;i++){\n    var n = Math.abs(arr[i])\n\
    \    if(n === 0){\n      continue\n    }\n    var d = n % 10\n    if(d > sign){\n\
    \      return count_up + count_nums([Math.floor(n/10)])\n    }\n    if(d === sign){\n\
    \      count_up += 1\n    }\n    sign = d - 10\n  }\n  return count_up\n}\n",
  "\tvar sum = 0;\n\tvar negative = false;\n\tarr.forEach(function(el){\n\t\tif (el\
    \ < 0){\n\t\t\tnegative = true;\n\t\t\tel = -el;\n\t\t}\n\t\tsum = sum + el;\n\
    \t});\n\treturn negative ? -sum : sum;\n}\n", "  return arr.filter(i => i > 0).reduce((acc,\
    \ val) => acc + Number(val), 0);\n}\n", "    // Use countNums recursively to count\
    \ all possible sums:\n    // if sum is positive, add it to the result\n    //\
    \ if sum is negative, add it to the result and negate it\n    return arr.reduce(function(acc,\
    \ n){\n        return acc + (n < 0 ? count_nums(n.map(function(v){return -v})).map(function(v){return\
    \ v*-1}) : count_nums(n.map(function(v){return v})))\n    }, 0);\n}\n", "  var\
    \ sum = 0;\n  for(var i = 0; i < arr.length; i++){\n    if (arr[i] > 0){\n   \
    \   sum += arr[i];\n    }\n  }\n  return sum;\n}", "  let count = 0;\n  for(let\
    \ i = 0; i < arr.length; i++){\n    const num = arr[i];\n    if(num < 0){\n  \
    \    num = num * -1;\n    }\n    count += getDigitSum(num);\n  }\n  return count;\n\
    }\n", "\tlet sum = 0;\n\tlet count = 0;\n\tfor (let num of arr){\n\t\tif (sum\
    \ + num < 0){\n\t\t\tsum += num;\n\t\t} else {\n\t\t\tsum += num >= 0 ? num :\
    \ -num;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}", "\tvar i=0, sum=0, len=arr.length;\n\
    \tfor(i; i<len; i++){\n\t\tsum += arr[i];\n\t}\n\treturn sum;\n}\n", "    return\
    \ arr.filter(function(n){\n        return n >= 0;\n    }).reduce(function(acc,\
    \ n){\n        return acc + arr.reduce(function(acc, d){\n            return n\
    \ * d % 10;\n        }, 0);\n    }, 0);\n}\n", "  var result = 0;\n  for (var\
    \ i=0; i < arr.length; i++){\n    result += arr[i].nums() / Math.pow(10, arr[i].nums()\
    \ % 10);\n  }\n  return result;\n}\n", "    var ans = 0;\n    for(var i=0; i<arr.length;\
    \ i++){\n        if(arr[i]<0) {\n            ans += Math.floor(Math.abs(arr[i]));\n\
    \        } else {\n            ans += arr[i];\n        }\n    }\n    return ans;\n\
    }\ncount_nums([-13, -3, 12, -34, -14, -56]);\n</cell>\n<cell>", "    let count\
    \ = 0;\n    arr.forEach(element => {\n        let sum = 0;\n        if(element\
    \ > 0){\n            for(let i = 0; i < element.length; i++){\n              \
    \  sum += element.charCodeAt(i);\n            }\n        }else{\n            for(let\
    \ i = 0; i < element.length; i++){\n                if(element.charCodeAt(i) >\
    \ 0){\n                    sum += element.charCodeAt(i) - 1;\n               \
    \ }else{\n                    sum += element.charCodeAt(i);\n                }\n\
    \            }\n        }\n        if(sum > 0){\n            count += 1;\n   \
    \     }\n    });\n    return count;\n}\n", "  if (arr.length === 0) {\n    return\
    \ 0;\n  }\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    result\
    \ += Math.abs(arr[i]);\n  }\n  return result;\n}\n", "  var sum = 0;\n  for(var\
    \ i = 0; i < arr.length; i++){\n    var el = arr[i];\n    if(el < 0){\n      el\
    \ *= -1;\n    }\n    if(el < 10){\n      sum += 1;\n    }else{\n      sum += el\
    \ % 10;\n      sum += (el - el % 10) / 10;\n    }\n  }\n  return sum;\n}\n", "\t\
    return (arr.map((num) => Math.abs(num)).reduce((a, b) => a + b))\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n   \
    \ if (sum > 9) {\n      sum -= 10;\n    }\n  }\n  return sum;\n}\n", "\tvar t\
    \ = 0;\n\tvar n = 0;\n\tvar i = arr.length;\n\twhile(i --){\n\t\tt += arr[i];\n\
    \t\tif((t % 10) != 0)\n\t\t\tn++;\n\t}\n\treturn n;\n}\n", "    var num_sum =\
    \ 0;\n    for(var i = 0; i< arr.length; i++){\n        num_sum += sum_digits(arr[i]);\n\
    \    }\n    return num_sum;\n}\n", "  return arr.reduce(function (acc, val){\n\
    \    var negative = val < 0;\n    var digits = Math.abs(val);\n    var signed\
    \ = digits < 10;\n    if (negative || signed){\n      digits = -digits;\n    }\n\
    \    return acc + (negative ? digits: -digits);\n  }, 0)\n}\n", "  let res = 0;\n\
    \  for (let num of arr){\n    if (num < 0) num *= -1;\n    \n    res += Math.abs(num);\n\
    \  }\n  return res;\n}\n", "  var result = 0;\n  for(var i = arr.length - 1; i\
    \ >= 0; i--){\n    if(arr[i]>0){\n      result++;\n    }\n  }\n  return result;\n\
    }\n", "\tvar i;\n\tvar num = 0, sum = 0, neg;\n\tfor(i = 0; i < arr.length; i++){\n\
    \t\tneg = (arr[i] < 0);\n\t\tif(neg){\n\t\t\tarr[i] = -arr[i];\n\t\t}\n\t\tsum\
    \ += Math.abs(arr[i]);\n\t}\n\tfor(i = 0; i < arr.length; i++){\n\t\tnum += Math.abs(arr[i]);\n\
    \t\tif(sum > 0){\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn num;\n}\n", "\tvar i, sum\
    \ = 0, num;\n\tfor (i = 0; i < arr.length; i++) {\n\t\tnum = arr[i];\n\t\tif (num\
    \ >= 0) {\n\t\t\tsum += num;\n\t\t}\n\t\telse {\n\t\t\tsum += Math.abs(num);\n\
    \t\t}\n\t}\n\treturn sum;\n}\n\t", "  var count = 0;\n  var n = arr.length;\n\
    \  for (var i = 0; i < n; i++){\n    var digits = arr[i].toString().split('');\n\
    \    if (digits.length < 2)\n      continue;\n    for (var j = 0; j < digits.length;\
    \ j++){\n      if (j == 0)\n        digits[j] = '0';\n      else if (digits[j]\
    \ > '9')\n        digits[j] -= 9;\n      else\n        digits[j] -= 1;\n    }\n\
    \    var sum = 0;\n    for (var k = 0; k < digits.length; k++){\n      sum +=\
    \ parseInt(digits[k]);\n    }\n    if (sum > 0)\n      count++;\n  }\n  return\
    \ count;\n}\n", "  return arr.filter(n => !!n).reduce((acc, n) => acc + count_digits(n),\
    \ 0);\n}\n", "  if(arr instanceof Array){\n    var sum = 0;\n    for(var i = 0;\
    \ i < arr.length; i++){\n      sum += count_nums(arr[i]); // recurse\n    }\n\
    \    return sum;\n  }\n  else if(arr instanceof String){\n    var arr = arr.split(\"\
    \");\n    return arr.map(function(v){\n      var digits = count_digits(v);\n \
    \     return v * (digits > 0 ? digits : -1); // negate if negative\n    }).reduce(function(a,\
    \ b){\n      return a + b; // sum\n    });\n  }\n  else{\n    return Math.abs(arr);\n\
    \  }\n}\n", "  var sum = 0;\n  for(var i = 0; i < arr.length; i++){\n    sum +=\
    \ arr[i] * count_digits(arr[i]);\n  }\n  return sum;\n}\n", "    let count_arr\
    \ = [...arr];\n    for (let i=0;i<count_arr.length;i++){\n        count_arr[i]\
    \ = count_arr[i]*10;\n    }\n    return count_arr.filter(i => i).reduce((prev,\
    \ current) => prev+current);\n}", "    if (arr.length == 0) return 0;\n    let\
    \ negative = 0;\n    const arr2 = arr.map((e) => {\n        if (e < 0){\n    \
    \        negative++;\n            e *= -1;\n        }\n        return e;\n   \
    \ });\n    arr2.sort();\n    let n = arr2.filter((e) => {\n        if (e < 0)\
    \ return false;\n        return e > 0;\n    }).length;\n    return n + negative;\n\
    }", "  // Write your code here\n  arr.sort(function(a,b){\n    return a-b;\n \
    \ })\n  \n  let sum = 0;\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n\
    \    if(arr[i]>0) count++;\n    sum += arr[i];\n  }\n  return count;\n}\ncount_nums([-15,\
    \ 1, 4, -14, -2, -19, 3, -2, -2, -6, -8, -8, 9, -4, -6, -4, -10, 5, -4, -8, -3,\
    \ -15, -5, -9, -10, 11, -6, 9, -10, -9, -3, 7, 3, -4, -10, -8, -12]);\n", "  var\
    \ sum = 0; // sum of digits in arr\n  var len = 0; // length of arr\n  for (var\
    \ i=0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n    len++\n  }\n \
    \ var count = len - sum; // count of numbers whose sum is > 0\n  return count;\n\
    }\n\n", "\tvar len = arr.length;\n\tif(len == 0){return 0;}\n\tvar n = 0;\n\t\
    var x = 0;\n\tfor(var i = 0; i < len; i++){\n\t\tn += arr[i] > 0 ? arr[i] : 0;\n\
    \t\tx = n % 10;\n\t\tif(x == 0){\n\t\t\tn /= 10;\n\t\t} else {\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn n;\n}\n", "    var n = arr.length,\n        sum = 0,\n  \
    \      i;\n\n    if (n === 0) { return 0; }\n    \n    // Count the number of\
    \ positive digits in the first number.\n    for (i = 0; i < n; i++) {\n      \
    \  if (arr[i] > 0) {\n            sum += arr[i];\n        } else {\n         \
    \   // Negative numbers have negative first digit.\n            sum += arr[i]\
    \ * -1;\n        }\n    }\n    return sum;\n}\n", "  // Write your code here.\n\
    }\n</cell>\n<text>\nNow that we have an implementation of the above algorithm,\
    \ let's test it using the following inputs:\n\n\n</text>\n<cell>\ncount_nums([123,\
    \ -1234, 10, 0, 12])\n</cell>\n<text>\nWhat would happen if we passed in the following\
    \ inputs:\n\n\n</text>\n<cell>\ncount_nums([-10, 1, 10, -1, 10])\n</cell>\n<text>\n\
    Your output should match the following:\n\n\n</text>\n<cell>\ndef count_nums(arr):\n\
    \  # Your code here\n  return count\n\nprint(count_nums([-10, 1, 10, -1, 10]))\n\
    </cell>\n<text>\nHow would you re-write count_nums to take an arbitrary array?\
    \ How would you test it on the following inputs:\n\n\n</text>\n<cell>\ncount_nums([0,\
    \ 10, 20, -10, -30])\ncount_nums([123, -1234, 10, 0, 12])\ncount_nums([-10, 1,\
    \ 10, -1, 10])\n</cell>\n<text>\nThe count_nums function takes about 2 minutes\
    \ to run. There are many ways that this can be improved, but let's stay focused\
    \ on improving the algorithm for now.\n\nOnce you have the count_nums function\
    \ written, write a function that tests each of the arrays on count_nums and returns\
    \ the arrays that pass the test.\n\nRemember that testing can be done in three\
    \ different ways:\n\nUnit Tests - which check each function individually\nUnit\
    \ Test in groups - which test each array in its own group\nIntegration Test -\
    \ which tests multiple arrays at once\n\nWrite a test function named test_count_nums\
    \ that takes three inputs:\n\nAn array of integers\nAn array of integers\nAn array\
    \ of integers\n\nand passes each of the arrays to count_nums and returns the array\
    \ that passed count_nums.\n\n\n</text>\n<cell>\ndef test_count_nums(test_array,\
    \ test_array2, test_array3):\n  # Your code here\n  return pass\n\nprint(test_count_nums([0,\
    \ 10, 20, -10, -30], [123, -1234, 10, 0, 12], [-10, 1, 10, -1, 10]))\n</cell>\n\
    <text>\nOnce you have a passing test function, write a test function that tests\
    \ all three inputs at once.\n\nWrite a test function named test_count_nums that\
    \ takes three arrays of inputs and passes each of the arrays to count_nums.\n\n\
    \n</text>\n<cell>\ndef test_count_nums(test_array, test_array2, test_array3):\n\
    \  # Your code here\n  return pass\n\ntest_count_nums([0, 10, 20, -10, -30], [123,\
    \ -1234, 10, 0, 12], [-10, 1, 10, -1, 10])\n</cell>", "  arr = arr.map(function(x){\n\
    \    return ~~x;\n  });\n  var sum = 0;\n  for(var i=0;i<arr.length;i++){\n  \
    \  if(arr[i] < 0){\n      arr[i] = -arr[i];\n      sum+=Math.abs(arr[i]);\n  \
    \    i++;\n    }\n    var count = 0;\n    for(var j=i;j<arr.length;j++){\n   \
    \   if(arr[j] >= arr[i]) count++;\n    }\n    sum += count;\n  }\n  return sum;\n\
    }\n", "  let sum = 0;\n  let n = 0;\n\n  for (let i = 0; i < arr.length; i++){\n\
    \    if (arr[i] >= 0) n++;\n    else {\n      if (sum < 0) sum += arr[i];\n  \
    \    else sum += arr[i] + arr[i]*Math.pow(10, n-1);\n    }\n  }\n  return n;\n\
    }\n", "\t// Count how many numbers have the first digit > 0.\n\tlet sum = 0;\n\
    \tarr.forEach((el) => {\n\t\tif (el > 0) sum += 1;\n\t});\n\treturn sum;\n}\n",
  "    return arr.reduce(function(n1,n2){\n        return n1 + Math.round(n2 / Math.pow(10,\
    \ Math.min(Math.log10(n1) + 2, 3)));\n    }, 0);\n}\n", "  var count = arr[0]==0\
    \ ? 0 : 1;\n  for(var i=1; i<arr.length; i++){\n    if(arr[i] + arr[i-1] > 0){\n\
    \      count += Math.floor(Math.log10(Math.abs(arr[i] + arr[i-1]))) + 1;\n   \
    \ } else {\n      count += Math.floor((Math.abs(arr[i]) + Math.abs(arr[i-1]))/10);\n\
    \    }\n  }\n  return count;\n}\n", "  if(arr.length == 0) return 0;\n  if(arr.length\
    \ == 1) return arr[0];\n  var count = 0;\n  var sign = 1;\n  for(var i=0; i<arr.length;\
    \ i++){\n    count += (sign < 0 ? arr[i] : -arr[i]) * Math.pow(10, Math.abs(arr[i]));\n\
    \    sign *= -1;\n  }\n  return count;\n}\n", "  let cnt = 0;\n  arr.forEach(e\
    \ => {\n    if (e > 0) cnt++;\n  });\n  return cnt;\n}\n", "\tvar arr1 = arr.filter(function(it){return\
    \ it!==null;});\n\treturn arr1.reduce(function(prev, curr){\n\t\treturn prev +\
    \ count_nums_it(curr);\n\t}, 0);\n}", "   if (!arr) return 0;\n   return arr.filter(function(n){\n\
    \      return Math.abs(n) > 0;\n   }).length;\n}\n", "  var count = 0;\n  for(var\
    \ i=0; i<arr.length; i++){\n    if(arr[i]>0){\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  // Return 0 if there are no numbers in the array.\n  if (!arr.length)\n\
    \    return 0;\n  return arr.map(function(n){\n    return Math.abs(n) - Math.min(n,\
    \ 0); // Convert negative numbers to positive ones.\n  }).filter(function(n){\n\
    \    return n; // Remove all zeroes.\n  }).length;\n}\n", "  var sum = 0;\n  var\
    \ count = 0;\n\n  for(var i=0; i < arr.length; i++){\n    sum += arr[i];\n\n \
    \   if(sum > 0){\n      count++;\n      sum -= arr[i];\n    }\n  }\n\n  return\
    \ count;\n}", "    var count = 0;\n    for(var i=0; i < arr.length; i++){\n  \
    \      var value = arr[i];\n        if(value < 0){\n            value *= -1;\n\
    \        }\n        var digit = value % 10;\n        if(digit > 0){\n        \
    \    count += 1;\n        }\n    }\n    return count;\n}\n", "\tlet result = 0;\n\
    \tfor(let i=0; i<arr.length; i++){\n\t\tconst n = arr[i];\n\t\tif(n<0){\n\t\t\t\
    result += Math.sign(n)*Math.abs(n);\n\t\t} else {\n\t\t\tresult += n;\n\t\t}\n\
    \t}\n\treturn result;\n}\n\n", "  if (arr === undefined)\n    return 0;\n  if\
    \ (arr.length == 0)\n    return 0;\n  var sum = 0;\n  var num;\n  for (var i =\
    \ 0, len = arr.length; i < len; i++)\n  {\n    num = new Number(arr[i]);\n   \
    \ if (num < 0)\n    {\n      num *= -1;\n      if (num < 0)\n        num += 10;\n\
    \    }\n    sum += num;\n  }\n  return sum;\n}\n", "  return count_nums_aux(arr,\
    \ 0, 0);\n}\n", "\tvar n = arr.length;\n\tfor(var i=0;i<n;i++){\n\t\tvar d = arr[i].toString();\n\
    \t\tvar n = d.length;\n\t\tfor(var j=0;j<n;j++){\n\t\t\tif(d[j]=='-') d[j] = 0;\n\
    \t\t}\n\t\tvar sum = 0;\n\t\tfor(var k=0;k<n;k++){\n\t\t\tsum += Math.abs(d[k])\
    \ || 0;\n\t\t}\n\t\tif(sum > 0){\n\t\t\treturn sum;\n\t\t}\n\t}\n\treturn 0;\n\
    }\n\nvar numbers = [-1, 11, -11];\nvar result = count_nums(numbers);", "  return\
    \ arr.filter(x => x > 0).length;\n}\n", "  var len = arr.length;\n  var n = 0;\n\
    \  for(var i = 0; i < len; i++){\n    if(arr[i] > 0){\n      n++;\n    }\n  }\n\
    \  return n;\n}\n", "  if (arr == null || arr.length == 0){\n    return 0;\n \
    \ }\n  var positives = 0;\n  var negatives = 0;\n  for (var i = 0; i <= arr.length;\
    \ i++){\n    var n = arr[i];\n    if (n >= 0){\n      positives += n;\n    } else\
    \ {\n      negatives += n\n    }\n  }\n  return positives + negatives;\n}\n",
  "  var sum = 0;\n  var len = arr.length;\n  for (var i = 0; i < len; i++) {\n  \
    \  sum += arr[i];\n  }\n  return sum;\n}\n", "    var n = 0;\n    for(var i =\
    \ 0, len = arr.length; i < len; i++){\n        n += arr[i]>0?arr[i]%10:0;\n  \
    \  }\n    return n;\n}\n", "  var res = 0\n  for (var i = 0; i < arr.length; i++)\
    \ {\n    if(arr[i] > 0){\n      res = res + Math.floor(arr[i]);\n    }\n  }\n\
    \  return res;\n}\n", "    let count = 0;\n    let sign = 0;\n    let first_num\
    \ = 1;\n    for (let i = 0; i < arr.length; i++){\n        let num = arr[i];\n\
    \        // check if number is negative\n        if (num < 0){\n            sign\
    \ = -1;\n            num = Math.abs(num);\n        }\n        // find number of\
    \ digits > 0, if zero, skip it\n        if (num < 10 && num != 0) continue;\n\
    \        // add to count if there are digits in number greater than 0\n      \
    \  count += first_num * Math.pow(10, first_num - 1);\n        first_num++;\n \
    \   }\n    return sign == -1 ? -count : count;\n}\n", "\treturn count_digits(arr,\
    \ function(num){\n\t\treturn count_digits(num, function(digit){\n\t\t\treturn\
    \ num >= 0 && digit > 0;\n\t\t});\n\t});\n}\n", "  let count = 0;\n  for (const\
    \ num of arr){\n    if (num >= 0) count += Math.log10(Math.abs(num));\n  }\n \
    \ return count;\n}\n", "    var count = 0, i;\n    for (i = 0; i < arr.length;\
    \ i++) {\n        count += count_digits(arr[i]);\n    }\n    return count;\n}\n",
  "\tvar count = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tvar num = arr[i];\n\
    \t\tif(num < 0){\n\t\t\tnum = Math.abs(num);\n\t\t\tvar digit = num.toString().charAt(0);\n\
    \t\t\tnum = -(num*Math.pow(10, digits.length));\n\t\t\tnum += digit*Math.pow(10,\
    \ digits.length-digit);\n\t\t}\n\t\tvar current_num = 0;\n\t\tfor(var j = 0; j\
    \ < digits.length; j++){\n\t\t\tcurrent_num += num % Math.pow(10, j);\n\t\t\t\
    num = Math.floor(num / Math.pow(10, j));\n\t\t}\n\t\tif(current_num > 0){\n\t\t\
    \tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "  var n = arr.length;\n  var sum\
    \ = 0;\n  for (var i = 0; i < n; ++i) {\n    sum += arr[i];\n  }\n  return sum;\n\
    }\n", "  var sum = 0;\n  for(var i in arr){\n    var num = arr[i];\n    if(num\
    \ >= 0){\n      sum += num;\n    }\n  }\n  return sum;\n}\n", "    // Check if\
    \ arr is an empty array\n    if (arr.length == 0) return 0;\n    // If there are\
    \ only two elements, return 1\n    if (arr.length == 2) return 1;\n    // For\
    \ every element in the array, call the count_nums function\n    return count_nums(arr[1:])\
    \ + count_nums(arr[0].split(\"\").reverse());\n}\n", "  let nums = arr.map(x =>\
    \ x % 10);\n  let counts = nums.reduce((acc, x) => acc + (x > 0), 0);\n  return\
    \ counts;\n}\n", "    // Write your code in JavaScript (but not in Python) here\n\
    }\ncount_nums([1, 11, -12, 2, 3, 3, -99, 0])\n</cell>\n<cell>\ncount_nums([-1,\
    \ 1, -2, 3])\n</cell>\n<text>\nThe Problem with your code\nIf you look at the\
    \ problem above, you will see that your solution is not efficient. After all,\
    \ you have to go through each number in the array and check if the sum equals\
    \ to zero and then add one to the result if it does. This is extremely inefficient!\
    \ In fact, since you only need to iterate over the first $n$ numbers, you can\
    \ do it in only $O(n)$ time.\n\nAs a consequence, you are not going to be able\
    \ to solve the above problem efficiently if you need to iterate over all $n$ numbers.\n\
    \nIn real life, we are given an array of $n$-digit integers and we need to count\
    \ how many numbers in the array have a sum of digits greater than zero.\n\nLet's\
    \ try to implement the function count_nums() efficiently.\n\n\n</text>\n<text>\n\
    Solution\nRun the following cell to solve the above problem efficiently.\n\n\n\
    </text>\n<cell>\n%%HTML\n<video width=\"320\" height=\"240\" controls>\n  <source\
    \ src=\"//upload.wikimedia.org/wikipedia/commons/transcoded/d/d2/Count_Digits_Efficiently.webm\"\
    \ type=\"video/webm\">\nYour browser does not support the video tag.\n</video>\n\
    </cell>\n<cell>\ndef count_nums(arr):\n    cnt = 0\n    \n    # Write your code\
    \ in JavaScript (but not in Python) here\n    \n    return cnt\n</cell>\n<cell>\n\
    count_nums([-1, 1, -2, 3])\n</cell>\n<text>\nCongratulations!\nYou have implemented\
    \ your first algorithm! It only took you $O(n)$ time complexity to solve the problem.\
    \ Hurray!\n\nBut, how will you know that you have implemented it efficiently?\
    \ We have not seen any algorithm which can solve this problem efficiently. The\
    \ problem can be very challenging and the number of possible solutions can be\
    \ very large. There might be a lot of numbers that have a sum of digits greater\
    \ than zero (but how many?), but the problem can be reduced to a simple counting\
    \ problem in $\\mathcal{O}(\\log n)$ (we do not need to go through all the numbers\
    \ in the array).\n\nHow will you know you have implemented it efficiently? We\
    \ have seen it before. For example, when we solve the problem of finding all numbers\
    \ whose sum equals $0$, we know that there exists a constant number of ways to\
    \ do it. If we see that in our solution, we know that there are $\\mathcal{",
  "  var count = 0;\n  for (var i = 0; i < arr.length; i++) {\n    var num = arr[i];\n\
    \    if (num < 0){\n      num *= -1;\n    }\n    if (num <= 9){\n      ++count;\n\
    \      continue;\n    }\n    \n    count = 9 - num % 10;\n    \n    if (count\
    \ == 9){\n      count++;\n      num -= 10;\n    }\n    \n    arr[i] = num;\n \
    \   \n    continue;\n  }\n  return count;\n}\n", "    var count = 0;\n    for(var\
    \ i of arr){\n        if(i > 0) count++;\n    }\n    return count;\n}", "  var\
    \ i = arr.length, sum = 0;\n  while (i--) {\n    sum += arr[i];\n    if (sum >\
    \ 9)\n      sum = 0;\n  }\n  return sum;\n}", "\tvar count = 0;\n\tarr.forEach(function(num)\
    \ {\n\t\tif (num > 0){\n\t\t\tvar rem = num % 10;\n\t\t\tif (rem > 0){\n\t\t\t\
    \tcount += 1;\n\t\t\t\tnum -= rem;\n\t\t\t}\n\t\t}\n\t});\n\treturn count;\n}\n",
  "    let sum = 0;\n    arr.forEach( v => {\n        sum += Math.abs(v);\n    });\n\
    \    return sum;\n}\n", "  let n = 0;\n  for (let i = 0; i < arr.length; i++){\n\
    \    const digit = arr[i];\n    if (digit >= 0){\n      if (digit < 10){\n   \
    \     n++;\n      }\n      else {\n        n = n - Math.floor((digit%10));\n \
    \     }\n    }\n    else {\n      n -= Math.floor(digit%10);\n    }\n  }\n  return\
    \ n;\n}\n", "    let result = 0;\n    for(let num of arr){\n        result +=\
    \ sum_digits(num);\n    }\n    return result;\n}\n", "  // We will iterate through\
    \ the given array and count the integers which have\n  // a sum of digits > 0.\n\
    \  // The algorithm works as follows:\n  // - we start at index 0 and count the\
    \ integers\n  // - for each number we add its signed digits, e.g. for -1 it will\
    \ add 1, for\n  //   11 1+1=2 and for -11 1+1=2\n  // - when we reach the end\
    \ of the given array we return the total number of\n  //   integers which sum\
    \ to greater than 0\n  // - we run it until we reach the end of the array because\
    \ we cannot know how\n  //   many numbers will sum to greater than 0 if we did\
    \ not reach the end\n  // - as we reach the end of the array and we still have\
    \ numbers which sum\n  //   to greater than 0 we can conclude that the answer\
    \ is in the range of\n  //   (-10, 10) - which means it takes 10 steps to reach\
    \ this point\n\n  // Get the length of the given array\n  var len = arr.length;\n\
    \n  // Loop through the array and add the numbers to a running total\n  var sum\
    \ = 0;\n  for (var i = 0; i < len; i++) {\n    sum += arr[i];\n  }\n\n  // If\
    \ the total is greater than 0 then return it, otherwise return 0\n  if (sum >\
    \ 0) {\n    return sum;\n  }\n\n  return 0;\n}\n", "    return arr.filter(function(num)\
    \ {\n        return (num < 0) ? -num.toString().split(\".\")[1].length : num.toString().split(\"\
    .\")[1].length;\n    }).length;\n}\n", "    var n = arr.length;\n    return (n>0)?\
    \ count_nums(arr.slice(0,n-1)) + arr[arr.length-1] : 0;\n}\n", "  return Math.max(...arr.filter(n\
    \ => n < 0).map(n => n.toString().split('').reduce((n, i) => (n += (n % 10)),\
    \ 0)))\n}\n", "    var count = 0;\n    var negative = false;\n    if (arr.length\
    \ == 0){\n        return 0;\n    }\n    for(var i=0; i<arr.length; i++){\n   \
    \     var num = arr[i];\n        if (num < 0){\n            negative = true;\n\
    \            num = -num;\n        }\n        var cur_digit = 0;\n        while\
    \ (num > 0){\n            cur_digit += num % 10;\n            num /= 10;\n   \
    \     }\n        if (cur_digit > 0){\n            count += 1;\n        }\n   \
    \ }\n    if (negative){\n        count *= -1;\n    }\n    return count;\n}\n",
  "    var sum=0;\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]>0){\n   \
    \         sum+=arr[i];\n        }\n    }\n    return sum;\n}\n", "    var sum\
    \ = 0;\n    var count = 0;\n    for(var i=0; i< arr.length; i++){\n        var\
    \ digit = arr[i];\n        if(digit < 0){\n            digit *= -1;\n        }\n\
    \        var d = digit;\n        while(d > 0){\n            sum += d % 10;\n \
    \           count += 1;\n            d /= 10;\n        }\n    }\n    return count;\n\
    }\n", "  let count = 0;\n  arr.map(n => {\n    count += Math.abs(n);\n  });\n\
    \  return count;\n}\n", "  return arr.map(function(n){\n    return n.reduce(function(a,b){\n\
    \      if(b>a) return b\n      else return a\n    })\n  }).reduce(function(a,b){\n\
    \    return a+b\n  }, 0)\n}\n", "  var sum = 0;\n  for(var i in arr){\n    sum\
    \ += arr[i];\n  }\n  return sum;\n}", "  var count = 0;\n  for (var i = 0; i <\
    \ arr.length; i++){\n    if (arr[i] < 0) {\n      count += arr[i] + Math.ceil(-arr[i]);\n\
    \    } else {\n      count += Math.floor(arr[i]);\n    }\n  }\n  return count;\n\
    }", "\tvar count = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tvar current\
    \ = arr[i];\n\t\tvar firstSignedDigit = current < 0 ? current : Math.floor(Math.abs(current));\n\
    \t\tvar firstNonZeroDigit = Math.max(current - firstSignedDigit, 0);\n\t\tfor(var\
    \ j = firstNonZeroDigit; j >= 0; j--){\n\t\t\tcount += Math.floor(Math.abs(j))\
    \ + (j > 0 ? j : 0);\n\t\t\tif(count > 9){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn count;\n}", "    return count_nums_helper(arr).count;\n}\n", "\tlet\
    \ sum = 0;\n\tfor(let num of arr){\n\t\tif(num < 0){\n\t\t\tsum -= Math.pow(10,\
    \ -num);\n\t\t}else{\n\t\t\tsum += Math.pow(10, num);\n\t\t}\n\t}\n\treturn sum;\n\
    }\n", "    let i = 0;\n    let count = 0;\n    let first_sign = 0;\n    for(let\
    \ i of arr){\n        count += i / 10;\n        first_sign = (i % 10) < 0;\n \
    \       i /= 10;\n    }\n    return count + first_sign;\n}\n", "    let count\
    \ = 0;\n    arr.forEach(element => {\n        if(element < 0) {\n            element\
    \ *= -1;\n            while(element < 0) {\n                count++;\n       \
    \         element *= -1;\n            }\n        } else {\n            while(element\
    \ > 0) {\n                count++;\n                element /= 10;\n         \
    \   }\n        }\n    });\n    return count;\n}\n", "\tvar n = 0;\n\tfor(var i\
    \ = 0; i < arr.length; i++) {\n\t\tvar num = arr[i];\n\t\tif(num >= 0)\n\t\t\t\
    n += num;\n\t\telse\n\t\t\tn += Math.pow(10, Math.abs(num));\n\t}\n\treturn n;\n\
    }\n", "\tlet count = 0; //Initialize count to zero\n\t\n\t//If arr is empty return\
    \ the value of count\n\tif(arr.length === 0){\n\t\treturn count\n\t}\n\t\n\t//Loop\
    \ through arr and add each value to count\n\tfor(let i = 0; i < arr.length; i++){\n\
    \t\t//If the sum of digits of the current element in the array is greater than\
    \ 0\n\t\t//then increment the count by 1\n\t\tif(arr[i] > 0){\n\t\t\tcount +=\
    \ arr[i];\n\t\t}\n\t}\n\treturn count;\n}\n", "    var counter=0;\n    for(var\
    \ i of arr){\n        var valToTest = i;\n        if(valToTest < 0)\n        {\n\
    \            valToTest = valToTest + 11;\n        }\n        var digits = Math.floor(valToTest/10);\n\
    \        counter = counter + (digits*digits);\n    }\n    return counter;\n}",
  "  //Write your code here!\n}\n", "    var lens = arr.map(function(x){return Math.abs(x)});\n\
    \    return lens.reduce(function(a, b){return a+b})\n}\n", "  var digits = [];\n\
    \  arr.forEach(function(x){\n    var str = x.toString();\n    digits = digits.concat(str.match(/[\\\
    d-]/g).map(function(d){return parseInt(d);}));\n  });\n  return digits.length;\n\
    }\n", "  // Initialize count and sum to 0.\n  // If first element is negative,\
    \ increment count.\n  // If first element is positive, sum the rest of the array.\n\
    \  // If first element is not positive and negative is an integer,\n  // then\
    \ consider it negative unless it is larger than the sum of all elements.\n  let\
    \ count = 0;\n  let sum = 0;\n\n  for (let i = 0; i < arr.length; i++){\n    //\
    \ If i is positive, add elements to sum.\n    if (arr[i] >= 0){\n      // If first\
    \ element has negative sign, decrement count.\n      if (arr[i] < 0){\n      \
    \  count --;\n        // If first element has positive sign, increment count.\n\
    \      } else {\n        sum += arr[i];\n      }\n    // If first element has\
    \ a positive sign, decrement sum.\n    } else {\n      sum -= arr[i];\n    }\n\
    \  }\n\n  // Return count if the last element has negative sign and sum is positive,\n\
    \  // else return 0.\n  return count - (arr.length - 1) * Math.abs(sum);\n}\n",
  "  return _.reduce(arr, function(sum, num){\n    return sum + _.reduce(_.map(num,\
    \ function(x) { return x % 10; }), function(sum, x){\n      return sum + x;\n\
    \    });\n  }, 0);\n}\n", "    if (arr.length === 0){\n        return 0;\n   \
    \ }\n    // If the first digit is a negative number, then add that to the total\n\
    \    // since the first digit of a number is negative.\n    var first = arr[0];\n\
    \    if (first < 0){\n        return Math.abs(first) + count_nums(arr.slice(1));\n\
    \    }\n    // If the first two digits are the same then add the next number as\
    \ it's\n    // second digit.\n    else if (first === first){\n        return count_nums(arr.slice(1));\n\
    \    }\n    // If the first two digits differ then return the sum of the first\
    \ two\n    // digits plus one plus the number of remaining numbers with that sum.\n\
    \    else {\n        return first + 1 + count_nums(arr.slice(2));\n    }\n}\n",
  "\treturn arr.filter(function(x){\n\t\treturn x > 0;\n\t}).length;\n}", "  var cnt\
    \ = 0;\n  var last = 0;\n  var positive = 0;\n  for(var i=0;i<arr.length;i++){\n\
    \    var num = arr[i];\n    if( num < 0 ){\n      num *= -1;\n      cnt ++;\n\
    \    }\n    else if( num > 0 ){\n      cnt ++;\n      last += Math.floor(num/10);\n\
    \      positive += Math.floor(num%10);\n    }\n  }\n  return positive > 0 ? positive\
    \ : cnt;\n}\n", "  var count = 0;\n  var i = 0;\n  while (i < arr.length) {\n\
    \    count += arr[i++] * i;\n  }\n  return count;\n}\n", "  var total = 0;\n \
    \ for(var i = 0; i < arr.length; i++){\n    total += arr[i];\n    if(total < 0){\n\
    \      total += 10;\n    }\n  }\n  return total;\n}\n", "    var result = 0;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        if(arr[i] >= 0){\n      \
    \      result += arr[i];\n        }\n    }\n    return result;\n}\n", "\tvar sum\
    \ = 0;\n\tfor(var i=0;i<arr.length;i++){\n\t\tsum+=arr[i]>0?arr[i]:-1*Math.abs(arr[i]-Math.floor(arr[i]));\n\
    \t}\n\treturn sum;\n}", "    // write your code in JavaScript (Node.js 8.9.4)\n\
    }\ncount_nums([-90, 0, 0, 1, 23, -9, 100])\n</cell>\n<text>\nSolution\n\n</text>\n\
    <cell>", "  var sum = 0;\n  arr.forEach(function(x){\n    if (x >= 0) sum += x;\n\
    \  });\n  return sum;\n}\n", "  if(arr == null || !Array.isArray(arr)){\n    return\
    \ 0;\n  }\n  var count_arr = [];\n  arr.forEach(function(item) {\n    if(item\
    \ < 0){\n      count_arr.push(-item);\n    }else{\n      count_arr.push(item);\n\
    \    }\n  })\n  return count_arr.reduce(function(a, b) {\n    return a + b;\n\
    \  }, 0)\n}\n", "\tvar count = 0;\n\tfor (var i = 0; i < arr.length; i++) {\n\t\
    \tcount += arr[i].toString().split('').reduce(function (r, e, i, a) {\n\t\t\t\
    return r + e * (i < a.length - 1 ? 0 : 1);\n\t\t});\n\t}\n\treturn count;\n}\n",
  "  let count = 0;\n  for (let n of arr) {\n    for (let j = 0; j < n.length; j++)\
    \ {\n      count += Number(n[j]);\n    }\n  }\n  return count;\n}\n", "    arr.sort();\n\
    \    var sum = 0;\n    var first = 0;\n    var last = arr.length-1;\n    var count\
    \ = 0;\n    while (first < last){\n        var d = arr[first];\n        var sum\
    \ = sum + d;\n        if (sum > 9){\n            count = count + 1;\n        \
    \    sum = sum - 9;\n        }\n        first = first + 1;\n    }\n    return\
    \ count;\n}\n", "  let result = 0;\n  for (let i of arr) {\n    result += Math.floor(i/10);\n\
    \  }\n  return result;\n}\n", "  let n = 0;\n  for (const num of arr){\n    n\
    \ += count_nums(num);\n  }\n  return n;\n}\n", "\tlet sum = 0;\n\tlet negative\
    \ = true;\n\tfor (let num of arr){\n\t\tconst digits = num.toString().split('').map(Number);\n\
    \t\tif (negative){\n\t\t\tdigits[0] *= -1;\n\t\t}\n\t\tlet carry = digits.reduce((sum,\
    \ digit, i) => {\n\t\t\treturn (sum + digit + parseInt(digits[i], 10));\n\t\t\
    }, 0);\n\t\tif (carry){\n\t\t\tsum += carry;\n\t\t}\n\t\tnegative = !negative;\n\
    \t\tsum += num;\n\t}\n\treturn sum;\n}\n", "    if(arr.length == 0){\n       \
    \ return 0;\n    }\n    var cnt = 0;\n    var sum = 0;\n    for(var i = 0; i <\
    \ arr.length; i++){\n        sum += arr[i];\n        if(sum > 0){\n          \
    \  cnt++;\n        }\n    }\n    return cnt;\n}\n", "  let cnt=0;\n  for(let n\
    \ of arr){\n    cnt=n+cnt;\n  }\n  return cnt;\n}\n", "  let count = 0;\n  for(let\
    \ el of arr){\n    if(el > 0){\n      count++;\n    }\n  }\n  return count;\n\
    }\n", "  // Get largest unsigned integer greater than or equal to arr[i].\n  var\
    \ max = Math.max.apply(null, arr)\n  return arr.filter(function(val){\n    return\
    \ (val < 0 || val >= max)\n  }).length\n}\n", "  var ret = 0\n  for (var i = 0;\
    \ i < arr.length; i++){\n    if (arr[i] > 0) ret++\n  }\n  return ret\n}\n", "\t\
    var nums = 0;\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0) {\n\
    \t\t\tnums++;\n\t\t}\n\t}\n\treturn nums;\n}\n", "  let len = arr.length;\n  let\
    \ result = 0;\n\n  for (let i = 0; i < len; i++) {\n    let num = arr[i];\n  \
    \  if(num < 0){\n      num = -num;\n      result = -result;\n    }\n\n    result\
    \ += (Math.floor(num / Math.pow(10, num.length - 1)) % 10); // % means modulus\
    \ (remainder after division)\n  }\n\n  return result;\n}\n", "  // Loop through\
    \ the numbers:\n  var counts = [];\n  for (var i = 0; i < arr.length; i++){\n\
    \    // Add the number of positive digits >= the sum of the digits to the total\n\
    \    counts.push(count_nums_digits(arr[i]) + count_nums_digits(arr[i]));\n  }\n\
    \  // Return the sum of the positive digits\n  return counts[counts.length-1];\n\
    }", "  if(arr.length > 0){\n    return arr.reduce(function(acc, num){\n      return\
    \ num<0 ? acc + count_nums(Math.abs(num)) : acc+1;\n    }, 0);\n  }else{\n   \
    \ return 0;\n  }\n}\n", "    var sum = 0;\n    for(var i = 0; i < arr.length;\
    \ i++) {\n        sum += (arr[i] > 0 ? arr[i] : -arr[i]);\n    }\n    return sum;\n\
    }\n", "  var count = 0;\n  for (var i in arr) {\n    var nums = arr[i].toString().split(\"\
    \");\n    for (var j in nums) {\n      var num = parseInt(nums[j], 10);\n    \
    \  if (num > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n",
  "  let negativeSum = 0\n  for(let i=0;i<arr.length;i++){\n    if(arr[i]<0){\n  \
    \    negativeSum += Math.abs(arr[i])\n    }else{\n      negativeSum += arr[i]\n\
    \    }\n  }\n  return arr.reduce((sum,n)=>{\n    if(sum<0) return sum\n    return\
    \ sum + Math.abs(n)\n  }, negativeSum)\n}\n", "  if (arr == null){\n    return\
    \ 0;\n  }\n  var count = 0;\n  for (var i in arr){\n    if (arr[i] > 0){\n   \
    \   count += arr[i]\n    }\n  }\n  return count;\n}\n", "    if(!arr.length) return\
    \ 0;\n    var l = arr[0] < 0 ? -arr[0] : arr[0],\n        sum = 0;\n    for(var\
    \ i = 1; i < arr.length; ++i){\n        var digit = arr[i];\n        if(digit\
    \ < 0 || digit > 9 || arr[0] + digit > 9){\n            sum += arr[0] < 0 ? -arr[0]\
    \ : arr[0];\n            sum += digit;\n        } else {\n            sum += digit;\n\
    \        }\n    }\n    return sum + l;\n}\n", "\treturn arr.filter(function(x){\n\
    \t\treturn x > 0;\n\t}).length;\n}\n", "    var count = 0;\n    var negative =\
    \ false;\n    arr.forEach(function(v){\n        if (v < 0){\n            negative\
    \ = true;\n            v = -v;\n        }\n        var d = Math.abs(v);\n    \
    \    if (d === 1){\n            count++;\n        } else if (d > 1){\n       \
    \     count += Math.floor(Math.log(d) / Math.LN2);\n        }\n    });\n    return\
    \ negative ? -count : count;\n}\n", "\treturn arr.reduce(function(acc, num){\n\
    \t\treturn num > 0 ?\n\t\t\tacc + count_digits(Math.abs(num)) :\n\t\t\tacc;\n\t\
    }, 0);\n}\n", "  // Write your code here\n  let result = 0;\n  for(let i=0; i<arr.length;\
    \ i++){\n    if(arr[i]>0){\n      result++;\n    }\n  }\n  return result;\n}",
  "  return arr.filter(n => n < 0).length\n}\n", "\tlet count = 0;\n\tfor(let i =\
    \ 0; i < arr.length; i++){\n\t\tif(arr[i] < 0)\n\t\t\tcontinue;\n\t\tfor(let j\
    \ = 0; j < arr[i].toString().length; j++){\n\t\t\tif(arr[i] >= Math.pow(10, j+1))\n\
    \t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n", "    if(arr.length == 0){\n\
    \        return 0\n    }\n    let sum = 0;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] < 0){\n            arr[i] *= -1;\n        }\n     \
    \   sum += arr[i];\n    }\n    return sum;\n}\n", "    if(arr.length === 0) return\
    \ 0;\n    let count = 0;\n    for(let el of arr){\n        if(el >= 0){\n    \
    \        count += Math.abs(el);\n        }\n        else if(el < 0){\n       \
    \     count += Math.abs(el);\n            el *= -1;\n        }\n    }\n    return\
    \ count;\n}\n", "  var cnt = 0;\n  arr.forEach(function(x){\n    if(x === 0) return;\n\
    \    var digit = x % 10;\n    while(digit){\n      cnt++;\n      digit = digit\
    \ > 0 ? digit-1 : digit + 10;\n    }\n  });\n  return cnt;\n}\n", "    let firstPositiveDigit\
    \ = -1;\n    let total = 0;\n    for(let num of arr){\n        total += num;\n\
    \        if(total >= 10){\n            total -= 10;\n            firstPositiveDigit\
    \ = num;\n        }\n    }\n    return arr.length - (arr.indexOf(firstPositiveDigit)\
    \ + 1);\n}\n", "    // Return 0 if no array is passed\n    if (arr === null ||\
    \ arr === undefined){\n        return 0\n    }\n\n    // Create a helper function\
    \ which loops through each value in the array\n    // and checks whether or not\
    \ to add to our sum.\n    function check_digit(current_digit){\n        if (current_digit\
    \ >= 0){\n            // If it's positive, then it can have a sum of digits >\
    \ 0\n            if (current_digit > 0){\n                return (current_digit\
    \ + count_nums(arr)); // add this digit to the sum\n            }\n          \
    \  // If it's negative, then it's negative, and it's sign should be the first\
    \ \n            // digit in the sum, so we need to negate it:\n            return\
    \ -count_nums(arr.slice(1)) + current_digit; // add this digit to the sum\n  \
    \      }\n        return current_digit; // return this digit if its negative\n\
    \    }\n\n    // Use a for loop to go through each value in the array\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        // Check if this element has a sum\
    \ > 0\n        if (arr[i] > 0){\n            // If so, add this digit to the sum\n\
    \            arr[i] += check_digit(arr[i]); // add the current digit to the sum\n\
    \        } else {\n            // If not, the digit has a sum of digits < 0\n\
    \            // If the first element of the array is negative, then the sum\n\
    \            // should be 0, so we need to negate it before adding it to the sum\n\
    \            if (arr[0] < 0){\n                arr[0] = -count_nums(arr.slice(1))\
    \ + arr[0]; // negate this digit before adding\n            }\n            arr[0]\
    \ += check_digit(arr[0]); // add the current digit to the sum\n        }\n   \
    \ }\n    // Return the total of the array\n    return arr.reduce((a, b) => a +\
    \ b); // return the total of the array\n}\n", "  if (arr.length == 0) return 0;\n\
    \  var sum = 0;\n  for (var i=0; i<arr.length; i++) {\n    sum += ((arr[i]<0)?arr[i]*arr[i]+Math.abs(arr[i])*Math.abs(arr[i])+1:arr[i]);\n\
    \  }\n  return sum;\n}\n", "  return arr.filter(function(num){\n    return num\
    \ > 0\n  }).length;\n}\ncount_nums([-12, 13, -17, 18, 20, -25, -6, -124, -10,\
    \ 23, -29, 30, -14, -48, -6, -20, -24, 23, -13, -45, -12, -6, 10, -24, 30, -39,\
    \ -13, -4, -20, -7, 22, -7, -10, -8, 22, -13, -16, -6, 10, -5, -20, -10, -9, -16,\
    \ -10, -9, -12, -7, 1, -9, -4, -9, -6, -4, -9, -4, -6, -8, 2, -5, -8, -9, -13,\
    \ -13, -9, -13, -12, -7, -5, -7, -9, -7, -6, -9, -7, -4, -7, -2, -10, -5, -10,\
    \ 10, -6, -13, -10, -6, -5, -8, 3, -6, -13, -12, -4, -6, -2, -5, -4, -5, -9, -4,\
    \ -9, -6, -10, -5, -9, -9, 10, -9, -12, -9, -4, -7, -4, -5, -10, -9, -7, 1, -7,\
    \ -6, -9, -9, -9, -9, -5, -7, -5, -8, -4, -9, -12, -6, -9, -9, -7, -4, -4, -7,\
    \ -6, -5, -4, -5, -7, -5, -7, 10, -5, -7, -9, -7, -10, -9, -7, -6, -9, -9, -7,\
    \ -4, -9, -9, -9, -4, -7, -5, -9, -9, -9, -10, -7, -6, -10, -10, -7, -6, -7, -9,\
    \ -9, -10, -9, -7, -9, -7, -4, -9, -7, -10, -9, -10, -7, -5, -7, -10, -10, -10,\
    \ -10, -10, -9, -6, -4, -4, -6, -8, -9, -6, -9, -9, -4, -7, -7, -9, -9, -9, -9,\
    \ -7, -5, -9, -7, -9, -4, -7, -6, -9, -10, -9, -7, -6, -5, -7, -10, -9, -7, -7,\
    \ -9, -9, -10, -9, -7, -5, -6, -7, -7, -10, -9, -10, -5, -9, -9, -7, -7, -10,\
    \ -7, -9, -5, -7, -9, -4, -5, ", "\tlet result = 0;\n\tfor(let i = 0; i < arr.length;\
    \ i++){\n\t\tresult += (arr[i] > 0) ? Math.abs(arr[i]) : -Math.abs(arr[i]);\n\t\
    }\n\treturn result;\n}\n", "\tlet sum = 0;\n\tfor(let item of arr){\n\t\tif(item\
    \ < 0){\n\t\t\tsum++;\n\t\t\titem = Math.abs(item);\n\t\t}\n\t\tsum += item;\n\
    \t}\n\treturn sum;\n}", "\tlet sum = 0;\n\tfor (const num of arr) {\n\t\tif (num\
    \ >= 0) sum += num;\n\t\telse sum += Math.abs(num);\n\t}\n\treturn sum;\n}\n",
  "\tvar count = 0;\n\tfor(var i=0; i < arr.length; i++){\n\t\tvar num = arr[i];\n\
    \t\tif(num < 0){\n\t\t\tnum = -num;\n\t\t}\n\t\tcount += (num % 10);\n\t}\n\t\
    return count;\n}\n", "  var count = 0;\n  for (var i=0; i<arr.length; i++){\n\
    \    count += (arr[i]+\"\").length;\n  }\n  return count;\n}\n", "  var total\
    \ = 0;\n  for (var i of arr){\n    total += Math.abs(i);\n  }\n  return total;\n\
    }\n", "  return arr.reduce(function(a, b){\n    return a + count_digits(b);\n\
    \  }, 0)\n}\n", "  // Initialize a helper variable and an accumulator\n  let count\
    \ = 0;\n  let accum = 0;\n  \n  // Loop through the array, updating both the accumulator\
    \ and count\n  arr.forEach((num) => {\n    // If this number is positive, add\
    \ it to the accumulator and increment\n    // the count\n    if(num > 0){\n  \
    \    accum += num;\n      count++;\n    }\n  });\n\n  // Return the count and\
    \ accumulator\n  return [count, accum];\n}\n", "    let count = 0;\n    for(let\
    \ i=0;i<arr.length;i++){\n        count += count_digits(arr[i]);\n    }\n    return\
    \ count;\n}", "    return arr.reduce(function(prev, cur){\n        if(prev ===\
    \ 0) return cur;\n        if(prev !== 0) return prev;\n        if(cur < 0) cur\
    \ *= -1;\n        if(cur > 0) return prev + count_digits(Math.abs(cur));\n   \
    \     return 0;\n    });\n}\n", "  var sum_digits = arr.reduce(function(sum, num){\n\
    \    var str = num.toString(10);\n    return sum + count_digits(str);\n  }, 0);\n\
    \  return count_digits(sum_digits.toString(10));\n}\n", "    var counts = [];\n\
    \    for(var i = 0; i < arr.length; i++){\n        var digits = parseInt(arr[i]);\n\
    \        if(digits < 0){\n            digits = -digits;\n        }\n        else\
    \ if(digits > 0){\n            counts.push(digits);\n        }\n    }\n    return\
    \ counts.length ? counts.reduce(function(a, b){return a + b}) : 0;\n}\n", "  \
    \  if (arr === []) { return 0; }\n    var count = 0; \n    var len = arr.length;\
    \ \n    var first = 0; \n    var sum = 0; \n    for(var i=0; i< len; i++){\n \
    \       if(arr[i] > 0) sum += arr[i];\n        else { \n            if(!first\
    \ && sum <= 0) count++;\n            first = i; \n            sum = 0; \n    \
    \    }\n    }\n    if(!first && sum <= 0) count++;\n    return count;\n}\n", " \
    \  var n = arr.length,\n       result = 0;\n   while (n) {\n      if (n % 10 >=\
    \ 2 && n % 10 <= 9) ++result;\n      n /= 10;\n   }\n   return result;\n}\n",
  "  return arr.reduce((acc, elem) => {\n    let s = Math.abs(elem);\n    return s\
    \ + acc > 0 ? s + acc : acc;\n  }, 0);\n}\n", "    \n    arr = arr.slice();\n\
    \    var arr1 = [];\n    for(var i=0; i<arr.length; i++){\n        if(arr[i] >=\
    \ 0){\n            arr1.push(arr[i]);\n        }\n    }\n    return arr1.reduce((function(sum,\
    \ n){\n        if(n >= 0) sum += Math.abs(n%10);\n        return sum;\n    }),\
    \ 0);\n}\n", "  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n  \
    \  if (arr[i] > 0) {\n      result += arr[i];\n    }\n  }\n  return result;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
