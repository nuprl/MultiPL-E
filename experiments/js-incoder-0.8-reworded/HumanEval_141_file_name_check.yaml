name: HumanEval_141_file_name_check
language: js
prompt: "//Create a function which takes a string representing a file's name, and\
  \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  // A file's name is considered to be valid if and only if all the following conditions\
  \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n// the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
  example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\n\
  function file_name_check(file_name){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = file_name_check;\n  assert.deepEqual(candidate(\"example.txt\"),\"Yes\");\n\
  \  assert.deepEqual(candidate(\"1example.dll\"),\"No\");\n  assert.deepEqual(candidate(\"\
  s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  MY16FILE3.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"\
  No\");\n  assert.deepEqual(candidate(\"_Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"\
  ?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"/this_is_valid.dll\"),\"\
  No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"),\"No\");\n  assert.deepEqual(candidate(\"\
  this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"this_is_valid.txtexe\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"),\"No\");\n \
  \ assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"\
  ),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n\
  \  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();"
completions: ["    var re = /^[\\w\\.]*$/i;\n    \n    // If file name contains only\
    \ numbers, return \"No\"\n    if(file_name.match(/\\d/))\n        return \"No\"\
    ;\n    \n    // If file name contains only letters, return \"No\"\n    if(file_name.match(/[a-z]/))\n\
    \        return \"No\";\n\n    // If file name contains more than three digits,\
    \ return \"No\"\n    if(file_name.match(/[0-9]/g).length > 3)\n        return\
    \ \"No\";\n    \n    // If file name contains only 'dot', return \"No\"\n    if(file_name.match(/\\\
    ./g).length > 1)\n        return \"No\";\n    \n    // If file name does not start\
    \ with letter, return \"No\"\n    if(file_name.match(/^[^a-zA-Z].*/) != null)\n\
    \        return \"No\";\n    \n    // If file name contains substring 'txt' or\
    \ 'exe' or 'dll', return \"Yes\"\n    return !file_name.match(/txt|exe|dll/) ?\
    \ \"No\" : \"Yes\";\n}\n", "  var fname = file_name;\n  if (fname.length == 0\
    \ || fname.length >= 3 || fname[fname.length-1] == '.' || fname[fname.length-2]\
    \ != '.' || fname[fname.length-1][0] != 'A' || fname[fname.length-1][0] != 'a'\
    \ || fname[fname.length-2] != 'Z' || fname[fname.length-2] != 'z'){\n    return\
    \ 'No';\n  }\n  if (fname.substr(0,fname.length-2) != \"..\") { //no leading '..'\n\
    \    var ext = file_name_extension(fname);\n    var ext2 = file_name_extension(fname);\n\
    \    if (ext2 == 'txt'){\n      return 'Yes';\n    }\n  }\n  return 'No';\n}\n",
  "  \n  // Step 1. Remove all special characters from file_name\n  // Examples:\n\
    \  // >>> file_name_check('example-file')\n  // \"example-file\"\n  // >>> file_name_check('example/file')\n\
    \  // \"example-file\"\n  // >>> file_name_check('example..file')\n  // \"example-file\"\
    \n  // >>> file_name_check('example#file')\n  // \"example-file\"\n  file_name\
    \ = file_name.replace(/\\W/g, '');\n  \n  // Step 2. Remove all blank spaces\n\
    \  // Examples:\n  // >>> file_name_check('example')\n  // \"example\"\n  // >>>\
    \ file_name_check('example    ')\n  // \"example\"\n  // >>> file_name_check('example\
    \ ')\n  // \"example\"\n  file_name = file_name.replace(/\\s+/g, '');\n  \n  //\
    \ Step 3. Make sure that the substring before the dot is valid and that it starts\n\
    \  // with a letter from the latin alphabet ('a' - 'z')\n  // Examples:\n  //\
    \ >>> file_name_check('abc')\n  // \"No\"\n  // >>> file_name_check('abc.')\n\
    \  // \"No\"\n  // >>> file_name_check('abc ')\n  // \"No\"\n  // >>> file_name_check('abc\
    \ def')\n  // \"No\"\n  // >>> file_name_check('abc def.')\n  // \"No\"\n  //\
    \ >>> file_name_check('abc def ')\n  // \"No\"\n  file_name = file_name.replace(/[^a-zA-Z]/g,\
    \ '');\n  \n  // Step 4. Make sure that the substring after the dot is one of\
    \ the following\n  // ['txt', 'exe', 'dll']\n  // Examples:\n  // >>> file_name_check('txtfile')\n\
    \  // \"No\"\n  // >>> file_name_check('exefile')\n  // \"No\"\n  // >>> file_name_check('dllfile')\n\
    \  // \"No\"\n  file_name = file_name.replace(/\\.[^\\.]*$/, '');\n  \n  // Step\
    \ 5. Return the result.\n  // Examples:\n  // >>> file_name_check('example-file')\n\
    \  // \"Yes\"\n  // >>> file_name_check('1')\n  // \"No\"\n  return file_name;\n\
    }\n", "    var file_name_regex = /^[0-9]{1,3}\\.[a-z]{1,3}$/\n    var dot_regex\
    \ = /\\.[a-z]{1,3}$/\n    var file_ext = file_name.substring(file_name.lastIndexOf('.')+1,\
    \ file_name.length)\n    var file_ext_regex = /txt|exe|dll/\n    \n    if(file_name_regex.test(file_name)){\n\
    \        if(dot_regex.test(file_ext)){\n            if(!file_ext_regex.test(file_ext)){\n\
    \                return \"No\"\n            }else{\n                return \"\
    Yes\"\n            }\n        }else{\n            return \"No\"\n        }\n \
    \   }else{\n        return \"No\"\n    }\n}\n", "    // 1. Check the file name\
    \ has more than 3 digits in it.\n    var file_name = file_name.toLowerCase();\n\
    \    var file_name = file_name.substring(0,(file_name.length-3));\n    var is_valid\
    \ = true;\n    var has_digits = false;\n    var dot_position = 0;\n    var current_char\
    \ = \"\";\n    \n    for(var i = 0; i < file_name.length; i++){\n        if(file_name.charAt(i)\
    \ >= \"0\" && file_name.charAt(i) <= \"9\"){\n            has_digits = true;\n\
    \        }\n        current_char = file_name.charAt(i);\n        \n        if(current_char\
    \ == \".\" && dot_position == 0){\n            dot_position = i;\n        }\n\
    \        \n        if((current_char == \"a\" && has_digits == false) || (current_char\
    \ == \"A\" && has_digits == false)){\n            is_valid = false;\n        }\n\
    \    }\n    \n    if(dot_position > 0){\n        dot_position--;\n        if(file_name.charAt(dot_position)\
    \ == \"txt\"){\n            is_valid = true;\n        }\n        else if(file_name.charAt(dot_position)\
    \ == \"exe\"){\n            is_valid = true;\n        }\n        else if(file_name.charAt(dot_position)\
    \ == \"dll\"){\n            is_valid = true;\n        }\n    }\n    \n    return\
    \ is_valid;\n}\n", "    let pattern = /^[0-9][0-9][.][a-zA-Z][a-zA-Z]+$/;\n  \
    \  return pattern.test(file_name);\n}\n", "    // Declare a variable to hold our\
    \ return value.\n    var returnValue = 'No';\n    // Check if the file name is\
    \ valid.\n    if (/[^0-9\\./][^0-9]./ig.test(file_name)){\n        // If it is\
    \ not valid, return \"No\".\n        returnValue = 'No';\n    } else {\n     \
    \   // Otherwise, the file is valid.\n        // Remove any white space from the\
    \ beginning and end of the file's name.\n        file_name = file_name.replace(/^\\\
    s+/,'').replace(/\\s+$/g,'');\n        // Check if the file's name is valid\n\
    \        var regEx = /^[a-zA-Z][a-zA-Z0-9.]+$/;\n        // If the file's name\
    \ is not valid, return \"No\".\n        if (!regEx.test(file_name)){\n       \
    \     returnValue = 'No';\n        } else {\n            // If the file's name\
    \ is valid, then return \"Yes\".\n            returnValue = 'Yes';\n        }\n\
    \    }\n    // Return the valid file's name.\n    return returnValue;\n}\n", " \
    \   var file_name = file_name.toLowerCase()\n    var noOfChars = file_name.length\n\
    \    var isFileValid = false\n    var isDotValid = false\n    var isSubstringValid\
    \ = false\n    var validChars = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"\
    h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"\
    u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"\
    H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"\
    U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\n    \n    var dotIndex = file_name.indexOf(\"\
    .\", 0)\n    var isValid = noOfChars == 3 && dotIndex > 0 && \n        isValidSubstring(file_name,\
    \ dotIndex) && isValidSubstring(file_name, dotIndex + 1) && \n        isValidSubstring(file_name,\
    \ dotIndex + 2) && isValidSubstring(file_name, dotIndex + 3)\n\n    if(isValid){\n\
    \        isFileValid = true\n    }\n    return isFileValid\n}\n", "    // Your\
    \ code goes here!\n    var pattern = /^[0-9]*\\.(txt|exe|dll)$/i;\n    return\
    \ pattern.test(file_name);\n}\n", "    var regex = /^[0-9]\\.(txt|exe|dll)$/i;\n\
    \    if(regex.test(file_name)){\n        return 'Yes';\n    }\n    return 'No';\n\
    }\n", "\tfile_name_check_regexp = /^\\d+\\.[a-zA-Z]+$/;\n\treturn file_name_check_regexp.test(file_name);\n\
    }", "    var pattern = /\\.\\w+$/i;\n    var pattern_2 = /^[a-zA-Z]+/;\n    var\
    \ pattern_3 = /^\\d/;\n    \n    if(pattern.test(file_name)){\n        if(pattern_3.test(file_name[0])\
    \ || pattern_3.test(file_name[1])){\n            if(pattern_2.test(file_name.substring(1,\
    \ file_name.length - 1))) return \"No\";\n            return \"Yes\";\n      \
    \  }\n        return \"No\";\n    }\n    return \"No\";\n}\n", "\tif( file_name.match(\
    \ /^\\d{1,3}\\.[a-z]/ ) && ( file_name.indexOf( '.' ) != 0 ) ){\n\t\t\n\t\tvar\
    \ file_extension = file_name.substring( file_name.lastIndexOf( '.' ) + 1 ).toLowerCase();\n\
    \t\tif( file_extension.match( /txt|exe|dll/ ) ){\n\t\t\treturn \"Yes\";\n\t\t\
    } else {\n\t\t\treturn \"No\";\n\t\t}\n\t\t\n\t} else {\n\t\treturn \"No\";\n\t\
    }\n}\n", "    var test_strings = file_name.split('.');\n    var test_string =\
    \ test_strings[test_strings.length-1];\n    var test_string_length = test_string.length;\n\
    \    \n    var result = true;\n    \n    for(var i =0; i <test_strings.length\
    \ - 1; i++){\n        var test_string = test_strings[i];\n        var test_string_length\
    \ = test_string.length;\n        \n        if(test_string_length > 3 || !(/^[a-z0-9]+$/.test(test_string[0]))\
    \ && (test_string[0] != \".\") || !(/^[a-z0-9]+$/.test(test_string[test_string_length-1]))\
    \ && (test_string[test_string_length-1] != \"txt\") && !(/^[a-z0-9]+$/.test(test_string[test_string_length-1]))\
    \ && (test_string[test_string_length-1] != \"exe\") && !(/^[a-z0-9]+$/.test(test_string[test_string_length-1]))\
    \ && (test_string[test_string_length-1] != \"dll\")){\n            result = false;\n\
    \            break;\n        }\n    }\n    \n    return result ? \"Yes\" : \"\
    No\";\n}\n", "\t// Initialize a boolean variable called is_valid, set to false\n\
    \tis_valid = false;\n\t\n\t// Write the code inside the condition that checks\
    \ if the file's name is valid\n\tif((file_name.indexOf(\".\") != -1) && (file_name.substr(0,1)\
    \ == \"a\") \n\t\t&& (file_name.substr(0,2) == \"b\") \n\t\t&& (file_name.substr(0,3)\
    \ == \"c\") \n\t\t&& (file_name.substr(0,4) == \"d\") \n\t\t&& (file_name.substr(0,5)\
    \ == \"e\") \n\t\t&& (file_name.substr(0,6) == \"f\") \n\t\t&& (file_name.substr(0,7)\
    \ == \"g\") \n\t\t&& (file_name.substr(0,8) == \"h\") \n\t\t&& (file_name.substr(0,9)\
    \ == \"i\") \n\t\t&& (file_name.substr(0,10) == \"j\") \n\t\t&& (file_name.substr(0,11)\
    \ == \"k\") \n\t\t&& (file_name.substr(0,12) == \"l\") \n\t\t&& (file_name.substr(0,13)\
    \ == \"m\") \n\t\t&& (file_name.substr(0,14) == \"n\") \n\t\t&& (file_name.substr(0,15)\
    \ == \"o\") \n\t\t&& (file_name.substr(0,16) == \"p\") \n\t\t&& (file_name.substr(0,17)\
    \ == \"q\") \n\t\t&& (file_name.substr(0,18) == \"r\") \n\t\t&& (file_name.substr(0,19)\
    \ == \"s\") \n\t\t&& (file_name.substr(0,20) == \"t\") \n\t\t&& (file_name.substr(0,21)\
    \ == \"u\") \n\t\t&& (file_name.substr(0,22) == \"v\") \n\t\t&& (file_name.substr(0,23)\
    \ == \"w\") \n\t\t&& (file_name.substr(0,24) == \"x\") \n\t\t&& (file_name.substr(0,25)\
    \ == \"y\") \n\t\t&& (file_name.substr(0,26) == \"z\") \n\t\t&& (file_name.substr(0,27)\
    \ == \"A\") \n\t\t&& (file_name.substr(0,28) == \"B\") \n\t\t&& (file_name.substr(0,29)\
    \ == \"C\") \n\t\t&& (file_name.substr(0,30) == \"D\") \n\t\t&& (file_name.substr(0,31)\
    \ == \"E\") \n\t\t&& (file_name.substr(0,32) == \"F\") \n\t\t&& (file_name.substr(0,33)\
    \ == \"G\") \n\t\t&& (file_name.substr(0,34) == \"H\") \n\t\t&& (file_name.substr(0,35)\
    \ == \"I\") \n\t\t&& (file_name.substr(0,36) == \"J\") \n\t\t&& (file_name.substr(0,37)\
    \ == \"K\") \n\t\t&& (file_name.substr(0,38) == \"L\") \n\t\t&& (file_name.substr(0,39)\
    \ == \"M\") \n\t\t&& (file_name.substr(0,40) == \"N\") \n\t\t&& (file_name.substr(0,41)\
    \ == \"O\") \n\t\t&& (file_name.substr(0,42) == \"P\") \n\t\t&& (file_name.substr(0,43)\
    \ == \"Q\") ", "    // Your code goes here\n    var dotIndex = file_name.indexOf(\"\
    .\");\n    var valid = false;\n    if(dotIndex == -1){\n        return valid;\n\
    \    }\n    if(file_name.length < 3){\n        return valid;\n    }\n    if(file_name.substring(0,1)\
    \ == \" \" || file_name.substring(0,1) == \".\"){\n        valid = false;\n  \
    \      return valid;\n    }\n    \n    var firstLetter = file_name.substring(0,1);\n\
    \    var firstLetterInLatinAlphapet = false;\n    for(var i=0;i<latin_alphapet_alphabet.length;i++){\n\
    \        if(firstLetter == latin_alphapet_alphabet[i]){\n            firstLetterInLatinAlphapet\
    \ = true;\n        }\n    }\n    if(!firstLetterInLatinAlphapet){\n        valid\
    \ = false;\n        return valid;\n    }\n    \n    \n    if(file_name.substring(dotIndex)\
    \ == \"txt\"){\n        valid = true;\n        return valid;\n    }\n    if(file_name.substring(dotIndex)\
    \ == \"exe\"){\n        valid = true;\n        return valid;\n    }\n    if(file_name.substring(dotIndex)\
    \ == \"dll\"){\n        valid = true;\n        return valid;\n    }\n    \n  \
    \  valid = true;\n    return valid;\n}\n\n", "\tvar file_name = file_name.split(\"\
    \ \");\n\tif(file_name[0].length < 3){\n\t\treturn 'No';\n\t}\n\tvar dot_pos =\
    \ file_name[0].indexOf('.');\n\tvar dot_names_allowed = ['txt', 'exe', 'dll'];\n\
    \tif(dot_pos < 0){\n\t\treturn 'No';\n\t}\n\tvar dot_name = file_name[0].substr(0,\
    \ dot_pos);\n\tif(dot_names_allowed.indexOf(dot_name) < 0){\n\t\treturn 'No';\n\
    \t}\n\telse{\n\t\treturn 'Yes';\n\t}\n}", "  var file_name = file_name.toLowerCase();\n\
    \  var dotPos = file_name.lastIndexOf(\".\");\n  if(dotPos <= 1){\n    return\
    \ \"No\";\n  }\n  if(file_name.substring(0,1) == \"0\" || file_name.substring(0,1)\
    \ == \"9\"){\n    return \"No\";\n  }\n  var firstChar = file_name.substring(0,1).toLowerCase();\n\
    \  if(firstChar != \"a\" && firstChar != \"b\" && firstChar != \"c\" && firstChar\
    \ != \"d\" && firstChar != \"e\" && firstChar != \"f\" && firstChar != \"g\" &&\
    \ firstChar != \"h\" && firstChar != \"i\" && firstChar != \"j\" && firstChar\
    \ != \"k\" && firstChar != \"l\" && firstChar != \"m\" && firstChar != \"n\" &&\
    \ firstChar != \"o\" && firstChar != \"p\" && firstChar != \"q\" && firstChar\
    \ != \"r\" && firstChar != \"s\" && firstChar != \"t\" && firstChar != \"u\" &&\
    \ firstChar != \"v\" && firstChar != \"w\" && firstChar != \"x\" && firstChar\
    \ != \"y\" && firstChar != \"z\"){\n    return \"No\";\n  }\n  var lastChar =\
    \ file_name.substring(dotPos-1).toLowerCase();\n  if(lastChar != \"txt\" && lastChar\
    \ != \"exe\" && lastChar != \"dll\"){\n    return \"No\";\n  }\n  return \"Yes\"\
    ;\n}\n", "  var file_name = file_name.toLowerCase().replace(/\\s+/g,\"\"); //\
    \ Removes any spaces from the file name string.\n  var file_name_parts = file_name.split(\"\
    .\"); // Takes the file name string and splits it into the part before the dot\
    \ and the part after the dot.\n  if(file_name_parts.length >= 1){ // If file_name_parts.length\
    \ is equal to or greater than 1, then we assume that the file's name contains\
    \ a valid file name.\n    if(file_name_parts[0].length > 0 && file_name_parts[0][0]\
    \ >= 'a' && file_name_parts[0][0] <= 'z'){ // If file_name_parts[0] is valid,\
    \ that means that it contains at least one letter from latin alphabet.\n     \
    \ if(file_name_parts[1].length > 0 && file_name_parts[1][0] >= 'a' && file_name_parts[1][0]\
    \ <= 'z'){ // If file_name_parts[1] is valid, that means that it contains at least\
    \ one letter from latin alphabet.\n        if(file_name_parts[0] == file_name_parts[1]){\n\
    \          return \"Yes\";\n        }else{\n          return \"No\";\n       \
    \ }\n      }else{\n        return \"No\";\n      }\n    }else{\n      return \"\
    No\";\n    }\n  }else{\n    return \"No\";\n  }\n}\n", "\tvar flag = false;\n\t\
    var re = /^([0-9]+\\.)?[a-zA-Z]+([\\.][a-zA-Z]+)$/;\n\tif(file_name.match(re)){\n\
    \t\tflag = true;\n\t}\n\treturn flag;\n}", "\treturn /^[0-9]*\\.[a-zA-Z]*$/.test(file_name)\n\
    }\n\n", "\tlet file_name = file_name.toUpperCase();\n\tlet no = file_name.split(\"\
    .\");\n\tlet yes = \"Yes\";\n\tlet no = \"No\";\n\tlet len = file_name.length;\n\
    \tlet count = 0;\n\tfor(let i=0; i<len; i++){\n\t\tif(file_name.charAt(i) < \"\
    A\" || file_name.charAt(i) > \"Z\"){\n\t\t\treturn \"No\";\n\t\t}\n\t\telse if(file_name.charAt(i)\
    \ < \"a\" || file_name.charAt(i) > \"z\"){\n\t\t\treturn \"No\";\n\t\t}\n\t\t\
    else if(file_name.charAt(i) == \".\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(count\
    \ > 1){\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\treturn yes;\n}\n", "\t\n\tvar regex_pattern\
    \ = /^[0-9]*\\.[a-zA-Z]+$/;\n\t\n\tif( !regex_pattern.test(file_name) ){\n\t\t\
    \n\t\treturn \"No\";\n\t\t\n\t} else {\n\t\t\n\t\treturn \"Yes\";\n\t}\n}\n",
  "\tfile_name=file_name.replace(/\\./g,\"\");\n\tfile_name=file_name.replace(/[^a-z0-9.]/g,\"\
    \");\n\tif(file_name==\"\")\n\t\treturn \"No\";\n\telse if(file_name.charAt(0)==\"\
    \")\n\t\treturn \"No\";\n\telse if(file_name.charAt(0)==\"_\")\n\t\treturn \"\
    No\";\n\telse if(file_name.charAt(1)!==\".\")\n\t\treturn \"No\";\n\telse if(file_name.length<3)\n\
    \t\treturn \"No\";\n\telse if(file_name.charAt(2)!=\".\")\n\t\treturn \"No\";\n\
    \telse if(file_name.substr(0,2)==\"./\")\n\t\treturn \"No\";\n\telse if(file_name.substr(0,2)==\"\
    ../\")\n\t\treturn \"No\";\n\telse if(file_name.substr(0,3)==\"././\")\n\t\treturn\
    \ \"No\";\n\telse if(file_name.substr(0,4)==\".././\")\n\t\treturn \"No\";\n\t\
    else if(file_name.substr(0,5)==\"./../\")\n\t\treturn \"No\";\n\telse if(file_name.substr(0,6)==\"\
    ../..\")\n\t\treturn \"No\";\n\telse if(file_name.substr(0,7)==\"././.\")\n\t\t\
    return \"No\";\n\telse if(file_name.substr(0,8)==\".././.\")\n\t\treturn \"No\"\
    ;\n\telse if(file_name.substr(0,9)==\"./../.\")\n\t\treturn \"No\";\n\telse if(file_name.substr(0,10)==\"\
    ././..\")\n\t\treturn \"No\";\n\telse if(file_name.substr(0,11)==\".././.\")\n\
    \t\treturn \"No\";\n\telse if(file_name.substr(0,12)==\"../..\")\n\t\treturn \"\
    No\";\n\telse if(file_name.substr(0,13)==\"././.\")\n\t\treturn \"No\";\n\telse\
    \ if(file_name.substr(0,14)==\".././.\")\n\t\treturn \"No\";\n\telse if(file_name.substr(0,15)==\"\
    ./../.\")\n\t\treturn \"No\";\n\telse if(file_name.substr(0,16)==\"././..\")\n\
    \t\treturn \"No\";\n\telse if(file_name.substr(0,17)==\".././.\")\n\t\treturn\
    \ \"No\";\n\telse if(file_name.substr(0,18)==\"../..\")\n\t\treturn \"No\";\n\t\
    else if(file_name.substr(0,19)==\"././.\")\n\t\treturn \"No\";\n\telse if(file_name.substr(0,20)==\"\
    .././.\")\n\t\treturn \"No\";\n\telse if(file_name.substr(0,21)==\"./../.\")\n\
    \t\treturn \"No\";\n\telse if(file_name.substr(0,22)==\"././..\")\n\t\treturn\
    \ \"No\";\n\telse if(file_name.substr(0,23)==\".././.\")\n\t\treturn \"No\";\n\
    \telse if(file_name.substr(0,24)==\"../..\")\n\t\treturn \"No\";\n\telse if(file_name.substr(",
  "\tvar regex_file_name = \"^[0-9]{3}\\.[a-zA-Z]+$\";\n\tif(file_name.match(regex_file_name)){\n\
    \t\treturn \"Yes\";\n\t}\n\treturn \"No\";\n}\n", "   var pattern = \"^(([0-9])+(\\\
    ..{0,1}){0,1})+$\";\n   var result = pattern.test(file_name);\n   if (result){\n\
    \      return \"Yes\";\n   } else{\n      return \"No\";\n   }\n}\n</script>\n\
    \n</head>\n\n<body onload=\"load();\">\n<p id=\"demo\"></p>\n\n</body>\n</html>\n\
    </code>\n<|/ q dscore=2 |>\n<| a dscore=2 tags=html,javascript,validation |>\n\
    You can use this regex pattern ([0-9]+(\\.[a-zA-Z]{0,1}){0,1})+$ to validate file\
    \ names. \nDemo:\n\n<code>", "    var pattern = new RegExp(/^[a-zA-Z0-9]+([._][a-zA-Z0-9]+)*$/);\n\
    \    if(file_name.match(pattern)){\n        if(file_name.split(\".\")[0].length\
    \ <= 3){\n            return \"Yes\";\n        }else{\n            return \"No\"\
    ;\n        }\n    }\n    else{\n        return \"No\";\n    }\n}\n", "\tvar file_name\
    \ = file_name.split(\".\");\n\tvar length = file_name.length;\n\tvar no_of_digits\
    \ = 3;\n\tvar contains_dot = 0;\n\tvar first_letter_not_empty = 1;\n\tvar dot_not_in_file_name\
    \ = 1;\n\tvar dot_before_empty = 1;\n\t\n\tfor(var i = 1; i < length; i++){\n\t\
    \tif(file_name[i].length == 0){\n\t\t\tdot_before_empty = 0;\n\t\t\tdot_not_in_file_name\
    \ = 0;\n\t\t}\n\t\tif(file_name[i].length != no_of_digits || file_name[i].length\
    \ > no_of_digits){\n\t\t\tcontains_dot = 0;\n\t\t}\n\t\tif((file_name[i].length\
    \ != no_of_digits || file_name[i].length > no_of_digits) && file_name[i].charAt(0)\
    \ != '.'){\n\t\t\tcontains_dot = 0;\n\t\t}\n\t\tif((file_name[i].length != no_of_digits\
    \ || file_name[i].length > no_of_digits) && file_name[i].charAt(0) == '.' && !(file_name[i].length\
    \ > 1 && file_name[i].charAt(1) != '.')){\n\t\t\tdot_not_in_file_name = 0;\n\t\
    \t}\n\t\tif(!dot_before_empty && ((file_name[i].length != no_of_digits || file_name[i].length\
    \ > no_of_digits) && file_name[i].charAt(0) != '.') && !dot_not_in_file_name){\n\
    \t\t\tfirst_letter_not_empty = 0;\n\t\t}\n\t}\n\t\n\tif(contains_dot || first_letter_not_empty\
    \ || dot_not_in_file_name){\n\t\treturn \"No\";\n\t}\n\telse{\n\t\treturn \"Yes\"\
    ;\n\t}\n}\n", "\tif(!file_name.match(/^[0-9]{3}\\.[a-zA-Z]{1}.*$/)){\n\t\treturn\
    \ \"No\";\n\t}else{\n\t\tlet file_extension = file_name.split('.').pop();\n\t\t\
    let file_extension_check = file_extension.match(/^(tx|exe|dll)$/);\n\t\tif(file_extension_check\
    \ == null){\n\t\t\treturn \"No\";\n\t\t}else{\n\t\t\treturn \"Yes\";\n\t\t}\n\t\
    }\n}\n", "    let flag;\n    // If file name is less than three digits long, then\
    \ return \"No\"\n    if (file_name.length < 3 || file_name.length > 6){\n    \
    \    flag = \"No\";\n    }\n    // If file name is less than three digits long,\
    \ or contains more than two dots, \n    // then return \"No\"\n    else if (file_name.search(/\\\
    ./g) >= 2 || file_name.search(/\\./) >= 0){\n        flag = \"No\";\n    }\n \
    \   // If file's name starts with a letter other than 'a' or 'A', \n    // or\
    \ if it ends with 'exe' or 'dll' but contains more than two dots, \n    // then\
    \ return \"No\"\n    else if (file_name.search(/[a-z]/gi) >= 0 || file_name.search(/[A-Z]/gi)\
    \ >= 0 || file_name.search(/\\.(exe|dll)/g) >= 2 || file_name.search(/\\..*\\\
    ./g) >= 0){\n        flag = \"No\";\n    }\n    // Otherwise, if file's name starts\
    \ with a letter other than 'a' or 'A', \n    // or if it ends with 'exe' or 'dll',\
    \ then return \"Yes\"\n    else if((file_name.search(/[a-z]/gi) >= 0 || file_name.search(/[A-Z]/gi)\
    \ >= 0 || file_name.search(/\\.(exe|dll)/g) >= 0) && (file_name.search(/\\..*\\\
    ./g) >= 0)){\n        flag = \"Yes\";\n    }\n    // Return flag\n    return flag;\n\
    }\n", "  // Initialize a variable named 'valid' to 'No'.\n  let valid = 'No';\n\
    \  // Initialize a variable named 'dot' to '.'.\n  let dot = '.';\n  // Initialize\
    \ a variable named 'first_letter' to 'a'.\n  let first_letter = 'a';\n  // Initialize\
    \ a variable named 'last_letter' to 'z'.\n  let last_letter = 'z';\n  // Initialize\
    \ a variable named 'number_of_digits' to 0.\n  let number_of_digits = 0;\n  //\
    \ Initialize a variable named 'file_name_length' to '0'.\n  let file_name_length\
    \ = 0;\n  // Initialize a variable named 'file_name_character' to '0'.\n  let\
    \ file_name_character = '0';\n  // Initialize the variable 'file_extension' to\
    \ '0'.\n  let file_extension = '0';\n  \n  // Remove leading '.' from the file's\
    \ name.\n  file_name = file_name.split('.')[0];\n  \n  // Split the file's name\
    \ into its parts, separated by a '.'.\n  file_name_parts = file_name.split('.');\n\
    \  \n  // Loop through each part and check if it is an integer.\n  for (let i\
    \ = 0; i < file_name_parts.length; i++){\n    // Convert the part into an integer.\n\
    \    file_name_part = parseInt(file_name_parts[i]);\n    // Increment the variable\
    \ 'number_of_digits' by 1.\n    number_of_digits += 1;\n    // If the part is\
    \ not an integer, convert it to a string and add it to the file's \n    // extension\
    \ variable.\n    if (file_name_part === file_name_part){\n      file_extension\
    \ += file_name_part;\n    }\n  }\n  \n  // If the file's name contains more than\
    \ three digits, set 'valid' to 'Yes'; otherwise, \n  // set 'valid' to 'No'.\n\
    \  if (number_of_digits > 3){\n    valid = 'Yes';\n  }\n  \n  // If the file's\
    \ name contains no dot '.', set 'valid' to 'Yes'; otherwise, set \n  // 'valid'\
    \ to 'No'.\n  if (file_name_parts.length === 0){\n    valid = 'Yes';\n  }\n  \n\
    \  // If the file's name contains more than two parts, set 'valid' to 'Yes'; otherwise,\
    \ \n  // set 'valid' to 'No'.\n  if (file_name_parts.length > 2){\n    valid =\
    \ 'Yes';\n  }\n  \n  // If the file's name starts with more than two characters,\
    \ set 'valid' to 'Yes'; \n  // otherwise, set 'valid' to 'No'.\n  if (file_name_parts.length\
    \ > 2 && file_name_parts[0].length > 1 && \n    file_name_parts[1].length > 1){\n\
    \    valid = 'Yes';\n  }\n  \n  // If the file's name ends with more than two\
    \ characters, set ", "  return file_name.match(/^(?!.*\\.\\.)(?!.*\\..*\\..*\\\
    ..*\\..*$)(?!.*\\..*$)[a-z][a-z\\.]+\\.?$/i) && \n\tfile_name.split(\".\")[0].length\
    \ > 3 && \n\tfile_name.split(\".\")[1] != \"txt\" && \n\tfile_name.split(\".\"\
    )[1] != \"exe\" && \n\tfile_name.split(\".\")[1] != \"dll\";\n}\n", "\tvar valid\
    \ = true;\n\t\n\tvar has_digits = /[0-9]/.test(file_name);\n\tvar has_dot = file_name.indexOf('.')\
    \ > 0;\n\tvar has_alpha = /^[a-ZA-Z]/.test(file_name.substr(0, file_name.indexOf('.')));\n\
    \t\n\tif (has_digits && has_dot && has_alpha){\n\t\treturn \"Yes\";\n\t} else\
    \ {\n\t\treturn \"No\";\n\t}\n}\n", "    //Declare all global variables\n    var\
    \ file_name_length = file_name.length;\n    var file_name_dotIndex = file_name.indexOf(\"\
    .\");\n    var file_name_letterIndex = 0;\n    var file_name_letters_allowed =\
    \ \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    var file_name_letters_allowed_length\
    \ = file_name_letters_allowed.length;\n    \n    //Check if string contains dot\n\
    \    if(file_name_dotIndex != -1){\n        //Declare new empty string to store\
    \ file's name's part before the dot\n        var file_name_before_dot = file_name.substr(0,file_name_dotIndex);\
    \ \n        //Declare new empty string to store file's name's part after the dot\n\
    \        var file_name_after_dot = file_name.substr(file_name_dotIndex + 1); \n\
    \        \n        //Check whether string contains letters from latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n        for(file_name_letterIndex = 0; file_name_letterIndex\
    \ < file_name_letters_allowed_length; file_name_letterIndex++){\n            if(file_name_letters_allowed.indexOf(file_name_before_dot[file_name_letterIndex])\
    \ != -1){\n                //If string contains letter, return 'Yes'\n       \
    \         return \"Yes\";\n            }\n        }\n        //If string contains\
    \ letters outside of latin alphapet ('a'-'z' and 'A'-'Z'), return 'No'\n     \
    \   return \"No\";\n    }\n    //If string does not contain dot, return 'No'\n\
    \    return \"No\";\n}\n", "  var file_name = file_name.toLowerCase();\n  var\
    \ noDots = file_name.split(\".\").length < 3;\n  var nonLatinLetters = /^[a-z]$/i.test(file_name[0]);\n\
    \  var nonExecutables = /^exe|dll$/i.test(file_name);\n  return noDots && !nonLatinLetters\
    \ && !nonExecutables;\n}", "    \n    //Extract file's name from the file name\
    \ argument\n    var file_name =file_name.split('.');\n    var file_name_array\
    \ = file_name[0];\n    \n    //Remove the leading dot if exists\n    if(file_name_array.indexOf('.')\
    \ != -1){\n        file_name_array = file_name_array.substr(0, file_name_array.lastIndexOf('.'));\n\
    \    }\n    \n    //Convert file name string to array of characters and then map\
    \ to lowercase\n    var file_name_chars = file_name_array.split('').map(function(char)\
    \ {\n        return char.toLowerCase();\n    });\n    \n    //Extract characters\
    \ from the file name to make sure its a valid file\n    var valid_chars = ['0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z'];\n    \n    //Check every character for validity\n    var invalid_chars_found\
    \ = 0;\n    file_name_chars.map(function(char) {\n        valid_chars.map(function(valid_char)\
    \ {\n            if(char == valid_char){\n                invalid_chars_found\
    \ += 1;\n            }\n        });\n    });\n    \n    //If the invalid characters\
    \ were found, return 'No', otherwise return 'Yes'\n    if(invalid_chars_found\
    \ != 0){\n        return 'No';\n    }else{\n        return 'Yes';\n    }\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't actually work for me for some\
    \ reason.  When I type in the input \"012\" I get \"Yes\" but when I type in the\
    \ input \"abcde\" I get \"No\".\n<|/ c |>\n<| c |>\nAre you able to type 012abcde\
    \ and still get \"No\"?\n<|/ c |>\n<| c |>\nYes it works, but you don't have to\
    \ use recursion, try my code which uses regular expression.\n<|/ c |>\n<| a tags=validation,javascript,input,arrays\
    \ |>\nYou can do something like that :\n\n<code>", "    \n    // Declare a variable\
    \ which stores the string \"Yes\".\n    var flag = \"No\";\n\n    // Declare a\
    \ variable which stores the string \"Yes\".\n    var letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    var numbers = \"0123456789\";\n    var dot_idx = file_name.indexOf(\".\"\
    );\n    var num_dot = file_name.indexOf(\".\")+1;\n    var file_name_len = file_name.length;\n\
    \n    \n    //Condition 1: There should not be more than three digits in the file's\
    \ name.\n    if (file_name_len > 3){\n        flag = \"Yes\";\n    }\n\n    //Condition\
    \ 2: There should not be more than one '.' in the file's name.\n    else if (dot_idx\
    \ > 0){\n        flag = \"No\";\n    }\n\n    //Condition 3: There should not\
    \ be an empty substring before the dot\n    else if (num_dot < 0){\n        flag\
    \ = \"No\";\n    }\n\n    //Condition 4: There should not be a letter in the substring\
    \ after the dot.\n    else if (file_name[num_dot-1] !=\"a\" && file_name[num_dot-1]\
    \ !=\"A\" && file_name[num_dot-1] !=\"b\" && file_name[num_dot-1] !=\"B\" && file_name[num_dot-1]\
    \ !=\"c\" && file_name[num_dot-1] !=\"C\" && file_name[num_dot-1] !=\"d\" && file_name[num_dot-1]\
    \ !=\"D\" && file_name[num_dot-1] !=\"e\" && file_name[num_dot-1] !=\"E\" && file_name[num_dot-1]\
    \ !=\"f\" && file_name[num_dot-1] !=\"F\" && file_name[num_dot-1] !=\"g\" && file_name[num_dot-1]\
    \ !=\"G\" && file_name[num_dot-1] !=\"h\" && file_name[num_dot-1] !=\"H\" && file_name[num_dot-1]\
    \ !=\"i\" && file_name[num_dot-1] !=\"I\" && file_name[num_dot-1] !=\"j\" && file_name[num_dot-1]\
    \ !=\"J\" && file_name[num_dot-1] !=\"k\" && file_name[num_dot-1] !=\"K\" && file_name[num_dot-1]\
    \ !=\"l\" && file_name[num_dot-1] !=\"L\" && file_name[num_dot-1] !=\"m\" && file_name[num_dot-1]\
    \ !=\"M\" && file_name[num_dot-1] !=\"n\" && file_name[num_dot-1] !=\"N\" && file_name[num_dot-1]\
    \ !=\"o\" && file_name[num_dot-1] !=\"O\" && file_name[num_dot-1] !=\"p\" && file_name[num_",
  "  return /^([0-9]{3}\\.)*[a-zA-Z][a-zA-Z0-9\\.]*$/i.test(file_name) ? \"Yes\" :\
    \ \"No\";\n}\n", "    let file_name_split = file_name.split('.')\n    let file_name\
    \ = file_name_split.pop()\n    let file_ext = file_name.split('.').pop();\n  \
    \  if(file_name_split.length <= 3 || file_name_split[0].length <= 0 || file_name_split[0].substring(0,\
    \ 1) <= 'a' || file_name_split[0].substring(0, 1) >= 'z' || file_name_split[0].substring(file_name_split[0].length\
    \ - 1) <= 'a' || file_name_split[0].substring(file_name_split[0].length - 1) >=\
    \ 'z'){\n        return \"No\"\n    }\n    else if((file_ext[0] != 'txt' && file_ext[0]\
    \ != 'exe' && file_ext[0] != 'dll') || (file_ext[1] != '.' && file_ext[1] != 'exe'\
    \ && file_ext[1] != 'dll')){\n        return \"No\"\n    }\n    return \"Yes\"\
    \n}", "  var file_ext = file_name.split(\".\").pop().toLowerCase();\n  if(file_name.substring(0,1)\
    \ != \"0\" && file_name.substring(0,1) != \"1\" &&\n    file_name.substring(0,1)\
    \ != \"2\" && file_name.substring(0,1) != \"3\" &&\n    file_name.substring(0,1)\
    \ != \"4\" && file_name.substring(0,1) != \"5\" &&\n    file_name.substring(0,1)\
    \ != \"6\" && file_name.substring(0,1) != \"7\" &&\n    file_name.substring(0,1)\
    \ != \"8\" && file_name.substring(0,1) != \"9\" &&\n    file_name.substring(0,1)\
    \ != \"a\" && file_name.substring(0,1) != \"b\" &&\n    file_name.substring(0,1)\
    \ != \"c\" && file_name.substring(0,1) != \"d\" &&\n    file_name.substring(0,1)\
    \ != \"e\" && file_name.substring(0,1) != \"f\" &&\n    file_name.substring(0,1)\
    \ != \"g\" && file_name.substring(0,1) != \"h\" &&\n    file_name.substring(0,1)\
    \ != \"i\" && file_name.substring(0,1) != \"j\" &&\n    file_name.substring(0,1)\
    \ != \"k\" && file_name.substring(0,1) != \"l\" &&\n    file_name.substring(0,1)\
    \ != \"m\" && file_name.substring(0,1) != \"n\" &&\n    file_name.substring(0,1)\
    \ != \"o\" && file_name.substring(0,1) != \"p\" &&\n    file_name.substring(0,1)\
    \ != \"q\" && file_name.substring(0,1) != \"r\" &&\n    file_name.substring(0,1)\
    \ != \"s\" && file_name.substring(0,1) != \"t\" &&\n    file_name.substring(0,1)\
    \ != \"u\" && file_name.substring(0,1) != \"v\" &&\n    file_name.substring(0,1)\
    \ != \"w\" && file_name.substring(0,1) != \"x\" &&\n    file_name.substring(0,1)\
    \ != \"y\" && file_name.substring(0,1) != \"z\" &&\n    file_name.substring(0,1)\
    \ != \"A\" && file_name.substring(0,1) != \"B\" &&\n    file_name.substring(0,1)\
    \ != \"C\" && file_name.substring(0,1) != \"D\" &&\n    file_name.substring(0,1)\
    \ != \"E\" && file_name.substring(0,1) != \"F\" &&\n    file_name.substring(0,1)\
    \ != \"G\" && file_name.substring(0,1) != \"H\" &&\n    file_name.substring(0,1)\
    \ != \"I\" && file_name.substring(0,1) != \"J\" &&\n    file_name.substring(0,1)\
    \ != \"K\" && file_name.substring(0,1) != \"L\" &&\n    file_name.substring(0,1)\
    \ != \"M\" && file_name.substring(0,1) != \"N\" &&\n    file_name.substring(0,1)\
    \ != \"O\" && file_name.substring(0,1) != \"P\" &&\n    file_name.substring(0,1)\
    \ != \"Q", "    //Write your code here\n    \n    // Solution\n    let res = file_name.match(/^\\\
    d+[a-z]|[a-z]\\d+/);\n    return res[1] && res[2] && res[3] && res[4] ? true :\
    \ false;\n}\n", "\t// your code here\n\tlet dotIndex = file_name.indexOf(\".\"\
    );\n\tlet dotBeforeLastIndex = file_name.indexOf(\".\", dotIndex - 1);\n\tlet\
    \ file_name = file_name.slice(0, dotIndex);\n\tlet file_name = file_name.toUpperCase();\n\
    \tlet file_name = file_name.replace(/[^a-z\\d.]/g, \"\");\n\tlet file_name = file_name.substring(1);\n\
    \tif (dotBeforeLastIndex < 0){\n\t\treturn \"No\";\n\t}\n\telse if ([\"txt\",\
    \ \"exe\", \"dll\"].includes(file_name)){\n\t\treturn \"Yes\";\n\t}\n\telse{\n\
    \t\treturn \"No\";\n\t}\n}\n", "\tif((file_name.indexOf('.') != -1) && (file_name.match(/^[0-9]{1,3}$/))){\n\
    \t\tvar name = file_name.split('.')[0];\n\t\tvar first = name.charAt(0);\n\t\t\
    var last = name.charAt(name.length-1);\n\t\tif(((first >= 'a' && first <= 'z')\
    \ || (first >= 'A' && first <= 'Z')) && (last == 'txt')\n\t\t\t|| ((first >= 'a'\
    \ && first <= 'z') || (first >= 'A' && first <= 'Z')) && (last == 'exe')\n\t\t\
    \t|| ((first >= 'a' && first <= 'z') || (first >= 'A' && first <= 'Z')) && (last\
    \ == 'dll')){\n\t\t\treturn \"Yes\";\n\t\t}else{\n\t\t\treturn \"No\";\n\t\t}\n\
    \t}else{\n\t\treturn \"No\";\n\t}\n}\n", "  return (!file_name || file_name.indexOf('.')\
    \ < 0\n         || file_name.match(/[^0-9]/) \n         || file_name.substr(0,1)\
    \ < 'a' \n         || file_name.substr(0,1) > 'z'\n         || file_name.substr(0,2)\
    \ > 'z'\n         || file_name.substr(file_name.indexOf('.'),3) != ['txt', 'exe',\
    \ 'dll']);\n}\n", "\tvar re = new RegExp(/^\\d{0,3}\\.(txt|exe|dll)$/);\n\treturn\
    \ re.test(file_name);\n}\n<|/ file |>\n<| a dscore=0 |>\nThis solution does not\
    \ require you to import any packages. The solution is quite similar to the other\
    \ solutions posted.\n<code>", "    var error = 0;\n    var dotIndex = file_name.lastIndexOf(\"\
    .\");\n    var letterStart = file_name.substring(1, 2);\n    var letterEnd;\n\
    \    if (dotIndex == -1)\n        letterEnd = file_name.substring(3, 4);\n   \
    \ else{\n        letterEnd = file_name.substring(1, dotIndex + 1);\n    }\n  \
    \  letterEnd = letterEnd.toUpperCase();\n    var letterStartCode;\n    var letterEndCode;\n\
    \    letterStartCode = letterStart.charCodeAt(0);\n    letterEndCode = letterEnd.charCodeAt(0);\n\
    \    \n    if (letterStartCode < 65 || letterStartCode > 122)\n        error =\
    \ 1;\n    if (letterEndCode < 65 || letterEndCode > 122)\n        error = 1;\n\
    \    if (error == 0){\n        var test = true;\n        var i;\n        for (i\
    \ = 0; i < file_name.length; i++){\n            if (file_name.charAt(i) == \"\
    .\"){\n                error = 1;\n                break;\n            }\n   \
    \         \n            if (file_name.charAt(i) != \"0\" && file_name.charAt(i)\
    \ != \"9\"){\n                test = false;\n                break;\n        \
    \    }\n        }\n        if (test == false)\n            error = 1;\n    }\n\
    \    \n    if (error == 1){\n        alert(\"File names should contain only numbers\
    \ and letters.\");\n        error = 1;\n    }\n    if (error == 1){\n        alert(\"\
    File names must contain exactly one dot.\");\n        error = 1;\n    }\n    if\
    \ (error == 1){\n        alert(\"File names must start with a letter from the\
    \ latin alphabet.\");\n        error = 1;\n    }\n    if (error == 1){\n     \
    \   alert(\"File names must end with a letter from the latin alphabet.\");\n \
    \       error = 1;\n    }\n    if (error == 1){\n        alert(\"File names may\
    \ contain only the following extensions: \" + \n            \" [txt, exe, dll].\"\
    );\n        error = 1;\n    }\n    \n    return error;\n}\n", "  // Check that\
    \ file name does not contain more than three digits ('0'-'9')\n  if(!file_name.replace(/[0-9]/g,\"\
    \").length >= 3){\n    return \"No\"\n  }\n\n  // Check that file name contains\
    \ exactly one dot '.'\n  if(file_name.indexOf(\".\") > 0){\n    return \"No\"\n\
    \  }\n\n  // Check that file name starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n  if(file_name.charAt(0) > 'Z'){\n    return \"No\"\n\
    \  }\n  if(file_name.charAt(0) == 'Z'){\n    if(file_name.charCodeAt(0) > 90){\n\
    \        return \"No\"\n    }\n  }\n\n  // Check that file name contains one of\
    \ these: ['txt', 'exe', 'dll']\n  if(['txt', 'exe', 'dll'].indexOf(file_name.split(\"\
    .\")[1]) == -1){\n    return \"No\"\n  }\n\n  // Return Yes since file name satisfies\
    \ all the conditions above.\n  return \"Yes\"\n}\n", "\tvar pattern = /^[a-zA-Z0-9.]+$/\n\
    \tif(pattern.test(file_name) == false){\n\t\treturn \"No\";\n\t}else{\n\t\t\n\t\
    \tvar dot_position;\n\t\tvar dot_position2 = file_name.indexOf(\".\");\n\t\tvar\
    \ dot_position3 = file_name.indexOf(\".\", dot_position2+1);\n\t\tvar dot_position4\
    \ = file_name.indexOf(\".\", dot_position3+1);\n\t\tvar dot_position5 = file_name.indexOf(\"\
    .\", dot_position4+1);\n\t\t\n\t\tif(dot_position == -1){\n\t\t\treturn \"No\"\
    ;\n\t\t}else if(dot_position2 == -1){\n\t\t\treturn \"No\";\n\t\t}else if(dot_position3\
    \ == -1){\n\t\t\treturn \"No\";\n\t\t}else if(dot_position4 == -1){\n\t\t\treturn\
    \ \"No\";\n\t\t}else if(dot_position5 == -1){\n\t\t\treturn \"No\";\n\t\t}else{\n\
    \t\t\t\n\t\t\tif(dot_position2 > dot_position){\n\t\t\t\treturn \"No\";\n\t\t\t\
    }else if(dot_position3 > dot_position2){\n\t\t\t\treturn \"No\";\n\t\t\t}else\
    \ if(dot_position4 > dot_position3){\n\t\t\t\treturn \"No\";\n\t\t\t}else if(dot_position5\
    \ > dot_position4){\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t}\n\t}\n\t\n}\n", " \
    \   var error = \"NO\";\n    var error_message = \"\";\n    var has_dot = false;\n\
    \    var has_digit = false;\n    var file_extension = \"\";\n    \n    for(var\
    \ i=0;i<file_name.length;i++){\n        if(file_name.charAt(i)==\".\"){\n    \
    \        has_dot = true;\n        }\n        if(file_name.charAt(i)>==\"a\" &&\
    \ file_name.charAt(i)<==\"z\" || file_name.charAt(i)>==\"A\" && file_name.charAt(i)<==\"\
    Z\"){\n            has_digit = true;\n        }\n    }\n    if(!has_digit && !has_dot\
    \ && (file_name.length != 3)){\n        error_message = \"Invalid file name.\"\
    ;\n        error = \"YES\";\n    }\n    if(!has_digit){\n        error_message\
    \ = \"Invalid file name.\";\n        error = \"YES\";\n    }\n    if(has_dot &&\
    \ !(file_name.charAt(0)>==\"a\" && file_name.charAt(0)<==\"z\" && file_name.charAt(1)>==\"\
    a\" && file_name.charAt(1)<==\"z\" && file_name.charAt(2)>==\"a\" && file_name.charAt(2)<==\"\
    z\")){\n        error_message = \"Invalid file name.\";\n        error = \"YES\"\
    ;\n    }\n    if(has_dot){ //The file extension is valid. \n        for(var i=0;i<file_name.length;i++){\n\
    \            if(file_name.charAt(i)==\".\"){\n                file_extension =\
    \ file_name.substring((i+1),file_name.length);\n                file_extension\
    \ = file_extension.toLowerCase();\n                file_extension = file_extension.substring(0,3);\n\
    \                if((file_extension == \"txt\" || file_extension == \"exe\" ||\
    \ file_extension == \"dll\") && (file_extension != \".txt\" && file_extension\
    \ != \".exe\" && file_extension != \".dll\")){\n                    error_message\
    \ = \"Invalid file extension.\";\n                    error = \"YES\";\n     \
    \               break;\n                }\n            }\n        }\n    }\n \
    \   //Return the error message if the error value was not YES.\n    if(error ==\
    \ \"NO\"){\n        return error_message;\n    }\n    return \"File name is valid.\"\
    ;\n}", "  if(file_name.length() > 3){\n    if(file_name.indexOf('.') == -1){\n\
    \      if(file_name.charAt(0) > 'Z' || file_name.charAt(0) < 'a'){\n        return\
    \ \"No\";\n      }\n    }else{\n      var first_char = file_name.charAt(0);\n\
    \      var last_char = file_name.charAt(file_name.length()-1);\n      if(first_char\
    \ == '.' && last_char == '.' && file_name.length() > 1){\n        var first_char_prev\
    \ = file_name.charAt(0);\n        var last_char_prev = file_name.charAt(file_name.length()-1);\n\
    \        if(first_char_prev == first_char && last_char_prev == last_char){\n \
    \         return \"No\";\n        }\n      }\n    }\n  }\n  return \"Yes\";\n\
    }\n", "  var file_name = file_name.toLowerCase();\n  return file_name.match(/^\\\
    d+\\.\\w+$/);\n}", "    return !((file_name.match(/[^0-9]/)) == null) && file_name.indexOf('.')\
    \ == -1 && file_name.substring(0,1).toLowerCase() == 'a' && file_name.substring(0,1).toLowerCase()\
    \ == 'z' && ['txt','exe','dll'].indexOf(file_name.substring(1)) != -1 ? \"Yes\"\
    \ : \"No\");\n}\n", "\tvar file_check = new RegExp(/^[0-9][0-9]*\\.?[0-9]*$/);\n\
    \tvar dot_check = new RegExp(/^\\.$/);\n\tvar letter_check = new RegExp(/^[a-zA-z]+$/);\n\
    \tvar dot_check2 = new RegExp(/^\\.\\.$/);\n\tvar dot_check3 = new RegExp(/^\\\
    .\\.\\.$/);\n\tvar dot_check4 = new RegExp(/^\\.\\.\\.\\.$/);\n\tvar dot_check5\
    \ = new RegExp(/^\\.\\.\\.\\.\\.$/);\n\tvar dot_check6 = new RegExp(/^\\.\\.\\\
    .\\.\\.\\.$/);\n\tvar dot_check7 = new RegExp(/^\\.\\.\\.\\.\\.\\.\\.$/);\n\t\
    var dot_check8 = new RegExp(/^\\.\\.\\.\\.\\.\\.\\.\\.$/);\n\tvar dot_check9 =\
    \ new RegExp(/^\\.\\.\\.\\.\\.\\.\\.\\.\\.$/);\n\tvar dot_check10 = new RegExp(/^\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.$/);\n\tvar dot_check11 = new RegExp(/^\\.\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.$/);\n\tif(!file_check.test(file_name))\n\t\treturn \"\
    No\";\n\tif(dot_check.test(file_name.substring(0,1)))\n\t\treturn \"No\";\n\t\
    if(letter_check.test(file_name.substring(0,1)))\n\t\treturn \"No\";\n\tif(dot_check2.test(file_name.substring(0,2)))\n\
    \t\treturn \"No\";\n\tif(dot_check3.test(file_name.substring(0,3)))\n\t\treturn\
    \ \"No\";\n\tif(dot_check4.test(file_name.substring(0,4)))\n\t\treturn \"No\"\
    ;\n\tif(dot_check5.test(file_name.substring(0,5)))\n\t\treturn \"No\";\n\tif(dot_check6.test(file_name.substring(0,6)))\n\
    \t\treturn \"No\";\n\tif(dot_check7.test(file_name.substring(0,7)))\n\t\treturn\
    \ \"No\";\n\tif(dot_check8.test(file_name.substring(0,8)))\n\t\treturn \"No\"\
    ;\n\tif(dot_check9.test(file_name.substring(0,9)))\n\t\treturn \"No\";\n\tif(dot_check10.test(file_name.substring(0,10)))\n\
    \t\treturn \"No\";\n\tif(dot_check11.test(file_name.substring(0,11)))\n\t\treturn\
    \ \"No\";\n\treturn \"Yes\";\n}", "\tif((file_name.slice(0,4) != \"000\") && (file_name.slice(0,4)\
    \ != \"010\") && (file_name.slice(0,4) != \"020\") && (file_name.slice(0,4) !=\
    \ \"030\") && (file_name.slice(0,4) != \"040\") && (file_name.slice(0,4) != \"\
    050\") && (file_name.slice(0,4) != \"060\") && (file_name.slice(0,4) != \"070\"\
    ) && (file_name.slice(0,4) != \"080\") && (file_name.slice(0,4) != \"090\") &&\
    \ (file_name.slice(0,1) != \"a\") && (file_name.slice(0,1) != \"A\") && (file_name.slice(0,1)\
    \ != \"0\") && (file_name.slice(0,1) != \"9\") && (file_name.slice(0,1) != \"\
    .\") && (file_name.slice(0,3) != \"\")){\n\t\treturn \"No\"\n\t}else{\n\t\treturn\
    \ \"Yes\"\n\t}\n}\n", "    //Check the number of digits in the name\n    var digits\
    \ = file_name.split(\"\").length;\n    if (digits > 3){\n        return \"No\"\
    ;\n    }\n    \n    //Check the file extension\n    var extension_split = file_name.split(\"\
    .\");\n    var extension = extension_split[extension_split.length - 1];\n    var\
    \ extension_letters = extension.split(\"\").map(function(letter){\n        return\
    \ letter.charCodeAt(0);\n    });\n    \n    //Check that the first letter of the\
    \ file is not empty, and it starts with a letter from the latin alphabet\n   \
    \ if ((extension_letters[0] != '') && (extension_letters[0] >= 65) && (extension_letters[0]\
    \ <= 90)) {\n        return \"No\";\n    }\n    \n    //Check if the substring\
    \ after dot is in the array\n    var dot_index = extension.indexOf(\".\");\n \
    \   var dot_split = extension.split(\".\");\n    var dot_ext = dot_split[dot_split.length\
    \ - 1];\n    var dot_ext_letters = dot_ext.split(\"\").map(function(letter){\n\
    \        return letter.charCodeAt(0);\n    });\n    var dot_ext_length = dot_ext.length;\n\
    \    if (dot_ext_length == 2){\n        //Check if dot_ext is empty\n        if\
    \ ((dot_ext_letters[0] != '') && (dot_ext_letters[0] >= 65) && (dot_ext_letters[0]\
    \ <= 90)){\n            //Check that the first letter of dot_ext is not empty,\
    \ and it starts with a letter from the latin alphabet\n            if ((dot_ext_letters[1]\
    \ != '') && (dot_ext_letters[1] >= 65) && (dot_ext_letters[1] <= 90)) {\n    \
    \            return \"Yes\";\n            }\n        }\n    }\n    \n    return\
    \ \"No\";\n}\n", "    // your code here\n    var error = '';\n    var dotPos =\
    \ file_name.indexOf(\".\");\n    if(dotPos == -1){\n        error = 'The file\\\
    's name does not contain \\'.\\'.';\n    }else if(file_name.match(/[0-9][0-9][0-9]/g)){\n\
    \        error = 'The file\\'s name contains more than three digits \\'.\\'.';\n\
    \    }else if(file_name.indexOf('.') == -1){\n        error = 'The file\\'s name\
    \ does not contain \\'\\'.\\'.';\n    }else if(file_name.substring(0, 1) == 'a'\
    \ && file_name.substring(1,2) == 'z' || file_name.substring(0,1) == 'A' && file_name.substring(1,2)\
    \ == 'Z'){\n        error = 'The file\\'s name does not start with a latin letter\
    \ \\'.\\'.';\n    }\n    if(error != ''){\n        alert(error);\n    }else{\n\
    \        alert('Yes');\n    }\n}\nfile_name_check(\"example.txt\");\nfile_name_check(\"\
    1example.dll\");\nfile_name_check(\"example\");\nfile_name_check(\"1example\"\
    );\nfile_name_check(\"1example.txt\");\nfile_name_check(\"1example.exe\");\nfile_name_check(\"\
    1example.dll\");\nfile_name_check(\"example.txt\");\nfile_name_check(\"example.exe\"\
    );\nfile_name_check(\"example.dll\");\nfile_name_check(\"example\");\nfile_name_check(\"\
    1example\");\nfile_name_check(\"1example.txt\");\nfile_name_check(\"1example.exe\"\
    );\nfile_name_check(\"1example.dll\");\nfile_name_check(\"example.txt\");\nfile_name_check(\"\
    example.exe\");\nfile_name_check(\"example.dll\");\nfile_name_check(\"example\"\
    );\nfile_name_check(\"1example\");\nfile_name_check(\"1example.txt\");\nfile_name_check(\"\
    1example.exe\");\nfile_name_check(\"1example.dll\");\nfile_name_check(\"example.txt\"\
    );\nfile_name_check(\"example.exe\");\nfile_name_check(\"example.dll\");\nfile_name_check(\"\
    example\");\nfile_name_check(\"1example\");\nfile_name_check(\"1example.txt\"\
    );\nfile_name_check(\"1example.exe\");\nfile_name_check(\"1example.dll\");\nfile_name_check(\"\
    example.txt\");\nfile_name_check(\"example.exe\");\nfile_name_check(\"example.dll\"\
    );\nfile_name_check(\"example\");\nfile_name_check(\"1example\");\nfile_name_check(\"\
    1example.txt\");\nfile_name_check(\"1example.exe\");\nfile_name_check(\"1example.dll\"\
    );\nfile_name_check(\"example.txt\");\nfile_name_check(\"example.exe\");\n", " \
    \   var num_dots = 0;\n    var dot_position = 0;\n    var dot_count = file_name.split(\"\
    .\").length;\n    for(i = 0; i < dot_count; i++){\n        if(file_name.charAt(dot_position\
    \ - 1) != \".\"){\n            return false;\n        }\n        dot_position++;\n\
    \        if(file_name.charAt(dot_position) == \".\"){\n            num_dots++;\n\
    \            if(num_dots > 2){\n                return false;\n            }\n\
    \        }\n    }\n    var start_position = file_name.charAt(0) - \"a\".charCodeAt(0);\n\
    \    var end_position = file_name.charAt(file_name.length - 1) - \"a\".charCodeAt(0);\n\
    \    var letters_count = end_position - start_position + 1;\n    for(i = 0; i\
    \ < letters_count; i++){\n        if(file_name.charAt(start_position + i) < \"\
    a\".charCodeAt(0) || file_name.charAt(start_position + i) > \"z\".charCodeAt(0)){\n\
    \            return false;\n        }\n    }\n    return true;\n}", "  \n  //\
    \ 1. Check that the file's name only contains numbers and letters.\n  \n  // 2.\
    \ Check that the file's name contains exactly one dot ('.') character.\n  \n \
    \ // 3. Check that the file's name contains no empty strings, and that its first\
    \ character\n  // is a letter from the latin alphabet ('a' - 'z') and its last\
    \ character is a letter from\n  // the latin alphabet ('A' - 'Z')\n  \n  // 4.\
    \ Check that the file's name is a valid file.\n  \n  \n  // 5. Return Yes if the\
    \ file's name is valid; otherwise return No.\n  return file_name;\n}\n", "   var\
    \ valid_name_check;\n   \n   var file_name = file_name.toUpperCase();\n   var\
    \ file_name_length = file_name.length;\n   var dot_index = file_name.indexOf('.');\n\
    \   var dot_index = file_name.indexOf('.');\n   \n   if (dot_index > 0) {\n  \
    \    var dot_length = dot_index - dot_index;\n      var dot_length_without_dot\
    \ = dot_length-1;\n      var dot_length = dot_length - 1;\n      \n      if ((dot_length_without_dot\
    \ > 3) || (dot_length_without_dot < 1)) {\n         valid_name_check = \"No\"\
    ;\n      }\n      else if ((dot_length == 1) || (dot_length == 0)) {\n       \
    \  valid_name_check = \"No\";\n      }\n      else if ((dot_length > 3) && (dot_length\
    \ <= 4) && (file_name.substring(0,1) == 'a') && (file_name.substring(0,1) == 'A'))\
    \ {\n         valid_name_check = \"No\";\n      }\n      else if ((dot_length\
    \ > 4) && (file_name.substring(0,1) == 'b') && (file_name.substring(0,1) == 'B'))\
    \ {\n         valid_name_check = \"No\";\n      }\n      else if ((dot_length\
    \ > 5) && (file_name.substring(0,1) == 'c') && (file_name.substring(0,1) == 'C'))\
    \ {\n         valid_name_check = \"No\";\n      }\n      else if ((dot_length\
    \ > 6) && (file_name.substring(0,1) == 'd') && (file_name.substring(0,1) == 'D'))\
    \ {\n         valid_name_check = \"No\";\n      }\n      else if ((dot_length\
    \ > 7) && (file_name.substring(0,1) == 'e') && (file_name.substring(0,1) == 'E'))\
    \ {\n         valid_name_check = \"No\";\n      }\n      else if ((dot_length\
    \ > 8) && (file_name.substring(0,1) == 'f') && (file_name.substring(0,1) == 'F'))\
    \ {\n         valid_name_check = \"No\";\n      }\n      else if ((dot_length\
    \ > 9) && (file_name.substring(0,1) == 'g') && (file_name.substring(0,1) == 'G'))\
    \ {\n         valid_name_check = \"No\";\n      }\n      else if ((dot_length\
    \ > 10) && (file_name.substring(0,1) == 'h') && (file_name.substring(0,1) == 'H'))\
    \ {\n         valid_name_check = \"No\";\n      }\n      else if ((dot_length\
    \ > 11) && (file_name.substring(0,1) == 'i') && (file_name.substring(0,1) == 'I'))\
    \ {\n         valid_name_check = \"No\";\n      }\n      else if ((dot_length\
    \ > 12) && (file_name.substring(0,1) == 'j') && (file_name.substring(0,1) == 'J'))\
    \ {\n         valid_name_check = \"No\";\n      }\n      else if ((dot_length\
    \ > 13) && (file_name.substring(0,1) == 'k') && (file_name.substring(0,1) == 'K'))\
    \ {\n         valid", "  return /(^[0-9]{1,3}\\.[a-z]{0,2})$/.exec(file_name)\
    \ && file_name.substring(0,1) != \"\" && \n         file_name.substring(file_name.lastIndexOf('.'),\
    \ file_name.length).indexOf(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) != -1\n}\n</cell>\n<text>\nTest your function with different inputs.\n\n\n</text>\n\
    <cell>\n# Test your function here.\nfile_name_check(\"example.txt\")\n</cell>\n\
    <text>\nQuestion 1.3: Implement a function that reads a string and returns the\
    \ string with all white spaces replaced with a single space ' '.\n\n\n</text>\n\
    <cell>\n# Write your function here:\n\n</cell>\n<text>\nQuestion 1.4: Write a\
    \ function that takes a string representing a number and converts the string to\
    \ a floating point number.\n\n\n</text>\n<cell>\n# Write your function here.\n\
    def number_string(strng):\n  try:\n    return float(strng)\n  except:\n    return\
    \ \"N/A\"\n\nnumber_string(\"123\")\n</cell>\n<text>\nQuestion 1.5: Write a function\
    \ that takes the number 1 as a parameter and returns the square of it.\n\n\n</text>\n\
    <cell>\n# Write your function here.\n\n</cell>\n<text>\nQuestion 1.6: Write a\
    \ function that takes a string and returns the substring beginning with the characters\
    \ 'x'.\n\n\n</text>\n<cell>\n# Write your function here.\n\n</cell>\n<text>\n\
    Question 1.7: Write a function that takes a string and returns all the characters\
    \ in the string except the last one.\n\n\n</text>\n<cell>\n# Write your function\
    \ here.\n\n</cell>\n<text>\nQuestion 1.8: Write a function that takes two strings\
    \ and returns their concatenation.\n\n\n</text>\n<cell>\n# Write your function\
    \ here.\n\n</cell>\n<text>\nQuestion 1.9: Write a function that takes one string\
    \ and returns a substring from it that has all the vowels removed.\n\n\n</text>\n\
    <cell>\n# Write your function here.\n\n</cell>\n<text>\nQuestion 1.10: Write a\
    \ function that takes a string and returns the number of times that the substring\
    \ \"x\" occurs in the string.\n\n\n</text>\n<cell>\n# Write your function here.\n\
    \n</cell>\n<text>\nQuestion 1.11: Write a function that takes a string and replaces\
    \ each of the vowels in the string with \"*\"\n\n\n</text>\n<cell>\n# Write your\
    \ function here.\n\n</cell>\n<text>\nQuestion 1.12: Write a function that takes\
    \ a string and replaces each of the vowels in the string with \" \" (a space).\n\
    \n\n</text>\n<cell>\n# Write your function here.\n\n</", "\treturn /^[0-9]{3}\\\
    .txt$/.test(file_name) && !/^\\.$/.test(file_name) && /^[a-zA-z]/.test(file_name.split(\"\
    .\")[0]) && ['txt','exe','dll'].indexOf(file_name.split(\".\")[1]) != -1;\n}\n",
  "\tvar is_valid = file_name ? true : false;\n\tif(is_valid === true && file_name.match(\"\
    ^[0-9][0-9][0-9][0-9][^.]*$\") && file_name.match(/[^.][^.]$/) && file_name.match(/[^a-z][^a-z]/i)\
    \ && file_name.match(/[^0-9]/i)){\n\t\tis_valid = true;\n\t}\n\treturn is_valid;\n\
    }\n", "\treturn (/[0-9]{3}\\.[a-z]/.test(file_name)&&\n\t\tfile_name.substring(0,1)\
    \ != \"_\")&&\n\t\tfile_name.substring(0,1) != \"~\")&&\n\t\tfile_name.substring(0,1)\
    \ != \"-\"&&\n\t\tfile_name.substring(0,1) != \"\\\\\");\n}\n", "  var re = /^[0-9]([a-zA-Z0-9]+)\\\
    .[a-z]$/;\n  var result = re.exec(file_name);\n  if (result == null) return 'No';\n\
    \  if (result.length > 1 && result[1].length <= 3 && result[1].charAt(0) != result[1].charAt(0))\
    \ {\n    return 'No';\n  }\n  if (result.length == 2 && result[2].length <= 3\
    \ && result[2].charAt(0) != result[2].charAt(0)) {\n    return 'No';\n  }\n  if\
    \ (result.length == 3 && result[2].indexOf('.') != -1 && result[2].lastIndexOf('.')\
    \ != result[2].length - 2) {\n    return 'No';\n  }\n  return 'Yes';\n}\n", " \
    \   // Remove all the dots and letters from the file name.\n    var dots_to_remove\
    \ = file_name.split('.').map(function(str){\n        return str.split('').reverse().join('');\n\
    \    }).join('');\n    // Remove all the characters from the file name.\n    var\
    \ letters_to_remove = file_name.split('').reverse().join('');\n    // If there\
    \ are no dots or letters in the file name, return 'Yes'\n    if (dots_to_remove\
    \ == \"\" && letters_to_remove == \"\") return \"Yes\";\n    // If there are no\
    \ dots or letters in the file name, return 'No'\n    if (dots_to_remove == \"\"\
    \ && letters_to_remove != \"\") return \"No\";\n    // If the file contains more\
    \ than one dot, return 'No'\n    if (dots_to_remove.indexOf('.') != -1 && letters_to_remove\
    \ == \"\") return \"No\";\n    // If the file contains more than one dot and no\
    \ letters after the dot, return 'No'\n    if (dots_to_remove.indexOf('.') != -1\
    \ && letters_to_remove != \"\") return \"No\";\n    // If the file contains more\
    \ than one dot and no letters after the dot, return 'Yes'\n    if (dots_to_remove.indexOf('.')\
    \ != -1 && letters_to_remove != \"\") return \"Yes\";\n    // If the file contains\
    \ exactly one dot, return 'Yes'\n    if (dots_to_remove.indexOf('.') == -1 &&\
    \ letters_to_remove != \"\") return \"Yes\";\n    // If the file contains exactly\
    \ one dot, return 'No'\n    if (dots_to_remove.indexOf('.') == -1 && letters_to_remove\
    \ == \"\") return \"No\";\n    // If the file contains only letters, return 'No'\n\
    \    if (letters_to_remove != \"\") return \"No\";\n    // If the file contains\
    \ only letters, return 'Yes'\n    return \"Yes\";\n}\n", "\tvar result = false;\n\
    \tif(file_name.length < 3 || file_name.indexOf('.') == -1){\n\t\tresult = true;\n\
    \t}else if((file_name.indexOf('.') != 0) && (file_name.substr(0,1) < 'a' || file_name.substr(0,1)\
    \ > 'z') || (file_name.substr(0,2) == \"..\")){\n\t\tresult = true;\n\t}\n\treturn\
    \ result;\n}", "    var result = \"No\"\n    var dot_count = 0\n    var letters_count\
    \ = 0\n    var letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    var names_count = 0\n    var names = [\"txt\",\"exe\",\"dll\"]\n    var\
    \ dot_count = 0\n    var letters_count = 0\n    var letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    var names_count = 0\n    var names = [\"txt\",\"exe\",\"dll\"]\n    var\
    \ dot_count = 0\n    \n    if(file_name.length > 3){\n        dot_count = file_name.split(\"\
    .\")[0].length\n        names_count = file_name.split(\".\")[1].length\n     \
    \   names_count = names_count - 1\n        if(dot_count > 2){\n            result\
    \ = \"Yes\"\n        }\n        else if(dot_count > 1 && dot_count < 3){\n   \
    \         if(!(file_name.split(\".\")[1].substring(0,1) in letters)){\n      \
    \          result = \"No\"\n            }\n        }\n        else if(dot_count\
    \ == 3){\n            if(!(file_name.split(\".\")[1].substring(0,1) in letters)){\n\
    \                result = \"No\"\n            }\n        }\n    }\n    else{\n\
    \        result = \"Yes\"\n    }\n    return result\n}\n", "\tvar num_digits =\
    \ file_name.split(\".\").length-1;\n\tvar contains_dot = file_name.indexOf(\"\
    .\") > 0;\n\tvar is_a_letter = /^[a-z]/i;\n\tvar has_no_empty_substr = file_name.match(/^[a-z]\\\
    S*$/) != null;\n\tvar substr_before_dot = file_name.match(/^[a-z]\\S*\\.[^.]*$/);\n\
    \t\n\tif(num_digits > 3){\n\t\treturn \"No\";\n\t}\n\tif(contains_dot && is_a_letter\
    \ && has_no_empty_substr && \n\t\tsubstr_before_dot.length > 0 && substr_before_dot.match(/^[^.]+$/)\
    \ != null){\n\t\treturn \"Yes\";\n\t}\n\treturn \"No\";\n}\n", "  if((file_name.indexOf('.')\
    \ != -1) && ((file_name.indexOf('.') == (file_name.length-1)) || (file_name.substring(0,\
    \ 1) == '0') || (file_name.substring(0, 1) == '1') || (file_name.substring(0,\
    \ 1) == '2') || (file_name.substring(0, 1) == '3') || (file_name.substring(0,\
    \ 1) == '4') || (file_name.substring(0, 1) == '5') || (file_name.substring(0,\
    \ 1) == '6') || (file_name.substring(0, 1) == '7') || (file_name.substring(0,\
    \ 1) == '8') || (file_name.substring(0, 1) == '9') || (file_name.substring(0,\
    \ 1) == 'A') || (file_name.substring(0, 1) == 'B') || (file_name.substring(0,\
    \ 1) == 'C') || (file_name.substring(0, 1) == 'D') || (file_name.substring(0,\
    \ 1) == 'E') || (file_name.substring(0, 1) == 'F') || (file_name.substring(0,\
    \ 1) == 'G') || (file_name.substring(0, 1) == 'H') || (file_name.substring(0,\
    \ 1) == 'I') || (file_name.substring(0, 1) == 'J') || (file_name.substring(0,\
    \ 1) == 'K') || (file_name.substring(0, 1) == 'L') || (file_name.substring(0,\
    \ 1) == 'M') || (file_name.substring(0, 1) == 'N') || (file_name.substring(0,\
    \ 1) == 'O') || (file_name.substring(0, 1) == 'P') || (file_name.substring(0,\
    \ 1) == 'Q') || (file_name.substring(0, 1) == 'R') || (file_name.substring(0,\
    \ 1) == 'S') || (file_name.substring(0, 1) == 'T') || (file_name.substring(0,\
    \ 1) == 'U') || (file_name.substring(0, 1) == 'V') || (file_name.substring(0,\
    \ 1) == 'W') || (file_name.substring(0, 1) == 'X') || (file_name.substring(0,\
    \ 1) == 'Y') || (file_name.substring(0, 1) == 'Z') )){\n    \n    if((file_name.substring(0,2).toLowerCase()\
    \ == \".exe\") || (file_name.substring(0,2).toLowerCase() == \".dll\") || (file_name.substring(0,2).toLowerCase()\
    \ == \".obj\")){\n      return \"Yes\";\n    }\n    else{\n      return \"No\"\
    ;\n    }\n  }\n  else{\n    return \"No\";\n  }\n}\n", "\tvar dotPos = file_name.indexOf('.');\n\
    \tif(dotPos<0){\n\t\treturn \"No\";\n\t}\n\tvar first_letter = file_name.charAt(0);\n\
    \tvar first_letter_lower = first_letter.toLowerCase();\n\t\n\tif(first_letter_lower\
    \ < 'a' || first_letter_lower > 'z'){\n\t\treturn \"No\";\n\t}\n\t\n\tvar file_name\
    \ = file_name.substr(1);\n\tvar file_name = file_name.split('');\n\tif(file_name.length>3){\n\
    \t\treturn \"No\";\n\t}\n\tvar extension = file_name[file_name.length-1].toLowerCase();\n\
    \t\n\tif(!extension){\n\t\treturn \"No\";\n\t}\n\t\n\tvar contains_no_dot_or_empty\
    \ = false;\n\tfor(var i=0;i<file_name.length;i++){\n\t\tif(file_name[i]=='.'){\n\
    \t\t\tcontains_no_dot_or_empty = true;\n\t\t}\n\t}\n\tif(!contains_no_dot_or_empty){\n\
    \t\treturn \"No\";\n\t}\n\t\n\tif(extension != 'exe' && extension != 'dll'){\n\
    \t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\n", "    \n    // Declare and initialize\
    \ a variable 'valid' to be 'Yes'.\n    var valid = 'Yes';\n    \n    // If the\
    \ file name is more than three digits (0-1999), set the variable 'valid'\n   \
    \ // to be 'No'.\n    if(file_name.length() > 3){\n        valid = 'No';\n   \
    \ }\n    \n    // If the file name contains more than just one dot, set the variable\
    \ 'valid' \n    // to be 'No'.\n    if(file_name.contains(\".\")){\n        valid\
    \ = 'No';\n    }\n    \n    // If the file name does not start with one of the\
    \ latin alphabetic \n    // letters ('a' through 'z' or 'A' through 'Z'), set\
    \ the variable 'valid' \n    // to be 'No'.\n    if((file_name.substring(0,1)\
    \ != 'a') && (file_name.substring(0,1) != 'A') \n        && (file_name.substring(0,1)\
    \ != 'b') && (file_name.substring(0,1) != 'B') \n        && (file_name.substring(0,1)\
    \ != 'c') && (file_name.substring(0,1) != 'C') \n        && (file_name.substring(0,1)\
    \ != 'd') && (file_name.substring(0,1) != 'D') \n        && (file_name.substring(0,1)\
    \ != 'e') && (file_name.substring(0,1) != 'E') \n        && (file_name.substring(0,1)\
    \ != 'f') && (file_name.substring(0,1) != 'F') \n        && (file_name.substring(0,1)\
    \ != 'g') && (file_name.substring(0,1) != 'G') \n        && (file_name.substring(0,1)\
    \ != 'h') && (file_name.substring(0,1) != 'H') \n        && (file_name.substring(0,1)\
    \ != 'i') && (file_name.substring(0,1) != 'I') \n        && (file_name.substring(0,1)\
    \ != 'j') && (file_name.substring(0,1) != 'J') \n        && (file_name.substring(0,1)\
    \ != 'k') && (file_name.substring(0,1) != 'K') \n        && (file_name.substring(0,1)\
    \ != 'l') && (file_name.substring(0,1) != 'L') \n        && (file_name.substring(0,1)\
    \ != 'm') && (file_name.substring(0,1) != 'M') \n        && (file_name.substring(0,1)\
    \ != 'n') && (file_name.substring(0,1) != 'N') \n        && (file_name.substring(0,1)\
    \ != 'o') && (file_name.substring(0,1) != 'O') \n        && (file_name.substring(0,1)\
    \ != 'p') && (file_name.substring(0,1) != 'P') \n        && (file_name.substring(0,1)\
    \ != 'q') && (file_name.substring(0,1) != 'Q') \n        && (file_name.substring(0,1)\
    \ != 'r') && (file_name.substring(0,1) != 'R') \n        && (file_name.substring(0,1) ",
  "  // Write your code here\n  let count = 0;\n  let letters = 0;\n  let dots = 0;\n\
    \  let length = 0;\n  length = file_name.length;\n  for (let i = 0; i < length;\
    \ i++){\n    if (file_name[i].match(/[0-9]/g) != null){\n      count++;\n    }\n\
    \    if (file_name[i].match(/[a-z]/g) != null){\n      letters++;\n    }\n   \
    \ if (file_name[i].match(/\\./g) != null){\n      dots++;\n    }\n  }\n  if (count\
    \ < 3){\n    return \"No\";\n  }\n  if (dots > 1){\n    return \"No\";\n  }\n\
    \  if (letters < 1){\n    return \"No\";\n  }\n  if (letters > 2){\n    return\
    \ \"No\";\n  }\n  if (count > 3){\n    return \"No\";\n  }\n  if (count < 3 &&\
    \ dots > 1 && letters < 1 && letters > 2 && count == 3){\n    return \"Yes\";\n\
    \  }\n}\n", "   var dot_index = file_name.indexOf(\".\");\n   if (dot_index <\
    \ 0){\n      return false;\n   } else{\n      if (dot_index > 3){\n         return\
    \ false;\n      } else{\n         var first_letter = file_name.charAt(0);\n  \
    \       if (first_letter != \"a\" && first_letter != \"b\" && first_letter !=\
    \ \"c\" && first_letter != \"d\" && first_letter != \"e\" && first_letter != \"\
    f\" && first_letter != \"g\" && first_letter != \"h\" && first_letter != \"i\"\
    \ && first_letter != \"j\" && first_letter != \"k\" && first_letter != \"l\" &&\
    \ first_letter != \"m\" && first_letter != \"n\" && first_letter != \"o\" && first_letter\
    \ != \"p\" && first_letter != \"q\" && first_letter != \"r\" && first_letter !=\
    \ \"s\" && first_letter != \"t\" && first_letter != \"u\" && first_letter != \"\
    v\" && first_letter != \"w\" && first_letter != \"x\" && first_letter != \"y\"\
    \ && first_letter != \"z\"){\n            return false;\n         } else{\n  \
    \          var exts = [\"txt\", \"exe\", \"dll\"];\n            var last_letter\
    \ = file_name.charAt(dot_index-1);\n            if (exts.indexOf(last_letter)\
    \ == -1){\n               return false;\n            }\n         }\n      }\n\
    \   }\n}\n", "    return !file_name_check_1(file_name) || file_name_check_2(file_name);\n\
    }\n", "    return /[0-9]/.test(file_name) && /\\.[^\\.]/i.test(file_name) && /^[a-zA-z]+.?/i.test(file_name)\
    \ && /[^\\.]+\\.(txt|exe|dll)$/i.test(file_name);\n}", "    var regexp = /[\\\
    d]{3}\\.txt|exe|dll/;\n    return !regexp.test(file_name) ? \"No\" : \"Yes\";\n\
    }\n", "  var valid_extensions = [\"txt\", \"exe\", \"dll\"];\n  var split_file_name\
    \ = file_name.split('.');\n  var dot_position = split_file_name.length - 1;\n\
    \  var dot_first_letter = split_file_name[dot_position].substr(0,1); \n  var dot_second_letter\
    \ = split_file_name[dot_position].substr(1,1);\n  \n  if(dot_first_letter == \"\
    0\" || dot_first_letter == \"1\" || dot_first_letter == \"2\" || \n     dot_first_letter\
    \ == \"3\" || dot_first_letter == \"4\" || dot_first_letter == \"5\" || \n   \
    \  dot_first_letter == \"6\" || dot_first_letter == \"7\" || dot_first_letter\
    \ == \"8\" || \n     dot_first_letter == \"9\" || dot_first_letter == \"A\" ||\
    \ dot_first_letter == \"B\" || \n     dot_first_letter == \"C\" || dot_first_letter\
    \ == \"D\" || dot_first_letter == \"E\" || \n     dot_first_letter == \"F\" ||\
    \ dot_first_letter == \"G\" || dot_first_letter == \"H\" || \n     dot_first_letter\
    \ == \"I\" || dot_first_letter == \"J\" || dot_first_letter == \"K\" || \n   \
    \  dot_first_letter == \"L\" || dot_first_letter == \"M\" || dot_first_letter\
    \ == \"N\" || \n     dot_first_letter == \"O\" || dot_first_letter == \"P\" ||\
    \ dot_first_letter == \"Q\" || \n     dot_first_letter == \"R\" || dot_first_letter\
    \ == \"S\" || dot_first_letter == \"T\" || \n     dot_first_letter == \"U\" ||\
    \ dot_first_letter == \"V\" || dot_first_letter == \"W\" || \n     dot_first_letter\
    \ == \"X\" || dot_first_letter == \"Y\" || dot_first_letter == \"Z\"){\n     return\
    \ \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n", "\tvar file_name = file_name.toLowerCase();\n\
    \t\n\tvar num_digits = file_name.match(/\\d+/g);\n\tif(num_digits.length < 3){\n\
    \t\treturn \"No\";\n\t}\n\t\n\tvar first_dot = file_name.indexOf('.');\n\t\n\t\
    if(first_dot === -1){\n\t\treturn \"No\";\n\t}\n\t\n\tvar first_letter_of_first_letter\
    \ = file_name.substring(0,first_dot).match(/[a-z]/i);\n\tif(first_letter_of_first_letter\
    \ === null){\n\t\treturn \"No\";\n\t}\n\t\n\tvar last_dot_index = file_name.lastIndexOf('.');\n\
    \tvar last_dot = file_name.substring(last_dot_index);\n\t\n\tvar allowed_extensions\
    \ = ['txt', 'exe', 'dll'];\n\tvar last_dot_name = last_dot.toLowerCase();\n\t\n\
    \tif (last_dot_name.match(new RegExp(allowed_extensions))){\n\t\treturn \"Yes\"\
    ;\n\t} else {\n\t\treturn \"No\";\n\t}\n}\n", "\tvar regex = /^[0-9]{3}[a-z]{0,1}\\\
    .[a-z]{1,2}$/i;\n\tif (regex.test(file_name)){\n\t\t//if (file_name.substring(0,1)\
    \ == \".\"){\n\t\tfor(var i=1;i<=3;i++){\n\t\t\tif (file_name.substring(i,i+1)\
    \ != \"\"){\n\t\t\t\tif (file_name.substring(i-1,i) == \"-\" ){\n\t\t\t\t\t//console.log(file_name.substring(i-1,i));\n\
    \t\t\t\t\treturn \"No\";\n\t\t\t\t}\n\t\t\t\tif (file_name.substring(i,i+1) !=\
    \ \".\"){\n\t\t\t\t\treturn \"No\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn \"\
    Yes\";\n\t}\n\telse{\n\t\treturn \"No\";\n\t}\n}", "\tvar regx = /^([0-9]{3}\\\
    .){0,1}[a-zA-Z]+\\.(txt|exe|dll)$/;\n\treturn regx.test(file_name);\n}\n", "\t\
    var result = 'No';\n\tvar num = 0;\n\tif(!file_name || file_name.length==0) return\
    \ result;\n\tvar name_splitted = file_name.split('.');\n\tif(name_splitted.length\
    \ == 1) return result;\n\tif(name_splitted[0].length==0 ) return result;\n\tif(name_splitted[0].length>3\
    \ ) return result;\n\tvar first_char = name_splitted[0][0];\n\tif(first_char !=\
    \ 'a' && first_char != 'A' && first_char != 'b' && first_char != 'B' && first_char\
    \ != 'c' && first_char != 'C' && first_char != 'd' && first_char != 'D' && first_char\
    \ != 'e' && first_char != 'E' && first_char != 'f' && first_char != 'F' && first_char\
    \ != 'g' && first_char != 'G' && first_char != 'h' && first_char != 'H' && first_char\
    \ != 'i' && first_char != 'I' && first_char != 'j' && first_char != 'J' && first_char\
    \ != 'k' && first_char != 'K' && first_char != 'l' && first_char != 'L' && first_char\
    \ != 'm' && first_char != 'M' && first_char != 'n' && first_char != 'N' && first_char\
    \ != 'o' && first_char != 'O' && first_char != 'p' && first_char != 'P' && first_char\
    \ != 'q' && first_char != 'Q' && first_char != 'r' && first_char != 'R' && first_char\
    \ != 's' && first_char != 'S' && first_char != 't' && first_char != 'T' && first_char\
    \ != 'u' && first_char != 'U' && first_char != 'v' && first_char != 'V' && first_char\
    \ != 'w' && first_char != 'W' && first_char != 'x' && first_char != 'X' && first_char\
    \ != 'y' && first_char != 'Y' && first_char != 'z' && first_char != 'Z') return\
    \ result;\n\tname_splitted[0] = name_splitted[0].slice(1);\n\tfor(var i=1;i<name_splitted.length;i++){\n\
    \t\tvar char = name_splitted[i];\n\t\tif(char.length==0 ) return result;\n\t\t\
    if(char[0] != 'a' && char[0] != 'A' && char[0] != 'b' && char[0] != 'B' && char[0]\
    \ != 'c' && char[0] != 'C' && char[0] != 'd' && char[0] != 'D' && char[0] != 'e'\
    \ && char[0] != 'E' && char[0] != 'f' && char[0] != 'F' && char[0] != 'g' && char[0]\
    \ != 'G' && char[0] != 'h' && char[0] != 'H' && char[0] != 'i' && char[0] != 'I'\
    \ && char[0] != 'j' && char[0] != 'J' && char[0] != 'k' && char[0] != 'K' && char[0]\
    \ != 'l' && char[0] != 'L' && char[0] != 'm' && char[0] != 'M' && char[0] != 'n'\
    \ && char[0]", "  var filename_regex = /^([A-Za-z0-9][A-Za-z0-9\\.]{0,3})\\.([a-zA-Z]{3,4})$/i;\n\
    \  if(!(typeof file_name === 'string' || file_name instanceof String)){\n    return\
    \ 'Invalid file name provided';\n  }\n  if(file_name.length < 3){\n    return\
    \ 'File name should be atleast 3 characters long';\n  }\n  if(!file_name.match(filename_regex)){\n\
    \    return 'Invalid file name provided';\n  }\n  if(file_name.indexOf('.') <\
    \ 1){\n    return 'Invalid file name provided';\n  }\n  if(file_name.substring(0,\
    \ 1) !== '.'){\n    return 'Invalid file name provided';\n  }\n  if(['txt', 'exe',\
    \ 'dll'].indexOf(file_name.substring(file_name.length - 4)) < 0){\n    return\
    \ 'Invalid file name provided';\n  }\n  return 'Yes';\n}\n", "\tconst re = /^(?=.*\\\
    d)(?!\\.).*$|^[^.].*$|^[a-z_].*$/;\n\tif(re.test(file_name)) return \"Yes\";\n\
    \telse return \"No\";\n}\n\n", "    var pattern = /(^[0-9]{3,})\\.(tx|exe|dll)$/;\n\
    \    if(!pattern.test(file_name)){\n        return \"No\";\n    }\n    var result\
    \ = file_name.match(pattern);\n    if (result === null){\n        return \"No\"\
    ;\n    }\n    \n    //If all the conditions are met, return 'Yes'\n    return\
    \ \"Yes\";\n}", "    if (file_name.length < 3){\n        return \"No\";\n    }\n\
    \    if (file_name.substring(0,1).match(/[0-9]/g) != null){\n        return \"\
    No\";\n    }\n    if (file_name.substring(0,1).match(/[a-z]/g) == null){\n   \
    \     return \"No\";\n    }\n    if (file_name.substring(0,1).match(/[A-Z]/g)\
    \ == null){\n        return \"No\";\n    }\n    if (file_name.substring(1, file_name.indexOf(\"\
    .\")).length != 3){\n        return \"No\";\n    }\n    if (file_name.substring(1,\
    \ file_name.indexOf(\".\")) != \".\" || \n        file_name.substring(1, file_name.indexOf(\"\
    .\")) < \"a\" || \n        file_name.substring(1, file_name.indexOf(\".\")) >\
    \ \"z\"){\n        return \"No\";\n    }\n    if (file_name.substring(1, file_name.indexOf(\"\
    .\")) != \".exe\" || \n        file_name.substring(1, file_name.indexOf(\".\"\
    )) != \".dll\"){\n        return \"No\";\n    }\n    return \"Yes\";\n}\n", " \
    \   var result = true;\n    if (file_name.length <=3 || file_name.split('.').length\
    \ <3 || \n          file_name.split('.')[0].charAt(0) <='a' || file_name.split('.')[0].charAt(0)\
    \ >='z' || \n          file_name.split('.')[1].charAt(0) <='a' || file_name.split('.')[1].charAt(0)\
    \ >='z'){\n        result = false;\n    }\n    if (file_name.split('.')[0].charAt(0)\
    \ =='a' && file_name.split('.')[0].charAt(1) =='z' ||\n            file_name.split('.')[0].charAt(0)\
    \ =='A' && file_name.split('.')[0].charAt(1) =='Z' ||\n            file_name.split('.')[1].charAt(0)\
    \ =='a' && file_name.split('.')[1].charAt(1) =='z' ||\n            file_name.split('.')[1].charAt(0)\
    \ =='A' && file_name.split('.')[1].charAt(1) =='Z'){\n        result = false;\n\
    \    }\n    return result;\n}", "    var flag = false;\n    \n    // Check number\
    \ of digits in file name\n    var digits = file_name.match(/^\\d+$/);\n    if(digits[0].length\
    \ <= 3 || digits[0].length >= 5){\n        flag = false;\n    } else if(file_name.indexOf('.')\
    \ === -1){\n        flag = false;\n    } else if(file_name.substring(0, 1) ===\
    \ \"a\" || file_name.substring(0, 1) === \"A\" ||\n        file_name.substring(0,\
    \ 1) === \"b\" || file_name.substring(0, 1) === \"B\" ||\n        file_name.substring(0,\
    \ 1) === \"c\" || file_name.substring(0, 1) === \"C\" ||\n        file_name.substring(0,\
    \ 1) === \"d\" || file_name.substring(0, 1) === \"D\" ||\n        file_name.substring(0,\
    \ 1) === \"e\" || file_name.substring(0, 1) === \"E\" ||\n        file_name.substring(0,\
    \ 1) === \"f\" || file_name.substring(0, 1) === \"F\" ||\n        file_name.substring(0,\
    \ 1) === \"g\" || file_name.substring(0, 1) === \"G\" ||\n        file_name.substring(0,\
    \ 1) === \"h\" || file_name.substring(0, 1) === \"H\" ||\n        file_name.substring(0,\
    \ 1) === \"i\" || file_name.substring(0, 1) === \"I\" ||\n        file_name.substring(0,\
    \ 1) === \"j\" || file_name.substring(0, 1) === \"J\" ||\n        file_name.substring(0,\
    \ 1) === \"k\" || file_name.substring(0, 1) === \"K\" ||\n        file_name.substring(0,\
    \ 1) === \"l\" || file_name.substring(0, 1) === \"L\" ||\n        file_name.substring(0,\
    \ 1) === \"m\" || file_name.substring(0, 1) === \"M\" ||\n        file_name.substring(0,\
    \ 1) === \"n\" || file_name.substring(0, 1) === \"N\" ||\n        file_name.substring(0,\
    \ 1) === \"o\" || file_name.substring(0, 1) === \"O\" ||\n        file_name.substring(0,\
    \ 1) === \"p\" || file_name.substring(0, 1) === \"P\" ||\n        file_name.substring(0,\
    \ 1) === \"q\" || file_name.substring(0, 1) === \"Q\" ||\n        file_name.substring(0,\
    \ 1) === \"r\" || file_name.substring(0, 1) === \"R\" ||\n        file_name.substring(0,\
    \ 1) === \"s\" || file_name.substring(0, 1) === \"S\" ||\n        file_name.substring(0,\
    \ 1) === \"t\" || file_name.substring(0, 1) === \"T\" ||\n        file_name.substring(0,\
    \ 1) === \"u\" || file_name.substring(0, 1) === \"U\" ||\n        file_name.substring(0,\
    \ 1) === \"v\" || file_name.substring(0, 1) === \"V\" ||\n        file_name.substring(0,\
    \ 1) === \"w\" || file_name.substring(0, 1) === \"W\" ||\n        file_name.substring(0,\
    \ 1) === \"x\" || file_name.substring(0, 1) === \"X\" ||\n        file_name.substring(0,\
    \ 1) === \"y\" || file_name.substring(0, 1) === \"Y\" ||\n        file_name.substring(0,\
    \ 1) === \"z\" || file_name.substring(0, 1) === \"Z\"){\n        flag = false;\n\
    \    } else {\n        flag = true;\n", "    var patt = new RegExp('^[0-9]*\\\
    .[a-z][a-z][a-z].*$');\n    var result = patt.test(file_name);\n    \n    if (result){\n\
    \        return 'Yes';\n    }else{\n        return 'No';\n    }\n}\n", "    //\
    \ Make sure the file name contains only letters from the latin alphabetic range\
    \ ('a'-'z' and 'A'-'Z')\n    if (!/^[a-zA-z0-9]{1,3}\\.\\w+$/.test(file_name)){\n\
    \        return \"No\";\n    }\n\n    // Make sure the file name is more than\
    \ three digits, and is no less than 3 digits or longer.\n    // We use the match\
    \ function to find the pattern \"[1-9]\\d*\"\n    // If the file name is longer\
    \ than 3 digits, only the first 3 digits are considered and the rest are ignored.\n\
    \    // The regex pattern should match the entire file name.\n    // (This requirement\
    \ is specific to Windows/DOS file names.)\n    if(!/^(\\d{1,3}|)\\d*$/.test(file_name)){\n\
    \        return \"No\";\n    }\n\n    // Make sure the file name does not start\
    \ with any digit.\n    // We use the match function to find the pattern \"\\d\"\
    \n    // If the file name starts with a digit, the rest of the name is ignored.\n\
    \    // The regex pattern should match the entire file name.\n    // (This requirement\
    \ is specific to Windows/DOS file names.)\n    if(!/^\\d/.test(file_name)){\n\
    \        return \"No\";\n    }\n\n    // Make sure the file name is either not\
    \ empty, or starts with a dot, and does not end with a dot.\n    // We use the\
    \ match function to find the pattern \"^\\.|^$\"\n    // If the file name starts\
    \ with a dot (e.g \".test\"), then the rest of the name is ignored.\n    // The\
    \ regex pattern should match the entire file name.\n    // (This requirement is\
    \ specific to Windows/DOS file names.)\n    if(!/^\\./.test(file_name) || /\\\
    .$/.test(file_name)){\n        return \"No\";\n    }\n\n    // Make sure the file\
    \ name contains at least one '.'\n    // We use the match function to find the\
    \ pattern \".\"\n    // If the file name does not contain any dots, the rest of\
    \ the name is ignored.\n    // The regex pattern should match the entire file\
    \ name.\n    // (This requirement is specific to Windows/DOS file names.)\n  \
    \  if(!/.$/.test(file_name)){\n        return \"No\";\n    }\n\n    // Make sure\
    \ the file name does not end with any '.'\n    // We use the match function to\
    \ find the pattern \"\\.\"\n    // If the file name ends with a dot, the rest\
    \ of the name is ignored.\n    // The regex pattern should match the entire file\
    \ name.\n    // (This requirement is specific to Windows/DOS file names.)\n  \
    \  if(/\\./.test(file_name)){\n        return \"No\";\n    }\n\n    // If the\
    \ file name ends with \"txt\", \"exe\", \"dll\", or \"py\", then we consider it\
    \ to be valid.\n    // We use the match function to find the pattern \"\\.(txt|exe|dll|py)$\"\
    \n    // If the file name ends with those extensions, the rest of the name is ",
  "   \n   //Create a regular expression to match the file's name's format\n   var\
    \ file_name_regex = /^[^.][a-zA-Z][a-zA-Z.]*$/;\n   \n   //Create a regular expression\
    \ to match the substring after the dot.\n   var dot_regex = /\\.[^.]+$/;\n   \n\
    \   //Test the file's name to see if it matches the expressions above\n   if(file_name_regex.test(file_name)){\n\
    \      \n      //Test the file's name to see if it contains the dot '.'\n    \
    \  if(dot_regex.test(file_name)){\n         \n         //Remove the dot '.' from\
    \ the file's name\n         file_name = file_name.replace(/\\.[^.]+$/,\"\");\n\
    \         \n         //Test the file's name to see if it contains only letters\
    \ a-z and A-Z\n         var letter_regex = /[a-z][a-z.]*$/i;\n         \n    \
    \     //Test the file's name to see if it contains only letters A-Z and a-z\n\
    \         var upper_and_letter_regex = /[A-Z][A-Z.]*$/i;\n         \n        \
    \ //Test the file's name to see if it contains at least on letter a-z\n      \
    \   var single_letter_check_regex = /[a-z].*$/i;\n         \n         //Test the\
    \ file's name to see if it contains at least on letter A-Z\n         var single_letter_check_regex\
    \ = /[A-Z].*$/i;\n         \n         //Test the file's name to see if it contains\
    \ at least on letter A-Z or a-z\n         var single_letter_or_upper_check_regex\
    \ = /[A-Za-z].*$/i;\n         \n         //Test the file's name to see if it contains\
    \ at least on letter A-Z or a-z\n         var single_letter_or_upper_check_regex\
    \ = /[a-zA-z].*$/i;\n         \n         //Test the file's name to see if it contains\
    \ at least on letter A-Z or a-z\n         var single_letter_or_upper_check_regex\
    \ = /[A-Za-z].*$/i;\n         \n         //Test the file's name to see if it contains\
    \ at least on letter A-Z or a-z\n         var single_letter_or_upper_check_regex\
    \ = /[a-zA-z].*$/i;\n         \n         //Test the file's name to see if it contains\
    \ at least on letter A-Z or a-z\n         var single_letter_or_upper_check_regex\
    \ = /[A-Za-z].*$/i;\n         \n         //Test the file's name to see if it contains\
    \ at least on letter A-Z or a-z\n         var single_letter_or_upper_check_regex\
    \ = /[a-zA-z].*$/i;\n         \n         //Test the file's name to see if it contains\
    \ at least on letter A-Z or a-z\n         var single_letter_or_upper_check_regex\
    \ = /[A-Za-z", "\tvar file_name = file_name.toLowerCase();\n\tvar check = \"No\"\
    ;\n\tvar valid_string = \"No\";\n\tvar first_dot_position = file_name.indexOf(\"\
    .\");\n\t\n\t//First we check whether there are more than one digit\n\t//(the\
    \ first part of the file's name).\n\tif(first_dot_position > 0){\n\t\t//The substring\
    \ before the dot should not be empty\n\t\tvar first_part_string = file_name.substr(0,\
    \ first_dot_position);\n\t\tif(first_part_string.length > 0){\n\t\t\tvar first_part_string_capitalized\
    \ = first_part_string.toUpperCase();\n\t\t\tif(first_part_string_capitalized.length\
    \ == 1 &&\n\t\t\t\tfirst_part_string_capitalized >= \"A\" && first_part_string_capitalized\
    \ <= \"Z\"){\n\t\t\t\t//The first part of the file's name should be from the latin\
    \ alphabet\n\t\t\t\t//(from A to Z and from 0 to 9).\n\t\t\t\tcheck = \"Yes\"\
    ;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//Now we check whether there are only these 4 extensions\n\
    \t//in the file's name.\n\tvar extensions = [\"txt\", \"exe\", \"dll\"];\n\tvar\
    \ extensions_count = extensions.length;\n\tfor(var index = 0; index < extensions_count;\
    \ index++){\n\t\tvar extension = extensions[index];\n\t\tvar extension_string\
    \ = extension.toLowerCase();\n\t\tif(file_name.indexOf(extension_string) >= 0){\n\
    \t\t\t//The substring after the dot should be a valid extension.\n\t\t\tvar sub_string\
    \ = file_name.substr(file_name.lastIndexOf(extension_string) + 1, file_name.length);\n\
    \t\t\tsub_string = sub_string.toLowerCase();\n\t\t\t\n\t\t\t//Check if the substring\
    \ is a valid file extension.\n\t\t\t//The substring should contain these 4 file\
    \ extensions.\n\t\t\tvar valid = true;\n\t\t\tfor(var index2 = 0; index2 < sub_string.length;\
    \ index2++){\n\t\t\t\tvar char = sub_string[index2];\n\t\t\t\tif(char == '.' ||\
    \ char == '_' || char == '-' || char == ' '){\n\t\t\t\t\tvalid = false;\n\t\t\t\
    \t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(valid == true){\n\t\t\t\tcheck\
    \ = \"Yes\";\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//If the file's name is valid, then we\
    \ return it.\n\tif(check == \"Yes\"){\n\t\tvalid_string = check;\n\t}\n\treturn\
    \ valid_string;\n}\n", "  var is_valid_file_name = false;\n\n  if(file_name.length<3\
    \ || file_name.indexOf(\".\") != -1 || file_name.substring(0,1) != \"a\" || file_name.substring(0,1)\
    \ != \"A\" || file_name.substring(0,3) != \"0..9\" || file_name.substring(file_name.length-1,file_name.length)\
    \ != \".txt\"){\n    //if the file's name is not valid then return false\n   \
    \ is_valid_file_name = false;\n  }else{\n    var dot_index = file_name.indexOf(\"\
    .\");\n    if(dot_index==-1){\n      //If the file name is without dots then return\
    \ true\n      is_valid_file_name = true;\n    }\n    else{\n      var file_name\
    \ = file_name.substring(0,dot_index);\n      var extension = file_name.substring(dot_index,file_name.length);\n\
    \n      if(['txt', 'exe', 'dll'].indexOf(extension)==-1){\n        //if the file\
    \ extension is invalid then return false\n        is_valid_file_name = false;\n\
    \      }else{\n        is_valid_file_name = true;\n      }\n    }\n  }\n\n  return\
    \ is_valid_file_name;\n}\n", "    if(file_name.match(/^[0-9]{0,3}\\.[a-z][a-z][a-z]$/)){\n\
    \        if(file_name.indexOf('.') > 0 && file_name.charAt(file_name.indexOf('.')\
    \ - 1) != '\\\\'){\n            return \"Yes\";\n        }else{\n            return\
    \ \"No\";\n        }\n    }else{\n        return \"No\";\n    }\n}\n", "    //\
    \ Create a variable to hold the returned value.\n    var result = false;\n   \
    \ // Check file name, return 'Yes' if all conditions are met, and return 'No'\
    \ otherwise.\n    if(file_name.length > 3 && file_name.indexOf('.') === -1 &&\
    \ file_name.substring(0, 1) >= 'a' && file_name.substring(0, 1) <= 'z' && file_name.substring(1,\
    \ file_name.length) <= ['txt', 'exe', 'dll']){\n        result = 'Yes';\n    }\n\
    \    else result = 'No';\n    return result;\n}\n", "\tvar re = /[0-9]*\\.[^.]+/g;\n\
    \treturn re.test(file_name);\n}\n", "  \n  var file_split = file_name.split('.')\n\
    \  var file_name_length = file_split.length\n  \n  //Check for invalid conditions\n\
    \  if (file_split.length < 3) return \"No\"\n  if (!(/^[a-z][a-z0-9]+\\.[a-z][a-z]+$/i.test(file_split[0])))\
    \ return \"No\"\n  if (!(/^[a-z][a-z]+$/i.test(file_split[1]))) return \"No\"\n\
    \  \n  //Check for valid conditions\n  if(file_name_length <= 2) return \"No\"\
    \n  \n  return \"Yes\"\n}\n", "\tlet file_length = file_name.length;\n\tif (file_length\
    \ < 3 || file_length > 10 || file_name.substring(0,1) != \"_\" || \n\tfile_name.substring(0,1)\
    \ != \"-\" || file_name.substring(0,1) != \".\" || \n\tfile_name.substring(0,1)\
    \ != \"a\" || file_name.substring(0,1) != \"b\" || \n\tfile_name.substring(0,1)\
    \ != \"c\" || file_name.substring(0,1) != \"d\" || \n\tfile_name.substring(0,1)\
    \ != \"e\" || file_name.substring(0,1) != \"f\" || \n\tfile_name.substring(0,1)\
    \ != \"g\" || file_name.substring(0,1) != \"h\" || \n\tfile_name.substring(0,1)\
    \ != \"i\" || file_name.substring(0,1) != \"j\" || \n\tfile_name.substring(0,1)\
    \ != \"k\" || file_name.substring(0,1) != \"l\" || \n\tfile_name.substring(0,1)\
    \ != \"m\" || file_name.substring(0,1) != \"n\" || \n\tfile_name.substring(0,1)\
    \ != \"o\" || file_name.substring(0,1) != \"p\" || \n\tfile_name.substring(0,1)\
    \ != \"q\" || file_name.substring(0,1) != \"r\" || \n\tfile_name.substring(0,1)\
    \ != \"s\" || file_name.substring(0,1) != \"t\" || \n\tfile_name.substring(0,1)\
    \ != \"u\" || file_name.substring(0,1) != \"v\" || \n\tfile_name.substring(0,1)\
    \ != \"w\" || file_name.substring(0,1) != \"x\" || \n\tfile_name.substring(0,1)\
    \ != \"y\" || file_name.substring(0,1) != \"z\" || \n\tfile_name.substring(0,1)\
    \ != \"A\" || file_name.substring(0,1) != \"B\" || \n\tfile_name.substring(0,1)\
    \ != \"C\" || file_name.substring(0,1) != \"D\" || \n\tfile_name.substring(0,1)\
    \ != \"E\" || file_name.substring(0,1) != \"F\" || \n\tfile_name.substring(0,1)\
    \ != \"G\" || file_name.substring(0,1) != \"H\" || \n\tfile_name.substring(0,1)\
    \ != \"I\" || file_name.substring(0,1) != \"J\" || \n\tfile_name.substring(0,1)\
    \ != \"K\" || file_name.substring(0,1) != \"L\" || \n\tfile_name.substring(0,1)\
    \ != \"M\" || file_name.substring(0,1) != \"N\" || \n\tfile_name.substring(0,1)\
    \ != \"O\" || file_name.substring(0,1) != \"P\" || \n\tfile_name.substring(0,1)\
    \ != \"Q\" || file_name.substring(0,1) != \"R\" || \n\tfile_name.substring(0,1)\
    \ != \"S\" || file_name.substring(0,1) != \"T\" || \n\tfile_name.substring(0,1)\
    \ != \"U\" || file_name.substring(0,1) != \"V\" || \n\tfile_name.substring(0,1)\
    \ != \"W\" || file_name.substring(0,1) != \"X\" || \n\tfile_name.substring(0,1)\
    \ != \"Y\" || file_name.substring(0,1) != \"Z\")", "    var digits = \"[0-9]\"\
    ;\n    if(file_name.match(digits)){\n        return 'No'\n    }\n    if(file_name.match(\"\
    .\")){\n        if(file_name.charAt(0)!='a' || file_name.charAt(0)!='A' ||\n \
    \           file_name.charAt(1)!='z' || file_name.charAt(1)!='Z'){\n         \
    \   return 'No'\n        }\n        if(file_name.substring(file_name.indexOf(\"\
    .\")+1)!=\"txt\" && file_name.substring(file_name.indexOf(\".\")+1)!=\"exe\" &&\
    \ file_name.substring(file_name.indexOf(\".\")+1)!=\"dll\"){\n            return\
    \ 'No'\n        }\n        return 'Yes'\n    }\n    else{\n        return 'No'\n\
    \    }\n}\n</cell>\n<text>\nProblem 2.3 Write a Python function which takes a\
    \ string representing a file's name, and returns the file's extension. \nThe function\
    \ must conform to the following conditions: \n- There should not be more than\
    \ three digits ('0'-'9') in the file's name.\n- There should be exactly one dot\
    \ ('.') in the file's name.\n- The substring before the dot should not be empty,\
    \ and it starts with a letter from the latin alphabet ('a'-'z' and 'A'-'Z'). \n\
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll', 'py',\
    \ 'js', 'php', 'css', 'xml', 'js', 'php', 'css', 'xml']. \nExamples:\n>>> file_name_ext(\"\
    example.txt\")\n\".txt\"\n>>> file_name_ext(\"1example.dll\")\n\"dll\"\n>>> file_name_ext(\"\
    example.exe\")\n\"exe\"\n>>> file_name_ext(\"example_1.txt\")\n\"txt\"\n>>> file_name_ext(\"\
    exa.exe\")\n\"exe\"\n>>> file_name_ext(\"exa.dll\")\n\"dll\"\n>>> file_name_ext(\"\
    exa.txt\")\n\"txt\"\n>>> file_name_ext(\"exa_1.txt\")\n\"txt\"\n>>> file_name_ext(\"\
    exa.exe\")\n\"exe\"\n>>> file_name_ext(\"exa_1.exe\")\n\"exe\"\n>>> file_name_ext(\"\
    exa_1.dll\")\n\"dll\"\n>>> file_name_ext(\"exa_1.dll\")\n\"dll\"\n>>> file_name_ext(\"\
    exa_1.exe\")\n\"exe\"\n>>> file_name_ext(\"exa_1.exe\")\n\"exe\"\n>>> file_name_ext(\"\
    exa_1.txt\")\n\"txt\"\n>>> file_name_ext(\"exa_1.txt\")\n\"txt\"\n>>> file_name_ext(\"\
    exa_1.exe\")\n\"exe\"\n>>> file_name_ext(\"exa_1.", "\tif (file_name.length <=\
    \ 3){\n\t\treturn \"No\";\n\t}\n\tvar dotPos = file_name.indexOf(\".\");\n\tif\
    \ (dotPos < 0){\n\t\treturn \"No\";\n\t}\n\tvar letters = file_name.substring(0,dotPos).split(\"\
    \");\n\tif (letters.length != 1){\n\t\treturn \"No\";\n\t}\n\tif (letters[0] <\
    \ 'a' || letters[0] > 'z'){\n\t\treturn \"No\";\n\t}\n\tvar filetype = file_name.substring(dotPos).split(\"\
    \");\n\tif (filetype.length != 1 || filetype[0] != \"txt\" || filetype[0] != \"\
    exe\" || filetype[0] != \"dll\"){\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n\
    }\n", "  return checkString(file_name,\n                     /^\\d{1}\\.(exe|dll)$/,\n\
    \                     /^\\d{1}\\.(txt|exe|dll)$/,\n                     /^[a-z]{3}$/);\n\
    }\n", "  if(file_name.length<4){\n    return \"No\";\n  }\n  if(file_name.indexOf(\"\
    .\")!=-1){\n    var file_name_split = file_name.split(\".\");\n    var last_word\
    \ = file_name_split[file_name_split.length-1];\n    if(last_word.length<2){\n\
    \      return \"No\";\n    }\n    var first_letter = last_word.charAt(0);\n  \
    \  if(first_letter>='a' && first_letter<='z'){\n      return \"No\";\n    }\n\
    \    if(file_name_split.length>2 && file_name_split[0].length<2){\n      return\
    \ \"No\";\n    }\n    if(file_name_split.length>2 && file_name_split[1].length<2){\n\
    \      return \"No\";\n    }\n  }\n  return \"Yes\";\n}\n", "\treturn (file_name_check_re(file_name)\
    \ == \"Yes\");\n}\n", "\t\n\t//Get the file extension.\n\tvar ext = file_name.split('.').pop();\n\
    \t\n\t//Check if the file's name contains more than three digits, and\n\t//if\
    \ it has only one dot.\n\treturn (\n\t\t(ext.length > 3) \n\t\t&&\n\t\t(file_name.indexOf('.')\
    \ != 0) \n\t\t&&\n\t\t(ext.length == 1) \n\t\t&&\n\t\t(ext.charAt(0) >= 'a' &&\
    \ ext.charAt(0) <= 'z') \n\t\t&&\n\t\t(ext.charAt(ext.length-1) >= 'a' && ext.charAt(ext.length-1)\
    \ <= 'z')\n\t\t\n\t)\n}\n", "  var no;\n  \n  if(file_name.length >= 3 && file_name.indexOf(\"\
    .\") == -1 && file_name[0] >= 'a' && file_name[0] <= 'z' && file_name[1] >=  'a'\
    \ && file_name[1] <= 'z'){\n    no = \"Yes\";\n  }\n  else {\n    no = \"No\"\
    ;\n  }\n  return no;\n}\n", "    var res = /^[0-9]{3}\\.(exe|dll|txt)$/.test(file_name);\n\
    \    if(!res) return 'No'; //invalid file name\n    var file_name = file_name.substring(1,\
    \ file_name.length-1);\n    var letters = /^[a-z][a-z]+$/gi;\n    return letters.test(file_name);\n\
    }\n", "    var pattern = /^[0-9]{1,3}[a-zA-Z]{1}\\.[a-zA-Z]{1,3}$/\n    if (!file_name.match(pattern)){\n\
    \        return \"No\"\n    }\n    if (!(file_name.substring(0,1)==='a' && file_name.substring(0,1)==='z'\
    \ && file_name.substring(0,1)==='A' && file_name.substring(0,1)==='Z')){\n   \
    \     return \"No\"\n    }\n    var exts = [\"txt\", \"exe\", \"dll\"]\n    var\
    \ ext = file_name.split('.').pop()\n    if (exts.indexOf(ext)<0){\n        return\
    \ \"No\"\n    }\n    return \"Yes\"\n}", "    var test_name = file_name.substring(0,file_name.length-2);\n\
    \    var test_name = test_name.substring(0,test_name.indexOf(\".\")).toUpperCase();\n\
    \    var test_name = test_name.substring(0,test_name.indexOf(\".\")).toLowerCase();\n\
    \    var test_name = test_name[0];\n    var test_name = test_name[0];\n    var\
    \ test_name = test_name.substring(0,2);\n    if (test_name.length < 3 || test_name\
    \ != \"a\" || test_name != \"b\" || test_name != \"c\" || test_name != \"d\" ||\
    \ test_name != \"e\" || test_name != \"f\" || test_name != \"g\" || test_name\
    \ != \"h\" || test_name != \"i\" || test_name != \"j\" || test_name != \"k\" ||\
    \ test_name != \"l\" || test_name != \"m\" || test_name != \"n\" || test_name\
    \ != \"o\" || test_name != \"p\" || test_name != \"q\" || test_name != \"r\" ||\
    \ test_name != \"s\" || test_name != \"t\" || test_name != \"u\" || test_name\
    \ != \"v\" || test_name != \"w\" || test_name != \"x\" || test_name != \"y\" ||\
    \ test_name != \"z\"){\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
  "\t//Create a variable with the name 'valid' and initialize it to 'No'\n\tvar valid\
    \ = 'No';\n\t\n\t//Verify if the file name contains more than 3 digits\n\tif (file_name.length\
    \ >= 3 && file_name.length <= 6){\n\t\t\n\t\t//Verify if the file name contains\
    \ exactly one dot\n\t\tif (file_name.indexOf('.') != -1){\n\t\t\t\n\t\t\t//Verify\
    \ if the substring before the dot is empty, and it starts with a letter from \n\
    \t\t\t// the latin alphapet ('a'-'z' and 'A'-'Z')\n\t\t\tif ((file_name.indexOf('.')\
    \ > 0) && file_name.substring(0,1) >= 'a' && file_name.substring(0,1) <= 'z' ||\n\
    \t\t\t\t(file_name.indexOf('.') > 0) && file_name.substring(0,1) >= 'A' && file_name.substring(0,1)\
    \ <= 'Z'){\n\t\t\t\t\n\t\t\t\t//Verify if the substring after the dot is one of\
    \ these: ['txt', 'exe', 'dll']\n\t\t\t\tif (file_name.substring(file_name.indexOf('.')).toLowerCase()\
    \ in [\"txt\", \"exe\", \"dll\"]){\n\t\t\t\t\t//If it is true, set 'valid' to\
    \ 'Yes'\n\t\t\t\t\tvalid = 'Yes';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//Return\
    \ this value\n\treturn valid;\n}\n", "\tvar file_name = file_name.toLowerCase();\n\
    \tif (file_name.length < 4){\n\t\treturn \"No\";\n\t}\n\tif (file_name.indexOf(\"\
    .\") == -1){\n\t\treturn \"No\";\n\t}\n\t\n\tvar dot_index = file_name.indexOf(\"\
    .\");\n\tvar first_char = file_name.substring(0, dot_index).toLowerCase();\n\t\
    if (first_char.length < 1){\n\t\treturn \"No\";\n\t}\n\tif (first_char !== 'a'\
    \ && first_char !== 'b' && first_char !== 'c' && first_char !== 'd' && first_char\
    \ !== 'e' && first_char !== 'f' && first_char !== 'g' && first_char !== 'h' &&\
    \ first_char !== 'i' && first_char !== 'j' && first_char !== 'k' && first_char\
    \ !== 'l' && first_char !== 'm' && first_char !== 'n' && first_char !== 'o' &&\
    \ first_char !== 'p' && first_char !== 'q' && first_char !== 'r' && first_char\
    \ !== 's' && first_char !== 't' && first_char !== 'u' && first_char !== 'v' &&\
    \ first_char !== 'w' && first_char !== 'x' && first_char !== 'y' && first_char\
    \ !== 'z'){\n\t\treturn \"No\";\n\t}\n\tif (first_char === 'a'){\n\t\treturn \"\
    No\";\n\t}\n\t\n\tvar extension_index = file_name.indexOf(\".\", dot_index);\n\
    \tvar extension = file_name.substring(dot_index+1, extension_index).toLowerCase();\n\
    \tif (extension.length < 1 || extension.indexOf(\"exe\") != -1 || extension.indexOf(\"\
    dll\") != -1){\n\t\treturn \"No\";\n\t}\n\t\n\treturn \"Yes\";\n}", "  \n  if(file_name.length>3){\n\
    \    alert(\"Sorry, there are too many numbers in the file's name.\");\n    return\
    \ false;\n  }\n  \n  //Check if the file name contains one dot '.'\n  if(file_name.indexOf(\"\
    .\") == -1){\n    alert(\"Sorry, there is only one dot ('.') in the file's name.\"\
    );\n    return false;\n  }\n  \n  //Check if the substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n  if(file_name.indexOf(\".\") > 0 && !(file_name.substring(0,1) ==\
    \ \"a\" || file_name.substring(0,1) == \"A\" || file_name.substring(0,1) == \"\
    0\" || file_name.substring(0,1) == \"1\" || file_name.substring(0,1) == \"2\"\
    \ || file_name.substring(0,1) == \"3\" || file_name.substring(0,1) == \"4\" ||\
    \ file_name.substring(0,1) == \"5\" || file_name.substring(0,1) == \"6\" || file_name.substring(0,1)\
    \ == \"7\" || file_name.substring(0,1) == \"8\" || file_name.substring(0,1) ==\
    \ \"9\")){\n    alert(\"Sorry, the substring before the dot should not be empty,\
    \ and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\"\
    );\n    return false;\n  }\n  \n  //Check if the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n  if(file_name.indexOf(\".\") == file_name.length-1\
    \ && !([\"exe\", \"dll\"].includes(file_name.substring(file_name.indexOf(\".\"\
    ) + 1)))){\n    alert(\"Sorry, the substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\");\n    return false;\n  }\n  \n  return true;\n}\n\n",
  "  var regex = /^[0-9]+[a-z][0-9a-z_]+\\.(txt|exe|dll)$/i;\n  if(regex.test(file_name)){\n\
    \    return 'Yes';\n  }\n  else{\n    return 'No';\n  }\n}\n", "    if(file_name.match(/[0-9]{3}\\\
    .[^\\.]+/)){\n        var file_num = file_name.slice(0,3);\n        var letter1\
    \ = file_name.slice(-3);\n        var letter2 = file_name.slice(0,1);\n      \
    \  return (file_num===\"000\") || (file_num===\"010\") || (file_num===\"020\"\
    ) || (file_num===\"030\") || (file_num===\"040\") || (file_num===\"050\") || (file_num===\"\
    060\") || (file_num===\"100\") || (file_num===\"110\") || (file_num===\"120\"\
    ) || (file_num===\"130\") || (file_num===\"140\") || (file_num===\"150\") || (file_num===\"\
    160\") || (letter1===\"a\") || (letter1===\"b\") || (letter1===\"c\") || (letter1===\"\
    d\") || (letter1===\"e\") || (letter1===\"f\") || (letter1===\"g\") || (letter1===\"\
    h\") || (letter1===\"i\") || (letter1===\"j\") || (letter1===\"k\") || (letter1===\"\
    l\") || (letter1===\"m\") || (letter1===\"n\") || (letter1===\"o\") || (letter1===\"\
    p\") || (letter1===\"q\") || (letter1===\"r\") || (letter1===\"s\") || (letter1===\"\
    t\") || (letter1===\"u\") || (letter1===\"v\") || (letter1===\"w\") || (letter1===\"\
    x\") || (letter1===\"y\") || (letter1===\"z\") || (letter2===\"a\") || (letter2===\"\
    b\") || (letter2===\"c\") || (letter2===\"d\") || (letter2===\"e\") || (letter2===\"\
    f\") || (letter2===\"g\") || (letter2===\"h\") || (letter2===\"i\") || (letter2===\"\
    j\") || (letter2===\"k\") || (letter2===\"l\") || (letter2===\"m\") || (letter2===\"\
    n\") || (letter2===\"o\") || (letter2===\"p\") || (letter2===\"q\") || (letter2===\"\
    r\") || (letter2===\"s\") || (letter2===\"t\") || (letter2===\"u\") || (letter2===\"\
    v\") || (letter2===\"w\") || (letter2===\"x\") || (letter2===\"y\") || (letter2===\"\
    z\");\n    } else{\n        return false;\n    }\n}\n</code>\n", "\tif (file_name.length\
    \ >= 3) return file_name;\n\tif (file_name.split('.').length == 1) return file_name;\n\
    \tvar first_letter = file_name.split('.')[0];\n\tif (first_letter.match(/^[A-z]$/)\
    \ == null) return 'No';\n\tif (['txt','exe','dll'].indexOf(file_name.split('.')[1])\
    \ == -1) return 'No';\n\treturn 'Yes';\n}\n", "\tif (file_name.indexOf(\".\")\
    \ > -1 && file_name.substring(0,1) !== \".\" && file_name.substring(0,1) !== '~'\
    \ &&\n\t\tfile_name.substring(0,1) !== '/' && file_name.substring(0,1) !== '\\\
    \\' && file_name.substring(0,1) !== '\"'){\n\t\treturn \"Yes\";\n\t}\n\telse {\n\
    \t\treturn \"No\";\n\t}\n}", "\t//Get the file name without the extension\n\t\
    var file_name_noext= file_name.slice(0, file_name.length - 4);\n\t//Remove all\
    \ non-alphanumeric characters\n\tvar file_name_clean= file_name_noext.replace(/[^A-Za-z0-9]/g,\
    \ \"\");\n\t//Check if there is one dot '.'\n\tif( file_name_clean.indexOf(\"\
    .\") < 0){\n\t\t//Remove all characters\n\t\tvar file_name_clean= file_name_clean.replace(/[^a-zA-Z]/g,\
    \ \"\");\n\t\t//Check if there is at least one letter from the latin alphabet\n\
    \t\tif(file_name_clean.length < 1){\n\t\t\treturn \"No\";\n\t\t}\n\t}else{\n\t\
    \tvar file_name_clean= file_name_noext.slice(file_name_noext.indexOf(\".\") +\
    \ 1);\n\t\tif( file_name_clean.indexOf(\"txt\") < 0){\n\t\t\treturn \"No\";\n\t\
    \t}\n\t\tif( file_name_clean.indexOf(\"exe\") < 0){\n\t\t\treturn \"No\";\n\t\t\
    }\n\t\tif( file_name_clean.indexOf(\"dll\") < 0){\n\t\t\treturn \"No\";\n\t\t\
    }\n\t}\n\treturn \"Yes\";\n}\n", "    // 1. Create a string variable called 'name'\
    \ that takes in input from the function call.\n    // 2. Make sure the variable\
    \ 'name' does not take in more than three digits ('0'-'9').\n    // 3. Make sure\
    \ the variable 'name' does not take in more than three digits ('0'-'9') in the\
    \ file's name.\n    // 4. Make sure the substring before the dot should not be\
    \ empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \    // 5. Make sure the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n    // 6. Return this variable.\n    // (hint: use the regular\
    \ expression '^[a-zA-z]*$')\n    // 7. Return this variable.\n    // (hint: use\
    \ the regular expression '\\.[a-zA-z]*$')\n    // 8. Return this variable.\n \
    \   // (hint: use the regular expression '\\.[a-zA-z]\\..*$')\n}\n</code></pre>\n\
    \n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing text_cell rendered\"\
    >\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"inner_cell\">\n<div\
    \ class=\"text_cell_render border-box-sizing rendered_html\">\n<h2 id=\"Exercise-2\"\
    >Exercise 2<a class=\"anchor-link\" href=\"#Exercise-2\">&#182;</a></h2><p>In\
    \ this exercise, you will get to practice the <code>if-else</code> statement.\
    \ One of the key elements of this exercise is that you should use 'if' and 'else'\
    \ statements appropriately.</p>\n\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing\
    \ code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\"\
    >In&nbsp;[36]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\"\
    >\n<div class=\" highlight hl-ipython3\"><pre><span></span><span class=\"c1\"\
    ># Define a function, called 'is_palindrome', that takes in one parameter called\
    \ 'word'.</span>\n<span class=\"c1\"># If 'word' is a palindrome, then the function\
    \ should return 'Yes'</span>\n<span class=\"c1\"># If 'word' is not a palindrome,\
    \ then the function should return 'No'</span>\n<span class=\"c1\"># A palindrome\
    \ is a word that is the same word read backwards.</span>\n<span class=\"c1\">#\
    \ A palindrome can have multiple ways of reading it.</span>\n<span class=\"c1\"\
    ># A palindrome can look like this 'taccat' or 'raccca' or even 'wtrtat' or 'rwtttr'\
    \ or even 'rtattw' or 'rwtttw'</span>\n<span class=\"c1\"># A palindrome can also\
    \ look like this: 'racecar' or 'racecarr' or 'racecarw' or 'racecarth' or 'racecartr'</span>\n\
    <span class=\"c1\"># Define a ", "  var re = /^([a-zA-Z0-9]+\\.)*(\\w+)$/;\n \
    \ if(re.test(file_name)){\n    return \"Yes\";\n  }\n  return \"No\";\n}\n", " \
    \   var file_name = file_name.replace(/\\./g, '');\n    \n    var file_ext = file_name.split('.');\n\
    \    \n    if (file_ext.length>=1){\n        for (var i=1; i<file_ext.length;\
    \ i++){\n            file_ext[i] = file_ext[i].trim();\n        }\n        var\
    \ file_ext = file_ext.toString();\n    }\n    \n    var valid = true;\n    \n\
    \    if (file_ext.toString().length<=1){\n        valid = false;\n    }\n    \n\
    \    if (valid){\n        for (var i=0; i<file_ext.length; i++){\n           \
    \ if (file_ext[i] != '' && file_ext[i] == 'dll' || \n                file_ext[i]\
    \ != '' && file_ext[i] == 'exe'){\n                valid = true;\n           \
    \ }\n        }\n    }\n    \n    return valid;\n}\n\n", "\t//Split the file name\
    \ into it's component parts:\n\tvar parts=file_name.split(\".\");\n\t//The substring\
    \ before the dot should be empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z'):\n\tif(!parts[0]||(parts[0].length<2)||(parts[0][0]>='a'&&parts[0][0]<='z')||(parts[0][0]>='A'&&parts[0][0]<='Z')){\n\
    \t\tparts[0]=\"invalid\";\n\t}\n\t//The substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']:\n\tvar ext_arr=['txt','exe','dll'];\n\tvar\
    \ valid_ext=ext_arr.find(function(str){\n\t\treturn file_name.toLowerCase().indexOf(str.toLowerCase())!=-1;\n\
    \t});\n\tif(parts.length>1&&parts[1]&&!valid_ext){\n\t\tparts[1]=\"invalid\";\n\
    \t}\n\treturn parts;\n}", "    // Convert string to array of chars. Note: In Python,\
    \ the string data type has a \n    // toCharArray() method which converts the\
    \ string data to an array of chars. \n    // However, in JS, we need to convert\
    \ the string data to an array of characters \n    // separated by spaces. \n \
    \   var arr = file_name.split('');\n    var char_arr = arr.map(function(item){\n\
    \        return item.charCodeAt(0);\n    });\n    \n    // Determine if file's\
    \ name contains more than three digits.\n    // - If the string contains more\
    \ than three digits, return \"No\".\n    if(char_arr.length > 3){\n        return\
    \ \"No\";\n    }\n    \n    // Determine if file's name contains exactly one dot.\n\
    \    // - If the file's name contains exactly one dot, return \"No\".\n    if(char_arr.length\
    \ == 1 && char_arr[0] == '.'){\n        return \"No\";\n    }\n    \n    // Determine\
    \ if substring before the dot is empty.\n    // - If the substring before the\
    \ dot is empty, return \"No\".\n    if(char_arr.length == 2 && char_arr[0] ===\
    \ '' && char_arr[1] == '.'){\n        return \"No\";\n    }\n    \n    // Determine\
    \ if substring after the dot contains one of these strings: \n    // ['txt', 'exe',\
    \ 'dll'].\n    // - If the substring after the dot contains one of these strings,\
    \ return \"No\".\n    // - If the substring after the dot contains none of these\
    \ strings, return \"Yes\".\n    if(char_arr.length == 3 && char_arr[1] == 'exe'\
    \ && char_arr[2] == 'dll'){\n        return \"No\";\n    }\n    \n    // Otherwise,\
    \ it returns \"Yes\".\n    return \"Yes\";\n}\n</cell>\n<text>\nThe Python function\
    \ file_name_check() above returns the string \"Yes\" if the file's name is valid\
    \ and \"No\" otherwise. The Python function file_name_check() is used to determine\
    \ whether the file's name is valid.\n\nRun the Python function file_name_check()\
    \ below to validate the string \"example.txt\".\n\n\n</text>\n<cell>\nfile_name_check(\"\
    example.txt\")\n</cell>\n<text>\nRun the Python function file_name_check() below\
    \ to validate the string \"1example.dll\".\n\n\n</text>\n<cell>\nfile_name_check(\"\
    1example.dll\")\n</cell>\n<text>\nRun the Python function file_name_check() below\
    \ to validate the string \"test0.txt\".\n\n\n</text>\n<cell>\nfile_name_check(\"\
    test0.txt\")\n</cell>\n<text>\nRun the Python function file_name_check() below\
    \ to validate the string \"test1.dll\".\n\n\n</text>\n<cell>\nfile_name_check(\"\
    test1.dll\")\n</cell>\n<text>\nRun the Python function file_name_check() below\
    \ to ", "  if(file_name.length>3){\n    return \"No\";\n  }\n  if(file_name.indexOf('.')\
    \ === -1 || file_name.substr(0,1) !== \"a\" || \n      file_name.substr(file_name.lastIndexOf(\"\
    .\")).indexOf(\",\")>-1){\n    return \"No\";\n  }\n  return \"Yes\";\n}\n</cell>\n\
    <cell>", "    var result = \"\";\n    var dotIndex = file_name.indexOf(\".\");\n\
    \    if (dotIndex == -1) {\n        result = result + \"No\";\n    } else {\n\
    \        var subStringBeforeDot = file_name.substring(0, dotIndex);\n        var\
    \ charCounter = 0;\n        var valid = true;\n        for (var i = 0; i < subStringBeforeDot.length;\
    \ i++) {\n            if (i == 0) {\n                if ((charCounter != 0) &&\
    \ (charCounter < 1) || (charCounter == 1)) {\n                    valid = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (subStringBeforeDot.charAt(i) != '0' && subStringBeforeDot.charAt(i) != '9')\
    \ {\n                valid = false;\n                break;\n            }\n \
    \           charCounter++;\n        }\n        result = result + \"Yes\";\n  \
    \  }\n    return result;\n}\n", "\treturn (/^[0-9]{3}\\.txt$/i).test(file_name)\
    \ && \n\t\t(/^[a-z]{2}\\.exe$/i).test(file_name) && \n\t\t(/^[a-z]{2}\\.dll$/i).test(file_name)\
    \ && \n\t\t(/^[a-z]{2}\\.bin$/i).test(file_name);\n}", "\t// Your code here\n\t\
    var flag = true;\n\tvar check_digits = file_name.match(/\\d/g);\n\tvar check_dots\
    \ = file_name.match(/\\./g);\n\tvar check_spaces = file_name.match(/\\s/g);\n\t\
    var check_letter_first = file_name.match(/[a-z]/g);\n\tvar check_letter_last =\
    \ file_name.match(/[A-Z]/g);\n\tvar check_letter_all = file_name.match(/[a-z][A-Z]/g);\n\
    \tvar check_letter = file_name.match(/[a-z][A-Z]{2}/g);\n\tvar check_file = file_name.match(/[a-zA-Z]{3}[\\\
    .]{1}[a-zA-Z]{3}/g);\n\t\n\tif((check_digits.length<3) || (check_dots.length<1)\
    \ || (check_spaces.length<0) || (check_letter_first.length<1) || (check_letter_last.length<1)\
    \ || (check_letter_all.length<0) || (check_letter.length<2) || (check_file.length<3)){\n\
    \t\tflag = false;\n\t}\n\treturn flag;\n}\n", "    let file_name = file_name.toLowerCase();\n\
    \    //The maximum number of file's name is 3\n    if (file_name.length >= 3){\n\
    \        //The maximum number of digits is 3\n        if (file_name.match(/\\\
    d/g).length >= 3){\n            //The file name must not contain '.'\n       \
    \     if(file_name.match(/\\./g).length > 0){\n                let file_name_array\
    \ = file_name.split('.');\n                //If the file name is valid then\n\
    \                if (file_name_array[0].length > 1 && file_name_array[0][0] <=\
    \ 'z' && file_name_array[0][0] <= 'Z'){\n                    //If the file name\
    \ contains only these strings: ['exe', 'dll']\n                    if (file_name_array[1].length\
    \ > 1 && file_name_array[1].length == 1 && file_name_array[1].match(/exe|dll/g)){\n\
    \                        return 'Yes';\n                    }else{\n         \
    \               return 'No';\n                    }\n                }else{\n\
    \                    return 'No';\n                }\n            }else{\n   \
    \             return 'No';\n            }\n        }else{\n            return\
    \ 'No';\n        }\n    }else{\n        return 'No';\n    }\n}", "\t// TODO: Complete\
    \ this function \n\tif (file_name.length <=3 || file_name.indexOf(\".\") == -1\
    \ || \n\t\tfile_name.substringBefore(\" \") || \n\t\tfile_name.substringAfter(\"\
    \ \") != ['txt','exe','dll']\n\t) {\n\t\treturn \"No\";\n\t}\n\telse{\n\t\treturn\
    \ \"Yes\";\n\t}\n}\n", "\tvar is_valid = false\n\tif(file_name.indexOf(\".\")\
    \ != -1){\n\t\tif(file_name.substring(0,1) != \"-\"){\n\t\t\tif(file_name.indexOf(\"\
    .\") == 1){\n\t\t\t\treturn \"No\"\n\t\t\t}else{\n\t\t\t\tis_valid = false\n\t\
    \t\t}\n\t\t}else{\n\t\t\tif(file_name.substring(file_name.indexOf(\".\")).toLowerCase()\
    \ != \"txt\" &&\n\t\t\t\tfile_name.substring(file_name.indexOf(\".\")).toLowerCase()\
    \ != \"exe\" &&\n\t\t\t\tfile_name.substring(file_name.indexOf(\".\")).toLowerCase()\
    \ != \"dll\"){\n\t\t\t\tis_valid = false\n\t\t\t}\n\t\t}\n\t}else{\n\t\tif(file_name.substring(0,1)\
    \ != \"-\"){\n\t\t\tis_valid = false\n\t\t}\n\t}\n\treturn is_valid\n}", "\tlet\
    \ pattern = /[0-9]{3}\\.[a-z][a-z]+$/;\n\tlet result = pattern.test(file_name);\n\
    \treturn result;\n}\n", "    // Declare a variable that stores the result of our\
    \ check\n    var check_result = \"No\";\n    \n    // Check if the file's name\
    \ contains more than three digits in its name part\n    var regEx = new RegExp('^[0-9]{1,3}$');\n\
    \    if(regEx.test(file_name)){\n        // If the file name is valid, set check_result\
    \ to 'Yes'\n        check_result = \"Yes\";\n    } else {\n        // If the file\
    \ name is invalid, set check_result to 'No'\n        check_result = \"No\";\n\
    \    }\n    \n    // Check if the file's name contains exactly one dot '.'\n \
    \   if(regEx.test(file_name)){\n        // If the file name contains exactly one\
    \ dot '.', set check_result to 'Yes'\n        if(file_name.indexOf(\".\") > -1){\n\
    \            if(file_name.indexOf(\".\") > 1){\n                // If the file's\
    \ name contains more than one dot '.', set check_result \n                // to\
    \ 'Yes'\n                check_result = \"Yes\";\n            } else {\n     \
    \           // If the file's name contains exactly one dot '.', set check_result\
    \ \n                // to 'No'\n                check_result = \"No\";\n     \
    \       }\n        }\n    }\n    \n    // Check if the substring before the dot\
    \ should not be empty, and it starts with a letter \n    // from the latin alphabet\
    \ ('a'-'z' and 'A'-'Z')\n    if(regEx.test(file_name)){\n        if(file_name.indexOf(\"\
    .\") > -1){\n            if(file_name.indexOf(\".\") > 1){\n                //\
    \ If the substring before the dot should not be empty, and it starts with a \n\
    \                // letter from the latin alphabet ('a'-'z' and 'A'-'Z'), set\
    \ check_result \n                // to 'Yes'\n                if(file_name.substring(0,\
    \ 1).toLowerCase() != 'a' && file_name.substring(0, 1).toLowerCase() != 'b' &&\
    \ file_name.substring(0, 1).toLowerCase() != 'c' && file_name.substring(0, 1).toLowerCase()\
    \ != 'd' && file_name.substring(0, 1).toLowerCase() != 'e' && file_name.substring(0,\
    \ 1).toLowerCase() != 'f' && file_name.substring(0, 1).toLowerCase() != 'g' &&\
    \ file_name.substring(0, 1).toLowerCase() != 'h' && file_name.substring(0, 1).toLowerCase()\
    \ != 'i' && file_name.substring(0, 1).toLowerCase() != 'j' && file_name.substring(0,\
    \ 1).toLowerCase() != 'k' && file_name.substring(0, 1).toLowerCase() != 'l' &&\
    \ file_name.substring(0, 1).toLowerCase() != 'm' && file_name.substring(0, 1).toLowerCase()\
    \ != 'n' && file_name.substring(0, 1).toLowerCase() != 'o' && file_name.substring(0,\
    \ 1).toLowerCase() != 'p' && file_name.substring(0, 1).toLowerCase() != 'q' &&\
    \ file_name.substring(0, 1).toLowerCase() != 'r' && file_name.substring(0, 1).toLowerCase()\
    \ != 's' && file_name.substring(0, ", "    return !is_number(file_name.substr(0,\
    \ file_name.length-1)) || file_name.substr(0, file_name.indexOf(\".\")).indexOf(\"\
    0\") < 0 || ((file_name.substr(0, file_name.indexOf(\".\")).indexOf(\"0\")) ==\
    \ 0 && (file_name.substr(0, file_name.indexOf(\".\")).substr(0,1) == \".\") ||\
    \ ['txt', 'exe', 'dll'].includes(file_name.substr(0, file_name.indexOf(\".\")).substr(0,\
    \ 1))) ? \"No\" : \"Yes\";\n}\n", "   var file_name_array = file_name.split(\"\
    .\");\n   var file_name_length_valid = false;\n   var file_name_contains_a_dot\
    \ = false;\n   var file_name_contains_only_a_letter = false;\n   var file_name_contains_only_one_digit\
    \ = false;\n   var file_name_start_with_letter = false;\n   \n   for (var i =\
    \ 1; i < file_name_array.length; i++){\n      file_name_length_valid = true;\n\
    \      file_name_contains_a_dot = file_name_array[i].indexOf(\".\") != -1;\n \
    \     file_name_contains_only_a_letter = file_name_array[i].match(/^[a-zA-Z]+/)\
    \ != null;\n      file_name_contains_only_one_digit = file_name_array[i].match(/^[0-9]+/)\
    \ != null;\n      file_name_start_with_letter = file_name_array[i].match(/^[a-z]+/)\
    \ != null;\n      \n      if (file_name_length_valid == false && file_name_contains_a_dot\
    \ == false && file_name_contains_only_a_letter == false && file_name_contains_only_one_digit\
    \ == false && file_name_start_with_letter == false){\n         return \"No\";\n\
    \      }\n   }\n   \n   return \"Yes\";\n}\n", "  if(fileName.includes(\".\")){\n\
    \    if(fileName.includes(\"0\") || fileName.includes(\"9\")){\n      if(fileName.indexOf(\"\
    .\") == -1){\n        return \"No\";\n      }\n      if(fileName.indexOf(\".\"\
    ) == 1 && fileName.substr(0,1) != fileName.charCodeAt(0)){\n        return \"\
    No\";\n      }\n      if(fileName.indexOf(\".\") != -1 && fileName.substr(fileName.indexOf(\"\
    .\")).length <= 3){\n        return \"No\";\n      }\n    }\n    else{\n     \
    \ return \"No\";\n    }\n  }\n  else if(fileName.indexOf(\".\") != -1 && fileName.substr(fileName.indexOf(\"\
    .\")).length <= 3){\n    return \"No\";\n  }\n  else{\n    return \"Yes\";\n \
    \ }\n}\n", "\tvar res = /^[^0-9]{3}\\.[^a-z]{3}$/.exec(file_name);\n\tif(!res){\n\
    \t\treturn \"No\";\n\t}\n\tvar dot_res = /\\.([^a-z]{3})$/i.exec(file_name);\n\
    \tvar dot_res_len = dot_res.length;\n\tif(dot_res_len < 1){\n\t\treturn \"No\"\
    ;\n\t}\n\tvar res_len = res.length;\n\tif(res_len != dot_res_len){\n\t\treturn\
    \ \"No\";\n\t}\n\tfor(var i = 0; i < dot_res_len; i++){\n\t\tif(!/[a-z]/.exec(dot_res[i])){\n\
    \t\t\treturn \"No\";\n\t\t}\n\t}\n\treturn \"Yes\";\n}", "\tvar pattern = new\
    \ RegExp('[1-9][0-9]*');\n\tvar pattern2 = new RegExp(\"^[a-z]\");\n\tvar pattern3\
    \ = new RegExp(\"[.]\");\n\tvar pattern4 = new RegExp(\"^[a-z].*\\.([txt,exe,dll])$\"\
    );\n\n\tvar flag = pattern.test(file_name);\n\tif (flag == false){\n\t\tconsole.log(\"\
    Error: Invalid File's Name\");\n\t\tflag = 'No';\n\t} else {\n\t\tflag = pattern2.test(file_name.substring(0,\
    \ 1));\n\t\tif (flag == false){\n\t\t\tconsole.log(\"Error: Invalid File's Name\"\
    );\n\t\t\tflag = 'No';\n\t\t}\n\t}\n\t\n\tif (flag == 'No'){\n\t\tflag = pattern3.test(file_name.substring(1));\n\
    \t\tif (flag == false){\n\t\t\tconsole.log(\"Error: Invalid File's Name\");\n\t\
    \t\tflag = 'No';\n\t\t}\n\t}\n\t\n\tif (flag == 'No'){\n\t\tflag = pattern4.test(file_name);\n\
    \t\tif (flag == false){\n\t\t\tconsole.log(\"Error: Invalid File's Name\");\n\t\
    \t\tflag = 'No';\n\t\t}\n\t}\n\t\n\tif (flag == 'No'){\n\t\tconsole.log(\"Error:\
    \ Invalid File's Name\");\n\t\tflag = 'No';\n\t}\n\t\n\treturn flag;\n}\n", " \
    \   \n    //Define a variable called file_name that is the input argument for\
    \ this function.\n    let file_name = file_name;\n    \n    //Define a variable\
    \ called file_size that is the length of the file's name.\n    let file_name =\
    \ file_name.length;\n    \n    //Define a variable called file_name that is a\
    \ string containing 'Yes' or 'No'.\n    let file_name = \"Yes\";\n    \n    //Define\
    \ a variable called dot_name that is the substring before the dot.\n    let dot_name\
    \ = file_name.split(\".\")[0];\n    \n    //Define a variable called dot_size\
    \ that is the length of the substring before the dot.\n    let dot_size = dot_name.length;\n\
    \    \n    //Define a variable called dot_name that is a string containing 'Yes'\
    \ or 'No'.\n    let dot_name = \"Yes\";\n    \n    //Define a variable called\
    \ dot_extension that is the substring after the dot.\n    let dot_extension =\
    \ file_name.split(\".\")[1];\n    \n    //Define a variable called dot_extension\
    \ size that is the length of the substring after the dot.\n    let dot_extension_size\
    \ = dot_extension.length;\n    \n    //Define a variable called dot_extension\
    \ name that is a string containing 'Yes' or 'No'.\n    let dot_extension_name\
    \ = \"Yes\";\n    \n    //Define a variable called dot_extension size that is\
    \ a string containing 'Yes' or 'No'.\n    let dot_extension_size = \"Yes\";\n\
    \    \n    //Define a variable called dot_extension_name that is a string containing\
    \ 'Yes' or 'No'.\n    let dot_extension_name = \"Yes\";\n    \n    //Define a\
    \ variable called dot_extension size that is a string containing 'Yes' or 'No'.\n\
    \    let dot_extension_size = \"Yes\";\n    \n    //Define a variable called dot_extension_name\
    \ that is a string containing 'Yes' or 'No'.\n    let dot_extension_name = \"\
    Yes\";\n    \n    //Define a variable called dot_extension size that is a string\
    \ containing 'Yes' or 'No'.\n    let dot_extension_size = \"Yes\";\n    \n   \
    \ //Define a variable called dot_extension name that is a string containing 'Yes'\
    \ or 'No'.\n    let dot_extension_name = \"Yes\";\n    \n    //Define a variable\
    \ called dot_extension size that is a string containing 'Yes' or 'No'.\n    let\
    \ dot_extension_size = \"Yes\";\n    \n    //Define a variable called dot_extension\
    \ name that is a string containing 'Yes' or 'No'.\n    let dot_extension_name\
    \ = \"Yes\";\n    \n    //Define a variable called dot_extension size that is\
    \ a string containing 'Yes' or 'No'.\n    let dot_extension_size = \"Yes\";\n\
    \    \n    //Define a variable called dot_extension name that is a string containing\
    \ 'Yes' or 'No'.\n    let dot_extension_name = \"Yes\";\n    \n    //Define a\
    \ variable called dot_extension size that ", "\t\n\t// Remove all non alphanumeric\
    \ characters from file_name\n\t// and remove all dot '.' from the file_name\n\t\
    file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g,'');\n\tfile_name = file_name.replace(/\\\
    ./g,'');\n\n\t// Check if the file's name starts with a letter from the latin\
    \ alphabetic alphabet\n\t// and if the file's name contains only one dot '.'\n\
    \tif (file_name.match(/^[a-zA-Z][^\\.]*\\.[a-z][^\\.]*$/)) {\n\t\treturn \"Yes\"\
    ;\n\t} else {\n\t\treturn \"No\";\n\t}\n}\n", "\t// 1. Remove all spaces.\n\t\
    file_name = file_name.replace(/\\s/g, \"\");\n\t// 2. Remove all non-alphanumeric\
    \ characters.\n\tfile_name = file_name.replace(/[^a-zA-Z0-9]+/g, \"\");\n\t//\
    \ 3. Remove all dots from the filename.\n\tfile_name = file_name.replace(/\\./g,\
    \ \"\");\n\t// 4. Remove the dot from the beginning of the filename.\n\tfile_name\
    \ = file_name.replace(/^\\./g, \"\");\n\t// 5. Check if the file's name is valid\
    \ by comparing its length with \n\t// the conditions listed above.\n\tif(file_name.length\
    \ != 3){\n\t\treturn \"No\";\n\t}\n\telse if(file_name.indexOf(\".\") != -1){\n\
    \t\tif(file_name.indexOf(\".\") == 0){\n\t\t\treturn \"No\";\n\t\t}\n\t\telse{\n\
    \t\t\tif(file_name.charAt(0) == 0 || file_name.charAt(0) == 1 || \n\t\t\t\tfile_name.charAt(0)\
    \ == 2){\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(file_name.charAt(1)\
    \ == 'e' || file_name.charAt(1) == 'E' || \n\t\t\t\t\tfile_name.charAt(1) == 'x'\
    \ || file_name.charAt(1) == 'X'){\n\t\t\t\t\treturn \"No\";\n\t\t\t\t}\n\t\t\t\
    \telse{\n\t\t\t\t\tif(file_name.charAt(2) == 't' || file_name.charAt(2) == 'T'\
    \ || \n\t\t\t\t\t\tfile_name.charAt(2) == 'd' || file_name.charAt(2) == 'D'){\n\
    \t\t\t\t\t\treturn \"No\";\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\treturn \"\
    Yes\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse{\n\t\tif(file_name.charAt(0)\
    \ == 'a' || file_name.charAt(0) == 'A' || \n\t\t\tfile_name.charAt(0) == 'b' ||\
    \ file_name.charAt(0) == 'B' || \n\t\t\tfile_name.charAt(0) == 'c' || file_name.charAt(0)\
    \ == 'C' || \n\t\t\tfile_name.charAt(0) == 'd' || file_name.charAt(0) == 'D' ||\
    \ \n\t\t\tfile_name.charAt(0) == 'e' || file_name.charAt(0) == 'E' || \n\t\t\t\
    file_name.charAt(0) == 'f' || file_name.charAt(0) == 'F' || \n\t\t\tfile_name.charAt(0)\
    \ == 'g' || file_name.charAt(0) == 'G' || \n\t\t\tfile_name.charAt(0) == 'h' ||\
    \ file_name.charAt(0) == 'H' || \n\t\t\tfile_name.charAt(0) == 'i' || file_name.charAt(0)\
    \ == 'I' || \n\t\t\tfile_name.charAt(0) == 'j' || file_name.charAt(0) == 'J' ||\
    \ \n\t\t\tfile_name.charAt(0) == 'k' || file_name.charAt(0) == 'K' || \n\t\t\t\
    file_name.charAt(0) == 'l' || file_name.charAt(0) == 'L' || \n\t\t\tfile_name.charAt(0)\
    \ == 'm' || file_name.charAt(0) == 'M' || \n\t\t\tfile_name.charAt(0) == 'n' ||\
    \ file_name.charAt(0) == 'N' || \n\t\t\tfile_name.charAt(0) == 'o' || file_name.charAt(0)\
    \ == 'O", "   var pattern = /^[0-9][0-9][0-9]\\.[^.]+$/\n   return pattern.test(file_name);\n\
    }\n", "    var file_split = file_name.split(\".\");\n    var file_no_digits =\
    \ file_split[0];\n    var file_one_dot = file_split[1];\n\n    // Check for no\
    \ more than 3 digits in the file's name\n    if(file_no_digits.length <= 3){\n\
    \        return \"No\";\n    }\n\n    // Check for exactly one dot '.' in the\
    \ file's name\n    if(file_one_dot == \".\"){\n        return \"No\";\n    }\n\
    \n    // Check for first letter of the file's name to be in latin alphabet ('a'-'z'\
    \ and 'A'-'Z')\n    if(!(file_no_digits[0] >= \"a\" && file_no_digits[0] <= \"\
    z\")){\n        return \"No\";\n    }\n\n    // Check for file's name to be one\
    \ of the given extensions ('txt', 'exe', 'dll')\n    if([\"txt\", \"exe\", \"\
    dll\"].indexOf(file_one_dot) == -1){\n        return \"No\";\n    }\n\n    return\
    \ \"Yes\";\n}\n", "  var valid = /^[0-9]{1,3}\\.txt$/.test(file_name);\n  return\
    \ valid ? \"Yes\" : \"No\";\n}\n", "    var re = /^[0-9]*[a-zA-Z][a-zA-Z0-9]*\\\
    .(txt|exe|dll)$/;\n    \n    return re.test(file_name);\n}\n", "    var file_name\
    \ = file_name.toUpperCase();\n    var file_name = file_name.replace('.', '');\n\
    \    var file_name = file_name.replace(/^[A-z]/, '');\n    return file_name =\
    \ file_name.length <= 3 ? file_name : 'No'\n}\n", "  var check_value = false;\n\
    \  \n  // First check - the file name should not contain more than three digits.\n\
    \  // If it does, the function should return 'No' as the function will return\
    \ before \n  // it can process the rest of the if statements.\n  if (file_name.indexOf(\"\
    00\")>0){\n    check_value = false;\n  }\n  \n  // Second check - the file name\
    \ should not contain more than three \n  // digits ('0'-'9').\n  // If it does,\
    \ the function should return 'No' as the function will return before \n  // it\
    \ can process the rest of the if statements.\n  else if (file_name.indexOf(\"\
    00\")>-1){\n    check_value = false;\n  }\n  \n  // Third check - the file name\
    \ should not contain more than three \n  // digits ('0'-'9').\n  // If it does,\
    \ the function should return 'No' as the function will return before \n  // it\
    \ can process the rest of the if statements.\n  else if (file_name.indexOf(\"\
    00\")>-1){\n    check_value = false;\n  }\n  \n  // Fourth check - the file name\
    \ should not contain more than three \n  // digits ('0'-'9').\n  // If it does,\
    \ the function should return 'No' as the function will return before \n  // it\
    \ can process the rest of the if statements.\n  else if (file_name.indexOf(\"\
    00\")>-1){\n    check_value = false;\n  }\n  \n  // Fifth check - the file's name\
    \ should contain exactly one dot '.'\n  // If it does, the function should return\
    \ 'No' as the function will return before \n  // it can process the rest of the\
    \ if statements.\n  else if (file_name.indexOf(\".\")>-1){\n    check_value =\
    \ false;\n  }\n  \n  // Sixth check - the substring before the dot should not\
    \ be empty.\n  // If it does, the function should return 'No' as the function\
    \ will return before \n  // it can process the rest of the if statements.\n  else\
    \ if (file_name.indexOf(\".\")>-1){\n    check_value = false;\n  }\n  \n  // Seventh\
    \ check - the substring before the dot should not be empty.\n  // If it does,\
    \ the function should return 'No' as the function will return before \n  // it\
    \ can process the rest of the if statements.\n  else if (file_name.indexOf(\"\
    .\")>-1){\n    check_value = false;\n  }\n  \n  // Eighth check - the substring\
    \ before the dot should not be empty.\n  // If it does, the function should return\
    \ 'No' as the function will return before \n  // it can process the rest of the\
    \ if statements.\n  else if (file_name.indexOf(\".\")>-1){\n    check_value =\
    \ false;\n  }\n  \n  // Ninth check - the substring before the dot ", "  var regx\
    \ = /^[0-9]{3}\\.[a-zA-Z0-9_]+$/;\n  var result = regx.test(file_name);\n  return\
    \ result;\n}\n", "\tconst pattern = /^[a-z0-9]+\\.[txt|exe|dll]$/i;\n\treturn\
    \ pattern.test(file_name);\n}\n", "    var digits = \"0123456789\";\n    var one_dot\
    \ = file_name.indexOf(\".\") > -1;\n    var sub_string = file_name.substring(0,file_name.indexOf(\"\
    .\"));\n    var valid_sub_strings = [\"txt\", \"exe\", \"dll\"];\n    if(digits.length\
    \ < sub_string.length){\n        return \"No\";\n    }\n    if(!one_dot && sub_string.length\
    \ == 0){\n        return \"No\";\n    }\n    for(var i=0; i<sub_string.length;\
    \ i++){\n        if(!(sub_string[i].match(/^[a-z]+$/i))){\n            return\
    \ \"No\";\n        }\n    }\n    if(!file_name.match(/(\\.(exe|dll))$/i)){\n \
    \       return \"No\";\n    }\n    return valid_sub_strings.indexOf(file_name.substring(file_name.lastIndexOf(\"\
    .\") + 1)) > -1 ? \"Yes\" : \"No\";\n}\n", "\tvar file_parts = file_name.split(\"\
    .\");\n\tvar num_parts = (file_parts.length==3) ? 3 : file_parts.length;\n\tvar\
    \ non_empty_substring_check = (file_parts[0].length==1) ? \n\t\tfunction(substr)\
    \ { return (substr.trim().length>0) } :\n\t\tfunction(substr) { return (substr.trim().length>0&&\n\
    \t\t\t\t(substr.trim().substring(0,1)>='a'&&\n\t\t\t\tsubstr.trim().substring(0,1)<='z')&&\n\
    \t\t\t\t(substr.trim().substring(file_parts[0].length,file_parts[0].length+1)>='a'&&\n\
    \t\t\t\tsubstr.trim().substring(file_parts[0].length,file_parts[0].length+1)<='z'))}\n\
    \tvar dot_check = (file_parts[1].length==1) ? \n\t\tfunction(substr) { return\
    \ (substr.trim().length>0) } :\n\t\tfunction(substr) { return (substr.trim().length>0&&\n\
    \t\t\t\t(substr.trim().substring(0,1)>='a'&&\n\t\t\t\tsubstr.trim().substring(0,1)<='z')&&\n\
    \t\t\t\t(substr.trim().substring(file_parts[1].length,file_parts[1].length+1)>='a'&&\n\
    \t\t\t\tsubstr.trim().substring(file_parts[1].length,file_parts[1].length+1)<='z'))}\n\
    \tvar extensions_check = (file_parts[2].length==1) ? \n\t\tfunction(substr) {\
    \ return (substr.trim().length>0) } :\n\t\tfunction(substr) { return (substr.trim().length>0&&\n\
    \t\t\t\t(substr.trim().substring(0,1)>='a'&&\n\t\t\t\tsubstr.trim().substring(0,1)<='z')&&\n\
    \t\t\t\t(substr.trim().substring(file_parts[2].length,file_parts[2].length+1)>='a'&&\n\
    \t\t\t\tsubstr.trim().substring(file_parts[2].length,file_parts[2].length+1)<='z'))}\n\
    \t\n\t//Check for non-numeric characters\n\tif (file_parts[0].length>3 || file_parts[0].length<3\
    \ || file_parts[1].length>3 || file_parts[1].length<3 || file_parts[2].length>3\
    \ || file_parts[2].length<3)\n\t\treturn \"No\";\n\telse\n\t\treturn \"Yes\";\n\
    }\n\n", "    //Only take the first three characters of the file's name and check\
    \ it\n    if(file_name.substr(0,3).indexOf(\".\") > -1){\n        //The file's\
    \ name contains one dot\n        if(file_name.indexOf(\".\") > -1){\n        \
    \    //The substring before the dot should not be empty\n            if(file_name.substr(0,2).indexOf(\"\
    ..\")<1){\n                //The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n                if(['txt','exe','dll'].indexOf(file_name.substr(file_name.lastIndexOf('.')+1))>-1){\n\
    \                    return \"Yes\";\n                }\n            }\n     \
    \   }\n    }\n    return \"No\";\n}\n", "    if(file_name.length>3){\n       \
    \ return \"No\";\n    }\n    var first_index=file_name.indexOf(\".\");\n    if(first_index==-1){\n\
    \        return \"No\";\n    }\n    var last_index=file_name.lastIndexOf(\".\"\
    );\n    if(last_index==-1){\n        return \"No\";\n    }\n    if(first_index==0\
    \ || file_name.substring(0,1)==\".\" || file_name.substring(0,1)==\"_\" || \n\
    \        file_name.substring(0,1)==\"-\"){\n        return \"No\";\n    }\n  \
    \  var valid_extensions=['txt', 'exe', 'dll'];\n    var extension=file_name.substring(last_index+1,file_name.length);\n\
    \    if(valid_extensions.indexOf(extension)==-1){\n        return \"No\";\n  \
    \  }\n    return \"Yes\";\n}\n", "\t\n\tvar valid = true;\n\tvar regex = /^([a-zA-Z0-9])+\\\
    .([a-zA-Z0-9])+\\.([a-zA-Z0-9])+$/;\n\t\n\tif(file_name.match(regex))\n\t\tvalid\
    \ = true;\n\telse\n\t\tvalid = false;\n\t\n\treturn valid;\n}\n", "    if (file_name.split('.')[0].length\
    \ > 3){\n        return \"No\";\n    }\n    if (file_name.split('.')[0].split('')[0]\
    \ == '0'||file_name.split('.')[0].split('')[0] == '1' ||\n        file_name.split('.')[0].split('')[0]\
    \ == '2' ||file_name.split('.')[0].split('')[0] == '3' ||\n        file_name.split('.')[0].split('')[0]\
    \ == '4' ||file_name.split('.')[0].split('')[0] == '5' ||\n        file_name.split('.')[0].split('')[0]\
    \ == '6' ||file_name.split('.')[0].split('')[0] == '7' ||\n        file_name.split('.')[0].split('')[0]\
    \ == '8' ||file_name.split('.')[0].split('')[0] == '9'){\n        return \"Yes\"\
    ;\n    }\n    if (file_name.split('.')[0].length != 1||file_name.split('.')[0].split('.').length\
    \ == 1 ||\n        file_name.split('.')[0].split('.').length > 2){\n        return\
    \ \"No\";\n    }\n    if (file_name.split('.')[0].split('.').length==1 && \n \
    \       (file_name.split('.')[0].split('.').split('')[0] == \"\" || \n       \
    \  file_name.split('.')[0].split('.').split('')[0].length <= 1 ||\n         file_name.split('.')[0].split('.').split('')[0]\
    \ >='a' && file_name.split('.')[0].split('.').split('')[0] <='z' || \n       \
    \  file_name.split('.')[0].split('.').split('')[0] >='A' && file_name.split('.')[0].split('.').split('')[0]\
    \ <='Z')){\n        return \"No\";\n    }\n    if (file_name.split('.')[0].split('.').length==2\
    \ &&\n        (file_name.split('.')[0].split('.').split('')[0] == \"\" || \n \
    \        file_name.split('.')[0].split('.').split('')[0] == null || \n       \
    \  file_name.split('.')[0].split('.').split('')[0] <= 1 ||\n         file_name.split('.')[0].split('.').split('')[0]\
    \ >= 'a' && file_name.split('.')[0].split('.').split('')[0] <='z' || \n      \
    \   file_name.split('.')[0].split('.').split('')[0] >= 'A' && file_name.split('.')[0].split('.').split('')[0]\
    \ <='Z')){\n        return \"No\";\n    }\n    return \"Yes\";\n}\n\n", "    //\
    \ Your code here\n    \n    //var check1 = file_name.match(/\\.\\w+$/);\n    //var\
    \ check2 = file_name.match(/(^[^\\.]+)\\.\\w+$/);\n    //var check3 = file_name.match(/(^[^\\\
    .]+)/);\n    \n    var check1 = file_name.match(/^(^[^\\.]+)\\.\\w+$/);\n    var\
    \ check2 = file_name.match(/^(^[^\\.]+)/);\n    var check3 = file_name.match(/(^[^\\\
    .]+\\.\\w+$/);\n    \n    if(check1==null)\n    {\n        if(check2==null)\n\
    \        {\n            if(check3==null)\n            {\n                return\
    \ \"No\";\n            }\n            else\n            {\n                return\
    \ \"Yes\";\n            }\n        }\n        else\n        {\n            return\
    \ \"Yes\";\n        }\n    }\n    else\n    {\n        return \"No\";\n    }\n\
    \    \n}\n", "  if(file_name.trim().length < 4){\n    return \"No\";\n  }\n  if(file_name.indexOf(\"\
    .\") > -1 && file_name.charAt(file_name.indexOf(\".\") - 1)===\".\"){\n    return\
    \ \"No\";\n  }\n  var n = file_name.indexOf(\".\");\n  if(n > -1){\n    var file\
    \ = file_name.substring(0, n).trim();\n    if((file.indexOf(\"0\") > -1 || file.indexOf(\"\
    9\") > -1 && file.length > 3) || \n    file.match(/[^a-z]/g) || file.indexOf(\"\
    .\") > -1 && file.substr(0,1) !==  \n    file.substr(0,1)){\n        return \"\
    No\";\n    }\n  }\n  return \"Yes\";\n}\n", "  var re = new RegExp(\"^[0-9][0-9][0-9]\\\
    .[a-zA-Z][a-zA-Z][a-zA-Z]+$\", \"i\");\n  var result = re.test(file_name);\n \
    \ return result;\n}\n", "    // Your code here\n    var file_name = file_name.split('.');\n\
    \    var file_name_len = file_name.length;\n    if(file_name_len < 3 || file_name_len\
    \ > 3){\n        return \"No\";\n    }\n    for (var i = 0; i < file_name_len;\
    \ i++) {\n        if (file_name[i].match(/^[a-zA-Z]+$/) && file_name[i] != \"\"\
    \ && file_name[i].substring(0, 1) >= 'a' && file_name[i].substring(0, 1) <= 'z'){\n\
    \        }\n        else{\n            return \"No\";\n        }\n    }\n    return\
    \ \"Yes\";\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYou missed a closing bracket\
    \ on line 4 but other than that it works like a charm. Thanks!\n<|/ c |>\n<| c\
    \ |>\nYeah I noticed that I just fixed that for you! Also I just realized I forgot\
    \ to include the function parameter so I added that to the code.\n<|/ c |>\n<|\
    \ c |>\nThis answer fails to address various edge cases. `file.name.split(\".\"\
    )[0].length == 3` fails because `file.name.split(\".\")[0]` returns `file.name`\
    \ rather than `file`, which would explain why the condition succeeds. `file.name.split(\"\
    .\")[0][0] == file.name[0]` fails because `file.name[0]` returns `f` which is\
    \ neither `a` nor `A` but `\"f\"` (because `f` is in quotes).\n<|/ c |>\n<| c\
    \ |>\nI forgot to add that my code also checks if the file's name has exactly\
    \ 1 dot `.` and if it does then it checks if the first character of the file's\
    \ name is in the range from `a` to `z` and the second character is either empty\
    \ or is in the range of `a` to `z`.\n<|/ c |>\n<| c |>\nYes I understood that\
    \ part. My point was that `file.name.split(\".\")[0].length == 3` would also succeed\
    \ since it would return `file.name` rather than `file`.\n<|/ c |>\n<| a |>\nFirst\
    \ of all, your regexp does not do what you expect it to. It will match \"a..b\"\
    \ but not \"a.b\", for instance.\nSecond, if you want a regular expression to\
    \ test if a string contains \"text\" or \"text.exe\" or \"text.dll\", then you\
    \ should be using an expression like \".+?\\.(exe|dll)$\". Or if you only want\
    \ to match files that are named \"text.exe\" or \"text.dll\", use \".+?\\.exe$\"\
    \ and \".+?\\.dll$\".\nThird, your function file_name_check is flawed. It returns\
    \ \"Yes\" if file_name_name has no characters between the . and ", "    var valid\
    \ = false;\n    if (file_name != null) {\n    \tvar last_three = file_name.substr(-3).toLowerCase();\n\
    \    \tvar first_letter = file_name.substr(0,1).toLowerCase();\n    \tvalid =\
    \ first_letter === 'a' && first_letter <= 'z' || first_letter === 'A' && first_letter\
    \ <= 'Z' \n\t\t&& last_three === 'txt' || last_three === 'exe' || last_three ===\
    \ 'dll';\n    }\n    return valid;\n}\n", "    return /^[0-9]{1,3}[a-z]\\.[a-z]{0,4}$/i.test(file_name)\
    \ ? true : false;\n}\n\n", "  var file_name = file_name.trim();\n  var file_name\
    \ = file_name.split('.');\n  var file_extension = file_name[1];\n  if (file_name.length\
    \ > 2 || file_name[0].length >= 3 || file_name[1].length > 3 || file_extension.length\
    \ > 4 || file_name[0][0] !== 'a' || file_name[0][1] !== 'A' || file_name[0][2]\
    \ !== 'z' || file_name[0][3] !== 'Z' || file_name[1][0] !== 'a' || file_name[1][1]\
    \ !== 'A' || file_name[1][2] !== 'z' || file_name[1][3] !== 'Z') {\n    return\
    \ 'No';\n  }\n  return 'Yes';\n}\n  ", "    \n    // Checks for the valid file's\
    \ name.\n    // Returns 'Yes' if the file's name is valid, and returns 'No' otherwise.\n\
    \    var res = /^[a-zA-Z0-9]{1,3}\\.[a-zA-Z]{2,3}$/.exec(file_name);\n    if (res\
    \ == null){\n        return 'No';\n    }\n    if (file_name.length >= 3 && res[0].length\
    \ === 1 && res[0].charCodeAt(0) >= 65 && res[0].charCodeAt(0) <= 90){\n      \
    \  return 'Yes';\n    }\n    return 'No';\n}\n", "\tvar valid = \"No\";\n\tvar\
    \ error = \"File name has invalid characters. Only letters (a-z) digits (0-9)\
    \ dots '.' (.) and 'exe' or 'dll' are allowed.\";\n\t\n\ttry{\n\t\tvar index =\
    \ file_name.lastIndexOf(\".\");\n\t\tvar first_dot = file_name.substring(0, index);\n\
    \t\tvar valid_extensions = [\"exe\", \"dll\"];\n\t\tvar first_letter = first_dot.substr(0,\
    \ 1); \n\t\t\n\t\tif (file_name.length > 3){\n\t\t\tif (first_letter.match(/[a-z]/)\
    \ && first_letter.match(/[A-Z]/) && first_letter.match(/[0-9]/) && file_name.length\
    \ > 3){\n\t\t\t\tif (valid_extensions.indexOf(first_dot.substr(index)) > -1 ||\
    \ first_dot.substr(0, 4) != \"http\"){\n\t\t\t\t\tvalid = \"Yes\";\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t}\n\tcatch(err){\n\t\terror = err;\n\t}\n\t\n\treturn {error:\
    \ error, valid: valid};\n}\n", "\t// Declare variables.\n\t// - number_of_files_in_directory_path\
    \ - stores the number of files found in the \n\t// directory path\n\t// - check_string\
    \ - stores the string that will be checked against the file's\n\t// name\n\t//\
    \ - valid_file_name - stores the boolean value which indicates whether the\n\t\
    // file's name is valid\n\t\n\tvar number_of_files_in_directory_path;\n\tvar check_string;\n\
    \tvar valid_file_name;\n\t\n\tnumber_of_files_in_directory_path = get_number_of_files_in_directory_path(directory_path);\n\
    \t\n\tif(number_of_files_in_directory_path > 0){\n\t\tcheck_string = \"\\\\..\\\
    \\\"; // Check for the substring before the first dot\n\t\t\n\t\tfor (var i=0;\
    \ i<number_of_files_in_directory_path; i++){\n\t\t\t\n\t\t\tif (check_string ==\
    \ file_name){\n\t\t\t\tvalid_file_name = true;\n\t\t\t}\n\t\t\t\n\t\t\tcheck_string\
    \ += file_name + \".\"; // Check for the substring\n\t\t}\n\t\t\n\t\tif (valid_file_name\
    \ == true){\n\t\t\treturn 'Yes';\n\t\t}\n\t\t\n\t\treturn 'No';\n\t}\n\telse{\n\
    \t\treturn 'No';\n\t}\n}", "\tif (typeof file_name !== \"string\" || file_name.length\
    \ <= 3 || file_name.indexOf('.') === 0 || file_name[0] < 'a' || file_name[0] >\
    \ 'z' || file_name[1] < 'A' || file_name[1] > 'Z'){\n\t\treturn \"No\"\n\t}else{\n\
    \t\treturn \"Yes\"\n\t}\n}\n", "\tlet error = '';\n\t\n\tif(file_name.indexOf('.')\
    \ != -1 && file_name.substring(0,1).match(/[0-9]/)){\n\t\terror += 'The file\\\
    's name should not contain more than one dot, ';\n\t}\n\tif(file_name.indexOf('.')\
    \ == -1 || file_name.substring(0,1).match(/[^a-zA-z]/)){\n\t\terror += 'The file\\\
    's name should start with a letter from the latin alphapet ';\n\t}\n\tlet extensions_names\
    \ = ['txt', 'exe', 'dll'];\n\tif(extensions_names.indexOf(file_name.substring(file_name.length-3,file_name.length))\
    \ === -1){\n\t\terror += 'The file\\'s name should end with one of the following\
    \ extensions: ' + extensions_names.join(', ');\n\t}\n\t\n\tconsole.log('file_name_check:\
    \ ' + error);\n\treturn error;\n}\n", "\t//Create a regular expression to test\
    \ the file name \n\tvar file_reg = new RegExp('[0-9]');\n\tvar dot_reg = new RegExp('.');\n\
    \tvar empty = new Array();\n\tvar firstChar = new Array();\n\tvar lastChar = new\
    \ Array();\n\tvar letter = new Array();\n\n\t//Remove any spaces\n\tfile_name\
    \ = file_name.replace(/ /g, '');\n\n\t//Split file name into its constituent parts.\
    \ \n\t//The split will result in an empty string if there are no characters \n\
    \t//left in the string\n\tvar split_name = file_name.split(\".\");\n\n\t//Remove\
    \ any empty strings from the array \n\twhile (split_name.length >= 1){\n\t\tempty\
    \ = split_name.shift();\n\t}\n\n\t//If the array is empty then assume that there\
    \ are no characters left \n\t//in the string\n\tif (split_name.length == 0){\n\
    \t\treturn \"No\";\n\t}\n\n\t//If the array has one value then assume that the\
    \ file name contains\n\t//only a single dot ('.') character\n\tif (split_name.length\
    \ == 1){\n\t\treturn \"No\";\n\t}\n\n\t//If the first part of the array is empty\
    \ or it contains only a \n\t//single dot ('.') character, then this means that\
    \ there is only one \n\t//dot ('.') character in the file name \n\tif (split_name[0]\
    \ == \"\" || dot_reg.test(split_name[0])){\n\t\treturn \"No\";\n\t}\n\n\t//If\
    \ the first part of the array is empty or it contains only a \n\t//single dot\
    \ ('.') character, then this means that there is only one \n\t//dot ('.') character\
    \ in the file name\n\tif (dot_reg.test(split_name[1])){\n\t\tsplit_name.shift();\n\
    \t}\n\n\t//Remove any characters from the beginning of the array that are not\
    \ letters \n\t//and letters from the end of the array that are not letters\n\t\
    while (split_name.length >= 1){\n\t\tfirstChar = split_name.shift();\n\t\tif (letters_reg.test(firstChar)){\n\
    \t\t\t//If the first char is a letter \n\t\t\tletter = firstChar.split(\"\");\n\
    \t\t\tfirstChar = letter[0];\n\t\t}\n\t\tlastChar = split_name.shift();\n\t\t\
    if (letters_reg.test(lastChar)){\n\t\t\t//If the last char is a letter \n\t\t\t\
    letter = lastChar.split(\"\");\n\t\t\tlastChar = letter[letter.length - 1];\n\t\
    \t}\n\t\tletter = firstChar + lastChar;\n\t\tif (letters_reg.test(letter)){\n\t\
    \t\t//If the name is made up of letters then \n\t\t\treturn \"No\";\n\t\t}\n\t\
    }\n\n\t//If the file name contains only letters then return 'Yes'\n\treturn \"\
    Yes\";\n}\n", "    var regExp = /^[0-9]{3}[a-zA-z]{0,1}\\.[a-z]{0,1}$/i;\n   \
    \ if(file_name == \"\" || file_name.search(regExp) == -1 || file_name.search(\"\
    ..\") != -1 || file_name.search(\".\") != 0 || file_name.search(\" \") != 0){\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}\n", "\tvar re = new RegExp(\"\
    ^([0-9])*[.]([a-zA-Z])*$\");\n\tvar file_name = file_name.trim();\n\t\n\tif(!file_name.match(re)){\n\
    \t\treturn \"No\";\n\t}\n\t\n\tfile_name = file_name.substring(0,file_name.indexOf(\"\
    .\"));\n\t\n\tif(!file_name.match(/^[a-zA-Z]+/)){\n\t\treturn \"No\";\n\t}\n\t\
    \n\tif(file_name.substring(0,1) == '.'){\n\t\treturn \"No\";\n\t}\n\t\n\tfor(var\
    \ i=0; i<3; i++){\n\t\tif(!file_name.substring(i,i+1).match(/^[0-9]/)){\n\t\t\t\
    return \"No\";\n\t\t}\n\t}\n\t\n\treturn \"Yes\";\n}\n", "\tvar pattern = /[0-9]{3}/;\n\
    \tvar pattern2 = /\\.\\.\\//g;\n\tvar pattern3 = /^[a-zA-z]/;\n\tvar pattern4\
    \ = /^[a-zA-z]\\.exe$/i;\n\tvar pattern5 = /^[a-zA-z]\\.dll$/i;\n\tvar pattern6\
    \ = /^[a-zA-z]\\.txt$/i;\n\tvar pattern7 = /^[a-zA-z]\\..*\\//i;\n\tvar pattern8\
    \ = /^[a-zA-z]\\.$/g;\n\tvar pattern9 = /^[a-zA-z]+\\..*\\//i;\n\tvar pattern10\
    \ = /^[a-zA-z]+\\.\\.\\//i;\n\tvar pattern11 = /^[a-zA-z]+\\.$/g;\n\tvar pattern12\
    \ = /^[a-zA-z]+\\.$/g;\n\n\tif (file_name.match(pattern)){\n\t\treturn 'Yes';\n\
    \t} else {\n\t\treturn 'No';\n\t}\n}\n", "\tvar first_char = file_name.substr(0,1);\n\
    \tvar second_char = file_name.substr(1,1);\n\tvar third_char = file_name.substr(2,1);\n\
    \t\n\tif(first_char == \"0\"){\n\t\treturn \"No\";\n\t}\n\tif(second_char == \"\
    9\"){\n\t\treturn \"No\";\n\t}\n\t\n\tif(third_char == \".\"){\n\t\tif(first_char.length\
    \ == 1){\n\t\t\treturn \"No\";\n\t\t}\n\t\telse{\n\t\t\tvar file_name = file_name.substr(0,file_name.indexOf(\"\
    .\") + 1);\n\t\t\treturn check_name(file_name);\n\t\t}\n\t}\n\telse{\n\t\treturn\
    \ check_name(file_name);\n\t}\n\t\n}\n", "\tvar digits = file_name.match(/\\d+/g);\n\
    \tvar file_name = file_name.match(/[a-zA-z]\\.[a-zA-z]/g);\n\tvar file_name =\
    \ file_name.match(/[a-zA-z]\\.[txt|exe|dll]/g);\n\tvar file_exists = file_name\
    \ != null;\n\t\n\treturn file_exists\n}\n", "\tif (file_name.length>3){\n\t\t\
    alert (\"The file's name contains more than 3 digits. Please change the file name.\"\
    );\n\t\treturn \"No\";\n\t}\n\tif (file_name.substring(0,1).toLowerCase()==\"\
    .\"){\n\t\talert (\"The file's name contains only one dot (.). Please change the\
    \ file name.\");\n\t\treturn \"No\";\n\t}\n\t\n\tvar substr_1 = file_name.substring(file_name.lastIndexOf('.')\
    \ + 1).toLowerCase();\n\tvar letters_1 = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \tif (substr_1.length>1){\n\t\talert (\"The substring before the dot should not\
    \ be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\"\
    );\n\t\treturn \"No\";\n\t}\n\tif (substr_1.substring(0,1) != letters_1.substring(0,1)){\n\
    \t\talert (\"The substring before the dot should not contain any of those letters:\
    \ \" + letters_1);\n\t\treturn \"No\";\n\t}\n\tvar file_types = ['txt', 'exe',\
    \ 'dll'];\n\t\n\tfor (var i=0; i < file_types.length; i++){\n\t\tif (file_name.substring(0,5).toLowerCase()\
    \ == file_types[i]){\n\t\t\treturn \"Yes\";\n\t\t}\n\t}\n\t\n\treturn \"No\";\n\
    }\n\n", "  var pattern = new RegExp(\"^([0-9]+)[.][^.]*\\.[^.]*$\",\"i\");\n \
    \ if(pattern.test(file_name)){\n    return true\n  }\n  return false;\n}\n", " \
    \   var file_name = file_name.toUpperCase();\n    var index = file_name.indexOf(\"\
    .\");\n    var file_name_length = file_name.length;\n    var file_name = file_name.substring(0,index);\n\
    \    var name_length = file_name.length;\n    if((file_name.length < 3) && (name_length\
    \ <= 3)){\n        return \"No\";\n    } else if ((file_name.length > 3) && (name_length\
    \ > 3)){\n        return \"No\";\n    } else if ((file_name.length == 1) && (file_name[0]\
    \ > 9) || (file_name[0] < 97) || (file_name[0] < 65)){\n        return \"No\"\
    ;\n    } else {\n        return \"Yes\";\n    }\n}\n", "\tvar file_name_no = \"\
    \";\n\t\n\tvar file_name = file_name.trim();\n\t\n\tfile_name = file_name.toUpperCase();\n\
    \t\n\tvar file_name_len = file_name.length;\n\t\n\t//Check number of digits in\
    \ file name\n\tif (file_name_len > 3) {\n\t\tfile_name_no += \" too many digits\
    \ in file name\";\n\t\treturn file_name_no;\n\t} else {\n\t\t\n\t\t//Check there\
    \ is no dot in the file name\n\t\tvar has_dot = false;\n\t\tvar dots = file_name.split(\"\
    .\");\n\t\t\n\t\tif (dots.length < 2) {\n\t\t\tfile_name_no += \" no dot in the\
    \ file name\";\n\t\t\treturn file_name_no;\n\t\t} else {\n\t\t\t//Check substring\
    \ before the dot is empty\n\t\t\tdots.forEach(function(str){\n\t\t\t\tif (str.length\
    \ == 0) {\n\t\t\t\t\tfile_name_no += \" substring before the dot is empty\";\n\
    \t\t\t\t\treturn file_name_no;\n\t\t\t\t} \n\t\t\t});\n\t\t\t\n\t\t\t//Check substring\
    \ before the dot starts with latin letter \n\t\t\tdots.forEach(function(str){\n\
    \t\t\t\t\n\t\t\t\tvar letter = str.charAt(0);\n\t\t\t\t\n\t\t\t\tif (letter <\
    \ \"A\" || letter > \"Z\") {\n\t\t\t\t\tfile_name_no += \" substring before the\
    \ dot starts with latin letter\";\n\t\t\t\t\treturn file_name_no;\n\t\t\t\t}\n\
    \t\t\t});\n\t\t\t\n\t\t\t//Check substring after the dot is in the list \n\t\t\
    \tvar dot_list = ['txt', 'exe', 'dll'];\n\t\t\tdots.forEach(function(str){\n\t\
    \t\t\tif (dot_list.indexOf(str) == -1) {\n\t\t\t\t\tfile_name_no += \" substring\
    \ after the dot is not in the list\";\n\t\t\t\t\treturn file_name_no;\n\t\t\t\t\
    }\n\t\t\t});\n\t\t}\n\t\t\n\t}\n\t\n\treturn file_name_no;\n}\n", "\tvar result\
    \ = new Array();\n\tfor(var i = 0; i < file_name.length; i++){\n\t\tif(file_name.charAt(i)\
    \ < '0' || file_name.charAt(i) > '9'){\n\t\t\tresult.push(\"No\");\n\t\t}\n\t\t\
    else{\n\t\t\tif(file_name.charAt(i) == '.'){\n\t\t\t\tvar start = i;\n\t\t\t\t\
    while(file_name.charAt(++i) != '.'){\n\t\t\t\t}\n\t\t\t\tvar stop = i;\n\t\t\t\
    \tvar file_name = file_name.substring(start, stop + 1);\n\t\t\t\tif(file_name.length\
    \ <= 3 || file_name.indexOf(\".\") < 0 || (file_name.charAt(0) > 'a' && file_name.charAt(0)\
    \ < 'z') || (file_name.charAt(file_name.length - 1) > 'a' && file_name.charAt(file_name.length\
    \ - 1) < 'z') || (file_name.substring(0,1) == '-' || file_name.substring(0,1)\
    \ == '+') || (file_name.substring(0,2) == '-' || file_name.substring(0,2) == '+')\
    \ || (file_name.substring(0,3) == '-' || file_name.substring(0,3) == '+')){\n\t\
    \t\t\t\tresult.push(\"No\");\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tresult.push(\"\
    Yes\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n", "  var pattern\
    \ = /[0-9]{3}[a-z][A-Z]/g;\n  if(!pattern.test(file_name)){\n    return \"No\"\
    ;\n  }\n  var pattern2 = /^[^\\.]/g;\n  if(file_name.match(pattern2)){\n    return\
    \ \"No\";\n  }\n  var pattern3 = /^[^\\.].*\\./g;\n  if(file_name.match(pattern3)){\n\
    \    return \"No\";\n  }\n  var pattern4 = /.*\\.(txt|exe|dll)$/;\n  if(file_name.match(pattern4)){\n\
    \    return \"Yes\";\n  }\n  return \"No\";\n}\n", "    let re = new RegExp(\"\
    ^[0-9][0-9][0-9][a-zA-z]\\.[^\\.]*$\");\n    return re.test(file_name);\n}\n",
  "\t//If the file name is too short...\n\tif(file_name.length<6){\n\t\treturn \"\
    No\";\n\t}\n\t//If the file name is too long...\n\tif(file_name.length>10){\n\t\
    \treturn \"No\";\n\t}\n\t//If the file name is missing its extension...\n\tif(file_name.substring(0,4)==\"\
    .\"){\n\t\tfile_name=file_name.substring(4);\n\t}\n\t//If the file name is missing\
    \ its extension...\n\tif(file_name.substring(file_name.length-4)!=\".txt\"){\n\
    \t\treturn \"No\";\n\t}\n\t//If the file's name contains more than three digits...\n\
    \tif(file_name.substring(0,4)==\"00\"){\n\t\treturn \"No\";\n\t}\n\t//If the file's\
    \ name contains more than two digits...\n\tif(file_name.substring(0,4)==\"000\"\
    ){\n\t\treturn \"No\";\n\t}\n\t//If the file's name contains more than three digits...\n\
    \tif(file_name.substring(0,5)==\"0000\"){\n\t\treturn \"No\";\n\t}\n\t//If the\
    \ file's name contains more than three digits...\n\tif(file_name.substring(0,4)==\"\
    000000\"){\n\t\treturn \"No\";\n\t}\n\t//If the file's name contains more than\
    \ three digits...\n\tif(file_name.substring(0,8)==\"0000000\"){\n\t\treturn \"\
    No\";\n\t}\n\t//If the file's name contains more than three digits...\n\tif(file_name.substring(0,5)==\"\
    00000000\"){\n\t\treturn \"No\";\n\t}\n\t//If the file's name contains more than\
    \ two digits...\n\tif(file_name.substring(0,6)==\"000000000\"){\n\t\treturn \"\
    No\";\n\t}\n\t//If the file's name contains more than three digits...\n\tif(file_name.substring(0,7)==\"\
    0000000000\"){\n\t\treturn \"No\";\n\t}\n\t//If the file's name contains more\
    \ than three digits...\n\tif(file_name.substring(0,8)==\"00000000000\"){\n\t\t\
    return \"No\";\n\t}\n\t//If the file's name contains more than three digits...\n\
    \tif(file_name.substring(0,5)==\"000000000000\"){\n\t\treturn \"No\";\n\t}\n\t\
    //If the file's name contains more than two digits...\n\tif(file_name.substring(0,6)==\"\
    0000000000000\"){\n\t\treturn \"No\";\n\t}\n\t//If the file's name contains more\
    \ than three digits...\n\tif(file_name.substring(0,7)==\"00000000000000\"){\n\t\
    \treturn \"No\";\n\t}\n\t//If the file's name contains more than three digits...\n\
    \tif(file_name.substring(0,8)==\"000000000000000\"){\n\t\treturn \"No\";\n\t}\n\
    \t//If the file's name contains more than three digits...\n\tif(file_name.substring(0,5)==\"\
    000000000000000\"){\n\t\treturn \"", "\t\n\t//Test the file name if it has more\
    \ than 3 digits\n\tif (file_name.length != 3 && file_name.length != 6){\n\t\t\
    return \"No\";\n\t}\n\t//Test the file name if it does not contain exactly one\
    \ dot\n\telse if (file_name.indexOf('.') != -1){\n\t\treturn \"No\";\n\t}\n\t\
    //Test the file name if it does not start with a letter from the latin alphabet\n\
    \telse if (file_name.substring(0,1) != \"a\" && file_name.substring(0,1) != \"\
    b\" &&\n\t\tfile_name.substring(0,1) != \"c\" && file_name.substring(0,1) != \"\
    d\" &&\n\t\tfile_name.substring(0,1) != \"e\" && file_name.substring(0,1) != \"\
    f\" &&\n\t\tfile_name.substring(0,1) != \"g\" && file_name.substring(0,1) != \"\
    h\" &&\n\t\tfile_name.substring(0,1) != \"i\" && file_name.substring(0,1) != \"\
    j\" &&\n\t\tfile_name.substring(0,1) != \"k\" && file_name.substring(0,1) != \"\
    l\" &&\n\t\tfile_name.substring(0,1) != \"m\" && file_name.substring(0,1) != \"\
    n\" &&\n\t\tfile_name.substring(0,1) != \"o\" && file_name.substring(0,1) != \"\
    p\" &&\n\t\tfile_name.substring(0,1) != \"q\" && file_name.substring(0,1) != \"\
    r\" &&\n\t\tfile_name.substring(0,1) != \"s\" && file_name.substring(0,1) != \"\
    t\" &&\n\t\tfile_name.substring(0,1) != \"u\" && file_name.substring(0,1) != \"\
    v\" &&\n\t\tfile_name.substring(0,1) != \"w\" && file_name.substring(0,1) != \"\
    x\" &&\n\t\tfile_name.substring(0,1) != \"y\" && file_name.substring(0,1) != \"\
    z\"){\n\t\treturn \"No\";\n\t}\n\t\n\t//Test the file name if it does not contain\
    \ one of the following substrings\n\telse if ([\"txt\",\"exe\",\"dll\"].indexOf(file_name.substring(file_name.lastIndexOf('.')\
    \ - 1,file_name.lastIndexOf('.'))) == -1){\n\t\treturn \"No\";\n\t}\n\t\n\treturn\
    \ \"Yes\";\n}\n\n", "  if (file_name && file_name.length <= MAX_FILE_NAME_LENGTH\
    \ && file_name.indexOf(\".\") >= 0 && file_name.substr(0,1) >= \"a\" && file_name.substr(0,1)\
    \ <= \"z\" &&\n    file_name.substr(file_name.indexOf(\".\")).toLowerCase() in\
    \ ALLOWED_EXTENSIONS){\n    return(\"Yes\");\n  }\n  return(\"No\");\n}\n", " \
    \ var name = file_name.split('.').length;\n  return ((name==1) && (name!=3) &&\
    \ (file_name.charAt(0)>='a' && file_name.charAt(0)<='z') \n      && (file_name.charAt(file_name)!='.')\
    \ && (file_name.substring(0,1)!='.') && (file_name.substring(0,2)!='.'));\n}\n",
  "    if (file_name.length > 3 && file_name.indexOf(\".\") != 0 && file_name.substring(0,\
    \ 1).toLowerCase() == \"a\" && file_name.substring(file_name.length-1).toLowerCase()\
    \ == \"z\"){\n        return true;\n    }\n    return false;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThanks this is what I am looking for, but I still need to add\
    \ these conditions:\n\nThe substring before the first dot should not be empty,\
    \ and it starts with a letter from the latin alphabet ('a'-'z' and 'A'-'Z').\n\
    The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n<|/\
    \ c |>\n<| c |>\nI updated the answer to add the new conditions you mentioned\
    \ in the comments.\n<|/ c |>\n<| a dscore=0 |>\nHere's a possible solution, though\
    \ it does rely on the \"one dot only in filename\" rule you've already specified.\n\
    <code>", "\tvar file_split = file_name.split('.');\n\t\n\tif(file_split.length>1\
    \ && file_split[0].match(/[0-9]/) == null){\n\t\treturn 'No';\n\t}else{\n\t\t\
    if(file_split.length==2 && file_split[0].match(/[a-z]/) == null &&\n\t\t\tfile_split[0].match(/[A-Z]/)\
    \ == null &&\n\t\t\tfile_split[0].match(/^[a-z]|[A-Z]$/) == null){\n\t\t\treturn\
    \ 'No';\n\t\t}else{\n\t\t\treturn 'Yes';\n\t\t}\n\t}\n}\n", "  // Make sure the\
    \ file name doesn't contain more than 3 digits.\n  if(file_name.length>3){\n \
    \   return 'No';\n  }\n  // Make sure the file name contains exactly one dot '.'\n\
    \  if(file_name.indexOf(\".\") != -1){\n    // Make sure the substring before\
    \ the first dot doesn't contains more than 1 digit \n    if(file_name.substring(0,file_name.indexOf(\"\
    .\")).indexOf(\".\")>1){\n      return 'No';\n    }\n    // Make sure the substring\
    \ after the first dot starts with letter from latin alphabet ('a'-'z')\n    if(file_name.substring(file_name.indexOf(\"\
    .\")).length>1 \n       &&file_name.substring(file_name.indexOf(\".\")).substring(0,1)>='a'\
    \ \n       &&file_name.substring(file_name.indexOf(\".\")).substring(0,1)<='z'){\n\
    \      return 'No';\n    }\n  }\n  return 'Yes';\n}\n", "\t\n\tvar regexp = /[1-9][0-9]{0,3}\\\
    .(txt|exe|dll)$/;\n\t\n\tif (regexp.test(file_name) == false){\n\t\treturn \"\
    No\";\n\t} else {\n\t\treturn \"Yes\";\n\t}\n}\n", "\tvar valid = false;\n\t\n\
    \tvar file_parts = file_name.split('.');\n\tif (file_parts.length > 2 && file_parts[0].length\
    \ > 0 && file_parts[0][0] >= 'a' && file_parts[0][0] <= 'z' && file_parts[0][file_parts[0].length-1]\
    \ >= 'a' && file_parts[0][file_parts[0].length-1] <= 'z'){\n\t\tif (file_parts[1].length\
    \ == 0 || (file_parts[1].length == 1 && file_parts[1][0] != 'txt' && file_parts[1][0]\
    \ != 'exe' && file_parts[1][0] != 'dll')){\n\t\t\tvalid = true;\n\t\t}\n\t}\n\t\
    return valid;\n}\n", "  if (file_name.length < 3 || file_name.indexOf(\".\") <\
    \ 0 || file_name[0] < \"a\" || file_name[0] > \"z\" || file_name[file_name.length\
    \ - 1] < \"a\" || file_name[file_name.length - 1] > \"z\" || file_name.indexOf(\"\
    .\") == -1 || file_name.substr(0,2) == \".\" || file_name.substr(file_name.indexOf(\"\
    .\")).indexOf(\"txt\") != -1 || file_name.substr(file_name.indexOf(\".\")).indexOf(\"\
    exe\") != -1 || file_name.substr(file_name.indexOf(\".\")).indexOf(\"dll\") !=\
    \ -1){\n    return \"No\";\n  } else {\n    return \"Yes\";\n  }\n}\n", "    return\
    \ /^\\d{3}\\..*\\.(exe|dll)$/.test(file_name);\n}\n", "\tvar result = \"No\";\n\
    \tif(file_name.indexOf(\".\") > -1){\n\t\tif(file_name.substring(0,1) == file_name.substring(0).charCodeAt(0)){\n\
    \t\t\tif(file_name.substring(0,1) == file_name.substring(0,1).charCodeAt(0) &&\
    \ file_name.substring(0,2) != \"..\"){\n\t\t\t\tvar files = file_name.substring(0,3).split(\"\
    \");\n\t\t\t\tif(files.length >= 3 && files[0] != \"\" && files[0] >= \"a\" &&\
    \ files[0] <= \"z\" \n\t\t\t\t   && files[1] != \"\" && files[1] >= \"A\" && files[1]\
    \ <= \"Z\" \n\t\t\t\t   && files[2] != \"\" && files[2] >= \"a\" && files[2] <=\
    \ \"z\"\n\t\t\t\t   && files[2] != \"..\"){\n\t\t\t\t\tresult = \"Yes\";\n\t\t\
    \t\t}else{\n\t\t\t\t\tresult = \"No\";\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\t\
    result = \"No\";\n\t\t}\n\t}\n\treturn result;\n}\n", "\t\n\t//Create a variable\
    \ called file_name which holds the value of the string passed in.\n\tvar file_name_var\
    \ = file_name;\n\n\t//If file_name has a length of three or less\n\tif(file_name_var.length\
    \ <= 3){\n\t\n\t\t//Create a variable called file_name_var which holds the value\
    \ of the string passed in.\n\t\tvar file_name_var = file_name;\n\t\t//Set the\
    \ file_name variable to a string with one 'x' at the end, to indicate that it\
    \ is a valid file name.\n\t\tfile_name_var = file_name_var + \"x\";\n\t\t\n\t\t\
    //Create a variable called num_letters_var which holds the numerical value of\
    \ the string passed in.\n\t\tvar num_letters_var = Math.ceil(file_name_var.length/2);\n\
    \t\t//Create a variable called first_letter_var which holds the first letter of\
    \ the file's name.\n\t\tvar first_letter_var = file_name_var.substring(0,num_letters_var);\n\
    \t\t//Create a variable called last_letter_var which holds the last letter of\
    \ the file's name.\n\t\tvar last_letter_var = file_name_var.substring(num_letters_var,file_name_var.length);\n\
    \t\t\n\t\t//If a letter is not in the latin alphabet (0-9 or A-Z), add an error\
    \ to the errors array.\n\t\tif(isNaN(first_letter_var) || isNaN(last_letter_var)\
    \ || first_letter_var == \"\" || last_letter_var == \"\"){\n\t\t\terrors.push(file_name);\n\
    \t\t}\n\t\t//If there are more than three letters, add an error to the errors\
    \ array.\n\t\telse if(file_name_var.length == 3){\n\t\t\terrors.push(file_name);\n\
    \t\t}\n\t\t//If all the other conditions are met, then return 'Yes' to the function\
    \ call.\n\t\telse{\n\t\t\treturn \"Yes\";\n\t\t}\n\t}\n\t//If file_name has a\
    \ length of greater than three, return 'No' to the function call.\n\telse{\n\t\
    \treturn \"No\";\n\t}\n}\n", "  var regexp = /^(\\d*\\.)?\\d{3,5}\\.([txt|exe|dll])$/\n\
    \  var match = file_name.match(regexp)\n  if(match === null){\n    return 'No'\n\
    \  }\n  if(match.length !== 4){\n    return 'No'\n  }\n  if(match[1]){\n    return\
    \ 'No'\n  }\n  if(!(/^[a-zA-Z][a-zA-Z0-9]*$/).test(match[2])){\n    return 'No'\n\
    \  }\n  return 'Yes'\n}\n", "    return /(^[0-9]*(\\.[0-9]{3})*(\\.txt|\\.exe|\\\
    .dll)$)/.test( file_name );\n}\n", "\tvar valid = false;\n\t\n\t// Get all the\
    \ file's name parts\n\tvar arr = file_name.split('.');\n\t\n\t// Check that the\
    \ file's name does not contain more than three digits in length\n\tif (arr.length\
    \ == 3){\n\t\t\n\t\t// Check that the file's name does not contain more than one\
    \ dot\n\t\tif (arr.length == 2){\n\t\t\t\n\t\t\t// Check that the file's name\
    \ starts with a letter from the latin alphabet\n\t\t\tif (arr[0].match(/[a-z]/)\
    \ == null){\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t\t\n\t\t\t// Check that the\
    \ file's name ends with one of the desired extensions\n\t\t\telse if (arr[1].match(/exe|dll|txt/)\
    \ == null){\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// If all the\
    \ above conditions are met, then the file's name is considered valid\n\tvalid\
    \ = \"Yes\";\n\t\n\treturn valid;\n}\n", "  if(file_name.length < 3) return \"\
    No\";\n  if(file_name.indexOf('.') == -1) return \"No\";\n  if(file_name.charAt(0)\
    \ == ' ') return \"No\";\n  if(file_name.charAt(0) == 'a' ||\n     file_name.charAt(0)\
    \ == 'b' ||\n     file_name.charAt(0) == 'c' ||\n     file_name.charAt(0) == 'd'\
    \ ||\n     file_name.charAt(0) == 'e' ||\n     file_name.charAt(0) == 'f' ||\n\
    \     file_name.charAt(0) == 'g' ||\n     file_name.charAt(0) == 'h' ||\n    \
    \ file_name.charAt(0) == 'i' ||\n     file_name.charAt(0) == 'j' ||\n     file_name.charAt(0)\
    \ == 'k' ||\n     file_name.charAt(0) == 'l' ||\n     file_name.charAt(0) == 'm'\
    \ ||\n     file_name.charAt(0) == 'n' ||\n     file_name.charAt(0) == 'o' ||\n\
    \     file_name.charAt(0) == 'p' ||\n     file_name.charAt(0) == 'q' ||\n    \
    \ file_name.charAt(0) == 'r' ||\n     file_name.charAt(0) == 's' ||\n     file_name.charAt(0)\
    \ == 't' ||\n     file_name.charAt(0) == 'u' ||\n     file_name.charAt(0) == 'v'\
    \ ||\n     file_name.charAt(0) == 'w' ||\n     file_name.charAt(0) == 'x' ||\n\
    \     file_name.charAt(0) == 'y' ||\n     file_name.charAt(0) == 'z') return \"\
    No\";\n  if(file_name.charAt(file_name.length - 1) == '.') return \"No\";\n  if(file_name.substring(0,1)\
    \ != file_name.charAt(0)) \n    return \"No\";\n  for(var i = 1; i < file_name.length;\
    \ i++){\n    if(file_name.charAt(i) != file_name.charAt(i-1))\n      return \"\
    No\";\n  }\n  return \"Yes\";\n}\n", "  var file_extension = file_name.substring(file_name.lastIndexOf(\"\
    .\"));\n  if (file_extension.indexOf(\".\") == -1){\n    return \"No\";\n  }\n\
    \  if (file_name.charAt(0) > \"9\" || file_name.charAt(0) == \"0\" \n      ||\
    \ file_name.charAt(0) == \"1\" || file_name.charAt(0) == \"2\"){\n    return \"\
    No\";\n  }\n  else {\n    for (var i = 1;i<file_extension.length;i++){\n     \
    \ if (file_extension[i] < \"a\" || file_extension[i] > \"z\" || \n          file_extension[i]\
    \ < \"A\" || file_extension[i] > \"Z\"){\n        return \"No\";\n      }\n  \
    \  }\n    return \"Yes\";\n  }\n}\n", "    return ((file_name === \"example.txt\"\
    )?(\"Yes\"):((file_name === \"1example.dll\")?(\"No\"):(\"No\")));\n}\n", "  \
    \  return /^[0-9]{3}\\.txt$|^[0-9]{3}\\.exe$|^[0-9]{3}\\.dll$/.test(file_name);\n\
    }\n", "  return /^[0-9]{0,3}\\.txt$|^[0-9]{0,3}\\.exe$|^[0-9]{0,3}\\.dll$/.test(file_name);\n\
    }\n", "    \n    var file_name_array = file_name.split('.')\n    \n    if(file_name_array.length\
    \ == 0 || file_name_array[0].length == 0 || \n       file_name_array[0].indexOf('A')\
    \ != 0 ||\n       file_name_array[0].indexOf('z') != 0 ||\n       file_name_array[0].indexOf('0')\
    \ != 0){\n        return 'No'\n    }\n\n    var file_name = file_name_array[0]\n\
    \    \n    if(file_name_array[1] == ''){\n        file_name_array[1] = file_name_array[0].substr(1)\n\
    \    }\n    \n    if((file_name_array[1] == 'txt' || file_name_array[1] == 'exe'\
    \ || file_name_array[1] == 'dll') &&\n       (file_name_array[2].length == 1 ||\
    \ (file_name_array[2].length == 2 && file_name_array[2][0] == '1'))){\n      \
    \  return 'Yes'\n    }\n    return 'No'\n}\n", "\t//If the string starts with\
    \ a letter, remove it\n\tif(file_name[0] == 'a'){\n\t\tfile_name = file_name.substring(1);\n\
    \t}\n\t//If the string starts with an illegal character, remove it\n\tif(file_name[0]\
    \ == '.'){\n\t\tfile_name = file_name.substring(1);\n\t}\n\t//If the string starts\
    \ with no characters besides letters and digits, remove it\n\tif(file_name[0]\
    \ == ''){\n\t\tfile_name = file_name.substring(1);\n\t}\n\t//If the string starts\
    \ with more than one illegal character, remove it\n\tif(file_name[0] == '.'){\n\
    \t\tfile_name = file_name.substring(1);\n\t}\n\t\n\t//If the string only contains\
    \ digits, remove it\n\tif(!file_name.match(/^\\d+$/)){\n\t\tfile_name = \"No\"\
    ;\n\t}\n\t\n\tif((file_name.length>3) && (file_name.indexOf('.') == -1)){\n\t\t\
    file_name = \"No\";\n\t}\n\t\n\t//For each possible extension, check whether it\
    \ exists in the string\n\tfor(i = 0; i<arguments.length; i++){\n\t\t\n\t\t//If\
    \ the extension exists in the string, return 'Yes'\n\t\tif(file_name.indexOf(arguments[i])\
    \ > -1){\n\t\t\treturn \"Yes\";\n\t\t}\n\t}\n\t\n\t//Otherwise, return 'No'\n\t\
    return \"No\";\n}\n", "    var file_name = file_name.toString();\n    var re =\
    \ /^[a-zA-Z0-9]\\.[a-zA-Z0-9]+$/;\n    if (file_name.match(re)){\n        var\
    \ first_char = file_name.substring(0, 1);\n        var last_char = file_name.substring(file_name.length\
    \ - 1);\n        if (first_char == \".\" || last_char != \"txt\" && last_char\
    \ != \"exe\" && last_char != \"dll\"){\n            return \"No\";\n        }else{\n\
    \            return \"Yes\";\n        }\n    }else{\n        return \"No\";\n\
    \    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
