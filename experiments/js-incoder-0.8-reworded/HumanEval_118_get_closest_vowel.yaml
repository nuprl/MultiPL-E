name: HumanEval_118_get_closest_vowel
language: js
prompt: "//You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
  yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
  quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
  full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
  eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
  bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
  ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
  quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
  Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
completions: ["  let prev='';\n  let min=0;\n  for(let i=word.length;i>0;i--){\n \
    \   if(word.charAt(i-1)==\"a\"||word.charAt(i-1)==\"e\"||word.charAt(i-1)==\"\
    i\"||word.charAt(i-1)==\"o\"||word.charAt(i-1)==\"u\"){\n      if(word.charAt(i)==\"\
    a\"||word.charAt(i)==\"e\"||word.charAt(i)==\"i\"||word.charAt(i)==\"o\"||word.charAt(i)==\"\
    u\"){\n        if(prev!=''&&i==word.lastIndexOf(prev)){\n          min=Math.min(min,i-prev-1);\n\
    \        }\n      }\n    }\n    prev=word.charAt(i-1);\n  }\n  return min==0?\"\
    \":word.substring(min+1);\n}", "  const vowels = \"aeiouy\";\n  let first_vowel_index\
    \ = null;\n  let last_vowel_index = null;\n  let first_vowel = null;\n  let last_vowel\
    \ = null;\n  let vowel_found = false;\n  const vowel_map = {};\n  for (let i=0;\
    \ i < word.length; i++) {\n    const char = word[i];\n    if (vowels.includes(char.toLowerCase()))\
    \ {\n      vowel_found = true;\n      vowel_map[char] = vowel_map[char] || 0;\n\
    \      vowel_map[char]++;\n    }\n  }\n  if (vowel_found) {\n    for (let i=word.length\
    \ - 1; i >= 0; i--) {\n      const char = word[i];\n      if (vowels.includes(char.toLowerCase()))\
    \ {\n        if (first_vowel_index == null) {\n          first_vowel_index = i;\n\
    \          first_vowel = char;\n        } else if (vowel_map[char] > vowel_map[first_vowel])\
    \ {\n          first_vowel_index = i;\n          first_vowel = char;\n       \
    \ }\n        if (last_vowel_index == null) {\n          last_vowel_index = i;\n\
    \          last_vowel = char;\n        } else if (vowel_map[char] < vowel_map[last_vowel])\
    \ {\n          last_vowel_index = i;\n          last_vowel = char;\n        }\n\
    \      }\n    }\n    if (first_vowel_index != null && last_vowel_index != null\
    \ && first_vowel != null && last_vowel != null) {\n      return first_vowel +\
    \ last_vowel;\n    }\n  }\n  return \"\";\n}\n", "  if(word.length == 0){\n  \
    \  return \"\";\n  }\n  if(word.charAt(0) == 'a' || word.charAt(0) == 'A'){\n\
    \    return \"\";\n  }\n  let vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n  let\
    \ first_con = word.substr(0, 1);\n  let last_con = word.substr(word.length-1);\n\
    \  let last_vowel = word.substr(word.length-1, 1);\n  if(vowels.includes(first_con)\
    \ && vowels.includes(last_con)){\n    return last_vowel;\n  }\n  if(vowels.includes(first_con)\
    \ && !vowels.includes(last_con)){\n    return first_con;\n  }\n  if(!vowels.includes(first_con)\
    \ && vowels.includes(last_con)){\n    return last_con;\n  }\n  if(!vowels.includes(first_con)\
    \ && !vowels.includes(last_con)){\n    return last_vowel;\n  }\n  if(!vowels.includes(first_con)\
    \ && vowels.includes(last_con)){\n    return first_con;\n  }\n  return \"\";\n\
    }\n", "    let vowels = ['a','e','i','o','u','A','E','I','O','U'];\n    \n   \
    \ // Convert the string to lower case\n    word = word.toLowerCase();\n\n    //\
    \ Create a variable to store the last letter of the given word\n    let lastLetter\
    \ = word[word.length-1];\n    \n    // Iterate from right to left\n    for(let\
    \ i = word.length-1; i >= 0; i--){\n        // Iterate vowels from the right\n\
    \        for(let j = word.length-1; j >=0; j--){\n            // Check if the\
    \ current letter in the word is a vowel\n            if(vowels.includes(word[i])){\n\
    \                // If the current letter is equal to the last letter of the word\n\
    \                if(i == j){\n                    // If the current letter is\
    \ equal to the first letter of the word\n                    if(word[i] == word[0]){\n\
    \                        // Add that letter to the result and return it\n    \
    \                    return word[i];\n                    }\n                }\n\
    \                // If the current letter doesn't equal to the last letter of\
    \ the word\n                else{\n                    // If the current letter\
    \ is equal to the first letter of the word\n                    if(word[i] ==\
    \ word[0]){\n                        // Add that letter to the result and return\
    \ it\n                        return word[i];\n                    }\n       \
    \         }\n            }\n        }\n    }\n    // Return empty string if you\
    \ didn't find any vowel\n    return '';\n}\n", "\tlet result = \"\";\n\tconst\
    \ vowels = \"AEIOUYAEIOUYAEIOUYAEIOU\";\n\tlet vowel_count = vowels.split(\"\"\
    ).length;\n\tlet len = word.length;\n\tlet last_index = len - 1;\n\tlet is_in_consonant\
    \ = false;\n\t\n\tfor(let i = 1; i <= len; i++) {\n\t\tlet letter = word[i - 1];\n\
    \t\tlet next_letter = word[i];\n\t\t\n\t\tif(!is_in_consonant) {\n\t\t\tlet consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\t\t\tlet consonant_count\
    \ = consonants.split(\"\").length;\n\t\t\tis_in_consonant = letter in consonants;\n\
    \t\t}\n\t\t\n\t\tif(letter in vowels) {\n\t\t\tlet start_index = vowels.indexOf(letter)\
    \ + 1;\n\t\t\tlet end_index = vowels.indexOf(next_letter) - 1;\n\t\t\t\n\t\t\t\
    if(start_index > last_index) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(end_index\
    \ < start_index) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tlet distance = end_index\
    \ - start_index;\n\t\t\tif(distance < 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\
    \t\tlet vowel_letter = vowels[start_index];\n\t\t\tif(vowel_letter != letter)\
    \ {\n\t\t\t\tresult += vowel_letter;\n\t\t\t}\n\t\t\t\n\t\t\tlast_index = i -\
    \ 1;\n\t\t\t\n\t\t\tis_in_consonant = false;\n\t\t}\n\t\telse {\n\t\t\tlast_index\
    \ = i - 1;\n\t\t\tis_in_consonant = false;\n\t\t}\n\t}\n\t\n\treturn result;\n\
    }\n", "    \n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelCount\
    \ = 0;\n    \n    for(let i = 0; i < word.length; i++){\n        if(word[vowelCount].toLowerCase()\
    \ === vowels[i]) return word[vowelCount];\n        if(word[vowelCount] === vowels[i])\
    \ vowelCount++;\n    }\n    \n    return \"\";\n}\n<|/ file filename=ClosestVowel.js\
    \ source=github |>\n<| c |>\nHello. While this code may solve the problem, you\
    \ should [edit] your answer to include an explanation of *how* and/or *why* it\
    \ works. Code only answers typically become useless in the long-run because future\
    \ viewers experiencing similar problems cannot understand the reasoning behind\
    \ the solution.\n<|/ c |>\n<| c |>\nHello,\nThis code works by using 2 arrays,\
    \ one to store each of the letters in the word, and the other to store the letters\
    \ that each of the letters in the word is closest to in relation to the other\
    \ letters in the word. If the letter is \"a\" then it checks the \"a\" array for\
    \ the closest \"b\" if there is no \"b\" then the closest \"c\", if there is only\
    \ \"c\" then \"d\", if there is only \"d\" then \"e\" else if there is \"e\" then\
    \ \"f\" and if there is only \"f\" then \"a\" and if it is \"a\" then it checks\
    \ the \"a\" array for the closest \"b\" if there is no \"b\" then the closest\
    \ \"c\", if there is only \"c\" then \"d\", if there is only \"d\" then \"e\"\
    \ else if there is \"e\" then \"f\" and if there is only \"f\" then \"a\" and\
    \ if it is \"a\" then it checks the \"a\" array for the closest \"b\" if there\
    \ is no \"b\" then the closest \"c\", if there is only \"c\" then \"d\", if there\
    \ is only \"d\" then \"e\" else if there is \"e\" then \"f\" and if there is only\
    \ \"f\" then \"a\" and if it is \"a\" then it checks the \"a\" array for the closest\
    \ \"b\" if there is no \"b\" then the closest \"c\", if there is only \"c\" then\
    \ \"d\", if there is only \"d\" then \"e\" else if there is \"e\" then \"f\" and\
    \ if there is only \"f\" then \"a\" and if it is \"a\" then it checks the \"a\"\
    \ array for the closest \"b\" if there is no \"b\" then the closest \"c\", if\
    \ there is only \"c\" then \"d\", if there is only \"d\" then \"e\" else if there\
    \ is \"e\" then \"f\" and if there is only \"f\" then \"a\" and if it is \"a",
  "   var consonantsArr = [\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"\
    m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"z\"];\n   var vowelsArr\
    \ = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n   var vowelsCountArr = [\"a\",\"e\",\"\
    i\",\"o\",\"u\"];\n   var resultArr = \"\";\n   for(var i=0; i <= word.length;\
    \ i++){\n       if(word[i] === \"A\"){\n           if(word[i+1] === \"M\"){\n\
    \               resultArr += vowelsArr[0];\n           }\n           if(word[i+1]\
    \ === \"m\"){\n               resultArr += vowelsArr[1];\n           }\n     \
    \      if(word[i+1] === \"Z\"){\n               resultArr += vowelsArr[vowelsArr.length-1];\n\
    \           }\n       }\n       if(word[i] === \"E\"){\n           if(word[i+1]\
    \ === \"R\"){\n               resultArr += vowelsArr[0];\n           }\n     \
    \      if(word[i+1] === \"r\"){\n               resultArr += vowelsArr[1];\n \
    \          }\n           if(word[i+1] === \"Z\"){\n               resultArr +=\
    \ vowelsArr[vowelsArr.length-1];\n           }\n       }\n       if(word[i] ===\
    \ \"I\"){\n           if(word[i+1] === \"T\"){\n               resultArr += vowelsArr[0];\n\
    \           }\n           if(word[i+1] === \"t\"){\n               resultArr +=\
    \ vowelsArr[1];\n           }\n           if(word[i+1] === \"Z\"){\n         \
    \      resultArr += vowelsArr[vowelsArr.length-1];\n           }\n       }\n \
    \      if(word[i] === \"O\"){\n           if(word[i+1] === \"U\"){\n         \
    \      resultArr += vowelsArr[0];\n           }\n           if(word[i+1] === \"\
    u\"){\n               resultArr += vowelsArr[1];\n           }\n           if(word[i+1]\
    \ === \"Z\"){\n               resultArr += vowelsArr[vowelsArr.length-1];\n  \
    \         }\n       }\n       if(word[i] === \"U\"){\n           if(word[i+1]\
    \ === \"Y\"){\n               resultArr += vowelsArr[0];\n           }\n     \
    \      if(word[i+1] === \"y\"){\n               resultArr += vowelsArr[1];\n \
    \          }\n           if(word[i+1] === \"Z\"){\n               resultArr +=\
    \ vowelsArr[vowelsArr.length-1];\n           }\n       }\n       if(", "    vowels\
    \ = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n    if(vowels_count\
    \ < 2){\n      return '';\n    }\n    var firstVowel = word.substring(word.length\
    \ - 1);\n    firstVowel = firstVowel.toLowerCase();\n    var firstConsonant =\
    \ word.substring(0, word.length - 1);\n    firstConsonant = firstConsonant.toLowerCase();\n\
    \    for(var i = 0; i < vowels_count; i++){\n      var current_vowel = word.substring(word.length\
    \ - 1, word.length - 1 + i);\n      current_vowel = current_vowel.toLowerCase();\n\
    \      if(vowels.indexOf(firstVowel) > -1 && vowels.indexOf(current_vowel) > -1){\n\
    \        if(firstConsonant === current_vowel){\n          return firstVowel;\n\
    \        }\n      }\n    }\n    return '';\n}\n", "\tvar re = /[aeiouAEIOU]/g;\n\
    \tvar re2 = /[bcdfghjklmnpqrstvwxyz]/g;\n\tvar re3 = /[aeiouAEIOU]/g;\n\tvar vowels\
    \ = re.exec(word);\n\tvar vowels2 = re2.exec(word);\n\tvar vowels3 = re3.exec(word);\n\
    \tif(vowels2 != null){\n\t\tvowels = vowels[2];\n\t}\n\tif(vowels3 != null){\n\
    \t\tvowels = vowels[3];\n\t}\n\t\n\tvar vowel_start = word.substr(word.length\
    \ - vowels.length + 1);\n\tvar vowel_end = word.substr(word.length - vowels.length\
    \ - 1);\n\tvar vowel_found = false;\n\t\n\tvar consonants = word.substr(word.length\
    \ - 1);\n\tvar consonant_found = false;\n\t\n\tfor(var i=0; i < word.length; i++){\n\
    \t\tif(!vowel_found && consonant_found && consonants.indexOf(vowels[i]) >= 0){\n\
    \t\t\tvowel_found = true;\n\t\t}\n\t\tif(!vowel_found && consonant_found && consonants.indexOf(vowels2[i])\
    \ >= 0){\n\t\t\tvowel_found = true;\n\t\t}\n\t\tif(!vowel_found && consonant_found\
    \ && consonants.indexOf(vowels3[i]) >= 0){\n\t\t\tvowel_found = true;\n\t\t}\n\
    \t\tif(vowel_found && consonants.indexOf(vowels[i]) < 0){\n\t\t\tconsonant_found\
    \ = true;\n\t\t}\n\t\tif(vowel_found && consonants.indexOf(vowels2[i]) < 0){\n\
    \t\t\tconsonant_found = true;\n\t\t}\n\t\tif(vowel_found && consonants.indexOf(vowels3[i])\
    \ < 0){\n\t\t\tconsonant_found = true;\n\t\t}\n\t}\n\t\n\treturn vowel_start;\n\
    }\n", "  let vowels = vowels_map.join(\"\"); // vowels array\n  let consonants\
    \ = consonants_map.join(\"\"); // consonants array\n  let vowels_length = vowels.length;\
    \ // vowels array length\n  let consonants_length = consonants.length; // consonants\
    \ array length\n  let letters = word.split(\"\"); // word array\n\n  // find word\
    \ end\n  let end_index = letters.length-1;\n  let start_index = end_index-vowels_length+1;\
    \ // find starting position\n  \n  for(let i=start_index; i<=end_index; i++){\n\
    \    if(letters[i].toLowerCase() === vowels){\n      return letters[i];\n    }\n\
    \  }\n  return \"\";\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript\
    \ |>\nMy solution is very similar to the one suggested before, but with some changes:\n\
    \nIt uses RegExp to match vowels ignoring capitals\nIt uses filter to return only\
    \ vowels between two consonants, which are defined as two consecutive characters\
    \ from the right\n\n<code>\nconst getVowelsBetween = (word, start, end) => {\n\
    \  const regEx = new RegExp(/[aeiouAEIOU]/g)\n  const matchArr = word.match(regEx)\n\
    \n  // filter only vowels between two consonants\n  const betweenConsonants =\
    \ (str) => {\n    for(let i = 0; i < str.length-1; i++) {\n      if(str[i] ===\
    \ str[i+1]) {\n        return str.slice(i, i+1)\n      }\n    }\n    return \"\
    \";\n  }\n\n  // filter only vowels\n  const onlyVowels = (str) => {\n    return\
    \ str.filter(x => x.toLowerCase() === betweenConsonants(x).toLowerCase())\n  }\n\
    \n  // return result\n  return  onlyVowels(matchArr).filter(x => x !== \"\").sort((a,\
    \ b) => {\n    // check if the second argument (end) is bigger than the first\
    \ (start)\n    if (end < start) {\n      // if the end is bigger than start, the\
    \ first argument is bigger\n      // so return -1\n      return -1;\n    }\n \
    \   // if the end is smaller than start, the second argument is bigger\n    //\
    \ so return 1\n    return 1;\n  }).pop();\n}\n\nconst vowelsBetweenConsonantsCaseInsensitive\
    \ = getVowelsBetween(\"yogurt\", 5, 8)", "  let vowels = ['a','e','i','o','u'];\n\
    \  let vowelCount = 0;\n  let vowelsString = \"\";\n  for(let i = 0; i < word.length;\
    \ i++){\n    if(vowels.includes(word[i])){\n      vowelCount++;\n    }\n  }\n\
    \  if(vowelCount == 0){\n    return \"\"\n  }\n  let consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y'];\n\
    \  let consonantCount = 0;\n  let consonantsString = \"\";\n  for(let i = word.length-1;\
    \ i >= 0; i--){\n    if(consonants.includes(word[i])){\n      consonantCount++;\n\
    \    }\n  }\n  if(consonantCount == 0){\n    return \"\"\n  }\n  for(let i = word.length-1;\
    \ i >= 0; i--){\n    if(word[i] == word[i+1]){\n      consonantCount++;\n    }\n\
    \  }\n  if(consonantCount >= vowelCount){\n    return \"\"\n  }\n  for(let i =\
    \ word.length-1; i >= 0; i--){\n    if(word[i] == word[i-1]){\n      consonantCount++;\n\
    \    }\n  }\n  if(consonantCount >= vowelCount){\n    return \"\"\n  }\n  for(let\
    \ i = word.length-1; i >= 0; i--){\n    if(word[i] == word[i+1]){\n      consonantCount++;\n\
    \    }\n  }\n  if(consonantCount >= vowelCount){\n    return \"\"\n  }\n  for(let\
    \ i = word.length-1; i >= 0; i--){\n    if(vowels.includes(word[i])){\n      vowelsString\
    \ = word[i];\n      break;\n    }\n  }\n  return vowelsString;\n}\n", "    \n\
    \    // your code\n    return ''\n}\n</cell>\n<cell>\nget_closest_vowel(\"yogurt\"\
    )\n</cell>\n<cell>\nget_closest_vowel(\"FULL\")\n</cell>\n<cell>\nget_closest_vowel(\"\
    quick\")\n</cell>\n<cell>\nget_closest_vowel(\"ab\")\n</cell>\n<text>\nProblem\
    \ 3\n\n</text>\n<cell>", "    vowel = word.substring(word.length-2);\n    word\
    \ = word.substring(0,word.length-2);\n    \n    for(let i=0;i<word.length;i++){\n\
    \        if(word.charAt(i)==\"a\" || word.charAt(i)==\"e\" || word.charAt(i)==\"\
    i\" || word.charAt(i)==\"o\" || word.charAt(i)==\"u\"){\n            return word.charAt(i);\n\
    \        }\n    }\n    return vowel;\n}\n", "    let result = ''\n    for (let\
    \ i = 0; i < word.length; i++){\n        let ch = word.charAt(i).toUpperCase()\n\
    \        if (ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U'){\n\
    \            result += ch\n        }\n    }\n    if (result){\n        return\
    \ result\n    }\n    return ''\n}\n", "    \n    var vowels = \"aeiouAEIOU\".split(\"\
    \");\n    var vowel_indexes = [];\n    var i = -1;\n    var wordCount = word.length;\n\
    \    \n    while ((i === -1) && (wordCount > 0)){\n        i = word.indexOf(\"\
    a\", i);\n        if (i === -1){\n            break;\n        }\n        \n  \
    \      vowel_indexes.push(i);\n        wordCount--;\n        i = word.indexOf(\"\
    a\", i);\n    }\n    \n    if (wordCount <= 0){\n        return \"\";\n    }\n\
    \    \n    var index_array = [];\n    \n    while (wordCount > 0){\n        i\
    \ = vowel_indexes[vowel_indexes.length - 1];\n        index_array.push(i);\n \
    \       wordCount--;\n        \n        i = word.indexOf(\"a\", i);\n        if\
    \ (i === -1){\n            break;\n        }\n        \n        vowel_indexes.push(i);\n\
    \        wordCount--;\n    }\n    \n    var vowel_index = 0;\n    \n    while\
    \ (vowel_index < index_array.length){\n        \n        var last_index = index_array[vowel_index];\n\
    \        vowel_index++;\n        \n        if (last_index + 1 === vowel_indexes[vowel_index]){\n\
    \            return word[last_index];\n        }\n    }\n    \n    return \"\"\
    ;\n}\n", "    var vowels = ['A','a','E','e','I','i','O','o','U','u']\n    var\
    \ last_consonant = ''\n    var closest_vowel = ''\n    \n    for(var i = 0; i\
    \ < word.length; i++){\n        var char = word[i]\n        var idx = vowels.indexOf(char.toLowerCase())\n\
    \        if(idx != -1){\n            last_consonant = char\n            closest_vowel\
    \ = vowels[idx]\n            break;\n        }\n    }\n    \n    if(closest_vowel\
    \ == last_consonant){\n        return ''\n    }\n    return closest_vowel\n}\n",
  "   if(word.length===0)\n       return \"\";\n   var vowels=[\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n   var leftCons=word.indexOf(\"consonant\");\n   var rightCons=leftCons+3;\n\
    \   var leftVowel=word.indexOf(\"vowel\");\n   var rightVowel=leftVowel+3;\n \
    \  var vowelIndex=1;\n   var vowel=\"\";\n   while(vowelIndex<vowels.length &&\
    \ vowelIndex<leftVowel && vowelIndex<rightVowel){\n       var testCons=word.substring(leftCons,\
    \ rightCons);\n       var testVowel=word.substring(leftVowel, rightVowel);\n \
    \      if(testCons===vowels[vowelIndex] && testVowel===vowels[vowelIndex]){\n\
    \          vowel=vowels[vowelIndex];\n          vowelIndex++;\n       }\n    \
    \   leftCons=rightCons;\n       rightCons--;\n       leftVowel=rightVowel;\n \
    \      rightVowel--;\n   }\n   return vowel;\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\nThe solution is straightforward if you realize that consonants are represented\
    \ by a single character in the alphabet. This means that you have a simple index-based\
    \ solution, just go through the string and check the character at index i, if\
    \ it is a vowel, increment a counter and if it is a consonant, decrement a counter.\n\
    The advantage is that you can use a simple counter for the consonants since there\
    \ are only 26 consonants in English, and the vowels are always at index 0, so\
    \ you can just increment and decrement your counter.\n<|/ a tags=string,javascript\
    \ |>\n<| c |>\nThe OP is saying that the string contains both English letters\
    \ and English letters with diacritics (not that English letters with diacritics\
    \ are in the English language), so it would not be enough to check if a character\
    \ is a vowel or a consonant.\n<|/ c |>\n<| c |>\nThanks for the reply. Sure i\
    \ will try with counter but i want it in string method. Thats why i asked it here.\n\
    <|/ c |>\n<| a tags=string,javascript |>\nYou can do it with for loop:\n\n<code>",
  "  for(let i=word.length-1; i>=0; i--){\n    if(word.substr(i, 1).match(/[aeiou]/i)){\n\
    \      return word.substr(i, 1);\n    }\n  }\n  return \"\";\n}\n", "    if(word.length\
    \ <= 2){\n        return \"\";\n    }\n    let first_consonant = word.indexOf(\"\
    g\");\n    let second_consonant = word.length-1;\n    let first_vowel = \"a\"\
    .charCodeAt(0);\n    let second_vowel = \"y\".charCodeAt(0);\n    let third_vowel\
    \ = \"u\".charCodeAt(0);\n    let fourth_vowel = \"e\".charCodeAt(0);\n    let\
    \ first_vowel_range = first_consonant - second_vowel;\n    let second_vowel_range\
    \ = second_consonant - first_vowel;\n    let third_vowel_range = third_vowel -\
    \ first_vowel;\n    let fourth_vowel_range = fourth_vowel - first_vowel;\n   \
    \ \n    let first_vowel_consonant_index = word.indexOf(\"g\", first_vowel + first_vowel_range);\n\
    \    let second_vowel_consonant_index = word.length - 1 - word.indexOf(\"y\",\
    \ second_vowel + second_vowel_range);\n    let third_vowel_consonant_index = word.length-1\
    \ - (third_vowel + third_vowel_range);\n    let fourth_vowel_consonant_index =\
    \ word.length-1 - (fourth_vowel + fourth_vowel_range);\n\n    if(first_vowel_consonant_index\
    \ != -1 && second_vowel_consonant_index != -1 && third_vowel_consonant_index !=\
    \ -1 && fourth_vowel_consonant_index != -1){\n        if(first_vowel_consonant_index\
    \ >= second_vowel_consonant_index && first_vowel_consonant_index >= third_vowel_consonant_index\
    \ && first_vowel_consonant_index >= fourth_vowel_consonant_index){\n         \
    \   if(second_vowel_consonant_index < first_vowel_consonant_index && second_vowel_consonant_index\
    \ < third_vowel_consonant_index && second_vowel_consonant_index < fourth_vowel_consonant_index){\n\
    \                return word[second_vowel_consonant_index];\n            }\n \
    \           else if(second_vowel_consonant_index > first_vowel_consonant_index\
    \ && second_vowel_consonant_index > third_vowel_consonant_index && second_vowel_consonant_index\
    \ > fourth_vowel_consonant_index){\n                return word[second_vowel_consonant_index\
    \ - 1];\n            }\n            else{\n                return word[second_vowel_consonant_index];\n\
    \            }\n        }\n        else if(second_vowel_consonant_index < first_vowel_consonant_index\
    \ && second_vowel_consonant_index < third_vowel_consonant_index && second_vowel_consonant_index\
    \ < fourth_vowel_consonant_index){\n            return word[", "\tvar vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tvar consonants = [\"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\t\n\tvar startVowel = -1;\n\
    \tvar endVowel = -1;\n\tvar vowelsCount = 0;\n\tvar consonantsCount = 0;\n\t\n\
    \tfor(var i = 0; i < word.length; i++){\n\t\t\n\t\tfor(var j = 0; j < vowels.length;\
    \ j++){\n\t\t\tif(word[i] == vowels[j]){\n\t\t\t\tstartVowel = i;\n\t\t\t\tvowelsCount++;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor(var j = 0; j < consonants.length;\
    \ j++){\n\t\t\tif(word[i] == consonants[j]){\n\t\t\t\tendVowel = i;\n\t\t\t\t\
    consonantsCount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(startVowel ==\
    \ -1 && endVowel == -1){\n\t\treturn \"\";\n\t}\n\telse if(startVowel == -1 &&\
    \ endVowel != -1){\n\t\treturn word[endVowel + 1];\n\t}\n\telse if(startVowel\
    \ != -1 && endVowel == -1){\n\t\treturn word[startVowel - 1];\n\t}\n\telse{\n\t\
    \treturn word[startVowel - 1] + word[endVowel + 1];\n\t}\n}\n", "    var vowel\
    \ = ['a','e','i','o','u']; //vowels\n    var consonant = ['t','h','k','c','p','l','m','n','r','s','w','y','f','v'];\
    \ //consonants\n    var wordArray = word.split(\"\");\n    \n    //loop through\
    \ all the characters in the word\n    for(var i=0; i < wordArray.length; i++)\
    \ {\n        //if a vowel found\n        if(vowel.indexOf(wordArray[i]) > -1)\
    \ {\n            //store the index of that vowel\n            var vowelIndex =\
    \ vowel.indexOf(wordArray[i]);\n            //find where the vowel is located\n\
    \            var vowelLoc = (wordArray.length - 1 - i);\n            //find the\
    \ consonant closest to the vowel location\n            var consonantLoc = vowelLoc\
    \ + vowelIndex - 1;\n            //if there are consonants\n            if(consonant.indexOf(wordArray[consonantLoc])\
    \ > -1) {\n                return wordArray[consonantLoc]; \n            }\n \
    \       }\n    }\n    \n    //if no vowel found\n    return \"\";\n}\n", "   \
    \ let first_vowel = word[0];\n    let last_vowel = word[word.length-1];\n    let\
    \ first_cons = word[1];\n    let last_cons = word[word.length-2];\n\n    if(first_vowel\
    \ === first_cons && last_cons === last_vowel)\n        return first_vowel;\n \
    \   else if(first_vowel === first_cons)\n        return last_vowel;\n    else\n\
    \        return word[word.length-1];\n}\n</cell>\n<cell>\n# Run this cell to check\
    \ your function\nget_closest_vowel(\"yogurt\")\n</cell>\n<cell>\n# Run this cell\
    \ to check your function\nget_closest_vowel(\"FULL\")\n</cell>\n<cell>\n# Run\
    \ this cell to check your function\nget_closest_vowel(\"quick\")\n</cell>\n<cell>\n\
    # Run this cell to check your function\nget_closest_vowel(\"ab\")\n</cell>\n<text>\n\
    Exercise 03\nIn the cell below, define a function closest_vowel_c that implements\
    \ the function you wrote in Exercise 02.\n\nThe function should take a word as\
    \ parameter and return an empty string in case the word does not contain any vowel.\
    \ Otherwise, it should return the closest vowel in the word (case sensitive).\n\
    \n\n</text>\n<cell>\n# UNQ_C3 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED\
    \ FUNCTION: closest_vowel_c\ndef closest_vowel_c(word):\n    \n    closest_vowel\
    \ = word[0]\n    \n    if (len(word) == 1): #base case\n        return closest_vowel\n\
    \    \n    for cons in word[1:]: #go through every consonant except the first\
    \ letter\n        if cons == closest_vowel:\n            continue\n        \n\
    \        possible_vowels = []\n        for vowel in vowels: #go through every\
    \ vowel\n            if (cons == vowel[0]):\n                possible_vowels.append(vowel)\n\
    \                \n        if (len(possible_vowels) > 0):\n            closest_vowel\
    \ = min(possible_vowels, key=len) #set closest vowel\n            \n    return\
    \ closest_vowel\n</cell>\n<cell>\n#DO NOT MODIFY\n\nassert closest_vowel_c(\"\
    aba\") == \"a\"\nassert closest_vowel_c(\"abba\") == \"a\"\nassert closest_vowel_c(\"\
    abbas\") == \"a\"\nassert closest_vowel_c(\"azzzzzzzzzzzzz\") == \"a\"\nassert\
    \ closest_vowel_c(\"abba\") == \"a\"\nassert closest_vowel_c(\"abacaba\") == \"\
    a\"\nassert closest_vowel_c(\"abacab\") == \"a\"\nassert closest_vowel_c(\"abacaba\"\
    ) == \"a\"\n</", "    let vowels = new Set();\n    let vowelsArr = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    vowelsArr.map(item => vowels.add(item))\n    let\
    \ rightIndex = word.length - 1;\n    let rightWord = word.slice(rightIndex);\n\
    \    let foundVowel = false;\n    vowelsArr.map((item, index) => {\n        if(rightWord.indexOf(item)\
    \ > -1){\n            foundVowel = true;\n            let foundIndex = rightWord.indexOf(item);\n\
    \            let newIndex = (foundIndex + item);\n            if(newIndex < rightIndex){\n\
    \                let newRightIndex = newIndex;\n                let newRightWord\
    \ = rightWord.slice(newIndex);\n                let newVowelsArr = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n                let newVowelsArrLen = newVowelsArr.length;\n\
    \                let foundVowel = false;\n                for(let i = 0; i < newVowelsArrLen;\
    \ i++){\n                    if(newRightWord.indexOf(newVowelsArr[i]) > -1){\n\
    \                        foundVowel = true;\n                    }\n         \
    \       }\n                if(foundVowel){\n                    leftIndex = newIndex\
    \ - (newVowelsArrLen - 1);\n                    leftWord = rightWord.slice(leftIndex\
    \ + 1);\n                    let finalResult = vowels.has(leftWord) ? leftWord\
    \ : \"\";\n                    foundVowel = foundVowel && vowels.has(finalResult)\
    \ ? finalResult : false;\n                    foundVowel = foundVowel && newRightWord.indexOf(vowelsArr[vowelsArr.length\
    \ - 1]) > -1 ? newRightWord.indexOf(vowelsArr[vowelsArr.length - 1]) : false;\n\
    \                    \n                    if(foundVowel){\n                 \
    \       return foundVowel;\n                    }\n                }\n       \
    \     }\n        }\n    })\n    return foundVowel ? foundVowel : \"\";\n}\n",
  "  var vowels = \"AEIOUYaeiouy\"\n  var consonants = \"bcdfghjklmnpqrstvwxyz\"\n\
    \  var result=\"\"\n  for(var i=word.length-1;i>=0;i--){\n    var index = word.indexOf(consonants,i)\n\
    \    if(index>-1){\n      var start = index+2\n      var end = index+4\n     \
    \ if(start<0){\n        start=0\n      }\n      if(end>word.length){\n       \
    \ end=word.length\n      }\n      var tmp = word.slice(start,end)\n      if(vowels.indexOf(tmp)>-1){\n\
    \        result=tmp\n        break\n      }\n    }\n  }\n  if(result==\"\"){\n\
    \    return result\n  }\n  return \"\"\n}\n", "    let vowels = new Set();\n \
    \   word.split('').map((char) => {\n        if(vowels.has(char)){\n          \
    \  vowels.delete(char);\n        }else{\n            vowels.add(char);\n     \
    \   }\n    });\n    let vowelsSet = Array.from(vowels);\n    let index = vowelsSet.indexOf(\"\
    A\");\n    return word[index+1] || word[index-1] || word[word.length-1];\n}\n",
  "   var vowels = \"aeiouAEIOU\";\n   var vowelIndex = vowels.indexOf(vowel);\n \
    \  var vowelsCount = vowels.length;\n   var consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n   var consonantsCount = consonants.length;\n   var lastVowelIndex = 0;\n \
    \  var lastConsonantIndex = 0;\n   var result = '';\n   \n   for(var i=0; i< word.length;i++){\n\
    \       if(vowelIndex != lastVowelIndex){\n           lastVowelIndex = vowelIndex;\n\
    \           lastConsonantIndex = consonantIndex;\n           consonantIndex =\
    \ consonants.indexOf(word[i])\n       }\n       if(consonantIndex != lastConsonantIndex){\n\
    \           lastConsonantIndex = consonantIndex;\n           if(consonantsCount\
    \ == 1){\n               result = word[i];\n               break;\n          \
    \ }\n           \n           consonantIndex = consonants.indexOf(word[i]) + 1;\n\
    \       }\n   }\n   return result;\n}\n", "    var vowels = \"aeiouAEIOU\"\n \
    \   var consonants = \"bcdfghjklmnpqrstvwxz\"\n    var vowels_found = [];\n  \
    \  for(var i=word.length-1; i>=0; i--){\n        if(vowels.includes(word.charAt(i))){\n\
    \            vowels_found.push(word.charAt(i))\n        }\n    }\n    vowels_found\
    \ = vowels_found.filter((v, i) => vowels.indexOf(v) === i)\n    vowels_found =\
    \ vowels_found.filter((v, i) => consonants.indexOf(v) === i)\n    if(vowels_found.length\
    \ === 0){\n        return \"\"\n    }\n    return vowels_found[0]\n}\n", "   \
    \ if(word.length <= 3){\n        return \"\";\n    }\n    let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let index = 0;\n    let consonantIndex\
    \ = consonants.length;\n    let vowelIndex = vowels.length;\n    let minDistance\
    \ = Infinity;\n    let closestVowel = \"\";\n    for(let i = word.length - 1;\
    \ i >= 0; i--){\n        if(word[i] === vowels[vowelIndex]){\n            vowelIndex--;\n\
    \            continue;\n        }\n        for(let j = consonantIndex; j <= consonants.length;\
    \ j++){\n            if(consonants[j] === word[i]){\n                consonantIndex--;\n\
    \                continue;\n            }\n            for(let k = index; k <=\
    \ index+word.length; k++){\n                let distance = abs(i-k)\n        \
    \        if(distance < minDistance){\n                    minDistance = distance;\n\
    \                    closestVowel = word[k];\n                    index = k;\n\
    \                }\n            }\n        }\n    }\n    return closestVowel;\n\
    }\n", "  let vowels = new Set();\n  \n  for (let i = word.length - 1; i >= 0;\
    \ i--) {\n    let c = word.substr(i, 1).toLowerCase();\n    vowels.add(c);\n \
    \ }\n  \n  let wordArr = word.split(\"\");\n  wordArr.forEach((char, index) =>\
    \ {\n    if (vowels.has(char)) {\n      let result = word.substr(0, index + 1);\n\
    \      return result;\n    }\n  });\n  \n  return \"\";\n}\n", "  var vowel_arr\
    \ = [] \n  vowel_arr.push(\"a\",\"e\",\"i\",\"o\",\"u\")\n  var arr = []\n  arr.push(\"\
    b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"\
    r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\")\n  for(var i = word.length - 1;\
    \ i >= 0; i--){\n    var arr = arr.slice()\n    arr.splice(0,1)\n    if(vowel_arr.indexOf(word[i])\
    \ !== -1) continue\n    for(var j = 0; j < arr.length; j++){\n      if(word[word.length\
    \ - i] == arr[j]){\n        var tmp = arr[j]\n        arr.splice(j,1)\n      \
    \  arr.splice(i,0,tmp)\n        break\n      }\n    }\n    if(arr.length === 0)\
    \ return \"\"\n  }\n  return arr[arr.length-1]\n}\n", "    const vowels  = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let result   = \"\";\n\n    for(let i =\
    \ word.length - 1; i >= 0; i--){\n        const consonant = word.charAt(i);\n\
    \        let vowel       = vowels.find(elem => elem == consonant);\n        \n\
    \        if(vowel){\n            result = (vowel == consonant) ? vowel : \"\"\
    ;\n            break;\n        }\n    }\n    return result;\n}\n<|/ file source=github\
    \ |>\n<| a |>\n<code>", "  vowels = ['a','e','i','o','u'];\n  \n  var vowel_found\
    \ = false;\n  \n  for(var i = word.length-1; i >= 0; i--){\n    var temp = word[i];\n\
    \    \n    for(var j=0;j<vowels.length;j++){\n      if(temp == vowels[j]){\n \
    \       vowel_found = true;\n        break;\n      }\n    }\n    if(vowel_found)\n\
    \      break;\n  }\n  \n  if(vowel_found){\n    for(i = word.length-1; i >= 0;\
    \ i--){\n      if(vowels.indexOf(word[i]) === -1)\n        break;\n    }\n   \
    \ \n    if(word[i] !== undefined){\n      return word[i];\n    }\n  }\n  \n  return\
    \ '';\n}\nget_closest_vowel('pig');\nget_closest_vowel('yogurt');\nget_closest_vowel('quick');\n\
    get_closest_vowel('ab');\nget_closest_vowel('');\n", "\tlet vowels = [];\n\tfor(let\
    \ i =0; i<word.length-1; i++){\n\t\tif(word[i]==\"a\" || word[i]==\"e\" || word[i]==\"\
    i\" || word[i]==\"o\" || word[i]==\"u\"){\n\t\t\tvowels.push(word[i]);\n\t\t}\n\
    \t}\n\tlet closestVowel = \"\";\n\tlet lastVowel = \"\";\n\tfor(let i =0; i<word.length-1;\
    \ i++){\n\t\tif(vowels.includes(word[i]) && vowels.includes(lastVowel)){\n\t\t\
    \tclosestVowel = word[i];\n\t\t\tbreak;\n\t\t}\n\t\tlastVowel = word[i];\n\t}\n\
    \treturn closestVowel;\n}\n", "  let vowel = Array.from('aeiouAEIOU')\n  word.split(\"\
    \").reverse().filter((v) => vowel.includes(v)).reverse()\n    .map((v) => (v =\
    \ v.charCodeAt(0) - 96)).sort()\n    .map((v) => (v >> 0) % 26).map((v) => (v\
    \ & 1? String.fromCharCode((v + 1)) : ''))\n    .filter((v, i, a) => a.indexOf(v)\
    \ === i).reverse()\n    .reduce((a,b) => a.length >= b.length ? a : b, \"\");\n\
    }\n", "    let consonant = \"bcdfghjklmnpqrstvwxyz\";\n    let vowels = \"aieo\"\
    ;\n    let vowelsArr = [];\n    for(let i=0;i<word.length;i++){\n        if(vowels.includes(word[i])){\n\
    \            vowelsArr.push(word[i]);\n        }\n    }\n    \n    if(vowelsArr.length>0){\n\
    \        let vowelIndex = vowelsArr.indexOf(vowels.toUpperCase());\n        if(vowelIndex>0){\n\
    \            let left = vowelIndex-2;\n            let right = vowelIndex+2;\n\
    \            let rightIndex = 0;\n            if(word.length-1 < right){\n   \
    \             right = word.length-1;\n                rightIndex = word.length-1;\n\
    \            }\n            word = word.substr(left,right).replace(vowels,\"\"\
    );\n            word = word.replace(/[aeiou]/g,\"\");\n            while(word.length>0){\n\
    \                if(word.substr(0,1).toUpperCase() == word.substr(0,1).toLowerCase()){\n\
    \                    word = word.substr(1);\n                }else{\n        \
    \            break;\n                }\n            }\n            return word;\n\
    \        }else{\n            return \"\";\n        }\n    }else{\n        return\
    \ \"\";\n    }\n}\n", "\tvar vowels = ['a','e','i','o','u'];\n\tvar consonants\
    \ = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z'];\n\
    \tvar strlen = word.length;\n\tvar count = 0;\n\tvar vowelsfound = [];\n\tfor(var\
    \ i=0; i< strlen; i++){\n\t\tfor(var j=0; j<vowels.length; j++){\n\t\t\tif(word[i]\
    \ === vowels[j]){\n\t\t\t\tvowelsfound.push(vowels[j]);\n\t\t\t}\n\t\t}\n\t\t\
    for(var k=0; k<consonants.length; k++){\n\t\t\tif(word[i] === consonants[k]){\n\
    \t\t\t\tvowelsfound.push(consonants[k]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(vowelsfound.length\
    \ > 0){\n\t\tvowelsfound.sort();\n\t\tvar len = vowelsfound.length;\n\t\tvar min\
    \ = 0;\n\t\tvar max = 0;\n\t\tfor(var j=0; j<len; j++){\n\t\t\tmin = Math.min((j+1),\
    \ (vowelsfound.length-1));\n\t\t\tmax = Math.max((j+2), (vowelsfound.length-1));\n\
    \t\t\tif(vowelsfound[j] >= vowelsfound[min] && vowelsfound[j] <= vowelsfound[max]){\n\
    \t\t\t\treturn vowelsfound[j];\n\t\t\t}\n\t\t}\n\t}\n\telse{\n\t\treturn \"\"\
    ;\n\t}\n\t\n}", "  let arr = []\n  word.split(\"\").reverse().forEach((char) =>\
    \ {\n    if(char === 'a' || char === 'e' || char === 'i' || char === 'o' || char\
    \ === 'u'){\n      arr.push(char)\n    }\n  })\n  return arr[0]\n}\n", "    let\
    \ vowels=[\"a\",\"e\",\"i\",\"o\",\"u\"];\n    let right_index=word.lastIndexOf(\"\
    r\");\n    let left_index=word.lastIndexOf(\"l\");\n    \n    if(right_index>left_index){\n\
    \        let middle_index=Math.ceil((right_index+left_index)/2);\n        let\
    \ middle_word=word.substring(middle_index);\n        let middle_vowel=middle_word.substring(middle_word.lastIndexOf(\"\
    a\")).charAt(0);\n        let vowel_index=vowels.indexOf(middle_vowel);\n    \
    \    if(vowel_index<0){\n            return \"\";\n        }else{\n          \
    \  return vowels[vowel_index+1];\n        }\n    }else{\n        return \"\";\n\
    \    }\n}\n", "    \n    // Convert word into char array and find the vowel index\
    \ \n    // from the right of the word using lastIndexOf\n    var wordArr = word.split('');\n\
    \    var vowelIndex = wordArr.lastIndexOf('U');\n\n    // If no vowel found, the\
    \ function will return empty string\n    if(vowelIndex == -1){\n        return\
    \ \"\";\n    }\n\n    // If the vowel index is the first or last char\n    if(vowelIndex\
    \ == 0 || vowelIndex == wordArr.length-1){\n        return \"\";\n    }\n\n  \
    \  // Get the chars before and after vowelIndex\n    var before = wordArr.slice(0,\
    \ vowelIndex);\n    var after = wordArr.slice(vowelIndex+1, wordArr.length);\n\
    \n    // Find the vowel that is closest to the right of the word\n    var closestVowel\
    \ = closest(before, after, 'u');\n\n    // If the closest vowel was not found,\
    \ return empty string\n    if(closestVowel == \"\"){\n        return \"\";\n \
    \   }\n    \n    // If the closest vowel doesn't meet the condition, return empty\
    \ string\n    if(closestVowel == 'u'\n        || closestVowel == 'e'\n       \
    \ || closestVowel == 'o'\n        || closestVowel == 'i'){\n        return closestVowel;\n\
    \    }\n\n    // If it is an i, return empty string\n    if(closestVowel == 'i'){\n\
    \        return \"\";\n    }\n\n    // Return the closest vowel\n    return closestVowel;\n\
    }\n", "    let left = 0,\n        right = word.length-1,\n        found_vowel\
    \ = \"\";\n    \n    while(left < right){\n        let middle = Math.floor(left+(right-left)/2),\n\
    \            cons = word[middle].toUpperCase().charCodeAt(0); //convert lowercase\
    \ to uppercase\n        \n        if(cons >= 65 && cons <= 90 || cons >= 97 &&\
    \ cons <= 122){\n            //found consonant\n            found_vowel = word[middle];\n\
    \            left = middle + 1;\n            right = middle;\n        }\n    \
    \    else if(cons === 13 || cons === 16 || cons === 17 || cons === 18 || cons\
    \ === 19 || cons === 20 || cons === 21 || cons === 22 || cons === 23 || cons ===\
    \ 24 || cons === 25 || cons === 26){\n            //found vowel\n            left\
    \ = middle + 1;\n            right = middle;\n        }\n    }\n    \n    return\
    \ found_vowel;\n}\n", "  let vowels = [...word].map(v=>v.toUpperCase())\n  let\
    \ index = vowels.indexOf('A')\n  let i = index+1\n  while( i<vowels.length){\n\
    \    if (vowels[i]!=='A'){\n      break\n    }else{\n      index = i\n      i++\n\
    \    }\n  }\n  return vowels[index-1].toUpperCase()\n}\n", "    let leftConsonants\
    \ = word.substr(word.length - 1).split(\"\");\n    let rightConsonants = word.substr(0,\
    \ word.length - 1).split(\"\");\n    let vowels = [];\n    \n    for (let i =\
    \ 0; i < leftConsonants.length; i++){\n        let charValue = leftConsonants[i].charCodeAt(0);\n\
    \        \n        if (charValue >= 65 && charValue <= 90){\n            vowels.push(\"\
    a\");\n        } else if (charValue >= 97 && charValue <= 122){\n            vowels.push(\"\
    i\");\n        } else if (charValue >= 123 && charValue <= 130){\n           \
    \ vowels.push(\"u\");\n        }\n    }\n    \n    for (let i = 0; i < rightConsonants.length;\
    \ i++){\n        let charValue = rightConsonants[i].charCodeAt(0);\n        \n\
    \        if (charValue >= 65 && charValue <= 90){\n            vowels.push(\"\
    a\");\n        } else if (charValue >= 97 && charValue <= 122){\n            vowels.push(\"\
    i\");\n        } else if (charValue >= 123 && charValue <= 130){\n           \
    \ vowels.push(\"u\");\n        }\n    }\n    \n    vowels = vowels.sort((a, b)\
    \ => { return a.charCodeAt() - b.charCodeAt() });\n    \n    let vowel = vowels[vowels.length\
    \ - 1];\n    \n    return vowel;\n}\n", "    \n    var vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    \n    var vowelIndex = 0;\n    var vowelDistance\
    \ = 0;\n    \n    // if there's nothing to search for\n    if(word.length == 0)\
    \ return \"\";\n    \n    // get first character\n    var firstChar = word.substr(0,\
    \ 1);\n    \n    // get last character\n    var lastChar = word.substr(word.length-1,\
    \ 1);\n    \n    // go through each vowel and find the ones that fall within the\
    \ range\n    for(var i = 0; i<vowels.length; i++){\n        \n        // if current\
    \ vowel falls within the range of the current word\n        if(vowels[i] >= firstChar\
    \ && vowels[i] <= lastChar){\n            \n            // get the index of the\
    \ vowel\n            vowelIndex = i;\n            \n            // get the distance\
    \ between the current word and the found vowel\n            vowelDistance = word.length\
    \ - i;\n            \n            // check if vowel distance is 0\n          \
    \  if(vowelDistance == 0){\n                \n                // return empty\
    \ string\n                return \"\";\n            }\n        }\n    }\n    \n\
    \    // get the index of the first consonant\n    var firstConsonant = word.substr(word.length\
    \ - 1, 1);\n    \n    // get the index of next consonant\n    var nextConsonant\
    \ = word.substr(word.length - 2, 1);\n    \n    // get the distance between current\
    \ word and the found vowel\n    var distanceToVowel = word.length - vowelIndex;\n\
    \    \n    // check if distance to vowel is 0\n    if(distanceToVowel == 0){\n\
    \        \n        // return empty string\n        return \"\";\n    }\n    \n\
    \    // find the first vowel after the current word\n    var firstVowelIndex =\
    \ vowelIndex + 1;\n    \n    // get the distance between current word and the\
    \ found vowel\n    var distanceToFirstVowel = word.length - firstVowelIndex;\n\
    \    \n    // check if distance to first vowel is 0\n    if(distanceToFirstVowel\
    \ == 0){\n        \n        // return empty string\n        return \"\";\n   \
    \ }\n    \n    // check if the second consonant is one of the vowels\n    if(vowels[vowelIndex+1]\
    \ >= firstChar && vowels[vowelIndex+1] <= lastChar){\n        \n        // get\
    \ the second vowel index\n        var secondVowelIndex = vowelIndex + 2;\n   \
    \     \n        // get the distance between current word and the found vowel\n\
    \        var distanceToSecondVowel = word.length - secondVowelIndex;\n       \
    \ \n        // check if distance to second vowel is 0\n        if(distanceToSecondVowel\
    \ == 0){\n            \n            // return empty string\n            return\
    \ \"\";\n        }\n        \n        // check if the third consonant is one of\
    \ the vowels\n", "  var vowels = \"AEIOUaeiou\";\n  var letters = word.toUpperCase().split('');\n\
    \  letters.forEach(function(letter){\n    vowels = vowels.split('');\n    vowels.forEach(function(vowel){\n\
    \      if (vowel == letter){\n        var index = 0;\n        while(index<vowels.length){\n\
    \          var consonant = vowels[index];\n          if (consonant != letter &&\
    \ letter==consonant){\n            letters.splice(index, 1);\n          }else{\n\
    \            index++;\n          }\n        }\n      }\n    });\n  });\n  return\
    \ letters[0];\n}\n", "    let arr=[];\n    for (let i = 0; i < word.length; i++)\
    \ {\n        let letter = word.charAt(i); \n        arr.push(letter);\n    }\n\
    \    arr=arr.sort((a,b)=>{\n        let pos=a.charCodeAt(0)-b.charCodeAt(0);\n\
    \        if (pos==0){\n            return 0;\n        }\n        if (pos>0){\n\
    \            return 1;\n        }\n        if (pos<0){\n            return -1;\n\
    \        }\n    })\n    arr=arr.map(item=>item.toUpperCase());\n    let i=0;\n\
    \    let vowel=[];\n    for (let j=arr[0].length-1; j>-1; j--){\n        let letter=arr[0].charAt(j);\n\
    \        if (letter==\"A\" || letter==\"E\" || letter==\"I\" || letter==\"O\"\
    \ || letter==\"U\"){\n            vowel.push(letter);\n        }\n    }\n    vowel=vowel.join('');\n\
    \    let s=word.split(vowel);\n    let i=s.length;\n    for (let j=0; j<i; j++){\n\
    \        let len=s[j].length;\n        if (len<3){\n            s[i-1]=s[i-1]+vowel;\n\
    \        }\n    }\n    i=s[i];\n    i=i.split(vowel);\n    return i[0]+vowel;\n\
    }", "  let vowels = \"AEIOUaeiou\"\n  let lastChar = word[word.length-1]\n  \n\
    \  if(vowels.indexOf(lastChar)>-1){\n    return lastChar\n  }\n  \n  let startOfVowel\
    \ = vowels.indexOf(word[word.length-1])\n  let startOfLastChar = vowels.indexOf(lastChar)\n\
    \n  let endOfVowel = vowels.indexOf(word[0])\n  let endOfLastChar = vowels.indexOf(lastChar)\n\
    \n  let startOfLastVowel = vowels.indexOf(lastChar[lastChar.length-1])\n  let\
    \ endOfLastVowel = vowels.indexOf(lastChar[0])\n\n  if(startOfVowel>-1 && startOfLastChar>-1\
    \ && endOfVowel>-1 && endOfLastChar>-1){\n    if(startOfVowel>startOfLastChar\
    \ && startOfVowel<endOfLastChar && endOfVowel>endOfLastChar){\n      return word[word.length-1]\n\
    \    }\n  }\n  \n  return \"\"\n}\n", "\tvar vowels = \"AEIOUaeiou\"\n\tvar vowel_index\
    \ = word.substring(word.length - 1).indexOf(\"A\") + 1;\n\tvar right_index = (word.substring(\"\
    A\").indexOf(\"a\") + 1);\n\tvar result = \"\"\n\t\n\tfor (var i=0; i < vowel_index;\
    \ i++) {\n\t\tvar vowel = word.substring(i, i+1);\n\t\tif (vowels.indexOf(vowel)\
    \ >= 0) {\n\t\t\tresult += vowel;\n\t\t}\n\t}\n\t\n\treturn result;\n}\n", " \
    \ // Write your code here\n}\n</cell>\n<text>\nNow let's test our function by\
    \ checking the result for different inputs.\n\n\n</text>\n<cell>\nassert(get_closest_vowel(\"\
    yogurt\") == 'u')\nassert(get_closest_vowel(\"FULL\") == 'U')\nassert(get_closest_vowel(\"\
    quick\") == '')\nassert(get_closest_vowel(\"ab\") == '')\n</cell>\n<text>\nThe\
    \ next cell contains two functions that\n\nare used to check whether a given word\
    \ is a valid English word,\nare used to check whether a given word is a valid\
    \ English sentence (it may not contain spaces)\n\n\n</text>\n<cell>\ndef is_english(word):\n\
    \    word = word.strip()\n    return not (word.isalpha())\n    \ndef is_sentence(word):\n\
    \    word = word.strip()\n    return not (word.isalpha())\n\n</cell>\n<text>\n\
    Now let's test our functions by checking whether they work as expected.\n\n\n\
    </text>\n<cell>\nassert(is_english(\"quick\") == True)\nassert(is_english(\"ab\"\
    ) == False)\nassert(is_english(\"a\") == True)\nassert(is_english(\"aba\") ==\
    \ True)\nassert(is_english(\"abaa\") == False)\nassert(is_english(\"abba\") ==\
    \ False)\n</cell>\n<cell>\nassert(is_sentence(\"quick\") == True)\nassert(is_sentence(\"\
    ab\") == False)\nassert(is_sentence(\"a\") == True)\nassert(is_sentence(\"aba\"\
    ) == False)\nassert(is_sentence(\"abaa\") == True)\nassert(is_sentence(\"abba\"\
    ) == True)\nassert(is_sentence(\"abba c\") == False)\n</cell>\n<text>\nTask\n\n\
    </text>\n<text>\nYour task is to find all the unique anagrams of an English word.\n\
    \nYour function should take an English word as an input and should output all\
    \ the anagrams as a list.\n\nExample:\n\n>>> anagrams(\"quick\")\n[\"qucik\",\
    \ \"quck\", \"rckq\"]\n>>> anagrams(\"abba\")\n[\"abba\", \"aaba\", \"aabb\",\
    \ \"abbb\", \"abaa\"]\n>>> anagrams(\"abba c\")\n[\"abba c\", \"aaba c\"]\n\n\
    </text>\n<cell>\n# Write your code here\n</cell>\n<text>\nNow let's test our function\
    \ by checking the result for different inputs.\n\n\n</text>\n<cell>\nassert(anagrams(\"\
    quick\") == [\"qucik\", \"quck\", \"rckq\"])\nassert(anagrams(\"abba\") == [\"\
    abba\", \"aaba\", \"aabb\", \"abbb\", \"abaa\"])\nassert(anagrams(\"abba c", " \
    \ let vowelsArr = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsArr = vowelsArr.map(\
    \ item => item.toUpperCase() );\n  let str = word.toUpperCase();\n  \n  let startIndex\
    \ = 0;\n  let endIndex = 0;\n  let indexOfConsonant = str.length - 1;\n  let findVowelInsideConsonant\
    \ = \"\";\n  \n  let indexInArray = 0;\n  for(let i=0; i <= indexOfConsonant;\
    \ i++){\n    \n    if(vowelsArr.indexOf(str[i]) > -1){\n      \n      indexInArray\
    \ = i;\n      \n      if(vowelsArr[indexInArray+1] == str[i]){\n        startIndex\
    \ = indexInArray;\n      }\n      if(vowelsArr[indexInArray-1] == str[i]){\n \
    \       endIndex = indexInArray;\n      }\n    }\n  }\n  \n  findVowelInsideConsonant\
    \ = vowelsArr[startIndex + 1];\n  \n  if(startIndex < endIndex){\n    \n    let\
    \ nextIndexInArray = startIndex + 1;\n    \n    if(vowelsArr[nextIndexInArray+1]\
    \ == str[indexOfConsonant]){\n      findVowelInsideConsonant = vowelsArr[nextIndexInArray+1];\n\
    \    }\n    \n    if(vowelsArr[nextIndexInArray-1] == str[indexOfConsonant]){\n\
    \      findVowelInsideConsonant = vowelsArr[nextIndexInArray-1];\n    }\n  }\n\
    \  \n  return findVowelInsideConsonant;\n}\n", "    var vowels = [...new Set([...word])]\n\
    \    vowels.sort((a,b)=>a.localeCompare(b,\"hi\"))\n    return vowels[vowels.length-2]\n\
    }", "    word=word.toLowerCase();\n    //console.log(\"word: \"+word);\n    var\
    \ vowels=\"aeiou\";\n    var vowelsCount=vowels.length;\n    //console.log(\"\
    vowelsCount: \"+vowelsCount);\n    var consonants=\"bcdfghjklmnpqrstvwxyz\";\n\
    \    var consonantsCount=consonants.length;\n    //console.log(\"consonantsCount:\
    \ \"+consonantsCount);\n    var vowelsCount=vowels.length;\n    //console.log(\"\
    vowelsCount: \"+vowelsCount);\n    var count=0;\n    var count=0;\n    var result=\"\
    \";\n    for(var i=0;i<word.length;i++){\n        //console.log(\"i: \"+i);\n\
    \        if(consonants.indexOf(word[i])==-1){\n            //console.log(\"consonants.indexOf(\"\
    +word[i]+\"): \"+consonants.indexOf(word[i]));\n        }else{\n            //console.log(\"\
    consonants.indexOf(\"+word[i]+\"): \"+consonants.indexOf(word[i]));\n        \
    \    count=consonantsCount;\n            while (count >= 0){\n               \
    \ //console.log(\"consonantsCount: \"+consonantsCount);\n                if(consonants.indexOf(word[i])==consonantsCount){\n\
    \                    //console.log(\"consonants.indexOf(\"+word[i]+\"): \"+consonants.indexOf(word[i]));\n\
    \                    result+=vowels[consonantsCount];\n                    break;\n\
    \                }\n                consonantsCount--;\n            }\n      \
    \  }\n    }\n    //console.log(\"result: \"+result);\n    if(result==\"\"){\n\
    \        result=\"U\";\n    }\n    //console.log(\"result: \"+result);\n    return\
    \ result;\n}", "\tvar vowels = ['A','a','E','e','I','i','O','o','U','u'];\n\t\
    var vowels_count = vowels.length;\n\tvar consonants = 'bcdfghjklmnpqrstvwxyz';\n\
    \tvar consonants_count = consonants.length;\n\tvar min_distance = Number.MAX_VALUE;\n\
    \tvar index = -1;\n\tfor (var i = 0; i < consonants_count; i++){\n\t\tvar consonant\
    \ = consonants.charAt(i);\n\t\tvar count = 0;\n\t\tfor (var j = 0; j < vowels_count;\
    \ j++){\n\t\t\tvar vowel = vowels.charAt(j);\n\t\t\tif (word.includes(vowel)){\n\
    \t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > 0 && count < word.length){\n\
    \t\t\tmin_distance = Infinity;\n\t\t\tindex = -1;\n\t\t\tfor (var j = 0; j < word.length;\
    \ j++){\n\t\t\t\tif (word[j] === consonant){\n\t\t\t\t\tvar dist = Math.abs(j-index);\n\
    \t\t\t\t\tif (dist < min_distance){\n\t\t\t\t\t\tmin_distance = dist;\n\t\t\t\t\
    \t\tindex = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn vowels.charAt(index);\n\
    }\n", "    if (word.length===0){\n        return \"\";\n    }\n    \n    let l=word.length;\n\
    \    let vowels = \"aeiouAEIOU\";\n    \n    for (let i=word.length-1;i>=0;i--){\n\
    \        if(vowels.includes(word.charAt(i))){\n            l=i;\n            break;\n\
    \        }\n    }\n    \n    let result=word.substr(0,l);\n    let rIndex=result.lastIndexOf('e')===0;\n\
    \    \n    if (rIndex){\n        result=result.substr(0,result.lastIndexOf('e'));\n\
    \    }\n    \n    if (vowels.includes(result)){\n        return result;\n    }\n\
    \    \n    return \"\";\n}\n", "    //O(n) time and O(1) space\n    let vowels\
    \ = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    \n    let vowel_counter = 0;\n    for(let\
    \ i=0; i < word.length; i++){\n        let vowel = word[i];\n        for(let j=i+1;\
    \ j < word.length; j++){\n            if(vowels[vowel] === word[j]){\n       \
    \         vowel_counter++;\n            }\n        }\n    }\n    \n    let closest_vowel\
    \ = vowels[vowels.length-vowel_counter-1];\n    \n    return closest_vowel;\n\
    }\n", "    let result = ''\n    let vowels = 'aeiouAEIOU'\n    for(let i = word.length\
    \ - 1; i >= 0; i--){\n        let consonant = word.substring(i, i + 1)\n     \
    \   if(consonant in vowels){\n            let vowel_index = word.indexOf(consonant)\n\
    \            if(vowel_index > -1){\n                result = word.substring(0,\
    \ vowel_index)\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n\nget_closest_vowel('ab') // \"a\"\n\nget_closest_vowel('z') // \"\
    \"\n\nget_closest_vowel('ab') // \"\"\n\nget_closest_vowel('z') // \"\"\n\nget_closest_vowel('ab')\
    \ // \"\"\n\nget_closest_vowel('z') // \"\"\n\nget_closest_vowel('ab') // \"a\"\
    \n\nget_closest_vowel('z') // \"\"\n</code>\n<|/ a tags=javascript,string |>\n\
    <| a |>\nThis is a simple solution using slice() and indexOf() methods. The idea\
    \ is to search from the rightmost index and if there exists a vowel then the closest\
    \ vowel is found from the left side else the closest vowel is found from the right.\n\
    \n<code>", "    let result = \"\";\n    let start = 0;\n    let end = word.length-1;\n\
    \    let i = 0;\n    while(start <= end){\n        let index = Math.floor(Math.random()*(end-start+1)+start);\n\
    \        if(word[index] === \"a\" || word[index] === \"e\" || word[index] ===\
    \ \"i\" || word[index] === \"o\" || word[index] === \"u\" || word[index] === \"\
    A\" || word[index] === \"E\" || word[index] === \"I\" || word[index] === \"O\"\
    \ || word[index] === \"U\"){\n            result = word[index];\n        }\n \
    \       start = index+1;\n        end = index-1;\n        i++;\n    }\n    return\
    \ result;\n}\n</cell>\n<text>\nPractice 1\nget_closest_vowel(\"yogurt\")\n\"u\"\
    \nget_closest_vowel(\"FULL\")\n\"U\"\nget_closest_vowel(\"quick\")\n\"\"\nget_closest_vowel(\"\
    ab\")\n\"\"\n\n</text>\n<text>\nProblem 2\nGiven two sets of data: \na. One of\
    \ them contains only positive integers (in some arbitrary order). \nb. Another\
    \ set of data is in the form of a list, where each item in the list represents\
    \ a positive integer and \nthe length of this list is the same as the other set.\
    \ \nFind all the subsets of this list that sum to zero. \nExample: \nInput:\n\
    \ L = [-2, -1, 0, 1, 2]\nOutput:\n [[], [-2, -1], [1, -2], [0, 1], [2], [-1, -2]]\n\
    \n</text>\n<cell>", "  let firstConsonant = word.substring(0, word.length-1);\n\
    \  let secondConsonant = word.substring(word.length-1);\n  if(vowels.indexOf(firstConsonant)\
    \ > -1){\n    firstConsonant = firstConsonant.toLowerCase();\n  }\n  if(vowels.indexOf(secondConsonant)\
    \ > -1){\n    secondConsonant = secondConsonant.toLowerCase();\n  }\n  if(firstConsonant\
    \ === secondConsonant || firstConsonant === \"a\" || firstConsonant === \"i\"\
    \ || firstConsonant === \"u\"){\n    return firstConsonant;\n  }\n  if(secondConsonant\
    \ === \"a\" || secondConsonant === \"i\" || secondConsonant === \"u\"){\n    return\
    \ secondConsonant;\n  }\n  return \"\";\n}\n", "  var vowelsVowel = word.match(/[aeiou]/ig);\n\
    \  var vowelsConson = word.match(/[b-df-hj-np-tv-z]/ig);\n  \n  if(vowelsVowel\
    \ && vowelsConson){\n    var wordVowel = vowelsVowel.join();\n    var wordConson\
    \ = vowelsConson.join();\n    var vowelsVowelIndex = word.indexOf(wordVowel);\n\
    \    var vowelsConsonIndex = word.indexOf(wordConson);\n    \n    if(vowelsVowelIndex\
    \ > -1 && vowelsConsonIndex > -1){\n      var vowelsDistance = vowelsVowelIndex-vowelsConsonIndex;\n\
    \      if(vowelsDistance < 0){\n        vowelsDistance *= -1;\n      }\n     \
    \ return word[vowelsDistance];\n    }\n  }\n  return \"\";\n}\n", "    if(word.length\
    \ < 2){\n        return \"\";\n    }\n\n    //First find the consonants in the\
    \ right side of the word\n    var consonantsIndex = word.lastIndexOf(\"c\");\n\
    \    var consonantsCount = word.substring(consonantsIndex).length - 1; \n    \n\
    \    var vowelsIndex = word.lastIndexOf(\"a\");\n    var vowelsCount = word.substring(vowelsIndex).length\
    \ - 1; \n\n    //Check if the word's length is even\n    if (consonantsCount ==\
    \ 0 && vowelsCount == 0){\n        return word;\n    }\n\n    //If word's length\
    \ is odd then add 1 to vowels count \n    if (consonantsCount == 1 && vowelsCount\
    \ == 0){\n        vowelsCount++;\n    }\n\n    //If word's length is even then\
    \ add 1 to consonants count\n    if (consonantsCount == 0 && vowelsCount == 1){\n\
    \        consonantsCount++;\n    }\n\n    var consonantsWord = word.substring(consonantsIndex,\
    \ consonantsIndex + consonantsCount);\n    var vowelsWord = word.substring(vowelsIndex,\
    \ vowelsIndex + vowelsCount);\n\n    //Check if the word's length are divisible\
    \ by 3\n    if (consonantsCount == 0 && vowelsCount == 0 && consonantsWord.length\
    \ % 3 == 0){\n        return consonantsWord;\n    }\n\n    if (consonantsCount\
    \ == 0 && vowelsCount == 0 && consonantsWord.length % 3 == 1){\n        return\
    \ vowelsWord;\n    }\n\n    if (consonantsCount == 0 && vowelsCount == 0 && consonantsWord.length\
    \ % 3 == 2){\n        return \"\";\n    }\n\n    if (consonantsCount == 0 && vowelsCount\
    \ == 1 && consonantsWord.length % 3 == 0){\n        return consonantsWord;\n \
    \   }\n\n    if (consonantsCount == 0 && vowelsCount == 1 && consonantsWord.length\
    \ % 3 == 1){\n        return vowelsWord;\n    }\n\n    if (consonantsCount ==\
    \ 0 && vowelsCount == 1 && consonantsWord.length % 3 == 2){\n        return \"\
    \";\n    }\n\n    if (consonantsCount == 1 && vowelsCount == 0 && consonantsWord.length\
    \ % 3 == 0){\n        return consonantsWord;\n    }\n\n    if (consonantsCount\
    \ == 1 && vowelsCount == 0 && consonantsWord.length % 3 == 1){\n        return\
    \ vowelsWord;\n    }\n\n    if (consonantsCount == 1 && vowelsCount == 0 && consonantsWord.length\
    \ % 3 == 2){\n        return \"\";\n    }\n\n    if (consonantsCount == 1 && vowelsCount\
    \ == 1 && consonantsWord.length % 3 == ", "    const vowels  = ['a', 'e', 'i',\
    \ 'o', 'u', 'y'];\n    const vowelsL = vowels.map(function(item){\n        return\
    \ item\n    });\n    let index = word.lastIndexOf('y');\n    index -= 1;\n   \
    \ let res = vowelsL.find((item, index) => index > index && item != word.charAt(index));\n\
    \    return res || '';\n}\n", "  let vowel = \"a\", foundVowel = false;\n  for(let\
    \ i = word.length - 1;i>=0;i--){\n    if(word[i] == \"a\"){\n      foundVowel\
    \ = true;\n      vowel = \"a\";\n      break;\n    } else if(word[i] == \"e\"\
    ){\n      foundVowel = true;\n      vowel = \"e\";\n      break;\n    } else if(word[i]\
    \ == \"i\"){\n      foundVowel = true;\n      vowel = \"i\";\n      break;\n \
    \   } else if(word[i] == \"o\"){\n      foundVowel = true;\n      vowel = \"o\"\
    ;\n      break;\n    } else if(word[i] == \"u\"){\n      foundVowel = true;\n\
    \      vowel = \"u\";\n      break;\n    }\n  }\n  if(!foundVowel){\n    return\
    \ \"\";\n  }\n  let consonant = \"bdfghjklmnpqrstvz\", foundConsonant = false;\n\
    \  for(let i = word.length - 1;i>=0;i--){\n    if(word[i] == consonant){\n   \
    \   foundConsonant = true;\n      break;\n    }\n  }\n  if(!foundConsonant){\n\
    \    return \"\";\n  }\n  let consonantVowel = \"bcdfghjklmnpqrstvwxyz\", foundConsonantVowel\
    \ = false;\n  for(let i = word.length - 1;i>=0;i--){\n    if(word[i] == consonantVowel){\n\
    \      foundConsonantVowel = true;\n      break;\n    }\n  }\n  if(!foundConsonantVowel){\n\
    \    return \"\";\n  }\n  let lastVowel = word[word.length-1];\n  if(vowel ==\
    \ word[word.length-1])\n    return vowel;\n  if(vowel == word[word.length-2] &&\
    \ consonant == word[word.length-1])\n    return vowel;\n  if(vowel == word[word.length-2]\
    \ && consonantVowel == word[word.length-1])\n    return vowel;\n  if(vowel ==\
    \ word[word.length-3] && consonant == word[word.length-1] && consonantVowel ==\
    \ word[word.length-2])\n    return vowel;\n  if(vowel == word[word.length-3] &&\
    \ consonantVowel == word[word.length-1] && consonant == word[word.length-2])\n\
    \    return vowel;\n  if(vowel == word[word.length-4] && consonant == word[word.length-1]\
    \ && consonantVowel == word[word.length-3] && consonantVowel == word", "  var\
    \ vowels = word.split(\"\");\n  vowels.forEach(function(vowel){\n    if(vowel\
    \ === \"a\" || vowel === \"A\"){\n      vowels.splice(vowels.indexOf(vowel),1);\n\
    \    }\n  });\n  \n  return vowels.find(function(vowel){\n    return vowel ===\
    \ \"a\" || vowel === \"A\";\n  });\n}", "    \n    let vowels = []\n    let vowels_count\
    \ = countVowel(word)\n    \n    if(vowels_count == 0){\n        return \"\";\n\
    \    }\n    \n    for(i = 0; i < word.length; i++){\n        if(vowels.indexOf(word[i])\
    \ == -1){\n            vowels.push(word[i])\n        }\n    }\n    \n    vowels_count\
    \ = countVowel(word)\n    \n    for(i = 0; i < vowels.length; i++){\n        for(j\
    \ = 0; j < vowels_count ; j++){\n            if(vowels[i] === vowels[j+1]){\n\
    \                return vowels[i];\n            }\n        }\n    }\n    \n  \
    \  return \"\";\n}\n", "  var vowels=['a','e','i','o','u']\n  var consonants=\
    \ ['a','e','i','o','u','A','E','I','O','U'];\n  var vowelsCount=0;\n  var consonantsCount=0;\n\
    \  var i=0;\n  for(i=word.length-1;i>0;i--){\n    if(vowels.indexOf(word[i]) !=\
    \ -1){\n      vowelsCount++;\n    }\n    if(consonants.indexOf(word[i]) != -1){\n\
    \      consonantsCount++;\n    }\n  }\n  if(consonantsCount < vowelsCount){\n\
    \    return \"\";\n  }\n  else if(consonantsCount>vowelsCount){\n    var vowelIndex=vowels.indexOf(word[word.length-1]);\n\
    \    var consonantIndex=consonants.indexOf(word[word.length-2]);\n    if(vowelIndex<consonantIndex){\n\
    \      return word[word.length-1];\n    }\n    else{\n      return word[word.length-2];\n\
    \    }\n  }\n  else{\n    return \"\";\n  }\n}\n", "    let vowel = \"\",\n  \
    \      count = 0,\n        i = 0;\n    while(word.length > 1){\n        if(word[i]==\"\
    a\"||word[i]==\"e\"||word[i]==\"i\"||word[i]==\"o\"||word[i]==\"u\"){\n      \
    \      count++;\n        }\n        else if(word[i]==\"b\"){\n            if(count\
    \ == 0){\n                vowel += \"b\";\n            }\n            else if(count\
    \ > 1){\n                vowel += \"b\";\n            }\n            else{\n \
    \               vowel += word[i];\n            }\n        }\n        else{\n \
    \           vowel += word[i];\n        }\n        i++;\n    }\n    return vowel;\n\
    }", "    word = word.split(\"\");\n    word.reverse();\n    word.pop();\n    word\
    \ = word.concat(word);\n    word = word.concat(word);\n    word.reverse();\n \
    \   let lastConsonant = word.search(/[^b-z]/i); //get the last consonant\n   \
    \ let firstConsonant = lastConsonant;\n    let vowelsCount = 0;\n    for(let i\
    \ = firstConsonant; i > lastConsonant; i--){\n        if(word.charAt(i) == /[aeiou]/i){\n\
    \            vowelsCount++;\n        }\n    }\n    return word.charAt(lastConsonant)\
    \ > 3 ? \"\" : word.charAt(lastConsonant);\n}", "    var vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    for (var i = vowels.length - 1; i >= 0; i--) {\n\
    \        if (vowels.indexOf(word[word.length - i - 1]) > -1) {\n            return\
    \ vowels[i];\n        }\n    }\n    return \"\";\n}\n", "    word = word.toLowerCase();\
    \ //Making the word lower case to avoid case-sensitivity issues\n    vowels =\
    \ [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]; //the\
    \ vowel you seek\n    vowels.sort((a,b)=>a-b); //sort the vowels alphabetically\n\
    \    let consonants = [\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"\
    m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"z\"]; //the consonant\
    \ you seek\n    consonants.sort((a,b)=>a-b); //sort the consonants alphabetically\n\
    \    let vowelIndex = vowels.indexOf(word[word.length-1]); //index of the last\
    \ vowel\n    let consonantIndex = consonants.indexOf(word[word.length-2]); //index\
    \ of the second to last consonant\n    if(vowelIndex != -1){\n        return word[word.length-1];\
    \ //return the last vowel\n    }\n    else if(consonantIndex != -1){\n       \
    \ return word[word.length-2]; //return the second to last consonant\n    }\n}\n\
    </code>\n<|/ a |>\n<| a tags=javascript,arrays dscore=0 |>\n<code>", "    vowels\
    \ = \"aeiou\"\n    pos = word.lastIndexOf(vowels)\n    start = word.length - pos\n\
    \    end = word.length - 1 - pos\n    let consonant = \"bcdfghjklmnpqrstvwxyz\"\
    \n    let final = \"\"\n    for(let i=start; i<=end; i++){\n        for(let j=0;\
    \ j<consonant.length; j++){\n            if(word.slice(i, i+consonant.length)\
    \ == consonant[j]){\n                final = consonant[j]\n            }\n   \
    \     }\n    }\n    return final\n}\n", "    var arr = [];\n    var i = word.length;\n\
    \    for(i = i-1; i>=0; i--){\n        if(word.charAt(i) === \"a\"){\n       \
    \     arr.push(\"a\");\n        } else if(word.charAt(i) === \"e\"){\n       \
    \     arr.push(\"e\");\n        } else if(word.charAt(i) === \"i\"){\n       \
    \     arr.push(\"i\");\n        } else if(word.charAt(i) === \"o\"){\n       \
    \     arr.push(\"o\");\n        } else if(word.charAt(i) === \"u\"){\n       \
    \     arr.push(\"u\");\n        }\n    }\n    return arr[arr.length-1];\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis is just my opinion - this algorithm is very inefficient,\
    \ since `word` contains many many repetitions of vowels. For example, if you have\
    \ \"aba\" your algorithm will loop through it 3 times instead of just once.\n\
    <|/ c |>\n<| c |>\nThis won't work if word contains multiple vowels at the beginning.\
    \ Example: get_closest_vowel(\"eek\")\n<|/ c |>\n<| a |>\nYou can use a hash map\
    \ (Javascript object) to store a vowel in it.\n<code>\nvar vowelMap = {};\nvowelMap['e']=\
    \ 'a';\nvowelMap['o']= 'a';\nvowelMap['u']= 'a';\nvowelMap['i']= 'i';\nvowelMap['a']=\
    \ 'i';\nvowelMap['y']= 'i';\n</code>\nThen you can write something like the following\n\
    <code>", "\tvar l=word.length, s=word.charAt(l-1);\n\tif(l<=1){\n\t\treturn \"\
    \";\n\t}\n\tvar vowels=[\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tif(vowels.indexOf(s)!=-1){\n\
    \t\treturn s;\n\t}\n\tfor(;l>1;l--){\n\t\tvar s=word.charAt(l-1);\n\t\tif(vowels.indexOf(s)!=-1){\n\
    \t\t\treturn s;\n\t\t}\n\t}\n\treturn \"\";\n}\n", "    vowels = [\"a\",\"e\"\
    ,\"i\",\"o\",\"u\"];\n    \n    vowelsCount = {};\n    for(var i = 0; i < vowels.length;\
    \ i++){\n        vowelsCount[vowels[i]] = 1;\n    }\n    \n    for (i = 0; i <\
    \ word.length; i++) {\n        var char = word[i];\n        var index = vowels.indexOf(char);\n\
    \        if(index != -1) {\n            var vowelCount = 0;\n            \n  \
    \          if(index == word.length -1){\n                vowelCount++;\n     \
    \       }\n            \n            for(j = index + 1; j < word.length; j++){\n\
    \                var char2 = word[j];\n                var index = vowels.indexOf(char2);\n\
    \                if(index != -1) {\n                    vowelsCount[char]++;\n\
    \                    vowelsCount[char2]++;\n                    vowelCount++;\n\
    \                }\n            }\n            \n            if(vowelCount > vowelsCount[char]){\n\
    \                return char;\n            }\n            \n        } else {\n\
    \            return \"\";\n        }\n    }\n    \n    return \"\";\n}\n", "\t\
    var str = word.toLowerCase();\n\tvar consonantsArray = [\"b\",\"c\",\"d\",\"f\"\
    ,\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\"\
    ,\"w\",\"x\",\"z\"];\n\tvar vowelsArray = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n\t\
    var vowelsCount = vowelsArray.length;\n\tvar vowelsIndex = 0;\n\tvar consonantsIndex\
    \ = 0;\n\tvar vowelsArrayIndex = 0;\n\tvar consonants = \"\";\n\tvar vowels =\
    \ \"\";\n\t\n\t\n\twhile(vowelsIndex < vowelsCount && consonantsIndex < consonantsArray.length){\n\
    \t\tconsonants = consonantsArray[consonantsIndex];\n\t\tvowels = vowelsArray[vowelsIndex];\n\
    \t\t\n\t\tstr = str.substr(0,str.length-1);\n\t\t\n\t\tif(str.toLowerCase().substr(0,vowelsIndex).indexOf(consonants)\
    \ != -1 && str.toLowerCase().substr(str.length-1,str.length).indexOf(vowels) !=\
    \ -1){\n\t\t\tvowelsIndex++;\n\t\t\t\n\t\t}else{\n\t\t\tvowelsIndex++;\n\t\t\t\
    consonantsIndex++;\n\t\t}\n\t}\n\tif(vowelsIndex == vowelsCount && consonantsIndex\
    \ == consonantsArray.length){\n\t\treturn vowels;\n\t}else{\n\t\treturn \"\";\n\
    \t}\n}", "  if(word.length == 1){\n    return \"\";\n  }\n\n  var first_consonant\
    \ = word[word.length-1];\n  var last_consonant = word[word.length-2];\n\n  if(first_consonant\
    \ == 'a'|| first_consonant == 'e' || first_consonant == 'i' || first_consonant\
    \ == 'o'){\n    return first_consonant;\n  }\n\n  if(last_consonant == 'a'|| last_consonant\
    \ == 'e' || last_consonant == 'i' || last_consonant == 'o'){\n    return last_consonant;\n\
    \  }\n  \n  var vowels = [];\n  for(var i = 0; i<word.length-1; i++){\n    if(word[i]\
    \ == 'a'){\n      vowels.push(\"a\");\n    }else if(word[i] == 'e'){\n      vowels.push(\"\
    e\");\n    }else if(word[i] == 'i'){\n      vowels.push(\"i\");\n    }else if(word[i]\
    \ == 'o'){\n      vowels.push(\"o\");\n    }else if(word[i] == 'u'){\n      vowels.push(\"\
    u\");\n    }\n  }\n\n  var vowel_candidates = vowels.filter(function(vowel){\n\
    \    return vowel == word[word.length-2];\n  });\n\n  var vowel_candidates_count\
    \ = vowel_candidates.length;\n\n  if(vowel_candidates_count == 1){\n    return\
    \ vowel_candidates[0];\n  }\n  else if(vowel_candidates_count > 1){\n    var min\
    \ = Math.min(vowel_candidates.length-2, vowel_candidates_count-1);\n    var max\
    \ = Math.max(word.length-2, vowel_candidates_count-1);\n    var min_index = -1;\n\
    \    var max_index = -1;\n\n    for(var i = 0; i < word.length; i++){\n      if(min\
    \ == -1){\n        if(word[i] == vowel_candidates[0]){\n          min_index =\
    \ i;\n        }\n      }\n      else if(max == word.length){\n        if(word[i]\
    \ == vowel_candidates[vowel_candidates.length-1]){\n          max_index = i;\n\
    \        }\n      }\n      else{\n        if(word[i] == vowel_candidates[min_index]\
    \ && word[i] == vowel_candidates[max_index]){\n          if(i-min_index == max-min){\n\
    \            return vowel_candidates[min_index];\n          }\n          else\
    \ if(i-min_index == min){\n            return vowel_candidates[max_index];\n \
    \         }\n          else{\n            return vowel_candidates[min_index];\n\
    \          }\n        }\n      }\n    }\n  }\n  return \"\";\n}\n", "  let vowels\
    \ = [];\n  for (let i = word.length-1; i >= 0; i--) {\n    let letter = word.charAt(i);\n\
    \    \n    if (letter.toLowerCase() === \"a\" || letter.toLowerCase() === \"e\"\
    \ || letter.toLowerCase() === \"i\" || letter.toLowerCase() === \"o\" || letter.toLowerCase()\
    \ === \"u\"){\n      vowels.push(letter);\n    }\n  }\n\n  let consonants = [];\n\
    \  for (let i = 0; i < word.length; i++) {\n    if (word[i] >= \"a\" && word[i]\
    \ <= \"z\") {\n      consonants.push(word[i]);\n    }\n  }\n\n  let len = vowels.length;\n\
    \  let max = Math.max(consonants.length, len);\n  let closestIndex = -1;\n  for(let\
    \ i = 0; i < len; i++) {\n    let v = vowels[i];\n    let c = consonants[i];\n\
    \    let index = word.indexOf(v);\n    \n    if (index == -1) {\n      continue;\n\
    \    }\n    \n    let curr = word.substring(index+1, index+2);\n    \n    let\
    \ currC = curr.toLowerCase();\n    let currV = curr.toUpperCase();\n    \n   \
    \ let minDiff = Math.abs(c.toLowerCase()-currC);\n    if (minDiff <= Math.abs(v.toLowerCase()-currV))\
    \ {\n      closestIndex = index;\n      break;\n    }\n  }\n  \n  if (closestIndex\
    \ != -1) {\n    return vowels[closestIndex];\n  } else {\n    return \"\";\n \
    \ }\n}\n", "    //write your code here\n    let vowels = [\"\",\"A\",\"E\",\"\
    I\",\"O\",\"U\"]\n    if(word.length<=2){\n        return \"\"\n    }\n    let\
    \ vowel_start = []\n    let vowel_end = []\n    for(let i=0; i<word.length-1;\
    \ i++){\n        if(word.charCodeAt(i) >= 65 && word.charCodeAt(i) <= 90){\n \
    \           vowel_start.push(word.charCodeAt(i))\n        }\n        if(word.charCodeAt(i)\
    \ >= 97 && word.charCodeAt(i) <= 122){\n            vowel_end.push(word.charCodeAt(i))\n\
    \        }\n    }\n    for(let i=0; i<vowel_end.length; i++){\n        if(vowels.includes(word[vowel_end[i]])){\n\
    \            return word[vowel_end[i]]\n        }\n    }\n    for(let i=0; i<vowel_start.length;\
    \ i++){\n        if(vowels.includes(word[vowel_start[i]])){\n            return\
    \ word[vowel_start[i]]\n        }\n    }\n    return \"\"\n}\n", "    // Your\
    \ code goes here\n    let vowelIndexArr = [...new Set(word.match(/[aeiou]+/gi))].map((val)=>word[val-1])\n\
    \    vowelIndexArr.sort((a,b)=>Math.abs(a-b)||a-b)\n    vowelIndexArr.map(val=>word=word.replace(word[val],\"\
    \"))\n    return word\n}\nget_closest_vowel(\"yogurt\")\nget_closest_vowel(\"\
    FULL\")\nget_closest_vowel(\"quick\")\nget_closest_vowel(\"ab\")", "    var vowels\
    \ = \"AEIOUYaeiouy\";\n    var consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdghjklmnpqrstvwxyz\"\
    ;\n    var index = 0;\n    var vowel_word = \"\";\n    var vowel_index;\n\n  \
    \  //Step 1: find the index of vowel in the word\n    for(index = 0; index < word.length;\
    \ index++){\n        if(vowels.indexOf(word[index]) !== -1){\n            vowel_index\
    \ = index;\n            break;\n        }\n    }\n    \n    //Step 2: find the\
    \ index of consonant in the word\n    for(index = word.length - 1; index > 0;\
    \ index--){\n        if(consonants.indexOf(word[index]) !== -1){\n           \
    \ break;\n        }\n    }\n    \n    //Step 3: check vowel index and consonant\
    \ index\n    if(vowel_index > consonants.length - 1 && vowel_index < word.length){\n\
    \        vowel_word = word[vowel_index];\n    }\n    else if(consonants.length\
    \ > vowel_index && consonants.length <= vowel_index + 1 && consonants.indexOf(word[vowel_index\
    \ + 1]) > -1){\n        vowel_word = word[vowel_index + 1];\n    }\n    else if(consonants.length\
    \ > vowel_index + 1 && consonants.length <= vowel_index + 2 && consonants.indexOf(word[vowel_index\
    \ + 1]) > -1 && consonants.indexOf(word[vowel_index + 2]) > -1){\n        vowel_word\
    \ = word[vowel_index + 1];\n    }\n    else if(consonants.length > vowel_index\
    \ + 2 && consonants.length <= vowel_index + 3 && consonants.indexOf(word[vowel_index\
    \ + 1]) > -1 && consonants.indexOf(word[vowel_index + 2]) > -1 && consonants.indexOf(word[vowel_index\
    \ + 3]) > -1){\n        vowel_word = word[vowel_index + 1];\n    }\n    else if(consonants.length\
    \ > vowel_index + 3 && consonants.length <= vowel_index + 4 && consonants.indexOf(word[vowel_index\
    \ + 1]) > -1 && consonants.indexOf(word[vowel_index + 2]) > -1 && consonants.indexOf(word[vowel_index\
    \ + 3]) > -1 && consonants.indexOf(word[vowel_index + 4]) > -1){\n        vowel_word\
    \ = word[vowel_index + 1];\n    }\n    else if(consonants.length > vowel_index\
    \ + 4 && consonants.length <= vowel_index + 5 && consonants.indexOf(word[vowel_index\
    \ + 1]) > -1 && consonants.indexOf(word[vowel_index + 2]) > -1 && consonants.indexOf(word[vowel_index\
    \ + ", "    let vowel = word.split('').slice(-1); //find last letter in string\n\
    \    let startLetter = word.slice(0,-1); //find last letter in word\n    let endLetter\
    \ = word.slice(-1); //find last letter in word\n    let isVowel = false;\n   \
    \ if(vowel.includes(\"u\")) isVowel = true;\n    if(vowel.includes(\"e\")) isVowel\
    \ = true;\n    if(vowel.includes(\"a\")) isVowel = true;\n    if(vowel.includes(\"\
    o\")) isVowel = true;\n    if(vowel.includes(\"u\")) isVowel = true;\n    if(vowel.includes(\"\
    e\")) isVowel = true;\n    if(vowel.includes(\"a\")) isVowel = true;\n    if(vowel.includes(\"\
    o\")) isVowel = true;\n\n    if(!isVowel){\n        if(startLetter.toLowerCase()\
    \ === \"a\" || startLetter.toLowerCase() === \"e\" || startLetter.toLowerCase()\
    \ === \"i\" || startLetter.toLowerCase() === \"o\" || startLetter.toLowerCase()\
    \ === \"u\" || startLetter.toLowerCase() === \"y\"){\n            vowel = startLetter;\n\
    \        }\n        else if(endLetter.toLowerCase() === \"a\" || endLetter.toLowerCase()\
    \ === \"e\" || endLetter.toLowerCase() === \"i\" || endLetter.toLowerCase() ===\
    \ \"o\" || endLetter.toLowerCase() === \"u\" || endLetter.toLowerCase() === \"\
    y\"){\n            vowel = endLetter;\n        }\n    }\n\n    if(vowel.length\
    \ >= 2){ //if length is more than 1\n        return vowel;\n    }\n    return\
    \ \"\";\n}\n", "  let vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n  let consonants\
    \ = [\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"\
    q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\"];\n  let vowels_found = vowels.filter(v\
    \ => word.toLowerCase().startsWith(v));\n  let consonants_found = consonants.filter(c\
    \ => word.toLowerCase().endsWith(c));\n  let min = Math.min(vowels_found.length,\
    \ consonants_found.length);\n  let index = 0;\n  while (vowels_found.length &&\
    \ consonants_found.length && index < min){\n    let vow = vowels_found[index];\n\
    \    let cons = consonants_found[index];\n    if (word.toLowerCase().indexOf(vow,(vowels_found.length-2))\
    \ !== -1 || word.toLowerCase().indexOf(cons,(consonants_found.length-2))  !==\
    \ -1){\n      return vow;\n    }\n    index++;\n  }\n  return \"\";\n}\n", " \
    \ var vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  if(word.indexOf('a') > word.indexOf('e')\
    \ && word.indexOf('a') > word.indexOf('i') && word.indexOf('a') > word.indexOf('o')\
    \ && word.indexOf('a') > word.indexOf('u')){\n      return vowel[0];\n  }else\
    \ if(word.indexOf('e') > word.indexOf('a') && word.indexOf('e') > word.indexOf('i')\
    \ && word.indexOf('e') > word.indexOf('o') && word.indexOf('e') > word.indexOf('u')){\n\
    \      return vowel[1];\n  }else if(word.indexOf('i') > word.indexOf('a') && word.indexOf('i')\
    \ > word.indexOf('e') && word.indexOf('i') > word.indexOf('o') && word.indexOf('i')\
    \ > word.indexOf('u')){\n      return vowel[2];\n  }else if(word.indexOf('o')\
    \ > word.indexOf('a') && word.indexOf('o') > word.indexOf('e') && word.indexOf('o')\
    \ > word.indexOf('i') && word.indexOf('o') > word.indexOf('u')){\n      return\
    \ vowel[3];\n  }else if(word.indexOf('u') > word.indexOf('a') && word.indexOf('u')\
    \ > word.indexOf('e') && word.indexOf('u') > word.indexOf('i') && word.indexOf('u')\
    \ > word.indexOf('o')){\n      return vowel[4];\n  }\n}\n", "\t\n\tif(word.length\
    \ == 0){\n\t\treturn \"\";\n\t}\n\t\n\tvar firstLetter = word.substr(-1);\n\t\
    if(firstLetter === firstLetter.toLowerCase()){\n\t\treturn firstLetter.toUpperCase();\n\
    \t}\n\t\n\tvar lastLetter = word.substr(0, word.length - 1);\n\tif(lastLetter\
    \ === lastLetter.toLowerCase()){\n\t\treturn lastLetter.toUpperCase();\n\t}\n\t\
    \n\tvar lastTwoLetters = word.substr(-2, 2);\n\tif(lastTwoLetters === \"a\" ||\
    \ lastTwoLetters === \"e\" || lastTwoLetters === \"i\" || lastTwoLetters === \"\
    o\" || lastTwoLetters === \"u\" || lastTwoLetters === \"y\"){\n\t\treturn lastTwoLetters.toUpperCase();\n\
    \t}\n\t\n\treturn \"\";\n}", "    if(word===\"\"){\n        return \"\";\n   \
    \ }\n    let vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let index = vowel.findIndex(item\
    \ => word.substr(-item.length) === item);\n    if(index===-1){\n        return\
    \ \"\";\n    }\n    let result = vowel.slice(index).pop();\n    return result;\n\
    }\n</code>\n<|/ a tags=javascript |>\n<| c |>\nThanks , is there any better way\
    \ than this ?\n<|/ c |>\n<| c |>\nI think this solution works in most of the cases.\
    \ But i just want to add one more case. if the word is `haystack-stack` , in this\
    \ case it should return `a`\n<|/ c |>\n<| c |>\nThanks, I have made a change.\
    \ Hope that helps you.\n<|/ c |>\n<| c |>\nThanks, this looks better. \nJust wanted\
    \ to know if we have another solution than this which would work even if input\
    \ is `haystack-stack` ?\n<|/ c |>\n<| c |>\nI have edited the answer to handle\
    \ all possible cases. Hope that helps you now.\n<|/ c |>\n<| a tags=javascript\
    \ dscore=2 |>\n<code>", "  if(word.includes(\"a\")) return get_closest_vowel_a();\n\
    \  if(word.includes(\"o\")) return get_closest_vowel_o();\n  if(word.includes(\"\
    e\")) return get_closest_vowel_e();\n  if(word.includes(\"i\")) return get_closest_vowel_i();\n\
    \  if(word.includes(\"u\")) return get_closest_vowel_u();\n  return \"\";\n}\n",
  "    var vowels = 'AEIOUaeiou';\n    var vowel_index = vowels.indexOf(word.substr(word.length\
    \ - 1).match(/[AEIOUaeiou]+$/)[0]);\n    if (vowel_index !== -1)\n        return\
    \ vowels[vowel_index];\n    return \"\";\n}\n", "    let arr = new Array('u',\
    \ 'a', 'e', 'i', 'o', 'u');\n    let new_arr = new Array();\n    let first_vowel_index\
    \ = null;\n    let last_vowel_index = null;\n    let vowel_count = 0;\n    for(let\
    \ i = 0; i < word.length; i++){\n        if(arr[i] === word[i]) vowel_count +=\
    \ 1;\n        if(vowel_count > 1){\n            first_vowel_index = i;\n     \
    \       break;\n        }\n    }\n    for(let i = word.length - 1; i >= 0; i--){\n\
    \        if(arr[i] === word[i]) vowel_count += 1;\n        if(vowel_count > 1){\n\
    \            last_vowel_index = i;\n            break;\n        }\n    }\n   \
    \ if(last_vowel_index + 1 == word.length){\n        let temp1 = word[first_vowel_index];\n\
    \        let temp2 = word[last_vowel_index];\n        new_arr.push(temp1);\n \
    \       new_arr.push(temp2);\n        let new_word = new_arr.join('');\n     \
    \   return new_word;\n    }\n    else if(first_vowel_index + 1 == word.length){\n\
    \        let temp1 = word[last_vowel_index];\n        let temp2 = word[first_vowel_index];\n\
    \        new_arr.push(temp1);\n        new_arr.push(temp2);\n        let new_word\
    \ = new_arr.join('');\n        return new_word;\n    }\n    else{\n        let\
    \ temp1 = word[first_vowel_index + 1];\n        let temp2 = word[last_vowel_index];\n\
    \        new_arr.push(temp1);\n        new_arr.push(temp2);\n        let new_word\
    \ = new_arr.join('');\n        return new_word;\n    }\n}", "  let arrWord = word.split(\"\
    \");\n  let arrVowel = [...new Set(\"aeiouAEIOU\")];\n  let index = 0;\n  for(let\
    \ i = word.length; i > 0; i--){\n    let sub = word.substr(i, i+1);\n    if(arrVowel.includes(sub))\n\
    \      return sub;\n  }\n  return \"\";\n}\n", "    let vowels
  "  return getVowels(word).find(v => getVowels(word).indexOf(v) > (getVowels(word).length\
    \ - 1));\n}\n", "    let vowels = 'aeiouAEIOU';\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n\
    \    let reversedWord = word.split('').reverse().join('');\n    let letters =\
    \ '';\n    \n    for(let i=0; i<word.length; i++){\n        if(vowels.includes(word[i])\
    \ && consonants.includes(reversedWord[i])){\n            letters += word[i];\n\
    \        }\n    }\n    return letters;\n}\n</cell>\n<text>\nProblem 8 - Count\
    \ Words in an Array\nNow that you know how to find all words within a certain\
    \ length from a given array. \nYou will now implement a function that counts all\
    \ words in a given array.\n\nThe function should take an array as an input parameter\
    \ \nand return an array with all the word counts in the input array.\nExample:\n\
    >>> count_words_within_leng(\n    ['Hello', 'are', 'the', 'world', 'Hello']\n\
    ) -> [\n     ['world', 2], ['Hello', 3],\n]\nHints:\nYou will need to use an array\
    \ to store the word counts in the following manner:\n[\n    [word, count], ...\n\
    ]\nYou may assume the input array contains only lowercase English letters.\n\n\
    </text>\n<cell>", "\tlet vowels = 'aeiouAEIOU';\n\tlet consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n\
    \tlet vowel_flag = 0;\n\tlet consonant_flag = 0;\n\tlet flag = 0;\n\tlet vowel_index;\n\
    \tlet consonant_index;\n\tlet found_flag = 0;\n\tlet closest_vowel = '';\n\tlet\
    \ closest = vowels;\n\n\tfor (let i = 0; i < word.length; i++){\n\t\tif (vowels.includes(word[i])){\n\
    \t\t\tvowel_flag = 1;\n\t\t}\n\t\telse if (!consonants.includes(word[i])){\n\t\
    \t\tconsonant_flag = 1;\n\t\t}\n\n\t\tif (vowel_flag && consonant_flag){\n\t\t\
    \tfound_flag = 1;\n\t\t\tvowel_index = i;\n\t\t\tconsonant_index = i;\n\t\t\t\
    flag = 1;\n\t\t}\n\n\t\tif (flag){\n\t\t\tif (vowel_index > consonant_index){\n\
    \t\t\t\tclosest_vowel = closest;\n\t\t\t\tvowel_flag = 0;\n\t\t\t\tconsonant_flag\
    \ = 0;\n\t\t\t\tfound_flag = 0;\n\t\t\t\tflag = 0;\n\t\t\t}\n\t\t\telse if (vowel_index\
    \ < consonant_index){\n\t\t\t\tvowel_flag = 0;\n\t\t\t\tconsonant_flag = 0;\n\t\
    \t\t\tfound_flag = 0;\n\t\t\t\tflag = 0;\n\t\t\t}\n\t\t\telse if (vowel_index\
    \ == consonant_index){\n\t\t\t\tvowel_flag = 0;\n\t\t\t\tconsonant_flag = 0;\n\
    \t\t\t\tfound_flag = 0;\n\t\t\t\tflag = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (found_flag){\n\
    \t\treturn closest_vowel;\n\t}\n\treturn '';\n}\n", "  var vowels = ['a','e','i','o','u'];\n\
    \  if(vowels.indexOf(word[word.length - 1]) == -1) word[word.length - 1] = vowels[word.length\
    \ - 1];\n  \n  if(vowels.indexOf(word[word.length - 2]) == -1) word[word.length\
    \ - 2] = vowels[word.length - 2];\n  \n  var consonants = [];\n  for(var i = 0;\
    \ i < word.length; i++){\n    if(vowels.indexOf(word[i]) == -1){\n      consonants.push(word[i]);\n\
    \    }\n  }\n  consonants.reverse();\n  var closest = \"\";\n  \n  for(var j =\
    \ 0; j < consonants.length; j++){\n    if(word[word.length - 1] == consonants[j]\
    \ && word[word.length - 2] == consonants[j+1]){\n      closest = consonants[j];\n\
    \    }\n  }\n  \n  if(closest.length == 0) return \"\";\n  return closest;\n}\n",
  "    let vowels = \n        [...word]\n        .map((letter)=>{\n            switch\
    \ (letter){\n                case \"a\": case \"e\": case \"i\": case \"o\": case\
    \ \"u\": return letter;\n                default: return \"\";\n            }\n\
    \        })\n        .filter((letter) => letter !== \"\");\n\n    let vowels_right\
    \ = vowels.reverse();\n\n    return vowels_right.indexOf(\"a\") === vowels_right.indexOf(\"\
    A\") ? \"a\" : vowels_right.indexOf(\"e\") === vowels_right.indexOf(\"E\") ? \"\
    e\" : vowels_right.indexOf(\"i\") === vowels_right.indexOf(\"I\") ? \"i\" : vowels_right.indexOf(\"\
    o\") === vowels_right.indexOf(\"O\") ? \"o\" : vowels_right.indexOf(\"u\") ===\
    \ vowels_right.indexOf(\"U\") ? \"u\" : \"\";\n}\n", "    let vowels = ['a','e','i','o','u'];\n\
    \    for (let i = vowels.length-1; i>=0; i--){\n        if (word.includes(vowels[i])){\n\
    \            return vowels[i];\n        }\n    }\n    return \"\";\n}\n", "  let\
    \ vowels = /[aeiou]*/g\n  let str = word.substring(0,word.length-1)\n  if(str.match(vowels)!=null)\
    \ return word[0]\n  if(!str.match(/[bcdfghjklmnpqrstvwxyz]+/)) return \"\"\n \
    \ let v1 = str.match(/[bcdfghjklmnpqrstvwxyz]+/)[0]\n  let v2 = str.match(/[aeiou]+/)[0]\n\
    \  return v1[v1.length<v2.length?-1:0].trim()\n}\n", "\tvar vowels=[];\n\tvar\
    \ cons=[];\n\tvar index=-1;\n\tvar vowel=null;\n\tvar consonant=\"aieouy\";\n\t\
    for(var i=0;i<word.length;i++){\n\t\tif(vowels.indexOf(word[i])==-1){\n\t\t\t\
    if(consonant.indexOf(word[i])>-1){\n\t\t\t\tindex=i;\n\t\t\t}\n\t\t\telse{\n\t\
    \t\t\tvowels.push(word[i]);\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tvowel=word[i];\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\tif(index<=0){\n\t\treturn \"\";\n\t}\n\tfor(var i=index+1;i<word.length;i++){\n\
    \t\tif(vowels.indexOf(word[i])==-1){\n\t\t\tif(consonant.indexOf(word[i])>-1){\n\
    \t\t\t\tindex=i;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tvowels.push(word[i]);\n\t\t\t\
    }\n\t\t}\n\t\telse{\n\t\t\tvowel=word[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(index<=0){\n\
    \t\treturn \"\";\n\t}\n\tfor(var i=index+1;i<word.length;i++){\n\t\tif(vowels.indexOf(word[i])==-1){\n\
    \t\t\tcons.push(word[i]);\n\t\t}\n\t\telse{\n\t\t\tcon=word[i];\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\twhile(index>=0){\n\t\tindex=word.indexOf(vowel,index+1);\n\t\tif(index<0){\n\
    \t\t\tindex=word.indexOf(con,index+1);\n\t\t}\n\t\tif(index<0){\n\t\t\tbreak;\n\
    \t\t}\n\t\telse{\n\t\t\tword=word.substr(0,index-1);\n\t\t\tindex=-1;\n\t\t}\n\
    \t}\n\treturn vowel;\n}\n", "    let vowel = \"a\";\n    let vowels = [];\n  \
    \  let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    for (let i = word.length -\
    \ 1; i >= 0; i--) {\n        let char = word[i];\n        if (vowels.includes(char))\
    \ {\n            return char;\n        }\n        if (consonants.includes(char))\
    \ {\n            vowels.push(char);\n        }\n    }\n    return \"\";\n}\nget_closest_vowel(\"\
    yogurt\")\nget_closest_vowel(\"FULL\")\nget_closest_vowel(\"quick\")\nget_closest_vowel(\"\
    ab\")\nget_closest_vowel(\"abc\")\nget_closest_vowel(\"zgurt\")\nget_closest_vowel(\"\
    u\")\nget_closest_vowel(\"abcdefghijklmnopqrstuvwxyz\")\nget_closest_vowel(\"\
    u\")\nget_closest_vowel(\"zgurt\")\nget_closest_vowel(\"ab\")\nget_closest_vowel(\"\
    abcdefghijklmnopqrstuvwxyz\")\nget_closest_vowel(\"u\")\nget_closest_vowel(\"\
    zgurt\")\nget_closest_vowel(\"ab\")\nget_closest_vowel(\"abcdefghijklmnopqrstuvwxyz\"\
    )\nget_closest_vowel(\"u\")\nget_closest_vowel(\"zgurt\")\nget_closest_vowel(\"\
    ab\")\nget_closest_vowel(\"abcdefghijklmnopqrstuvwxyz\")\nget_closest_vowel(\"\
    u\")\nget_closest_vowel(\"zgurt\")\nget_closest_vowel(\"ab\")\nget_closest_vowel(\"\
    abcdefghijklmnopqrstuvwxyz\")\nget_closest_vowel(\"u\")\nget_closest_vowel(\"\
    zgurt\")\nget_closest_vowel(\"ab\")\nget_closest_vowel(\"abcdefghijklmnopqrstuvwxyz\"\
    )\nget_closest_vowel(\"u\")\nget_closest_vowel(\"zgurt\")\nget_closest_vowel(\"\
    ab\")\nget_closest_vowel(\"abcdefghijklmnopqrstuvwxyz\")\nget_closest_vowel(\"\
    u\")\nget_closest_vowel(\"zgurt\")\nget_closest_vowel(\"ab\")\nget_closest_vowel(\"\
    abcdefghijklmnopqrstuvwxyz\")\nget_closest_vowel(\"u\")\nget_closest_vowel(\"\
    zgurt\")\nget_closest_vowel(\"ab\")\nget_closest_vowel(\"abcdefghijklmnopqrstuvwxyz\"\
    )\nget_closest_vowel(\"u\")\nget_closest_vowel(\"zgurt\")\nget_closest_vowel(\"\
    ab\")\nget_closest_vowel(\"", "  var vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n\
    \  var word_len = word.length;\n  var vowel_len = vowels.length;\n  var result\
    \ = [];\n  var start_index = 0;\n  if(word_len === 0){\n    return \"\";\n  }\n\
    \  var word_array = word.split(\"\");\n  for(var i = 1; i < word_len; i++){\n\
    \    if(vowels.indexOf(word_array[word_len-i-1]) > -1){\n      result.push(word_array[word_len-i-1]);\n\
    \      start_index = i;\n    }\n  }\n  if(start_index > 0){\n    result = result.join(\"\
    \");\n  }\n  var consonant_array = word.split(\"\");\n  for(var i = start_index;\
    \ i < word_len; i++){\n    if(vowels.indexOf(consonant_array[i]) > -1){\n    \
    \  result.push(consonant_array[i]);\n    }\n  }\n  var last_index = consonant_array.length;\n\
    \  if(vowels.indexOf(consonant_array[last_index-1]) > -1){\n    result.push(consonant_array[last_index-1]);\n\
    \  }\n  return result.join(\"\");\n}", "    if(word.length<2) return \"\";\n \
    \   let vowels=['a', 'e', 'i', 'o', 'u'];\n    return vowels.find(vowel=>word.includes(vowel))\n\
    }\n", "    word = word.toLowerCase();\n    var vowels = \"aeiouy\";\n    var vowel_index\
    \ = -1;\n    var consonants = \"bcdfghjklmnpqrstvwxyz\";\n    var consonant_index\
    \ = 0;\n    for(let i=0; i<word.length; i++){\n        if(word[i] == consonants[consonant_index]){\n\
    \            consonant_index++;\n            if(consonant_index == consonants.length){\n\
    \                consonant_index = 0;\n            }\n        } else if(word[i]\
    \ == vowels[vowel_index]){\n            vowel_index++;\n            if(vowel_index\
    \ == vowels.length){\n                vowel_index = 0;\n            }\n      \
    \  }\n    }\n    if(vowel_index == -1 || consonant_index == word.length){\n  \
    \      return \"\";\n    }\n    var consonant_start = word.length - consonant_index;\n\
    \    var consonant_end = word.length - consonant_index;\n    var vowel_start =\
    \ vowel_index;\n    var vowel_end = vowel_index;\n    while(consonant_start <\
    \ word.length && consonants[consonant_start] == word[consonant_end]){\n      \
    \  consonant_end--;\n    }\n    while(vowel_start < word.length && vowels[vowel_start]\
    \ == word[vowel_end]){\n        vowel_end--;\n    }\n    if(vowel_end < word.length){\n\
    \        return word[vowel_start];\n    }\n    return \"\";\n}\n", "    var vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    var consonants = ['b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \    var count = 0;\n    var index = 0;\n    while(index < word.length){\n   \
    \     if(word.substring(index, index+1).indexOf(consonants[count]) > -1){\n  \
    \          if(count == 0){\n                index++;\n                count =\
    \ 0;\n            }\n            count++;\n        }else{\n            if(index\
    \ > 0 && count == 0){\n                index--;\n                count = 1;\n\
    \            }\n        }\n        if(count == 5){\n            index--;\n   \
    \         count = 0;\n        }\n    }\n    return word.substring(index, index+1);\n\
    }\n", "    //The function should return the closest vowel. \n    let arr=[];\n\
    \    let strArr=word.split(\"\");\n    for(let i=0; i<strArr.length; i++){\n \
    \       let char=strArr[i];\n        if(char===\"a\" || char===\"e\" || char===\"\
    i\" || char===\"o\" || char===\"u\"){\n            arr.push(strArr[i]);\n    \
    \    }\n    }\n    let last=arr[arr.length-1];\n    let first=arr[0];\n    let\
    \ count=0;\n    for(let i=last; i<=first; i++){\n        if(strArr.includes(i)){\n\
    \            count+=1;\n        }\n    }\n    if(count===0){\n        return \"\
    \";\n    }\n    for(let i=last; i>=first; i--){\n        if(strArr.includes(i)){\n\
    \            count-=1;\n        }\n    }\n    if(count<=0){\n        return \"\
    \";\n    }\n    return arr[arr.length-1];\n}", "  let vowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n  \n  if(word.length < 2){\n    return \"\"\n  }\n  \n  let i = vowels.indexOf(word[word.length-1])\n\
    \  \n  if(i === -1){\n    return \"\"\n  }\n  \n  let j =word.length - 2 \n  \n\
    \  while(i + 1 < j){\n    if(word[i+1] === word[j+1]){\n      i++;\n      j--\n\
    \    }else{\n      if(word[i] === word[j]){\n        i++\n        j--\n      }else{\n\
    \        if((i+1) === j){\n          if(word[i] === word[j]){\n            return\
    \ word[i]\n          }\n          else{\n            return \"\"\n          }\n\
    \        }\n      }\n    }\n  }\n  \n  return \"\"\n}\n", "   word = word.toUpperCase();\n\
    \   word = word.replace(/[^A-Z]/g,'');\n   for(let i=word.length-1;i>=0;i--){\n\
    \       if(word[i]==\"A\" || word[i]==\"E\" || word[i]==\"I\" || word[i]==\"O\"\
    \ || word[i]==\"U\")\n           return word[i];\n   }\n   return '';\n}\n</cell>\n\
    <cell>\nget_closest_vowel(\"yogurt\")\n</cell>\n<cell>\nget_closest_vowel(\"ab\"\
    )\n</cell>\n<cell>\nget_closest_vowel(\"quick\")\n</cell>\n<cell>\nget_closest_vowel(\"\
    FULL\")\n</cell>\n<cell>\nget_closest_vowel(\"aa\")\n</cell>\n<text>\nFind Vowel\
    \ in the String\nGiven a string, find the vowel using recursion. Vowels in the\
    \ beginning and ending doesn't count. Return empty string if you didn't  find\
    \ any vowel met the above condition. \nYou may assume that the given string contains\
    \ English letter only.\nExample:\n>>> get_vowel(\"yogurt\")\n\"u\"\n>>> get_vowel(\"\
    FULL\")\n\"U\"\n>>> get_vowel(\"quick\")\n\"\"\n>>> get_vowel(\"ab\")\n\"\"\n\
    >>> get_vowel(\"aa\")\n\"a\"\n\n</text>\n<cell>\ndef get_vowel(word){\n   word\
    \ = word.toUpperCase();\n   word = word.replace(/[^A-Z]/g,'');\n   for(let i=word.length-1;i>=0;i--){\n\
    \       if(word[i]==\"A\" || word[i]==\"E\" || word[i]==\"I\" || word[i]==\"O\"\
    \ || word[i]==\"U\")\n           return word[i];\n   }\n   return '';\n}\n</cell>\n\
    <cell>\nget_vowel(\"yogurt\")\n</cell>\n<cell>\nget_vowel(\"ab\")\n</cell>\n<cell>\n\
    get_vowel(\"quick\")\n</cell>\n<cell>\nget_vowel(\"FULL\")\n</cell>\n<cell>\n\
    get_vowel(\"aa\")\n</cell>\n<text>\nFind the Vowel Pair in the String\nGiven a\
    \ string, find the vowel pairs met in the given string using recursion. Vowel\
    \ Pairs in the beginning and ending doesn't count. Return empty string if you\
    \ didn't  find any vowel met the above condition. You may assume that the given\
    \ string contains English letter only.\nExample:\n>>> get_vowel_pair(\"yogurt\"\
    )\n[\"u\", \"y\"]\n>>> ", "    let vowels = ['a','e','i','o','u'];\n    let consonants\
    \ = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z'];\n\
    \    let words = word.toLowerCase().split(\"\");\n    let startIndex = words.length-1;\n\
    \    let endIndex = words.length-1;\n    while(startIndex >= 0){\n        let\
    \ startWord = words[startIndex];\n        if(startWord.includes('a')){\n     \
    \       startIndex = startIndex-1;\n            continue;\n        }\n       \
    \ if(startWord.includes('e')){\n            startIndex = startIndex-1;\n     \
    \       continue;\n        }\n        if(startWord.includes('i')){\n         \
    \   startIndex = startIndex-1;\n            continue;\n        }\n        if(startWord.includes('o')){\n\
    \            startIndex = startIndex-1;\n            continue;\n        }\n  \
    \      if(startWord.includes('u')){\n            startIndex = startIndex-1;\n\
    \            continue;\n        }\n        if(startWord.includes('y')){\n    \
    \        startIndex = startIndex-1;\n            continue;\n        }\n      \
    \  if(startWord.includes('d')){\n            startIndex = startIndex-1;\n    \
    \        continue;\n        }\n        if(startWord.includes('l')){\n        \
    \    startIndex = startIndex-1;\n            continue;\n        }\n        if(startWord.includes('s')){\n\
    \            startIndex = startIndex-1;\n            continue;\n        }\n  \
    \      if(startWord.includes('h')){\n            startIndex = startIndex-1;\n\
    \            continue;\n        }\n        if(startWord.includes('t')){\n    \
    \        startIndex = startIndex-1;\n            continue;\n        }\n      \
    \  if(startWord.includes('s')){\n            startIndex = startIndex-1;\n    \
    \        continue;\n        }\n        if(startWord.includes('a')){\n        \
    \    startIndex = startIndex-1;\n            continue;\n        }\n        if(startWord.includes('m')){\n\
    \            startIndex = startIndex-1;\n            continue;\n        }\n  \
    \      if(startWord.includes('s')){\n            startIndex = startIndex-1;\n\
    \            continue;\n        }\n        if(startWord.includes('z')){\n    \
    \        startIndex = startIndex-1;\n            continue;\n        }\n      \
    \  if(startWord.includes('t')){\n            startIndex = startIndex-1;\n    \
    \        continue;\n        }\n        if(startWord.includes('y')){\n        \
    \    startIndex = startIndex-1;\n            continue;\n        }\n        if(startWord.includes('a')){\n\
    \            startIndex = startIndex-1;\n            continue;\n        }\n  \
    \      if(startWord.includes('o')){\n            startIndex = startIndex-1;\n\
    \            continue", "   //Step 1: Get the last two consonants including one\
    \ vowel each\n   //Step 2: Loop through vowel array and check if the word contains\
    \ vowel\n   let consonants = getLastTwoConsonants(word);\n   let vowels = getVowels(consonants);\n\
    \   //Step 3: Loop through word's letter and get the closest vowel\n   for(let\
    \ i=word.length-1;i>=0;i--){\n      //Step 4: If this letter contains a vowel\n\
    \      if(vowels.includes(word.charAt(i))){\n         //Step 5: Check if the letter\
    \ right of the vowel is consonant\n         let nextLetter = word.charAt(i+1);\n\
    \         //Step 6: Check whether the next letter is consonant\n         if(nextLetter\
    \ === consonants.charAt(0)){\n            //Step 7: Check if current letter is\
    \ vowel\n            if(vowels.includes(word.charAt(i))){\n               return\
    \ word.charAt(i);\n            }\n         }\n      }\n   }\n   return \"\";\n\
    }\n", "  let arr = new Array('u','i','o','a');\n  let len = word.length;\n  let\
    \ vowel = arr[len-1];\n  let arr1 = new Array('u','i','o','a');\n  let len1 =\
    \ word.length;\n  let arr2 = new Array('u','i','o','a');\n  let len2 = word.length;\n\
    \  for (let i = len-1; i > 0; i--){\n    for (let j = len1-1; j > 0; j--){\n \
    \     for (let k = len2-1; k > 0; k--){\n        if (vowel === arr1[j-1] && vowel\
    \ === arr2[k-1]){\n          if (word.charAt(i) === vowel){\n            vowel\
    \ = arr[j-1];\n            len1 = j;\n            arr2 = k;\n            len2\
    \ = k;\n          }\n        }\n      }\n    }\n  }\n  return vowel;\n}\n", " \
    \   let vowels = Array(\"aeiouAEIOU\");\n    let vowel_found = false;\n    let\
    \ letters = word.split('');\n    letters.reverse();\n    letters.forEach(letter\
    \ => {\n        if (vowels.some(vowel => {\n            if (vowel.search(letter)\
    \ > -1) {\n                vowel_found = true;\n            }\n        })) {\n\
    \            return;\n        }\n    });\n    return vowel_found ? vowels.find(vowel\
    \ => vowel.search(letters) > -1) : '';\n}", "    var vowel = [\"a\",\"e\",\"i\"\
    ,\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"];\n    var result = \"\";\n    for(var\
    \ i = 0; i < word.length; i++){\n      if(vowel.indexOf(word.charAt(i)) > -1){\n\
    \        result = word.charAt(i);\n      }\n    }\n    if(result == \"\"){\n \
    \     result = word.charAt(0);\n    }\n    return result;\n}\n", "\tvar vowels=\"\
    AEIOUaeiou\";\n\tif(!vowels.includes(word.charAt(word.length-1))){\n\t\treturn\
    \ word;\n\t}\n\tlet lastConsonant=word.charAt(word.length-1);\n\tlet i=word.length-2;\n\
    \twhile(i>=0 && vowels.includes(word.charAt(i))){\n\t\ti--;\n\t}\n\tif(i===-1\
    \ || word.charAt(i)!==lastConsonant){\n\t\treturn word;\n\t}\n\tlet lastVowel=word.charAt(i);\n\
    \twhile(i>=0 && !vowels.includes(word.charAt(i))){\n\t\ti--;\n\t}\n\treturn lastVowel;\n\
    }", "    \n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    for(var i=word.length-1;\
    \ i>=0; i--){\n        if(vowels.indexOf(word.charAt(i)) >= 0){\n            break;\n\
    \        }\n    }\n    \n    if(vowels.indexOf(word.charAt(i)) >= 0){\n      \
    \  return word.charAt(i);\n    }\n    \n    return \"\";\n}\n", "    var vowels_right\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    var consonants = ['b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \    var vowels_left = vowels_right.concat(consonants);\n    var index = 0;\n\
    \    while(word.length > 0){\n        if(vowels_right.indexOf(word[index]) !==\
    \ -1){\n            return word[index];\n        }\n        index++;\n    }\n\
    }\n", "    word = word.toUpperCase();\n    var vowels = \"aeiouAEIOU\".split(\"\
    \");\n    for(var i=0; i<word.length-1; i++){\n        var c = word.charAt(i);\n\
    \        if(vowels.indexOf(c) > -1){\n            if(c != word.charAt(i+1)){\n\
    \                return c;\n            }\n        }\n    }\n    return \"\";\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nWhat about `get_closest_vowel(\"HellO\"\
    )`?\n<|/ c |>\n<| c |>\nAs I mentioned in my post, the condition of finding the\
    \ closest vowel to the right doesn't care about the vowels at the beginning or\
    \ at the end. Also, I already mentioned that it shouldn't return \"O\", but it\
    \ should be an empty string instead.\n<|/ c |>\n<| c |>\nIt should return \"\"\
    \ because \"Hell\" has only two vowels.\n<|/ c |>\n<| c |>\nI misunderstood you.\
    \ My apologies.\n<|/ c |>\n<| a tags=javascript |>\nYou could check the consonants\
    \ first. Then check a vowel after that.\n\n<code>", "    var letters = word.split('');\n\
    \    var vowels = ['A','a','E','e','I','i','O','o','U','u'];\n    var len = letters.length;\n\
    \    var index = [];\n    var vowelIndex = [];\n    for(var i=0;i<len;i++){\n\
    \        for(var j=1;j<len-i;j++){\n            if(letters[i+j] in vowels){\n\
    \                vowelIndex.push(j);\n            }\n        }\n        if(vowelIndex.length>0){\n\
    \            index.push(i);\n        }\n        vowelIndex = [];\n    }\n    if(index.length==0){\n\
    \        return \"\";\n    }\n    return letters[index[0]] in vowels? \"u\":\"\
    U\";\n}\n\nvar strTest = \"abcdefgabvcd\";\nvar strTest2 = \"bcdabcd\";", "\t\
    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tvar index = 0;\n\tvar len\
    \ = word.length;\n\twhile(index < len){\n\t\tvar startVowel = word.indexOf(\"\
    a\" + vowels[index]);\n\t\tif(startVowel >= 0){\n\t\t\tvar endVowel = word.indexOf(\"\
    z\" + vowels[index], startVowel);\n\t\t\tif(endVowel == -1){\n\t\t\t\tendVowel\
    \ = word.length;\n\t\t\t}\n\t\t\tvar nextVowel = word.indexOf(\"a\" + vowels[index\
    \ + 1], endVowel);\n\t\t\twhile(nextVowel == -1 && index < len - 2){\n\t\t\t\t\
    index = index + 1;\n\t\t\t\tnextVowel = word.indexOf(\"a\" + vowels[index], endVowel);\n\
    \t\t\t}\n\t\t\tif(nextVowel >= 0){\n\t\t\t\treturn word.substring(startVowel,\
    \ endVowel + 1);\n\t\t\t}\n\t\t}\n\t\tindex = index + 1;\n\t}\n\treturn \"\";\n\
    }", "    var vowel = \" aeiou\";\n    for(var i = 0; i < word.length; i++){\n\
    \        var letter = word[i];\n        if(vowel.indexOf(letter) !== -1){\n  \
    \          if(letter === letter.toLowerCase()){\n                word = word.slice(0,\
    \ i);\n                break;\n            }\n        }\n    }\n    return word;\n\
    }\n", "    let vowels = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let vowelsArr = vowels.split(\"\");\n    let consonantsArr = consonants.split(\"\
    \");\n    \n    let vowelPositions = \"\";\n    for(let i = 0; i < word.length;\
    \ i++){\n        if(vowelsArr.indexOf(word[i]) !== -1){\n            vowelPositions\
    \ += i;\n        }\n    }\n    let wordIndex = word.length - vowelPositions;\n\
    \    \n    let vowelIndex = wordIndex-1;\n    let consonantIndex = wordIndex+1;\n\
    \    let closestVowelIndex = vowelIndex-1;\n    \n    let closestVowelPosition\
    \ = vowelPositions;\n    let closestVowelPositionCount = 0;\n    for(let i = 0;\
    \ i <= word.length; i++){\n        if(vowelsArr[i] !== word[i]){\n           \
    \ if(consonantsArr[consonantIndex] === word[i]){\n                closestVowelIndex++;\n\
    \                consonantIndex++;\n                closestVowelPositionCount++;\n\
    \            }else{\n                if(closestVowelIndex === vowelPositions){\n\
    \                    return word[vowelIndex];\n                }\n           \
    \     closestVowelIndex--;\n                consonantIndex++;\n              \
    \  closestVowelPositionCount++;\n            }\n        }else{\n            if(closestVowelIndex\
    \ === vowelPositions){\n                closestVowelIndex++;\n               \
    \ consonantIndex++;\n                closestVowelPositionCount++;\n          \
    \  }else{\n                closestVowelIndex--;\n                consonantIndex++;\n\
    \                closestVowelPositionCount++;\n            }\n        }\n    }\n\
    \    \n    let finalResult = \"\";\n    for(let i = 0; i < closestVowelPositionCount;\
    \ i++){\n        finalResult += word[vowelIndex];\n    }\n    return finalResult;\n\
    }\n", "    let vowel = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    let finalResult =\
    \ \"\";\n    for (let i = 0; i < word.length-1; i++){\n        let currentLetter\
    \ = word.charAt(i);\n        if (vowel.indexOf(currentLetter) > -1){\n       \
    \     let leftLetter = word.charAt(i);\n            let rightLetter = word.charAt(i+1);\n\
    \            if (vowel.indexOf(leftLetter) < vowel.indexOf(rightLetter)){\n  \
    \              finalResult = rightLetter;\n            }else{\n              \
    \  finalResult = leftLetter;\n            }\n        }\n    }\n    return finalResult;\n\
    }\n", "    let vowels = \"AEIOUaeiou\";\n    for(let i=word.length-1;i>=0;i--){\n\
    \        if(vowels.indexOf(word[i]) !=-1){\n            return word[i];\n    \
    \    }\n    }\n    return \"\";\n}", "  return word.substring(0,word.length-1).match(/[aeiou]/g);\n\
    }\n", "    word = word.split(\"\").reverse().join(\"\");\n    word = word.split(\"\
    \").reverse().join(\"\");\n    word = word.split(\"\").reverse().join(\"\");\n\
    \    word = word.split(\"\").reverse().join(\"\");\n    word = word.split(\"\"\
    ).reverse().join(\"\");\n    word = word.split(\"\").reverse().join(\"\");\n \
    \   word = word.split(\"\").reverse().join(\"\");\n    word = word.split(\"\"\
    ).reverse().join(\"\");\n    word = word.split(\"\").reverse().join(\"\");\n \
    \   word = word.split(\"\").reverse().join(\"\");\n    word = word.split(\"\"\
    ).reverse().join(\"\");\n    word = word.split(\"\").reverse().join(\"\");\n \
    \   word = word.split(\"\").reverse().join(\"\");\n    word = word.split(\"\"\
    ).reverse().join(\"\");\n    word = word.split(\"\").reverse().join(\"\");\n \
    \   word = word.split(\"\").reverse().join(\"\");\n    word = word.split(\"\"\
    ).reverse().join(\"\");\n    word = word.split(\"\").reverse().join(\"\");\n \
    \   word = word.split(\"\").reverse().join(\"\");\n    word = word.split(\"\"\
    ).reverse().join(\"\");\n    word = word.split(\"\").reverse().join(\"\");\n \
    \   word = word.split(\"\").reverse().join(\"\");\n    word = word.split(\"\"\
    ).reverse().join(\"\");\n    word = word.split(\"\").reverse().join(\"\");\n \
    \   word = word.split(\"\").reverse().join(\"\");\n    word = word.split(\"\"\
    ).reverse().join(\"\");\n    word = word.split(\"\").reverse().join(\"\");\n \
    \   word = word.split(\"\").reverse().join(\"\");\n    word = word.split(\"\"\
    ).reverse().join(\"\");\n    word = word.split(\"\").reverse().join(\"\");\n \
    \   word = word.split(\"\").reverse().join(\"\");\n    word = word.split(\"\"\
    ).reverse().join(\"\");\n    word = word.split(\"\").reverse().join(\"\");\n \
    \   word = word.split(\"\").reverse().join(\"\");\n    word = word.split(\"\"\
    ).reverse().join(\"\");\n    word = word.split(\"\").reverse().join(\"\");\n \
    \   word = word.split(\"\").reverse().join(\"\");\n    word = word.split(\"\"\
    ).reverse().join(\"\");\n    word = word.split(\"\").reverse().join(\"\");\n \
    \   word = word.split(\"\").reverse().join(\"\");\n    word = word.split(\"\"\
    ).reverse().join(\"\");\n    word = word.split(\"\").reverse().join(\"\");\n \
    \   word = word.split(\"\").reverse().join(\"\");\n    word = word.split(\"\"\
    ).reverse().join(\"\");\n    word = word.split(\"\").reverse().join(\"\");\n \
    \   word = word.split(\"\").reverse().join(\"\");\n    word = word.split(\"\"\
    ).", "\tlet vowels=[\"a\",\"e\",\"i\",\"o\",\"u\"];\n\tlet vowelsCount=0;\n\t\
    for(let i=word.length-1;i>=0;i--){\n\t\tlet curChar=word[i];\n\t\tvowelsCount+=vowels.indexOf(curChar);\n\
    \t}\n\tlet leftVowel=word.slice(vowelsCount+1);\n\tlet rightVowel=word.slice(0,vowelsCount+1);\n\
    \tfor(let i=0;i<rightVowel.length;i++){\n\t\tif(rightVowel[i]===leftVowel[i]){\n\
    \t\t\treturn leftVowel[i];\n\t\t}\n\t}\n\treturn \"\";\n}\n", "  const lowerCaseWord\
    \ = word.toLowerCase();\n  let lastChar = lowerCaseWord[lowerCaseWord.length-1];\n\
    \  while(lowerCaseWord.includes(lastChar)){\n    lastChar = lowerCaseWord.substr(lowerCaseWord.length-1,\
    \ 1);\n  }\n  return lastChar;\n}\n", "  word = word.toLowerCase();\n  let vowels\
    \ = ['a', 'e', 'i', 'o', 'u', 'y']\n  let vowel = vowels.find(v => word.startsWith(v))\n\
    \  let consonants = word.slice(vowel).split('').map(c => c.toUpperCase())\n  let\
    \ min = Math.min(vowel, consonants.length - 1)\n  return consonants[min]\n}\n",
  "\tlet vowels = [];\n\tlet leftSide = word.substring(0,word.length - 1);\n\tlet\
    \ rightSide = word.substring(word.length - 1, word.length);\n\tlet vowelLeftSide\
    \ = leftSide.match(/[aeiouAEIOU]/gi);\n\tlet vowelRightSide = rightSide.match(/[aeiouAEIOU]/gi);\n\
    \t\n\tif (vowelLeftSide != null || vowelRightSide != null){\n\t\tvowels.push(vowelLeftSide);\n\
    \t\tvowels.push(vowelRightSide);\n\t\tvowels = vowels.flat().sort();\n\t\treturn\
    \ vowels.find((v,i) => { return i >= 0 && i < (vowels.length-1); });\n\t}\n\t\
    return \"\";\n}\n", "   const vowelsArr = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \   return word.toLowerCase().split(\"u\").find(word => vowelsArr.some(vowel =>\
    \ word.includes(vowel)));\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYou might need\
    \ to add another check to make sure the word contains vowel characters before\
    \ you try to find the closest vowel.\n<|/ c |>\n<| a |>\nThis is my approach to\
    \ this problem\n<code>", "\treturn getClosestVowel(word, vowels, \"right\");\n\
    }\n", "  if(word == \"\") return \"\";\n  var consonants = ['B','C','D','F','G','H','J','K','L','M','N','P','Q','R','S','T','V','W','X','Z']\n\
    \  var vowels = ['a','e','i','o','u']\n  var i = 0;\n  var len = word.length;\n\
    \  var vowel;\n  for(i = len-1; i>=0; i--){\n    vowel = word[i];\n    for(var\
    \ j=0; j<vowels.length; j++){\n      if(vowel == vowels[j]){\n        if(j !=\
    \ len-1){\n          if(consonants[i+1] == consonants[j+1]){\n            if(consonants[j]\
    \ != consonants[i+1]){\n              return vowels[j];\n            }\n     \
    \     }\n        }\n      }\n    }\n  }\n  return \"\";\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI thought about it, but that would require me to check every letter\
    \ and vowel combination (O(n^2)) and that would take forever. I think I can do\
    \ better than that.\n<|/ c |>\n<| c |>\nI don't think so, can you please explain\
    \ more? I thought it can be done in O(n).\n<|/ c |>\n<| c |>\nI still don't think\
    \ so. I think what would be required is some kind of tree data structure where\
    \ every node has a list of all the vowels and consonants around it, but even that\
    \ would require a lot of space and lookups.\n<|/ c |>\n<| c |>\nActually, I am\
    \ thinking about a more simpler solution. Maybe we can use the fact that there\
    \ is only one vowel and consonant in the end of a word. Let's assume we have a\
    \ word \"Sandy\" where S is the last character and d is the last vowel we want\
    \ to check. If we look at \"Sandy\" from left to right and check right to left\
    \ for another letter, we can find out that 'S' is the last letter and 'd' is the\
    \ last vowel. So, we only need to check from right to left and if we find a vowel,\
    \ we just need to check the last letter in the word, which is 'd'. So, the complexity\
    \ should be O(n).\n<|/ c |>\n<| c |>\nI think this solution is O(n^2) since for\
    \ each letter and vowel combination, we need to check all possibilities and check\
    \ for every combination would be O(n^2). This is the same as the solution I posted\n\
    <|/ c |>\n<| a |>\nTry this one:\n<code>\n", "    return findVowel(word.toLowerCase(),\
    \ [...new Set(word)].sort((a,b)=>b.length-a.length).reverse());\n}\nlet result\
    \ = get_closest_vowel(\"ab\");", "  word = word.split(\"\").reverse().join(\"\"\
    );\n  word = word.split(\"\").reverse().join(\"\");\n  \n  for (var i = 0; i <\
    \ word.length; i++){\n    var letter = word[i];\n    var vowel = \"aeiouAEIOU\"\
    ;\n    var consonant = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    var\
    \ consonants = consonant.split(\"\");\n    var vowels = vowel.split(\"\");\n \
    \   \n    var startIndex = 0;\n    var endIndex = 0;\n    \n    vowels.forEach(function(v){\n\
    \      if (letter == v){\n        startIndex = i;\n      }\n      if (letter ==\
    \ consonants[endIndex]){\n        endIndex = i;\n      }\n    });\n    \n    if\
    \ (startIndex != endIndex){\n      letter = word[startIndex + 1];\n      var vowel\
    \ = \"aeiouAEIOU\";\n      var consonant = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n      var consonants = consonant.split(\"\");\n      var vowels = vowel.split(\"\
    \");\n      \n      startIndex = 0;\n      endIndex = 0;\n      \n      vowels.forEach(function(v){\n\
    \        if (letter == v){\n          startIndex = i;\n        }\n        if (letter\
    \ == consonants[endIndex]){\n          endIndex = i;\n        }\n      });\n \
    \     \n      if (startIndex != endIndex){\n        return letter;\n      }\n\
    \    }\n  }\n  return \"\";\n}\n</cell>\n<cell>\n# Test your function\nget_closest_vowel(\"\
    yogurt\")\n</cell>\n<text>\n13. Write a Python program to remove all vowels including\
    \ non-letters from the given string.\nThe function should remove all the vowels\
    \ from the given string including non-letters. If the given string doesn't contain\
    \ any vowel, then an empty string should be returned. \nYou may assume that the\
    \ given string contains only English alphabet and English letters. \nThe non-letters\
    \ should not be removed if the given string contains other alphabets. \nIf the\
    \ given string is empty or all non-letters are removed, return an empty string.\n\
    Example:\n>>> remove_vowels(\"BET\")\n\"B\"\n>>> remove_vowels(\"ABCEDFG\")\n\"\
    ABCDEFG\"\n>>> remove_vowels(\"abcedfg\")\n\"\"\n>>> remove_vowels(\"\")\n\"\"\
    \n>>> remove_vowels(\"a\")\n\"\"\n>>> remove_vowels(\"abc\")\n\"\"\n>>> remove_vowels(\"\
    abcd\")\n\"\"\n>>> remove_vowels(\"ABC\")\n\"\"\n\n</text>\n<", "    return \"\
    \";\n}\n", "\tconst vowels = \"aeiouAEIOU\"\n\tlet i = word.length-1\n\twhile\
    \ (i > 0) {\n\t\tif (vowels.includes(word.charAt(i))){\n\t\t\tbreak\n\t\t}\n\t\
    \ti --\n\t}\n\treturn word.charAt(i) + word.charAt(i+1)\n}\n", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let re = new RegExp(vowels.join(\"\
    |\"), \"i\");\n    return re.test(word) ? word.match(/[aeiou]$/)[0].match(/[aeiou]$/)[0]\
    \ : \"\";\n}\n", "    var vowels = \"AEIOUaeiou\";\n    var arr = word.split(\"\
    \");\n    var vowelsArr = vowels.split(\"\");\n    var i = 0;\n    var j;\n  \
    \  var consonants = \"\";\n    for(;i<arr.length;i++){\n        if(vowelsArr.indexOf(arr[i])\
    \ >= 0){\n            consonants = arr[i] + consonants;\n        }\n    }\n  \
    \  for(;j=consonants.length-1;j>=0;j--){\n        if(vowelsArr.indexOf(consonants[j])\
    \ >=0){\n            return consonants[j];\n        }\n    }\n    return \"\"\
    ;\n}\n", "    let letter = word[word.length-1];\n    let left = word.slice(0,\
    \ word.length-1);\n    let right = word.slice(word.length-1, word.length);\n \
    \   let count = 0;\n    for(let i=0;i<left.length;i++){\n        if(left[i] ===\
    \ letter){\n            count++;\n            if(count===2)\n                return\
    \ left[i];\n        }\n    }\n    for(let i=0;i<right.length;i++){\n        if(right[i]\
    \ === letter){\n            count++;\n            if(count===2)\n            \
    \    return right[i];\n        }\n    }\n    return \"\";\n}\n</code>\n<|/ a dscore=1\
    \ tags=javascript |>\n<| c |>\nThat is what I was going to do! But I like your\
    \ solution better because you do it in one loop! :)\n<|/ c |>\n<| a dscore=0 tags=javascript\
    \ |>\nThe best solution would be to check every possible letter for the letter\
    \ and count the vowels and compare it to the number of vowels you want.\n<code>",
  "    var vowels = \"aeiouAEIOU\";\n    return word.slice(word.length - word.split('').reverse().join('').length).split('').reverse().find(e\
    \ => vowels.indexOf(e) !== -1) || '';\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    <code>\nvar get_closest_vowel = function (word) {\n    if (word.length > 3 &&\
    \ word.length < 5) {\n        var vowels = \"aeiouAEIOU\"\n        var splittedWord\
    \ = word.split(\"\");\n        splittedWord.reverse().forEach(function (letter)\
    \ {\n            var firstLetter = letter;\n            var secondLetter = splittedWord[splittedWord.length\
    \ - splittedWord.length -1];\n            var indexVowel = vowels.indexOf(firstLetter);\n\
    \            var indexSecondLetter = vowels.indexOf(secondLetter);\n         \
    \   if (indexVowel > -1 && indexSecondLetter > -1) {\n                var diff\
    \ = (indexVowel - indexSecondLetter);\n                if (diff === 0) {\n   \
    \                 return letter\n                }\n                if (diff >\
    \ 0) {\n                    return letter + vowels[indexVowel + 1]\n         \
    \       }\n                if (diff < 0) {\n                    return vowels[indexVowel\
    \ - 1] + letter\n                }\n            }\n        });\n    }\n    return\
    \ \"\";\n}\n</code>\n<|/ a tags=python,javascript |>\n<| c |>\nWelcome to Stack\
    \ Overflow. While this code snippet may solve the question, [including an explanation](http://meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  if(word\
    \ == \"\"){\n    return \"\";\n  }\n  let lastVowel = \"\";\n  let lastCons =\
    \ \"\";\n  let firstCons = false;\n  for(let i = 0; i < word.length; i++){\n \
    \   if(word[i] === \"a\" && !firstCons){\n      firstCons = true;\n      lastVowel\
    \ = \"\";\n      lastCons = \"\";\n    }\n    if(firstCons){\n      lastVowel\
    \ = word[i];\n      lastCons = \"\";\n    }\n    if(word[i] === \"a\" && firstCons){\n\
    \      lastCons = word[i];\n      lastVowel = \"\";\n    }\n  }\n  return lastVowel;\n\
    }\n", "    vowels = /[aeiou]/g;\n    var letters = word.toLowerCase().split(vowels);\n\
    \    var start = 0;\n    var end = 0;\n    var vowels = [];\n    for(var i = 0;\
    \ i < letters.length; i++){\n        for(var j = 0; j < i; j++){\n           \
    \ if(letters[i].localeCompare(letters[j]) == 0){\n                start = j;\n\
    \                break;\n            }\n        }\n        for(var j = i; j <\
    \ letters.length; j++){\n            if(letters[i].localeCompare(letters[j]) ==\
    \ 0){\n                end = j;\n                break;\n            }\n     \
    \   }\n        vowels.push(letters[start]);\n        vowels.push(letters[end]);\n\
    \    }\n    vowels.sort();\n    var vowel = vowels[vowels.length-1];\n    return\
    \ vowel;\n}\nvar tests = [\"yogurt\", \"yog\", \"yogur\", \"yogurt\", \"yogurt\"\
    , \"FULL\", \"Quick\", \"AB\"];\nfor (var i = 0; i < tests.length; i++) {\n  \
    \  console.log(\"test[\" + i + \"]: \" + tests[i]);\n    console.log(\"get_closest_vowel(test[\"\
    \ + i + \"]):\" + get_closest_vowel(tests[i]));\n}</code>\n\nEDIT : As it turns\
    \ out, if two vowels are in the same row, the return value is incorrect :\n<code>\n\
    >>> get_closest_vowel(\"yogurt\")\n\"u\"\n</code>\nIn fact, if two vowels are\
    \ in the same row, it is ambiguous which one should be taken as closest vowel.\
    \ \n<code>\n>>> get_closest_vowel(\"yogurt\")\n\"u\"\n</code>\nTo fix this problem,\
    \ we need to take into account the possibility of multiple vowels in the same\
    \ row (which is very rare).\n<|/ a tags=javascript,algorithm |>\n<| c |>\nI think\
    \ the problem is that yogurt should return `u`, not `o`\n<|/ c |>\n<| c |>\nI\
    \ fixed the problem I found. Thanks for pointing this out !\n<|/ c |>\n<| c |>\n\
    But it doesn't, it returns `o` on both tests with this answer.\n<|/ c |>\n<| c\
    \ |>\nWell, what do you think ?\n<|/ c |>\n<| c |>\nI misread the question. I\
    \ thought the issue was that yogurt should return `u`, not `o` -- but now that\
    \ I read it again, it seems this is wrong.\n<|/ c |>\n<| a tags=javascript,algorithm\
    \ dscore=2 |>\nHere is a non-RegEx solution. \nThis solution builds a dictionary\
    \ of the consonants and vowels and then iterates through the string to determine\
    \ which vowel is closest", "    var vowels = \"AEIOUaeiou\".split(\"\");\n   \
    \ var cons = \"BCDFGHKLMNPQRSTVWXYZbcdfghklmnpqrstvwxyz\".split(\"\");\n    var\
    \ vowelIndex = -1;\n    var charCount = word.length;\n    for(var i = word.length-1;\
    \ i >= 0; i--){\n        var c = word[i];\n        var j = vowels.indexOf(c);\n\
    \        if(j === -1){\n            var k = cons.indexOf(c);\n            if(k\
    \ > 0){\n                var l = (j+k)/2;\n                if(j > 0) vowelIndex\
    \ = l;\n                else if(k > 0) vowelIndex = l-1;\n            }\n    \
    \    }\n        if(vowelIndex >= 0){\n            charCount = i;\n           \
    \ break;\n        }\n    }\n    return charCount >= word.length ? \"\" : vowels[vowelIndex];\n\
    }\n", "  var index = word.length - 1;\n  var vowels = ['a','e','i','o','u'];\n\
    \  \n  while(index >= 0) {\n    if(vowels.indexOf(word[index]) === -1){\n    \
    \  return \"\";\n    }\n    index = index - 1;\n  }\n  return word[index];\n}\n\
    </code>\n<|/ a dscore=1 tags=javascript,algorithm |>\n<| c |>\nNice solution but\
    \ your `vowels.indexOf` returns -1 when given a string that doesn't contain any\
    \ of the vowels.\n<|/ c |>\n<| c |>\nYes, good catch. It was my typo. Thanks for\
    \ catching it.\n<|/ c |>\n<| a |>\n<code>", "  let vowels = \"aeiouAEIOU\".split(\"\
    \");\n  for(let i=0; i<vowels.length; i++){\n    let vowel = vowels[i];\n    let\
    \ vowel_index = word.length - vowel.length;\n    word = word.substr(vowel_index);\n\
    \    if(vowel.match(new RegExp(\"[^\"+vowel+\"]\"))){\n      break;\n    }\n \
    \ }\n  return vowel;\n}\nget_closest_vowel(\"yogurt\");\nget_closest_vowel(\"\
    FULL\");\nget_closest_vowel(\"quick\");\nget_closest_vowel(\"ab\");\n", "\tif(!word\
    \ || word.length<1) return \"\";\n\tvar startVowel=-1, endVowel=-1, startCons=-1,\
    \ endCons=-1, startVowelEnd=-1, endVowelEnd=-1, startConsEnd=-1, endConsEnd=-1,\
    \ \n\t\tvowels=/[aeiouyAEIOUY]/, consonants=/[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]/,\n\
    \t\tvowelsLength=vowels.toString().length, consonantsLength=consonants.toString().length,\
    \ wordLength=word.length, vowelIndex=0, consonantIndex=0,\n\t\tminDistance=0,\
    \ minVowel=0, minCons=0, result=\"\";\n\n\tfor(wordIndex=0; wordIndex<wordLength;\
    \ wordIndex++){\n\t\tif(word.charCodeAt(wordIndex)==65 && wordIndex+1<wordLength){\n\
    \t\t\tif(vowels.test(word.charAt(wordIndex+1))){\n\t\t\t\tif(vowelIndex<minVowel){\n\
    \t\t\t\t\tminVowel=vowelIndex;\n\t\t\t\t\tminDistance=1;\n\t\t\t\t}else if(vowelIndex==minVowel){\n\
    \t\t\t\t\tif(word.charCodeAt(wordIndex+1)>64){\n\t\t\t\t\t\tif(word.charCodeAt(wordIndex+1)-64>minDistance){\n\
    \t\t\t\t\t\t\tminDistance=word.charCodeAt(wordIndex+1)-64;\n\t\t\t\t\t\t\tminVowel=wordIndex+1;\n\
    \t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(word.charCodeAt(wordIndex)==97\
    \ && wordIndex+2<wordLength){\n\t\t\tif(consonants.test(word.charAt(wordIndex+2))){\n\
    \t\t\t\tif(consonantIndex<minCons){\n\t\t\t\t\tminCons=consonantIndex;\n\t\t\t\
    \t\tminDistance=1;\n\t\t\t\t}else if(consonantIndex==minCons){\n\t\t\t\t\tif(word.charCodeAt(wordIndex+2)>96){\n\
    \t\t\t\t\t\tif(word.charCodeAt(wordIndex+2)-96>minDistance){\n\t\t\t\t\t\t\tminDistance=word.charCodeAt(wordIndex+2)-96;\
    \ \n\t\t\t\t\t\t\tminCons=wordIndex+2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t}\n\t\n\tif(minVowel>startVowel){\n\t\tstartVowel=minVowel;\n\
    \t\tstartVowelEnd=wordLength;\n\t}\n\tif(minCons>startCons){\n\t\tstartCons=minCons;\n\
    \t\tstartConsEnd=wordLength;\n\t}\n\t\n\tif(minVowel>endVowel){\n\t\tendVow",
  "    if(word.length < 1) return '';\n    const letters = word.split('');\n    let\
    \ index = 0;\n    while(index > -1){\n        index = letters.findIndex(letter\
    \ => letter.toLowerCase() === letters[index].toUpperCase());\n        if(index\
    \ >= 0) {\n            letters.splice(index, 1);\n        }\n        else {\n\
    \            letters.splice(index, 1);\n            index = 0;\n        }\n  \
    \  }\n    const lastLetter = letters[letters.length - 1];\n    const lastLetterIndex\
    \ = letters.lastIndexOf(lastLetter);\n    let vowels = '';\n    if(lastLetterIndex\
    \ > -1){\n        const firstLetterIndex = letters.indexOf(letters[lastLetterIndex]);\n\
    \        if(firstLetterIndex > -1){\n            const firstLetter = letters[firstLetterIndex];\n\
    \            vowels = firstLetter + 'u';\n            letters.splice(lastLetterIndex\
    \ + 1, 1);\n            letters.splice(firstLetterIndex + 1, 1);\n           \
    \ \n        }\n        else {\n            const firstLetter = letters[firstLetterIndex];\n\
    \            vowels = firstLetter + 'a';\n            letters.splice(lastLetterIndex\
    \ + 1, 1);\n        }\n    }\n    return vowels;\n}\n", "\treturn get_closest_vowel_helper(word,\
    \ 0, word.length - 1, \"\");\n}\n", "\tvar vowels = new Array(\"a\",\"e\",\"i\"\
    ,\"o\",\"u\");\n\tvar vowels_index = vowels.length-1;\n\tvar consonants_index\
    \ = word.length - 1;\n\tvar index = -1;\n\tvar result = \"\";\n\twhile (index\
    \ != -1){\n\t\tif (vowels[index].toLowerCase() === word[index].toLowerCase()){\n\
    \t\t\tresult = vowels[index];\n\t\t\tbreak;\n\t\t}\n\t\tif (word[index] === \"\
    \"){\n\t\t\tbreak;\n\t\t}\n\t\tindex--;\n\t\tif (index >= consonants_index){\n\
    \t\t\tindex += 1;\n\t\t\tconsonants_index = word.length - 1;\n\t\t}\n\t\tif (index\
    \ >= vowels_index){\n\t\t\tindex -= 1;\n\t\t\tvowels_index = vowels.length-1;\n\
    \t\t}\n\t}\n\tif (result){\n\t\treturn result;\n\t}\n\treturn \"\";\n}\n", " \
    \ if(word.search(\"a\") != -1 || word.search(\"e\") != -1 || word.search(\"i\"\
    ) != -1 || word.search(\"o\") != -1 || word.search(\"u\") != -1 || word.search(\"\
    A\") != -1 || word.search(\"E\") != -1 || word.search(\"I\") != -1 || word.search(\"\
    O\") != -1 || word.search(\"U\") != -1){\n    return word;\n  }\n  return \"\"\
    ;\n}\n", "  if(word.length < 2){\n    return \"\";\n  }\n  \n  var vowels = new\
    \ Array(\"a\", \"e\", \"i\", \"o\", \"u\");\n  \n  var leftRightPosition = word.lastIndexOf(\"\
    c\") + 1;\n  var rightPosition = word.lastIndexOf(\"o\") + 1;\n  \n  var leftRightVowel\
    \ = word.substring(leftRightPosition, rightPosition);\n  var rightVowel = word.substring(rightPosition,\
    \ word.length);\n  \n  if(vowels.includes(leftRightVowel) && vowels.includes(rightVowel)){\n\
    \    return leftRightVowel;\n  } else {\n    return \"\";\n  }\n  \n}\n", "  \
    \  if(word.length===0){\n        return \"\";\n    }\n    var vowelsRegex = /[aeiouy]+/gi;\n\
    \    var vowels = word.match(vowelsRegex);\n    var vowels_count = vowels.length;\n\
    \    if(vowels_count<=2){\n        return \"\";\n    }\n    var last_consonant_index\
    \ = word.length - 1;\n    var closest_vowel = \"\";\n    var closest_vowel_index\
    \ = 0;\n    var consonant_indexes = [];\n    var consonants_length = word.length\
    \ - 2;\n    for(let i=0;i<consonants_length;i++){\n        consonant_indexes.push(i);\n\
    \    }\n    for(let i=0;i<consonants_length;i++){\n        if(consonant_indexes[i]>=last_consonant_index){\n\
    \            break;\n        }\n        var left_consonant = word[consonant_indexes[i]];\n\
    \        var right_consonant = word[consonant_indexes[i]+1];\n        if(left_consonant===right_consonant){\n\
    \            continue;\n        }\n        var vowel_dist = levenshtein(left_consonant,right_consonant);\n\
    \        if(vowel_dist<closest_vowel.length){\n            closest_vowel = left_consonant;\n\
    \            closest_vowel_index = consonant_indexes[i];\n        }\n    }\n \
    \   return closest_vowel;\n}", "    var vowels = ['a', 'e', 'i', 'o', 'u']\n \
    \   var vowel_index = vowels.findIndex(letter => word.includes(letter))\n    if(vowel_index\
    \ < 0) return \"\"\n    var vowel_length = word[vowel_index].length\n    return\
    \ word[vowel_index].slice(vowel_index + 1).includes('a') ? 'a' : \n        word[vowel_index].slice(vowel_index\
    \ + 1).includes('e') ? 'e' : \n        word[vowel_index].slice(vowel_index + 1).includes('i')\
    \ ? 'i' : \n        word[vowel_index].slice(vowel_index + 1).includes('o') ? 'o'\
    \ : \n        word[vowel_index].slice(vowel_index + 1).includes('u') ? 'u' : ''\n\
    }\n", "    if(word.length == 0)\n        return \"\";\n    var vowels = {\n  \
    \      \"a\" : 1,\n        \"e\" : 1,\n        \"i\" : 1,\n        \"o\" : 1,\n\
    \        \"u\" : 1,\n        \"y\" : 1,\n        \"r\" : 1,\n        \"l\" : 1,\n\
    \        \"s\" : 1\n    };\n    var firstChar = word[0];\n    var secondChar =\
    \ word[word.length-1];\n    return firstChar in vowels && ((firstChar == secondChar)\
    \ || \n        (secondChar in vowels && (vowels[secondChar]>=vowels[firstChar])))?firstChar:\"\
    \";\n}\n", "    var vowel_arr = ['u','i','o','a','e','y','a','i','e','a','i','a'];\n\
    \    var vowel_arr2 = ['a','e','i','o','u','y','a','i','e','a','i','a'];\n   \
    \ var first_consonant_index = word.length - 1;\n    var last_consonant_index =\
    \ word.length;\n    var first_vowel_index = -1;\n    var last_vowel_index = -1;\n\
    \    \n    for(var i =0; i < vowel_arr.length; i++) {\n        if(word.indexOf(vowel_arr[i])\
    \ == first_consonant_index) {\n            first_vowel_index = i;\n        }\n\
    \        if(word.indexOf(vowel_arr[i]) == last_consonant_index) {\n          \
    \  last_vowel_index = i;\n        }\n    }\n    \n    if(first_vowel_index !=\
    \ -1 && last_vowel_index != -1) {\n        var first_vowel = vowel_arr[first_vowel_index];\n\
    \        var last_vowel = vowel_arr[last_vowel_index];\n        var vowel_distance\
    \ = first_vowel.length - last_vowel.length;\n        if(vowel_distance >= 2) {\n\
    \            return vowel_arr[first_vowel_index];\n        } else {\n        \
    \    return \"\";\n        }\n    } else {\n        return \"\";\n    }\n    \n\
    }", "\tlet consonants = word.match(/[^aeiou]+/g);\n\tif (consonants==null) return\
    \ \"\";\n\tlet vowels = word.match(/[aeiou]+/g);\n\tlet vowel_count = vowels.length-1;\n\
    \tlet vowel_count_from_right = vowels[vowel_count_from_right]==undefined ? \"\"\
    \ : vowels[vowel_count_from_right].toLowerCase();\n\tlet vowel_count_from_left\
    \ = vowels[vowel_count_from_left]==undefined ? \"\" : vowels[vowel_count_from_left].toLowerCase();\n\
    \tlet vowel_count_from_left = vowels[vowel_count_from_right]==undefined ? \"\"\
    \ : vowels[vowel_count_from_right].toLowerCase();\n\tif (vowel_count_from_left==vowel_count_from_right){\n\
    \t\treturn vowel_count_from_left;\n\t}\n\treturn vowel_count_from_left;\n}\n",
  "    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(var i = 0; i < vowels.length;\
    \ i++){\n        if((word.indexOf(vowels[i]) > -1 && word.indexOf(vowels[i + 1],\
    \ word.length - vowels[i].length) > -1) ||\n            (word.indexOf(vowels[i])\
    \ > -1 && word.indexOf(vowels[i + 1], word.length - 1) > -1) ||\n            (word.indexOf(vowels[i])\
    \ > -1 && word.indexOf(vowels[i + 1], word.length - word.length - 1) > -1) ||\n\
    \            (word.indexOf(vowels[i]) > -1 && word.indexOf(vowels[i + 1], word.length\
    \ - word.length - 1) > -1)\n            ){\n            return vowels[i];\n  \
    \      }\n    }\n    return \"\";\n}\n", "  let vowels = ['a','e','i','o','u'];\n\
    \  let consonants = [...word]\n  let result = '';\n  for(let i = 0; i<vowels.length;\
    \ i++){\n    if(consonants.includes(vowels[i])){\n      result = vowels[i];\n\
    \      consonants.pop();\n    }\n  }\n  return result;\n}\n", "    let vowels\
    \ = \"aeiou\";\n    for(let i=word.length;i>0;i--){\n        let start = word.substr(0,i);\n\
    \        let end = word.substr(0,i+1);\n        if(start.includes(vowels) && end.includes(vowels)){\n\
    \            return word[i]\n        }\n    }\n}\n", "\tword = word.toLowerCase();\n\
    \t\n\t// Search for the first vowel from the right side of the word\n\tlet vowel_index;\n\
    \tlet vowel_len = word[word.length-1]==='a' ? 2 : 1;\n\tfor(let i=word.length-2;\
    \ i>=vowel_len; i--){\n\t\tlet ch = word.substr(i, 1);\n\t\tif(ch==='a'||ch==='e'||ch==='i'||ch==='o'||ch==='u')\
    \ vowel_index = i;\n\t}\n\t\n\tif(vowel_index===undefined){\n\t\treturn \"\";\n\
    \t}\n\t\n\t// Search for the second vowel from the left side of the word\n\tlet\
    \ cons_index = word[vowel_index];\n\tlet cons_len = word[vowel_index+1]==='a'\
    \ ? 2 : 1;\n\tfor(let i=vowel_index+2; i<word.length; i++){\n\t\tlet ch = word.substr(i,\
    \ 1);\n\t\tif(ch==='a'||ch==='e'||ch==='i'||ch==='o'||ch==='u') cons_index = i;\n\
    \t}\n\t\n\tif(cons_index===undefined){\n\t\treturn \"\";\n\t}\n\t\n\t// Check\
    \ whether they are in the same place or next to each other by comparing their\
    \ ASCII value\n\tif(vowel_index<cons_index){\n\t\treturn word.substr(vowel_index+1,\
    \ vowel_index+2-cons_index+1);\n\t}\n\telse{\n\t\treturn word.substr(cons_index+2,\
    \ cons_index+2-vowel_index+1);\n\t}\n}\n", "\tlet str=word.toUpperCase()\n\tlet\
    \ len=word.length\n\tlet start=-1\n\tlet end=-1\n\tlet vowels='AEIOUaeiou'\n\t\
    let index=-1\n\tfor(let i=len-1;i>=0;i--){\n\t\tindex=str.indexOf(i,start+1)\n\
    \t\tif(index>=0){\n\t\t\tfor(let j=index;j<len;j++){\n\t\t\t\tif(vowels.indexOf(str[j])){\n\
    \t\t\t\t\tstart=j\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(start>=0 && (start+i-1)<len){\n\
    \t\t\t\tif(vowels.indexOf(str[start+i])){\n\t\t\t\t\tend=start+i\n\t\t\t\t\tbreak\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif(start>=0&&end>=0&&start>end){\n\t\t\t\treturn str[end]\n\
    \t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t}\n\treturn \"\"\n}", "  var len = word.length;\n\
    \  if(len<2) return \"\";\n  var consonants = \"bcdfghjklmnpqrstvwxyz\";\n  var\
    \ vowels = \"aeiouy\";\n  var closest_consonant = \"\";\n  var closest_vowel =\
    \ \"\";\n  var closest_len = 0;\n  for(var i=0; i<word.length; i++){\n    var\
    \ char = word[i];\n    for(var j=0; j<consonants.length; j++){\n      if(char\
    \ === consonants[j]){\n        if(closest_consonant.length){\n          if(closest_len\
    \ > len) return \"\";\n          if(closest_consonant === vowels.charAt(closest_len)){\n\
    \            closest_vowel = vowels.charAt(closest_len);\n            closest_len\
    \ = len;\n          }\n        }\n        closest_consonant = char;\n        closest_len\
    \ = i;\n        break;\n      }\n    }\n  }\n  return closest_vowel;\n}\n", " \
    \   const arr = word.split(\"\").reverse();\n    return arr.reduce((a, c, i, arr)\
    \ => {\n        if(arr[i+1] ===  \"A\" ||  arr[i+1] === \"a\" ||  arr[i+1] ===\
    \ \"B\" ||  arr[i+1] === \"b\" ||  arr[i+1] === \"C\" ||  arr[i+1] === \"c\" ||\
    \  arr[i+1] === \"D\" ||  arr[i+1] === \"d\" ||  arr[i+1] === \"E\" ||  arr[i+1]\
    \ === \"e\" ||  arr[i+1] === \"F\" ||  arr[i+1] === \"f\" ||  arr[i+1] === \"\
    G\" ||  arr[i+1] === \"g\" ||  arr[i+1] === \"H\" ||  arr[i+1] === \"h\" ||  arr[i+1]\
    \ === \"I\" ||  arr[i+1] === \"i\" ||  arr[i+1] === \"J\" ||  arr[i+1] === \"\
    j\" ||  arr[i+1] === \"K\" ||  arr[i+1] === \"k\" ||  arr[i+1] === \"L\" ||  arr[i+1]\
    \ === \"l\" ||  arr[i+1] === \"M\" ||  arr[i+1] === \"m\" ||  arr[i+1] === \"\
    N\" ||  arr[i+1] === \"n\" ||  arr[i+1] === \"O\" ||  arr[i+1] === \"o\" ||  arr[i+1]\
    \ === \"P\" ||  arr[i+1] === \"p\" ||  arr[i+1] === \"Q\" ||  arr[i+1] === \"\
    q\" ||  arr[i+1] === \"R\" ||  arr[i+1] === \"r\" ||  arr[i+1] === \"S\" ||  arr[i+1]\
    \ === \"s\" ||  arr[i+1] === \"T\" ||  arr[i+1] === \"t\" ||  arr[i+1] === \"\
    U\" ||  arr[i+1] === \"u\" ||  arr[i+1] === \"V\" ||  arr[i+1] === \"v\" ||  arr[i+1]\
    \ === \"W\" ||  arr[i+1] === \"w\" ||  arr[i+1] === \"X\" ||  arr[i+1] === \"\
    x\" ||  arr[i+1] === \"Y\" ||  arr[i+1] === \"y\" ||  arr[i+1] === \"Z\" ||  arr[i+1]\
    \ === \"z\" ||  arr[i+1] === \"\xC1\" ||  arr[i+1] === \"\xE1\" ||  arr[i+1] ===\
    \ \"\xC9\" ||  arr[i+1] === \"\xE9\" ||  arr[i+1] === \"\xCD\" ||  arr[i+1] ===\
    \ \"\xED\" ||  arr[i+1] === \"\xD3\" ||  arr[i+1] === \"\xF3\" ||  arr[i+1] ===\
    \ \"\xDA\" ||  arr[i+1] === \"\xFA\" ||  arr[i+1] === \"\xDC\" ||  arr[i+1] ===\
    \ \"\xFC\"){\n            a += c;\n        }\n        return a;\n    },\"\")\n\
    }\n", "  var vowels = ['a','e','i','o','u'];\n  \n  //find vowel position and\
    \ then find consonants position\n  for (var i = 0; i < word.length; i++){\n  \
    \  for (var j = 0; j < vowels.length; j++){\n      if (vowels[j] == word[i]){\n\
    \        var index = word.length - 1 - i;\n        return word[index];\n     \
    \ }\n    }\n  }\n  return \"\";\n}\n", "    var vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    \n    if(word.length <= 1) return '';\n    \n    var lastVowelPos\
    \ = word.indexOf((vowels[vowels.length-1]), 0);\n    var firstVowelPos = word.indexOf(vowels[0],\
    \ 0);\n    \n    if(lastVowelPos === 0 || firstVowelPos === 0){\n        if(lastVowelPos\
    \ === 0) return word[word.length-1];\n        if(firstVowelPos === 0) return word[0];\n\
    \    }\n    \n    return word[Math.min(lastVowelPos, firstVowelPos)];\n}\n", " \
    \   if (word.length === 0) return \"\";\n\n    var vowels = getVowels();\n   \
    \ var start = 0;\n    var end = word.length - 1;\n    var res = \"\";\n\n    while\
    \ (start < end){\n        var v1 = vowels.indexOf(word[start]);\n        var v2\
    \ = vowels.indexOf(word[end]);\n        if (v1 > -1 && v2 < v1){\n           \
    \ return word[start];\n        }\n        if (v1 < v2){\n            start = start\
    \ + 1;\n        }\n        else{\n            end = end - 1;\n        }\n    }\n\
    \    return res;\n}\n", "\tlet aWord = word.split(\"\");\n\tlet vowelArray = [\"\
    A\",\"a\",\"O\",\"o\",\"U\",\"u\"];\n\tlet len = aWord.length;\n\t\n\tif(len ===\
    \ 0){\n\t\treturn \"\";\n\t}\n\t\n\tlet vowelPosition = \"\";\n\tfor(let i=len-1;i>-1;i--){\n\
    \t\tvowelPosition = aWord.lastIndexOf(vowelArray[i],i); \n\t\tif(vowelPosition\
    \ !== -1){\n\t\t\treturn aWord[vowelPosition];\n\t\t}\n\t}\n\t\n\treturn \"\"\
    ;\n}\n", "\tword = word.split(\"\")\n\tlet count = 0\n\tlet vowels = [\"A\",\"\
    E\",\"I\",\"O\",\"U\",\"a\",\"e\",\"i\",\"o\",\"u\"]\n\tlet vowel_index = 0\n\t\
    for(let i = word.length-1; i>=0; i--){\n\t\tfor(let j = 0; j < vowels.length;\
    \ j++){\n\t\t\tif(vowels[j] == word[i]){\n\t\t\t\tcount = count + 1\n\t\t\t\t\
    if(vowel_index < j){\n\t\t\t\t\tvowel_index = j\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    }\n\t\n\treturn word[word.length - (count-1)]\n}", "    var vowels = ['a', 'A',\
    \ 'e','E', 'i','I', 'o','O','u','U'];\n    return vowels.find(function(vowel){\n\
    \        return word.search(vowel) !== -1\n    });\n}\n</code>\n<|/ a dscore=1\
    \ tags=javascript,string |>\n<| a tags=javascript,string |>\nI hope this is helpful.\
    \ \n<code>", "    var vowels = \"aeiouAEIOU\";\n    var vowelPosition = word.match(/[aeiouAEIOU]/g).length\
    \ - 1;\n    var result = [];\n    var found = false;\n    for(var i = 0; i < vowels.length;\
    \ i++){\n        var vowel = vowels[i];\n        var position = word.indexOf(vowel);\n\
    \        if(position > -1){\n            if(position + 1 == vowelPosition || position\
    \ == 0){\n                if(vowelPosition == 0){\n                    result.push(vowel);\n\
    \                    found = true;\n                } else {\n               \
    \     for(var j = position - 2; j < position; j++){\n                        var\
    \ nextVowel = vowels[j];\n                        if(nextVowel == vowel && j -\
    \ position < vowelPosition){\n                            result.push(nextVowel);\n\
    \                            found = true;\n                            break;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return found? result[0] : \"\";\n}\n", "    var\
    \ result = '';\n    var index = word.length - 1;\n    var last_index;\n    var\
    \ last_char;\n    for(let i = 0; i < word.length; i++){\n        let char = word[i];\n\
    \        if(char === 'a' || char === 'e' || char === 'i' || char === 'o' || char\
    \ === 'u'){\n            index--;\n        } else {\n            index++;\n  \
    \      }\n        last_char = word[index];\n        last_index = index;\n    \
    \    if(index > 0){\n            if(index > 1 && char === last_char && word[index-1]\
    \ !== last_char){\n                index--;\n            }\n        }\n      \
    \  if(index !== 0){\n            if(index > 1 && char === last_char && word[index-1]\
    \ !== last_char){\n                index--;\n            }\n        }\n      \
    \  result += word[i];\n    }\n    return result;\n}", "    \n    let vowels =\
    \ ['a','e','i','o','u'];\n    \n    let i = word.length;\n    let j = 0;\n   \
    \ let vowel_found = \"\";\n    \n    while(i>0 && j<vowels.length){\n        if(word.charAt(i-1)\
    \ == vowels[j]){\n            j++;\n        }\n        else if(word.charAt(i-1)\
    \ != vowels[j]){\n            i=0;\n            j=0;\n        }\n        else{\n\
    \            i--;\n            vowel_found = vowels[j];\n        }\n    }\n  \
    \  return vowel_found;\n}\n", "    // let vowels=[\"a\",\"e\",\"i\",\"o\",\"u\"\
    ,\"A\",\"E\",\"I\",\"O\",\"U\"];\n    let vowels=[\"a\",\"A\",\"e\",\"E\",\"i\"\
    ,\"I\",\"o\",\"O\",\"u\",\"U\"];\n    let consonants=[\"B\",\"C\",\"D\",\"F\"\
    ,\"G\",\"H\",\"J\",\"K\",\"L\",\"M\",\"N\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"V\"\
    ,\"W\",\"X\",\"Y\",\"Z\"];\n    let i=0;\n    for(i=0;i<consonants.length;i++){\n\
    \        if(word.indexOf(consonants[i])==-1){\n            console.log(\"Consonant\
    \ not found\",consonants[i]);\n            break;\n        }\n    }\n    let consonants_count=word.indexOf(consonants[i]);\n\
    \    console.log(\"Consonant index\",consonants_count);\n    \n    for(i=consonants_count-1;i>=0;i--){\n\
    \        if(vowels.indexOf(word.charAt(i))!=-1){\n            return word.charAt(i);\n\
    \        }\n    }\n    return \"\";\n}\n", "    if(!word.length) return \"\";\n\
    \    var vowels_before = vowels.map(function(v){\n        var rslt = word.slice(-v.length);\n\
    \        if(rslt.match(\"^\"+v+\"|\"+v.charAt(0)+v+\"$\")){\n            return\
    \ v.charAt(0);\n        }\n        return v;\n    });\n    var vowels_after =\
    \ vowels.map(function(v){\n        var rslt = word.slice(0, word.length-v.length);\n\
    \        if(rslt.match(\"^\"+v+\"|\"+v.charAt(0)+v+\"$\")){\n            return\
    \ v.charAt(0);\n        }\n        return v;\n    });\n    var vowels = vowels_after.concat(vowels_before);\n\
    \    var index = vowels.indexOf(\"U\") + 1;\n    if(index == vowels.length) index\
    \ = 0;\n    return vowels[index];\n}", "  \n  //Your code here\n  \n  if(word.length===0){\n\
    \    return \"\";\n  }\n  \n  let vowels=[\"a\",\"e\",\"i\",\"o\",\"u\"];\n  \n\
    \  let vowelCounts={};\n  \n  let lastVowel=null;\n  \n  word.split(\"\").forEach((letter)=>{\n\
    \    \n    if(vowels.includes(letter)){\n      vowelCounts[letter]=vowelCounts[letter]?vowelCounts[letter]+1:1;\n\
    \      lastVowel=letter;\n    }\n    \n  });\n  \n  vowelCounts[\"e\"]=vowelCounts[\"\
    e\"]?vowelCounts[\"e\"]-1:1;\n  \n  let keys=Object.keys(vowelCounts);\n  \n \
    \ for(let i=0;i<keys.length;i++){\n    if(vowelCounts[keys[i]]>=vowelCounts[lastVowel]){\n\
    \      return keys[i];\n    }\n  }\n  \n  return \"\";\n  \n}\n", "\tvar vowel_map\
    \ = ['a','e','i','o','u'];\n\t\n\tvar vowel_left = [];\n\tvar vowel_right = [];\n\
    \tvar wordLength = word.length;\n\t\n\tfor(var i=0; i<wordLength; i++){\n\t\t\
    var c = word.charAt(i).toUpperCase();\n\t\tif(vowel_map.indexOf(c) == -1) break;\n\
    \t\tif(vowel_left.indexOf(c) == -1) vowel_left.push(c);\n\t\tif(vowel_right.indexOf(c)\
    \ == -1) vowel_right.push(c);\n\t}\n\t\n\tvar left_index = vowel_left.indexOf(vowel_left[vowel_left.length-1]);\n\
    \tvar right_index = vowel_right.indexOf(vowel_right[0]);\n\t\n\tif(left_index\
    \ >= 0) return vowel_left[left_index];\n\tif(right_index >= 0) return vowel_right[0];\n\
    \t\n\treturn \"\";\n}\n\n", "  if(word.length < 3){\n    return \"\";\n  }\n\n\
    \  var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var last_letter = word[word.length-1];\n\
    \  var second_last_letter = word[word.length-2];\n  var closest_index = -1;\n\n\
    \  for(var i = 0; i<word.length; i++){\n    var letter = word[i];\n    if(vowels.indexOf(letter)\
    \ !== -1){\n      closest_index = i;\n      break;\n    }\n  }\n  \n  if(closest_index\
    \ === -1){\n    return \"\";\n  }\n  \n  var first_letter_right_to_closest_vowel\
    \ = word[closest_index+1];\n  \n  if(vowels.indexOf(first_letter_right_to_closest_vowel)\
    \ === -1){\n    return \"\";\n  }\n  \n  var first_letter_left_to_closest_vowel\
    \ = word[closest_index-1];\n  \n  if(vowels.indexOf(first_letter_left_to_closest_vowel)\
    \ === -1){\n    return \"\";\n  }\n  \n  var first_letter_after_closest_vowel\
    \ = word[closest_index+2];\n  \n  if(vowels.indexOf(first_letter_after_closest_vowel)\
    \ === -1){\n    return \"\";\n  }\n  \n  var second_letter_right_to_closest_vowel\
    \ = word[closest_index+3];\n  \n  if(vowels.indexOf(second_letter_right_to_closest_vowel)\
    \ === -1){\n    return \"\";\n  }\n  \n  var second_letter_left_to_closest_vowel\
    \ = word[closest_index-2];\n  \n  if(vowels.indexOf(second_letter_left_to_closest_vowel)\
    \ === -1){\n    return \"\";\n  }\n  \n  var second_letter_after_closest_vowel\
    \ = word[closest_index-3];\n  \n  if(vowels.indexOf(second_letter_after_closest_vowel)\
    \ === -1){\n    return \"\";\n  }\n  \n  return word[closest_index];\n}\n", " \
    \ let vowel = \"a\"\n  let index = 0\n  for(let i =word.length-1; i >=0; i--){\n\
    \    if(vowel.localeCompare(word[i]) >= 0){\n      vowel = word[i]\n      index\
    \ = i\n    }\n  }\n  return vowel\n}\n", "  return word.match(/[aeiou]{2}$/) ?\
    \ word.match(/[aeiou]{2}$/)[0] : '';\n}\n", "    let vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\", \"y\"];\n    let rightVowelIndex = -1;\n    let rightVowel\
    \ = 0;\n    let leftVowelIndex = -1;\n    let leftVowel = 0;\n    let flag = false;\n\
    \    for(let i=0; i<word.length; i++){\n        if(word[i]===\"y\"){\n       \
    \     flag = true;\n        }\n        if(flag){\n            break;\n       \
    \ }\n        for(let j=0; j<vowels.length; j++){\n            if(word.charAt(i)==vowels[j]){\n\
    \                rightVowelIndex = i;\n                rightVowel = vowels[j];\n\
    \                flag = true;\n            }\n        }\n        for(let j=0;\
    \ j<vowels.length; j++){\n            if(word.charAt(i)==vowels[j]){\n       \
    \         leftVowelIndex = i;\n                leftVowel = vowels[j];\n      \
    \          flag = true;\n            }\n        }\n    }\n    if(rightVowelIndex===-1\
    \ && leftVowelIndex===-1){\n        return \"\";\n    }\n    for(let i=0; i<word.length;\
    \ i++){\n        if(word.charAt(i)==rightVowel){\n            return rightVowel;\n\
    \        }\n        if(word.charAt(i)==leftVowel){\n            return leftVowel;\n\
    \        }\n    }\n    return \"\";\n}\n", "  var result=\"\";\n  for(var i=word.length;i>0;i--){\n\
    \    if ( word.charCodeAt(i-1)>=97 && word.charCodeAt(i-1)<=122 ||\n        word.charCodeAt(i)>=65\
    \ && word.charCodeAt(i)<=90 ||\n        word.charCodeAt(i)>=97 && word.charCodeAt(i)<=122\
    \ ){\n      result+=String.fromCharCode(word.charCodeAt(i-1));\n    }\n  }\n \
    \ return result;\n}\n", "\tlet index = 0\n\tconst vowelsAtTheRight = word.match(/[aeiouy]+/g)\n\
    \tfor (const v of vowelsAtTheRight){\n\t\tindex = word.lastIndexOf(v)\n\t\tif\
    \ (index >= 0){\n\t\t\tbreak\n\t\t}\n\t}\n\tconst beforeLastVowel = word.slice(index).match(/[aeiouy]+/g)\n\
    \tconst lastVowel = word.slice(index).match(/[aeiouy][aeiouy]/g)\n\tif (beforeLastVowel\
    \ && lastVowel){\n\t\treturn lastVowel[0]\n\t} else if (beforeLastVowel){\n\t\t\
    return beforeLastVowel[0]\n\t} else if (lastVowel){\n\t\treturn lastVowel[0]\n\
    \t} else {\n\t\treturn \"\"\n\t}\n}\n", "    let vowels = \"aeiou\";\n    let\
    \ vowels_arr = [...vowels];\n    let vowels_len = vowels_arr.length;\n    let\
    \ consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let consonants_arr = consonants.split(\"\
    \");\n    let consonants_len = consonants_arr.length;\n    let index = vowels_arr.indexOf(word[word.length-1]);\n\
    \    let vowel_chars = [];\n    for(let i = 0; i<word.length; i++){\n        if(index\
    \ != -1 && index != vowels_arr.indexOf(word[i])){\n            index = -1;\n \
    \           break;\n        }\n        else if(index == -1 && consonants_arr.indexOf(word[i])\
    \ != -1){\n            index = consonants_arr.indexOf(word[i]);\n        }\n \
    \   }\n    let first_vowel = vowels_arr[index];\n    for(let i=word.length-1;\
    \ i>=0; i--){\n        if(vowels_arr[index] == vowels_arr[i]){\n            vowel_chars.push(vowels_arr[i]);\n\
    \        }\n        else if(vowels_arr[index] < vowels_arr[i]){\n            vowel_chars.pop();\n\
    \        }\n        else if(vowels_arr[index] > vowels_arr[i]){\n            vowel_chars.shift();\n\
    \        }\n    }\n    if(vowel_chars.length === 0){\n        return \"\";\n \
    \   }\n    return vowel_chars.join(\"\");\n}", "  let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"];\n  let vowelsCount = vowels.reduce((a,b)=>a+word[b].toUpperCase().length,0)\n\
    \  let consonants = word.length - vowelsCount;\n  if(consonants===0) return \"\
    \";\n  let vowelsLeft = vowels.length;\n  for(let i =consonants-1; i>=0 ; i--){\n\
    \    if(vowels[i] !== \"i\" && vowels[i] !== \"e\" && vowels[i] !== \"o\" && vowels[i]\
    \ !== \"u\"){\n      vowelsLeft--;\n      break;\n    }\n  }\n  return vowels[vowelsLeft\
    \ + 1]\n}\n", "    var letter = word.charAt(word.length-1);\n    var vowel = \"\
    AEIOUaeiou\";\n    if(vowel.includes(letter)){\n        return letter;\n    }\n\
    \    letter = word.charAt(word.length-2);\n    if(vowel.includes(letter)){\n \
    \       return letter;\n    }\n    letter = word.charAt(word.length-3);\n    if(vowel.includes(letter)){\n\
    \        return letter;\n    }\n    letter = word.charAt(word.length-4);\n   \
    \ if(vowel.includes(letter)){\n        return letter;\n    }\n    letter = word.charAt(word.length-5);\n\
    \    if(vowel.includes(letter)){\n        return letter;\n    }\n    return \"\
    \";\n}\n</code>\n<|/ a tags=javascript,string |>\n<| c |>\nThis is nice! But what\
    \ if someone entered a word that is not a vowel? For example `\"ab\"` the function\
    \ will return `\"\"`\n<|/ c |>\n<| c |>\nYou right! I edited my answer.\n<|/ c\
    \ |>\n<| a tags=javascript,string |>\nI know this is a late reply, but this may\
    \ help someone!\n<code>\nconst vowels = [ 'a', 'e', 'i', 'o', 'u' ];\n", "  if(word.indexOf(\"\
    a\") != -1 && word.indexOf(\"z\") != -1 && word.indexOf(\"A\") != -1 && word.indexOf(\"\
    Z\") != -1 && word.indexOf(\"0\") != -1 && word.indexOf(\"9\") != -1){\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [ \"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let vowels_before\
    \ = word.substr(0,word.length-1);\n    let consonants_before = vowels_before.substr(0,vowels_before.length-1);\n\
    \    let vowels_after = word.substr(word.length-1, word.length);\n    let consonants_after\
    \ = vowels_after.substr(word.length-1, word.length);\n    if(consonants_before.indexOf(vowels_after)\
    \ > -1){\n      return vowels_after;\n    }\n    else if(consonants_after.indexOf(vowels_before)\
    \ > -1){\n      return vowels_before;\n    }\n  }\n  else return \"\";\n}\n",
  "   var vowels = /^[aeiouAEIOU]$/;\n   var vowels_count = word.match(vowels).length;\n\
    \   var closest_vowel = word.substr(-1);\n   if(vowels_count > 0){\n      return\
    \ closest_vowel;\n   }\n   else {\n      return \"\";\n   }\n}\n", "  let len\
    \ = word.length;\n  let result = [];\n  let vowels = new Set([ 'a', 'A', 'e',\
    \ 'i', 'I', 'o', 'O', 'u', 'U' ]);\n  for(let i = len-1; i >= 0; i--){\n    if(vowels.has(word.charAt(i)))\
    \ {\n      result.push(word.charAt(i));\n      break;\n    }\n  }\n  if(result.length\
    \ < 2)\n    return \"\";\n  return result.join('');\n}\n", "\tif(word.length <\
    \ 2)\n\t\treturn \"\";\n\tconst vowels = \"aeiouAEIOU\";\n\tlet right = 0;\n\t\
    let left = 0;\n\tfor(let i = word.length-1; i>=0; i--){\n\t\tconst letter = word[i];\n\
    \t\tconst index = vowels.indexOf(letter);\n\t\tif(index > -1){\n\t\t\tif(index\
    \ > right && index < left){\n\t\t\t\tright = index;\n\t\t\t\tleft = 0;\n\t\t\t\
    }else if(index > left){\n\t\t\t\tleft = index;\n\t\t\t}\n\t\t}\n\t}\n\tif(right\
    \ < left)\n\t\treturn \"\";\n\treturn word[left+1];\n}\n", "    vowel = word[word.length-1];\n\
    \    word = word.replace(/[^aeiou]/g, \"\");\n    word = word.split(\"\");\n \
    \   word.sort((a,b) => a<b?-1:(a>b?1:0));\n    if(word[0]===\"a\" || word[0]===\"\
    e\" || word[0]===\"i\" || word[0]===\"o\" || word[0]===\"u\"){\n        \n   \
    \ }else{\n        \n    }\n    \n    \n}\n\n", "  let vowel = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"];\n  let vowels = vowel.slice(0,5);\n  let consonant = [\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  let consonant\
    \ = consonant.slice(0,5);\n\n  let vowel_found = vowels.findIndex(v => word.substr(word.length-1,1).includes(v));\n\
    \  let consonant_found = consonant.findIndex(v => word.substr(word.length-1,1).includes(v));\n\
    \n  let res = word.substr(0, word.length-1);\n\n  let cons_index = consonant_found;\n\
    \  res += vowels[vowel_found+1];\n\n  return res;\n}\n", "  var a = word.split(\"\
    \");\n  var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var vowelCount =\
    \ 0;\n  var vowelIndex = 0;\n  var vowelIndexTwo = 0;\n  var vowelIndexThree =\
    \ 0;\n  for (var i = 0; i < a.length; i++){\n    if (vowels.indexOf(a[i]) > -1){\n\
    \      vowelCount++;\n      if (vowelIndex > 0) {\n        vowelIndex--;\n   \
    \   }\n      if (vowelIndexTwo < 2){\n        vowelIndexTwo++;\n      }\n    \
    \  if (vowelIndexThree < 3){\n        vowelIndexThree++;\n      }\n    }\n  }\n\
    \  for (var i = a.length - 1; i >= 0; i--){\n    if (vowels.indexOf(a[i]) > -1){\n\
    \      vowelCount--;\n      if (vowelIndex >= 0) {\n        vowelIndex--;\n  \
    \    }\n      if (vowelIndexTwo > 0){\n        vowelIndexTwo--;\n      }\n   \
    \   if (vowelIndexThree > 0){\n        vowelIndexThree--;\n      }\n    }\n  }\n\
    \  if (vowelCount <= 0){\n    return \"\";\n  }\n  else {\n    return vowels[(vowelIndexTwo\
    \ + vowelIndexThree) % vowels.length];\n  }\n}\n", "  let vowels = ['a','e','i','o','u'];\n\
    \  let lastVowel = '';\n  \n  for(let i = 0; i < word.length; i++){\n    if(word.charAt(i)\
    \ === lastVowel){\n      continue;\n    }\n    if(vowels.indexOf(word.charAt(i))\
    \ > -1 && vowels.indexOf(word.charAt(i) + 1) === -1){\n      lastVowel = word.charAt(i);\n\
    \      break;\n    }\n  }\n\n  return lastVowel;\n}\n", "    // Your code here\n\
    \    var vowels = word.split('').map(function(x){return x.toUpperCase()});\n \
    \   var consonants = ['B','C','D','F','G','J','L','M','N','P','R','S','T','V','W','Y']\n\
    \    var result = [];\n    vowels.forEach(function(x) { \n        var pos = consonants.indexOf(x);\n\
    \        if(pos >= 0) {\n            result.push(x);\n        }\n    });\n   \
    \ var vowel = '';\n    result.forEach(function(x){\n        if(vowel == x) {\n\
    \            return ;\n        }\n        vowel = x;\n    });\n    return vowel;\n\
    }\n", "  var vowels = ['A','E','I','O','U'];\n  var consonants = word.slice(0,\
    \ -1);\n  var vowels_count = vowels.length;\n  \n  if(consonants.search(vowels[0])\
    \ !== -1 || consonants.search(vowels[vowels_count - 1]) !== -1){\n    return \"\
    \";\n  }\n  \n  var consonant_count = 0;\n  var consonants_length = consonants.length;\n\
    \  \n  for(var i = consonants_length; i >= 1; i--){\n    if(vowels.indexOf(consonants.charAt(i))\
    \ !== -1){\n      consonant_count = i;\n      break;\n    }\n  }\n  \n  var nearest_consonant\
    \ = consonants.charAt(consonant_count - 1);\n  \n  var vowel_distance = 0;\n \
    \ \n  for(var i = consonants_length; i >= 1; i--){\n    if(vowels.indexOf(consonants.charAt(i))\
    \ !== -1){\n      vowel_distance += 1;\n    }\n  }\n  \n  for(var i = consonants_length;\
    \ i >= 1; i--){\n    if(vowels.indexOf(consonants.charAt(i)) !== -1){\n      if(vowel_distance\
    \ > nearest_consonant.length){\n        return consonants.charAt(consonant_count\
    \ - 1);\n      }\n      else if(vowel_distance < nearest_consonant.length){\n\
    \        return consonants.charAt(consonant_count + 1);\n      }\n    }\n  }\n\
    \  \n  return \"\";\n}\n", "    word = word.split(\"\").filter(function(v){\n\
    \        return v !== \" \";\n    });\n    if(word[0] === \"a\" || word[0] ===\
    \ \"e\" || word[0] === \"i\" || word[0] === \"o\" || word[0] === \"u\"){\n   \
    \     return word[0];\n    }\n    let lastVowel = \"a\";\n    let lastVowelIndex\
    \ = -1;\n    for(i = word.length-1; i >= 0; i--){\n        let currentVowel =\
    \ word[i];\n        if(currentVowel === \" \"){\n            word[i] = currentVowel;\n\
    \            break;\n        }\n        if(currentVowel[0] === lastVowel[0] &&\
    \ currentVowel !== lastVowel){\n            word[i] = currentVowel;\n        \
    \    break;\n        }\n        lastVowel = currentVowel;\n        lastVowelIndex\
    \ = i;\n    }\n    return word.slice(-lastVowelIndex).toString();\n}\n", "   \
    \ var firstVowel = word[word.length-1]\n    var lastVowel = word[word.length-2]\n\
    \    for(var i=word.length-1;i>=1;i--){\n        if(word[i]==\"a\" || word[i]==\"\
    e\" || word[i]==\"i\" || word[i]==\"o\" || word[i]==\"u\" || word[i]==\"A\" ||\
    \ word[i]==\"E\" || word[i]==\"I\" || word[i]==\"O\" || word[i]==\"U\"){\n   \
    \         var distance1 = Math.abs(i-firstVowel)\n            if(distance1>word.length){\n\
    \                distance1=word.length\n            }\n            var distance2\
    \ = Math.abs(i-lastVowel)\n            if(distance2>word.length){\n          \
    \      distance2=word.length\n            }\n            if(distance1<distance2){\n\
    \                return word[i]\n            }\n        }\n    }\n    return \"\
    \"\n}\n", "    if (word === \"\" || word === undefined){\n        return \"\"\n\
    \    }\n    const firstLetter = word.slice(0,1)\n    const secondLetter = word.slice(1)\n\
    \    let vowel = \"\"\n    if(vowels.includes(firstLetter)){\n        vowel =\
    \ firstLetter\n    }\n    if (vowels.includes(secondLetter)){\n        vowel =\
    \ secondLetter\n    }\n    return vowel\n}\n", "    let arr=[];\n    for(let i=word.length-1;i>=0;i--){\n\
    \        if(i!=0){\n            if((word[i]==\"a\")||(word[i]==\"e\")||(word[i]==\"\
    i\")||(word[i]==\"o\")||(word[i]==\"u\")&&(word[i-1]==\"a\")||(word[i-1]==\"e\"\
    )||(word[i-1]==\"i\")||(word[i-1]==\"o\")||(word[i-1]==\"u\")){\n            \
    \    arr.push(word[i]);\n            }\n        }\n    }\n    let vowel;\n   \
    \ for(let i=0;i<arr.length;i++){\n        if(arr[i]!=undefined){\n           \
    \ vowel=arr[i];\n            break;\n        }\n    }\n    return vowel;\n}\n",
  "\tvar i, vowels = ['a', 'e', 'i', 'o', 'u'];\n\tfor (i = word.length-1; i>=0; i--){\n\
    \t\tif(vowels.indexOf(word[i]) > -1){\n\t\t\treturn word[i];\n\t\t}\n\t}\n\treturn\
    \ '';\n}\n\n", "    word = word.toLowerCase();\n    vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"];\n    \n    \n    \n    var vowels = word.match(/[aeiou]/gi)\
    \ || [];\n    \n    var last_vowel_pos = word.lastIndexOf(vowels[vowels.length-1]);\n\
    \    \n    if (vowels.length < 1 || last_vowel_pos < 0) {\n        return \"\"\
    ;\n    }\n    \n    var last_vowel = word.substring(last_vowel_pos+1, last_vowel_pos+2);\n\
    \    \n    \n    \n    \n    \n    for (var i=word.length-1; i>=0; i--){\n   \
    \     var char = word.charAt(i);\n        var vowel = vowels.indexOf(char);\n\
    \        \n        \n        if (vowel > 0 && char != last_vowel) {\n        \
    \    return char;\n        }\n    }\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n}\n", "    word = word.toLowerCase();\n    \n    let vowels = /[aeiou]/g;\n\
    \    let consonants = /[^aeiou]/g;\n    \n    //search the word from the right\
    \ side\n    let index = word.search(consonants);\n    \n    let result = \"\"\
    ;\n    \n    if(index != -1){\n        //check if the word has two consonants\n\
    \        //because if not, the first consonant will always be the closest vowel\n\
    \        if(word.length == 2){\n            //if word has two consonants, the\
    \ first consonant is the closest vowel\n            result = word[0].toLowerCase();\n\
    \            \n            if(vowels.test(result)){\n                return result;\n\
    \            }\n            \n            return \"\";\n        }\n        //if\
    \ word has more than 2 consonants\n        //search the words from the right side\
    \ of the word\n        index = word.search(consonants, index + 1);\n        \n\
    \        if(index != -1){\n            result = word[index];\n            \n \
    \           if(vowels.test(result)){\n                return result;\n       \
    \     }\n            \n            return \"\";\n        }\n    }\n    \n    return\
    \ \"\";\n}\n", "    word = word.toLowerCase();\n    var vowels = [\"a\",\"e\"\
    ,\"i\",\"o\",\"u\"];\n    var firstCon = word.slice(0, 1);\n    var lastCon =\
    \ word.slice(-1);\n    var vowelsAfterFirstCon = vowels.filter(function(elem){\n\
    \        return elem == firstCon;\n    });\n    var vowelsAfterLastCon = vowels.filter(function(elem){\n\
    \        return elem == lastCon;\n    });\n    var closestVowel;\n    if (vowelsAfterFirstCon.length\
    \ > 0 && vowelsAfterLastCon.length > 0){\n        closestVowel = Math.abs(vowelsAfterFirstCon.length\
    \ - vowelsAfterLastCon.length);\n    }\n    else if (vowelsAfterFirstCon.length\
    \ > 0){\n        closestVowel = vowelsAfterFirstCon.length;\n    }\n    else if\
    \ (vowelsAfterLastCon.length > 0){\n        closestVowel = vowelsAfterLastCon.length;\n\
    \    }\n    else if (firstCon == lastCon){\n        closestVowel = 0;\n    }\n\
    \    else {\n        closestVowel = Math.abs(vowels.length - 1);\n    }\n    return\
    \ vowels[closestVowel];\n}\n\nvar vowel1 = get_closest_vowel(\"yogurt\");", " \
    \   \n    //Using a map to store vowel and consonant\n    let map = new Map();\n\
    \    map.set(\"a\",0);\n    map.set(\"e\",1);\n    map.set(\"i\",2);\n    map.set(\"\
    o\",3);\n    map.set(\"u\",4);\n    map.set(\"A\",0);\n    map.set(\"E\",1);\n\
    \    map.set(\"I\",2);\n    map.set(\"O\",3);\n    map.set(\"U\",4);\n    \n \
    \   //We have two consonants to check\n    let consonant_start = word.length-1;\n\
    \    let consonant_end = word.length;\n    \n    //We start from the right and\
    \ work downwards. So we check if the current character is \"u\", if it is, remove\
    \ it and continue with the rest of consonants.\n    while(consonant_start >= 0\
    \ && map.has(word[consonant_start])){\n        consonant_start --;\n    }\n  \
    \  while(consonant_end < word.length && map.has(word[consonant_end])){\n     \
    \   consonant_end ++;\n    }\n    \n    //Check if the two consonants are in the\
    \ word\n    if(consonant_start > -1 && consonant_end < word.length){\n       \
    \ \n        //Check if the word starts with vowel at the right or beginning\n\
    \        let first_vowel_index = word[consonant_start].toUpperCase().charCodeAt(0);\n\
    \        let last_vowel_index = word[consonant_end].toUpperCase().charCodeAt(0);\n\
    \        let vowel_count = 0;\n        if(first_vowel_index < 65 && last_vowel_index\
    \ >= 65){\n            vowel_count++;\n        }\n        if(first_vowel_index\
    \ >= 65 && last_vowel_index < 65){\n            vowel_count++;\n        }\n  \
    \      if(first_vowel_index < 97 && last_vowel_index >= 97){\n            vowel_count++;\n\
    \        }\n        if(first_vowel_index >= 97 && last_vowel_index < 97){\n  \
    \          vowel_count++;\n        }\n        if(first_vowel_index < 123 && last_vowel_index\
    \ >= 123){\n            vowel_count++;\n        }\n        if(first_vowel_index\
    \ >= 123 && last_vowel_index < 123){\n            vowel_count++;\n        }\n\
    \        \n        //Check if the word ends with vowel at the right or beginning\n\
    \        let first_vowel_index2 = word[consonant_start].toUpperCase().charCodeAt(0);\n\
    \        let last_vowel_index2 = word[consonant_end].toUpperCase().charCodeAt(0);\n\
    \        let vowel_count2 = 0;\n        if(first_vowel_index2 < 65 && last_vowel_index2\
    \ >= 65){\n            vowel_count2++;\n        }\n        if(first_vowel_index2 "]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
