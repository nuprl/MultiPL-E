name: HumanEval_36_fizz_buzz
language: js
prompt: "//Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
  // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
  \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n \
  \ assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
  \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
  }\n\ntest();"
completions: ["  var count=0;\n  for(var i=1;i<=n;i++){\n    if(i%11===0 || i%13===0){\n\
    \      count+=1;\n    }\n  }\n  return count;\n}\n", "    if(n<0) return 0;\n\
    \    if(n==0) return 0;\n    if(n%11==0 || n%13==0) return n==0?0:n==7?2:3;\n\
    \    return fizz_buzz(parseInt(n/11)+1)+fizz_buzz(parseInt(n/13)+1)\n}\n</code>\n\
    <|/ a tags=fizzbuzz,javascript |>\n<| a dscore=0 |>\nThis is a recursive solution\
    \ based upon the algorithm given in the comments and to print FizzBuzz in JavaScript\
    \ I have used the String.repeat() method.\nThe function takes the number passed\
    \ as parameter and returns the string FizzBuzz if it satisfies the requirements,\
    \ otherwise it returns the original number passed in.\nThe number passed in is\
    \ assumed to satisfy the FizzBuzz requirement to be divisible by both 11 and 13\n\
    <code>", "\treturn n % 11 === 0 ? 0 : n % 13 === 0 ? 1 : 2;\n}\n", "  let count\
    \ = 0; \n  for (let x = n; x > 0; x /= 11) {\n    if (x % 11 == 0) count++;\n\
    \  }\n  for (let x = n; x > 0; x /= 13) {\n    if (x % 13 == 0) count++;\n  }\n\
    \  return count;\n}\n", "  var count = 0;\n  for(var i = n; i >= 100; i--){\n\
    \    if(i % 11 == 0 && i % 13 == 0){\n      count = count + 1;\n    }\n  }\n \
    \ return count;\n}\n", "  return n/11*13 + n/13\n}\n", "    let counter = 0;\n\
    \    \n    for(let i = n; i > 0; i/= 11)\n        counter++;\n    \n    for(let\
    \ i = n; i > 0; i/= 13)\n        counter++;\n    \n    return counter;\n}\n",
  "  return +((n%11)==0) || (n%13==0);\n}", "  var arr = [];\n  for(var i=n; i>0;\
    \ i--){\n    var j = i % 11;\n    var k = i % 13;\n    arr[i] = j > 0 && j ==\
    \ k ? \"FizzBuzz\" : j > 0 ? \"Fizz\" : j == 0 ? \"Buzz\" : j;\n  }\n  return\
    \ arr.indexOf(\"FizzBuzz\");\n}\n  ", "  var result = [];\n  for(var i=0;i<n;i++){\n\
    \    if(i%3===0 || i%5===0 || i%7===0){\n      result.push(i);\n    }\n  }\n \
    \ return result.length;\n}\n", "  if(n<11) return (n%11==0)?(n+\"\"):(n);\n  if(n>=13)\
    \ return (n%13==0)?(n+\"\"):(n);\n  return (n%11==0)?(n-11+\"\"):(n-11);\n}\n",
  "  if(n < 10) return n;\n  if(n < 100) return n - 9;\n  if(n < 1000) return n -\
    \ 89;\n  if(n < 10000) return n - 791;\n  if(n < 100000)return n - 899;\n  if(n\
    \ < 1000000) return n - 9791;\n  if(n < 10000000) return n - 9989;\n  if(n < 100000000)\
    \ return n - 99979;\n  if(n < 1000000000) return n - 99999;\n  return n;\n}\n\
    </code>\n<|/ a tags=recursion,algorithm,javascript,fizzbuzz |>\n<| c |>\nI don't\
    \ want to sound like a jerk, but I really don't think this satisfies the conditions.\
    \ For example, `fizz_buzz(10000)` should return \"FizzBuzz BuzzFizz BuzzBuzz BuzzBuzz\"\
    \ but your code returns \"BuzzFizz FizzBuzz BuzzFizzBuzz FizzBuzz FizzBuzz FizzBuzz\"\
    .\n<|/ c |>\n<| c |>\nThat is true but as mentioned in another answer I haven't\
    \ figured out a way to do it without making an array and pushing into it every\
    \ number up to 1000000000. Also, you can see that I have implemented the fizz_buzz\
    \ algorithm from another solution so you can see how it works. I was just implementing\
    \ the same algorithm but using if statements instead of ternary operators. I believe\
    \ it can be implemented without creating an array but it will take longer because\
    \ of the amount of code needed to be written.\n<|/ c |>\n<| c |>\nYou can do it\
    \ without an array by just changing the value of `result` and recursing down.\
    \ But you still have to do some sort of array anyway.\n<|/ c |>\n<| c |>\nOh I\
    \ see! Yeah I didn't think about just changing the result variable but I see you\
    \ meant just changing the current number and recursing down. Yes, I think that's\
    \ what would work. I'll edit my answer to reflect that.\n<|/ c |>\n<| c |>\nOh\
    \ I see! Yeah I didn't think about just changing the result variable but I see\
    \ you meant just changing the current number and recursing down. Yes, I think\
    \ that's what would work. I'll edit my answer to reflect that.\n<|/ c |>\n<| a\
    \ tags=recursion,algorithm,javascript,fizzbuzz dscore=2 |>\nA bit of a hack, but\
    \ works perfectly. Just change 'result' to 'result2' and recursively call the\
    \ function while checking conditions. Then concatenate the result and ", "  if(n\
    \ < 3){\n    return n\n  }\n  return fizz_buzz(n - 3) + fizz_buzz(n - 7) + fizz_buzz(n\
    \ - 11)\n}\n", "  if (n<0 || n%11==0){\n    n=0;\n  }\n  if (n<10 && n>0){\n \
    \   return 0;\n  }\n  if (n<7){\n    return 1;\n  }\n  if (n%13==0){\n    return\
    \ 2;\n  }\n  if (n%11==0){\n    return 3;\n  }\n  return 4;\n}\n", "  if (n <\
    \ 0) return 0;\n  if (n == 1) return 1;\n  if (n % 10 == 1 && n % 100 != 11) return\
    \ 0;\n  if (n % 10 == 2 && n % 100 != 12) return 0;\n  if (n % 10 == 7 || n %\
    \ 10 == 8) return 2;\n  if (n % 10 == 9 || n % 10 == 1) return 3;\n  if (n % 100\
    \ != 11) return 4;\n  return Math.ceil(n / 10);\n}</code>\n\nEdit: I thought I\
    \ would add a little extra explanation on the answer given by user3280344 which\
    \ I upvoted, but I don't have enough reputation for it to show.\nThis function\
    \ works because it is counting the number of times you see a specific digit in\
    \ each of the integers between 1 and n. This method works because when you see\
    \ a number divisible by 11, you are guaranteed to be able to divide it by 11 without\
    \ losing any information, because it is divisible by 11. \nIf you look at the\
    \ first two lines you can see that in the second line we are finding the number\
    \ of times 7 or 8 appears in that integer. We use that number to know whether\
    \ we are looking for 7 divisible by 11 or not. In the third line we see that we\
    \ are looking for 7 divisible by 11 or 13. The number of times we see this number\
    \ in each of the integers between 1 and n is our answer. \nTo see why this works,\
    \ consider that we are looking for 7 divisible by 11 or 13 and we see that they\
    \ are both in integer 15. 7 is divisible by 11 and 13, so we know that 15 must\
    \ also be divisible by 11. We can then divide the number 15 by 11 without losing\
    \ any information (because it is divisible by 11). We would have lost one zero\
    \ to each of the numbers between 1 and n, but we are only looking for 7. We know\
    \ that the number of times we see 7 in each of the integers between 1 and n is\
    \ 2 (because we are looking for 7 divisible by 11 and 13). \nThis method will\
    \ work the same way for all digits because we are dividing by 10 each time. We\
    \ are dividing by 10 by looking at each of the numbers between 1 and n (by dividing\
    \ by 10 and then finding the remainder) so that means we are looking at each of\
    \ the numbers between 1 and n. We can divide by 10, then by 100, then by 1000,\
    \ etc., etc until we are left with just the number of times we see that specific\
    \ number in each of the integers between 1 and n. \nThe code below shows this\
    \ in action.\n\n<code>", "  var count = 0;\n  for(var i = 1; i <= n; i++){\n \
    \   var mod = i % 11;\n    var div = i % 13;\n    if(mod == 0 || mod == 5 || div\
    \ == 0 || div == 5){\n      count++;\n    }\n  }\n  return count;\n}\n", "   \
    \ for(var i=0;i<=n;i++){\n        if(i%3==0||i%5==0){\n            if(i%3==0&&i%5==0){\n\
    \                if(i%3==0&&(i/3==1||i/3==3)){\n                    console.log(i+\"\
    \ \"+(i/3==1||i/3==3?\"Fizz\":\"Buzz\"));\n                    return 1;\n   \
    \             }\n                else{\n                    console.log(i+\" \"\
    +(i/3==1||i/3==3?\"FizzBuzz\":\"Buzz\"));\n                    return 2;\n   \
    \             }\n            }\n            else{\n                console.log(i+\"\
    \ \"+(i%3==0?\"FizzBuzz\":(i/3==1||i/3==3?\"Fizz\":\"Buzz\")));\n            \
    \    return 3;\n            }\n        }\n    }\n}\n", "  if(n < 0){\n    return\
    \ 0\n  }\n  if(n < 3){\n    return n\n  }\n  if(n % 11 == 0){\n    return 0\n\
    \  }\n  if(n % 13 == 0){\n    return 0\n  }\n  return fizz_buzz(n - 1) + 1\n}\n",
  "  let arr = [];\n  let count = 0;\n  let last = 0;\n  let result = 0;\n  let mod\
    \ = Math.floor(n/13);\n  while (n >= 10) {\n    last = (n%10);\n    if (last ===\
    \ 7) {\n      count++;\n    }\n    arr.push(last);\n    n = Math.floor(n / 10);\n\
    \  }\n  while (count < mod.length){\n    result++;\n  }\n  return result;\n}\n",
  "  let count = 0;\n  while(n > 0){\n    if (n % 11 === 0 || n % 13 === 0) {\n  \
    \    count++;\n    }\n    n = Math.floor(n / 10);\n  }\n  return count;\n}\n",
  "  return Math.ceil(Math.log10(n));\n}\n", "  var count = 0;\n  for(var i = 0; i\
    \ <= n/11; i++){\n    if (n % 11 === 0) count += 1;\n    if (n % 13 === 0) count\
    \ += 1;\n  }\n  return count;\n}\n", "  for(var i = 0; i <= n; i++){\n    if(i\
    \ % 11 == 0) return i+1;\n    if(i % 13 == 0) return i+1;\n  }\n}\n</code>\n<|/\
    \ a tags=javascript,fizzbuzz,algorithm |>\n<| c |>\nThis is exactly how I would\
    \ have done it - it's probably better to write it out as a function than use a\
    \ `for` loop.\n<|/ c |>\n<| c |>\nAgreed, I find this easier to understand than\
    \ the recursive solution.\n<|/ c |>\n<| c |>\nI find this easier to understand\
    \ than any of the other answers, but I do like how you refactored the code into\
    \ 2 functions.\n<|/ c |>\n<| a tags=javascript,fizzbuzz,algorithm |>\nHere's how\
    \ I would do it:\n<code>\nvar count = function(n) {\n    if (n % 11 != 0) return\
    \ 1;\n    if (n % 13 != 0) return 1;\n    return n + count(n / 11);\n};\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThe key here is that once you reach 1, the function\
    \ doesn't need to go any further.\n<|/ c |>\n<| c |>\nOh, I thought that once\
    \ you returned 1, the function stopped, but you never returned 0.\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>", "  var count=0;\n  for(var i=2;i<=n;i++){\n    if(i%11===0||i%13===0)\n\
    \      count++;\n  }\n  return count;\n}\n", "\tif (n<10 && n%11==0 || n<20 &&\
    \ n%13==0) return n; //if it's less than 10 but divisible by 11 or 13, then return\
    \ the number\n\tif (n<100 && n%11==0) return (n-10)/11; //if it's less than 100\
    \ and divisible by 11, then return 10-11\n\tif (n<100 && n%13==0) return (n-100)/13;\
    \ //if it's less than 100 and divisible by 13, then return 100-13\n\tif (n<1000\
    \ && n%11==0) return (n-1000)/11; //if it's less than 1000 and divisible by 11,\
    \ then return 1000-11\n\tif (n<1000 && n%13==0) return (n-1000)/13; //if it's\
    \ less than 1000 and divisible by 13, then return 1000-13\n\tif (n<10000 && n%11==0)\
    \ return (n-10000)/11; //if it's less than 10000 and divisible by 11, then return\
    \ 10000-11\n\tif (n<10000 && n%13==0) return (n-10000)/13; //if it's less than\
    \ 10000 and divisible by 13, then return 10000-13\n}", "    var count = 0;\n \
    \   while (n>0){\n        if (n%11==0 || n%13==0){\n            count++;\n   \
    \     }\n        n = Math.floor(n/10);\n    }\n    return count;\n}", "   var\
    \ result = 0,\n       i;\n   for(i=1;i<=n;i++){\n      if(i%11===0 || i%13===0){\n\
    \         result++;\n      }\n   }\n   return result;\n}\n</code>\n<|/ a |>\n\
    <| a dscore=2 |>\n<code>\n let fizzBuzz = function (num) {\n   if (num === 0)\
    \ {\n      return \"0\";\n   }\n   if (num % 15 === 0 && num % 3 === 0) {\n  \
    \   return \"FizzBuzz\";\n   }\n   if (num % 3 === 0) {\n     return \"Fizz\"\
    ;\n   }\n   if (num % 5 === 0) {\n     return \"Buzz\";\n   }\n   return num;\n\
    \ };\n\n console.log(fizzBuzz(15));\n console.log(fizzBuzz(20));\n console.log(fizzBuzz(25));\n\
    \ console.log(fizzBuzz(50));\n console.log(fizzBuzz(100));</code>\n<|/ a tags=javascript,fizzbuzz\
    \ |>\n<| a tags=javascript,fizzbuzz dscore=2 |>\n<code>\nvar a = 10;\nwhile(a>0){\n\
    \  console.log(Math.ceil(a % 15 == 0) ? \"FizzBuzz\" : Math.ceil(a % 3 == 0) ?\
    \ \"Fizz\" : Math.ceil(a % 5 == 0) ? \"Buzz\" : a);\n  a--;\n}</code>\n<|/ a |>\n\
    <| a tags=javascript,fizzbuzz |>\n<code>\nvar number = 100;\nfor (var i = 0; i\
    \ < number; i++) {\n  var str = Number(i) < 15 && Number(i) % 3 === 0 ? \"Fizz\"\
    \ : \n           Number(i) < 30 && Number(i) % 5 === 0 ? \"Buzz\" : \n       \
    \    Number(i) < 50 && Number(i) % 7 === 0 ? \"FizzBuzz\" : i;\n  console.log(str);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks. I was trying to write one but\
    \ this is much better than the one I wrote\n<|/ c |>\n<| c |>\nwhy not use parseInt?\n\
    <|/ c |>\n<| c |>\nI agree with the parseInt. `Number()` is a constructor and\
    \ you do not need to type cast the number as an integer again. `parseInt` converts\
    \ an integer to a string and returns it.\n<|/ c |>\n<| a tags=javascript,fizzbuzz\
    \ |>\n<code>\nvar num = 100;\nvar str = \"\";\nfor(var i = num; i > 0; i--){\n\
    \ if(i % 15 == 0 && i % 3 == 0){\n  str += ", "    if( n > 0 && n % 11 == 0){\n\
    \        return 1;\n    }\n    if( n > 0 && n % 13 == 0){\n        return 2;\n\
    \    }\n    return 0;\n}\n</code>\n<|/ a tags=javascript,fizzbuzz |>\n<| c |>\n\
    I didn't see your edit before posting, thank you! I'm still not entirely sure\
    \ what this code is doing, but I'm sure I'll figure it out.\n<|/ c |>\n<| c |>\n\
    - I added some explanation to my answer - but if you just read the comments you\
    \ will understand.\n<|/ c |>\n<| a tags=javascript,fizzbuzz |>\n<code>", "  var\
    \ num = [];\n  for(var i=0;i<n;i++){\n    if(num.indexOf(i)===-1){\n      num.push(i);\n\
    \    }\n  }\n  if(num.length < 2 && num.indexOf(4)!==-1 && num.indexOf(5)!==-1\
    \ && num.indexOf(6)!==-1 && num.indexOf(8)!==-1 && num.indexOf(9)!==-1){\n   \
    \ return 3;\n  }\n  else if(num.length<5 && num.indexOf(4)!==-1 && num.indexOf(5)!==-1\
    \ && num.indexOf(6)!==-1 && num.indexOf(7)!==-1 && num.indexOf(8)!==-1 && num.indexOf(9)!==-1){\n\
    \    return 2;\n  }\n  else if(num.length<6 && num.indexOf(4)!==-1 && num.indexOf(5)!==-1\
    \ && num.indexOf(6)!==-1 && num.indexOf(7)!==-1 && num.indexOf(8)!==-1 && num.indexOf(9)!==-1){\n\
    \    return 1;\n  }\n  else if(num.length<8 && num.indexOf(4)!==-1 && num.indexOf(5)!==-1\
    \ && num.indexOf(6)!==-1 && num.indexOf(7)!==-1 && num.indexOf(8)!==-1 && num.indexOf(9)!==-1){\n\
    \    return 0;\n  }\n  else if(num.length<10 && num.indexOf(4)!==-1 && num.indexOf(5)!==-1\
    \ && num.indexOf(6)!==-1 && num.indexOf(7)!==-1 && num.indexOf(8)!==-1 && num.indexOf(9)!==-1){\n\
    \    return num.length;\n  }\n}", "    if (n == 0) return 0;\n    if (n % 11 ==\
    \ 0) return 1;\n    if (n % 13 == 0) return 2;\n    return fizz_buzz(Math.floor(n\
    \ / 10));\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.List;\nimport java.util.Random;\n\npublic class FizBuzz {\n\n\
    \    private List<Integer> numbers = new ArrayList<Integer>();\n\n    public FizBuzz()\
    \ {\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(3);\n\
    \        numbers.add(4);\n        numbers.add(5);\n        numbers.add(6);\n \
    \       numbers.add(7);\n        numbers.add(8);\n        numbers.add(9);\n  \
    \      numbers.add(10);\n        numbers.add(11);\n        numbers.add(12);\n\
    \        numbers.add(13);\n        numbers.add(14);\n        numbers.add(15);\n\
    \        numbers.add(16);\n        numbers.add(17);\n        numbers.add(18);\n\
    \        numbers.add(19);\n        numbers.add(20);\n        numbers.add(21);\n\
    \        numbers.add(22);\n        numbers.add(23);\n        numbers.add(24);\n\
    \        numbers.add(25);\n        numbers.add(26);\n        numbers.add(27);\n\
    \        numbers.add(28);\n        numbers.add(29);\n        numbers.add(30);\n\
    \        numbers.add(31);\n        numbers.add(32);\n        numbers.add(33);\n\
    \        numbers.add(34);\n        numbers.add(35);\n        numbers.add(36);\n\
    \        numbers.add(37);\n        numbers.add(38);\n        numbers.add(39);\n\
    \        numbers.add(40);\n        numbers.add(41);\n        numbers.add(42);\n\
    \        numbers.add(43);\n        numbers.add(44);\n        numbers.add(45);\n\
    \        numbers.add(46);\n        numbers.add(47);\n        numbers.add(48);\n\
    \        numbers.add(49);\n        numbers.add(50);\n    }\n\n    private void\
    \ addFizBuzzNumbers(int n, int low, int high) {\n        if (low == high) {\n\
    \            numbers.add(n);\n        } else {\n            Random rand = new\
    \ Random();\n            int rndInt = rand.nextInt(high - low + 1) + low;\n  \
    \          while (low++ <= high) {\n                if (rndInt % low == 0) numbers.add(n);\n\
    \                else break;\n            }\n        }\n    }\n\n    public void\
    \ generateNumbers(int startNumber) {\n        int lastNumber = 0;\n        while\
    \ (lastNumber <= startNumber) {\n            int number = lastNumber + 1;\n  \
    \          if (numbers.size() > 0 && number % 3 != 0) {\n                numbers.add(number);\n\
    \                numbers.remove(numbers.size", "\tif(n<10) //If n is less than\
    \ 10, return n.\n\t\treturn n;\n\tif(n%11==0 && n%13==0) //If n is divisible by\
    \ 11 and 13, return \"FizzBuzz\".\n\t\treturn \"FizzBuzz\";\n\tif(n%11!=0 && n%13!=0)\
    \ //If n is divisible by 11 or 13, return \"Fizz\".\n\t\treturn \"Fizz\";\n\t\
    if(n%11==0 && n%13!=0){ //If n is divisible by 11 and 13, return \"Buzz\".\n\t\
    \treturn \"Buzz\";\n\t}\n\tif(n%11!=0 && n%13==0){ //If n is divisible by 11 or\
    \ 13, return n.\n\t\treturn n;\n\t}\n\treturn \"N/A\";\n}", "  if(n < 0) return\
    \ 0;\n  if(n === 0 || n === 1) return n;\n  if(n % 11 === 0 && n % 13 === 0) return\
    \ 1;\n  if(n % 11 === 1) return 2;\n  if(n % 13 === 1) return 3;\n  return 0;\n\
    }\n  ", "  var count = 0;\n  for(var i = 1; i < n; i++){\n    var remainder =\
    \ n % i;\n    if(i == 1 && remainder == 11 || i == 3 && remainder == 13){\n  \
    \    count++;\n    }\n  }\n  return count;\n}", "    var num = 0;\n    var counter\
    \ = 0;\n    while(n > 0){\n        counter++\n        n = Math.floor(n / 10)\n\
    \        if(n % 11 == 0){\n            num += counter\n        }\n        if(n\
    \ % 13 == 0){\n            num += counter\n        }\n    }\n    return num\n\
    }\n", "  return n - n % 11 == 0 || n - n % 13 == 0 ? 0 : 2;\n}\n", "  return (((n/11%1)+1)%n)\n\
    }\n", "\treturn ((n%11==0)&&(n%13==0)) || ((n%11!=0)&&(n%13!=0) && n%11!=0);\n\
    }", "  var count = 0;\n  while (n > 0 && n % 11 == 0 && n % 13 == 0) count++,\
    \ n/= 11;\n  while (n > 0 && n % 13 == 0) count++, n/= 13;\n  return count;\n\
    }\n", "  if (n > 100) {\n    return \"\";\n  } else if (n === 0 || n === 100)\
    \ {\n    return n;\n  } else {\n    if (n % 11 === 0 && n % 13 === 0) {\n    \
    \  return n + 1;\n    } else {\n      return n+\"\";\n    }\n  }\n}", "    var\
    \ fizzBuzz = [0,1,2,3,4,5,6,7,8,9];\n    var count = 0;\n    var i = 0;\n    for\
    \ (i; i < n; i++) {\n        if (fizzBuzz.indexOf(i / 11) >= 0 && fizzBuzz.indexOf(i\
    \ / 13) >= 0) {\n            count++;\n        }\n    }\n    return count;\n}\n",
  "  if(n<10)return n\n  if(parseInt(n/11)==n && n%11==0)return 2\n  if(parseInt(n/13)==n\
    \ && n%13==0)return 3\n  return 0\n}\n", "    for(let i=1;i<=n;i++){\n       \
    \ if(parseInt(i.toString().slice(-3)) % 11 == 0 && parseInt(i.toString().slice(-3))\
    \ % 13 == 0){\n            return i;\n        }\n    }\n}\n</cell>\n<text>\nWrite\
    \ a function that returns the sum of all the digits in an integer\n\n</text>\n\
    <cell>", "  let x = n;\n  let y = 1;\n  let z = 0;\n  let a = (n%10===1 && n!==0)||(n%10===0\
    \ && n!==1)?1:0;\n  while (x !== 0){\n    x = x/10;\n    y++;\n    z = (z + (a%2===0)?1:0)%y;\n\
    \    a++;\n  }\n  return z;\n}", "    var fizzbuzz = 0;\n    var i;\n    for (i\
    \ = 0; i <= n; i++) {\n        if (i%11 == 0){\n            fizzbuzz += 1;\n \
    \       } else if (i%13 == 0){\n            fizzbuzz += 3;\n        }\n    }\n\
    \    return fizzbuzz;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\n\
    The code seems to be right, I will try to understand it a little bit and post\
    \ some results.\n<|/ c |>\n<| c |>\nHi, just tested your code and it doesn't work.\
    \ I believe it is because of the way you increment the number. Can you provide\
    \ an example with a counter like `var counter = 0;` `counter += 1;` and then `var\
    \ counter = 0;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter\
    \ += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter +=\
    \ 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\n\
    counter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter\
    \ += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter +=\
    \ 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\n\
    counter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter\
    \ += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter +=\
    \ 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\n\
    counter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter\
    \ += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter +=\
    \ 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\n\
    counter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter\
    \ += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter +=\
    \ 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\n\
    counter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter\
    \ += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter += 1;\ncounter +=\
    \ 1;\ncounter += 1;\n", "  \n  var count = 0, i = 1;\n  var divisible_numbers\
    \ = [];\n  \n  while (i < n) {\n    \n    if(i%11 === 0 || i%13 === 0){\n    \
    \  count++;\n    }\n    \n    divisible_numbers.push(i);\n    i++;\n  }\n  \n\
    \  return count;\n}\n", "  return ((n%11===0 && n%13!==0) || n===0) ? 0 : (((n%11===0\
    \ && n%13===0) || n===0) ? 1 : (n%11!==0 && n%13!==0) ? 2 : (n%11!==0 && n%13===0)\
    \ ? 3 : (n%11===0 && n%13!==0) ? 4 : (n%11===0 && n%13===0) ? 5 : (n%11!==0 &&\
    \ n%13!==0) ? 6 : 7);\n}\n", "  if(n < 0){\n      return 0;\n  }\n  if(n < 3){\n\
    \      return n;\n  }\n  if(n % 11 == 0 || n % 13 == 0){\n      return n + 1;\n\
    \  }\n  return fizz_buzz(n - 1) + fizz_buzz(n - 3) + fizz_buzz(n - 7);\n}\nvar\
    \ fizzbuzz = function(number){\n  if(number < 0){\n    return 0;\n  }\n  if(number\
    \ < 3){\n    return number;\n  }\n  if(number % 11 == 0 || number % 13 == 0){\n\
    \    return number + 1;\n  }\n  return fizzbuzz(number - 1) + fizzbuzz(number\
    \ - 3) + fizzbuzz(number - 7);\n};\nmodule.exports = fizzbuzz;\n},{}],5:[function(_dereq_,module,exports){\n\
    var fizzbuzz = _dereq_('./fizzbuzz');\nvar isPrime = _dereq_('./is_prime');\n\
    var fizzbuzz_prime = fizzbuzz;\n\nfizzbuzz.prime = function(n){\n  if(n < 3){\n\
    \    return isPrime(n);\n  }\n  if(n % 11 == 0 || n % 13 == 0){\n    return isPrime(n);\n\
    \  }\n  return fizzbuzz_prime(n - 1) + fizzbuzz_prime(n - 3) + fizzbuzz_prime(n\
    \ - 7);\n};\n\nmodule.exports = fizzbuzz;\n},{\"./fizzbuzz\":4,\"./is_prime\"\
    :6}],6:[function(_dereq_,module,exports){\nmodule.exports = function(n){\n  if(n\
    \ < 3){\n    return n < 6;\n  }\n  if(n < 9){\n    return true;\n  }\n  if(n %\
    \ 11 == 0 || n % 13 == 0){\n    return false;\n  }\n  if(n % 16 == 0 || n % 26\
    \ == 0){\n    return false;\n  }\n  if(n % 31 == 0 || n % 41 == 0){\n    return\
    \ false;\n  }\n  if(n % 5 == 0 || n % 7 == 0){\n    return false;\n  }\n  if(n\
    \ % 13 == 0){\n    return n % 13 == 0;\n  }\n  return true;\n};\n},{}],7:[function(_dereq_,module,exports){\n\
    var fizzbuzz = _dereq_('./fizzbuzz');\nvar isPrime = _dereq_('./is_prime');\n\
    var fizzbuzz_prime = fizzbuzz;\n\nfizzbuzz.prime = function(n){\n  if(n < 3){\n\
    \    return isPrime(n);\n", "  var count = 0;\n  while (n >= 100 && count < 7)\
    \ {\n    if (n % 10 == 7 && n != 7){\n      count++;\n    }\n    n /= 10;\n  }\n\
    \  while (n >= 11 && count < 7) {\n    if (n % 11 == 7 && n != 7) {\n      count++;\n\
    \    }\n    n /= 11;\n  }\n  while (n >= 13 && count < 7) {\n    if (n % 13 ==\
    \ 7 && n != 7) {\n      count++;\n    }\n    n /= 13;\n  }\n  return count;\n\
    }\n", "  let count = 0;\n  let divisibleBy11 = n % 11;\n  let divisibleBy13 =\
    \ n % 13;\n  while (n !== 0){\n    n = n % 10;\n    if (divisibleBy11 === 0 ||\
    \ divisibleBy13 === 0){\n      count++;\n    }\n    if (divisibleBy11 === 1){\n\
    \      count++;\n    }\n    if (divisibleBy13 === 1){\n      count++;\n    }\n\
    \  }\n  return count;\n}\n", "\tvar count = 0;\n\twhile(n > 0){\n\t\tif(n % 11\
    \ == 0 || n % 13 == 0){\n\t\t\tcount++;\n\t\t}\n\t\tn /= 10;\n\t}\n\treturn count;\n\
    }\n", "    if (n < 0)\n        return 0;\n    if (n === 0 || n === 1)\n      \
    \  return n;\n    if (n % 11 === 0 && n % 13 === 0)\n        return 3;\n    if\
    \ (n % 11 === 0 && n % 13 === 1)\n        return 2;\n    if (n % 11 === 1 && n\
    \ % 13 === 0)\n        return 1;\n    return 0;\n}\n</code>\n<|/ a tags=javascript\
    \ |>\n<| c |>\nPlease explain your answer.\n<|/ c |>\n<| c |>\nThe most interesting\
    \ part of this answer is that your solution works on any number (not just prime\
    \ numbers). Explanation added.\n<|/ c |>\n<| c |>\nThe most interesting part of\
    \ this answer is that your solution works on any number (not just prime numbers).\
    \ Explanation added.\n<|/ c |>\n<| a |>\nThis solution will work on any number\
    \ (not just prime numbers).\nThe key is to break the number into its individual\
    \ digits (the most significant digit first) and then determine if the number contains\
    \ that digit (modulo 10).\nThe digits are then stored in an array with their indices\
    \ (i.e. the position of the most significant digit).\nThis way we can determine\
    \ if the number has that digit (modulo 10) by looping through the digits and seeing\
    \ if they match the digit we are looking for.\n\n<code>\nconst digit = (n) =>\
    \ {\n  const num = (n + '').split('');\n  const digit = num.pop();\n  return {\
    \ num, digit };\n};\n\nconst check = (n) => {\n  const digits = digit(n);\n  let\
    \ flag = false;\n\n  for (let i = 0; i < digits.length; i++)\n    if (digits[i].digit\
    \ % 10 === digits.digit)\n      flag = true;\n  return flag;\n};\n", "  let count\
    \ = 0;\n  \n  while(n < 100){\n    if(n%11 === 0 || n%13 === 0){\n      n%=11;\n\
    \      n%=13;\n      count++;\n    }\n    n++;\n  }\n  return count;\n}</code>\n\
    \nEdit: I thought it was interesting to see how this could be done using recursion.\
    \ Here is a solution with explanation\n\n<code>", "  var arr = [];\n  if(n >=\
    \ 0 && n < 50){\n    arr.push(0);\n  }\n  if((n >= 50 && n < 80) || (n >= 90 &&\
    \ n < 100)){\n    arr.push(1);\n  }\n  if(n >= 80 && n < 100){\n    arr.push(2);\n\
    \  }\n  if(n >= 100){\n    arr.push(3);\n  }\n  return arr;\n}\n", "    let i\
    \ = 0;\n    while (i++ < n) if (n % 11 == 0 || n % 13 == 0) return n;\n    return\
    \ n;\n}\n", "    var count = 0;\n    var i = n;\n    while(i>0){\n        if(i%11\
    \ == 0){\n            count++;\n        }\n        else if(i % 13 == 0){\n   \
    \         count+=2;\n        }\n        i/=11;\n    }\n    return count;\n}",
  "    var counter = 0;\n    while(n > 1){\n        counter += n % 11;\n        n\
    \ /= 11;\n        counter += n % 13;\n        n /= 13;\n    }\n    return counter;\n\
    }\n</cell>\n<text>\nProblem 9\nWrite a function to return an array of all the\
    \ positive integers that are divisible by all of the numbers from 1 to 20.\n\n\
    >>> primeFactors(20)\n[2, 2, 3, 5, 5, 7, 7, 11, 11, 13, 13, 17, 17, 19, 19]\n\
    >>>\n\n\n</text>\n<cell>", "  n = n.toString();\n  if(n <= 0) return n;\n  if(n\
    \ % 11 == 0) return fizz_buzz(n / 11) + \"11\";\n  if(n % 13 == 0) return fizz_buzz(n\
    \ / 13) + \"13\";\n  return n;\n}\n", "  return Math.ceil(Math.log(n)/Math.log(11))\
    \ - Math.ceil(Math.log(n)/Math.log(13))\n}\n\nmodule.exports = fizz_buzz;\n},{}],12:[function(require,module,exports){\n\
    var _ = require(\"lodash\");\n", "    var result = 0;\n    for (var i=0;i<=n;i++){\n\
    \        if (n%11 == 0){\n            if (n%13 == 0){\n                result++;\n\
    \            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,while-loop,fizzbuzz\
    \ |>\n<| a dscore=0 |>\n<code>", "  var count = 0;\n  for(var i = n; i >= 1; i--){\n\
    \    if(i%11 == 0) count++;\n    else if(i%13 == 0) count++;\n  }\n  return count;\n\
    }\n", "  if(n%11==0)\n  {\n    if(n%13==0)\n    {\n      return n;\n    }\n  \
    \  else return n+9;\n  }\n  else return n+8;\n}\n\nvar x= [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50];\n",
  "  if ( n === 0 ){\n    return 0;\n  }\n  if ( n === 1 ){\n    return 1;\n  }\n\
    \  if ( n % 11 === 0 ){\n    return fizz_buzz(n+1);\n  }\n  if ( n % 13 === 0\
    \ ){\n    return fizz_buzz(n+1);\n  }\n  return fizz_buzz(n+1);\n}\n", "  const\
    \ fizzBuzz = ['Fizz','Buzz'][n % 3 === 0 || n % 5 === 0 ? 'FizzBuzz' : ''];\n\
    \  return n < 0 ? `${fizzBuzz}${Math.abs(n)}` : fizzBuzz + fizz_buzz(Math.abs(n));\n\
    }\n", "    if ( n === 0 ) {\n        return 0;\n    } else if ( n === 1 ) {\n\
    \        return 1;\n    } else {\n        return ( n % 11 === 0 ) ? 2 : ( n %\
    \ 13 === 0 ) ? 3 : 0;\n    }\n}\n", "  let count = 0;\n  let fizz = n % 11;\n\
    \  if (fizz === 0) count += 1;\n  let buzz = n % 13;\n  if (buzz === 0) count\
    \ += 1;\n  return count;\n}\n", "\tvar i, num;\n\tvar div = 11;\n\tfor(i = 1;\
    \ n < Math.pow(div, i + 3); i++){\n\t\tnum = i * div;\n\t\tif(num % 11 === 0 ||\
    \ num % 13 === 0){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn n;\n}\n", "  if (n%11\
    \ == 0){\n    return 1+fizz_buzz(n/11);\n  } else if (n%13 == 0){\n    return\
    \ 3+fizz_buzz(n/13);\n  }\n  return 1;\n}\n", "  let counter = 0;\n  while (n\
    \ >= 11 || n % 11 == 0){\n    counter += 1;\n    n -= 11;\n  }\n  while (n >=\
    \ 13 || n % 13 == 0){\n    counter += 1;\n    n -= 13;\n  }\n  return counter;\n\
    }", "  if (n === 0) return 0;\n  var remainder = n % 11;\n  if (remainder ===\
    \ 0 || remainder === 11) return 1;\n  return fizz_buzz(parseInt(n/11));\n}\n",
  "  let count = 0\n  for (let i=1;i<n;i++){\n    if (n % 10 == 7){\n      count++\n\
    \    }\n  }\n  return count\n}\n", "  var i = 0;\n  while(i < n){\n    if(n %\
    \ 10 == 0 || n % 13 == 0){\n      i++;\n    }\n    else{\n      if(n % 11 == 0\
    \ && (n%12 == 0 || (n%12 == 11 &&  n % 12 == 13))){\n        i++;\n      }\n \
    \   }\n  }\n  return i;\n}\n", "  return isEven(n) && (n%11 === 0)\n    ? n%11\
    \ === 0\n      ? n //If the remainder of the division of n by 11 is 0, return\
    \ the number\n      : n/11 //If n is even, return the quotient of n by 11\n  \
    \    ? n/11\n      : n\n    : 0\n}\n", "  return Math.ceil(n/11)-Math.ceil(n/13)-1;\n\
    }\n", "  var i = 0;\n  while (i <= n){\n    if ( n % 10 == 7){\n      return i;\n\
    \    } else if ( n % 11 == 0){\n      return i;\n    } else if ( n % 13 == 0){\n\
    \      return i;\n    } else {\n      i++;\n    }\n  }\n}\n", "  n = n.toString();\n\
    \  var s = '';\n  for (var i=0; i<n.length; i++){\n    if (parseInt(n[i])%11 ==\
    \ 0 || parseInt(n[i])%13 == 0){\n      s+= parseInt(n[i])+'';\n    } else {\n\
    \      s+= n[i]+'';\n    }\n  }\n  return s;\n}\n", "  if(n==0||n==1) return n;\n\
    \  let counter = 0;\n  let temp = 0;\n  while(n >= counter){\n    temp += counter;\n\
    \    if(temp % 11 == 0 || temp % 13 == 0){\n      counter += 1;\n    }\n  }\n\
    \  return temp;\n}\n  ", "    var counter=0;\n    for(var i=0;i<n;i++){\n    \
    \    var n=i%11;\n        if(n===0 || n===5 || n===8){\n            counter++;\n\
    \        }\n    }\n    return counter;\n}", "  if (n < 0){\n    console.log('Negative\
    \ numbers are not allowed')\n    return false\n  }\n  if (n % 11 === 0 || n %\
    \ 13 === 0){\n    return n\n  }\n  for (var i = 1; i <= n; i++){\n    if (i %\
    \ 11 === 0 && i % 13 === 0){\n      return i\n    }\n  }\n}\n", "  if(n<10) return\
    \ n;\n  if(n%11==0) return n+\"th\";\n  if(n%13==0) return n+\"rd\";\n  return\
    \ n+\"th\";\n}\n", "    var a = [], b = 0;\n    for(var i = 0; i < n; i++){\n\
    \        if(i%11==0 && i%13==0)\n            b = 1;\n        a.push(i);\n    }\n\
    \    var n = a.map(function(i){\n        return i.toString();\n    }).join('');\n\
    \    for(var i = 0;i < a.length; i++){\n        if(n.indexOf(a[i]) != -1)\n  \
    \          return b;\n    }\n    return 0;\n}", "    \n    let fizzbuzzcount =\
    \ 0;\n    \n    if(n%11 !== 0){\n        fizzbuzzcount++;\n    }\n    if(n%13\
    \ !== 0){\n        fizzbuzzcount++;\n    }\n    \n    return fizzbuzzcount;\n\
    }\n    ", "  // Get the value of the remainder. If n is divided by 11 and remainder\
    \ is 0, then return 0, otherwise return 1.\n  let r = (n % 11) === 0 ? 0 : 1;\n\
    \  return n / 11 * r + fizz_buzz(n / 13);\n}\n", "    if(n%11==0 && n%13==0){\n\
    \        return 0;\n    }\n    else if(n%11==0){\n        return 1;\n    }\n \
    \   else if(n%13==0){\n        return 2;\n    }\n}\n</code>\n<|/ a tags=javascript,buzz\
    \ |>\n<| a dscore=0 tags=javascript,buzz |>\n<code>", "  return ((n % 11 == 0\
    \ || n % 13 == 0) && (Math.floor(n % 100) != 11 && Math.floor(n % 100) != 13))\
    \ ? 1 : 0;\n}\n", "  var count = 0;\n  while (n > 0){\n    if (n % 10 == 7 ||\
    \ n % 10 == 13){\n      count++;\n    }\n    n = Math.floor(n / 10);\n  }\n  return\
    \ count;\n}\n", "  if (n % 11 == 0 && n % 13 == 0){\n    return fizz_buzz(n/11)\
    \ + fizz_buzz(n/13);\n  } else if (n % 11 == 0){\n    return 1;\n  } else if (n\
    \ % 13 == 0){\n    return 2;\n  } else if (n % 11 != 0 && n % 13 != 0){\n    return\
    \ fizz_buzz(n/11) + 1;\n  }\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    <code>", "    let num = [];\n    for (let i = 0; i < n; i++){\n        if (i %\
    \ 11 === 0 || i % 13 === 0){\n            num = num.concat(i);\n        }\n  \
    \  }\n    let result = num.filter(function(item){ return item === 7 }).length;\n\
    \    return result;\n}", "  return Math.ceil(n/11) || Math.ceil(n/13) || 0;\n\
    }\n", "  const divisors = [11, 13];\n  return divisors.filter(divisor => n % divisor\
    \ === 0).length;\n}\n", '  return new Array(0,1,1,2,2,3,3,3,3,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,',
  "  if(n % 11 == 0 || n % 13 == 0){\n    return n;\n  }\n\n  return fizz_buzz(Math.floor(n/10))\
    \ +\n         fizz_buzz(n % 10);\n}\n</code>\nIt seems like you are trying to\
    \ solve a problem with the recursive nature, but I think this might help you visualize\
    \ why you were doing things a bit differently.\n<|/ a |>\n<| a tags=javascript\
    \ |>\nFirst off, you are missing two semicolons. To actually solve the problem,\
    \ you could do something like this\n\n<code>", "  let result=0\n  for (let i=0;i<=n;i++){\n\
    \    if (i%13==0){\n      result+=3\n    }else if (i%11==0){\n      result+=1\n\
    \    }else{\n      result+=1\n    }\n  }\n  return result\n}", "    var x = n%11;\n\
    \    var y = n%13;\n    var z = n%7;\n    //If the number of numbers less than\
    \ n is divisible by 11\n    if(x === 0){\n        //If the number of numbers less\
    \ than n is divisible by 13\n        if(y === 0){\n            //If the number\
    \ of numbers less than n is divisible by 7\n            if(z === 0){\n       \
    \         return n;\n            }else{\n                return z+1;\n       \
    \     }\n        }else{\n            return y+1;\n        }\n    }else{\n    \
    \    return x+1;\n    }\n}\n</code>\n<|/ a tags=fizzbuzz,javascript dscore=1 |>\n\
    <| a tags=fizzbuzz,javascript |>\n<code>", "  let count = 0;\n  while(n > 0){\n\
    \    count += n % 11 == 0 || n % 13 == 0 ? 1 : 0;\n    n = Math.floor(n / 10);\n\
    \  }\n  return count;\n}\n", "  n = n%11 || n%13;\n  return n ? (n>0? n+1 : n)\
    \ : n;\n}\n</cell>\n<text>\nA function named fizzbuzz takes a single parameter\
    \ and returns a string. Write a function that returns the same value as the fizz_buzz\
    \ function but returns the string \u201Cfizz\u201D if the parameter is divisible\
    \ by 3, otherwise returns \u201Cbuzz\u201D. If the parameter is divisible by 5\
    \ but does not end with a 1, return \u201Cfizzbuzz\u201D. If the parameter is\
    \ divisible by both 3 and 5, return \u201Cfizzbuzz\u201D.\n\n</text>\n<cell>",
  "  if((n%11===0)&&(n%13===0))\n  return 0;\n  else if((n%11!==0)&&(n%13!==0))\n\
    \  return 2;\n  else if((n%11===0)&&(n%13!==0))\n  return 3;\n  else if((n%11!==0)&&(n%13===0))\n\
    \  return 4;\n}\n", "\tlet count = 0\n\tfor(let i of new Array(n)){\n\t\tif(i%11\
    \ == 0 && i%13 == 0){\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\nfizz_buzz(150)\n\
    </cell>\n<text>\nA more efficent version\n\n</text>\n<cell>", "  return (n % 11\
    \ + n % 13 > n / 2 ? n : 0);\n}\n", "  return Math.floor(n/11) + Math.floor(n/13)+1;\n\
    }\n", "    if(n<=0)\n        throw new Error('Input must be > 0');\n    if(n%11===0)\n\
    \        return 0;\n    if(n%13===0)\n        return 1;\n    return fizz_buzz(n/13)+1;\n\
    }\n", "  var count = 0;\n  for (var i = 1; i <= n; i++){\n    if (i % 11 == 0\
    \ || i % 13 == 0) count++;\n  }\n  return count;\n}\n", "  return ((n%11==0)&&(n%13==0))?0:((n%11!=0)&&(n%13==0))?2:((n%11!=0)&&(n%13!=0))?3:(Math.floor(n/11))*11\
    \ + Math.floor(n/13);\n}\n", "    if(n < 13){\n        return n;\n    }\n    if(n\
    \ % 11 == 0 && n % 13 == 0){\n        return n;\n    }\n    return fizz_buzz(n/10)\
    \ + fizz_buzz(n/11) + fizz_buzz(n/13);\n}\n", "    if(n<0){\n        return -1\n\
    \    }\n    if(n % 11 == 0){\n        return 1\n    }\n    if(n % 13 == 0){\n\
    \        return 2\n    }\n    return 0\n}\n", "  if (n < 11){\n    if (n%11 ==\
    \ 0){\n      return 0;\n    } else {\n      return 1;\n    }\n  } else if (n <\
    \ 13){\n    if (n%13 == 0){\n      return 2;\n    } else {\n      return 3;\n\
    \    }\n  } else {\n    return 4;\n  }\n}\n", "  var count = 0;\n  for(var i =\
    \ n; i >= 100; i--){\n    if(i % 11 === 0 || i % 13 === 0){\n      count++;\n\
    \    }\n  }\n  return count;\n}", "  return ((n % 11 === 0) && (n % 13 === 0))\
    \ ? 0 : ((n % 11 === 0) || (n % 13 === 0)) ? 2 : ((n % 11 === 1) || (n % 13 ===\
    \ 1)) ? 3 : ((n % 11 === 2) || (n % 13 === 2)) ? 4 : ((n % 11 === 3) || (n % 13\
    \ === 3)) ? 5 : ((n % 11 === 4) || (n % 13 === 4)) ? 6 : ((n % 11 === 5) || (n\
    \ % 13 === 5)) ? 7 : ((n % 11 === 6) || (n % 13 === 6)) ? 8 : ((n % 11 === 7)\
    \ || (n % 13 === 7)) ? 9 : 10;\n}</code>\n<|/ a tags=algorithm,javascript,fizzbuzz\
    \ |>\n<| a dscore=1 tags=algorithm,javascript,fizzbuzz |>\nYou can create a map\
    \ with the counts of different fizz patterns, and then use that map to find the\
    \ appropriate value:\n\n<code>", "  return Math.ceil((n+1)/13)\n}\n", "    let\
    \ count = 0;\n    while(n >= 11 || n >= 13){\n        n = n/10\n        count++\n\
    \    }\n    return count;\n}", "    var times = 0;\n    if(n<0 || n%11 == 0){\n\
    \        times = 1;\n    }else if(n<0 || n%13 == 0){\n        times = 2;\n   \
    \ }\n\n    return times;\n}\n", "  var count = 0;\n  for(var i = 1;i < n;i++){\n\
    \    if( n % i == 0 && ( i % 11 == 0 || i % 13 == 0 ) ) count++;\n  }\n  return\
    \ count;\n}\n", "    return n % 11 == 1 || n % 13 == 1 ? 0 : n % 11 ? 2 : 3;\n\
    }\n", "    return Math.floor(Math.pow(10, (Math.log(Math.sqrt(n)+1)))/Math.LN10);\n\
    }\n", "  return (n%11===0||n%13===0)?'':(n%11<3&&n%13>3?(n%11+12):(n%11>3&&n%13<3?(n%11+13):''));\n\
    }", "  if(n%11==0&&n%13==0)return 0;\n  if(n%11==0)return 1;\n  if(n%13==0)return\
    \ 2;\n  return-1;\n}\n", "    if (n<=0) return 0;\n    if (n%11==0)  return 1;\n\
    \    if (n%13==0)  return 2;\n    return fizz_buzz(n-1)+1;\n}\n", "  n = n + '';\n\
    \  var count = 0;\n  var str = n;\n  for(var i = 0; i < str.length; i++){\n  \
    \  if(str.charAt(i) == '7'){\n      count++;\n    }\n  }\n  return count;\n}\n\
    </cell>\n<text>\nExercise 10: Testing Functions\nWrite a function that takes a\
    \ boolean and returns the string \"fizzy buzz\" if the boolean is true; otherwise,\
    \ returns \"not fizzy buzz\". This function should be called with the boolean\
    \ argument of the fizzbuzz function.\n\n>>> fizzbuzz(true)\n'fizzy buzz'\n>>>\
    \ fizzbuzz(false)\n'not fizzy buzz'\n>>> fizzbuzz('fizzy buzz')\n'fizzy buzz'\n\
    >>> fizzbuzz('not fizzy buzz')\n'not fizzy buzz'\n>>> fizzbuzz('fizzy buzz')\n\
    'fizzy buzz'\n>>> fizzbuzz('not fizzy buzz')\n'not fizzy buzz'\n>>> fizzbuzz(true)\n\
    'fizzy buzz'\n>>> fizzbuzz(false)\n'not fizzy buzz'\n>>> fizzbuzz('fizzy buzz')\n\
    'fizzy buzz'\n>>> fizzbuzz('not fizzy buzz')\n'not fizzy buzz'\n>>> fizzbuzz(true)\n\
    'fizzy buzz'\n>>> fizzbuzz(false)\n'not fizzy buzz'\n>>> fizzbuzz('fizzy buzz')\n\
    'fizzy buzz'\n>>> fizzbuzz('not fizzy buzz')\n'not fizzy buzz'\n>>> fizzbuzz(true)\n\
    'fizzy buzz'\n>>> fizzbuzz(false)\n'not fizzy buzz'\n>>> fizzbuzz('fizzy buzz')\n\
    'fizzy buzz'\n>>> fizzbuzz('not fizzy buzz')\n'not fizzy buzz'\n>>> fizzbuzz(true)\n\
    'fizzy buzz'\n>>> fizzbuzz(false)\n'not fizzy buzz'\n>>> fizzbuzz('fizzy buzz')\n\
    'fizzy buzz'\n>>> fizzbuzz('", "\treturn Math.ceil(n/13) + Math.ceil(n/11)\n}\n",
  "\tlet i;\n\tlet count=0;\n\tfor(i=1;i<=n;i++){\n\t\tif(n%i===0){\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n", "  if(n < 0 || n > 1000000000 || n % 11 ==\
    \ 0 || n % 13 == 0){\n    return 0;\n  }\n  if(n%11 > 0){\n    return fizz_buzz(Math.floor(n\
    \ / 11));\n  }\n  if(n%13 > 0){\n    return fizz_buzz(Math.floor(n / 13));\n \
    \ }\n  return n;\n}\n", "  var count = 0;\n  for (var i=1; i<=n; i++){\n    if((n%11)==0\
    \ || n%13==0){\n      count++;\n    }\n  }\n  return count;\n}\n", "  return Math.max(\n\
    \    0,\n    Math.min(\n      Math.ceil(Math.log10(n)) - 1,\n      Math.log(n)\
    \ / Math.LN10\n    ) - Math.LN10\n  )\n}\n", "  return (n%11==0 && (n%13==0))\
    \ ? 0 :\n    (n%11==0 && (n%13!=0 )) return 2\n    (n%11!=0 && (n%13==0)) ? 2\
    \ :\n    (n%11!=0 && (n%13!=0 )) return 3\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\n<code>", "  return ((Math.ceil(n/11) % 11 === 0) && (Math.ceil(n/13)\
    \ % 13 === 0))?n:0;\n}\n", "  let count = 0;\n  while(n>0){\n    count += (n%11==0\
    \ || n%13==0)?0:1;\n    n /= 11;\n    n /= 13;\n  }\n  return count;\n}\n", " \
    \ var numbers = [];\n  while(n > 0){\n    var n1 = n % 11;\n    var n2 = n % 13;\n\
    \    if(n1 && n2){\n      numbers.push(2);\n    }else if(n1){\n      numbers.push(1);\n\
    \    }else{\n      numbers.push(0);\n    }\n    n = (n - n1) % 13;\n  }\n  return\
    \ numbers.length + numbers.length;\n}\n", "    var digits = String(Math.abs(n)).split('');\n\
    \    var count = 0;\n    for (var i in digits){\n        if (i % 11 == 0 && i\
    \ % 13 == 0){\n            count++;\n        }\n    }\n    return count;\n}\n",
  "  var count = 0;\n  for (var i = 1; i <= n; i += 11){\n    if (i % 13 == 0){\n\
    \      count += 1;\n    } else if (i % 11 == 0){\n      count += 1;\n    }\n \
    \ }\n  return count;\n}", "    var i, sum = 0, divisibleBy11 = 0, divisibleBy13\
    \ = 0, divisibleBy7 = 0;\n    for(i = 0; i < n; i++){\n        var value = Math.floor(i\
    \ / 13);\n        sum += value * (value + 1) / 13;\n        if(i % 13 === 0){\n\
    \            divisibleBy7++;\n        }\n        if(i % 11 === 0){\n         \
    \   divisibleBy11++;\n        }\n        if(i % 7 === 0){\n            divisibleBy13++;\n\
    \        }\n    }\n    return (divisibleBy7 === sum) ? divisibleBy7 : (divisibleBy11\
    \ === sum) ? divisibleBy11 : divisibleBy13;\n}\n</code>\n<|/ a tags=algorithm,javascript\
    \ |>\n<| a dscore=1 |>\nThe only problem with this algorithm is that it takes\
    \ as much time as fizz buzz, since it calculates all numbers from 1 to n. For\
    \ example fizz buzz takes as many time as 1000000000 and fizz buzz takes as much\
    \ time as 1000000003. If you want something more efficient that can take less\
    \ time you can use an array. Here's a solution I came up with:\n<code>", "   \
    \ \n    let count = 0;\n    \n    for(let i=1;i<=n;i++){\n        if((i%11)===0){\n\
    \            count+=0;\n        }\n        else if((i%13)===0){\n            count+=1;\n\
    \        }\n    }\n    return count;\n}", "    var count = 0;\n    for(var i =\
    \ 1 ; i <= n ; i++){\n        if(i % 11 == 0 || (i % 13 == 0)){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=algorithm,javascript\
    \ dscore=2 |>\n<| a dscore=2 tags=algorithm,javascript |>\nYou can use this simple\
    \ code. It works fine.\n<code>", "  return ~~((n%11) == 0) ? (n%11) :\n      ~~((n%13)\
    \ == 0) ? (n%13) :\n      ~~(n%11);\n}\n\n},{}],4:[function(_dereq_,module,exports){",
  "  for(var i = 1;i < n;i++){\n    if((n % 11 == 0 && i % 11 == 0) || (n % 13 ==\
    \ 0 && i % 13 == 0)){\n      return i;\n    }\n  }\n  return n;\n}\n", "  var\
    \ count = 0;\n  while(n > 0){\n    if (n % 10 == 7){\n      count ++;\n    }\n\
    \    n /= 10;\n  }\n  return count;\n}", "    let count = 0;\n    for(let i=1;i<=n;i++){\n\
    \        if((i%11)===0 || (i%13)===0){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n", "    var count = 0; //Initialize count to 0\n    while\
    \ (n>0 && n%11==0 || n%13==0) { //While n is greater than 0 and the remainder\
    \ of n divided by 11 is not zero, or the remainder of n divided by 13 is not zero.\n\
    \        count++; //Add 1 to the count.\n        n = Math.floor(n/10)\n    }\n\
    \    return count; //Return the value of count as the number of times the digit\
    \ 7 appears in integers less than n which are divisible by 11 or 13.\n}\n", " \
    \ if(n <= 1){\n    return n;\n  }\n  if(n % 11 == 0){\n    return fizz_buzz(n\
    \ / 11) + 1;\n  }\n  if(n % 13 == 0){\n    return fizz_buzz(n / 13) + 1;\n  }\n\
    \  return fizz_buzz(n - 1);\n}\n", "    for(let i = 0; i <= n; i++){\n       \
    \ if(isLessThanHalf(n)){\n            if(i % 11 == 0) return 0;\n            if(i\
    \ % 13 == 0) return 2;\n            return 1;\n        }\n    }\n}\n", "    var\
    \ count = 0;\n    while(n>0) {\n        while(n % 10 == 7) count++;\n        while(\
    \ n % 11 == 0) count++;\n        while( n % 13 == 0) count++;\n        n = Math.floor(n/10);\n\
    \    }\n    return count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding how and/or\
    \ why it solves the problem would improve the answer's long-term value.\n<|/ c\
    \ |>\n<| c |>\nIt's a good approach, but I think it's way too complicated. Why\
    \ not just `return Math.floor(Math.log(n) / Math.LN10)`?\n<|/ c |>\n<| a tags=function,javascript\
    \ |>\n<code>", "  n = String(n);\n  var count = 0;\n  for (var i = n.length -\
    \ 1; i >= 0; i--) {\n    if (n.charAt(i) == '7') count++;\n    if (n.charAt(i)\
    \ == '9' || n.charAt(i) == '8') count++;\n    if (n.charAt(i) == '6') count++;\n\
    \    if (n.charAt(i) == '5' || n.charAt(i) == '4') count++;\n    if (n.charAt(i)\
    \ == '3' || n.charAt(i) == '2') count++;\n    if (n.charAt(i) == '1') count++;\n\
    \    if (n.charAt(i) == '0') count++;\n  }\n  return count;\n}\n", "    if(n %\
    \ 11 === 0 && n % 13 === 0){\n        return 0;\n    }\n    else if(n % 11 ===\
    \ 0 && n % 13 > 0){\n        return 2;\n    }\n    else if(n % 11 > 0 && n % 13\
    \ === 0){\n        return 1;\n    }\n}\n", "  return ((n%11==0)&&(n%13==0)?0:(n%11!=0\
    \ && n%13!=0?2:1));\n}", "  if( n % 11 == 0 || n % 13 == 0 )\n  {\n    return\
    \ n;\n  }\n  else\n  {\n    return fizz_buzz(Math.floor((n/11))) + fizz_buzz(Math.floor((n/13)));\n\
    \  }\n}\n</code>\n<|/ a tags=recursion,fizzbuzz,javascript |>\n<| c |>\nThanks\
    \ for this, but this is my first semester programming and I have only had basic\
    \ understanding of recursion so I haven't been taught much yet and don't understand\
    \ how this code works.\n<|/ c |>\n<| c |>\nThis isn't a difficult recursion. Basically,\
    \ you take `n/11` and `n/13`, which are numbers of 11 and 13 digits, respectively.\
    \ If they are both even, then return `n`, otherwise, return `fizz_buzz(Math.floor((n/11)))\
    \ + fizz_buzz(Math.floor((n/13))) + 1;`. Because `Math.floor` returns `Math.floor`\
    \ of its argument number. Also, if the return value is even and greater than 5,\
    \ then you return `n`; otherwise, return `fizz_buzz(Math.floor((n/11))) + fizz_buzz(Math.floor((n/13)))\
    \ + 1;`.\n<|/ c |>\n<| c |>\nOh ok, so you were basically just telling me how\
    \ to use the fizzbuzz method. Well thanks so much for the help anyway, I really\
    \ appreciate it.\n<|/ c |>\n<| c |>\nYes this is recursion. Recursion is when\
    \ you are writing a function inside another function. For example, you have a\
    \ function `f` that calls another function `g`. `g` calls another function `h`.\
    \ `h` calls another function `f`. `f` calls itself (itself).\n<|/ c |>\n<| c |>\n\
    I appreciate the help but I'm a little confused. Sorry, I'm a little confused\
    \ as well.\n<|/ c |>\n<| a dscore=1 tags=recursion,fizzbuzz,javascript |>\n<code>",
  "  var count = 0;\n  if(n%11==0){\n    count++;\n  }\n  if(n%13==0){\n    count++;\n\
    \  }\n  return count;\n}\n", "  return Math.max((n - 1) % 11 , 0);\n}", "    while(n\
    \ > 0){\n        if(n % 11 == 0 || n % 13 == 0){\n            console.log(n);\n\
    \        }\n        n -= 1;\n    }\n}\n", "  let count = 0;\n  for(i=1;i<=n;i++){\n\
    \    if((n%11==0||n%13==0)&&n%i==0){\n      count+=1;\n    }\n  }\n  return count;\n\
    }\n", "    let result = 0;\n    let count = 0;\n    let rem = n % 11;\n    if(rem\
    \ == 0 || rem == 13){\n        result++;\n    }\n    n=n.toString();\n    let\
    \ digits = n.split(\"\");\n    for (let i = 0; i < digits.length; i++){\n    \
    \    let digit = parseInt(digits[i]);\n        if(digit > 9){\n            let\
    \ digit10 = digit % 10;\n            if(digit10 == 0 || digit10 == 13){\n    \
    \            count++;\n            }\n        }\n    }\n    if(count == 0 || count\
    \ == 10){\n        result ++;\n    }\n    return result;\n}", "\tvar count = 0;\n\
    \twhile(n > 0){\n\t\tif(n % 11 == 0 && n % 13 == 0)\n\t\t\tcount++;\n\t\tn /=\
    \ 11;\n\t}\n\treturn count;\n}\n", "  return (n%11===0&&(n%13===0)) ? 0 : (n%11===0)?2:(n%13===0)?3:fizz_buzz(n-1)\n\
    }\n", "    return ~~(Math.ceil(Math.log(n) / Math.LN10));\n}", "    return n%11==0\
    \ && n%13==0?n:0;\n}\n", "  return isDivisibleBy11(n)? n%11 : isDivisibleBy13(n)?\
    \ n%13 : 0;\n}\n", "\tfor(var i = 1; i < n; i++){\n\t\tif(i % 11 == 0 || i % 13\
    \ == 0){\n\t\t\treturn i + \"\";\n\t\t}\n\t}\n\treturn 0;\n}\n\n", "  var count\
    \ = 0;\n  \n  if(n>0){\n    for(var i = 9; i <= n; i+=11){\n      if(i % 11 ==\
    \ 0){\n        count++;\n      }\n    }\n  }\n  return count;\n}", "    var count\
    \ = 0;\n    while (n){\n        if (n%11==0 || n%13==0)\n            count++;\n\
    \        n = n/11;\n    }\n    return count;\n}\n", "\tif(n>0 && n%11==0 && n%13==0)\n\
    \t\treturn 0;\n\tif(n%11==0)\n\t\treturn 1;\n\tif(n%13==0)\n\t\treturn 2;\n\t\
    return 3;\n}\n", "  var i;\n  for (i=1;i<=n;i++) {\n    if (i%11===0 || i%13===0)\
    \ return i;\n  }\n  return n;\n}", "  if(n % 11 == 0 ){\n    return n + 'th';\n\
    \  }\n  if(n % 13 == 0 ){\n    return n + 'rd';\n  }\n  return n + 'th';\n}</code>\n\
    <|/ a dscore=1 |>\n<| a |>\nYou could use a ternary operation like so:\n<code>",
  "  if(n < 1){\n    return 0;\n  }\n  let count = 0;\n  for(let i = 2; i <= n; i++){\n\
    \    if(n % i == 0){\n      count++;\n      if(count == 3){\n        break;\n\
    \      }\n    }\n  }\n  return count;\n}\n", "  var count = 0;\n  var flag;\n\
    \  if(n>=11){\n      for(var i=0; i<n; i++){\n          if((i/3)%11==0){\n   \
    \          flag = true;\n             break;\n          }\n      }\n      if(flag)\
    \ count++;\n  }\n  if(n>=13){\n      for(var i=0; i<n; i++){\n          if((i/3)%13==0){\n\
    \             flag = true;\n             break;\n          }\n      }\n      if(flag)\
    \ count++;\n  }\n  return count;\n}\n", "\tif (n < 1) return 0;\n\tvar count =\
    \ 0;\n\tfor (var i = n; i > 0; i /= 11){\n\t\tcount += i%11;\n\t}\n\tcount++;\n\
    \tfor (var i = n; i > 0; i /= 13){\n\t\tcount += i%13;\n\t}\n\treturn count;\n\
    }\n", "  if (n < 2) return \"Not Enough\";\n  if (n < 13) return (n % 11 == 0\
    \ || n % 13 == 0) ? 0 : (n % 11 == 0) ? 1 : 2; // 0 if the number is a multiple\
    \ of 11 or 13 and 1 otherwise\n  return 3;\n}\n", "    if (n < 0) return 0;\n\
    \    if (n < 10) return 1;\n    if (n % 10 == 1) return n; //Only return n for\
    \ factors of 11 and 13\n    if (n % 10 == 2) return 3;\n    if (n % 10 == 0) return\
    \ fizz_buzz(n / 10) + 1;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nAhh this looks\
    \ so much easier. Thanks for taking the time to explain this to me I appreciate\
    \ it.\n<|/ c |>\n<| c |>\nOk, so this was the only code that actually worked but\
    \ I'm not sure why, could you please explain it a little further please?\n<|/\
    \ c |>\n<| c |>\nYes, I explained it in my answer below :)\n<|/ c |>\n<| a tags=fizzbuzz,recursion,java,javascript\
    \ |>\nI know this is an old post, but I was having a similar challenge and this\
    \ was the only solution that worked so I wanted to contribute what I learned to\
    \ this post.  \nThe key was using Math.log10 and then using the flooring function\
    \ on the result to determine which number to return to the function.  \nHere is\
    \ an example:\n<code>", "    if (n<=0) {\n        return \"\";\n    }\n    if\
    \ (n==1 || n==3) {\n        return \"1\";\n    }\n    if (n%11==1 || n%13==1)\
    \ {\n        return \"11\";\n    }\n    else {\n        return \"13\";\n    }\n\
    }\n", "  if (n % 11 == 0 && n % 13 == 0)\n    return 1;\n  if (n % 11 == 0)\n\
    \    return 2;\n  if (n % 13 == 0)\n    return 3;\n  return 0;\n}\n", "\tlet result\
    \ = 0;\n\tlet i = 0;\n\twhile(i < n){\n\t\tif((i % 11 == 0 || i % 13) == 0){\n\
    \t\t\tresult += (i % 11 == 0) ? 1 : 0;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n\
    }", "  var count = 0;\n  if(n%11==0){\n    count++;\n  }\n  if(n%13==0){\n   \
    \ count++;\n  }\n  if(count!=0 && count!=5){\n    return count;\n  }\n  else return\
    \ 0;\n}\n", "\treturn Math.ceil( Math.log(n) / Math.log(11) );\n}\n\n", "  var\
    \ div = [11,13]; //The digits which are divisible by 11 or 13.\n  var n = Math.ceil(n);\
    \ //Round up n to the next highest integer divisible by 11 and 13.\n  var cnt\
    \ = 0;\n  while(n){\n    if(n % div[0] == 0 && n % div[1] == 0){\n      cnt++;\n\
    \    }\n    n = Math.floor(n / 10);\n  }\n  return cnt;\n}\n\nvar numbers = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90];",
  "  if(n === 0) return 0;\n  if(n === 1) return 1;\n  if(n % 11 === 1 || n % 13 ===\
    \ 1) return 3;\n  return fizz_buzz(parseInt(n / 11));\n}\n", "  if(n==0) return\
    \ 0;\n  if(n%11==0) return 1;\n  if(n%13==0) return 2;\n  return 0;\n}\n</cell>\n\
    <cell>\nfizz_buzz(78)\n</cell>\n<cell>\n%timeit fizz_buzz(78)\n</cell>\n<cell>\n\
    # Write your solution here\n\n</cell>\n<text>\nSolution to Problem 6\n\n</text>\n\
    <cell>\n#Solution to Problem 6\n\ndef fizz_buzz(n):\n  if n==0: return 0\n  if\
    \ n%11==0: return 1\n  if n%13==0: return 2\n  else: return 0\n</cell>\n<cell>\n\
    #Problem 1\ndef fizz_buzz_1(n):\n    \n  return  sum([fizz_buzz_1(i) for i in\
    \ range(1,n)])\n    \n</cell>\n<cell>\n#Problem 2\ndef fizz_buzz_2(n):\n    \n\
    \  return  sum([fizz_buzz_2(i) for i in range(1,n)])\n    \n</cell>\n<cell>\n\
    %timeit fizz_buzz_2(50)\n</cell>\n<cell>\n%timeit fizz_buzz_1(50)\n</cell>\n<cell>\n\
    #Problem 3\ndef fizz_buzz_3(n):\n    \n  return  sum([fizz_buzz_3(i) for i in\
    \ range(1,n)])\n    \n</cell>\n<cell>\n%timeit fizz_buzz_3(50)\n</cell>\n<cell>\n\
    %timeit fizz_buzz_2(50)\n</cell>\n<cell>\n#Problem 4\ndef fizz_buzz_4(n):\n  \
    \  \n  return  sum([fizz_buzz_4(i) for i in range(1,n)])\n    \n</cell>\n<cell>\n\
    %timeit fizz_buzz_4(50)\n</cell>\n<cell>\n%timeit fizz_buzz_3(50)\n</cell>\n<cell>\n\
    #Problem 5\ndef fizz_buzz_5(n):\n    \n  return  sum([fizz_buzz_5(i) for i in\
    \ range(1,n)])\n    \n</cell>\n<cell>\n%timeit fizz_buzz_5(50)\n</cell>\n<cell>\n\
    %timeit fiz", "  let count=0;\n  while (n % 11 == 0 || n % 13 == 0){\n    count++;\n\
    \    n = Math.floor(n / 10);\n  }\n  return count;\n}\n", "    return ((n%11)==0)\
    \ || ((n%13)==0);\n}\n", "  if(n<11) return n;\n  if(n<13) return n+1;\n  if(n\
    \ % 11 === 0) return n;\n  if(n % 13 === 0) return n+1;\n  return n;\n}", "  \
    \  var n11 = Math.floor(n/11);\n    var n13 = Math.floor(n/13);\n    var n2 =\
    \ n - n11*n13 - n13;\n    return n11 + n13 + n2;\n}", "    var count = 0;\n  \
    \  for(var i = 100; i > 0; i--){\n        if((n % i) === 0){\n            count\
    \ += Math.floor(n / i) % 2 ? 1 : 0;\n        }\n    }\n    return count;\n}\n",
  "    var count = 0;\n    if (n <= 0) return n;\n    if (n % 11 === 0) count += 1;\n\
    \    if (n % 13 === 0) count += 1;\n    return count;\n}\n", "\tvar count = 0;\n\
    \tif((n % 11) == 0) return count;\n\tif((n % 13) == 0) return count + 1;\n\treturn\
    \ count;\n}\n", "  if (n % 11 == 0) return 1;\n  if (n % 13 == 0) return 2;\n\
    \  return 0;\n}\n", "  const ints = Array.from({ length: n }, () => Math.floor(Math.random()\
    \ * 11) + 13);\n  \n  return ints.filter((x) => x % 11 == 0 || x % 13 == 0).length\n\
    }\n</code>\n<|/ a dscore=2 tags=javascript,math,fizzbuzz,algorithm |>\n<| a |>\n\
    The answer to your question is \"no\".\nYou cannot do that without knowing what\
    \ numbers you are working with.\n<|/ a tags=javascript,math,fizzbuzz,algorithm\
    \ dscore=0 |>\n<| c |>\nWhat do you mean by \"without knowing what numbers you\
    \ are working with\"? What numbers are you working with? A program can generate\
    \ numbers to work with.\n<|/ c |>\n<| c |>\nI'm just suggesting that you cannot\
    \ generate the numbers. It's not that it's not possible, it's that that would\
    \ require knowledge of how the program works. A program could generate numbers\
    \ and then work from there, but that would require knowledge of how the program\
    \ works, such as knowing what numbers there are and what numbers would be generated.\n\
    <|/ c |>\n<| c |>\nYeah, I guess the answer is, you can't, unless you know what\
    \ numbers you are working with. Thanks for your answer.\n<|/ c |>\n<| c |>\nThat's\
    \ exactly my point. Without knowing what numbers you're working with, you don't\
    \ know how your program works. Therefore you cannot generate the numbers.\n<|/\
    \ c |>\n<| a dscore=0 |>\nYou can generate a random number between 1 and n with\
    \ Math#random(), multiply it by n, and divide it by 3. Then, compare the remainder\
    \ against 3 and break if it isn't 3. This will give you a random integer between\
    \ 1 and n (inclusive) that is divisible by three. Then, compare the remainder\
    \ against 3 to see if it is a multiple of three - if it is, then add 1, and check\
    \ again. Repeat until you get a number that is divisible by three.\n\n<code>",
  "\tif (n < 10) {\n\t\treturn n\n\t} else if (n % 10 === 7 || n % 10 === 9) {\n\t\
    \treturn fizz_buzz(n+1)\n\t} else {\n\t\treturn fizz_buzz(n+11)\n\t}\n}\n", " \
    \ return parseInt(n/11) % 2 == 0 ? (parseInt(n/13) % 2 == 0 ? 0 : 2) : parseInt(n/13)\
    \ % 2 ? 3 : 0;\n}\n", "\tvar count = 0;\n\twhile(n > 0){\n\t\tn = n % 11;\n\t\t\
    if(n === 0){\n\t\t\tcount++;\n\t\t\tbreak;\n\t\t}\n\t\tn = n/11;\n\t}\n\twhile(n\
    \ > 0){\n\t\tn = n % 13;\n\t\tif(n === 0){\n\t\t\tcount++;\n\t\t\tbreak;\n\t\t\
    }\n\t\tn = n/13;\n\t}\n\treturn count;\n}", "  var count = 0;\n  var i;\n  for(i=0;i<n;i++){\n\
    \    if(i % 11 == 0) count++;\n    else if(i % 13 == 0) count++;\n  }\n  return\
    \ count;\n}\n", "  if((n%11)===0 || (n%13)===0){\n    return 1;\n  }\n  else if(n%11>0){\n\
    \    return 0;\n  }\n  else if(n%13>0){\n    return 2;\n  }\n}\n", "  var count\
    \ = 0;\n  while(n%11==0){\n    count++;\n    n/=11;\n  }\n  while(n%13==0){\n\
    \    count++;\n    n/=13;\n  }\n  return count;\n}\n", "    if(n<1) return 0;\n\
    \    if(n%11==0 || n%13==0) return n%7==0 ? 0 : n%7>0?n-(n%7+1):n-1;\n    return\
    \ fizz_buzz(Math.floor(n/13));\n}\n</code>\n<|/ a dscore=2 tags=algorithm,fizzbuzz,javascript,recursion\
    \ |>\n<| a dscore=1 tags=algorithm,fizzbuzz,javascript,recursion |>\nHere's an\
    \ example of a recursive solution I wrote in Python (which is basically Javascript\
    \ but with a few modifications).\n<code>\n# FizzBuzz in Python\n# Based on the\
    \ \"FizzBuzz in Javascript\" by Dan Barrat\n\ndef fb(num, num):\n    if num ==\
    \ 1 or num == 3:\n        return 'Fizz'\n    if num == 0 or num == 2:\n      \
    \  return 'Buzz'\n    if num % 3 == 0:\n        return num\n    if num % 5 ==\
    \ 0:\n        return 'FizzBuzz'\n    if num % 3 == 0:\n        return 'Fizz'\n\
    \    if num % 5 == 0:\n        return 'Buzz'\n    else:\n        return str(num)\n\
    \nprint fb(1)\nprint fb(0)\nprint fb(3)\nprint fb(2)\nprint fb(5)\nprint fb(6)\n\
    print fb(10)\nprint fb(15)\n</code>\nThe FizzBuzz sequence starts with numbers\
    \ that divide evenly by 3 and 5, and then by 3 and 5 for every other number. The\
    \ \"FizzBuzz\" at the start is because of the initial condition, num==1, which\
    \ means that the first number will always get \"Fizz\". If num==0, the second\
    \ condition is met because num is even, and the \"FizzBuzz\" is then appended\
    \ to the result (because \"FizzBuzz\" < num < \"Fizz\" < \"Buzz\").\n<|/ a |>\n\
    <| a dscore=1 tags=algorithm,fizzbuzz,javascript,recursion |>\nIn Java you could\
    \ do it this way (thanks to Dan Barrat):\n<code>\npublic String getFizzBuzz(int\
    \ i) {\n    if (i == 1 || i == 3) return \"Fizz\";\n    if (i == 0 || i == 2)\
    \ return \"Buzz\";\n    if (i % 3 == 0 && i % 5 == 0) return \"FizzBuzz\";\n \
    \   if (i % 3 == 0) return \"Fizz\";\n    if (i % 5 == 0) return \"Buzz\";\n \
    \   return Integer.toString(i);\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\nThe solution\
    \ from DanBarrat worked ", "  //Check if the number n is divisible by 3 or 7.\n\
    \  if(n%3 === 0 || n%7 === 0){\n    return null;\n  }\n  //Loop through each number\
    \ from 0 to n-1\n  for(var i=0;i<n;i++){\n    //If the number is divisible by\
    \ 3 or 7\n    if(n%i===0 || n%i===7){\n      //Return the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\n \
    \     return i;\n    }\n  }\n  return null;\n}\n\nvar fizz_buzz_numbers = fizz_buzz(1000);\
    \ //Find the first number that returns null.\nif(fizz_buzz_numbers === null){\n\
    \  console.log('No');\n} else {\n  console.log(fizz_buzz_numbers);\n}</code>\n\
    <|/ a dscore=0 |>\n<| a tags=math,fizzbuzz,algorithm,javascript dscore=0 |>\n\
    <code>", "  if (n<=0) return 0;\n  if (n%11==0 && n%13==0) return 1;\n  if (n%11==0\
    \ && n%13!=0) return 2;\n  if (n%11!=0 && n%13==0) return 3;\n  if (n%11!=0 &&\
    \ n%13!=0) return 4;\n}\n</cell>\n<cell>", "  return isEven(n) ? 0 : n%11 ? 2\
    \ : n%13 ? 3 : 4\n}\n", "    if (n % 11 == 0 ||n % 13 == 0) return 0\n    if (n\
    \ != 0 && n % 10 == 0) return 0\n    if (n != 0 && n % 5 == 0) return 0\n    if\
    \ (n != 0 && n % 2 == 0) return 0\n    return 1\n}\n", "    let res = [];\n  \
    \  if(n<10) res.push(n);\n    else if(n%11==0) res.push(11);\n    else if(n%13==0)\
    \ res.push(13);\n    else if(n%17==0) res.push(17);\n    else if(n%3==0) res.push(3);\n\
    \    else if(n%5==0) res.push(5);\n    else if(n%7==0) res.push(7);\n    else\
    \ if(n%3==0) res.push(3);\n    else if(n%5==0) res.push(5);\n    else if(n%7==0)\
    \ res.push(7);\n    else if(n%3==0) res.push(3);\n    else if(n%5==0) res.push(5);\n\
    \    else if(n%7==0) res.push(7);\n    else if(n%3==0) res.push(3);\n    else\
    \ if(n%5==0) res.push(5);\n    else if(n%7==0) res.push(7);\n    else if(n%3==0)\
    \ res.push(3);\n    else if(n%5==0) res.push(5);\n    else if(n%7==0) res.push(7);\n\
    \    else if(n%3==0) res.push(3);\n    else if(n%5==0) res.push(5);\n    else\
    \ if(n%7==0) res.push(7);\n    else if(n%3==0) res.push(3);\n    else if(n%5==0)\
    \ res.push(5);\n    else if(n%7==0) res.push(7);\n    else if(n%3==0) res.push(3);\n\
    \    else if(n%5==0) res.push(5);\n    else if(n%7==0) res.push(7);\n    else\
    \ if(n%3==0) res.push(3);\n    else if(n%5==0) res.push(5);\n    else if(n%7==0)\
    \ res.push(7);\n    else if(n%3==0) res.push(3);\n    else if(n%5==0) res.push(5);\n\
    \    else if(n%7==0) res.push(7);\n    else if(n%3==0) res.push(3);\n    else\
    \ if(n%5==0) res.push(5);\n    else if(n%7==0) res.push(7);\n    else if(n%3==0)\
    \ res.push(3);\n    else if(n%5==0) res.push(5);\n    else if(n%7==0) res.push(7);\n\
    \    else if(n%3==0) res.push(3);\n    else if(n%5==0) res.push(5);\n    else\
    \ if(n%7==0) res.push(7);\n    else if(n%3==0) res.", "  if(n%11==0 && n%13==0){\n\
    \    return n+1;\n  }\n  if(n%11==0){\n    return n+1;\n  }\n  if(n%13==0){\n\
    \    return n+1;\n  }\n}", "  var count = 0;\n  while(n > 0){\n    if (n % 11\
    \ == 0 || n % 13 == 0){\n      count++;\n    }\n    n /= 11;\n    n /= 13;\n \
    \ }\n  return count;\n}\n", "\tvar count = 0;\n\twhile(n>0){\n\t\tn%=11;\n\t\t\
    if(fizz(n%11))\n\t\t\tcount++;\n\t\tn%=13;\n\t\tif(fizz(n%13))\n\t\t\tcount++;\n\
    \t}\n\treturn count;\n}\n", "  const factors = [11,13]\n  const factorsCount =\
    \ [0,0]\n  for (let factor = 1; factor <= n; factor++) {\n    if (n % factor ===\
    \ 0) factorsCount[factorsCount.indexOf(factor)] += 1;\n  }\n\n  return factorsCount.reduce((total,\
    \ val) => total += val)\n}\n", "  let count=0\n  while(count<n && n>0){\n    if\
    \ (n%11==0 || n%13==0){\n      count++\n    }\n    n/=11\n    n/=13\n  }\n  return\
    \ count\n}\n", "  let count = 0;\n  for (let i = 0; i < (n / 11) || i < (n / 13);\
    \ i++){\n    if (n % 11 == 0 & n % 13 == 0){\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  var count = 0;\n  var i;\n  if(n % 11 == 0) return count +\
    \ 1;\n  if(n % 13 == 0) return count + 2;\n  for(i = 0; i < (n + 1); i++){\n \
    \   var mod = n % 10;\n    if(mod == 7 || mod == 8){\n      count = count + 1;\n\
    \    }\n  }\n  return count;\n}\nmodule.exports = fizz_buzz;\n\n},{}],135:[function(require,module,exports){"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
