name: HumanEval_16_count_distinct_characters
language: js
prompt: "//Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>>\
  \ count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = count_distinct_characters;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
  abcde\"),5);\n  assert.deepEqual(candidate(\"abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"\
  aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"Jerry jERRY JeRRRY\"),5);\n\
  }\n\ntest();"
completions: ["  return string.match(/[\xC1\xC0\xC2\xC4\xC3\xC5\xC6\xC7\xC8\xC9\xCA\
    \xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\
    \xE0\xE1\xE2\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\
    \xF5\xF6\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\
    \xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD8\xD9\xDA\xDB\xDC\xDD\xDE\
    \xDF\xE1\xE0\xE2\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\
    \xF4\xF5\xF6\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF\xB5]+/gi).length\n}\n", "  return\
    \ string.replace(/[a-z]/g, \"\").split(\"\").length - 1;\n}\n", "\tvar uniqueChars\
    \ = [];\n\t\n\tfor (var i = 0; i < string.length; i++) {\n\t\tvar char = string[i];\n\
    \t\t\n\t\tif (uniqueChars.indexOf(char) === -1) {\n\t\t\tuniqueChars.push(char);\n\
    \t\t}\n\t}\n\t\n\treturn uniqueChars.length;\n}\n</cell>\n<cell>", "\tvar count\
    \ = 0;\n\tvar character;\n\tfor(var i = 0; i < string.length; i++){\n\t\tcharacter\
    \ = string.charAt(i);\n\t\tif(character.toLowerCase() != character){\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n", "  return new Set(string.split(\"\").sort()).size;\n\
    }\n", "  var counter = 0;\n  \n  for (var i = 0, len = string.length; i < len;\
    \ i++) {\n    char = string.charAt(i)\n    if (char != char.toUpperCase() && char\
    \ != char.toLowerCase()) {\n      counter++;\n    }\n  }\n  return counter;\n\
    }\n", "    var count = 0, chars = string.split(\"\");\n    for(var i = 0; i <\
    \ chars.length; i++){\n        if(chars[i].toLowerCase() !== chars[i].toLowerCase())\n\
    \            count++;\n    }\n    return count;\n}\n", "\tlet count = 1, chars\
    \ = string.toLowerCase().split(\"\");\n\t\n\tfor(let char of chars){\n\t\tif(chars[chars.indexOf(char)\
    \ + 1] != char) count++;\n\t}\n\t\n\treturn count;\n}\n", "  var uniqueCharacterCount\
    \ = 0;\n  for(var i=0; i<string.length; i++){\n    if(string.charAt(i)==string.charAt(i).toUpperCase()\
    \ && string.charAt(i)==string.charAt(i.toLowerCase())){\n      uniqueCharacterCount++;\n\
    \    }\n  }\n  return uniqueCharacterCount;\n}\n", "    var count = 0;\n    for(var\
    \ i = 0; i < string.length; i++){\n        var letter = string.charAt(i);\n  \
    \      if(letter != letter && letter != letter && letter != letter){\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n", "\tlet result = 0;\n\
    \tfor (let char of string) {\n\t\tresult += (string.charCodeAt(char) - 64);\n\t\
    }\n\treturn result;\n}\n", "    var counts = {}\n    for(var i of string)\n  \
    \      counts[String.fromCharCode(i >>> 0)] = counts[String.fromCharCode(i >>>\
    \ 0)] ? counts[String.fromCharCode(i >>> 0)] + 1 : 1;\n    return Object.values(counts).length;\n\
    }\n", "    var unique = {};\n    for(var i=0; i < string.length; i++){\n     \
    \   unique[string[i]] = (unique[string[i]] || 0) + 1;\n    }\n    return unique.length;\n\
    }\n", "\tvar chars = string.split(\"\");\n\tvar unique_count = 0;\n\tfor(var i=0;i<chars.length;i++){\n\
    \t\tif(chars.indexOf(chars[i])===i){\n\t\t\tunique_count ++;\n\t\t}\n\t}\n\treturn\
    \ unique_count;\n}\n", "  if(string == null || string === \"\"){\n    return 0;\n\
    \  }\n  return string.split(\"\").filter((x)=>{return x === x.toLowerCase()}).length;\n\
    }\n", "  if(typeof string !== 'string') throw new TypeError('string is not a string');\n\
    \  return new _distinct_characters_1.default(string, 0).count();\n}\n", "  var\
    \ unique_chars, i, count_distinct;\n  unique_chars = 0;\n  i = 0;\n  while (i\
    \ < string.length) {\n    if (string.charAt(i) == string.charAt(i + 1)) {\n  \
    \    unique_chars += 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return\
    \ unique_chars;\n}\n", "    var result = 0;\n    var tmp_string = string;\n\n\
    \    //Go through each character in the string\n    for(var i=0; i<tmp_string.length;\
    \ i++){\n        //Add 1 to result if the character doesn't match any character\
    \ already in the result\n        if(tmp_string.substr(i,1) != result){\n     \
    \       result++;\n        }\n    }\n    \n    //Return result (which should be\
    \ the number of distinct characters)\n    return result;\n}\n", "    if (string\
    \ == null || string == \"\" || string === false){\n        return 0\n    }\n \
    \   let characters = string.split(\"\")\n    let uniqueCount = {}\n    characters.forEach(c\
    \ => {\n        if (typeof uniqueCount[c] === \"undefined\"){\n            uniqueCount[c]\
    \ = 1\n        }else{\n            uniqueCount[c] += 1\n        }\n    })\n  \
    \  return Object.keys(uniqueCount).length\n}", "    var uniqueLetters = {};\n\
    \    var letters = {};\n    for(var i = 0; i < string.length; i++){\n        var\
    \ letter = string.charAt(i);\n        if(letters[letter] == undefined){\n    \
    \        letters[letter] = 1;\n        }\n        else{\n            letters[letter]++;\n\
    \        }\n    }\n    for(i in letters){\n        uniqueLetters[i] = letters[i];\n\
    \    }\n    return uniqueLetters;\n}\n", "    // get an array of all the characters\
    \ in the string\n    let chars = string.split(\"\"); //split it into an array\
    \ of characters (strings)\n    // get the count of each character\n    let char_count\
    \ = chars.reduce((acc, char) =>{\n        // if the character doesn't exist, add\
    \ 1\n        acc[char] = acc[char] ? acc[char] + 1 : 1; //if it does, increment\
    \ the count\n        return acc; //return accumulator\n    }, {});\n    // return\
    \ how many distinct characters there are\n    return Object.keys(char_count).length;\n\
    }\n", "    var characterSet = unique(string).reduce(function(result, char){\n\
    \        result[char] = true;\n        return result;\n    }, {});\n    return\
    \ Object.keys(characterSet).length;\n}\n", "    var uniqueCharacters = 0;\n  \
    \  for (var i = 0; i< string.length; i++){\n        if (string.charCodeAt(i) >=\
    \ 65 && string.charCodeAt(i) <= 90)\n            uniqueCharacters++;\n    }\n\
    \    return uniqueCharacters;\n}\n", "  return string.split(\"\").filter((character,\
    \ index)=>(index===0 || string[index-1]===character)).filter((character,index)=>(index>1)).length\n\
    }\n", "    var map = {};\n    var count = 0;\n    for(var i = 0; i < string.length;\
    \ i++){\n        map[string.charAt(i)] = true;\n    }\n    for(var i = 0; i <\
    \ string.length; i++){\n        if(map[string.charAt(i)] !== true){\n        \
    \    count++;\n        }\n    }\n    return count;\n}", "  string = string.toLowerCase()\n\
    \  let count = 1\n  for(let i = 0; i < string.length; i++){\n    if (string.charAt(i)\
    \ == string.charAt(i+1)){\n      count++\n    }\n  }\n  return count\n}\n", " \
    \  var distinct=0, i, char;\n   for(i=0;i<string.length;i++){\n       char = string[i];\n\
    \       if(string.charAt(i).toLowerCase() !== string.charAt(i).toUpperCase()){\n\
    \           distinct++;\n       }\n   }\n   return distinct;\n}\n", "    let arr\
    \ = [];\n    for (let i = 0; i < string.length; i++){\n        arr.push(string.charAt(i).toLowerCase());\n\
    \    }\n    let uniqueArr = [...new Set(arr)];\n    return uniqueArr.length\n\
    }\n</code>\n<|/ a dscore=1 tags=javascript,arrays |>\n<| a |>\n<code>", "    var\
    \ char_count = 1;\n    var letters = string.split(\"\");\n    for(var i in letters){\n\
    \        var letter = letters[i];\n        if(letter != letter.toUpperCase() &&\
    \ letter != letter.toLowerCase())\n            char_count++;\n    }\n    return\
    \ char_count;\n}\n", "    return string.split(\"\").filter(function(item) {\n\
    \        return item.toLowerCase() !== item.toUpperCase();\n    }).length;\n}\n\
    <|/ file source=github ext=.js |>", "\tvar i, counter = 0, chars = {};\n\tfor\
    \ (i = 0; i < string.length; i++){\n\t\tif (!(chars[string[i]]++)){\n\t\t\tchars[string[i]]\
    \ = 1;\n\t\t\tcounter++;\n\t\t}\n\t}\n\treturn counter;\n}\n", "    return Array.from(string.toLowerCase()).filter((x,\
    \ i) => string.indexOf(x) === i).length\n}\n", "    var count = {}\n    var len\
    \ = string.length\n\n    for (var i = 0, i; i < len; i++){\n        i = string.charCodeAt(i)\n\
    \        count[String.fromCharCode(i)] = count.hasOwnProperty(i) ? count[i] +\
    \ 1 : 1 \n    }\n\n    return count\n}", "\tlet distinct_characters = 0,\n\t\t\
    characters = \"\";\n\n\tfor (let i = 0; i < string.length; i++){\n\t\tcharacters\
    \ += string[i].toLowerCase();\n\t}\n\n\tfor (let i = 0; i < characters.length;\
    \ i++){\n\t\tdistinct_characters += characters.indexOf(characters[i]) > -1 ? 1\
    \ : 0;\n\t}\n\treturn distinct_characters;\n}", "    let count = 0;\n    string.split('').forEach((el)=>{\n\
    \        if(string.includes(el)) count++;\n    });\n    return count;\n}\n</code>\n\
    For string compression, just find out how many of those different characters are\
    \ in the string. So, if there are 4 unique characters, then the string has 5 unique\
    \ characters. There are other ways to do it too. I just thought it would be fun\
    \ to think about it!\n<|/ a dscore=2 tags=string,javascript |>\n<| a dscore=2\
    \ |>\nHere's a really simple way using regex:\n<code>", "  return get_unique_characters(string).length;\n\
    }\n", "    return string.split('').length\n}\n", "  let count = 0;\n  let lowerLetters\
    \ = [];\n  let upperLetters = [];\n  for(let i = 0; i < string.length; i++){\n\
    \    if(string[i].toLowerCase() != \"x\"){\n      if(string[i].toLowerCase() !=\
    \ string[i].toUpperCase()){\n        lowerLetters.push(string[i].toLowerCase());\n\
    \      }\n    }\n    else{\n      if(string[i].toUpperCase() != \"X\"){\n    \
    \    upperLetters.push(string[i].toUpperCase());\n      }\n    }\n  }\n  for(let\
    \ i = 0; i < lowerLetters.length; i++){\n    count++;\n  }\n  for(let i = 0; i\
    \ < upperLetters.length; i++){\n    count++;\n  }\n  return count;\n}\n", "  var\
    \ characters_found = [];\n  for(var i = 0; i < string.length; i++){\n    characters_found.push(string.charCodeAt(i));\n\
    \  }\n  var characters = characters_found.sort(function(a, b){return b-a;});\n\
    \  var distinct_characters = 0;\n  for(var i = 1; i < characters.length; i++){\n\
    \    if(characters[i-1] != characters[i])\n      distinct_characters++;\n  }\n\
    \  return distinct_characters;\n}\n", "    return string.split(\"\").filter((char)=>{\n\
    \        return /^[a-z]+$/.test(char);\n    }).length;\n}\n", "  var letters =\
    \ string.split('');\n  var freq = {};\n  for (var i = 0; i < letters.length; ++i){\n\
    \    freq[letters[i]] = (typeof freq[letters[i]] === 'undefined') ? 1 : freq[letters[i]]\
    \ + 1;\n  }\n  return freq;\n}\n", "  var characters = [];\n  for(var i = 0; i\
    \ < string.length; i++){\n    if(characters.indexOf(string[i].toLowerCase()) ==\
    \ -1){\n      characters.push(string[i].toLowerCase());\n    }\n  }\n  return\
    \ characters.length;\n}\n", "\tvar unique_letters = [];\n\tfor (var i of string){\n\
    \t\tif (unique_letters.indexOf(i) == -1){\n\t\t\tunique_letters.push(i);\n\t\t\
    }\n\t}\n\treturn unique_letters.length;\n}\n", "    var uniqueLetterCounts = {};\n\
    \    var uniqueCharCount = 0;\n    \n    for(var i = 0; i < string.length; i++){\n\
    \        var char = string[i];\n        var lowerCaseLetter = char.toLowerCase();\n\
    \        if(!(lowerCaseLetter in uniqueLetterCounts)) {\n            uniqueLetterCounts[lowerCaseLetter]\
    \ = 1;\n        }\n        else {\n            uniqueLetterCounts[lowerCaseLetter]++;\n\
    \        }\n    }\n    \n    for(key in uniqueLetterCounts){\n        uniqueCharCount\
    \ += uniqueLetterCounts[key];\n    }\n    \n    return uniqueCharCount;\n}\n",
  "    var counters = {};\n    for (var i = 0, len = string.length; i < len; i++)\n\
    \        counters[string[i]] = counters[string[i]] ? counters[string[i]] + 1 :\
    \ 1;\n    return counters;\n}\n", "\t//remove non-alphabetic characters\n\tstring\
    \ = string.replace(/[^A-Za-z0-9]/g, '')\n\treturn string.split('').filter( function\
    \ (val) { return val.length !== 1 }).length;\n}\n", "    var chars = [];\n   \
    \ for(var i = 0; i < string.length; i++){\n        chars.push(string.charCodeAt(i));\n\
    \    }\n    return unique(chars);\n}\n", "\tvar characters = \"\";\n\tfor(var\
    \ i = 0; i < string.length; i++){\n\t\tvar character = string[i];\n\t\tcharacters\
    \ += character;\n\t}\n\tvar lowercase_characters = characters;\n\tvar uppercase_characters\
    \ = \"\";\n\tvar characters = lowercase_characters.split(\"\");\n\tfor(var i =\
    \ 0; i < characters.length; i++){\n\t\tvar character = characters[i];\n\t\tif(character.toUpperCase){\n\
    \t\t\tuppercase_characters += character.toUpperCase();\n\t\t}\n\t\telse{\n\t\t\
    \tuppercase_characters += character;\n\t\t}\n\t}\n\treturn lowercase_characters.length\
    \ - uppercase_characters.length;\n}\n", "\treturn string.replace(/\\W/g,\"\").replace(/[\\\
    W_]+/g,\"\").length;\n}\n", "\t//use javascript array.indexOf method\n\tvar chars\
    \ = string.split(\"\");\n\tvar distinct_characters_count = chars.filter((e, i,\
    \ a) => {\n\t\treturn a.indexOf(e, i) === i;\n\t}).length;\n\n\treturn distinct_characters_count;\n\
    }\n", "    var unique_characters = {}\n    for (var i = 0; i < string.length;\
    \ i++)\n        unique_characters[string[i]] = (i in unique_characters) ? unique_characters[i]+1\
    \ : 1;\n    return unique_characters.length;\n}\n", "\tvar chars = [];\n\tvar\
    \ count = 0;\n\t\n\tfor (var i = 0, l = string.length; i < l; i++) {\n\t\tif (chars.indexOf(string[i].toLowerCase())\
    \ == -1) {\n\t\t\tchars.push(string[i].toLowerCase());\n\t\t\tcount++;\n\t\t}\n\
    \t}\n\t\n\treturn count;\n}\n", "  var count = 0;\n  for(var i = 0; i < string.length;\
    \ i++){\n    if(string.charCodeAt(i) >= 97 && string.charCodeAt(i) <= 122){\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "    var hash = {};\n    var\
    \ characters_count = 0;\n    \n    //looping through each character of string\n\
    \    for(var i=0; i<string.length; i++){\n        if(typeof hash[string[i]] ===\
    \ 'undefined'){\n            hash[string[i]] = 1;\n        } else {\n        \
    \    hash[string[i]]++;\n        }\n    }\n    \n    //iterating through the hash\
    \ and finding out how many distinct characters does it consist of\n    for(var\
    \ key in hash){\n        if(hash[key] >= 1){\n            characters_count++;\n\
    \        }\n    }\n    return characters_count;\n}\n\n", "\tconst letters = string.split('')\n\
    \tlet distinctLettersCount = 0;\n\tfor(let i = 0; i < letters.length; i++){\n\t\
    \tif(!letters.includes(letters[i], letters[i+1])){\n\t\t\tdistinctLettersCount++\n\
    \t\t}\n\t}\n\treturn distinctLettersCount\n}\n", "    let letters = string.split(\"\
    \")\n    letters.sort();\n    let counts = [];\n    for(let i=0; i<letters.length;\
    \ i++){\n        if(letters[i] !== letters[i+1]){\n            counts.push(letters[i])\n\
    \        }\n    }\n    return counts.length\n}\n", "  return string.split('').filter(function(char)\
    \ {\n    return string.indexOf(char) === -1;\n  }).length;\n}\n", "  string =\
    \ string.toLowerCase();\n  var hash_map = {};\n  var counter = 0;\n  for (var\
    \ i = 0; i < string.length; i++) {\n    hash_map[string[i]] = hash_map[string[i]]\
    \ | 1\n    if(!hash_map[string[i]]){\n      counter++;\n      hash_map[string[i]]\
    \ = 1;\n    }\n  }\n  return counter;\n}\n\n", "    var hash = {}, i, len = string.length;\n\
    \    for(i=0;i<len;i++){\n        var character = string[i];\n        if(hash[character]\
    \ == undefined){\n            hash[character] = 1;\n        }else{\n         \
    \   hash[character] ++;\n        }\n    }\n    return Object.keys(hash).length;\n\
    }\n", "    var counter = {}\n    var distinct_count = 0\n\n    for(var i = 0;\
    \ i < string.length; i++){\n        var letter = string.charAt(i)\n        if(counter[letter]\
    \ == undefined)\n            counter[letter] = 0\n        counter[letter]++\n\
    \    }\n\n    for(var letter in counter){\n        if(counter[letter] > 1)\n \
    \           distinct_count++\n    }\n\n    return distinct_count\n}\n</code>\n\
    <|/ a tags=javascript |>\n<| c |>\nI like your answer. It helped me understand\
    \ better how to use JS to solve this problem. Although I still got one error in\
    \ my code. Maybe it's because I didn't properly copy and paste the code. I'll\
    \ fix it later, but for now, thanks a bunch for your help.\n<|/ c |>\n<| c |>\n\
    I'm sorry for not responding earlier. I actually figured out my problem. Your\
    \ code is great and I learned some new things from it. Thanks!\n<|/ c |>\n<| a\
    \ dscore=1 |>\nI wrote a solution that uses Array.prototype.filter(), Array.prototype.sort()\n\
    and Array.prototype.join()\n\n<code>", "\t\n\t//Create a frequency dictionary\
    \ to store frequencies of each distinct character\n\tlet freq = {};\n\t\n\t//Iterate\
    \ over each letter\n\tfor (let i = 0; i < string.length; i++){\n\t\t\n\t\t//If\
    \ letter doesn't exist in frequency dictionary, add it\n\t\tif (!freq[string[i]])\
    \ freq[string[i]] = 1;\n\t\t\n\t\t//Else, increase frequency by 1\n\t\telse freq[string[i]]++;\n\
    \t}\n\t\n\t//Return number of unique characters\n\treturn Object.keys(freq).length;\n\
    }\n", "  var char_count = 0;\n  for(var i = 0; i < string.length; i++){\n    char_count\
    \ = char_count + count_distinct_case_chars(string[i]);\n  }\n  return char_count;\n\
    }\n", "\treturn string.split('').filter(function(char){\n\t\treturn !char.match(/[A-Z]/)\
    \ || !char.match(/[a-z]/) || !char.match(/[0-9]/);\n\t}).length;\n}\n", "\treturn\
    \ countSubstrings(string, true);\n}\n", "  var chars = {};\n  var char_count =\
    \ 0;\n  for (var i = 0; i < string.length; i++) {\n    if (chars[string[i]]) {\n\
    \      chars[string[i]]++;\n    } else {\n      chars[string[i]] = 1;\n    }\n\
    \  }\n  for (var k in chars) {\n    char_count = char_count + chars[k];\n  }\n\
    \  return char_count;\n}\n", "    var stringLower = string.toLowerCase().split(\"\
    \");\n    var counter = {};\n    for(var i=0;i<stringLower.length;i++){\n    \
    \    var charLower = stringLower[i];\n        if(counter[charLower]){\n      \
    \      counter[charLower]++;\n        } else {\n            counter[charLower]=1;\n\
    \        }\n    }\n    return Object.keys(counter).length;\n}\n", "    var characters\
    \ = {};\n    for(var i=0; i < string.length; i++){\n        var char = string.charAt(i);\n\
    \        if(characters[char] == null) characters[char] = 1;\n        else characters[char]++;\n\
    \    }\n    return Object.keys(characters).length;\n}", "\tvar count = 0\n\tstring\
    \ = string.toLowerCase()\n\tfor(var i = 0; i < string.length; i++){\n\t\tif(string.charAt(i)\
    \ !== string.charAt(i).toUpperCase()){\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n\
    }\n", "  let char_map = {};\n  let char_sum = 0;\n  for(let c of string){\n  \
    \  char_map[c] = char_map[c] + 1 || 1;\n    char_sum += char_map[c];\n  }\n  return\
    \ char_sum;\n}\n", "    if(string==null) return 0;\n    var uniqueChars={};\n\
    \    \n    for(var i=0;i<string.length;i++){\n        var letter=string[i].toLowerCase();\n\
    \        if(letter in uniqueChars) \n            uniqueChars[letter]+=1;\n   \
    \     else uniqueChars[letter]=1;\n    }\n    \n    var count=0;\n    for(var\
    \ letter in uniqueChars)\n        count+=uniqueChars[letter];\n    return count;\n\
    }\n</code>\n<|/ a |>\n<| a |>\n<code>\npublic static function checkSubstring($str,$substring)\n\
    \    {\n        $charCount=str_split($substring);\n        $numOfSubstrings=sizeof($charCount);\n\
    \        $i=0;\n        $result=true;\n        while($result)\n        {\n   \
    \         if($charCount[$i]==0)\n            {\n                $result=false;\n\
    \                break;\n            }\n            else\n            {\n    \
    \            $i++;\n                if($i==$numOfSubstrings)\n               \
    \ {\n                    $result=false;\n                    break;\n        \
    \        }\n            }\n        }\n        return $result;\n    }\n\n    $string=\"\
    abcdEfghijklmn\";\n    if(checkSubstring($string,$substring))\n    {\n       \
    \ echo \"true\";\n    }\n    else\n    {\n        echo \"false\";\n    }\n</code>\n\
    <|/ a dscore=0 tags=php |>\n<| a dscore=0 tags=php |>\n<code>", "    return Array.from(string.toLowerCase()).filter((item,\
    \ index)=>{\n        return string.indexOf(item) == index;\n    }).length;\n}\n",
  "  var counts = {};\n  for(var i = 0; i < string.length; i++){\n    var char = string.charAt(i);\n\
    \    if(counts[char]){\n      counts[char] += 1;\n    }else{\n      counts[char]\
    \ = 1;\n    }\n  }\n  return counts;\n}\n", "    var hash = {}\n    for(var i\
    \ = 0, len = string.length; i < len; i++){\n        var char = string[i]\n   \
    \     if(hash[char]){\n            hash[char]++\n        } else {\n          \
    \  hash[char] = 1\n        }\n    }\n    return Object.keys(hash).length\n}\n",
  "    let array = []\n\n    for(var i = 0; i < string.length; i++){\n        if(array.includes(string[i]))\
    \ continue\n        array[array.length] = string[i]\n    }\n\n    return array.length\n\
    }\n", "    let char_counter = {}\n    for(let i = 0; i < string.length; i++){\n\
    \        char_counter[string[i]] = (char_counter[string[i]] || 0) + 1\n    }\n\
    \    \n    return Object.keys(char_counter).length\n}\n", "  let  distinctChars\
    \ = 0;\n  for(let i = 0; i < string.length; i++){\n    for(let j = i+1; j < string.length;\
    \ j++){\n      if(string.charAt(i) === string.charAt(j)){\n        distinctChars++;\n\
    \      }\n    }\n  }\n  return distinctChars;\n}\n", "\treturn string.split(\"\
    \").filter(function (char) {\n\t\treturn string.split(\"\").indexOf(char) ===\
    \ string.length - 1\n\t}).length\n}\n\n", "  let unique_characters = string.split(\"\
    \").filter(function(char, i){\n    return char != string[i];\n  });\n  return\
    \ unique_characters.length;\n}\n\n", "\tlet result = 0;\n\tfor(let i = 0; i <\
    \ string.length; i++){\n\t\tlet character = string[i];\n\t\tif(string.indexOf(character)\
    \ == string.length - 1){\n\t\t\tresult++;\n\t\t}\n\t}\n\treturn result;\n}\n",
  "\treturn string.split('').filter(function(x){ return string.indexOf(x) === -1 }).length;\n\
    }\nmodule.exports = count_distinct_characters;\n},{}],302:[function(_dereq_,module,exports){",
  "  var uniqueChars = new Set();\n  \n  for(var i=0; i<string.length; i++){\n   \
    \ uniqueChars.add(string[i]);\n  }\n  \n  return uniqueChars.size;\n}\n", "  \
    \  var letters = {};\n    for (var i=0; i<string.length; i++){\n        var char\
    \ = string.charAt(i);\n        if (letters[char] === undefined) {\n          \
    \  letters[char] = 1;\n        } else {\n            letters[char] += 1;\n   \
    \     }\n    }\n    return Object.keys(letters).filter(function(k){return letters[k]\
    \ > 1;}).length;\n}", "  return Array.from(string).filter(char => char.match(/[a-z]/)\
    \ || char.match(/[A-Z]/)).length\n}\n", "  let count = 0;\n  for(let i = 0; i\
    \ < string.length; i++){\n    for(let j = 0; j < string[i].length; j++){\n   \
    \   let char = string[i].substr(j,1);\n      if(count[char]){\n        count[char]++;\n\
    \      }else{\n        count[char] = 1;\n      }\n    }\n  }\n  for(let char in\
    \ count){\n    if(count[char] > 1){\n      return char;\n    }\n  }\n  return\
    \ undefined;\n}", "  var distinct_char = 0;\n  for (var i = 0; i < string.length;\
    \ i++){\n    if (i === 0 || string[i - 1] != string[i]){\n      distinct_char++;\n\
    \    }\n  }\n  return distinct_char;\n}\n", "    return string.replace(/[^A-Z]/g,\"\
    \").length;\n}", "\treturn string.replace(/[^a-zA-Z0-9]/g,\"\").length;\n}", " \
    \ string = string.toLowerCase();\n  var char_count = {};\n  for(var i = 0;i <\
    \ string.length;i++){\n    if(char_count[string.charAt(i)] == null)\n      char_count[string.charAt(i)]\
    \ = 0;\n    char_count[string.charAt(i)] = char_count[string.charAt(i)] + 1;\n\
    \  }\n  var total_chars = 0;\n  for(var key in char_count){\n    total_chars =\
    \ total_chars + char_count[key];\n  }\n  return total_chars;\n}\n", "  var result\
    \ = {}\n  string = string.toLowerCase()\n  for(var i=0; i<string.length; i++){\n\
    \    var letter = string.charAt(i)\n    if(result[letter] == null){\n      result[letter]\
    \ = 1\n    }else{\n      result[letter] += 1\n    }\n  }\n  return Object.keys(result).length\n\
    }", "\tlet strArr = string.split('');\n\tlet result = new Set();\n\tfor (let i\
    \ = 0; i < strArr.length; i++){\n\t\tlet char = strArr[i].toLowerCase().charCodeAt(0);\n\
    \t\tlet str = strArr[i];\n\t\tlet isExists = result.has(str);\n\t\tif (isExists)\
    \ {\n\t\t\tresult.delete(str);\n\t\t} else {\n\t\t\tresult.add(str);\n\t\t}\n\t\
    }\n\treturn result.size;\n}\n", "\treturn string.split('').filter((character)=>{\n\
    \t\tlet lowercase = character.toLowerCase();\n\t\treturn string.split('').filter((lower_char)=>{\n\
    \t\t\treturn lower_char.toLowerCase() === lowercase;\n\t\t}).length===1;\n\t}).length;\n\
    }", "    string = string.replace(/[^A-Za-z]+/g, ' ');\n    var characters = string.split(\"\
    \ \");\n    var unique_characters = [];\n    var count = characters.length;\n\n\
    \    characters.forEach(function(character){\n        if (character && unique_characters.indexOf(character)\
    \ === -1){\n            unique_characters.push(character);\n        }\n    });\n\
    \n    return unique_characters.length;\n}\n", "  var result = 0;\n  var len =\
    \ string.length;\n  for (var i = 0; i < len; i++) {\n    var character = string.charAt(i);\n\
    \    result += count_distinct_characters_for_type(character);\n  }\n  return result;\n\
    }\n", "    var hash = {};\n    string.split(\"\").forEach(function(char){\n  \
    \      hash[char] = (hash[char] || 0) + 1\n    });\n    return Object.keys(hash).length;\n\
    }\n</code>\n<|/ a tags=python,string,performance,javascript |>\n<| a dscore=1\
    \ tags=python,string,performance,javascript |>\nHere is my attempt at an answer\
    \ using Python and NumPy\n<code>\nfrom string import ascii_lowercase\nimport numpy\
    \ as np\n\ndef count_distinct_characters(string):\n    # Create a string with\
    \ every possible character in the alphabet\n    chars = np.chararray(26)\n   \
    \ chars.fill(ascii_lowercase)\n    chars = chars.tostring()\n\n    # Count how\
    \ many times each character appears in your string\n    counts = np.zeros(26)\n\
    \    for char in string:\n        counts[chars[char]] += 1\n\n    # Return number\
    \ of unique characters in your string\n    return len(np.unique(counts))\n\nprint(count_distinct_characters(\"\
    Jerry\"))\n</code>\n<|/ a |>\n<| a tags=python,string,performance,javascript |>\n\
    This would have done the job for me using pure JS :\n<code>\nlet string = \"Jerry\"\
    ;\n", "    return string.toLowerCase().split('').sort().join('')\n        .replace(/[^\\\
    w]/g, '').length;\n}\n", "\treturn (new Set(string.toLowerCase())).length \n}\n",
  "  var uniqueCharacters = {};\n\n  for (var i = 0; i < string.length; i++) {\n \
    \   var character = string[i].toLowerCase();\n\n    if (uniqueCharacters[character]){\n\
    \      uniqueCharacters[character]++;\n    } else {\n      uniqueCharacters[character]\
    \ = 1;\n    }\n  }\n\n  return Object.keys(uniqueCharacters).length;\n}\n", " \
    \   var result = 0;\n    var i, c;\n    for(i = 0, c = string.length; i < c; i++){\n\
    \        c = string.charCodeAt(i);\n        result += !isNaN(c) ? c - 48 : 0;\n\
    \    }\n    return result;\n}\n", "    if (string === null || string === undefined)\
    \ return 0;\n    return count_distinct_characters_helper(string, 0, string.length);\n\
    }", "\treturn count_distinct_characters(string, []); //The second parameter should\
    \ be an array, because some strings have duplicate characters\n}\n", "  let counts\
    \ = {};\n  let characters = string.split(\"\");\n  for (let i = 0; i < characters.length;\
    \ i++) {\n    counts[characters[i]] = (counts[characters[i]] || 0) + 1;\n  }\n\
    \  let result = 0;\n  for(let key in counts){\n    if(key != \"\")\n      result++;\n\
    \  }\n  return result;\n}\n", "  var map={};\n  for (var i=0;i<string.length;i++){\n\
    \    var c=string.charAt(i);\n    map[c] ? map[c]++ : map[c]=1;\n  }\n  return\
    \ Object.keys(map).length;\n}\n", "    let distinctChar = 0;\n    string.split(\"\
    \").forEach((el)=>{\n        if(el.toLowerCase() !== el){\n            distinctChar++;\n\
    \        }\n    });\n    return distinctChar;\n}\n", "    return string.split('').filter((value,index)=>{\n\
    \        return value===string[index];\n    }).length;\n}\n", "    var string_values\
    \ = string.split(\"\");\n    var characters = string_values.map(function(e){\n\
    \        var character = e.charCodeAt(0);\n        if(character === e.toUpperCase())\
    \ return character.toLowerCase();\n        if(character === e.toLowerCase()) return\
    \ character.toUpperCase();\n        return character;\n    });\n    return characters.reduce(function(previous_value,\
    \ current_value){\n        if(current_value.charCodeAt(0) === current_value.toUpperCase().charCodeAt(0))\
    \ previous_value++;\n        else if(current_value.charCodeAt(0) === current_value.toLowerCase().charCodeAt(0))\
    \ previous_value++;\n        else previous_value++;\n        return previous_value;\n\
    \    }, 0);\n}", "    return Array.from(new Set(string.split(''))).length;\n}\n",
  "  var hashTable = {};\n  for(var i=0;i<string.length;i++){\n    var char = string.charAt(i);\n\
    \    if (hashTable[char] === undefined){\n      hashTable[char] = 1;\n    }\n\
    \    else{\n      hashTable[char] += 1;\n    }\n  }\n  return Object.keys(hashTable).length;\n\
    }\n", "    var count = 0;\n    for(var i=0; i<string.length; i++){\n        if(string.charAt(i)\
    \ !== string.charAt(i).toUpperCase()){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n", "  return string.split('').reduce(function(count, character){\n\
    \    return count + (character==string.toLowerCase() ? 1 : 0);\n  }, 0);\n}\n",
  "    let uniques = new Set()\n    let count_all = 1\n    for(let i = 0; i < string.length;\
    \ i++){\n        let char = string.charAt(i)\n        if(uniques.has(char)){\n\
    \            count_all++\n        } else {\n            uniques.add(char)\n  \
    \      }\n    }\n    return count_all\n}\n", "    return string.replace(/[^A-Z]/g,\
    \ \"\").length;\n}", "  let chars = string.split(\"\"),\n    counts = new Map();\n\
    \  for (let c of chars){\n    counts.set(c.toLowerCase(), counts.get(c.toLowerCase())\
    \ + 1);\n    counts.set(c.toUpperCase(), counts.get(c.toUpperCase()) + 1);\n \
    \ }\n  return counts.size;\n}\n", "\treturn string.replace(/[a-z]/gi, \"\").replace(/[A-Z]/gi,\
    \ \"\").replace(/[\\d]/gi, \"\").replace(/[\\.]/gi, \"\").replace(/[!]/gi, \"\"\
    ).replace(/[\\?]/gi, \"\").replace(/[\\-]/gi, \"\").replace(/[\\_]/gi, \"\").replace(/[a-z]/gi,\
    \ \"\").replace(/[A-Z]/gi, \"\").replace(/[\\d]/gi, \"\").replace(/[\\.]/gi, \"\
    \").replace(/[!]/gi, \"\").replace(/[\\?]/gi, \"\").replace(/[\\-]/gi, \"\").replace(/[\\\
    _]/gi, \"\");\n}\n", "    var i, count;\n    count = 0;\n    for(i = 0; i < string.length;\
    \ i++){\n        if(!hasChar(count, string[i])){\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n", "    if (string.length <= 1) return 0;\n\
    \    const chars = Array.from(string);\n    const count = chars.reduce((count,\
    \ char) => {\n        return count + char.charCodeAt(0);\n    }, 0);\n    return\
    \ count;\n}", "  return string.split('').filter( function(i){\n    return !!i\n\
    \  }).length\n}", "  var chars = []\n  \n  for (var i = 0; i < string.length;\
    \ i++){\n    var char = string.charAt(i)\n    var index = chars.indexOf(char)\
    \ + 1\n\n    if (index > 0){\n      chars[index-1]++\n    }\n    else {\n    \
    \  chars.push(char)\n    }\n  }\n  return chars.length\n}\n</cell>\n<text>\nNow\
    \ we can use count_distinct_characters to count how many distinct characters are\
    \ in the string we've been given.\n\n\n</text>\n<cell>\ncount_distinct_characters(\"\
    abbbbccc\")\n</cell>\n<text>\nNow let's make a function that will tell us how\
    \ many unique characters are in a string up to a certain number of characters.\n\
    \n\n</text>\n<cell>", "\tvar count = 0;\n\tvar string1 = string.split('');\n\t\
    for(var i=0; i<string1.length; i++){\n\t\tvar string = string1[i].toUpperCase();\n\
    \t\tvar string2 = string1.splice(i,1);\n\t\tvar string3 = string.split('');\n\t\
    \tfor(var j=0; j<string3.length; j++){\n\t\t\tstring2 = string2.concat(string3.splice(i,1));\n\
    \t\t}\n\t\tvar string2 = string2.join('');\n\t\tcount += string2.split('').length;\n\
    \t}\n\treturn count;\n}\n", "    var obj = {};\n    var count = 0;\n    string.split('').forEach(function(element){\n\
    \        if(!obj[element])\n            obj[element] = 1;\n        else\n    \
    \        obj[element]++;\n    });\n    for(var key in obj)\n        count++;\n\
    \    return count;\n}\n", "  return string.split(\"\").filter(function(character){\n\
    \    return !/[A-z]/.test(character)\n  }).length\n}\n", "    var count = {}\n\
    \    for(var i = 0; i < string.length; i++){\n        var char = string[i]\n \
    \       if(count[char] == undefined){\n            count[char] = 0\n        }\n\
    \        count[char]++\n    }\n    return count\n}", "    return Array.from(string).reduce((acc,\
    \ cur) => acc.concat(\n        Array.from(cur.toLowerCase()).filter(\n       \
    \     char => !acc.includes(char.toLowerCase())\n        )\n    ).length + 1,1);\n\
    }\n", "    if(string === null || string === undefined) return 0;\n    var unique_characters\
    \ = new Array();\n    for(var i = 0; i < string.length; i++){\n        var character\
    \ = string[i];\n        var unique_character = unique_characters[character];\n\
    \        if(unique_character === undefined){\n            unique_characters[character]\
    \ = 1;\n        }\n        else{\n            unique_characters[character]++;\n\
    \        }\n    }\n    return unique_characters.length;\n}\n", "\tvar result =\
    \ {};\n\tvar chars = string.split(\"\");\n\tfor(var i = 0; i < chars.length; i++){\n\
    \t\tif(!result[chars[i]]){\n\t\t\tresult[chars[i]] = 1;\n\t\t}else{\n\t\t\tresult[chars[i]]++;\n\
    \t\t}\n\t}\n\treturn Object.keys(result).length;\n}\n", "    var stringLower =\
    \ string.toLowerCase();\n    var stringUpper = string.toUpperCase();\n    var\
    \ letters = [];\n    for(var i = 0; i <= stringUpper.length; i++){\n        letters.push(stringUpper.charCodeAt(i));\n\
    \    }\n    var letterCount = {};\n    for(var i = 0; i <= stringLower.length;\
    \ i++){\n        var char = stringLower.charCodeAt(i);\n        if(!letterCount[char]){\n\
    \            letterCount[char] = 1;\n        }\n        else{\n            letterCount[char]++;\n\
    \        }\n    }\n    var result = letterCount;\n    return result;\n}\n", " \
    \   var n = 1;\n    var current_char;\n    for(var i = 0; i < string.length; i++){\n\
    \        current_char = string[i];\n        if(i + 1 < string.length){\n     \
    \       var next_char = string[i+1];\n            if((current_char.toLowerCase()\
    \ == next_char.toLowerCase())){\n                n++;\n            }\n       \
    \ }\n    }\n    return n;\n}", "  let char_counts = {}\n  for (let char of string.toLowerCase()){\n\
    \    char_counts[char] = char_counts[char] + 1 || 1;\n  }\n  return Object.keys(char_counts).length\n\
    }\n", "  var uniqueChars = [];\n  for(var i=0; i<string.length; i++){\n    if(uniqueChars.indexOf(string[i])\
    \ == -1){\n      uniqueChars.push(string[i]);\n    }\n  }\n  return uniqueChars.length;\n\
    }\n", "  if(typeof string === 'string'){\n    string = string.toLowerCase();\n\
    \    var unique = 0;\n    \n    for(var i = 0, len = string.length; i < len; i++){\n\
    \      if(unique.indexOf(string[i]) === -1){\n        unique.push(string[i]);\n\
    \      }\n    }\n    return unique.length;\n  }else{\n    return null;\n  }\n}",
  "  var result = 0;\n  string = string.toLowerCase();\n  for(var i = 0; i < string.length;\
    \ i++){\n    if(string.charCodeAt(i) !== string.charCodeAt(i).toUpperCase()){\n\
    \      result++;\n    }\n  }\n  return result;\n}\n", "\t\n\tlet char_counter\
    \ = {}\n\t\n\tfor (let c of string){\n\t\t\n\t\tif (!char_counter[c]) char_counter[c]\
    \ = 1\n\t\telse char_counter[c]++\n\t\t\n\t}\n\t\n\treturn Object.keys(char_counter).length\n\
    }\n", "  var chars = string.split('');\n  var num_distinct = 0;\n  chars.forEach(function(char){\n\
    \    char !== '' ? num_distinct += 1 : (num_distinct = 1);\n  });\n  return num_distinct;\n\
    }", "    var chars = {};\n    for(var i=0; i<string.length; i++){\n        chars[string.charAt(i)]\
    \ = true;\n    }\n    var count = {};\n    for(var c in chars){\n        count[c]\
    \ = count[c] || 0;\n        count[c]++;\n    }\n    return Object.keys(count).length;\n\
    }\n", "  // your code here\n  var uniqueArray = [];\n  var stringArray = string.split(\"\
    \");\n  var newArray = [];\n  for(var i = 0; i < stringArray.length; i++){\n \
    \   if(stringArray[i] === \"\"){\n      for(var j = 0; j < uniqueArray.length;\
    \ j++){\n        if(uniqueArray[j] === \"\"){\n          uniqueArray[j] = 1; //\
    \ add character to unique array\n        }\n      }\n    }else{\n      if(stringArray[i]\
    \ === stringArray[i - 1]){\n        newArray.push(stringArray[i]);\n      }else{\n\
    \        uniqueArray[stringArray[i].toLowerCase()] = 1;\n      }\n    }\n  }\n\
    \  return newArray.length;\n}\n", "    // loop through each character in the string\n\
    \    for (var i=0; i<string.length; i++){\n        // loop through each character\
    \ in the string\n        for (var j=0; j<string.length; j++){\n            //\
    \ if we get this character already in the string and if the other string doesn't\
    \ have it\n            if (string[i] == string[j] && i != j){\n              \
    \  // then increment the count by 1\n                // if we get this character\
    \ already in the string and if the other string has it\n                // but\
    \ in different case (i.e. capital letter of lowercase letter)\n              \
    \  // then increment the count by 1\n                if (string[i] != string[j]\
    \ && (string[i].toUpperCase() != string[j].toUpperCase())){\n                \
    \    //console.log(\"same\");\n                    count++;\n                \
    \    //console.log(string[i]);\n                }\n                // if we get\
    \ this character already in the string and if the other string has it\n      \
    \          // but in different case (both are lower case)\n                //\
    \ then increment the count by 1\n                else if (string[i] != string[j]\
    \ && string[i].toUpperCase() == string[j].toUpperCase()){\n                  \
    \  //console.log(\"different\");\n                    count++;\n             \
    \       //console.log(string[i]);\n                }\n                // if we\
    \ get this character already in the string and if the other string doesn't have\
    \ it\n                // but in same case (both are lower case)\n            \
    \    // then increment the count by 1\n                else if (string[i] != string[j]\
    \ && string[i].toUpperCase() != string[j].toUpperCase()){\n                  \
    \  //console.log(\"same\");\n                    count++;\n                  \
    \  //console.log(string[i]);\n                }\n            }\n        }\n  \
    \  }\n    return count;\n}", "\treturn string.split(\"\").filter(function(character){\n\
    \t\treturn character === character.toUpperCase() || character === character.toLowerCase();\n\
    \t}).length;\n}\n", "    var unique = {}, chars = {}, i, len;\n    for(i = 0,\
    \ len = string.length; i < len;i++){\n        chars[string.charAt(i)] = true;\n\
    \    }\n    for(i in chars) unique[i] = true;\n    return Object.keys(unique).length;\n\
    }\n", "  return Array.from(string, function(character){\n    return character.charCodeAt(0);\
    \ //get ascii character from string and convert to integer\n  }).filter(function(item,\
    \ pos) {\n    return Array.from(string, function(character) {\n      return item.charCodeAt(0)\
    \ === character.charCodeAt(0); //get ascii character from string and convert to\
    \ integer\n    }).indexOf(true) === pos; //filter out duplicate characters that\
    \ already exist in string\n  }).length;\n}\n", "  var letters = {};\n  \n  for(var\
    \ i=0; i<string.length; i++){\n    var letter = string.charAt(i);\n    \n    if(letters.hasOwnProperty(letter)){\n\
    \      letters[letter]++;\n    } else {\n      letters[letter] = 1;\n    }\n \
    \ }\n  \n  var result = 0;\n  for(var letter in letters){\n    if(letters[letter]\
    \ > 1){\n      result++;\n    }\n  }\n  return result;\n}\n", "\tvar result =\
    \ 1;\n\tfor(var i = 0; i < string.length; i++){\n\t\tvar character = string.charAt(i);\n\
    \t\tif(i > 0 && string.charAt(i - 1) == character){\n\t\t\tresult++;\n\t\t}\n\t\
    }\n\treturn result;\n}\n", "    // 1. Convert to string and ignore non-letters\n\
    \    // 2. Remove all empty strings\n    // 3. Count unique characters\n    //\
    \ 4. Return it\n    return Array.from(\n        string.split(\"\")\n    )\n  \
    \      .filter(character => \n            // Only count chars that are in upper\
    \ and lower case (ignoring case)\n            character.toUpperCase() === character\
    \ ||\n            character.toLowerCase() === character\n        )\n        .length\n\
    }\n", "  var count = {}, chars, length, i;\n  if(string.length < 1) return 0;\n\
    \n  for(var i = 0, length = string.length; i < length; i++){\n    chars = string.substr(i,\
    \ 1);\n    if(count[chars]) count[chars] += 1;\n    else count[chars] = 0;\n \
    \ }\n\n  for(chars in count){\n    count[chars] += 1\n  }\n  \n  return count;\n\
    }\n", "\treturn string_chars(string).reduce(function(a, c){\n\t\treturn a + (a\
    \ || c == \"Z\" ? 0 : 1);\n\t});\n}\n", "  var count = 0;\n  for (var i = 0; i\
    \ < string.length; i++){\n    var char = string.charAt(i);\n    if (char_distinct(char,char.toUpperCase()))\
    \ count++;\n    if (char_distinct(char,char.toLowerCase())) count++;\n  }\n  return\
    \ count;\n}\n", "    return string.split('').filter(function(ch){\n        return\
    \ !ch.match(/[a-z]/i) && ch != ' ' && ch != '.';\n    }).length;\n}\n", "\tvar\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\tvar distinct_alphabet = alphabet.toUpperCase()+\
    \ alphabet.toLowerCase() + alphabet.substr(0, 1).toUpperCase() + alphabet.substr(1,\
    \ alphabet.length);\n\tvar char_arr = [];\n\tvar char_arr_count = {};\n\tvar result\
    \ = 0;\n\tvar is_first = true;\n\tfor(var i = 0; i < string.length; i++){\n\t\t\
    if(is_first){\n\t\t\tchar_arr = [];\n\t\t\tchar_arr_count = {};\n\t\t\tis_first\
    \ = false;\n\t\t}\n\t\tvar char = string.charAt(i);\n\t\tif(char_arr_count[char]){\n\
    \t\t\tchar_arr_count[char] += 1;\n\t\t} else {\n\t\t\tchar_arr_count[char] = 1;\n\
    \t\t\tchar_arr.push(char);\n\t\t}\n\t}\n\tfor(var k in char_arr_count){\n\t\t\
    if(char_arr_count[k] == char_arr.length){\n\t\t\tresult += distinct_alphabet.indexOf(k);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\n", "    var count = 0;\n    var letter;\n\n\
    \    for (var x = 0; x <= string.length; x++){\n        letter = string.substring(x,\
    \ x+1);\n        count += Math.pow(letter.toUpperCase().charCodeAt(0) - letter.toLowerCase().charCodeAt(0),\
    \ 2);\n    }\n\n    return count;\n}\n", "    var count = 0;\n    \n    for(var\
    \ i = 0; i < string.length; i++){\n        var current_letter = string[i].toUpperCase();\n\
    \        var next_letter = string[i+1].toUpperCase();\n        if(current_letter\
    \ !== next_letter){\n            count++;\n        }\n        \n        i += 1;\n\
    \    }\n    return count;\n}\n", "\tvar ret = 0\n\tvar i, ch;\n\tfor(i=0; i<string.length;\
    \ i++){\n\t\tch = string.charAt(i)\n\t\tif(typeof ch_map[ch] === 'undefined'){\n\
    \t\t\tch_map[ch] = 1;\n\t\t\tret++;\n\t\t}else{\n\t\t\tch_map[ch]++\n\t\t}\n\t\
    }\n\treturn ret;\n}\n\n", "    //return string.split('').filter(function (e) {\
    \ return e.match(/[a-z]/i); }).length\n    var chars = string.split('').filter(function\
    \ (e) { return e.match(/[a-z]/i); });\n    var counts = {};\n    chars.forEach(function(c){\
    \ counts[c] = counts[c] || 0; counts[c]++; });\n    return Object.keys(counts).map(function(c){\
    \ return {char: c, cnt: counts[c]} }).sort(function(a,b){ return b.cnt - a.cnt\
    \ }).slice(0,100);\n}\n", "\tlet characters = {};\n\tlet unique_characters = [];\n\
    \tfor(let char of string){\n\t\tcharacters[char] = characters[char]+1\n\t\tif(characters[char]\
    \ > 1)\n\t\t\tunique_characters.push(char)\n\t\tcharacters[char] = 1\n\t}\n\t\n\
    \treturn unique_characters.length\n}\n", "  var char_count = 0;\n  var char_map\
    \ = {};\n  for(var i=0; i<string.length;i++){\n    if(char_map[string[i]]){\n\
    \      char_map[string[i]]++;\n    }else{\n      char_map[string[i]] = 1;\n  \
    \    char_count += 1;\n    }\n  }\n  return char_count;\n}\n", "  var distinctCount\
    \ = 0;\n  var distinctChars = [];\n  for (var i = 0; i < string.length; i++) {\n\
    \    var currentChar = string[i].toLowerCase();\n    if (distinctChars.indexOf(currentChar)\
    \ === -1) {\n      distinctCount += 1;\n      distinctChars.push(currentChar);\n\
    \    }\n  }\n  return distinctCount;\n}\n", "    var unique_characters = new Set();\n\
    \    unique_characters.add(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n    unique_characters.add(\"\
    abcdefghijklmnopqrstuvwxyz\");\n    unique_characters.add(\"0123456789\");\n \
    \   unique_characters.add(\"!@#$%^&*()_+{}[]\\|;:'\\\",<>?/\");\n    unique_characters.add(\"\
    ~`!@#$%^&*()_+{}[]\\|;:'\\\",<>?/~\");\n    \n    for(var key in unique_characters){\n\
    \        if(unique_characters.hasOwnProperty(key)){\n            for(var i=0;\
    \ i<string.length; i++){\n                var current_char = string.charAt(i);\n\
    \                if(unique_characters[key].indexOf(current_char) == -1){\n   \
    \                 break;\n                }\n            }\n            unique_characters[key]\
    \ = unique_characters[key].length - i;\n        }\n    }\n\n    return unique_characters.length;\n\
    }\n</code>\nAnd it seems to work fine.\n<|/ a tags=javascript,arrays |>\n<| c\
    \ |>\nThis is not working for me. Can you please tell what is the issue with this\
    \ function?\n<|/ c |>\n<| c |>\nI tested my code before posting it and I didn't\
    \ have issues. What version of javascript are you using?\n<|/ c |>\n<| c |>\n\
    I am using javascript version 1.5 (which is the most common in chrome) Can you\
    \ please tell if this is working for you?\n<|/ c |>\n<| c |>\nI don't have a computer\
    \ with Chrome installed to test it, but I believe this should work. I also tried\
    \ it on Chrome (51.0.2704.103) and Safari (7.0.6 (9537.78.4)). Here is a working\
    \ example: https://jsfiddle.net/Lz3s5Lqm/\n<|/ c |>\n<| c |>\nI think this is\
    \ the problem I am facing, I am working on chrome latest version 51.0.2704.103\
    \ & your code is not working there also.\n<|/ c |>\n<| a tags=javascript,arrays\
    \ |>\nA solution without using external libraries:\n<code>\nlet s = \"abc\";\n\
    let r = \"\";\n\nfor (let i = 0; i < s.length; i++) {\n  if (s.charCodeAt(i) <\
    \ 128) {\n    r += s.charAt(i);\n  }\n}\n", "  let count = 0;\n  let lowerCase\
    \ = false;\n  let upperCase = false;\n  let numberCase = false;\n  let spaceCase\
    \ = false;\n  for(let i = 0; i < string.length; i++){\n    let char = string[i];\n\
    \    let charLower = char.toLowerCase();\n    let charUpper = char.toUpperCase();\n\
    \    let charNumber = Number(char);\n    let charSpace = char.replace(\" \", \"\
    \");\n    if(charLower === char){\n      lowerCase = true;\n    }\n    if(charUpper\
    \ === char){\n      upperCase = true;\n    }\n    if(charNumber === char){\n \
    \     numberCase = true;\n    }\n    if(charSpace === char){\n      spaceCase\
    \ = true;\n    }\n    if(lowerCase){\n      count += 1;\n    }\n    if(upperCase){\n\
    \      count += 1;\n    }\n    if(numberCase){\n      count += 1;\n    }\n   \
    \ if(spaceCase){\n      count += 1;\n    }\n  }\n  return count;\n}", "  let char_count\
    \ = 0\n  string.split('').forEach(character => {\n    if(!char_set.has(character)){\n\
    \      char_set.add(character)\n      char_count += 1;\n    }\n  });\n  return\
    \ char_count;\n}\n", "    var count_distinct = 0\n    for(var char of string){\n\
    \        if(string.includes(char.toUpperCase())){\n            count_distinct\
    \ += count_distinct_characters(char.toLowerCase())\n        } else {\n       \
    \     count_distinct += 1\n        }\n    }\n    return count_distinct\n}\n",
  "    for(var i=0;i<string.length;i++){\n        if(string.charCodeAt(i)!=string.charCodeAt(i).toLowerCase()){\n\
    \            return 0;\n        }\n    }\n    return string.length;\n}\n\n", " \
    \ let chars = string.split(\"\").sort();\n  let char_map = {};\n  for(let i =\
    \ 0; i < chars.length; i++){\n    if(!char_map[chars[i]]){\n      char_map[chars[i]]\
    \ = 1;\n    } else {\n      char_map[chars[i]]++;\n    }\n  }\n  return Object.keys(char_map).length;\n\
    }\n\n", "    var letters = {};\n    \n    //Convert string to lower case and loop\
    \ through each character\n    for(let i = 0; i < string.length; i++){\n      \
    \ letters[string[i].toLowerCase()] = true;\n    }\n    \n    //Count the number\
    \ of unique characters found\n    return Object.keys(letters).length;\n}", "\t\
    var i, count = 1;\n\tfor(i = 0; i<string.length; i++){\n\t\tif(string.charAt(i)\
    \ !== string.charAt(i).toUpperCase()){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }", "    var unique_counts = {}\n    for(var i = 0;i < string.length;i++){\n \
    \       var letter = string[i].toLowerCase()\n        if(unique_counts[letter]\
    \ == null){\n            unique_counts[letter] = 0\n        }\n        unique_counts[letter]++\n\
    \    }\n    return Object.keys(unique_counts).map(function(letter){return unique_counts[letter]}).reduce(function(a,b){return\
    \ a+b},0)\n}", "  var hash = {};\n  string.split(\"\").forEach(function(i){\n\
    \    hash[i] = (hash[i] || 0) + 1;\n  });\n  return hash;\n}\n", "    var char_counter\
    \ = {};\n    string.split(\"\").forEach(function(char){\n        if(char in char_counter){\n\
    \            char_counter[char] += 1\n        } else {\n            char_counter[char]\
    \ = 1\n        }\n    });\n    return Object.keys(char_counter).length;\n}\n",
  "    var count = 0, i = 0;\n    for(; i < string.length; i++){\n        if(string.charAt(i)\
    \ !== string.charAt(string.length - i - 1)){\n            count = count + 1;\n\
    \        }\n    }\n    return count;\n}\n\n", "  var counter = {};\n  string.split('').forEach(function(str){\n\
    \    counter[str.toLowerCase()] = counter[str.toLowerCase()] ? counter[str.toLowerCase()]\
    \ + 1 : 1;\n  });\n  return Object.keys(counter).length;\n}\n", "    if(string\
    \ === null) return null;\n    var uniqueArray = {};\n    for(var i=0; i<string.length;\
    \ i++){\n        var character = string[i];\n        if(uniqueArray[character]\
    \ === undefined) {\n            uniqueArray[character] = 1;\n        } else {\n\
    \            uniqueArray[character]++;\n        }\n    }\n    return uniqueArray;\n\
    }\n", "\tvar chars = string.split('');\n\treturn chars.filter(function(item, pos,\
    \ arr){\n\t\treturn arr.indexOf(item) == pos;\n\t}).length;\n}", "    var result\
    \ = 0;\n    \n    for (var i = 0; i < string.length; i++){\n        result +=\
    \ count_distinct_characters_aux(string[i]);\n    }\n    return result;\n}\n",
  "  var count=0;\n  for(var i=0; i<string.length; i++){\n    if(string.charAt(i)==string.charAt(i).toUpperCase())\n\
    \      count++;\n  }\n  return count;\n}\n", "\treturn string.toLowerCase().split(\"\
    \").filter(function(char){\n\t\treturn char.charCodeAt(0) != char.charCodeAt(0).toUpperCase().charCodeAt(0);\n\
    \t}).length;\n}\n", "  return string.split(\"\").filter(function(character){\n\
    \    return character.charCodeAt(0) !== character.toUpperCase().charCodeAt(0);\n\
    \  }).length;\n}\n", "\tvar arr = [];\n\tfor (var i = 0, len = string.length;\
    \ i < len; i++){\n\t\tarr.push(string.charCodeAt(i));\n\t}\n\tvar unique_char_arr\
    \ = {};\n\tfor (var i = 0; i < arr.length; i++){\n\t\tif (unique_char_arr[arr[i]]\
    \ === undefined){\n\t\t\tunique_char_arr[arr[i]] = 1;\n\t\t}else{\n\t\t\tunique_char_arr[arr[i]]++;\n\
    \t\t}\n\t}\n\treturn unique_char_arr.length;\n}\n", "\tvar counter = 0;\n\tvar\
    \ stringLower = string.toLowerCase();\n\tfor(var i = 0; i < stringLower.length;\
    \ i++){\n\t\tif(string.charAt(i) === stringLower.charAt(i) && stringLower.charAt(i)\
    \ != stringLower.charAt(i)){\n\t\t\tcounter++;\n\t\t}\n\t}\n\treturn counter;\n\
    }\n", "    for(var c = 0; c < string.length; c++){\n        var char = string[c];\n\
    \        var distinct_char_found = false;\n\n        for(var d = 0; d < chars.length;\
    \ d++){\n            if(char == chars[d]){\n                distinct_char_found\
    \ = true;\n                break;\n            }\n        }\n        if(!distinct_char_found){\n\
    \            return chars.length + 1;\n        }\n    }\n    return chars.length;\n\
    }\n", "    \n    var unique_chars = [];\n    var distinct_chars = 0;\n    \n \
    \   for(var i=0; i<string.length; i++){\n        var char_to_check = string[i].toUpperCase();\n\
    \        if(unique_chars.indexOf(char_to_check) == -1){\n            unique_chars.push(char_to_check);\n\
    \            distinct_chars++;\n        }\n    }\n    \n    return distinct_chars;\n\
    }\n</cell>\n<cell>", "    let characters = string.split('').sort().join('');\n\
    \    return characters.split('').sort().length;\n}", "  let unique = {};\n  let\
    \ count = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    let character\
    \ = string[i];\n    if(!unique[character]){\n      unique[character] = 1;\n  \
    \    count++;\n    } else {\n      unique[character]++;\n    }\n  }\n\n  return\
    \ count;\n}\n", "  var unique_array = [];\n  for(var i=0; i<string.length; i++){\n\
    \    if(unique_array.indexOf(string[i]) == -1){\n      unique_array.push(string[i]);\n\
    \    }\n  }\n  return unique_array.length;\n}\n", "    var uniqueChars = [];\n\
    \    for(var i = 0; i < string.length; i++){\n        uniqueChars.push(string[i].toLowerCase());\n\
    \    }\n\n    return uniqueChars.length;\n}\n</cell>\n<text>\nExercise: Create\
    \ a function which checks to see if a string is a palindrome (a word that is the\
    \ same backwards). Make sure that your function returns the actual reversed string.\n\
    \nHint: The string class has a reverse() method that will help you reverse a string.\
    \ You can also use the split() method (which returns a string) to split a string\
    \ into an array of characters.\n\n\n</text>\n<cell>", "\tvar counter = 0;\n\t\
    for (var i = 0; i < string.length; i++){\n\t\tvar char = string.charAt(i);\n\t\
    \tvar lowerCaseChar = char.toLowerCase();\n\t\tif (lowerCaseChar != char){\n\t\
    \t\tcounter++;\n\t\t}\n\t}\n\treturn counter;\n}\n", "  var distinct_count = 0\n\
    \  for (var i = 0; i < string.length; i++){\n    var char = string.charAt(i)\n\
    \    var next_char = string.charAt(i+1)\n    if(char !== next_char){\n      distinct_count\
    \ += 1\n    }\n  }\n  return distinct_count\n}\n</code>\n<|/ a tags=character-encoding,java,unicode,javascript\
    \ dscore=2 |>\n<| a tags=character-encoding,java,unicode,javascript |>\nI suggest\
    \ you to use regex to solve this kind of problems. This is an example using JAVA:\n\
    <code>\nString stringToCheck = \"\u041C\u0438\u0440 \u043D\u0430\u0448\u0438 \u0433\
    \u043E\u0440\u043D\u0438\u043A\u0438 \u0437\u0430\u0441\u0430\u0436\u0438\u0432\
    \u0430\u044E\u0442\u0441\u044F \u0432 \u043A\u0430\u0442\u0435\u0433\u043E\u0440\
    \u0438\u0438 \u0438 \u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u044F\
    \u044E\u0442 \u0441\u0430\u043C\u043E \u0441\u0435\u0431\u0435. \u041A\u0430\u0436\
    \u0434\u044B\u0439 \u0441\u0435\u043C\u044C\u044F \u043F\u0440\u0435\u0434\u0441\
    \u0442\u0430\u0432\u043B\u044F\u0435\u0442 \u0441\u0435\u0431\u044F \u0441\u0430\
    \u043C\u043E \u0441\u0435\u0431\u0435.\";\n\nString pattern = \"[\u0430-\u044F\
    \u0410-\u042Fa-zA-Z]+\";\nString replacement = \"*\";\nString result = stringToCheck.replaceAll(pattern,\
    \ replacement);\n\nSystem.out.println(result);\n</code>\nOutput\n<code>\n\u041C\
    \u0438\u0440* *\u043D\u0430\u0448\u0438 \u0433\u043E\u0440\u043D\u0438\u043A\u0438\
    \ \u0437\u0430\u0441\u0430\u0436\u0438\u0432\u0430\u044E\u0442\u0441\u044F \u0432\
    \ \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u0438 \u0438 \u043F\u0440\u0435\
    \u0434\u0441\u0442\u0430\u0432\u043B\u044F\u044E\u0442 \u0441\u0430\u043C\u043E\
    \ \u0441\u0435\u0431\u0435. \u041A\u0430\u0436\u0434\u044B\u0439 \u0441\u0435\u043C\
    \u044C\u044F \u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u044F\u0435\
    \u0442 \u0441\u0435\u0431\u044F \u0441\u0430\u043C\u043E \u0441\u0435\u0431\u0435\
    .\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe problem is the count of distinct characters,\
    \ not the replacement. Also you regex does not take into account the fact that\
    \ some characters are more frequent than others. So `\u041C\u0438\u0440` is not\
    \ changed to `\u041C\u0438\u0440*` in your example.\n<|/ c |>\n<| a tags=character-encoding,java,unicode,javascript\
    \ dscore=1 |>\n<code>", "    let count = 0;\n    for(let i=0; i<string.length;\
    \ i++){\n        for(let j=0; j<string.length; j++){\n            if(i != j){\n\
    \                if(string[i] === string[j]){\n                    count++;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return count;\n}\n", "\tvar counter = 0;\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tvar character = string[i];\n\t\tif(character != string.toLowerCase()\
    \ && character != string.toUpperCase()){\n\t\t\tcounter++;\n\t\t}\n\t}\n\treturn\
    \ counter;\n}\n", "  string = string.toLowerCase();\n  var hashTable = {};\n \
    \ var count = 1;\n  var character;\n  for (var i = 0; i < string.length; i++){\n\
    \    character = string[i];\n    if (!hashTable[character]){\n      hashTable[character]\
    \ = count++;\n    }\n  }\n  return count;\n}\n\n", "  var char_arr = string.split(\"\
    \");\n  var count = 1;\n\n  for (var i=0; i < char_arr.length; i++){\n    var\
    \ char = char_arr[i];\n    if(char_arr.indexOf(char, i+1) == i){\n      count++;\n\
    \    }\n  }\n\n  return count;\n}\n\n", "\treturn string.split('').filter((char)\
    \ => char.match(/[a-z]/i)).length;\n}\n\n", "    // Use a Set object here to count\
    \ the distinct characters in the string.\n    var set = new Set();\n\n    // Loop\
    \ through the string and add each character to the set.\n    for(let c of string){\n\
    \        set.add(c);\n    }\n\n    // Return the count of the number of unique\
    \ characters in the string.\n    return set.size;\n}\n</cell>\n<cell>", "    if(string\
    \ === undefined || string === null || string === \"\") return 0;\n    var chars\
    \ = {}, num = 0;\n    for(var i = 0; i < string.length; i++){\n        var char\
    \ = string.charAt(i), key = char.charCodeAt(0);\n        if(!chars[key]) chars[key]\
    \ = 1;\n        else chars[key]++;\n    }\n    for(var key in chars) num += chars[key];\n\
    \    return num;\n}\n", "    let charCounts = {};\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(charCounts[string[i]]){\n            charCounts[string[i]]++;\n\
    \        }else{\n            charCounts[string[i]] = 1;\n        }\n    }\n  \
    \  return Object.keys(charCounts).length;\n}\n", "  let count=0;\n  for(let i=0;\
    \ i<string.length; i++){\n    if(string.charAt(i)==string.charAt(i+1)){\n    \
    \  count++;\n    }\n  }\n  return count;\n}\n", "    var counter = 0;\n    for(var\
    \ i=0; i<string.length; i++){\n        if(string.charAt(i)==string.charAt(string.length-1)\
    \ && string.charAt(i)!='>'){\n            counter++;\n        }\n    }\n    return\
    \ counter;\n}\n", "\treturn string.match(/[a-z]+/g).length;\n}", "    if(!string\
    \ || string === \"\")\n        return 0;\n    return string.replace(/[^a-zA-Z0-9]/g,\
    \ \"\").length;\n}\n", "    var characters = string.split('').sort();\n    var\
    \ result = 0;\n    for(var i = 0; i <= characters.length; i++){\n        if(i\
    \ === characters.length){\n            result = result + 1;\n        } else {\n\
    \            if(characters[i] === characters[characters.length - i]) {\n     \
    \           result = result + 1;\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "    // loop through each letter and find out if it is present\
    \ or not in our set of letters.\n    let num_distinct = 0\n    for (let letter\
    \ of string){\n        if (known_characters.includes(letter)){\n            //\
    \ the letter is in the known characters, so increment the counter.\n         \
    \   num_distinct++\n        }\n    }\n    return num_distinct\n}\n", "\tvar count\
    \ = 0;\n\tvar alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\tvar l = alphabet.length;\n\
    \tfor (var i=0; i<string.length; i++){\n\t\tvar c = string.charAt(i);\n\t\tfor\
    \ (var j=0; j<l; j++){\n\t\t\tif (c === alphabet[j]){\n\t\t\t\tcount++;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n", "  var letters = {}\n  var\
    \ count = 0\n  for(var i=0; i<string.length; i++){\n    var letter = string.charAt(i)\n\
    \    if(letters[letter]){\n      letters[letter]++\n    } else {\n      letters[letter]\
    \ = 1\n    }\n  }\n  for (var letter in letters) {\n    count++\n  }\n  return\
    \ count\n}\n", "\tlet counter={};\n\tstring.split(\"\").forEach(function(character){\n\
    \t\tif(!counter[character])\n\t\t\tcounter[character]=0;\n\t\tcounter[character]++;\n\
    \t});\n\treturn Object.keys(counter).length;\n}\n", "    return string.split('').reduce(function(a,b){\n\
    \        return a + b.match(/[\\x00-\\xff]/).length;\n    },0);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
