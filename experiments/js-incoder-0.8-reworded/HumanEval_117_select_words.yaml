name: HumanEval_117_select_words
language: js
prompt: "//Given a string s and a natural number n, you have been tasked to implement\
  \ \n// a function that returns an array of all words from string s that contain\
  \ exactly \n// n consonants, in order these words appear in the string s.\n// If\
  \ the string s is empty then the function should return an empty array.\n// Note:\
  \ you may assume the input string contains only letters and spaces.\n// Examples:\n\
  // >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"\
  Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple\
  \ white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"\
  ]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s,\
  \ n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
  little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
  , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
  Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
  Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
  a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
completions: ["    let res = [];\n    \n    let strArr = s.split(\" \");\n    strArr.forEach((str)\
    \ => {\n        \n        if(n === strArr.length){\n            res.push(str);\n\
    \        } else {\n            let num = 0;\n            let strArr = str.split(\"\
    \");\n            \n            for(let i = 0; i < strArr.length; i++){\n    \
    \            if(i == strArr.length-1 && strArr[i] == n){\n                   \
    \ num += 1;\n                }\n                \n                if(strArr[i]\
    \ === strArr[i+1]){\n                    num += 1;\n                }\n      \
    \      }\n            \n            if(num === n){\n                res.push(str);\n\
    \            }\n        }\n    });\n    return res;\n}\n", "    var ans = [];\n\
    \    \n    for(var i in s) {\n        var l = 0;\n        var l1 = null;\n   \
    \     var l2 = null;\n        for(var j in s[i].split(\"\")) {\n            var\
    \ a = s[i].split(\"\")[j];\n            if(a.match(/[AEIOUaeiou]/i)) {\n     \
    \           l++;\n            } else {\n                l1 = l;\n            \
    \    break;\n            }\n        }\n        var l3 = null;\n        for(var\
    \ j in s[i].split(\"\")) {\n            var a = s[i].split(\"\")[j];\n       \
    \     if(a.match(/[AEIOUaeiou]/i)) {\n                l3++;\n            } else\
    \ {\n                l2 = l3;\n                break;\n            }\n       \
    \ }\n        if(l >= n) {\n            ans.push(s[i]);\n        }\n        if(l1\
    \ == n+1) {\n            ans.push(s[i]);\n        }\n        if(l2 == n+1) {\n\
    \            ans.push(s[i]);\n        }\n        if(l3 == n+1) {\n           \
    \ ans.push(s[i]);\n        }\n    }\n    \n    return ans;\n}\n", "\tvar res =\
    \ [];\n\tfor (var i = 0, j = s.length; i < j; i++){\n\t\tif (select_word(s.substring(i,\
    \ j), n)) {\n\t\t\tres.push(s.substring(i, j));\n\t\t\ti += n-1;\n\t\t\tj = i;\n\
    \t\t}\n\t}\n\treturn res;\n}\n", "    if (s == \"\") return [];\n    var letter\
    \ = s.split(\"\");\n    var counts = {};\n    for (var i=0; i<letter.length; i++)\
    \ {\n        var letterString = letter[i].split(\"\");\n        var letterCount\
    \ = letterString.length;\n        if (letterCount > 0) {\n            var word\
    \ = letterString[letterCount-1];\n            if (counts[word] == undefined) {\n\
    \                counts[word] = 0;\n            }\n            counts[word] =\
    \ counts[word] + 1;\n        }\n    }\n    var res = Object.keys(counts).filter(function(elem){\n\
    \        return counts[elem] == n;\n    }); \n    return res;\n}\n", "    if (n\
    \ === undefined) n = 4;\n    let result = [];\n    for (let i = 0; i < s.length;\
    \ i += 1) {\n        let count = 0;\n        for (let j = 0; j < s.length; j +=\
    \ 1) {\n            if (s[j] === s[i]) {\n                count += 1;\n      \
    \      }\n        }\n        if (count === n) {\n            result.push(s.substr(i,\
    \ i + 1));\n        }\n    }\n    if (result.length === 0) {\n        result =\
    \ [\"empty\"];\n    }\n    return result;\n}\n", "\tlet arr = []\n\tlet strArr\
    \ = s.split(\" \");\n\tfor(let i = 0; i < strArr.length; i++) {\n\t\tlet count\
    \ = 1;\n\t\tlet strArr1 = strArr[i].split(\"\");\n\t\tfor(let j = 0; j < strArr1.length;\
    \ j++) {\n\t\t\tlet tempArr = []\n\t\t\tif(j == strArr1.length - 1) {\n\t\t\t\t\
    let c = strArr1[j];\n\t\t\t\tif(c != \"a\"&& c != \"e\" && c != \"i\" && c !=\
    \ \"o\" && c != \"u\" && c != \"A\" && c != \"E\" && c != \"I\" && c != \"O\"\
    \ && c != \"U\") {\n\t\t\t\t\ttempArr.push(c);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t\tif(count == n) {\n\t\t\tarr.push(strArr[i])\n\t\t}\n\t}\n\t\
    return arr;\n}\n", "\tvar ret=[];\n\t\n\tif(n==0){\n\t\treturn ret;\n\t}\n\t\n\
    \tvar i=0;\n\twhile(s.length){\n\t\twhile(s.charAt(i)==' ' && i< s.length){\n\t\
    \t\ti++;\n\t\t}\n\t\t\n\t\tif(i==s.length || s.charAt(i)!=' '){\n\t\t\tvar last=i;\n\
    \t\t\twhile(last < s.length && s.charAt(last)!=' '){\n\t\t\t\tlast++;\n\t\t\t\
    }\n\t\t\tret.push(s.substring(i, last+1));\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\treturn\
    \ ret;\n}\n", "    var arr = [];\n    for(var i = 0; i < s.length; i++){\n   \
    \     for(var j = 0; j < s.length; j++){\n            if(s[i] === s[j]){\n   \
    \             arr.push(s[i]);\n            }\n        }\n    }\n    return arr.filter(function(v){\n\
    \        if(v.split(\"\").length >= n){\n            return true;\n        }\n\
    \    }).join(\" \");\n}\n", "\ts = s.split(\" \");\n\tvar result = [];\n\tfor(var\
    \ i=0;i<s.length;i++){\n\t\tfor(var j=0; j<s[i];j++){\n\t\t\tif(s[i] == s[j]){\n\
    \t\t\t\tif(s.length == n){\n\t\t\t\t\tresult.push(s[i]);\n\t\t\t\t\tbreak;\n\t\
    \t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(s.length != n){\n\t\treturn [];\n\t}\n\treturn\
    \ result;\n}\n", "    if (s.length == 0){\n        return [];\n    }\n    \n \
    \   // Split string s into array of words.\n    var words = s.split(\" \");\n\
    \    \n    // Iterate through array of words.\n    for(var i=0;i<words.length;\
    \ i++){\n        // Remove first element from array of words, and return if index\
    \ equals n.\n        if (i == n){\n            return words[i];\n        }\n \
    \       \n        // Remove all occurrences of first element of array of words\
    \ from array of words.\n        var words = words.filter( function(word){\n  \
    \          return word != words[i];\n        });\n    }\n    \n    // Return empty\
    \ array.\n    return [];\n}\n", "  var ans = [];\n  s = s.split(\" \");\n  for(var\
    \ i in s){\n    if(s.hasOwnProperty(i) && /^[a-z]$/.test(s[i])) ans.push(s[i]);\n\
    \  }\n  ans = ans.filter(function(i){return i.split(\"\").length == n});\n  return\
    \ ans;\n}", "  return s.split(\" \").filter(w => w.split(\"\").filter(b => b===n).length===n);\n\
    }", "\tvar arr = [], w;\n\tfor(var i = 0; i < s.length; i++){\n\t\tw = s.split('\
    \ ').map(function(x){ return x.toLowerCase();});\n\t\tif(w.length === n)\n\t\t\
    \tarr.push(w);\n\t}\n\treturn arr;\n}\n", "    var arr = s.split(\" \");\n   \
    \ var res = [];\n    if(s.length == 0 || n == 0){\n        return res;\n    }\n\
    \    var dict = {};\n    for(var i=0;i<arr.length;i++){\n        var c = arr[i].toLowerCase();\n\
    \        dict[c] = dict[c] || [];\n        dict[c].push(i);\n    }\n    for(var\
    \ i=0;i<Object.keys(dict).length;i++){\n        if(dict[Object.keys(dict)[i]].length\
    \ == n){\n            res.push(arr[i].replace(/^./, \"\"));\n        }\n    }\n\
    \    return res;\n}", "    if(s.length == 0){\n        return []\n    }\n    if(s.length\
    \ < n){\n        return [];\n    }\n    var words = []\n    for(var i = 0, end\
    \ = s.length; i < end; i++){\n        var char = s[i]\n        var nextChar =\
    \ s[i + 1]\n        if(char == ' ' || char == ''){\n            var words = select_words(s.slice(0,i+1),\
    \ n)\n            for(var w = 0; w < words.length; w++){\n                words[w]\
    \ = words[w] + s[w+1]\n            }\n            return words\n        }\n  \
    \      \n        if(nextChar == char){\n            var words = select_words(s.slice(0,i+1),\
    \ n)\n            for(var w = 0; w < words.length; w++){\n                if(words[w]\
    \ == char){\n                    words[w] = words[w] + char\n                }\n\
    \            }\n            return words\n        }\n    }\n    return words\n\
    }\n\n", "    //Write your code here\n    var res = [];\n    var chars = s.replace(/[^a-z\
    \ ]+/g, \"\");\n    var list = s.split(\" \");\n    for(i = 0; i < list.length;\
    \ i++){\n        if(chars.indexOf(list[i]) == -1){\n            chars.split(\"\
    \ \")\n        }\n    }\n    return chars;\n}", "    var res = [];\n    var n\
    \ = Number(n);\n    var s = String(s);\n    var words = s.split(/\\s+/);\n   \
    \ var i;\n    var j;\n    \n    if(s.length == 0){\n        return [];\n    }\n\
    \n    for(i = 0; i < words.length; i++){\n        for(j = i + 1; j < words.length;\
    \ j++){\n            if(words[i].length === n && words[j].length === n){\n   \
    \             res.push(words[i] + \" \" + words[j]);\n            }\n        }\n\
    \    }\n    return res;\n}\n", "  let arr = s.split(\" \").filter(x => x.search(/[a-z]/i)\
    \ !== -1);\n  if (arr.length < n){\n    return [];\n  }\n  return arr.filter((x,\
    \ i) => arr.indexOf(x, i+1) === n-1);\n}\n", "\t// initialize variables\n\tlet\
    \ a = new Array(s.length).fill(0);\n\tlet temp = new Array(s.length).fill(0);\n\
    \tlet i = new Array(s.length).fill(0);\n\t// find all consonants\n\tfor(let i\
    \ = 0; i< s.length; i++){\n\t\tif(s[i] === \"a\"){\n\t\t\ta[i] = 1;\n\t\t}\n\t\
    \telse if(s[i] === \"e\"){\n\t\t\ta[i] = 1;\n\t\t}\n\t\telse if(s[i] === \"i\"\
    ){\n\t\t\ta[i] = 1;\n\t\t}\n\t\telse if(s[i] === \"o\"){\n\t\t\ta[i] = 1;\n\t\t\
    }\n\t\telse if(s[i] === \"u\"){\n\t\t\ta[i] = 1;\n\t\t}\n\t\telse if(s[i] ===\
    \ \"y\"){\n\t\t\ta[i] = 1;\n\t\t}\n\t\telse{\n\t\t\ta[i] = 0;\n\t\t}\n\t}\n\t\
    // find if there exist n consonants\n\tfor(let i = 0; i< s.length; i++){\n\t\t\
    if(a[i]===n){\n\t\t\ttemp[i] = 1;\n\t\t}\n\t\telse{\n\t\t\ttemp[i] = 0;\n\t\t\
    }\n\t}\n\t// find all words that contain n consonants\n\tfor(let i = 0; i< s.length;\
    \ i++){\n\t\tif(temp[i] === 1){\n\t\t\ta[i] = 1;\n\t\t}\n\t\telse{\n\t\t\ta[i]\
    \ = 0;\n\t\t}\n\t}\n\t// find all words that contain only 1 consonant\n\tfor(let\
    \ i = 0; i< s.length; i++){\n\t\tif(a[i] === 0){\n\t\t\treturn [];\n\t\t}\n\t\
    }\n\tlet tempArray = [];\n\tlet tempIndex = 0;\n\twhile(tempIndex < s.length){\n\
    \t\tif(a[tempIndex] === 0){\n\t\t\ttempArray.push(s.slice(tempIndex, tempIndex+1));\n\
    \t\t}\n\t\ttempIndex++;\n\t}\n\treturn tempArray;\n}\n\n", "\tlet result = new\
    \ Array();\n\tlet temp = new Array();\n\tlet count = 0;\n\tlet index = 0;\n\t\
    let count = 0;\n\twhile(count != n){\n\t\ttemp[index] = s[index];\n\t\tindex++;\n\
    \t\tcount++;\n\t}\n\twhile(index > 0){\n\t\ttemp[index] = s[index];\n\t\tindex--;\n\
    \t\tcount++;\n\t}\n\tfor(let i = index; i >= 0; i--){\n\t\tfor(let j = 0; j <\
    \ temp.length; j++){\n\t\t\tif(temp[j] === s[i]){\n\t\t\t\tresult.push(temp[j]);\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n", "\t// write your\
    \ code here\n\tvar arr = [];\n\tfor (var i = 0; i<n; i++){\n\t\tfor (var j=0;\
    \ j<s.length; j++){\n\t\t\tif(!isConsonant(s[j])){\n\t\t\t\tarr.push(s[j]);\n\t\
    \t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr;\n}\n", "}\n", "\treturn s.split('\
    \ ').filter(function(s){\n\t\treturn s.split('').filter(function(char){\n\t\t\t\
    var count = s.split('').filter(function(item){\n\t\t\t\treturn item === char\n\
    \t\t\t}).length\n\t\t\treturn count === n\n\t\t}).length === n\n\t}).join(' ')\n\
    }\n", "    var w = [];\n    var temp = [];\n    var re = [];\n\n    for(var i=0;i<s.length;i++){\n\
    \        var j = s.indexOf(\"con\", i);\n        temp.push(s.substring(i, j));\n\
    \        if(j != -1){\n            re.push(temp);\n            temp = [];\n  \
    \      }\n    }\n\n    for(var j=0;j<re.length;j++){\n        if(re.length ==\
    \ n){\n            for(var k = 0;k<re.length;k++){\n                w.push(re[k][0])\n\
    \            }\n        }\n        if(re.length > n){\n            break;\n  \
    \      }\n    }\n    return w;\n}\n", "  if (s == \"\") {\n    return [];\n  }\n\
    \  let n1 = Array.from(s, n+1).join(\" \").split(\" \");\n  let words = s.split(\"\
    \ \").filter( e => n1.includes(e) );\n  return words;\n}\n", "\t\n}\n\n", "\t\
    let res = [];\n\t\n\tlet re = new RegExp(`^${n}[^aeiou]`, \"i\");\n\tlet m = s.match(re);\n\
    \t\n\tif(m !== null){\n\t\tres = m;\n\t}\n\t\n\tconsole.log(res);\n\treturn res;\n\
    }\n\nselect_words(\"Mary had a little lamb\", 4)", "    \n}\n", "\tvar result\
    \ = [];\n\tfor(var i=0; i<s.length; i++){\n\t\tif(!consonants.hasOwnProperty(s.charAt(i))){\n\
    \t\t\tresult.push(s);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\n", "  //This\
    \ function should return an array of strings that are the words from s\n  //containing\
    \ exactly n consonants in their order, according to the order of\n  //the input\
    \ string. No other words should be in s.\n  //Note that words containing \"n\"\
    \ consonants themselves should not be in the \n  //returned list.\n}\n", "\tlet\
    \ word_array = [];\n\tfor(let i = 0; i < s.length; i++){\n\t\tlet new_word = s.slice(0,i)\
    \ + s.slice(i+1);\n\t\tlet count_consonants = new_word.replace(/[^aeiouAEIOU]/g,\
    \ '').length;\n\t\tif(count_consonants == n){\n\t\t\tword_array.push(new_word);\n\
    \t\t}\n\t}\n\treturn word_array;\n}\n", "  var words = [];\n  var count = 0;\n\
    \  var chars = s.replace(/\\s/g,\"\").split(\"\");\n\n  for(var i=0, len=chars.length;i<len;i++){\n\
    \    if(count < n)\n      words.push(chars[i]);\n    count += chars[i].match(/[aeiou]/gi)\
    \ ? 1 : 0;\n  }\n  return words;\n}\n", "    var words = []\n    var flag = 0\n\
    \    \n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \" \"){\n  \
    \          flag = 0\n        }\n        else{\n            if(flag == n){\n  \
    \              words.push(s.slice(i, s.length))\n            }\n            else{\n\
    \                flag++\n            }\n        }\n    }\n\n    return words\n\
    }\n", "  s = s.replace(/\\s+/g, ' ');\n  s = s.toUpperCase().trim();\n  var arr\
    \ = s.split(' ');\n  var count = 0;\n  var newArr = [];\n  for(var i=0; i<arr.length;\
    \ i++){\n    if(arr[i].match(/[aeiouAEIOU]/)){\n      count++;\n    }\n  }\n \
    \ if(count == n){\n    newArr = arr;\n  }\n  else{\n    for(var j=0; j<arr.length;\
    \ j++){\n      if(arr[j].match(/[aeiouAEIOU]/)){\n        if(arr.indexOf(arr[j])\
    \ == n-1){\n          newArr.push(arr[j]);\n        }\n      }\n    }\n  }\n \
    \ return newArr;\n}", "\tif(!s){\n\t\treturn [];\n\t}\n\tvar str=s.split(\" \"\
    );\n\tvar arr=[];\n\tfor(var i=0;i<str.length;i++){\n\t\tvar word=str[i];\n\t\t\
    var count=0;\n\t\tvar i=0;\n\t\tfor(;i<word.length;i++){\n\t\t\tif(isConsonant(word.charAt(i))){\n\
    \t\t\t\tcount++;\n\t\t\t}else{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(count==n){\n\
    \t\t\tarr.push(word);\n\t\t}\n\t}\n\treturn arr;\n}\n", "}\n", "    return [];\n\
    }\n", "    // Your code here\n}\n</cell>\n<cell>", "\ts = s.split(\" \");\n\t\
    var res = [];\n\t\n\tfor(var i in s){\n\t\tif((s[i].match(/[^aeiouAEIOU]/gi)||[]).length\
    \ == n){\n\t\t\tres.push(s[i]);\n\t\t}\n\t}\n\t\n\treturn res;\n}", "    if(s.length\
    \ == 0 || n == 0)\n        return [];\n    \n    //first we create an array to\
    \ hold all possible words from s\n    let possible = [];\n    \n    //loop through\
    \ each letter in s and add it to the array possible if the letter matches the\
    \ letter at the nth position\n    //note that the second letter is the letter\
    \ at the n-1 position\n    for(i = 0 ; i < s.length; i++){\n        if(s[i] ==\
    \ s[(i-1) % s.length]){\n            possible.push(s.slice(i));\n        }\n \
    \   }\n    \n    //then we take those words and return only the ones that contain\
    \ the correct number of consonants and that match the right word\n    return possible.filter(x\
    \ => x.length == n && x.indexOf(s.slice(0, n)) == 0);\n}\n", "\tvar out = [],\n\
    \t\twords = s.split(\" \");\n\t\n\tn = n % words.length;\n\t\n\twords.forEach(function(word){\n\
    \t\tif(word.length == n){\n\t\t\tout.push(word);\n\t\t}\n\t});\n\t\n\treturn out;\n\
    }", "\treturn wordCount(s) == n ? s.split(\" \") : [];\n}\n", "  if(s.length===0){\n\
    \    return [];\n  }\n  var results = [];\n  var vowels = ['a','e','i','o','u','y'];\n\
    \  var consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','x','z'];\n\
    \  for(var i = 0; i< s.length; i++){\n    var word = s[i];\n    var count = 0;\n\
    \    for(var j = 0; j < consonants.length; j++){\n      var c = consonants[j];\n\
    \      var vowel = vowels[j];\n      if(word.indexOf(vowel) > -1){\n        count++;\n\
    \      }\n      if(word.indexOf(c) >-1){\n        count++;\n      }\n    }\n \
    \   if(count === n){\n      results.push(word);\n    }\n  }\n  return results;\n\
    }", "\t// your code here\n\tvar words = s.split(' ');\n\tvar new_words = [];\n\
    \tvar count = 0;\n\tfor(i=0; i<words.length; i++){\n\t\tif(words[i].split('').length\
    \ == n){\n\t\t\tnew_words.push(words[i]);\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count\
    \ == 0){\n\t\treturn [];\n\t}\n\treturn new_words;\n}\n", "\tlet w = [];\n\tfor(let\
    \ i = s.length - 1; i >= 0; i--){\n\t\tlet c = s.substring(i, i + 1).split(\"\"\
    ).filter(x => x.match(/[aeiouAEIOU]/));\n\t\tw.push(c);\n\t}\n\treturn w;\n}\n",
  "    \n    var res = [];\n    if (s.length == 0){\n        return res;\n    }\n\
    \    \n    var count = 0;\n    var lastCount;\n    for (var i=0; i<s.length; i++){\n\
    \        var c= s[i];\n        var j=i;\n        while(count<n){\n           \
    \ var t = s.slice(j, j+1);\n            if (t.indexOf(c) != -1 && t.indexOf(c)\
    \ == (j+1)){\n                lastCount = count;\n                count+=1;\n\
    \            }\n            j++;\n        }\n    }\n    \n    for (var i=0; i<s.length;\
    \ i++){\n        var c= s[i];\n        var j=i;\n        while(count<n){\n   \
    \         var t = s.slice(j, j+1);\n            if (t.indexOf(c) != -1){\n   \
    \             res.push(t);\n                count+=1;\n            }\n       \
    \     j++;\n        }\n    }\n    return res;\n}\n", "\tvar i, j, words, letters,\
    \ result=[];\n\tfor (i = 0; i<s.length; i++){\n\t\tletters = s[i];\n\t\twords\
    \ = [];\n\t\tfor (j = 0; j<n; j++){\n\t\t\tif (letters.indexOf(\"a\")!=-1){\n\t\
    \t\t\twords.push(\"a\");\n\t\t\t\tletters = letters.replace(\"a\", \"a\");\n\t\
    \t\t}\n\t\t\tif (letters.indexOf(\"e\")!=-1){\n\t\t\t\twords.push(\"e\");\n\t\t\
    \t\tletters = letters.replace(\"e\", \"e\");\n\t\t\t}\n\t\t\tif (letters.indexOf(\"\
    i\")!=-1){\n\t\t\t\twords.push(\"i\");\n\t\t\t\tletters = letters.replace(\"i\"\
    , \"i\");\n\t\t\t}\n\t\t\tif (letters.indexOf(\"o\")!=-1){\n\t\t\t\twords.push(\"\
    o\");\n\t\t\t\tletters = letters.replace(\"o\", \"o\");\n\t\t\t}\n\t\t\tif (letters.indexOf(\"\
    u\")!=-1){\n\t\t\t\twords.push(\"u\");\n\t\t\t\tletters = letters.replace(\"u\"\
    , \"u\");\n\t\t\t}\n\t\t}\n\t\tif (words.length>0){\n\t\t\tresult.push(words.join(\"\
    \ \"));\n\t\t}\n\t}\n\treturn result;\n}\n", "    var arr = [];\n    for (var\
    \ i = 0; i < s.length; i++) {\n        console.log(s[i]); //Debugging\n      \
    \  if (s.indexOf(s[i]) >= 0) {\n            arr.push(s[i]);\n        }\n    }\n\
    \    return arr;\n}\n", "  var arr = [];\n  for(var i = 0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && i >= s.length-n){\n      break;\n    }\n    if(s.charAt(i)\
    \ != \" \" && (s.charAt(i) == s.charAt(i+1) || s.charAt(i) == s.charAt(i+2)){\n\
    \      arr.push(s.slice(i,i+n));\n    }\n  }\n  return arr;\n}\n", "  if (s ==\
    \ \"\") {\n    return [];\n  }\n  const words = s.split(\" \");\n  const wordsArr\
    \ = words;\n  const result = new Array(n + 1);\n  result[0] = [];\n  for (let\
    \ i = 1; i < n + 1; i++) {\n    wordsArr.sort();\n    for (let j = 0; j < wordsArr.length;\
    \ j++) {\n      if (wordsArr[j].includes(\"consonant\")) {\n        result[i].push(wordsArr[j]);\n\
    \        break;\n      }\n    }\n  }\n  return result;\n}\n", "  var words = [];\n\
    \  var consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z'];\n\
    \  var vowels = ['a','e','i','o','u'];\n  var isConsonant = function(letter){\n\
    \    return consonants.indexOf(letter) > -1;\n  }\n  var isVowel = function(letter){\n\
    \    return vowels.indexOf(letter) > -1;\n  }\n  s = s.replace(/\\s/g, \"\");\n\
    \  var lastLetter = \"\";\n  var currentLetter = \"\";\n  for(var i = 0, len =\
    \ s.length; i < len; i++){\n    currentLetter = s[i];\n    if(isConsonant(currentLetter)){\n\
    \      var len = words.length;\n      for(var j = 0, len2 = words.length; j <\
    \ len2; j++){\n        if(words[j].length >= n){\n          if((words[j].indexOf(currentLetter)\
    \ === 0) || (words[j].indexOf(currentLetter) === words[j].length - 1)){\n    \
    \        words[j] = words[j] + currentLetter;\n          }\n        }\n      }\n\
    \    }\n    if(isVowel(currentLetter)){\n      if(words[words.length-1].length\
    \ >= n){\n        if((words[words.length-1].indexOf(currentLetter) === 0) || (words[words.length-1].indexOf(currentLetter)\
    \ === words[words.length-1].length - 1)){\n          words[words.length-1] = words[words.length-1]\
    \ + currentLetter;\n        }\n      }\n    }\n    if(words.length >= n){\n  \
    \    words.push(currentLetter);\n    }\n    if(words.length === n){\n      if(s[s.length-1]\
    \ === \" \"){\n        words.push(\"\");\n      }\n      for(var j = 0; j < words.length;\
    \ j++){\n        if(words[j].length === 1){\n          words[j] = words[j] + s[s.length-1];\n\
    \          s = s.slice(0,-1);\n          break;\n        }\n      }\n    }\n \
    \ }\n  return words;\n}", "  return []\n}\n", "  var a = []\n  s = s.split(' ')\n\
    \  for(var i = 0; i < s.length; i++){\n    if( s.charAt(i) == ' '){\n      if(\
    \ n == s.length-1 )\n        a.push(s[i])\n    }else{\n      if( s.charAt(i) ==\
    \ s.charAt(n) )\n        a.push(s[i])\n    }\n  }\n  return a\n}\n", "    // Write\
    \ your code here\n    var res = [];\n    if(s!=\"\" && n>0){\n        for(var\
    \ i = 0; i < s.length; i++){\n            for(var j = 0; j < n; j++){\n      \
    \          if(s[i] !== ' ' && s[i] === s[j]){\n                    res.push(s[i]);\n\
    \                }\n            }\n        }\n    }\n    return res;\n}\n", " \
    \ return [...s.split(/\\s+/)].filter(w => w.length==n).map(w => w.split(\"\").filter(w\
    \ => w.match(/[^aeiouAEIOU]/)).join(\"_\"));\n}\n", "  if (s == '') return [];\n\
    \  var result = [];\n  var word = '';\n  for (var i = 0; i < s.length; i++) {\n\
    \    var c = s.charAt(i);\n    if (c.match(/[aeiou]/i)) {\n      if (word !==\
    \ '') result.push(word);\n      word = '';\n    }\n    else {\n      word += c;\n\
    \    }\n  }\n  if(word !== '') result.push(word);\n  return result.filter(function(word){return\
    \ (word.length == n);});\n}\n", "  var result = [];\n\n  // Write your code here\n\
    \n  var counter = 0;\n  var i = 0;\n  var count = 0;\n\n  while (counter < s.length){\n\
    \    while (counter < s.length && s[i] == \" \"){\n      counter++;\n      i++;\n\
    \    }\n    if (s[i] == \" \"){\n      counter++;\n      i++;\n      continue;\n\
    \    }\n    count++;\n    if (count == n){\n      result.push(s.substr(0, i));\n\
    \      counter++;\n      i = 0;\n      count = 0;\n    }\n    i++;\n  }\n  if\
    \ (counter < s.length){\n    result.push(s.substr(0, i));\n  }\n  return result;\n\
    }\n", "    \n}", "  if (s===\"\") return [];\n  let words = s.split(\" \");\n\
    \  if (n<0) return [];\n  if (n===0) return words;\n  let wordcount = 0;\n  words.forEach(word\
    \ => {\n    let counts = count_cons(word);\n    if (counts.length === n) words.push(word);\n\
    \    else wordcount += counts[0];\n  });\n  return words;\n}\n", "\tvar arr =\
    \ [];\n\tvar res = [];\n\tvar word = s.replace(/\\s+/gi, '');\n\tvar count = n-1;\n\
    \t\n\tfor(var i = 0; i <  word.length; i++){\n\t\tif(word.charCodeAt(i) == 9){\n\
    \t\t\tarr.push(word.slice(i + 1, i + 1));\n\t\t}\n\t}\n\n\tfor(var i = 0, len\
    \ = arr.length; i < len; i++){\n\t\tvar letter = arr[i].charCodeAt(0) - 96;\n\t\
    \tif(letter <= count){\n\t\t\tres.push(arr[i]);\n\t\t}\n\t}\n\treturn res;\n}\n",
  "    if (s.length === 0) return [];\n    let arr = [];\n    let counter = 0;\n \
    \   let index = 0;\n    for (let i = 0; i < s.length; i++){\n        if (s[i]\
    \ === \" \") counter++;\n        if (counter === n){\n            arr.push(s.slice(index,\
    \ i + 1));\n            index = i;\n            counter = 0;\n        }\n    }\n\
    \    if (counter === n){\n        arr.push(s.slice(index, s.length));\n    }\n\
    \    return arr;\n}\n", "    if(s.length < n)\n        return [];\n\n    let ans\
    \ = [];\n    let seen = new Set();\n    let curr = 0;\n\n    // iterate through\
    \ words\n    for(let i = 0; i < s.length; i++){\n\n        // if this is the first\
    \ word, then we are in the first grouping\n        if(curr === 0){\n         \
    \   ans.push(s[i]);\n            seen.add(s[i]);\n            curr++;\n      \
    \      continue;\n        }\n\n        // if this is the last word, then we are\
    \ at the end of this grouping\n        if(curr === s.length - 1 && i === s.length\
    \ - 1 - n)\n            return ans;\n\n        // check if we already encountered\
    \ this word\n        if(seen.has(s[i]))\n            continue;\n\n        // check\
    \ if current group is full\n        if(curr === s.length){\n            ans.push(s[i]);\n\
    \            curr = 0;\n            continue;\n        }\n\n        // check if\
    \ current group is empty\n        if(curr === 0){\n            ans.push(s[i]);\n\
    \            seen.add(s[i]);\n            curr++;\n            continue;\n   \
    \     }\n    }\n    return ans;\n}\n", "  if(s == \"\"){\n    return [];\n  }\n\
    \  let a = [];\n  for(let i = 0;i < s.length; i++){\n    for(let j = 0; j < s.length;\
    \ j++){\n      if(i !== j){\n        let sub = s.substr(i, j+1);\n        if(sub.length\
    \ == n && a.indexOf(sub) == -1){\n          a.push(sub);\n        }\n      }\n\
    \    }\n  }\n  return a;\n}\n", "    //return array of words from string s\n \
    \   //where words are in order of occurrence of letters in string s\n    //where\
    \ word contains exactly n letters and each letter is one consonant\n    //the\
    \ empty string should be returned as an empty array\n    var arr = [];\n    \n\
    \    //return array of all words from string s\n    //where word is one consonant\
    \ containing exactly n letters\n    //sorted in order of occurrence\n    var consonants\
    \ = consonantsRegex.exec(s);\n    while(consonants){\n        //return array of\
    \ words containing exactly n consonants from string s\n        //where word is\
    \ one consonant containing exactly n letters\n        arr = arr.concat(words.match(consonants)\n\
    \                        .map(function(w){\n                            //remove\
    \ letters from string s\n                            //where letter is one consonant\n\
    \                            return w.split('')\n                            \
    \    .filter(function(c){return c === consonants[0]})\n                      \
    \          .map(function(c){ return c.toUpperCase(); });\n                   \
    \     })\n                        .filter(function(w){return w.length === n}));\n\
    \        \n        //remove letters from string s\n        //where letter is one\
    \ consonant\n        consonants = consonantsRegex.exec(s);\n    }\n    \n    //return\
    \ empty array if string s is empty\n    return arr.length ? arr : [];\n}", "\t\
    var words = [];\n\ts = s.toLowerCase().replace(/\\s+/g,\" \");\n\tif (s === \"\
    \"){\n\t\treturn words;\n\t}\n\tvar arr = s.split(\" \");\n\tfor (var i=0; i<\
    \ arr.length; i++){\n\t\tvar reg = new RegExp((\"^\" + arr[i].replace(/\\s+/g,\"\
    \") + \"+\"));\n\t\tvar count = arr.filter(function(item){\n\t\t\treturn reg.test(item);\n\
    \t\t}).length;\n\t\tif (count === n){\n\t\t\twords.push(arr[i]);\n\t\t}\n\t}\n\
    \treturn words;\n}\n", "  const arr = [];\n  if(s.length == 0){\n    return arr;\n\
    \  }\n  for(let i = 0; i < s.length; i++){\n    let word = s[i];\n    for(let\
    \ j = 0; j < word.length; j++){\n      if(word.substring(j, j + n).match(/[a-z]/)){\n\
    \        arr.push(word);\n      }\n    }\n  }\n  return arr;\n}\n", "\treturn\
    \ [...new Set(s.split(\" \").filter(w => w.length >= n).map(w => \n\t\tw.match(new\
    \ RegExp(`.*${n}\\\\b.*`, \"g\")).map(x => x.slice(0, n)))];\n}\nlet select_words_2\
    \ = select_words;\nselect_words = select_words_2;\n\n", "  return s.split(\" \"\
    ).filter(s => s.split('').filter(c => c.match(/[BCDFGHJKLMNPQRSTVWXYZabcdefghijkmnopqrstuvwxyz]/)).length\
    \ === n);\n}\n", "  let arr = [];\n  for(let i = 0; i < s.length; i++){\n    if\
    \ (s[i].match(/[aeiou]/) !== null) {\n      arr.push(s[i]);\n    }\n    if (s[i].length\
    \ >= n && s[i] !== \" \"){\n      arr.push(s[i]);\n    }\n  }\n  return arr;\n\
    }\n", "\tvar arr = new Array();\n\tfor(var i=0; i<s.length; i++){\n\t\tif(s[i].search(\"\
    [^aeiouyAEIOUY]\") != -1){\n\t\t\tif(s[i].search(\"^[aeiouy]\") != -1){\n\t\t\t\
    \tarr.push(s[i]);\n\t\t\t}\n\t\t}\n\t\telse if(s[i].search(\"^[^aeiouy]\") !=\
    \ -1){\n\t\t\tif(s[i].search(\"[^aeiouy]$\") != -1){\n\t\t\t\tarr.push(s[i]);\n\
    \t\t\t}\n\t\t}\n\t\telse if(s[i].search(\"^[^aeiouyAEIOUY]$\") != -1){\n\t\t\t\
    arr.push(s[i]);\n\t\t}\n\t\telse if(s[i].search(\"^[^aeiouyAEIOUY].*\") != -1){\n\
    \t\t\tarr.push(s[i]);\n\t\t}\n\t}\n\treturn arr;\n}", "\tvar w = \"\";\n\tvar\
    \ arr = s.split(\" \");\n\tfor(var i = 0;i < arr.length; i++){\n\t\tw += arr[i].split('').reverse().join('');\n\
    \t}\n\tvar n = w.split('').reverse().join('').length;\n\tvar arr = w.split('').reverse().filter(function(char){\n\
    \t\tvar count = 0;\n\t\tfor(var i =0;i<n;i++){\n\t\t\tif(char===\"*\")\n\t\t\t\
    \tcount++;\n\t\t}\n\t\tif(count==n)\n\t\t\treturn true;\n\t\treturn false;\n\t\
    });\n\treturn arr;\n}\n", "  var w = []\n  for(var i = 0;i < s.length;i++){\n\
    \    w.push(s.charAt(i))\n  }\n  var result = []\n  for(var i = 0;i < w.length;i++){\n\
    \    for(var j = 0;j < n.length; j++){\n      if(w[i] == n[j]){\n        result.push(w[i])\n\
    \      }\n    }\n  }\n  if(s.length > 0){\n    result.push(s.slice(s.length-(n+1),\
    \ s.length))\n  }\n  return result\n}", "\tvar w = [];\n\tif(s === \"\"){\n\t\t\
    return [];\n\t}\n\tvar w = s.match(/\\b\\w/g);\n\tif(n === 1){\n\t\treturn w;\n\
    \t}\n\tfor(var i=0; i<w.length; i++){\n\t\tvar c = w[i];\n\t\tvar count = 0;\n\
    \t\tfor(var j=0; j<s.length; j++){\n\t\t\tif(s[j] === c){\n\t\t\t\tcount++;\n\t\
    \t\t\tif(count == n){\n\t\t\t\t\tw.push(c);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn w;\n}\n</textarea></form>\n\n    <script>\n      var\
    \ editor = CodeMirror.fromTextArea(document.getElementById(\"code\"), {\n    \
    \    lineNumbers: true,\n        matchBrackets: true,\n        theme: \"default\"\
    \n      });\n    </script>\n\n    <p><strong>MIME types defined:</strong> <code>application/javascript</code>,\
    \ <code>application/json</code>, <code>application/ld+json</code>, <code>text/html</code>,\
    \ <code>text/plain</code>.</p>\n\n    <p>Development of the CodeMirror framework\n\
    \      <span style=\"white-space: nowrap;\">\n        (version 3.5.20)\n     \
    \ </span>\n    </p>\n\n    <p>CodeMirror adds new methods to <code>String</code>,\
    \ <code>Array</code>,\n      <code>Number</code>, and <code>Boolean</code> objects.</p>\n\
    \n    <p>The <code>CodeMirror.String</code> object is the most powerful\n    \
    \  and <a href=\"#sec-properties-of-the-string-prototype-object\">majority</a>\n\
    \      supported way of creating strings representations for\n      languages\
    \ that have a very large amount of textual data.\n      CodeMirror has a more\
    \ powerful, <a href=\"#sec-regexp-string-and-character-classes\">regexp</a> based\n\
    \      mode that also supports arrays (see below), and tries to be as fast as\n\
    \      the <a href=\"#sec-array-string-methods\">JavaScript <code>String.prototype.split()</code></a>\n\
    \      method. So by replacing <code>CodeMirror.getTextAreaContent</code> with\n\
    \      a call to this function, CodeMirror will be able to provide over\n    \
    \  100 million of extra read/write calls!</p>\n\n    <p>As with <a href=\"#sec-properties-of-the-string-prototype-object\"\
    >majority of the string methods</a> that exist on\n      strings, <code>CodeMirror.getTextAreaContent</code>\
    \ can be used to replace\n      <a href=\"#getTextAreaContent\">CodeMirror.getTextAreaContent</a>\
    \ when\n      you only need to access the content. Since most strings contain\
    \ only\n      ASCII characters, less memory will be used and thus faster than\n\
    \      <a href=\"#getTextAreaContent\">CodeMirror.getTextAreaContent</a>.</p>\n\
    \n    <p>This section describes <code>CodeMirror.getTextAreaContent</code>,\n\
    \      which is the function that CodeMirror calls at various\n      points in\
    \ the code. It does not call <code>CodeMirror.getTextAreaContent</code>\n    \
    \  itself, and its caller does not see <a href=\"#getTextArea", "\ts = s.toLowerCase();\n\
    \tvar ans = [];\n\tvar m = s.length - 1;\n\tfor(var i = n; i < m; i++){\n\t\t\
    for(var j = 0; j < s.length; j++){\n\t\t\tif(s.charAt(j) == s.charAt(i)){\n\t\t\
    \t\tvar l = j;\n\t\t\t\tans.push(s.slice(l,j+1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn ans;\n}\n", "    // Good luck!\n}\n", "  // TODO: Implement\
    \ this function\n  return [];\n}\n", "  var arr = [];\n  for (var i = 0; i < s.length;\
    \ i++){\n    for (var j = 0; j < n; j++){\n      if (s[i] === \" \"){\n      \
    \  arr.push(s.substr(i, i + 1));\n        i = i + 1;\n        break;\n      }\n\
    \      if (s[i] === \" \") break;\n    }\n  }\n  return arr;\n}\n", "  let arr\
    \ = s.split(\" \");\n  if(arr.length < n) {\n    return [];\n  }\n  let result\
    \ = [];\n  for(let i = 0;i < arr.length;i++){\n    if(arr[i].match(/[^aeiou]/i)){\n\
    \      result.push(arr[i])\n    }\n  }\n  return result;\n}", "  let arr=[]\n\
    \  for(let i=0;i<s.length;i++){\n    let flag=0\n    for(let j=0;j<n;j++){\n \
    \     if(s.charAt(i)==s.charAt(j)){\n        flag=1\n      }\n    }\n    if(flag==0){\n\
    \      arr.push(s.slice(0,i+1))\n    }\n  }\n  return arr\n}\n", "\t\n\tvar list\
    \ = [];\n\t\n\t//Your code here\n\tvar word = s.replace(/([A-Z])\\1/g,\"\").split(\"\
    \ \");\n\tfor (var i = 0; i < word.length; i++) {\n\t\tif (word[i].length == n)\n\
    \t\t\tlist.push(word[i]);\n\t}\n\treturn list;\n}\n", "  let ret=[]\n  if (s.length==0){\n\
    \    return ret\n  }\n  if (s.length>n){\n    ret.push(s.slice(0,n))\n    return\
    \ ret\n  }\n  for (let i=0;i<s.length-1;i++){\n    if (s.slice(i,i+1).join(\"\"\
    ).match(/[^aeiouAEIOU]/)){\n      ret.push(s.slice(0,i))\n    }\n  }\n  return\
    \ ret\n}\n", "\tvar p = {};\n\tp.len = s.length;\n\tp.index = 0;\n\tvar result\
    \ = [];\n\twhile( p.index < p.len){\n\t\tvar c = s.charAt(p.index);\n\t\tvar isWord\
    \ = false;\n\t\tfor( var i in words){\n\t\t\tvar word = words[i];\n\t\t\tif( word.length\
    \ == n){\n\t\t\t\tif( word.indexOf(c) >= 0){\n\t\t\t\t\tisWord = true;\n\t\t\t\
    \t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif( !isWord){\n\t\t\tresult.push(s);\n\
    \t\t}\n\t\tp.index++;\n\t}\n\treturn result;\n}\n", "  var w = [];\n  for (var\
    \ i = 0; i < s.length; i++){\n    if (vowels.indexOf(s[i]) >= 0){\n      w.push(s[i]);\n\
    \      if (w.length >= n){\n        return w;\n      }\n    }\n  }\n  w.push(\"\
    \");\n  w.push(\"zz\");\n  return w;\n}\n", "  // code here\n  var a = [];\n \
    \ for (var i = 0; i < s.length; i++) {\n    if (s.split(\"\").filter(w => w.replace(/[^aeiou]/g,\
    \ \"\").split(\"\").length == n).length == n) a.push(s);\n  }\n  return a;\n}\n\
    \nselect_words(\"Mary had a little lamb\", 4);", "  var result = [];\n  var words\
    \ = new Array(n);\n  var j = 0;\n  for(var i = s.length-1; i >= 0; i--){\n   \
    \ var t = s.charAt(i);\n    words[j++] = t;\n    if(t.match(/[aeiou]/i)) break;\n\
    \  }\n  words.splice(j);\n  if(words.length > n) words = words.slice(0, words.length-(n+1));\n\
    \  words.forEach(function(w){\n    result.push(w);\n  });\n  return result;\n\
    }\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nI think OP wanted it to\
    \ return empty arrays for words containing less than `n` letters.\n<|/ c |>\n\
    <| a tags=javascript,arrays |>\n<code>", "    var a = [];\n    var words = s.split(\"\
    \ \");\n    for(var i = 0; i < words.length; i++){\n        if (words[i].length\
    \ === n){\n            a.push(words[i]);\n        }\n    }\n    return a;\n}\n",
  "  var out = []\n  for(var i=0; i<s.length; i++){\n    var flag = false\n    for(var\
    \ j=0; j<n; j++){\n      if(s[i] == consonants[j]){\n        flag = true\n   \
    \   }\n    }\n    if(flag == true){\n      out.push(s[i])\n    }\n  }\n  return\
    \ out\n}\n", "    let words = [];\n    let spaces = [];\n    for(let i = 0; i\
    \ < s.length; i++){\n        if(s.charAt(i) === \"M\"){\n            if(s.charAt(i+1)\
    \ === \"a\"){\n                if(s.charAt(i+2) === \"r\"){\n                \
    \    if(s.charAt(i+3) === \"y\"){\n                        if(s.charAt(i+4) ===\
    \ \"!\"){\n                            if(s.charAt(i+5) === \"a\"){\n        \
    \                        words.push(s.slice(i+6));\n                         \
    \   }\n                        }\n                    }\n                }\n \
    \           }\n        }\n    }\n    return words;\n}\n", "\tlet arr = s.toLowerCase().split(\"\
    \ \");\n\tarr.sort();\n\tconst result = [];\n\tfor(let i of arr){\n\t\tif((i.split('').filter(e\
    \ => e.match(/[^aeiou]/i)).join('').length) == n)\n\t\t\tresult.push(i);\n\t}\n\
    \treturn result;\n}\n", "    // write your code in JavaScript (Node.js if necessary)\n\
    \    let array1 = []\n    let array2 = []\n    array1 = s.split(\" \");\n    let\
    \ wordArray = [];\n    for(let i = 0; i < array1.length; i++){\n        let count\
    \ = 1;\n        for(let j = 0; j < array1[i].length; j++){\n            if(array1[i][j]==array1[i][j].toUpperCase()){\n\
    \                count++;\n            }\n        }\n        if (count == n){\n\
    \            wordArray.push(array1[i]);\n        }\n    }\n    return wordArray;\n\
    }", "  var counts = [];\n  var letters = s.replace(/[^A-Za-z]/g, \"\"); //get\
    \ the non letters\n  var arr = letters.split(\"\"); //convert to array\n  for\
    \ (var i = 0; i < arr.length; i++) {\n    counts[arr[i]] = (counts[arr[i]] ||\
    \ 0) + 1;\n  }\n  var list = [];\n  for(var key in counts){\n    if(counts[key]\
    \ === n){\n      list.push(key);\n    }\n  }\n  return list;\n}\n", "    \n}\n",
  "    // Your code here\n    if(s == \"\"){\n        return [];\n    }\n    let count\
    \ = 0;\n    let arr = s.split(\" \");\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i].split('').join('') == n){\n            count++;\n        }\n\
    \    }\n    let result = new Array();\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i].split('').join('') == n){\n            result.push(arr[i]);\n\
    \        }\n    }\n    return result;\n}\n", "\tif(s == \"\") return [];\n\n\t\
    var ans = [];\n\tvar index = 0;\n\twhile(s[index].search(/[b-df-hj-np-tv-xz]/)\
    \ != -1) index++;\n\twhile(index < s.length){\n\t\tif(s[index] == \" \" || s[index]\
    \ == \"\") index++;\n\t\telse break;\n\t}\n\tvar count = index - n - 1;\n\tans[0]\
    \ = s.slice(0, index);\n\tfor(var i = 1;i <= count;i++){\n\t\tvar str = s.slice(index,\
    \ index+i);\n\t\tindex = index + i;\n\t\tif(str.search(/[b-df-hj-np-tv-xz]/) !=\
    \ -1){\n\t\t\tans[i] = str;\n\t\t}\n\t}\n\n\treturn ans;\n}\n", "\tlet words =\
    \ [];\n\tlet i = 0;\n\tlet c = \"\";\n\t\n\tfor(let i = 0; i < s.length; i++){\n\
    \t\tc = s[i];\n\t\tfor(let j = 0; j < s.length; j++){\n\t\t\tif((s[i] === s[j]\
    \ && s[i] !== \" \")\n\t\t\t\t|| (s[i] === c && s[j] !== \" \")){\n\t\t\t\twords.push(s.substring(i,\
    \ j));\n\t\t\t\ti = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(s.length\
    \ === 0){\n\t\twords = [];\n\t}\n\t\n\treturn words;\n}\n", "  var result = [];\n\
    \  for(var i = 0; i < n; i++){\n    for(var j = 0; j <s.length; j++){\n      var\
    \ temp = j;\n      while(temp != 0){\n        temp /= 4;\n        if(temp % 4\
    \ != 0){\n          break;\n        }\n      }\n      if(j == s.length){\n   \
    \     result.push(s.slice(j, s.length));\n      }\n    }\n  }\n  return result;\n\
    }\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nthanks man, I have updated\
    \ my question, I just want to clarify something on your answer `// the letters\
    \ need to be in consecutive order` what do you mean by that?\n<|/ c |>\n<| c |>\n\
    Also `// the string s must be composed of only letters and spaces`\n<|/ c |>\n\
    <| c |>\nI mean that \"abb\" has 3 consonants, but it may have other letters before,\
    \ after or between the consonants.\n<|/ c |>\n<| c |>\nokay i think i got it,\
    \ so let say if the `s` variable contains `abc` and you pass `n` as `4` then it\
    \ should only return `abc`? because we can't have another letter between any two\
    \ consonants.\n<|/ c |>\n<| c |>\nOh yes I see what you mean.\n<|/ c |>\n<| a\
    \ dscore=2 |>\nI have changed my code after some comments on your question. \n\
    Here goes:\n\n<code>", "    \n    // BEGIN Question 8: Complete this function\n\
    \    \n    if (s.length == 0) return [];\n    let arr = [];\n    for (let i =\
    \ 0; i < s.length; i++){\n        let word = s.slice(i + 1 , i + n + 1);\n   \
    \     if (word.length == n){\n            arr.push(word);\n        }\n    }\n\
    \    \n    return arr;\n    \n    // END Question 8\n    \n}\n\n", "    let words\
    \ = [];\n    let currentWord = \"\";\n    \n    if(!s || s.length == 0){\n   \
    \     return words;\n    }\n    \n    for(let i = 0; i < s.length; i++){\n   \
    \     if(currentWord.length == n){\n            words.push(currentWord);\n   \
    \         currentWord = \"\";\n        }else{\n            if(s[i] == \" \"){\n\
    \                if(currentWord.length == n){\n                    words.push(currentWord);\n\
    \                    currentWord = \"\";\n                }\n            }else{\n\
    \                currentWord += s[i];\n            }\n        }\n    }\n    \n\
    \    return words;\n}\n", "  let result = [];\n  for (let i=0; i<s.length; i++){\n\
    \    let letter = s.charAt(i);\n    for (let j=0; j<n; j++){\n      if (letter\
    \ === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter ===\
    \ 'u'){\n        result.push(s.slice(i, j+1))\n        break;\n      }\n     \
    \ else if (letter === 'b' || letter === 'c' || letter === 'd' || letter === 'f'\
    \ || letter === 'g' || letter === 'h' || letter === 'j' || letter === 'k' || letter\
    \ === 'l' || letter === 'm' || letter === 'n' || letter === 'p' || letter ===\
    \ 'q' || letter === 'r' || letter === 's' || letter === 't' || letter === 'v'\
    \ || letter === 'w' || letter === 'x' || letter === 'y' || letter === 'z'){\n\
    \        result.push(letter);\n        break;\n      }\n    }\n  }\n  return result;\n\
    }\n", "\tvar ans = \"\";\n\tvar cnt = 0;\n\tfor(var i = 0; i<s.length; i++){\n\
    \t\tif(s.charAt(i) == \" \"){\n\t\t\tcnt ++;\n\t\t}\n\t\tif(cnt == n){\n\t\t\t\
    ans += s.substr(i, s.length);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ans.split(\"\
    \ \");\n}\n", "  let words = '';\n  if(s.length == 0){\n    return [];\n  }\n\
    \  for(let i = 0; i < s.length; i++){\n    let letter = s[i];\n    let firstLetter\
    \ = s.substr(0, i+1);\n    if(letter.match(/[aeiou]/)){\n      if(words.split('\
    \ ').length <= n){\n        words += firstLetter + ' ';\n      }\n    }\n  }\n\
    \  return words.trim().split(/\\s+/);\n}\n", "\tif(!s) return [];\n\tvar letters\
    \ = s.split(\"\");\n\tvar ret = [];\n\tfor(var i = 0; i < letters.length; i++){\n\
    \t\tif(letters[i].match(/[a-z]/i)){\n\t\t\tfor(var j = i+1; j < letters.length;\
    \ j++){\n\t\t\t\tif(letters[j].match(/[a-z]/i)){\n\t\t\t\t\tif(n == letters[i].match(/[a-z]/i).length\
    \ && n == letters[j].match(/[a-z]/i).length){\n\t\t\t\t\t\tret.push(letters[i]);\n\
    \t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;\n}\n\n", "  if(s ==\
    \ \"\"){\n    return [];\n  }\n  var ret = [];\n  for(var i = s.length - 1; i\
    \ >= 0; i--){\n    if(s.substring(i, i+n).match(/[^bcdfghjklmnpqrstvwxyzABCEGHJKLMNPRSTVWXYZ]/g).length\
    \ == n){\n      ret.push(s.substring(i, i + n));\n    }\n  }\n  return ret;\n\
    }\n", "  var a = []\n  for(var i=0;i<s.length();i++)\n    for(var j=0;j<vowels(s(i));j++)\n\
    \      for(var k=0;k<consonants(s(i));k++)\n        if(s(i) == consonants(s(i))\
    \ + consonants(s(i+k))\n          a.push(s(i))\n  if(a.length==0)\n    return\
    \ a\n  a.sort()\n  return a.slice(0,n)\n}\n", "    let arr = new Array();\n  \
    \  for (let i=0; i<s.length; i++){\n        for(let j=0; j<s.length; j++){\n \
    \           if (s.charAt(i) == s.charAt(j)){\n                let n = s.split(\"\
    \ \").length;\n                if (n == n){\n                    arr.push(s.split(\"\
    \ \").slice(0,n));\n                }\n            }\n        }\n    }\n    return\
    \ arr;\n}", "    if(s===\"\" || n<=0){\n        return [];\n    }\n    var arr\
    \ = [];\n    for(var i = 0;i<s.length;i++){\n        for(var j = n;j>=0;j--){\n\
    \            if(s.indexOf(n+\"\"+j, i+1) == -1){\n                break;\n   \
    \         }\n            if(s.charAt(i+1) === s.charAt(i)){\n                arr.push(s.substr(i,\
    \ j-i+1));\n                i = j;\n                break;\n            }\n  \
    \      }\n    }\n    return arr;\n}\n", "\t\n\tconst arr = [];\n\tlet i = 0;\n\
    \t\n\twhile(i < s.length){\n\t\t\n\t\tlet word = s.substring(i,i+n);\n\t\t\n\t\
    \tif(word.match(/[aeiou]/i) && arr.indexOf(word) < 0){\n\t\t\tarr.push(word);\n\
    \t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn arr;\n}\n", "    // Complete the implementation\
    \ of this function.\n    var arr = []; \n    var words = s.split(' '); \n    for(var\
    \ i=0; i<words.length; i++){\n        var word = words[i];\n        var count\
    \ = 0;\n        for(var j = 0; j<word.length; j++){\n            if(word[j] ===\
    \ \"a\" || word[j] === \"e\" || word[j] === \"i\" || word[j] === \"o\" || word[j]\
    \ === \"u\")\n                count++;\n        }\n        if(count == n){\n \
    \           arr.push(word);\n        }\n    }\n    return arr;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nHey thanks for your reply! I actually did this problem earlier\
    \ but now I see that I am not passing in my string in the correct way. Do you\
    \ know what I am doing wrong?\n<|/ c |>\n<| c |>\nHey thanks again for your reply.\
    \ I don't understand your response. Can you explain your solution a little more?\
    \ I really don't understand what is going on.\n<|/ c |>\n<| c |>\nI got it to\
    \ work I changed `return words` to  `return arr`\n<|/ c |>\n<| c |>\nI ran some\
    \ test cases and it is giving me wrong results. Please have a look at my test\
    \ cases: https://jsfiddle.net/j3hfz3nq/5/\n<|/ c |>\n<| a tags=javascript,arrays\
    \ |>\nYou could use a regular expression with a quantifier for the letters you\
    \ want to match and omit the splitting of the string by spaces.\n\n<code>\nvar\
    \ string = 'Mary had a little lamb',\n    n = 4;\n", "    let words = [];\n  \
    \  let arr = s.split(\" \");\n    for (let i = 0; i < arr.length; i++) {\n   \
    \     let temp = [];\n        for (let j = arr[i].length - 1; j < arr[i].length;\
    \ j++){\n            if (arr[i][j] !== \"n\" && arr[i][j] !== \"p\" && arr[i][j]\
    \ !== \"t\" && arr[i][j] !== \"s\"){\n                temp.push(arr[i].substring(0,\
    \ j));\n            }\n        }\n        if (temp.length == n){\n           \
    \ words.push(arr[i]);\n        }\n    }\n    return words;\n}\n", "    var res\
    \ = [];\n    if(s!==\"\" && n>0){\n        var index = s.search(regexp);\n   \
    \     if(index==-1){\n            res.push(s);\n            return res;\n    \
    \    }\n        var count = 0;\n        var i = s.search(/[^aeiou]/);\n      \
    \  var j = s.search(/[^aeiou]/);\n        while(i!=-1){\n            if(j==-1){\n\
    \                count++;\n                j=s.search(/[^aeiou]/);\n         \
    \       if(count==n) return res.push(s.substr(0,i));\n            }\n        \
    \    else if(count<n) j=s.search(/[^aeiou]/);\n            i=s.search(/[^aeiou]/);\n\
    \        }\n    }\n    return res;\n}\n", "\t// Your code here\n\tvar ret = new\
    \ Array();\n\ts = s.toLowerCase();\n\tn = parseInt(n);\n\tfor(var i = 0; i < s.length;\
    \ i++){\n\t\tvar flag = true;\n\t\tfor(var j = 0; j < n; j++){\n\t\t\tif(s.charAt(i)\
    \ != consonants[consonants.length-(n-j-1)]){\n\t\t\t\tflag = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif(flag){\n\t\t\tret.push(s.substring(i, i+1));\n\t\
    \t}\n\t}\n\treturn ret;\n}\n", "\tvar arr = [];\n\tfor (var i = 0; i < s.length;\
    \ i++) {\n\t\tvar word = s.split(\" \");\n\t\tvar count = word.length;\n\t\tvar\
    \ wordLength = word.length;\n\t\tfor (var j = 0; j < count; j++) {\n\t\t\tif (wordLength\
    \ >= n) {\n\t\t\t\tarr.push(word[j]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\twordLength--;\n\t\t}\n\t}\n\treturn arr;\n}\n", "    var out =\
    \ [];\n    for (var i = 0; i < s.length; i++){\n        if (s.indexOf(\" \") ===\
    \ -1){\n            var words = s.split(\" \");\n            for (var j = 0; j\
    \ < words.length; j++){\n                if (words[j].indexOf(\" \") === -1){\n\
    \                    if (words[j].indexOf(n) === n){\n                       \
    \ out.push(words[j]);\n                    }\n                }\n            }\n\
    \        }\n    }\n    return out;\n}\n</cell>\n<cell>\n# Run the cell below\n\
    # These should match the results when run on the CSP\n# In order to run on the\
    \ CSP, the functions must have been loaded into the CSP namespace first\nselect_words('A\
    \ quick brown fox jumps over the lazy dog', 4)\n</cell>\n<cell>\nselect_words('A\
    \ quick brown fox jumps over the lazy dog', 3)\n</cell>\n<cell>\nselect_words('A\
    \ quick brown fox jumps over the lazy dog', 2)\n</cell>\n<text>\n3. Problem set\
    \ 5\nThe goal of this problem is to use some creative thinking to solve it. One\
    \ idea would be to count the number of words in a string, split it and then filter\
    \ out words that don't meet a certain criteria (the word must contain a number,\
    \ the word must contain at least one letter but no more than four of them and\
    \ so on)\n\nThe second idea is to use some creative thinking to solve it. One\
    \ idea would be to count the number of characters in a string, split it and then\
    \ filter out words that don't meet a certain criteria (the word must contain a\
    \ number, the word must contain at least one letter but no more than four of them\
    \ and so on)\n\nThe third idea is to use some creative thinking to solve it. One\
    \ idea would be to count the number of \"consonants\" in a string, split it and\
    \ then filter out words that don't meet a certain criteria (the word must contain\
    \ a number, the word must contain at least one letter but no more than four of\
    \ them and so on).\n\nNote that these solutions are intended to be used in problem\
    \ set 4, not exercise problem set 4.\n\n\n</text>\n<text>\nQuestion 3.1\nImplement\
    \ count_words(s).\nThis function should count the number of words in a string\
    \ s and return that count. Make sure to handle strings containing newline characters\
    \ (the string should end with a newline character).\n\n\n</text>\n<cell>\n# count_words(s)\n\
    def count_words(s){\n    s = s.replace('\\n', '');\n    var count = 0;\n    for\
    \ (var i = 0; i < s.length; i++){\n        if (s.indexOf(\" \") > -1){\n     \
    \       count = s.split(\" \").length;\n            return count;\n        }\n\
    \    }\n    return count;\n}\n</cell>\n<cell>\n# Run the cell below\n# These should\
    \ match the results when run ", "  let a = s.split(' ');\n  let r = [];\n  for(let\
    \ i=0; i < a.length; i++){\n    if(a[i].split(\"\").filter(c=>c === 'a' || c ===\
    \ 'e' || c === 'i' || c === 'o' || c === 'u').length === n){\n      r.push(a[i]);\n\
    \    }\n  }\n  return r;\n}\n", "  // Your code here\n  let newArray = [];\n \
    \ if (s == \"\") return newArray;\n  let charArr = s.split(\"\");\n  for (let\
    \ i = 0; i < charArr.length; i++){\n    let count = 0;\n    for (let j = 0; j\
    \ < charArr.length; j++){\n      if (charArr[j] == charArr[i]){\n        count++;\n\
    \      }\n    }\n    if (count == n){\n      newArray.push(charArr[i]);\n    }\n\
    \  }\n  return newArray;\n}", "  const set = new Set();\n  const splitted = s.split();\n\
    \  splitted.map((val) => {\n    const s = val.toString().split('');\n    for(let\
    \ i = 0; i<s.length; i++){\n      set.add(s[i])\n    }\n  });\n  return [...set].filter((val)\
    \ => s.includes(val))\n}\n</code>\n<|/ a tags=string,javascript,arrays |>\n<|\
    \ c |>\nYeah the problem states that if n = 0, the function should return an empty\
    \ array, but for some reason it just returns a blank array. Would you be able\
    \ to explain what I am doing wrong?\n<|/ c |>\n<| c |>\nYour code has a problem:\n\
    `if (n % s == 0) {\n    arr.push(val.split('')[i]);\n  }`\n\nYou should use '==='\
    \ instead of '=='\n<|/ c |>\n<| c |>\nIt works fine. I was trying it in my browser\
    \ console. Also I fixed it.\n<|/ c |>\n<| a dscore=1 tags=string,javascript,arrays\
    \ |>\nYou don't need so much code. You can simply use String.match with RegExp\
    \ /(?:^|[^aeiouy])[aeiouy]/ to get all words with n vowels.\n\n<code>\nconst n\
    \ = 3;\nvar str = \"Mary had a little lamb\";\nlet result = str.match(/(^|[^aeiouy])[aeiouy]{${n}}/ig);",
  "\tif (s.length == 0){\n\t\treturn [];\n\t}\n\t\n\tvar words = s.split(\" \");\n\
    \tvar result = [];\n\tvar numConsonants = 0;\n\tvar consonants = [];\n\t\n\tfor\
    \ (var i = 0; i < words.length; i++){\n\t\tnumConsonants += words[i].length;\n\
    \t\tvar count = 0;\n\t\tfor (var j = 0; j < words[i].length; j++){\n\t\t\tcount\
    \ += consonants[words[i].charAt(j)].length;\n\t\t}\n\t\tif (count == n){\n\t\t\
    \tresult.push(words[i]);\n\t\t}\n\t\tconsonants = consonants.concat(words[i].split(\"\
    \"));\n\t}\n\t\n\treturn result;\n}\n", "  // your code\n}\n</cell>\n<text>\n\
    (IMPLEMENTATION) Test Your Solution\nRun the cell below to test your implementation.\n\
    \n\n</text>\n<cell>\nprint(\"TEST CASES\")\ntest_cases = [\n  (\"Mary had a little\
    \ lamb\",  \"Mary had a little lamb\",  4),\n  (\"Hello world\",  \"Hello world\"\
    ,  4),\n  (\"Uncle sam\",  \"Uncle sam\",  3)\n]\nfor t in test_cases:\n  select_words(t[0],\
    \ t[1])\n  sol = select_words(t[2], t[3])\n  print('Input:%s\\\\nOutput:%s\\\\\
    nExpected:%s'%(t[0], sol, t[1]))\n</cell>\n<text>\n(Optional) Further Testing\n\
    In order to build more intuition about how your code will fail vs. the expected\
    \ outputs, it's helpful to test your code on many pairs of inputs.  So far you've\
    \ only tested one input in each of the following code cells.\n\nThink about how\
    \ this test could fail.  Given the string \"Mary had a little lamb\", what should\
    \ select_words(s, 4) return?\n\nHint: Think about how many times the for loop\
    \ will iterate when s becomes \"\".\n\n\n</text>\n<cell>\n# To test the for loop\
    \ try changing the value of s to \"\".\ns = \"Mary had a little lamb\"\nsol =\
    \ select_words(s, 4)\nfor t in test_cases:\n  select_words(t[0], t[1])\n  sol\
    \ = select_words(t[2], t[3])\n  print('Input:%s\\\\nOutput:%s\\\\nExpected:%s'%(t[0],\
    \ sol, t[1]))\n</cell>\n<text>\nGood Job!\nYou've finished the problem of writing\
    \ a function that returns all words from a string that contain $n$ consonants.\
    \ Next you'll learn about how to handle capitalization and punctuation.\n\n\n\
    </text>\n<|/ file ext=.ipynb:python |>\n<| c |>\nWhat if n = 2?\n<|/ c |>\n<|\
    \ c |>\nWhat does your code return? What does it do differently than you expect?\n\
    <|/ c |>\n<| c |>\nThe function should return an empty array if the input string\
    \ is empty; otherwise, your code will produce an incorrect answer of [\"Mary\"\
    , \"lamb\"].\n<|/ c |>\n<| c |>\nI've updated my solution to include an optional\
    \ fix for when `n` is equal to 2.\n<|/ c |>\n<| c |>\nI'm glad you figured it\
    \ out! I just thought it might be helpful to know how this ", "    let arr = s.split(\"\
    \ \");\n    let arr2 = [];\n    for(let i = 0; i < arr.length; i++){\n       \
    \ let letters = arr[i].split(\"\");\n        let count = 0;\n        for(let j\
    \ = 0; j < letters.length; j++){\n            if(letters[j] == letters[j].toUpperCase()){\n\
    \                count++;\n            }\n        }\n        if(count == n){\n\
    \            arr2.push(arr[i]);\n        }\n    }\n    return arr2;\n}\n", " \
    \ var arr = [];\n  var i = 0;\n  while(i < s.length){\n    if(s.charAt(i) == \"\
    \ \"){\n      i++;\n    }\n    if(s.charAt(i) == \"a\" || s.charAt(i) == \"e\"\
    \ || s.charAt(i) == \"i\" || s.charAt(i) == \"o\" || s.charAt(i) == \"u\" || s.charAt(i)\
    \ == \"y\"){\n      arr.push(s.substr(i, n));\n      i += n;\n    }\n    else{\n\
    \      i++;\n    }\n  }\n  return arr;\n}\n</code>\n<|/ a tags=string,arrays,javascript\
    \ dscore=0 |>\n<| c |>\nThank you for your help. I ended up using your code. Do\
    \ you think you could explain the last line of your code? What exactly is the\
    \ function doing? Thanks again.\n<|/ c |>\n<| c |>\nThe last line is just to test\
    \ the function on some examples. I put some comments there to help you understand\
    \ it better, otherwise I think you'd understand it better by reading what others\
    \ wrote :)\n<|/ c |>\n<| c |>\nNo problem! I really appreciate your help and will\
    \ use this code in the future. I just got into programming and am very confused\
    \ about strings and arrays.\n<|/ c |>\n<| a dscore=0 |>\nJust to provide an explanation\
    \ of how the code works\n<code>", "  const arr = s.split(' ');\n  return arr.filter(w\
    \ => w.split('').length == n).map(w => w.split(''));\n}\n", "\tlet a = [];\n\t\
    let c = 0;\n\tlet count = 0;\n\tfor (let i = 0; i < s.length; i++){\n\t\tif (s[i]\
    \ == \" \"){\n\t\t\tif (count == n){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount = 0;\n\
    \t\t}\n\t\telse if (s[i] == \" \"){\n\t\t\tcount++;\n\t\t}\n\t\telse if (s.indexOf(s[i])\
    \ != -1 && s.indexOf(s[i]) == i){\n\t\t\ta.push(s.slice(i, i + 1));\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn a;\n}\n", "    let arr = new Array(s.length);\n    let count\
    \ = new Array(s.length);\n    let arr = new Array(s.length);\n    let count =\
    \ new Array(s.length);\n    for (let i = 0; i < s.length; i++){\n        if (s.substr(i,\
    \ n) === \" \"){\n            arr[i] = s.substr(0, i);\n            count[i] =\
    \ s.length;\n        }\n    }\n    let result = []\n    for (let i = 0; i < s.length;\
    \ i++){\n        if (count[i] === n){\n            result.push(arr[i]);\n    \
    \    }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nCan\
    \ you please tell me what the problem is with my code? I still have a hard time\
    \ figuring out why it doesn't work. Thanks.\n<|/ c |>\n<| a tags=javascript,arrays\
    \ dscore=0 |>\nYour code works fine.  \nThe problem is in the following if statement:\n\
    <code>\nif (s.substr(i, n) === \" \"){\n    arr[i] = s.substr(0, i);\n    count[i]\
    \ = s.length;\n}\n</code>\nWhen you use count as a count of how many spaces you\
    \ have in that string, you are actually getting the length of the string that\
    \ you are counting spaces in.  In other words, it's counting the length of the\
    \ string you are counting spaces in, which is only n chars.  \nSo if s is \"Hello\
    \ world\", and you count 4 spaces in it, the count is actually equal to 9.  You\
    \ can see this by adding this line:\n<code>", "  var res = [];\n  if(s.length\
    \ == 0){\n    return res;\n  }\n\n  for(var i = 0, j = 0; i < s.length; i++){\n\
    \    for(var k = 0; k < n; k++){\n      var x = s.charAt(i);\n      if(x !== \"\
    \ \"){\n        continue;\n      }\n      for(var l = 0; l < k; l++){\n      \
    \  i++;\n        var y = s.charAt(i);\n        if(y === \" \"){\n          i++;\n\
    \          res[j++] = y;\n          break;\n        }\n      }\n      break;\n\
    \    }\n  }\n\n  return res;\n}\n", "\tvar r = [];\n\tfor(var i = 0; i < n; i++){\n\
    \t\tvar x = s.split(\" \")[i];\n\t\tif(/[aeiouyAEIOUY]/g.test(x)){\n\t\t\tr.push(x);\n\
    \t\t}\n\t}\n\treturn r;\n}\n", "  if(s.length == 0){\n    return [];\n  }\n  var\
    \ words = [];\n  var letters = [];\n  var index = 0;\n  while(index < s.length){\n\
    \    letter = s.charAt(index);\n    if(letters.indexOf(letter) < 0){\n      words.push(s.substring(index,\
    \ index+1));\n      letters.push(letter);\n    }\n    index++;\n  }\n  return\
    \ words.filter(function(word){return letters.filter(function(letter){return word.includes(letter)})})\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks, i dont want to use any library,\
    \ i want it to be done by my own\n<|/ c |>\n<| c |>\nThat is pretty funny. I think\
    \ this would be a fun challenge to write.\n<|/ c |>\n<| c |>\nThanks, i am not\
    \ asking for an easy one but i am not getting the right solution\n<|/ c |>\n<|\
    \ c |>\nI added a second solution that may help you.\n<|/ c |>\n<| c |>\nThat\
    \ is awesome, thanks man i appreciate it.\n<|/ c |>\n<| a |>\nHere is one way\
    \ to do it:\n<code>", "    if (s == \"\"){\n        return [];\n    }\n    let\
    \ arr = s.split(' ');\n    let count = 0;\n    for (let i = 0; i < arr.length;\
    \ i++){\n        let temp = arr[i];\n        for (let j = 0; j < temp.length;\
    \ j++){\n            if (temp.charAt(j) == n){\n                count++;\n   \
    \         }\n        }\n    }\n    let newArray = new Array();\n    let arr2 =\
    \ arr.filter((element) => element != s);\n    let arr3 = arr2.filter((element)\
    \ => element != s);\n    for (let i = 0; i < arr2.length; i++){\n        let temp1\
    \ = arr2[i];\n        let temp2 = arr3[i];\n        for(let j = 0; j < temp2.length;\
    \ j++){\n            newArray.push(temp1 + temp2.charAt(j));\n        }\n    }\n\
    \    return newArray;\n}", "    let a = [];\n    if(s.length===0){\n        return\
    \ a;\n    }\n    let i = 0;\n    while(i < s.length && s[i] !== ' '){\n      \
    \  if(s[i].match(/[bcdfghjklmnpqrstvwxyz]/g).length===n){\n            a.push(s.slice(0,i).trim());\n\
    \        }\n        i++;\n    }\n    return a;\n}", "    let arr = []\n    for\
    \ (let i = 0; i < s.length; i++) {\n        arr.push(s.slice(i, i+n))\n    }\n\
    \    return arr.filter(word => word.length == n).map(word => word.split(\"\").join(\"\
    \"))\n}\n", "  if(!s || n == 0){\n    return [];\n  }\n  var res = [], arr = [],\
    \ w = \"\";\n  var arr2 = [];\n  var temp = \"\";\n  for(var i=0;i<s.length;i++){\n\
    \    temp += s.charAt(i);\n    if(temp.match(/[aeiouy]/i)){\n      arr.push(s.substring(i,i+1));\n\
    \    }\n  }\n  for(var i=0;i<arr.length;i++){\n    if(arr.length >= n && arr2.length\
    \ == n){\n      for(var j=0;j<n;j++){\n        temp += arr2.pop();\n      }\n\
    \      res.push(temp);\n      temp = \"\";\n    }else{\n      temp += arr.pop();\n\
    \    }\n  }\n  return res;\n}\n", "\tlet result = [];\n\tlet vowels = \"aeiouAEIOU\"\
    .split(\"\");\n\tlet consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    .split(\"\");\n\tlet vowelCount = 0;\n\tlet consonantCount = 0;\n\tlet word =\
    \ s;\n\twhile(word.length >= n){\n\t\tlet vcount = 0;\n\t\tlet ccount = 0;\n\t\
    \tlet letterCount = 0;\n\t\tword = word.replace(/(.)\\1{2,}/g, \"$1\").split(\"\
    \ \");\n\t\tfor(let i = 0; i < word.length; i++){\n\t\t\tletterCount += word[i].length;\n\
    \t\t\tfor(let j = 0; j < vowels.length; j++){\n\t\t\t\tif(word[i].includes(vowels[j])){\n\
    \t\t\t\t\tvcount += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(let j = 0; j < consonants.length;\
    \ j++){\n\t\t\t\tif(word[i].includes(consonants[j])){\n\t\t\t\t\tccount += 1;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(vcount == n){\n\t\t\tresult.push(word[0]);\n\
    \t\t}\n\t\tif(ccount == n){\n\t\t\tresult.push(word[0]);\n\t\t}\n\t\tif(vcount\
    \ + ccount == n){\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}", "    if (n\
    \ <= 0) return [];\n    let words = new Array(s.length);\n    for (let i = 0;\
    \ i < s.length; i++) {\n        if (s[i] == 'a') {\n            words[i] = 'a';\n\
    \        }\n        else if (s[i] == 'e') {\n            words[i] = 'e';\n   \
    \     }\n        else if (s[i] == 'i') {\n            words[i] = 'i';\n      \
    \  }\n        else if (s[i] == 'o') {\n            words[i] = 'o';\n        }\n\
    \        else if (s[i] == 'u') {\n            words[i] = 'u';\n        }\n   \
    \     else if (s[i] == 'y') {\n            words[i] = 'y';\n        }\n      \
    \  else if (s[i] == ' ') {\n            words[i] = ' ';\n        }\n        else\
    \ if (s[i] == '.') {\n            words[i] = '.';\n        }\n        else if\
    \ (s[i] == '!') {\n            words[i] = '!';\n        }\n        else {\n  \
    \          words[i] = s[i];\n        }\n    }\n    let result = [];\n    let index\
    \ = 0;\n    for (let i = 0; i < s.length; i++){\n        for (let j = i; j < s.length;\
    \ j++){\n            if (words[index] == s[j]) {\n                index++;\n \
    \               break;\n            }\n        }\n        if (index == n) result.push(s.substring(i,\
    \ j));\n    }\n    return result;\n}", "    let output = [];\n    for(let i =\
    \ 0; i < s.length; i++){\n        if(s.split(\"\").filter(x => x !== \" \").indexOf(n)\
    \ > -1){\n            output.push(s.split(\"\").filter(x => x !== \" \").indexOf(n));\n\
    \        }\n    }\n    return output;\n}\n", "    if (s.length == 0){\n      \
    \  return [];\n    }\n    let count = {};\n    let words = [];\n    for (let i=0;\
    \ i < s.length; i++){\n        let word = s.split(\"\").map(e => e.toLowerCase()).join(\"\
    \");\n        if (count.hasOwnProperty(word)){\n            count[word]++;\n \
    \       }\n        else{\n            count[word] = 1;\n        }\n        if\
    \ (count[word] == n){\n            words.push(word);\n        }\n    }\n    return\
    \ words;\n}\n", "  var words = [];\n  var word = \"\";\n  for(var i=0; i<s.length;\
    \ i++){\n    word = word+s[i];\n    if(word.length > n){\n      words.push(word);\n\
    \      word = \"\";\n    }\n  }\n  if(word != \"\"){\n    words.push(word);\n\
    \  }\n  return words;\n}\n", "}\n", "  if (s.length == 0) {\n    return [];\n\
    \  }\n  var words = [];\n  for (var i = 0; i< s.length; i++) {\n    if (s[i].match(/[bcdfghjklmnpqrstvwxyz]{n}/g))\
    \ {\n      words.push(s[i]);\n    }\n  }\n  return words;\n}\n", "\tvar res =\
    \ [];\n\tvar reg = new RegExp((\"[\" + s + \"]\").replace(/[\\s+]/g, \"\")+\"\
    $\");\n\tfor(var i=0;i<s.length;i++){\n\t\tif(reg.test(s[i]))\n\t\t\tres.push(s[i]);\n\
    \t}\n\treturn res;\n}\n", "\tlet arr = [];\n\tlet a = s.split(\" \");\n\tlet b\
    \ = a.filter(x=>x==x).join(\" \");\n\tlet c = b.split(\"\");\n\tlet d = c.filter(x=>x==x).join(\"\
    \ \");\n\tlet e = d.split(\" \");\n\tlet f = e.filter(x=>x==x).join(\" \");\n\t\
    let g = f.split(\"\");\n\tlet h = g.filter(x=>x==x).join(\" \");\n\tlet i = h.split(\"\
    \");\n\tlet j = i.filter(x=>x==x).join(\" \");\n\tlet k = j.split(\"\");\n\tlet\
    \ l = k.filter(x=>x==x).join(\" \");\n\tlet m = l.split(\"\");\n\tlet n = m.filter(x=>x==x).join(\"\
    \ \");\n\tlet o = n.split(\"\");\n\tlet p = o.filter(x=>x==x).join(\" \");\n\t\
    let q = p.split(\"\");\n\tlet r = q.filter(x=>x==x).join(\" \");\n\tlet s = r.split(\"\
    \ \");\n\tlet t = s.filter(x=>x==x).join(\" \");\n\tlet u = t.split(\"\");\n\t\
    let v = u.filter(x=>x==x).join(\" \");\n\tlet w = v.split(\"\");\n\tlet x = w.filter(x=>x==x).join(\"\
    \ \");\n\tlet y = x.split(\"\");\n\tlet z = y.filter(x=>x==x).join(\" \");\n\t\
    let A = z.split(\"\");\n\tlet B = A.filter(x=>x==x).join(\" \");\n\tlet C = B.split(\"\
    \");\n\tlet D = C.filter(x=>x==x).join(\" \");\n\tlet E = D.split(\"\");\n\tlet\
    \ F = E.filter(x=>x==x).join(\" \");\n\tlet G = F.split(\"\");\n\tlet H = G.filter(x=>x==x).join(\"\
    \ \");\n\tlet I = H.split(\"\");\n\tlet J = I.filter(x=>x==x).join(\" \");\n\t\
    let K = J.split(\"\");\n\tlet L = K.filter(x=>x==x).join(\" \");\n\tlet M = L.split(\"\
    \");\n\tlet N = M.filter(x=>x==x).join(\" \");\n\tlet O = N.split(\"\");\n\tlet\
    \ P = O.filter(x=>x==x).join(\" \");\n\tlet Q = P.split(\"\");\n\tlet R = Q.filter(x=>x==x).join(\"\
    \ \");\n\tlet S = R.split(\" \");\n\tlet T = S.filter(x=>x==x).join(\" \");\n\t\
    let U = T.split(\"\");\n\tlet V", "    if(s.trim() == \"\"){\n        return [];\n\
    \    }\n    var res = [];\n    var words = s.split(/\\s+/);\n    for(var i = 0;i\
    \ < words.length;i++){\n        if(words[i].length == n){\n            if(words[i]\
    \ === words[i].toLowerCase()){\n                res.push(words[i]);\n        \
    \    }\n        }\n    }\n    return res;\n}", "\tvar a = [];\n\tif (s.length\
    \ < n){\n\t\treturn a;\n\t} else if (s.length == n){\n\t\ta.push(s);\n\t}\n\t\
    return select_words(s.replace(regex.vowels, \"\"), n) + select_words(s.replace(regex.consonants,\
    \ \"\"), n);\n}\n", "    \n    let words = \"\";\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "\t//TODO\n}\n", "    //use two pointers to solve the problem\n\
    \    var arr=[];\n    var p=s.indexOf(\"a\")+1;\n    var l=s.lastIndexOf(\"a\"\
    )+1;\n    while(p<=l){\n        var c=s.charAt(p);\n        var c2=s.charAt(l);\n\
    \        if(c!=c2){\n            arr.push(s.substring(l,p+1));\n        }\n  \
    \      p++;\n        l++;\n    }\n    return arr;\n}", "\t// Write your code here\n\
    }\n", "}\n</cell>\n<text>\nProblem 4\nWrite a function that computes the number\
    \ of words that start with a particular letter in a string.\n\n\n</text>\n<cell>",
  "\tvar a = s.split(' '),\n\t\tresults = [];\n\ta.forEach(function(e){\n\t\tvar wordArr\
    \ = e.split('');\n\t\twordArr.forEach(function(w, i){\n\t\t\tif (wordArr.length\
    \ == n){\n\t\t\t\tresults.push(e.substring(0, i + 1));\n\t\t\t}\n\t\t});\n\t});\n\
    \treturn results;\n}", "  var arr = [];\n  for(var i=0; i<s.length; i++){\n  \
    \  if(s.match(/[a-z]+/) && s.match(/[a-z]+/).length >= n){\n      arr.push(s.replace(/[a-z]+/gi,\
    \ \"\"));\n    }\n  }\n  return arr;\n}\n", "\tif (n == 0) {\n\t\treturn [];\n\
    \t}\n\tvar arr = s.split(\" \");\n\treturn arr.filter(function(x){\n\t\tvar res\
    \ = x.split(\"\").filter(function(y){\n\t\t\tif (y.search(/[a-zA-Z]/i) < 0) {\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (y == \"z\") {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tif (y == \"z\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn\
    \ y == y.toUpperCase() && y.search(/[aeiou]/) < 0;\n\t\t});\n\t\treturn res.length\
    \ == n;\n\t});\n}\n", "    let list = [];\n    let list2 = [];\n    for (let i\
    \ = 0; i < s.length; i++){\n        let check = 0;\n        for (let j = 0; j\
    \ < n; j++){\n            if (s.charAt(i) == s.charAt(j)){\n                check++;\n\
    \            }\n        }\n        if (check == n){\n            list.push(s.slice(0,i));\n\
    \        }\n    }\n    for (let i = 0; i < list.length; i++){\n        for (let\
    \ j = 0; j < list2.length; j++){\n            if (list[i].match(list2[j]) != null){\n\
    \                list2.push(list2[j]);\n                list2.push(list[i]);\n\
    \                list2.push(list2[j]);\n                list2.shift();\n     \
    \           break;\n            }\n        }\n    }\n    return list2;\n}\n",
  "    // write your solution here\n}\n</cell>\n<text>\nTest your code\nRun the cell\
    \ below to test your code.\n\nBecause the code we submitted works, it may not\
    \ mean the solution will pass every time. In some cases, it may require you to\
    \ try multiple strings, or provide different inputs. For these cases, you may\
    \ want to write additional tests to determine how the code will pass.\n\n\n</text>\n\
    <cell>\n# run this code to test your code\nfrom nose.tools import assert_equal\n\
    \nclass TestSelectWords(object):\n    \n    def test_select_words_empty_string(self):\n\
    \        assert_equal(select_words(\"\", 0), [])\n        \n    def test_select_words_nonempty_string(self):\n\
    \        assert_equal(select_words(\"Mary had a little lamb\", 4), \n        \
    \             [\"little\"])\n        \n    def test_select_words_less_than_three(self):\n\
    \        assert_equal(select_words(\"Mary had a little lamb\", 3), \n        \
    \             [\"Mary\", \"lamb\"])\n        \n    def test_select_words_exactly_three(self):\n\
    \        assert_equal(select_words(\"Hello world\", 4), \n                   \
    \  [\"world\"])\n        \n    def test_select_words_more_than_three(self):\n\
    \        assert_equal(select_words(\"Hello world\", 3), \n                   \
    \  [\"Hello\"])\n        \n    def test_select_words_more_than_nine(self):\n \
    \       assert_equal(select_words(\"Hello world\", 9), \n                    \
    \ [\"Hello\"])\n\nsuite = unittest.TestLoader().loadTestsFromModule(TestSelectWords())\n\
    unittest.TextTestRunner().run(suite)\n</cell>\n<text>\nWhen you run your function,\
    \ what should the result be?\n\n\n</text>\n<text>\nSolution\nRun the code cell\
    \ below to receive a hint or the solution.\n\n\n</text>\n<cell>\nfrom nose.tools\
    \ import assert_equal\n\nclass TestSelectWords(object):\n    \n    def test_select_words_empty_string(self):\n\
    \        assert_equal(select_words(\"\", 0), [])\n        \n    def test_select_words_nonempty_string(self):\n\
    \        assert_equal(select_words(\"Mary had a little lamb\", 4), \n        \
    \             [\"little\"])\n        \n    def test_select_words_less_than_three(self):\n\
    \        assert_equal(select_words(\"Mary had a little lamb\", 3), \n        \
    \             [\"Mary\", \"lamb\"])\n        \n    def test_select_words_exactly_three(self):\n\
    \        assert_equal(select_words(\"Hello world\", 4), \n                   \
    \  [\"world\"])\n        \n    def test_select_words_more_than_three(self):\n\
    \        assert_equal(select_words(\"Hello world\", 3), \n                   \
    \  [\"Hello\"])\n        \n    def test_select_words_more_than_nine(self):\n \
    \       assert_equal(select_words(\"Hello world\", 9), \n                    \
    \ [\"Hello\"])\n\nsuite = unittest.TestLoader().loadTestsFromModule(TestSelectWords())\n\
    unittest.TextTestRunner().run(suite)\n</cell>\n<text>\nCongr", "  var ret = [];\n\
    \  var j = 0;\n  var i;\n  var re;\n  var m;\n  for(i = 0; i < s.length; i++){\n\
    \    re = new RegExp(\"[^\"+i+\"]+\");\n    m = s.match(re);\n    if((m) && (m.length\
    \ > n)){\n      for(; j < n; j++){\n        ret.push(m[j]);\n      }\n      j\
    \ = n;\n    }\n    else if(m && m.length > j){\n      ret.push(m[j]);\n      j++;\n\
    \    }\n  }\n  return ret;\n}\n", "  let arr = [];\n  \n  if(s.length == 0){\n\
    \    return arr;\n  }\n  \n  let count = 0;\n  for (let i = 0; i < s.length; i++){\n\
    \    let letter = s[i];\n    \n    if (letter === \"a\" || letter === \"e\" ||\
    \ letter === \"i\" || letter === \"o\" || letter === \"u\" || letter === \"y\"\
    ){\n      count++;\n    }\n    \n    if(letter === \" \"){\n      count++;\n \
    \   }\n    \n    if(count === n){\n      arr.push(s.slice(0,i));\n    }\n  }\n\
    \  \n  return arr;\n}\n", "    var words = [];\n    \n    for (var i = 0; i <\
    \ s.length; i++){\n        if (s.charAt(i) != \" \"){\n            if (s.charAt(i).toLowerCase()\
    \ != \"u\"){\n                for (var j = 0; j <= n; j++){\n                \
    \    if (s.charAt(i) == s.charAt(j).toLowerCase()){\n                        words.push(s.substr(i,\
    \ j));\n                    }\n                }\n            }\n        }\n \
    \   }\n    return words;\n}\n", "  var words = [];\n  s = s.split(\" \");\n  if(s\
    \ == null || s.length == 0){\n    return words;\n  }\n  for(var i = 0; i < s.length;\
    \ i++){\n    var word = s.split(\" \").filter(w => w.match(/(^|[^aeiou])n([^aeiou]|$)/));\n\
    \    if(word.length >= n){\n      words.push(word[0]);\n    }\n  }\n  return words;\n\
    }\n", "    \n};\n", "    let result = new Array();\n    if(s.length == 0){\n \
    \       return result;\n    }\n    let dict = new Object();\n    for(let i = 0;\
    \ i<n; i++){\n        let n = s.split(\"\").sort();\n        let temp = new Array();\n\
    \        for(let j=0; j<n[j].length; j++){\n            let index = dict[n[j]];\n\
    \            if(index != undefined){\n                temp.push(dict[n[j]]);\n\
    \            }\n        }\n        let count = 0;\n        for(let j=0; j<temp.length;\
    \ j++){\n            if(temp[j] == n[j]){\n                count++;\n        \
    \    }\n        }\n        if(count == n){\n            result.push(s.split(\"\
    \").sort());\n        }\n    }\n    return result;\n}\n", "    var arr = [];\n\
    \    if (s == null) return arr;\n    for(var i=0; i<s.length; i++){\n        var\
    \ c = s.charAt(i);\n        var n = s.indexOf(c, i+1);\n        if (n != -1){\n\
    \            arr.push(s.substring(i, n));\n            if (n==s.length) return\
    \ arr;\n            i=n;\n        }\n    }\n    return arr;\n}", "\treturn s;\n\
    }\n\n", "  var res = [];\n  \n  if (s.length < 1){\n    return [];\n  }\n  \n\
    \  for (var i = 0; i < s.length; i++){\n    if (s.indexOf( s.charAt(i) ) !== -1){\n\
    \      var tmp = s.substr(i);\n      var index = tmp.indexOf(\",\");\n      \n\
    \      if (index > 0){\n        tmp = tmp.substr(0, index);\n      }\n      \n\
    \      if (tmp.indexOf(\",\") === -1){\n        res.push(tmp);\n      }\n    }\n\
    \  }\n  \n  if (res.length < 1){\n    return res;\n  }\n  \n  var count = 0;\n\
    \  \n  for (var i = 0; i < res.length; i++){\n    if (res[i].length > n){\n  \
    \    res.splice(i, 1);\n      i--;\n    } else {\n      count++;\n    }\n  }\n\
    \  \n  if (count === 0){\n    return res;\n  } else {\n    return select_words(res[0],\
    \ n);\n  }\n}\n", "\tvar res = [];\n\tvar str = s.toLowerCase();\n\tvar letters\
    \ = str.split(\" \");\n\t\n\tfor (var i = 0; i < letters.length; i++) {\n\t\t\
    if (letters[i].length >= n) {\n\t\t\tres.push(letters[i]);\n\t\t}\n\t}\n\treturn\
    \ res;\n}\n", "\tlet words = [];\n\tlet i = n;\n\tfor(let j = 0; j < s.length;\
    \ j++){\n\t\twhile((s.charAt(j) === \" \")||(s.charAt(j) === \".\")||(s.charAt(j)\
    \ === \"?\")||(s.charAt(j) === \"!\")||(s.charAt(j) === \"&\")||(s.charAt(j) ===\
    \ \"%\")){\n\t\t\tj++;\n\t\t}\n\t\tlet found = s.substring(i, j);\n\t\tif(words.indexOf(found)\
    \ < 0){\n\t\t\twords.push(found);\n\t\t}\n\t\ti = j;\n\t}\n\treturn words;\n}\n",
  "  // your code here\n  return [];\n}\n", "\tvar arr = []\n\tfor(var i = 0; i <\
    \ s.length; i++){\n\t\tfor(var j = 0; j < s.length; j++){\n\t\t\tif(i == j){\n\
    \t\t\t\tarr.push(s.slice(i, j+1))\n\t\t\t}\n\t\t\tif(s.charAt(i) == s.charAt(j)){\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr;\n}\n", "  if (s == \"\") {\n\
    \    return [];\n  }\n  var wordsArr = [];\n  var words = s.replace(/\\s+/g,\"\
    \ \").split(\" \");\n  for(var i = 0; i < words.length; i++){\n    var word =\
    \ words[i];\n    for(var j = 0; j < word.length; j++) {\n      if (/[aeiou]/i.test(word[j]))\
    \ {\n        wordsArr.push(word);\n        if (j+n >= word.length){\n        \
    \  break;\n        }\n      }\n    }\n  }\n  return wordsArr;\n}\n", "    var\
    \ a = [];\n    for(var i=0; i<s.length; i++){\n        var n = s.indexOf(\"%c\"\
    ,i);\n        var z = i;\n        while(n!=-1){\n            a.push(s.substr(z,n-z));\n\
    \            n = s.indexOf(\"%c\",n+1);\n            z = n+1;\n        }\n   \
    \ }\n    return a.length==n ? a : [];\n}\n</code>\n<|/ a dscore=0 tags=string,arrays,javascript\
    \ |>\n<| a dscore=0 tags=string,arrays,javascript |>\nOne liner:\n<code>\nreturn\
    \ s.split(\" \").filter(function(word){\n    return !~word.indexOf(\"%c\");\n\
    }).join(\" \");\n</code>\n<|/ a |>\n<| a tags=string,arrays,javascript |>\n<code>",
  "  var words = [];\n  var last = \"\";\n  var i = 0;\n  \n  for(var i = 0; i < n;\
    \ i++){\n    if(s[i] == \"a\"){\n      words.push(last);\n    }\n    last = s[i];\n\
    \  }\n  \n  if(!s.length){\n    return words;\n  }\n  \n  return words.concat(select_words(s.substring(last),\
    \ n));\n}\n", "\tvar a = []; \n\tvar re = /\\w/g;\n\tvar words = s.split(re);\n\
    \tfor(var i = 0; i < words.length; i++){\n\t\tvar words = words[i].split(re);\n\
    \t\tvar sum = 0;\n\t\tfor(var j = 0; j < words.length; j++){\n\t\t\tif(words[j].match(re)){\n\
    \t\t\t\tsum += words[j].match(re).length;\n\t\t\t}\n\t\t}\n\t\tif(sum == n){\n\
    \t\t\ta.push(words[i]);\n\t\t}\n\t}\n\treturn a;\n}\n", "    let arr = [];\n \
    \   \n    for(let i = 0; i < s.length; i++){\n        for(let j = 0; j < s.length;\
    \ j++){\n            if (s[i] === s[j] && j > i){\n                arr.push(s.slice(i,\
    \ j));\n            }\n        }\n    }\n    \n    if (arr.length == n){\n   \
    \     return arr;\n    }else{\n        return [];\n    }\n}\nselect_words(\"Mary\
    \ had a little lamb\", 4);\nselect_words(\"Mary had a little lamb\", 3);\nselect_words(\"\
    simple white space\", 2);\nselect_words(\"Hello world\", 4);\nselect_words(\"\
    Uncle sam\", 3);\nselect_words(\"Mary had a little lamb\", 2);\nselect_words(\"\
    Mary had a little lamb\", 5);\nselect_words(\"Mary had a little lamb\", 4);\n\
    select_words(\"Mary had a little lamb\", 4);\nselect_words(\"Mary had a little\
    \ lamb\", 3);\nselect_words(\"Mary had a little lamb\", 3);\nselect_words(\"Mary\
    \ had a little lamb\", 3);\nselect_words(\"Mary had a little lamb\", 3);\nselect_words(\"\
    Mary had a little lamb\", 3);\nselect_words(\"Mary had a little lamb\", 3);\n\
    select_words(\"Mary had a little lamb\", 3);\nselect_words(\"Mary had a little\
    \ lamb\", 3);\nselect_words(\"Mary had a little lamb\", 3);\nselect_words(\"Mary\
    \ had a little lamb\", 3);\nselect_words(\"Mary had a little lamb\", 3);\nselect_words(\"\
    Mary had a little lamb\", 3);\nselect_words(\"Mary had a little lamb\", 3);\n\
    select_words(\"Mary had a little lamb\", 3);\nselect_words(\"Mary had a little\
    \ lamb\", 3);\nselect_words(\"Mary had a little lamb\", 3);\nselect_words(\"Mary\
    \ had a little lamb\", 3);\nselect_words(\"Mary had a little lamb\", 3);\nselect_words(\"\
    Mary had a little lamb\", 3);\nselect_words(\"Mary had a little lamb\", 3);\n\
    select_words(\"Mary had a little lamb\", 3);\nselect_words(\"Mary had a little\
    \ lamb\", 3);\nselect_words(\"Mary had a little lamb\", 3);\nselect_words(\"Mary\
    \ had a little lamb\", 3);\nselect_words(\"Mary had a little lamb\", 3);\nselect_words(\"\
    Mary had a little lamb\", 3);\nselect_words(\"Mary had a little lamb\", 3);\n\
    select_words(\"Mary had a little lamb\", 3);\nselect_words(\"Mary had a little ",
  "  var a = select_words(s, n)\n  if (a.length > 0){\n    return a\n  }else{\n  \
    \  if (s.length == 0){\n      return []\n    }else{\n      return [s]\n    }\n\
    \  }\n}\n", "    let arr = [];\n    for(let i=0;i<s.length-1;i++){\n        if(s.indexOf((s.charAt(i))+\"\
    \")==s.indexOf((s.charAt(i+1))+\"\")){\n            arr.push(s.slice(0,i+1));\n\
    \        }\n    }\n    if(s.length==n){\n        return arr;\n    }\n    return\
    \ [];\n}\n", "  var words = [];\n  var flag = 0;\n\n  for(var i = 0; i <= n; i++){\n\
    \    if(s.indexOf(String.fromCharCode(n)) !== -1){\n      words.push(s.substring(0,s.indexOf(String.fromCharCode(n))));\n\
    \      s = s.replace(words[words.length-1], \"\");\n      flag++;\n    }\n  }\n\
    \  if(flag == 0){\n    return [];\n  }\n  else{\n    return words;\n  }\n}\n",
  "\tvar a = [];\n\ts = s.toLowerCase();\n\tn = Number(n);\n\tvar l = s.length;\n\t\
    for(var i = 0;i<=l;i++){\n\t\tif(s.charAt(i) == \" \"){\n\t\t\tcontinue;\n\t\t\
    }\n\t\tif(s.charAt(i) == \"x\"){\n\t\t\tbreak;\n\t\t}\n\t\tvar s = s.replace(/[^a-zA-Z\
    \ ]/g, \"\");\n\t\tif(s == \"\"){\n\t\t\tcontinue;\n\t\t}\n\t\tvar n = s.split(\"\
    \").sort();\n\t\tfor(var j = 0;j<=n;j++){\n\t\t\tif(j == n){\n\t\t\t\ta.push(s.substr(0,i));\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor(var k = 0;k<=n;k++){\n\t\t\t\tif(i+k == s.length){\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar a = s.substr(i,k).split(\"\").sort();\n\
    \t\t\t\tfor(var l = 0;l<=n;l++){\n\t\t\t\t\tif(n+l == s.length){\n\t\t\t\t\t\t\
    break;\n\t\t\t\t\t}\n\t\t\t\t\tif(l == n || a.indexOf(n+l) == -1){\n\t\t\t\t\t\
    \ta.push(n+l);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(var l = 0;l<=n;l++){\n\t\t\
    \t\t\tif(n+l == s.length){\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(l ==\
    \ n || a.indexOf(n+l) == -1){\n\t\t\t\t\t\ta.push(n+l);\n\t\t\t\t\t}\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t}\n\treturn a;\n}\n", "    words = s.split(\" \")\n    wordcount\
    \ = n\n    let array = []\n    for (let i=0; i<wordcount; i++){\n        let count\
    \ = 0\n        for (let j=0; j<words.length; j++){\n            for (let k=0;\
    \ k<words[j].length; k++){\n                count += words[j][k]\n           \
    \ }\n        }\n        if (count == n){\n            array.push(words[i])\n \
    \       }\n    }\n    return array\n}\nlet result = select_words(\"Mary had a\
    \ little lamb\", 4)", "\tlet result = [];\n\tlet index = 0;\n\twhile(index < s.length){\n\
    \t\tlet char = s.charAt(index);\n\t\tif(index+1 >= s.length || s.charAt(index+1)\
    \ != char){\n\t\t\tresult.push(char);\n\t\t}\n\t\tindex++;\n\t}\n\treturn result.filter(word\
    \ => word.length == n);\n}", "    var result = [];\n    var i = 0;\n    var count\
    \ = 0;\n    while(i<s.length){\n        count = 0;\n        for(var j=0; j<s.length;\
    \ j++){\n            if(s[j]==s[i]){\n                count+=1;\n            }\n\
    \        }\n        if(count==n){\n            result.push(s[i]);\n          \
    \  count+=1;\n        }\n        i++;\n    }\n    if(s.length==0){\n        result\
    \ = [];\n    }\n    return result;\n}\n", "\tvar l = [];\n\tif(s === null){\n\t\
    \treturn [];\n\t}\n\ts = s.toLowerCase();\n\tvar reg = new RegExp(\"\"+s+\"\"\
    , \"g\");\n\ts = s.replace(reg, function(str){\n\t\tvar letters = str.replace(/[^a-z\
    \ ]/gi, \"\").toLowerCase().split(\" \");\n\t\tvar counts = [];\n\t\tfor(var i\
    \ = 0; i < letters.length; i++){\n\t\t\tif(counts[letters[i]] === undefined){\n\
    \t\t\t\tcounts[letters[i]] = 0;\n\t\t\t}\n\t\t\tcounts[letters[i]] += 1;\n\t\t\
    }\n\t\tvar max = 0;\n\t\tfor(var key in counts){\n\t\t\tif(counts[key] > max){\n\
    \t\t\t\tmax = counts[key];\n\t\t\t}\n\t\t}\n\t\tfor(var i = 0; i < max; i++){\n\
    \t\t\tif(counts[i] < n){\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t}\n\t\tl.push(str);\n\
    \t\treturn \"\";\n\t});\n\treturn l;\n}\n", '}', "\tvar res = [];\n\tvar count\
    \ = 0;\n\ts = s.replace(/[\\W_]/g, ' ');\n\ts = s.toLowerCase();\n\ts = s.split(\"\
    \ \");\n\tfor (var i=0; i<s.length; i++){\n\t\tif (s[i].length === n){\n\t\t\t\
    res[count] = s[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn res.length === 0 ? []\
    \ : res;\n}\n", "  // TODO\n}\n", "  // Your code here\n  let arr = s.split(\"\
    \ \");\n  for(let i = 0; i< arr.length; i++) {\n    if (arr[i].length >= n){\n\
    \      return arr[i];\n    }\n  }\n}\n", "\t// Write your code here\n\tif (s ===\
    \ \"\") return [];\n\tvar res = [];\n\tvar flag = false;\n\tfor (var i = 0; i\
    \ <= s.length; i++){\n\t\tfor (var j = 0; j < s.length; j++){\n\t\t\tif (i + j\
    \ >= s.length) break;\n\t\t\t\n\t\t\tif (s.substring(i, j + 1) === \" \") flag\
    \ = true;\n\t\t\telse if (!flag) break;\n\t\t}\n\t\tif (flag) res.push(s.substring(i,\
    \ j + 1));\n\t\tflag = false;\n\t}\n\treturn res;\n}\n", "  if(s == \"\"){\n \
    \   return [];\n  }\n  const result = [];\n  let count = 0;\n  let index = 0;\n\
    \  let len = s.length;\n  for(let i = 0; i < len; i++){\n    if(s.substring(index,\
    \ index + n).match(consonant)){\n      result.push(s.substring(index, index +\
    \ n));\n      count += 1;\n      index += n;\n    }\n  }\n  return count == n\
    \ ? result : [];\n}", "  if(s == \"\"){\n    return [];\n  }\n  var result = [];\n\
    \  for(var i=0; i<s.length; i++){\n    if(s.substr(i, n).match(/\\w/g) && s.substr(i,\
    \ n).match(/\\w/).length == n){\n      result.push(s.substr(i, n));\n    }\n \
    \ }\n  return result;\n}", "  // Your code goes here\n}\n", "    return [];\n\
    }\n", "  let arr = [];\n  if(s.length === 0) {\n    return arr;\n  }\n  let str\
    \ = s.split(' ');\n  for (let i = 0; i < str.length; i++){\n    let wordArr =\
    \ str[i].split('');\n    let count = 0;\n    for (let j = 0; j < wordArr.length;\
    \ j++){\n      if (wordArr[j].toLowerCase() === wordArr.join('').toLowerCase()){\n\
    \        count += 1;\n      }\n    }\n    if (count === n){\n      arr.push(str[i]);\n\
    \    }\n  }\n  return arr;\n}", "    // Write your code here\n}\n", "    let a\
    \ = s.split(\" \");\n    let b = a.map(x => x.toLowerCase().replace(/[^aeiouyAEIOUY]/g,\
    \ \"\"));\n    let c = b.filter((x,i) => b.indexOf(x.toLowerCase()) == i);\n \
    \   let d = c.filter(x => x.length == n);\n    return d.map(x => x.toLowerCase());\n\
    }", "    // Your code here\n    if (s.length == 0)\n        return []\n    var\
    \ result = [];\n    for(var i = 0; i < s.length; i++) {\n        var count = 0;\n\
    \        for (var j = 0; j < s.length; j++) {\n            if (s[i] == s[j]) {\n\
    \                count++;\n            }\n        }\n        if (count == n) {\n\
    \            result.push(s[i]);\n        }\n    }\n    return result;\n}\n", " \
    \ var a = s.split(\" \");\n  n = parseInt(n); \n  \n  if(n <= 0 || n == Infinity){\n\
    \    return a;\n  }\n  \n  for(var i=0;i<a.length;i++){\n    if(a[i].length ==\
    \ n){\n      for(var j=0;j<a[i].length;j++){\n        if(a[i][j] != \" \"){\n\
    \          a[i] = a[i].substring(0, j);\n        }\n      }\n      \n      return\
    \ a;\n    }\n  }\n}\n", "    var arr = [];\n    if(s.indexOf(\" \") == -1){\n\
    \        return arr;\n    }\n    for(var i = 0; i <= n; i++){\n        for(var\
    \ j = 0; j < s.length; j++){\n            if(s.indexOf(\" \" + s[j], j) == i){\n\
    \                arr.push(s[j]);\n            }\n        }\n    }\n    return\
    \ arr;\n}\n</code>\n<|/ a dscore=1 tags=algorithm,javascript,string,arrays |>\n\
    <| a |>\nHere's an approach that uses regular expressions.  I've tested this against\
    \ the test cases provided, and it seems to work as expected.  I believe this is\
    \ what you were going for originally, but you said \"it isn't working\", and that's\
    \ why I changed your function around.\nThe regular expression I used is:\n<code>\n\
    \"\\\\b(\" + s.replace(/\\s+/g, \"\") + \")\\\\b[^a-zA-Z ]+\"\n</code>\nIt matches\
    \ words containing \"s\".\n<code>", "  var a = [];\n  var regExp = /[^\\w\\s\\\
    p{L}]+/g;\n  s = s.toLowerCase().split(regExp);\n  \n  if (s.length == 0) return\
    \ [];\n  if (n != s.length) return [];\n  \n  var i = 0;\n  var l = s.length;\n\
    \  \n  while (i < l){\n    var word = s[i];\n    var count = 0;\n    for (var\
    \ j = 0; j < s.length; j++){\n      if (word == s[j]){\n        count++;\n   \
    \   }\n    }\n    if (count === n) a.push(word);\n    i++;\n  }\n  return a;\n\
    }\n", "\tvar res = [];\n\tfor(var i = 0; i < s.length; i++){\n\t\tvar word = s.substr(i,\
    \ s.length);\n\t\tvar arr = string.count(word, \" \");\n\t\tvar num = 0;\n\t\t\
    for(var j = 0; j < arr.length; j++){\n\t\t\tif(arr[j] == n){\n\t\t\t\tnum++;\n\
    \t\t\t}\n\t\t}\n\t\tif(num == n)\n\t\t\tres.push(word);\n\t}\n\treturn res;\n\
    }\n", "    let arr = [];\n    for (let i = 0; i < s.length; i++){\n        let\
    \ word = s.split(\" \");\n        for (let j = 0; j < word.length; j++){\n   \
    \         let isMatch = false;\n            for (let k = 0; k < n; k++){\n   \
    \             if (word[j].includes(s[k])){\n                    isMatch = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isMatch){\n                arr.push(word[j]);\n            }\n        }\n \
    \   }\n    return arr;\n}\n", "    \n    if (s === \"\") return [];\n    \n  \
    \  var p = 0;\n    var n = n.toString();\n    \n    var r = [];\n    \n    for\
    \ (var i = 0; i < s.length; i++){\n        if (s.charCodeAt(i) == 97){\n     \
    \       p++;\n            if (p > n){\n                return r;\n           \
    \ }\n        } else if (s.charCodeAt(i) == 122){\n            p = 0;\n       \
    \ }\n    }\n    \n    return r;\n}\n", "    return s;\n}\n", "\tlet arr = [];\n\
    \tlet reg = /[^aeiouAEIOU]/g;\n\tlet reg2 = /[a-z]/g;\n\twhile(true){\n\t\tif(reg.test(s))\n\
    \t\t\ts = s.replace(regexp, \"$&\" + n);\n\t\telse if(reg2.test(s))\n\t\t\ts =\
    \ s.replace(regexp, \"$\" + n);\n\t\telse\n\t\t\tbreak;\n\t\tarr.push(s);\n\t\
    }\n\treturn arr;\n}\n", "   var words = \"\";\n   for (var i = 0; i <s.length;\
    \ i++){\n      if (s.substring(i, i+n) === \"\"){\n         words = words.split(\"\
    \ \").filter(function(e){\n            return e.length == n;\n         });\n \
    \     }\n      else if (s.substring(i, i+n).match(/[aeiou]/))\n         words\
    \ += s.substring(i, i+n);\n   }\n   return words;\n}\n</code>\n<|/ a tags=javascript\
    \ |>\n<| c |>\nthank you for your answer. But how do I print each word in the\
    \ array that is returned from the function using document.write()?\n<|/ c |>\n\
    <| c |>\nIt looks like your select_words is returning array. If you want to print\
    \ the whole array, then you can do something like this: document.write(words.join('\
    \ '))\n<|/ c |>\n<| c |>\nOkay thanks so much, I've updated the question with\
    \ the code you've provided to me.\n<|/ c |>\n<| c |>\nAh, I see, that's because\
    \ you're printing each word separately - instead of using document.write in print_words,\
    \ you need to use print_words in select_words to print all the words in an array.\
    \ I'll update my answer with a simple solution.\n<|/ c |>\n<| c |>\nHey, that\
    \ worked perfectly thank you for your help. One more thing though, how would I\
    \ go about printing the words returned from the function using document.write()?\n\
    <|/ c |>\n<| a |>\nAnother way of doing it without split and filter:\n<code>",
  "\tvar arr = [];\n\tarr.push(s);\n\tif (s.length == n){\n\t\tarr.push(s.replace(regex_consonant,\"\
    $1\"));\n\t}\n\treturn arr;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
