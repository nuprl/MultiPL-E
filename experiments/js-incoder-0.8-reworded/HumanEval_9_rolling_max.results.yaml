language: js
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tlet rollingMax = [];\n\tfor (let i = numbers.length - 1;i >= 0;i--) {\n\t\t\
    if (rollingMax.indexOf(numbers[i]) === -1) {\n\t\t\trollingMax.push(numbers[i]);\n\
    \t\t}\n\t}\n\treturn rollingMax;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpp8di7q5u.js:21:10)\n    at Object.<anonymous> (/tmp/tmpp8di7q5u.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    if(!Array.isArray(numbers)) return null;\n    var r = [];\n    numbers.forEach(function(n)\
    \ {\n        var i = [];\n        for(var i = 0; i < n; i++) i.push(n);\n    \
    \    r.push(i);\n    });\n    var m = Math.max.apply(null, r);\n    return r.map(function(i)\
    \ { return i[m]; });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyxn5srg0.js:10\n        for(var i = 0; i < n; i++) i.push(n);\n\
    \                                     ^\n\nTypeError: i.push is not a function\n\
    \    at /tmp/tmpyxn5srg0.js:10:38\n    at Array.forEach (<anonymous>)\n    at\
    \ rolling_max (/tmp/tmpyxn5srg0.js:8:13)\n    at test (/tmp/tmpyxn5srg0.js:23:20)\n\
    \    at Object.<anonymous> (/tmp/tmpyxn5srg0.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var result = [];\n    var current = Math.max.apply(Math, numbers);\n    var\
    \ next = Math.max.apply(Math, numbers.slice(1));\n    result.push(current);\n\
    \    while (next > current){\n        current = next;\n        next =  Math.max.apply(Math,\
    \ numbers.slice(0));\n        result.push(current);\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -Infinity\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8kkohyto.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8kkohyto.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -Infinity\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  if(numbers.length==0){\n    return [];\n  }\n\n  var max_array = [];\n  var\
    \ max_so_far = 0;\n  var index = numbers.length-1;\n  var max = numbers[index];\n\
    \n  while(index>0){\n    while(index>0 && numbers[index]>max){\n      max_array.push(max_so_far);\n\
    \      max_so_far = numbers[index];\n      index--;\n    }\n    max_array.push(max_so_far);\n\
    \    max_so_far = max;\n    index--;\n    max = numbers[index];\n  }\n  max_array.push(max_so_far);\n\
    \n  return max_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  4,\n\
    \  3,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpy0nozjel.js:37:10)\n    at Object.<anonymous> (/tmp/tmpy0nozjel.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 4, 3,\
    \ 2 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var result = [],\n    temp,\n    len = numbers.length;\n  for(var i = 0; i\
    \ < len; i++){\n    temp = Math.max.apply(null, numbers);\n    result.push(temp);\n\
    \    numbers = numbers.slice(0,i).concat(numbers.slice(i+1));\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmp6pordqcf.js:23:10)\n    at Object.<anonymous> (/tmp/tmp6pordqcf.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var max,\n        len = numbers.length,\n        max = numbers[0],\n    \
    \    i;\n\n    for (i = len - 1; i > 0; i--){\n        if(numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n    }\n\n    return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp3z564vmj.js:25:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp3z564vmj.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar numbers_length = $.type(numbers).valueOf().length,\n\t\tmax_number = numbers[0],\n\
    \t\tmax_number = numbers[0];\n\tfor(var i = 1; i < numbers_length; i++){\n\t\t\
    if(numbers[i] > max_number){\n\t\t\tmax_number = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ max_number;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpox1bw7g8.js:6\n\tvar numbers_length = $.type(numbers).valueOf().length,\n\
    \t                     ^\n\nReferenceError: $ is not defined\n    at rolling_max\
    \ (/tmp/tmpox1bw7g8.js:6:23)\n    at test (/tmp/tmpox1bw7g8.js:21:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpox1bw7g8.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  let max_element= numbers[0];\n  let max_index= 0;\n  \n  for (let i = 1; i\
    \ < numbers.length; i++) {\n    if (numbers[i] >= max_element) {\n      max_element\
    \ = numbers[i];\n      max_index = i;\n    }\n  }\n  \n  return numbers.slice(0,max_index+1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpj9rqu28y.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj9rqu28y.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var max_so_far = numbers[0];\n  for(var i=1; i<numbers.length; i++){\n    if(numbers[i]\
    \ < max_so_far){\n      max_so_far = numbers[i];\n    }\n  }\n  return max_so_far;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp30ryqxbu.js:20:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp30ryqxbu.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var array=[];\n  for(var i=0;i<numbers.length;i++)\n  {\n    array.push(Math.max.apply(Math,\
    \ numbers));\n  }\n  return array;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpp88of24w.js:21:10)\n    at Object.<anonymous> (/tmp/tmpp88of24w.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var max_number = Math.max.apply(null, numbers);\n  var window_length = numbers.length-1;\n\
    \  var window_numbers = [];\n  for(var i=0; i<window_length; i++){\n    window_numbers.push(Math.max(numbers[i],\
    \ max_number));\n  }\n  return window_numbers;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmppcm80tjw.js:22:10)\n    at Object.<anonymous> (/tmp/tmppcm80tjw.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar rolling_max = [];\n\tfor(var i = 0; i < numbers.length; i++)\n\t\trolling_max[i]\
    \ = numbers[i];\n\tfor(i = 0; i < numbers.length; i++){\n\t\tfor(var j = i - 1;\
    \ j > 0 && rolling_max[j] > numbers[i]; j--)\n\t\t\trolling_max[j] = rolling_max[j-1];\n\
    \t\trolling_max[j-1] = numbers[i];\n\t}\n\treturn rolling_max;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  4,\n\
    \  3,\n  4,\n  '-1': 2,\n  '-2': 1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  2,\n  3,\n  4\n]\n    at test (/tmp/tmphqfn_d8d.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphqfn_d8d.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 4, 3,\
    \ 4, '-2': 1, '-1': 2 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: -5
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar res = [];\n\tvar i = 0, j = 0;\n\t\n\twhile(numbers.length){\n\t\tvar el\
    \ = numbers[j];\n\t\tres.push(el);\n\t\tif(!numbers.length) break;\n\t\t\n\t\t\
    j = i;\n\t\t\n\t\tvar a = numbers[j];\n\t\tvar b = numbers[j+1];\n\t\t\n\t\tvar\
    \ max = Math.max(a, b);\n\t\t\n\t\tif(a==max){\n\t\t\tj++;\n\t\t\ti++;\n\t\t}\
    \ else if(b==max){\n\t\t\tj++;\n\t\t}\n\t\t\n\t}\n\t\n\treturn res;\n}\n\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff8f1de3e0\n 1: 0x2b9fa41f9727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b9fa4d8e28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b9fa46c8f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b9fa485a760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b9fa48620cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b9fa4a4c7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b9fa43ab7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659977799
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var ret = [];\n    var n = numbers[0];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > n){\n            n = numbers[i];\n        }\n\
    \        ret.push(n);\n    }\n    return ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpk8yh8_ao.js:23:10)\n    at Object.<anonymous> (/tmp/tmpk8yh8_ao.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar results = [];\n\tvar curr = Math.max.apply(Math, numbers);\n\tfor(var i\
    \ = 0; i < numbers.length; i++){\n\t\tif(numbers[i] >= curr){\n\t\t\tresults.push(curr);\n\
    \t\t\tcurr = Math.max.apply(Math, numbers.slice(i + 1, i + 1 + results.length));\n\
    \t\t}else{\n\t\t\tresults.push(numbers[i]);\n\t\t}\n\t}\n\treturn results;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpvq9_iuqt.js:26:10)\n    at Object.<anonymous> (/tmp/tmpvq9_iuqt.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var max = Number.NEGATIVE_INFINITY;\n  var rollingMax = [];\n  for(var i =\
    \ 0; i < numbers.length; i++){\n    rollingMax[i] = Math.max(max, numbers[i]);\n\
    \  }\n  return rollingMax;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp1pr9tpo_.js:21:10)\n    at Object.<anonymous> (/tmp/tmp1pr9tpo_.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var max = [];\n  for(var i = 0; i < numbers.length; i++){\n    if(numbers[i]\
    \ > max[max.length - 1]){\n      max = numbers.slice(i).concat(max);\n    }\n\
    \  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpwxrmbzda.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwxrmbzda.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tif(!Array.isArray(numbers)) throw Error('The argument should be an array!');\n\
    \tlet result = numbers[0];\n\tfor(let i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ >= result){\n\t\t\tresult = numbers[i];\n\t\t}\n\t}\n\treturn result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpv74ppzcb.js:21:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpv74ppzcb.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  numbers.sort(function(a, b){return b-a});\n  var max = numbers[0];\n  var counter\
    \ = 0;\n  var max_index = -1;\n  for(var i = 1, len = numbers.length; i<len; ++i){\n\
    \    if(numbers[i]>max){\n      max = numbers[i];\n      max_index = i;\n    }\n\
    \  }\n  return numbers.slice(max_index+1);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmp5je1ns8_.js:25:10)\n    at Object.<anonymous> (/tmp/tmp5je1ns8_.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar max = numbers[0];\n\tfor(var i = 0; i<numbers.length; i++){\n\t\tif(max\
    \ < numbers[i])\n\t\t\tmax = numbers[i];\n\t}\n\treturn max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpbj27hx8k.js:19:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpbj27hx8k.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var result = [];\n    var length = numbers.length;\n    var max_value = numbers[0];\n\
    \    for(var i = 1; i < length; i++) {\n        if(numbers[i] > max_value) {\n\
    \            max_value = numbers[i];\n        }\n    }\n    var index = result.indexOf(max_value);\n\
    \    if(index === -1) {\n        index = result.push(max_value);\n    } else {\n\
    \        result.splice(index, 1);\n        index++;\n    }\n    while(numbers.length\
    \ > 0) {\n        if(numbers[index] > max_value) {\n            max_value = numbers[index];\n\
    \        }\n        index++;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmphw4a_zf3.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmphw4a_zf3.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var len = numbers.length,\n      result = [],\n      max;\n    \n  //If the\
    \ array has less items than `rolling_max` expects, return the array directly\n\
    \  if (len < rolling_max.arguments.length){\n    return numbers;\n  }\n\n  rolling_max.max.apply(rolling_max,\
    \ numbers);\n  \n  while (len > rolling_max.arguments.length){\n    max = rolling_max.max.apply(rolling_max,\
    \ result);\n    \n    //If max is still bigger than the last value in the array\n\
    \    if (max < numbers[len - 1]){\n      len = len-1;\n    }\n    \n    //Add\
    \ the last number in the array to the result set\n    result.push(numbers[len]);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzp0u1gq_.js:15\n  rolling_max.max.apply(rolling_max, numbers);\n\
    \                  ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'apply')\n    at rolling_max (/tmp/tmpzp0u1gq_.js:15:19)\n    at test (/tmp/tmpzp0u1gq_.js:37:20)\n\
    \    at Object.<anonymous> (/tmp/tmpzp0u1gq_.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var max_index = 0;\n  var max_value = numbers[0];\n  for(var i=1; i < numbers.length;\
    \ i++){\n    if(numbers[i] > max_value){\n      max_value = numbers[i];\n    \
    \  max_index = i;\n    }\n  }\n  return numbers.slice(0, max_index + 1);\n}\n\
    exports.rolling_max = rolling_max;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpllzxkmkx.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpllzxkmkx.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var max_array = [];\n    var max_value;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        max_value = Math.max.apply(null, numbers);\n        numbers =\
    \ numbers.filter(function(value){\n            return value != max_value;\n  \
    \      });\n        if(numbers.length == 0){\n            break;\n        }\n\
    \        max_array.push(max_value);\n    }\n    return max_array;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpjz6eaa9p.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjz6eaa9p.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3 ],\n\
    \  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var max_element = numbers[0];\n  var max_i = 1;\n\n  for(var i = 1, len = numbers.length;\
    \ i < len; i++){\n    if(numbers[i] > max_element){\n      max_element = numbers[i];\n\
    \      max_i = i;\n    }\n  }\n\n  return max_element;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpmv44u8vh.js:24:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpmv44u8vh.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar res = [];\n\tvar max = Math.max.apply(Math, numbers);\n\tnumbers.forEach(function(num){\n\
    \t\tres.push(num > max ? num : max);\n\t})\n\treturn res;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpdmusticw.js:20:10)\n    at Object.<anonymous> (/tmp/tmpdmusticw.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar rolling_max = Math.max.apply( null, numbers);\n\tvar rolling_max_index =\
    \ 0;\n\tfor(var i=numbers.length-1;i>rolling_max_index;i--){\n\t\tif(numbers[i]>rolling_max){\n\
    \t\t\trolling_max_index = i;\n\t\t\trolling_max = numbers[i];\n\t\t}\n\t}\n\t\
    return rolling_max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-Infinity\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpr0nnn3zh.js:22:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpr0nnn3zh.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -Infinity,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var max = numbers[0];\n    for (var i=1; i<numbers.length; i++){\n      \
    \  if (numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n \
    \   return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpjp63w_md.js:20:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpjp63w_md.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar result = [],\n\t\ti = numbers.length - 1,\n\t\tj = 0;\n\n\twhile(i >= 0){\n\
    \t\tresult.unshift(numbers[i]);\n\t\ti -= 1;\n\t\tj += 1;\n\t\tif (j >= numbers.length){\n\
    \t\t\tj = 0;\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpstwfjuqo.js:28:10)\n    at Object.<anonymous> (/tmp/tmpstwfjuqo.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 0
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var rolling_max_array = [];\n    var max_number = 0;\n    for(var i=0;i<numbers.length;i++){\n\
    \        max_number = Math.max(numbers[i], max_number);\n        rolling_max_array.push(max_number);\n\
    \    }\n    return rolling_max_array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar result = [];\n\tvar found = false;\n\tvar current = 0;\n\tvar max = 1;\n\
    \t\n\tfor(var i=0; i<numbers.length; i++){\n\t\tfound = false;\n\t\tfor(var j=0;\
    \ j<result.length; j++){\n\t\t\t\n\t\t\tif(result[j] > numbers[i]){\n\t\t\t\t\n\
    \t\t\t\tfound = true;\n\t\t\t\tmax = result[j];\n\t\t\t\tcurrent = numbers[i];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(!found){\n\t\t\tresult.push(current);\n\
    \t\t\tmax = current;\n\t\t}\n\t}\n\t\n\tconsole.log(result);\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpddw6dx34.js:40:10)\n    at Object.<anonymous> (/tmp/tmpddw6dx34.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[]

    [ 0, 0, 0, 0 ]

    '
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var result = [];\n\n  for (var i = 0; i < numbers.length; i++) {\n    if (result[i]\
    \ === undefined || result[i] < numbers[i]) {\n      result[i] = numbers[i];\n\
    \    }\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<|\
    \ c |>\nThis will not give the correct result when the array contains duplicates,\
    \ e.g. `rolling_max([1, 2, 2, 2, 2, 3])` returns `[1,2,2,3]` instead of `[1,2,2,2]`.\n\
    <|/ c |>\n<| a |>\nHere's an example of what I believe is the simplest possible\
    \ implementation to meet the OP's specification:\n\n<code>\nconst rolling_max\
    \ = (numbers, m) => {\n  const rollingMax = [...Array( m ).keys()].map(\n    e\
    \ => numbers.reduce((maxSoFar, nextNumber) => {\n      return Math.max(maxSoFar,\
    \ nextNumber - e)\n    })\n  )\n\n  return rollingMax.filter((e, i) => e === rollingMax[i]).slice(0,\
    \ m)\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpaeejlnbq.js:15\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var max_found = [],\n        largest = numbers[0],\n        number_to_find;\n\
    \    for (var i = 1 ; i < numbers.length; i++){\n        if (numbers[i] > largest){\n\
    \            largest = numbers[i];\n        }\n    }\n    number_to_find = largest;\n\
    \    var number_found = numbers[0];\n    for(var i = 1 ; i < numbers.length; i++){\n\
    \        if (numbers[i] === number_to_find){\n            number_found = numbers[i];\n\
    \        }\n    }\n    for (var j = 1 ; j < max_found.length; j++){\n        if\
    \ (max_found[j] < number_found){\n            max_found[j] = number_found;\n \
    \       }\n    }\n    return max_found;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpx_zk2qz2.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx_zk2qz2.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var tmp = [];\n  var i = 0;\n  for(i = 0; i < numbers.length; i++){\n    if(numbers[i]\
    \ < numbers[i-1]){\n      tmp.push(numbers[i]);\n    }else{\n      if(tmp.length\
    \ > 0){\n        tmp.push(numbers[i-1]);\n      }\n    }\n  }\n  return tmp;\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpkxfqarua.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkxfqarua.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    //From a given array of integers, generate an array of rolling maximum element\
    \ found until given moment\n    // in the sequence.\n    let n = numbers.length;\n\
    \    let max_elements = [];\n    let curr_max_element;\n    for(let i = 1 ; i\
    \ < n ; i++){\n        curr_max_element = numbers[i - 1];\n        if(numbers[i]\
    \ > curr_max_element){\n            curr_max_element = numbers[i];\n        }\n\
    \        max_elements.push(curr_max_element);\n    }\n    return max_elements;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpdoy6t802.js:27:10)\n    at Object.<anonymous> (/tmp/tmpdoy6t802.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tif(numbers.length < 2){\n\t\treturn numbers;\n\t}\n\tvar max = numbers.shift();\n\
    \tvar max = Math.max.apply(Math, numbers);\n\tvar new_numbers = [max];\n\tvar\
    \ i;\n\tfor(i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] > max){\n\t\t\t\
    new_numbers.push(max);\n\t\t\tmax = numbers[i];\n\t\t}else{\n\t\t\tmax = Math.max.apply(Math,\
    \ new_numbers);\n\t\t}\n\t}\n\treturn new_numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp2rg1_qb9.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2rg1_qb9.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  return numbers.reduce(\n    function(result, item){\n      if(result.length){\n\
    \        if(item >= result[result.length-1]){\n          result.push(item);\n\
    \        }\n      }else{\n        result.push(item);\n      }\n      return result;\n\
    \    }, \n    []\n  );\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpbr9tx7wo.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbr9tx7wo.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var current_max = Math.max.apply(null, numbers),\n        rolling_max = Math.max.apply(null,\
    \ numbers.slice(0, numbers.indexOf(current_max)));\n    return rolling_max;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-Infinity\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpci6_uw02.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpci6_uw02.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -Infinity,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var max_val = [];\n  var rolling_max_val = [];\n  for(var i=0; i < numbers.length;\
    \ i++){\n    max_val.push(Math.max(max_val[i],numbers[i]));\n  }\n  for(var i=0;\
    \ i < numbers.length; i++){\n    rolling_max_val.push(max_val[i])\n  }\n  return\
    \ rolling_max_val;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n\
    \  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\
    \    at test (/tmp/tmphyb9v1es.js:24:10)\n    at Object.<anonymous> (/tmp/tmphyb9v1es.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN,\
    \ NaN, NaN ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var maxes = []\n    var maxe = 0\n    var num\n    for(var i = 0; i<numbers.length;\
    \ i++){\n        if(numbers[i] > maxe){\n            num = numbers[i]\n      \
    \      maxes[i] = num\n            maxe = num\n        }else{\n            maxes[i]\
    \ = maxe\n            maxe = numbers[i]\n        }\n    }\n    return maxes\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  3,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpjtfei0so.js:29:10)\n    at Object.<anonymous> (/tmp/tmpjtfei0so.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 3,\
    \ 2 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var new_numbers = [];\n  var i;\n  for(i=0;i<numbers.length;i++){\n    var\
    \ max_val = Math.max.apply(null, numbers);\n    if(max_val>new_numbers[i]){\n\
    \      new_numbers[i] = max_val;\n    }\n  }\n  return new_numbers;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpgek8id0q.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgek8id0q.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var result = [];\n  var i = 0;\n  var length = numbers.length;\n  var maximum;\n\
    \  var currentMaximum;\n  while (i<length){\n    currentMaximum = numbers[i];\n\
    \    result.push(currentMaximum);\n    if (numbers[i+1] != null){\n      if((currentMaximum>numbers[i+1])){\n\
    \        maximum = currentMaximum;\n      }\n    }\n    i++;\n  }\n  return result;\n\
    };\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpzi38u2y6.js:31:10)\n    at Object.<anonymous> (/tmp/tmpzi38u2y6.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var result = [], max = Math.max.apply(Math, numbers);\n  for(var i=0, len =\
    \ numbers.length; i < len; i++){\n    result.push(max < numbers[i] ? max : numbers[i]);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmppuu4sq17.js:20:10)\n    at Object.<anonymous> (/tmp/tmppuu4sq17.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var result = new Array(numbers.length);\n  for (var i = 0; i < numbers.length;\
    \ i++) {\n    for (var j = 0; j < numbers.length; j++) {\n      if (numbers[i]\
    \ > numbers[j]) {\n        result[j] = numbers[j];\n      }\n    }\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  <1 empty item>\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n\
    \  4\n]\n    at test (/tmp/tmpeyxncrqw.js:23:10)\n    at Object.<anonymous> (/tmp/tmpeyxncrqw.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ <1 empty item> ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar result = [];\n\tvar index = 0;\n\t\n\tfor(var i = numbers.length - 1; i\
    \ >= 0; i--){\n\t\tif(numbers[i] > numbers[index]){\n\t\t\tresult.push(numbers[index]);\n\
    \t\t\tindex = i;\n\t\t}\n\t}\n\t\n\treturn result;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmplhpzqnl2.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmplhpzqnl2.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var max = 0;\n    for(var i = 0; i < numbers.length; i++){\n        if(max\
    \ < numbers[i]){\n            max = numbers[i];\n        }\n    }\n    return\
    \ max;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[]\n    at test (/tmp/tmpfthe7sz4.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfthe7sz4.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tlet rolling_max = []\n\tfor (let i = 0; i < numbers.length; i++){\n\t\trolling_max.push(Math.max(...rolling_max))\n\
    \t}\n\t\n\treturn rolling_max\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -Infinity,\n\
    \  -Infinity,\n  -Infinity,\n  -Infinity\n]\n\nshould loosely deep-equal\n\n[\n\
    \  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpdg36hif5.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdg36hif5.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -Infinity,\
    \ -Infinity, -Infinity, -Infinity ],\n  expected: [ 1, 2, 3, 4 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 0
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var array = [];\n    var currentElement = 0;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > currentElement){\n            currentElement\
    \ = numbers[i];\n        }\n        array.push(currentElement);\n    }\n    return\
    \ array;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar max = -Infinity;\n\tfor (var i = 0; i < numbers.length; i++){\n\t\tmax =\
    \ Math.max(max, numbers[i]);\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-Infinity\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp_x2r21pq.js:18:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp_x2r21pq.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -Infinity,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  if(numbers.length <= 1) return numbers;\n  var max_value = numbers[0];\n  var\
    \ max_index = numbers.length-1;\n  for (var i = 1; i < numbers.length; i++){\n\
    \    if (numbers[i] > max_value){\n      max_value = numbers[i];\n      max_index\
    \ = i;\n    }\n  }\n  var newArray = numbers.slice(0,max_index+1);\n  newArray.push(max_value);\n\
    \  return newArray;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n\
    ]\n    at test (/tmp/tmpv5m80ubs.js:26:10)\n    at Object.<anonymous> (/tmp/tmpv5m80ubs.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var max = numbers[0];\n  for(var i=1; i<numbers.length; i++){\n    if(max <\
    \ numbers[i]){\n      max = numbers[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp3j53wry1.js:20:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp3j53wry1.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    if (numbers.length < 1) return [];\n    return numbers.reduce(function (a,\
    \ e, i, arr) {\n        return (i > arr.length || arr[i-1] > e) ? a : [arr[i-1],\
    \ e].concat(a);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  4,\n\
    \  2,\n  3,\n  1,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n    at test (/tmp/tmp8fueth4g.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8fueth4g.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    3,\
    \ 4, 2, 3,\n    1, 2, 1\n  ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar max_i = Math.max.apply(Math, numbers);\n\tvar rolling = [];\n\tfor(var i=0;\
    \ i < numbers.length; i++){\n\t\tvar j = numbers.indexOf(max_i, i);\n\t\tif(j\
    \ >= 0){\n\t\t\trolling.push(max_i);\n\t\t\tnumbers.splice(j, 1);\n\t\t}\n\t}\n\
    \treturn rolling;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpgniaqb28.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgniaqb28.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  if ( numbers.length < 1 ){\n    throw new Error('array is empty');\n  }\n \
    \ if ( numbers.length === 1 ){\n    return numbers;\n  }\n  var rolling_max =\
    \ [];\n  var max = Math.max.apply(null, numbers);\n  rolling_max.push(max);\n\
    \  for ( var i = 1 ; i < numbers.length ; i++ ){\n    if ( numbers[i] > max ){\n\
    \      max = numbers[i];\n    }\n    rolling_max.push(max);\n  }\n  return rolling_max;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpl6jqlhkz.js:7\n    throw new Error('array is empty');\n    ^\n\n\
    Error: array is empty\n    at rolling_max (/tmp/tmpl6jqlhkz.js:7:11)\n    at test\
    \ (/tmp/tmpl6jqlhkz.js:29:20)\n    at Object.<anonymous> (/tmp/tmpl6jqlhkz.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    numbers = _.map(numbers, function(n){ return n*1; });\n    return _.max(numbers);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpeq8isyjq.js:6\n    numbers = _.map(numbers, function(n){ return\
    \ n*1; });\n    ^\n\nReferenceError: _ is not defined\n    at rolling_max (/tmp/tmpeq8isyjq.js:6:5)\n\
    \    at test (/tmp/tmpeq8isyjq.js:15:20)\n    at Object.<anonymous> (/tmp/tmpeq8isyjq.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var max = Math.max.apply(null, numbers);\n  var result = [];\n  for(var i =\
    \ 0; i < numbers.length; i++){\n    result.push(numbers[i]);\n    if(numbers[i]\
    \ > max){\n      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp0mpny_ye.js:25:10)\n    at Object.<anonymous> (/tmp/tmp0mpny_ye.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var maxNumbers = numbers.slice(0)\n  var rollingMax = []\n\n  for (var i =\
    \ 1; i < maxNumbers.length; i++){\n    rollingMax.push(maxNumbers[i - 1]+maxNumbers[i])\n\
    \  }\n  return rollingMax\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  5,\n\
    \  7\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpc9otyt6i.js:21:10)\n    at Object.<anonymous> (/tmp/tmpc9otyt6i.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 5, 7\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  return rolling_max_with_window(numbers, 1)\n}\nrolling_max._move = function(\
    \ window, current ){\n  return Math.max(current, window)\n}\nrolling_max._current\
    \ = function( window ){\n  return window[ window.length - 1 ]\n}\nrolling_max._pad_end\
    \ = function(){\n  var current = this._current( window )\n  var next = Math.max(\
    \ current, this._move(window, current) )\n  for( var i = 0; i < this._window +\
    \ 1; i++ ){\n    window[i] = Math.max( current, window[i] )\n  }\n  window[this._window]\
    \ = next\n  return next\n}\nrolling_max._pad_start = function(){\n  var current\
    \ = this._current( window )\n  var next = Math.min( current, this._move(window,\
    \ current) )\n  for( var i = 1; i < this._window + 1; i++ ){\n    window[i] =\
    \ Math.min( current, window[i] )\n  }\n  window[0] = next\n  return next\n}\n\
    rolling_max._window = 1000\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpghb4wfco.js:6\n  return rolling_max_with_window(numbers, 1)\n \
    \ ^\n\nReferenceError: rolling_max_with_window is not defined\n    at rolling_max\
    \ (/tmp/tmpghb4wfco.js:6:3)\n    at test (/tmp/tmpghb4wfco.js:39:20)\n    at Object.<anonymous>\
    \ (/tmp/tmpghb4wfco.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var result = [];\n  for(var i = 0; i < numbers.length; i++){\n    var rolling_max_element\
    \ = max_element_in_sequence(numbers, i);\n    result.push(rolling_max_element);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmphowt3gfy.js:8\n    var rolling_max_element = max_element_in_sequence(numbers,\
    \ i);\n                              ^\n\nReferenceError: max_element_in_sequence\
    \ is not defined\n    at rolling_max (/tmp/tmphowt3gfy.js:8:31)\n    at test (/tmp/tmphowt3gfy.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmphowt3gfy.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar newArray = [];\n\tnumbers.forEach(function(number){\n\t\tvar maxNumber =\
    \ newArray[newArray.length - 1];\n\t\tif(number > maxNumber){\n\t\t\tnewArray.push(number);\n\
    \t\t}\n\t});\n\treturn newArray;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp_mvekyky.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_mvekyky.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar max_index = 0\n\tvar max_value = numbers[0]\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar element = numbers[i]\n\t\tif(element > max_value){\n\t\t\tmax_index\
    \ = i\n\t\t\tmax_value = element\n\t\t}\n\t}\n\tvar rolling_max_array = new Array(max_index)\n\
    \tfor(var j = 0; j < max_index; j++){\n\t\trolling_max_array[j] = numbers[j]\n\
    \t}\n\treturn rolling_max_array\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpy6wy1qpm.js:27:10)\n    at Object.<anonymous> (/tmp/tmpy6wy1qpm.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var max = numbers[0];\n  var max_rolling_index = 1;\n  var max_rolling_indexes\
    \ = [max_rolling_index];\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i]\
    \ > max){\n      max = numbers[i];\n      max_rolling_index = i;\n    }\n  }\n\
    \  max_rolling_indexes.push(max_rolling_index);\n  return max_rolling_indexes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp285ghxvr.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp285ghxvr.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var rolling_max = numbers[0];\n  for (var i=1; i < numbers.length; i++){\n\
    \    rolling_max = Math.max(rolling_max, numbers[i]);\n  }\n  return rolling_max;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpeaobqoo7.js:17:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpeaobqoo7.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tlet max = []\n\tfor(let i=0;i<numbers.length;i++){\n\t\tlet max_element = numbers[i]\n\
    \t\tlet pos = -1\n\t\tfor(let j=0;j<numbers.length;j++){\n\t\t\tif(numbers[j]>max_element){\n\
    \t\t\t\tmax_element = numbers[j]\n\t\t\t\tpos = j\n\t\t\t}\n\t\t}\n\t\tif(i==0){\n\
    \t\t\tmax = max_element\n\t\t}\n\t\telse{\n\t\t\tif(pos<0){\n\t\t\t\tmax = max_element\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\tif(pos<i){\n\t\t\t\t\tmax = max_element\n\t\t\t\t\
    }\n\t\t\t\telse{\n\t\t\t\t\tmax = numbers[pos]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn max\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmprbs5y5ka.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmprbs5y5ka.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  return numbers.reduce(function(previous, current){\n    if (previous[previous.length\
    \ - 1] > (current - 1)) {\n      previous.push(current);\n    }\n    return previous;\n\
    \  }, [numbers[0]]);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp4p6j80he.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4p6j80he.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar max = 0;\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tmax = Math.max(max,\
    \ numbers[i]);\n\t}\n\treturn max;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[]\n    at test (/tmp/tmpo6fckje9.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpo6fckje9.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var result = [];\n    var max_val = numbers[0];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max_val){\n            max_val = numbers[i];\n\
    \            result.unshift(max_val);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpajrth807.js:23:10)\n    at Object.<anonymous> (/tmp/tmpajrth807.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var\n  rolling_max_list = new Array(), //will hold rolling max array\n  rolling_max_number\
    \ = 0, //Will hold rolling max number\n  rolling_max_count = 0 //Will hold rolling\
    \ max count\n  ;\n  for(var i = numbers.length-1; i >= 0; i--){\n    rolling_max_number\
    \ = numbers[i];\n    rolling_max_count = 1;\n    for(var j = i-1; j >= 0; j--){\n\
    \      if(numbers[j] >= rolling_max_number){\n        rolling_max_count++;\n \
    \     }else{\n        break;\n      }\n    }\n    rolling_max_list[rolling_max_count-1]\
    \ = rolling_max_number;\n  }\n  return rolling_max_list;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp3nak0h7h.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3nak0h7h.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar result = [];\n\t\n\tfor (var i = 0, len = numbers.length; i < len; i++){\n\
    \t\tresult.push(Math.max(numbers[i]));\n\t}\n\t\n\treturn result;\n}\n\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmptsfj5l8k.js:23:10)\n    at Object.<anonymous> (/tmp/tmptsfj5l8k.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var max_number = numbers[0];\n    var max_index = 0;\n    var count = 0;\n\
    \    for (var i = 1; i < numbers.length; i++){\n        if (numbers[i] >= max_number){\n\
    \            max_index = i;\n            max_number = numbers[i];\n        }\n\
    \    }\n    var new_numbers = numbers.slice(0,max_index+1);\n    var new_max_number\
    \ = max_number;\n    var new_max_index = max_index;\n    var new_max_times = 1;\n\
    \    for (var i = max_index + 1; i < numbers.length; i++){\n        if (numbers[i]\
    \ > max_number){\n            new_max_number = numbers[i];\n            new_max_index\
    \ = i;\n            new_max_times = new_max_times + 1;\n        }\n    }\n   \
    \ return [new_max_number,new_max_index,new_max_times]\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  0,\n  1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmppbggbvkp.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmppbggbvkp.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 0, 1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar rollingMax = [];\n\tvar highest = 0;\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] > highest){\n\t\t\trollingMax = [];\n\t\t\trollingMax.push(numbers[i]);\n\
    \t\t\thighest = numbers[i];\n\t\t}else{\n\t\t\trollingMax.push(numbers[i]);\n\t\
    \t}\n\t}\n\treturn rollingMax;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpe5hr6b0v.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe5hr6b0v.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar maxIndex = numbers.length - 1;\n\tvar maxValue = numbers[maxIndex];\n\t\
    for (var i = 0; i <= maxIndex; i++) {\n\t\tvar candidate = numbers[i];\n\t\tvar\
    \ candidateIsMax = true;\n\t\tfor (var j = maxIndex - 1; j >= i; j--) {\n\t\t\t\
    if (candidate > numbers[j]) {\n\t\t\t\tcandidateIsMax = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (candidateIsMax) {\n\t\t\tmaxValue = candidate;\n\t\t\t\
    maxIndex = i;\n\t\t}\n\t}\n\treturn [maxIndex, maxValue];\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmplty8begj.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmplty8begj.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1, undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    if(numbers.length == 0) return [];\n    var min = numbers.shift();\n    var\
    \ max = numbers.pop();\n    var result = [];\n    while(numbers.length > 0){\n\
    \        if(numbers[0] > max){\n            numbers.shift();\n            max\
    \ = numbers.pop();\n        }\n        else if(numbers[0] < min){\n          \
    \  numbers.shift();\n            min = numbers.pop();\n        }\n        else{\n\
    \            result.push(numbers[0]);\n            numbers.shift();\n        }\n\
    \    }\n    result.push(min);\n    result.push(max);\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  1,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpcie_c8vt.js:35:10)\n    at Object.<anonymous> (/tmp/tmpcie_c8vt.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 1,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var rollingMaxIndexes = [];\n  var rollingMaxValues = [];\n  var maxIndexes\
    \ = [];\n  var maxValues = [];\n  var currentIndex = -1;\n  var maxIndex = -1;\n\
    \  var lastMaxIndex = -1;\n  var maxValue = Number.MIN_VALUE;\n  var lastMaxValue\
    \ = Number.MIN_VALUE;\n  for(var i in numbers){\n    if(numbers.hasOwnProperty(i)){\n\
    \      currentIndex++;\n      if(maxValues[currentIndex] === Number.MIN_VALUE){\n\
    \        maxValues[currentIndex] = numbers[i];\n        maxIndexes[currentIndex]\
    \ = maxIndexes.length - 1;\n      }\n      else{\n        if(numbers[i] > maxValues[currentIndex]){\n\
    \          maxValues[currentIndex] = numbers[i];\n          maxIndexes[currentIndex]\
    \ = maxIndexes.length - 1;\n        }\n      }\n      if(currentIndex === maxIndexes[maxIndex]){\n\
    \        rollingMaxIndexes.push(currentIndex);\n        rollingMaxValues.push(numbers[currentIndex]);\n\
    \        maxIndex++;\n        lastMaxIndex = maxIndex;\n      }\n    }\n  }\n\
    \  for(var i = 0; i <= maxIndex; i++){\n    if(maxIndexes[i] > lastMaxIndex){\n\
    \      maxValues.push(rollingMaxValues[maxIndexes[i] - 1]);\n      maxIndexes.push(i);\n\
    \      rollingMaxIndexes.push(i);\n    }\n  }\n  return maxValues;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp5aph98tb.js:52:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5aph98tb.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tlet arr = [];\n\tfor(let i = 0; i < numbers.length; i++){\n\t\tlet min = numbers[0];\n\
    \t\tfor(let j = 0; j < numbers.length; j++){\n\t\t\tif(numbers[j] < min){\n\t\t\
    \t\tmin = numbers[j];\n\t\t\t}\n\t\t}\n\t\tarr.push(min);\n\t}\n\treturn arr;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpiwlp81tc.js:24:10)\n    at Object.<anonymous> (/tmp/tmpiwlp81tc.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 1,\
    \ 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var _this = this;\n    var rolling_max = [];\n    var rolling_max_index =\
    \ 0;\n    var sum = 0;\n    var max;\n    var i;\n\n    for(i = 0; i < numbers.length;\
    \ i++){\n        rolling_max_index = i;\n        max = numbers[i];\n        for(;\
    \ i < numbers.length; i++){\n            sum += numbers[i];\n            if(sum\
    \ > max){\n                max = sum;\n                rolling_max_index = i;\n\
    \            }\n        }\n        rolling_max[rolling_max_index] = max;\n   \
    \ }\n    return rolling_max;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <3 empty\
    \ items>,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n\
    ]\n    at test (/tmp/tmp3woj3b69.js:34:10)\n    at Object.<anonymous> (/tmp/tmp3woj3b69.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <3 empty\
    \ items>, 10 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar maxs = d3.max(numbers, function(d){\n\t\treturn d;\n\t});\n\t\n\tvar result\
    \ = [];\n\tvar rollingMax = numbers[numbers.length-1];\n\t\n\tvar i;\n\tfor(i=numbers.length-1;i>=0;i--){\n\
    \t\tif((maxs <= rollingMax)&&(!isNaN(maxs))){\n\t\t\tresult.push(maxs);\n\t\t\t\
    rollingMax = maxs;\n\t\t}else{\n\t\t\trollingMax = numbers[i];\n\t\t}\n\t}\n\t\
    \n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpk_6eicbo.js:6\n\tvar maxs = d3.max(numbers, function(d){\n\t  \
    \         ^\n\nReferenceError: d3 is not defined\n    at rolling_max (/tmp/tmpk_6eicbo.js:6:13)\n\
    \    at test (/tmp/tmpk_6eicbo.js:31:20)\n    at Object.<anonymous> (/tmp/tmpk_6eicbo.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  let max = numbers.reduce((a,b)=>Math.max(a,b),0);\n  let max_indexes = numbers.map((e,i)=>e>max?i:null).filter(e=>e!==null);\n\
    \  let result = [];\n  numbers.forEach(e=>{\n    if(max_indexes.indexOf(e)!==-1)\
    \ result.push(e);\n  });\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp35ywym6r.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp35ywym6r.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar max = -Number.MAX_VALUE;\n\tvar result = [];\n\tfor(var i=0; i<numbers.length;\
    \ i++){\n\t\tresult.push(Math.max.apply(null, numbers.slice(0,i+1)));\n\t\tmax\
    \ = Math.max(max, numbers[i]);\n\t}\n\tresult.push(max);\n\treturn result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1.7976931348623157e+308\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmprjzcsjjl.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmprjzcsjjl.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1.7976931348623157e+308\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar result=[];\n\tvar temp=0;\n\tvar tempMax=0;\n\tfor(var i in numbers){\n\t\
    \ttempMax=Math.max(numbers[i], tempMax);\n\t}\n\tresult.push(tempMax);\n\t\n\t\
    for(var i in numbers){\n\t\ttemp=Math.max(numbers[i], temp);\n\t\tresult.push(temp);\n\
    \t\ttempMax=0;\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpjqlpl7jk.js:27:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpjqlpl7jk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var r = [];\n    var max = 0;\n    for (var i = 0; i < numbers.length; i++){\n\
    \        if (numbers[i] > max){\n            max = numbers[i];\n        }\n  \
    \  }\n    for (var i = 0; i < numbers.length; i++){\n        if (numbers[i] ===\
    \ max){\n            r.push(max);\n        } else if (numbers[i] < max){\n   \
    \         r.push(numbers[i]);\n        }\n    }\n    return r;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp3td6oxpm.js:29:10)\n    at Object.<anonymous> (/tmp/tmp3td6oxpm.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tnumbers = numbers.slice();\n\tnumbers.forEach(function(item){\n\t\tvar max_item\
    \ = Math.max.apply(null, numbers);\n\t\tnumbers.push(max_item);\n\t});\n\treturn\
    \ numbers;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  4,\n  4,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  2,\n  3,\n  4\n]\n    at test (/tmp/tmp6z6_0t1q.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6z6_0t1q.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 3, 4,\n    4, 4, 4, 4\n  ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var ret = [];\n  var length = numbers.length;\n  var sum = 0;\n  for(var i\
    \ = 0; i < length; i++){\n    sum += numbers[i];\n    ret.push(sum);\n  }\n  return\
    \ ret;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  6,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n \
    \   at test (/tmp/tmpkmbbvfra.js:21:10)\n    at Object.<anonymous> (/tmp/tmpkmbbvfra.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 6,\
    \ 10 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tlet index = 1\n\tlet max_number = numbers[0]\n\twhile (index < numbers.length){\n\
    \t\tif (numbers[index] < max_number){\n\t\t\tmax_number = numbers[index]\n\t\t\
    }\n\t\tindex++\n\t}\n\treturn max_number\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpndc7fdss.js:23:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpndc7fdss.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar m = Math.max.apply(null, numbers);\n\tvar result = [];\n\tnumbers.forEach(function\
    \ (n, i) {\n\t\tif (n === m) {\n\t\t\tresult.push(numbers[i]);\n\t\t} else if\
    \ (numbers[i] > m) {\n\t\t\tresult.push(n);\n\t\t}\n\t});\n\treturn result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpzyb8c3bx.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzyb8c3bx.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    if(numbers.length === 0){\n        return numbers;\n    }\n    var max_of_first\
    \ = numbers.reduce(function(a, b){\n        return Math.max(a, b);\n    });\n\
    \    var max_of_rest = numbers.reduce(function(a, b){\n        return Math.max(a,\
    \ Math.max(max_of_first, Math.max(b)));\n    });\n    var final_array = [];\n\
    \    var current_index = 0;\n    var current_element = max_of_rest;\n    while(current_index\
    \ < numbers.length){\n        if(current_index === 0){\n            current_element\
    \ = numbers[0];\n        }else{\n            if(current_element > numbers[current_index]){\n\
    \                current_element = numbers[current_index];\n            }\n  \
    \      }\n        final_array[current_index] = current_element;\n        current_index++;\n\
    \    }\n    return final_array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpw83wr62u.js:38:10)\n    at Object.<anonymous> (/tmp/tmpw83wr62u.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 1,\
    \ 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  const n = numbers.length;\n  if(n === 0){\n    return 0;\n  }\n  const max\
    \ = Math.max.apply(Math, numbers);\n  const index = numbers.indexOf(max);\n  let\
    \ r = [];\n  if((index > 0) && (index < n-1)){\n    r = numbers.slice(0, index);\n\
    \    r = r.concat(rolling_max(numbers.slice(index)));\n  }\n  if(index === n-1){\n\
    \    r = r.concat(rolling_max(numbers.slice(index)));\n  }\n  return r;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[]\n    at test (/tmp/tmprztaqnsx.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprztaqnsx.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var results = [];\n  var rolling_max = numbers[0];\n  var rolling_max_num =\
    \ 0;\n  for(var i=1; i<numbers.length; i++){\n    if(numbers[i]>rolling_max){\n\
    \      rolling_max = numbers[i];\n      rolling_max_num = i;\n    }\n  }\n  results.splice(rolling_max_num,\
    \ 1, rolling_max);\n  return results;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp_di0r6lp.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_di0r6lp.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar max_element = [],\n\t\tmax_number = numbers[0],\n\t\tmin_number = numbers[0];\n\
    \n\tfor (var i=1; i<numbers.length; i++){\n\t\tif (numbers[i] >= max_number){\n\
    \t\t\tmax_element = max_element.concat(max_number);\n\t\t\tmax_number = numbers[i];\n\
    \t\t}\n\t\telse if (numbers[i] < min_number){\n\t\t\tmin_number = numbers[i];\n\
    \t\t}\n\t\telse{\n\t\t\tmax_element = max_element.concat(max_number, min_number);\n\
    \t\t\tmax_number = numbers[i];\n\t\t\tmin_number = numbers[i];\n\t\t}\n\t}\n\t\
    max_element = max_element.concat(max_number, min_number);\n\treturn max_element;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp9lp2axbu.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9lp2axbu.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var n = numbers.length\n        , max = numbers[0]\n        , result = [max]\n\
    \        , rolling\n        , i\n        ;\n    for(i = 1; i < n; i++){\n    \
    \    rolling = numbers.slice(i - 1, i + 1);\n        max = Math.max.apply(null,\
    \ rolling);\n        result.push(max);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpandx33t3.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpandx33t3.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var rolling_max_return = []; //To store the rolling max sequence\n    var\
    \ current_rolling_max = -1; //To store the current rolling max element\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        current_rolling_max = Math.max(current_rolling_max,\
    \ numbers[i]);\n        if(current_rolling_max == numbers[i]){\n            rolling_max_return.push(numbers[i]);\n\
    \        }else if(current_rolling_max > numbers[i]){\n            rolling_max_return.push(current_rolling_max);\n\
    \            current_rolling_max = numbers[i];\n        }\n    }\n    if(current_rolling_max\
    \ > numbers[numbers.length - 1]){\n        rolling_max_return.push(current_rolling_max);\n\
    \    }\n    return rolling_max_return;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  3,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpt2ylmvwn.js:31:10)\n    at Object.<anonymous> (/tmp/tmpt2ylmvwn.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 3,\
    \ 2 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar result = [];\n\tvar len = numbers.length;\n\n\tvar last;\n\tvar i;\n\tfor(i\
    \ = 0; i < len; i++){\n\t\tlast = result[result.length - 1];\n\t\tif(numbers[i]\
    \ > last)\n\t\t\tresult.push(numbers[i]);\n\t}\n\treturn result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpw6kc6ux0.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw6kc6ux0.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    let array = [];\n    let current_max = -Infinity;\n    let current_min =\
    \ 0;\n    numbers.forEach((el) => {\n        current_max = Math.max(el, current_max);\n\
    \        current_min = Math.min(el, current_min);\n    })\n    array.push(current_max);\n\
    \    array.push(current_min);\n    return array\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -Infinity,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp0y1gjrfx.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0y1gjrfx.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -Infinity,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var result = [];\n    numbers.forEach(function(number){\n        result.push(Math.max.apply(null,\
    \ number));\n    })\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmps61xvus6.js:8\n        result.push(Math.max.apply(null, number));\n\
    \                             ^\n\nTypeError: CreateListFromArrayLike called on\
    \ non-object\n    at /tmp/tmps61xvus6.js:8:30\n    at Array.forEach (<anonymous>)\n\
    \    at rolling_max (/tmp/tmps61xvus6.js:7:13)\n    at test (/tmp/tmps61xvus6.js:19:20)\n\
    \    at Object.<anonymous> (/tmp/tmps61xvus6.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tnumbers = numbers.slice();\n\tlet max_rolling = 0;\n\tlet curr_max = numbers[0];\n\
    \tfor(let i = 1; i < numbers.length; i++){\n\t\tlet curr_val = numbers[i];\n\t\
    \tif(curr_val > curr_max){\n\t\t\tcurr_max = curr_val;\n\t\t}\n\t}\n\tfor(let\
    \ i = 1; i < numbers.length; i++){\n\t\tlet curr_val = numbers[i];\n\t\tif(curr_val\
    \ < curr_max){\n\t\t\tlet current_maxs = numbers[i - 1];\n\t\t\tlet new_max_rolling\
    \ = curr_val + current_maxs;\n\t\t\tmax_rolling = new_max_rolling > max_rolling\
    \ ? new_max_rolling : max_rolling;\n\t\t}\n\t}\n\treturn max_rolling;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[]\n    at test (/tmp/tmpw37kjt66.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpw37kjt66.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var result = [];\n  for (var i = 0; i < numbers.length; i++) {\n    if (numbers.length\
    \ - i === 0){\n      result.push(numbers[i]);\n    } else {\n      result.push(Math.max(numbers[i],\
    \ numbers[i + 1]));\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\
    \    at test (/tmp/tmpnyzgqorg.js:23:10)\n    at Object.<anonymous> (/tmp/tmpnyzgqorg.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4,\
    \ NaN ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var new_array = [];\n    for(var i = 0; i<numbers.length; i++){\n       \
    \ var current = numbers[i];\n        new_array.push(Math.max(numbers[i - 1], current));\n\
    \    }\n    return new_array;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpz0v4y1ak.js:20:10)\n    at Object.<anonymous> (/tmp/tmpz0v4y1ak.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var result = [];\n  var max;\n  var rolling_max = numbers;\n  while (rolling_max.length\
    \ > 0){\n    max = rolling_max.pop();\n    result.push(max);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmp9g8o1ki7.js:22:10)\n    at Object.<anonymous> (/tmp/tmp9g8o1ki7.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar max_number = 0;\n\tfor(var index = 0; index < numbers.length; index++){\n\
    \t\tif(max_number < numbers[index]){\n\t\t\tmax_number = numbers[index];\n\t\t\
    }\n\t}\n\treturn max_number;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[]\n    at test (/tmp/tmpewtkcdzj.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpewtkcdzj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar maxes = [], i;\n\n\tfor (i in numbers)\n\t\tif (numbers.hasOwnProperty(i)){\n\
    \t\t\tmaxes.push(Math.max.apply(null, numbers));\n\t\t\tdelete numbers[i];\n\t\
    \t}\n\n\tmaxes.sort(function(a, b){\n\t\treturn b - a;\n\t});\n\n\treturn numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <4 empty\
    \ items>\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at\
    \ test (/tmp/tmpvw24gs8p.js:27:10)\n    at Object.<anonymous> (/tmp/tmpvw24gs8p.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <4 empty\
    \ items> ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var rollingMax = []\n  var rollingMaxNumber = numbers[0]\n  var rollingMaxIndex\
    \ = -1\n  var i = 0\n  var n = numbers.length\n  \n  for(; i < n; i++){\n    if\
    \ (numbers[i] < rollingMaxNumber) {\n      rollingMaxNumber = numbers[i]\n   \
    \   rollingMaxIndex = i\n    }\n  }\n  \n  rollingMax.push(rollingMaxNumber)\n\
    \  rollingMax.push(rollingMaxIndex)\n  return rollingMax\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpeju301n_.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpeju301n_.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var i, \n        rollingmax = [];\n\n    if(!_.isArray(numbers)) throw new\
    \ Error(\"rolling_max: numbers should be an array\");\n\n    //Find maximum element\
    \ in first place\n    rollingmax = rollingmax[0];\n    for (i = 0; i < numbers.length;\
    \ i++){\n        if(rollingmax[0] > numbers[i]) rollingmax = rollingmax;\n   \
    \     rollingmax.push(numbers[i]);\n    }\n\n    return rollingmax;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: ReferenceError
  stderr: "/tmp/tmpz26yiia_.js:9\n    if(!_.isArray(numbers)) throw new Error(\"rolling_max:\
    \ numbers should be an array\");\n    ^\n\nReferenceError: _ is not defined\n\
    \    at rolling_max (/tmp/tmpz26yiia_.js:9:5)\n    at test (/tmp/tmpz26yiia_.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpz26yiia_.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var max_rolling = 0;\n    var rollings = [];\n    var prev_rolling = numbers[0];\n\
    \    for (var i=0;i<numbers.length;i++){\n        if (numbers[i] > prev_rolling){\n\
    \            rollings.push(prev_rolling);\n        }\n        rollings.push(numbers[i]);\n\
    \        prev_rolling = numbers[i];\n    }\n    max_rolling = Math.max.apply(null,\
    \ rollings);\n    return max_rolling;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-Infinity\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp8h_qx_00.js:25:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp8h_qx_00.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -Infinity,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var result = [];\n    \n    if(numbers == null || numbers.length == 0)\n\
    \        return result;\n\n    var i;\n    for(i = 0; i < numbers.length; i++){\n\
    \        var currentNumber = numbers[i];\n\n        //If current number is less\
    \ than the result array number\n        if(currentNumber < result[0]){\n     \
    \       //Set the first result to currentNumber\n            result[0] = currentNumber;\n\
    \            //Search the whole result array\n            for(var j = 0; j < result.length;\
    \ j++)\n                //Check if the currentNumber is greater than the result[j]\n\
    \                if(currentNumber > result[j]){\n                    //If it is\
    \ greater than the result[j], replace the result[j] with currentNumber\n     \
    \               result[j] = currentNumber;\n                    break;\n     \
    \           }\n        }\n    }\n    \n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpnl9zgnc0.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnl9zgnc0.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar max = numbers[0];\n\tvar max_num = 1;\n\tvar i, j, k;\n\n\tfor(i=0; i<numbers.length-1;\
    \ i++){\n\t\tfor(j=0; j<numbers.length-i; j++){\n\t\t\tif((j+i+1)>(numbers.length-i)){\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\tmax = Math.max(max, numbers[j+i]);\n\t\t}\n\t\t\
    max_num = Math.max(max_num, numbers.length-i);\n\t}\n\treturn max;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpvn1ykt59.js:26:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpvn1ykt59.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var result = [];\n  var max = -Infinity;\n  for (var i = 0; i < numbers.length;\
    \ i++){\n    if (numbers[i] > max){\n      max = numbers[i];\n    }\n  }\n  \n\
    \  for (var i = 0; i < numbers.length; i++){\n    if (numbers[i] >= max){\n  \
    \    result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp22ic4l5v.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp22ic4l5v.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var maxVal = numbers[0],\n        len = numbers.length,\n        arr = [];\n\
    \    for(var i=0; i < len; i++){\n        if(maxVal < numbers[i]){\n         \
    \   maxVal = numbers[i];\n        }\n    }\n    for(var i=0; i < len; i++){\n\
    \        arr.push(maxVal);\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpyb5h_y45.js:26:10)\n    at Object.<anonymous> (/tmp/tmpyb5h_y45.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var result = [],\n        i, l;\n\n    for (i = 0, l = numbers.length; i\
    \ < l; ++i) {\n        result.push(rolling_max(numbers.slice(0, i).concat(numbers.slice(i\
    \ + 1, l + 1))))\n    }\n\n    for (i = 0, l = numbers.length; i < l; ++i) {\n\
    \        if (numbers[i] > result[i-1])\n            result[i] = numbers[i]\n \
    \   }\n\n    return result\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    [\n\
    \      [\n        []\n      ],\n      4\n    ],\n    [\n      [\n        []\n\
    \      ],\n      4\n    ],\n    [\n      [\n        []\n      ],\n      3\n  \
    \  ]\n  ],\n  [\n    [\n      [\n        []\n      ],\n      4\n    ],\n    [\n\
    \      [\n        []\n      ],\n      4\n    ],\n    [\n      [\n        []\n\
    \      ],\n      3\n    ]\n  ],\n  [\n    [\n      [\n        []\n      ],\n \
    \     4\n    ],\n    [\n      [\n        []\n      ],\n      4\n    ],\n    [\n\
    \      [\n        []\n      ],\n      2\n    ]\n  ],\n  [\n    [\n      [\n  \
    \      []\n      ],\n    ...\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n \
    \ 3,\n  4\n]\n    at test (/tmp/tmp5d6r9n0h.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5d6r9n0h.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ [\
    \ [ [] ], 4 ], [ [ [] ], 4 ], [ [ [] ], 3 ] ],\n    [ [ [ [] ], 4 ], [ [ [] ],\
    \ 4 ], [ [ [] ], 3 ] ],\n    [ [ [ [] ], 4 ], [ [ [] ], 4 ], [ [ [] ], 2 ] ],\n\
    \    [ [ [ [] ], 3 ], [ [ [] ], 3 ], [ [ [] ], 2 ] ]\n  ],\n  expected: [ 1, 2,\
    \ 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var max_value = numbers.reduce(function(a, b){\n        return Math.max(a,\
    \ b);\n    });\n    return numbers.filter(function(x){ return x==max_value; });\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq5l8r1d4.js:6\n    var max_value = numbers.reduce(function(a, b){\n\
    \                            ^\n\nTypeError: Reduce of empty array with no initial\
    \ value\n    at Array.reduce (<anonymous>)\n    at rolling_max (/tmp/tmpq5l8r1d4.js:6:29)\n\
    \    at test (/tmp/tmpq5l8r1d4.js:16:20)\n    at Object.<anonymous> (/tmp/tmpq5l8r1d4.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977797
- exit_code: -1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar i = numbers.length - 1, max = numbers[i];\n\twhile(i !== 0){\n\t\ti--;\n\
    \t\tif(numbers[i] > max)\n\t\t\tmax = numbers[i];\n\t}\n\treturn max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977802
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar result = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar number\
    \ = numbers[i];\n\t\tresult.push(rolling_max(numbers.slice(0, i)) > number ? number\
    \ : rolling_max(numbers.slice(i + 1, numbers.length)));\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    [\n\
    \      [\n        []\n      ],\n      []\n    ],\n    [\n      []\n    ],\n  \
    \  []\n  ],\n  [\n    [\n      []\n    ],\n    []\n  ],\n  [\n    []\n  ],\n \
    \ []\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpvzb789b6.js:20:10)\n    at Object.<anonymous> (/tmp/tmpvzb789b6.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ [ [ []\
    \ ], [] ], [ [] ], [] ], [ [ [] ], [] ], [ [] ], [] ],\n  expected: [ 1, 2, 3,\
    \ 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    let max_element = numbers[0];\n    let max_index = 0;\n\n    for (let i =\
    \ 1; i < numbers.length; i++){\n        if (numbers[i] > max_element){\n     \
    \       max_element = numbers[i];\n            max_index = i;\n        }\n   \
    \ }\n\n    return numbers.slice(max_index + 1);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp9fabgsqv.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9fabgsqv.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  if(numbers.length === 0){\n    return [];\n  }\n  var max_element = numbers[0];\n\
    \  var max_index = 0;\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i]\
    \ > max_element){\n      max_element = numbers[i];\n      max_index = i;\n   \
    \ }\n  }\n  return numbers.slice(0, max_index + 1);\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmp06dcvn_u.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp06dcvn_u.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar result = [];\n\tfor(var i = 0; i < numbers.length; i++)\n\t\tresult.push(numbers[numbers.length-i-1]);\n\
    \treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpqu2qbi7q.js:18:10)\n    at Object.<anonymous> (/tmp/tmpqu2qbi7q.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var i, max, rolling_max, current, rolling_current_max, result = [];\n  rolling_current_max\
    \ = 0;\n  for (i = 0; i < numbers.length; i++){\n    current = numbers[i];\n \
    \   rolling_current_max = Math.max(current, rolling_current_max);\n  }\n  rolling_max\
    \ = rolling_current_max;\n  for (i = 1; i < numbers.length; i++){\n    current\
    \ = numbers[i];\n    rolling_max = Math.max(current, rolling_max);\n    result.push(rolling_max);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpy2l4y0ur.js:27:10)\n    at Object.<anonymous> (/tmp/tmpy2l4y0ur.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var ret = [];\n  var rolling_sum = 0;\n  var length = numbers.length;\n  var\
    \ current_max;\n  var current_max_idx;\n  \n  //Initialize sum to 0\n  for(var\
    \ i=0; i < length; i++) {\n    rolling_sum += numbers[i];\n  }\n\n  //Initialize\
    \ current max and current max index\n  current_max = 0;\n  current_max_idx = -1;\n\
    \n  //Scan from right to left\n  for(var i = length - 1; i >= 0; i--){\n    current_max\
    \ = numbers[i];\n    current_max_idx = i;\n    \n    //Keep rolling current max\
    \ until current sum is greater than rolling sum plus current max\n    //NOTE:\
    \ We don't need to check rolling sum == rolling sum + current_max, because\n \
    \   //current sum can't be more than rolling sum plus current max, which means\
    \ that \n    //rolling sum > rolling sum + current_max\n    while (current_sum\
    \ > rolling_sum + current_max){\n      rolling_sum += current_max;\n      ret.unshift(current_max);\n\
    \    }\n    \n    //Move to right index\n    rolling_sum -= current_max;\n  }\n\
    \  \n  return ret;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpzp3ns62y.js:30\n    while (current_sum > rolling_sum + current_max){\n\
    \                       ^\n\nReferenceError: current_sum is not defined\n    at\
    \ rolling_max (/tmp/tmpzp3ns62y.js:30:24)\n    at test (/tmp/tmpzp3ns62y.js:48:20)\n\
    \    at Object.<anonymous> (/tmp/tmpzp3ns62y.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    //Initialize array for result\n    var result = [];\n    //Find the first\
    \ element\n    var max = numbers[0];\n    //Find the first element in the subsequence\
    \ which has a lower value than the first\n    var index = 0;\n    //While the\
    \ index of the first element in the subsequence is less than the length of the\
    \ sequence\n    while(index < numbers.length){\n        //Find the first element\
    \ greater than the current element and lower than the given element in the sequence\n\
    \        //Update max with that value\n        max = Math.max(numbers[index],\
    \ max);\n        //Increment the index\n        index++;\n        //If the index\
    \ reaches the end of the sequence\n        if(index >= numbers.length){\n    \
    \        //Reset the index and repeat until it reaches the end of the sequence\n\
    \            index = 0;\n        }\n    }\n    //Add the result to array\n   \
    \ result.push(max);\n    //Return the result\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpjv649gqh.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjv649gqh.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  numbers = numbers.slice(0);\n  for(let i=numbers.length-1, total=0; i>=0; i--){\n\
    \    total += numbers[i];\n    if(total > numbers[i+1]) numbers[i] = numbers[i+1];\n\
    \  }\n  return numbers;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmphpfp9p1h.js:20:10)\n    at Object.<anonymous> (/tmp/tmphpfp9p1h.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var max_element = numbers[0];\n  var max_index = 0;\n  for(var i=1;i<numbers.length;i++){\n\
    \    if(numbers[i]>max_element){\n      max_element=numbers[i];\n      max_index=i;\n\
    \    }\n  }\n  return numbers.slice(max_index+1);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpasxfbw3h.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpasxfbw3h.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar res = [];\n\tvar i = numbers.length - 1;\n\twhile(i > 0){\n\t\tres[res.length]\
    \ = numbers[i];\n\t\ti--;\n\t}\n\treturn res;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpnxi813la.js:20:10)\n    at Object.<anonymous> (/tmp/tmpnxi813la.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var rolling_max_array = [];\n    for (var i=0;i<numbers.length;i++){\n  \
    \      rolling_max_array.push(Math.max(numbers[i]));\n    }\n    return rolling_max_array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpyx5at2e6.js:20:10)\n    at Object.<anonymous> (/tmp/tmpyx5at2e6.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var len = numbers.length;\n    var max = -Infinity;\n    for(var i = 0; i\
    \ < len; i++) {\n        if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-Infinity\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpte4ct6f5.js:20:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpte4ct6f5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -Infinity,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar rolling_max = numbers.reduce(function(a, b){\n\t\treturn Math.max(a, b);\n\
    \t});\n\treturn rolling_max;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpn59wnsyx.js:6\n\tvar rolling_max = numbers.reduce(function(a, b){\n\
    \t                          ^\n\nTypeError: Reduce of empty array with no initial\
    \ value\n    at Array.reduce (<anonymous>)\n    at rolling_max (/tmp/tmpn59wnsyx.js:6:28)\n\
    \    at test (/tmp/tmpn59wnsyx.js:17:20)\n    at Object.<anonymous> (/tmp/tmpn59wnsyx.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    return rolling_max_function(numbers, Math.max);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbidhe931.js:6\n    return rolling_max_function(numbers, Math.max);\n\
    \    ^\n\nReferenceError: rolling_max_function is not defined\n    at rolling_max\
    \ (/tmp/tmpbidhe931.js:6:5)\n    at test (/tmp/tmpbidhe931.js:13:20)\n    at Object.<anonymous>\
    \ (/tmp/tmpbidhe931.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar max_number = numbers[0];\n\tfor(var i = numbers.length - 1; i >= 0; i--){\n\
    \t\tif(numbers[i] > max_number){\n\t\t\tmax_number = numbers[i];\n\t\t}\n\t}\n\
    \treturn max_number;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp72aen67t.js:20:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp72aen67t.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  return rolling_max(numbers, 1)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp7x98q1cu.js:6\n  return rolling_max(numbers, 1)\n  ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at rolling_max (/tmp/tmp7x98q1cu.js:6:3)\n\
    \    at rolling_max (/tmp/tmp7x98q1cu.js:6:10)\n    at rolling_max (/tmp/tmp7x98q1cu.js:6:10)\n\
    \    at rolling_max (/tmp/tmp7x98q1cu.js:6:10)\n    at rolling_max (/tmp/tmp7x98q1cu.js:6:10)\n\
    \    at rolling_max (/tmp/tmp7x98q1cu.js:6:10)\n    at rolling_max (/tmp/tmp7x98q1cu.js:6:10)\n\
    \    at rolling_max (/tmp/tmp7x98q1cu.js:6:10)\n    at rolling_max (/tmp/tmp7x98q1cu.js:6:10)\n\
    \    at rolling_max (/tmp/tmp7x98q1cu.js:6:10)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    return rolling_max_by(numbers, 0);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpxbnyl068.js:6\n    return rolling_max_by(numbers, 0);\n    ^\n\n\
    ReferenceError: rolling_max_by is not defined\n    at rolling_max (/tmp/tmpxbnyl068.js:6:5)\n\
    \    at test (/tmp/tmpxbnyl068.js:13:20)\n    at Object.<anonymous> (/tmp/tmpxbnyl068.js:19:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  numbers = _.isArray(numbers) ? numbers : [numbers]\n  return _.reduce(numbers,\
    \ function(memo, num){ memo.push(Math.max.apply(Math, num)) }, [])\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: ReferenceError
  stderr: "/tmp/tmpsyo8f7o3.js:6\n  numbers = _.isArray(numbers) ? numbers : [numbers]\n\
    \  ^\n\nReferenceError: _ is not defined\n    at rolling_max (/tmp/tmpsyo8f7o3.js:6:3)\n\
    \    at test (/tmp/tmpsyo8f7o3.js:15:20)\n    at Object.<anonymous> (/tmp/tmpsyo8f7o3.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 0
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    if(numbers == null){\n        numbers = [];\n    }\n    var len = numbers.length;\n\
    \    var rollingMax = [];\n    var currentMax = numbers[0];\n    var i;\n    for(i\
    \ = 0; i < len; i++){\n        currentMax = Math.max(currentMax, numbers[i]);\n\
    \        rollingMax.push(currentMax);\n    }\n    return rollingMax;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var results = [];\n    var i, max, sum = 0;\n    for(i=0; i<numbers.length;\
    \ i++){\n        sum += numbers[i];\n        if(sum > max){\n            max =\
    \ sum;\n            results = [numbers[i]];\n        } else if(sum === max){\n\
    \            results.push(numbers[i]);\n        }\n    }\n    return results;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp6qfwddhs.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6qfwddhs.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var currentMax, currentMaxIndex, currentMaxSum = 0, rollingMaxSumArray = [];\n\
    \  for(var i = 0; i < numbers.length; i++){\n    currentMax = numbers[i];\n  \
    \  currentMaxIndex = 0;\n    for(var j = i; j < numbers.length; j++){\n      currentMaxSum\
    \ = numbers[j];\n      if(currentMaxSum >= currentMax){\n        rollingMaxSumArray.push(currentMaxSum);\n\
    \        currentMaxIndex = j;\n        break;\n      }\n    }\n    rollingMaxSumArray.push(currentMaxSum);\n\
    \    if(currentMaxIndex == numbers.length - 1){\n      rollingMaxSumArray = rollingMaxSumArray.concat(numbers.slice(i,\
    \ i+2));\n      break;\n    }\n  }\n  return rollingMaxSumArray;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2,\n  2,\n  3,\n  3,\n  4,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n\
    \  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmph0qv8_ud.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmph0qv8_ud.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 2, 2, 3,\n    3, 4, 4, 4\n  ],\n  expected: [ 1, 2, 3, 4 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var result = [];\n  var last = 0;\n  for(var i=0; i < numbers.length; i++){\n\
    \    if(numbers[i] > last){\n      result.push(numbers[i]);\n      last = numbers[i];\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmp_yk7tp28.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_yk7tp28.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \treturn numbers.reduce(function(a, b){\n\t\treturn Math.max(a, b);\n\t});\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp54o8r5og.js:6\n\treturn numbers.reduce(function(a, b){\n\t    \
    \           ^\n\nTypeError: Reduce of empty array with no initial value\n    at\
    \ Array.reduce (<anonymous>)\n    at rolling_max (/tmp/tmp54o8r5og.js:6:17)\n\
    \    at test (/tmp/tmp54o8r5og.js:16:20)\n    at Object.<anonymous> (/tmp/tmp54o8r5og.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    let max = [];\n    for(let n = 0; n < numbers.length; n++){\n        for(let\
    \ i = numbers.length - n - 1; i > 0; i--){\n            let new_number = numbers[i\
    \ - 1];\n            if(new_number > numbers[n]){\n                numbers[i -\
    \ 1]=numbers[n];\n                numbers[n] = new_number;\n                max\
    \ = [...max, numbers[n]];\n                break;\n            }\n        }\n\
    \    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpoyh9ixxb.js:27:10)\n    at Object.<anonymous> (/tmp/tmpoyh9ixxb.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 2\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar max_index=0;\n\tfor(var i=1;i<numbers.length;i++){\n\t\tif((numbers[i]>numbers[i-1])){\n\
    \t\t\tmax_index=i;\n\t\t}\n\t}\n\treturn numbers.slice(0,max_index+1);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpmfze0xz6.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmfze0xz6.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar rolling_maxes = []\n\tvar curr_max = numbers[0]\n\n\tfor (var i = 0; i <\
    \ numbers.length; i++){\n\t\tif(curr_max < numbers[i]){\n\t\t\trolling_maxes =\
    \ [curr_max, numbers[i]]\n\t\t}else if(curr_max == numbers[i]){\n\t\t\trolling_maxes\
    \ = [curr_max, rolling_maxes[0]]\n\t\t}else{\n\t\t\trolling_maxes.push(curr_max)\n\
    \t\t}\n\n\t\tcurr_max = numbers[i]\n\t}\n\n\treturn rolling_maxes\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp5u4ugob8.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5u4ugob8.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 4 ],\n\
    \  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar result = [];\n\tvar windowSize = numbers.length;\n\tvar windowSum = 0;\n\
    \n\tfor (var i = 0; i < numbers.length; i++)\n\t{\n\t\twindowSum += numbers[i];\n\
    \t\tif(windowSum > windowSize){\n\t\t\tresult.push(windowSize);\n\t\t\twindowSize\
    \ = numbers[i];\n\t\t} else {\n\t\t\twindowSum -= numbers[i];\n\t\t\twindowSize--;\n\
    \t\t}\n\t}\n\tresult.push(windowSize);\n\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp9xslfrg_.js:31:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp9xslfrg_.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar i, j, max = 0;\n\n\tfor(i = 0; i < numbers.length; i++){\n\t\tfor(j = i\
    \ - 1; j >= 0; j--){\n\t\t\tif((numbers[i] < numbers[j]) && (numbers[j] > max)){\n\
    \t\t\t\tmax = numbers[j];\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[]\n    at test (/tmp/tmpt7dvl5xx.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpt7dvl5xx.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar max = 0;\n\tfor(var i=0;i<numbers.length;i++){\n\t\tvar current = numbers[i];\n\
    \t\tvar found = false;\n\t\tfor(var j=0;j<i;j++){\n\t\t\tif(numbers[j] > current){\n\
    \t\t\t\tcurrent = numbers[j];\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\tif(!found){\n\
    \t\t\tmax = current;\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[]\n    at test (/tmp/tmpc80t5_i8.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpc80t5_i8.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar rolling_max = [];\n\tfor (var i=0; i<numbers.length; i++) {\n\t\trolling_max.push(Math.max.apply(null,\
    \ numbers));\n\t}\n\treturn rolling_max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmp_oqnxjgj.js:19:10)\n    at Object.<anonymous> (/tmp/tmp_oqnxjgj.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var res = [],\n    pos = 0, //current position on the array\n    max = Number.MIN_VALUE,\n\
    \    i,\n    rollingMax;\n  for(i = 0; i < numbers.length; i++){\n    if(numbers[i]\
    \ >= max){\n      rollingMax = max;\n      max = numbers[i];\n    }else{\n   \
    \   rollingMax = numbers[i];\n    }\n    res.push(rollingMax);\n  }\n  return\
    \ res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5e-324,\n\
    \  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n\
    ]\n    at test (/tmp/tmpdm7bv9sl.js:29:10)\n    at Object.<anonymous> (/tmp/tmpdm7bv9sl.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5e-324,\
    \ 1, 2, 3 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \treturn numbers.reduce(function(max, val, index, arr){\n\t\tif(index > 0 && arr[index-1]\
    \ > val){\n\t\t\treturn val;\n\t\t}\n\t\treturn max;\n\t}, numbers[0]);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp5ou5icfs.js:19:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp5ou5icfs.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var maxes = [];\n    for(var i=0; i<numbers.length; i++){\n        maxes.push(Math.max.apply(null,\
    \ numbers));\n    }\n    return maxes;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmphswv9u30.js:19:10)\n    at Object.<anonymous> (/tmp/tmphswv9u30.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    if(numbers.length<=1){\n        return numbers;\n    }\n    var result=[];\n\
    \    var window=numbers[numbers.length-1];\n    var maximum=numbers[0];\n    var\
    \ i;\n    for(i=1;i<numbers.length;i++){\n        if(numbers[i]>maximum){\n  \
    \          window=numbers[i];\n            maximum=numbers[i];\n        }else\
    \ if(numbers[i]==window){\n            window+=numbers[i-1];\n        }else{\n\
    \            result.push(maximum);\n            window=numbers[i];\n         \
    \   maximum=numbers[i];\n        }\n    }\n    result.push(maximum);\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp64w6prdu.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp64w6prdu.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var max = Math.max.apply(null, numbers);\n    var numbers_copy = numbers.slice(0);\n\
    \    numbers_copy.splice(numbers.indexOf(max), 1);\n    \n    var max = Math.max.apply(null,\
    \ numbers_copy);\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-Infinity\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpg_pptlgz.js:19:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpg_pptlgz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -Infinity,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var result = [];\n  var len = numbers.length;\n\n  for (var i = 0; i < (len-1);\
    \ i++){\n    var min = i;\n    for (var j = i; j < len; j++){\n      if (numbers[j]\
    \ < numbers[min]){\n        min = j;\n      }\n    }\n    result.push(numbers[min]);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpga5pncsr.js:27:10)\n    at Object.<anonymous> (/tmp/tmpga5pncsr.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var max = numbers[0];\n  var rolling_max = [];\n  for(var i = 1;i < numbers.length;i++){\n\
    \    if(numbers[i] > max)\n      rolling_max = [max];\n    else\n      rolling_max\
    \ = [max, numbers[i]];\n  }\n  return rolling_max;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp7pjvvgh5.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7pjvvgh5.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var result = [];\n    var rollingMaxIndex = 0;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(rollingMaxIndex + 1 == numbers.length){\n            result.push(numbers[i]);\n\
    \        } else {\n            if(numbers[i] > numbers[rollingMaxIndex]){\n  \
    \              result.push(numbers[i]);\n                rollingMaxIndex++;\n\
    \            } else {\n                result.push(numbers[rollingMaxIndex]);\n\
    \                rollingMaxIndex++;\n                result.push(numbers[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2,\n  2,\n  3,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n    at test (/tmp/tmp0xoa3ads.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0xoa3ads.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 2, 2,\n    3, 3, 4\n  ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  let rolling_max = 0;\n  let last_rolling_max = rolling_max;\n  let current_rolling_max\
    \ = rolling_max;\n  numbers.forEach(n => {\n    current_rolling_max = rolling_max;\n\
    \    if(current_rolling_max < n){\n      current_rolling_max = n;\n      last_rolling_max\
    \ = current_rolling_max;\n    }\n  });\n  return last_rolling_max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[]\n    at test (/tmp/tmpqdsb9hru.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqdsb9hru.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var i=0, maxes=[];\n  \n  while(numbers.length){\n    if(numbers[i] > numbers[i+1])\
    \ maxes.push(numbers[i]); \n    else maxes.push(numbers[i+1]);\n    i++;\n  }\n\
    \  \n  return maxes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp6va188p9.js:10\n    else maxes.push(numbers[i+1]);\n          \
    \     ^\n\nRangeError: Invalid array length\n    at Array.push (<anonymous>)\n\
    \    at rolling_max (/tmp/tmp6va188p9.js:10:16)\n    at test (/tmp/tmp6va188p9.js:23:20)\n\
    \    at Object.<anonymous> (/tmp/tmp6va188p9.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977802
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar rollingMaxArray = [];\n\trollingMaxArray.push(numbers[0]);\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\trollingMaxArray[i] = Math.max(rollingMaxArray[i\
    \ - 1],  numbers[i]);\n\t}\n\treturn rollingMaxArray;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp5vlbfovc.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5vlbfovc.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var result = [];\n  var max;\n  var temp;\n  var i;\n  for (i = 0; i < numbers.length;\
    \ i++){\n    if (numbers[i] < numbers[i - 1]) {\n      temp = numbers[i];\n  \
    \    numbers[i] = numbers[i - 1];\n      numbers[i - 1] = temp;\n    }\n  }\n\n\
    \  max = numbers[0];\n  for (i = 0; i < numbers.length; i++){\n    if (numbers[i]\
    \ > max){\n      max = numbers[i];\n    }\n  }\n  for (i = 0; i < numbers.length;\
    \ i++){\n    result.push(numbers[i]);\n  }\n\n  for (i = numbers.length - 1; i\
    \ >= 0; i--) {\n    result.pop();\n  }\n  return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpbc_3_iv3.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbc_3_iv3.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var i = numbers.length - 1;\n  var max_val = numbers[i];\n  var max_idx = i;\n\
    \n  for(; i > 0; i--){\n    if(numbers[i] > max_val){\n      max_idx = i;\n  \
    \    max_val = numbers[i];\n    }\n  }\n  return numbers.slice(0, max_idx + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpgnydrqet.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgnydrqet.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3 ],\n\
    \  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var results = [];\n  var result = 0;\n  for (var i = 0;i < numbers.length;i++){\n\
    \    result += numbers[i];\n    if(numbers[i] >= result){\n      results.push(i);\n\
    \      result = numbers[i];\n    }\n  }\n  if(result != 0){\n    results.push(numbers.length);\n\
    \  }\n  return results;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpv_qux2f0.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv_qux2f0.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 4 ],\n\
    \  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar i,\n\t\tresult = [],\n\t\tnumbers_length = numbers.length;\n\n\tfor(i =\
    \ 0; i < numbers_length; i++){\n\t\tresult.push(Math.max.apply(null, numbers));\n\
    \t}\n\treturn result;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmp37tb6h1a.js:23:10)\n    at Object.<anonymous> (/tmp/tmp37tb6h1a.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  return numbers.reduce(function(rolling_max, current){\n    rolling_max = Math.max(rolling_max,\
    \ current);\n    return rolling_max;\n  }, 0);\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[]\n    at test (/tmp/tmph90xczq4.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmph90xczq4.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var array = [];\n  for(var i = 0; i < numbers.length; i++){\n    array[i] =\
    \ numbers[i];\n  }\n  return rolling_max_aux(array, numbers.length - 1);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvnmjwqdc.js:10\n  return rolling_max_aux(array, numbers.length\
    \ - 1);\n  ^\n\nReferenceError: rolling_max_aux is not defined\n    at rolling_max\
    \ (/tmp/tmpvnmjwqdc.js:10:3)\n    at test (/tmp/tmpvnmjwqdc.js:18:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpvnmjwqdc.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var maximums = numbers.reduce(function(maximums, number){\n    maximums.unshift(number);\n\
    \    return maximums;\n  }, []);\n  return maximums\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpb7z8fij2.js:20:10)\n    at Object.<anonymous> (/tmp/tmpb7z8fij2.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var _numbers = [];\n  for(var i = 0; i < numbers.length; i++){\n    _numbers.push(Math.max(...numbers));\n\
    \  }\n  return _numbers;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpqh2wk__m.js:19:10)\n    at Object.<anonymous> (/tmp/tmpqh2wk__m.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var tmpArr = [];\n    var current;\n    numbers.forEach(function(n){\n  \
    \      current = tmpArr.indexOf(n);\n        if(current==-1){\n            tmpArr.push(n);\n\
    \            current = tmpArr.indexOf(n);\n        }\n        if(current>-1){\n\
    \            tmpArr.splice(current,1);\n        }\n    });\n    return tmpArr.reduce(function(a,b){return\
    \ Math.max(a,b);})\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpskkpviss.js:18\n    return tmpArr.reduce(function(a,b){return Math.max(a,b);})\n\
    \                  ^\n\nTypeError: Reduce of empty array with no initial value\n\
    \    at Array.reduce (<anonymous>)\n    at rolling_max (/tmp/tmpskkpviss.js:18:19)\n\
    \    at test (/tmp/tmpskkpviss.js:26:20)\n    at Object.<anonymous> (/tmp/tmpskkpviss.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar max = numbers.reduce(function(a,b){\n\t\treturn Math.max(a,b);\n\t});\n\t\
    return numbers.map(function(n){\n\t\treturn Math.max(max, n);\n\t});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpw0z2al45.js:6\n\tvar max = numbers.reduce(function(a,b){\n\t  \
    \                ^\n\nTypeError: Reduce of empty array with no initial value\n\
    \    at Array.reduce (<anonymous>)\n    at rolling_max (/tmp/tmpw0z2al45.js:6:20)\n\
    \    at test (/tmp/tmpw0z2al45.js:19:20)\n    at Object.<anonymous> (/tmp/tmpw0z2al45.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    return rolling_max_helper(numbers, 0);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpcj3zjlni.js:6\n    return rolling_max_helper(numbers, 0);\n   \
    \ ^\n\nReferenceError: rolling_max_helper is not defined\n    at rolling_max (/tmp/tmpcj3zjlni.js:6:5)\n\
    \    at test (/tmp/tmpcj3zjlni.js:14:20)\n    at Object.<anonymous> (/tmp/tmpcj3zjlni.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var arr = Array(numbers.length);\n  for(var i = 0; i < numbers.length; i++){\n\
    \    arr[i] = Math.max.apply(null, numbers);\n    numbers = numbers.slice(1, numbers.length);\n\
    \  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  <2 empty items>\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n\
    ]\n    at test (/tmp/tmpo94_hxin.js:20:10)\n    at Object.<anonymous> (/tmp/tmpo94_hxin.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, <2\
    \ empty items> ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar length = numbers.length;\n\tvar max = 0;\n\tvar max_index = 0;\n\tfor(var\
    \ i = 0; i < length; i++){\n\t\tmax = Math.max(numbers[i], max);\n\t\tmax_index\
    \ = i;\n\t}\n\treturn numbers.slice(0, max_index + 1);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpcqwtqdbr.js:22:10)\n    at Object.<anonymous> (/tmp/tmpcqwtqdbr.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar results = [];\n\tvar start = 0;\n\tvar end = 0;\n\tfor(var i=0;i<numbers.length;i++){\n\
    \t\tend = start+i;\n\t\tif(end > numbers.length){\n\t\t\tend = numbers.length;\n\
    \t\t}\n\t\tresults.push( Math.max.apply(Math, numbers.slice(start, end) ) );\n\
    \t\tstart = end;\n\t}\n\treturn results;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -Infinity,\n\
    \  1,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n\
    ]\n    at test (/tmp/tmp_cagur5l.js:26:10)\n    at Object.<anonymous> (/tmp/tmp_cagur5l.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -Infinity,\
    \ 1, 3, 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var max_number = numbers[0];\n  var max_index_of_max_number = -1;\n\n  for(var\
    \ i = 1; i < numbers.length; i++){\n    if(numbers[i] > max_number){\n      max_number\
    \ = numbers[i];\n      max_index_of_max_number = i;\n    }\n  }\n\n  return numbers.slice(0,\
    \ max_index_of_max_number + 1);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpvw95kyjn.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvw95kyjn.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar max_rolling_element = Math.max.apply( Math, numbers );\n\tvar max_rolling_index\
    \ = 0;\n\tvar result_array = [];\n\n\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\tvar current_element = numbers[i];\n\t\tif( current_element == max_rolling_element\
    \ ){\n\t\t\tresult_array.push( numbers[i] );\n\t\t\tmax_rolling_index++;\n\t\t\
    }else if( current_element > max_rolling_element ){\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \treturn result_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp61nq60l3.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp61nq60l3.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar array = [], max = numbers[0];\n\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\tif(numbers[i] > max)\n\t\t\tmax = numbers[i];\n\t}\n\tarray.push(max);\n\t\
    return array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpfppijstl.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfppijstl.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  numbers = numbers.map(Number);\n  var max = [numbers[0]];\n  for (var i = 1;\
    \ i < numbers.length; i++){\n    var a = numbers[i];\n    var b = numbers[i-1];\n\
    \    if (a > b)\n      max = [Math.max(a, b), max[1]];\n    else if (a === b)\n\
    \      max = [Math.max(a, b), max[1]];\n    else\n      max = [Math.min(a, b),\
    \ max[1]];\n  }\n  return max;\n};\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpwdk1ot9d.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwdk1ot9d.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    if(numbers.length < 2)\n        return numbers\n    var ret = [],\n     \
    \   maximum = -Infinity,\n        current = -Infinity,\n        last = -Infinity\n\
    \    for(var i = 0; i < numbers.length; i++)\n    {\n        var a = numbers[i]\n\
    \        if(a > current && a > last)\n        {\n            last = a\n      \
    \  }\n        if(a > current && a > maximum)\n        {\n            maximum =\
    \ a\n        }\n        if(a > last && current > last)\n        {\n          \
    \  last = a\n        }\n        if(a > current && a > maximum)\n        {\n  \
    \          maximum = a\n        }\n    }\n    for(var i = 0; i < numbers.length;\
    \ i++)\n    {\n        var a = numbers[i]\n        if(a > last && current > last)\n\
    \        {\n            last = a\n        }\n        if(a > maximum)\n       \
    \ {\n            maximum = a\n        }\n        if(a > current)\n        {\n\
    \            current = a\n        }\n    }\n    if(last != -Infinity)\n    {\n\
    \        ret.push(last)\n    }\n    if(maximum > -Infinity)\n    {\n        ret.push(maximum)\n\
    \    }\n    return ret\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpfe0sfi79.js:64:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfe0sfi79.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4 ],\n\
    \  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar max_el = -1;\n\tnumbers.forEach(function (n){\n\t\tif( n >= max_el )\n\t\
    \t\tmax_el = n;\n\t});\n\treturn max_el;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n[]\n    at test (/tmp/tmpx4yi3qqk.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx4yi3qqk.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar rolling_maxes = [];\n\tfor(var i = 0; i <= numbers.length; i++){\n\t\tvar\
    \ index = numbers.indexOf(Math.max.apply(null, numbers));\n\t\tif(index > 0){\n\
    \t\t\trolling_maxes.push(numbers[index - 1]);\n\t\t}\n\t}\n\treturn rolling_maxes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  3,\n  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n\
    ]\n    at test (/tmp/tmp3d_h3kt7.js:22:10)\n    at Object.<anonymous> (/tmp/tmp3d_h3kt7.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 3,\
    \ 3, 3 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \t\n\treturn _.map(numbers, function(num){\n\t\treturn Math.max.apply(null, num);\n\
    \t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpq9d82whh.js:7\n\treturn _.map(numbers, function(num){\n\t^\n\n\
    ReferenceError: _ is not defined\n    at rolling_max (/tmp/tmpq9d82whh.js:7:2)\n\
    \    at test (/tmp/tmpq9d82whh.js:17:20)\n    at Object.<anonymous> (/tmp/tmpq9d82whh.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var n = numbers.length\n    , max = numbers[0]\n    , maxi = 0\n    , rolling_max\
    \ = [];\n  rolling_max.push([numbers[0], 0]);\n  for (var i = 1; i < n; i++){\n\
    \    if (numbers[i] < max)\n      rolling_max[rolling_max.length - 1][1] = Math.max(rolling_max[rolling_max.length\
    \ - 1][1], numbers[i]);\n    else if (numbers[i] > max)\n      rolling_max.push([max,\
    \ numbers[i]]);\n  }\n  return rolling_max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    undefined,\n\
    \    0\n  ]\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpja63zkle.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpja63zkle.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ undefined,\
    \ 0 ] ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var result = [];\n  var maxNumber;\n\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    maxNumber = Math.max.apply(null, numbers);\n    result.push(maxNumber);\n\
    \    numbers[i] = maxNumber;\n  }\n\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmp6swr8ktu.js:24:10)\n    at Object.<anonymous> (/tmp/tmp6swr8ktu.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var arr = [];\n  for(var i = 0, j = numbers.length; i < j; i++) {\n    if(numbers[i]\
    \ > arr[j]){\n      arr.push(numbers[i]);\n    }\n  }\n  return arr;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpx1jrnp3z.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx1jrnp3z.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var max_element = Math.max.apply(null, numbers);\n  return numbers.map(function(n){\n\
    \    return max_element-n\n  }).sort(function(a, b){\n    return b-a\n  }).reverse()\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpngv50ph0.js:20:10)\n    at Object.<anonymous> (/tmp/tmpngv50ph0.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2,\
    \ 3 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  \n  var maxs = []\n  \n  for(var i = 0; i < numbers.length; i++){\n    var\
    \ max = numbers[i]\n    for(var j = 1; j <= i; j++){\n      if(numbers[j] > max){\n\
    \        max = numbers[j]\n      }\n    }\n    maxs.push(max)\n  }\n  \n  return\
    \ maxs;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpd_i7ev3o.js:29:10)\n    at Object.<anonymous> (/tmp/tmpd_i7ev3o.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 3,\
    \ 3 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tif(!Array.isArray(numbers)) throw 'Expected an array';\n\tvar max_nums = numbers.reduce(function(a,\
    \ b){\n\t\treturn Math.max(a, b);\n\t}, 0);\n\treturn numbers.map(function(x,\
    \ i){\n\t\treturn Math.max(x, max_nums - numbers[i]);\n\t});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpr6yarfno.js:21:10)\n    at Object.<anonymous> (/tmp/tmpr6yarfno.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 3,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \treturn numbers.reduce(function(a,b){\n\t\treturn a >= b ? a : a;\n\t});\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpow853hqu.js:6\n\treturn numbers.reduce(function(a,b){\n\t     \
    \          ^\n\nTypeError: Reduce of empty array with no initial value\n    at\
    \ Array.reduce (<anonymous>)\n    at rolling_max (/tmp/tmpow853hqu.js:6:17)\n\
    \    at test (/tmp/tmpow853hqu.js:16:20)\n    at Object.<anonymous> (/tmp/tmpow853hqu.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tlet result = new Array();\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\t\
    let currentMax = numbers[0];\n\t\tfor (let j = 1; j < numbers.length; j++) {\n\
    \t\t\tif (numbers[j] > currentMax) {\n\t\t\t\tcurrentMax = numbers[j];\n\t\t\t\
    }\n\t\t}\n\t\tresult.push(currentMax);\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmptbdrufcn.js:25:10)\n    at Object.<anonymous> (/tmp/tmptbdrufcn.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: -5
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var result=[];\n    var rollingMaxIndexes=[];\n\n    for(i=0; i<numbers.length;\
    \ i++){\n        result[result.length]=numbers[i];\n        rollingMaxIndexes[rollingMaxIndexes.length]=i;\n\
    \        for(j=0; j<numbers.length; j++){\n            if(j<=i){\n           \
    \     continue;\n            }\n            if(numbers[j]>numbers[i]){\n     \
    \           result[result.length]=numbers[j];\n                rollingMaxIndexes[rollingMaxIndexes.length]=j;\n\
    \            }\n        }\n    }\n\n    for(i=0; i<result.length; i++){\n    \
    \    result[result.length]=result[rollingMaxIndexes[i]];\n    }\n\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffe4d7e9000\n 1: 0x2b4acfea6727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b4ad0a3b28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b4ad0375f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b4ad05079f0  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b4ad050f390  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b4ad06f97db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b4ad00587f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659977802
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar result = [],\n\t\tnumberLength = numbers.length;\n\tfor (var i = 0; i <\
    \ numberLength; i++) {\n\t\tvar current = numbers[i];\n\t\tvar number = numberLength\
    \ - i;\n\t\tvar previousNumber = numbers[numberLength - i - 1];\n\t\tvar previousNumberResult\
    \ = result[numberLength - i - 1];\n\t\tvar currentMax = previousNumberResult >\
    \ current ? previousNumberResult : current;\n\t\t\n\t\tresult[number] = currentMax;\n\
    \t}\n\t\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty\
    \ item>,\n  4,\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n \
    \ 2,\n  3,\n  4\n]\n    at test (/tmp/tmpv3hwn1pq.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv3hwn1pq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty\
    \ item>, 4, 3, 2, 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 0
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  \n  const rolling_max_arr = [];\n  \n  for (let i = 0; i < numbers.length;\
    \ i++){\n    rolling_max_arr.push(Math.max(...rolling_max_arr, numbers[i]));\n\
    \  }\n  \n  return rolling_max_arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var max = 0;\n    var i = 0;\n    var temp;\n    for(i = 0; i < numbers.length;\
    \ i++){\n        temp = numbers[i];\n        while(temp > max){\n            max\
    \ = temp;\n        }\n        temp = numbers[i];\n        while(temp < max){\n\
    \            max = temp;\n        }\n    }\n    return max;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[]\n    at test (/tmp/tmpxc4c7et6.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxc4c7et6.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var max;\n    numbers.sort(function(a, b){return a - b;});\n    for(var i\
    \ = numbers.length-1; i >= 0; i--){\n        if(max < numbers[i]){\n         \
    \   max = numbers[i];\n        }\n    }\n    return max;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpzk1pvall.js:21:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpzk1pvall.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    return rolling_max_generic(numbers, rolling_max_generic, []);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: ReferenceError
  stderr: "/tmp/tmp11bn31q1.js:6\n    return rolling_max_generic(numbers, rolling_max_generic,\
    \ []);\n    ^\n\nReferenceError: rolling_max_generic is not defined\n    at rolling_max\
    \ (/tmp/tmp11bn31q1.js:6:5)\n    at test (/tmp/tmp11bn31q1.js:14:20)\n    at Object.<anonymous>\
    \ (/tmp/tmp11bn31q1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar result = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < result[0]){\n\t\t\tresult[0] = numbers[i];\n\t\t}\n\t\tresult.push(numbers[i]);\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpw5bk825u.js:23:10)\n    at Object.<anonymous> (/tmp/tmpw5bk825u.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var output = [];\n    \n    for(var i in numbers){\n        output.push(Math.max.apply(null,\
    \ numbers));\n    }\n    \n    return output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmph2p1cr6x.js:21:10)\n    at Object.<anonymous> (/tmp/tmph2p1cr6x.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tif(numbers.length == 0){\n\t\treturn [];\n\t}\n\t\n\treturn numbers.reduce(function(a,\
    \ b){\n\t\tif(b > a[a.length - 1])\n\t\t\ta.push(b);\n\t\treturn a;\n\t},[]);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1f06dsie.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1f06dsie.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    if (numbers.length===0) return null;\n    var max_so_far = numbers[0];\n\
    \    var max_so_far_max_idx = -1;\n    var len = numbers.length;\n    var i =\
    \ 1;\n    for(; i < len; i++){\n        if(numbers[i] > max_so_far){\n       \
    \     max_so_far_max_idx = i;\n            max_so_far = numbers[i];\n        }\n\
    \    }\n    return max_so_far;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nnull\n\nshould\
    \ loosely deep-equal\n\n[]\n    at test (/tmp/tmpj2bu5vun.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpj2bu5vun.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: null,\n  expected:\
    \ [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var max_val = 0;\n    var rolling_max_element = null;\n    for(var i = 0;\
    \ i < numbers.length; i++){\n        if(numbers[i] > max_val){\n            max_val\
    \ = numbers[i];\n            rolling_max_element = numbers[i];\n        }\n  \
    \  }\n    return rolling_max_element;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nnull\n\nshould\
    \ loosely deep-equal\n\n[]\n    at test (/tmp/tmp5b1j9jad.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5b1j9jad.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: null,\n  expected:\
    \ [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  return numbers.reduce((acc, val) => {\n    if(!acc.length) acc.push(val);\n\
    \    if(acc.length > 1 && val !== acc[acc.length - 1]) acc.push(acc[acc.length\
    \ - 1]);\n    return acc;\n  }, []);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp4q1i8kvg.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4q1i8kvg.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: -1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    if (numbers.length < 1) return [];\n    var results = [];\n    var i = 0;\n\
    \    var sum = 0;\n    numbers.forEach(function(n){\n        sum += n;\n     \
    \   results.push(sum);\n    });\n\n    var current_max = sum;\n    var current_index\
    \ = 0;\n\n    var array_length = numbers.length;\n    var array_sum = results[array_length\
    \ - 1];\n    var times_seen = 0;\n    while(times_seen < array_length){\n    \
    \    var current_sum = results[current_index];\n        if(current_sum > current_max){\n\
    \            current_max = current_sum;\n            current_index = times_seen\
    \ + 1;\n        }\n        else {\n            if(current_index == array_length\
    \ - 1){\n                times_seen += 1;\n                current_index = times_seen;\n\
    \            }\n            else{\n                times_seen = current_index\
    \ + 1;\n            }\n        }\n    }\n\n    return results;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977803
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tnumbers.sort(function(a, b){return a - b;});\n\t\n\tvar max = numbers[0];\n\t\
    var maxIndex = 0;\n\tvar result = new Array(numbers.length);\n\t\n\tfor (var i\
    \ = 1; i < numbers.length; i++){\n\t\tvar v = numbers[i];\n\t\tif (v > max){\n\
    \t\t\tmax = v;\n\t\t\tmaxIndex = i;\n\t\t}\n\t}\n\t\n\tresult[0] = max;\n\tresult[1]\
    \ = maxIndex;\n\t\n\tfor (var i = 2; i < numbers.length; i++){\n\t\tvar v = numbers[i];\n\
    \t\tvar index = i - 1;\n\t\tif (v > max && v < numbers[index]){\n\t\t\tmax = v;\n\
    \t\t\tmaxIndex = index;\n\t\t}\n\t}\n\t\n\tresult[2] = maxIndex;\n\t\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpvbzwfjvk.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvbzwfjvk.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 0, 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  if(numbers.length <= 1) return numbers;\n  return numbers.reduce(function(previousValue,\
    \ currentValue, index){\n    return index === 0 ? previousValue : Math.max(previousValue,\
    \ currentValue);\n  });\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpwm6nd1l7.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwm6nd1l7.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var currentMax = numbers[0];\n  var maxElements = [];\n  for (var i = 1; i\
    \ < numbers.length; i++){\n    if (numbers[i] > currentMax){\n      currentMax\
    \ = numbers[i];\n    } else {\n      maxElements.push(currentMax);\n      currentMax\
    \ = numbers[i];\n    }\n  }\n  maxElements.push(currentMax);\n  return maxElements;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpqsxfgipp.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqsxfgipp.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var max_element = []\n  for(var i = 1; i < numbers.length; i++){\n    max_element\
    \ = maxArray(max_element, numbers[i-1], numbers[i])\n  }\n  return max_element\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmps26ak04m.js:8\n    max_element = maxArray(max_element, numbers[i-1],\
    \ numbers[i])\n    ^\n\nReferenceError: maxArray is not defined\n    at rolling_max\
    \ (/tmp/tmps26ak04m.js:8:5)\n    at test (/tmp/tmps26ak04m.js:19:20)\n    at Object.<anonymous>\
    \ (/tmp/tmps26ak04m.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var arr = [],\n      max = numbers[0];\n\n  for (var i = 1; i < numbers.length;\
    \ i++){\n    arr.push(Math.max(numbers[i - 1], numbers[i]));\n  }\n\n  return\
    \ arr;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpx2b1yspx.js:23:10)\n    at Object.<anonymous> (/tmp/tmpx2b1yspx.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977798
- exit_code: 0
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar result = [];\n\tvar current_max = numbers[0];\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] > current_max){\n\t\t\tcurrent_max = numbers[i];\n\t\
    \t}\n\t\tresult.push(current_max);\n\t}\n\treturn result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977798
