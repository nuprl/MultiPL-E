name: HumanEval_5_intersperse
language: js
prompt: "//Insert a number 'delimeter' between every two consecutive elements of input\
  \ array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3],\
  \ 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = intersperse;\n  assert.deepEqual(candidate([], 7),[]);\n  assert.deepEqual(candidate([5,\
  \ 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);\n  assert.deepEqual(candidate([2, 2, 2],\
  \ 2),[2, 2, 2, 2, 2]);\n}\n\ntest();"
completions: ["\tvar index = 0;\n\treturn numbers.reduce(function(acc, item){\n\t\t\
    if( index % 2 === 0 ){\n\t\t\tacc.push(item);\n\t\t}\n\t\tif( item !== undefined\
    \ ){\n\t\t\tacc.push(delimeter);\n\t\t}\n\t\tindex += 1;\n\t\treturn acc;\n\t\
    }, []);\n}\n", "    if (numbers.length <= 1) return numbers;\n    var result =\
    \ [];\n    var index = 0;\n    var length = numbers.length;\n    var numberIndex\
    \ = 0;\n    var number;\n    while(index < length){\n        number = numbers[numberIndex];\n\
    \        if(numberIndex === numbers.length - 1){\n            result.push(number);\n\
    \        } else {\n            result.push(number);\n            numberIndex +=\
    \ 1;\n        }\n    }\n    return intersperse(result,delimeter);\n}\n", "  return\
    \ numbers.reduce(function(prev, cur, index, numbers){\n    return prev.concat(numbers.slice(0,index),\
    \ delimeter, cur, numbers.slice(index + 1));\n  });\n}\n", "  var result = numbers.map(function(number){\n\
    \    return number;\n  });\n  result.push(delimeter);\n  return result.filter(function(element,\
    \ index, inputArray){\n    return index == inputArray.length - 1;\n  }).join(\"\
    \");\n}", "  var result = [];\n  for (var i = 0; i < numbers.length - 1; i++){\n\
    \    result.push(numbers[i]);\n  }\n  result.push(numbers[numbers.length - 1]);\n\
    \  return result;\n}\n", "  var result = [];\n  var i = 0;\n\n  while(i < numbers.length){\n\
    \    result.push(numbers[i]);\n    i += 1;\n    if (i > numbers.length - 1){\n\
    \      result.push(delimeter);\n      i = -1;\n    }\n  }\n  return result;\n\
    }\n", "  return numbers.reduce(function(array, n){\n    array.push(n);\n    return\
    \ array\n  }, []).join(delimeter);\n}\n", "  var array = [], len = numbers.length,\
    \ idx = 0;\n  for(idx; idx < len; idx++){\n    if(idx === 0){\n      array = numbers.concat(intersperse(array,\
    \ delimeter));\n      continue;\n    }\n    if(idx % 2 === 0){\n      array =\
    \ intersperse(array, delimeter);\n    }\n    array.push(numbers[idx]);\n  }\n\
    \  return array;\n}\n", "  var numbersInOrder = numbers.slice();\n  var interspersedNumbers\
    \ = [];\n  var i = 0;\n  while(numbersInOrder.length > 0){\n    interspersedNumbers.push(numbersInOrder.splice(0,\
    \ delimeter));\n  }\n  return interspersedNumbers;\n}\n", "  var length  = numbers.length,\n\
    \      result  = [],\n      counter = 1;\n\n  while(counter < length){\n    result.push(numbers[counter]);\n\
    \    if(counter < length - 1){\n      result.push(delimeter);\n    }\n    counter++;\n\
    \  }\n  return result;\n}\n", "  if ( numbers == null || numbers.length <= 0 )\
    \ return numbers;\n  if ( delimeter == null ) delimeter = ',';\n\n  numbers.forEach(function(number){\n\
    \    var array = [];\n    for(var i = 0; i < numbers.length; i++){\n      array.push(\
    \ number + delimeter + numbers[i] );\n    }\n    numbers = array;\n  });\n\n \
    \ return numbers;\n}\n", "  numbers = toArray(numbers);\n  if(!delimeter) delimeter\
    \ = ',';\n  return numbers.slice(1).reduce(function(result, current, i){\n   \
    \ return result.concat(current, delimeter, numbers[i]);\n  });\n}\n", "  var result\
    \ = []\n  for (var i = 0, len = numbers.length; i < len; i++){\n    result.push(numbers[i])\n\
    \    if ((i < (len-1)) && numbers[i+1] !== delimeter){\n      result.push(delimeter)\n\
    \    }\n  }\n  return result\n}\n", "  numbers = toArray(numbers);\n  delimeter\
    \ = toArray(delimeter);\n\n  return numbers.reduce(function(interspersed_numbers,\
    \ number){\n    interspersed_numbers.push(number);\n    return interspersed_numbers.concat(delimeter);\n\
    \  }, []);\n}\n", "  numbers = numbers.map(function(n){\n    return n % 2 ? n\
    \ + delimeter + n : n;\n  });\n\n  return numbers.join('');\n}\n", "  return numbers.reduce(function(array,\
    \ number){\n    return [...array, number].join(delimeter);\n  }, []);\n}\n", " \
    \ var len = numbers.length;\n  if(delimeter < 0){\n    throw 'delimeter must be\
    \ greater than 0';\n  }\n  if(delimeter == 0){\n    return numbers;\n  }\n  if(len\
    \ == 0){\n    return [];\n  }\n  if(delimeter >= len){\n    throw 'delimeter cannot\
    \ be greater than length of input array';\n  }\n  var output = new Array(len +\
    \ delimeter - 1);\n  var len = numbers.length;\n  for(var i=0; i<len; i++){\n\
    \    output[i] = numbers[i];\n  }\n  var outputIndex = len;\n  for(var i=len;\
    \ i<len+delimeter; i++){\n    output[outputIndex--] = delimeter;\n  }\n  output[outputIndex--]\
    \ = numbers[len];\n  return output;\n}\n", "  var result = [];\n  if(numbers.length\
    \ > 0){\n    result.push(numbers.shift());\n    while(numbers.length > 0){\n \
    \     result.push(delimeter, numbers.shift());\n    }\n  }\n  return result;\n\
    }\n", "  if(delimeter === undefined) delimeter = ',';\n  return numbers.reduce(function(array,\
    \ currentValue, index, array){\n    return array.concat(\n      currentValue ===\
    \ undefined\n        ? []\n        : currentValue === null ? '' : delimeter +\
    \ currentValue\n    );\n  }, []);\n}\n", "  if (numbers.length == 1) return [numbers[0]];\n\
    \n  var result = [];\n  var i;\n  for(i = 0; i < numbers.length - 1; i+=1 ){\n\
    \    result.push( numbers[i] );\n    result.push( delimeter );\n    result.push(\
    \ numbers[i + 1] );\n  }\n\n  return result;\n}\n", "  if (delimeter === undefined)\
    \ {\n    delimeter = ','\n  }\n  return numbers.map(function(n){\n    return n\
    \ ? n + delimeter : n\n  }).filter(function(n){\n    return n\n  })\n}\n", " \
    \   var arr = [];\n    var len = numbers.length;\n\n    for(var i = 0; i < len;\
    \ i++){\n        arr.push(numbers[i]);\n        if(i % delimeter == 0){\n    \
    \        arr.push(delimeter);\n        }\n    }\n\n    return arr;\n}\n", "  if(delimeter\
    \ == null || delimeter == undefined) return intersperse(numbers.slice(), 0);\n\
    \  if(numbers.length == 0) return [];\n  if(numbers.length == 1) return [numbers[0]];\n\
    \n  var result = [];\n  var i = 0;\n  for(;i < numbers.length; i++){\n    result.push(numbers[i]);\n\
    \    result.push(delimeter);\n  }\n  result.push(numbers[i]);\n  return result;\n\
    }\n", "  var result = []\n  var number\n  var length = numbers.length\n\n  for\
    \ (var i=0; i< length; i++){\n    number = numbers[i]\n\n    if (i === 0){\n \
    \     result.push(number)\n    } else {\n      result.push(number, delimeter)\n\
    \    }\n  }\n\n  return result\n}\n\nmodule.exports = intersperse\n\n},{}],20:[function(_dereq_,module,exports){\n\
    'use strict'\n", "  return numbers.reduce(function(numbers, number){\n    return\
    \ intersperse(numbers.concat(number), delimeter);\n  }, []);\n}\n", "  var output\
    \ = numbers.slice(0);\n  while(numbers.length > 0){\n    var toAdd = numbers.shift();\n\
    \    output.push(delimeter);\n    output.push(toAdd);\n  }\n  return output.join('');\n\
    }", "  if(!Array.isArray(numbers) && typeof delimeter !== 'number') return numbers;\n\
    \  else return numbers.reduce((output, number, index) => output + delimeter +\
    \ numbers[index], \"\");\n}\n", "\tvar result = [];\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tresult.push(numbers[i]);\n\t\tresult.push(delimeter);\n\t\tresult.push(numbers[i]);\n\
    \t}\n\treturn result;\n}\n", "  if (!isArray(numbers)) return numbers\n  if (isEmpty(numbers))\
    \ return []\n  var output = numbers[0]\n  for (var i = 1; i < numbers.length;\
    \ i++){\n    output = delimeter + output\n  }\n  return output\n}\n\n", "  var\
    \ array = [];\n  numbers.forEach(function(number, index){\n    array.push(number);\n\
    \    if(index !== numbers.length - 1) array.push(delimeter);\n  });\n  return\
    \ array;\n}\nmodule.exports = intersperse;\n\n},{}],141:[function(_dereq_,module,exports){",
  "  var output = [];\n  for(var i = 0, len = numbers.length; i < len; i++){\n   \
    \ output.push(numbers[i]);\n    if(i + 1 < len){\n      output.push(delimeter);\n\
    \    }\n  }\n  return output;\n}\n", "  return numbers.reduce(function(acc, num){\n\
    \    return acc.concat(num, delimeter, num);\n  });\n}\n</cell>\n<text>\nLet's\
    \ do some more exercises!\n\n\n</text>\n<text>\nExercise 2\nDefine a new function\
    \ called chunk that takes an array and a number as arguments and returns an array.\
    \ The function should return a nested array of size $n$, where each element of\
    \ the returned array is the list of all the elements of the input array that have\
    \ the same value as the $n$th element of the input array.\n\nIf the input array\
    \ has less than $n$ elements, then return a nested array whose values are empty\
    \ arrays\n\n$$\n\\begin{align}\n\\begin{split}\n\\begin{bmatrix}\n\\begin{bmatrix}\
    \ 1 & 2 & 3\\end{bmatrix}\n\\begin{bmatrix} 4 & 5 & 6\\end{bmatrix}\n\\end{bmatrix}\n\
    \\end{split}\n\\end{align}\n$$\n$$\n\\begin{align}\n\\begin{split}\n\\begin{bmatrix}\n\
    \\begin{bmatrix} 1 & 2 & 3\\end{bmatrix}\n\\begin{bmatrix} 4 & 5 & 6\\end{bmatrix}\n\
    \\end{bmatrix}\n\\end{split}\n\\end{align}\n$$\n\n$$\n\\begin{align}\n\\begin{split}\n\
    \\begin{bmatrix}\n\\begin{bmatrix} 1 & 2 & 3\\end{bmatrix}\n\\begin{bmatrix} 4\
    \ & 5 & 6\\end{bmatrix}\n\\end{bmatrix}\n\\end{split}\n\\end{align}\n$$\n$$\n\\\
    begin{align}\n\\begin{split}\n\\begin{bmatrix}\n\\begin{bmatrix} 1 & 2 & 3\\end{bmatrix}\n\
    \\begin{bmatrix} 4 & 5 & 6\\end{bmatrix}\n\\end{bmatrix}\n\\end{split}\n\\end{align}\n\
    $$\n\n$$\n\\begin{align}\n\\begin{split}\n\\begin{bmatrix}\n\\begin{bmatrix} 1\
    \ & 2 & 3\\end{bmatrix}\n\\begin{bmatrix} 4 & 5 & 6\\end{bmatrix}\n\\end{bmatrix}\n\
    \\end{split}\n\\end{align}\n$$\n\n\n</text>\n<cell>", "  if (numbers.length ===\
    \ 0) {\n    return [];\n  }\n  var result = [];\n  var currentElementIndex = numbers.length\
    \ - 1;\n  while (currentElementIndex >= 0) {\n    result.push(numbers[currentElementIndex]);\n\
    \    currentElementIndex--;\n  }\n  result.push(numbers[0]);\n  if (delimeter)\
    \ {\n    result.push(delimeter);\n  }\n  return result;\n};\n", "  var result\
    \ = [];\n  numbers.forEach(function(num){\n    result.push(num);\n    if(num !=\
    \ delimeter) result.push(delimeter);\n  });\n  return result;\n}\n", "  return\
    \ numbers.reduce(function (str, num, i) {\n    return i + 1 === numbers.length\
    \ ?\n    str + (str ? delimeter : '') + num : str + delimeter + num;\n  }, '');\n\
    }\n", "  var result = [];\n  var length = numbers.length;\n  var lastIndex = length\
    \ - 1;\n  numbers = numbers.slice(0);\n  while(numbers.length){\n    if(numbers.length\
    \ < 2){\n      numbers.push(numbers[0]);\n      numbers.length = 1;\n    }\n \
    \   result.push(numbers[0], numbers.splice(lastIndex, 1).join(delimeter));\n \
    \ }\n  return result;\n}\n", "\tvar result = [];\n\tvar lastDelimeter = delimeter;\n\
    \tfor (var i = 0; i < numbers.length; i++) {\n\t\tresult.push(numbers[i]);\n\t\
    \tif (numbers[i] != lastDelimeter) result.push(lastDelimeter);\n\t\tlastDelimeter\
    \ = delimeter;\n\t}\n\treturn result;\n}\n", "\tif(!numbers.length) return []\n\
    \treturn [...numbers[0], ...intersperse(numbers.slice(1), delimeter), ...numbers]\n\
    }\n", "  var result = [];\n  numbers.forEach(function(number){\n    if(result.length\
    \ && result.length + number > delimeter) {\n      result = result.join('') + number;\n\
    \    } else {\n      result = number + result;\n    }\n  });\n  return result;\n\
    }\n", "  var result = [];\n  for(var i = 0; i < numbers.length - 1; i++){\n  \
    \  result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i\
    \ + 1]);\n  }\n  return result;\n}", "  return numbers.reduce(function(result,\
    \ number){\n    if(result){\n      result.push(number);\n    }else{\n      result.push(number);\n\
    \      result.push(delimeter);\n    }\n    return result;\n  }, []);\n}\nintersperse([1,2,3],\
    \ 4);\n", "  // Insert a number 'delimeter' between every two consecutive elements\
    \ of input array 'numbers'\n  // e.g. intersperse([1,2,3], 4) -> [1, 4, 2, 4 ,3]\n\
    \  if(numbers.length < 1){\n    return numbers;\n  }\n\n  var result = [numbers[0]];\n\
    \  for(var i = 1; i < numbers.length; i++){\n    result.push(delimeter, numbers[i]);\n\
    \  }\n  return result;\n}\n", "    numbers = numbers.map(Number);\n    var intermediate\
    \ = numbers.reduce(function(acc, curr) {\n        return acc + delimeter + curr;\n\
    \    });\n\n    intermediate = intermediate.substr(0, intermediate.length - delimeter.length);\n\
    \    return intermediate;\n}\n", "    if (Array.isArray(numbers) === false){\n\
    \        throw 'first argument must be an array';\n    }\n    if (delimeter ===\
    \ null || typeof delimeter === 'undefined'){\n        throw 'second argument must\
    \ be string';\n    }\n    if (Array.isArray(delimeter) === false){\n        throw\
    \ 'second argument must be string';\n    }\n    \n    var result = [];\n    var\
    \ current = '';\n    var i = 0;\n    numbers.forEach(function(item){\n       \
    \ current = (current + item) + delimeter;\n        result.push(current);\n   \
    \ });\n    return result;\n}\n", "    var result = [];\n    for(var i = 0; i <\
    \ numbers.length; i++){\n        if(result.length == 0){\n            result =\
    \ numbers.slice(i);\n        } else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    if(result.length > 0){\n        result.push(delimeter);\n\
    \    }\n    return result;\n}\n", "  var length = numbers.length,\n      array\
    \ = [], // will be set to numbers.length by Array.prototype.push()\n      i;\n\
    \  \n  if (arguments.length < 2) delimeter = ',';\n  \n  for (i = 0; i < length;\
    \ i++){\n    array.push(numbers[i]);\n    if (i < (length - 1)) array.push(delimeter);\n\
    \  }\n  \n  return array;\n};\n\n},{}],23:[function(require,module,exports){\n\
    'use strict';\n", "    for(var i = 0, result = []; i < numbers.length; i += 1){\n\
    \        result.push(numbers[i]);\n        if (i+1 < numbers.length) result.push(delimeter);\n\
    \    }\n    return result;\n}\n", "    return numbers.reduce(function (array,\
    \ num){\n        array.push(num);\n        return array;\n    }, []);\n}\n\nmodule.exports\
    \ = intersperse;\n\n},{}],23:[function(require,module,exports){\n'use strict'\n\
    var uniqueRandomArray = require('unique-random-array')\n\nvar DEFAULT_DURATION\
    \ = 60\nvar DEFAULT_ITERATIONS = 10\n\nvar defaultOptions = {\n  duration: DEFAULT_DURATION,\n\
    \  iterations: DEFAULT_ITERATIONS\n}\n\nvar defaultTimer = {}\n", "  numbers =\
    \ intersperse.Array(numbers);\n  delimeter = intersperse.String(delimeter);\n\
    \  if(numbers.length < 2) return numbers;\n\n  var i, j, last;\n  for(i = 0; i\
    \ < numbers.length; i++){\n    last = numbers[i];\n    for(j = i; j < numbers.length;\
    \ j++){\n      numbers[j] += delimeter + last;\n    }\n  }\n  return numbers;\n\
    };\n", "  // if input numbers is empty or null, return an empty string\n  if(numbers.length\
    \ === 0) return \"\";\n  // if input numbers is already an array\n  if(Array.isArray(numbers))\
    \ return numbers.join(delimeter);\n  // if input numbers is an object, convert\
    \ it to an array\n  if(typeof numbers === \"object\"){\n    return Object.keys(numbers).map(function(key,\
    \ i){\n      return i + delimeter + numbers[key];\n    }).join(\"\");\n  }\n}\n",
  "  if(!Array.isArray(numbers))\n    throw new Error('First argument must be an array');\n\
    \n  if(delimeter===undefined){\n    delimeter = ',';\n  }\n\n  if(numbers.length==0)\n\
    \    return numbers;\n\n  if(numbers.length==1){\n    return numbers[0]+delimeter+numbers[0];\n\
    \  }\n\n  return [\n    numbers[0],\n    delimeter,\n    intersperse(numbers.slice(1),\
    \ delimeter),\n    numbers[0]\n  ].join('');\n}\n\n},{}],160:[function(require,module,exports){",
  "  var out = [],\n      num = 0;\n  for (var i = 0, len = numbers.length; i < len;\
    \ i++){\n    num = numbers[i];\n    if (num > 0) out.unshift(num);\n    if (num\
    \ != delimeter) out.unshift(delimeter);\n  }\n  return out;\n};\n", "  if (numbers.length\
    \ == 0) return [];\n  if (delimeter === undefined) delimeter = ',';\n  return\
    \ numbers.reduce(function(acc, curr, idx){\n    if (idx != 0) acc.push(delimeter,\
    \ curr);\n    return acc;\n  }, []);\n}\n</textarea>\n                    </div>\n\
    \                    <div class='space-bottom0'>\n                      <span\
    \ class='nam'>intersperse.js</span>\n                      <div class='markdown'>\n\
    \                        <textarea class='code' name='code-intersperse.js' id='code-intersperse'>//\
    \ Define a function that takes in an array, ", "  numbers = flatten(numbers);\n\
    \  var interspersedNumbers = [];\n  var numberToReturn = -1;\n  numbers = numbers.map(function(number){\n\
    \    if (number > numberToReturn) interspersedNumbers = [];\n    interspersedNumbers.push(number);\n\
    \    numberToReturn = number;\n    return number;\n  });\n\n  if (numberToReturn\
    \ != -1) interspersedNumbers.push(numberToReturn);\n\n  return interspersedNumbers.join(delimeter);\n\
    }\n", "\tif(typeof delimeter === 'undefined'){\n\t\tdelimeter = ''\n\t}\n\tlet\
    \ result = []\n\tif(typeof numbers === 'undefined'){\n\t\treturn result\n\t}\n\
    \tlet index = 0\n\twhile(index < numbers.length){\n\t\tresult.push(numbers[index])\n\
    \t\tindex++\n\t\tif(index === numbers.length){\n\t\t\tresult.push(delimeter)\n\
    \t\t\tbreak\n\t\t}\n\t\tresult.push(delimeter)\n\t}\n\treturn result\n}\n", " \
    \ if (numbers.length < 1)\n    return numbers;\n  numbers.push(0);\n  return numbers.reduce(function(acc,\
    \ value, index, arr){\n    if (index === 0 || value !== arr[index - 1])\n    \
    \  acc.push(delimeter + value);\n    return acc;\n  }, []);\n}\n", "  if (Array.isArray(numbers)){\n\
    \    return numbers.reduce(function (result, item, index) {\n      if (index ===\
    \ 0) {\n        result.push(item);\n      } else {\n        result.push(delimeter,\
    \ item);\n      }\n      return result;\n    }, []);\n  }\n  return numbers;\n\
    }\n", "  var result = []\n  var lastNumber;\n  var lastNumberIndex;\n\n  numbers.forEach(function(value,\
    \ index){\n    if (index){\n      result.push(delimter);\n    }\n    result.push(value);\n\
    \  })\n\n  return result;\n}\n\nmodule.exports = intersperse;\n\n", "  if(!Array.isArray(numbers)){\n\
    \    throw new Error('first argument must be an array')\n  }\n  if(delimeter ==\
    \ null || isNaN(parseInt(delimeter, 10))){\n    throw new Error('second argument\
    \ must be an integer or string')\n  }\n  var result = []\n  for(var i = 0; i <\
    \ numbers.length; i++){\n    if(numbers[i] != null){\n      result.push(numbers[i])\n\
    \    }\n    result.push(delimeter)\n  }\n  return result\n}\n", "  var result\
    \ = []\n  var lastNumber\n  for(var i = 0, length = numbers.length; i < length;\
    \ i++){\n    result.push(numbers[i])\n    if(delimeter)\n      result.push(delimeter)\n\
    \    lastNumber = numbers[i]\n  }\n  if(lastNumber)\n    result.push(lastNumber)\n\
    \  return result\n}\n", "  if(Array.isArray(numbers)){\n    let length = numbers.length;\n\
    \    let result = []\n    for(let i = 0; i < length; i++){\n      result.push((i\
    \ + 1) <= delimeter? numbers[i] : numbers[i] + numbers[i + 1]);\n    }\n    return\
    \ result;\n  }\n  return numbers;\n}\n", "  return numbers.reduce(function(array,\
    \ current, index, input){\n    return array.concat(current, delimeter, input[index\
    \ + 1]);\n  }, []);\n}\n", "  if (Array.isArray(numbers)){\n    let newArray =\
    \ [];\n    for (let i = 0; i<numbers.length; i++) {\n      newArray.push(numbers[i]);\n\
    \      if (newArray.length >= delimeter) {\n        newArray.shift();\n      }\n\
    \    }\n    return newArray;\n  }\n}\n", "\tlet result = [];\n\t\n\tfor(let n\
    \ = 0; n < numbers.length; n++){\n\t\tresult.push(numbers[n]);\n\t\tif(n + 1 ===\
    \ numbers.length){\n\t\t\tresult.push(delimeter);\n\t\t}\n\t}\n\t\n\treturn result;\n\
    }\n", "\tif (!numbers.length) return [];\n\tif (!delimeter) delimeter = ',';\n\
    \tvar result = [],\n\t\tnumbers_length = numbers.length;\n\tfor (var i = 0, l\
    \ = numbers_length; i < l; i++){\n\t\tif (numbers_length > 1){\n\t\t\tresult.push(numbers[i]);\n\
    \t\t\tnumbers_length--;\n\t\t}\n\t\telse {\n\t\t\tresult.push(numbers[0], delimeter);\n\
    \t\t}\n\t}\n\treturn result;\n};", "  var result = [];\n  var currentDelimeter\
    \ = 0;\n\n  for(var i = 0, len = numbers.length; i < len; i++){\n    result.push(numbers[i]);\n\
    \    if (numbers[i] === delimeter){\n      currentDelimeter++;\n    }\n    else\
    \ if(currentDelimeter > 1){\n      result.push(delimeter);\n      currentDelimeter\
    \ = 0;\n    }\n  }\n\n  return result;\n}\n\n},{}],11:[function(require,module,exports){\n\
    'use strict';\n\nvar intersperse = require('../intersperse');\n", "  if (!isArray(numbers))\
    \ return numbers;\n  \n  var len = numbers.length;\n  var result = [];\n\n  for(var\
    \ i=0; i<len; i++){\n    if (i>0 && delimeter) result.push(numbers[i]);\n    if\
    \ (numbers[i] != undefined) result.push(numbers[i]);\n    if (numbers[i+1] !=\
    \ undefined) result.push(delimeter);\n  }\n  \n  return result;\n}", "    var\
    \ result = [];\n    for(var i = 0; i < numbers.length; i++)\n        result.push(numbers[i]);\n\
    \    for(var i = 0; i < numbers.length; i++){\n        result.push(delimeter);\n\
    \        result.push(numbers[i]);\n    }\n    return result;\n}\n", "  var result\
    \ = []\n  var number\n  \n  for(var i = 0, l = numbers.length; i < l; i++){\n\
    \    number = numbers[i]\n    if(!number){\n      continue\n    }\n    result.push(number)\n\
    \    while(result.length < delimeter){\n      result.push(null)\n    }\n  }\n\
    \  return result\n}\n", "  var result = [];\n  numbers = numbers.map(function(number){\n\
    \    return number + delimeter;\n  });\n\n  for (var i = 0, len = numbers.length;\
    \ i < len; i++){\n    result.push(numbers[i]);\n  }\n\n  return result;\n}\n\n\
    },{}],24:[function(require,module,exports){\nmodule.exports = \"0.17.6\";\n},{}],25:[function(require,module,exports){",
  "  return numbers.reduce(function(result, current){\n    if (delimeter) result.push(current);\n\
    \    else result.unshift(current);\n    return result;\n  }, []);\n}\n", "  if(!numbers.length)\
    \ return [];\n  var result = [];\n  var i = 0;\n  while(i < numbers.length){\n\
    \    result.push(numbers[i]);\n    i++;\n    if(numbers.length > i){\n      result.push(delimeter);\n\
    \    }\n  }\n  return result;\n}\n", "    var result = []\n    for (var i=0; i\
    \ < numbers.length; i++){\n        if (numbers.length - i > 0){\n            result.push(numbers[i]);\n\
    \            result.push(delimeter);\n            result.push(numbers[i+1]);\n\
    \        } else {\n            result.push(numbers[i]);\n        }\n    }\n  \
    \  return result;\n}\n", "  numbers = toArray(numbers);\n  var len = numbers.length;\n\
    \  if(len == 0) return [];\n  if(delimeter == null || len == 1) return numbers;\n\
    \  var result = [];\n  while(numbers.length > 0){\n    result.unshift(numbers.shift());\n\
    \    if(numbers.length > 0) result.unshift(delimeter);\n  }\n  return result;\n\
    }\n", "  if (numbers.length == 1) {\n    return numbers[0];\n  }\n  if (numbers.length\
    \ == 0){\n    return [];\n  }\n\n  var returnArray = [];\n  var i = 0;\n  while\
    \ (i < numbers.length){\n    returnArray[i] = numbers[i++];\n    while (i < numbers.length\
    \ && numbers[i++] == delimeter){\n      returnArray[i++]= delimeter;\n    }\n\
    \  }\n  return returnArray;\n}\n", "  var result = [];\n  var i = 0;\n  \n  while\
    \ (i < numbers.length){\n    result.push(numbers[i++]);\n    while (i + 1 < numbers.length\
    \ && numbers[i + 1] === delimeter){\n      result.push(delimeter);\n      i++;\n\
    \    }\n  }\n\n  return result;\n}\n", "  if(delimeter == null || typeof delimeter\
    \ != 'number'){\n    delimeter = ','\n  }\n\n  if(numbers.length < 1) return numbers\n\
    \n  if(typeof delimeter != 'number'){\n    delimeter = ','\n  }\n\n  var numbersIntoArray\
    \ = numbers.reduce(function(result, current){\n    return result.concat(current)\n\
    \  }, [])\n\n  return numbersIntoArray.filter(function(current){\n    return current\
    \ != null\n  }).join(delimeter)\n}\n\n},{}],173:[function(require,module,exports){",
  "  var result = [];\n  for(var i = 0; i < numbers.length; i += 1) {\n    if(i !==\
    \ 0) {\n      result.push(delimeter);\n    }\n    result.push(numbers[i]);\n \
    \ }\n  return result;\n}\n", "\tif (isFunction(delimeter)){\n\t\treturn numbers.reduce(function(acc,\
    \ num, index){\n\t\t\treturn acc.concat(index % 2 ? [num] : [num, delimeter]);\n\
    \t\t}, []);\n\t}\n\n\tvar result = [];\n\tfor(var i = 0; i < numbers.length; i\
    \ = i + 2){\n\t\tresult.push(numbers[i]);\n\t}\n\tresult.push(delimeter);\n\t\
    for(i = numbers.length; i; i > 0; i = i - 2){\n\t\tresult.push(numbers[i - 1]);\n\
    \t}\n\treturn result;\n}\n", "  var results = [];\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    results.push( numbers[i] );\n    if(numbers.length - 1 > i){\n  \
    \    results.push( delimeter );\n    }\n  }\n  return results;\n}\n", "  numbers\
    \ = _.toArray(numbers);\n  delimeter = _.isUndefined(delimeter) ? \",\" : delimeter;\n\
    \  return _.map(numbers, function(number){\n    return number + delimeter;\n \
    \ }).join(\"\");\n}\n", "\t\n\t//Create a 'cursor' array that holds the index\
    \ of the current number we are working with\n\tvar cursor = numbers.map(function(val){\n\
    \t\t\n\t\t//Return the current cursor number at every call\n\t\treturn val;\n\t\
    })\n\t\n\t//Reverse 'cursor' array before iterating over it by 'reduce'\n\treturn\
    \ cursor.reverse().reduce(function(arr, val){\n\t\t\n\t\t//Insert the current\
    \ number at the 'cursor' array at every call\n\t\tarr[val] = numbers[val];\n\t\
    \t\n\t\t//Return the array after every call\n\t\treturn arr;\n\t}, {})\n\t\n\t\
    //Return the 'cursor' array after iterating over it by 'reduce'\n}\n\t", "  let\
    \ arrayCopy = numbers.slice(0);\n  let result = [];\n  let temp;\n\n  while(arrayCopy.length\
    \ > 0){\n    temp = arrayCopy.shift();\n    if(delimeter === undefined){\n   \
    \   result.push(temp);\n    }else{\n      result.push(temp, delimeter);\n    }\n\
    \  }\n  return result;\n}\n", "\treturn numbers.reduce(function (a, d, i) {\n\t\
    \ta.push((i > 0) ? delimeter : '');\n\t\ta.push(d);\n\t\treturn a;\n\t}, []);\n\
    }\n", "  var out = [], i = 0, l = numbers.length, j = 0;\n  while(i < l){\n  \
    \  out.push((j === 0) ? numbers[i] : numbers[i - j]); j++;\n    if(j > 1) out.push(delimeter);\n\
    \    i++;\n  }\n  return out.reverse().join(\"\");\n}\n", "  var i, j, temp =\
    \ [];\n  for(i = 0; i < numbers.length; i++)\n    for(j = 0; j < ((numbers.length\
    \ - i - 1) >> 1) + 1; j++)\n      temp.push(numbers[i + j] || 0);\n  return temp.slice(0,\
    \ (temp.lenght >> 1) + 1 || 9e9) + delimeter;\n}\n", "  if (numbers.length ===\
    \ 0) {\n    return [];\n  }\n\n  var result = [];\n  var index = -1;\n\n  while\
    \ (++index < numbers.length){\n    result.push(numbers[index]);\n    if (index\
    \ === numbers.length - 1 || numbers[index+1] === undefined){\n      result.push(delimeter);\n\
    \    }\n  }\n\n  return result;\n}\n", "  var result = [];\n  \n  //Insert a number\
    \ 'delimeter' between every two consecutive elements of input array 'numbers'\n\
    \  //Iterate through each element of input array\n  for(var i = 0, len = numbers.length;\
    \ i < len; i++){\n    result.push(numbers[i]);\n    if(i != len - 1){\n      result.push(delimeter);\n\
    \    }\n  }\n  \n  return result;\n};\n", "  return numbers.reduce(function(array,\
    \ number){\n    array.push(number);\n    return array.concat(delimited || []);\n\
    \  }, []);\n}\nmodule.exports = intersperse;\n\n},{}],14:[function(_dereq_,module,exports){\n\
    var createRange = _dereq_('./createRange');\nvar extend = _dereq_('../object/extend');\n\
    var has = _dereq_('../object/has');\nvar isMobiledoc = _dereq_('./isMobiledoc');\n\
    var isString = _dereq_('./isString');\nvar log = _dereq_('../utils/log');\n\n\
    var isMobiledoc$1 = isMobiledoc.isMobiledoc;\nvar isString$1 = isString.isString;\n\
    var log = log.noConflict();\n\nvar DEFAULT_RANGE_PARSER = 'mobiledoc-range-parser';\n\
    \nvar RangeParser = function RangeParser(key, options){\n  var config = extend({\n\
    \    parser: DEFAULT_RANGE_PARSER\n  }, options || {});\n\n  this.key = key;\n\
    \  this.config = config;\n\n  // Initialize range parser\n  var parser = this;\n\
    \  parser.getRange = function(){\n    return createRange(parser.parse(), parser.config);\n\
    \  };\n};\n", "    if(!numbers.length) return '';\n    var lastNumber = numbers.pop();\n\
    \    return numbers.reduce(function(acc, el){\n        return acc + delimeter\
    \ + el;\n    }, lastNumber);\n}\n", "    numbers = numbers.slice() || [];\n  \
    \  delimeter = delimeter || 0;\n    return numbers.map(function (x, i) {\n   \
    \     if (i === 0) {\n            return x;\n        }\n        return delimeter\
    \ + x;\n    }).join(\"\"); \n}", "  return numbers.reduce(function(acc, number){\n\
    \    if(acc.length){\n      acc = [acc[0], delimeter, number].join(\"\");\n  \
    \  } else {\n      acc = [number];\n    }\n    return acc;\n  }, \"\");\n}\n",
  "    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] === undefined)\
    \ continue;\n        var newNum = numbers[i];\n        for(var j = i+1; j < numbers.length;\
    \ j++){\n            numbers[j] = newNum;\n        }\n    }\n    return numbers;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=arrays,javascript |>\n<code>\n\
    var arr = [1, 2, 3];\nvar result = [];\n", "  var result = [];\n  for(var i =\
    \ 0; i < numbers.length; i++){\n    result.push(numbers[i]);\n    if(numbers.length\
    \ > 1 && i+1 < numbers.length){\n      result.push(delimeter);\n    }\n  }\n \
    \ return result;\n}\n", "  return numbers.reduce(function(acc, current, index,\
    \ array){\n    acc.push(current + delimeter);\n    return acc\n  }, []);\n}\n",
  "  if(!numbers.length) return [];\n  var result = [numbers[0]];\n  for(var i = 1;\
    \ i < numbers.length; i++){\n    result.push(delimeter + numbers[i]);\n  }\n \
    \ return result;\n}\n", "  if (numbers.length === 0) {\n    return [];\n  }\n\
    \  return numbers.reduce(function(prev, curr, i, arr) {\n    if (i === 0) {\n\
    \      return [curr];\n    }\n    if (i === arr.length - 1) {\n      return prev.concat([curr]);\n\
    \    }\n    return [prev, curr].join(delimeter);\n  }, []);\n}\n", "    if (Array.isArray(numbers)){\n\
    \        if (numbers.length === 0) return [];\n        if (delimeter === undefined)\
    \ delimeter = ',';\n        return numbers.map(function(number){\n           \
    \ return intersperse(number, delimeter);\n        }).join(delimeter);\n    }\n\
    \    return String(numbers);\n}\n", "  return numbers.reduce(function(result,\
    \ currentValue){\n    return result + delimeter + currentValue;\n  }, '');\n}",
  "  var numbersIn;\n  var numbersInLength;\n  var numbersInIndex;\n  var numbersInLastIndex;\n\
    \  var numbersOut = [];\n  var numbersOutIndex = 0;\n  var numbersInLastIndex\
    \ = 0;\n  var numbersInIndex = 0;\n  numbersInLength = numbers.length;\n\n  //\
    \ If no number is given, return an empty array\n  if(!numbersInLength){\n    return\
    \ [];\n  }\n\n  // If the given number is less than 0, return an empty array\n\
    \  if(numbersInLength < 0){\n    return [];\n  }\n\n  // If the given delimeter\
    \ character does not exist in the given input array, return an empty array\n \
    \ if(typeof delimeter === 'string' && delimeter !== ''){\n    return [];\n  }\n\
    \n  // If `numbers` is given as an object, convert it to a numeric array\n  if(typeof\
    \ numbers === 'object'){\n    numbers = Array.prototype.slice.call(arguments);\n\
    \  }\n\n  // If `numbers` is given as a string, convert it to a numeric array\n\
    \  if(typeof numbers === 'string'){\n    numbers = Array.prototype.slice.call(numbers);\n\
    \  }\n\n  // If no delimeter is given, return a copy of the input array\n  if(!numbersInLength){\n\
    \    return numbers.slice();\n  }\n\n  // If `numbers` is given as an object,\
    \ convert it to a numeric array\n  if(typeof numbers === 'object'){\n    numbers\
    \ = Array.prototype.slice.call(arguments);\n  }\n\n  // If `numbers` is given\
    \ as a string, convert it to a numeric array\n  if(typeof numbers === 'string'){\n\
    \    numbers = Array.prototype.slice.call(numbers);\n  }\n\n  // If no `numbers'\
    \ argument is given, return a copy of the input array\n  if(numbersInLength ===\
    \ 0){\n    return numbers.slice();\n  }\n\n  // If number of given `numbers' is\
    \ less than 2, return an empty array\n  if(numbersInLength < 2){\n    return [];\n\
    \  }\n\n  // If no delimeter is given, return a copy of the input array\n  if(!numbersInLength){\n\
    \    return numbers.slice();\n  }\n\n  // If `numbers` given as an object, convert\
    \ it to a numeric array\n  if(typeof numbers === 'object'){\n    numbers = Array.prototype.slice.call(arguments);\n\
    \  }\n\n  // If `numbers` given as a string, convert it to a numeric array\n \
    \ if(typeof numbers === 'string'){\n    numbers = Array.prototype.slice.call(numbers);\n\
    \  }\n\n  // If no `numbers' argument is given, return a copy of the input array\n\
    \  if(numbersInLength === 0){\n    return numbers.slice();\n  }\n\n  // If number\
    \ of given `numbers' is less than 2, return an empty array\n  if(numbersInLength\
    \ < 2){\n    return [];\n  }\n\n  // If no `numbers` argument is given, return\
    \ a copy of the input array\n  if(numbersInLength === 0){\n    return numbers.slice",
  "  return numbers.reduce(function(result, number){\n    return result.concat(delimeter,\
    \ number);\n  }, []);\n}\n", "  var result = [],\n      i=0,\n      len=numbers.length;\n\
    \  while (len > i) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n\
    \    i++;\n  }\n  return result;\n}\n", "    numbers = numbers || [];\n    delimeter\
    \ = delimeter || '';\n    var interspersed = [];\n    for (var i = 0, len = numbers.length;\
    \ i < len; i += 1) {\n        interspersed.push(numbers[i]);\n        if (i !==\
    \ len - 1) {\n            interspersed.push(delimeter);\n        }\n    }\n  \
    \  return interspersed;\n}\n\n},{}],6:[function(_dereq_,module,exports){\n'use\
    \ strict';\n\nvar nativeMax = Math.max;\nvar nativeMin = Math.min;\nvar slice\
    \ = [].slice;\nvar isArguments = _dereq_('./isArguments');\nvar isFunction = _dereq_('./isFunction');\n\
    var isLength = _dereq_('./isLength');\nvar isString = _dereq_('./isString');\n\
    var create = _dereq_('./_create');\nvar assign = _dereq_('./assign');\nvar values\
    \ = _dereq_('./values');\n\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED]\
    \ || (global[SHARED] = {});\nvar counter = 0;\n", "    var numbers_length = numbers.length;\n\
    \    var current_index = 0;\n    var result = new Array(numbers_length);\n   \
    \ while(current_index < numbers_length){\n        result[current_index] = numbers[current_index];\n\
    \        current_index++;\n        if(current_index >= numbers_length){\n    \
    \        current_index = 0;\n        }\n        if(current_index > 0){\n     \
    \       result[current_index] = delimeter;\n            current_index++;\n   \
    \     }\n    }\n    return result\n}", "  if(numbers.length < 2) return numbers;\n\
    \  var result = [],\n      length = numbers.length;\n  for(var i = 0; i < length;\
    \ i++){\n    result[i] = numbers[i];\n    if(i) result[i - 1] += delimeter;\n\
    \  }\n  return result;\n}\n", "\tvar length = numbers.length\n\tvar number\n\t\
    var result = new Array(length)\n\tfor(var i = 0; i < length; i++){\n\t\tnumber\
    \ = numbers[i]\n\t\tresult[i] = number + delimeter\n\t}\n\treturn result.join('')\n\
    }", "  var output = [];\n  for (var i = 0, l = numbers.length; i < l; i++) {\n\
    \    output.push(numbers[i]);\n    if (i < l - 1) {\n      output.push(delimeter);\n\
    \    }\n  }\n  return output;\n}\n", "  return numbers.reduce(function(previous,\
    \ current){\n    return [previous, current, delimeter].join(\"\");\n  });\n}\n\
    </code></pre>\n        </section>\n\n        <section data-background=\"img/intersperse.png\"\
    >\n          <pre><code data-trim>", "  var arrays = []\n  for(var i = 0; i <\
    \ numbers.length; i++){\n    arrays.push([])\n    for(var j = 0; j < numbers.length;\
    \ j++){\n      arrays[i].push(numbers[j])\n    }\n  }\n  \n  return arrays.reduce(function(acc,\
    \ nums){\n    return acc.concat(nums, delimeter)\n  })\n}\n", "    \n    if(numbers\
    \ == null){ numbers = []; }\n    if(delimeter == null){ delimeter; }\n    \n \
    \   var len = numbers.length;\n    if(delimeter > len){ delimeter = len; }\n \
    \   \n    var result = [], i = 0, len = numbers.length;\n    \n    for(; i < len;\
    \ i++){\n        result.push(numbers[i]);\n        result.push(delimeter);\n \
    \   }\n    \n    return result;\n}\n", "    var output = [];\n    var len = numbers.length;\n\
    \    var i = 0;\n    if (len > 0){\n        while (i < len){\n            output.push(numbers[i]);\n\
    \            i += 1;\n            if (i > 0){\n                output.push(delimeter);\n\
    \                i += 1;\n            }\n        }\n    }\n    return output;\n\
    }\n", "  var output = [];\n  var firstElem = numbers[0];\n  numbers.forEach(function(elem){\n\
    \    if (elem == firstElem) output = [firstElem, elem];\n    else output.push(elem);\n\
    \  });\n  if (output.length > 1) {\n    return output.slice(0, -1).join(delimeter)\
    \ + delimeter + output.slice(-1);\n  }\n  else return output.join(delimeter);\n\
    }\n</textarea>\n  </div>\n</div>\n\n<footer class=\"footer\">\n  <div class=\"\
    container\">\n    <p>.</p>\n  </div>\n</footer>\n\n<script type=\"text/html\"\
    \ id=\"complexity-popover-template\">\n  <div class=\"complexity-notice\">\n \
    \   Complexity : {{ complexity.cyclomatic }} <br>\n    Length : {{ complexity.halstead.length\
    \ }} <br>\n    Difficulty : {{ complexity.halstead.difficulty.toFixed(2) }} <br>\n\
    \    Est # bugs : {{ complexity.halstead.bugs.toFixed(2) }}<br>\n  </div>\n</script>\n\
    \n<script type=\"text/javascript\" src=\"../../assets/scripts/bundles/core-bundle.js\"\
    ></script>\n<script type=\"text/javascript\" src=\"../../assets/scripts/bundles/codemirror.js\"\
    ></script>\n<script type=\"text/javascript\" src=\"../../assets/scripts/codemirror.markpopovertext.js\"\
    ></script>\n<script type=\"text/javascript\" src=\"report.js\"></script>\n<script\
    \ type=\"text/javascript\" src=\"report.history.js\"></script>\n<script type=\"\
    text/javascript\" src=\"../../assets/scripts/plato-file.js\"></script>\n</body>\n\
    </html>\n\n<|/ file source=github dstars=1 filename=index.html |>\n<| c |>\nHi\
    \ there, I'm afraid I have not understood the question :/ Can you please elaborate\
    \ what you are trying to achieve, maybe with some examples? That would make my\
    \ question clearer as well.\n<|/ c |>\n<| c |>\nWhat I'm saying is I'm wanting\
    \ to create an array of objects that are grouped by their first value, then sorted\
    \ by their second value, then grouped by their third value, then sorted by their\
    \ fourth value.\n<|/ c |>\n<| c |>\nOkay, I understand now. Let me think for a\
    \ while and I'll let you know if I come up with anything.\n<|/ c |>\n<| a tags=javascript,arrays\
    \ |>\nYou want a nested grouping of your array based on your first value, then\
    \ sorted by your second value, then grouped by your third value, then sorted by\
    \ your fourth value. You can do that pretty easily using reduce to create the\
    \ nested groups first and then sort them.\nI'm going to assume that your original\
    \ array is called arr, and that the keys are numbers, so my reduce method looks\
    \ like this:\n<code>\nvar reduced = arr.reduce((a, b) => {\n  a[b[0]] = a[b[0]]\
    \ || [];\n  a[b[0]].push(b);\n  return ", "    numbers = numbers.map(function\
    \ (number){\n        return number == undefined ? number : parseInt(number);\n\
    \    });\n    return numbers.reduce(function(current, previous, index, arr){\n\
    \        if(index > 0){\n            current = current + delimeter;\n        }\n\
    \        current = current + previous;\n        return current;\n    });\n}\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=arrays,javascript |>\n<code>", "  var result\
    \ = [];\n  for(var i = 0, len = numbers.length; i < len; i++){\n    result.push(numbers[i]);\n\
    \    if(result.length < delimeter){\n      result.push(delimeter);\n    }\n  }\n\
    \  return result;\n}\n", "  if(isArr(numbers)){\n    numbers = numbers.filter(function(e){\n\
    \      return isNum(e)\n    });\n    if(numbers.length){\n      var lastIndex\
    \ = numbers.length-1;\n      numbers.forEach(function(element, index){\n     \
    \   if(index !== lastIndex){\n          numbers[index] = +element + delimeter;\n\
    \        }\n      })\n    }\n    return numbers\n  }else{\n    throw new Error('intersperse:\
    \ numbers must be an array')\n  }\n}", "  if(delimeter===void 0){\n    delimeter=',';\n\
    \  }\n  if(!Array.isArray(numbers)){\n    throw new TypeError(`Expected Array,\
    \ got ${typeof numbers}`);\n  }\n  if(numbers.length<=0){\n    return numbers;\n\
    \  }\n  const result=[];\n  for(let i=0;i<numbers.length-1;i++){\n    result.push(numbers[i]);\n\
    \    result.push(delimeter);\n  }\n  result.push(numbers[numbers.length-1]);\n\
    \  return result;\n}\n", "  if(delimeter == null || delimeter == \"\"){\n    delimeter\
    \ = \"\"\n  }\n  if(numbers == null || numbers.length == 0){\n    return numbers\n\
    \  }\n  if(numbers.length == 1){\n    return [numbers[0]]\n  }\n  var nums = intersperse(numbers.slice(1),\
    \ delimeter)\n  var num = nums.join(\"\" + delimeter)\n  return [numbers[0]].concat(nums)\n\
    }\n", "  return numbers.reduce(function(numbers, number){\n    if(numbers.length\
    \ === 0){\n      return [number];\n    }\n    return [number].concat(numbers);\n\
    \  }, []);\n};", "  var result = [];\n  forEach(numbers, function(n){\n    result.push(n);\n\
    \    if (result.length < delimeter) result.push(delimeter);\n  });\n  return result;\n\
    };\n", "  if(typeof delimeter === 'undefined')\n    return numbers\n\n  var output\
    \ = []\n  var i = 0\n  while(numbers.length > i){\n    output.push(numbers[i])\n\
    \    if(numbers[i+1]) output.push(delimeter)\n    i++\n  }\n  return output\n\
    }\n", "\tvar len = numbers.length;\n\tif (len === 0) {\n\t\treturn [];\n\t}\n\t\
    var result = [];\n\tvar numbers_len = numbers.length;\n\t\n\t// If 'delimeter'\
    \ is passed, add a number 'delimeter' between every two consecutive elements of\
    \ input array 'numbers'\n\tif (delimeter) {\n\t\tvar numbers_end = numbers.length\
    \ - 1;\n\t\tnumbers = numbers.slice(0,numbers_end);\n\t\tnumbers.push(delimeter);\n\
    \t\tnumbers.push(delimeter);\n\t}\n\t\n\t// If 'numbers' has only one element,\
    \ return this element\n\tif (len === numbers_len) {\n\t\treturn numbers;\n\t}\n\
    \t\n\t// Start at index 1 and increment index by 1\n\t// when adding numbers in\
    \ 'numbers'\n\tfor (var i = 0; i < numbers_len - 1; i++) {\n\t\tresult.push(numbers[i]);\n\
    \t\tresult.push(numbers[i + 1]);\n\t}\n\t\n\treturn result;\n}\n", "  var newArr\
    \ = []\n  for(var i = 0, len = numbers.length; i < len; i += 1) newArr.push(numbers[i])\n\
    \  for(var i = 1, len = newArr.length; i < len; i += 1) newArr.push(delimeter\
    \ + newArr[i])\n  return newArr\n}\n", "  //Check if delimeter is empty\n  if(typeof\
    \ delimeter === \"undefined\" || delimeter == null || delimeter == \"\"){\n  \
    \  //Return empty array\n    return [];\n  }\n  //Check if delimeter is single\
    \ character\n  if(typeof delimeter == \"string\" && delimeter != \"\"){\n    //Return\
    \ empty array\n    return [];\n  }\n  \n  //Return empty array if delimeter length\
    \ is not a positive integer\n  if(typeof delimeter == \"number\" && delimeter\
    \ > 0){\n    return [];\n  }\n  \n  \n  \n  //Create an empty array\n  var result\
    \ = [];\n  \n  \n  //Iterate through input array `numbers'\n  for(var i = 0; i\
    \ < numbers.length; i++){\n    \n    //Push current element `numbers[i]' to results\
    \ array\n    result.push(numbers[i]);\n    \n    //If current element `numbers[i]'\
    \ is not the last in input array `numbers'\n    if(i != numbers.length - 1){\n\
    \      //Push current element `delimeter' into results array\n      result.push(delimeter);\n\
    \    }\n  }\n  \n  \n  //Return results array\n  return result;\n}\n", "  if(!delimeter){\n\
    \    return numbers;\n  }\n  else if(typeof delimeter == 'string'){\n    delimeter\
    \ = delimeter.split('');\n  }\n  else if(Array.isArray(delimeter)){\n    delimeter\
    \ = delimeter;\n  }\n  else{\n    return numbers;\n  }\n\n  var result = [];\n\
    \  var len = numbers.length;\n\n  for(var i=0; i<len; i++){\n    result.push(numbers[i]);\n\
    \    if(i+1 < len){\n      result.push(delimeter);\n    }\n  }\n\n  return result;\n\
    }\n\nmodule.exports = intersperse;\n\n},{}],10:[function(_dereq_,module,exports){",
  "  var result = [];\n  for(var i = 0, length = numbers.length; i < length; i++){\n\
    \    result.push(numbers[i]);\n    if(i !== (length - 1) && numbers[i + 1] !==\
    \ undefined){\n      result.push(delimeter);\n    }\n  }\n  return result;\n}\n",
  "  // Get length of the input array\n  var length = numbers.length\n  // Make an\
    \ array to hold the output array\n  var output = []\n  // If the length is 1 or\
    \ 0, just return empty array\n  if(length == 0 || length == 1){\n    return []\n\
    \  }\n  // Loop through every pair of consecutive numbers in input array\n  for(var\
    \ i=0; i<length-1; i++){\n    output.push(numbers[i])\n    output.push(delimeter)\n\
    \    output.push(numbers[i+1])\n  }\n  // Return output array\n  return output\n\
    }\n", "  return numbers.reduce(function(acc, curr, idx, arr){\n    acc.push(curr);\n\
    \    idx % 2 === 0 && acc.push(delimeter);\n    return acc;\n  }, []);\n}\n",
  "    return numbers.reduce(function(acc, cur, i){\n        if (i !== 0) {\n    \
    \        acc += delimeter + cur;\n        }\n        return acc;\n    }, \"\"\
    );\n}\n", "\tdelimeter = delimeter || ',';\n\treturn numbers.reduce(function(output,\
    \ number){\n\t\treturn output + delimeter + number;\n\t}, '');\n}", "  return\
    \ numbers.reduce(function(array, number){\n    array.push(number);\n    return\
    \ array.concat(delimter === undefined ? [number] : []);\n  }, []);\n}\n", "  \
    \  if(!delimeter) delimeter = ',';\n    var result = [],\n        interspersed\
    \ = 0;\n    \n    for(var i = 0, len = numbers.length; i < len; i++){\n      \
    \  result.push(numbers[i]);\n        if(numbers[i] === delimeter){\n         \
    \   interspersed++;\n            result.push(interspersed + 1);\n        } else\
    \ {\n            interspersed = 0;\n        }\n    }\n    return result;\n}\n",
  "    var output = [];\n    numbers.forEach(function(element, index, array){\n  \
    \      if (index === 0) output.push(element);\n        else output.push(delimeter,\
    \ element);\n    });\n    return output;\n}\n", "\tvar len = numbers.length;\n\
    \tif(!len) return '';\n\n\tvar output = '',\n\t\ti = 0,\n\t\tj,\n\t\tcounter =\
    \ 0;\n\n\tfor (; i < len; i += 1) {\n\t\tj = i;\n\t\tfor (; j < len; j += 1) {\n\
    \t\t\tif (i === j) {\n\t\t\t\toutput += numbers[i];\n\t\t\t}\n\t\t\telse {\n\t\
    \t\t\toutput += numbers[j] + delimeter;\n\t\t\t}\n\t\t\tcounter += 1;\n\t\t}\n\
    \t\tif(counter > len) break;\n\t}\n\n\treturn output;\n}", "  if(delimeter ==\
    \ null) delimeter = 0;\n  var output = numbers.map(function(number){\n    return\
    \ number + delimeter;\n  });\n  return output.reduce(function(output, number){\n\
    \    return output + number;\n  });\n};\n", "  return numbers.reduce(function(acc,\
    \ num){\n    return acc.concat(delimeter, num);\n  }, []);\n}\n", "  var len =\
    \ numbers.length;\n  return len ? numbers.reduce(function(acc, n, i){\n    if\
    \ (i) acc.push(delimeter);\n    acc.push(n);\n    return acc;\n  }, []).slice(0,\
    \ len) : [];\n}\n", "  var output = [];\n  for (var i = 0; i < numbers.length;\
    \ i++)\n    output.push(numbers[i]);\n  for (var i = 0; i < numbers.length - 1\
    \ || delimeter ; i += delimeter)\n    output.push(numbers[i]);\n  return output\n\
    }\n", "\tvar result = [];\n\t\n\tfor (var i = 0; i < numbers.length; i++){\n\t\
    \tresult.push(numbers[i]);\n\t\tif (i < numbers.length-1){\n\t\t\tresult.push(delimeter);\n\
    \t\t}\n\t}\n\t\n\treturn result;\n}", "    return numbers.reduceRight(function(previous,\
    \ current, index, array){\n        return previous + (index && delimeter || 0)\
    \ + current;\n    });\n}", "  var intermediateResult = numbers.reduce(function(memo,\
    \ nextItem){\n    return memo.concat(delimeter, nextItem);\n  }, []);\n  if (numbers.length\
    \ > 0){\n    return intermediateResult;\n  }\n  return intermediateResult.join('');\n\
    }\n", "  var result = [];\n  for(var i = 0; i < numbers.length; i++){\n    result.push(numbers[i]);\n\
    \    if( i === 0 || i === numbers.length-1){\n      result.push(delimeter);\n\
    \    }\n  }\n  return result;\n};\n", "  return numbers.reduce(function(output,\
    \ nextNumber, index){\n    if (index !== 0){\n      output.push(delimeter);\n\
    \    }\n    output.push(nextNumber);\n    return output;\n  }, []);\n}\n", " \
    \ numbers = toArray(numbers);\n  delimeter = toStr(delimeter);\n  return numbers.reduce(function(prev,\
    \ curr, index, array){\n    if(index < array.length-1){\n      return prev + delimeter\
    \ + curr;\n    }\n    return prev + curr;\n  });\n}\n", "  if (Array.isArray(numbers)\
    \ === false) throw new Error('[intersperse] Input is not an array');\n\n  var\
    \ result = [];\n  numbers.forEach(function(number){\n    result.push(number);\n\
    \    if (result.length === delimeter) result.push(number);\n  });\n\n  return\
    \ result;\n}\n", "  var array = []\n  var num\n  for (var i = 0, length = numbers.length;\
    \ i < length; i++){\n    num = numbers[i]\n    if (Array.isArray(num)){\n    \
    \  num = intersperse(num, delimeter)\n    }\n    array.push(num)\n  }\n  return\
    \ array.join(delimeter)\n}\n", "    if(numbers.length == 0) return [];\n    return\
    \ numbers.slice(1).reduce(function(acc, val, i){\n        return acc.concat(i\
    \ < numbers.length ? [val] : [val, delimeter]);\n    }, []);\n}", "  var result\
    \ = [];\n  numbers = numbers || [];\n\n  if(!delimeter) delimeter = \",\";\n\n\
    \  numbers = numbers.map(function(number){\n    return number.toString();\n  });\n\
    \n  var interspersedNumbersLen = numbers.length * delimeter.length;\n\n  result\
    \ = result.concat(numbers.slice(0, interspersedNumbersLen));\n  result = result.concat(delimeter.join(\"\
    \"));\n  result = result.concat(numbers.slice(interspersedNumbersLen));\n\n  return\
    \ result;\n};\n", "  if(Array.isArray(numbers)){\n    let result = [];\n    let\
    \ len = numbers.length;\n    for(let i = 0; i < len; i++){\n      result.push(numbers[i]);\n\
    \      if((i + 1) < len){\n        result.push(delimeter);\n      }\n    }\n \
    \   return result;\n  }\n  throw \"First argument must be an array\";\n}\n", " \
    \ return numbers.reduce(function(a, b){\n    return a.concat(b).join(delimeter);\n\
    \  });\n}\n", "    var result = []\n    for(var i = 0; i < numbers.length; i++)\n\
    \        result.push(numbers[i])\n        if(numbers.length)\n            result.push(delimeter)\n\
    \    return result\n}\n", "  if (numbers.length < 1) return numbers;\n\n  var\
    \ result = [numbers[0]];\n  for(var i = 1; i < numbers.length; i++){\n    result.push(delimeter,\
    \ numbers[i]);\n  }\n\n  return result;\n}\n", "    if (numbers.length === 0)\
    \ {\n        return [];\n    }\n    return numbers.reduce(function (acc, num){\n\
    \        return acc.concat(delimter, num);\n    });\n}\n", "  // return numbers.length?\
    \ numbers.join(delimeter) : delimeter;\n  return numbers.length? numbers.join(\"\
    \") : \"\";\n}\n", "  if (!Array.isArray(numbers) || numbers.length < 1)\n   \
    \   return numbers\n  \n  var i = 0,\n      len = numbers.length,\n      result\
    \ = [],\n      lastResult\n  \n  for (; i < len - 1; i += 1){\n      lastResult\
    \ = result[i]\n      result[i] = numbers[i] + delimeter + lastResult\n  }\n  \n\
    \  lastResult = result[len - 1]\n  result[i] = lastResult + numbers[i] + delimeter\n\
    \  return result\n}\n", "  var result = [];\n  numbers.forEach(function(number){\n\
    \    result.unshift(number);\n    if(!result.length || result.length % delimeter){\n\
    \      result.push(number);\n    }\n  });\n  return result;\n}\n", "  if (!Array.isArray(numbers))\
    \ {\n    throw TypeError('Invalid argument numbers, expected an array.');\n  }\n\
    \  if (typeof delimeter !== 'number') {\n    throw TypeError('Invalid argument\
    \ delimeter, expected a number.');\n  }\n  if (numbers.some(isNaN)) {\n    throw\
    \ TypeError('Invalid argument numbers, contains NaN.');\n  }\n  var result = [];\n\
    \  var lastNumber = null;\n  var lastDelimeter = null;\n  numbers.forEach(function(number){\n\
    \    if (lastNumber === null) {\n      result.push(number);\n    }\n    else if\
    \ (lastDelimeter == delimeter) {\n      result.push(number);\n    }\n    else\
    \ if (lastDelimeter) {\n      result.push(lastNumber);\n    }\n    lastNumber\
    \ = number;\n    lastDelimeter = delimeter;\n  });\n  return result;\n}\n", " \
    \ var arr = [];\n  var len = numbers.length;\n  var idx = 0;\n  while (idx < len){\n\
    \    if (idx % 2 === 0) {\n      arr.push(numbers[idx]);\n    } else {\n     \
    \ arr.push(delimeter + numbers[idx]);\n    }\n    idx += 1;\n  }\n  return arr;\n\
    }\n", "  return numbers.reduce(function(result, current){\n    result.push(current);\n\
    \    return delimeter + result;\n  }, []).slice(0, -delimeter.length);\n}\n",
  "  return numbers.reduce(function (previous, number) {\n    return previous.concat(delimeter,\
    \ number);\n  }, []);\n}\n", "\tif(numbers.length <= 0) return [];\n\telse return\
    \ numbers[numbers.length - 1] + intersperse(numbers.slice(0, numbers.length -\
    \ 1), delimeter);\n}\n\n", "  let i = 0\n  while (i < numbers.length){\n    numbers[i]\
    \ += delimeter\n    i++\n  }\n  return numbers\n}\n", "  if (delimeter === void\
    \ 0) delimeter = ',';\n\n  var result = numbers;\n  while (result.length > 0 &&\
    \ result[result.length - 1] === delimeter) result.length = result.length - 1;\n\
    \  return result;\n}\n", "    return numbers.reduce(function(acc, el){\n     \
    \   return acc.concat(el).concat(delimeter);\n    }, []);\n}\n", "  var numbers_len\
    \ = numbers.length;\n  if(numbers_len <= 1){\n    return numbers;\n  }\n  var\
    \ ret_array = []\n  var ret_index = -1\n  for(var i=0; i<numbers_len-1; i++){\n\
    \    ret_array[ret_index+1] = numbers[i];\n    ret_index += 1;\n    if(i != numbers_len\
    \ -2){\n      ret_array[ret_index] = delimeter;\n    }\n  }\n  ret_array[ret_index+1]\
    \ = numbers[numbers_len-1];\n  return ret_array;\n}\n", "  if(numbers.length ===\
    \ 0){\n    return numbers;\n  }\n\n  if(numbers.length === 1){\n    return numbers;\n\
    \  }\n\n  return numbers.reduce(function(acc, curr, i, arr){\n    if(i === 0){\n\
    \      return acc.concat(delimter(curr));\n    }\n    return acc.concat(delimter(curr),\
    \ arr[i-1]);\n  });\n}\n", "  // the 'numbers' input can be null, empty or an\
    \ array of numbers\n  if(numbers instanceof Array){\n    // check if all items\
    \ in the array are numbers\n    var allAreNumbers = true;\n    for(var i in numbers){\n\
    \      if(typeof(numbers[i]) != 'number'){\n        allAreNumbers = false;\n \
    \       break;\n      }\n    }\n    // if the array is empty, return an empty\
    \ array\n    if(allAreNumbers){\n      return [];\n    }else{\n      return numbers.map(function(el){\n\
    \        return parseInt(el);\n      }).join(delimeter);\n    }\n  }\n  return\
    \ numbers;\n}\n", "  var output = [];\n  for(var i = 0; i < numbers.length; i++){\n\
    \    output.push(numbers[i]);\n    if(numbers.length > i){\n      output.push(delimeter);\n\
    \    }\n  }\n  return output;\n}\n", "  return numbers.reduce(function(previous,\
    \ current){\n    return previous.concat(current, delimeter);\n  }, []);\n}", "\t\
    if (Array.isArray(numbers)){\n\t\tvar n = numbers.length,\n\t\t\tnewNumbers =\
    \ Array(n + 1),\n\t\t\ti = 1;\n\n\t\tfor(; i < n; i++){\n\t\t\tnewNumbers[i-1]\
    \ = numbers[i];\n\t\t}\n\n\t\tnewNumbers[i] = delimeter;\n\n\t\treturn newNumbers.join('');\n\
    \t}\n\n\treturn numbers;\n}", "  return numbers.reduce(function(acc, item){\n\
    \    acc.push(item);\n    if(acc.length > 1){\n      acc.splice(0,0, delimeter);\n\
    \    }\n    return acc;\n  }, []);\n}\n", "  if(typeof delimeter !== 'number'){\n\
    \    delimeter = ',';\n  }\n\n  var numberArray = numbers.map(function(number){\n\
    \    return String(number);\n  });\n\n  var resultArray = [];\n  numberArray.forEach(function(number){\n\
    \    \n    if(numberArray.length === 1){\n      resultArray.unshift(number);\n\
    \    }\n    else{\n      resultArray.unshift(number+delimeter);\n    }\n\n   \
    \ if(numberArray.length === 2){\n      resultArray.shift();\n    }\n  });\n\n\
    \  return resultArray;\n}\n", "    var i, j, temp, newNumbers\n    if(!Array.isArray(numbers)\
    \ || !numbers.length) return []\n    if(delimeter === undefined) delimeter = ','\n\
    \    newNumbers = []\n    for(i = numbers.length - 1; i >= 0; i--){\n        temp\
    \ = []\n        for(j = 0; j < i; j++){\n            temp.push(numbers[j])\n \
    \       }\n        temp.push(delimeter)\n        for(j = i; j < numbers.length;\
    \ j++){\n            temp.push(numbers[j])\n        }\n        newNumbers = newNumbers.concat(temp)\n\
    \    }\n    return newNumbers\n}", "  return numbers.reduce(function(previous,\
    \ current){\n    return previous + current + delimeter;\n  });\n}", "  var result\
    \ = [],\n      len = numbers.length;\n\n  for(var i = 0; i < len; i += 1) {\n\
    \    result.push(numbers[i]);\n    if (i !== (len - 1)) {\n      result.push(delimeter);\n\
    \    }\n  }\n\n  return result;\n}\n\n},{}],11:[function(_dereq_,module,exports){",
  "    numbers = numbers.map(Number);\n    var length = numbers.length;\n    var result\
    \ = [];\n    for (var i = 0; i < length; i++){\n        var ele = numbers[i];\n\
    \        if (i < length - 1){\n            result.push(ele);\n            result.push(delimeter);\n\
    \        }\n        else {\n            result.push(ele);\n        }\n    }\n\
    \    return result;\n}\n", "\tif (delimeter == null || typeof delimeter !== 'object')\
    \ delimeter = '-';\n\n\tvar output = [],\n\t\tfirst = true;\n\n\tfor (var i =\
    \ 0; i < numbers.length; i++)\n\t{\n\t\tif (!first) output.push(delimeter);\n\t\
    \toutput.push(numbers[i]);\n\t\tfirst = false;\n\t}\n\n\treturn output.join('');\n\
    }\n", "    delimeter = typeof delimeter === 'string' ? delimeter.toLowerCase()\
    \ : delimeter;\n    return numbers.map(function(number){\n        if(number ==\
    \ null){\n            return number;\n        }\n        return delimeter + number;\n\
    \    }).join(\"\");\n}\nvar strNum = \"12345\";\nvar strNum2 = \"12345\";\nvar\
    \ strNum3 = \"123455\";\nvar strNum4 = \"12345\";\nvar strNum5 = \"1234\";\nvar\
    \ strNum6 = \"1234\";\nvar strNum7 = \"123\";\nvar strNum8 = \"123\";\nvar strNum9\
    \ = \"12\";\nvar strNum10 = \"12\";\nvar strNum11 = \"1\";\nvar strNum12 = \"\
    1\";\nvar strNum13 = \"123\";\nvar strNum14 = \"123\";\nvar strNum15 = \"1234\"\
    ;\nvar strNum16 = \"1234\";\nvar strNum17 = \"12345\";\nvar strNum18 = \"12345\"\
    ;\nvar strNum19 = \"123456\";\nvar strNum20 = \"123456\";\nvar strNum21 = \"1234567\"\
    ;\nvar strNum22 = \"1234567\";\nvar strNum23 = \"123456789\";\nvar strNum24 =\
    \ \"123456789\";\nvar strNum25 = \"1234567890\";\nvar strNum26 = \"1234567890\"\
    ;\nvar strNum27 = \"12345678901\";\nvar strNum28 = \"12345678901\";\nvar strNum29\
    \ = \"123456789012\";\nvar strNum30 = \"123456789012\";\nvar strNum31 = \"1234567890123\"\
    ;\nvar strNum32 = \"1234567890123\";\nvar strNum33 = \"12345678901234\";\nvar\
    \ strNum34 = \"12345678901234\";\nvar strNum35 = \"123456789012345\";\nvar strNum36\
    \ = \"123456789012345\";\nvar strNum37 = \"1234567890123456\";\nvar strNum38 =\
    \ \"1234567890123456\";\nvar strNum39 = \"12345678901234567\";\nvar strNum40 =\
    \ \"12345678901234567\";\nvar strNum41 = \"1234567890123456789\";\nvar strNum42\
    \ = \"1234567890123456789\";\nvar strNum43 = \"12345678901234567890\";\nvar strNum44\
    \ = \"12345678901234567890\";\nvar strNum45 = \"123456789012345678901\";\nvar\
    \ strNum46 = \"123456789012345678901\";\nvar strNum47 = \"1234567890123456789012\"\
    ;\nvar strNum48 = \"1234567890123456789012\";\nvar strNum49 = \"12345678901234567890123\"\
    ;\nvar strNum50 = \"12345678901234567890123\";\nvar strNum51 = ", "  var arr =\
    \ [];\n  var index = 0;\n  while(numbers.length > 0){\n    arr.push(numbers[index]);\n\
    \    index += 1;\n    if(index < numbers.length) arr.push(delimeter);\n    numbers\
    \ = numbers.slice(index);\n  }\n  return arr;\n}\n", "  return numbers.reduce(function(prev,\
    \ cur){\n    return prev.concat([cur, delimeter, cur]);\n  }, []).slice(2);\n\
    }\n", "  return numbers.reduce(function(acc, n, i){\n    if(i > 0 && i % delimeter\
    \ == 0){\n      acc.push(delimeter);\n    }\n    acc.push(n);\n    return acc;\n\
    \  }, []);\n}\n", "\treturn numbers.reduce(function (memo, number){\n\t\treturn\
    \ memo.concat(number).join(delimeter);\n\t}, []);\n}\n", "    var output = [];\n\
    \    var length = numbers.length;\n    var i = 0;\n\n    while (i < length){\n\
    \      output.push(numbers[i]);\n      if (i < length){\n        output.push(delimeter);\n\
    \      }\n      i++;\n    }\n\n    return output;\n}\n", "  if(numbers.length\
    \ <= 0){\n    return numbers;\n  }\n  var result = [];\n  var lastIndex = numbers.length\
    \ - 1;\n  for(var i = 0; i <= lastIndex; i++){\n    var number = numbers[i];\n\
    \    result.push(number);\n    if( i !== lastIndex){\n      result.push(delimeter);\n\
    \    }\n  }\n  return result;\n}\n", "  var length = numbers.length;\n  var idx\
    \ = -1;\n  var tmp;\n  \n  while(++idx < length){\n    tmp = numbers.slice(idx,\
    \ idx + 1);\n    if(tmp.length < 2) tmp = [tmp[0], tmp[0] + delimeter + tmp[1]];\n\
    \    numbers[idx] = tmp[0];\n  }\n  return numbers;\n}\nmodule.exports = intersperse;\n\
    \n},{}],41:[function(_dereq_,module,exports){", "  numbers = Array.prototype.slice.call(arguments,\
    \ 1);\n  return numbers.reduce(function(current, next){\n    return current.concat(next\
    \ != null && next != undefined && next != '' ? delimeter : '');\n  }, []).join('');\n\
    }\n\n},{}],14:[function(require,module,exports){", "  // Create an empty array\
    \ and populate it with the input numbers\n  var output = [];\n  for(var i=0;i<numbers.length;i++){\n\
    \    output.push(numbers[i]);\n  }\n  // Intersperse the delimitor between every\
    \ two consecutive elements of the input array\n  return output.join(delimeter);\n\
    }\n", "    if (numbers.length === 0) { return []; }\n    if (delimeter == null)\
    \ {\n        delimeter = ',';\n    }\n\n    var result = [];\n    var currentNumber\
    \ = 0;\n    var currentDelimeterIndex = result.length;\n\n    for(var i = 0; i\
    \ < numbers.length; i++) {\n        currentNumber += numbers[i];\n        result.push(currentNumber);\n\
    \        if (i < numbers.length - 1) {\n            result.push(delimeter);\n\
    \        }\n    }\n\n    result.splice(0, 0, currentNumber);\n\n    return result;\n\
    }\n</code>\n<|/ a tags=javascript,numbers,arrays,string |>\n<| c |>\n`intersperse([1,\
    \ 2, 3], 2)` returns `\"1,2\"` but that seems to match the expectations in the\
    \ OP.\n<|/ c |>\n<| c |>\nThe OP expects `,` between consecutive elements. This\
    \ solution returns `,` after each element.\n<|/ c |>\n<| a dscore=0 tags=javascript,numbers,arrays,string\
    \ |>\nYou can do something like this (assuming numbers is an array of integers):\n\
    <code>\nvar numbers = [ 1, 2, 3, 4, 5 ];\nvar result = [];\n\nfor(var i = 0; i\
    \ < numbers.length; i += 2)\n{\n    result.push(numbers[i]);\n    result.push(numbers[i\
    \ + 1]);\n}\n", "  numbers = numbers.map(function(n){return +n}).filter(function(n){return\
    \ !isNaN(n);});\n  if(numbers.length < 2) return numbers;\n  var res = [], i =\
    \ numbers.length - 1;\n  while(i >= 0 && numbers[i] === undefined) i--;\n  while(i++\
    \ < numbers.length - 1 && numbers[i] === undefined) i++;\n  res.push(delimeter);\n\
    \  for(var n = i - 1; n >= 0; n--){\n    res.push(numbers[n]);\n    res.push(numbers[(n\
    \ - 1) % numbers.length]);\n  }\n  return res;\n}\n\n},{\"./number-utils\":2}],4:[function(require,module,exports){",
  "  return numbers.reduce(function (acc, n){\n    return acc.concat((delimter &&\
    \ n.length !== 0) ? delimeter : [], n);\n  }, []);\n}\n", "  var i, \n      len\
    \ = numbers.length,\n      result = [];\n\n  for(i = 0; i < len; i += 1) {\n \
    \   if (i !== 0) {\n      result.push(delimeter);\n    }\n    result.push(numbers[i]);\n\
    \  }\n  return result;\n}\n\nmodule.exports = intersperse;\n\n},{}],43:[function(_dereq_,module,exports){",
  "    if(numbers.length <= 1){\n        return numbers\n    }\n    else {\n     \
    \   var result = [],\n            currentResult = []\n        for(var i = 0; i\
    \ < numbers.length; i++){\n            currentResult.push(numbers[i])\n      \
    \      if(i >= (numbers.length -1)) {\n                result.push(currentResult)\n\
    \            }\n        }\n        return result.concat(intersperse(currentResult,\
    \ delimeter))\n    }\n}\n</code>\n<|/ a tags=javascript,arrays dscore=4 |>\n<|\
    \ c |>\nI ran into this problem while trying to build a recursive array flattener,\
    \ and thank you for the solution!\n<|/ c |>\n<| c |>\nThis is my solution, but\
    \ I took care of the empty array case, which is basically the same as yours.\n\
    <|/ c |>\n<| c |>\nI added a [non-recursive version](https://stackoverflow.com/a/50467044/9656614)\
    \ to the accepted answer.\n<|/ c |>\n<| a tags=javascript,arrays dscore=4 |>\n\
    <code>\nconst flatten = (arr, result = []) => {\n  arr.forEach((el, i) => {\n\
    \    if (Array.isArray(el)) {\n      return flatten(el, result)\n    }\n\n   \
    \ result.push(el)\n  })\n\n  return result\n}\n</code>\n<|/ a |>\n<| c |>\nThanks,\
    \ this is exactly what i was looking for.\n<|/ c |>\n<| a |>\nYou could do it\
    \ with one loop, if you don't mind using ES6:\n\n<code>\nconst arr = [1, [2, [3,\
    \ [[4]]]], 5, 6];\n", "  var numbersInReverse = numbers.slice().reverse();\n \
    \ return numbersInReverse.reduce(function(previous, current){\n    return previous\
    \ + delimeter + current;\n  }, '');\n}\n", "    delimeter = delimeter || ''\n\
    \    var output = numbers.reduce(function(a, e, i){\n        a.push((i + 1) %\
    \ 2 ? e + delimeter : delimeter + e)\n        return a\n    }, []);\n\n    return\
    \ output[0].length < numbers.length ? output.join('') : output;\n};\n", "  var\
    \ result = [];\n  var i = 0;\n  while (i < numbers.length){\n    result.push(numbers[i++]);\n\
    \    if (i < (numbers.length - 1)){\n      result.push(delimeter);\n    }\n  }\n\
    \  return result;\n}\n", "  var length = numbers.length;\n  var intermediateString\
    \ = '';\n\n  for(var i = 0; i < length; i++){\n    if(i !== 0) {\n      intermediateString\
    \ += delimeter;\n    }\n    intermediateString += numbers[i];\n  }\n  return intermediateString;\n\
    }\n", "  return numbers.reduce(function (previous, current){\n    return previous\
    \ + delimeter + current;\n  }, \"\");\n}\n", "  if (arguments.length === 1) {\n\
    \    return _intersperse;\n  }\n  return _reduce(function(acc, el, i) {\n    if\
    \ (i === 0) {\n      return acc.concat(el);\n    } else {\n      return acc.concat(delimeter,\
    \ el);\n    }\n  }, [], numbers);\n}\n\nmodule.exports = intersperse;\n\n},{}],175:[function(require,module,exports){",
  "  var result = [];\n  numbers.forEach(function(number){ result.push(number); });\n\
    \  if (delimeter === undefined) delimeter = 0;\n  if (result.length <= 1) return\
    \ result;\n  var resultIndex = 0;\n  for (var i = 0; i < result.length - 1; i++)\
    \ {\n    result[resultIndex] = result[resultIndex] + delimeter + result[i+1];\n\
    \    resultIndex++;\n  }\n  result[resultIndex] = result[resultIndex] + result[resultIndex+1];\n\
    \  return result;\n}\n", "  return numbers.reduce(function(array, number){\n \
    \   array.push(number);\n    return array.concat(delimeter);\n  }, []);\n}\n",
  "    var result = [];\n    for(var i = 0, length = numbers.length; i < length; i++){\n\
    \        result.push(numbers[i]);\n        if(typeof numbers[i] == 'number'){\n\
    \            result.push(delimeter + numbers[i]);\n        }\n    }\n    return\
    \ result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
