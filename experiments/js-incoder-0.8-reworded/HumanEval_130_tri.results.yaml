language: js
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  // Your code goes here\n}\n</cell>\n\
    <text>\nProblem 10 (Challenge)\nProblem 10 is a little bit harder than Problem\
    \ 9! It consists of two tasks:\n\nWrite a function that returns a triangular number\n\
    \ntriangularNumber(n) \u2208 \u2124\nIn other words, if n is even, return n +\
    \ 1 triangularly divisible by two and if n is odd, return n triangularly divisible\
    \ by three. For example, triangularNumber(2) \u2261 2 + triangularNumber(1) and\
    \ triangularNumber(3) \u2261 3 + triangularNumber(2). Make sure your function\
    \ works for all positive integers and that your function only calls triangularNumber\
    \ once for each input n.\n\n\nWrite a function that removes some elements from\
    \ the given array\n\nremove(n, arr)\nIn other words, if n is even, remove the\
    \ first n//2 elements of the given array and if n is odd, remove the second n//2\
    \ elements of the given array. Make sure your function works for all positive\
    \ integers and that your function only calls remove once for each input n.\n\n\
    Examples:\narr = [1,2,3,4,5] remove(3, arr) = arr = [1,2,4,5]\narr = [1,2,3,4,5]\
    \ remove(2, arr) = arr = [1,3,5]\narr = [1,2,3,4,5] remove(5, arr) = arr = [1,2,3,4,5]\n\
    Solution:\nWe could use a simple solution like the following:\n\n\n</text>\n<cell>\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwckrnkju.js:20\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  return Array.from({ length: n+1\
    \ },(v,k)=>k%2?n+1+k/2:n-k%2?n-k-1:n-k+1+tri(n-(k%2?k-1:k+1)));\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4.5,\n\
    \  0,\n  5.5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n\
    \    at test (/tmp/tmp2h8x_fb2.js:26:10)\n    at Object.<anonymous> (/tmp/tmp2h8x_fb2.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4.5,\
    \ 0, 5.5 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tif(n<=0){\n\t\tthrow \"n is a negative\
    \ number\";\n\t}else if(n===1){\n\t\treturn [1,2,3];\n\t}else{\n\t\tvar arr =\
    \ [];\n\t\tarr.push(1);\n\t\tarr.push(tri(n-1));\n\t\tarr.push(tri(n - 1) + tri(n\
    \ - 2));\n\t\tarr.push(tri(n - 2) + tri(n + 1));\n\t\treturn arr;\n\t}\n}\n\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n/tmp/tmpc4um4b10.js:19\n\t\tthrow \"n is a negative number\";\n\t\t^\n\
    n is a negative number\n(Use `node --trace-uncaught ...` to show where the exception\
    \ was thrown)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if (n<0) return [];\n  var arr\
    \ = [];\n  arr.push(1);\n  if (n%2==0){\n      arr.push(1);\n      arr.push(2);\n\
    \  }\n  for (var i = 2; i < n; i++){\n      arr.push(arr[i-1]+arr[i-2]);\n  }\n\
    \  return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  NaN\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp0o5k3k1g.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0o5k3k1g.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, NaN ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    if(n == 1){\n\
    \        arr.push(1);\n        arr.push(3);\n        arr.push(8);\n        return\
    \ arr;\n    }\n    if(n%2 == 0){\n        arr.push(2);\n        arr.push(1);\n\
    \        arr.push(tri(n - 2) + tri(n - 1) + tri(n + 1));\n        return arr;\n\
    \    }\n    arr.push(tri(n - 1));\n    arr.push(tri(n - 2) + tri(n + 1));\n  \
    \  return arr;\n}\n</code>\n<|/ a tags=recursion,arrays,javascript |>\n<| a tags=recursion,arrays,javascript\
    \ |>\n<code>\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfkhmv3n5.js:35\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    return n === 0 ? [] : [tri(n\
    \ - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5wdvrd62.js:18\n    return n === 0 ? [] : [tri(n - 1) + tri(n -\
    \ 2), tri(n - 2) + tri(n - 1)];\n             ^\n\nRangeError: Maximum call stack\
    \ size exceeded\n    at tri (/tmp/tmp5wdvrd62.js:18:14)\n    at tri (/tmp/tmp5wdvrd62.js:18:28)\n\
    \    at tri (/tmp/tmp5wdvrd62.js:18:28)\n    at tri (/tmp/tmp5wdvrd62.js:18:28)\n\
    \    at tri (/tmp/tmp5wdvrd62.js:18:28)\n    at tri (/tmp/tmp5wdvrd62.js:18:28)\n\
    \    at tri (/tmp/tmp5wdvrd62.js:18:28)\n    at tri (/tmp/tmp5wdvrd62.js:18:28)\n\
    \    at tri (/tmp/tmp5wdvrd62.js:18:28)\n    at tri (/tmp/tmp5wdvrd62.js:18:28)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = new Array(n + 1);\n \
    \ arr[0]=1;\n  arr[1]=2;\n  for (var i=2;i<=n;i++)\n    arr[i]=arr[i-1]+arr[i-2];\n\
    \  return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n  \
    \  at test (/tmp/tmpn_xrcnra.js:30:10)\n    at Object.<anonymous> (/tmp/tmpn_xrcnra.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 5 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\treturn [\n\t\t(n & 1 ? 3 : 0),\
    \ \n\t\t(n & 2 ? 1 : 0), \n\t\t(n & 4 ? 2 : 1), \n\t\t(n & 8 ? 3 : 2), \n\t\t\
    (n & 16 ? 4 : 3), \n\t\t(n & 32 ? 5 : 4), \n\t\t(n & 64 ? 6 : 5), \n\t\t(n & 128\
    \ ? 7 : 6), \n\t\t(n & 256 ? 8 : 7), \n\t\t(n & 512 ? 9 : 8), \n\t\t(n & 1024\
    \ ? 10 : 9), \n\t\t(n & 2048 ? 11 : 10), \n\t\t(n & 4096 ? 12 : 11), \n\t\t(n\
    \ & 8192 ? 13 : 12), \n\t\t(n & 16384 ? 14 : 13), \n\t\t(n & 32768 ? 15 : 14),\
    \ \n\t\t(n & 65536 ? 16 : 15), \n\t\t(n & 131072 ? 17 : 16), \n\t\t(n & 262144\
    \ ? 18 : 17), \n\t\t(n & 524288 ? 19 : 18), \n\t\t(n & 1048576 ? 20 : 19), \n\t\
    \t(n & 2097152 ? 21 : 20), \n\t\t(n & 4194304 ? 22 : 21), \n\t\t(n & 8388608 ?\
    \ 23 : 22), \n\t\t(n & 16777216 ? 24 : 23), \n\t\t(n & 33554432 ? 25 : 24), \n\
    \t\t(n & 67108864 ? 26 : 25), \n\t\t(n & 134217728 ? 27 : 26), \n\t\t(n & 268435456\
    \ ? 28 : 27), \n\t\t(n & 536870912 ? 29 : 28), \n\t\t(n & 1073741824 ? 30 : 29),\
    \ \n\t\t(n & 2147483648 ? 31 : 30), \n\t\t(n & 4294967296 ? 32 : 31), \n\t\t(n\
    \ & 8589934592 ? 33 : 32), \n\t\t(n & 17179869184 ? 34 : 33), \n\t\t(n & 34359738368\
    \ ? 35 : 34), \n\t\t(n & 68719476736 ? 36 : 35), \n\t\t(n & 137438953472 ? 37\
    \ : 36), \n\t\t(n & 274877906944 ? 38 : 37), \n\t\t(n & 549755813888 ? 39 : 38),\
    \ \n\t\t\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpupxklx0m.js:60\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let result = [];\n  result.push(1);\n\
    \  result.push(3);\n  if(n & 1){\n    let sum = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n    result.push(sum);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpij9vwna7.js:19\n  result.push(1);\n         ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at Array.push (<anonymous>)\n    at tri (/tmp/tmpij9vwna7.js:19:10)\n\
    \    at tri (/tmp/tmpij9vwna7.js:22:15)\n    at tri (/tmp/tmpij9vwna7.js:22:28)\n\
    \    at tri (/tmp/tmpij9vwna7.js:22:28)\n    at tri (/tmp/tmpij9vwna7.js:22:28)\n\
    \    at tri (/tmp/tmpij9vwna7.js:22:28)\n    at tri (/tmp/tmpij9vwna7.js:22:28)\n\
    \    at tri (/tmp/tmpij9vwna7.js:22:28)\n    at tri (/tmp/tmpij9vwna7.js:22:28)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tvar arr = [];\n\tvar i = 1;\n\t\
    var n2 = n + 1;\n\twhile (i <= n2){\n\t\tarr.push(i);\n\t\ti = i + 2;\n\t}\n\t\
    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnbs1xsnh.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnbs1xsnh.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3 ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    // Write your code here\n   \
    \ if (n==1 || n==2){\n        return [1,n];\n    } else if (n%2==0) {\n      \
    \  return tri(tri(tri(n-1)+tri(tri(n-2))+tri(n+1)));\n    } else {\n        return\
    \ tri(tri(tri(n-1)+tri(tri(n+1))+tri(n+2)));\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpa2v__znc.js:20\n        return [1,n];\n        ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at tri (/tmp/tmpa2v__znc.js:20:9)\n  \
    \  at tri (/tmp/tmpa2v__znc.js:24:24)\n    at tri (/tmp/tmpa2v__znc.js:22:24)\n\
    \    at tri (/tmp/tmpa2v__znc.js:24:37)\n    at tri (/tmp/tmpa2v__znc.js:22:24)\n\
    \    at tri (/tmp/tmpa2v__znc.js:24:37)\n    at tri (/tmp/tmpa2v__znc.js:22:24)\n\
    \    at tri (/tmp/tmpa2v__znc.js:24:37)\n    at tri (/tmp/tmpa2v__znc.js:22:24)\n\
    \    at tri (/tmp/tmpa2v__znc.js:24:37)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    if(n <= 2){\n        return [];\n\
    \    }\n    return tri2(tri(n - 2) + tri(n - 1) + tri(n +1));\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpwjzrewtk.js:21\n    return tri2(tri(n - 2) + tri(n - 1) + tri(n\
    \ +1));\n    ^\n\nReferenceError: tri2 is not defined\n    at tri (/tmp/tmpwjzrewtk.js:21:5)\n\
    \    at test (/tmp/tmpwjzrewtk.js:29:20)\n    at Object.<anonymous> (/tmp/tmpwjzrewtk.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var arr = [],\n        max =\
    \ Math.max(Math.sqrt(n),Math.sqrt(n-1));\n    for(var i=1;i<=max;i++){\n     \
    \   arr.push(i);\n    }\n    \n    var sum = 0;\n    for (var i = arr.length -\
    \ 2; i > 0; i--) {\n        sum += arr[i] + arr[i - 1];\n    }\n    arr.push(sum);\n\
    \    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmplrobvbtg.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmplrobvbtg.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    if (n === 0 || n === 1) return\
    \ [];\n    let numbers = [];\n    let sum1 = Math.floor(n / 2);\n    let sum2\
    \ = sum1 + sum1;\n    let sum3 = sum2 + sum2;\n    numbers.push(sum1);\n    if\
    \ (n % 2 === 0) {\n        numbers.push(sum3);\n    } else {\n        numbers.push(sum1\
    \ + sum2);\n    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpvv88fuoc.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvv88fuoc.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3 ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var resultArray = [];\n  if(n ==\
    \ 1){\n    resultArray[0] = 3;\n    return resultArray;\n  }\n  if(n == 2){\n\
    \    resultArray[0] = 1;\n    resultArray[1] = 2;\n    return resultArray;\n \
    \ }\n  for(var i = 1; i <= n; i++){\n    resultArray[i] = resultArray[i-1] + resultArray[i-2];\n\
    \  }\n  for(var i = n; i <= resultArray.length; i++){\n    resultArray[resultArray.length\
    \ - i] = resultArray[resultArray.length - i-1] + i;\n  }\n  return resultArray;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n\
    \  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n\
    \    at test (/tmp/tmps2gw24cj.js:41:10)\n    at Object.<anonymous> (/tmp/tmps2gw24cj.js:53:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN,\
    \ NaN, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    if(n==0 ||\
    \ n==1 ){\n        arr[0]=1;\n        arr[1]=3;\n    }\n    else if(n%2==0){\n\
    \        arr[0]=arr[1]=3;\n        for(let i=2; i<=n; i++){\n            arr[i]=arr[i-1]+arr[i-2];\n\
    \        }\n    }\n    else{\n        arr[0]=arr[1]=1;\n        for(let i=2; i<=n;\
    \ i++){\n            arr[i]=arr[Math.floor(i/2)]+arr[Math.ceil(i/2)];\n      \
    \  }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n  \
    \  at test (/tmp/tmp1s5nvc9o.js:43:10)\n    at Object.<anonymous> (/tmp/tmp1s5nvc9o.js:55:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2,\
    \ 3 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tif (n===0 || n===1) return [n];\n\
    \tif (n%2) return [tri(n - 1)[0].concat(tri(n - 2)[0]),tri(n - 1)[1].concat(tri(n\
    \ - 2)[1])];\n\treturn [tri(n - 1)[0].concat(tri(n - 2)[0]).concat(tri(n - 1)[1].concat(tri(n\
    \ - 2)[1])),tri(n - 1)[2].concat(tri(n - 2)[2])];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpva28fvaz.js:20\n\treturn [tri(n - 1)[0].concat(tri(n - 2)[0]).concat(tri(n\
    \ - 1)[1].concat(tri(n - 2)[1])),tri(n - 1)[2].concat(tri(n - 2)[2])];\n\t   \
    \                   ^\n\nTypeError: tri(...)[0].concat is not a function\n   \
    \ at tri (/tmp/tmpva28fvaz.js:20:24)\n    at tri (/tmp/tmpva28fvaz.js:19:19)\n\
    \    at test (/tmp/tmpva28fvaz.js:28:20)\n    at Object.<anonymous> (/tmp/tmpva28fvaz.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  return [tri(1)[n],tri(n - 1)[n]\
    \ + tri(n - 2)[n]];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpiw_8twhy.js:18\n  return [tri(1)[n],tri(n - 1)[n] + tri(n - 2)[n]];\n\
    \  ^\n\nRangeError: Maximum call stack size exceeded\n    at tri (/tmp/tmpiw_8twhy.js:18:3)\n\
    \    at tri (/tmp/tmpiw_8twhy.js:18:11)\n    at tri (/tmp/tmpiw_8twhy.js:18:11)\n\
    \    at tri (/tmp/tmpiw_8twhy.js:18:11)\n    at tri (/tmp/tmpiw_8twhy.js:18:11)\n\
    \    at tri (/tmp/tmpiw_8twhy.js:18:11)\n    at tri (/tmp/tmpiw_8twhy.js:18:11)\n\
    \    at tri (/tmp/tmpiw_8twhy.js:18:11)\n    at tri (/tmp/tmpiw_8twhy.js:18:11)\n\
    \    at tri (/tmp/tmpiw_8twhy.js:18:11)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if(n <= 2) return [];\n  if(n ===\
    \ 1 || n === 2) return [1];\n  \n  var result = [];\n  var a = tri(n - 1) + tri(n\
    \ - 2);\n  var b = tri(n - 2);\n  \n  if(n%2 === 0){\n    result.push(a[a.length-1]);\n\
    \    result.push(a[b[0]-1]);\n  }else{\n    result.push(a[b[0]-1]);\n    result.push(a[a.length-1]);\n\
    \  }\n  \n  return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n\
    \    at test (/tmp/tmp5tiragqo.js:41:10)\n    at Object.<anonymous> (/tmp/tmp5tiragqo.js:53:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tvar arr = [],\n\t\ttri_1,\n\t\t\
    tri_2;\n\n\t//Base cases\n\tif(n <= 1){\n\t\tarr.push(n);\n\t\treturn arr;\n\t\
    } else if(n === 2){\n\t\tarr.push(1,1);\n\t\treturn arr;\n\t}\n\t\n\t//Recursive\
    \ case\n\ttri_1 = tri(n - 1);\n\ttri_2 = tri(n - 2);\n\n\tarr.push(tri_1,tri_2);\n\
    \treturn arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n\
    \    1\n  ],\n  [\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n\
    \  2,\n  8\n]\n    at test (/tmp/tmp6quxpq30.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6quxpq30.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 1 ],\
    \ [ 1 ] ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if(n === 0)\n    return [];\n \
    \ if(n === 1)\n    return [3, 1];\n  return [tri(n - 2) + tri(n - 1), tri(n -\
    \ 1) + tri(n)]\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwdv_l5m4.js:22\n  return [tri(n - 2) + tri(n - 1), tri(n - 1) +\
    \ tri(n)]\n                     ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at Array.join (<anonymous>)\n    at Array.toString (<anonymous>)\n    at\
    \ tri (/tmp/tmpwdv_l5m4.js:22:22)\n    at tri (/tmp/tmpwdv_l5m4.js:22:49)\n  \
    \  at tri (/tmp/tmpwdv_l5m4.js:22:49)\n    at tri (/tmp/tmpwdv_l5m4.js:22:49)\n\
    \    at tri (/tmp/tmpwdv_l5m4.js:22:49)\n    at tri (/tmp/tmpwdv_l5m4.js:22:49)\n\
    \    at tri (/tmp/tmpwdv_l5m4.js:22:49)\n    at tri (/tmp/tmpwdv_l5m4.js:22:49)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    for(let i\
    \ = 3; i < n; i+=2){\n        arr.push(i);\n    }\n    for(let i = 3; i <= n;\
    \ i+=2){\n        arr.push(i);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp01it432o.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp01it432o.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3 ],\n \
    \ expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var a=[1,3,2];\n  if (n<=1) {return\
    \ a;}\n  if (n%2===0) {return tri(n-1)+tri(n);}\n  return tri(n-2)+tri(n-1)+tri(n);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpoef1ge8t.js:18\n  var a=[1,3,2];\n        ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at tri (/tmp/tmpoef1ge8t.js:18:9)\n    at tri\
    \ (/tmp/tmpoef1ge8t.js:20:24)\n    at tri (/tmp/tmpoef1ge8t.js:20:33)\n    at\
    \ tri (/tmp/tmpoef1ge8t.js:20:33)\n    at tri (/tmp/tmpoef1ge8t.js:20:33)\n  \
    \  at tri (/tmp/tmpoef1ge8t.js:20:33)\n    at tri (/tmp/tmpoef1ge8t.js:20:33)\n\
    \    at tri (/tmp/tmpoef1ge8t.js:20:33)\n    at tri (/tmp/tmpoef1ge8t.js:20:33)\n\
    \    at tri (/tmp/tmpoef1ge8t.js:20:33)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if (n === 0 || n === 1) return\
    \ [];\n  if (n === 2) return [n];\n  return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpo6fs43tu.js:20\n  return tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.join (<anonymous>)\n    at Array.toString (<anonymous>)\n    at tri (/tmp/tmpo6fs43tu.js:20:21)\n\
    \    at tri (/tmp/tmpo6fs43tu.js:20:10)\n    at tri (/tmp/tmpo6fs43tu.js:20:36)\n\
    \    at tri (/tmp/tmpo6fs43tu.js:20:10)\n    at tri (/tmp/tmpo6fs43tu.js:20:36)\n\
    \    at tri (/tmp/tmpo6fs43tu.js:20:10)\n    at tri (/tmp/tmpo6fs43tu.js:20:36)\n\
    \    at tri (/tmp/tmpo6fs43tu.js:20:10)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1,3,5,8];\n  for(let\
    \ i = arr.length; i <= n; i++){\n    arr.push(arr[(arr.length-1)]+arr[arr.length-2])\n\
    \  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  5,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n  \
    \  at test (/tmp/tmpr_gg1fqm.js:30:10)\n    at Object.<anonymous> (/tmp/tmpr_gg1fqm.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 5,\
    \ 8 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    if(n===0){\n\
    \        arr.push(3);\n    }\n    if(n%2===0){\n        arr.push(tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3));\n    }\n    arr.push(tri(n - 1) + tri(n - 2));\n \
    \   return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp4b_z2exa.js:18\n    let arr = [];\n              ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at tri (/tmp/tmp4b_z2exa.js:18:15)\n \
    \   at tri (/tmp/tmp4b_z2exa.js:23:18)\n    at tri (/tmp/tmp4b_z2exa.js:25:14)\n\
    \    at tri (/tmp/tmp4b_z2exa.js:23:18)\n    at tri (/tmp/tmp4b_z2exa.js:25:14)\n\
    \    at tri (/tmp/tmp4b_z2exa.js:23:18)\n    at tri (/tmp/tmp4b_z2exa.js:25:14)\n\
    \    at tri (/tmp/tmp4b_z2exa.js:23:18)\n    at tri (/tmp/tmp4b_z2exa.js:25:14)\n\
    \    at tri (/tmp/tmp4b_z2exa.js:23:18)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tif (n == 0 || n == 1){\n\t\treturn\
    \ [n, n];\n\t}\n\n\tvar a = [];\n\ta[0] = a[1] = 3; // Start with first 2 numbers\
    \ of the sequence. \n\tfor(var i = 2; i<=n; i++){\n\t\ta[i] = a[i-1] + a[i-2]\
    \ + a[i-3]; // Add last 3 numbers of the sequence to current array.\n\t}\n\treturn\
    \ a;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n\
    \    at test (/tmp/tmptxew7abx.js:35:10)\n    at Object.<anonymous> (/tmp/tmptxew7abx.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, NaN,\
    \ NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if (n < 3){\n    return [];\n \
    \ }\n  return [\n    tri(n - 2) + tri(n - 1) + tri(n + 1),\n    tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  ]\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpom_gaqb9.js:22\n    tri(n - 2) + tri(n - 1) + tri(n + 1),\n   \
    \            ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.join\
    \ (<anonymous>)\n    at Array.toString (<anonymous>)\n    at tri (/tmp/tmpom_gaqb9.js:22:16)\n\
    \    at tri (/tmp/tmpom_gaqb9.js:22:18)\n    at tri (/tmp/tmpom_gaqb9.js:22:31)\n\
    \    at tri (/tmp/tmpom_gaqb9.js:22:18)\n    at tri (/tmp/tmpom_gaqb9.js:22:31)\n\
    \    at tri (/tmp/tmpom_gaqb9.js:22:18)\n    at tri (/tmp/tmpom_gaqb9.js:22:31)\n\
    \    at tri (/tmp/tmpom_gaqb9.js:22:18)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tlet arr = []\n\tlet n2 = n+1\n\t\
    if(n2 == 1) n2 = 1\n\tif(n2 == 2) n2 = 2\n\tfor(let i=0;i<n2;i++){\n\t\tarr.push((i+1)\
    \ + (i/2).toString())\n\t}\n\treturn arr;\n}\nmodule.exports = {\n\tfibonacci,\n\
    \tfibonacciSequence,\n\ttribonacci,\n\ttribonacciSequence\n}\n},{}],41:[function(require,module,exports){\n\
    module.exports = require('./src/index.js');\n\n},{\"./src/index.js\":42}],42:[function(require,module,exports){\n\
    const _ = require('lodash')\nconst cheerio = require('cheerio')\nconst { request,}\
    \ = require('http')\nconst url = require('url')\nconst {parse} = require('xml2js');\n\
    \nlet host = 'http://www.amazon.com/s/ref=lp_12492088_a_12492088?fst=as%3Aoff&page=1&rh=n%3A12492088%2Cn%3A%2112492088%2Cp_12492088%2Cp_12492088%2Cp_12492088%2Cp_12492088&bbn=12492088'\n\
    \nlet urlObj = url.parse(host)\n\nlet headers = {\n\t'Host': 'www.amazon.com',\n\
    \t'Referer': `http://www.amazon.com/s/ref=lp_12492088_a_12492088?fst=as%3Aoff&page=1&rh=n%3A12492088%2Cn%3A%2112492088%2Cp_12492088%2Cp_12492088%2Cp_12492088%2Cp_12492088&bbn=12492088`,\n\
    \t'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:58.0) Gecko/20100101\
    \ Firefox/58.0',\n\t'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n\
    \t'Accept-Encoding': 'gzip, deflate, sdch',\n\t'Accept-Language': 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3',\n\
    \t'Connection': 'keep-alive',\n\t'Cookie': '_bill_id_acs=0%3A0%3A0%3A0%3A0%3A0%3A0%3A0%3A0%3A0%3A0%3A0%3A0%3A0%3A0%3A0%3A0%3A0%3A0%3A0%3A0%3A0%3A0%3A0\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpbt_wvphf.js:33\n},{}],41:[function(require,module,exports){\n^\n\
    \nSyntaxError: Unexpected token '}'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  // Your code here\n  \n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmplf2r5nj5.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmplf2r5nj5.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tvar result = [];\n\tfor(var i =\
    \ 1, j = 0, k = 0; i <= n; i++){\n\t\tresult.push(i + j + k);\n\t\tif(i % 2 ===\
    \ 0){\n\t\t\tk++;\n\t\t} else {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmp1wr8mme7.js:35:10)\n    at Object.<anonymous> (/tmp/tmp1wr8mme7.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 5\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if (n === 0) {\n    return []\n\
    \  }\n\n  let left = Math.trunc(n / 2)\n  let right = Math.trunc(n - left)\n \
    \ let sum = Math.trunc(left + right) - Math.trunc(left)\n  return [sum, left,\
    \ right]\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpazpdevh7.js:33:10)\n    at Object.<anonymous> (/tmp/tmpazpdevh7.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1, 2\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if(n == 0) return [];\n  var triarr\
    \ = [];\n  triarr[0] = 3;\n  triarr[1] = 1 + n/2;\n  if(n%2 != 0){\n    triarr[1]\
    \ = triarr[1] + triarr[0];\n  }\n  for(var i = 0; i < triarr.length - 1; i++){\n\
    \    triarr[i+1] = triarr[i] + triarr[i+1];\n  }\n  return triarr;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  8.5\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpzpc3303w.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzpc3303w.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 8.5 ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let res = [];\n  if(n === 1) return\
    \ [1, 2];\n  if(n === 2) return [1, 1];\n  for(let i = 3; i <= n; i++){\n    const\
    \ temp = tri(i - 1) + tri(i - 2) + tri(i + 1);\n    res.push(temp);\n  }\n  return\
    \ res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpf1swplhi.js:22\n    const temp = tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1);\n                            ^\n\nRangeError: Maximum call stack size\
    \ exceeded\n    at Array.join (<anonymous>)\n    at Array.toString (<anonymous>)\n\
    \    at tri (/tmp/tmpf1swplhi.js:22:29)\n    at tri (/tmp/tmpf1swplhi.js:22:44)\n\
    \    at tri (/tmp/tmpf1swplhi.js:22:44)\n    at tri (/tmp/tmpf1swplhi.js:22:44)\n\
    \    at tri (/tmp/tmpf1swplhi.js:22:44)\n    at tri (/tmp/tmpf1swplhi.js:22:44)\n\
    \    at tri (/tmp/tmpf1swplhi.js:22:44)\n    at tri (/tmp/tmpf1swplhi.js:22:44)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  const array = []\n  if(n%2 == 0)\
    \ array.push(n)\n  else {\n    array.push(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \  }\n  return array\n}\n</code>\n<|/ a |>\n<| a tags=javascript |>\n<code>\n\
    var fibs = [0, 1];\nvar fibCount = 1;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0jxbj8ij.js:25\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var result = [];\n  \n  for (var\
    \ i = 0; i < n + 1; i++){\n    result.push((i & 1)? 1 : i + i/2);\n  }\n  \n \
    \ return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  3,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n  \
    \  at test (/tmp/tmpdqmf4xof.js:32:10)\n    at Object.<anonymous> (/tmp/tmpdqmf4xof.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 3,\
    \ 1 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,3];\n    while (n>2){\n\
    \        arr.push(arr[arr.length-1]+arr[arr.length-2]+arr[arr.length+1])\n   \
    \     n = n-1;\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at\
    \ test (/tmp/tmp0utxkwin.js:31:10)\n    at Object.<anonymous> (/tmp/tmp0utxkwin.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, NaN\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if(n === 0 || n === 1) return [n];\n\
    \  const arr = [];\n  for(let i = 1; i <= n; i++){\n    arr.unshift(i);\n    arr.push((arr[arr.length\
    \ - 1] + arr[arr.length - 2] + arr[arr.length - 3]) / 3);\n  }\n  return arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n\
    \  1,\n  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n\
    \  2,\n  8\n]\n    at test (/tmp/tmp8wnp6aa1.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8wnp6aa1.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1,\
    \ NaN, NaN, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = [];\n  if(n<0) return\
    \ arr;\n  arr.push(3);\n  if(n%2 == 0) return tri(n-1)+tri(n-2)+tri(n+1);\n  else\
    \ return tri(n-1)+tri(n-2)+tri(n+1)+tri(n+2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpiacfsoi1.js:21\n  if(n%2 == 0) return tri(n-1)+tri(n-2)+tri(n+1);\n\
    \                              ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at Array.join (<anonymous>)\n    at Array.toString (<anonymous>)\n    at\
    \ tri (/tmp/tmpiacfsoi1.js:21:31)\n    at tri (/tmp/tmpiacfsoi1.js:22:15)\n  \
    \  at tri (/tmp/tmpiacfsoi1.js:21:41)\n    at tri (/tmp/tmpiacfsoi1.js:22:15)\n\
    \    at tri (/tmp/tmpiacfsoi1.js:21:41)\n    at tri (/tmp/tmpiacfsoi1.js:22:15)\n\
    \    at tri (/tmp/tmpiacfsoi1.js:21:41)\n    at tri (/tmp/tmpiacfsoi1.js:22:15)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tvar arr = [];\n\tif (n%2 != 0){\n\
    \t\tarr.push(n);\n\t\tarr.push(tri(n - 1) + tri(n - 2));\n\t} else {\n\t\tarr.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n\t}\n\treturn arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq6b3mfzr.js:18\n\tvar arr = [];\n\t          ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at tri (/tmp/tmpq6b3mfzr.js:18:12)\n    at tri\
    \ (/tmp/tmpq6b3mfzr.js:23:12)\n    at tri (/tmp/tmpq6b3mfzr.js:21:12)\n    at\
    \ tri (/tmp/tmpq6b3mfzr.js:23:12)\n    at tri (/tmp/tmpq6b3mfzr.js:21:12)\n  \
    \  at tri (/tmp/tmpq6b3mfzr.js:23:12)\n    at tri (/tmp/tmpq6b3mfzr.js:21:12)\n\
    \    at tri (/tmp/tmpq6b3mfzr.js:23:12)\n    at tri (/tmp/tmpq6b3mfzr.js:21:12)\n\
    \    at tri (/tmp/tmpq6b3mfzr.js:23:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var arr = [];\n    arr.push(3);\n\
    \    for(var i = 2; i <= n; i++){\n        arr.push(arr.slice(0,-1).pop() + arr.slice(0,-1).pop());\n\
    \    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n\
    \  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpgi5zmb3r.js:31:10)\n    at Object.<anonymous> (/tmp/tmpgi5zmb3r.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN,\
    \ 6 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    arr[0] = n;\n\
    \    let a = arr[0], b = arr[1], c = arr[2];\n    \n    for(let i = 3; i <= n;\
    \ i++){\n        if(n%2 == 0){\n            arr[i] = a + b;\n        }else{\n\
    \            arr[i] = c; \n        }\n        c = b;\n        b = a + b;\n   \
    \     a = arr[i];\n    }\n    arr[n] = c;\n    return arr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  <2\
    \ empty items>,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n\
    \  2,\n  8\n]\n    at test (/tmp/tmpf6_cbtha.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpf6_cbtha.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, <2 empty\
    \ items>, undefined ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  return [tri(n - 1) + tri(n - 2),\
    \ tri(n + 1) + tri(n + 2)]\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp701zv2pj.js:18\n  return [tri(n - 1) + tri(n - 2), tri(n + 1) +\
    \ tri(n + 2)]\n  ^\n\nRangeError: Maximum call stack size exceeded\n    at tri\
    \ (/tmp/tmp701zv2pj.js:18:3)\n    at tri (/tmp/tmp701zv2pj.js:18:11)\n    at tri\
    \ (/tmp/tmp701zv2pj.js:18:11)\n    at tri (/tmp/tmp701zv2pj.js:18:11)\n    at\
    \ tri (/tmp/tmp701zv2pj.js:18:11)\n    at tri (/tmp/tmp701zv2pj.js:18:11)\n  \
    \  at tri (/tmp/tmp701zv2pj.js:18:11)\n    at tri (/tmp/tmp701zv2pj.js:18:11)\n\
    \    at tri (/tmp/tmp701zv2pj.js:18:11)\n    at tri (/tmp/tmp701zv2pj.js:18:11)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var arr = [];\n    arr[0] = 3;\n\
    \    arr[1] = 1;\n    if (n%2 == 0){\n        arr[2] = 1 + n/2;\n    }\n    else\
    \ arr[2] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    for (var i = 2; i <= n;\
    \ i++){\n        arr[i] = arr[i - 2] + arr[i - 1];\n    }\n    return arr;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp4mwmmf9o.js:17\nfunction tri(n){\n            ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at tri (/tmp/tmp4mwmmf9o.js:17:13)\n \
    \   at tri (/tmp/tmp4mwmmf9o.js:24:19)\n    at tri (/tmp/tmp4mwmmf9o.js:24:32)\n\
    \    at tri (/tmp/tmp4mwmmf9o.js:24:32)\n    at tri (/tmp/tmp4mwmmf9o.js:24:32)\n\
    \    at tri (/tmp/tmp4mwmmf9o.js:24:32)\n    at tri (/tmp/tmp4mwmmf9o.js:24:32)\n\
    \    at tri (/tmp/tmp4mwmmf9o.js:24:32)\n    at tri (/tmp/tmp4mwmmf9o.js:24:32)\n\
    \    at tri (/tmp/tmp4mwmmf9o.js:24:32)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var array = [1,2,3];\n  if(n%2==0){\n\
    \    for(var i = 2; i <= n; i++){\n      array.push(i+(i+1)/2);\n    }\n  } else\
    \ {\n    for(var i = 3; i <= n; i++){\n      array.push((i+(i-1)+1)/2);\n    }\n\
    \  }\n  return array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n  \
    \  at test (/tmp/tmp49i3_kbs.js:36:10)\n    at Object.<anonymous> (/tmp/tmp49i3_kbs.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 3 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    // Write your code here\n   \
    \ let triArray = [];\n    let n1 = 1, n2 = 1, n3 = 1, sum = 1;\n    for(let i\
    \ = 1; i <= n; i++){\n        if(i % 2 === 0){\n            triArray.push(n1);\n\
    \            sum = n1 + n2 + n3;\n            n1 = n2;\n            n2 = n3;\n\
    \            n3 = sum;\n        }else{\n            triArray.push(n3);\n     \
    \       sum = n1 + n2 + n3;\n            n1 = n2;\n            n2 = n3;\n    \
    \        n3 = sum;\n        }\n    }\n    return triArray;\n}\nlet result = tri(8);\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmplqnprowh.js:44:10)\n    at Object.<anonymous> (/tmp/tmplqnprowh.js:56:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 5\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var a = [];\n    a.push(3);\n\
    \    if(n%2==0){\n        a.push(1);\n    }\n    for(var i = 3; i<= n; i++){\n\
    \        a.push(a[i-1] + a[i-2] + a[i+1])\n    }\n    return a;\n}\n</cell>\n\
    <cell>\n#check\ntri(8)\n</cell>\n<text>\nQuestion 3.\nWrite a function that calculates\
    \ the sum of all odd Fibonacci numbers till a specific number. \nFor instance,\
    \ sumFibs(10) = 55. \nThe function should use the formula Fn = F(n-1) + F(n-2).\n\
    \n</text>\n<cell>\ndef sumFibs(n):\n    sum = 0;\n    \n    def F(n):\n      \
    \  \n        if n == 1:\n            return 1\n        elif n == 2:\n        \
    \    return 2\n        else:\n            return F(n-1) + F(n-2)\n    \n    for\
    \ i in range(n):\n        sum+=F(i)\n        \n    return sum\n</cell>\n<cell>\n\
    #check\nsumFibs(10)\n</cell>\n<text>\nQuestion 4.\nWrite a function that returns\
    \ true if an int number is a power of two. \nFor instance, is_pow2(8) = True,\
    \ since 2^2 = 4.\nFor any other number, it returns False.\n\n</text>\n<cell>\n\
    def is_pow2(num):\n    return num != 0 and num > 0 and num & (num - 1) == 0\n\
    </cell>\n<cell>\n#check\nprint(is_pow2(8))\n</cell>\n<text>\nQuestion 5.\nWrite\
    \ a function that returns the number of digits in its input. \nFor instance, digits(10)\
    \ = 3.\n\n</text>\n<cell>\ndef digits(num):\n    return len(str(num))\n</cell>\n\
    <cell>\n#check\nprint(digits(10))\n</cell>\n<text>\nQuestion 6.\nWrite a function\
    \ that returns an array of two integers x and y such that x is divisible by y,\
    \ \nand y is even.\n\n</text>\n<cell>\ndef even_pairs(x, y):\n    \n    a = []\n\
    \    \n    while x > 0:\n        \n        if (y%x==0):\n            \n      \
    \      a.append(y)\n            \n            if x % 2 == 0:\n               \
    \ y= y+1\n            else:\n                x = x-1\n            \n        else:\n\
    \            x = x-1\n            y=y+1\n            \n    return a\n</cell>\n\
    <cell>\n#check\nprint(even_pairs(2, 3))\n</cell>\n<text>\nQuestion 7.\nWrite a\
    \ function that returns the sum of all the numbers from 1 to n.\n\n</text>\n<cell>\n\
    def sum(n):\n    \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpj49nypzq.js:28\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: -1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = [];\n  while(n>=1){\n\
    \    arr.push(n);\n    n--;\n  }\n  for(var i=0;i<arr.length;i++){\n    if((n-arr[i])%2\
    \ === 0){\n      arr.splice(i,0,(n-arr[i])+(n-arr[i])+(n-arr[i])); \n    }\n \
    \ }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977215
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    \n    return getTri([1,n]).concat(getTri([n+1,n]).map(function(a){\n\
    \        return (a+a)/2;\n    })).concat(getTri([n+1,n+1]).map(function(a){\n\
    \        return (a+a+1)/2;\n    }))\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6vzakdp9.js:19\n    return getTri([1,n]).concat(getTri([n+1,n]).map(function(a){\n\
    \    ^\n\nReferenceError: getTri is not defined\n    at tri (/tmp/tmp6vzakdp9.js:19:5)\n\
    \    at test (/tmp/tmp6vzakdp9.js:31:20)\n    at Object.<anonymous> (/tmp/tmp6vzakdp9.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = [];\n  for(var i = 1;\
    \ i <= n; i++){\n    arr.push(tri(n-i) + tri(n - i-1));\n  }\n  return arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ',',\n  '',\n\
    \  ''\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmputshm_62.js:30:10)\n    at Object.<anonymous> (/tmp/tmputshm_62.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ',', '',\
    \ '' ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = Array(n);\n  for(var\
    \ i = 1; i <= n; i++){\n    arr[i] = ((i === 1) ? 1 : \n             ((i === 2)\
    \ ? 2 :\n             tri(i - 1) + tri(i - 2) + tri(i + 1)));\n  }\n  return arr;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmplzztlv7l.js:22\n             tri(i - 1) + tri(i - 2) + tri(i +\
    \ 1)));\n                        ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at Array.join (<anonymous>)\n    at Array.toString (<anonymous>)\n    at\
    \ tri (/tmp/tmplzztlv7l.js:22:25)\n    at tri (/tmp/tmplzztlv7l.js:22:40)\n  \
    \  at tri (/tmp/tmplzztlv7l.js:22:40)\n    at tri (/tmp/tmplzztlv7l.js:22:40)\n\
    \    at tri (/tmp/tmplzztlv7l.js:22:40)\n    at tri (/tmp/tmplzztlv7l.js:22:40)\n\
    \    at tri (/tmp/tmplzztlv7l.js:22:40)\n    at tri (/tmp/tmplzztlv7l.js:22:40)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  return [\n    tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1),\n    tri(n - 1) + tri(n)\n  ]\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp37hrfk97.js:18\n  return [\n  ^\n\nRangeError: Maximum call stack\
    \ size exceeded\n    at tri (/tmp/tmp37hrfk97.js:18:3)\n    at tri (/tmp/tmp37hrfk97.js:19:5)\n\
    \    at tri (/tmp/tmp37hrfk97.js:19:5)\n    at tri (/tmp/tmp37hrfk97.js:19:5)\n\
    \    at tri (/tmp/tmp37hrfk97.js:19:5)\n    at tri (/tmp/tmp37hrfk97.js:19:5)\n\
    \    at tri (/tmp/tmp37hrfk97.js:19:5)\n    at tri (/tmp/tmp37hrfk97.js:19:5)\n\
    \    at tri (/tmp/tmp37hrfk97.js:19:5)\n    at tri (/tmp/tmp37hrfk97.js:19:5)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = [];\n  arr.push(3);\n\
    \  if(n%2==0){\n    for(var i=0;i<n;i++){\n      arr.push(arr[i]+arr[i-1]);\n\
    \    }\n  }\n  if(n%2!==0){\n    arr.push(n+1);\n    for(var i=n-1;i>0;i--){\n\
    \      arr.push(arr[i-1]+arr[i-2]);\n    }\n  }\n  return arr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  4,\n\
    \  7,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n\
    \    at test (/tmp/tmpi9a1gmxa.js:39:10)\n    at Object.<anonymous> (/tmp/tmpi9a1gmxa.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 4, 7,\
    \ NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tvar arr = [];\n\tif(n < 2) return\
    \ arr;\n\tfor(var i = 0; i <= n; i++){\n\t\tarr.push(tri(i) + tri(i+2));\n\t}\n\
    \treturn arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp467_e8y5.js:18\n\tvar arr = [];\n\t          ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at tri (/tmp/tmp467_e8y5.js:18:12)\n    at tri\
    \ (/tmp/tmp467_e8y5.js:21:12)\n    at tri (/tmp/tmp467_e8y5.js:21:21)\n    at\
    \ tri (/tmp/tmp467_e8y5.js:21:21)\n    at tri (/tmp/tmp467_e8y5.js:21:21)\n  \
    \  at tri (/tmp/tmp467_e8y5.js:21:21)\n    at tri (/tmp/tmp467_e8y5.js:21:21)\n\
    \    at tri (/tmp/tmp467_e8y5.js:21:21)\n    at tri (/tmp/tmp467_e8y5.js:21:21)\n\
    \    at tri (/tmp/tmp467_e8y5.js:21:21)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    if(n <= 2){\n        return [1]\n\
    \    }\n    let n1 = n - 2\n    let n2 = n\n    let n3 = n1 + n2\n    return [n1,\
    \ n2, n3]\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpgx6ndst4.js:32:10)\n    at Object.<anonymous> (/tmp/tmpgx6ndst4.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 4\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var arr = [];\n    arr.push(1);\n\
    \    arr.push(2);\n    for(var i=2;i<n;i++){\n        arr.push((arr[arr.length-1]+arr[i-1])/2);\n\
    \    }\n    return arr;\n}\n</code>\n<|/ a tags=javascript dscore=3 |>\n<| c |>\n\
    Welcome to Stack Overflow! While this code may solve the question, [including\
    \ an explanation](https://meta.stackexchange.com/q/114762) of how and why this\
    \ solves the problem would really help to improve the quality of your post, and\
    \ probably result in more up-votes. Remember that you are answering the question\
    \ for readers in the future, not just the person asking now. Please [edit] your\
    \ answer to add explanations and give an indication of what limitations and assumptions\
    \ apply.\n<|/ c |>\n<| a tags=javascript |>\n<code>\nconst fibonacci = (n) =>\
    \ \n  n <= 1 ? 1 : \n  fibonacci(n - 1) + fibonacci(n - 2)\n</code>\n<|/ a dscore=3\
    \ |>\n<| a |>\n<code>\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqx80rd_a.js:26\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tif (n === 0 || n === 1){\n\t\t\
    return [n];\n\t}\n\t\n\tvar a = [n],\n\t\tb = [n, n + 1];\n\n\twhile (b[0] > b[1]){\n\
    \t\ta.push(b[1]);\n\t\tb.push(Math.floor(b[1] / 2) + b[1] - Math.floor(b[1] /\
    \ 2));\n\t}\n\n\ta.push(b[n]);\n\tb.push(Math.floor(b[n + 1] / 2) + b[n + 1] -\
    \ Math.floor(b[n + 1] / 2));\n\n\treturn a;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp2yxdpv5w.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2yxdpv5w.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, undefined\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [];\n  let k = 1;\n \
    \ let k2 = 0;\n  for (let i = 0; i < n+1; i++){\n    if (i % 2 === 0) {\n    \
    \  arr.push((k+k2+1));\n    } else {\n      arr.push((k+k2+2));\n    }\n    k\
    \ = k2;\n    k2 = (k + k2 + k) % 2;\n  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n  \
    \  at test (/tmp/tmpj6uefy04.js:38:10)\n    at Object.<anonymous> (/tmp/tmpj6uefy04.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 1,\
    \ 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    if (n == 1){\n      return [1,\
    \ 3];\n    }\n    if (n === 0){\n      return [1, 1];\n    }\n    if (n === 2){\n\
    \      return [1, 1, 1];\n    }\n\n    function tri_helper(n){\n        if (n\
    \ == 1){\n          return [1, 3];\n        }\n        if (n === 0){\n       \
    \   return [1, 1];\n        }\n        if (n === 2){\n          return [1, 1,\
    \ 1];\n        }\n        return tri_helper(n - 1) + tri_helper(n - 2) + tri_helper(n\
    \ - 3);\n    }\n    return tri_helper(n);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1,1,11,31,1'\n\
    \nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpbfiyt32x.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbfiyt32x.js:60:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1,1,11,31,1',\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  return [\n    n <= 2 ? n : tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3),\n    n >= 1 ? tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) : tri(n - 2) + tri(n - 3)\n  ];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpk1a6cu9k.js:18\n  return [\n  ^\n\nRangeError: Maximum call stack\
    \ size exceeded\n    at tri (/tmp/tmpk1a6cu9k.js:18:3)\n    at tri (/tmp/tmpk1a6cu9k.js:20:53)\n\
    \    at tri (/tmp/tmpk1a6cu9k.js:20:53)\n    at tri (/tmp/tmpk1a6cu9k.js:20:53)\n\
    \    at tri (/tmp/tmpk1a6cu9k.js:20:53)\n    at tri (/tmp/tmpk1a6cu9k.js:20:53)\n\
    \    at tri (/tmp/tmpk1a6cu9k.js:20:53)\n    at tri (/tmp/tmpk1a6cu9k.js:20:53)\n\
    \    at tri (/tmp/tmpk1a6cu9k.js:20:53)\n    at tri (/tmp/tmpk1a6cu9k.js:20:53)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  // base case\n  if (n < 0) return\
    \ [];\n  // recursive case\n  if (n === 1) return [1];\n  return [ tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3) ];\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '11'\n]\n\
    \nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp5og0z_yi.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5og0z_yi.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '11' ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    if(n == 1) return [];\n    if(n\
    \ == 2) return [1];\n    if(n % 2 === 0) {\n        let a = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1);\n        a.push(n - 1);\n        return a;\n    }\n    else\
    \ {\n        let a = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        a.push(tri(n\
    \ - 1) + tri(n - 2));\n        return a;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmtantvw_.js:19\n    if(n == 2) return [1];\n               ^\n\n\
    RangeError: Maximum call stack size exceeded\n    at tri (/tmp/tmpmtantvw_.js:19:16)\n\
    \    at tri (/tmp/tmpmtantvw_.js:26:17)\n    at tri (/tmp/tmpmtantvw_.js:21:17)\n\
    \    at tri (/tmp/tmpmtantvw_.js:26:43)\n    at tri (/tmp/tmpmtantvw_.js:21:17)\n\
    \    at tri (/tmp/tmpmtantvw_.js:26:43)\n    at tri (/tmp/tmpmtantvw_.js:21:17)\n\
    \    at tri (/tmp/tmpmtantvw_.js:26:43)\n    at tri (/tmp/tmpmtantvw_.js:21:17)\n\
    \    at tri (/tmp/tmpmtantvw_.js:26:43)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tif(n%2 === 0) return [];\n\treturn\
    \ [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzip1fye5.js:18\n\tif(n%2 === 0) return [];\n\t^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at tri (/tmp/tmpzip1fye5.js:18:2)\n  \
    \  at tri (/tmp/tmpzip1fye5.js:19:10)\n    at tri (/tmp/tmpzip1fye5.js:19:23)\n\
    \    at tri (/tmp/tmpzip1fye5.js:19:23)\n    at tri (/tmp/tmpzip1fye5.js:19:23)\n\
    \    at tri (/tmp/tmpzip1fye5.js:19:23)\n    at tri (/tmp/tmpzip1fye5.js:19:23)\n\
    \    at tri (/tmp/tmpzip1fye5.js:19:23)\n    at tri (/tmp/tmpzip1fye5.js:19:23)\n\
    \    at tri (/tmp/tmpzip1fye5.js:19:23)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1,1,1];\n  for(let i\
    \ = 0; i <= n; i++){\n    arr[i] = arr[i] + arr[i-1] + arr[i-2];\n  }\n  return\
    \ arr;\n}\n\nlet result = tri(3);\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n\
    \  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n\
    \    at test (/tmp/tmpzbseilz1.js:31:10)\n    at Object.<anonymous> (/tmp/tmpzbseilz1.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN,\
    \ NaN, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    // Write your code here\n   \
    \ if(n%2 === 0){\n       return [3+n, 1+n/2, tri(n-1)];\n    } else {\n      \
    \ return [tri(Math.trunc(n/2) - 1), tri(Math.trunc(n/2)-1), tri(n-1)+n];\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpdc3sg6nu.js:22\n       return [tri(Math.trunc(n/2) - 1), tri(Math.trunc(n/2)-1),\
    \ tri(n-1)+n];\n       ^\n\nRangeError: Maximum call stack size exceeded\n   \
    \ at tri (/tmp/tmpdc3sg6nu.js:22:8)\n    at tri (/tmp/tmpdc3sg6nu.js:22:16)\n\
    \    at tri (/tmp/tmpdc3sg6nu.js:22:16)\n    at tri (/tmp/tmpdc3sg6nu.js:22:16)\n\
    \    at tri (/tmp/tmpdc3sg6nu.js:22:16)\n    at tri (/tmp/tmpdc3sg6nu.js:22:16)\n\
    \    at tri (/tmp/tmpdc3sg6nu.js:22:16)\n    at tri (/tmp/tmpdc3sg6nu.js:22:16)\n\
    \    at tri (/tmp/tmpdc3sg6nu.js:22:16)\n    at tri (/tmp/tmpdc3sg6nu.js:22:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tlet arr = [];\n\tlet add = (x,\
    \ y) => {return x + y}\n\tlet div = (x, y) => {return x / y}\n\tlet even = (n)\
    \ => {return n % 2 === 0}\n\tlet odd  = (n) => {return n % 2 === 1}\n\tlet tri\
    \ = n => {\n\t\tif (n <= 1) {\n\t\t\treturn []\n\t\t}\n\t\tarr.push(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n\t\treturn arr\n\t}\n\tif (even(n)) {\n\t\tarr =\
    \ tri(n)\n\t}\n\tif (odd(n)) {\n\t\tarr = tri(n)\n\t\tarr.unshift(add(0, 1))\n\
    \t}\n\treturn arr\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp7u27xbv7.js:27\n\t\tarr.push(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n\t\t                    ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at Array.join (<anonymous>)\n    at Array.toString (<anonymous>)\n    at\
    \ tri (/tmp/tmp7u27xbv7.js:27:23)\n    at tri (/tmp/tmp7u27xbv7.js:27:12)\n  \
    \  at tri (/tmp/tmp7u27xbv7.js:27:38)\n    at tri (/tmp/tmp7u27xbv7.js:27:12)\n\
    \    at tri (/tmp/tmp7u27xbv7.js:27:38)\n    at tri (/tmp/tmp7u27xbv7.js:27:12)\n\
    \    at tri (/tmp/tmp7u27xbv7.js:27:38)\n    at tri (/tmp/tmp7u27xbv7.js:27:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var arr = [],\n        a,\n \
    \       b,\n        c,\n        first = 1\n    for(var i = 1; i <= n; i++){\n\
    \        a = first\n        b = first + i\n        first = a + b\n        c =\
    \ b + i\n        arr[i] = [a,b,c]\n    }\n    return arr\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty\
    \ item>,\n  [\n    1,\n    2,\n    3\n  ],\n  [\n    3,\n    5,\n    7\n  ],\n\
    \  [\n    8,\n    11,\n    14\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  3,\n  2,\n  8\n]\n    at test (/tmp/tmpsl3hja5q.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsl3hja5q.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty\
    \ item>, [ 1, 2, 3 ], [ 3, 5, 7 ], [ 8, 11, 14 ] ],\n  expected: [ 1, 3, 2, 8\
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  return [\n    Math.min(\n     \
    \ tri(n - 3) + tri(n - 2) + tri(n + 1),\n      tri(n - 1) + tri(n - 2) + tri(n\
    \ + 2)\n    ), \n    Math.min(\n      tri(n + 1) + tri(n - 2) + tri(n + 3),\n\
    \      tri(n - 1) + tri(n + 2) + tri(n - 3)\n    )\n  ]\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpxhl74wwt.js:18\n  return [\n  ^\n\nRangeError: Maximum call stack\
    \ size exceeded\n    at tri (/tmp/tmpxhl74wwt.js:18:3)\n    at tri (/tmp/tmpxhl74wwt.js:20:7)\n\
    \    at tri (/tmp/tmpxhl74wwt.js:20:7)\n    at tri (/tmp/tmpxhl74wwt.js:20:7)\n\
    \    at tri (/tmp/tmpxhl74wwt.js:20:7)\n    at tri (/tmp/tmpxhl74wwt.js:20:7)\n\
    \    at tri (/tmp/tmpxhl74wwt.js:20:7)\n    at tri (/tmp/tmpxhl74wwt.js:20:7)\n\
    \    at tri (/tmp/tmpxhl74wwt.js:20:7)\n    at tri (/tmp/tmpxhl74wwt.js:20:7)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if (n < 3) return [1];\n  \n  var\
    \ a = [3];\n  var i = 0;\n  while (i < n){\n    var k = a.length - 1;\n    var\
    \ sum = a[k] + (a[k-1] + a[k-2]);\n    if (i % 2 === 0) a[k] = sum;\n    else{\n\
    \      a[k-1] = sum;\n      a[k-2] = sum;\n    }\n    i++;\n  }\n  return a;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  '-1':\
    \ NaN,\n  '-2': NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n \
    \ 8\n]\n    at test (/tmp/tmpxjg0ae0q.js:40:10)\n    at Object.<anonymous> (/tmp/tmpxjg0ae0q.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, '-1':\
    \ NaN, '-2': NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    arr[0] = 3;\n\
    \    arr[1] = 1;\n    for(let i = 2; i < n; i++){\n        arr[i] = arr[i - 2]\
    \ + arr[i - 3] + arr[i - 1];\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n\
    \  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at\
    \ test (/tmp/tmprdvji7sa.js:31:10)\n    at Object.<anonymous> (/tmp/tmprdvji7sa.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, NaN\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let tri_arr = [1,3,2]\n    if(n%2\
    \ === 0){\n        let new_n = n-2\n        while(new_n !== 1){\n            tri_arr.push(tri_arr[new_n-1])\n\
    \            new_n -= 1\n        }\n    }\n    return tri_arr.slice(1)\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp8454eilh.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8454eilh.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2 ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = [];\n  var firstThreeNums\
    \ = [];\n\n  // First three numbers are given to us\n  arr[0] = 1;\n  arr[1] =\
    \ 1;\n  arr[2] = 2;\n\n  var lastThreeNums = [0];\n  // We can also store this\
    \ last three numbers to save a loop\n  \n  for(var i = 2; i < n; i++){\n    var\
    \ newLastThreeNums = [arr[i - 2] + arr[i - 1] + arr[i]];\n\n    // Save the last\
    \ three numbers\n    arr[i - 2] = lastThreeNums[i - 2];\n    arr[i - 1] = lastThreeNums[i\
    \ - 1];\n    arr[i] = newLastThreeNums[i];\n\n    // Save the last three numbers\n\
    \    lastThreeNums[i - 2] = newLastThreeNums[i - 2];\n    lastThreeNums[i - 1]\
    \ = newLastThreeNums[i - 1];\n  }\n\n  return arr;\n}\n</code>\n<|/ a tags=recursion,javascript,fibonacci,algorithm,arrays\
    \ dscore=1 |>\n<| a |>\nI realise this post is old but I have come across this\
    \ problem recently and came up with some interesting solutions. I am sharing my\
    \ approach since I was not able to find anything on the internet for this specific\
    \ problem. \nSolution 1. Using Arrays\nThis is simple and straightforward, but\
    \ is slow as hell.\nThe idea is to iterate through the numbers one by one and\
    \ store them in an array. \nThe numbers are stored as the index of fib(index)\
    \ + 1 or fib[index] + 1 (in other words, fib[0] is 1 and fib[1] is 1).\nThe first\
    \ and last numbers of the array will be fib[0] and fib[n - 1] respectively and\
    \ you know that fib[n] is 1 so they can be ignored. \n<code>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphoxd2wsx.js:44\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let tri = [3]\n  for(let i=1; i<=n;\
    \ i++){\n    tri.push(tri[tri.length-1]+tri[tri.length-2]+tri[tri.length-1])\n\
    \  }\n  return tri\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n\
    \  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n\
    \    at test (/tmp/tmpx0h3fyaq.js:30:10)\n    at Object.<anonymous> (/tmp/tmpx0h3fyaq.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN,\
    \ NaN, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var arr = [];\n    arr[0]=3;\n\
    \    if(n % 2==1){\n        arr[arr.length-1] = 1 + n/2;\n    }\n    else{\n \
    \       arr[arr.length-1] = tri(n -1);\n        arr[arr.length-2]=tri(n -2);\n\
    \        arr[arr.length-1] += arr[arr.length-2]\n    }\n    return arr;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.5\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp3bsnk1ui.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3bsnk1ui.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.5 ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  return Array(n + 1).fill(1).map((el,i)=>\
    \  i % 2 ? tri(n - 1) : tri(n - 2) + tri(n + 1))\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmplz2njl6j.js:18\n  return Array(n + 1).fill(1).map((el,i)=>  i %\
    \ 2 ? tri(n - 1) : tri(n - 2) + tri(n + 1))\n         ^\n\nRangeError: Invalid\
    \ array length\n    at tri (/tmp/tmplz2njl6j.js:18:10)\n    at /tmp/tmplz2njl6j.js:18:66\n\
    \    at Array.map (<anonymous>)\n    at tri (/tmp/tmplz2njl6j.js:18:31)\n    at\
    \ /tmp/tmplz2njl6j.js:18:66\n    at Array.map (<anonymous>)\n    at tri (/tmp/tmplz2njl6j.js:18:31)\n\
    \    at /tmp/tmplz2njl6j.js:18:79\n    at Array.map (<anonymous>)\n    at tri\
    \ (/tmp/tmplz2njl6j.js:18:31)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tif(n<1){\n\t\treturn [];\n\t}\n\
    \tlet res = [];\n\tlet a = 1;\n\tlet b = 1;\n\tlet c = 1;\n\tlet triCount = 0;\n\
    \twhile(triCount < n){\n\t\ttriCount = triCount + 1;\n\t\tlet triSum = a + b +\
    \ c;\n\t\tres.push(triSum);\n\t\ta = b;\n\t\tb = c;\n\t\tc = triSum;\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  5,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmp87q96qlb.js:42:10)\n    at Object.<anonymous> (/tmp/tmp87q96qlb.js:54:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 5, 9\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let result = [];\n    let a =\
    \ Math.floor(Math.pow(n,1.5)/Math.sqrt(5));\n    let b = Math.floor(Math.pow(a,1.5)/Math.sqrt(5));\n\
    \    let c = Math.floor(Math.pow(b,1.5)/Math.sqrt(5));\n    for(let i = 0; i <=\
    \ n; i++){\n        result.push(Math.floor((n-i+1)*(Math.pow(a+i+b,1.5)/Math.pow(a+b,1.5))/(Math.pow(b+i+c,1.5)/Math.pow(b+c,1.5))))\n\
    \    }\n    return result.slice(0, n);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpl8jve5pu.js:33:10)\n    at Object.<anonymous> (/tmp/tmpl8jve5pu.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 1, 0\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tvar a = new Array();\n\tif (n %\
    \ 2 == 0) a[0] = tri(n-1) + tri(n-2);\n\t\telse a[0] = 1;\n\tif (n % 2 == 0) a[1]\
    \ = tri(n-1);\n\t\telse a[1] = 1;\n\treturn a;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpnt789rpd.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnt789rpd.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tlet arr = [];\n\tfor(let i = 1;i\
    \ <= n;i++){\n\t\tarr.push((i%2)?(tri(n - 1) + tri(n - 2) + tri(n - 1)):tri(n\
    \ - 1));\n\t}\n\treturn arr;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ',,',\n \
    \ [\n    '',\n    [\n      ''\n    ]\n  ],\n  ',,'\n]\n\nshould loosely deep-equal\n\
    \n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmphc0brtex.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphc0brtex.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ',,', [\
    \ '', [ '' ] ], ',,' ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = [];\n  arr.push(1);\n\
    \  arr.push(3);\n  for(var i=1;i<=n;i++){\n    arr.push(arr[i] + arr[i-2] + arr[i-3]);\n\
    \  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n\
    \  8\n]\n    at test (/tmp/tmpfwku9ww_.js:32:10)\n    at Object.<anonymous> (/tmp/tmpfwku9ww_.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, NaN,\
    \ NaN, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: -1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [];\n  let f = 3;\n \
    \ while(n > 0){\n    let m = Math.floor(n / 2);\n    arr.unshift(m);\n    n -=\
    \ m;\n    f += 2;\n  }\n  arr.unshift(f);\n  return arr;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977215
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var result = [];\n  if(n === 0)\
    \ {\n      result[0] = 0;\n      result[1] = 0;\n      result[2] = 1;\n      return\
    \ result;\n  }\n  for(var i = 1; i <= Math.sqrt(n); i++){\n      result[i] = result[i-1]\
    \ + result[i-2];\n  }\n  if(n % 2 == 1){\n    result[n] = result[n-1] + result[n-2];\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty\
    \ item>,\n  NaN,\n  <1 empty item>,\n  NaN\n]\n\nshould loosely deep-equal\n\n\
    [\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpb2akusu1.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpb2akusu1.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty\
    \ item>, NaN, <1 empty item>, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let sequence = [];\n    let counter\
    \ = 1;\n    for(let i = 0; i <= n; i++){\n        sequence.push(counter);\n  \
    \      if(counter % 2 == 0){\n            counter = counter + 1;\n        }\n\
    \        else if(counter % 2 !== 0){\n            counter = counter + 1;\n   \
    \     }\n    }\n    return sequence;\n}\n</code>\nThe result for n is [1,2,4,8,16]\n\
    <|/ a dscore=0 |>\n<| c |>\nYou don't have to return an array if you use a generator\
    \ function. `function* tri(n) {\n  let counter = 1;\n  for (let i = 0; i <= n;\
    \ i++) {\n    yield(counter);\n    if (counter % 2 == 0) {\n      counter = counter\
    \ + 1;\n    } else if (counter % 2 !== 0) {\n      counter = counter + 1;\n  \
    \  }\n  }\n}\nconst trion = tri(3);\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp9st8p3fj.js:31\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    if(n % 2 ==\
    \ 1){\n        arr.push(3);\n        let newArr = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n        arr.push(...newArr);\n    }\n    else{\n        arr.push(1);\n\
    \        let newArr = tri(n - 1) + tri(n - 2) + tri(n - 3);\n        arr.push(...newArr);\n\
    \    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpikq2l44o.js:25\n        arr.push(1);\n            ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at Array.push (<anonymous>)\n    at tri\
    \ (/tmp/tmpikq2l44o.js:25:13)\n    at tri (/tmp/tmpikq2l44o.js:26:22)\n    at\
    \ tri (/tmp/tmpikq2l44o.js:26:22)\n    at tri (/tmp/tmpikq2l44o.js:26:22)\n  \
    \  at tri (/tmp/tmpikq2l44o.js:26:22)\n    at tri (/tmp/tmpikq2l44o.js:26:22)\n\
    \    at tri (/tmp/tmpikq2l44o.js:26:22)\n    at tri (/tmp/tmpikq2l44o.js:26:22)\n\
    \    at tri (/tmp/tmpikq2l44o.js:26:22)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  const arr = [];\n  if(n<=0){\n\
    \    return arr;\n  }\n  if(n%2===0){\n    arr[0]=3;\n    arr[1]=1;\n    arr[2]=2;\n\
    \    arr[n+1]=8;\n  }\n  else{\n    arr[0]=1;\n    arr[1]=n;\n    arr[2]=tri(Math.floor(n.valueOf()/2))\n\
    \    arr[n+1]=tri(Math.floor(n.valueOf()/2))+tri(Math.floor((n+1)/2))\n  }\n \
    \ return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpc_aojce1.js:18\n  const arr = [];\n              ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at tri (/tmp/tmpc_aojce1.js:18:15)\n \
    \   at tri (/tmp/tmpc_aojce1.js:31:12)\n    at tri (/tmp/tmpc_aojce1.js:32:45)\n\
    \    at tri (/tmp/tmpc_aojce1.js:32:45)\n    at tri (/tmp/tmpc_aojce1.js:32:45)\n\
    \    at tri (/tmp/tmpc_aojce1.js:32:45)\n    at tri (/tmp/tmpc_aojce1.js:32:45)\n\
    \    at tri (/tmp/tmpc_aojce1.js:32:45)\n    at tri (/tmp/tmpc_aojce1.js:32:45)\n\
    \    at tri (/tmp/tmpc_aojce1.js:32:45)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tvar first = [3,1];\n\tvar second\
    \ = [1];\n\tvar third = [1];\n\n\tfor(var i = 1; i < n; i++){\n\t\tvar sum = third[i\
    \ - 1] + second[i - 1] + first[i-1];\n\t\tfirst[i] = sum;\n\t\tif(sum > sum *\
    \ 2){\n\t\t\tsecond.push(sum);\n\t\t}\n\t\telse{\n\t\t\tthird.push(sum);\n\t\t\
    }\n\t}\n\n\treturn first;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  5,\n\
    \  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at\
    \ test (/tmp/tmpxlenmjdo.js:40:10)\n    at Object.<anonymous> (/tmp/tmpxlenmjdo.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 5, NaN\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    if(n === 0){\n        return\
    \ [1,3];\n    }\n\n    if(n === 1){\n        return [1];\n    }\n\n    if(n %\
    \ 2 === 0){\n        return [tri(n - 1) + tri(n - 2), tri(n - 2)];\n    }\n\n\
    \    return [tri(n - 2) + tri(n - 1), tri(n - 1) + tri(n - 2)];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '111,3,1,3',\n\
    \  '11,3,1,31'\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n\
    \    at test (/tmp/tmpkvdt9yfp.js:38:10)\n    at Object.<anonymous> (/tmp/tmpkvdt9yfp.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '111,3,1,3',\
    \ '11,3,1,31' ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    if(n<=1){\n\
    \        arr.push(1);\n        return arr;\n    }\n    let half = n >> 1;\n  \
    \  arr.push(tri(half));\n    arr.push(tri(n - half + half));\n    return arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyq2om2cg.js:20\n        arr.push(1);\n            ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at Array.push (<anonymous>)\n    at tri\
    \ (/tmp/tmpyq2om2cg.js:20:13)\n    at tri (/tmp/tmpyq2om2cg.js:24:14)\n    at\
    \ tri (/tmp/tmpyq2om2cg.js:25:14)\n    at tri (/tmp/tmpyq2om2cg.js:25:14)\n  \
    \  at tri (/tmp/tmpyq2om2cg.js:25:14)\n    at tri (/tmp/tmpyq2om2cg.js:25:14)\n\
    \    at tri (/tmp/tmpyq2om2cg.js:25:14)\n    at tri (/tmp/tmpyq2om2cg.js:25:14)\n\
    \    at tri (/tmp/tmpyq2om2cg.js:25:14)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  return [tri1(3), tri1(2), tri1(1),\
    \ tri1(n), tri1(n + 1), tri1(n + 2), tri1(n + 3)]\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp1_ixduhq.js:18\n  return [tri1(3), tri1(2), tri1(1), tri1(n), tri1(n\
    \ + 1), tri1(n + 2), tri1(n + 3)]\n  ^\n\nReferenceError: tri1 is not defined\n\
    \    at tri (/tmp/tmp1_ixduhq.js:18:3)\n    at test (/tmp/tmp1_ixduhq.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmp1_ixduhq.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tif(n===0){\n\t\treturn [0,1];\n\
    \t}\n\tvar arr=[];\n\tif(n%2===0){\n\t\tarr.push(n);\n\t\tarr.push(tri(n-1)+tri(n-2)+tri(n+1));\n\
    \t}else{\n\t\tarr.push(n);\n\t\tarr.push(tri(n-1)+tri(n+1));\n\t}\n\treturn arr;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpviux8xfi.js:19\n\t\treturn [0,1];\n\t\t^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at tri (/tmp/tmpviux8xfi.js:19:3)\n    at tri\
    \ (/tmp/tmpviux8xfi.js:27:12)\n    at tri (/tmp/tmpviux8xfi.js:24:12)\n    at\
    \ tri (/tmp/tmpviux8xfi.js:27:21)\n    at tri (/tmp/tmpviux8xfi.js:24:12)\n  \
    \  at tri (/tmp/tmpviux8xfi.js:27:21)\n    at tri (/tmp/tmpviux8xfi.js:24:12)\n\
    \    at tri (/tmp/tmpviux8xfi.js:27:21)\n    at tri (/tmp/tmpviux8xfi.js:24:12)\n\
    \    at tri (/tmp/tmpviux8xfi.js:27:21)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: -5
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    let i = 0;\n\
    \    while(i <= n){\n        arr.push(3);\n        arr.push(i/2);\n        i++;\n\
    \    }\n    while(arr.length !== n + 1){\n        arr.push((arr[arr.length - 1]\
    \ + arr[arr.length - 2] + arr[arr.length - 1])/3);\n    }\n    return arr;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7fff6b30d960\n 1: 0x2b5b26284727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b5b26e1928e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b5b267554a2  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b5b268e8373  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b5b268ea8f0  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b5b26ad77db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b5b264367f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1659977212
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tlet result = [1,3];\n\tfor(let\
    \ i = 3; i <= n; i+=2){\n\t\tresult.push(result[i-1] + result[i-2] + result[i+1]);\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at\
    \ test (/tmp/tmpo6ntzd_k.js:30:10)\n    at Object.<anonymous> (/tmp/tmpo6ntzd_k.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, NaN\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    // Write your code here\n   \
    \ let arr = [3,1]\n    if(n%2==0){\n        arr.push(n/2)\n    }\n    else{\n\
    \        arr.push(tri(n-1)+tri(n-2)+tri(n+1))\n    }\n    return arr\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8aomdty4.js:21\n        arr.push(n/2)\n            ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at Array.push (<anonymous>)\n    at tri\
    \ (/tmp/tmp8aomdty4.js:21:13)\n    at tri (/tmp/tmp8aomdty4.js:24:18)\n    at\
    \ tri (/tmp/tmp8aomdty4.js:24:27)\n    at tri (/tmp/tmp8aomdty4.js:24:27)\n  \
    \  at tri (/tmp/tmp8aomdty4.js:24:27)\n    at tri (/tmp/tmp8aomdty4.js:24:27)\n\
    \    at tri (/tmp/tmp8aomdty4.js:24:27)\n    at tri (/tmp/tmp8aomdty4.js:24:27)\n\
    \    at tri (/tmp/tmp8aomdty4.js:24:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = []\n  if(n>0){\n    arr.push(1)\n\
    \    for(let i=2; i<=n; i++){\n      arr.push(arr[i-1] + arr[i-2])\n    }\n  }\n\
    \  return arr\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  NaN,\n\
    \  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at\
    \ test (/tmp/tmp03b189vj.js:33:10)\n    at Object.<anonymous> (/tmp/tmp03b189vj.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, NaN,\
    \ NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  return _tri(n, 0, [], 1);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpd2cemfva.js:18\n  return _tri(n, 0, [], 1);\n  ^\n\nReferenceError:\
    \ _tri is not defined\n    at tri (/tmp/tmpd2cemfva.js:18:3)\n    at test (/tmp/tmpd2cemfva.js:26:20)\n\
    \    at Object.<anonymous> (/tmp/tmpd2cemfva.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let a = []\n    for(let i = 1;\
    \ i <= n; i++){\n        a[i-1] = tri(n - i) + tri(i + 1)\n    }\n    return a\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphzqdl79c.js:18\n    let a = []\n            ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at tri (/tmp/tmphzqdl79c.js:18:13)\n    at tri\
    \ (/tmp/tmphzqdl79c.js:20:18)\n    at tri (/tmp/tmphzqdl79c.js:20:18)\n    at\
    \ tri (/tmp/tmphzqdl79c.js:20:31)\n    at tri (/tmp/tmphzqdl79c.js:20:18)\n  \
    \  at tri (/tmp/tmphzqdl79c.js:20:31)\n    at tri (/tmp/tmphzqdl79c.js:20:18)\n\
    \    at tri (/tmp/tmphzqdl79c.js:20:31)\n    at tri (/tmp/tmphzqdl79c.js:20:18)\n\
    \    at tri (/tmp/tmphzqdl79c.js:20:31)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tif (n <= 0) return [];\n\tif (n\
    \ % 2 == 0) return [tri(n - 1)[0], tri(n - 2)[1], tri(n - 1)[1] + tri(n - 2)[2]];\n\
    \telse return [tri(n - 2)[0], tri(n - 1)[1], tri(n - 2)[1] + tri(n - 1)[2]];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n\
    \  8\n]\n    at test (/tmp/tmpkooshdk0.js:28:10)\n    at Object.<anonymous> (/tmp/tmpkooshdk0.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tif(n<0){\n\t\treturn [];\n\t}\n\
    \tif(n==0){\n\t\treturn [1];\n\t}\n\tif(n==1){\n\t\treturn [3, 1];\n\t}\n\tvar\
    \ arr = tri(n-1) + tri(n-2);\n\treturn arr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'3,113,1'\n\n\
    should loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp80_bjsxj.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp80_bjsxj.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '3,113,1',\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tif(n === 1) return [];\n\treturn\
    \ [n,((n-1)/2)*tri(n-1)+(n/2)*tri(n-2)+(n+1)*tri(n+1),tri(n)];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpgpqu46ng.js:19\n\treturn [n,((n-1)/2)*tri(n-1)+(n/2)*tri(n-2)+(n+1)*tri(n+1),tri(n)];\n\
    \t^\n\nRangeError: Maximum call stack size exceeded\n    at tri (/tmp/tmpgpqu46ng.js:19:2)\n\
    \    at tri (/tmp/tmpgpqu46ng.js:19:22)\n    at tri (/tmp/tmpgpqu46ng.js:19:22)\n\
    \    at tri (/tmp/tmpgpqu46ng.js:19:22)\n    at tri (/tmp/tmpgpqu46ng.js:19:22)\n\
    \    at tri (/tmp/tmpgpqu46ng.js:19:22)\n    at tri (/tmp/tmpgpqu46ng.js:19:22)\n\
    \    at tri (/tmp/tmpgpqu46ng.js:19:22)\n    at tri (/tmp/tmpgpqu46ng.js:19:22)\n\
    \    at tri (/tmp/tmpgpqu46ng.js:19:22)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var firstTriNum=3;\n    var secondTriNum=1;\n\
    \    var thirdTriNum=2;\n    var lastTriNum=n-1;\n    var arrTri=[firstTriNum,secondTriNum,thirdTriNum];\n\
    \    if(lastTriNum%2==1){\n        arrTri[2]=arrTri[1]+arrTri[0];\n    }\n   \
    \ arrTri[n]=arrTri[n-1]+arrTri[n-2]+arrTri[n+1];\n    return arrTri;\n}\n</code>\n\
    <|/ a |>\n<| a |>\nThis is a python solution using recursion to calculate the\
    \ sum of a list with n elements:\n<code>\ndef sumOfN(l, n):\n    if n == 0:\n\
    \        return 0\n    leftSum = sumOfN(l, n - 1)\n    rightSum = sumOfN(l, n\
    \ - 2)\n    return leftSum + rightSum\n\nprint sumOfN([2, 3, 4, 5], 3)\n</code>\n\
    <|/ a tags=algorithm,arrays,math dscore=3 |>\n<| a tags=algorithm,arrays,math\
    \ |>\n<code>\ndef sumOfN(l, n):\n    if n == 0 :\n        return 0\n    else :\n\
    \        return sum(l) + sumOfN(l,n-1)\n\nprint sumOfN([2,3,4,5],3)\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nThanks for this code. How about if I want to print\
    \ `sumOfN([2,3,4,5],3)` as output of `sumOfN([2,3,4,5],3)` ? I tried `return sumOfN(sumOfN(l,n-1),n-1)`\
    \ but it doesn't work.\n<|/ c |>\n<| c |>\njust use another return statement `return\
    \ sumOfN(sumOfN(l,n-1),n-1)`\n<|/ c |>\n<| c |>\nThanks. I was trying this solution\
    \ and I was getting stuck on this recursion. Now I finally got it. :)\n<|/ c |>\n\
    <| a tags=algorithm,arrays,math dscore=2 |>\n<code>\nint sum(int arr[], int n,\
    \ int i, int sum) {\n    if(i == n)\n        return sum;\n    else {\n       \
    \ return arr[i] + sum(arr,n,i+1,sum + arr[i]);\n    }\n}\n\nint main(void) {\n\
    \    int arr[] = {2,3,4,5,6};\n    printf(\"%d\", sum(arr,6,0,0));\n    return\
    \ 0;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't give the correct answer. The\
    \ answer should be `38`, but your code gives `40`.\n<|/ c \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp45crzi4q.js:29\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n   let arr = [];\n   let temp = [];\n\
    \   if(n === 1 || n === 2)\n       arr.push(1);\n   if(n === 1)\n       arr.push(1);\n\
    \   if(n === 2)\n       arr.push(2);\n   for(let i = 2; i <= n; i++){\n      \
    \ temp.push(i);\n       if(i%2 === 0){\n           arr.push(temp[temp.length-1]+temp[temp.length-2]);\n\
    \       }\n   }\n   return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpt54pg_kw.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt54pg_kw.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var sum = 0;\n    var arr = [1,\
    \ 3];\n    for(var i = 0; i < n; i++){\n        sum += arr[(i + 1) % 2];\n   \
    \     arr.push((sum + arr[i]) % 2);\n    }\n    return arr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  0,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n\
    ]\n    at test (/tmp/tmpv9ivsewl.js:32:10)\n    at Object.<anonymous> (/tmp/tmpv9ivsewl.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 0,\
    \ 1, 1 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  return [(n+1);\n          (n+1);\n\
    \          (n+1)];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp3frplw8j.js:18\n  return [(n+1);\n               ^\n\nSyntaxError:\
    \ Unexpected token ';'\n    at Object.compileFunction (node:vm:360:18)\n    at\
    \ wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if(n === 0) return [];\n  let arr\
    \ = [];\n  let arr2 = [1,2,3];\n  for(let i = 0; i < n; i++){\n    arr.push(arr2[i]);\n\
    \    arr2.push(arr2[i] + arr2[i+1]);\n  }\n  return arr;\n}\nconst n = 3;\nconst\
    \ result = tri(n);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmplnqxt5px.js:34:10)\n    at Object.<anonymous> (/tmp/tmplnqxt5px.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tlet arr = []\n\tfor(let i = 0;\
    \ i <= n; i++){\n\t\tarr.push( n - 2*((n-2)/2) + 1)\n\t}\n\treturn arr\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n  \
    \  at test (/tmp/tmp7yn92eqo.js:30:10)\n    at Object.<anonymous> (/tmp/tmp7yn92eqo.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 3,\
    \ 3 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tif (n < 0) return [];\n\tif (n\
    \ === 1) return [1, 1, 1];\n\tif (n % 2 === 0) return tri(n - 1) + [tri(n - 1)[tri(n\
    \ - 1)[0]+1]+1];\n\treturn tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4)[tri(n\
    \ - 4)[0]+1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1,1,121,1,1NaNundefined'\n\
    \nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp5eg_kd73.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5eg_kd73.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1,1,121,1,1NaNundefined',\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let t = [1,3,2];\n    for (let\
    \ i = 2; i <= n; i++){\n        t[i+1] = t[i] + t[i-1];\n    }\n    return t;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  2,\n  5,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n\
    ]\n    at test (/tmp/tmpfq44rbms.js:29:10)\n    at Object.<anonymous> (/tmp/tmpfq44rbms.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 2,\
    \ 5, 7 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let result = [],\n        arr\
    \ = [];\n    if(n <= 1) return arr;\n    for(let i = 0; i < n; i++){\n       \
    \ if(i % 2 === 0){\n            arr.push(i);\n            result.push(arr[i-1]\
    \ + arr[i-2] + arr[i-3]);\n        }\n        else{\n            result.push(arr[i-1]\
    \ + arr[i-2] + arr[i-3]);\n        }\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n\
    \  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at\
    \ test (/tmp/tmpjb40nz_i.js:38:10)\n    at Object.<anonymous> (/tmp/tmpjb40nz_i.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN,\
    \ NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [0,1];\n  for (let i=1;\
    \ i<=n; i++){\n    arr.push(arr[i] + arr[i-1]);\n  }\n  return arr;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n\
    ]\n    at test (/tmp/tmpldrge289.js:30:10)\n    at Object.<anonymous> (/tmp/tmpldrge289.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1,\
    \ 2, 3 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    if(n ===\
    \ 0 || n === 1) return [];\n    var firstFibo = tri(n - 1);\n    var secondFibo\
    \ = firstFibo.slice(0);\n    secondFibo[0] = secondFibo[0] + secondFibo[1];\n\
    \    secondFibo[secondFibo.length - 1] = secondFibo[secondFibo.length - 1] + secondFibo[secondFibo.length\
    \ - 2];\n    firstFibo.forEach(function(value, index) {\n      secondFibo.forEach(function(value2,\
    \ index2){\n        if(index < index2){\n          result.push(value);\n     \
    \   }\n      });\n    });\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpvexex_cm.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvexex_cm.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    return tri_helper(3,n)\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpeun3whvt.js:18\n    return tri_helper(3,n)\n    ^\n\nReferenceError:\
    \ tri_helper is not defined\n    at tri (/tmp/tmpeun3whvt.js:18:5)\n    at test\
    \ (/tmp/tmpeun3whvt.js:26:20)\n    at Object.<anonymous> (/tmp/tmpeun3whvt.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    if(n<0){\n        throw \"tri\
    \ function takes positive integer as first argument\";\n    }\n    if(isEven(n)){\n\
    \        return [\n            tri(n-2) + tri(n-1),\n            tri(2) + tri(1)\n\
    \        ];\n    }else{\n        return [\n            tri(n-2) + tri(n-1),\n\
    \            tri(2) + tri(1) + tri(n) + tri(n+1)\n        ];\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpml1tid1w.js:21\n    if(isEven(n)){\n    ^\n\nReferenceError: isEven\
    \ is not defined\n    at tri (/tmp/tmpml1tid1w.js:21:5)\n    at test (/tmp/tmpml1tid1w.js:39:20)\n\
    \    at Object.<anonymous> (/tmp/tmpml1tid1w.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let a = [];\n    let i = 3;\n\
    \    while(i<=n){\n        a.push(i);\n        i = i+3;\n    }\n    return a;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp8inbdrfy.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8inbdrfy.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3 ],\n \
    \ expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if (n <= 3) return [1]; // Special\
    \ case\n  return [tri(n - 1) + tri(n - 2) + tri(n - 3)];\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp_aaik47m.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_aaik47m.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let tri_arr = [];\n  let current\
    \ = 1;\n  for(let i = 1; i <= n + 2; i++){\n    tri_arr.push(current);\n    current\
    \ = current + 2;\n  }\n  return tri_arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  5,\n  7,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n\
    ]\n    at test (/tmp/tmpdy0f34xx.js:32:10)\n    at Object.<anonymous> (/tmp/tmpdy0f34xx.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 5,\
    \ 7, 9 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tvar results = [];\n\tfor (var i\
    \ = 1; i <= n; i++) {\n\t\tresults.push(i);\n\t\tresults.push(i/2);\n\t\tif (i\
    \ % 2 === 0) {\n\t\t\tresults.push(i+1);\n\t\t}\n\t}\n\treturn results;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0.5,\n\
    \  2,\n  1,\n  3,\n  3,\n  1.5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n\
    \  2,\n  8\n]\n    at test (/tmp/tmpth96cbbg.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpth96cbbg.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 0.5,   2, 1,\n    3,   3, 1.5\n  ],\n  expected: [ 1, 3, 2, 8 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = [n];\n  var n2 = n >>\
    \ 1;\n  if(n2 > 1){\n    var n3 = n2;\n    while(n3 < n){\n      n3 = n3 + n2;\n\
    \      arr.push(n3);\n    }\n  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp4wb91n_p.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4wb91n_p.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3 ],\n \
    \ expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if(n === 0 || n === 1){\n    return\
    \ [3,1];\n  }\n  if(n === 2){\n    return [1, 3, 2];\n  }\n  return [tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n + 1), tri(n - 1) + tri(n - 2)];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpkovj_h53.js:24\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ tri(n - 1) + tri(n + 1), tri(n - 1) + tri(n - 2)];\n                     ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at Array.join (<anonymous>)\n\
    \    at Array.toString (<anonymous>)\n    at tri (/tmp/tmpkovj_h53.js:24:22)\n\
    \    at tri (/tmp/tmpkovj_h53.js:24:11)\n    at tri (/tmp/tmpkovj_h53.js:24:37)\n\
    \    at tri (/tmp/tmpkovj_h53.js:24:11)\n    at tri (/tmp/tmpkovj_h53.js:24:37)\n\
    \    at tri (/tmp/tmpkovj_h53.js:24:11)\n    at tri (/tmp/tmpkovj_h53.js:24:37)\n\
    \    at tri (/tmp/tmpkovj_h53.js:24:11)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    if(n > 1){\n        if(n % 2\
    \ == 0){\n           return [tri(n - 1) + tri(n - 2) + tri(n - 3), tri(n - 2),\
    \ tri(n - 1)];\n        }\n        else{\n            return [tri(n - 2) + tri(n\
    \ - 1) + tri(n - 3), tri(n - 1), tri(n + 1), tri(n - 3)];\n        }\n    }\n\
    \    return [];\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThat doesn't seem to\
    \ work for `n=0`. [Try it here](https://jsfiddle.net/z2g5L9q5/)\n<|/ c |>\n<|\
    \ c |>\nI believe that it will work for all numbers, from 0 to `n`.\n<|/ c |>\n\
    <| c |>\nThe problem is that the question isn't explicitly asking for `n=0`. But\
    \ yes, this works for the OP's use case.\n<|/ c |>\n<| a dscore=3 |>\nHere is\
    \ a solution that does not require any loops. Instead we use a recursive function\
    \ and take advantage of the fact that we can reuse our tribonacci function. We\
    \ also avoid any arrays and do everything with recursion itself.\n\n<code>\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8o22ey_q.js:28\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tif(!isNumeric(n) || n<=0){\n\t\t\
    return [];\n\t}\n\tvar arr = [];\n\tvar counter = 1;\n\tfor(var i=2;i<=n;i++){\n\
    \t\tcounter++;\n\t\tif(counter%2===0){\n\t\t\tarr.push(i);\n\t\t}\n\t}\n\treturn\
    \ arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpitx70tat.js:18\n\tif(!isNumeric(n) || n<=0){\n\t^\n\nReferenceError:\
    \ isNumeric is not defined\n    at tri (/tmp/tmpitx70tat.js:18:2)\n    at test\
    \ (/tmp/tmpitx70tat.js:37:20)\n    at Object.<anonymous> (/tmp/tmpitx70tat.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tvar array = [];\n\tfor(var i=1;\
    \ i<n+1; i++){\n\t\tarray.push((i%2 == 0)?(array[i-1]+array[i-2]+array[i-2]):(array[i-1]+array[i-2]+array[i-3]));\n\
    \t}\n\treturn array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n\
    \  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at\
    \ test (/tmp/tmpj4tytlac.js:30:10)\n    at Object.<anonymous> (/tmp/tmpj4tytlac.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN,\
    \ NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [];\n  arr.push(n);\n\
    \  arr.push(n+1);\n  \n  if(n%2 === 0){\n    let leftTri = tri(Math.floor(n /\
    \ 2));\n    let rightTri = tri(n - Math.floor(n / 2));\n    arr = arr.concat(leftTri,rightTri);\n\
    \  }\n  return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpws2io5w4.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpws2io5w4.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 4 ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    if(n<=0){\n        console.log(\"\
    The input number is invalid\");\n    }else{\n        var array = [];\n       \
    \ for(var i=0;i<=n;i++){\n            if(i%2==0){\n                array.push(i);\n\
    \            }else{\n                array.push(tri(i-1)+tri(i-2));\n        \
    \    }\n        }\n        return array;\n    }\n}\n</code>\n<|/ a tags=recursion,javascript,fibonacci\
    \ dscore=4 |>\n<| a tags=recursion,javascript,fibonacci |>\nRecursion is just\
    \ another way of doing math. In the Fibonacci series you calculate the next number\
    \ by adding its two previous numbers. In JavaScript this would be done by adding\
    \ up the results of two previous calls:\n<code>\nvar fibonacci = function(n) {\n\
    \  if (n === 0 || n === 1) {\n    return n;\n  }\n\n  return fibonacci(n - 1)\
    \ + fibonacci(n - 2);\n}\n</code>\nHere you see that each call returns the next\
    \ number to the previous call:\n<code>\nfibonacci(0); // 0\nfibonacci(1); // 1\n\
    fibonacci(2); // 1\nfibonacci(3); // 2\nfibonacci(4); // 3\nfibonacci(5); // 5\n\
    </code>\nAs the result of the function call fibonacci(5) we get 5, but in each\
    \ subsequent call we subtract the current number from the previous result:\n<code>\n\
    fibonacci(5); // 5 - 0 = 5\nfibonacci(5); // 5 - 1 = 4\nfibonacci(5); // 5 - 2\
    \ = 5\nfibonacci(5); // 5 - 3 = 4\nfibonacci(5); // 5 - 4 = 5\n</code>\nAs the\
    \ result of the function call fibonacci(5) we get 4, but in each subsequent call\
    \ we add the current number to the previous result:\n<code>\nfibonacci(4); //\
    \ 4 + 0 = 4\nfibonacci(4); // 4 + 1 = 5\nfibonacci(4); // 4 + 2 = 6\nfibonacci(4);\
    \ // 4 + 3 = 7\n</code>\nAs the result of the function call fibonacci(4) we get\
    \ 7, but in each subsequent call we add the current number to the previous result:\n\
    <code>\nfibonacci(7); // 7 + 0 = 7\nfibonacci(7); // 7 + 1 = 8\nfibonacci(7);\
    \ // 7 + 2 = 9\nfibonacci(7); // 7 + 3 = 10\nfibonacci(7); // 7 + 4 = \nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpou__kcym.js:32\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    // Write your code here.\n  \
    \  var arr = [];\n    if(n<=1){\n        arr.push(n);\n        return arr;\n \
    \   }\n    if(n%2==0){\n        arr.push(tri(tri(tri(n-2)+tri(n-1)+n)));\n   \
    \ }else{\n        arr.push(tri(n-1)+tri(n-2)+tri(n));\n    }\n    return arr;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpk2cpl7rq.js:19\n    var arr = [];\n              ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at tri (/tmp/tmpk2cpl7rq.js:19:15)\n \
    \   at tri (/tmp/tmpk2cpl7rq.js:25:26)\n    at tri (/tmp/tmpk2cpl7rq.js:25:26)\n\
    \    at tri (/tmp/tmpk2cpl7rq.js:25:26)\n    at tri (/tmp/tmpk2cpl7rq.js:25:26)\n\
    \    at tri (/tmp/tmpk2cpl7rq.js:25:26)\n    at tri (/tmp/tmpk2cpl7rq.js:25:22)\n\
    \    at tri (/tmp/tmpk2cpl7rq.js:25:26)\n    at tri (/tmp/tmpk2cpl7rq.js:25:26)\n\
    \    at tri (/tmp/tmpk2cpl7rq.js:25:26)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var result = [];\n  var num;\n\
    \  if(n === 1 || n === 2){\n    num = 2;\n  } else {\n    num = 1;\n    for(var\
    \ i = 2; i <= n; i++){\n      num = num + i / 2;\n      if(i % 2 === 0){\n   \
    \     result.push(num);\n      }\n    }\n  }\n  return result;\n}\n</code>\n<|/\
    \ a tags=javascript,fibonacci |>\n<| a dscore=2 |>\n<code>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpcoecuwm0.js:33\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [];\n  \n  while(n >\
    \ 0){\n    arr.push(n - 1);\n    arr.push(n - 2);\n    arr.push(n + 1);\n    n--;\n\
    \  }\n  \n  return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  4,\n  1,\n  0,\n  3,\n  0,\n  -1,\n  2\n]\n\nshould loosely deep-equal\n\n\
    [\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp6v_agybh.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6v_agybh.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1,  4, 1, 0,\n    3, 0, -1, 2\n  ],\n  expected: [ 1, 3, 2, 8 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let a = [];\n    let a1 = [];\n\
    \    let a2 = [];\n    let a3 = [];\n    let a4 = [1];\n    let a5 = [1];\n  \
    \  let a6 = [1];\n    let a7 = [1];\n    let a8 = [];\n    if(n==1){\n       \
    \ a.push(1)\n        a.push(a[1])\n    }\n    if(n>1){\n        for(let i=0;i<n;i++){\n\
    \            if(i%2 ==0){\n                a1.push(i)\n            }\n       \
    \     else if(i%2 ==1){\n                a2.push(i)\n            }\n         \
    \   if(i%2 ==0){\n                a3.push(i)\n            }\n            else\
    \ if(i%2 ==1){\n                a4.push(i)\n            }\n            if(i%2\
    \ ==0){\n                a5.push(i)\n            }\n            else if(i%2 ==1){\n\
    \                a6.push(i)\n            }\n            if(i%2 ==0){\n       \
    \         a7.push(i)\n            }\n            else if(i%2 ==1){\n         \
    \       a8.push(i)\n            }\n        }\n    }\n    console.log(a);\n   \
    \ console.log(a1);\n    console.log(a2);\n    console.log(a3);\n    console.log(a4);\n\
    \    console.log(a5);\n    console.log(a6);\n    console.log(a7);\n    console.log(a8);\n\
    \    return a;\n}\ntri(12);\ntri(100);\ntri(200);\ntri(1000);\ntri(10000);\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpmrzji_g2.js:80:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmrzji_g2.js:92:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[]\n[ 0, 2, 4, 6, 8, 10 ]\n[ 1, 3, 5, 7, 9, 11 ]\n[ 0, 2, 4, 6, 8, 10 ]\n\
    [\n  1, 1,  3, 5,\n  7, 9, 11\n]\n[\n  1, 0,  2, 4,\n  6, 8, 10\n]\n[\n  1, 1,\
    \  3, 5,\n  7, 9, 11\n]\n[\n  1, 0,  2, 4,\n  6, 8, 10\n]\n[ 1, 3, 5, 7, 9, 11\
    \ ]\n[]\n[\n   0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20,\n  22, 24, 26, 28, 30,\
    \ 32, 34, 36, 38, 40, 42,\n  44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64,\n  66,\
    \ 68, 70, 72, 74, 76, 78, 80, 82, 84, 86,\n  88, 90, 92, 94, 96, 98\n]\n[\n  \
    \ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21,\n  23, 25, 27, 29, 31, 33, 35, 37,\
    \ 39, 41, 43,\n  45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65,\n  67, 69, 71, 73,\
    \ 75, 77, 79, 81, 83, 85, 87,\n  89, 91, 93, 95, 97, 99\n]\n[\n   0,  2,  4, \
    \ 6,  8, 10, 12, 14, 16, 18, 20,\n  22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,\n\
    \  44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64,\n  66, 68, 70, 72, 74, 76, 78,\
    \ 80, 82, 84, 86,\n  88, 90, 92, 94, 96, 98\n]\n[\n   1,  1,  3,  5,  7,  9, 11,\
    \ 13, 15, 17, 19,\n  21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41,\n  43, 45, 47,\
    \ 49, 51, 53, 55, 57, 59, 61, 63,\n  65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85,\n\
    \  87, 89, 91, 93, 95, 97, 99\n]\n[\n   1,  0,  2,  4,  6,  8, 10, 12, 14, 16,\
    \ 18,\n  20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40,\n  42, 44, 46, 48, 50, 52,\
    \ 54, 56, 58, 60, 62,\n  64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84,\n  86, 88,\
    \ 90, 92, 94, 96, 98\n]\n[\n   1,  1,  3,  5,  7,  9, 11, 13, 15, 17, 19,\n  21,\
    \ 23, 25, 27, 29, 31, 33, 35, 37, 39, 41,\n  43, 45, 47, 49, 51, 53, 55, 57, 59,\
    \ 61, 63,\n  65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85,\n  87, 89, 91, 93, 95,\
    \ 97, 99\n]\n[\n   1,  0,  2,  4,  6,  8, 10, 12, 14, 16, 18,\n  20, 22, 24, 26,\
    \ 28, 30, 32, 34, 36, 38, 40,\n  42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62,\n\
    \  64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84,\n  86, 88, 90, 92, 94, 96, 98\n\
    ]\n[\n   1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21,\n  23, 25, 27, 29, 31, 33,\
    \ 35, 37, 39, 41, 43,\n  45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65,\n  67, 69,\
    \ 71, 73, 75, 77, 79, 81, 83, 85, 87,\n  89, 91, 93, 95, 97, 99\n]\n[]\n[\n  \
    \  0,   2,   4,   6,   8,  10,  12,  14,  16,  18,  20,  22,\n   24,  26,  28,\
    \  30,  32,  34,  36,  38,  40, "
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let a = [], i=0, f=n<2?1:2;\n\
    \    for(let j=0;j<=n;j++){\n        if(i%2==0){\n            a.push(j);\n   \
    \         i++;\n        }else{\n            a.push(j+f);\n            i++;\n \
    \       }\n    }\n    return a;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  3,\n\
    \  2,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n  \
    \  at test (/tmp/tmpqc2gg367.js:36:10)\n    at Object.<anonymous> (/tmp/tmpqc2gg367.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 3, 2,\
    \ 5 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var arr = [];\n    if(n > 0){\n\
    \        arr.push(3);\n        for(var i = 0; i < n; i++){\n            arr.push(arr[i\
    \ - 1] + arr[i - 2] + arr[i + 1])\n        }\n    }\n    return arr\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n\
    \  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n\
    \    at test (/tmp/tmprctzlkhe.js:33:10)\n    at Object.<anonymous> (/tmp/tmprctzlkhe.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN,\
    \ NaN, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if (n <= 1) return [];\n  const\
    \ arr = [];\n  arr.push(3);\n  arr.push(1);\n  for (let i = 2; i <= n; i++) {\n\
    \    arr.push(arr.slice(-1)[0] + arr.slice(-2)[0]);\n  }\n  return arr;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n\
    \  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n  \
    \  at test (/tmp/tmp4pbkr9uh.js:33:10)\n    at Object.<anonymous> (/tmp/tmp4pbkr9uh.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 4,\
    \ 5 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var result = [];\n  \n  for (var\
    \ i = 1; i <= n; i++) {\n    result.push((i % 2 === 0 ) ? i : i + n/2);\n  }\n\
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.5,\n  2,\n\
    \  4.5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at\
    \ test (/tmp/tmpt7gp8dv8.js:31:10)\n    at Object.<anonymous> (/tmp/tmpt7gp8dv8.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.5, 2,\
    \ 4.5 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = [];\n  var a = 1, b =\
    \ 2, c;\n  for(var i = 0; i < n; i++){\n    c = a + b;\n    a = b;\n    b = c;\n\
    \    arr.push(c);\n  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  5,\n\
    \  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpgt_bl7uc.js:34:10)\n    at Object.<anonymous> (/tmp/tmpgt_bl7uc.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 5, 8\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var result = [];\n  if (n === 1){\n\
    \    return [3];\n  }\n  for (var i = 2; i < n; i++){\n    result.push(tri(i -\
    \ 1) + tri(i - 2) + tri(i + 1))\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp038raijh.js:23\n    result.push(tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1))\n                           ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at Array.join (<anonymous>)\n    at Array.toString (<anonymous>)\n    at\
    \ tri (/tmp/tmp038raijh.js:23:28)\n    at tri (/tmp/tmp038raijh.js:23:43)\n  \
    \  at tri (/tmp/tmp038raijh.js:23:43)\n    at tri (/tmp/tmp038raijh.js:23:43)\n\
    \    at tri (/tmp/tmp038raijh.js:23:43)\n    at tri (/tmp/tmp038raijh.js:23:43)\n\
    \    at tri (/tmp/tmp038raijh.js:23:43)\n    at tri (/tmp/tmp038raijh.js:23:43)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tvar arr = [];\n\tarr[0] = tri(n\
    \ - 1);\n\tarr[1] = tri(n - 2) + tri(n - 1) + tri(n + 1);\n\treturn arr;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8j1e6gqn.js:18\n\tvar arr = [];\n\t          ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at tri (/tmp/tmp8j1e6gqn.js:18:12)\n    at tri\
    \ (/tmp/tmp8j1e6gqn.js:19:11)\n    at tri (/tmp/tmp8j1e6gqn.js:19:11)\n    at\
    \ tri (/tmp/tmp8j1e6gqn.js:19:11)\n    at tri (/tmp/tmp8j1e6gqn.js:19:11)\n  \
    \  at tri (/tmp/tmp8j1e6gqn.js:19:11)\n    at tri (/tmp/tmp8j1e6gqn.js:19:11)\n\
    \    at tri (/tmp/tmp8j1e6gqn.js:19:11)\n    at tri (/tmp/tmp8j1e6gqn.js:19:11)\n\
    \    at tri (/tmp/tmp8j1e6gqn.js:19:11)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  return Array.apply(null, {length:\
    \ (n + 1) / 2 }).map(function (_, i) {\n    return i * (i + 1) / 2;\n  });\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp92vyidvu.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp92vyidvu.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1 ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977210
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let numbers = [];\n  numbers[0]\
    \ = 3;\n  numbers[1] = 1;\n  if(n % 2 !== 0){\n    numbers[2] = Math.floor(n /\
    \ 2);\n  }\n  if(n % 2 === 0){\n    numbers[3] = numbers[2];\n    numbers[4] =\
    \ numbers[1] + numbers[2];\n  }\n  return numbers.slice(0,n+1);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmp08f4jmlv.js:36:10)\n    at Object.<anonymous> (/tmp/tmp08f4jmlv.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 1\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [];\n  \n  if(n<=0){\n\
    \    return arr;\n  }\n  if(n%2===0){\n    arr.push(1);\n    arr.push(n/2);\n\
    \  }\n  else{\n    arr.push(1);\n    arr.push(tri(n-1)+tri(n-2)+tri(n+1));\n \
    \ }\n  \n  return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  '1,11,1,11,2'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmplv0fskwx.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmplv0fskwx.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, '1,11,1,11,2'\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = []\n    if (n<=0) return\
    \ arr\n    if (n%2==0){\n        arr.push(tri(n-1))\n        arr.push(tri(n-2))\n\
    \        arr.push(tri(n+1))\n        return arr\n    }\n    arr.push(tri(n-1))\n\
    \    arr.push(tri(n-2))\n    arr.push(tri(n+1))\n    return arr\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmph6pt0z1d.js:18\n    let arr = []\n              ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at tri (/tmp/tmph6pt0z1d.js:18:15)\n \
    \   at tri (/tmp/tmph6pt0z1d.js:21:18)\n    at tri (/tmp/tmph6pt0z1d.js:28:14)\n\
    \    at tri (/tmp/tmph6pt0z1d.js:21:18)\n    at tri (/tmp/tmph6pt0z1d.js:28:14)\n\
    \    at tri (/tmp/tmph6pt0z1d.js:21:18)\n    at tri (/tmp/tmph6pt0z1d.js:28:14)\n\
    \    at tri (/tmp/tmph6pt0z1d.js:21:18)\n    at tri (/tmp/tmph6pt0z1d.js:28:14)\n\
    \    at tri (/tmp/tmph6pt0z1d.js:21:18)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\treturn [tri(n - 1) + tri(n - 2),\
    \ tri(n - 1) + tri(n + 1)];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzhm8apf3.js:18\n\treturn [tri(n - 1) + tri(n - 2), tri(n - 1) +\
    \ tri(n + 1)];\n\t^\n\nRangeError: Maximum call stack size exceeded\n    at tri\
    \ (/tmp/tmpzhm8apf3.js:18:2)\n    at tri (/tmp/tmpzhm8apf3.js:18:10)\n    at tri\
    \ (/tmp/tmpzhm8apf3.js:18:10)\n    at tri (/tmp/tmpzhm8apf3.js:18:10)\n    at\
    \ tri (/tmp/tmpzhm8apf3.js:18:10)\n    at tri (/tmp/tmpzhm8apf3.js:18:10)\n  \
    \  at tri (/tmp/tmpzhm8apf3.js:18:10)\n    at tri (/tmp/tmpzhm8apf3.js:18:10)\n\
    \    at tri (/tmp/tmpzhm8apf3.js:18:10)\n    at tri (/tmp/tmpzhm8apf3.js:18:10)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tlet arr = [3]\n\tif(n%2 === 0)\
    \ arr.push(tri(n-1))\n\tarr.push(arr[n-2] + arr[n-1])\n\treturn arr\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpifk_vi8_.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpifk_vi8_.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1,1];\n    for (let\
    \ i = 2; i <= n; i+=2) {\n      arr.push(arr[i - 1] + arr[i - 2])\n    }\n   \
    \ return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpl39mo1a5.js:30:10)\n    at Object.<anonymous> (/tmp/tmpl39mo1a5.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let result = [0,0,0];\n  for (let\
    \ i = n-1; i>0; i--){\n    result = [result[1], result[2], result[0] + result[1]]\
    \ \n  }\n  return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmplzl38g3j.js:29:10)\n    at Object.<anonymous> (/tmp/tmplzl38g3j.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if (n === 1 || n === 3) {\n   \
    \ return [1];\n  } else if (n === 0) {\n    return [];\n  }\n  \n  let a = [1,1];\n\
    \  let b = [1,2];\n  let c = [1,3];\n  let d = [1];\n  let i, j, k;\n  \n  for(i\
    \ = 0; i < n; i += 1) {\n    if( n % 2 === 0 ) {\n      a.push(b[0]);\n      a.push(b[1]);\n\
    \      a.push(b[2]);\n      a.push(b[3]);\n      a.push(b[0]);\n      a.push(b[1]);\n\
    \      a.push(b[2]);\n      a.push(b[3]);\n      \n      b.push(a[0]);\n     \
    \ b.push(a[1]);\n      b.push(a[2]);\n      b.push(a[3]);\n      b.push(a[0]);\n\
    \      b.push(a[1]);\n      b.push(a[2]);\n      b.push(a[3]);\n      \n     \
    \ c.push(a[0]);\n      c.push(a[1]);\n      c.push(a[2]);\n      c.push(a[3]);\n\
    \      c.push(a[0]);\n      c.push(a[1]);\n      c.push(a[2]);\n      c.push(a[3]);\n\
    \      \n      d.push(b[0]);\n      d.push(b[1]);\n      d.push(b[2]);\n     \
    \ d.push(b[3]);\n      d.push(b[0]);\n      d.push(b[1]);\n      d.push(b[2]);\n\
    \      d.push(b[3]);\n      \n      a = b;\n      b = c;\n      c = d;\n     \
    \ d = [];\n    }\n    \n    a.push(a[a.length-1]+a[0]+a[a.length-1]);\n    b.push(2*a[a.length-1]+a[1]+a[2]);\n\
    \    c.push(3*a[a.length-1]+a[3]+a[4]);\n    d.push(a[a.length-1]);\n  }\n  \n\
    \  return d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp4tv8mt_0.js:88:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4tv8mt_0.js:100:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    var tri\
    \ = 0;\n    var a=0;\n    if(n>0){\n        var arr = [];\n        arr.push(3);\n\
    \        for(var i=1;i<=n;i++){\n            arr.push(tri+(i+1)/2);\n        }\n\
    \        tri+=1;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp6wo40ndq.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6wo40ndq.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if (n < 1){\n    return [];\n \
    \ }\n  return tri(n - 1) + tri(n - 2) + tri(n + 1);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmptms7g9g2.js:21\n  return tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \                    ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.join (<anonymous>)\n    at Array.toString (<anonymous>)\n    at tri (/tmp/tmptms7g9g2.js:21:21)\n\
    \    at tri (/tmp/tmptms7g9g2.js:21:10)\n    at tri (/tmp/tmptms7g9g2.js:21:36)\n\
    \    at tri (/tmp/tmptms7g9g2.js:21:10)\n    at tri (/tmp/tmptms7g9g2.js:21:36)\n\
    \    at tri (/tmp/tmptms7g9g2.js:21:10)\n    at tri (/tmp/tmptms7g9g2.js:21:36)\n\
    \    at tri (/tmp/tmptms7g9g2.js:21:10)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = [];\n  for(var i=0; i<n;\
    \ i++){\n    arr.push(\n      (n & 1)?(i+2)+(i+1): (i+3)+(i+2)\n    );\n  }\n\
    \  return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  5,\n\
    \  7\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmp931cdsa_.js:32:10)\n    at Object.<anonymous> (/tmp/tmp931cdsa_.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 5, 7\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if (n <= 1){\n    return [];\n\
    \  }\n  if (n % 2 === 0){\n    return [tri(n - 1)[0] + 1];\n  }\n  return tri(n\
    \ - 1)[0] + tri(n - 1) + tri(n - 2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaNNaN'\n\nshould\
    \ loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp9nht2fkd.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9nht2fkd.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaNNaN',\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [];\n  let lastThree\
    \ = n / 3\n  let firstThree = lastThree - lastThree / 3\n  arr.push(firstThree);\n\
    \  arr.push(lastThree);\n  arr.push(lastThree + firstThree);\n  return arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.6666666666666667,\n\
    \  1,\n  1.6666666666666667\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n\
    \  2,\n  8\n]\n    at test (/tmp/tmp6cboezu9.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6cboezu9.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.6666666666666667,\
    \ 1, 1.6666666666666667 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tif (n < 0){\n\t\tthrow \"Tribonacci\
    \ sequence error\";\n\t}\n\tif (n % 2 == 0){\n\t\treturn [1 + n/2, 1 + n/2, 1\
    \ + n/2, 1 + n/2];\n\t}\n\telse{\n\t\treturn tri(n - 1) + tri(n - 2) + tri(n -\
    \ 3);\n\t}\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n/tmp/tmpvx7w35d2.js:19\n\t\tthrow \"Tribonacci sequence error\";\n\t\t\
    ^\nTribonacci sequence error\n(Use `node --trace-uncaught ...` to show where the\
    \ exception was thrown)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var arr = [1, 3];\n    var counter\
    \ = 2;\n    var temp;\n\n    while(counter < n+1){\n        temp = arr[2] + arr[1]\
    \ + arr[0];\n        arr[0] = arr[1];\n        arr[1] = arr[2];\n        arr[2]\
    \ = temp;\n        counter++;\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n\
    \    at test (/tmp/tmpbdpoeo6s.js:36:10)\n    at Object.<anonymous> (/tmp/tmpbdpoeo6s.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ NaN, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = [3];\n  for(var i = 1\
    \ ; i <= n ; i += 2){\n    arr.push(arr[i-1] + arr[i-2] + arr[i+1]);\n  }\n  return\
    \ arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n\
    \  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at\
    \ test (/tmp/tmpn6c04wka.js:30:10)\n    at Object.<anonymous> (/tmp/tmpn6c04wka.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN,\
    \ NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  return Math.pow(n, 3) + Math.pow((n-1),\
    \ 3) + Math.pow(n, 5) + Math.pow((n-1), 5);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n310\n\nshould\
    \ loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp75nw4_y1.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp75nw4_y1.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 310,\n  expected:\
    \ [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = [n];\n  for(var i=2;i<=n;i++){\n\
    \    arr.push(arr[i-2]+arr[i-1]+arr[i]);\n  }\n  return arr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n\
    \  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at\
    \ test (/tmp/tmp0ylo32d3.js:30:10)\n    at Object.<anonymous> (/tmp/tmp0ylo32d3.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN,\
    \ NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let results = [];\n    for(let\
    \ i = 1; i <= n; i++){\n        results.push((i - 1) / i);\n    }\n    return\
    \ results;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0.5,\n\
    \  0.6666666666666666\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n\
    \  8\n]\n    at test (/tmp/tmpacolp7eo.js:30:10)\n    at Object.<anonymous> (/tmp/tmpacolp7eo.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0.5,\
    \ 0.6666666666666666 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var arr = []\n    for (var i\
    \ = 1; i <= n; i++) {\n        arr.push(i)\n    }\n    arr.push(n)\n    return\
    \ arr\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n  \
    \  at test (/tmp/tmp5v7p1s28.js:31:10)\n    at Object.<anonymous> (/tmp/tmp5v7p1s28.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 3 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tlet arr = [];\n\tfor(let i = 1;\
    \ i <= n; i++){\n\t\tif(i % 2 == 0){\n\t\t\tarr.push(tri(i - 1) + tri(i - 2) +\
    \ tri(i + 1))\n\t\t}\n\t}\n\treturn arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp6ovzn7mr.js:21\n\t\t\tarr.push(tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1))\n\t\t\t                    ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at Array.join (<anonymous>)\n    at Array.toString (<anonymous>)\n    at\
    \ tri (/tmp/tmp6ovzn7mr.js:21:24)\n    at tri (/tmp/tmp6ovzn7mr.js:21:39)\n  \
    \  at tri (/tmp/tmp6ovzn7mr.js:21:39)\n    at tri (/tmp/tmp6ovzn7mr.js:21:39)\n\
    \    at tri (/tmp/tmp6ovzn7mr.js:21:39)\n    at tri (/tmp/tmp6ovzn7mr.js:21:39)\n\
    \    at tri (/tmp/tmp6ovzn7mr.js:21:39)\n    at tri (/tmp/tmp6ovzn7mr.js:21:39)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  return [1 + n/2, n%2 ? 1 + n*(n-1)/2\
    \ : n-1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.5,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpyg6l6jnb.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyg6l6jnb.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.5, 4 ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tvar a = [1,3,2];\n\tfor(var i =\
    \ 0; i <= n; i++)\n\t\ta = a.concat(tri(n - i - 1));\n\treturn a;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  2,\n  1,\n  3,\n  2,\n  1,\n  3,\n  2,\n  1,\n  3,\n  2,\n  1,\n  3,\n  2,\n\
    \  1,\n  3,\n  2,\n  1,\n  3,\n  2,\n  1,\n  3,\n  2,\n  1,\n  3,\n  2,\n  1,\n\
    \  3,\n  2,\n  1,\n  3,\n  2,\n  1,\n  3,\n  2,\n  1,\n  3,\n  2,\n  1,\n  3,\n\
    \  2,\n  1,\n  3,\n  2,\n  1,\n  3,\n  2\n]\n\nshould loosely deep-equal\n\n[\n\
    \  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpgsit23fx.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgsit23fx.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 3, 2, 1, 3, 2, 1, 3, 2, 1, 3,\n    2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1,\n    3,\
    \ 2, 1, 3, 2, 1, 3, 2, 1, 3, 2,\n    1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3,\n    2,\
    \ 1, 3, 2\n  ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var a = [];\n    for(var i =\
    \ 2; i < n+1; i++){\n        a.push((i%2)?(i-1)+(i-2):(i-1)+(i-1)+(i-2));\n  \
    \  }\n    return a;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpliu4mdfe.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpliu4mdfe.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3 ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tvar arr = [];\n\tif(n === 0){\n\
    \t\tarr.push(0);\n\t\treturn arr;\n\t}\n\tif(n === 1){\n\t\tarr.push(1);\n\t\t\
    return arr;\n\t}\n\tarr.push(tri(n - 1)[0]);\n\tif(n % 2 === 0){\n\t\tarr.push(tri(n\
    \ - 1)[1]);\n\t} else {\n\t\tarr.push(tri(n - 2)[0] + tri(n - 2)[1]);\n\t}\n\t\
    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  NaN\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp3yaz_8hf.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3yaz_8hf.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, NaN ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  return [(n==1)? 3 : ((n==2)? 1\
    \ : tri(n-1)+tri(-n-2))];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpxeq595dx.js:18\n  return [(n==1)? 3 : ((n==2)? 1 : tri(n-1)+tri(-n-2))];\n\
    \  ^\n\nRangeError: Maximum call stack size exceeded\n    at tri (/tmp/tmpxeq595dx.js:18:3)\n\
    \    at tri (/tmp/tmpxeq595dx.js:18:36)\n    at tri (/tmp/tmpxeq595dx.js:18:36)\n\
    \    at tri (/tmp/tmpxeq595dx.js:18:36)\n    at tri (/tmp/tmpxeq595dx.js:18:36)\n\
    \    at tri (/tmp/tmpxeq595dx.js:18:36)\n    at tri (/tmp/tmpxeq595dx.js:18:36)\n\
    \    at tri (/tmp/tmpxeq595dx.js:18:36)\n    at tri (/tmp/tmpxeq595dx.js:18:36)\n\
    \    at tri (/tmp/tmpxeq595dx.js:18:36)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tif (n==0) return [];\n\telse if\
    \ (n==1) return [3];\n\telse if (n%2==0) return [n]+tri( (n-1)/2 );\n\telse return\
    \ [n]+tri( (n-1)/2 )+tri( (n+2)/2 );\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp44qem7h5.js:21\n\telse return [n]+tri( (n-1)/2 )+tri( (n+2)/2 );\n\
    \t     ^\n\nRangeError: Maximum call stack size exceeded\n    at tri (/tmp/tmp44qem7h5.js:21:7)\n\
    \    at tri (/tmp/tmp44qem7h5.js:21:18)\n    at tri (/tmp/tmp44qem7h5.js:21:18)\n\
    \    at tri (/tmp/tmp44qem7h5.js:21:18)\n    at tri (/tmp/tmp44qem7h5.js:21:18)\n\
    \    at tri (/tmp/tmp44qem7h5.js:21:18)\n    at tri (/tmp/tmp44qem7h5.js:21:18)\n\
    \    at tri (/tmp/tmp44qem7h5.js:21:18)\n    at tri (/tmp/tmp44qem7h5.js:21:18)\n\
    \    at tri (/tmp/tmp44qem7h5.js:21:18)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if (n === 0) return [];\n  if (n\
    \ === 1) return [1];\n  let arr = [1, n];\n  for (let i = 2; i <= n; i+=2) {\n\
    \    arr.push(arr.slice(i-1));\n  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  [\n    3\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n\
    ]\n    at test (/tmp/tmpgua5x8m9.js:32:10)\n    at Object.<anonymous> (/tmp/tmpgua5x8m9.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, [\
    \ 3 ] ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tvar arr = [];\n\tvar first = 0;\n\
    \tvar second = 1;\n\tvar third = 2;\n\n\tif(n < 0) return arr;\n\n\tfor(var i\
    \ = 0; i <= n; i++){\n\t\tarr.push(first);\n\t\tif(i % 2 == 0){\n\t\t\tarr.push(second);\n\
    \t\t\tsecond += third;\n\t\t}\n\t\tthird += second;\n\t}\n\n\treturn arr;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  0,\n  0,\n  3,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n\
    \  8\n]\n    at test (/tmp/tmps_pxkpr3.js:42:10)\n    at Object.<anonymous> (/tmp/tmps_pxkpr3.js:54:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 0,\
    \ 0, 3, 0 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    for(let i=1;i<=n;i++){\n    \
    \    arr[i]=tri(i-1);\n    }\n    return arr;\n}\n\nlet arr = [];\narr.push(1);\n\
    arr.push(2);\narr.push(3);\narr.push(8);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n<ref *1> [\n \
    \ 1,\n  [Circular *1],\n  [Circular *1],\n  [Circular *1]\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpxfzkqjw8.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxfzkqjw8.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: <ref *1> [\
    \ 1, [Circular *1], [Circular *1], [Circular *1] ],\n  expected: [ 1, 3, 2, 8\
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    if(n===0){\n        return [];\n\
    \    }\n    if(n===1){\n        return [1];\n    }\n    return tri(n - 1)+tri(n\
    \ - 2)+tri(n + 1);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpd7twmhze.js:24\n    return tri(n - 1)+tri(n - 2)+tri(n + 1);\n\
    \                     ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ Array.join (<anonymous>)\n    at Array.toString (<anonymous>)\n    at tri (/tmp/tmpd7twmhze.js:24:22)\n\
    \    at tri (/tmp/tmpd7twmhze.js:24:12)\n    at tri (/tmp/tmpd7twmhze.js:24:34)\n\
    \    at tri (/tmp/tmpd7twmhze.js:24:12)\n    at tri (/tmp/tmpd7twmhze.js:24:34)\n\
    \    at tri (/tmp/tmpd7twmhze.js:24:12)\n    at tri (/tmp/tmpd7twmhze.js:24:34)\n\
    \    at tri (/tmp/tmpd7twmhze.js:24:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = [];\n  \n  if(n == 1)\
    \ \n    arr.push(1)\n  else {\n    arr.push(1)\n    arr.push(2);\n  }\n  \n  for(var\
    \ i = 3; i <= n; i++){\n    arr.push((arr[i-1] + arr[i-2] + arr[i+2]) / 3);\n\
    \  }\n  \n  return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at\
    \ test (/tmp/tmp_wf_d2nt.js:38:10)\n    at Object.<anonymous> (/tmp/tmp_wf_d2nt.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, NaN\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var arr = [];\n    for(var i\
    \ = 1; i <= n; i++){\n        if( n % 2 == 0 ){\n            arr.push( n / 2 );\n\
    \            n = n / 2;\n        } else {\n            arr.push( tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) );\n            n++;\n        }\n    }\n    return arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '11,12,1',\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpqzuyny5j.js:36:10)\n    at Object.<anonymous> (/tmp/tmpqzuyny5j.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '11,12,1',\
    \ 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = [];\n  if(n===0){\n \
    \   return arr;\n  }\n  for(var i=0;i<=n;i++){\n    arr.push((i%2)?i+1:(i-1)+(i+1));\n\
    \  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n  \
    \  at test (/tmp/tmpqa8t8uxh.js:33:10)\n    at Object.<anonymous> (/tmp/tmpqa8t8uxh.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 2, 4,\
    \ 4 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\treturn [\n\t\ttri(n - 1) + tri(n\
    \ - 2),\n\t\ttri(n - 2) + tri(n - 1),\n\t];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpsixt2k4z.js:18\n\treturn [\n\t^\n\nRangeError: Maximum call stack\
    \ size exceeded\n    at tri (/tmp/tmpsixt2k4z.js:18:2)\n    at tri (/tmp/tmpsixt2k4z.js:19:3)\n\
    \    at tri (/tmp/tmpsixt2k4z.js:19:3)\n    at tri (/tmp/tmpsixt2k4z.js:19:3)\n\
    \    at tri (/tmp/tmpsixt2k4z.js:19:3)\n    at tri (/tmp/tmpsixt2k4z.js:19:3)\n\
    \    at tri (/tmp/tmpsixt2k4z.js:19:3)\n    at tri (/tmp/tmpsixt2k4z.js:19:3)\n\
    \    at tri (/tmp/tmpsixt2k4z.js:19:3)\n    at tri (/tmp/tmpsixt2k4z.js:19:3)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tvar arr = [];\n\tfor(var i = 0;\
    \ i<n; i++){\n\t\tif(i % 2 == 0) arr.push((i+1) * 3);\n\t\telse arr.push((i+1)\
    \ * 3 + (i+1)*(i+1));\n\t}\n\treturn arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  10,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmp7bvy0yme.js:31:10)\n    at Object.<anonymous> (/tmp/tmp7bvy0yme.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 10, 9\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let result = [];\n  let first =\
    \ 1;\n  let second = 1;\n  let third = 3 ;\n  \n  for(let i = 1; i< n+1 ; i++){\n\
    \    result.push(first);\n    \n    if(second == third){\n      third = first+second;\n\
    \    }else {\n      second = first + second;\n    }\n    first = third;\n  }\n\
    \  \n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmp_01xlczy.js:42:10)\n    at Object.<anonymous> (/tmp/tmp_01xlczy.js:54:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 3\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    return n > 1 ? [tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3), tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 3)] :\n\
    \    [1, 1, 1]\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1,1,11,1,11,1,1,1,1,11,1,1,1,1,11,1,11,1,11,1,1',\n\
    \  '1,1,11,1,11,1,1,1,1,11,1,1,1,1,11,1,11,1,1',\n  '1,1,11,1,11,1,1,1,1,11,1,1,1,1,11,1,11,1,1'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp1p03m5ju.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1p03m5ju.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '1,1,11,1,11,1,1,1,1,11,1,1,1,1,11,1,11,1,11,1,1',\n\
    \    '1,1,11,1,11,1,1,1,1,11,1,1,1,1,11,1,11,1,1',\n    '1,1,11,1,11,1,1,1,1,11,1,1,1,1,11,1,11,1,1'\n\
    \  ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if(n%2 === 0)\n    return [n,n,n+1,n+1];\n\
    \  else\n    return [n,n-1,n-1,n+1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n\
    \  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n  \
    \  at test (/tmp/tmphzow77lt.js:29:10)\n    at Object.<anonymous> (/tmp/tmphzow77lt.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 2,\
    \ 4 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tvar arr = [];\n\t\n\tif(n === 1){\n\
    \t\tarr.push(n)\n\t}else{\n\t\tif(n % 2 === 0){\n\t\t\tarr.push(tri(Math.floor(n\
    \ / 2)) + tri(n - 1));\n\t\t}else{\n\t\t\tarr.push(tri(n - 1) + tri(n - 2));\n\
    \t\t}\n\t}\n\t\n\treturn arr;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '111'\n]\n\
    \nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp6i78c3a9.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6i78c3a9.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '111' ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if(n === 0) return [];\n  return\
    \ [tri(n - 1), tri(n - 2), tri(n + 1)];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjmywfeuq.js:19\n  return [tri(n - 1), tri(n - 2), tri(n + 1)];\n\
    \  ^\n\nRangeError: Maximum call stack size exceeded\n    at tri (/tmp/tmpjmywfeuq.js:19:3)\n\
    \    at tri (/tmp/tmpjmywfeuq.js:19:11)\n    at tri (/tmp/tmpjmywfeuq.js:19:11)\n\
    \    at tri (/tmp/tmpjmywfeuq.js:19:11)\n    at tri (/tmp/tmpjmywfeuq.js:19:11)\n\
    \    at tri (/tmp/tmpjmywfeuq.js:19:11)\n    at tri (/tmp/tmpjmywfeuq.js:19:11)\n\
    \    at tri (/tmp/tmpjmywfeuq.js:19:11)\n    at tri (/tmp/tmpjmywfeuq.js:19:11)\n\
    \    at tri (/tmp/tmpjmywfeuq.js:19:11)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let res = []\n  res.push(3)\n \
    \ if (n%2 === 0){\n    res.push(3)\n  }\n  if (n%2 === 1){\n    res.push(2)\n\
    \    res.push(2)\n    res.push(2)\n  }\n  return res\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n\
    \  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n  \
    \  at test (/tmp/tmpn5egy91l.js:36:10)\n    at Object.<anonymous> (/tmp/tmpn5egy91l.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 2,\
    \ 2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = []\n    result.push(3)\n\
    \    if(n%2==0){\n        result.push(tri(n-1)+tri(n-2))\n    }else{\n       \
    \ result.push(tri(n-1)+tri(n-2)+tri(n+1))\n    }\n    return result\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar tribonacci = [1,3,5,7,9];\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp9rijsbmz.js:27\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if (n < 2)\n\treturn []\n  else\
    \ {\n    let n1 = Math.floor(n / 2)\n    let n2 = n1 - 1\n    let n3 = n2 + 1\n\
    \    const tri = [n1, n2, n3]\n    while (n > 3) {\n      tri.push(tri[tri.length\
    \ - 1] + tri[tri.length - 2] + tri[tri.length - 3])\n      n -= 3\n    }\n   \
    \ return tri\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpn3yf8fmz.js:38:10)\n    at Object.<anonymous> (/tmp/tmpn3yf8fmz.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0, 1\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\treturn [...Array(n+1).keys()].slice(0,n+1).map(v=>v*v+(v-1)*(v-1))\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  5,\n  13\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n \
    \   at test (/tmp/tmp6_ie7mc2.js:26:10)\n    at Object.<anonymous> (/tmp/tmp6_ie7mc2.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 5,\
    \ 13 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var res = [];\n  res[0] = 1;\n\
    \  res[1] = 1;\n  if(n%2 == 0){\n    var rem = n/2;\n    res[2] = tri(rem) + tri(rem\
    \ - 1);\n  }\n  else {\n    res[2] = tri(n+1) + tri(n+2);\n  }\n  return res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5wuln5rs.js:18\n  var res = [];\n            ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at tri (/tmp/tmp5wuln5rs.js:18:13)\n    at tri\
    \ (/tmp/tmp5wuln5rs.js:23:14)\n    at tri (/tmp/tmp5wuln5rs.js:26:14)\n    at\
    \ tri (/tmp/tmp5wuln5rs.js:23:14)\n    at tri (/tmp/tmp5wuln5rs.js:26:14)\n  \
    \  at tri (/tmp/tmp5wuln5rs.js:23:14)\n    at tri (/tmp/tmp5wuln5rs.js:26:14)\n\
    \    at tri (/tmp/tmp5wuln5rs.js:23:14)\n    at tri (/tmp/tmp5wuln5rs.js:26:14)\n\
    \    at tri (/tmp/tmp5wuln5rs.js:23:14)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    if( n == 0)\n        return [0,1];\n\
    \    if( n == 1)\n        return [1];\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpkxjs5v6b.js:22\n    return tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \                      ^\n\nRangeError: Maximum call stack size exceeded\n   \
    \ at Array.join (<anonymous>)\n    at Array.toString (<anonymous>)\n    at tri\
    \ (/tmp/tmpkxjs5v6b.js:22:23)\n    at tri (/tmp/tmpkxjs5v6b.js:22:12)\n    at\
    \ tri (/tmp/tmpkxjs5v6b.js:22:38)\n    at tri (/tmp/tmpkxjs5v6b.js:22:12)\n  \
    \  at tri (/tmp/tmpkxjs5v6b.js:22:38)\n    at tri (/tmp/tmpkxjs5v6b.js:22:12)\n\
    \    at tri (/tmp/tmpkxjs5v6b.js:22:38)\n    at tri (/tmp/tmpkxjs5v6b.js:22:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if(n < 1){\n    return []\n  }\n\
    \  var result = [1,3,2]\n  var isOdd = n % 2 == 1;\n  var tempNum = Math.pow(2,\
    \ n - 1)\n  var tempNum2 = Math.pow(2, n - 3)\n  if(isOdd){\n    tempNum += tempNum2;\n\
    \  }\n  for(let i = 2; i <= tempNum; i++){\n    if(isOdd){\n      result.push(result[i-1]\
    \ + result[i-2])\n    }\n    else{\n      result.push(result[i-1] - result[i-2])\n\
    \    }\n  }\n  result.push(result[n])\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  2,\n  4,\n  5,\n  6,\n  9,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  3,\n  2,\n  8\n]\n    at test (/tmp/tmpxnlilzno.js:45:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxnlilzno.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 3, 2, 4,\n    5, 6, 9, 4\n  ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var arr = [];\n    for(var i\
    \ = 0; i < n + 1; i++){\n        var a = (i%2 === 0) ? (i/2-1) : ((i/2+1) + 1);\n\
    \        arr.push(a);\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  2.5,\n\
    \  0,\n  3.5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n\
    \    at test (/tmp/tmpu5k5mi9z.js:31:10)\n    at Object.<anonymous> (/tmp/tmpu5k5mi9z.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1, 2.5,\
    \ 0, 3.5 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tlet arr = [];\n\tlet a = 1, b =\
    \ 0, c = 1;\n\tfor(let i = 1; i <= n; i++){\n\t\tarr.push(a);\n\t\ta = b;\n\t\t\
    b = c;\n\t\tc = a + b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn arr;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpy1of4pls.js:35:10)\n    at Object.<anonymous> (/tmp/tmpy1of4pls.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 1\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var result = [];\n  var a = 3;\n\
    \  var b = 1;\n  for(var i = 1; i <= n; i++){\n    result.push(a);\n    a = b\
    \ + a / 2;\n    b = a + b - a / 2;\n  }\n  return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2.5,\n\
    \  3.5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at\
    \ test (/tmp/tmpfly5g9ye.js:34:10)\n    at Object.<anonymous> (/tmp/tmpfly5g9ye.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2.5,\
    \ 3.5 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var triArray = [];\n    for(var\
    \ i = 0; i < n; i++){\n        if(i%2 === 0){\n            triArray.push(tri(i\
    \ - 1) + tri(i - 2) + tri(i + 1))\n        } else {\n            triArray.push(tri(i\
    \ - 2) + tri(i - 1) + tri(i + 1))\n        }\n    }\n    return triArray;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjbzawh9n.js:21\n            triArray.push(tri(i - 1) + tri(i -\
    \ 2) + tri(i + 1))\n                                     ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at Array.join (<anonymous>)\n    at Array.toString\
    \ (<anonymous>)\n    at tri (/tmp/tmpjbzawh9n.js:21:38)\n    at tri (/tmp/tmpjbzawh9n.js:21:53)\n\
    \    at tri (/tmp/tmpjbzawh9n.js:21:53)\n    at tri (/tmp/tmpjbzawh9n.js:21:53)\n\
    \    at tri (/tmp/tmpjbzawh9n.js:21:53)\n    at tri (/tmp/tmpjbzawh9n.js:21:53)\n\
    \    at tri (/tmp/tmpjbzawh9n.js:21:53)\n    at tri (/tmp/tmpjbzawh9n.js:21:53)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [tri(1)]\n    for (let\
    \ i = 1 ; i < n ; i++){\n        let first = tri(i-1) + tri(i-2)\n        let\
    \ second = first+first\n        arr.push(first)\n        arr.push(second)\n  \
    \  }\n    return arr\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpna3_hkvx.js:18\n    let arr = [tri(1)]\n              ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at tri (/tmp/tmpna3_hkvx.js:18:15)\n \
    \   at tri (/tmp/tmpna3_hkvx.js:18:16)\n    at tri (/tmp/tmpna3_hkvx.js:18:16)\n\
    \    at tri (/tmp/tmpna3_hkvx.js:18:16)\n    at tri (/tmp/tmpna3_hkvx.js:18:16)\n\
    \    at tri (/tmp/tmpna3_hkvx.js:18:16)\n    at tri (/tmp/tmpna3_hkvx.js:18:16)\n\
    \    at tri (/tmp/tmpna3_hkvx.js:18:16)\n    at tri (/tmp/tmpna3_hkvx.js:18:16)\n\
    \    at tri (/tmp/tmpna3_hkvx.js:18:16)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    if(n <= 1){\n        return [1,1];\n\
    \    }\n    return tri(n-1) + tri(n-2) + tri(n+1);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmppnhk7qei.js:21\n    return tri(n-1) + tri(n-2) + tri(n+1);\n  \
    \                  ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.join\
    \ (<anonymous>)\n    at Array.toString (<anonymous>)\n    at tri (/tmp/tmppnhk7qei.js:21:21)\n\
    \    at tri (/tmp/tmppnhk7qei.js:21:12)\n    at tri (/tmp/tmppnhk7qei.js:21:34)\n\
    \    at tri (/tmp/tmppnhk7qei.js:21:12)\n    at tri (/tmp/tmppnhk7qei.js:21:34)\n\
    \    at tri (/tmp/tmppnhk7qei.js:21:12)\n    at tri (/tmp/tmppnhk7qei.js:21:34)\n\
    \    at tri (/tmp/tmppnhk7qei.js:21:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    return n*(n+1)/2;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmphvyb0074.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmphvyb0074.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  return new Array(n+1).fill(0).map((v,i)\
    \ => i==0 || i==1 ? i-1 : n-i-2)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  0,\n\
    \  -1,\n  -2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n\
    \    at test (/tmp/tmpshz3vwsq.js:26:10)\n    at Object.<anonymous> (/tmp/tmpshz3vwsq.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1, 0, -1,\
    \ -2 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if (n === 0) {\n    return [];\n\
    \  }\n  if (n === 1) {\n    return [1,3];\n  }\n  const [left, right] = tri(n\
    \ - 1);\n  return [...left, ...right, ...(n % 2 === 0 ? [3,2] : [2,1])];\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpbh6vjz_7.js:25\n  return [...left, ...right, ...(n % 2 === 0 ?\
    \ [3,2] : [2,1])];\n             ^\n\nTypeError: left is not iterable\n    at\
    \ tri (/tmp/tmpbh6vjz_7.js:25:14)\n    at tri (/tmp/tmpbh6vjz_7.js:24:25)\n  \
    \  at test (/tmp/tmpbh6vjz_7.js:33:20)\n    at Object.<anonymous> (/tmp/tmpbh6vjz_7.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    if(n === 0){\n        return\
    \ [];\n    }\n    \n    if(n === 1){\n        return [3];\n    }\n    \n    var\
    \ result = [];\n    var firstThree = [];\n    \n    firstThree = tri(n - 1);\n\
    \    \n    for(var i=0;i<firstThree.length;i++){\n        result.push(firstThree[i]\
    \ + firstThree[i + 2]);\n    }\n    \n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpxicyrl3b.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxicyrl3b.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN ],\n\
    \  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n   let ret = []\n   let triFunc =\
    \ (n) =>{\n      if(n === 1){\n         ret.push(3)\n      }else if(n === 2){\n\
    \         ret.push(3, 2)\n      }else{\n         ret.push(triFunc(n - 1) + triFunc(n\
    \ - 2) + triFunc(n + 1))\n      }\n   }\n   return triFunc(n)\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n \
    \ assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpton23i0n.js:23\n         ret.push(3, 2)\n             ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at Array.push (<anonymous>)\n    at triFunc\
    \ (/tmp/tmpton23i0n.js:23:14)\n    at triFunc (/tmp/tmpton23i0n.js:25:19)\n  \
    \  at triFunc (/tmp/tmpton23i0n.js:25:19)\n    at triFunc (/tmp/tmpton23i0n.js:25:53)\n\
    \    at triFunc (/tmp/tmpton23i0n.js:25:19)\n    at triFunc (/tmp/tmpton23i0n.js:25:53)\n\
    \    at triFunc (/tmp/tmpton23i0n.js:25:19)\n    at triFunc (/tmp/tmpton23i0n.js:25:53)\n\
    \    at triFunc (/tmp/tmpton23i0n.js:25:19)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tif (n % 2 == 0)\n\t\treturn [1\
    \ + Math.floor(n / 2)];\n\telse\n\t\treturn tri(n - 1) + tri(n - 2) + tri(n +1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwsmdgdar.js:18\n\tif (n % 2 == 0)\n\t^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at tri (/tmp/tmpwsmdgdar.js:18:2)\n    at tri (/tmp/tmpwsmdgdar.js:21:10)\n\
    \    at tri (/tmp/tmpwsmdgdar.js:21:23)\n    at tri (/tmp/tmpwsmdgdar.js:21:23)\n\
    \    at tri (/tmp/tmpwsmdgdar.js:21:23)\n    at tri (/tmp/tmpwsmdgdar.js:21:23)\n\
    \    at tri (/tmp/tmpwsmdgdar.js:21:23)\n    at tri (/tmp/tmpwsmdgdar.js:21:23)\n\
    \    at tri (/tmp/tmpwsmdgdar.js:21:23)\n    at tri (/tmp/tmpwsmdgdar.js:21:23)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    if (n <= 1)\n        return [];\n\
    \    if (n % 2 == 0)\n        return [tri(n - 1) + tri(n - 2)];\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3), tri(n - 1)];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  [\n\
    \    ''\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n\
    \    at test (/tmp/tmp_nyx5azi.js:30:10)\n    at Object.<anonymous> (/tmp/tmp_nyx5azi.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', [ ''\
    \ ] ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = new Array();\n  var tri1\
    \ = ((n%2==0) ? 1 : n+1);\n  var tri2 = (n%2==1) ? tri1 : tri1 + 1;\n  for(var\
    \ i=0;i<=tri2;i++){\n    arr.push(i);\n  }\n  return arr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n\
    ]\n    at test (/tmp/tmp52srnlmg.js:31:10)\n    at Object.<anonymous> (/tmp/tmp52srnlmg.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2,\
    \ 3, 4 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tvar arr = [];\n\tarr.push(1);\n\
    \tfor(var i=1;i<=n;i++){\n\t\tif(i%2 === 0){\n\t\t\tarr.push(1+(i/2));\n\t\t}\n\
    \t\telse{\n\t\t\tarr.push(arr[arr.length-1]+arr[arr.length-2]+(i+1)/2);\n\t\t\
    }\n\t}\n\treturn arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  NaN,\n\
    \  2,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n\
    \    at test (/tmp/tmpcmkgovtw.js:36:10)\n    at Object.<anonymous> (/tmp/tmpcmkgovtw.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, NaN,\
    \ 2, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tlet a = [1, 1, 1];\n\tfor(let i\
    \ = 1; i < n; i++){\n\t\ta.push(Math.floor(n / 2) + a[i - 1] + a[i - 2]);\n\t\
    }\n\treturn a;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
    \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  NaN,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n\
    ]\n    at test (/tmp/tmpdsfq4_fn.js:30:10)\n    at Object.<anonymous> (/tmp/tmpdsfq4_fn.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 1,\
    \ NaN, 3 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
- exit_code: 1
  program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tvar fib = function(n){\n\t\treturn\
    \ (n<=1 ? 1 : (n<=3?n:fib(n-1) + fib(n-2))) / 2;\n\t};\n\treturn fib(++n);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1.25\n\nshould\
    \ loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpazlizr0v.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpazlizr0v.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1.25,\n  expected:\
    \ [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977211
