name: HumanEval_137_compare_one
language: js
prompt: "//Create a function that takes integers, floats, or strings representing\n\
  // real numbers, and returns the larger variable in its given variable type.\n//\
  \ Return undefined if the values are equal.\n// Note: If a real number is represented\
  \ as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n\
  // 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\",\
  \ \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a,\
  \ b){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = compare_one;\n  assert.deepEqual(candidate(1, 2),2);\n  assert.deepEqual(candidate(1,\
  \ 2.5),2.5);\n  assert.deepEqual(candidate(2, 3),3);\n  assert.deepEqual(candidate(5,\
  \ 6),6);\n  assert.deepEqual(candidate(1, \"2,3\"),\"2,3\");\n  assert.deepEqual(candidate(\"\
  5,1\", \"6\"),\"6\");\n  assert.deepEqual(candidate(\"1\", \"2\"),\"2\");\n  assert.deepEqual(candidate(\"\
  1\", 1),undefined);\n}\n\ntest();"
completions: ["    if (typeof a === typeof b){\n        if (a.isReal == b.isReal){\n\
    \            var real = parseFloat(a);\n            if (real == b){\n        \
    \        return real;\n            }\n        }\n    }\n    return undefined;\n\
    }\n", "    if(a===undefined){\n        if(typeof b === 'number'){\n          \
    \  return b;\n        }\n        else if(typeof b === 'string'){\n           \
    \ //Check if this is a number with decimal points\n            var floats = /^([-+]?[0-9]+(\\\
    .[0-9]*)?|[-+]?\\.[0-9]+)$/i.test(b);\n            if(floats){\n             \
    \   //If it is, convert the string to a number\n                return parseFloat(b);\n\
    \            }\n        }\n    }\n    if(b===undefined){\n        if(typeof a\
    \ === 'number'){\n            return a;\n        }\n        else if(typeof a ===\
    \ 'string'){\n            //Check if this is a number with decimal points\n  \
    \          var floats = /^([-+]?[0-9]+(\\.[0-9]*)?|[-+]?\\.[0-9]+)$/i.test(a);\n\
    \            if(floats){\n                //If it is, convert the string to a\
    \ number\n                return parseFloat(a);\n            }\n        }\n  \
    \  }\n    //Now make sure a is bigger than b\n    if(typeof b === 'number'){\n\
    \        return a > b ? a : b;\n    }\n    else if(typeof b === 'string'){\n \
    \       //Check if this is a number with decimal points\n        var floats =\
    \ /^([-+]?[0-9]+(\\.[0-9]*)?|[-+]?\\.[0-9]+)$/i.test(b);\n        if(floats){\n\
    \            //If it is, convert the string to a number\n            return parseFloat(a)\
    \ > parseFloat(b) ? parseFloat(a) : parseFloat(b);\n        }\n    }\n    //If\
    \ they are not equal then return undefined\n    return undefined;\n}\n", "  if\
    \ (a === b){\n    return a;\n  }\n  var aNum = parseFloat(a);\n  var bNum = parseFloat(b);\n\
    \  var aDen = a.match(/\\.(\\d+)/);\n  var bDen = b.match(/\\.(\\d+)/);\n  var\
    \ aFrac = a.match(/[,.](\\d+)/);\n  var bFrac = b.match(/[,.](\\d+)/);\n  var\
    \ aPct = a.match(/\\%$/);\n  var bPct = b.match(/\\%$/);\n  if (aPct) {\n    aNum\
    \ *= aPct[1];\n    bNum *= aPct[1];\n  }\n  if (aDen && aDen[1]){\n    aNum *=\
    \ aDen[1];\n  }\n  if (bDen && bDen[1]){\n    bNum *= bDen[1];\n  }\n  if (aFrac\
    \ && aFrac[1]){\n    aNum *= aFrac[1];\n  }\n  if (bFrac && bFrac[1]){\n    bNum\
    \ *= bFrac[1];\n  }\n  if (bPct && bPct[1]){\n    bNum *= bPct[1];\n  }\n  return\
    \ aNum > bNum ? aNum : bNum;\n}\n", "\treturn typeof a !== typeof b ? b : a >\
    \ b ? a : b;\n}\n\n", "\ttry{\n\t\treturn Math.max.apply(null, arguments)\n\t\
    }catch(e){\n\t\tif(typeof b == 'number'){\n\t\t\tif(isNaN(a) || isNaN(b)){\n\t\
    \t\t\treturn b\n\t\t\t}\n\t\t\treturn a < b ? b : a\n\t\t}\n\t\tb = \"\" + b\n\
    \t\tif(b.length){\n\t\t\tif(a.split(',').length != b.split(',').length){\n\t\t\
    \t\treturn a\n\t\t\t}\n\t\t}\n\t\tif(typeof a == 'number'){\n\t\t\ta = '' + a\n\
    \t\t}\n\t\tif(typeof b == 'number'){\n\t\t\tb = '' + b\n\t\t}\n\t\treturn a.localeCompare(b)\n\
    \t}\n}\n", "    var a_type = get_type(a);\n    var b_type = get_type(b);\n   \
    \ if(is_number(a) && is_number(b)){\n        //If both values are numbers, check\
    \ which one is larger\n        if(a_type == b_type){\n            return a > b\
    \ ? a : b;\n        } else {\n            if(a_type === NUMBER){\n           \
    \     return a.toFixed ? a.toFixed() : a.valueOf();\n            }\n         \
    \   if(b_type === NUMBER){\n                return b.toFixed ? b.toFixed() : b.valueOf();\n\
    \            }\n        }\n    }\n    if(is_string(a) || is_string(b)){\n    \
    \    //If either value is a string, check which one is larger\n        if(is_string(a)){\n\
    \            return a.toFixed ? a.toFixed() : a.valueOf();\n        } else if(is_string(b)){\n\
    \            return b.toFixed ? b.toFixed() : b.valueOf();\n        } else {\n\
    \            if(a_type === NUMBER){\n                return a.toFixed ? a.toFixed()\
    \ : a.valueOf();\n            } else if(b_type === NUMBER){\n                return\
    \ b.toFixed ? b.toFixed() : b.valueOf();\n            }\n        }\n    }\n  \
    \  return undefined;\n}\n", "  if(a === b){\n    return undefined\n  }\n  return\
    \ a > b ? 1 : -1\n}\n", "  a = parseFloat(a);\n  b = parseFloat(b);\n  if (a >\
    \ b){\n    return a;\n  }\n  else {\n    return b;\n  }\n}\n", "\tif (a !== b){\n\
    \t\treturn a;\n\t}\n\telse if (typeof(a) === 'string'){\n\t\tif (a.indexOf(',')\
    \ > 0){\n\t\t\ta = a.split(',')\n\t\t\tb = b.split(',')\n\t\t\tif (a[0] > b[0])\
    \ return b;\n\t\t\telse return a;\n\t\t}\n\t\telse{\n\t\t\ta = a.split('.');\n\
    \t\t\tb = b.split('.');\n\t\t\tif (a[0] > b[0]) return b;\n\t\t\telse return a;\n\
    \t\t}\n\t}\n\telse if (typeof(a) === 'number'){\n\t\ta = parseFloat(a);\n\t\t\
    b = parseFloat(b);\n\t\tif (a < b) return b;\n\t\telse return a;\n\t}\n\telse\
    \ return undefined;\n}\n", "    if(a < b) return a;\n    if(a > b) return b;\n\
    \    if(a === b) return a;\n}\n\n", "  if (a === b)\n    return a;\n  a = parseFloat(a);\n\
    \  b = parseFloat(b);\n  if (isString(a) && isString(b)) {\n    if (a.length <=\
    \ b.length) {\n      var i;\n      for (i = 0; i < a.length && i < b.length; i++)\n\
    \        if (a[i] > b[i])\n          return b;\n      return a;\n    }\n    return\
    \ b;\n  }\n  if (a > b)\n    return b;\n  return a;\n}\n", "\tvar rslt = 'undefined';\n\
    \tif((a === undefined) && (b === undefined)){\n\t\trslt = undefined;\n\t}\n\t\
    else if((a !== undefined) && (b === undefined)){\n\t\trslt = a;\n\t}\n\telse if((a\
    \ === undefined) && (b === undefined)){\n\t\trslt = b;\n\t}\n\telse if((a !==\
    \ undefined) && (b === undefined)){\n\t\trslt = a;\n\t}\n\telse if((typeof a ===\
    \ 'number') || (typeof b === 'number')){\n\t\trslt = a > b ? a : b;\n\t}\n\treturn\
    \ rslt;\n}\n", "    if(a < b){\n        return a;\n    }else{\n        return\
    \ b;\n    }\n}\n", "  if (a === undefined){\n    return b;\n  } else if (b ===\
    \ undefined){\n    return a;\n  } else if (a === b){\n    return a;\n  } else\
    \ {\n    return undefined;\n  }\n}\n", "  if(b===undefined) return undefined;\n\
    \  if(a===undefined) return b;\n  if(a<b) return a;\n  if(a>b) return b;\n}",
  "    var a_int = parseInt(a, 10);\n    var b_int = parseInt(b, 10);\n    if(a_int\
    \ == b_int){\n        return a\n    }\n    if(a_int.toString() == b_int.toString()){\n\
    \        return a\n    }\n    if(a_int.toString().indexOf(b_int.toString()) ==\
    \ 0){\n        return a\n    }\n    return undefined\n}", "  if (a === b) return\
    \ a;\n  if (a < b) return a;\n  return b;\n}\n", "\tif (typeof(a) == 'string'){\n\
    \t\tvar a2 = a.split(',');\n\t\tvar b2 = b.split(',');\n\t\t\n\t\tvar a_to_float\
    \ = parseFloat(a2[0]);\n\t\tvar b_to_float = parseFloat(b2[0]);\n\t\tvar a2_is_nan\
    \ = (typeof(a2[1]) == 'undefined' || a2[1] == '');\n\t\tvar b2_is_nan = (typeof(b2[1])\
    \ == 'undefined' || b2[1] == '');\n\t\t\n\t\tif (a2_is_nan && b2_is_nan){\n\t\t\
    \treturn undefined;\n\t\t}\n\t\telse if (a2_is_nan || b2_is_nan){\n\t\t\tvar a_to_compare\
    \ = parseInt(a2[0]) || 0;\n\t\t\tvar b_to_compare = parseInt(b2[0]) || 0;\n\t\t\
    \t\n\t\t\tif (a2_is_nan && b2_is_nan){\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\
    \t\telse if (a2_is_nan || b2_is_nan){\n\t\t\t\tif (a_to_compare < b_to_compare){\n\
    \t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse if (a_to_compare > b_to_compare){\n\
    \t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif (a_to_float\
    \ < b_to_float){\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse if (a_to_float > b_to_float){\n\
    \t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\telse{\n\t\tif (a < b){\n\t\t\treturn\
    \ -1;\n\t\t}\n\t\telse if (a > b){\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n\
    }\n", "\tvar a_real = parseFloat(a.toString().replace(/,/g, ''));\n\tvar b_real\
    \ = parseFloat(b.toString().replace(/,/g, ''));\n\tif(a_real === b_real){\n\t\t\
    return a_real === b_real ? '' : \"Undefined\";\n\t}\n\tif(a_real > b_real){\n\t\
    \treturn \"Bigger\";\n\t}\n\tif(a_real < b_real){\n\t\treturn \"Smaller\";\n\t\
    }\n\treturn \"\";\n}\n\nvar a = [1, 2, 3, 4, 5];\nvar b = [1, 2, 3, 4, 5, 6];\n\
    var c = [1, 2, 4, 5];\n", "    if(a.constructor === String){\n        var numA\
    \ = (parseFloat(a)*1000000).toFixed(5);\n        var numB = (parseFloat(b)*1000000).toFixed(5);\n\
    \        if(numA < numB){\n            return a;\n        }\n        else if(numA\
    \ > numB){\n            return b;\n        }\n    }\n    else if(b.constructor\
    \ === String){\n        var numA = (parseFloat(a)*1000000).toFixed(5);\n     \
    \   var numB = (parseFloat(b)*1000000).toFixed(5);\n        if(numA < numB){\n\
    \            return b;\n        }\n        else if(numA > numB){\n           \
    \ return a;\n        }\n    }\n    if(a.constructor === Number){\n        return\
    \ a.toString();\n    }\n    else if(b.constructor === Number){\n        return\
    \ b.toString();\n    }\n    if(a<b){\n        return a;\n    }\n    else if(a>b){\n\
    \        return b;\n    }\n}\n", "\tif(a<b) return a;\n\tif(a>b) return b;\n}\n",
  "  if(a === undefined) return\n  if(b === undefined) return\n  var type = typeof(a)\n\
    \  var abs = Math.abs(a)\n  var bs = Math.abs(b)\n  if(type === \"number\" ||\
    \ type === \"string\"){\n    abs = abs.toFixed(6).replace(/0+$/g,\"\")\n    bs\
    \ = bs.toFixed(6).replace(/0+$/g,\"\")\n    if(bs === \"\" && abs !== \"\") return\
    \ b\n    if(abs === \"\") return a\n    if(a === b) return a\n    if(a > b) return\
    \ type\n    if(b > a) return \"larger\"\n    if(a < b) return \"smaller\"\n  }else\
    \ if(type === \"object\"){\n    abs = abs.toString().replace(/\\d+\\.?\\d*$/,\
    \ \"\").replace(/0+$/g,\"\")\n    bs = bs.toString().replace(/\\d+\\.?\\d*$/,\
    \ \"\").replace(/0+$/g,\"\")\n    if(bs === \"\" && abs !== \"\") return b\n \
    \   if(abs === \"\") return a\n    if(a === b) return a\n    if(a > b) return\
    \ type\n    if(b > a) return \"larger\"\n    if(a < b) return \"smaller\"\n  }\n\
    }\n", "  var a_is_str = a_is_number(a);\n  var b_is_str = b_is_number(b);\n\n\
    \  if (a_is_str || b_is_str) {\n    if (a_is_str && b_is_str) {\n      return\
    \ (a>b)? a : b;\n    } else if(a_is_str) {\n      return a;\n    } else {\n  \
    \    return b;\n    }\n  }\n\n  if (a_is_number(b)) {\n    return b;\n  }\n\n\
    \  if (b_is_number(a)) {\n    return a;\n  }\n\n  // If one is a string and one\
    \ is a number, convert to a number.\n  a = parseFloat(a);\n  b = parseFloat(b);\n\
    \n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n", "    //\
    \ If b is undefined or null, then the variables are equal\n    if ( typeof b !==\
    \ \"number\" || b === 0 || typeof b !== \"string\" ){\n        return undefined;\n\
    \    }\n    a = a.split(\".\");\n    b = b.split(\".\");\n    var i = 0, len =\
    \ Math.max(a.length, b.length);\n    for(; i < len; i++){\n        var c = parseFloat(a[i]);\n\
    \        var d = parseFloat(b[i]);\n        if ( typeof c !== \"number\" || c\
    \ === 0 || typeof d !== \"number\" || d === 0 ){\n            return undefined;\n\
    \        }\n        if ( c > d ){\n            return b;\n        }\n        if\
    \ ( c < d ){\n            return a;\n        }\n    }\n    return undefined;\n\
    }\n", "    var type = getTypeOf(a),\n        type_1 = getTypeOf(b);\n    if (type_1\
    \ === 'number') {\n        if (type === type_1) {\n            return a;\n   \
    \     }\n        if (a.is_int) {\n            return b;\n        }\n        if\
    \ (a.is_float) {\n            if (a === b) {\n                return a;\n    \
    \        }\n            // else { // a must be float\n            //     if (is_int(a)\
    \ && is_int(b)) {\n            //         return Math.floor(Math.abs(a - b));\n\
    \            //     }\n            //     if (is_int(a) && is_float(b)) {\n  \
    \          //         return Math.abs(a - b);\n            //     }\n        \
    \    //     if (is_float(a) && is_int(b)) {\n            //         return Math.floor(Math.abs(a\
    \ - b));\n            //     }\n            //     return undefined;\n       \
    \     // }\n        }\n    }\n    if (type === type_1) {\n        return a;\n\
    \    }\n    // else { // a must be number\n    //     if (is_float(a) && is_int(b))\
    \ {\n    //         return Math.abs(a - b);\n    //     }\n    //     return undefined;\n\
    \    // }\n}\n", "  a = a.toString();\n  b = b.toString();\n  var max_type = typeof\
    \ a;\n  var max_num = parseFloat(a);\n  if(max_type === \"string\"){\n    max_type\
    \ = typeof b;\n    max_num = parseFloat(b);\n  }\n  if(max_type === \"number\"\
    ){\n    return Math.max(a, b);\n  }\n}\n", "    // First check that the types\
    \ are the same\n    if (typeof(a) != typeof(b)) return undefined;\n\n    // If\
    \ the types are the same, try to turn them into numbers (if possible)\n    if\
    \ ((typeof(a) === \"number\") || (typeof(b) === \"number\")) {\n        // If\
    \ the types are both numbers, then compare them\n        if ((a === b)) return\
    \ a;\n        // Otherwise if the numbers are too big compare them as a string\n\
    \        if ((Math.abs(a) > Number.MAX_VALUE) && (Math.abs(b) > Number.MAX_VALUE))\
    \ return a;\n        if ((Math.abs(b) > Number.MAX_VALUE) && (Math.abs(a) > Number.MAX_VALUE))\
    \ return b;\n        // Otherwise return undefined\n        if (a.toString() ===\
    \ b.toString()) return a;\n        return b;\n    }\n\n    // If they are both\
    \ strings, compare them character by character\n    if (typeof(a) === \"string\"\
    ) {\n        if (a.length < b.length) return a;\n        if (b.length < a.length)\
    \ return b;\n        if (a.length === b.length) return compare_one(a.charAt(0),\
    \ b.charAt(0));\n    }\n\n    // If they are both objects, do a recursive check\
    \ on them looking for\n    // the smallest variable in the object that's larger\
    \ than the other.\n    // Return undefined if they're not equal, or the smaller\
    \ variable if\n    // that variable is greater.\n    if ((typeof(a) === \"object\"\
    ) && (typeof(b) === \"object\")) {\n        if (a.length < b.length) return a;\n\
    \        if (b.length < a.length) return b;\n        for (var i = 0; i < (a.length\
    \ - 1); i++) {\n            var comp = compare_one(a[i], b[i]);\n            if\
    \ (comp !== undefined) return comp;\n        }\n        // If they're equal, return\
    \ the smaller of the two\n        if (a.length > b.length) return a;\n       \
    \ return b;\n    }\n\n    // If they're both arrays, compare them item by item\n\
    \    if (typeof(a) === \"object\" && typeof(b) === \"object\") {\n        if (a.length\
    \ < b.length) return a;\n        if (b.length < a.length) return b;\n        for\
    \ (var i = 0; i < (a.length - 1); i++) {\n            var comp = compare_one(a[i],\
    \ b[i]);\n            if (comp !== undefined) return comp;\n        }\n      \
    \  // If they're equal, return the smaller of the two\n        if (a.length >\
    \ b.length) return a;\n        return b;\n    }\n\n    // If they're both booleans,\
    \ just compare them directly\n    if (typeof(a) === \"boolean\" && typeof(b) ===\
    \ \"boolean\") return a < b;\n    return false;\n}\n\n", "    if(a==b || a===null\
    \ || b===null){\n        return undefined;\n    }\n    if (Number(a) <= Number(b))\
    \ {\n        return a;\n    }\n    return b;\n}\n", "  // If they are strings,\
    \ make sure to cast them to numbers before comparing them.\n  if(a === \"string\"\
    ){\n    a = parseFloat(a);\n  }\n  if(b === \"string\"){\n    b = parseFloat(b);\n\
    \  }\n  // If they are equal, return undefined.\n  if(a==b){\n    return undefined;\n\
    \  }\n  // If one is a float, the other is a string, check to see if the float\n\
    \  // is really a float or if we have a decimal point somewhere in the\n  // string.\
    \ If it is a float, then cast it to an int (don't round it).\n  if(a.constructor.toString().indexOf(\"\
    number\") > -1 && b.constructor.toString().indexOf(\"number\") > -1){\n    if(parseFloat(a)\
    \ == parseFloat(b)){\n      a = parseInt(a);\n    }\n  }\n  // If they are both\
    \ strings, check to see if the first one is a decimal\n  // point and the second\
    \ one is a digit. If so, remove that decimal point\n  // and convert the string\
    \ to a float (don't round it). If both are strings but\n  // neither is a decimal,\
    \ assume they are ints (don't round it).\n  if(typeof a == \"string\" && typeof\
    \ b == \"string\"){\n    var aNum = a.split(\".\");\n    var bNum = b.split(\"\
    .\");\n    if(aNum.length > 1 && bNum.length > 1){\n      if(aNum[1].length >\
    \ 1 && bNum[1].length > 1){\n        if(aNum[1][1] > bNum[1][1]){\n          a\
    \ = aNum[0] + \"0.\" + aNum[1].slice(0,bNum[1][1]);\n        }else{\n        \
    \  a = aNum[0] + \"0.\" + aNum[1].slice(0,aNum[1][1]);\n        }\n      }else{\n\
    \        a = aNum[0];\n      }\n      if(aNum[1].length > 1){\n        a = a +\
    \ \"0.\" + aNum[1].slice(1);\n      }\n    }\n  }\n  // If both are floats, just\
    \ compare them.\n  if(typeof a == \"number\" && typeof b == \"number\"){\n   \
    \ if(a>b){\n      return a;\n    }else{\n      return b;\n    }\n  }\n  // If\
    \ both are strings and the first one is a decimal, remove the\n  // decimal and\
    \ convert to float (don't round it). If both are strings but\n  // neither is\
    \ a decimal, assume they are ints (don't round it).\n  if(typeof a == \"string\"\
    \ && typeof b == \"string\"){\n    var aNum = a.split(\".\");\n    var bNum =\
    \ b.split(\".\");\n    if(aNum.length > 1 && bNum.length > 1){\n      if(aNum[1].length\
    \ > 1 && bNum[1].length > 1){\n        if(aNum[1][1] > bNum[1][1]){\n        \
    \  a = parseFloat(a", "  if (a === b){return undefined;}\n  if (is_number(a) &&\
    \ is_number(b)){return Math.max(a, b);}\n  if (a === null && b === null){return\
    \ undefined;}\n  if (a === null || b === null){return null;}\n  if (is_string(a)\
    \ && is_string(b)){return a.localeCompare(b);}\n  return undefined;\n}", "   \
    \ var a_real = parseFloat(a);\n    var b_real = parseFloat(b);\n    if (a_real\
    \ !== a_real || b_real !== b_real){\n        return undefined;\n    } else {\n\
    \        return a_real > b_real ? a : b;\n    }\n}\n", "\tif (typeof(a) != typeof(b)){\n\
    \t\treturn undefined;\n\t}\n\telse if (typeof(a) == \"string\"){\n\t\tif (a ==\
    \ b){\n\t\t\treturn undefined;\n\t\t}\n\t\tvar a_re = a.match(/([-+]?[0-9]*\\\
    .?[0-9]+|[-+]?[0-9]+)/);\n\t\tvar b_re = b.match(/([-+]?[0-9]*\\.?[0-9]+|[-+]?[0-9]+)/);\n\
    \t\tif (a_re == null && b_re == null){\n\t\t\treturn undefined;\n\t\t}\n\t\tif\
    \ (a_re == null){\n\t\t\treturn a;\n\t\t}\n\t\tif (b_re == null){\n\t\t\treturn\
    \ b;\n\t\t}\n\t\treturn a_re[0] > b_re[0] ? a : b;\n\t}\n\telse if (typeof(a)\
    \ == \"number\"){\n\t\tif (a == b){\n\t\t\treturn undefined;\n\t\t}\n\t\tif (a\
    \ > b){\n\t\t\treturn a;\n\t\t}\n\t\treturn b;\n\t}\n\telse if (typeof(a) == \"\
    object\"){\n\t\tif (a.valueOf() == b.valueOf()){\n\t\t\treturn undefined;\n\t\t\
    }\n\t\tif (a.valueOf() < b.valueOf()){\n\t\t\treturn a;\n\t\t}\n\t\treturn b;\n\
    \t}\n}\n", "  var a_num = Number(a);\n  var b_num = Number(b);\n  if(a_num ===\
    \ b_num){\n    return a;\n  }\n  else if(a_num < b_num){\n    return a;\n  }\n\
    \  else{\n    return b;\n  }\n}\n", "  var a_type = typeof a;\n  var b_type =\
    \ typeof b;\n  if(a_type === \"number\" || a_type === \"string\"){\n    if(a_type\
    \ === b_type){\n      return a > b ? a : b;\n    }else if(a_type.match(/,/) &&\
    \ b_type.match(/,/)){\n      return compare_one(a.split(',').map(Number), b.split(',').map(Number));\n\
    \    }else if(a_type.match(/\\./) && b_type.match(/\\./)){\n      return compare_one(a.split('.').map(Number),\
    \ b.split('.').map(Number));\n    }else{\n      return a > b ? a : b;\n    }\n\
    \  }else if(a_type.match(/,/)){\n    if(b_type === \"string\" || b_type.match(/,/)){\n\
    \      return compare_one(a.split(','), b.split(','));\n    }else if(a_type.match(/\\\
    ./) && b_type.match(/,/)){\n      return compare_one(a.split('.'), b.split(','));\n\
    \    }\n  }else if(a_type.match(/\\./)){\n    if(b_type === \"string\" || b_type.match(/\\\
    ./)){\n      return compare_one(a.split('.'), b.split('.'))\n    }\n  }else{\n\
    \    return a > b ? a : b;\n  }\n}\n", "  if(typeof a !== typeof b){\n    return\
    \ undefined\n  }\n  if(a === null && b === null){\n    return 0\n  }\n  if(a ===\
    \ null && b === undefined){\n    return 1\n  }\n  if(a === undefined && b ===\
    \ null){\n    return -1\n  }\n  if(a === undefined && b === undefined){\n    return\
    \ 0\n  }\n  if(a === null || a === undefined){\n    return -1\n  }\n  if(b ===\
    \ null || b === undefined){\n    return 1\n  }\n  var a_num = parseFloat(a),\n\
    \      b_num = parseFloat(b)\n  if(a_num === b_num){\n    return 0\n  }\n  if(a_num\
    \ > b_num){\n    return 1\n  }\n  return -1\n}\n", "    if (a == b) return b;\n\
    \    if (typeof(a) == \"string\" && typeof(b) == \"string\") return compare_reals(a,\
    \ b);\n    if (typeof(a) == \"number\" && typeof(b) == \"number\") return Math.max(a,\
    \ b);\n    \n    // If both are arrays or objects, sort by index\n    if (a &&\
    \ b){\n        if ((typeof(a) == \"object\") && (typeof(b) == \"object\")){\n\
    \            return compare_arrays(a, b);\n        } else {\n            if (typeof(a)\
    \ == \"string\") return a;\n            if (typeof(b) == \"string\") return b;\n\
    \            return 0;\n        }\n    }\n    return a;\n}\n", "  var type = typeof\
    \ a;\n  if(type === 'number'){\n    if(typeof(b) === 'number'){\n      return\
    \ a > b ? a : b;\n    }else if(typeof(b) === 'string'){\n      return a.localeCompare(b);\n\
    \    }else{\n      return  a > b ? a : b;\n    }\n  }else if(type === 'string'){\n\
    \    return a.localeCompare(b);\n  }else{\n    return a > b ? a : b;\n  }\n}\n",
  "\tif(a === b)\n\t\treturn a;\n\n\t// Convert strings to numbers and check if they\
    \ are numbers\n\tvar a_num = Number(a);\n\tvar b_num = Number(b);\n\tif(a_num\
    \ === b_num)\n\t\treturn a_num;\n\n\t// Convert strings to numbers and check if\
    \ they are numbers\n\tvar a_str = String(a);\n\tvar b_str = String(b);\n\tif(a_str\
    \ === b_str)\n\t\treturn a_str;\n\n\t// Otherwise, return undefined\n\telse\n\t\
    \treturn undefined;\n}\n", "    switch(typeof a) {\n        case 'number': if(a+0\
    \ != a) return a; break;\n        case 'string': if(a+0 != a) return a; break;\n\
    \        default: return undefined;\n    }\n    switch(typeof b) {\n        case\
    \ 'number': if(b+0 != b) return b; break;\n        case 'string': if(b+0 != b)\
    \ return b; break;\n        default: return undefined;\n    }\n}\n", "    if(isNaN(a)\
    \ || isNaN(b) || a === b) return undefined;\n    if(a === b) return 0;\n    return\
    \ a > b ? 1 : -1;\n}\n", "  if (a === b)\n    return undefined;\n  else if (typeof(a)\
    \ != typeof(b))\n    return b;\n  else if (is_int(b) || is_float(b) || is_string(b))\
    \ {\n    var as = typeof(a);\n    if (as == typeof(b))\n      return a > b ? a\
    \ : b;\n    else if (as == typeof(\"\"))\n      return compare_one(parseFloat(a),\
    \ parseFloat(b)) || parseFloat(a) > parseFloat(b) ? a : b;\n    else if (as ==\
    \ typeof(null))\n      return compare_one(parseInt(a), parseInt(b)) || parseInt(a)\
    \ > parseInt(b) ? a : b;\n  }\n  else\n    return undefined;\n}\n", "    if (is_number(a)\
    \ && is_number(b)){\n        a = Math.abs(a);\n        b = Math.abs(b);\n    \
    \    return a > b ? a : b;\n    } else if (is_string(a) && is_string(b)) {\n \
    \       a = a.split(',');\n        b = b.split(',');\n        var i = 0;\n   \
    \     while (i < a.length && i < b.length){\n            if (a[i] !== b[i]){\n\
    \                return a[i] < b[i] ? a[i] : b[i];\n            }\n          \
    \  i += 1;\n        }\n        return i < a.length ? a[i] : b[i];\n    } else\
    \ if (is_array(a) && is_array(b)) {\n        if (is_array(a) && is_array(b) &&\
    \ a.length === b.length){\n            for (var i = 0, len = a.length; i < len;\
    \ i++){\n                if (a[i] !== b[i]){\n                    return a[i]\
    \ < b[i] ? a[i] : b[i];\n                }\n            }\n            return\
    \ true;\n        }\n        return false;\n    }\n}\n", "  if(a === null || typeof\
    \ a === 'undefined'){\n    return b;\n  }\n  if(typeof b === 'number' || typeof\
    \ b === 'string'){\n    return a >= b;\n  }\n  if(b instanceof Array || a instanceof\
    \ Array || b instanceof Number){\n    if(b.length === a.length){\n      for(var\
    \ i=0; i<a.length; i++){\n        if(!compare_one(a[i], b[i])){\n          return\
    \ undefined;\n        }\n      }\n      return true;\n    }\n  }\n  if(b instanceof\
    \ Object){\n    if(Object.keys(b).length === Object.keys(a).length){\n      var\
    \ same = true;\n      for(var p in a){\n        if(p in b){\n          same =\
    \ same && compare_one(a[p], b[p]);\n        }\n      }\n      return same;\n \
    \   }\n  }\n  if(b instanceof Date){\n    return a.getTime() > b.getTime();\n\
    \  }\n  return undefined;\n}\n", "    if(typeof(a) == 'number'){\n        return\
    \ a > b ? a : b;\n    }\n    if(typeof(a) == 'string'){\n        a = a.split(',').map(parseFloat);\n\
    \        b = b.split(',').map(parseFloat);\n        if(a > b){\n            return\
    \ a;\n        }\n        if(a == b){\n            return a;\n        }\n    }\n\
    \    return undefined;\n}\n</code>\n<|/ a dscore=3 tags=javascript,comparison,arrays\
    \ |>\n<| c |>\nIt doesn't work for strings separated by multiple spaces.\n<|/\
    \ c |>\n<| c |>\nYou are correct about the spaces, but you forgot to account for\
    \ the case where one variable is a string and the other a number. I've added it\
    \ to the code above and also fixed the issues with the `>` operator. Check it\
    \ out now.\n<|/ c |>\n<| a |>\nYou can use a regular expression instead:\n\n<code>",
  "  a = a === \"\" ? undefined : a;\n  b = b === \"\" ? undefined : b;\n  if (a ===\
    \ undefined) {\n    return b;\n  }\n  if (b === undefined) {\n    return a;\n\
    \  }\n  if (a === b) {\n    return a;\n  }\n  var a_number = parseInt(a);\n  var\
    \ b_number = parseInt(b);\n  var a_string = a.toString();\n  var b_string = b.toString();\n\
    \  if (a_number > b_number) {\n    return a_string;\n  } else if (a_number ===\
    \ b_number) {\n    return a_string;\n  } else {\n    return b_string;\n  }\n}\n",
  "  if (a === b) {\n    return a;\n  }\n  var a_b = parseFloat(a), b_a = parseFloat(b);\n\
    \  if (isNaN(a_b) || isNaN(b_a)) {\n    return undefined;\n  }\n  return (a_b\
    \ > b_a) ? a : b;\n}\n", "\tvar one;\n\tvar floatA;\n\tvar floatB;\n\tif(typeof(a)\
    \ != \"number\"){\n\t\tone = parseFloat(a);\n\t}else{\n\t\tone = a;\n\t}\n\tif(typeof(b)\
    \ != \"number\"){\n\t\tfloatA = parseFloat(a);\n\t\tfloatB = parseFloat(b);\n\t\
    \tif(floatA > floatB){\n\t\t\treturn b;\n\t\t}else if(floatA < floatB){\n\t\t\t\
    return a;\n\t\t}else{\n\t\t\treturn b;\n\t\t}\n\t}else{\n\t\tfloatA = parseFloat(a);\n\
    \t\tfloatB = b;\n\t\tif(floatA > floatB){\n\t\t\treturn a;\n\t\t}else if(floatA\
    \ < floatB){\n\t\t\treturn b;\n\t\t}else{\n\t\t\treturn a;\n\t\t}\n\t}\n}\n",
  "    var x = parseFloat(a);\n    var y = parseFloat(b);\n    if (x === y){\n   \
    \     return x;\n    }\n    if (x === undefined){\n        if (y === undefined){\n\
    \            return undefined;\n        }\n        return y;\n    }\n    if (y\
    \ === undefined){\n        return x;\n    }\n    if (y < x){\n        return y;\n\
    \    }\n    return x;\n}\n", "  var num;\n  if (a[0] === \"-\" || a[0] === \"\
    ,\"){\n    return b;\n  } else if (b[0] === \"-\" || b[0] === \",\"){\n    return\
    \ a;\n  } else if (a.length > b.length){\n    return a;\n  } else {\n    return\
    \ b;\n  }\n}\n", "    if (is_string(a)) {\n        return bigger_of_string(a,\
    \ b);\n    }\n    else if (is_string(b)) {\n        return smaller_of_string(a,\
    \ b);\n    }\n    else {\n        return bigger_of_number(a, b);\n    }\n}\n",
  "    if(a.type === b.type){\n        switch(a.type){\n            case \"int\":\n\
    \                return Math.max(a, b);\n            case \"float\":\n       \
    \         return Math.max(a, b);\n            case \"string\":\n             \
    \   var a_split = a.split(\".\");\n                var b_split = b.split(\".\"\
    );\n                var maxLen = a_split[0].length;\n                if(maxLen\
    \ > b_split[0].length){\n                    return b_split[0]\n             \
    \   }else{\n                    return a_split[0]\n                }\n       \
    \     default:\n                return undefined;\n        }\n    }else{\n   \
    \     return undefined;\n    }\n}\n", "    if (a === b) {\n        return a;\n\
    \    }\n    else if (a === undefined) {\n        return b;\n    }\n    else if\
    \ (b === undefined) {\n        return a;\n    }\n\n    if (typeof(a) === 'string')\
    \ {\n        a = a.trim();\n    }\n    if (typeof(b) === 'string') {\n       \
    \ b = b.trim();\n    }\n\n    if (a > b || a < b) {\n        return a;\n    }\n\
    \    else {\n        return b;\n    }\n}\n", "\tif(typeof(a) == 'string' && typeof(b)\
    \ == 'string' && a.indexOf(',') != -1){\n\t\tvar ar = a.split(',');\n\t\tvar br\
    \ = b.split(',');\n\t\tif(ar.length > 1 && br.length > 1){\n\t\t\tvar a = ar[0].split('.');\n\
    \t\t\tvar b = br[0].split('.');\n\t\t\tvar c = 0;\n\t\t\tif(a[0].length >= b[0].length){\n\
    \t\t\t\tc = a[0].length;\n\t\t\t}\n\t\t\tif(a[1].length >= b[1].length){\n\t\t\
    \t\tc = Math.max(a[1].length, b[1].length);\n\t\t\t}\n\t\t\tif(c >= 0){\n\t\t\t\
    \tif(a[0].substring(0,c) != b[0].substring(0,c)){\n\t\t\t\t\treturn a[0].substring(0,c);\n\
    \t\t\t\t}\n\t\t\t\tif(a[0].substring(c) != b[0].substring(c)){\n\t\t\t\t\treturn\
    \ a[0].substring(c);\n\t\t\t\t}\n\t\t\t\tif(a[1] != b[1]){\n\t\t\t\t\treturn a[1];\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(a==b) return a;\n\tif(a<b) return a;\n\t\
    if(a>b) return b;\n}\n", "    if(a != b){\n        if(typeof(a) == 'string' &&\
    \ typeof(b) != 'string'){\n            a = parseFloat(a);\n            b = parseFloat(b);\n\
    \        }\n        if(a > b) return b;\n        if(a < b) return a;\n    }\n\
    }\n", "\tif (typeof(b) == \"number\"){\n\t\tif (a > b) return b;\n\t\telse if\
    \ (b > a) return a;\n\t\telse return undefined;\n\t}\n\telse if (typeof(b) ==\
    \ \"string\"){\n\t\tif (a > b) return b;\n\t\telse if (b > a) return a;\n\t\t\
    else return undefined;\n\t}\n\telse if (b == null)\n\t\treturn a;\n\telse if (a\
    \ == null)\n\t\treturn b;\n\telse if (typeof(b) == \"object\"){\n\t\tif (a.length\
    \ != b.length)\n\t\t\treturn undefined;\n\t\tfor (var i = 0; i < b.length; i++){\n\
    \t\t\tif (a[i] != b[i]) return undefined;\n\t\t}\n\t\treturn a;\n\t}\n\telse return\
    \ undefined;\n}\n", "  if (a === b) return a;\n  if (typeof(a) == \"string\")\
    \ a = a.split(\".\");\n  if (typeof(b) == \"string\") b = b.split(\".\");\n  var\
    \ max_num = Math.max(a.length, b.length);\n  for (var i = 0; i < max_num; i++){\n\
    \    if (a[i] && !b[i] && (a[i] == \".\" || b[i] == \".\")) return undefined;\n\
    \    if (a[i] && !b[i] && a[i] == b[i]) return undefined;\n    if (a[i] == b[i])\
    \ return a[i];\n  }\n  return undefined;\n}\n", "\tvar r1 = parseFloat(a), r2\
    \ = parseFloat(b);\n\tif(r1!=r2){\n\t\treturn r1>r2 ? 1 : -1;\n\t}else{\n\t\t\
    return a>b ? 1 : -1;\n\t}\n}", "  if (typeof(a) == 'number' && typeof(b) == 'number'){\n\
    \    if (a < b){\n      return a;\n    }\n    if (a > b){\n      return b;\n \
    \   }\n  } else {\n    if (a < b){\n      return b;\n    }\n    if (a > b){\n\
    \      return a;\n    }\n  }\n  return undefined;\n}\n", "\treturn (a>b)?a:b;\n\
    }\n", "    if (a instanceof String && b instanceof String) {\n        return a.localeCompare(b);\n\
    \    }\n    if (a instanceof Number && b instanceof Number) {\n        return\
    \ a - b;\n    }\n    if (a instanceof Object && b instanceof Object) {\n     \
    \   return compare_one(a.constructor.name.toLowerCase(), b.constructor.name.toLowerCase());\n\
    \    }\n    return undefined;\n}\n", "\tif (typeof a == 'string') a = parseFloat(a);\n\
    \tif (typeof b == 'string') b = parseFloat(b);\n\tif (typeof a == 'number') return\
    \ Math.max(a, b);\n\tif (typeof b == 'number') return Math.min(a, b);\n}\n", " \
    \   if (a == b) return a;\n    else if (isReal(a) && isReal(b)) {\n        if\
    \ ( a.indexOf(\",\") != -1 ) {\n            if ( b.indexOf(\",\") != -1 ) {\n\
    \                var aSplit = a.split(\",\");\n                var bSplit = b.split(\"\
    ,\");\n                for (var k = 0; k < aSplit.length; k++) {\n           \
    \         var aRealNum = aSplit[k];\n                    var bRealNum = bSplit[k];\n\
    \                    if (aRealNum == bRealNum) return aRealNum;\n            \
    \        else if (aRealNum < bRealNum) return aRealNum;\n                    else\
    \ if (aRealNum > bRealNum) return bRealNum;\n                }\n             \
    \   return bSplit[aSplit.length - 1];\n            }\n            return b;\n\
    \        }\n        if ( a.indexOf(\".\") != -1 ) {\n            if ( b.indexOf(\"\
    .\") != -1 ) {\n                var aSplit = a.split(\".\");\n               \
    \ var bSplit = b.split(\".\");\n                var precision = Math.pow(10, aSplit.length\
    \ - 1);\n                for (var k = 0; k < aSplit.length; k++) {\n         \
    \           var aRealNum = aSplit[k];\n                    var bRealNum = bSplit[k];\n\
    \                    var aFloatNum = aRealNum * precision;\n                 \
    \   var bFloatNum = bRealNum * precision;\n                    if (aFloatNum ==\
    \ bFloatNum) return aRealNum;\n                    else if (aFloatNum < bFloatNum)\
    \ return aRealNum;\n                    else if (aFloatNum > bFloatNum) return\
    \ bRealNum;\n                }\n                return bSplit[aSplit.length -\
    \ 1];\n            }\n            return b;\n        }\n        return a;\n  \
    \  }\n    else return b;\n}\n", "    var aNum = a.toString().split(\".\");\n \
    \   var bNum = b.toString().split(\".\");\n    var i;\n    if(aNum.length > 0\
    \ && bNum.length > 0){\n        if(aNum[0] < bNum[0]){\n            return a;\n\
    \        }else if(aNum[0] > bNum[0]){\n            return b;\n        }else{\n\
    \            for(i=0;i<aNum.length;i++){\n                if(aNum[i] != bNum[i]){\n\
    \                    return aNum[i];\n                }\n            }\n     \
    \   }\n    }else if(aNum.length > 0){\n        return a;\n    }else{\n       \
    \ return b;\n    }\n}\n", "    if (a === b){\n        return a;\n    }\n    else\
    \ if (typeof a == \"string\"){\n        if (isNaN(parseFloat(a)) === false){\n\
    \            return parseFloat(a) > parseFloat(b) ? a : b;\n        }\n    }\n\
    \    else if (typeof a == \"number\"){\n        if (isNaN(a) === false && typeof\
    \ b == \"number\"){\n            if (a > b){\n                return a;\n    \
    \        }\n            else {\n                return b;\n            }\n   \
    \     }\n    }\n    else if (typeof a == \"boolean\" || typeof b == \"boolean\"\
    ){\n        if (a === b){\n            return a;\n        }\n    }\n}\n", "  \
    \  if(a === undefined){\n        return b;\n    }\n    if(typeof a === 'number'){\n\
    \        if(typeof b === 'number'){\n            if(a > b){\n                return\
    \ a;\n            }else if(a < b){\n                return b;\n            }\n\
    \        }\n    }else if(typeof a === 'string'){\n        if(typeof b === 'string'){\n\
    \            if(a > b){\n                return a;\n            }else if(a < b){\n\
    \                return b;\n            }\n        }\n    }\n    return undefined;\n\
    }\n", "  if (typeof(a) != typeof(b)) {\n    return typeof(a);\n  }\n  if (a ==\
    \ \"NaN\" || b == \"NaN\") {\n    return \"NaN\";\n  }\n  var re = /^[-+]?(?:\\\
    d+(?:\\.\\d*)?|\\.\\d+)(?:[Ee][-+]?\\d+)?$/;\n  if (!re.test(a) || !re.test(b))\
    \ {\n    return typeof(a);\n  }\n  return b.replace(\".\", \"\").replace(\"-\"\
    , \"\") > a.replace(\".\", \"\").replace(\"-\", \"\") ? b : a;\n}\n", "\tvar a_real\
    \ = parseFloat(a);\n\tvar b_real = parseFloat(b);\n\tif(a_real > b_real)\n\t\t\
    return a;\n\telse if (a_real < b_real)\n\t\treturn b;\n\telse\n\t\treturn undefined;\n\
    }\n", "    \n    // If the two arguments are strings, make sure they match\n \
    \   if(typeof a === \"string\" && typeof b === \"string\"){\n        return a\
    \ > b;\n    }\n    // If the two arguments are numbers, convert them to a float\
    \ and compare them\n    else if(typeof a === \"number\" && typeof b === \"number\"\
    ){\n        return a > b;\n    }\n    // Otherwise, if the two arguments are booleans\
    \ or null, compare them\n    else if(typeof a === \"boolean\" && typeof b ===\
    \ \"boolean\" || a === null || b === null){\n        return a > b;\n    }\n  \
    \  // Otherwise, if the two arguments aren't comparable, throw an error\n    else{\n\
    \        throw new Error(\"Invalid arguments for compare: Expected 2 or more numbers\
    \ or strings, got \"+arguments.length);\n    }\n}\n", "\tif(!a || !b || (typeof\
    \ a !== typeof b)){\n\t\treturn undefined;\n\t}\n\tif(a instanceof Object || a\
    \ instanceof Array || a instanceof String){\n\t\tif(typeof(a) !== typeof(b))\n\
    \t\t\treturn undefined;\n\t}\n\tif(a.length !== b.length)\n\t\treturn undefined;\n\
    \tif(a.constructor === Number){\n\t\treturn a.localeCompare(b);\n\t}\n\treturn\
    \ (a>=b) ? 1 : -1;\n}\n", "  // if both values are strings, do string comparisons\n\
    \  if(typeof a == \"string\"){\n    if(typeof b == \"string\"){\n      if(a>b)\n\
    \        return b;\n      else\n        return a;\n    }\n  }\n  // if both values\
    \ are numbers, do number comparisons\n  else if(typeof a == \"number\"){\n   \
    \ if(typeof b == \"number\"){\n      if(a>b)\n        return b;\n      else\n\
    \        return a;\n    }\n  }\n  // else do undefined comparisons\n  return undefined;\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nNice use of recursion, that would have\
    \ helped to see it written out in full as well.\n<|/ c |>\n<| c |>\n- Thanks,\
    \ I rewrote it to be a full script, and added an explanation of how the function\
    \ works.\n<|/ c |>\n<| c |>\nThis code works but there's a typo `else if(typeof\
    \ b == \"number\"){` should be  `else if(typeof b == \"number\"){`. And also,\
    \ it doesn't work if both values are **strings**\n<|/ c |>\n<| a tags=javascript\
    \ |>\n<code>", "    if(a==\"NaN\"){\n        console.log(\"NAN!\")\n        return\
    \ \"NAN!\"\n    }\n    a = parseFloat(a)\n    b = parseFloat(b)\n    if(isNaN(a)\
    \ || isNaN(b)){\n        console.log(\"NAN!\")\n        return \"NAN!\"\n    }\n\
    \    if(a==b){\n        console.log(\"Equal!\")\n        return a\n    }\n   \
    \ if(a>b){\n        console.log(\"a is bigger than b\")\n        return \"a is\
    \ bigger than b\"\n    }\n    if(b>a){\n        console.log(\"b is bigger than\
    \ a\")\n        return \"b is bigger than a\"\n    }\n}\n", "    // This relies\
    \ on string compare. Not a reliable method.\n    var x = parseFloat(a), y = parseFloat(b);\n\
    \    if(x === y){\n        return a;\n    }\n    if(x > y){\n        return b;\n\
    \    }\n    return a;\n}\n</code>\n<|/ a |>\n<| c |>\nThis works but only for\
    \ integers. Can this be adapted to work for floats?\n<|/ c |>\n<| c |>\n- Sure.\
    \ The only thing that changes is the `parseInt` function and the type comparisons.\
    \ I've modified my answer to include a working function.\n<|/ c |>\n<| c |>\n\
    Sorry that took so long, I had to put my bosses aside for a while and I realized\
    \ that the question was asking to return the variable with the greater value.\
    \ What I needed was the variable with the larger value that could be represented\
    \ by a string. This meant that I was basically looking for a way to compare floating\
    \ point numbers.\n<|/ c |>\n<| c |>\nThanks for the update. However, this does\
    \ only work for integers. Is there anyway to get it to work for floats? I realize\
    \ that comparing floating point numbers is tricky but I am just looking to see\
    \ if the number is larger or not. Also if you could explain what this function\
    \ is doing that would be awesome. Thanks.\n<|/ c |>\n<| c |>\n- I added comments\
    \ throughout the function. Let me know if that helps.\n<|/ c |>\n<| a tags=javascript\
    \ |>\nJust for fun... I hope you didn't just get tired of reading this...\n<code>",
  "  if (a == b) return a;\n  else if (typeof a === 'number') return a > b ? a : b;\n\
    \  else if (typeof a === 'string') return a.localeCompare(b);\n  else if (typeof\
    \ a === 'object' && typeof b === 'object') return compare_object(a, b);\n  else\
    \ return undefined;\n}\n", "    if(a===b)\n        return a;\n    if(a<b)\n  \
    \      return a;\n    return b;\n}\n", "  var aReal = parseFloat(a);\n  var bReal\
    \ = parseFloat(b);\n  if (aReal == bReal){\n    return aReal;\n  }\n  var aIsInteger\
    \ = a.includes(\",\");\n  var bIsInteger = b.includes(\",\");\n  // Note: If a\
    \ is formatted as a string, it might be , or ( or ..\n  if (aIsInteger && bIsInteger){\n\
    \    if (aReal > bReal){\n      return a;\n    }\n    return b;\n  }\n  // Note:\
    \ If b is formatted as a string, it might be , or ( or ..\n  if (aIsInteger &&\
    \ !bIsInteger){\n    return b;\n  }\n  if (!aIsInteger && bIsInteger){\n    return\
    \ a;\n  }\n}\n", "    // Test whether a is larger than b\n    // Test whether\
    \ a is a string representation of a number larger than b\n    // Test whether\
    \ a is a string representation of more than one number larger than b\n    if(\
    \ typeof a != typeof b )\n        if( typeof a != \"number\" ){\n            return\
    \ a;\n        }\n    else if( typeof a == \"number\" ){\n        if( a > b ){\n\
    \            return a;\n        }\n    }\n    var test1 = typeof a == \"number\"\
    \ ? a.toString() : a;\n    var test2 = typeof b == \"number\" ? b.toString() :\
    \ b;\n    if( test1.indexOf(\",\") > -1 || test2.indexOf(\",\") > -1 || test1.indexOf(\"\
    .\") > -1 || test2.indexOf(\".\") > -1 ){\n        return test1;\n    }\n    else{\n\
    \        if( test1 > test2 ){\n            return test1;\n        }\n        else\n\
    \            return test2;\n    }\n}\n", "  var type = typeof a;\n  if(type ===\
    \ 'string'){\n    if(a === b){\n      return a;\n    }\n    return a === \"\"\
    \ ? undefined : \"\";\n  }\n  if(type === 'number'){\n    return a > b ? a : b;\n\
    \  }\n  return undefined;\n}\n", "    var c = parseFloat(a);\n    var d = parseFloat(b);\n\
    \    if(c == d && a != b){\n        return a;\n    }\n    else if(c > d){\n  \
    \      return a;\n    }\n    else{\n        return b;\n    }\n}\n", "\tif (typeof(a)\
    \ == 'number'){\n\t\tif (typeof(b) == 'number') return Math.abs(a) > Math.abs(b)\
    \ ? a : b;\n\t\tif (typeof(b) == 'string') return parseFloat(b) > parseFloat(a)\
    \ ? b : a;\n\t} else if (typeof(a) == 'string'){\n\t\tif (typeof(b) == 'number')\
    \ return parseFloat(a) > parseFloat(b) ? a : b;\n\t\tif (typeof(b) == 'string')\
    \ return parseFloat(a) > parseFloat(b) ? b : a;\n\t} else if (typeof(a) == 'object'){\n\
    \t\tif (typeof(b) == 'number') return parseFloat(a) > parseFloat(b) ? b : a;\n\
    \t\tif (typeof(b) == 'string') return parseFloat(a) > parseFloat(b) ? a : b;\n\
    \t} else if (typeof(a) == 'object'){\n\t\tif (typeof(b) == 'number') return parseFloat(a)\
    \ > parseFloat(b) ? b : a;\n\t\tif (typeof(b) == 'string') return parseFloat(a)\
    \ > parseFloat(b) ? a : b;\n\t} else {\n\t\treturn null;\n\t}\n}\n", "  if(a.constructor\
    \ === String && b.constructor === String){\n    return a.localeCompare(b);\n \
    \ }\n  if(a.constructor === String){\n    return -1;\n  }\n  if(b.constructor\
    \ === String){\n    return 1;\n  }\n  if(typeof a === typeof b){\n    if(a ===\
    \ b){\n      return 0;\n    }\n    return a > b ? 1 : -1;\n  }\n  return undefined;\n\
    }\n", "    if(a===b) return a;\n    else if((typeof a) === \"number\"){\n    \
    \    if( (typeof b) === \"number\" ){\n            if(a>b) return b;\n       \
    \     else return a;\n        }\n        else return b;\n    }\n    else if((typeof\
    \ b) === \"number\"){\n        return a;\n    }\n    else if( (a.toString().indexOf(\"\
    ,\") !== -1) && (b.toString().indexOf(\",\") !== -1) ){\n        var x = parseFloat(a.replace(\"\
    ,\",\".\"));\n        var y = parseFloat(b.replace(\",\",\".\"));\n        return\
    \ x > y ? y : x;\n    }\n    else return undefined;\n}\n", "  if(typeof a ===\
    \ \"string\"){\n    a = parseFloat(a);\n  }\n  if(typeof b === \"string\"){\n\
    \    b = parseFloat(b);\n  }\n  if(typeof a === \"number\" && typeof b === \"\
    number\"){\n    if(a<b) return a;\n    if(a>b) return b;\n  }\n  if(typeof a ===\
    \ \"number\" || typeof b === \"number\"){\n    if(a>b) return a;\n    if(a<b)\
    \ return b;\n  }\n  if(typeof a === \"string\" && typeof b === \"string\"){\n\
    \    if(a>b) return a;\n    if(a<b) return b;\n  }\n}\n", "    if(typeof a ==\
    \ \"number\" || typeof a == \"string\"){\n        if(typeof b == \"number\" ||\
    \ typeof b == \"string\"){\n            return Math.max(a, b);\n        }\n  \
    \      return a;\n    }else if(typeof b == \"number\" || typeof b == \"string\"\
    ){\n        return b;\n    }\n    return undefined;\n}\n", "  var atype, btype;\n\
    \  if (typeof(a) == 'number' && typeof(b) == 'number') return (a > b) ? 1 : -1;\n\
    \  if (typeof(a) == 'number'){\n    if (b===0) return 0;\n    atype = \"integer\"\
    ;\n  }\n  else if (typeof(b) == 'number'){\n    if (a===0) return 0;\n    btype\
    \ = \"integer\";\n  }\n  else if (typeof(a) == 'string'){\n    if (b==='0') return\
    \ 0;\n    atype = \"string\";\n  }\n  else if (typeof(b) == 'string'){\n    if\
    \ (a==='0') return 0;\n    btype = \"string\";\n  }\n  else return undefined;\n\
    \n  var at = parseInt(a, 10), bt = parseInt(b, 10);\n  if (isNaN(at) || isNaN(bt))\
    \ return undefined;\n\n  if (bt == at) return bt;\n  if (at == bt) return at;\n\
    \n  if (a == '-' && b == '+') return at;\n  if (a == '-') return -1 * at;\n  if\
    \ (a == '+') return at;\n\n  if (b == '-') return -1 * bt;\n  if (b == '+') return\
    \ bt;\n\n  if (a == 0 && b == 0) return 0;\n\n  var abs = Math.abs(at), babs =\
    \ Math.abs(bt);\n  var rt = 0, rt2 = 0, abs = Math.abs(abs);\n  if (bt != 0) rt2\
    \ = at > bt ? 1 : -1;\n  else if (abs > abs) rt = 1;\n  else if (abs < abs) rt\
    \ = -1;\n  else if (abs == 0) rt = 0;\n  else rt = 0;\n\n  switch(atype){\n  \
    \  case 'integer':\n      rt += rt2;\n      break;\n    case 'string':\n     \
    \ rt += rt == 0 ? (a < b) ? 1 : -1 : (rt != 0) && compare_one(a.toString(), b.toString());\n\
    \      break;\n    case 'float':\n      rt += (rt2 == 0) ? 1 : -1;\n      rt =\
    \ -Math.log(rt)/Math.log(10);\n      break;\n  }\n\n  if (btype != 'integer')\
    \ rt = Math.ceil(rt);\n  return rt;\n}\n", "  // Check if a is a number and b\
    \ is a real number.\n  if(typeof a == 'number' && typeof b == 'number') {\n  \
    \  if(a>b) return a;\n    if(a<b) return b;\n  }\n  \n  // Check if a string is\
    \ numeric and convert it to a number.\n  if(typeof a == 'string' && typeof b ==\
    \ 'number'){\n    try{\n      a = parseFloat(a);\n      b = parseFloat(b);\n \
    \   }\n    catch(e){\n    }\n  }\n\n  // If it is a string, then assume that it's\
    \ an integer.\n  // Try to convert it to a number and return it.\n  if(typeof\
    \ a == 'string' && typeof b == 'string') {\n    try{\n      a = parseInt(a);\n\
    \      b = parseInt(b);\n    }\n    catch(e){\n    }\n  }\n  \n  // If both were\
    \ strings, just compare them if they both are strings.\n  if(typeof a == 'string'\
    \ && typeof b == 'string'){\n    if(a.toLowerCase() == b.toLowerCase()) return\
    \ true;\n  }\n  \n  // Otherwise, they're not the same.\n  return false;\n}\n",
  "    if (a === b) return undefined;\n    if (a.constructor === Number) return a>b\
    \ ? a : b;\n    if (a.constructor === String) return a.split(\",\").map(Number).reduce(function\
    \ (max, v) {\n        return max<v ? max : v;\n    });\n    if (a.constructor\
    \ === Array) return a.map(compare_one).reduce(function (max, v) {\n        return\
    \ max<v ? max : v;\n    });\n    return undefined;\n}", "    if(a == b) return\
    \ a;\n    if(typeof a == \"number\" && typeof b == \"number\"){\n        return\
    \ Math.max(Math.round(a), Math.round(b));\n    }\n    if(typeof a == \"string\"\
    \ && typeof b == \"string\"){\n        return a.localeCompare(b);\n    }\n}\n",
  "  return compare(a, b) ?\n    a > b ? a : b :\n    a < b ? b : a;\n}\n\n", "  \
    \  if (b === undefined) return a;\n    if (a === undefined) return b;\n    if\
    \ (a === b) return b;\n    if (a[0] === '-' && b[0] === '-') return compare_one(b[1],\
    \ a[1]); // both are positive numbers\n    if (a[0] === '+' && b[0] === '+') return\
    \ compare_one(b[1], a[1]); // both are positive numbers\n    if (a[0] === '-'\
    \ || a[0] === '+' || b[0] === '-' || b[0] === '+'){\n        if (a.length > b.length)\
    \ return a;\n        if (a.length > b.length) return b;\n        if (a.length\
    \ > b.length) return a;\n        if (a.length > b.length) return b;\n        if\
    \ (a.length > b.length) return a;\n    }\n    if (a === b) return b;\n    return\
    \ a;\n}\n", "    if( a === b ) return a;\n    if( a === null ) return a;\n   \
    \ if( b === null ) return b;\n    if( a === null || b === null ) return undefined;\n\
    \    if( a === undefined || b === undefined ) return undefined;\n\n    if( a ===\
    \ b ) return a;\n    if( a === \"\" ) return b;\n    if( b === \"\" ) return a;\n\
    \    if( a === null || b === null ) return undefined;\n    if( a === undefined\
    \ || b === undefined ) return undefined;\n\n    if( a > b ) return a;\n    if(\
    \ a < b ) return b;\n    if( b > a ) return a;\n    if( b < a ) return b;\n\n\
    \    return undefined;\n}\n", "  var x = parseFloat(a);\n  var y = parseFloat(b);\n\
    \n  if(isNaN(x) || isNaN(y)){\n    return;\n  }\n  if(x == y){\n    return x;\n\
    \  }\n  if(x < y){\n    return a;\n  }\n  return b;\n}\n", "  if((typeof a) ===\
    \ 'number'){\n    if(a === b){\n      return a\n    }\n    else if(a > b){\n \
    \     return a\n    }\n    else if(a < b){\n      return b\n    }\n  }\n  else\
    \ if(a === null){\n    if(b === null){\n      return a\n    }\n    else if(b ===\
    \ undefined){\n      return null\n    }\n    else if(a > b){\n      return b\n\
    \    }\n    else if(a < b){\n      return a\n    }\n  }\n  else if(a === 'string'){\n\
    \    try{\n      a = parseFloat(a)\n    }\n    catch(e){ }\n    try{\n      b\
    \ = parseFloat(b)\n    }\n    catch(e){ }\n    if(a===b){\n      return a\n  \
    \  }\n    else if(b > a){\n      return b\n    }\n    else if(b < a){\n      return\
    \ a\n    }\n  }\n}\n", "\tif (a === b) return a;\n\tif (typeof a !== \"string\"\
    ) a = \"\" + a;\n\tif (typeof b !== \"string\") b = \"\" + b;\n\treturn parseFloat(a)\
    \ > parseFloat(b) ? a : b;\n}\n", "    var x = a.toString();\n    var y = b.toString();\n\
    \    \n    var xv = x.indexOf('.');\n    var yv = y.indexOf('.');\n    \n    var\
    \ x_d = xv.valueOf();\n    var y_d = yv.valueOf();\n    \n    var x_p = x.indexOf(',');\n\
    \    var y_p = y.indexOf(',');\n    \n    var x_s = x.indexOf('.');\n    var y_s\
    \ = y.indexOf('.');\n    \n    var x_f = (x_p < x_s)?x_p + 1:x_s;\n    var y_f\
    \ = (y_p < y_s)?y_p + 1:y_s;\n    \n    \n    if(x_d > y_d){\n        return x;\n\
    \    }\n    else if(x_d < y_d){\n        return y;\n    }\n    else if(x_f > y_f){\n\
    \        return x.replace(/,/g,'.');\n    }\n    else if(x_f < y_f){\n       \
    \ return y.replace(/,/g,'.');\n    }\n    \n}\n", "\treturn Math.max(a, b);\n\
    }\n", "  if (typeof a === typeof b){\n    if (typeof a === \"number\" && typeof\
    \ b === \"number\"){\n      // Both numbers, compare them\n      return a > b\
    \ ? a : b;\n    } else if (a === \"string\" || a instanceof String){\n      //\
    \ A string, convert it to a number and then compare them\n      return parseFloat(a)\
    \ > parseFloat(b) ? parseFloat(a) : parseFloat(b);\n    } else if (b instanceof\
    \ String || a instanceof Number){\n      // A number, convert it to a string and\
    \ then compare them\n      return a.toString().localeCompare(b.toString());\n\
    \    }\n  }\n  return undefined;\n}\n", "  if(a===b) return a;\n  if(isString(a)\
    \ && isString(b) && isFloat(a) && isFloat(b)) return parseFloat(a) > parseFloat(b)\
    \ ? a : b;\n  if(isInt(a) && isInt(b)) return parseInt(a) > parseInt(b) ? a :\
    \ b;\n}\n", "  if (a === b){\n    return undefined;\n  }\n  var aType = typeof\
    \ a;\n  var bType = typeof b;\n  var aSize = 0, bSize = 0, isNumber = false;\n\
    \  if (aType === 'number'){\n    aSize = 8;\n  } else if (aType === 'string'){\n\
    \    aSize = a.replace(/[^0-9.-]/g, '').length;\n    if (aSize > 8){ // If it's\
    \ a string, it can't be too long\n      aSize = 8; //and if it's not a number,\
    \ it can't be too long\n    }\n    isNumber = true;\n  }\n  if (bType === 'number'){\n\
    \    bSize = 8;\n  } else if (bType === 'string'){\n    bSize = b.replace(/[^0-9.-]/g,\
    \ '').length;\n    if (bSize > 8){ // If it's a string, it can't be too long\n\
    \      bSize = 8; //and if it's not a number, it can't be too long\n    }\n  \
    \  isNumber = true;\n  }\n\n  if (aSize > bSize){\n    return b; //larger number\
    \ is larger\n  }\n  if (bSize > aSize){\n    return a; //larger number is larger\n\
    \  }\n\n  if (!isNaN(a) && isNumber){\n    return a;\n  }\n  if (!isNaN(b) &&\
    \ isNumber){\n    return b;\n  }\n\n  if (a < b){\n    return b;\n  }\n  if (a\
    \ > b){\n    return a;\n  }\n  return undefined;\n}\n", "  if (a && b){\n    try{\n\
    \      return parseFloat(a) > parseFloat(b) ? a : b;\n    }catch (e){\n      if\
    \ (a === b) return a;\n    }\n  }\n}\n", "  var a_is_str = typeof a == 'string'\
    \ || a instanceof String;\n  var b_is_str = typeof b == 'string' || b instanceof\
    \ String;\n\n  if (a_is_str && b_is_str) {\n    return a.localeCompare(b);\n \
    \ } else if (a !== b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n\n",
  "    if((a && a === a.toString && (a.match(/([+\\-]?[\\d\\.]+)%/) || a.match(/([+\\\
    -]?[\\d\\.]+)$/))) ||\n        (!a && a === a.toString && (a.match(/([+\\-]?[\\\
    d\\.]+)%/) || a.match(/([+\\-]?[\\d\\.]+)$/)))){\n        return a > b ? 1 : -1;\n\
    \    } else if(a < b){\n        return 1;\n    } else if(a == b){\n        return\
    \ 0;\n    }\n}\n", "  var a_type;\n  var b_type;\n\n  if(typeof a == \"string\"\
    ){\n    a_type = typeof Number(a);\n    a_type = a_type ? a_type : \"string\"\
    ;\n  } else {\n    a_type = typeof a;\n  }\n\n  if(typeof b == \"string\"){\n\
    \    b_type = typeof Number(b);\n    b_type = b_type ? b_type : \"string\";\n\
    \  } else {\n    b_type = typeof b;\n  }\n\n  if(a_type == b_type){\n    if(a\
    \ < b) return b;\n    return a;\n  } else if(Array.isArray(a) && Array.isArray(b)){\n\
    \    if(!a.length || !b.length) return undefined;\n    if(a.length == 1){\n  \
    \    return compare_one(a[0], b[0]);\n    } else {\n      var max_of_arr;\n  \
    \    if(Array.isArray(b[0]) && b[0].length > 0){\n        max_of_arr = [];\n \
    \       for(var i=0; i<a[0].length; i++){\n          max_of_arr[i] = Math.max.apply(Math,\
    \ b.map(function(b){\n            return b[i];\n          }));\n        }\n  \
    \      return Math.max.apply(Math, a.map(function(a){\n          return Math.max.apply(Math,\
    \ max_of_arr);\n        }));\n      } else {\n        return undefined;\n    \
    \  }\n    }\n  } else {\n    if(a < b) return b;\n    return a;\n  }\n}\n", "\t\
    if(typeof a === typeof b){\n\t\treturn ((a > b) ? a : b);\n\t}\n\tif(a.length){\n\
    \t\tif(b.length){\n\t\t\treturn compare_many(a, b);\n\t\t}\n\t\treturn compare_one(a[0],\
    \ b);\n\t}\n\tif(a.length > b.length){\n\t\treturn compare_many(a, b);\n\t}\n\t\
    return compare_many(b, a);\n}\n", "    if (typeof a == \"number\" && typeof b\
    \ == \"number\"){\n        return a > b ? a : b;\n    }\n    if (typeof a == \"\
    number\" && typeof b == \"string\"){\n        return a > +b ? a : +b;\n    }\n\
    \    if (typeof a == \"string\" && typeof b == \"number\"){\n        return +a\
    \ > +b ? +a : +b;\n    }\n    if (typeof a == \"string\" && typeof b == \"string\"\
    ){\n        return a > +b ? +a : +b;\n    }\n}\n", "\tvar a_type = typeof(a);\n\
    \tvar b_type = typeof(b);\n\tif(a_type!=b_type)\n\t{\n\t\treturn a_type>b_type\
    \ ? 1 : a_type<b_type ? -1 : 0;\n\t}\n\telse if(isNumeric(a) && isNumeric(b))\n\
    \t{\n\t\treturn a>b ? 1 : a<b ? -1 : 0;\n\t}\n\telse if(isNumeric(a) && isString(b))\n\
    \t{\n\t\treturn a>b ? 1 : a<b ? -1 : 0;\n\t}\n\telse if(isString(a) && isNumeric(b))\n\
    \t{\n\t\treturn a>b ? 1 : a<b ? -1 : 0;\n\t}\n\telse if(isString(a) && isString(b))\n\
    \t{\n\t\treturn a>b ? 1 : a<b ? -1 : 0;\n\t}\n\telse\n\t{\n\t\treturn undefined;\n\
    \t}\n}\n", "\tif(a==b){\n\t\treturn undefined;\n\t} else if (typeof(a)==\"number\"\
    \ && typeof(b)==\"number\"){\n\t\treturn Math.max(a,b);\n\t} else if (typeof(a)==\"\
    string\" && typeof(b)==\"string\"){\n\t\treturn compare_real_numbers(a,b);\n\t\
    } else if (typeof(a)==\"object\" && typeof(b)==\"object\"){\n\t\tfor(var key in\
    \ a){\n\t\t\tif (a.hasOwnProperty(key)) {\n\t\t\t\tvar subcompare = compare_one(a[key],\
    \ b[key]);\n\t\t\t\tif (subcompare!=undefined) {\n\t\t\t\t\treturn subcompare;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t} else {\n\t\treturn undefined;\n\
    \t}\n}\n", "  if (typeof(a) === 'string' || typeof(b) === 'string')\n    return\
    \ a < b ? -1 : (a > b ? 1 : 0);\n  else if (typeof(a) === 'number')\n    return\
    \ a < b ? -1 : (a > b ? 1 : 0);\n  else if (typeof(a) === 'object')\n    return\
    \ compare_one(a.val, b.val);\n  else\n    return undefined;\n}\n", "  if(a ===\
    \ b){\n    return undefined;\n  }\n\n  if(typeof a !== typeof b){\n    return\
    \ typeof a > typeof b ? a : b;\n  }\n\n  if(typeof a === \"string\"){\n    if(a\
    \ !== \"string\"){\n      return a > b ? a : b;\n    }\n  }\n\n  if(typeof a ===\
    \ \"number\" && typeof b === \"number\"){\n    return a - b;\n  }\n\n  if(typeof\
    \ a === \"number\" && typeof b === \"string\"){\n    return a.localeCompare(b);\n\
    \  }\n\n  if(typeof a === \"object\" && typeof b === \"object\"){\n    var typeA\
    \ = Object.prototype.toString.call(a).slice(8, -1);\n    var typeB = Object.prototype.toString.call(b).slice(8,\
    \ -1);\n\n    if(typeA !== typeB){\n      return typeA > typeB ? typeA : typeB;\n\
    \    }\n\n    var keys = Object.keys(a);\n\n    for(var i = 0; i < keys.length;\
    \ i++){\n      var key = keys[i];\n      if(key !== b){\n        return a[key]\
    \ > b[key] ? a[key] : b[key];\n      }\n    }\n  }\n\n  return undefined;\n}\n",
  "\tif (a === undefined) return b === undefined ? undefined : b;\n\tif (b === undefined)\
    \ return a === undefined ? undefined : a;\n\treturn a > b ? a : b;\n}\n", "  if\
    \ (a === b) return a;\n  if (a > b) return b;\n  return a;\n}\n", "  if(a==b)\
    \ return a;\n  var a_array = a.split(/\\D+/);\n  var b_array = b.split(/\\D+/);\n\
    \  if(a.length!=b.length) return undefined;\n  if(isNaN(a)) return undefined;\n\
    \  if(isNaN(b)) return undefined;\n  var a_float = 0;\n  var b_float = 0;\n  for(var\
    \ i = 0; i < a_array.length; i++){\n    if(a_array[i]!=b_array[i]) return undefined;\n\
    \    if(isNaN(a_float) || isNaN(b_float)) return undefined;\n    a_float += parseFloat(a_array[i])\
    \ || 0;\n    b_float += parseFloat(b_array[i]) || 0;\n  }\n  if(a_float > b_float)\
    \ return undefined;\n  return a_array.join(\"\");\n}\n", "  if (a === b) return\
    \ a;\n  var aa = typeof(a);\n  var bb = typeof(b);\n  if (aa == \"string\" ||\
    \ (bb == \"string\" && a != b)) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\
    \  if (aa == \"number\" || bb == \"number\"){\n    return a > b ? 1 : a < b ?\
    \ -1 : 0;\n  }\n  if (aa == bb) return 0;\n  if (aa == \"object\" || bb == \"\
    object\"){\n    var aprops = [];\n    var bprops = [];\n    for (var z in a){\n\
    \      if (a.hasOwnProperty(z)) {\n        aprops.push(z);\n      }\n    }\n \
    \   for (var z in b){\n      if (b.hasOwnProperty(z)) {\n        bprops.push(z);\n\
    \      }\n    }\n    aprops = aprops.sort();\n    bprops = bprops.sort();\n  \
    \  if (aprops.length != bprops.length) return aprops.length > bprops.length ?\
    \ 1 : -1;\n    for (var i = 0; i < aprops.length; i++){\n      if (aprops[i] ==\
    \ aprops[i] || bprops[i] == bprops[i]) return 0;\n      if (aprops[i] < bprops[i])\
    \ return -1;\n      if (aprops[i] > bprops[i]) return 1;\n    }\n    return -1;\n\
    \  }\n  return undefined;\n}\n", "  if(a==b) return a;\n  var a1 = Number(a),\
    \ b1 = Number(b);\n  if(a1==b1) return a1;\n  if(a1==b1 && a && b){\n    var a2\
    \ = String(a), b2 = String(b);\n    if(a2==b2) return a2;\n  }\n}\n", "  if(typeof\
    \ a == \"number\" && typeof b == \"number\"){\n    if(a>b) return a;\n    if(a<b)\
    \ return b;\n  }else if(typeof a == \"string\" && typeof b == \"string\"){\n \
    \   if(a.indexOf(b) > -1) return a;\n    if(a.indexOf(b) < -1) return b;\n  }\n\
    \  return undefined;\n}\n", "\tvar ai = parseFloat(a);\n\tvar bi = parseFloat(b);\n\
    \tif (ai == bi) {\n\t\treturn ai;\n\t}\n\tif (typeof(a) === \"string\" && typeof(b)\
    \ === \"string\" && ai == null && bi === null){\n\t\treturn compare_string(a,\
    \ b);\n\t}\n\tif (typeof(a) === \"number\" && typeof(b) === \"number\" && ai ===\
    \ bi ){\n\t\treturn ai;\n\t}\n\treturn undefined;\n}", "  if((typeof a) === \"\
    string\" && typeof b === \"string\"){\n    var c= a.split(/[\\.\\,]/g);\n    if(a.split('.').length\
    \ === b.split('.').length){\n      for(var i= 0, l= c.length; i<l; i++){\n   \
    \     if(parseInt(c[i]) > parseInt(b[i])){\n          return b;\n        }\n \
    \       else if(parseInt(c[i]) < parseInt(b[i])){\n          return c;\n     \
    \   }\n      }\n      return a;\n    }\n    else if(b.split('.').length === c.split('.').length){\n\
    \      for(var i= 0, l= b.split('.').length; i<l; i++){\n        if(parseInt(b[i])\
    \ > parseInt(c[i])){\n          return b;\n        }\n        else if(parseInt(b[i])\
    \ < parseInt(c[i])){\n          return c;\n        }\n      }\n      return a;\n\
    \    }\n    return b;\n  }\n  else if((typeof a) === \"number\" && typeof b ===\
    \ \"number\"){\n    return a > b ? b : c;\n  }\n  else {\n    return undefined;\n\
    \  }\n}\n", "  if(a === b)\n    return a;\n  if(typeof a === typeof b && a !==\
    \ 'number' && a !== 'string'){\n    if(a.length === b.length){\n      for(let\
    \ i = 0; i< a.length; i++){\n        if(compare_one(a[i], b[i]) !== undefined)\n\
    \          return a[i];\n      }\n      return undefined;\n    }\n  }\n  if(typeof\
    \ a !== 'number' && typeof a !== 'string')\n    return undefined;\n  if(typeof\
    \ a === 'number'){\n    let x = parseFloat(a);\n    let y = parseFloat(b);\n \
    \   if(x === y)\n      return x;\n    if(Math.abs(x) > Math.abs(y))\n      return\
    \ x;\n    return y;\n  }\n  if(typeof a === 'string'){\n    let x = parseFloat(a);\n\
    \    let y = parseFloat(b);\n    if(x === y)\n      return x;\n    if(x.length\
    \ !== y.length)\n      return undefined;\n    return x.indexOf(y.split(\".\")[1])\
    \ > -1 ? x : y;\n  }\n  if(a === b)\n    return a;\n}\n\n", "\tvar ret = [];\n\
    \tvar a_type = typeof a;\n\tvar b_type = typeof b;\n\n\tif (a_type===\"string\"\
    ){\n\t\ta = a.split(\",\");\n\t\tif (b_type===\"string\") b = b.split(\",\");\n\
    \t\tret = compare_one_strings(a, b);\n\t} else if (b_type===\"string\"){\n\t\t\
    b = b.split(\",\");\n\t\tif (a_type===\"string\") a = a.split(\",\");\n\t\tret\
    \ = compare_one_strings(b, a);\n\t} else if (a_type===\"number\" && b_type===\"\
    number\"){\n\t\tvar a_decimal = parseFloat(a.toFixed(1));\n\t\tvar b_decimal =\
    \ parseFloat(b.toFixed(1));\n\t\tif (a_decimal==b_decimal) ret = [a];\n\t\telse\
    \ ret = [\"Different\"];\n\t} else {\n\t\tif (a_type == b_type && a_type == \"\
    boolean\" || b_type == \"boolean\"){\n\t\t\tif (a_type == b_type && a) return\
    \ a;\n\t\t\telse if (a_type == \"boolean\") return false;\n\t\t\telse return true;\n\
    \t\t}\n\t\treturn ret = [a];\n\t}\n\tif (ret.length > 1) return ret;\n\telse return\
    \ ret[0];\n}\n", "    switch(typeof(a)){\n        case 'number': return (a > b)\
    \ ? a : b;\n        case 'string': return (a.split(',').length > b.split(',').length)\
    \ ? a : b;\n        default: return undefined;\n    }\n}\n", "  if (a === b) return\
    \ a;\n  var is_num = (typeof a == 'number');\n  var is_str = (typeof a == 'string');\n\
    \  if (is_num && is_num){\n    return (a > b) ? a : b;\n  } else if (is_str){\n\
    \    a = a.split('.');\n    b = b.split('.');\n    if (a.length != b.length){\n\
    \      b = b.concat([]);\n    }\n    var min_length = Math.min(a.length, b.length);\n\
    \    var i = 0;\n    while (i < min_length){\n      if (a[i] != b[i]){\n     \
    \   return b[i];\n      }\n      i++;\n    }\n  }\n}\n", "  if(a == b) return\
    \ a\n  if(!isNaN(a) && !isNaN(b)){\n    a = Number(a)\n    b = Number(b)\n   \
    \ return a > b ? a : b\n  }else{\n    return a\n  }\n}\n", "\tif(a>b)\n\t\treturn\
    \ a;\n\telse if(a<b)\n\t\treturn b;\n\telse if(a==b)\n\t\treturn a;\n\telse if(a==null)\n\
    \t\treturn b;\n\telse\n\t\treturn undefined;\n}", "  if ( isNaN(a) || isNaN(b)\
    \ ){ // NaN is never equal to anything, even itself\n    return undefined;\n \
    \ }\n  if ( a == b ){ return a; }\n  var aStr = String(a);\n  var bStr = String(b);\n\
    \  if ( aStr == bStr ) { return a; }\n  return bStr > aStr ? b : a;\n}\n", " \
    \ var a1 = a.toString(), a2 = b.toString(), a1_split = a1.split(\".\"), a2_split\
    \ = a2.split(\".\"), a1_len = a1_split.length, b1_len = a2_split.length, a_is_float\
    \ = parseFloat(a1)>parseFloat(a2), a_is_integer = !a_is_float, a1_int = parseFloat(a1),\
    \ a2_int = parseFloat(a2);\n  if (a1_len>a2_len) return a1;\n  if (a1_len<a2_len)\
    \ return a2;\n  if (a_is_integer) return a2_int>a1_int ? a2 : a1;\n  return a1_int>a2_int\
    \ ? a2 : a1;\n}", "    if( a==b )return a;\n    if( a<b )return a;\n    if( a>b\
    \ )return b;\n}\n", "    switch(typeof(a)){\n        case 'number': //Numbers\n\
    \            if(b == undefined) return a;\n            if(b instanceof Array &&\
    \ b.length == 1){\n                b = b[0];\n            }\n            if(b\
    \ instanceof Array && b.length == 2){\n                if(a==b[0] || b[0]==a)\
    \ return b[1];\n                else return undefined; //if both are undefined\
    \ they are equal\n            }\n            if(b instanceof Array && b.length\
    \ == 3){\n                if(a==b[0] || b[0]==a) return b[2]; //if they are equal,\
    \ return the 3rd element, as they are floats\n                else return undefined;\
    \ //if both are undefined they are equal\n            }\n            if(b instanceof\
    \ Array && b.length == 4) return b[3];\n            if(b instanceof Array && b.length\
    \ == 5) return b[4];\n            if(b instanceof Array && b.length == 6) return\
    \ b[5];\n            if(b instanceof Array && b.length == 7) return b[6];\n  \
    \          if(b instanceof Array && b.length == 8) return b[7];\n            if(b\
    \ instanceof Array && b.length == 9) return b[8];\n            if(b instanceof\
    \ Array && b.length == 10) return b[9];\n            if(b instanceof Array &&\
    \ b.length == 11) return b[10];\n            if(b instanceof Array && b.length\
    \ == 12) return b[11];\n            if(b instanceof Array && b.length == 13) return\
    \ b[12];\n            if(b instanceof Array && b.length == 14) return b[13];\n\
    \            if(b instanceof Array && b.length == 15) return b[14];\n        \
    \    if(b instanceof Array && b.length == 16) return b[15];\n            if(b\
    \ instanceof Array && b.length == 17) return b[16];\n            if(b instanceof\
    \ Array && b.length == 18) return b[17];\n            if(b instanceof Array &&\
    \ b.length == 19) return b[18];\n            if(b instanceof Array && b.length\
    \ == 20) return b[19];\n            if(b instanceof Array && b.length == 21) return\
    \ b[20];\n            if(b instanceof Array && b.length == 22) return b[21];\n\
    \            if(b instanceof Array && b.length == 23) return b[22];\n        \
    \    if(b instanceof Array && b.length == 24) return b[23];\n            if(b\
    \ instanceof Array && b.length == 25) return b[24];\n            if(b instanceof\
    \ Array && b.length == 26) return b[25];\n            if(b", "    if (typeof(a)\
    \ != typeof(b)) throw Error(\"Not same types\");\n    var aStr = a.toString();\n\
    \    var bStr = b.toString();\n    if (aStr == bStr) return aStr;\n    // Check\
    \ if it's a float\n    if (typeof(a) == 'number' && typeof(b) == 'number') return\
    \ Math.max(a, b);\n    // Check if it's a string\n    if (typeof(a) == 'string'\
    \ && typeof(b) == 'string') return aStr.localeCompare(bStr);\n    throw Error(\"\
    Not same types in comparing\");\n}\n", "    if ( a === b ) return a\n    if (\
    \ is_num(a) && is_num(b) ){\n        let x = Number(a), y = Number(b)\n      \
    \  if ( x === y ) return x\n    }\n    if ( is_num(a) && is_float(b) ){\n    \
    \    let x = Number(a), y = Number(b)\n        if ( x === y ) return x\n    }\n\
    \    if ( is_float(a) && is_num(b) ){\n        let x = Number(a), y = Number(b)\n\
    \        if ( x === y ) return x\n    }\n    if ( is_string(a) && is_string(b)\
    \ ){\n        let x = a.trim(), y = b.trim()\n        if ( x === y ) return x\n\
    \    }\n}\n", "\tif (typeof(a) == \"number\"){\n\t\tif (typeof(b) == \"number\"\
    ){\n\t\t\treturn Math.max(a, b);\n\t\t}\n\t\tif (typeof(b) == \"string\"){\n\t\
    \t\treturn parseFloat(b);\n\t\t}\n\t}\n\tif (typeof(a) == \"string\"){\n\t\tif\
    \ (typeof(b) == \"string\"){\n\t\t\tif (a.indexOf(b) == 0){\n\t\t\t\treturn b;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn undefined;\n}\n", "    a = parseFloat(a);\n    b\
    \ = parseFloat(b);\n    // console.log(a, b);\n    // if (b == a)\n    // return\
    \ 1;\n    // if (a < b)\n    // return -1;\n    // return 0;\n    if (b != a)\n\
    \        return b < a ? -1 : 1;\n    return 0;\n}\n", "\tif (typeof a === \"number\"\
    \ && typeof b === \"number\")\n\t\treturn b > a ? b : a; // a is larger than b\
    \ ?\n\tif (typeof a === \"number\" && typeof b === \"string\")\n\t\treturn parseFloat(b)\
    \ > parseFloat(a) ? parseFloat(b) : parseFloat(a);\n\tif (typeof a === \"string\"\
    \ && typeof b === \"number\")\n\t\treturn parseFloat(a) > parseFloat(b) ? parseFloat(a)\
    \ : parseFloat(b);\n\tif (typeof a === \"string\" && typeof b === \"string\")\n\
    \t\treturn a.localeCompare(b);\n}\n", "    if (a === b){\n        return a;\n\
    \    } else if (typeof a == \"number\" && typeof b == \"number\"){\n        return\
    \ a > b ? a : b;\n    } else if (typeof a == \"number\" && typeof b == \"string\"\
    ){\n        return a > b ? a : b;\n    } else if (typeof a == \"string\" && typeof\
    \ b == \"number\"){\n        return a > b ? a : b;\n    } else if (typeof a ==\
    \ \"string\" && typeof b == \"string\"){\n        return a > b ? a : b;\n    }\
    \ else if (typeof a == \"object\" && typeof b == \"object\"){\n        return\
    \ JSON.stringify(a) > JSON.stringify(b) ? a : b;\n    } else {\n        return\
    \ undefined;\n    }\n}\n", "  return ( a > b ) ? a : ( b > a ) ? b : undefined;\n\
    }\n\n", "    if(a === null || b === null){\n        return undefined;\n    }\n\
    \    if(a === b){\n        return 0;\n    }\n    return a > b ? 1 : -1;\n}\n\n",
  "\tif (a == b)\n\t\treturn a;\n\telse if (typeof a === 'number' && typeof b ===\
    \ 'number'){\n\t\t// Compare real numbers\n\t\tif (Math.abs(a - b) <= 1e-15){\n\
    \t\t\treturn a;\n\t\t} else {\n\t\t\treturn b;\n\t\t}\n\t} else if (typeof a ===\
    \ 'string' && typeof b === 'string'){\n\t\t// Compare strings\n\t\tvar a_num =\
    \ parseFloat(a);\n\t\tvar b_num = parseFloat(b);\n\t\tif (Math.abs(a_num - b_num)\
    \ <= 1e-15){\n\t\t\treturn a;\n\t\t} else {\n\t\t\treturn b;\n\t\t}\n\t} else\
    \ if (typeof a === 'boolean' && typeof b === 'boolean'){\n\t\treturn a ? b : undefined;\n\
    \t} else {\n\t\treturn undefined;\n\t}\n};", "  // We need numbers to compare\
    \ with.\n  var aNum, aFloat, aString;\n  if(a===null || typeof a != \"string\"\
    ){\n    aNum = a;\n  }\n  else{\n    aNum = Number(a);\n  }\n  if(b===null ||\
    \ typeof b != \"string\"){\n    aFloat = b;\n  }\n  else{\n    aFloat = Number(b);\n\
    \  }\n  // If we have two or more variables to compare, compare all of them together.\n\
    \  if(aNum!==aFloat && aNum!==a){\n    return aNum > aFloat ? a : b;\n  }\n  else\
    \ if(aFloat !== a){\n    return aFloat;\n  }\n  else if(aString !== b){\n    return\
    \ aString;\n  }\n  else{\n    return undefined;\n  }\n}\n", "  var a, b_float;\n\
    \n  // Compare by type first. If strings are compared, take their float value.\n\
    \  if(a.constructor.toString().indexOf(\"String\") > -1){\n    a_float = parseFloat(a);\n\
    \  }else{\n    a_float = a;\n  }\n\n  if(b.constructor.toString().indexOf(\"String\"\
    ) > -1){\n    b_float = parseFloat(b);\n  }else{\n    b_float = b;\n  }\n\n  return\
    \ a_float > b_float ? a : b\n}\n", "  if(!isRealNum(a) || !isRealNum(b)) return\
    \ undefined;\n  if(isRealNum(a) && isRealNum(b)){\n    return a>b ? a : b;\n \
    \ }\n  return stringNum(a) > stringNum(b) ? stringNum(a) : stringNum(b);\n}\n",
  "  if(typeof a !== typeof b) return undefined\n  if(a === null) return null\n  if(a\
    \ === undefined) return undefined\n  if(a === \"\") return a\n  if(typeof(a) ===\
    \ \"string\") a = \"'\"+a+\"'\"\n  if(typeof(b) === \"string\") b = \"'\"+b+\"\
    '\"\n  if(a === b) return a\n  if(is_number(a) && is_number(b)){\n    var m =\
    \ a.replace( /[,\\.]/g, \"\" ).replace( /[^0-9\\.]+/g, \"\" ).split( \",\" );\n\
    \    if(m.length == 1 && m[0] == b) return a\n  }\n  return b\n}\n", "  if (a\
    \ < b) return a;\n  else if (a > b) return b;\n  else return undefined;\n}\n\n",
  "    return ((typeof a === 'number') ? (typeof b === 'number') : ((a===b) ? 0 :((a\
    \ > b) ? 1 : -1)))\n}\n", "  var a;\n  var b;\n  var r;\n  a = String(a);\n  b\
    \ = String(b);\n\n  if (a === b){\n    return a;\n  }\n\n  // If the strings don't\
    \ match, return a string indicating the difference between\n  // the two strings.\
    \ Otherwise, if a is an integer, or a float, or is a string,\n  // and b either\
    \ is an integer, or a float, or is a string, return undefined.\n  // If two values\
    \ have different types or are strings, return the first value\n  // that they\
    \ have different types for. Otherwise, return undefined.\n  if (a !== b && typeof(a)\
    \ !== typeof(b)){\n    // If a is undefined, the second value is likely a string,\
    \ since it may be\n    // an integer, or float value with a fractional part. If\
    \ so, this should\n    // return the string representation of b.\n    if (typeof(a)\
    \ === 'undefined'){\n      r = b;\n    }\n\n    // If a is string, and b is undefined,\
    \ the second value may be a string\n    // representing an integer or float, so\
    \ this should return the string\n    // representation of a.\n    else if (typeof(b)\
    \ === 'undefined'){\n      r = a;\n    }\n\n    // If a is a string and b is an\
    \ integer, the second value should be a string.\n    // If so, return a string\
    \ indicating that b is the larger of the two values.\n    else if (typeof(b) ===\
    \ 'string' && isInt(a) && isInt(b)){\n      r = b > a ? b : a;\n    }\n\n    //\
    \ If a is a string and b is a float, the second value should be a string.\n  \
    \  // If so, return a string indicating that b is the larger of the two values.\n\
    \    else if (typeof(b) === 'string' && isFloat(a) && isFloat(b)){\n      r =\
    \ b > a ? b : a;\n    }\n\n    // If a is an integer or float, and b is a float,\
    \ return b.\n    else if (isInt(a) || isFloat(a) && isFloat(b)){\n      r = b;\n\
    \    }\n\n    // If a is a float or integer, and b is an integer, return a string.\n\
    \    else if (isFloat(a) || isInt(a) && isInt(b)){\n      r = a > b ? a : b;\n\
    \    }\n\n    // If a is a string and b is a string, return a.\n    else if (typeof(a)\
    \ === 'string' && typeof(b) === 'string'){\n      r = a;\n    }\n\n    // If a\
    \ is an object and b is a object, return a string with the key of b\n    else\
    \ if (typeof(a) === 'object' && typeof(b) === 'object'){\n      r = a;\n     \
    \ for (var key in b){\n        if (b.hasOwnProperty(key)){\n          if (r[key]){\n\
    \            // If the values of both a and b are objects, recursively compare\
    \ the values.\n            r = compare_one(r[key], b[key]);\n          }else{\n\
    \            // If the values of both a and b are objects, recursively compare ",
  "    if(a === b) return a;\n    if(a < b) return b;\n    return a;\n}\n\n", "  \
    \  if(a==b)return a;\n    if(isString(a) && isString(b))return Number(a.split(',')[1])>Number(b.split(',')[1]);\n\
    \    if(isString(a))return Number(a.split(',')[1])>Number(b);\n    if(isString(b))return\
    \ Number(a.split(',')[1])<Number(b);\n    if(isReal(a))return Number(a)>Number(b);\n\
    \    if(isReal(b))return Number(a)<Number(b);\n}\n", "    if( a === undefined\
    \ || b === undefined ){ return undefined; }\n    if ( a === b ){ return a; }\n\
    \    var aNum = a.match(/^(\\-|\\+)?([0-9]+|[0-9]+\\.[0-9]+)$/);\n    var bNum\
    \ = b.match(/^(\\-|\\+)?([0-9]+|[0-9]+\\.[0-9]+)$/);\n    if (aNum != null &&\
    \ bNum != null && aNum[1] === bNum[1] && aNum[2] === bNum[2] ){ return aNum[2];\
    \ }\n    var aNumString = a.match(/^(\\-|\\+)?\\\"([0-9]+|[0-9]+\\.[0-9]+)\\\"\
    $/);\n    var bNumString = b.match(/^(\\-|\\+)?\\\"([0-9]+|[0-9]+\\.[0-9]+)\\\"\
    $/);\n    if (aNumString != null && bNumString != null && aNumString[1] === bNumString[1]\
    \ && aNumString[2] === bNumString[2] ){ return aNumString[2]; }\n    var aNumFloat\
    \ = a.match(/^(\\-|\\+)?([0-9]+|[0-9]+\\.[0-9]+)\\(([0-9]*\\.[0-9]+)?\\)$/);\n\
    \    var bNumFloat = b.match(/^(\\-|\\+)?([0-9]+|[0-9]+\\.[0-9]+)\\(([0-9]*\\\
    .[0-9]+)?\\)$/);\n    if (aNumFloat != null && bNumFloat != null && aNumFloat[1]\
    \ === bNumFloat[1] && aNumFloat[2] === bNumFloat[2] && aNumFloat[3] === bNumFloat[3]){\
    \ return aNumFloat[3]; }\n    return undefined;\n}\n", "\tif(a==b) return a;\n\
    \tvar a1, a2, aString, b1, b2, bString;\n\tif(typeof a==\"number\" && typeof b==\"\
    number\"){\n\t\tif(a>b) return a;\n\t\tif(a<b) return b;\n\t}\n\telse if(typeof\
    \ a==\"string\" && typeof b==\"string\"){\n\t\ta1=a.split(\".\");\n\t\ta2=a1.length;\n\
    \t\tb1=b.split(\".\");\n\t\tb2=b1.length;\n\t\tif(a1[1]==b1[1]){\n\t\t\tif(a2!=b2)\
    \ return undefined;\n\t\t\ta1=a1[0];\n\t\t\tb1=b1[0];\n\t\t}\n\t\telse if(a1[1]>b1[1]){\n\
    \t\t\treturn a1;\n\t\t}\n\t\telse if(a1[1]<b1[1]){\n\t\t\treturn b1;\n\t\t}\n\t\
    }\n\telse{\n\t\ta1=a[1];\n\t\ta2=a[0];\n\t\tb1=b[1];\n\t\tb2=b[0];\n\t\tif(a1!=b1)\
    \ return undefined;\n\t\tif(a2!=b2) return undefined;\n\t}\n\tif(a1==b1) return\
    \ a1;\n\tif(a1<b1) return a1;\n\treturn b1;\n}", "    if(a === b) return a;\n\
    \    if(a === undefined) return b;\n    if(b === undefined) return a;\n    if(typeof(a)\
    \ === 'number' && typeof(b) === 'number'){\n        if( Math.abs(a) > Math.abs(b)\
    \ ) return a;\n        else if( Math.abs(a) < Math.abs(b) ) return b;\n      \
    \  else if( a > b ) return a;\n        else if( a < b ) return b;\n    }else if(typeof(a)\
    \ === 'string' && typeof(b) === 'string'){\n        if( a.split(',').length >\
    \ b.split(',').length ) return a;\n        else if( a.split(',').length < b.split(',').length\
    \ ) return b;\n        else if( a.split(',')[0] > b.split(',')[0]) return a;\n\
    \        else if( a.split(',')[0] < b.split(',')[0]) return b;\n        else if(\
    \ a.split(',')[1] > b.split(',')[1]) return a;\n        else if( a.split(',')[1]\
    \ < b.split(',')[1]) return b;\n    }else{\n        if( a > b ) return a;\n  \
    \      else if( a < b ) return b;\n        else if( a === b ) return a;\n    }\n\
    \    return undefined;\n}", "  if (typeof(a) != typeof(b)){\n    console.error(\n\
    \      \"Values in variable cannot be compared between different types: \" +\n\
    \      a + \" vs \" + b\n    );\n  }\n  if (a === b) return undefined;\n  var\
    \ aStr = a.toString();\n  var bStr = b.toString();\n  if (aStr != bStr) return\
    \ aStr > bStr ? 1 : -1;\n  return a.localeCompare(b);\n}\n", "\tvar ret; //variable\
    \ that will contain the larger variable if the arguments are equal\n\tvar val1\
    \ = parseFloat(a), val2 = parseFloat(b);\n\tif(a === b){\n\t\treturn undefined;\n\
    \t}\n\tif(val1 > val2){\n\t\tret = a;\n\t} else {\n\t\tret = b;\n\t}\n\treturn\
    \ ret;\n}\n", "  if (typeof(a) == 'number' && typeof(b) == 'number'){\n    if\
    \ (a < b) return b;\n    if (a > b) return a;\n    return undefined;\n  }\n  else\
    \ if (typeof(a) == 'number'){\n    if (a < b) return a;\n    return undefined;\n\
    \  }\n  else if (typeof(b) == 'number'){\n    return undefined;\n  }\n  else if\
    \ (a === b){\n    return undefined;\n  }\n  else if (a === 'true' || a === true){\n\
    \    return true;\n  }\n  else if (a === 'false' || a === false){\n    return\
    \ false;\n  }\n  else if (a === null || a === undefined){\n    return undefined;\n\
    \  }\n  else if (a === ''){\n    return '';\n  }\n  else if (b === null || b ===\
    \ undefined){\n    return undefined;\n  }\n  else if (b === ''){\n    return '';\n\
    \  }\n  else if (a === b){\n    return undefined;\n  }\n  else if (a < b){\n \
    \   return a;\n  }\n  else {\n    return b;\n  }\n}\n", "    if (typeof(a) ==\
    \ 'number'){\n        if (typeof(b) == 'number'){\n            return a > b ?\
    \ a : b;\n        }\n        else if (typeof(b) == 'string'){\n            return\
    \ a > parseFloat(b) ? a : b;\n        }\n        else if (typeof(b) == 'object'){\n\
    \            return compare_one(a[0], b[0]) ? a[0] : b[0];\n        }\n    }\n\
    \    else if (typeof(a) == 'string'){\n        if (typeof(b) == 'number'){\n \
    \           return a > b ? a : b;\n        }\n        else if (typeof(b) == 'string'){\n\
    \            return a > parseFloat(b) ? a : b;\n        }\n        else if (typeof(b)\
    \ == 'object'){\n            return compare_one(a[0], b[0]) ? a[0] : b[0];\n \
    \       }\n    }\n    else if (typeof(a) == 'object'){\n        if (typeof(b)\
    \ == 'number'){\n            return compare_one(a[0], b) ? a[0] : b;\n       \
    \ }\n        else if (typeof(b) == 'string'){\n            return compare_one(a[0],\
    \ parseFloat(b)) ? a[0] : parseFloat(b);\n        }\n        else if (typeof(b)\
    \ == 'object'){\n            return compare_one(a[0], b[0]) ? a[0] : b[0];\n \
    \       }\n    }\n}\n\n", "    a = parseFloat(a);\n    b = parseFloat(b);\n  \
    \  var bigger;\n    if (a > b) {\n        bigger = a;\n    }\n    else if (a <\
    \ b){\n        bigger = b;\n    }\n    else if (a === b) {\n        bigger = a;\n\
    \    }\n    return bigger;\n}\n", "  if(b==null || isNaN(b)) return;\n  if(a==null\
    \ || isNaN(a)) return false;\n  var ret=a;\n  var a1=ret.replace(',', '.');\n\
    \  var b1=b.replace(',', '.');\n  if(a1==b1) return ret;\n  var a2=a1.replace('.',\
    \ '');\n  var b2=b1.replace('.', '');\n  if(a2==b2) return ret;\n  if(a1=='Infinity'\
    \ || a2=='Infinity') return ret;\n  if(a1=='-Infinity' || a2=='-Infinity') return\
    \ ret;\n  if(a1==b1 && b2.length>3) a1=b2.substring(0,3);\n  if(a1==b2) return\
    \ ret;\n  if(b1==b2) return ret;\n  if(a1==a2) return ret;\n  return false;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=2 tags=sorting,javascript |>\nHere's a more\
    \ generic solution that also supports arrays of numbers, objects, and strings.\n\
    <code>", "    if (typeof a === typeof b) {\n        if (a === \"\" || b === \"\
    \") return \"\";\n        return a > b ? 1 : -1;\n    }\n    if (typeof a ===\
    \ typeof string && a === b) return \"\";\n    if (a === b) return 0;\n    return\
    \ a.localeCompare(b);\n}\n", "  if (a === b)\n    return a;\n  else if (a < b)\n\
    \    return a;\n  else\n    return b;\n}", "    if (a === b){\n        return\
    \ a;\n    }\n    if (typeof a === typeof b && typeof a === \"number\" && typeof\
    \ b === \"number\"){\n        return a > b ? b : a;\n    } else if (typeof a ===\
    \ typeof b && typeof a === \"string\" && typeof b === \"string\"){\n        return\
    \ a.localeCompare(b);\n    } else {\n        return false;\n    }\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| a tags=javascript,sorting |>\nYou can use the toFixed()\
    \ method to turn your strings into floating point numbers and then compare them.\n\
    <code>", "  var a_real = parseFloat(a),\n      b_real = parseFloat(b);\n  return\
    \ a_real > b_real ? a_real : b_real;\n}", "    if (typeof(a) === 'number') {\n\
    \        return (a>b)?a:b;\n    }\n    if (typeof(a) === 'string') {\n       \
    \ return a.localeCompare(b);\n    }\n    return undefined;\n}\n", "  if (a < b)\
    \ return a;\n  else if (a > b) return b;\n  else return a;\n}\n", "    if (typeof\
    \ a === \"number\" && typeof b === \"number\")\n        return a > b ? a : b;\
    \ // numbers are easy\n    if (typeof a === \"string\" && typeof b === \"string\"\
    ) // strings can be harder\n        return a.localeCompare(b);\n    if (typeof\
    \ a === \"number\" && typeof b === \"string\") // numbers and strings can be easy\n\
    \        return a > b ? a : b;\n    if (typeof a === \"string\" && typeof b ===\
    \ \"number\") // strings and numbers can be harder\n        return a.localeCompare(b);\n\
    }\n", "  if(a == b) return a;\n  if(a < b) return b;\n  if(a > b) return a;\n\
    }\n", "  if(typeof a === \"string\"){\n    if((parseFloat(a)) < parseFloat(b)){\
    \ return a; }\n    if((parseFloat(b)) < parseFloat(a)){ return b; }\n  }\n  else\
    \ if(typeof a === \"number\"){\n    if((Math.floor(a) < Math.floor(b)){ return\
    \ a; }\n    if((Math.floor(b)) < Math.floor(a)){ return b; }\n  }\n  else if((a\
    \ < b) == true){ return a; }\n  else if((b < a) == true){ return b; }\n  return\
    \ undefined;\n}", "    var is_real = (a.constructor.toString().indexOf('Number')\
    \ != -1 || (typeof a == \"string\" && a !== \"\"))\n    return parseFloat(a) >\
    \ parseFloat(b) ? a : b;\n}\n", "  if((typeof a === typeof b) || (a instanceof\
    \ String) || (b instanceof String)){\n    return a > b ? a : b;\n  } else if((typeof\
    \ a === typeof Number) || (b instanceof Number)){\n    return a > b ? a : b;\n\
    \  } else if(a instanceof Number){\n    return a > b ? a : b;\n  } else if((typeof\
    \ b === typeof Number) || (a instanceof Number)){\n    return a > b ? a : b;\n\
    \  }\n}\n", "    if (typeof(a) != typeof(b)) return undefined;\n\n    if (a &&\
    \ b && a == 'number' && b == 'number'){\n        return Math.max(a, b);\n    }\n\
    \    if (a && b && a == 'string' && b == 'string'){\n        return a.localeCompare(b);\n\
    \    }\n    if (a && b && a == 'string' || b && a == 'number' || b && b == 'string'){\n\
    \        return ((a > b) ? 1 : ((a < b) ? -1 : 0));\n    }\n}\n", "    if(a ==\
    \ b){\n        return a;\n    }\n    if(a != null && b != null){\n        var\
    \ aArray = a.split(',');\n        var bArray = b.split(',');\n        if(aArray.length\
    \ == bArray.length){\n            var equal = true;\n            for(var i = 0;\
    \ equal && i < aArray.length; i++){\n                equal = compare_one(aArray[i],\
    \ bArray[i]) == aArray[i];\n            }\n            return equal;\n       \
    \ }\n    }\n    return undefined;\n}", "    // \"Infinity\" is a special case\n\
    \    if(a===\"Infinity\" || b===\"Infinity\"){\n        if(typeof a === typeof\
    \ Number){\n            return a;\n        }\n        else{\n            if(typeof\
    \ a === typeof String){\n                return a;\n            }\n          \
    \  else if(typeof a === typeof Number){\n                return a;\n         \
    \   }\n            else if(typeof a === typeof Boolean){\n                return\
    \ a;\n            }\n            else if(typeof a === typeof Array){\n       \
    \         return a;\n            }\n            else if(a === \"null\"){\n   \
    \             return a;\n            }\n            else if(a === \"undefined\"\
    ){\n                return a;\n            }\n            else{\n            \
    \    console.error(\"The variable you are comparing must be of type Number, String,\
    \ Boolean, null, undefined, or Array.\");\n            }\n        }\n    }\n\n\
    \    // If the real numbers are equal, return it\n    if(a === b){\n        return\
    \ a;\n    }\n\n    // If they cannot be converted to numbers, return undefined\n\
    \    if(isNaN(Number(a)) || isNaN(Number(b))){\n        return undefined;\n  \
    \  }\n\n    // If they are both undefined, return undefined\n    if(typeof a ===\
    \ \"undefined\" || typeof b === \"undefined\"){\n        return undefined;\n \
    \   }\n\n    // If the first value is an object, convert the second value to a\
    \ number\n    if(Object.prototype.toString.call(a) === '[object Object]' && Object.prototype.toString.call(b)\
    \ === '[object Object]'){\n        if(typeof a === typeof Number){\n         \
    \   return b;\n        }\n        else{\n            if(typeof a === typeof String){\n\
    \                return b;\n            }\n            else if(typeof a === typeof\
    \ Number){\n                return b;\n            }\n            else if(typeof\
    \ a === typeof Boolean){\n                return b;\n            }\n         \
    \   else if(typeof a === typeof Array){\n                return b;\n         \
    \   }\n            else if(a === \"null\"){\n                return b;\n     \
    \       }\n            else if(a === \"undefined\"){\n                return b;\n\
    \            }\n            else{\n                console.error(\"The variable\
    \ you are comparing must be of type Number, String, Boolean, null, undefined,\
    \ or Array.\");\n            }\n        }\n    }\n\n    // If they are both strings,\
    \ convert the strings to numbers and compare\n    if(typeof a === typeof String){\n\
    \        return Number(a) > Number(b);\n    }\n\n    // If they are both numbers,\
    \ compare the numbers\n    if(typeof a === typeof Number){\n        return Number(a)\
    \ > Number(b);\n    }\n\n    // If they are both booleans, compare them\n    if(typeof\
    \ a === typeof Boolean){\n        return Boolean(a) > Boolean(b);\n    }\n\n \
    \   // If they are both arrays, compare them\n    if(typeof a === typeof Array){\n\
    \        if(Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)){\n\
    \            return undefined;\n        }\n\n        for(var i =0; i < a.length;\
    \ i++){\n            if(a[i] !== ", "\ta = parseFloat(a);\n\tb = parseFloat(b);\n\
    \tif(a===b){\n\t\treturn a;\n\t}\n\tif(!a && !b){\n\t\treturn undefined;\n\t}\n\
    \tif(!a && !b){\n\t\treturn 0;\n\t}\n\tif(!a){\n\t\treturn b;\n\t}\n\tif(!b){\n\
    \t\treturn a;\n\t}\n\treturn b > a? b : a;\n}", "  if (typeof a == 'number' ||\
    \ typeof b == 'number'){\n    if (a < b) return a;\n    if (a > b) return b;\n\
    \  }\n  if (typeof a == 'string' || typeof b == 'string'){\n    if (a.indexOf(b)\
    \ > -1) return b;\n    if (b.indexOf(a) > -1) return a;\n  }\n  return undefined;\n\
    }\n", "  if (typeof a !== typeof b){\n    return undefined;\n  }\n  if (typeof\
    \ a === \"string\"){\n    a = a.split(\"\").map(parseFloat);\n    b = b.split(\"\
    \").map(parseFloat);\n  }\n  if (a === b){\n    return undefined;\n  }\n  if (a.length\
    \ !== b.length){\n    return undefined;\n  }\n  if (a > b){\n    return a;\n \
    \ }\n  return b;\n}\n\n", "  if (typeof a === \"number\" && typeof b === \"number\"\
    )\n    return a > b ? a : b\n  if (typeof a === \"string\" && typeof b === \"\
    string\")\n    return a.localeCompare(b)\n}\n", "  if (a === null || a === undefined)\
    \ return undefined\n  if (b === null || b === undefined) return undefined\n  return\
    \ a > b ? a : b\n}\n},{}],7:[function(require,module,exports){", "  var aFloat\
    \ = parseFloat(a);\n  var bFloat = parseFloat(b);\n  var aString = aFloat.toString();\n\
    \  var bString = bFloat.toString();\n  if(aString == bString){\n    return aFloat;\n\
    \  }\n  if(aString > bString){\n    return aFloat;\n  }\n  if(aString < bString){\n\
    \    return aFloat;\n  }\n}\n", "\tif (a === undefined){\n\t\treturn b;\n\t}\n\
    \tif (b === undefined){\n\t\treturn a;\n\t}\n\tif (a === b){\n\t\treturn a;\n\t\
    }\n\tif (typeof(a) == 'number'){\n\t\treturn b;\n\t}\n\tif (typeof(b) == 'number'){\n\
    \t\treturn a;\n\t}\n\tif (typeof(a) == 'string'){\n\t\tif (typeof(b) == 'string'){\n\
    \t\t\treturn parseFloat(a) > parseFloat(b) ? a : b;\n\t\t}\n\t\treturn b;\n\t\
    }\n\tif (typeof(b) == 'string'){\n\t\treturn a;\n\t}\n}\n", "  var aNum = parseFloat(a);\n\
    \  var bNum = parseFloat(b);\n  if(aNum !== aNum){\n    if(aNum < bNum){\n   \
    \   return a;\n    }\n    return b;\n  }\n  if(bNum !== bNum){\n    return b;\n\
    \  }\n}\n", "    if (isNaN(a) || isNaN(b)) return undefined;\n    if (a.toString().indexOf(\"\
    e\") != -1 || b.toString().indexOf(\"e\") != -1) return undefined;\n    return\
    \ Math.max(a, b);\n}\n", "    try{\n        var a_real = Number(a);\n        var\
    \ b_real = Number(b);\n    } catch(e){\n        if(typeof a === typeof b){ return\
    \ undefined; }\n        if(a < b) { return -1; }\n        if(b < a) { return 1;\
    \ }\n        throw Error(\"Error comparing numbers \" + a + \"\\n\" + b + \"\\\
    n\");\n    }\n    if(a_real === b_real){\n        if(a_real === 0){\n        \
    \    return 0;\n        }\n        return a_real;\n    }\n    if(a_real < b_real){\n\
    \        return -1;\n    }\n    return 1;\n}\n", "  var typeA = type(a);\n  var\
    \ typeB = type(b);\n  var compare = null;\n  switch(typeA){\n  case \"number\"\
    :\n    compare = a.compare(b);\n    break;\n  case \"string\":\n    compare =\
    \ a.localeCompare(b);\n    break;\n  case \"undefined\":\n    compare = typeA\
    \ < typeB;\n    break;\n  case \"boolean\":\n  case \"object\":\n  case \"function\"\
    :\n    compare = typeA - typeB;\n    break;\n  default:\n    compare = typeA -\
    \ typeB;\n  }\n  return compare;\n}\n\nmodule.exports = compare_one;\n\n},{}],8:[function(_dereq_,module,exports){\n\
    \"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator\
    \ === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return\
    \ obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !==\
    \ Symbol.prototype ? \"symbol\" : typeof obj; };\n", "    if( isNaN(a) || isNaN(b)\
    \ ){\n        return; // NaN will never be equal to anything, even itself\n  \
    \  }\n    // Check if they are equal\n    if(a === b){\n        return a;\n  \
    \  }\n    var a_is_num = isNumber(a);\n    var b_is_num = isNumber(b);\n    if(a_is_num\
    \ === b_is_num){\n        // Both are integers\n        if(a_is_num){\n      \
    \      return b;\n        }\n        return a;\n    }\n    // One of them is NaN\n\
    \    if(a_is_num){\n        if(b_is_num){\n            return b;\n        }\n\
    \    }else{\n        if(b_is_num){\n            return a;\n        }\n    }\n\
    \    // Both are strings\n    if(a.is_empty() === b.is_empty()){\n        // Both\
    \ are empty strings\n        if(b.is_empty()){\n            return a;\n      \
    \  }\n        // Both are non-empty strings\n        if(a.is_empty()){\n     \
    \       return b;\n        }\n    }\n    // One of the strings is empty\n    if(a.is_empty()){\n\
    \        if(b.is_empty()){\n            return a;\n        }\n    }\n    // One\
    \ of the strings is empty\n    if(b.is_empty()){\n        if(a.is_empty()){\n\
    \            return b;\n        }\n    }\n    // Both are non-strings\n    if(a.is_empty()\
    \ === b.is_empty()){\n        // Both are undefined\n        if(b.is_empty()){\n\
    \            return; // undefined is equal to everything\n        }\n        if(a.is_empty()){\n\
    \            return b;\n        }\n        // One is undefined, the other is non-undefined\n\
    \        if(a.is_empty() === false){\n            return b;\n        }\n     \
    \   // One is non-undefined, the other is undefined\n        if(a.is_empty() ===\
    \ true){\n            return a;\n        }\n    }\n    // One is a string, the\
    \ other is an integer\n    if(a.is_empty() === false){\n        if(b.is_empty()){\n\
    \            return a;\n        }\n    }\n    // One is an integer, the other\
    \ is a string\n    if(b.is_empty() === false){\n        if(a.is_empty()){\n  \
    \          return b;\n        }\n    }\n    // Both are numbers\n    if(a.is_empty()\
    \ === false && b.is_empty() === false){\n        if(a.compare(b) > 0){\n     \
    \       return b;\n        }\n        if(a.compare(b) < 0){\n            return\
    \ a;\n        }\n    }\n    // One is a number, the other is a string\n    if(a.is_empty()\
    \ === true){\n        if(b.is_empty()){\n            return a;\n        }\n  \
    \  }\n    // One is a string, the other is a number\n    if(b.is_empty() === true){\n\
    \        if(a.is_empty()){\n            return b;\n        }\n    }\n    // One\
    \ is a ", "    return !a ? !b ? a ? b : b : a ? b : a;\n}\n", "    if(a === b)\
    \ return a;\n    if(typeof a == \"string\"){\n        a = a.trim();\n        b\
    \ = b.trim();\n        if(a == \".\" || b == \".\"){\n            return a;\n\
    \        }\n    }\n    if(typeof a != \"string\" ){\n        return undefined;\n\
    \    }\n    if(typeof b != \"string\"){\n        return undefined;\n    }\n  \
    \  a = a.split(\"\");\n    b = b.split(\"\");\n    for(var i = 0; i < a.length;\
    \ i++){\n        if(a[i] != b[i]){\n            return undefined;\n        }\n\
    \    }\n    return a;\n}\n", "    if (a === b) return a;\n    if (typeof a !==\
    \ typeof b) return; // NaN, Infinity\n    if (typeof a === \"number\") return\
    \ (a>b) ? 1 : (b>a) ? -1 : 0;\n    if (a === \"string\") return (a>b) ? 1 : (b>a)\
    \ ? -1 : 0;\n    if (a.length === undefined && b.length === undefined) return\
    \ 0;\n    if (a.length > b.length) return 1;\n    if (a.length < b.length) return\
    \ -1;\n    for (var i = 0; i < a.length; i++){\n        var a_num = parseInt(a[i]);\n\
    \        var b_num = parseInt(b[i]);\n        if (a_num > b_num) return 1;\n \
    \       if (a_num < b_num) return -1;\n    }\n}\n", "  if(typeof a === typeof\
    \ b){\n    if(a === b){\n      return a;\n    }\n    return typeof a > typeof\
    \ b ? a : b;\n  }\n  return false;\n}\n", "    if (typeof a !== typeof b){\n \
    \       return undefined;\n    }\n    if (typeof a === 'number'){\n        return\
    \ a > b ? a : b;\n    }\n    if (typeof a === 'string'){\n        var aParts =\
    \ a.split(\".\"),\n            bParts = b.split(\".\");\n        var maxLength\
    \ = Math.max(aParts.length, bParts.length);\n        for (var i = 0; i < maxLength;\
    \ i++){\n            var aPart = aParts[i].replace(/^,/, ''),\n              \
    \  bPart = bParts[i].replace(/^,/, ''),\n                aPartIsNumeric = !!aPart.match(/^\\\
    d+$/),\n                bPartIsNumeric = !!bPart.match(/^\\d+$/);\n          \
    \  if (aPartIsNumeric && !bPartIsNumeric){\n                return parseFloat(aPart)\
    \ > parseFloat(bPart) ? aPart : bPart;\n            }\n            if (!aPartIsNumeric\
    \ && bPartIsNumeric){\n                return parseFloat(bPart) > parseFloat(aPart)\
    \ ? bPart : aPart;\n            }\n        }\n        return a.localeCompare(b);\n\
    \    }\n}", "  if (typeof(a) != typeof(b)) return undefined // both are strings\
    \ or numbers\n  if (typeof(a) == 'number'){\n    if (a < b) return a // a is smaller\
    \ than b\n    return b // b is smaller than a\n  } else if (a < b) return a //\
    \ a is string\n  return b // b is string\n}\n", "    if(a > b){\n        return\
    \ a;\n    }\n    if(a < b){\n        return b;\n    }\n    if(a.constructor ===\
    \ String){\n        a = parseFloat(a.replace(/^,/,''));\n        b = parseFloat(b.replace(/^,/,''));\n\
    \        if(b === NaN){\n            return;\n        }\n        if(b === Infinity){\n\
    \            return a;\n        }\n        return b ? a : b;\n    }\n    if(isNaN(a)\
    \ || isNaN(b)){\n        return;\n    }\n    if(a === b){\n        return a;\n\
    \    }\n    if(a === Infinity){\n        return b;\n    }\n    if(b === Infinity){\n\
    \        return a;\n    }\n    return a > b ? a : b;\n}\n", "    if (typeof a\
    \ === \"number\" && typeof b === \"number\"){\n        return a > b ? a : b;\n\
    \    } else if (typeof a === \"number\"){\n        return 1;\n    } else if (typeof\
    \ b === \"number\"){\n        return -1;\n    } else if (typeof a === \"string\"\
    \ || typeof b === \"string\"){\n        return a > b ? a : b;\n    } else {\n\
    \        return undefined;\n    }\n}\n", "    var result\n    if(typeof a ===\
    \ \"number\"){\n        result = a > b ? a : b\n    }else if(typeof a === \"string\"\
    ){\n        if(a == \"\" || b == \"\"){\n            result = a > b ? a : b\n\
    \        }else{\n            result = a.localeCompare(b)\n        }\n    }else\
    \ if(typeof a === \"object\"){\n        if(a != null && b != null){\n        \
    \    result = compare_one(a.value, b.value)\n        }\n    }\n    return result\n\
    }\n", "  if(typeof a === typeof b)\n    return a > b ? b : a;\n  if(typeof a ===\
    \ typeof Number)\n    return Number(a) > Number(b) ? Number(b) : Number(a);\n\
    \  if(typeof a === typeof String)\n    return String(a) > String(b) ? String(b)\
    \ : String(a);\n  if(typeof a === typeof Boolean)\n    return Boolean(a) > Boolean(b)\
    \ ? Boolean(b) : Boolean(a);\n  if(a === null)\n    return b === null ? null :\
    \ a;\n  return false;\n}\n", "    if(a === b) return a;\n    if(typeof(a) ===\
    \ 'number' && typeof(b) === 'number') return Math.max(a, b);\n    if(a === null\
    \ || b === null) return a === b;\n    if(typeof(a) !== 'string' && typeof(b) !==\
    \ 'string') return false;\n    if(a === undefined) return b === undefined;\n \
    \   if(b === undefined) return a === undefined;\n    return parseFloat(a) > parseFloat(b)\
    \ ? a : b;\n}\n", "\tvar c = a.replace( /[^0-9-.]/g , \"-\" );\n\tvar d = b.replace(\
    \ /[^0-9-.]/g , \"-\" );\n\tif( c === d ) {\n\t\treturn c;\n\t} else {\n\t\tif(\
    \ isNaN( parseFloat( c ) ) ) {\n\t\t\treturn c;\n\t\t} else {\n\t\t\treturn d;\n\
    \t\t}\n\t}\n}\n", "  if(typeof(a) != typeof(b)) return undefined;\n  var a_num\
    \ = parseInt(a);\n  var b_num = parseInt(b);\n  if(!a_num || !b_num) return undefined;\n\
    \  if(a_num == b_num) return a_num;\n  var a_str = a.toString();\n  var b_str\
    \ = b.toString();\n  if(a_str.search(/^-?\\d*\\.?\\d+$/) == -1 && b_str.search(/^-?\\\
    d*\\.?\\d+$/) == -1){\n    if(b_str.search(/^-?\\d*\\.?\\d+$/) == -1) return b_num;\n\
    \    return a_num;\n  }\n  return a_num > b_num ? a_num : b_num;\n}\n", "    if(a\
    \ === b){\n        return a;\n    }\n    if(typeof a === \"string\" && typeof\
    \ b === \"string\" && a.trim() === b.trim()){\n        return a;\n    }\n    if(a\
    \ < b){\n        return a;\n    }\n    return b;\n}\n", "\tvar aNum = parseFloat(a);\n\
    \tvar bNum = parseFloat(b);\n\tif (aNum != bNum){\n\t\treturn aNum > bNum ? 1\
    \ : -1;\n\t}\n\taNum = aNum.toString().replace(/[\\.,]/g, \"\");\n\tbNum = bNum.toString().replace(/[\\\
    .,]/g, \"\");\n\tif (aNum == bNum){\n\t\treturn aNum > bNum ? 1 : -1;\n\t}\n\t\
    return aNum > bNum ? 1 : -1;\n}\n", "    if (a === b) {\n        return a;\n \
    \   }\n\n    var a_type = typeof(a),\n    b_type = typeof(b);\n\n    if (a_type\
    \ === \"number\" || a_type === \"string\") {\n        //If strings are compared,\
    \ remove extra zeroes from numbers\n        a = a.toString().replace(/0+$/, '');\n\
    \        b = b.toString().replace(/0+$/, '');\n    }\n\n    // If one or both\
    \ of the values is undefined or null, return a undefined\n    // result\n    if\
    \ (a === null || b === null) {\n        return undefined;\n    }\n\n    // If\
    \ both are strings or both are numbers, remove extra zeroes from numbers\n   \
    \ if (a_type === \"string\" || b_type === \"string\") {\n        a = a.replace(/0+$/,\
    \ '');\n        b = b.replace(/0+$/, '');\n    }\n\n    // If both are numbers,\
    \ compare the values\n    if (a_type === \"number\") {\n        return (b - a);\n\
    \    }\n\n    // If both are objects, compare the values\n    if (a_type === \"\
    object\" && b_type === \"object\") {\n        var keys = Object.keys(a).sort(),\n\
    \        i,\n        l = keys.length,\n        compared = {},\n        a_type\
    \ = typeof(a),\n        b_type = typeof(b);\n\n        for(i = 0; i < l; i++){\n\
    \            if (compared[keys[i]] === undefined) {\n                compared[keys[i]]\
    \ = 1;\n            } else {\n                compared[keys[i]] += 1;\n      \
    \      }\n        }\n\n        for(i = 0; i < l; i++){\n            var key =\
    \ keys[i];\n            if (compared[key] === undefined) {\n                compared[key]\
    \ = a[key];\n            } else {\n                compared[key] > a[key] ? compared[key]\
    \ = a[key] : compared[key] = b[key];\n            }\n        }\n\n        return\
    \ compared;\n    }\n}\n", "  if (!(typeof(a) === 'string' || typeof(b) === 'string'))\n\
    \    return undefined;\n  a = a.split(/[\\.\\(\\)]/);\n  b = b.split(/[\\.\\(\\\
    )]/);\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] == b[i])\n      continue;\n\
    \    if (a[i] < b[i])\n      return a;\n    else \n      return b;\n  }\n  return\
    \ undefined;\n}\n", "    if (a === b){\n        return undefined;\n    }\n   \
    \ var x = parseFloat(a) || 0;\n    var y = parseFloat(b) || 0;\n    var is_same\
    \ = (Math.abs(x-y) < 0.0001);\n    if (is_same){\n        return '';\n    }\n\
    \    // This is not a precise comparison, so let's test to see if either is zero\n\
    \    if (x === 0){\n        return '0';\n    }\n    if (y === 0){\n        return\
    \ '0';\n    }\n    return x > y ? x : y;\n}", "  if (a === undefined || b ===\
    \ undefined)\n    return;\n  \n  a = (a instanceof String) ? parseFloat(a.replace(/[^\\\
    .\\d]/g, \"\")) : a;\n  b = (b instanceof String) ? parseFloat(b.replace(/[^\\\
    .\\d]/g, \"\")) : b;\n  if (a === b)\n    return;\n\n  if (a > b)\n    return\
    \ a;\n  else\n    return b;\n}\n", "\tif (is_number(a) && is_number(b))\n\t\t\
    return _compare_number_one(b, a);\n\telse if (!is_number(a) || !is_number(b))\n\
    \t\treturn undefined;\n\telse if (is_string(a) && is_string(b))\n\t\treturn compare_one(parseFloat(a),\
    \ parseFloat(b));\n\telse\n\t\treturn undefined;\n}\n", "  if ( a == b ) return\
    \ a;\n  if ( parseFloat(a) > parseFloat(b) ) return a;\n  return b;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
